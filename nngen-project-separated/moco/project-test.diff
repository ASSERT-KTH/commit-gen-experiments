diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index aec3637 . . 41810ea 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 33 , 9 + 33 , 14 @ @ public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> } <nl> <nl> protected final ActualHttpServer createMergeServer ( final ActualHttpServer thatServer ) { <nl> - return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; <nl> + return newBaseServer ( mergePort ( this , thatServer ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; <nl> } <nl> <nl> + private Optional < Integer > mergePort ( final ActualHttpServer thisServer , final ActualHttpServer thatServer ) { <nl> + return thisServer . getPort ( ) . or ( thatServer . getPort ( ) ) ; <nl> + } <nl> + <nl> + <nl> private HttpsCertificate mergedCertificate ( final HttpsCertificate one , final HttpsCertificate other ) { <nl> if ( one ! = null ) { <nl> return one ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index e1968f4 . . aec3637 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 15 , 30 + 15 , 38 @ @ import com . google . common . base . Optional ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> - private final Optional < HttpsCertificate > certificate ; <nl> + private final HttpsCertificate certificate ; <nl> <nl> protected ActualHttpServer ( final Optional < Integer > port , <nl> final Optional < HttpsCertificate > certificate , <nl> final MocoMonitor monitor , final MocoConfig . . . configs ) { <nl> super ( port , monitor , configs ) ; <nl> - this . certificate = certificate ; <nl> + this . certificate = certificate . orNull ( ) ; <nl> } <nl> <nl> public final boolean isSecure ( ) { <nl> - return certificate . isPresent ( ) ; <nl> + return certificate ! = null ; <nl> } <nl> <nl> public final Optional < HttpsCertificate > getCertificate ( ) { <nl> - return certificate ; <nl> + return Optional . fromNullable ( certificate ) ; <nl> } <nl> <nl> protected final ActualHttpServer createMergeServer ( final ActualHttpServer thatServer ) { <nl> - return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , this . certificate . or ( thatServer . certificate ) ) ; <nl> + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; <nl> } <nl> <nl> - private ActualHttpServer newBaseServer ( final Optional < Integer > port , final Optional < HttpsCertificate > certificate ) { <nl> - if ( certificate . isPresent ( ) ) { <nl> - return createHttpsLogServer ( port , certificate . get ( ) ) ; <nl> + private HttpsCertificate mergedCertificate ( final HttpsCertificate one , final HttpsCertificate other ) { <nl> + if ( one ! = null ) { <nl> + return one ; <nl> + } <nl> + <nl> + return other ; <nl> + } <nl> + <nl> + private ActualHttpServer newBaseServer ( final Optional < Integer > port , final HttpsCertificate certificate ) { <nl> + if ( certificate ! = null ) { <nl> + return createHttpsLogServer ( port , certificate ) ; <nl> } <nl> <nl> return createLogServer ( port ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 216eb4b . . 7f31454 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 113 , 11 + 113 , 11 @ @ public final class ApiUtils { <nl> } <nl> <nl> public static ContentResource file ( final Resource filename , final Charset charset ) { <nl> - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . fromNullable ( charset ) , null ) ; <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final Resource filename , final Charset charset ) { <nl> - return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . fromNullable ( charset ) ) ; <nl> + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; <nl> } <nl> <nl> private ApiUtils ( ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> index 372611d . . c65654a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public final class ResourceConfigApplierFactory { <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> protected Resource newResource ( final MocoConfig config ) { <nl> - return fileResource ( file , Optional . < Charset > absent ( ) , config ) ; <nl> + return fileResource ( file , null , config ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 419759b . . c48fc95 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 44 , 13 + 44 , 13 @ @ public final class ResourceFactory { <nl> } ) ; <nl> } <nl> <nl> - public static ContentResource fileResource ( final Resource filename , final Optional < Charset > charset , <nl> + public static ContentResource fileResource ( final Resource filename , final Charset charset , <nl> final MocoConfig config ) { <nl> return contentResource ( id ( MocoConfig . FILE _ ID ) , fileConfigApplier ( MocoConfig . FILE _ ID , filename ) , <nl> new FileResourceReader ( filename , charset , config ) ) ; <nl> } <nl> <nl> - public static ContentResource classpathFileResource ( final Resource filename , final Optional < Charset > charset ) { <nl> + public static ContentResource classpathFileResource ( final Resource filename , final Charset charset ) { <nl> return contentResource ( id ( " pathresource " ) , DO _ NOTHING _ APPLIER , <nl> new ClasspathFileResourceReader ( filename , charset ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 6fa14b8 . . 58bad83 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 18 , 9 + 18 , 9 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> protected abstract byte [ ] doReadFor ( Optional < ? extends Request > request ) ; <nl> <nl> private final Resource filename ; <nl> - private final Optional < Charset > charset ; <nl> + private final Charset charset ; <nl> <nl> - protected AbstractFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { <nl> + protected AbstractFileResourceReader ( final Resource filename , final Charset charset ) { <nl> this . charset = charset ; <nl> this . filename = filename ; <nl> } <nl> @ @ - 32 , 8 + 32 , 8 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> <nl> private MessageContent asMessageContent ( final byte [ ] content ) { <nl> MessageContent . Builder builder = content ( ) . withContent ( content ) ; <nl> - if ( charset . isPresent ( ) ) { <nl> - builder . withCharset ( charset . get ( ) ) ; <nl> + if ( charset ! = null ) { <nl> + builder . withCharset ( charset ) ; <nl> } <nl> <nl> return builder . build ( ) ; <nl> @ @ - 42 , 7 + 42 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> @ Override <nl> public final MediaType getContentType ( final HttpRequest request ) { <nl> String targetFilename = this . filename ( of ( request ) ) ; <nl> - return new FileContentType ( targetFilename , charset . orNull ( ) ) . getContentType ( ) ; <nl> + return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; <nl> } <nl> <nl> protected final String filename ( final Optional < ? extends Request > request ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index efa73e1 . . 91a480c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . io . ByteStreams . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> public final class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> - public ClasspathFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { <nl> + public ClasspathFileResourceReader ( final Resource filename , final Charset charset ) { <nl> super ( filename , charset ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> index 151abe8 . . d11b3e9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> @ @ - 17 , 10 + 17 , 10 @ @ public final class FileResourceReader extends AbstractFileResourceReader { <nl> private final MocoConfig config ; <nl> <nl> public FileResourceReader ( final Resource file ) { <nl> - this ( file , Optional . < Charset > absent ( ) , null ) ; <nl> + this ( file , null , null ) ; <nl> } <nl> <nl> - public FileResourceReader ( final Resource file , final Optional < Charset > charset , final MocoConfig config ) { <nl> + public FileResourceReader ( final Resource file , final Charset charset , final MocoConfig config ) { <nl> super ( file , charset ) ; <nl> this . config = config ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> index f722806 . . 5cbf22c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> @ @ - 13 , 13 + 13 , 13 @ @ import static org . junit . Assert . assertThat ; <nl> public class ClasspathFileResourceReaderTest { <nl> @ Test <nl> public void should _ return _ class _ path _ file _ content ( ) { <nl> - ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " foo . response " ) , Optional . < Charset > absent ( ) ) ; <nl> + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " foo . response " ) , null ) ; <nl> assertThat ( reader . readFor ( Optional . < Request > absent ( ) ) . toString ( ) , is ( " foo . response " ) ) ; <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void should _ throw _ exception _ when _ file _ does _ not _ exist ( ) { <nl> - ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , Optional . < Charset > absent ( ) ) ; <nl> + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , null ) ; <nl> reader . readFor ( Optional . < Request > absent ( ) ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index df15918 . . e2d3823 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 52 , 9 + 52 , 7 @ @ import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler <nl> import static com . github . dreamhead . moco . handler . SequenceHandler . newSeq ; <nl> import static com . github . dreamhead . moco . internal . ApiUtils . resourceToResourceHandler ; <nl> import static com . github . dreamhead . moco . internal . ApiUtils . textToResource ; <nl> - import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; <nl> - import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . methodResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; <nl> @ @ - 400 , 19 + 398 , 15 @ @ public final class Moco { <nl> } <nl> <nl> public static ContentResource file ( final Resource filename ) { <nl> - return file ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> + return ApiUtils . file ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> } <nl> <nl> public static ContentResource file ( final String filename , final Charset charset ) { <nl> - return file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> + return ApiUtils . file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static ContentResource file ( final Resource filename , final Charset charset ) { <nl> - return file ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> - } <nl> - <nl> - private static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { <nl> - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> + return ApiUtils . file ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final String filename ) { <nl> @ @ - 420 , 19 + 414 , 15 @ @ public final class Moco { <nl> } <nl> <nl> public static ContentResource pathResource ( final Resource filename ) { <nl> - return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> + return ApiUtils . pathResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final String filename , final Charset charset ) { <nl> - return pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> + return ApiUtils . pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final Resource filename , final Charset charset ) { <nl> - return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> - } <nl> - <nl> - private static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> - return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; <nl> + return ApiUtils . pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static Resource version ( final String version ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 278df92 . . a50b2b8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 19 , 17 + 19 , 22 @ @ import com . github . dreamhead . moco . monitor . DefaultLogFormatter ; <nl> import com . github . dreamhead . moco . monitor . FileLogWriter ; <nl> import com . github . dreamhead . moco . monitor . LogMonitor ; <nl> import com . github . dreamhead . moco . monitor . LogWriter ; <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl> <nl> import java . io . File ; <nl> import java . nio . charset . Charset ; <nl> <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> public final class ApiUtils { <nl> @ @ - 109 , 4 + 114 , 12 @ @ public final class ApiUtils { <nl> <nl> private ApiUtils ( ) { <nl> } <nl> + <nl> + public static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> + } <nl> + <nl> + public static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; <nl> + } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> index ee94d9e . . 3c5610a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public final class WatcherFactory { <nl> final Iterable < File > configurationFiles , <nl> final FileRunner fileRunner ) { <nl> ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> - return factory . createWatcher ( listener ( fileRunner ) , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> + return factory . createWatcher ( listener ( fileRunner ) , files . toArray ( new File [ 0 ] ) ) ; <nl> } <nl> <nl> private Function < File , Void > listener ( final FileRunner fileRunner ) {
diff - - git a / build . gradle b / build . gradle <nl> index bac307f . . 5964970 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 8 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 2 . 1 ' <nl> - mockitoVersion = ' 2 . 24 . 5 ' <nl> + mockitoVersion = ' 2 . 25 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 7 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 '
diff - - git a / build . gradle b / build . gradle <nl> index edc7ea1 . . bac307f 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 75 , 7 + 75 , 7 @ @ subprojects { <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> nettyVersion = ' 4 . 1 . 33 . Final ' <nl> - slf4jVersion = ' 1 . 7 . 25 ' <nl> + slf4jVersion = ' 1 . 7 . 26 ' <nl> jacksonVersion = ' 2 . 9 . 8 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 2 . 1 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> index cfbbb02 . . 07eba56 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ public final class FileLogWriter implements LogWriter { <nl> this . charset = asCharset ( charset ) ; <nl> } <nl> <nl> - private Charset asCharset ( Charset charset ) { <nl> + private Charset asCharset ( final Charset charset ) { <nl> if ( charset ! = null ) { <nl> return charset ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> index 08f603f . . cfbbb02 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> @ @ - 12 , 7 + 12 , 15 @ @ public final class FileLogWriter implements LogWriter { <nl> <nl> public FileLogWriter ( final String filename , final Charset charset ) { <nl> this . file = new File ( filename ) ; <nl> - this . charset = ( charset ! = null ? charset : Charset . defaultCharset ( ) ) ; <nl> + this . charset = asCharset ( charset ) ; <nl> + } <nl> + <nl> + private Charset asCharset ( Charset charset ) { <nl> + if ( charset ! = null ) { <nl> + return charset ; <nl> + } <nl> + <nl> + return Charset . defaultCharset ( ) ; <nl> } <nl> <nl> @ Override
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 104cc8b . . 278df92 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . google . common . base . Function ; <nl> - import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl>
diff - - git a / build . gradle b / build . gradle <nl> index 20ca8e0 . . edc7ea1 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 23 , 7 + 23 , 7 @ @ idea { <nl> subprojects { <nl> apply plugin : ' java ' <nl> group = ' com . github . dreamhead ' <nl> - version = ' 0 . 12 . 0 - SNAPSHOT ' <nl> + version = ' 0 . 12 . 1 - SNAPSHOT ' <nl> sourceCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> targetCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f442795 . . abb8d77 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 174 , 11 + 174 , 11 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoMonitor log ( final String filename ) { <nl> - return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; <nl> + return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , null ) ) ; <nl> } <nl> <nl> public static MocoMonitor log ( final String filename , final Charset charset ) { <nl> - return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; <nl> + return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher by ( final String content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 55f5810 . . 104cc8b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 76 , 7 + 76 , 7 @ @ public final class ApiUtils { <nl> return new DefaultFailoverExecutor ( new File ( file ) ) ; <nl> } <nl> <nl> - public static LogWriter fileLogWriter ( final String filename , final Optional < Charset > charset ) { <nl> + public static LogWriter fileLogWriter ( final String filename , final Charset charset ) { <nl> return new FileLogWriter ( filename , charset ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> index b1d2392 . . 08f603f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . monitor ; <nl> <nl> import com . github . dreamhead . moco . MocoException ; <nl> - import com . google . common . base . Optional ; <nl> import com . google . common . io . Files ; <nl> <nl> import java . io . File ; <nl> @ @ - 9 , 17 + 8 , 17 @ @ import java . nio . charset . Charset ; <nl> <nl> public final class FileLogWriter implements LogWriter { <nl> private final File file ; <nl> - private Optional < Charset > charset ; <nl> + private final Charset charset ; <nl> <nl> - public FileLogWriter ( final String filename , final Optional < Charset > charset ) { <nl> + public FileLogWriter ( final String filename , final Charset charset ) { <nl> this . file = new File ( filename ) ; <nl> - this . charset = charset ; <nl> + this . charset = ( charset ! = null ? charset : Charset . defaultCharset ( ) ) ; <nl> } <nl> <nl> @ Override <nl> public void write ( final String content ) { <nl> try { <nl> - Files . append ( content , file , charset . or ( Charset . defaultCharset ( ) ) ) ; <nl> + Files . append ( content , file , charset ) ; <nl> } catch ( Exception e ) { <nl> throw new MocoException ( e ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> index d3f3d84 . . 842cbe0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> @ @ - 138 , 6 + 138 , 9 @ @ public final class FileContainer extends TextContainer { <nl> public FileContainer build ( ) { <nl> FileContainer container = new FileContainer ( name ) ; <nl> container . charset = toCharset ( charset ) . orNull ( ) ; <nl> + if ( charset = = null ) { <nl> + container . content = null ; <nl> + } <nl> return container ; <nl> } <nl>
diff - - git a / build . gradle b / build . gradle <nl> index 441f471 . . 20ca8e0 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 8 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 2 . 1 ' <nl> - mockitoVersion = ' 2 . 24 . 0 ' <nl> + mockitoVersion = ' 2 . 24 . 5 ' <nl> httpComponentVersion = ' 4 . 5 . 7 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> index f9044f0 . . 0ee5cb8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> @ @ - 25 , 12 + 25 , 6 @ @ public final class FileContainer extends TextContainer { <nl> this . content = container ; <nl> } <nl> <nl> - private FileContainer ( final TextContainer name , final Optional < Charset > charset ) { <nl> - this . name = name ; <nl> - this . charset = charset ; <nl> - this . content = null ; <nl> - } <nl> - <nl> public TextContainer getName ( ) { <nl> return name ; <nl> } <nl> @ @ - 143 , 7 + 137 , 9 @ @ public final class FileContainer extends TextContainer { <nl> } <nl> <nl> public FileContainer build ( ) { <nl> - return new FileContainer ( name , toCharset ( charset ) ) ; <nl> + FileContainer container = new FileContainer ( name ) ; <nl> + container . charset = toCharset ( charset ) ; <nl> + return container ; <nl> } <nl> <nl> private Optional < Charset > toCharset ( final String charset ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index cb46d09 . . 6bc8fcc 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ public class TextContainer implements Container { <nl> private static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ; <nl> - private Map < String , TextContainer > props = ImmutableMap . of ( ) ; <nl> + private Map < String , TextContainer > props ; <nl> <nl> private TextContainer ( final String text , final String operation , <nl> final Map < String , TextContainer > props ) { <nl> @ @ - 28 , 6 + 28 , 7 @ @ public class TextContainer implements Container { <nl> } <nl> <nl> protected TextContainer ( ) { <nl> + this . props = ImmutableMap . of ( ) ; <nl> } <nl> <nl> public ContentResource asResource ( ) {
diff - - git a / README . md b / README . md <nl> index 4efc1e2 . . abb364b 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 80 , 7 + 80 , 7 @ @ git clone git @ github . com : dreamhead / moco . git <nl> Check out what you can help [ here ] ( moco - doc / plan . md ) if you do not have any existing idea . <nl> <nl> # # Copyright and license <nl> - Copyright 2012 - 2018 ZHENG Ye <nl> + Copyright 2012 - 2019 ZHENG Ye <nl> <nl> Licensed under MIT License ( the " License " ) ; You may obtain a copy of the License in the LICENSE file , or at : <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 725eb2c . . 458d666 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public final class Failover { <nl> this . statuses = asProxyStatuses ( statuses ) ; <nl> } <nl> <nl> - private ImmutableSet < Integer > asProxyStatuses ( int [ ] proxyStatuses ) { <nl> + private ImmutableSet < Integer > asProxyStatuses ( final int [ ] proxyStatuses ) { <nl> if ( proxyStatuses . length = = 0 ) { <nl> return ImmutableSet . of ( HttpResponseStatus . BAD _ REQUEST . code ( ) ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> index 2590625 . . 05f4d2c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import com . github . dreamhead . moco . parser . model . ProxyContainer ; <nl> <nl> import java . io . IOException ; <nl> <nl> - public class FailoverContainerDeserializer extends JsonDeserializer < FailoverContainer > { <nl> + public final class FailoverContainerDeserializer extends JsonDeserializer < FailoverContainer > { <nl> @ Override <nl> public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> index 39bef6a . . 8f9db46 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . base . MoreObjects ; <nl> import static com . github . dreamhead . moco . Moco . playback ; <nl> <nl> @ JsonDeserialize ( using = FailoverContainerDeserializer . class ) <nl> - public class FailoverContainer { <nl> + public final class FailoverContainer { <nl> private String file ; <nl> private int [ ] status ; <nl> <nl> @ @ - 33 , 7 + 33 , 7 @ @ public class FailoverContainer { <nl> } <nl> <nl> @ Override <nl> - public final String toString ( ) { <nl> + public String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " file " , file ) <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class FailoverContainer { <nl> return new Builder ( ) ; <nl> } <nl> <nl> - public static class Builder { <nl> + public static final class Builder { <nl> private String file ; <nl> private int [ ] status ; <nl> <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class FailoverContainer { <nl> return this ; <nl> } <nl> <nl> - public Builder withStatus ( int [ ] status ) { <nl> + public Builder withStatus ( final int [ ] status ) { <nl> this . status = status ; <nl> return this ; <nl> }
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 2c6d042 . . ff875c2 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1118 , 7 + 1118 , 7 @ @ server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " , playback ( " play <nl> } <nl> ` ` ` <nl> <nl> - # # # # Customize Proxy Status <nl> + # # # # Customize Failover / Playback Status <nl> * * @ Since 0 . 12 . 0 * * <nl> <nl> You can customize what statuses means remote server is not available . <nl> @ @ - 1129 , 6 + 1129 , 26 @ @ You can customize what statuses means remote server is not available . <nl> server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " , failover ( " failover . json " , 400 , 500 ) ) ) ; <nl> ` ` ` <nl> <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + " response " : <nl> + { <nl> + " proxy " : <nl> + { <nl> + " url " : " http : / / www . github . com " , <nl> + " failover " : { <nl> + " file " : " failover . json " , <nl> + " status " : [ 404 , 500 ] <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # # Batch URLs <nl> * * @ Since 0 . 9 . 1 * * <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> index 63e698d . . af5bf1b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . FailoverContainer ; <nl> import com . github . dreamhead . moco . parser . model . ProxyContainer ; <nl> import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> @ @ - 35 , 8 + 36 , 8 @ @ public final class ProxyContainerDeserializer extends JsonDeserializer < ProxyCont <nl> private String from ; <nl> private String to ; <nl> <nl> - private String failover ; <nl> - private String playback ; <nl> + private FailoverContainer failover ; <nl> + private FailoverContainer playback ; <nl> <nl> public ProxyContainer toProxyContainer ( ) { <nl> return builder ( ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> index 619df26 . . b247b0a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> @ @ - 73 , 8 + 73 , 8 @ @ public class ProxyContainer { <nl> <nl> public static class Builder { <nl> private TextContainer url ; <nl> - private String failover ; <nl> - private String playback ; <nl> + private FailoverContainer failover ; <nl> + private FailoverContainer playback ; <nl> <nl> private String from ; <nl> private String to ; <nl> @ @ - 99 , 12 + 99 , 12 @ @ public class ProxyContainer { <nl> return this ; <nl> } <nl> <nl> - public final Builder withFailover ( final String failover ) { <nl> + public final Builder withFailover ( final FailoverContainer failover ) { <nl> this . failover = failover ; <nl> return this ; <nl> } <nl> <nl> - public final Builder withPlayback ( final String playback ) { <nl> + public final Builder withPlayback ( final FailoverContainer playback ) { <nl> this . playback = playback ; <nl> return this ; <nl> } <nl> @ @ - 122 , 8 + 122 , 8 @ @ public class ProxyContainer { <nl> container . url = url ; <nl> container . from = from ; <nl> container . to = to ; <nl> - container . failover = ( failover ! = null ) ? new FailoverContainer ( failover ) : null ; <nl> - container . playback = ( playback ! = null ) ? new FailoverContainer ( playback ) : null ; <nl> + container . failover = failover ; <nl> + container . playback = playback ; <nl> return container ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 10e4be4 . . f442795 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 568 , 13 + 568 , 13 @ @ public final class Moco { <nl> <nl> public static Failover failover ( final String file , final int . . . statuses ) { <nl> return new Failover ( ApiUtils . failoverExecutor ( <nl> - checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER , <nl> + checkNotNullOrEmpty ( file , " Failover filename should not be null " ) ) , FailoverStrategy . FAILOVER , <nl> checkNotNull ( statuses , " Proxy status should not be null " ) ) ; <nl> } <nl> <nl> public static Failover playback ( final String file , final int . . . statuses ) { <nl> return new Failover ( ApiUtils . failoverExecutor ( <nl> - checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK , <nl> + checkNotNullOrEmpty ( file , " Playback filename should not be null " ) ) , FailoverStrategy . PLAYBACK , <nl> checkNotNull ( statuses , " Proxy status should not be null " ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> index ff2a593 . . 3ebe7c9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . deserializer ; <nl> <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonProcessingException ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> @ @ - 12 , 7 + 11 , 7 @ @ import java . io . IOException ; <nl> <nl> public class FailoverContainerDeserializer extends JsonDeserializer < FailoverContainer > { <nl> @ Override <nl> - public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException , JsonProcessingException { <nl> + public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> return new FailoverContainer ( jp . getText ( ) ) ;
diff - - git a / build . gradle b / build . gradle <nl> index 6d553ce . . ea2ffe2 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 80 , 7 + 80 , 7 @ @ subprojects { <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 2 . 1 ' <nl> mockitoVersion = ' 2 . 23 . 4 ' <nl> - httpComponentVersion = ' 4 . 5 . 6 ' <nl> + httpComponentVersion = ' 4 . 5 . 7 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 ' <nl> jsonAssertVersion = ' 1 . 5 . 0 '
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 503d8c6 . . 89554b4 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1118 , 6 + 1118 , 16 @ @ server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " , playback ( " play <nl> } <nl> ` ` ` <nl> <nl> + # # # # Customize Proxy Status <nl> + <nl> + You can customize what statuses means remote server is not available . <nl> + <nl> + * Java API <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " , failover ( " failover . json " ) , 400 , 500 ) ) ; <nl> + ` ` ` <nl> + <nl> # # # # Batch URLs <nl> * * @ Since 0 . 9 . 1 * * <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 0b11e3d . . 5a3854d 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 299 , 13 + 299 , 14 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ failover _ for _ specified _ status _ with _ resource _ proxy ( ) throws Exception { <nl> - server . request ( by ( uri ( " / target " ) ) ) . response ( status ( 500 ) ) ; <nl> - server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( text ( remoteUrl ( " / target " ) ) , failover ( " src / test / resources / failover . response " ) , 500 ) ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( seq ( status ( 500 ) , status ( 400 ) ) ) ; <nl> + server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( text ( remoteUrl ( " / target " ) ) , failover ( " src / test / resources / failover . response " ) , 500 , 400 ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> assertThat ( helper . postContent ( remoteUrl ( " / proxy " ) , " proxy " ) , is ( " proxy " ) ) ; <nl> + assertThat ( helper . postContent ( remoteUrl ( " / proxy " ) , " proxy " ) , is ( " proxy " ) ) ; <nl> } <nl> } ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f837ff7 . . fe99457 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 477 , 7 + 477 , 8 @ @ public final class Moco { <nl> } <nl> <nl> public static ResponseHandler proxy ( final ProxyConfig proxyConfig , final Failover failover , final int . . . statuses ) { <nl> - return new ProxyBatchResponseHandler ( checkNotNull ( proxyConfig ) , checkNotNull ( failover ) ) ; <nl> + return new ProxyBatchResponseHandler ( checkNotNull ( proxyConfig ) , checkNotNull ( failover ) , <nl> + checkNotNull ( statuses , " Proxy status should not be null " ) ) ; <nl> } <nl> <nl> public static ProxyConfig . Builder from ( final String localBase ) {
diff - - git a / build . gradle b / build . gradle <nl> index 4c4e05a . . 6d553ce 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 32 . Final ' <nl> + nettyVersion = ' 4 . 1 . 33 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 8 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 3aaed30 . . cb61323 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 468 , 7 + 468 , 8 @ @ public final class Moco { <nl> <nl> public static ResponseHandler proxy ( final ContentResource url , final Failover failover , final int . . . statuses ) { <nl> return new ProxyResponseHandler ( toUrlFunction ( checkNotNull ( url , " URL should not be null " ) ) , <nl> - checkNotNull ( failover , " Failover should not be null " ) , statuses ) ; <nl> + checkNotNull ( failover , " Failover should not be null " ) , <nl> + checkNotNull ( statuses , " Proxy status should not be null " ) ) ; <nl> } <nl> <nl> public static ResponseHandler proxy ( final ProxyConfig proxyConfig ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 0d54e3a . . 3d85157 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 460 , 14 + 460 , 14 @ @ public final class Moco { <nl> return proxy ( checkNotNull ( url , " URL should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> - public static ResponseHandler proxy ( final String url , final Failover failover ) { <nl> + public static ResponseHandler proxy ( final String url , final Failover failover , final int . . . statuses ) { <nl> return proxy ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> - checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> + checkNotNull ( failover , " Failover should not be null " ) , statuses ) ; <nl> } <nl> <nl> - public static ResponseHandler proxy ( final ContentResource url , final Failover failover ) { <nl> + public static ResponseHandler proxy ( final ContentResource url , final Failover failover , final int . . . statuses ) { <nl> return new ProxyResponseHandler ( toUrlFunction ( checkNotNull ( url , " URL should not be null " ) ) , <nl> - checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> + checkNotNull ( failover , " Failover should not be null " ) , statuses ) ; <nl> } <nl> <nl> public static ResponseHandler proxy ( final ProxyConfig proxyConfig ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 2874413 . . bfda696 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 282 , 6 + 282 , 19 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ failover _ for _ specified _ status ( ) throws Exception { <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( status ( 500 ) ) ; <nl> + server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( " src / test / resources / failover . response " ) , 500 ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / proxy " ) , " proxy " ) , is ( " proxy " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ failover _ for _ unreachable _ remote _ server _ with _ many _ content ( ) throws Exception { <nl> server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( " src / test / resources / many _ content _ failover . response " ) ) ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index 522a5d9 . . 5d24b31 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 14 , 8 + 14 , 8 @ @ import static com . google . common . base . Optional . of ; <nl> public class ProxyResponseHandler extends AbstractProxyResponseHandler implements ResponseHandler { <nl> private final Function < HttpRequest , URL > url ; <nl> <nl> - public ProxyResponseHandler ( final Function < HttpRequest , URL > url , final Failover failover ) { <nl> - super ( failover ) ; <nl> + public ProxyResponseHandler ( final Function < HttpRequest , URL > url , final Failover failover , final int . . . proxyStatuses ) { <nl> + super ( failover , proxyStatuses ) ; <nl> this . url = url ; <nl> } <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index e9b4489 . . 11baf5b 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ImmutableMultimap ; <nl> + import com . google . common . collect . Iterables ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . Resources ; <nl> import org . apache . http . Header ; <nl> @ @ - 505 , 7 + 506 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> public void run ( ) throws Exception { <nl> String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> try { <nl> - String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> + String target = Iterables . get ( Splitter . on ( ' . ' ) . split ( response ) , 1 ) ; <nl> assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> <nl> double result = Double . parseDouble ( response ) ; <nl> @ @ - 529 , 7 + 530 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> double result = Double . parseDouble ( response ) ; <nl> assertThat ( result , lessThan ( 100d ) ) ; <nl> assertThat ( result , greaterThan ( 0d ) ) ; <nl> - String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> + String target = Iterables . get ( Splitter . on ( ' . ' ) . split ( response ) , 1 ) ; <nl> assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; <nl> } catch ( NumberFormatException e ) { <nl> fail ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index a13ce01 . . 2851928 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . primitives . Ints ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . buffer . Unpooled ; <nl> @ @ - 105 , 6 + 106 , 11 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> this . proxyStatuses = ImmutableSet . of ( HttpResponseStatus . BAD _ REQUEST . code ( ) ) ; <nl> } <nl> <nl> + protected AbstractProxyResponseHandler ( final Failover failover , final int . . . proxyStatuses ) { <nl> + this . failover = failover ; <nl> + this . proxyStatuses = ImmutableSet . copyOf ( Ints . asList ( proxyStatuses ) ) ; <nl> + } <nl> + <nl> private HttpRequestBase prepareRemoteRequest ( final FullHttpRequest request , final URL url ) { <nl> HttpRequestBase remoteRequest = createRemoteRequest ( request , url ) ; <nl> remoteRequest . setConfig ( createRequestConfig ( ) ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 7419473 . . 63866da 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 96 , 10 + 96 , 12 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; <nl> <nl> + private final int proxyStatus ; <nl> private final Failover failover ; <nl> <nl> protected AbstractProxyResponseHandler ( final Failover failover ) { <nl> this . failover = failover ; <nl> + this . proxyStatus = HttpResponseStatus . BAD _ REQUEST . code ( ) ; <nl> } <nl> <nl> private HttpRequestBase prepareRemoteRequest ( final FullHttpRequest request , final URL url ) { <nl> @ @ - 204 , 7 + 206 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> <nl> private boolean shouldFailover ( final org . apache . http . HttpResponse remoteResponse ) { <nl> int statusCode = remoteResponse . getStatusLine ( ) . getStatusCode ( ) ; <nl> - return statusCode = = HttpResponseStatus . BAD _ REQUEST . code ( ) ; <nl> + return statusCode = = proxyStatus ; <nl> } <nl> <nl> private HttpResponse setupNormalResponse ( final org . apache . http . HttpResponse remoteResponse ) throws IOException {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index d33cd07 . . 3f47a5f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> private Map < String , String [ ] > headers ; <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public Builder ( ) { <nl> + protected Builder ( ) { <nl> this . clazz = ( Class < T > ) TypeToken . of ( getClass ( ) ) . getRawType ( ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> index 8cb6615 . . 4864d2a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public abstract class BaseResourceSetting { <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) { <nl> + public final String toString ( ) { <nl> return toStringHelper ( ) . toString ( ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 4025dc7 . . d33cd07 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 63 , 6 + 63 , 10 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> . add ( " content " , this . getContent ( ) ) ; <nl> } <nl> <nl> + @ Override <nl> + public final String toString ( ) { <nl> + return toStringHelper ( ) . toString ( ) ; <nl> + } <nl> <nl> protected static Map < String , Iterable < String > > toHeaders ( final io . netty . handler . codec . http . HttpMessage message ) { <nl> return toHeaders ( message . headers ( ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 3a73282 . . 276cf31 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . extractor . CookiesRequestExtractor ; <nl> import com . github . dreamhead . moco . extractor . FormsRequestExtractor ; <nl> + import com . google . common . base . MoreObjects ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . base . Supplier ; <nl> import com . google . common . base . Suppliers ; <nl> @ @ - 107 , 13 + 108 , 11 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } ) ; <nl> } <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> return super . toStringHelper ( ) <nl> . add ( " uri " , this . uri ) <nl> . add ( " method " , this . method ) <nl> - . add ( " queries " , this . queries ) <nl> - . toString ( ) ; <nl> + . add ( " queries " , this . queries ) ; <nl> } <nl> <nl> public static Builder builder ( ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> index 8d9d0dc . . cfde481 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ public class ProxyContainer { <nl> <nl> @ Override <nl> public final String toString ( ) { <nl> - return MoreObjects . toStringHelper ( ProxyContainer . class ) <nl> + return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " url " , this . url ) <nl> . add ( " from " , this . from )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> index 8d87853 . . 9c39882 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . parser . RequestMatcherFactory ; <nl> + import com . google . common . base . MoreObjects ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 24 , 9 + 25 , 8 @ @ public final class RequestSetting extends BaseResourceSetting { <nl> private Map < String , TextContainer > cookies ; <nl> private Map < String , TextContainer > forms ; <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> - return this . toStringHelper ( ) <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + return super . toStringHelper ( ) <nl> . add ( " version " , version ) <nl> . add ( " URI " , uri ) <nl> . add ( " method " , method ) <nl> @ @ - 35 , 8 + 35 , 7 @ @ public final class RequestSetting extends BaseResourceSetting { <nl> . add ( " json paths " , jsonPaths ) <nl> . add ( " queries " , queries ) <nl> . add ( " cookies " , cookies ) <nl> - . add ( " forms " , forms ) <nl> - . toString ( ) ; <nl> + . add ( " forms " , forms ) ; <nl> } <nl> <nl> public RequestMatcher getRequestMatcher ( ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java <nl> index 968a0af . . 13c2175 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java <nl> @ @ - 63 , 8 + 63 , 7 @ @ public final class MountSetting extends ResponseSetting { <nl> . add ( " dir " , dir ) <nl> . add ( " uri " , uri ) <nl> . add ( " includes " , toStringList ( includes ) ) <nl> - . add ( " excludes " , toStringList ( excludes ) ) <nl> - . add ( " response " , super . toString ( ) ) ; <nl> + . add ( " excludes " , toStringList ( excludes ) ) ; <nl> } <nl> <nl> private List < String > toStringList ( final List < String > includes ) {
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> index bccd430 . . 4275d3f 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> runWithConfiguration ( " foo . json " ) ; <nl> HttpResponse response = helper . getResponse ( remoteUrl ( " / proxy " ) ) ; <nl> String value = response . getFirstHeader ( HttpHeaders . CONTENT _ TYPE ) . getValue ( ) ; <nl> - assertThat ( value , startsWith ( " text / html " ) ) ; <nl> + assertThat ( value , startsWith ( " text / plain " ) ) ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json <nl> index 3278ee6 . . 5c874b7 100644 <nl> - - - a / moco - runner / src / test / resources / foo . json <nl> + + + b / moco - runner / src / test / resources / foo . json <nl> @ @ - 94 , 7 + 94 , 7 @ @ <nl> " uri " : " / proxy " <nl> } , <nl> " response " : { <nl> - " proxy " : " http : / / github . com / " <nl> + " proxy " : " http : / / localhost : 12306 / foo " <nl> } <nl> } , <nl> {
diff - - git a / build . gradle b / build . gradle <nl> index 8593113 . . 4c4e05a 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 78 , 7 + 78 , 7 @ @ subprojects { <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 8 ' <nl> junitVersion = ' 4 . 12 ' <nl> - hamcrestVersion = ' 1 . 3 ' <nl> + hamcrestVersion = ' 2 . 1 ' <nl> mockitoVersion = ' 2 . 23 . 4 ' <nl> httpComponentVersion = ' 4 . 5 . 6 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 5c992cf . . 623898a 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 52 , 7 + 52 , 6 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . google . common . collect . ImmutableMultimap . of ; <nl> - import static java . lang . String . format ; <nl> import static org . hamcrest . CoreMatchers . containsString ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . hamcrest . CoreMatchers . nullValue ; <nl> @ @ - 249 , 7 + 248 , 7 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> private Matcher < String > countString ( final String substring , final int targetCount ) { <nl> - return new SubstringMatcher ( substring ) { <nl> + return new SubstringMatcher ( " counting " , false , substring ) { <nl> @ Override <nl> protected boolean evalSubstringOf ( final String string ) { <nl> int count = 0 ; <nl> @ @ - 267 , 11 + 266 , 6 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> <nl> return count = = targetCount ; <nl> } <nl> - <nl> - @ Override <nl> - protected String relationship ( ) { <nl> - return format ( " count % d string " , targetCount ) ; <nl> - } <nl> } ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index abedabe . . 14c8228 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 139 , 6 + 139 , 7 @ @ public final class DynamicResponseHandlerFactory extends Dynamics implements Res <nl> for ( String resource : RESOURCES ) { <nl> try { <nl> Field field = getField ( resourceSetting . getClass ( ) , resource ) ; <nl> + field . setAccessible ( true ) ; <nl> return resourceFrom ( resource , ( TextContainer ) field . get ( resourceSetting ) ) ; <nl> } catch ( Exception ignored ) { <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> index bedc670 . . f9044f0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> @ @ - 109 , 13 + 109 , 10 @ @ public final class FileContainer extends TextContainer { <nl> return this . content ! = null & & this . content . isForTemplate ( ) ; <nl> } <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + return super . toStringHelper ( ) <nl> . add ( " name " , name ) <nl> - . add ( " charset " , charset ) <nl> - . toString ( ) ; <nl> + . add ( " charset " , charset ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index a4d790a . . cb46d09 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 107 , 13 + 107 , 16 @ @ public class TextContainer implements Container { <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) { <nl> + public final String toString ( ) { <nl> + return toStringHelper ( ) . toString ( ) ; <nl> + } <nl> + <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " text " , text ) <nl> . add ( " operation " , operation ) <nl> - . add ( " properties " , props ) <nl> - . toString ( ) ; <nl> + . add ( " properties " , props ) ; <nl> } <nl> <nl> public static Builder builder ( ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> index 5adab0d . . 5c80874 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ public abstract class BaseResourceSetting { <nl> private FileContainer pathResource ; <nl> private Object json ; <nl> <nl> - protected final MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " text " , text ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java <nl> index 9195120 . . 968a0af 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / MountSetting . java <nl> @ @ - 58 , 16 + 58 , 13 @ @ public final class MountSetting extends ResponseSetting { <nl> return this . asResponseSetting ( ) . getResponseHandler ( ) ; <nl> } <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + return super . toStringHelper ( ) <nl> . add ( " dir " , dir ) <nl> . add ( " uri " , uri ) <nl> . add ( " includes " , toStringList ( includes ) ) <nl> . add ( " excludes " , toStringList ( excludes ) ) <nl> - . add ( " response " , super . toString ( ) ) <nl> - . toString ( ) ; <nl> + . add ( " response " , super . toString ( ) ) ; <nl> } <nl> <nl> private List < String > toStringList ( final List < String > includes ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> index 7329545 . . 8d87853 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ public final class RequestSetting extends BaseResourceSetting { <nl> @ Override <nl> public String toString ( ) { <nl> return this . toStringHelper ( ) <nl> - . omitNullValues ( ) <nl> . add ( " version " , version ) <nl> . add ( " URI " , uri ) <nl> . add ( " method " , method ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 2a210a1 . . b922e3e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> + import com . google . common . base . MoreObjects ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 36 , 9 + 37 , 8 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> return responseSetting ; <nl> } <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> - return toStringHelper ( ) <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + return super . toStringHelper ( ) <nl> . add ( " version " , version ) <nl> . add ( " status " , status ) <nl> . add ( " headers " , headers ) <nl> @ @ - 47 , 8 + 47 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> . add ( " latency " , latency ) <nl> . add ( " attachment " , attachment ) <nl> . add ( " seq " , seq ) <nl> - . add ( " cycle " , cycle ) <nl> - . toString ( ) ; <nl> + . add ( " cycle " , cycle ) ; <nl> } <nl> <nl> public ResponseHandler getResponseHandler ( ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> index 42b8ab9 . . 5adab0d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> - import com . github . dreamhead . moco . setting . BaseSetting ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> public abstract class BaseResourceSetting { <nl> @ @ - 11 , 7 + 10 , 7 @ @ public abstract class BaseResourceSetting { <nl> private FileContainer pathResource ; <nl> private Object json ; <nl> <nl> - protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + protected final MoreObjects . ToStringHelper toStringHelper ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " text " , text )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> index 26de9bc . . 42b8ab9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> @ @ - 1 , 14 + 1 , 15 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> + import com . github . dreamhead . moco . setting . BaseSetting ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> public abstract class BaseResourceSetting { <nl> - protected TextContainer text ; <nl> - protected FileContainer file ; <nl> + private TextContainer text ; <nl> + private FileContainer file ; <nl> @ JsonProperty ( " path _ resource " ) <nl> - protected FileContainer pathResource ; <nl> - protected Object json ; <nl> + private FileContainer pathResource ; <nl> + private Object json ; <nl> <nl> protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> @ @ - 18 , 4 + 19 , 13 @ @ public abstract class BaseResourceSetting { <nl> . add ( " path resource " , pathResource ) <nl> . add ( " json " , json ) ; <nl> } <nl> + <nl> + protected final < T extends BaseResourceSetting > T asBaseResourceSetting ( final T setting ) { <nl> + BaseResourceSetting base = setting ; <nl> + base . text = text ; <nl> + base . file = file ; <nl> + base . pathResource = pathResource ; <nl> + base . json = json ; <nl> + return setting ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 9ea7a4f . . 2a210a1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 22 , 17 + 22 , 13 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> private CollectionContainer cycle ; <nl> <nl> public final ResponseSetting asResponseSetting ( ) { <nl> - ResponseSetting responseSetting = new ResponseSetting ( ) ; <nl> - responseSetting . text = text ; <nl> - responseSetting . file = file ; <nl> - responseSetting . pathResource = pathResource ; <nl> + ResponseSetting responseSetting = asBaseResourceSetting ( new ResponseSetting ( ) ) ; <nl> responseSetting . status = status ; <nl> responseSetting . proxy = proxy ; <nl> responseSetting . headers = headers ; <nl> responseSetting . cookies = cookies ; <nl> responseSetting . latency = latency ; <nl> responseSetting . version = version ; <nl> - responseSetting . json = json ; <nl> responseSetting . attachment = attachment ; <nl> responseSetting . seq = seq ; <nl> responseSetting . cycle = cycle ;
diff - - git a / README . md b / README . md <nl> index 862f609 . . 4efc1e2 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 50 , 6 + 50 , 7 @ @ java - jar moco - runner - < version > - standalone . jar http - p 12306 - c foo . json <nl> * Detailed [ REST API ] ( moco - doc / rest - apis . md ) <nl> * [ Global Settings ] ( moco - doc / global - settings . md ) for multiple configuration files . <nl> * [ Command Line Usages ] ( moco - doc / cmd . md ) <nl> + * [ Extend Moco ] ( moco - doc / extending . md ) if current API does not meet your requirement . <nl> <nl> # # Build <nl> Make sure you have JDK and Gradle installed .
diff - - git a / moco - doc / extending . md b / moco - doc / extending . md <nl> new file mode 100644 <nl> index 0000000 . . 04f6218 <nl> - - - / dev / null <nl> + + + b / moco - doc / extending . md <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + # Extending Moco <nl> + <nl> + You can extend Moco , if you need more features than Moco already provides . <nl> + <nl> + The basic idea is very simple : RequestMatcher and ResponseHandler . If your request matches any matcher , the corresponding response handler will be invoked to return response . <nl> \ No newline at end of file
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> index c496516 . . 7329545 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . parser . RequestMatcherFactory ; <nl> - import com . google . common . base . MoreObjects ; <nl> <nl> import java . util . Map ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index cc059ac . . 9ea7a4f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> - import com . google . common . base . MoreObjects ; <nl> <nl> import java . util . Map ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> index 30ef716 . . 7c23edd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . ResponseBase ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . MoreObjects ; <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> import java . util . List ; <nl> @ @ - 49 , 4 + 50 , 11 @ @ public abstract class RestBaseSetting { <nl> <nl> return from ( setting ) . transform ( toSetting ( ) ) ; <nl> } <nl> + <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> + return MoreObjects . toStringHelper ( this ) <nl> + . omitNullValues ( ) <nl> + . add ( " request " , request ) <nl> + . add ( " response " , response ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java <nl> index f206235 . . 0036d9d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . MocoRest ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> - import com . google . common . base . MoreObjects ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public final class RestPostSetting extends RestBaseSetting { <nl> @ @ - 14 , 10 + 13 , 6 @ @ public final class RestPostSetting extends RestBaseSetting { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> - . add ( " request " , request ) <nl> - . add ( " response " , response ) <nl> - . toString ( ) ; <nl> + return toStringHelper ( ) . toString ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java <nl> index a14b5d9 . . df02286 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java <nl> @ @ - 2 , 7 + 2 , 6 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . github . dreamhead . moco . RestIdMatcher ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> - import com . google . common . base . MoreObjects ; <nl> import com . google . common . base . Strings ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . RestIds . asIdMatcher ; <nl> @ @ - 35 , 11 + 34 , 8 @ @ public abstract class RestSingleSetting extends RestBaseSetting { <nl> <nl> @ Override <nl> public final String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> + return toStringHelper ( ) <nl> . add ( " id " , id ) <nl> - . add ( " request " , request ) <nl> - . add ( " response " , response ) <nl> . toString ( ) ; <nl> } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> index 94d3059 . . 1563efe 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> @ @ - 14 , 13 + 14 , 13 @ @ import static com . google . common . collect . Iterables . toArray ; <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class ResourceSetting { <nl> private String name ; <nl> - protected List < RestGetSetting > get ; <nl> - protected List < RestPostSetting > post ; <nl> - protected List < RestPutSetting > put ; <nl> - protected List < RestDeleteSetting > delete ; <nl> - protected List < RestHeadSetting > head ; <nl> - protected List < RestPatchSetting > patch ; <nl> - protected List < RestSubResourceSetting > resource ; <nl> + private List < RestGetSetting > get ; <nl> + private List < RestPostSetting > post ; <nl> + private List < RestPutSetting > put ; <nl> + private List < RestDeleteSetting > delete ; <nl> + private List < RestHeadSetting > head ; <nl> + private List < RestPatchSetting > patch ; <nl> + private List < RestSubResourceSetting > resource ; <nl> <nl> public final String getName ( ) { <nl> return name ; <nl> @ @ - 28 , 6 + 28 , 10 @ @ public class ResourceSetting { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> + return toStringHelper ( ) . toString ( ) ; <nl> + } <nl> + <nl> + protected MoreObjects . ToStringHelper toStringHelper ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " name " , name ) <nl> @ @ - 37 , 8 + 41 , 7 @ @ public class ResourceSetting { <nl> . add ( " delete " , delete ) <nl> . add ( " head " , head ) <nl> . add ( " patch " , patch ) <nl> - . add ( " sub resources " , resource ) <nl> - . toString ( ) ; <nl> + . add ( " sub resources " , resource ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> index 85eb5d7 . . c1aea11 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> @ @ - 20 , 16 + 20 , 7 @ @ public class RestSubResourceSetting extends ResourceSetting { <nl> <nl> @ Override <nl> public final String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> - . add ( " name " , this . getName ( ) ) <nl> - . add ( " get " , get ) <nl> - . add ( " post " , post ) <nl> - . add ( " put " , put ) <nl> - . add ( " delete " , delete ) <nl> - . add ( " head " , head ) <nl> - . add ( " patch " , patch ) <nl> - . add ( " sub resources " , resource ) <nl> + return toStringHelper ( ) <nl> . add ( " id " , id ) <nl> . toString ( ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> index 827faff . . 30ef716 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . ResponseBase ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> import com . google . common . base . Function ; <nl> - import com . google . common . base . MoreObjects ; <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> import java . util . List ; <nl> @ @ - 17 , 15 + 16 , 6 @ @ public abstract class RestBaseSetting { <nl> <nl> protected abstract RestSettingBuilder startRestSetting ( ) ; <nl> <nl> - @ Override <nl> - public String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> - . add ( " request " , request ) <nl> - . add ( " response " , response ) <nl> - . toString ( ) ; <nl> - } <nl> - <nl> final RestSetting toRestSetting ( ) { <nl> if ( response = = null ) { <nl> throw new IllegalArgumentException ( " Response is expected in rest setting " ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java <nl> index a23d722 . . f206235 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestPostSetting . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . MocoRest ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> + import com . google . common . base . MoreObjects ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public final class RestPostSetting extends RestBaseSetting { <nl> @ @ - 10 , 4 + 11 , 13 @ @ public final class RestPostSetting extends RestBaseSetting { <nl> protected RestSettingBuilder startRestSetting ( ) { <nl> return MocoRest . post ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return MoreObjects . toStringHelper ( this ) <nl> + . omitNullValues ( ) <nl> + . add ( " request " , request ) <nl> + . add ( " response " , response ) <nl> + . toString ( ) ; <nl> + } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index df99a43 . . ed256f5 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 121 , 6 + 121 , 16 @ @ subprojects { <nl> ) <nl> } <nl> <nl> + test { <nl> + testLogging { <nl> + afterSuite { desc , result - > <nl> + if ( ! desc . parent ) { / / will match the outermost suite <nl> + println " Results : $ { result . resultType } ( $ { result . testCount } tests , $ { result . successfulTestCount } successes , $ { result . failedTestCount } failures , $ { result . skippedTestCount } skipped ) " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> task sourcesJar ( type : Jar ) { <nl> from sourceSets . main . allSource <nl> classifier = ' sources ' <nl> @ @ - 149 , 5 + 159 , 5 @ @ subprojects { <nl> } <nl> <nl> wrapper { <nl> - gradleVersion = ' 5 . 0 ' <nl> + gradleVersion = ' 4 . 10 . 2 ' <nl> } <nl> \ No newline at end of file
diff - - git a / build . gradle b / build . gradle <nl> index 215c390 . . df99a43 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 31 . Final ' <nl> + nettyVersion = ' 4 . 1 . 32 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 7 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / build . gradle b / build . gradle <nl> index 61031b9 . . 215c390 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 100 , 7 + 100 , 7 @ @ subprojects { <nl> } <nl> <nl> project . dependencies { <nl> - compile ( <nl> + implementation ( <nl> " com . google . guava : guava : $ guavaVersion " , <nl> " io . netty : netty - codec - http : $ nettyVersion " , <nl> " io . netty : netty - handler : $ nettyVersion " , <nl> @ @ - 111 , 7 + 111 , 7 @ @ subprojects { <nl> " org . slf4j : slf4j - api : $ slf4jVersion " <nl> ) <nl> <nl> - testCompile ( <nl> + testImplementation ( <nl> " junit : junit : $ junitVersion " , <nl> " org . hamcrest : hamcrest - core : $ hamcrestVersion " , <nl> " org . hamcrest : hamcrest - library : $ hamcrestVersion " ,
diff - - git a / build . gradle b / build . gradle <nl> index 3807abc . . 61031b9 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> wrapper { <nl> - gradleVersion = ' 4 . 10 . 2 ' <nl> + gradleVersion = ' 5 . 0 ' <nl> } <nl> \ No newline at end of file <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index e0b3fb8 . . 75b8c7c 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 10 . 2 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 5 . 0 - bin . zip <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> index c52979b . . 13c75a2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> @ @ - 57 , 10 + 57 , 10 @ @ public final class HttpDumpers { <nl> <nl> } <nl> <nl> - private final static Joiner . MapJoiner headerJoiner = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; <nl> + private static final Joiner . MapJoiner HEAD _ JOINER = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; <nl> <nl> public static String asHeaders ( final HttpMessage message ) { <nl> - return headerJoiner . join ( from ( message . getHeaders ( ) . entrySet ( ) ) <nl> + return HEAD _ JOINER . join ( from ( message . getHeaders ( ) . entrySet ( ) ) <nl> . transformAndConcat ( toMapEntries ( ) ) ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> index 73aa52d . . 94d3059 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class ResourceSetting { <nl> protected List < RestPatchSetting > patch ; <nl> protected List < RestSubResourceSetting > resource ; <nl> <nl> - public String getName ( ) { <nl> + public final String getName ( ) { <nl> return name ; <nl> } <nl> <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class ResourceSetting { <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public RestSetting [ ] getSettings ( ) { <nl> + public final RestSetting [ ] getSettings ( ) { <nl> return toArray ( concat ( asRestSetting ( get ) , asRestSetting ( post ) , <nl> asRestSetting ( put ) , asRestSetting ( delete ) , <nl> asRestSetting ( head ) , asRestSetting ( patch ) , asSubRestSetting ( resource ) ) ,
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java <nl> index f6ae160 . . 3735ee3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java <nl> @ @ - 20 , 12 + 20 , 12 @ @ public class MocoHttpServer extends BaseServerRunner { <nl> } <nl> <nl> @ Override <nl> - protected BaseActualServer serverSetting ( ) { <nl> + protected final BaseActualServer serverSetting ( ) { <nl> return this . serverSetting ; <nl> } <nl> <nl> @ Override <nl> - protected ChannelInitializer < SocketChannel > channelInitializer ( ) { <nl> + protected final ChannelInitializer < SocketChannel > channelInitializer ( ) { <nl> return new ChannelInitializer < SocketChannel > ( ) { <nl> @ Override <nl> protected void initChannel ( final SocketChannel ch ) throws Exception {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> index e94c48b . . 8d9d0dc 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> @ @ - 21 , 12 + 21 , 12 @ @ public class ProxyContainer { <nl> private String failover ; <nl> private String playback ; <nl> <nl> - public boolean hasUrl ( ) { <nl> + public final boolean hasUrl ( ) { <nl> return url ! = null ; <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) { <nl> + public final String toString ( ) { <nl> return MoreObjects . toStringHelper ( ProxyContainer . class ) <nl> . omitNullValues ( ) <nl> . add ( " url " , this . url ) <nl> @ @ - 41 , 7 + 41 , 7 @ @ public class ProxyContainer { <nl> return new Builder ( ) ; <nl> } <nl> <nl> - public Failover getFailover ( ) { <nl> + public final Failover getFailover ( ) { <nl> if ( failover ! = null ) { <nl> return failover ( failover ) ; <nl> } <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class ProxyContainer { <nl> return Failover . DEFAULT _ FAILOVER ; <nl> } <nl> <nl> - public ProxyConfig getProxyConfig ( ) { <nl> + public final ProxyConfig getProxyConfig ( ) { <nl> return from ( from ) . to ( to ) ; <nl> } <nl> <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class ProxyContainer { <nl> return from ! = null & & to ! = null ; <nl> } <nl> <nl> - public ResponseHandler asResponseHandler ( ) { <nl> + public final ResponseHandler asResponseHandler ( ) { <nl> Failover failover = getFailover ( ) ; <nl> <nl> if ( hasProxyConfig ( ) ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> index 88417ad . . d8da360 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> @ @ - 22 , 29 + 22 , 29 @ @ public class MessageContent { <nl> private byte [ ] content ; <nl> private Optional < Charset > charset ; <nl> <nl> - public byte [ ] getContent ( ) { <nl> + public final byte [ ] getContent ( ) { <nl> return content ; <nl> } <nl> <nl> - public Charset getCharset ( ) { <nl> + public final Charset getCharset ( ) { <nl> return charset . or ( Charset . defaultCharset ( ) ) ; <nl> } <nl> <nl> - public boolean hasCharset ( ) { <nl> + public final boolean hasCharset ( ) { <nl> return charset . isPresent ( ) ; <nl> } <nl> <nl> - public boolean hasContent ( ) { <nl> + public final boolean hasContent ( ) { <nl> return content . length > 0 ; <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) { <nl> + public final String toString ( ) { <nl> return new String ( content , getCharset ( ) ) ; <nl> } <nl> <nl> @ Override <nl> - public boolean equals ( final Object obj ) { <nl> + public final boolean equals ( final Object obj ) { <nl> if ( obj = = null ) { <nl> return false ; <nl> } <nl> @ @ - 58 , 7 + 58 , 7 @ @ public class MessageContent { <nl> } <nl> <nl> @ Override <nl> - public int hashCode ( ) { <nl> + public final int hashCode ( ) { <nl> return Objects . hashCode ( Arrays . hashCode ( this . content ) , this . charset ) ; <nl> } <nl> <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class MessageContent { <nl> return content ( ) . withContent ( content ) . build ( ) ; <nl> } <nl> <nl> - public InputStream toInputStream ( ) { <nl> + public final InputStream toInputStream ( ) { <nl> return new ByteArrayInputStream ( this . content ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 9a9425f . . 8d62262 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 30 , 17 + 30 , 17 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ Override <nl> - public HttpProtocolVersion getVersion ( ) { <nl> + public final HttpProtocolVersion getVersion ( ) { <nl> return this . version ; <nl> } <nl> <nl> @ Override <nl> - public ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + public final ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> return this . headers ; <nl> } <nl> <nl> @ Override <nl> - public String getHeader ( final String name ) { <nl> + public final String getHeader ( final String name ) { <nl> if ( ! this . headers . containsKey ( name ) ) { <nl> return null ; <nl> } <nl> @ @ - 50 , 7 + 50 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ Override <nl> - public MessageContent getContent ( ) { <nl> + public final MessageContent getContent ( ) { <nl> return this . content ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java <nl> index 9152f30 . . a0ecb5d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java <nl> @ @ - 21 , 37 + 21 , 37 @ @ public final class HttpsArgs extends StartArgs { <nl> private String env ; <nl> private HttpsArg httpsArg ; <nl> <nl> - public Builder withPort ( final Integer port ) { <nl> + public final Builder withPort ( final Integer port ) { <nl> this . port = port ; <nl> return this ; <nl> } <nl> <nl> - public Builder withShutdownPort ( final Integer shutdownPort ) { <nl> + public final Builder withShutdownPort ( final Integer shutdownPort ) { <nl> this . shutdownPort = shutdownPort ; <nl> return this ; <nl> } <nl> <nl> - public Builder withConfigurationFile ( final String configurationFile ) { <nl> + public final Builder withConfigurationFile ( final String configurationFile ) { <nl> this . configurationFile = configurationFile ; <nl> return this ; <nl> } <nl> <nl> - public Builder withSettings ( final String settings ) { <nl> + public final Builder withSettings ( final String settings ) { <nl> this . settings = settings ; <nl> return this ; <nl> } <nl> <nl> - public Builder withEnv ( final String env ) { <nl> + public final Builder withEnv ( final String env ) { <nl> this . env = env ; <nl> return this ; <nl> } <nl> <nl> - public Builder withHttpsArg ( final HttpsArg httpsArg ) { <nl> + public final Builder withHttpsArg ( final HttpsArg httpsArg ) { <nl> this . httpsArg = httpsArg ; <nl> return this ; <nl> } <nl> <nl> - public HttpsArgs build ( ) { <nl> + public final HttpsArgs build ( ) { <nl> return new HttpsArgs ( port , shutdownPort , configurationFile , settings , env , httpsArg ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> index f7db9aa . . 6bd156f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> @ @ - 36 , 27 + 36 , 27 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting get ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting get ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . GET , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting post ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting post ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . POST , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting put ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting put ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . PUT , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting delete ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting delete ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . DELETE , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { <nl> + public final HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { <nl> File mountedDir = new File ( checkNotNullOrEmpty ( dir , " Directory should not be null " ) ) ; <nl> checkNotNull ( target , " Target should not be null " ) ; <nl> return this . request ( new MountMatcher ( mountedDir , target , copyOf ( predicates ) ) ) <nl> @ @ - 68 , 12 + 68 , 12 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting proxy ( final ProxyConfig config ) { <nl> + public final HttpResponseSetting proxy ( final ProxyConfig config ) { <nl> return proxy ( checkNotNull ( config , " Proxy config should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { <nl> + public final HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { <nl> ProxyConfig config = checkNotNull ( proxyConfig , " Proxy config should not be null " ) ; <nl> this . request ( InternalApis . context ( config . localBase ( ) ) ) <nl> . response ( Moco . proxy ( config , checkNotNull ( failover , " Failover should not be null " ) ) ) ; <nl> @ @ - 81 , 17 + 81 , 17 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting redirectTo ( final String url ) { <nl> + public final HttpResponseSetting redirectTo ( final String url ) { <nl> return delegate . redirectTo ( this , url ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting redirectTo ( final Resource url ) { <nl> + public final HttpResponseSetting redirectTo ( final Resource url ) { <nl> return delegate . redirectTo ( this , url ) ; <nl> } <nl> <nl> @ Override <nl> - protected HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { <nl> + protected final HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { <nl> HttpSetting baseSetting = new HttpSetting ( matcher ) ; <nl> addSetting ( baseSetting ) ; <nl> return baseSetting ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java <nl> index 65f76cc . . bb99e58 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java <nl> @ @ - 11 , 7 + 11 , 8 @ @ import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class XmlExtractorHelper { <nl> - public final Optional < InputSource > extractAsInputSource ( final Request request , final ContentRequestExtractor extractor ) { <nl> + public final Optional < InputSource > extractAsInputSource ( final Request request , <nl> + final ContentRequestExtractor extractor ) { <nl> Optional < MessageContent > content = extractor . extract ( request ) ; <nl> if ( content . isPresent ( ) ) { <nl> return of ( new InputSource ( new ByteArrayInputStream ( content . get ( ) . getContent ( ) ) ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> index bde2119 . . 4019f94 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> @ @ - 66 , 7 + 66 , 8 @ @ public final class XmlRequestMatcher extends AbstractRequestMatcher { <nl> return extractDocument ( new InputSource ( stream ) ) ; <nl> } <nl> <nl> - private Optional < Document > extractDocument ( final Request request , final ContentRequestExtractor extractor ) throws SAXException { <nl> + private Optional < Document > extractDocument ( final Request request , <nl> + final ContentRequestExtractor extractor ) throws SAXException { <nl> Optional < InputSource > inputSourceOptional = helper . extractAsInputSource ( request , extractor ) ; <nl> if ( ! inputSourceOptional . isPresent ( ) ) { <nl> return absent ( ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> index 145f838 . . a6cf1d9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> @ @ - 8 , 7 + 8 , 8 @ @ import static com . github . dreamhead . moco . rest . RestIds . checkResourceName ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> - public final class ActualSubResourceSettingBuilder implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { <nl> + public final class ActualSubResourceSettingBuilder <nl> + implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { <nl> private final RestIdMatcher id ; <nl> private String name ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index de5ba8a . . 0ea4c47 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 53 , 7 + 53 , 8 @ @ public final class MocoJsonRunner { <nl> <nl> private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) { <nl> SocketServerParser parser = new SocketServerParser ( ) ; <nl> - return parser . parseServer ( ImmutableList . of ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) ) , port ) ; <nl> + return parser . parseServer ( ImmutableList . of ( <nl> + toStream ( checkNotNull ( resource , " resource should not be null " ) ) ) , port ) ; <nl> } <nl> <nl> private static HttpServer parseHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> index d962dad . . a8dbfcc 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class Bootstrap implements BootstrapTask { <nl> . build ( ) ; <nl> <nl> @ Override <nl> - public void run ( final String [ ] args ) { <nl> + public final void run ( final String [ ] args ) { <nl> try { <nl> if ( args . length < 1 ) { <nl> throw new ParseArgException ( " task name needs to be specified " ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 623acb5 . . 99ba824 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 24 , 7 + 24 , 8 @ @ public final class RunnerFactory { <nl> <nl> public ShutdownRunner createRunner ( final StartArgs startArgs ) { <nl> Runner dynamicRunner = createDynamicRunner ( startArgs ) ; <nl> - ShutdownMocoRunnerWatcher watcher = factory . createShutdownWatcher ( dynamicRunner , startArgs . getShutdownPort ( ) , shutdownKey ) ; <nl> + ShutdownMocoRunnerWatcher watcher = factory . createShutdownWatcher ( dynamicRunner , <nl> + startArgs . getShutdownPort ( ) , shutdownKey ) ; <nl> return new ShutdownRunner ( dynamicRunner , watcher ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index a500f75 . . d1f0557 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 76 , 37 + 76 , 37 @ @ public final class RunnerSetting { <nl> private String context ; <nl> private String fileRoot ; <nl> <nl> - public Builder addStream ( final InputStream stream ) { <nl> + public final Builder addStream ( final InputStream stream ) { <nl> this . streams . add ( stream ) ; <nl> return this ; <nl> } <nl> <nl> - public Builder addStreams ( final ImmutableList < InputStream > streams ) { <nl> + public final Builder addStreams ( final ImmutableList < InputStream > streams ) { <nl> this . streams . addAll ( streams ) ; <nl> return this ; <nl> } <nl> <nl> - public Builder withRequest ( final RequestSetting request ) { <nl> + public final Builder withRequest ( final RequestSetting request ) { <nl> this . request = request ; <nl> return this ; <nl> } <nl> <nl> - public Builder withResponse ( final ResponseSetting response ) { <nl> + public final Builder withResponse ( final ResponseSetting response ) { <nl> this . response = response ; <nl> return this ; <nl> } <nl> <nl> - public Builder withContext ( final String context ) { <nl> + public final Builder withContext ( final String context ) { <nl> this . context = context ; <nl> return this ; <nl> } <nl> <nl> - public Builder withFileRoot ( final String fileRoot ) { <nl> + public final Builder withFileRoot ( final String fileRoot ) { <nl> this . fileRoot = fileRoot ; <nl> return this ; <nl> } <nl> <nl> - public RunnerSetting build ( ) { <nl> + public final RunnerSetting build ( ) { <nl> return new RunnerSetting ( streams . build ( ) , context , fileRoot , request , response ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> index c922685 . . 9e49e3d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> @ @ - 26 , 12 + 26 , 12 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> } <nl> <nl> @ Override <nl> - public boolean match ( final Request request ) { <nl> + public final boolean match ( final Request request ) { <nl> return this . matcher . match ( request ) & & this . handler ! = null ; <nl> } <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> + public final void writeToResponse ( final SessionContext context ) { <nl> this . handler . writeToResponse ( context ) ; <nl> this . fireCompleteEvent ( context . getRequest ( ) ) ; <nl> } <nl> @ @ - 45 , 7 + 45 , 7 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> } <nl> <nl> @ Override <nl> - public Setting < T > apply ( final MocoConfig config ) { <nl> + public final Setting < T > apply ( final MocoConfig config ) { <nl> BaseSetting < T > setting = createSetting ( configMatcher ( this . matcher , config ) ) ; <nl> setting . handler = configItem ( this . handler , config ) ; <nl> setting . eventTriggers = configItems ( eventTriggers , config ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> index 94f69d8 . . 9c6212a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static com . github . dreamhead . moco . Moco . from ; <nl> import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class ProxyBatchResponseHandler extends AbstractProxyResponseHandler { <nl> + public final class ProxyBatchResponseHandler extends AbstractProxyResponseHandler { <nl> private final ProxyConfig proxyConfig ; <nl> <nl> public ProxyBatchResponseHandler ( final ProxyConfig proxyConfig , final Failover failover ) {
diff - - git a / build . gradle b / build . gradle <nl> index e8c527b . . dcaa1a3 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 30 . Final ' <nl> + nettyVersion = ' 4 . 1 . 31 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 7 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> index e8e4695 . . c482f5f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> @ @ - 26 , 11 + 26 , 11 @ @ public abstract class SimpleRestSetting implements RestSetting { <nl> this . handler = handler ; <nl> } <nl> <nl> - public ResponseHandler getHandler ( ) { <nl> + public final ResponseHandler getHandler ( ) { <nl> return handler ; <nl> } <nl> <nl> - public RequestMatcher getRequestMatcher ( final RestIdMatcher resourceName ) { <nl> + public final RequestMatcher getRequestMatcher ( final RestIdMatcher resourceName ) { <nl> RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; <nl> if ( this . matcher . isPresent ( ) ) { <nl> return and ( rootMatcher , this . matcher . get ( ) ) ; <nl> @ @ - 39 , 17 + 39 , 17 @ @ public abstract class SimpleRestSetting implements RestSetting { <nl> return rootMatcher ; <nl> } <nl> <nl> - public boolean isFor ( final HttpMethod method ) { <nl> + public final boolean isFor ( final HttpMethod method ) { <nl> return this . method = = method ; <nl> } <nl> <nl> @ Override <nl> - public boolean isSimple ( ) { <nl> + public final boolean isSimple ( ) { <nl> return true ; <nl> } <nl> <nl> @ Override <nl> - public Optional < ResponseHandler > getMatched ( final RestIdMatcher resourceName , final HttpRequest httpRequest ) { <nl> + public final Optional < ResponseHandler > getMatched ( final RestIdMatcher resourceName , final HttpRequest httpRequest ) { <nl> if ( getRequestMatcher ( resourceName ) . match ( httpRequest ) ) { <nl> return of ( handler ) ; <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java <nl> index ac90405 . . 91eb5c9 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java <nl> @ @ - 72 , 11 + 72 , 18 @ @ public class HttpDumpersTest { <nl> } <nl> <nl> @ Test <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - public void should _ not _ parse _ content _ when _ content _ length _ not _ set ( ) { <nl> + public void should _ parse _ content _ when _ content _ length _ not _ set ( ) { <nl> assertThat ( asContent ( messageWithHeaders ( ImmutableMap . of ( HttpHeaders . CONTENT _ TYPE , " text / plain " ) ) ) , is ( EXPECTED _ MESSAGE _ BODY ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ not _ parse _ content _ when _ content _ length _ not _ set ( ) { <nl> + assertThat ( asContent ( DefaultHttpResponse . builder ( ) <nl> + . withHeaders ( ImmutableMap . of ( HttpHeaders . CONTENT _ TYPE , " text / plain " ) ) <nl> + . withContent ( " " ) <nl> + . build ( ) ) , is ( " " ) ) ; <nl> + } <nl> + <nl> private void assertMessageContent ( final String mediaType , final String expectedContent ) { <nl> assertThat ( asContent ( messageWithHeaders ( defaultHeadersFor ( mediaType ) ) ) , is ( expectedContent ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> index 1e237b1 . . 3be650f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableList . of ; <nl> import static com . google . common . collect . Iterables . tryFind ; <nl> <nl> - public class DefaultFailoverExecutor implements FailoverExecutor { <nl> + public final class DefaultFailoverExecutor implements FailoverExecutor { <nl> private static Logger logger = LoggerFactory . getLogger ( DefaultFailoverExecutor . class ) ; <nl> <nl> private final ObjectMapper mapper = new ObjectMapper ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java <nl> index 1c4d114 . . 24f985c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java <nl> @ @ - 22 , 13 + 22 , 13 @ @ public abstract class RestSettingBuilders extends AbstractResponseBase < RestSetti <nl> private RequestMatcher matcher ; <nl> <nl> @ Override <nl> - public ResponseBase < RestSetting > request ( final RequestMatcher matcher ) { <nl> + public final ResponseBase < RestSetting > request ( final RequestMatcher matcher ) { <nl> this . matcher = checkNotNull ( matcher , " Request matcher should not be null " ) ; <nl> return this ; <nl> } <nl> <nl> @ Override <nl> - public RestSetting response ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> + public final RestSetting response ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> return createSetting ( Optional . fromNullable ( matcher ) , <nl> and ( checkNotNull ( handler , " Response handler should not be null " ) , <nl> checkNotNull ( handlers , " Response handlers should not be null " ) ) ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index b79bda3 . . 333dd3f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . http . client . methods . HttpDelete ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> import org . apache . http . client . methods . HttpHead ; <nl> import org . apache . http . client . methods . HttpOptions ; <nl> + import org . apache . http . client . methods . HttpPatch ; <nl> import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpPut ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> @ @ - 182 , 6 + 183 , 10 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> return new HttpTrace ( url . toString ( ) ) ; <nl> } <nl> <nl> + if ( method = = HttpMethod . PATCH ) { <nl> + return new HttpPatch ( url . toString ( ) ) ; <nl> + } <nl> + <nl> throw new MocoException ( " unknown HTTP method " ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> index 6c91829 . . bedc670 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> @ @ - 131 , 7 + 131 , 7 @ @ public final class FileContainer extends TextContainer { <nl> return new FileContainerBuilder ( ) ; <nl> } <nl> <nl> - public static class FileContainerBuilder { <nl> + public static final class FileContainerBuilder { <nl> private TextContainer name ; <nl> private String charset ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> index e93cdc1 . . 9ce638b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> @ @ - 12 , 14 + 12 , 14 @ @ public abstract class BaseServerRunner < T extends ResponseSetting < T > , U extends B <nl> private final MocoServer server = new MocoServer ( ) ; <nl> <nl> @ Override <nl> - public void start ( ) { <nl> + public final void start ( ) { <nl> BaseActualServer < T , U > setting = serverSetting ( ) ; <nl> int port = this . server . start ( setting . getPort ( ) . or ( 0 ) , channelInitializer ( ) ) ; <nl> setting . setPort ( port ) ; <nl> } <nl> <nl> @ Override <nl> - public void stop ( ) { <nl> + public final void stop ( ) { <nl> server . stop ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java <nl> index 98bc339 . . a14b5d9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSingleSetting . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public abstract class RestSingleSetting extends RestBaseSetting { <nl> return asIdMatcher ( this . id ) ; <nl> } <nl> <nl> - protected final boolean isIdRequired ( ) { <nl> + protected boolean isIdRequired ( ) { <nl> return false ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index fc716da . . d642d01 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> this . content = content ; <nl> } <nl> <nl> - private static String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { <nl> + private static final String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { <nl> HttpHeaders . CONTENT _ TYPE <nl> } ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> index df937e8 . . 8652775 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import static com . google . common . base . Predicates . or ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> import static com . google . common . collect . Iterables . concat ; <nl> <nl> - public final class Dynamics { <nl> + public class Dynamics { <nl> private static final Map < String , String > EXTRACTORS = ImmutableMap . < String , String > builder ( ) <nl> . put ( " headers " , " header " ) <nl> . put ( " queries " , " query " ) <nl> @ @ - 27 , 7 + 27 , 7 @ @ public final class Dynamics { <nl> . put ( " forms " , " form " ) <nl> . build ( ) ; <nl> <nl> - protected Predicate < Field > isClassField ( ) { <nl> + protected final Predicate < Field > isClassField ( ) { <nl> return new Predicate < Field > ( ) { <nl> @ Override <nl> public boolean apply ( final Field field ) { <nl> @ @ - 36 , 7 + 36 , 7 @ @ public final class Dynamics { <nl> } ; <nl> } <nl> <nl> - protected Predicate < Field > isFinalField ( ) { <nl> + protected final Predicate < Field > isFinalField ( ) { <nl> return new Predicate < Field > ( ) { <nl> @ Override <nl> public boolean apply ( final Field field ) { <nl> @ @ - 45 , 7 + 45 , 7 @ @ public final class Dynamics { <nl> } ; <nl> } <nl> <nl> - protected < T > Predicate < Field > fieldExist ( final T target ) { <nl> + protected final < T > Predicate < Field > fieldExist ( final T target ) { <nl> return new Predicate < Field > ( ) { <nl> @ Override <nl> public boolean apply ( final Field field ) { <nl> @ @ - 58 , 7 + 58 , 7 @ @ public final class Dynamics { <nl> } ; <nl> } <nl> <nl> - protected Iterable < Field > getFields ( final Class < ? > clazz ) { <nl> + protected final Iterable < Field > getFields ( final Class < ? > clazz ) { <nl> ImmutableList < Field > fieldsForCurrent = getFieldsForCurrent ( clazz ) ; <nl> if ( clazz . getSuperclass ( ) = = null ) { <nl> return fieldsForCurrent ; <nl> @ @ - 76 , 7 + 76 , 7 @ @ public final class Dynamics { <nl> return copyOf ( fields ) ; <nl> } <nl> <nl> - protected < T > Predicate < Field > isValidField ( final T target ) { <nl> + protected final < T > Predicate < Field > isValidField ( final T target ) { <nl> return and ( not ( or ( isClassField ( ) , isFinalField ( ) ) ) , fieldExist ( target ) ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> index a869d89 . . df937e8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import static com . google . common . base . Predicates . or ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> import static com . google . common . collect . Iterables . concat ; <nl> <nl> - public class Dynamics { <nl> + public final class Dynamics { <nl> private static final Map < String , String > EXTRACTORS = ImmutableMap . < String , String > builder ( ) <nl> . put ( " headers " , " header " ) <nl> . put ( " queries " , " query " )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestDeleteSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestDeleteSetting . java <nl> index 30c3c01 . . 72e745b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestDeleteSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestDeleteSetting . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . github . dreamhead . moco . MocoRest ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class RestDeleteSetting extends RestSingleSetting { <nl> + public final class RestDeleteSetting extends RestSingleSetting { <nl> @ Override <nl> protected RestSettingBuilder doStartRestSetting ( ) { <nl> return MocoRest . delete ( id ( ) ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestHeadSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestHeadSetting . java <nl> index ce4da70 . . c851a53 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestHeadSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestHeadSetting . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . github . dreamhead . moco . MocoRest ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class RestHeadSetting extends RestSingleSetting { <nl> + public final class RestHeadSetting extends RestSingleSetting { <nl> @ Override <nl> protected RestSettingBuilder doStartRestSetting ( ) { <nl> if ( hasId ( ) ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index b534a17 . . f6d228b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class PostSetting { <nl> + public final class PostSetting { <nl> private TextContainer url ; <nl> private TextContainer content ; <nl> private Object json ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProcedureResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProcedureResponseHandler . java <nl> index 5722131 . . fd0e2b8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProcedureResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProcedureResponseHandler . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoProcedure ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> <nl> - public class ProcedureResponseHandler extends AbstractResponseHandler implements ResponseHandler { <nl> + public final class ProcedureResponseHandler extends AbstractResponseHandler implements ResponseHandler { <nl> private final MocoProcedure procedure ; <nl> <nl> public ProcedureResponseHandler ( final MocoProcedure procedure ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java <nl> index add71e4 . . 96b5daa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public class Resource implements Identifiable , ConfigApplier < Resource > , ResourceReader { <nl> + public final class Resource implements Identifiable , ConfigApplier < Resource > , ResourceReader { <nl> private final Identifiable identifiable ; <nl> private final ResourceConfigApplier configApplier ; <nl> private final ResourceReader reader ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index 6556ff3 . . 77c3508 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import java . util . List ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> @ JsonDeserialize ( using = CookieContainerDeserializer . class ) <nl> - public class CookieContainer implements Container { <nl> + public final class CookieContainer implements Container { <nl> private String value ; <nl> private String path ; <nl> private String domain ; <nl> @ @ - 40 , 19 + 40 , 19 @ @ public class CookieContainer implements Container { <nl> return container ; <nl> } <nl> <nl> - public final String getValue ( ) { <nl> + public String getValue ( ) { <nl> return value ; <nl> } <nl> <nl> - public final boolean isForTemplate ( ) { <nl> + public boolean isForTemplate ( ) { <nl> return this . template ! = null ; <nl> } <nl> <nl> - public final String getTemplate ( ) { <nl> + public String getTemplate ( ) { <nl> return template ; <nl> } <nl> <nl> - public final CookieAttribute [ ] getOptions ( ) { <nl> + public CookieAttribute [ ] getOptions ( ) { <nl> List < CookieAttribute > options = newArrayList ( ) ; <nl> if ( this . path ! = null ) { <nl> options . add ( CookieAttribute . path ( this . path ) ) ;
diff - - git a / build . gradle b / build . gradle <nl> index 8544d29 . . 8d98893 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> wrapper { <nl> - gradleVersion = ' 4 . 10 . 1 ' <nl> + gradleVersion = ' 4 . 10 . 2 ' <nl> } <nl> \ No newline at end of file <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 5c1b6c9 . . e0b3fb8 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 10 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 10 . 2 - bin . zip <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists
diff - - git a / build . gradle b / build . gradle <nl> index 42a998d . . 8544d29 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 29 . Final ' <nl> + nettyVersion = ' 4 . 1 . 30 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 7 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / RequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / RequestMatcher . java <nl> index dbd14e2 . . 8e86d6f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / RequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / RequestMatcher . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . github . dreamhead . moco . matcher . AbstractRequestMatcher ; <nl> import static com . github . dreamhead . moco . internal . InternalApis . context ; <nl> <nl> public interface RequestMatcher extends ConfigApplier < RequestMatcher > { <nl> - boolean match ( final Request request ) ; <nl> + boolean match ( Request request ) ; <nl> <nl> RequestMatcher ANY _ REQUEST _ MATCHER = new AbstractRequestMatcher ( ) { <nl> @ Override
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventSetting . java <nl> index 8cc64ce . . 93f8c02 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventSetting . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import static com . google . common . collect . ImmutableList . of ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class EventSetting { <nl> + public final class EventSetting { <nl> private CompleteEventSetting complete ; <nl> <nl> public ImmutableList < MocoEventTrigger > triggers ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoMonitor . java <nl> index 2184999 . . ed31f79 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoMonitor . java <nl> @ @ - 4 , 14 + 4 , 14 @ @ import com . google . common . eventbus . Subscribe ; <nl> <nl> public interface MocoMonitor { <nl> @ Subscribe <nl> - void onMessageArrived ( final Request request ) ; <nl> + void onMessageArrived ( Request request ) ; <nl> <nl> @ Subscribe <nl> - void onException ( final Throwable t ) ; <nl> + void onException ( Throwable t ) ; <nl> <nl> @ Subscribe <nl> - void onMessageLeave ( final Response response ) ; <nl> + void onMessageLeave ( Response response ) ; <nl> <nl> @ Subscribe <nl> - void onUnexpectedMessage ( final Request request ) ; <nl> + void onUnexpectedMessage ( Request request ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java <nl> index 308fb0c . . c1741d5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco . internal ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . Response ; <nl> <nl> - public class SessionContext { <nl> + public final class SessionContext { <nl> private final Request request ; <nl> private final Response response ; <nl>
diff - - git a / build . gradle b / build . gradle <nl> index 518d82e . . 4b0ce35 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> wrapper { <nl> - gradleVersion = ' 4 . 10 ' <nl> + gradleVersion = ' 4 . 10 . 1 ' <nl> } <nl> \ No newline at end of file <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 115e6ac . . 5c1b6c9 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 10 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 10 . 1 - bin . zip <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ExistMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ExistMatcher . java <nl> index 15482b8 . . aa99509 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ExistMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ExistMatcher . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public class ExistMatcher < T > extends AbstractRequestMatcher { <nl> + public final class ExistMatcher < T > extends AbstractRequestMatcher { <nl> private final RequestExtractor < T > extractor ; <nl> <nl> public ExistMatcher ( final RequestExtractor < T > extractor ) {
diff - - git a / build . gradle b / build . gradle <nl> index c7cf62b . . 518d82e 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 6 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 21 . 0 ' <nl> + mockitoVersion = ' 2 . 22 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 6 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> index fd398cb . . 032a05c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . nio . charset . Charset ; <nl> import static com . google . common . io . Files . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> - public class FileResourceReader extends AbstractFileResourceReader { <nl> + public final class FileResourceReader extends AbstractFileResourceReader { <nl> private final Optional < MocoConfig > config ; <nl> <nl> public FileResourceReader ( final Resource file ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 0e2c237 . . 4cee669 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . google . common . base . MoreObjects ; <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class GetSetting { <nl> + public final class GetSetting { <nl> private TextContainer url ; <nl> <nl> public MocoEventAction createAction ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java <nl> index fb074c4 . . 45d4dca 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . base . Predicate ; <nl> <nl> - public class EqRequestMatcher < T > extends AbstractOperatorMatcher < T > { <nl> + public final class EqRequestMatcher < T > extends AbstractOperatorMatcher < T > { <nl> public EqRequestMatcher ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> super ( extractor , expected , new Predicate < String > ( ) { <nl> @ Override
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java <nl> index 194fe8c . . e4500b0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . base . Predicate ; <nl> <nl> - public class EndsWithMatcher < T > extends AbstractOperatorMatcher < T > { <nl> + public final class EndsWithMatcher < T > extends AbstractOperatorMatcher < T > { <nl> public EndsWithMatcher ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> super ( extractor , expected , new Predicate < String > ( ) { <nl> @ Override
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java <nl> index d89ab68 . . 5d1e112 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . google . common . base . Optional ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class PlainExtractor < T > implements RequestExtractor < T > { <nl> + public final class PlainExtractor < T > implements RequestExtractor < T > { <nl> private final T object ; <nl> <nl> public PlainExtractor ( final T object ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> index 0276fcb . . dd13050 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import java . nio . charset . Charset ; <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class InternalMessageContent { <nl> + public final class InternalMessageContent { <nl> private byte [ ] content ; <nl> private Charset charset ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> index 1fb6e0d . . db0342b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ import static io . netty . handler . codec . http . HttpUtil . setContentLength ; <nl> import static io . netty . handler . codec . http . HttpUtil . setKeepAlive ; <nl> <nl> @ Sharable <nl> - public class MocoHandler extends SimpleChannelInboundHandler < FullHttpRequest > { <nl> + public final class MocoHandler extends SimpleChannelInboundHandler < FullHttpRequest > { <nl> private static final int DEFAULT _ STATUS = HttpResponseStatus . OK . code ( ) ; <nl> private final ImmutableList < Setting < HttpResponseSetting > > settings ; <nl> private final Setting < HttpResponseSetting > anySetting ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 640f0b3 . . c7e17af 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . util . Maps . arrayValueToSimple ; <nl> <nl> - public class TemplateRequest { <nl> + public final class TemplateRequest { <nl> private Request request ; <nl> <nl> public TemplateRequest ( final Request request ) {
diff - - git a / build . gradle b / build . gradle <nl> index b1426c4 . . c7cf62b 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> wrapper { <nl> - gradleVersion = ' 4 . 9 ' <nl> + gradleVersion = ' 4 . 10 ' <nl> } <nl> \ No newline at end of file <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index a95009c . . 115e6ac 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 9 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 10 - bin . zip <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java <nl> index 8d98a56 . . 3662876 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . google . common . base . Optional ; <nl> public abstract class HttpRequestExtractor < T > implements RequestExtractor < T > { <nl> protected abstract Optional < T > doExtract ( HttpRequest request ) ; <nl> <nl> - public Optional < T > extract ( final Request request ) { <nl> + public final Optional < T > extract ( final Request request ) { <nl> if ( HttpRequest . class . isInstance ( request ) ) { <nl> return doExtract ( HttpRequest . class . cast ( request ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / NotRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / NotRequestMatcher . java <nl> index 61210cb . . 9548b8a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / NotRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / NotRequestMatcher . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> <nl> - public class NotRequestMatcher extends AbstractRequestMatcher { <nl> + public final class NotRequestMatcher extends AbstractRequestMatcher { <nl> private final RequestMatcher matcher ; <nl> <nl> public NotRequestMatcher ( final RequestMatcher matcher ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java <nl> index 8d04809 . . 63cd677 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> <nl> - public class Session { <nl> + public final class Session { <nl> @ JsonDeserialize ( as = DefaultHttpRequest . class ) <nl> private HttpRequest request ; <nl> @ JsonDeserialize ( as = DefaultHttpResponse . class )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / ResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / ResponseHandlerFactory . java <nl> index 708fe5d . . 717fe4e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / ResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / ResponseHandlerFactory . java <nl> @ @ - 4 , 5 + 4 , 5 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> <nl> public interface ResponseHandlerFactory { <nl> - ResponseHandler createResponseHandler ( final ResponseSetting request ) ; <nl> + ResponseHandler createResponseHandler ( ResponseSetting request ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index e9d5d6d . . 7fdf5c3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonIgnore ; <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . fasterxml . jackson . databind . annotation . JsonSerialize ; <nl> import com . github . dreamhead . moco . HttpMethod ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> @ @ - 71 , 6 + 72 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> @ Override <nl> + @ JsonSerialize ( as = Map . class ) <nl> public ImmutableMap < String , String [ ] > getQueries ( ) { <nl> return queries ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoClient . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoClient . java <nl> index 96126df . . d9c666a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoClient . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoClient . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import io . netty . channel . nio . NioEventLoopGroup ; <nl> import io . netty . channel . socket . nio . NioSocketChannel ; <nl> <nl> public class MocoClient { <nl> - public void run ( final String host , final int port , final ChannelHandler pipelineFactory ) { <nl> + public final void run ( final String host , final int port , final ChannelHandler pipelineFactory ) { <nl> EventLoopGroup group = new NioEventLoopGroup ( ) ; <nl> Bootstrap bootstrap = new Bootstrap ( ) ; <nl> bootstrap . group ( group )
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java <nl> index d862840 . . d31d57e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import static com . google . common . base . Optional . of ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . Maps . newHashMap ; <nl> <nl> - public class FormsRequestExtractor extends HttpRequestExtractor < ImmutableMap < String , String > > { <nl> + public final class FormsRequestExtractor extends HttpRequestExtractor < ImmutableMap < String , String > > { <nl> @ Override <nl> protected Optional < ImmutableMap < String , String > > doExtract ( final HttpRequest request ) { <nl> HttpPostRequestDecoder decoder = null ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> index 9e667b8 . . a591b46 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> <nl> - public class ShutdownRunner extends WatcherRunner { <nl> + public final class ShutdownRunner extends WatcherRunner { <nl> private final ShutdownMocoRunnerWatcher monitor ; <nl> <nl> public ShutdownRunner ( final Runner runner ,
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HttpMethodExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HttpMethodExtractor . java <nl> index 85f0945 . . 4248f9c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HttpMethodExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HttpMethodExtractor . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . google . common . base . Optional ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class HttpMethodExtractor extends HttpRequestExtractor < String > { <nl> + public final class HttpMethodExtractor extends HttpRequestExtractor < String > { <nl> @ Override <nl> protected Optional < String > doExtract ( final HttpRequest request ) { <nl> return of ( request . getMethod ( ) . name ( ) ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogFormatter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogFormatter . java <nl> index 585255b . . a5768f2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogFormatter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogFormatter . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . Response ; <nl> <nl> public interface LogFormatter { <nl> - String format ( final Request request ) ; <nl> - String format ( final Response response ) ; <nl> - String format ( final Throwable e ) ; <nl> + String format ( Request request ) ; <nl> + String format ( Response response ) ; <nl> + String format ( Throwable e ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java <nl> index d128bbc . . faa3eb9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java <nl> @ @ - 13 , 12 + 13 , 12 @ @ public class SocketSetting extends BaseSetting < SocketResponseSetting > <nl> } <nl> <nl> @ Override <nl> - protected BaseSetting < SocketResponseSetting > createSetting ( final RequestMatcher matcher ) { <nl> + protected final BaseSetting < SocketResponseSetting > createSetting ( final RequestMatcher matcher ) { <nl> return new SocketSetting ( matcher ) ; <nl> } <nl> <nl> @ Override <nl> - protected RequestMatcher configMatcher ( final RequestMatcher matcher , final MocoConfig config ) { <nl> + protected final RequestMatcher configMatcher ( final RequestMatcher matcher , final MocoConfig config ) { <nl> return configItem ( matcher , config ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index c97a576 . . 918e0a3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } <nl> <nl> @ Override <nl> - public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> + public final MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> if ( ! request . isPresent ( ) ) { <nl> throw new IllegalStateException ( " Request is required to render template " ) ; <nl> } <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } <nl> <nl> @ Override <nl> - public MediaType getContentType ( final HttpRequest request ) { <nl> + public final MediaType getContentType ( final HttpRequest request ) { <nl> return template . getContentType ( request ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> index 74a8a04 . . 85eb5d7 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ public class RestSubResourceSetting extends ResourceSetting { <nl> private String id ; <nl> <nl> @ Override <nl> - public String toString ( ) { <nl> + public final String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " name " , this . getName ( ) )
diff - - git a / build . gradle b / build . gradle <nl> index ce5eba7 . . d5e6094 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 6 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 20 . 0 ' <nl> + mockitoVersion = ' 2 . 20 . 1 ' <nl> httpComponentVersion = ' 4 . 5 . 6 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / UnaryTimesVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / UnaryTimesVerification . java <nl> index bffcbfa . . 63780b5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / UnaryTimesVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / UnaryTimesVerification . java <nl> @ @ - 10 , 12 + 10 , 12 @ @ public abstract class UnaryTimesVerification extends AbstractTimesVerification { <nl> } <nl> <nl> @ Override <nl> - protected String expectedTip ( ) { <nl> + protected final String expectedTip ( ) { <nl> return Integer . toString ( count ) ; <nl> } <nl> <nl> @ Override <nl> - protected boolean meet ( final int size ) { <nl> + protected final boolean meet ( final int size ) { <nl> return doMeet ( size , count ) ; <nl> } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 841c8af . . ce5eba7 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 27 . Final ' <nl> + nettyVersion = ' 4 . 1 . 28 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 6 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / build . gradle b / build . gradle <nl> index 23f29e6 . . 841c8af 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 6 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 19 . 1 ' <nl> + mockitoVersion = ' 2 . 20 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 6 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookieRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookieRequestExtractor . java <nl> index cb741c0 . . 6276918 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookieRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookieRequestExtractor . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> <nl> import static com . google . common . base . Optional . fromNullable ; <nl> <nl> - public class CookieRequestExtractor extends HttpRequestExtractor < String > { <nl> + public final class CookieRequestExtractor extends HttpRequestExtractor < String > { <nl> private final CookiesRequestExtractor extractor = new CookiesRequestExtractor ( ) ; <nl> <nl> private final String key ;
diff - - git a / build . gradle b / build . gradle <nl> index e7aea7c . . 23f29e6 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 26 . Final ' <nl> + nettyVersion = ' 4 . 1 . 27 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 6 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> index c9375f6 . . 2037ad0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . google . common . collect . Iterables ; <nl> <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> <nl> - public class CycleHandler extends CollectionHandler { <nl> + public final class CycleHandler extends CollectionHandler { <nl> private CycleHandler ( final Iterable < ResponseHandler > handlers ) { <nl> super ( handlers ) ; <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 32b6c2d . . e9b4489 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import static com . google . common . io . Files . toByteArray ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . hamcrest . Matchers . greaterThan ; <nl> import static org . hamcrest . Matchers . lessThan ; <nl> + import static org . hamcrest . Matchers . lessThanOrEqualTo ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 529 , 7 + 530 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> assertThat ( result , lessThan ( 100d ) ) ; <nl> assertThat ( result , greaterThan ( 0d ) ) ; <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> - assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; <nl> } catch ( NumberFormatException e ) { <nl> fail ( ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / UriRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / UriRequestExtractor . java <nl> index 46a33a1 . . bf2bb0f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / UriRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / UriRequestExtractor . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import static com . google . common . base . Optional . of ; <nl> <nl> public class UriRequestExtractor extends HttpRequestExtractor < String > { <nl> @ Override <nl> - protected Optional < String > doExtract ( final HttpRequest request ) { <nl> + protected final Optional < String > doExtract ( final HttpRequest request ) { <nl> return of ( request . getUri ( ) ) ; <nl> } <nl> }
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> index fd48733 . . d0a4d2a 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import org . apache . http . message . BasicNameValuePair ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> + import java . text . DecimalFormat ; <nl> import java . text . SimpleDateFormat ; <nl> import java . util . Date ; <nl> <nl> @ @ - 17 , 6 + 18 , 7 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . hamcrest . Matchers . greaterThan ; <nl> import static org . hamcrest . Matchers . lessThan ; <nl> + import static org . hamcrest . Matchers . lessThanOrEqualTo ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ @ - 122 , 7 + 124 , 7 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( result , lessThan ( 100d ) ) ; <nl> assertThat ( result , greaterThan ( 0d ) ) ; <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> - assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 139 , 7 + 141 , 7 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> runWithConfiguration ( " template _ with _ function . json " ) ; <nl> String response = helper . get ( remoteUrl ( " / random _ template _ with _ format " ) ) ; <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> - assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; <nl> } <nl> <nl> @ Test
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / RequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / RequestMatcherFactory . java <nl> index 6287a4d . . c33fcea 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / RequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / RequestMatcherFactory . java <nl> @ @ - 4 , 5 + 4 , 5 @ @ import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . parser . model . RequestSetting ; <nl> <nl> public interface RequestMatcherFactory { <nl> - RequestMatcher createRequestMatcher ( final RequestSetting request ) ; <nl> + RequestMatcher createRequestMatcher ( RequestSetting request ) ; <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 7d4b170 . . 9971067 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 80 , 7 + 80 , 7 @ @ subprojects { <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 19 . 0 ' <nl> - httpComponentVersion = ' 4 . 5 . 5 ' <nl> + httpComponentVersion = ' 4 . 5 . 6 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 ' <nl> jsonAssertVersion = ' 1 . 5 . 0 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / ResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / ResponseHandler . java <nl> index 9a394d5 . . d601cbc 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / ResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / ResponseHandler . java <nl> @ @ - 3 , 5 + 3 , 5 @ @ package com . github . dreamhead . moco ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> <nl> public interface ResponseHandler extends ConfigApplier < ResponseHandler > { <nl> - void writeToResponse ( final SessionContext context ) ; <nl> + void writeToResponse ( SessionContext context ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java <nl> index 98468c1 . . 8d98a56 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpRequestExtractor . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco ; <nl> import com . google . common . base . Optional ; <nl> <nl> public abstract class HttpRequestExtractor < T > implements RequestExtractor < T > { <nl> - protected abstract Optional < T > doExtract ( final HttpRequest request ) ; <nl> + protected abstract Optional < T > doExtract ( HttpRequest request ) ; <nl> <nl> public Optional < T > extract ( final Request request ) { <nl> if ( HttpRequest . class . isInstance ( request ) ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> index 3a3f331 . . e8e4695 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ public abstract class SimpleRestSetting implements RestSetting { <nl> private final Optional < RequestMatcher > matcher ; <nl> private final ResponseHandler handler ; <nl> <nl> - protected abstract RequestMatcher getBaseRequestMatcher ( final RestIdMatcher resourceName ) ; <nl> + protected abstract RequestMatcher getBaseRequestMatcher ( RestIdMatcher resourceName ) ; <nl> <nl> public SimpleRestSetting ( final HttpMethod method , <nl> final Optional < RequestMatcher > matcher , final ResponseHandler handler ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / RestIdMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / RestIdMatcher . java <nl> index fe5ab16 . . ba28a8c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / RestIdMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / RestIdMatcher . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> public interface RestIdMatcher { <nl> - RequestMatcher matcher ( final RestIdMatcher resourceName ) ; <nl> + RequestMatcher matcher ( RestIdMatcher resourceName ) ; <nl> String resourceUri ( ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Server . java b / moco - core / src / main / java / com / github / dreamhead / moco / Server . java <nl> index 9510ed4 . . 0b30fb1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Server . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Server . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco ; <nl> public interface Server < T extends ResponseSetting > extends ResponseSetting < T > { <nl> int port ( ) ; <nl> <nl> - T request ( final RequestMatcher matcher ) ; <nl> + T request ( RequestMatcher matcher ) ; <nl> <nl> - T request ( final RequestMatcher . . . matchers ) ; <nl> + T request ( RequestMatcher . . . matchers ) ; <nl> }
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> index 2a698cd . . fd48733 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> @ @ - 141 , 4 + 141 , 13 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ random _ without _ arg _ from _ template ( ) throws IOException { <nl> + runWithConfiguration ( " template _ with _ function . json " ) ; <nl> + String response = helper . get ( remoteUrl ( " / random _ template _ without _ arg " ) ) ; <nl> + double result = Double . parseDouble ( response ) ; <nl> + assertThat ( result , lessThan ( 1d ) ) ; <nl> + assertThat ( result , greaterThan ( 0d ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / template _ with _ function . json b / moco - runner / src / test / resources / template _ with _ function . json <nl> index b898425 . . 4c1f4aa 100644 <nl> - - - a / moco - runner / src / test / resources / template _ with _ function . json <nl> + + + b / moco - runner / src / test / resources / template _ with _ function . json <nl> @ @ - 38 , 5 + 38 , 15 @ @ <nl> " template " : " $ { random ( \ " # # # . # # # # # # \ " ) } " <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / random _ template _ without _ arg " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( ) } " <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> index 773eb0e . . c57166d 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> @ @ - 124 , 4 + 124 , 13 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ random _ with _ range _ from _ template ( ) throws IOException { <nl> + runWithConfiguration ( " template _ with _ function . json " ) ; <nl> + String response = helper . get ( remoteUrl ( " / random _ template _ with _ range " ) ) ; <nl> + double result = Double . parseDouble ( response ) ; <nl> + assertThat ( result , lessThan ( 100d ) ) ; <nl> + assertThat ( result , greaterThan ( 0d ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / template _ with _ function . json b / moco - runner / src / test / resources / template _ with _ function . json <nl> index c4442de . . 8e9705e 100644 <nl> - - - a / moco - runner / src / test / resources / template _ with _ function . json <nl> + + + b / moco - runner / src / test / resources / template _ with _ function . json <nl> @ @ - 18 , 5 + 18 , 15 @ @ <nl> " template " : " $ { random ( 100 , \ " # # # . # # # # # # \ " ) } " <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / random _ template _ with _ range " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( 100 ) } " <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 78ea4d6 . . e1b1f4a 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2160 , 7 + 2160 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { now ( ' yyyy - MM - dd ' ) } " ) ) ; <nl> } , <nl> " response " : { <nl> " text " : { <nl> - " template " : " $ { now ( ' yyyy - MM - dd ' ) } " <nl> + " template " : " $ { now ( \ " yyyy - MM - dd \ " ) } " <nl> } <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> index a7d788e . . e3f09c0 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> @ @ - 8 , 6 + 8 , 8 @ @ import org . apache . http . message . BasicNameValuePair ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> + import java . text . SimpleDateFormat ; <nl> + import java . util . Date ; <nl> <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> @ @ - 100 , 4 + 102 , 12 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> String content = helper . postContent ( remoteUrl ( " / json _ template " ) , " { \ " foo \ " : \ " bar \ " } " ) ; <nl> assertThat ( content , is ( " bar " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ now _ from _ template ( ) throws IOException { <nl> + runWithConfiguration ( " template _ with _ function . json " ) ; <nl> + Date date = new Date ( ) ; <nl> + SimpleDateFormat format = new SimpleDateFormat ( " yyyy - MM - dd " ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / now _ template " ) ) , is ( format . format ( date ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / template _ with _ function . json b / moco - runner / src / test / resources / template _ with _ function . json <nl> new file mode 100644 <nl> index 0000000 . . 74c8c90 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / template _ with _ function . json <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / now _ template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { now ( \ " yyyy - MM - dd \ " ) } " <nl> + } <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file
diff - - git a / build . gradle b / build . gradle <nl> index a89662c . . 7d4b170 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> wrapper { <nl> - gradleVersion = ' 4 . 8 ' <nl> + gradleVersion = ' 4 . 8 . 1 ' <nl> } <nl> \ No newline at end of file <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index d2c45a4 . . 2d80b69 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 8 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 8 . 1 - bin . zip <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index ac06b4e . . 4e1456d 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> # # APIs <nl> * ` cycle ` API returns response as a cycle . <nl> * ` now ` as template function is supported in template <nl> + * ` random ` as template function is supported in template <nl> * ` req . json ` is supported in template <nl> <nl> # # Implementation Details <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 283eae2 . . 78ea4d6 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2160 , 7 + 2160 , 103 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { now ( ' yyyy - MM - dd ' ) } " ) ) ; <nl> } , <nl> " response " : { <nl> " text " : { <nl> - " template " : " $ { now ( ' yyyy - MM - dd ' ) } " ) <nl> + " template " : " $ { now ( ' yyyy - MM - dd ' ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # # random <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + ` random ` will generate a random number . If you didn ' t pass any argument , the generated random will be between 0 and 1 . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The first argument is random number range which means the generated number will be between 0 and range . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( 100 ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The last argument is number format . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 , ' # # # . # # # ' ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( 100 , ' # # # . # # # ' ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + You can also use number format directly without range . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ' # # # . # # # ' ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( ' # # # . # # # ' ) } " <nl> } <nl> } <nl> }
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 3f48a91 . . fa9c196 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1949 , 7 + 1949 , 7 @ @ Header is another important element in template and we can use ` req . headers ` for <nl> * Java <nl> <nl> ` ` ` java <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] " ) ) ; <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] } " ) ) ; <nl> ` ` ` <nl> <nl> * JSON <nl> @ @ - 1975 , 7 + 1975 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] " ) ) ; <nl> * Java <nl> <nl> ` ` ` java <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] " ) ) ; <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] } " ) ) ; <nl> ` ` ` <nl> <nl> * JSON <nl> @ @ - 2001 , 7 + 2001 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] " ) ) ; <nl> * Java <nl> <nl> ` ` ` java <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . forms [ ' foo ' ] " ) ) ; <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . forms [ ' foo ' ] } " ) ) ; <nl> ` ` ` <nl> <nl> * JSON <nl> @ @ - 2027 , 7 + 2027 , 7 @ @ Cookie from request can extracted by ` req . cookies ` . <nl> * Java <nl> <nl> ` ` ` java <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . cookies [ ' foo ' ] " ) ) ; <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . cookies [ ' foo ' ] } " ) ) ; <nl> ` ` ` <nl> <nl> * JSON <nl> @ @ - 2045 , 6 + 2045 , 32 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . cookies [ ' foo ' ] " ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # # JSON <nl> + <nl> + If your request is a JSON request , you can use ` req . json ` to visit your json object . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . json . foo } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { req . json . foo } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + <nl> # # # Custom Variable <nl> * * @ Since 0 . 9 . 1 * * <nl> <nl> @ @ - 2137 , 6 + 2163 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { now ( ' yyyy - MM - dd ' ) } " ) ) ; <nl> } <nl> } <nl> } <nl> + ` ` ` <nl> <nl> # # # Redirect <nl> * * @ Since 0 . 10 . 2 * *
diff - - git a / build . gradle b / build . gradle <nl> index 1a80d58 . . a89662c 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> guavaVersion = ' 20 . 0 ' <nl> nettyVersion = ' 4 . 1 . 25 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> - jacksonVersion = ' 2 . 9 . 5 ' <nl> + jacksonVersion = ' 2 . 9 . 6 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 19 . 0 '
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 07cdf59 . . 5a7a4c5 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 560 , 4 + 560 , 16 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ throw _ exception _ for _ unknown _ json ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . json . code } $ { req . json . message } " ) ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + HttpResponse response = helper . getResponse ( remoteUrl ( " / template " ) ) ; <nl> + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 400 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 3d623e0 . . 27d88db 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> import java . util . Map ; <nl> @ @ - 84 , 4 + 85 , 8 @ @ public class TemplateRequest { <nl> <nl> throw new IllegalArgumentException ( " Request is not HTTP request " ) ; <nl> } <nl> + <nl> + public Object getJson ( ) { <nl> + return Jsons . toObject ( this . request . getContent ( ) . toString ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index e9b19f9 . . c97a576 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 195 , 7 + 195 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> if ( reference < = 0 ) { <nl> throw new IllegalArgumentException ( " Random range should be greater than 0 " ) ; <nl> } <nl> - <nl> + <nl> return Optional . of ( reference ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 2e8a31d . . 0108d02 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 46 , 6 + 46 , 14 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static Object toObject ( final String value ) { <nl> + try { <nl> + return mapper . readValue ( value , Object . class ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { <nl> try { <nl> return mapper . readValue ( value , clazz ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index fb61acd . . 07cdf59 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 549 , 4 + 549 , 15 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ json ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . json . code } $ { req . json . message } " ) ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " 1 message " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 7bc3a7c . . fb61acd 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 517 , 6 + 517 , 27 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ generate _ response _ with _ random _ with _ range _ and _ data _ format ( ) throws Exception { <nl> + server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( 100 , ' # # # . # # # # # # ' ) } " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> + try { <nl> + double result = Double . parseDouble ( response ) ; <nl> + assertThat ( result , lessThan ( 100d ) ) ; <nl> + assertThat ( result , greaterThan ( 0d ) ) ; <nl> + String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> + assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + } catch ( NumberFormatException e ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ throw _ exception _ for _ random _ with _ range _ less _ than _ 0 ( ) throws Exception { <nl> server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( - 10 ) } " ) ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index e3a52ab . . c5af825 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 143 , 6 + 143 , 10 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> private static class NowMethod implements TemplateMethodModelEx { <nl> @ Override <nl> public Object exec ( final List arguments ) { <nl> + if ( arguments . size ( ) < 1 ) { <nl> + throw new IllegalArgumentException ( " Date format is required " ) ; <nl> + } <nl> + <nl> Date date = new Date ( ) ; <nl> SimpleDateFormat format = new SimpleDateFormat ( arguments . get ( 0 ) . toString ( ) ) ; <nl> return format . format ( date ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 19987eb . . b6f1882 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . google . common . collect . ImmutableMultimap ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . Resources ; <nl> import org . apache . http . Header ; <nl> + import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> import org . apache . http . client . HttpResponseException ; <nl> @ @ - 444 , 6 + 445 , 19 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ throw _ exception _ for _ now _ without _ format ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { now ( ) } " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + HttpResponse response = helper . getResponse ( remoteUrl ( " / template " ) ) ; <nl> + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 400 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ generate _ response _ with _ random ( ) throws Exception { <nl> server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( ) } " ) ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 49b8c98 . . b728696 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 152 , 18 + 152 , 18 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> private static class RandomMethod implements TemplateMethodModelEx { <nl> @ Override <nl> public Object exec ( List arguments ) { <nl> - Optional < Long > seed = getSeed ( arguments ) ; <nl> - Random random = getRandom ( seed ) ; <nl> + Optional < Long > range = getRange ( arguments ) ; <nl> Optional < ? extends NumberFormat > format = getFormat ( arguments ) ; <nl> + double result = new Random ( ) . nextDouble ( ) * range . or ( 1L ) ; <nl> + <nl> if ( format . isPresent ( ) ) { <nl> - return format . get ( ) . format ( random . nextDouble ( ) ) ; <nl> + return format . get ( ) . format ( result ) ; <nl> } <nl> - return random . nextDouble ( ) ; <nl> + return result ; <nl> } <nl> <nl> private Optional < ? extends NumberFormat > getFormat ( final List arguments ) { <nl> if ( arguments . size ( ) > 0 ) { <nl> - <nl> Object last = arguments . get ( arguments . size ( ) - 1 ) ; <nl> if ( last instanceof SimpleScalar ) { <nl> SimpleScalar lastArgument = ( SimpleScalar ) last ; <nl> @ @ - 174 , 14 + 174 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> return Optional . absent ( ) ; <nl> } <nl> <nl> - private Random getRandom ( final Optional < Long > seed ) { <nl> - if ( seed . isPresent ( ) ) { <nl> - return new Random ( seed . get ( ) ) ; <nl> - } <nl> - return new Random ( ) ; <nl> - } <nl> - <nl> - private Optional < Long > getSeed ( List arguments ) { <nl> + private Optional < Long > getRange ( List arguments ) { <nl> if ( arguments . size ( ) > 0 & & arguments . get ( 0 ) instanceof SimpleNumber ) { <nl> SimpleNumber seed = ( SimpleNumber ) arguments . get ( 0 ) ; <nl> return Optional . of ( seed . getAsNumber ( ) . longValue ( ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index d48337a . . 19987eb 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 463 , 7 + 463 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ generate _ response _ with _ random _ with _ seed ( ) throws Exception { <nl> + public void should _ generate _ response _ with _ random _ with _ range ( ) throws Exception { <nl> server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 472 , 7 + 472 , 8 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> try { <nl> double result = Double . parseDouble ( response ) ; <nl> - assertThat ( result , lessThan ( 1d ) ) ; <nl> + assertThat ( result , lessThan ( 100d ) ) ; <nl> + assertThat ( result , greaterThan ( 0d ) ) ; <nl> } catch ( NumberFormatException e ) { <nl> fail ( ) ; <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 8e1fb16 . . a2d441d 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 18 , 10 + 18 , 22 @ @ import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . nio . charset . Charset ; <nl> import java . text . SimpleDateFormat ; <nl> - import java . time . format . DateTimeFormatter ; <nl> import java . util . Date ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . cookie ; <nl> + import static com . github . dreamhead . moco . Moco . eq ; <nl> + import static com . github . dreamhead . moco . Moco . file ; <nl> + import static com . github . dreamhead . moco . Moco . header ; <nl> + import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . Moco . status ; <nl> + import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . Moco . var ; <nl> + import static com . github . dreamhead . moco . Moco . version ; <nl> + import static com . github . dreamhead . moco . Moco . xpath ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ;
diff - - git a / build . gradle b / build . gradle <nl> index e0704e3 . . 47d4412 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 6 + 148 , 6 @ @ subprojects { <nl> } <nl> } <nl> <nl> - task wrapper ( type : Wrapper ) { <nl> + wrapper { <nl> gradleVersion = ' 4 . 8 ' <nl> - } <nl> + } <nl> \ No newline at end of file
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 1358a48 . . f231021 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import freemarker . core . ParseException ; <nl> import freemarker . template . Configuration ; <nl> import freemarker . template . DefaultObjectWrapperBuilder ; <nl> import freemarker . template . SimpleNumber ; <nl> + import freemarker . template . SimpleScalar ; <nl> import freemarker . template . Template ; <nl> import freemarker . template . TemplateException ; <nl> import freemarker . template . TemplateMethodModelEx ; <nl> @ @ - 30 , 6 + 31 , 8 @ @ import java . io . IOException ; <nl> import java . io . OutputStreamWriter ; <nl> import java . io . Writer ; <nl> import java . nio . charset . Charset ; <nl> + import java . text . DecimalFormat ; <nl> + import java . text . NumberFormat ; <nl> import java . text . SimpleDateFormat ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> @ @ - 149 , 15 + 152 , 30 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } <nl> <nl> private static class RandomMethod implements TemplateMethodModelEx { <nl> - <nl> - <nl> @ Override <nl> public Object exec ( List arguments ) { <nl> Optional < Long > seed = getSeed ( arguments ) ; <nl> Random random = getRandom ( seed ) ; <nl> + Optional < ? extends NumberFormat > format = getFormat ( arguments ) ; <nl> + if ( format . isPresent ( ) ) { <nl> + return format . get ( ) . format ( random . nextDouble ( ) ) ; <nl> + } <nl> return random . nextDouble ( ) ; <nl> } <nl> <nl> + private Optional < ? extends NumberFormat > getFormat ( final List arguments ) { <nl> + if ( arguments . size ( ) > 0 ) { <nl> + <nl> + Object last = arguments . get ( arguments . size ( ) - 1 ) ; <nl> + if ( last instanceof SimpleScalar ) { <nl> + SimpleScalar lastArgument = ( SimpleScalar ) last ; <nl> + return Optional . of ( new DecimalFormat ( lastArgument . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + return Optional . absent ( ) ; <nl> + } <nl> + <nl> private Random getRandom ( final Optional < Long > seed ) { <nl> if ( seed . isPresent ( ) ) { <nl> return new Random ( seed . get ( ) ) ; <nl> @ @ - 166 , 8 + 184 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } <nl> <nl> private Optional < Long > getSeed ( List arguments ) { <nl> - if ( arguments . size ( ) > 0 ) { <nl> - <nl> + if ( arguments . size ( ) > 0 & & arguments . get ( 0 ) instanceof SimpleNumber ) { <nl> SimpleNumber seed = ( SimpleNumber ) arguments . get ( 0 ) ; <nl> return Optional . of ( seed . getAsNumber ( ) . longValue ( ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 93b5bed . . 8e1fb16 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ImmutableMultimap ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . Resources ; <nl> @ @ - 463 , 4 + 464 , 25 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ generate _ response _ with _ random _ with _ data _ format ( ) throws Exception { <nl> + server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( ' # # # . # # # # # # ' ) } " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> + try { <nl> + String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> + assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + <nl> + double result = Double . parseDouble ( response ) ; <nl> + assertThat ( result , lessThan ( 1d ) ) ; <nl> + } catch ( NumberFormatException e ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 8886ff7 . . cc8237b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . nio . charset . Charset ; <nl> import java . text . SimpleDateFormat ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> + import java . util . Random ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> @ @ - 40 , 7 + 41 , 7 @ @ import static com . google . common . collect . ImmutableMap . copyOf ; <nl> public class TemplateResourceReader implements ContentResourceReader { <nl> private static final Version CURRENT _ VERSION = Configuration . getVersion ( ) ; <nl> private static final String TEMPLATE _ NAME = " template " ; <nl> - private static final List < String > RESERVED _ NAME = ImmutableList . of ( " req " , " now " ) ; <nl> + private static final List < String > RESERVED _ NAME = ImmutableList . of ( " req " , " now " , " random " ) ; <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( TemplateResourceReader . class ) ; <nl> <nl> @ @ - 114 , 6 + 115 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> return ImmutableMap . < String , Object > builder ( ) <nl> . putAll ( toVariableString ( request ) ) <nl> . put ( " now " , new NowMethod ( ) ) <nl> + . put ( " random " , new RandomMethod ( ) ) <nl> . put ( " req " , toTemplateRequest ( request ) ) <nl> . build ( ) ; <nl> } <nl> @ @ - 144 , 4 + 146 , 13 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> return format . format ( date ) ; <nl> } <nl> } <nl> + <nl> + private static class RandomMethod implements TemplateMethodModelEx { <nl> + private Random random = new Random ( ) ; <nl> + <nl> + @ Override <nl> + public Object exec ( List arguments ) { <nl> + return random . nextDouble ( ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index b27a600 . . 3c65685 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import static com . google . common . collect . ImmutableMap . of ; <nl> import static com . google . common . io . Files . toByteArray ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> @ Test <nl> @ @ - 426 , 4 + 427 , 21 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ generate _ response _ with _ random ( ) throws Exception { <nl> + server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( ) } " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> + try { <nl> + Double . parseDouble ( response ) ; <nl> + } catch ( NumberFormatException e ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index b6ac842 . . 8886ff7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> return name ; <nl> } <nl> <nl> - throw new IllegalArgumentException ( " Template variable name should not be null " ) ; <nl> + throw new IllegalArgumentException ( " Template variable name should not be same with reserved name " ) ; <nl> } <nl> <nl> public TemplateResourceReader ( final ContentResource template , <nl> @ @ - 137 , 7 + 137 , 6 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } <nl> <nl> private static class NowMethod implements TemplateMethodModelEx { <nl> - <nl> @ Override <nl> public Object exec ( final List arguments ) { <nl> Date date = new Date ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index dfb82e5 . . 0d54e3a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 61 , 6 + 61 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . templateResourc <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> + import static com . github . dreamhead . moco . resource . reader . TemplateResourceReader . checkValidVariableName ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> @ @ - 534 , 7 + 535 , 7 @ @ public final class Moco { <nl> <nl> public static < T > ContentResource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> + ImmutableMap . of ( checkValidVariableName ( name ) , <nl> new ExtractorVariable < > ( checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ) <nl> ) ; <nl> } <nl> @ @ - 542 , 9 + 543 , 9 @ @ public final class Moco { <nl> public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> + ImmutableMap . of ( checkValidVariableName ( name1 ) , <nl> new ExtractorVariable < > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , <nl> - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> + checkValidVariableName ( name2 ) , <nl> new ExtractorVariable < > ( checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ) <nl> ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 3066416 . . db87d26 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . net . MediaType ; <nl> @ @ - 17 , 6 + 18 , 7 @ @ import freemarker . template . DefaultObjectWrapperBuilder ; <nl> import freemarker . template . Template ; <nl> import freemarker . template . TemplateException ; <nl> import freemarker . template . Version ; <nl> + import jdk . nashorn . internal . ir . annotations . Immutable ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 25 , 8 + 27 , 10 @ @ import java . io . IOException ; <nl> import java . io . OutputStreamWriter ; <nl> import java . io . Writer ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . List ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> public class TemplateResourceReader implements ContentResourceReader { <nl> @ @ - 42 , 6 + 46 , 16 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> <nl> private final ContentResource template ; <nl> private final ImmutableMap < String , ? extends Variable > variables ; <nl> + private static final List < String > RESERVED _ NAME = ImmutableList . of ( " req " ) ; <nl> + <nl> + public static String checkValidVariableName ( final String name ) { <nl> + if ( ! RESERVED _ NAME . contains ( <nl> + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) ) ) { <nl> + return name ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Template variable name should not be null " ) ; <nl> + } <nl> <nl> public TemplateResourceReader ( final ContentResource template , <nl> final ImmutableMap < String , ? extends Variable > variables ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java <nl> index 9c111c1 . . 1c4d114 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / RestSettingBuilders . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public abstract class RestSettingBuilders extends AbstractResponseBase < RestSetting > <nl> implements RestSettingBuilder , ResponseBase < RestSetting > { <nl> - protected abstract RestSetting createSetting ( final Optional < RequestMatcher > matcher , final ResponseHandler handler ) ; <nl> + protected abstract RestSetting createSetting ( Optional < RequestMatcher > matcher , ResponseHandler handler ) ; <nl> <nl> private RequestMatcher matcher ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java b / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java <nl> index 40f6603 . . 3279460 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public final class VerificationData { <nl> return format ( mismatchFormat , expected , actualSize ) ; <nl> } <nl> <nl> - public final int matchedSize ( ) { <nl> + public int matchedSize ( ) { <nl> return from ( requests ) . filter ( matched ( ) ) . size ( ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> index 5a44c07 . . a3c3e7f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> @ @ - 5 , 5 + 5 , 5 @ @ import com . google . common . base . Function ; <nl> import java . io . File ; <nl> <nl> public interface FileWatcherFactory { <nl> - Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) ; <nl> + Watcher createWatcher ( Function < File , Void > listener , File . . . files ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index e63f253 . . a8afedb 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 15 , 18 + 15 , 18 @ @ import static com . google . common . base . Optional . of ; <nl> public abstract class MocoRequestAction implements MocoEventAction { <nl> private final Resource url ; <nl> <nl> - protected abstract HttpRequestBase createRequest ( final String url , final Request request ) ; <nl> + protected abstract HttpRequestBase createRequest ( String url , Request request ) ; <nl> <nl> protected MocoRequestAction ( final Resource url ) { <nl> this . url = url ; <nl> } <nl> <nl> - protected Resource getUrl ( ) { <nl> + protected final Resource getUrl ( ) { <nl> return url ; <nl> } <nl> <nl> @ Override <nl> - public void execute ( final Request request ) { <nl> + public final void execute ( final Request request ) { <nl> try ( CloseableHttpClient client = HttpClients . createDefault ( ) ) { <nl> doExecute ( client , request ) ; <nl> } catch ( IOException e ) {
diff - - git a / build . gradle b / build . gradle <nl> index 95adaf0 . . f69c07b 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 24 . Final ' <nl> + nettyVersion = ' 4 . 1 . 25 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 5 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index a9666b9 . . e4328f7 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ import java . nio . file . WatchService ; <nl> import java . util . Collection ; <nl> import java . util . Map ; <nl> import java . util . concurrent . ExecutorService ; <nl> - import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java <nl> index f033a5b . . f0bd6ab 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . google . common . base . Optional ; <nl> <nl> import static com . google . common . base . Optional . fromNullable ; <nl> <nl> - public class ParamRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> + public final class ParamRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> private final String param ; <nl> <nl> public ParamRequestExtractor ( final String param ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index 3179aa9 . . 522a5d9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement <nl> } <nl> <nl> @ Override <nl> - protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> + protected final Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> try { <nl> URL targetUrl = url . apply ( request ) ; <nl> if ( targetUrl ! = null ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> index cf687b0 . . 5629338 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RequestSetting . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . base . MoreObjects ; <nl> import java . util . Map ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class RequestSetting extends BaseResourceSetting { <nl> + public final class RequestSetting extends BaseResourceSetting { <nl> private final RequestMatcherFactory factory = new DynamicRequestMatcherFactory ( ) ; <nl> <nl> private TextContainer uri ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookiesRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookiesRequestExtractor . java <nl> index bdfe564 . . 1b359b0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookiesRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / CookiesRequestExtractor . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ public class CookiesRequestExtractor extends HttpRequestExtractor < ImmutableMap < S <nl> private final RequestExtractor < String [ ] > extractor = new HeaderRequestExtractor ( COOKIE ) ; <nl> <nl> @ Override <nl> - protected Optional < ImmutableMap < String , String > > doExtract ( final HttpRequest request ) { <nl> + protected final Optional < ImmutableMap < String , String > > doExtract ( final HttpRequest request ) { <nl> Optional < String [ ] > cookieString = extractor . extract ( request ) ; <nl> if ( ! cookieString . isPresent ( ) ) { <nl> return absent ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java <nl> index 30a375d . . b991cb8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java <nl> @ @ - 48 , 7 + 48 , 7 @ @ public final class MocoSocketHandler extends SimpleChannelInboundHandler < ByteBuf <nl> } <nl> <nl> @ Override <nl> - public void channelReadComplete ( final ChannelHandlerContext ctx ) throws Exception { <nl> + public void channelReadComplete ( final ChannelHandlerContext ctx ) { <nl> ctx . flush ( ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java <nl> index ebfac87 . . 30d6959 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java <nl> @ @ - 9 , 8 + 9 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class HeaderResponseHandler extends AbstractHttpResponseHandler { <nl> - private final HeaderDetector detector = new HeaderDetector ( ) ; <nl> - <nl> private final String name ; <nl> private final Resource resource ; <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index cc121ce . . 2ba1ee7 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco ; <nl> import com . google . common . io . Resources ; <nl> import com . google . common . net . HttpHeaders ; <nl> import org . apache . http . Header ; <nl> + import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> import org . apache . http . client . HttpResponseException ; <nl> @ @ - 613 , 6 + 614 , 22 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ multiple _ header _ with _ same _ name ( ) throws Exception { <nl> + server . response ( header ( " foo " , " bar " ) , header ( " foo " , " another " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + Header [ ] headers = response . getHeaders ( " foo " ) ; <nl> + assertThat ( headers . length , is ( 2 ) ) ; <nl> + assertThat ( headers [ 0 ] . getValue ( ) , is ( " bar " ) ) ; <nl> + assertThat ( headers [ 1 ] . getValue ( ) , is ( " another " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ return _ expected _ response _ for _ multiple _ specified _ query ( ) throws Exception { <nl> server . request ( and ( by ( uri ( " / foo " ) ) , eq ( query ( " param " ) , " blah " ) ) ) . response ( " bar " ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> index dad73e1 . . 661c1df 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . dumper ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . fasterxml . jackson . annotation . JsonProperty ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> <nl> import java . nio . charset . Charset ; <nl> @ @ - 12 , 10 + 13 , 8 @ @ public class InternalMessageContent { <nl> private byte [ ] content ; <nl> private Charset charset ; <nl> <nl> - public InternalMessageContent ( ) { <nl> - } <nl> - <nl> - public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> + public InternalMessageContent ( @ JsonProperty ( " content " ) final byte [ ] content , <nl> + @ JsonProperty ( " charset " ) Charset charset ) { <nl> this . content = content ; <nl> this . charset = charset ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java <nl> index b6ce7a6 . . 5837fe1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> public abstract class AbstractResponseHandler implements ResponseHandler { <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public final ResponseHandler apply ( final MocoConfig config ) { <nl> + public ResponseHandler apply ( final MocoConfig config ) { <nl> if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { <nl> return ( ResponseHandler ) config . apply ( this ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> index 7730f56 . . 4531136 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public abstract class BaseResponseSettingConfiguration < T extends ResponseSetting <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> protected BaseResponseSettingConfiguration ( ) { <nl> - this . clazz = ( Class < T > ) new TypeToken < T > ( getClass ( ) ) { } . getRawType ( ) ; <nl> + this . clazz = ( Class < T > ) TypeToken . of ( getClass ( ) ) . getRawType ( ) ; <nl> } <nl> <nl> private T self ( ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index ff725d9 . . 322f341 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 4 , 8 + 4 , 8 @ @ import com . github . dreamhead . moco . HttpMessage ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Iterables ; <nl> + import com . google . common . reflect . TypeToken ; <nl> <nl> - import java . lang . reflect . ParameterizedType ; <nl> import java . util . ArrayList ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> @ @ - 90 , 7 + 90 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> private Class < T > getRealClass ( ) { <nl> - return ( Class < T > ) ( ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ) ; <nl> + return ( Class < T > ) TypeToken . of ( getClass ( ) ) . getRawType ( ) ; <nl> } <nl> <nl> public T withVersion ( final HttpProtocolVersion version ) { <nl> @ @ - 124 , 11 + 124 , 11 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> if ( value instanceof String ) { <nl> - return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> + return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> } <nl> <nl> if ( value instanceof String [ ] ) { <nl> - return ( Map < String , String [ ] > ) headers ; <nl> + return ( Map < String , String [ ] > ) headers ; <nl> } <nl> <nl> if ( value instanceof Iterable ) {
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 2224587 . . 0394d0f 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 6 , 7 + 6 , 7 @ @ buildscript { <nl> } <nl> <nl> ext { <nl> - proguardVersion = ' 6 . 0 . 1 ' <nl> + proguardVersion = ' 6 . 0 . 2 ' <nl> } <nl> <nl> dependencies {
diff - - git a / build . gradle b / build . gradle <nl> index 70b4764 . . adcb0a4 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 6 ' <nl> + gradleVersion = ' 4 . 7 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index ea720f9 . . 16d2805 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 7 - bin . zip <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 6 - bin . zip
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> index a7c33cb . . a7aad00 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> @ @ - 13 , 11 + 13 , 11 @ @ public abstract class BaseServer < T extends ResponseSetting < T > > <nl> extends BaseResponseSettingConfiguration < T > implements Server < T > { <nl> protected abstract T onRequestAttached ( RequestMatcher matcher ) ; <nl> <nl> - public T request ( final RequestMatcher matcher ) { <nl> + public final T request ( final RequestMatcher matcher ) { <nl> return this . onRequestAttached ( checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> - public T request ( final RequestMatcher . . . matchers ) { <nl> + public final T request ( final RequestMatcher . . . matchers ) { <nl> checkNotNull ( matchers , " Matcher should not be null " ) ; <nl> return request ( or ( head ( matchers ) , tail ( matchers ) ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 9d58621 . . e9d5d6d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 81 , 17 + 81 , 18 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> public ImmutableMap < String , String > get ( ) { <nl> Optional < ImmutableMap < String , String > > forms = <nl> new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; <nl> - return toResult ( forms ) ; <nl> + return forms . or ( emptyMapSupplier ( ) ) ; <nl> } <nl> } ) ; <nl> } <nl> <nl> - private ImmutableMap < String , String > toResult ( final Optional < ImmutableMap < String , String > > result ) { <nl> - if ( result . isPresent ( ) ) { <nl> - return result . get ( ) ; <nl> - } <nl> - <nl> - return ImmutableMap . of ( ) ; <nl> + private Supplier < ImmutableMap < String , String > > emptyMapSupplier ( ) { <nl> + return new Supplier < ImmutableMap < String , String > > ( ) { <nl> + @ Override <nl> + public ImmutableMap < String , String > get ( ) { <nl> + return ImmutableMap . of ( ) ; <nl> + } <nl> + } ; <nl> } <nl> <nl> private Supplier < ImmutableMap < String , String > > cookieSupplier ( ) { <nl> @ @ - 100 , 7 + 101 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> public ImmutableMap < String , String > get ( ) { <nl> Optional < ImmutableMap < String , String > > cookies = <nl> new CookiesRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; <nl> - return toResult ( cookies ) ; <nl> + return cookies . or ( emptyMapSupplier ( ) ) ; <nl> } <nl> } ) ; <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 547c2af . . c8db5b7 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 5 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 16 . 0 ' <nl> + mockitoVersion = ' 2 . 18 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 5 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 28 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index d61684a . . 98bb394 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 15 , 7 + 15 , 6 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . github . dreamhead . moco . util . Maps . iterableValueToArray ; <nl> import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> - import static java . util . Collections . EMPTY _ MAP ; <nl> <nl> public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final HttpProtocolVersion version ; <nl> @ @ - 81 , 9 + 80 , 9 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> protected static abstract class Builder < T extends Builder > { <nl> private final Class < T > clazz ; <nl> - protected HttpProtocolVersion version ; <nl> - protected MessageContent content ; <nl> - protected ImmutableMap < String , String [ ] > headers ; <nl> + private HttpProtocolVersion version ; <nl> + private MessageContent content ; <nl> + private Map < String , String [ ] > headers ; <nl> <nl> public Builder ( ) { <nl> this . clazz = getRealClass ( ) ; <nl> @ @ - 118 , 7 + 117 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> + private Map < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> if ( headers . isEmpty ( ) ) { <nl> return ImmutableMap . of ( ) ; <nl> } <nl> @ @ - 129 , 7 + 128 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> if ( value instanceof String [ ] ) { <nl> - return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> + return ( Map < String , String [ ] > ) headers ; <nl> } <nl> <nl> if ( value instanceof Iterable ) { <nl> @ @ - 138 , 5 + 137 , 17 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> } <nl> + <nl> + protected HttpProtocolVersion getVersion ( ) { <nl> + return version ; <nl> + } <nl> + <nl> + protected MessageContent getContent ( ) { <nl> + return content ; <nl> + } <nl> + <nl> + protected ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + return copyOf ( headers ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index b4ab412 . . 9d58621 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 209 , 7 + 209 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> public DefaultHttpRequest build ( ) { <nl> - return new DefaultHttpRequest ( version , content , method , this . uri , this . headers , this . queries ) ; <nl> + return new DefaultHttpRequest ( this . getVersion ( ) , this . getContent ( ) , method , this . uri , this . getHeaders ( ) , this . queries ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 9e0f5f0 . . 41fc963 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> public DefaultHttpResponse build ( ) { <nl> - return new DefaultHttpResponse ( version , status , headers , content ) ; <nl> + return new DefaultHttpResponse ( this . getVersion ( ) , status , this . getHeaders ( ) , this . getContent ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 44e9559 . . 3d623e0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 7 , 6 + 7 , 8 @ @ import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> + import java . util . Map ; <nl> + <nl> import static com . github . dreamhead . moco . util . Maps . arrayValueToSimple ; <nl> <nl> public class TemplateRequest { <nl> @ @ - 28 , 7 + 30 , 7 @ @ public class TemplateRequest { <nl> throw new IllegalArgumentException ( " Request is not HTTP request " ) ; <nl> } <nl> <nl> - public ImmutableMap < String , String > getHeaders ( ) { <nl> + public Map < String , String > getHeaders ( ) { <nl> if ( this . request instanceof HttpRequest ) { <nl> return arrayValueToSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> index 24ad670 . . 6155d93 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . google . common . collect . Iterables ; <nl> import java . util . Map ; <nl> <nl> public class Maps { <nl> - public static ImmutableMap < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { <nl> + public static Map < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { <nl> ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String [ ] > entry : map . entrySet ( ) ) { <nl> builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; <nl> @ @ - 15 , 7 + 15 , 7 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> - public static ImmutableMap < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { <nl> + public static Map < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { <nl> ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { <nl> builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> - public static ImmutableMap < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { <nl> + public static Map < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { <nl> ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , Iterable < String > > entry : map . entrySet ( ) ) { <nl> Iterable < String > value = entry . getValue ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index d5465d8 . . 6edb6aa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 109 , 14 + 109 , 6 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> return clazz . cast ( this ) ; <nl> } <nl> <nl> - public T forHeaders ( final Map < String , String > headers ) { <nl> - if ( headers ! = null ) { <nl> - this . headers = simpleValueToArray ( headers ) ; <nl> - } <nl> - <nl> - return clazz . cast ( this ) ; <nl> - } <nl> - <nl> public T withHeaders ( final Map < String , ? > headers ) { <nl> if ( headers ! = null ) { <nl> this . headers = asHeaders ( headers ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> index 2557b86 . . 178ee9f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> assertThat ( new HttpRequestFailoverMatcher ( request ) . match ( request ) , is ( true ) ) ; <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> HttpRequest another = DefaultHttpRequest . builder ( ) <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " different " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> assertThat ( new HttpRequestFailoverMatcher ( request ) . match ( another ) , is ( false ) ) ; <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withUri ( " / foo " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> HttpRequest another = DefaultHttpRequest . builder ( ) <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withUri ( " / bar " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> assertThat ( new HttpRequestFailoverMatcher ( request ) . match ( another ) , is ( false ) ) ; <nl> @ @ - 76 , 14 + 76 , 14 @ @ public class HttpRequestMatcherTest { <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> HttpRequest failover = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> assertThat ( new HttpRequestFailoverMatcher ( failover ) . match ( request ) , is ( true ) ) ; <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> - . forHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> HttpRequest failover = DefaultHttpRequest . builder ( ) <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class HttpRequestMatcherTest { <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> - . forHeaders ( of ( " Host " , " localhost : 12306 " ) ) <nl> + . withHeaders ( of ( " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> assertThat ( new HttpRequestFailoverMatcher ( failover ) . match ( request ) , is ( true ) ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 9ecc0ff . . 2e556de 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 6 , 6 + 6 , 9 @ @ import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import java . lang . reflect . ParameterizedType ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> @ @ - 51 , 6 + 54 , 30 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> return this . content ; <nl> } <nl> <nl> + protected static Map < String , Iterable < String > > toHeaders ( final io . netty . handler . codec . http . HttpMessage message ) { <nl> + return toHeaders ( message . headers ( ) ) ; <nl> + } <nl> + <nl> + private static Map < String , Iterable < String > > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> + Map < String , Iterable < String > > headers = new HashMap < > ( ) ; <nl> + for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> + String key = entry . getKey ( ) ; <nl> + List < String > values = getValues ( headers , key ) ; <nl> + values . add ( entry . getValue ( ) ) ; <nl> + headers . put ( key , values ) ; <nl> + } <nl> + <nl> + return headers ; <nl> + } <nl> + <nl> + private static List < String > getValues ( final Map < String , Iterable < String > > headers , final String key ) { <nl> + if ( headers . containsKey ( key ) ) { <nl> + return ( List < String > ) headers . get ( key ) ; <nl> + } <nl> + <nl> + return new ArrayList < > ( ) ; <nl> + } <nl> + <nl> protected static abstract class Builder < T extends Builder > { <nl> private final Class < T > clazz ; <nl> protected HttpProtocolVersion version ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 4d712b0 . . b4ab412 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 22 , 8 + 22 , 6 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringDecoder ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> <nl> - import java . util . ArrayList ; <nl> - import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 142 , 7 + 140 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> - . withHeaders ( toHeaders ( request . headers ( ) ) ) <nl> + . withHeaders ( toHeaders ( request ) ) <nl> . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> @ @ - 187 , 26 + 185 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return request ; <nl> } <nl> <nl> - private static Map < String , Iterable < String > > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> - Map < String , Iterable < String > > headers = new HashMap < > ( ) ; <nl> - for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> - String key = entry . getKey ( ) ; <nl> - List < String > values = getValues ( headers , key ) ; <nl> - values . add ( entry . getValue ( ) ) ; <nl> - headers . put ( key , values ) ; <nl> - } <nl> - <nl> - return headers ; <nl> - } <nl> - <nl> - private static List < String > getValues ( final Map < String , Iterable < String > > headers , final String key ) { <nl> - if ( headers . containsKey ( key ) ) { <nl> - return ( List < String > ) headers . get ( key ) ; <nl> - } <nl> - <nl> - return new ArrayList < > ( ) ; <nl> - } <nl> - <nl> public static final class Builder extends DefaultHttpMessage . Builder < Builder > { <nl> private HttpMethod method ; <nl> private String uri ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index c9a2fd9 . . 9e0f5f0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 8 , 8 + 8 , 6 @ @ import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> - import java . util . Map ; <nl> - <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> @ @ - 29 , 15 + 27 , 10 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> public static HttpResponse newResponse ( final FullHttpResponse response ) { <nl> - ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String > entry : response . headers ( ) ) { <nl> - headerBuilder . put ( entry ) ; <nl> - } <nl> - <nl> return builder ( ) <nl> . withVersion ( toHttpProtocolVersion ( response . protocolVersion ( ) ) ) <nl> . withStatus ( response . status ( ) . code ( ) ) <nl> - . forHeaders ( headerBuilder . build ( ) ) <nl> + . withHeaders ( toHeaders ( response ) ) <nl> . withContent ( content ( ) <nl> . withContent ( new ByteBufInputStream ( response . content ( ) ) ) <nl> . build ( ) )
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 327c6cb . . 9ecc0ff 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 6 , 11 + 6 , 10 @ @ import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import java . lang . reflect . ParameterizedType ; <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> - import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> + import static com . github . dreamhead . moco . util . Maps . iterableValueToArray ; <nl> import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ @ - 109 , 8 + 108 , 8 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> } <nl> <nl> - if ( value instanceof List ) { <nl> - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> + if ( value instanceof Iterable ) { <nl> + return iterableValueToArray ( ( Map < String , Iterable < String > > ) headers ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 76507b3 . . 32a427e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 12 , 7 + 12 , 6 @ @ import com . google . common . base . Optional ; <nl> import com . google . common . base . Supplier ; <nl> import com . google . common . base . Suppliers ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Iterables ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . buffer . Unpooled ; <nl> @ @ - 29 , 8 + 28 , 6 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> - import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> - import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpRequest . Builder . class ) <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 1e4a165 . . c9a2fd9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> return status ; <nl> } <nl> <nl> - public static DefaultHttpResponse newResponse ( final FullHttpResponse response ) { <nl> + public static HttpResponse newResponse ( final FullHttpResponse response ) { <nl> ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String > entry : response . headers ( ) ) { <nl> headerBuilder . put ( entry ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> index a35bec0 . . 24ad670 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> @ @ - 1 , 8 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterables ; <nl> <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> <nl> public class Maps { <nl> @ @ - 24 , 11 + 24 , 11 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> - public static ImmutableMap < String , String [ ] > listValueToArray ( final Map < String , List < String > > map ) { <nl> + public static ImmutableMap < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { <nl> ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , List < String > > entry : map . entrySet ( ) ) { <nl> - List < String > value = entry . getValue ( ) ; <nl> - builder . put ( entry . getKey ( ) , value . toArray ( new String [ value . size ( ) ] ) ) ; <nl> + for ( Map . Entry < String , Iterable < String > > entry : map . entrySet ( ) ) { <nl> + Iterable < String > value = entry . getValue ( ) ; <nl> + builder . put ( entry . getKey ( ) , Iterables . toArray ( value , String . class ) ) ; <nl> } <nl> <nl> return builder . build ( ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 0c8bbcc . . 3c5be08 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 233 , 7 + 233 , 7 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ failover _ with _ same _ response _ once ( ) throws Exception { <nl> - server = httpServer ( port ( ) , log ( ) ) ; <nl> + server = httpServer ( port ( ) ) ; <nl> server . post ( and ( by ( uri ( " / target " ) ) , by ( " proxy " ) ) ) . response ( " 0XCAFEBABE " ) ; <nl> final File tempFile = tempFolder . newFile ( ) ; <nl> server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( tempFile . getAbsolutePath ( ) ) ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java <nl> index 2b9bf89 . . 2d5e30c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / dumper / HttpDumpersTest . java <nl> @ @ - 68 , 13 + 68 , 13 @ @ public class HttpDumpersTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ parse _ complete _ form _ urlencoded _ media _ type ( ) throws Exception { <nl> + public void should _ parse _ complete _ form _ urlencoded _ media _ type ( ) { <nl> assertMessageContent ( " application / x - www - form - urlencoded ; charset = UTF - 8 " , EXPECTED _ MESSAGE _ BODY ) ; <nl> } <nl> <nl> @ Test <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public void should _ not _ parse _ content _ when _ content _ length _ not _ set ( ) throws Exception { <nl> + public void should _ not _ parse _ content _ when _ content _ length _ not _ set ( ) { <nl> assertThat ( asContent ( messageWithHeaders ( EMPTY _ MAP ) ) , isEmptyString ( ) ) ; <nl> } <nl> <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class HttpDumpersTest { <nl> private HttpMessage messageWithHeaders ( final Map < String , String > headers ) { <nl> return DefaultHttpResponse . builder ( ) <nl> . forHeaders ( headers ) <nl> - . withContent ( MessageContent . content ( MESSAGE _ BODY ) ) <nl> + . withTextContent ( MESSAGE _ BODY ) <nl> . build ( ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractorTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractorTest . java <nl> index a7b3bbb . . 80be424 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractorTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractorTest . java <nl> @ @ - 15 , 7 + 15 , 8 @ @ public class JsonPathRequestExtractorTest { <nl> public void should _ extract _ empty _ content _ as _ absent ( ) { <nl> JsonPathRequestExtractor unitUnderTest = new JsonPathRequestExtractor ( " $ . . account " ) ; <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> - . withContent ( MessageContent . content ( " " ) ) . build ( ) ; <nl> + . withTextContent ( " " ) <nl> + . build ( ) ; <nl> Optional < Object > result = unitUnderTest . extract ( request ) ; <nl> assertThat ( result . isPresent ( ) , is ( false ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / extractor / XPathRequestExtractorTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / extractor / XPathRequestExtractorTest . java <nl> index 13dd597 . . 67a52ae 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / extractor / XPathRequestExtractorTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / extractor / XPathRequestExtractorTest . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class XPathRequestExtractorTest { <nl> @ Test <nl> public void should _ extract _ empty _ content _ as _ absent ( ) { <nl> XPathRequestExtractor unitUnderTest = new XPathRequestExtractor ( " / request / parameters / id / text ( ) " ) ; <nl> - HttpRequest request = DefaultHttpRequest . builder ( ) . withContent ( MessageContent . content ( " " ) ) . build ( ) ; <nl> + HttpRequest request = DefaultHttpRequest . builder ( ) . withTextContent ( " " ) . build ( ) ; <nl> Optional < String [ ] > result = unitUnderTest . extract ( request ) ; <nl> assertThat ( result . isPresent ( ) , is ( false ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / matcher / XmlRequestMatcherTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / matcher / XmlRequestMatcherTest . java <nl> index 664d517 . . 1fe66e2 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / matcher / XmlRequestMatcherTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / matcher / XmlRequestMatcherTest . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class XmlRequestMatcherTest { <nl> @ Test <nl> public void should _ return _ false _ for _ empty _ content ( ) { <nl> XmlRequestMatcher unitUnderTest = new XmlRequestMatcher ( text ( " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " ) ) ; <nl> - HttpRequest request = DefaultHttpRequest . builder ( ) . withContent ( MessageContent . content ( " " ) ) . build ( ) ; <nl> + HttpRequest request = DefaultHttpRequest . builder ( ) . withTextContent ( " " ) . build ( ) ; <nl> assertThat ( unitUnderTest . match ( request ) , is ( false ) ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index c9a2c3c . . 327c6cb 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 3 , 6 + 3 , 16 @ @ package com . github . dreamhead . moco . model ; <nl> import com . github . dreamhead . moco . HttpMessage ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + import java . lang . reflect . ParameterizedType ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> + import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> + import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final HttpProtocolVersion version ; <nl> @ @ - 41 , 4 + 51 , 69 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> public MessageContent getContent ( ) { <nl> return this . content ; <nl> } <nl> + <nl> + protected static abstract class Builder < T extends Builder > { <nl> + private final Class < T > clazz ; <nl> + protected HttpProtocolVersion version ; <nl> + protected MessageContent content ; <nl> + protected ImmutableMap < String , String [ ] > headers ; <nl> + <nl> + public Builder ( ) { <nl> + this . clazz = getRealClass ( ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + private Class < T > getRealClass ( ) { <nl> + return ( Class < T > ) ( ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ) ; <nl> + } <nl> + <nl> + public T withVersion ( final HttpProtocolVersion version ) { <nl> + this . version = version ; <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T withTextContent ( final String content ) { <nl> + this . content = content ( content ) ; <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T withContent ( final MessageContent content ) { <nl> + this . content = content ; <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T forHeaders ( final Map < String , String > headers ) { <nl> + if ( headers ! = null ) { <nl> + this . headers = simpleValueToArray ( headers ) ; <nl> + } <nl> + <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T withHeaders ( final Map < String , ? > headers ) { <nl> + if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> + this . headers = asHeaders ( headers ) ; <nl> + } <nl> + <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> + Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> + if ( value instanceof String ) { <nl> + return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof String [ ] ) { <nl> + return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof List ) { <nl> + return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 1056a6b . . 76507b3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 146 , 7 + 146 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> . withHeaders ( toHeaders ( request . headers ( ) ) ) <nl> - / / . forHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> @ @ - 191 , 15 + 190 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return request ; <nl> } <nl> <nl> - private static ImmutableMap < String , String > collectHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> - ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> - headerBuilder . put ( entry ) ; <nl> - } <nl> - <nl> - return headerBuilder . build ( ) ; <nl> - } <nl> - <nl> private static ImmutableMap < String , String [ ] > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> Map < String , List < String > > headers = new HashMap < > ( ) ; <nl> for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> @ @ - 226 , 68 + 216 , 11 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return new ArrayList < > ( ) ; <nl> } <nl> <nl> - public static final class Builder { <nl> - private HttpProtocolVersion version ; <nl> - private MessageContent content ; <nl> - private ImmutableMap < String , String [ ] > headers ; <nl> + public static final class Builder extends DefaultHttpMessage . Builder < Builder > { <nl> private HttpMethod method ; <nl> private String uri ; <nl> private ImmutableMap < String , String [ ] > queries ; <nl> <nl> - public Builder withVersion ( final HttpProtocolVersion version ) { <nl> - this . version = version ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withTextContent ( final String content ) { <nl> - this . content = content ( content ) ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withContent ( final MessageContent content ) { <nl> - this . content = content ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder forHeaders ( final Map < String , String > headers ) { <nl> - if ( headers ! = null ) { <nl> - ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { <nl> - builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; <nl> - } <nl> - this . headers = builder . build ( ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withHeaders ( final Map < String , ? > headers ) { <nl> - if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> - this . headers = asHeaders ( headers ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> - Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> - if ( value instanceof String ) { <nl> - return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof String [ ] ) { <nl> - return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof List ) { <nl> - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> - <nl> - } <nl> - <nl> public Builder withMethod ( final HttpMethod method ) { <nl> this . method = method ; <nl> return this ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 58cac97 . . 1e4a165 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 4 , 18 + 4 , 13 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Iterables ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> - import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> - import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> - import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> public class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse { <nl> @ @ - 57 , 56 + 52 , 9 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> return new Builder ( ) ; <nl> } <nl> <nl> - public static final class Builder { <nl> - private HttpProtocolVersion version ; <nl> - private MessageContent content ; <nl> - private ImmutableMap < String , String [ ] > headers ; <nl> + public static final class Builder extends DefaultHttpMessage . Builder < Builder > { <nl> private int status ; <nl> <nl> - public Builder withVersion ( final HttpProtocolVersion version ) { <nl> - this . version = version ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withContent ( final MessageContent content ) { <nl> - this . content = content ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withHeaders ( final Map < String , ? > headers ) { <nl> - if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> - this . headers = asHeaders ( headers ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> - Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> - if ( value instanceof String ) { <nl> - return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof String [ ] ) { <nl> - return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof List ) { <nl> - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> - } <nl> - <nl> - public Builder forHeaders ( final Map < String , String > headers ) { <nl> - if ( headers ! = null ) { <nl> - this . headers = simpleValueToArray ( copyOf ( headers ) ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> public Builder withStatus ( final int code ) { <nl> this . status = code ; <nl> return this ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 85759f3 . . 7579deb 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import com . google . common . base . Optional ; <nl> import com . google . common . base . Supplier ; <nl> import com . google . common . base . Suppliers ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterables ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . buffer . Unpooled ; <nl> @ @ - 28 , 6 + 29 , 8 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> + import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpRequest . Builder . class ) <nl> @ @ - 258 , 14 + 261 , 32 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return this ; <nl> } <nl> <nl> - public Builder withHeaders ( final Map < String , String [ ] > headers ) { <nl> - if ( headers ! = null ) { <nl> - this . headers = copyOf ( headers ) ; <nl> + public Builder withHeaders ( final Map < String , ? > headers ) { <nl> + if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> + this . headers = asHeaders ( headers ) ; <nl> } <nl> <nl> return this ; <nl> } <nl> <nl> + private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> + Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> + if ( value instanceof String ) { <nl> + return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof String [ ] ) { <nl> + return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof List ) { <nl> + return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> + <nl> + } <nl> + <nl> public Builder withMethod ( final HttpMethod method ) { <nl> this . method = method ; <nl> return this ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index f0ef734 . . 5d927b2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 4 , 14 + 4 , 17 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterables ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> - import static com . github . dreamhead . moco . util . Maps . asArray ; <nl> + import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> + import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> @ @ - 70 , 17 + 73 , 34 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> return this ; <nl> } <nl> <nl> - public Builder withHeaders ( final Map < String , String [ ] > headers ) { <nl> - if ( headers ! = null ) { <nl> - this . headers = copyOf ( headers ) ; <nl> + public Builder withHeaders ( final Map < String , ? > headers ) { <nl> + if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> + this . headers = asHeaders ( headers ) ; <nl> } <nl> <nl> return this ; <nl> } <nl> <nl> + private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> + Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> + if ( value instanceof String ) { <nl> + return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof String [ ] ) { <nl> + return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof List ) { <nl> + return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> + } <nl> + <nl> public Builder forHeaders ( final Map < String , String > headers ) { <nl> if ( headers ! = null ) { <nl> - this . headers = asArray ( copyOf ( headers ) ) ; <nl> + this . headers = simpleValueToArray ( copyOf ( headers ) ) ; <nl> } <nl> <nl> return this ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 70d8de4 . . 44e9559 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> - import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> + import static com . github . dreamhead . moco . util . Maps . arrayValueToSimple ; <nl> <nl> public class TemplateRequest { <nl> private Request request ; <nl> @ @ - 30 , 7 + 30 , 7 @ @ public class TemplateRequest { <nl> <nl> public ImmutableMap < String , String > getHeaders ( ) { <nl> if ( this . request instanceof HttpRequest ) { <nl> - return asSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; <nl> + return arrayValueToSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( " Request is not HTTP request " ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index a04fb80 . . 551bd02 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 10 , 12 + 10 , 15 @ @ import com . github . dreamhead . moco . MocoException ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . io . CharStreams ; <nl> + import com . sun . xml . internal . messaging . saaj . util . CharReader ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . ByteArrayInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . io . InputStreamReader ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 70 , 7 + 73 , 8 @ @ public final class Jsons { <nl> @ Override <nl> public Iterable < T > apply ( final InputStream input ) { <nl> try ( InputStream actual = input ) { <nl> - return mapper . readValue ( actual , type ) ; <nl> + String text = CharStreams . toString ( new InputStreamReader ( actual ) ) ; <nl> + return mapper . readValue ( text , type ) ; <nl> } catch ( UnrecognizedPropertyException e ) { <nl> logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> index 5f60c3b . . a35bec0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> @ @ - 2 , 10 + 2 , 11 @ @ package com . github . dreamhead . moco . util ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> public class Maps { <nl> - public static ImmutableMap < String , String > asSimple ( final Map < String , String [ ] > map ) { <nl> + public static ImmutableMap < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { <nl> ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String [ ] > entry : map . entrySet ( ) ) { <nl> builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; <nl> @ @ - 14 , 7 + 15 , 7 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> - public static ImmutableMap < String , String [ ] > asArray ( final Map < String , String > map ) { <nl> + public static ImmutableMap < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { <nl> ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { <nl> builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; <nl> @ @ - 23 , 6 + 24 , 16 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> + public static ImmutableMap < String , String [ ] > listValueToArray ( final Map < String , List < String > > map ) { <nl> + ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , List < String > > entry : map . entrySet ( ) ) { <nl> + List < String > value = entry . getValue ( ) ; <nl> + builder . put ( entry . getKey ( ) , value . toArray ( new String [ value . size ( ) ] ) ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> private Maps ( ) { <nl> } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 7ef9fe2 . . 3e0383f 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> guavaVersion = ' 20 . 0 ' <nl> nettyVersion = ' 4 . 1 . 22 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> - jacksonVersion = ' 2 . 9 . 4 ' <nl> + jacksonVersion = ' 2 . 9 . 5 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 16 . 0 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> index ff2b7c7 . . 8ed6901 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> @ @ - 2 , 11 + 2 , 14 @ @ package com . github . dreamhead . moco . dumper ; <nl> <nl> import com . github . dreamhead . moco . HttpMessage ; <nl> import com . google . common . base . Joiner ; <nl> + import com . google . common . collect . Maps ; <nl> import com . google . common . net . HttpHeaders ; <nl> import com . google . common . net . MediaType ; <nl> import io . netty . util . internal . StringUtil ; <nl> <nl> - import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> public final class HttpDumpers { <nl> public static String asContent ( final HttpMessage message ) { <nl> @ @ - 57 , 7 + 60 , 15 @ @ public final class HttpDumpers { <nl> private final static Joiner . MapJoiner headerJoiner = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; <nl> <nl> public static String asHeaders ( final HttpMessage message ) { <nl> - return headerJoiner . join ( asSimple ( message . getHeaders ( ) ) ) ; <nl> + List < Map . Entry < String , String > > entries = new ArrayList < > ( ) ; <nl> + for ( Map . Entry < String , String [ ] > entry : message . getHeaders ( ) . entrySet ( ) ) { <nl> + String key = entry . getKey ( ) ; <nl> + for ( String value : entry . getValue ( ) ) { <nl> + entries . add ( Maps . immutableEntry ( key , value ) ) ; <nl> + } <nl> + } <nl> + <nl> + return headerJoiner . join ( entries ) ; <nl> } <nl> <nl> private HttpDumpers ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 7233273 . . c9a2c3c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 28 , 8 + 28 , 8 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ Override <nl> - public String getHeader ( String name ) { <nl> - if ( this . headers . containsKey ( name ) ) { <nl> + public String getHeader ( final String name ) { <nl> + if ( ! this . headers . containsKey ( name ) ) { <nl> return null ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index 1ef06e6 . . 5cee110 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MutableHttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl> + import com . google . common . net . HttpHeaders ; <nl> import io . netty . handler . codec . http . DefaultFullHttpResponse ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> import io . netty . handler . codec . http . HttpResponseStatus ; <nl> @ @ - 40 , 8 + 41 , 30 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> this . content = content ; <nl> } <nl> <nl> + private static String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { <nl> + HttpHeaders . CONTENT _ TYPE <nl> + } ; <nl> + <nl> @ Override <nl> public void addHeader ( final String name , final Object value ) { <nl> + if ( this . headers . containsKey ( name ) & & isSingleValueHeader ( name ) ) { <nl> + this . headers . remove ( name ) ; <nl> + } <nl> + <nl> + doAddHeader ( name , value ) ; <nl> + } <nl> + <nl> + private boolean isSingleValueHeader ( final String name ) { <nl> + for ( String header : SINGLE _ VALUE _ HEADERS ) { <nl> + if ( header . equalsIgnoreCase ( name ) ) { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + private void doAddHeader ( final String name , final Object value ) { <nl> this . headers . put ( name , newValues ( name , value ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index 4056b52 . . cc121ce 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 587 , 6 + 587 , 19 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ eq _ multiple _ header _ with _ same _ name ( ) throws Exception { <nl> + server . request ( and ( eq ( header ( " foo " ) , " bar " ) ) , eq ( header ( " foo " ) , " bar2 " ) ) <nl> + . response ( " blah " ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . getWithHeader ( root ( ) , of ( " foo " , " bar " , " foo " , " bar2 " ) ) , is ( " blah " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> @ Test ( expected = HttpResponseException . class ) <nl> public void should _ throw _ exception _ without _ specified _ header ( ) throws Exception { <nl> server . request ( eq ( header ( " foo " ) , " bar " ) ) . response ( " blah " ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> index 62ecb09 . . ea75ca9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpRequestExtractor ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 24 , 6 + 25 , 7 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> String [ ] extractedValues = from ( request . getHeaders ( ) . entrySet ( ) ) <nl> . filter ( isForHeaderName ( name ) ) <nl> . transform ( toValue ( ) ) <nl> + . transformAndConcat ( arrayAsIterable ( ) ) <nl> . toArray ( String . class ) ; <nl> <nl> if ( extractedValues . length > 0 ) { <nl> @ @ - 33 , 12 + 35 , 20 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> return absent ( ) ; <nl> } <nl> <nl> - / / TO FLAT <nl> - private Function < Map . Entry < String , String [ ] > , String > toValue ( ) { <nl> - return new Function < Map . Entry < String , String [ ] > , String > ( ) { <nl> + private Function < String [ ] , Iterable < String > > arrayAsIterable ( ) { <nl> + return new Function < String [ ] , Iterable < String > > ( ) { <nl> @ Override <nl> - public String apply ( final Map . Entry < String , String [ ] > input ) { <nl> - return input . getValue ( ) [ 0 ] ; <nl> + public Iterable < String > apply ( final String [ ] input ) { <nl> + return ImmutableList . copyOf ( input ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < Map . Entry < String , String [ ] > , String [ ] > toValue ( ) { <nl> + return new Function < Map . Entry < String , String [ ] > , String [ ] > ( ) { <nl> + @ Override <nl> + public String [ ] apply ( final Map . Entry < String , String [ ] > input ) { <nl> + return input . getValue ( ) ; <nl> } <nl> } ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index cc96e47 . . cc1c3ac 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 12 , 9 + 12 , 11 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . util . Map ; <nl> <nl> + import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> + <nl> public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> private HttpProtocolVersion version ; <nl> - private Map < String , String > headers = Maps . newHashMap ( ) ; <nl> + private Map < String , String [ ] > headers = Maps . newHashMap ( ) ; <nl> private int status ; <nl> private MessageContent content ; <nl> <nl> @ @ - 42 , 12 + 44 , 29 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> <nl> @ Override <nl> public void addHeader ( final String name , final Object value ) { <nl> - this . headers . put ( name , value . toString ( ) ) ; <nl> + this . headers . put ( name , newValues ( name , value ) ) ; <nl> + } <nl> + <nl> + private String [ ] newValues ( final String name , final Object value ) { <nl> + if ( this . headers . containsKey ( name ) ) { <nl> + String [ ] values = this . headers . get ( name ) ; <nl> + String [ ] newValues = new String [ values . length + 1 ] ; <nl> + System . arraycopy ( values , 0 , newValues , 0 , values . length ) ; <nl> + newValues [ values . length ] = value . toString ( ) ; <nl> + return newValues ; <nl> + } <nl> + <nl> + return new String [ ] { value . toString ( ) } ; <nl> } <nl> <nl> @ Override <nl> public String getHeader ( final String name ) { <nl> - return this . headers . get ( name ) ; <nl> + if ( this . headers . containsKey ( name ) ) { <nl> + return null ; <nl> + } <nl> + <nl> + String [ ] values = this . headers . get ( name ) ; <nl> + return values [ 0 ] ; <nl> } <nl> <nl> @ Override <nl> @ @ - 62 , 7 + 81 , 7 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> <nl> @ Override <nl> public ImmutableMap < String , String > getHeaders ( ) { <nl> - return ImmutableMap . copyOf ( this . headers ) ; <nl> + return asSimple ( ImmutableMap . copyOf ( this . headers ) ) ; <nl> } <nl> <nl> @ Override
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 7b7a55b . . 681842f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 4 , 14 + 4 , 16 @ @ import com . github . dreamhead . moco . HttpMessage ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> + import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> + <nl> public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final HttpProtocolVersion version ; <nl> private final MessageContent content ; <nl> - private final ImmutableMap < String , String > headers ; <nl> + private final ImmutableMap < String , String [ ] > headers ; <nl> <nl> protected DefaultHttpMessage ( final HttpProtocolVersion version , <nl> final MessageContent content , <nl> - final ImmutableMap < String , String > headers ) { <nl> + final ImmutableMap < String , String [ ] > headers ) { <nl> this . version = version ; <nl> this . content = content ; <nl> this . headers = headers ; <nl> @ @ - 24 , 7 + 26 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> @ Override <nl> public ImmutableMap < String , String > getHeaders ( ) { <nl> - return this . headers ; <nl> + return asSimple ( this . headers ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 6afd91c . . f67feb0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> <nl> private DefaultHttpRequest ( final HttpProtocolVersion version , final MessageContent content , <nl> final HttpMethod method , final String uri , <nl> - final ImmutableMap < String , String > headers , <nl> + final ImmutableMap < String , String [ ] > headers , <nl> final ImmutableMap < String , String [ ] > queries ) { <nl> super ( version , content , headers ) ; <nl> this . method = method ; <nl> @ @ - 281 , 12 + 281 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> public DefaultHttpRequest build ( ) { <nl> - ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String [ ] > entry : headers . entrySet ( ) ) { <nl> - builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; <nl> - } <nl> - <nl> - return new DefaultHttpRequest ( version , content , method , this . uri , builder . build ( ) , this . queries ) ; <nl> + return new DefaultHttpRequest ( version , content , method , this . uri , this . headers , this . queries ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 1d98429 . . d3c9be3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . Maps . asArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> @ @ - 18 , 7 + 19 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> private final int status ; <nl> <nl> public DefaultHttpResponse ( final HttpProtocolVersion version , final int status , <nl> - final ImmutableMap < String , String > headers , <nl> + final ImmutableMap < String , String [ ] > headers , <nl> final MessageContent content ) { <nl> super ( version , content , headers ) ; <nl> this . status = status ; <nl> @ @ - 56 , 7 + 57 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> public static final class Builder { <nl> private HttpProtocolVersion version ; <nl> private MessageContent content ; <nl> - private ImmutableMap < String , String > headers ; <nl> + private ImmutableMap < String , String [ ] > headers ; <nl> private int status ; <nl> <nl> public Builder withVersion ( final HttpProtocolVersion version ) { <nl> @ @ - 71 , 7 + 72 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> <nl> public Builder withHeaders ( final Map < String , String > headers ) { <nl> if ( headers ! = null ) { <nl> - this . headers = copyOf ( headers ) ; <nl> + this . headers = asArray ( copyOf ( headers ) ) ; <nl> } <nl> <nl> return this ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> new file mode 100644 <nl> index 0000000 . . 5f60c3b <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + public class Maps { <nl> + public static ImmutableMap < String , String > asSimple ( final Map < String , String [ ] > map ) { <nl> + ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , String [ ] > entry : map . entrySet ( ) ) { <nl> + builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + public static ImmutableMap < String , String [ ] > asArray ( final Map < String , String > map ) { <nl> + ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { <nl> + builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + private Maps ( ) { <nl> + } <nl> + }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index ffebb07 . . 7b7a55b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 9 , 8 + 9 , 9 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final MessageContent content ; <nl> private final ImmutableMap < String , String > headers ; <nl> <nl> - protected DefaultHttpMessage ( final HttpProtocolVersion version , final MessageContent content , <nl> - final ImmutableMap < String , String > headers ) { <nl> + protected DefaultHttpMessage ( final HttpProtocolVersion version , <nl> + final MessageContent content , <nl> + final ImmutableMap < String , String > headers ) { <nl> this . version = version ; <nl> this . content = content ; <nl> this . headers = headers ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index ebff5eb . . ad2423c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringDecoder ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 140 , 7 + 142 , 8 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> - . withHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> + . forHeaders ( toHeaders ( request . headers ( ) ) ) <nl> + / / . withHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> @ @ - 190 , 6 + 193 , 32 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return headerBuilder . build ( ) ; <nl> } <nl> <nl> + private static ImmutableMap < String , String [ ] > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> + Map < String , List < String > > headers = new HashMap < > ( ) ; <nl> + for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> + String key = entry . getKey ( ) ; <nl> + List < String > values = getValues ( headers , key ) ; <nl> + values . add ( entry . getValue ( ) ) ; <nl> + headers . put ( key , values ) ; <nl> + } <nl> + <nl> + Map < String , String [ ] > results = new HashMap < > ( ) ; <nl> + for ( Map . Entry < String , List < String > > entry : headers . entrySet ( ) ) { <nl> + List < String > value = entry . getValue ( ) ; <nl> + results . put ( entry . getKey ( ) , value . toArray ( new String [ value . size ( ) ] ) ) ; <nl> + } <nl> + <nl> + return copyOf ( results ) ; <nl> + } <nl> + <nl> + private static List < String > getValues ( final Map < String , List < String > > headers , final String key ) { <nl> + if ( headers . containsKey ( key ) ) { <nl> + return headers . get ( key ) ; <nl> + } <nl> + <nl> + return new ArrayList < > ( ) ; <nl> + } <nl> + <nl> public static final class Builder { <nl> private HttpProtocolVersion version ; <nl> private MessageContent content ; <nl> @ @ - 221 , 6 + 250 , 18 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return this ; <nl> } <nl> <nl> + public Builder forHeaders ( final Map < String , String [ ] > headers ) { <nl> + if ( headers ! = null ) { <nl> + ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , String [ ] > entry : headers . entrySet ( ) ) { <nl> + builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; <nl> + } <nl> + this . headers = builder . build ( ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> + <nl> public Builder withMethod ( final HttpMethod method ) { <nl> this . method = method ; <nl> return this ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 8bb826f . . abedabe 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . ImmutableSet . of ; <nl> import static java . lang . String . format ; <nl> <nl> - public class DynamicResponseHandlerFactory extends Dynamics implements ResponseHandlerFactory { <nl> + public final class DynamicResponseHandlerFactory extends Dynamics implements ResponseHandlerFactory { <nl> private static final ImmutableSet < String > RESOURCES = of ( " text " , " file " , " pathResource " , " version " ) ; <nl> private static final ImmutableMap < String , String > COMPOSITES = ImmutableMap . < String , String > builder ( ) <nl> . put ( " headers " , " header " )
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index fab5297 . . 286f8c8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import com . google . common . base . Optional ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> + public final class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> private final Optional < HttpsCertificate > certificate ; <nl> <nl> protected ActualHttpServer ( final Optional < Integer > port ,
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 3e2f636 . . 2224587 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 6 , 7 + 6 , 7 @ @ buildscript { <nl> } <nl> <nl> ext { <nl> - proguardVersion = ' 6 . 0 ' <nl> + proguardVersion = ' 6 . 0 . 1 ' <nl> } <nl> <nl> dependencies {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> index 9812c0a . . c3e6734 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> @ @ - 3 , 11 + 3 , 11 @ @ package com . github . dreamhead . moco . util ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> <nl> - public class MocoExecutors { <nl> - private static final ExecutorService executor = Executors . newCachedThreadPool ( ) ; <nl> + public final class MocoExecutors { <nl> + private static final ExecutorService EXECUTOR = Executors . newCachedThreadPool ( ) ; <nl> <nl> public static ExecutorService executor ( ) { <nl> - return executor ; <nl> + return EXECUTOR ; <nl> } <nl> <nl> private MocoExecutors ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index d43fa3c . . efa73e1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . nio . charset . Charset ; <nl> import static com . google . common . io . ByteStreams . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> - public class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> + public final class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> public ClasspathFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { <nl> super ( filename , charset ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 60e2767 . . 415e703 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco . handler . failover ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> <nl> - public class Failover { <nl> + public final class Failover { <nl> public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , <nl> FailoverStrategy . FAILOVER ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> index 5bc3bc5 . . 8d71f47 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> @ @ - 4 , 14 + 4 , 14 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> + import com . github . dreamhead . moco . util . MocoExecutors ; <nl> <nl> import java . util . concurrent . ExecutorService ; <nl> - import java . util . concurrent . Executors ; <nl> <nl> public final class MocoAsyncAction implements MocoEventAction { <nl> private final MocoEventAction action ; <nl> private final LatencyProcedure procedure ; <nl> - private final ExecutorService service = Executors . newCachedThreadPool ( ) ; <nl> + private final ExecutorService service = MocoExecutors . executor ( ) ; <nl> <nl> public MocoAsyncAction ( final MocoEventAction action , final LatencyProcedure procedure ) { <nl> this . action = action ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> new file mode 100644 <nl> index 0000000 . . 9812c0a <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + public class MocoExecutors { <nl> + private static final ExecutorService executor = Executors . newCachedThreadPool ( ) ; <nl> + <nl> + public static ExecutorService executor ( ) { <nl> + return executor ; <nl> + } <nl> + <nl> + private MocoExecutors ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index c62ebcf . . a9666b9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . util . Files ; <nl> + import com . github . dreamhead . moco . util . MocoExecutors ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> @ @ - 34 , 7 + 35 , 7 @ @ public final class WatcherService { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; <nl> private static final long REGISTER _ INTERVAL = 1000 ; <nl> <nl> - private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> + private ExecutorService executor = MocoExecutors . executor ( ) ; <nl> private WatchService service ; <nl> private boolean running ; <nl> private Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> index 14eee11 . . 2e6c9b9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import java . util . List ; <nl> import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> + public final class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; <nl> private final JsonPath jsonPath ; <nl>
diff - - git a / build . gradle b / build . gradle <nl> index 595020f . . 09a6865 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 149 , 5 + 149 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 5 . 1 ' <nl> + gradleVersion = ' 4 . 6 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 568c50b . . ea720f9 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 5 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 6 - bin . zip
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> index f83f6e2 . . 7730f56 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public abstract class BaseResponseSettingConfiguration < T extends ResponseSetting <nl> } <nl> <nl> @ Override <nl> - public T response ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> + public final T response ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> ResponseHandler responseHandler = and ( checkNotNull ( handler , " Handler should not be null " ) , <nl> checkNotNull ( handlers , " Handlers should not be null " ) ) ; <nl> this . handler = targetHandler ( responseHandler ) ; <nl> @ @ - 44 , 7 + 44 , 7 @ @ public abstract class BaseResponseSettingConfiguration < T extends ResponseSetting <nl> } <nl> <nl> @ Override <nl> - public T on ( final MocoEventTrigger trigger ) { <nl> + public final T on ( final MocoEventTrigger trigger ) { <nl> this . eventTriggers . add ( checkNotNull ( trigger , " Trigger should not be null " ) ) ; <nl> return self ( ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / AttachmentSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / AttachmentSetting . java <nl> index dba8c0b . . c41f890 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / AttachmentSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / AttachmentSetting . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class AttachmentSetting extends BaseResourceSetting { <nl> + public final class AttachmentSetting extends BaseResourceSetting { <nl> private String filename ; <nl> <nl> public String getFilename ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> index 1f2297f . . bde2119 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Strings . isNullOrEmpty ; <nl> <nl> - public class XmlRequestMatcher extends AbstractRequestMatcher { <nl> + public final class XmlRequestMatcher extends AbstractRequestMatcher { <nl> private final XmlExtractorHelper helper = new XmlExtractorHelper ( ) ; <nl> private final ContentRequestExtractor extractor ; <nl> private final Resource resource ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / Variable . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / Variable . java <nl> index a993e88 . . cc40a3e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / Variable . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / Variable . java <nl> @ @ - 3 , 5 + 3 , 5 @ @ package com . github . dreamhead . moco . resource . reader ; <nl> import com . github . dreamhead . moco . Request ; <nl> <nl> public interface Variable { <nl> - Object toTemplateVariable ( final Request request ) ; <nl> + Object toTemplateVariable ( Request request ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index e38d9cf . . a04fb80 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 52 , 14 + 52 , 6 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> - public static < T > T toObject ( final String value , final Class < T > clazz ) { <nl> - try { <nl> - return mapper . readValue ( value , clazz ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> - } <nl> - <nl> public static < T > ImmutableList < T > toObjects ( final String value , final Class < T > elementClass ) { <nl> return toObjects ( new ByteArrayInputStream ( value . getBytes ( ) ) , elementClass ) ; <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 6c0ce37 . . 595020f 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 21 . Final ' <nl> + nettyVersion = ' 4 . 1 . 22 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 4 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 026a2fe . . 3d0b031 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . google . common . collect . ImmutableMultimap ; <nl> import com . google . common . io . ByteStreams ; <nl> + import com . google . common . io . Resources ; <nl> import org . apache . http . Header ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> @ @ - 13 , 6 + 14 , 7 @ @ import org . junit . Test ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . net . URL ; <nl> import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> @ @ - 386 , 7 + 388 , 8 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - InputStream stream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " gbk . response " ) ; <nl> + URL resource = Resources . getResource ( " gbk . response " ) ; <nl> + InputStream stream = resource . openStream ( ) ; <nl> assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( ByteStreams . toByteArray ( stream ) ) ) ; <nl> } <nl> } ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index 4a825cc . . d43fa3c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . io . Resources ; <nl> <nl> import java . io . IOException ; <nl> import java . net . URL ; <nl> @ @ - 18 , 9 + 19 , 8 @ @ public class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> } <nl> <nl> protected byte [ ] doReadFor ( final Optional < ? extends Request > request ) { <nl> - ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; <nl> String actualFilename = this . filename ( request ) ; <nl> - URL resource = classLoader . getResource ( actualFilename ) ; <nl> + URL resource = Resources . getResource ( actualFilename ) ; <nl> if ( resource = = null ) { <nl> throw new IllegalArgumentException ( format ( " % s does not exist " , actualFilename ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> index 5f5ccaa . . 89f5097 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> @ @ - 51 , 10 + 51 , 10 @ @ public final class ResourceConfigApplierFactory { <nl> } ; <nl> } <nl> <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public static ResourceConfigApplier uriConfigApplier ( final String id , final String uri ) { <nl> return new SelfResourceConfigApplier ( id ) { <nl> @ Override <nl> + @ SuppressWarnings ( " unchecked " ) <nl> protected Resource newResource ( final MocoConfig config ) { <nl> return uriResource ( ( String ) config . apply ( uri ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> index 7e459b3 . . 1208ac5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> public abstract class CollectionHandler extends AbstractResponseHandler { <nl> - protected final ImmutableList < ResponseHandler > handlers ; <nl> + private final ImmutableList < ResponseHandler > handlers ; <nl> private int index ; <nl> <nl> protected CollectionHandler ( final Iterable < ResponseHandler > handlers ) {
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index c212103 . . 3e2f636 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 6 , 7 + 6 , 7 @ @ buildscript { <nl> } <nl> <nl> ext { <nl> - proguardVersion = ' 5 . 3 . 3 ' <nl> + proguardVersion = ' 6 . 0 ' <nl> } <nl> <nl> dependencies {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index fc9c4a2 . . c9f7b7a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 378 , 19 + 378 , 19 @ @ public final class Moco { <nl> <nl> public static ResponseHandler cycle ( final String content , final String . . . contents ) { <nl> checkNotNull ( content , " Cycle content should not be null " ) ; <nl> - checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Cycle content should not be null " ) ; <nl> return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { <nl> checkNotNull ( content , " Cycle content should not be null " ) ; <nl> - checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Cycle contents should not be null " ) ; <nl> return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> checkNotNull ( handler , " Cycle handler should not be null " ) ; <nl> - checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; <nl> + checkArgument ( handlers . length > 0 , " Cycle handlers should not be null " ) ; <nl> return newCycle ( asIterable ( handler , handlers ) ) ; <nl> } <nl>
diff - - git a / build . gradle b / build . gradle <nl> index f75a292 . . 123a601 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 5 ' <nl> + gradleVersion = ' 4 . 5 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 2c2bbe5 . . 568c50b 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 4 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 5 . 1 - bin . zip
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java <nl> deleted file mode 100644 <nl> index 1fc8eba . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . deserializer ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> - import com . github . dreamhead . moco . parser . model . CollectionContainer ; <nl> - import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . List ; <nl> - <nl> - public class CollectionContainerDeserializer extends JsonDeserializer < CollectionContainer > { <nl> - @ Override <nl> - public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - <nl> - if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> - return new CollectionContainer ( getSeqSettings ( jp ) ) ; <nl> - } <nl> - <nl> - return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> - } <nl> - <nl> - private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> - TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> - return jp . readValueAs ( reference ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> index ca886f3 . . 3255923 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> @ @ - 1 , 17 + 1 , 16 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> - import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . fasterxml . jackson . annotation . JsonCreator ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . parser . deserializer . CollectionContainerDeserializer ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - @ JsonDeserialize ( using = CollectionContainerDeserializer . class ) <nl> public class CollectionContainer implements Container { <nl> private Iterable < ResponseSetting > collection ; <nl> <nl> + @ JsonCreator <nl> public CollectionContainer ( final Iterable < ResponseSetting > collection ) { <nl> this . collection = collection ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> index 2fbce40 . . 7b8d473 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> public abstract class CollectionHandler extends AbstractResponseHandler { <nl> protected final ImmutableList < ResponseHandler > handlers ; <nl> + private int index ; <nl> <nl> protected CollectionHandler ( final Iterable < ResponseHandler > handlers ) { <nl> this . handlers = copyOf ( handlers ) ; <nl> @ @ - 15 , 8 + 16 , 10 @ @ public abstract class CollectionHandler extends AbstractResponseHandler { <nl> <nl> @ Override <nl> public void writeToResponse ( final SessionContext context ) { <nl> - handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> + int current = index ; <nl> + this . index = next ( index , this . handlers . size ( ) ) ; <nl> + handlers . get ( current ) . writeToResponse ( context ) ; <nl> } <nl> <nl> - protected abstract int current ( ) ; <nl> + protected abstract int next ( final int index , final int size ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> index 68221e7 . . fc870d7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> @ @ - 2 , 10 + 2 , 8 @ @ package com . github . dreamhead . moco . handler ; <nl> <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 25 , 13 + 23 , 13 @ @ public class CycleHandler extends CollectionHandler { <nl> } <nl> <nl> @ Override <nl> - protected int current ( ) { <nl> - int current = this . index ; <nl> - if ( + + index > = handlers . size ( ) ) { <nl> - index = 0 ; <nl> + protected int next ( final int index , final int size ) { <nl> + int next = index + 1 ; <nl> + if ( next > = size ) { <nl> + next = 0 ; <nl> } <nl> <nl> - return current ; <nl> + return next ; <nl> } <nl> <nl> @ Override <nl> @ @ - 52 , 5 + 50 , 4 @ @ public class CycleHandler extends CollectionHandler { <nl> } <nl> } ; <nl> } <nl> - <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> index a18a3b7 . . 8ece9e2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> @ @ - 2 , 10 + 2 , 8 @ @ package com . github . dreamhead . moco . handler ; <nl> <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 25 , 13 + 23 , 13 @ @ public final class SequenceHandler extends CollectionHandler { <nl> } <nl> <nl> @ Override <nl> - protected int current ( ) { <nl> - int current = this . index ; <nl> - if ( + + index > = handlers . size ( ) ) { <nl> - index = handlers . size ( ) - 1 ; <nl> + protected int next ( final int index , final int size ) { <nl> + int next = index + 1 ; <nl> + if ( next > = size ) { <nl> + next = size - 1 ; <nl> } <nl> <nl> - return current ; <nl> + return next ; <nl> } <nl> <nl> @ Override
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java <nl> new file mode 100644 <nl> index 0000000 . . 1fc8eba <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . core . type . TypeReference ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> + import com . github . dreamhead . moco . parser . model . CollectionContainer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . List ; <nl> + <nl> + public class CollectionContainerDeserializer extends JsonDeserializer < CollectionContainer > { <nl> + @ Override <nl> + public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + <nl> + if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> + return new CollectionContainer ( getSeqSettings ( jp ) ) ; <nl> + } <nl> + <nl> + return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + } <nl> + <nl> + private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> + TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> + return jp . readValueAs ( reference ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> deleted file mode 100644 <nl> index 914788f . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . deserializer ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> - import com . github . dreamhead . moco . parser . model . CollectionContainer ; <nl> - import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . List ; <nl> - <nl> - public class SeqContainerDeserializer extends JsonDeserializer < CollectionContainer > { <nl> - @ Override <nl> - public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - <nl> - if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> - return new CollectionContainer ( getSeqSettings ( jp ) ) ; <nl> - } <nl> - <nl> - return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> - } <nl> - <nl> - private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> - TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> - return jp . readValueAs ( reference ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> index 43cb605 . . ca886f3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; <nl> + import com . github . dreamhead . moco . parser . deserializer . CollectionContainerDeserializer ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - @ JsonDeserialize ( using = SeqContainerDeserializer . class ) <nl> + @ JsonDeserialize ( using = CollectionContainerDeserializer . class ) <nl> public class CollectionContainer implements Container { <nl> private Iterable < ResponseSetting > collection ; <nl>
diff - - git a / build . gradle b / build . gradle <nl> index a85f7a5 . . f75a292 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 13 . 0 ' <nl> - httpComponentVersion = ' 4 . 5 . 4 ' <nl> + httpComponentVersion = ' 4 . 5 . 5 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 27 - incubating ' <nl> jsonAssertVersion = ' 1 . 5 . 0 '
diff - - git a / build . gradle b / build . gradle <nl> index a1b15b5 . . 227d579 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 75 , 7 + 75 , 7 @ @ subprojects { <nl> guavaVersion = ' 20 . 0 ' <nl> nettyVersion = ' 4 . 1 . 20 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> - jacksonVersion = ' 2 . 9 . 3 ' <nl> + jacksonVersion = ' 2 . 9 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 13 . 0 '
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 93a502e . . 3811962 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 3 + 1 , 8 @ @ <nl> + # Release <nl> + <nl> + # # APIs <nl> + * ` cycle ` API returns response as a cycle . <nl> + <nl> # Release 0 . 12 . 0 ( 24 - Dec - 2017 ) <nl> <nl> * Upgrade minimal Java version to Java 7 <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 70edeb2 . . 9cf1fb2 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1621 , 6 + 1621 , 76 @ @ The other response settings are able to be set for json as well . <nl> } <nl> ` ` ` <nl> <nl> + # # # Cycle <nl> + * * @ Since will be at next release * * <nl> + <nl> + Cycle is similar to ` seq ` , but it will return response as cycle . An example is as following : <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / cycle " ) ) ) . response ( cycle ( " foo " , " bar " , " blah " ) ) ; <nl> + ` ` ` <nl> + <nl> + The response will returned as cycle : <nl> + * foo <nl> + * bar <nl> + * blah <nl> + * foo <nl> + * bar <nl> + * blah <nl> + * . . . <nl> + <nl> + The other response settings are able to be set as well . <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / cycle " ) ) ) . response ( cycle ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * * @ Since 0 . 12 . 0 * * <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / cycle " <nl> + } , <nl> + " response " : { <nl> + " cycle " : [ <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + { <nl> + " text " : " bar " <nl> + } , <nl> + { <nl> + " text " : " blah " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The other response settings are able to be set for json as well . <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / cycle " <nl> + } , <nl> + " response " : { <nl> + " cycle " : [ <nl> + { <nl> + " status " : " 302 " <nl> + } , <nl> + { <nl> + " status " : " 302 " <nl> + } , <nl> + { <nl> + " status " : " 200 " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # JSON Response <nl> If the response is JSON , we don ' t need to write JSON text with escape character in code . <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f356a8c . . d66414a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import java . nio . charset . Charset ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import static com . github . dreamhead . moco . extractor . Extractors . extractor ; <nl> + import static com . github . dreamhead . moco . handler . CycleHandler . newCycle ; <nl> import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; <nl> import static com . github . dreamhead . moco . handler . SequenceHandler . newSeq ; <nl> import static com . github . dreamhead . moco . internal . ApiUtils . resourceToResourceHandler ; <nl> @ @ - 375 , 6 + 376 , 24 @ @ public final class Moco { <nl> return newSeq ( asIterable ( handler , handlers ) ) ; <nl> } <nl> <nl> + public static ResponseHandler cycle ( final String content , final String . . . contents ) { <nl> + checkNotNull ( content , " Sequence content should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; <nl> + return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; <nl> + } <nl> + <nl> + public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { <nl> + checkNotNull ( content , " Sequence content should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> + return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> + } <nl> + <nl> + public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> + checkNotNull ( handler , " Sequence handler should not be null " ) ; <nl> + checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; <nl> + return newCycle ( asIterable ( handler , handlers ) ) ; <nl> + } <nl> + <nl> public static ContentResource file ( final String filename ) { <nl> return file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 50bcff2 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package com . github . dreamhead . moco . handler ; <nl> + <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . internal . SessionContext ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . FluentIterable ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkArgument ; <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + <nl> + public class CycleHandler extends AbstractResponseHandler { <nl> + private final ImmutableList < ResponseHandler > handlers ; <nl> + private int index ; <nl> + <nl> + private CycleHandler ( final Iterable < ResponseHandler > handlers ) { <nl> + this . handlers = copyOf ( handlers ) ; <nl> + } <nl> + <nl> + public static ResponseHandler newCycle ( final Iterable < ResponseHandler > handlers ) { <nl> + checkArgument ( Iterables . size ( handlers ) > 0 , " Sequence contents should not be null " ) ; <nl> + return new CycleHandler ( handlers ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void writeToResponse ( final SessionContext context ) { <nl> + handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> + } <nl> + <nl> + private int current ( ) { <nl> + int current = this . index ; <nl> + if ( + + index > = handlers . size ( ) ) { <nl> + index = 0 ; <nl> + } <nl> + <nl> + return current ; <nl> + } <nl> + <nl> + @ Override <nl> + public ResponseHandler apply ( final MocoConfig config ) { <nl> + if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { <nl> + return super . apply ( config ) ; <nl> + } <nl> + <nl> + FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; <nl> + return new CycleHandler ( transformedResources . toList ( ) ) ; <nl> + } <nl> + <nl> + private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { <nl> + return new Function < ResponseHandler , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final ResponseHandler input ) { <nl> + return input . apply ( config ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index 0626fb8 . . 46cb42c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import static com . github . dreamhead . moco . HttpProtocolVersion . VERSION _ 1 _ 0 ; <nl> import static com . github . dreamhead . moco . Moco . and ; <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . contain ; <nl> + import static com . github . dreamhead . moco . Moco . cycle ; <nl> import static com . github . dreamhead . moco . Moco . endsWith ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . exist ; <nl> @ @ - 384 , 6 + 385 , 51 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ return _ content _ circularly _ one _ by _ one ( ) throws Exception { <nl> + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( " bar " , " blah " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ content _ one _ by _ one _ with _ text _ api _ circularly ( ) throws Exception { <nl> + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( text ( " bar " ) , text ( " blah " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ response _ circularly _ one _ by _ one ( ) throws Exception { <nl> + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( status ( 302 ) , status ( 200 ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 302 ) ) ; <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 200 ) ) ; <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 302 ) ) ; <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 200 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ match ( ) throws Exception { <nl> server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( " bar " ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java <nl> index 519e0b8 . . 8291d1e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ public final class DomainCookieAttribute extends ActualCookieAttribute { <nl> <nl> <nl> @ Override <nl> - public final void visit ( final Cookie cookie ) { <nl> + public void visit ( final Cookie cookie ) { <nl> cookie . setDomain ( this . domain ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java <nl> index e7d573e . . b9fdc8c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ public final class MaxAgeCookieAttribute extends ActualCookieAttribute { <nl> } <nl> <nl> @ Override <nl> - public final void visit ( final Cookie cookie ) { <nl> + public void visit ( final Cookie cookie ) { <nl> cookie . setMaxAge ( unit . toSeconds ( maxAge ) ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index 3648482 . . 98c2811 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 118 , 5 + 118 , 5 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> return newServer ; <nl> } <nl> <nl> - protected abstract U createMergeServer ( final U thatServer ) ; <nl> + protected abstract U createMergeServer ( U thatServer ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> index cdb7556 . . 052262f 100755 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> @ @ - 6 , 17 + 6 , 17 @ @ import com . github . dreamhead . moco . mount . MountPredicate ; <nl> import com . github . dreamhead . moco . mount . MountTo ; <nl> <nl> public interface HttpServer extends HttpResponseSetting , Server < HttpResponseSetting > { <nl> - HttpResponseSetting get ( final RequestMatcher matcher ) ; <nl> + HttpResponseSetting get ( RequestMatcher matcher ) ; <nl> <nl> - HttpResponseSetting post ( final RequestMatcher matcher ) ; <nl> + HttpResponseSetting post ( RequestMatcher matcher ) ; <nl> <nl> - HttpResponseSetting put ( final RequestMatcher matcher ) ; <nl> + HttpResponseSetting put ( RequestMatcher matcher ) ; <nl> <nl> - HttpResponseSetting delete ( final RequestMatcher matcher ) ; <nl> + HttpResponseSetting delete ( RequestMatcher matcher ) ; <nl> <nl> - HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) ; <nl> + HttpResponseSetting mount ( String dir , MountTo target , MountPredicate . . . predicates ) ; <nl> <nl> - HttpResponseSetting proxy ( final ProxyConfig config ) ; <nl> + HttpResponseSetting proxy ( ProxyConfig config ) ; <nl> <nl> - HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) ; <nl> + HttpResponseSetting proxy ( ProxyConfig proxyConfig , Failover failover ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / NamedSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / NamedSubResourceSettingBuilder . java <nl> index 75264a3 . . cff0b3b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / NamedSubResourceSettingBuilder . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / NamedSubResourceSettingBuilder . java <nl> @ @ - 3 , 5 + 3 , 5 @ @ package com . github . dreamhead . moco . rest . builder ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> <nl> public interface NamedSubResourceSettingBuilder { <nl> - RestSetting settings ( final RestSetting restSetting , final RestSetting . . . restSettings ) ; <nl> + RestSetting settings ( RestSetting restSetting , RestSetting . . . restSettings ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / ResponseBase . java b / moco - core / src / main / java / com / github / dreamhead / moco / ResponseBase . java <nl> index 1152e42 . . 4726629 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / ResponseBase . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / ResponseBase . java <nl> @ @ - 3 , 8 + 3 , 8 @ @ package com . github . dreamhead . moco ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> <nl> public interface ResponseBase < T > { <nl> - T response ( final ResponseHandler handler , final ResponseHandler . . . handlers ) ; <nl> - T response ( final String content ) ; <nl> - T response ( final Resource resource ) ; <nl> - T response ( final MocoProcedure procedure ) ; <nl> + T response ( ResponseHandler handler , ResponseHandler . . . handlers ) ; <nl> + T response ( String content ) ; <nl> + T response ( Resource resource ) ; <nl> + T response ( MocoProcedure procedure ) ; <nl> }
diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index c78f6a6 . . 2efddb5 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 49 , 7 + 49 , 7 @ @ Now , we can write a setting file to combine these two configurations : <nl> It ' s time start server with this setting : <nl> <nl> ` ` ` shell <nl> - java - jar moco - runner - < version > - standalone . jar start - p 12306 - g settings . json <nl> + java - jar moco - runner - < version > - standalone . jar http - p 12306 - g settings . json <nl> ` ` ` <nl> <nl> Feel free to open your browser to try .
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 8e371e4 . . e38d9cf 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import java . io . ByteArrayInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> import static com . google . common . collect . ImmutableList . of ; <nl> import static java . lang . String . format ; <nl> @ @ - 35 , 6 + 36 , 14 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static String toJson ( final Map map ) { <nl> + try { <nl> + return mapper . writeValueAsString ( map ) ; <nl> + } catch ( JsonProcessingException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { <nl> try { <nl> return mapper . readValue ( value , clazz ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 8a2e7f6 . . cc9a74e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . github . dreamhead . moco . support . JsonSupport ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . io . ByteStreams ; <nl> import org . apache . http . client . HttpResponseException ; <nl> import org . junit . Test ; <nl> @ @ - 25 , 6 + 26 , 7 @ @ import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static com . google . common . collect . ImmutableMap . of ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . mockito . ArgumentMatchers . any ; <nl> @ @ - 79 , 12 + 81 , 12 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ match _ exact _ json ( ) throws Exception { <nl> - final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; <nl> - server . request ( by ( json ( jsonContent ) ) ) . response ( " foo " ) ; <nl> + final String jsonText = Jsons . toJson ( of ( " foo " , " bar " ) ) ; <nl> + server . request ( by ( json ( jsonText ) ) ) . response ( " foo " ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - assertThat ( helper . postContent ( root ( ) , jsonContent ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . postContent ( root ( ) , jsonText ) , is ( " foo " ) ) ; <nl> } <nl> } ) ; <nl> } <nl> @ @ - 103 , 11 + 105 , 12 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ match _ same _ structure _ json ( ) throws Exception { <nl> - server . request ( by ( json ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; <nl> + final String jsonText = Jsons . toJson ( of ( " foo " , " bar " ) ) ; <nl> + server . request ( by ( json ( jsonText ) ) ) . response ( " foo " ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " foo \ " : \ " bar \ " \ n } " ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . postContent ( root ( ) , jsonText ) , is ( " foo " ) ) ; <nl> } <nl> } ) ; <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index d178230 . . 01d75ba 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 11 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> + import com . github . dreamhead . moco . support . JsonSupport ; <nl> import com . google . common . io . ByteStreams ; <nl> - import com . google . common . net . MediaType ; <nl> - import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . HttpResponseException ; <nl> - import org . apache . http . util . EntityUtils ; <nl> import org . junit . Test ; <nl> import org . skyscreamer . jsonassert . JSONAssert ; <nl> import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> @ @ - 165 , 14 + 163 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> - HttpEntity entity = response . getEntity ( ) ; <nl> - MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> - assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> - assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - <nl> - JSONAssert . assertEquals ( " { code : 1 , message : \ " message \ " } " , <nl> - EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> + JsonSupport . assertEquals ( " { code : 1 , message : \ " message \ " } " , helper . getResponse ( root ( ) ) ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java b / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java <nl> new file mode 100644 <nl> index 0000000 . . 7425536 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . github . dreamhead . moco . support ; <nl> + <nl> + import com . google . common . net . MediaType ; <nl> + import org . apache . http . HttpEntity ; <nl> + import org . apache . http . HttpResponse ; <nl> + import org . apache . http . util . EntityUtils ; <nl> + import org . json . JSONException ; <nl> + import org . skyscreamer . jsonassert . JSONAssert ; <nl> + import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class JsonSupport { <nl> + public static void assertEquals ( final String expected , final HttpResponse response ) { <nl> + HttpEntity entity = response . getEntity ( ) ; <nl> + MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> + assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> + assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> + <nl> + try { <nl> + JSONAssert . assertEquals ( expected , <nl> + EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> + } catch ( JSONException | IOException e ) { <nl> + throw new AssertionError ( " fail to parse entity to json " ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> index b1e96ae . . a618499 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> @ @ - 1 , 13 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . net . MediaType ; <nl> - import org . apache . http . HttpEntity ; <nl> - import org . apache . http . HttpResponse ; <nl> - import org . apache . http . util . EntityUtils ; <nl> + import com . github . dreamhead . moco . support . JsonSupport ; <nl> import org . json . JSONException ; <nl> import org . junit . Test ; <nl> - import org . skyscreamer . jsonassert . JSONAssert ; <nl> - import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> <nl> import java . io . IOException ; <nl> <nl> @ @ - 31 , 12 + 26 , 7 @ @ public class MocoJsonStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException , JSONException { <nl> runWithConfiguration ( " json . json " ) ; <nl> - HttpResponse response = helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ; <nl> - HttpEntity entity = response . getEntity ( ) ; <nl> - JSONAssert . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> - MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> - assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> - assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> + JsonSupport . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ) ; <nl> } <nl> <nl> @ Test
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index c940c44 . . f467401 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> - import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . CharStreams ; <nl> import com . google . common . net . MediaType ; <nl> @ @ - 189 , 9 + 188 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> String content = helper . get ( remoteUrl ( root ( ) ) ) ; <nl> - PlainA responseA = Jsons . toObject ( content , PlainA . class ) ; <nl> - assertThat ( responseA . code , is ( 1 ) ) ; <nl> - assertThat ( responseA . message , is ( " 消 息 " ) ) ; <nl> + JSONAssert . assertEquals ( " { code : 1 , message : \ " 消 息 \ " } " , content , JSONCompareMode . LENIENT ) ; <nl> } <nl> } ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> index 83f7dce . . 67f77f5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . net . MediaType ; <nl> @ @ - 13 , 7 + 12 , 6 @ @ import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> import org . apache . http . entity . ByteArrayEntity ; <nl> import org . apache . http . entity . ContentType ; <nl> - import org . apache . http . entity . InputStreamEntity ; <nl> <nl> import java . nio . charset . Charset ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 60d95b0 . . f356a8c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 543 , 7 + 543 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestExtractor < Object > var ( final Object text ) { <nl> - return new PlainExtractor < Object > ( checkNotNull ( text , " Template variable should not be null or empty " ) ) ; <nl> + return new PlainExtractor < > ( checkNotNull ( text , " Template variable should not be null or empty " ) ) ; <nl> } <nl> <nl> public static Failover failover ( final String file ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / FailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / FailoverExecutor . java <nl> index febf9b7 . . f4a387a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / FailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / FailoverExecutor . java <nl> @ @ - 5 , 8 + 5 , 8 @ @ import com . github . dreamhead . moco . HttpResponse ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> <nl> public interface FailoverExecutor { <nl> - void onCompleteResponse ( final HttpRequest request , final HttpResponse response ) ; <nl> - HttpResponse failover ( final HttpRequest request ) ; <nl> + void onCompleteResponse ( HttpRequest request , HttpResponse response ) ; <nl> + HttpResponse failover ( HttpRequest request ) ; <nl> <nl> FailoverExecutor EMPTY _ FAILOVER = new FailoverExecutor ( ) { <nl> @ Override
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index ceb7d51 . . 60d95b0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 66 , 7 + 66 , 6 @ @ import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> import static com . google . common . net . HttpHeaders . SET _ COOKIE ; <nl> import static java . lang . String . format ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> index cbfcd99 . . 755c471 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> <nl> public abstract class AbstractHttpContentResponseHandler extends AbstractContentResponseHandler { <nl> - protected abstract MessageContent responseContent ( final HttpRequest httpRequest ) ; <nl> + protected abstract MessageContent responseContent ( HttpRequest httpRequest ) ; <nl> <nl> @ Override <nl> protected final MessageContent responseContent ( final Request request ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> index 60623bf . . 14eee11 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> @ @ - 39 , 9 + 39 , 7 @ @ public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> return absent ( ) ; <nl> } <nl> return of ( toStringArray ( jsonPathContent ) ) ; <nl> - } catch ( PathNotFoundException e ) { <nl> - return absent ( ) ; <nl> - } catch ( IOException e ) { <nl> + } catch ( PathNotFoundException | IOException e ) { <nl> return absent ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 2e20751 . . 3066416 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 66 , 9 + 66 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } catch ( ParseException e ) { <nl> logger . error ( " Fail to parse template : { } " , content . toString ( ) ) ; <nl> throw new MocoException ( e ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } catch ( TemplateException e ) { <nl> + } catch ( IOException | TemplateException e ) { <nl> throw new MocoException ( e ) ; <nl> } <nl> }
diff - - git a / README . md b / README . md <nl> index e0e98e5 . . 03dfcd2 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> Moco is an easy setup stub framework . <nl> <nl> # # Latest Release <nl> - * _ _ 0 . 11 . 1 _ _ <nl> + * _ _ 0 . 12 . 0 _ _ <nl> <nl> More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) <nl> <nl> @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w <nl> In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . <nl> <nl> # # Quick Start <nl> - * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> + * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) <nl> * Write your own configuration file to describe your Moco server configuration as follow : <nl> ` ` ` json <nl> [ <nl> diff - - git a / build . gradle b / build . gradle <nl> index 6f2fd74 . . 771fda7 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 23 , 7 + 23 , 7 @ @ idea { <nl> subprojects { <nl> apply plugin : ' java ' <nl> group = ' com . github . dreamhead ' <nl> - version = ' 0 . 11 . 1 - SNAPSHOT ' <nl> + version = ' 0 . 12 . 0 - SNAPSHOT ' <nl> sourceCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> targetCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> <nl> diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 397a2cc . . 93a502e 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - # Release <nl> + # Release 0 . 12 . 0 ( 24 - Dec - 2017 ) <nl> <nl> * Upgrade minimal Java version to Java 7 <nl> <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index a5c88ac . . 70edeb2 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 539 , 7 + 539 , 7 @ @ server . request ( json ( text ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; <nl> ` ` ` <nl> <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> ` json ` will return a resource from next release <nl> <nl> ` ` ` java <nl> @ @ - 581 , 7 + 581 , 7 @ @ You can give a POJO to Java API , it will be converted JSON text . <nl> server . request ( json ( pojo ) ) . response ( " foo " ) ; <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> ` json ` will return a resource from next release <nl> <nl> ` ` ` java <nl> @ @ - 1575 , 7 + 1575 , 7 @ @ The other response settings are able to be set as well . <nl> server . request ( by ( uri ( " / seq " ) ) ) . response ( seq ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> ` ` ` json <nl> { <nl> @ @ - 1632 , 8 + 1632 , 8 @ @ You can give a POJO to Java API , it will be converted JSON text . Hint , this api <nl> server . request ( by ( uri ( " / json " ) ) ) . response ( toJson ( pojo ) ) ; <nl> ` ` ` <nl> <nl> - * * @ Since will be at next realease * * <nl> - ` toJson ` will be removed from next release , use ` json ` instead . <nl> + * * @ Since 0 . 12 . 0 * * <nl> + ` toJson ` will be removed from 0 . 12 . 0 , use ` json ` instead . <nl> <nl> ` ` ` java <nl> server . request ( by ( uri ( " / json " ) ) ) . response ( json ( pojo ) ) ; <nl> @ @ - 2226 , 7 + 2226 , 7 @ @ server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / ano <nl> } <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> If your post content is JSON , you can use ` json ` in your configuration directly . <nl> <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index a65b0d7 . . f7a1f90 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Standalone Command Line <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> @ @ - 74 , 7 + 74 , 7 @ @ java - jar moco - runner - < version > - standalone . jar http - p 12306 - c foo . json <nl> ` ` ` <nl> <nl> # # # Many Configuration Files <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> If you have many configuration files , you can use glob matcher as ` - c ` argument . <nl> But you need to make sure the configuration that don ' t conflict . <nl> diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index 7761a47 . . c78f6a6 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 197 , 7 + 197 , 7 @ @ When you issue any request to server , it will return response with " foo " , " bar " <nl> <nl> # # # Glob Inclusion <nl> <nl> - * * @ Since will be at the next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> You may need include many files , glob can help you to do this . <nl> <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index de0620b . . 479fda3 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 31 , 7 + 31 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in <nl> < dependency > <nl> < groupId > com . github . dreamhead < / groupId > <nl> < artifactId > moco - core < / artifactId > <nl> - < version > 0 . 11 . 1 < / version > <nl> + < version > 0 . 12 . 0 < / version > <nl> < / dependency > <nl> ` ` ` <nl> <nl> @ @ - 44 , 7 + 44 , 7 @ @ repositories { <nl> <nl> dependencies { <nl> testCompile ( <nl> - " com . github . dreamhead : moco - core : 0 . 11 . 1 " , <nl> + " com . github . dreamhead : moco - core : 0 . 12 . 0 " , <nl> ) <nl> } <nl> ` ` ` <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class MocoRunnerTest { <nl> # # Standalone <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 5d6fdc9 . . b5d724c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 92 , 7 + 92 , 6 @ @ public final class SettingRunner implements Runner { <nl> @ Override <nl> public Iterable < ? extends File > apply ( final GlobalSetting input ) { <nl> return from ( input . includes ( ) ) . transform ( toFile ( ) ) ; <nl> - <nl> } <nl> } ; <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 67e86c1 . . 6f2fd74 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 146 , 5 + 146 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 4 ' <nl> + gradleVersion = ' 4 . 4 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 933b647 . . 2c2bbe5 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 4 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 4 . 1 - bin . zip <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> index dcc28ed . . 00cd30f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class SeqContainerDeserializer extends JsonDeserializer < SeqContainer > { <nl> return ( SeqContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> - private List < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> + private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> return jp . readValueAs ( reference ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> index d76124c . . d39f6fd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> @ @ - 6 , 15 + 6 , 13 @ @ import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> - import java . util . List ; <nl> - <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> @ JsonDeserialize ( using = SeqContainerDeserializer . class ) <nl> public class SeqContainer implements Container { <nl> - private List < ResponseSetting > sequence ; <nl> + private Iterable < ResponseSetting > sequence ; <nl> <nl> - public SeqContainer ( final List < ResponseSetting > sequence ) { <nl> + public SeqContainer ( final Iterable < ResponseSetting > sequence ) { <nl> this . sequence = sequence ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 9624b83 . . 25b3099 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 60 , 6 + 60 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . templateResourc <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> + import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> import static com . google . common . base . Optional . of ; <nl> @ @ - 235 , 16 + 236 , 22 @ @ public final class Moco { <nl> text ( checkNotNullOrEmpty ( expected , " Expected resource should not be null " ) ) ) ; <nl> } <nl> <nl> - public static RequestMatcher and ( final RequestMatcher . . . matchers ) { <nl> - return new AndRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> + public static RequestMatcher and ( final RequestMatcher matcher , final RequestMatcher . . . matchers ) { <nl> + return new AndRequestMatcher ( asIterable ( <nl> + checkNotNull ( matcher , " Matcher should not be null " ) , <nl> + checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> <nl> - public static ResponseHandler and ( final ResponseHandler . . . handlers ) { <nl> - return AndResponseHandler . and ( copyOf ( checkNotNull ( handlers , " Handlers should not be null " ) ) ) ; <nl> + public static ResponseHandler and ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> + return AndResponseHandler . and ( <nl> + checkNotNull ( handler , " Handlers should not be null " ) , <nl> + checkNotNull ( handlers , " Handlers should not be null " ) ) ; <nl> } <nl> <nl> - public static RequestMatcher or ( final RequestMatcher . . . matchers ) { <nl> - return new OrRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> + public static RequestMatcher or ( final RequestMatcher matcher , final RequestMatcher . . . matchers ) { <nl> + return new OrRequestMatcher ( asIterable ( <nl> + checkNotNull ( matcher , " Matcher should not be null " ) , <nl> + checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher not ( final RequestMatcher matcher ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> index 057f52c . . 386dc57 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> @ @ - 5 , 6 + 5 , 8 @ @ import com . github . dreamhead . moco . ResponseSetting ; <nl> import com . github . dreamhead . moco . Server ; <nl> <nl> import static com . github . dreamhead . moco . Moco . or ; <nl> + import static com . github . dreamhead . moco . util . Iterables . head ; <nl> + import static com . github . dreamhead . moco . util . Iterables . tail ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public abstract class BaseServer < T extends ResponseSetting < T > > <nl> @ @ - 16 , 6 + 18 , 7 @ @ public abstract class BaseServer < T extends ResponseSetting < T > > <nl> } <nl> <nl> public T request ( final RequestMatcher . . . matchers ) { <nl> - return request ( or ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> + checkNotNull ( matchers , " Matcher should not be null " ) ; <nl> + return request ( or ( head ( matchers ) , tail ( matchers ) ) ) ; <nl> } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 1ab61fa . . 67e86c1 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 18 . Final ' <nl> + nettyVersion = ' 4 . 1 . 19 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 2 ' <nl> junitVersion = ' 4 . 12 ' <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> index 519b428 . . 73aa52d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class ResourceSetting { <nl> protected List < RestDeleteSetting > delete ; <nl> protected List < RestHeadSetting > head ; <nl> protected List < RestPatchSetting > patch ; <nl> - protected List < RestSubResourceSetting > resources ; <nl> + protected List < RestSubResourceSetting > resource ; <nl> <nl> public String getName ( ) { <nl> return name ; <nl> @ @ - 37 , 7 + 37 , 7 @ @ public class ResourceSetting { <nl> . add ( " delete " , delete ) <nl> . add ( " head " , head ) <nl> . add ( " patch " , patch ) <nl> - . add ( " sub resources " , resources ) <nl> + . add ( " sub resources " , resource ) <nl> . toString ( ) ; <nl> } <nl> <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class ResourceSetting { <nl> public RestSetting [ ] getSettings ( ) { <nl> return toArray ( concat ( asRestSetting ( get ) , asRestSetting ( post ) , <nl> asRestSetting ( put ) , asRestSetting ( delete ) , <nl> - asRestSetting ( head ) , asRestSetting ( patch ) , asSubRestSetting ( resources ) ) , <nl> + asRestSetting ( head ) , asRestSetting ( patch ) , asSubRestSetting ( resource ) ) , <nl> RestSetting . class ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> index 4591dcd . . 74a8a04 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ public class RestSubResourceSetting extends ResourceSetting { <nl> . add ( " delete " , delete ) <nl> . add ( " head " , head ) <nl> . add ( " patch " , patch ) <nl> - . add ( " sub resources " , resources ) <nl> + . add ( " sub resources " , resource ) <nl> . add ( " id " , id ) <nl> . toString ( ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ContainMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ContainMatcher . java <nl> index 0a943ed . . 32c32dd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ContainMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / ContainMatcher . java <nl> @ @ - 19 , 6 + 19 , 6 @ @ public class ContainMatcher < T > extends AbstractOperatorMatcher < T > { <nl> <nl> @ Override <nl> protected RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new ContainMatcher < T > ( extractor , resource ) ; <nl> + return new ContainMatcher < > ( extractor , resource ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java <nl> index 4b4d166 . . 194fe8c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EndsWithMatcher . java <nl> @ @ - 19 , 6 + 19 , 6 @ @ public class EndsWithMatcher < T > extends AbstractOperatorMatcher < T > { <nl> <nl> @ Override <nl> protected RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new StartsWithMatcher < T > ( extractor , resource ) ; <nl> + return new StartsWithMatcher < > ( extractor , resource ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java <nl> index f0bae96 . . fb074c4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / EqRequestMatcher . java <nl> @ @ - 19 , 6 + 19 , 6 @ @ public class EqRequestMatcher < T > extends AbstractOperatorMatcher < T > { <nl> <nl> @ Override <nl> protected RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new EqRequestMatcher < T > ( extractor , resource ) ; <nl> + return new EqRequestMatcher < > ( extractor , resource ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / MatchMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / MatchMatcher . java <nl> index a37f48c . . 1940a4c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / MatchMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / MatchMatcher . java <nl> @ @ - 22 , 6 + 22 , 6 @ @ public class MatchMatcher < T > extends AbstractOperatorMatcher < T > { <nl> <nl> @ Override <nl> protected RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new MatchMatcher < T > ( extractor , resource ) ; <nl> + return new MatchMatcher < > ( extractor , resource ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / StartsWithMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / StartsWithMatcher . java <nl> index 91f5594 . . c792af1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / StartsWithMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / StartsWithMatcher . java <nl> @ @ - 19 , 6 + 19 , 6 @ @ public class StartsWithMatcher < T > extends AbstractOperatorMatcher < T > { <nl> <nl> @ Override <nl> protected RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new StartsWithMatcher < T > ( extractor , resource ) ; <nl> + return new StartsWithMatcher < > ( extractor , resource ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> index 715669f . . 4935fe5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import java . io . InputStream ; <nl> <nl> public abstract class BaseParser < T extends Server > implements Parser < T > { <nl> protected abstract T createServer ( ImmutableList < SessionSetting > read , <nl> - Optional < Integer > port , final MocoConfig . . . configs ) ; <nl> + Optional < Integer > port , MocoConfig . . . configs ) ; <nl> <nl> public T parseServer ( final ImmutableList < InputStream > streams , final Optional < Integer > port , <nl> final MocoConfig . . . configs ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 066acd5 . . 5d6fdc9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 59 , 7 + 59 , 6 @ @ public final class SettingRunner implements Runner { <nl> return new Function < GlobalSetting , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( final GlobalSetting setting ) { <nl> - <nl> return aRunnerSetting ( ) <nl> . addStreams ( from ( setting . includes ( ) ) . transform ( toStream ( ) ) . toList ( ) ) <nl> . withContext ( setting . getContext ( ) )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> index a681555 . . d76124c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> @ @ - 12 , 22 + 12 , 22 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> <nl> @ JsonDeserialize ( using = SeqContainerDeserializer . class ) <nl> public class SeqContainer implements Container { <nl> - private List < ResponseSetting > seqs ; <nl> + private List < ResponseSetting > sequence ; <nl> <nl> - public SeqContainer ( final List < ResponseSetting > seqs ) { <nl> - this . seqs = seqs ; <nl> + public SeqContainer ( final List < ResponseSetting > sequence ) { <nl> + this . sequence = sequence ; <nl> } <nl> <nl> @ Override <nl> public String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> - . add ( " sequence " , seqs ) <nl> + . add ( " sequence " , sequence ) <nl> . toString ( ) ; <nl> } <nl> <nl> public ResponseHandler [ ] toResponseHandlers ( ) { <nl> - return from ( seqs ) . transform ( toResponseHandler ( ) ) . toArray ( ResponseHandler . class ) ; <nl> + return from ( sequence ) . transform ( toResponseHandler ( ) ) . toArray ( ResponseHandler . class ) ; <nl> } <nl> <nl> private Function < ResponseSetting , ResponseHandler > toResponseHandler ( ) {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index c95b757 . . 3dbba6b 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> - import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> index 49c7472 . . e5a0fd5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import java . util . List ; <nl> public class SeqContainerDeserializer extends JsonDeserializer < SeqContainer > { <nl> <nl> @ Override <nl> - public SeqContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + public SeqContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> <nl> if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> @ @ - 25 , 7 + 25 , 7 @ @ public class SeqContainerDeserializer extends JsonDeserializer < SeqContainer > { <nl> return ( SeqContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> - private List < ResponseSetting > getSeqSettings ( JsonParser jp ) throws IOException { <nl> + private List < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> return jp . readValueAs ( reference ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> index d6e73c9 . . a681555 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ public class SeqContainer implements Container { <nl> . omitNullValues ( ) <nl> . add ( " sequence " , seqs ) <nl> . toString ( ) ; <nl> - <nl> } <nl> <nl> public ResponseHandler [ ] toResponseHandlers ( ) {
diff - - git a / build . gradle b / build . gradle <nl> index aa133f5 . . d171689 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 17 . Final ' <nl> + nettyVersion = ' 4 . 1 . 18 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 2 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / build . gradle b / build . gradle <nl> index dc1b687 . . aa133f5 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 78 , 7 + 78 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 9 . 2 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 12 . 0 ' <nl> + mockitoVersion = ' 2 . 13 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 4 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 27 - incubating '
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index fe63724 . . 531692f 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 6 , 6 + 6 , 7 @ @ <nl> * ` json ` API returns resource , so it can be used for both request and response . <nl> <nl> # # JSON APIs <nl> + * ` seq ` is supported finally <nl> * ` json ` in Post event <nl> <nl> # # Global Settings <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index ccee63c . . a5c88ac 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1566 , 13 + 1566 , 59 @ @ Sometimes , we want to simulate a real - world operation which change server side r <nl> We can do that by <nl> <nl> ` ` ` java <nl> - server . request ( by ( uri ( " / foo " ) ) ) . response ( seq ( " foo " , " bar " , " blah " ) ) ; <nl> + server . request ( by ( uri ( " / seq " ) ) ) . response ( seq ( " foo " , " bar " , " blah " ) ) ; <nl> ` ` ` <nl> <nl> The other response settings are able to be set as well . <nl> <nl> ` ` ` java <nl> - server . request ( by ( uri ( " / foo " ) ) ) . response ( seq ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; <nl> + server . request ( by ( uri ( " / seq " ) ) ) . response ( seq ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / seq " <nl> + } , <nl> + " response " : { <nl> + " seq " : [ <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + { <nl> + " text " : " bar " <nl> + } , <nl> + { <nl> + " text " : " blah " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The other response settings are able to be set for json as well . <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / seq " <nl> + } , <nl> + " response " : { <nl> + " seq " : [ <nl> + { <nl> + " status " : " 302 " <nl> + } , <nl> + { <nl> + " status " : " 302 " <nl> + } , <nl> + { <nl> + " status " : " 200 " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> ` ` ` <nl> <nl> # # # JSON Response
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 4d7a22f . . 73b3398 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 205 , 7 + 205 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < T > RequestMatcher exist ( final RequestExtractor < T > extractor ) { <nl> - return new ExistMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) ) ; <nl> + return new ExistMatcher < > ( checkNotNull ( extractor , " Extractor should not be null " ) ) ; <nl> } <nl> <nl> public static RequestMatcher startsWith ( final Resource resource ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 04ffe15 . . ed67262 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 16 , 17 + 16 , 19 @ @ import com . google . common . collect . Maps ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> - import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . var ; <nl> import static com . github . dreamhead . moco . Moco . version ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> import static com . github . dreamhead . moco . handler . AndResponseHandler . and ; <nl> + import static com . github . dreamhead . moco . parser . model . Seqs . toResponseHandlers ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . ImmutableSet . of ; <nl> @ @ - 105 , 6 + 107 , 11 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return attachment ( attachment . getFilename ( ) , resourceFrom ( attachment ) ) ; <nl> } <nl> <nl> + if ( " seq " . equalsIgnoreCase ( name ) ) { <nl> + List < ResponseSetting > sequence = ( List < ResponseSetting > ) value ; <nl> + return Moco . seq ( toResponseHandlers ( sequence ) ) ; <nl> + } <nl> + <nl> throw new IllegalArgumentException ( format ( " unknown field [ % s ] " , name ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 195e027 . . 658d8b8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> @ @ - 19 , 6 + 20 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> <nl> private TextContainer version ; <nl> private AttachmentSetting attachment ; <nl> + private List < ResponseSetting > seq ; <nl> <nl> public ResponseSetting asResponseSetting ( ) { <nl> ResponseSetting responseSetting = new ResponseSetting ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java <nl> new file mode 100644 <nl> index 0000000 . . 45f1c63 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import static com . google . common . collect . Lists . newArrayList ; <nl> + <nl> + public class Seqs { <nl> + public static ResponseHandler [ ] toResponseHandlers ( final List < ResponseSetting > settings ) { <nl> + List < ResponseHandler > handlers = newArrayList ( ) ; <nl> + for ( ResponseSetting setting : settings ) { <nl> + handlers . add ( setting . getResponseHandler ( ) ) ; <nl> + } <nl> + <nl> + return handlers . toArray ( new ResponseHandler [ 0 ] ) ; <nl> + } <nl> + <nl> + private Seqs ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java <nl> new file mode 100644 <nl> index 0000000 . . 703a7d8 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoSeqStandaloneTest extends AbstractMocoStandaloneTest { <nl> + @ Test <nl> + public void should _ work _ well ( ) throws IOException { <nl> + runWithConfiguration ( " seq . json " ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " bar " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / resources / seq . json b / moco - runner / src / test / resources / seq . json <nl> new file mode 100644 <nl> index 0000000 . . 21ecd6c <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / seq . json <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + [ <nl> + { <nl> + " description " : " any response " , <nl> + " response " : { <nl> + " seq " : [ <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + { <nl> + " text " : " bar " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file
diff - - git a / build . gradle b / build . gradle <nl> index 2cf1e25 . . dc1b687 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 12 . 0 ' <nl> - httpComponentVersion = ' 4 . 5 . 3 ' <nl> + httpComponentVersion = ' 4 . 5 . 4 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 27 - incubating ' <nl> }
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index d2c6ed4 . . fe63724 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 5 , 6 + 5 , 9 @ @ <nl> # # APIs <nl> * ` json ` API returns resource , so it can be used for both request and response . <nl> <nl> + # # JSON APIs <nl> + * ` json ` in Post event <nl> + <nl> # # Global Settings <nl> * Glob syntax is supported for include files in global setting <nl>
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 2deb3d0 . . ccee63c 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2121 , 6 + 2121 , 8 @ @ You may need to request another site when you receive a request , e . g . OAuth . Eve <nl> <nl> Complete event will be fired after your request has been handled completely . <nl> <nl> + # # # # Get Request <nl> + <nl> * Java <nl> <nl> ` ` ` java <nl> @ @ - 2147 , 6 + 2149 , 8 @ @ server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( " http : / / anot <nl> } <nl> ` ` ` <nl> <nl> + # # # # Post Request <nl> + <nl> You can post some content as well . <nl> <nl> * Java <nl> @ @ - 2176 , 6 + 2180 , 31 @ @ server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / ano <nl> } <nl> ` ` ` <nl> <nl> + * * @ Since will be at next release * * <nl> + <nl> + If your post content is JSON , you can use ` json ` in your configuration directly . <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / event " <nl> + } , <nl> + " response " : { <nl> + " text " : " event " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " post " : { <nl> + " url " : " http : / / another _ site " , <nl> + " json " : { <nl> + " foo " : " bar " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> Let me know if you need more methods . <nl> <nl> # # # Asynchronous
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index 9c3be29 . . d8aa333 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> if ( matcher . isPresent ( ) ) { <nl> return matcher . get ( ) ; <nl> } <nl> - <nl> + <nl> throw new IllegalArgumentException ( " unknown operation [ " + operation + " ] " ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index 360c5a9 . . 00c2410 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> @ @ - 10 , 9 + 11 , 18 @ @ import static com . github . dreamhead . moco . Moco . post ; <nl> public class PostSetting { <nl> private TextContainer url ; <nl> private TextContainer content ; <nl> + private Object json ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return post ( this . url . asResource ( ) , content . asResource ( ) ) ; <nl> + if ( content ! = null ) { <nl> + return post ( this . url . asResource ( ) , content . asResource ( ) ) ; <nl> + } <nl> + <nl> + if ( json ! = null ) { <nl> + return post ( this . url . asResource ( ) , Moco . json ( json ) ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " content or json should be setup for post " ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 21 , 6 + 31 , 7 @ @ public class PostSetting { <nl> . omitNullValues ( ) <nl> . add ( " url " , url ) <nl> . add ( " content " , content ) <nl> + . add ( " json " , json ) <nl> . toString ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 2a09d0e . . c237e59 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 89 , 4 + 89 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ fire _ event _ with _ post _ json ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / event - with - json - post " ) ) , is ( " post _ json _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XMOCOJSON " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index 7dcce9e . . 03e3874 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 130 , 11 + 130 , 42 @ @ <nl> } <nl> } , <nl> { <nl> + " request " : { <nl> + " uri " : " / event - with - json - post " <nl> + } , <nl> + " response " : { <nl> + " text " : " post _ json _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target - json " , <nl> + " json " : { <nl> + " foo " : " bar " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } , <nl> + { <nl> " request " : { <nl> " uri " : " / target " <nl> } , <nl> " response " : { <nl> " text " : " 0XCAFEBABE " <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / target - json " , <nl> + " json " : { <nl> + " foo " : " bar " <nl> + } <nl> + } , <nl> + " response " : { <nl> + " text " : " 0XMOCOJSON " <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index 2b25aef . . b1887c9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 98 , 18 + 98 , 24 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> try { <nl> Method operationMethod = Moco . class . getMethod ( operation , Resource . class ) ; <nl> Object result = operationMethod . invoke ( null , resource ) ; <nl> - if ( RequestMatcher . class . isInstance ( result ) ) { <nl> - return RequestMatcher . class . cast ( result ) ; <nl> - } else if ( ContentResource . class . isInstance ( result ) ) { <nl> - return by ( ContentResource . class . cast ( result ) ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " unknown operation [ " + operation + " ] " ) ; <nl> + return createRequestMatcher ( result , operation ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> <nl> + private RequestMatcher createRequestMatcher ( final Object result , final String operation ) { <nl> + if ( RequestMatcher . class . isInstance ( result ) ) { <nl> + return RequestMatcher . class . cast ( result ) ; <nl> + } <nl> + <nl> + if ( ContentResource . class . isInstance ( result ) ) { <nl> + return by ( ContentResource . class . cast ( result ) ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " unknown operation [ " + operation + " ] " ) ; <nl> + } <nl> + <nl> private RequestMatcher createCompositeMatcher ( final String name , final Map < String , Object > collection ) { <nl> ImmutableList < RequestMatcher > matchers = from ( collection . entrySet ( ) ) <nl> . transform ( toTargetMatcher ( getExtractorMethod ( name ) ) )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index b4f88e1 . . 2b25aef 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 96 , 7 + 96 , 6 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> <nl> private RequestMatcher createRequestMatcherWithResource ( final String operation , final Resource resource ) { <nl> try { <nl> - System . out . println ( resource . id ( ) ) ; <nl> Method operationMethod = Moco . class . getMethod ( operation , Resource . class ) ; <nl> Object result = operationMethod . invoke ( null , resource ) ; <nl> if ( RequestMatcher . class . isInstance ( result ) ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> index 6a1ddb7 . . 5f5ccaa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> <nl> @ @ - 60 , 6 + 61 , 15 @ @ public final class ResourceConfigApplierFactory { <nl> } ; <nl> } <nl> <nl> + public static ResourceConfigApplier jsonConfigApplier ( final Resource resource ) { <nl> + return new EmbeddedResourceConfigApplier ( resource ) { <nl> + @ Override <nl> + protected Resource newResource ( final MocoConfig config ) { <nl> + return jsonResource ( resource . apply ( config ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> private abstract static class BaseResourceConfigApplier implements ResourceConfigApplier { <nl> protected abstract Resource newResource ( final MocoConfig config ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 4bc7181 . . 1ae40b4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import static com . github . dreamhead . moco . resource . IdFactory . id ; <nl> import static com . github . dreamhead . moco . resource . ResourceConfigApplierFactory . DO _ NOTHING _ APPLIER ; <nl> import static com . github . dreamhead . moco . resource . ResourceConfigApplierFactory . cookieConfigApplier ; <nl> import static com . github . dreamhead . moco . resource . ResourceConfigApplierFactory . fileConfigApplier ; <nl> + import static com . github . dreamhead . moco . resource . ResourceConfigApplierFactory . jsonConfigApplier ; <nl> import static com . github . dreamhead . moco . resource . ResourceConfigApplierFactory . templateConfigApplier ; <nl> import static com . github . dreamhead . moco . resource . ResourceConfigApplierFactory . uriConfigApplier ; <nl> <nl> @ @ - 55 , 7 + 56 , 7 @ @ public final class ResourceFactory { <nl> } <nl> <nl> public static ContentResource jsonResource ( final Resource resource ) { <nl> - return contentResource ( id ( " json " ) , DO _ NOTHING _ APPLIER , resource . reader ( ContentResourceReader . class ) ) ; <nl> + return contentResource ( id ( " json " ) , jsonConfigApplier ( resource ) , resource . reader ( ContentResourceReader . class ) ) ; <nl> } <nl> <nl> public static ContentResource jsonResource ( final Object pojo ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 8262faf . . 78a2bab 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 342 , 7 + 342 , 7 @ @ public final class Moco { <nl> return new JsonRequestMatcher ( resource , ContentRequestExtractor . class . cast ( extractor ( " json " ) ) ) ; <nl> } <nl> <nl> - public static ContentResource toJson ( final Object pojo ) { <nl> + public static ContentResource json ( final Object pojo ) { <nl> return jsonResource ( checkNotNull ( pojo , " Json object should not be null " ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java <nl> index 73cdd22 . . 89b1cb7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java <nl> @ @ - 166 , 7 + 166 , 7 @ @ public final class RestRequestDispatcher { <nl> ImmutableList < Object > objects = settings <nl> . transform ( toJsonHandler ( ) ) <nl> . transform ( toPojo ( ) ) . toList ( ) ; <nl> - return of ( with ( Moco . toJson ( objects ) ) ) ; <nl> + return of ( with ( Moco . json ( objects ) ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 4f1f95d . . 07441ed 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> - import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> PlainA pojo = new PlainA ( ) ; <nl> pojo . code = 1 ; <nl> pojo . message = " message " ; <nl> - server . request ( by ( toJson ( pojo ) ) ) . response ( " foo " ) ; <nl> + server . request ( by ( Moco . json ( pojo ) ) ) . response ( " foo " ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> @ @ - 134 , 7 + 134 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> PlainA pojo = new PlainA ( ) ; <nl> pojo . code = 1 ; <nl> pojo . message = " message " ; <nl> - server . request ( by ( toJson ( pojo ) ) ) . response ( " foo " ) ; <nl> + server . request ( by ( Moco . json ( pojo ) ) ) . response ( " foo " ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> PlainA pojo = new PlainA ( ) ; <nl> pojo . code = 1 ; <nl> pojo . message = " message " ; <nl> - server . response ( toJson ( pojo ) ) ; <nl> + server . response ( Moco . json ( pojo ) ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 181 , 7 + 181 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> PlainA pojo = new PlainA ( ) ; <nl> pojo . code = 1 ; <nl> pojo . message = " 消 息 " ; <nl> - server . response ( toJson ( pojo ) ) ; <nl> + server . response ( Moco . json ( pojo ) ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 230 , 8 + 230 , 8 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> pojo . message = " message " ; <nl> <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( and ( by ( uri ( " / target " ) ) , by ( toJson ( pojo ) ) ) ) . response ( handler ) ; <nl> - server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , toJson ( pojo ) ) ) ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( Moco . json ( pojo ) ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , Moco . json ( pojo ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index df302d9 . . c6b9bcd 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . query ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> - import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> @ @ - 69 , 8 + 69 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( ) . response ( toJson ( ImmutableList . of ( resource1 , resource2 ) ) ) <nl> + get ( ) . response ( json ( ImmutableList . of ( resource1 , resource2 ) ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 122 , 8 + 122 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 161 , 8 + 161 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 195 , 8 + 195 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " 0XBABE " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> File file = folder . newFile ( ) ; <nl> @ @ - 225 , 8 + 225 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . request ( eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . request ( eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . request ( eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . request ( eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 262 , 7 + 262 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( ) . request ( eq ( query ( " foo " ) , " bar " ) ) . response ( toJson ( ImmutableList . of ( resource1 , resource2 ) ) ) <nl> + get ( ) . request ( eq ( query ( " foo " ) , " bar " ) ) . response ( json ( ImmutableList . of ( resource1 , resource2 ) ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 284 , 7 + 284 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource . message = " hello " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( anyId ( ) ) . response ( toJson ( resource ) ) <nl> + get ( anyId ( ) ) . response ( json ( resource ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 698 , 8 + 698 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> server . resource ( " targets " , <nl> id ( " 1 " ) . name ( " sub " ) . settings ( <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) <nl> ) ; <nl> <nl> @ @ - 729 , 8 + 729 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> server . resource ( " targets " , <nl> id ( anyId ( ) ) . name ( " sub " ) . settings ( <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) <nl> ) ; <nl> <nl> @ @ - 764 , 8 + 764 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> server . response ( " hello " ) ; <nl> @ @ - 799 , 8 + 799 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> final RequestHit hit = requestHit ( ) ; <nl> final RestServer server = restServer ( port ( ) , hit , log ( ) ) ; <nl> server . resource ( " targets " , <nl> - get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> - get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + get ( " 1 " ) . response ( json ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( json ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index 07c1906 . . 7c64038 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . exist ; <nl> import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . not ; <nl> - import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public class DynamicRequestMatcherFactory extends Dynamics implements RequestMatcherFactory { <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> <nl> private RequestMatcher createRequestMatcherFromValue ( final String name , final Object value ) { <nl> if ( " json " . equalsIgnoreCase ( name ) ) { <nl> - return by ( toJson ( value ) ) ; <nl> + return by ( Moco . json ( value ) ) ; <nl> } <nl> <nl> if ( Map . class . isInstance ( value ) ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index d30eb6c . . 04ffe15 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import static com . github . dreamhead . moco . Moco . attachment ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> - import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . var ; <nl> import static com . github . dreamhead . moco . Moco . version ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> <nl> private ResponseHandler createResponseHandler ( final String name , final Object value ) { <nl> if ( " json " . equalsIgnoreCase ( name ) ) { <nl> - return with ( toJson ( value ) ) ; <nl> + return with ( json ( value ) ) ; <nl> } <nl> <nl> if ( isResource ( name ) & & TextContainer . class . isInstance ( value ) ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java <nl> index 9e8baf8 . . 50009f0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / Resource . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . ConfigApplier ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> - import com . github . dreamhead . moco . resource . reader . JsonResourceReader ; <nl> import com . google . common . base . Optional ; <nl> <nl> public class Resource implements Identifiable , ConfigApplier < Resource > , ResourceReader {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java <nl> index b24ab37 . . 81a4322 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java <nl> @ @ - 39 , 9 + 39 , 9 @ @ public class ContentHandler extends AbstractContentResponseHandler { <nl> return handler ; <nl> } <nl> <nl> - Resource appliedReosurce = this . resource . apply ( config ) ; <nl> - if ( appliedReosurce ! = this . resource ) { <nl> - return new ContentHandler ( ( ContentResource ) appliedReosurce ) ; <nl> + Resource appliedResource = this . resource . apply ( config ) ; <nl> + if ( appliedResource ! = this . resource ) { <nl> + return new ContentHandler ( ( ContentResource ) appliedResource ) ; <nl> } <nl> <nl> return this ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 4631be2 . . 394297a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 63 , 7 + 63 , 6 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> - import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 188 , 15 + 187 , 7 @ @ public final class Moco { <nl> <nl> public static RequestMatcher by ( final Resource resource ) { <nl> checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return by ( extractor ( resource . id ( ) ) , resource ) ; <nl> - } <nl> - <nl> - private static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { <nl> - return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; <nl> - } <nl> - <nl> - return eq ( extractor , expected ) ; <nl> + return ApiUtils . by ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final String expected ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 37ecef9 . . 55f5810 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 5 , 10 + 5 , 13 @ @ import com . github . dreamhead . moco . MocoMonitor ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . extractor . ContentRequestExtractor ; <nl> import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; <nl> import com . github . dreamhead . moco . handler . failover . FailoverExecutor ; <nl> import com . github . dreamhead . moco . matcher . ContainMatcher ; <nl> import com . github . dreamhead . moco . matcher . EndsWithMatcher ; <nl> + import com . github . dreamhead . moco . matcher . EqRequestMatcher ; <nl> + import com . github . dreamhead . moco . matcher . JsonRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . MatchMatcher ; <nl> import com . github . dreamhead . moco . matcher . StartsWithMatcher ; <nl> import com . github . dreamhead . moco . monitor . CompositeMonitor ; <nl> @ @ - 82 , 19 + 85 , 27 @ @ public final class ApiUtils { <nl> } <nl> <nl> public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - return new MatchMatcher < T > ( extractor , expected ) ; <nl> + return new MatchMatcher < > ( extractor , expected ) ; <nl> } <nl> <nl> public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new StartsWithMatcher < T > ( extractor , resource ) ; <nl> + return new StartsWithMatcher < > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new EndsWithMatcher < T > ( extractor , resource ) ; <nl> + return new EndsWithMatcher < > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new ContainMatcher < T > ( extractor , resource ) ; <nl> + return new ContainMatcher < > ( extractor , resource ) ; <nl> + } <nl> + <nl> + public static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> + if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { <nl> + return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; <nl> + } <nl> + <nl> + return new EqRequestMatcher < > ( extractor , expected ) ; <nl> } <nl> <nl> private ApiUtils ( ) {
diff - - git a / build . gradle b / build . gradle <nl> index a198d1c . . 3ae3475 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 146 , 5 + 146 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 3 ' <nl> + gradleVersion = ' 4 . 3 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 92165ee . . 0e680f3 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 3 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 3 . 1 - bin . zip
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f3d665a . . 30160f6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ import static com . github . dreamhead . moco . internal . ApiUtils . textToResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . methodResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> @ @ - 349 , 6 + 350 , 10 @ @ public final class Moco { <nl> return new JsonResponseHandler ( checkNotNull ( pojo , " Json object should not be null " ) ) ; <nl> } <nl> <nl> + public static ContentResource toJsonResource ( final Object pojo ) { <nl> + return jsonResource ( checkNotNull ( pojo , " Json object should not be null " ) ) ; <nl> + } <nl> + <nl> public static JsonPathRequestExtractor jsonPath ( final String jsonPath ) { <nl> return new JsonPathRequestExtractor ( checkNotNullOrEmpty ( jsonPath , " JsonPath should not be null " ) ) ; <nl> } <nl> @ @ - 587 , 11 + 592 , 6 @ @ public final class Moco { <nl> return post ( checkNotNull ( url , " URL should not be null " ) , text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> - public static MocoEventAction post ( final String url , final Object object ) { <nl> - return post ( checkNotNullOrEmpty ( url , " URL should not be null " ) , <nl> - Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> - } <nl> - <nl> public static MocoEventAction post ( final Resource url , final Object object ) { <nl> return post ( checkNotNull ( url , " URL should not be null " ) , <nl> Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 0a43044 . . e97275e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . reader . ClasspathFileResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . ContentResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . FileResourceReader ; <nl> + import com . github . dreamhead . moco . resource . reader . JsonResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . TemplateResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . github . dreamhead . moco . util . Cookies ; <nl> @ @ - 53 , 6 + 54 , 11 @ @ public final class ResourceFactory { <nl> new ClasspathFileResourceReader ( filename , charset ) ) ; <nl> } <nl> <nl> + public static ContentResource jsonResource ( final Object pojo ) { <nl> + return contentResource ( id ( " json " ) , DO _ NOTHING _ APPLIER , <nl> + new JsonResourceReader ( pojo ) ) ; <nl> + } <nl> + <nl> public static Resource methodResource ( final String method ) { <nl> return resource ( id ( " method " ) , DO _ NOTHING _ APPLIER , new ResourceReader ( ) { <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java <nl> new file mode 100644 <nl> index 0000000 . . b245398 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . github . dreamhead . moco . resource . reader ; <nl> + <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . net . MediaType ; <nl> + <nl> + import static com . github . dreamhead . moco . util . Jsons . toJson ; <nl> + <nl> + public class JsonResourceReader implements ContentResourceReader { <nl> + private Object pojo ; <nl> + <nl> + public JsonResourceReader ( final Object pojo ) { <nl> + this . pojo = pojo ; <nl> + } <nl> + <nl> + @ Override <nl> + public MediaType getContentType ( HttpRequest request ) { <nl> + return MediaType . create ( " application " , " json " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public MessageContent readFor ( Optional < ? extends Request > request ) { <nl> + return MessageContent . content ( ) . withContent ( toJson ( pojo ) ) . build ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 8fe86ab . . cb4b2a4 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . toJsonResource ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> @ @ - 217 , 7 + 218 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( and ( by ( uri ( " / target " ) ) , json ( pojo ) ) ) . response ( handler ) ; <nl> - server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pojo ) ) ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , toJsonResource ( pojo ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 9a8ed65 . . f3d665a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 587 , 6 + 587 , 16 @ @ public final class Moco { <nl> return post ( checkNotNull ( url , " URL should not be null " ) , text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> + public static MocoEventAction post ( final String url , final Object object ) { <nl> + return post ( checkNotNullOrEmpty ( url , " URL should not be null " ) , <nl> + Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> + } <nl> + <nl> + public static MocoEventAction post ( final Resource url , final Object object ) { <nl> + return post ( checkNotNull ( url , " URL should not be null " ) , <nl> + Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> + } <nl> + <nl> public static ResponseHandler attachment ( final String filename , final Resource resource ) { <nl> return AndResponseHandler . and ( <nl> header ( HttpHeaders . CONTENT _ DISPOSITION , format ( " attachment ; filename = % s " , checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) ) ) , <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index fcb5465 . . 8fe86ab 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . net . MediaType ; <nl> @ @ - 10 , 6 + 11 , 9 @ @ import org . junit . Test ; <nl> import java . io . IOException ; <nl> import java . nio . charset . Charset ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . complete ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . exist ; <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> @ @ - 17 , 13 + 21 , 18 @ @ import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> + import static org . mockito . Mockito . mock ; <nl> + import static org . mockito . Mockito . verify ; <nl> <nl> public class MocoJsonTest extends AbstractMocoHttpTest { <nl> @ Test <nl> @ @ - 200 , 6 + 209 , 26 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ json ( ) throws Exception { <nl> + PlainA pojo = new PlainA ( ) ; <nl> + pojo . code = 1 ; <nl> + pojo . message = " message " ; <nl> + <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , json ( pojo ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pojo ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( any ( SessionContext . class ) ) ; <nl> + } <nl> + <nl> private static class PlainA { <nl> public int code ; <nl> public String message ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 8a35963 . . 2345f5b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 13 , 8 + 13 , 8 @ @ import com . google . common . net . MediaType ; <nl> public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { <nl> private final HeaderDetector detector = new HeaderDetector ( ) ; <nl> <nl> - protected abstract MessageContent responseContent ( final Request request ) ; <nl> - protected abstract MediaType getContentType ( final HttpRequest request ) ; <nl> + protected abstract MessageContent responseContent ( Request request ) ; <nl> + protected abstract MediaType getContentType ( HttpRequest request ) ; <nl> <nl> @ Override <nl> public final void writeToResponse ( final SessionContext context ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> index b2b97ca . . c7ab894 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . Response ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> <nl> public abstract class AbstractHttpResponseHandler extends AbstractResponseHandler { <nl> - protected abstract void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) ; <nl> + protected abstract void doWriteToResponse ( HttpRequest httpRequest , MutableHttpResponse httpResponse ) ; <nl> <nl> @ Override <nl> public final void writeToResponse ( final SessionContext context ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 06c12a7 . . ea80fac 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> <nl> } <nl> <nl> - protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; <nl> + protected abstract Optional < String > doRemoteUrl ( HttpRequest request ) ; <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> index 4881fd7 . . 42b6042 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher { <nl> - protected abstract RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) ; <nl> + protected abstract RequestMatcher newMatcher ( RequestExtractor < T > extractor , Resource resource ) ; <nl> <nl> private final RequestExtractor < T > extractor ; <nl> private final Resource expected ; <nl> @ @ - 37 , 7 + 37 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher <nl> <nl> T target = extractContent . get ( ) ; <nl> if ( target instanceof String ) { <nl> - return predicate . apply ( ( String ) target ) ; <nl> + return predicate . apply ( ( String ) target ) ; <nl> } <nl> <nl> if ( target instanceof String [ ] ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> index 484eb2d . . 0794098 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> <nl> public abstract class AbstractRequestMatcher implements RequestMatcher { <nl> - public abstract RequestMatcher doApply ( final MocoConfig config ) ; <nl> + public abstract RequestMatcher doApply ( MocoConfig config ) ; <nl> <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 69cf5ed . . 422b11f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import static com . google . common . base . Optional . of ; <nl> <nl> public abstract class AbstractFileResourceReader implements ContentResourceReader { <nl> <nl> - protected abstract byte [ ] doReadFor ( final Optional < ? extends Request > request ) ; <nl> + protected abstract byte [ ] doReadFor ( Optional < ? extends Request > request ) ; <nl> <nl> private final Resource filename ; <nl> private final Optional < Charset > charset ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> index eb9f177 . . de557ed 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . util . Strings . strip ; <nl> <nl> - public class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { <nl> + public final class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { <nl> @ Override <nl> public CookieContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index 726e2e2 . . 6f9b915 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContaine <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; <nl> import static com . github . dreamhead . moco . util . Strings . strip ; <nl> <nl> - public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> + public final class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> index c3cc5e1 . . 046a2bf 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import com . github . dreamhead . moco . parser . model . LatencyContainer ; <nl> import java . io . IOException ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContainer > { <nl> + public final class LatencyContainerDeserializer extends JsonDeserializer < LatencyContainer > { <nl> @ Override <nl> public LatencyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> index 688e4a7 . . 63e698d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . io . IOException ; <nl> import static com . github . dreamhead . moco . parser . model . ProxyContainer . builder ; <nl> import static com . github . dreamhead . moco . util . Strings . strip ; <nl> <nl> - public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> + public final class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> @ Override <nl> public ProxyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index 3651e33 . . a3716ec 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> import java . io . IOException ; <nl> <nl> - public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> + public final class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index aa4e573 . . a8019b0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ import static com . github . dreamhead . moco . util . Strings . strip ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> - public class TextContainerDeserializerHelper { <nl> + public final class TextContainerDeserializerHelper { <nl> private static final ImmutableMap < String , String > NAMES = ImmutableMap . < String , String > builder ( ) <nl> . put ( " json _ path " , " jsonPaths " ) <nl> . put ( " xpath " , " xpaths " )
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 928307f . . 3761df4 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 72 , 7 + 72 , 6 @ @ task proguardCheck ( type : Test , dependsOn : proguard ) { <nl> } <nl> <nl> signArchives . dependsOn proguardCheck <nl> - uploadArchives . dependsOn proguardCheck <nl> <nl> artifacts { <nl> archives proguard . outputs . files . singleFile
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 6352012 . . 928307f 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 71 , 8 + 71 , 8 @ @ task proguardCheck ( type : Test , dependsOn : proguard ) { <nl> classpath = classpath - files ( sourceSets . main . output . classesDirs ) - configurations . runtime + files ( proguard . outputs . files . singleFile ) + findJar ( ' netty - codec - http ' ) <nl> } <nl> <nl> - signArchives . dependsOn proguard , proguardCheck <nl> - uploadArchives . dependsOn proguard , proguardCheck <nl> + signArchives . dependsOn proguardCheck <nl> + uploadArchives . dependsOn proguardCheck <nl> <nl> artifacts { <nl> archives proguard . outputs . files . singleFile
diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index 8882265 . . 7761a47 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 54 , 7 + 54 , 8 @ @ java - jar moco - runner - < version > - standalone . jar start - p 12306 - g settings . json <nl> <nl> Feel free to open your browser to try . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ Configuration ] ( # configuration ) <nl> * [ Context ] ( # context ) <nl> diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 1eb5b55 . . ae60651 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 2 , 7 + 2 , 8 @ @ <nl> <nl> Moco makes use of Test Rule in JUnit to simplify JUnit integration . * * MocoJunitRunner * * provides several ways to run Moco server as Test Rule , which can start Moco server before your test and stop after the test . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ HTTP Server ] ( # http - server ) <nl> * [ POJO HTTP Server ] ( # pojo - http - server ) <nl> diff - - git a / moco - doc / socket - apis . md b / moco - doc / socket - apis . md <nl> index 249020e . . 9765801 100644 <nl> - - - a / moco - doc / socket - apis . md <nl> + + + b / moco - doc / socket - apis . md <nl> @ @ - 5 , 7 + 5 , 8 @ @ That means if we get the expected request and then return our response . Now , you <nl> <nl> * * WARNING * * the json configuration below is just a snippet for one pair of request and response , instead of the whole configuration file . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ Composite Java API Design ] ( # composite - java - api - design ) <nl> * [ Description as comment ] ( # description - as - comment ) <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index e2dc943 . . de0620b 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 4 , 7 + 4 , 8 @ @ You have several ways to use Moco . One is API , which you can use in your unit te <nl> <nl> On the other hand , Moco has several different ways to integrate with some tools : Maven plugin , Gradle plugin and shell support . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ API ] ( # api ) <nl> * [ dependency ] ( # dependency )
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 9ef2036 . . 06c12a7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 78 , 10 + 78 , 8 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> . build ( ) ; <nl> <nl> HostnameVerifier allowAllHosts = new NoopHostnameVerifier ( ) ; <nl> - <nl> SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory ( sslContext , allowAllHosts ) ; <nl> <nl> - <nl> client = HttpClients . custom ( ) <nl> . setConnectionManager ( connManager ) <nl> . setConnectionManagerShared ( true ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> index 5759355 . . b3f52e1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> @ @ - 8 , 16 + 8 , 4 @ @ public abstract class BaseResourceSetting { <nl> @ JsonProperty ( " path _ resource " ) <nl> protected FileContainer pathResource ; <nl> protected Object json ; <nl> - <nl> - public TextContainer getText ( ) { <nl> - return text ; <nl> - } <nl> - <nl> - public FileContainer getFile ( ) { <nl> - return file ; <nl> - } <nl> - <nl> - public FileContainer getPathResource ( ) { <nl> - return pathResource ; <nl> - } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 4b252ad . . e8c249b 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 75 , 7 + 75 , 6 @ @ subprojects { <nl> guavaVersion = ' 20 . 0 ' <nl> nettyVersion = ' 4 . 1 . 16 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> - commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 9 . 2 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> @ @ - 103 , 7 + 102 , 6 @ @ subprojects { <nl> " com . google . guava : guava : $ guavaVersion " , <nl> " io . netty : netty - codec - http : $ nettyVersion " , <nl> " io . netty : netty - handler : $ nettyVersion " , <nl> - " commons - io : commons - io : $ commonsIoVersion " , <nl> " com . fasterxml . jackson . core : jackson - databind : $ jacksonVersion " , <nl> " org . apache . httpcomponents : httpclient : $ httpComponentVersion " , <nl> " com . jayway . jsonpath : json - path : $ jsonpathVersion " ,
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index e63f51a . . 7369426 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 31 , 15 + 31 , 27 @ @ import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpPut ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> import org . apache . http . client . methods . HttpTrace ; <nl> + import org . apache . http . conn . ssl . NoopHostnameVerifier ; <nl> + import org . apache . http . conn . ssl . SSLConnectionSocketFactory ; <nl> + import org . apache . http . conn . ssl . TrustSelfSignedStrategy ; <nl> import org . apache . http . entity . InputStreamEntity ; <nl> import org . apache . http . impl . client . CloseableHttpClient ; <nl> import org . apache . http . impl . client . HttpClients ; <nl> import org . apache . http . impl . conn . PoolingHttpClientConnectionManager ; <nl> + import org . apache . http . ssl . SSLContextBuilder ; <nl> + import org . apache . http . ssl . TrustStrategy ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import javax . net . ssl . HostnameVerifier ; <nl> + import javax . net . ssl . SSLContext ; <nl> import java . io . IOException ; <nl> import java . net . URL ; <nl> + import java . security . KeyManagementException ; <nl> + import java . security . KeyStoreException ; <nl> + import java . security . NoSuchAlgorithmException ; <nl> + import java . security . cert . CertificateException ; <nl> + import java . security . cert . X509Certificate ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . DefaultHttpResponse . newResponse ; <nl> @ @ - 60 , 11 + 72 , 28 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> private static CloseableHttpClient client ; <nl> <nl> static { <nl> - PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager ( ) ; <nl> - client = HttpClients . custom ( ) <nl> - . setConnectionManager ( connManager ) <nl> - . setConnectionManagerShared ( true ) <nl> - . build ( ) ; <nl> + / / Try to ignore SSL certification <nl> + / / https : / / memorynotfound . com / ignore - certificate - errors - apache - httpclient / <nl> + try { <nl> + PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager ( ) ; <nl> + SSLContext sslContext = SSLContextBuilder . create ( ) <nl> + . loadTrustMaterial ( new TrustSelfSignedStrategy ( ) ) <nl> + . build ( ) ; <nl> + <nl> + HostnameVerifier allowAllHosts = new NoopHostnameVerifier ( ) ; <nl> + <nl> + SSLConnectionSocketFactory connectionFactory = new SSLConnectionSocketFactory ( sslContext , allowAllHosts ) ; <nl> + <nl> + <nl> + client = HttpClients . custom ( ) <nl> + . setConnectionManager ( connManager ) <nl> + . setConnectionManagerShared ( true ) <nl> + . setSSLSocketFactory ( connectionFactory ) <nl> + . build ( ) ; <nl> + } catch ( NoSuchAlgorithmException | KeyManagementException | KeyStoreException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + <nl> } <nl> <nl> protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> index a8783fa . . d962dad 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> @ @ - 1 , 10 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . bootstrap ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> - import com . github . dreamhead . moco . bootstrap . tasks . HttpTask ; <nl> - import com . github . dreamhead . moco . bootstrap . tasks . HttpsTask ; <nl> import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; <nl> - import com . github . dreamhead . moco . bootstrap . tasks . SocketTask ; <nl> + import com . github . dreamhead . moco . bootstrap . tasks . StartTask ; <nl> import com . github . dreamhead . moco . bootstrap . tasks . VersionTask ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import org . slf4j . Logger ; <nl> @ @ - 15 , 11 + 13 , 11 @ @ public class Bootstrap implements BootstrapTask { <nl> private static final String DEFAULT _ SHUTDOWN _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; <nl> <nl> private final ImmutableMap < String , BootstrapTask > tasks = ImmutableMap . < String , BootstrapTask > builder ( ) <nl> - . put ( " start " , new HttpTask ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> + . put ( " start " , StartTask . http ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> . put ( " shutdown " , new ShutdownTask ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> - . put ( " http " , new HttpTask ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> - . put ( " https " , new HttpsTask ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> - . put ( " socket " , new SocketTask ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> + . put ( " http " , StartTask . http ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> + . put ( " https " , StartTask . https ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> + . put ( " socket " , StartTask . socket ( DEFAULT _ SHUTDOWN _ KEY ) ) <nl> . put ( " version " , new VersionTask ( ) ) <nl> . build ( ) ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / HttpTask . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / HttpTask . java <nl> deleted file mode 100644 <nl> index e6a5998 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / HttpTask . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . bootstrap . tasks ; <nl> - <nl> - import com . github . dreamhead . moco . bootstrap . parser . HttpArgsParser ; <nl> - <nl> - public final class HttpTask extends StartTask { <nl> - public HttpTask ( final String shutdownKey ) { <nl> - super ( shutdownKey , new HttpArgsParser ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / HttpsTask . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / HttpsTask . java <nl> deleted file mode 100644 <nl> index 95922e3 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / HttpsTask . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . bootstrap . tasks ; <nl> - <nl> - import com . github . dreamhead . moco . bootstrap . parser . HttpsArgsParser ; <nl> - <nl> - public final class HttpsTask extends StartTask { <nl> - public HttpsTask ( final String shutdownKey ) { <nl> - super ( shutdownKey , new HttpsArgsParser ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / SocketTask . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / SocketTask . java <nl> deleted file mode 100644 <nl> index b323205 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / SocketTask . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . bootstrap . tasks ; <nl> - <nl> - import com . github . dreamhead . moco . bootstrap . parser . SocketArgsParser ; <nl> - <nl> - public final class SocketTask extends StartTask { <nl> - public SocketTask ( final String shutdownKey ) { <nl> - super ( shutdownKey , new SocketArgsParser ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / StartTask . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / StartTask . java <nl> index 9d210ab . . 653b543 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / StartTask . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / tasks / StartTask . java <nl> @ @ - 2 , 6 + 2 , 9 @ @ package com . github . dreamhead . moco . bootstrap . tasks ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . BootstrapTask ; <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> + import com . github . dreamhead . moco . bootstrap . parser . HttpArgsParser ; <nl> + import com . github . dreamhead . moco . bootstrap . parser . HttpsArgsParser ; <nl> + import com . github . dreamhead . moco . bootstrap . parser . SocketArgsParser ; <nl> import com . github . dreamhead . moco . bootstrap . parser . StartArgsParser ; <nl> import com . github . dreamhead . moco . runner . Runner ; <nl> import com . github . dreamhead . moco . runner . RunnerFactory ; <nl> @ @ - 9 , 12 + 12 , 12 @ @ import com . google . common . base . Stopwatch ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public abstract class StartTask implements BootstrapTask { <nl> + public final class StartTask implements BootstrapTask { <nl> private Logger logger = LoggerFactory . getLogger ( StartTask . class ) ; <nl> private final StartArgsParser startArgsParser ; <nl> private final RunnerFactory factory ; <nl> <nl> - protected StartTask ( final String shutdownKey , final StartArgsParser startArgsParser ) { <nl> + private StartTask ( final String shutdownKey , final StartArgsParser startArgsParser ) { <nl> this . startArgsParser = startArgsParser ; <nl> this . factory = new RunnerFactory ( shutdownKey ) ; <nl> } <nl> @ @ - 40 , 4 + 43 , 16 @ @ public abstract class StartTask implements BootstrapTask { <nl> StartArgs startArgs = startArgsParser . parse ( args ) ; <nl> return factory . createRunner ( startArgs ) ; <nl> } <nl> + <nl> + public static BootstrapTask http ( final String shutdownKey ) { <nl> + return new StartTask ( shutdownKey , new HttpArgsParser ( ) ) ; <nl> + } <nl> + <nl> + public static BootstrapTask https ( final String shutdownKey ) { <nl> + return new StartTask ( shutdownKey , new HttpsArgsParser ( ) ) ; <nl> + } <nl> + <nl> + public static BootstrapTask socket ( final String shutdownKey ) { <nl> + return new StartTask ( shutdownKey , new SocketArgsParser ( ) ) ; <nl> + } <nl> }
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index dc4b61d . . 2bd26d3 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + # Release <nl> + <nl> + * Upgrade minimal Java version to Java 7 <nl> + <nl> + # # Global Settings <nl> + * Glob syntax is supported for include files in global setting <nl> + <nl> + # # CLI <nl> + * Glob syntax is supported for CLI ' - c ' argument <nl> + <nl> # Release 0 . 11 . 1 ( 12 - Jun - 2017 ) <nl> <nl> # # APIs
diff - - git a / build . gradle b / build . gradle <nl> index d39936b . . e1b5a99 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 16 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 9 . 1 ' <nl> + jacksonVersion = ' 2 . 9 . 2 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 10 . 0 '
diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index e089541 . . 410d855 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 77 , 6 + 77 , 8 @ @ But you need to make sure the configuration that don ' t conflict . <nl> java - jar moco - runner - < version > - standalone . jar http - p 12306 - c " * . json " <nl> ` ` ` <nl> <nl> + Note : the quotation mark is required otherwise * . json will be parsed by your shell . <nl> + <nl> # # Port <nl> <nl> # # # Specific Port
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> index e80db35 . . d5595a2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 88 , 7 + 88 , 7 @ @ public final class Globs { <nl> <nl> private static final String globMetaChars = " \ \ * ? [ { " ; <nl> <nl> - private static boolean isGlobMeta ( char c ) { <nl> + private static boolean isGlobMeta ( final char c ) { <nl> return globMetaChars . indexOf ( c ) ! = - 1 ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> index 7c1c6cc . . 93842bd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ public final class Globs { <nl> <nl> private static Path searchPath ( final Path path , final int globIndex ) { <nl> Path root = path . getRoot ( ) ; <nl> - Path subpath = path . subpath ( 0 , globIndex ) ; <nl> + Path subpath = getSubpath ( path , globIndex ) ; <nl> if ( root = = null ) { <nl> return subpath ; <nl> } <nl> @ @ - 37 , 8 + 37 , 16 @ @ public final class Globs { <nl> return Paths . get ( root . toString ( ) , subpath . toString ( ) ) ; <nl> } <nl> <nl> + private static Path getSubpath ( Path path , int globIndex ) { <nl> + if ( globIndex = = 0 ) { <nl> + return Paths . get ( " . " ) . toAbsolutePath ( ) ; <nl> + } <nl> + return path . subpath ( 0 , globIndex ) ; <nl> + } <nl> + <nl> private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { <nl> - final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + path ) ; <nl> + Path globPath = getGlobPath ( path , searchPath ) ; <nl> + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + globPath ) ; <nl> <nl> try { <nl> final ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; <nl> @ @ - 58 , 6 + 66 , 13 @ @ public final class Globs { <nl> } <nl> } <nl> <nl> + private static Path getGlobPath ( final Path path , final Path searchPath ) { <nl> + if ( path . getNameCount ( ) = = 1 ) { <nl> + return searchPath . resolve ( path ) ; <nl> + } <nl> + return path ; <nl> + } <nl> + <nl> private static int getGlobIndex ( final Path path ) { <nl> int nameCount = path . getNameCount ( ) ; <nl> for ( int i = 0 ; i < nameCount ; i + + ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> index cd14a52 . . 167ab75 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> @ @ - 49 , 4 + 49 , 10 @ @ public class GlobsTest { <nl> public void should _ throw _ exception _ for _ unknown _ root ( ) { <nl> Globs . glob ( " unknown / src / test / resources / details / * . json " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ glob _ files ( ) { <nl> + ImmutableList < String > glob = Globs . glob ( " * . json " ) ; <nl> + assertThat ( glob . isEmpty ( ) , is ( true ) ) ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 46e5ca9 . . 623acb5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import java . io . File ; <nl> <nl> @ @ - 46 , 7 + 47 , 8 @ @ public final class RunnerFactory { <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; <nl> - Iterable < File > files = from ( glob ( pathname ) ) . transform ( filenameToFile ( ) ) ; <nl> + ImmutableList < String > glob = glob ( pathname ) ; <nl> + Iterable < File > files = from ( glob ) . transform ( filenameToFile ( ) ) ; <nl> final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; <nl> Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; <nl> return new WatcherRunner ( fileRunner , watcher ) ;
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index fa48f7c . . 493c090 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 22 , 6 + 22 , 23 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> public TemporaryFolder tempFolder = new TemporaryFolder ( ) ; <nl> <nl> @ Test <nl> + public void should _ load _ configuration ( ) throws IOException , InterruptedException { <nl> + final File config = tempFolder . newFile ( " config . json " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foo \ " " <nl> + + " } } ] " ) ; <nl> + <nl> + RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( 9090 ) <nl> + . withConfigurationFile ( config . getAbsolutePath ( ) ) <nl> + . build ( ) ) ; <nl> + runner . run ( ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ reload _ configuration ( ) throws IOException , InterruptedException { <nl> final File config = tempFolder . newFile ( " config . json " ) ; <nl> changeFileContent ( config , " [ { \ " response \ " : { "
diff - - git a / build . gradle b / build . gradle <nl> index 7b6a5d4 . . d39936b 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 2 ' <nl> + gradleVersion = ' 4 . 2 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 52dd1f0 . . 74bb778 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 2 , 4 + 2 , 4 @ @ distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 2 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 2 . 1 - bin . zip
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index d9e84c1 . . bbacd57 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 4 , 12 + 4 , 14 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> + import com . github . dreamhead . moco . util . Globs ; <nl> + import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> <nl> import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> - import static com . google . common . collect . ImmutableList . of ; <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public final class RunnerFactory { <nl> private final WatcherFactory factory = new WatcherFactory ( ) ; <nl> @ @ - 43 , 9 + 45 , 19 @ @ public final class RunnerFactory { <nl> } <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> - final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; <nl> - final FileRunner fileRunner = createConfigurationFileRunner ( of ( configuration ) , startArgs ) ; <nl> - Watcher watcher = factory . createConfigurationWatcher ( of ( configuration ) , fileRunner ) ; <nl> + String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; <nl> + Iterable < File > files = from ( Globs . glob ( pathname ) ) . transform ( toFile ( ) ) ; <nl> + final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; <nl> + Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; <nl> return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> + <nl> + private Function < String , File > toFile ( ) { <nl> + return new Function < String , File > ( ) { <nl> + @ Override <nl> + public File apply ( final String input ) { <nl> + return new File ( input ) ; <nl> + } <nl> + } ; <nl> + } <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> index 57be5d5 . . cd14a52 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . google . common . collect . ImmutableList ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 43 , 4 + 44 , 9 @ @ public class GlobsTest { <nl> ImmutableList < String > files = Globs . glob ( glob ) ; <nl> assertThat ( files . contains ( file . getAbsolutePath ( ) ) , is ( true ) ) ; <nl> } <nl> + <nl> + @ Test ( expected = MocoException . class ) <nl> + public void should _ throw _ exception _ for _ unknown _ root ( ) { <nl> + Globs . glob ( " unknown / src / test / resources / details / * . json " ) ; <nl> + } <nl> } <nl> \ No newline at end of file
diff - - git a / build . gradle b / build . gradle <nl> index fc2c00f . . 7b6a5d4 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 15 . Final ' <nl> + nettyVersion = ' 4 . 1 . 16 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 9 . 1 ' <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> index 760e214 . . 405c392 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> <nl> - public final class WatcherRunner implements Runner { <nl> + public class WatcherRunner implements Runner { <nl> private final Runner runner ; <nl> private final Watcher watcher ; <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index ef636c0 . . 3db3392 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import java . io . File ; <nl> import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> <nl> - public class RunnerFactory { <nl> + public final class RunnerFactory { <nl> private final WatcherFactory factory = new WatcherFactory ( ) ; <nl> private final String shutdownKey ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 2560c5e . . 066acd5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ import static com . github . dreamhead . moco . runner . JsonRunner . newJsonRunnerWithSetti <nl> import static com . github . dreamhead . moco . runner . RunnerSetting . aRunnerSetting ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class SettingRunner implements Runner { <nl> + public final class SettingRunner implements Runner { <nl> private final GlobalSettingParser parser = new GlobalSettingParser ( ) ; <nl> private final ImmutableList < GlobalSetting > globalSettings ; <nl> private final Optional < String > env ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> index b3e21e2 . . fd79d67 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . SocketServer ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public class StandaloneRunner { <nl> + public final class StandaloneRunner { <nl> private static Logger logger = LoggerFactory . getLogger ( StandaloneRunner . class ) ; <nl> <nl> private Runner runner ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> index 405c392 . . 760e214 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> <nl> - public class WatcherRunner implements Runner { <nl> + public final class WatcherRunner implements Runner { <nl> private final Runner runner ; <nl> private final Watcher watcher ; <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> index 9f8641e . . 8f8d2e9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - public class CompositeWatcher implements Watcher { <nl> + public final class CompositeWatcher implements Watcher { <nl> private final Iterable < Watcher > watchers ; <nl> <nl> public CompositeWatcher ( final Iterable < Watcher > watchers ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> index eacad5c . . dc61621 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> <nl> - public class DefaultWatcher implements Watcher { <nl> + public final class DefaultWatcher implements Watcher { <nl> private final WatcherService service ; <nl> private final Function < File , Void > listener ; <nl> private final File file ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> index 0c7865d . . 09723e0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class DefaultWatcherFactory implements FileWatcherFactory { <nl> + public final class DefaultWatcherFactory implements FileWatcherFactory { <nl> private WatcherService service = new WatcherService ( ) ; <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> index 858aac1 . . d05f1df 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ import java . util . concurrent . Executors ; <nl> import static com . google . common . io . CharSource . wrap ; <nl> import static io . netty . channel . ChannelHandler . Sharable ; <nl> <nl> - public class ShutdownMocoRunnerWatcher implements Watcher { <nl> + public final class ShutdownMocoRunnerWatcher implements Watcher { <nl> private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerWatcher . class ) ; <nl> private final MocoServer server = new MocoServer ( ) ; <nl> private final Optional < Integer > shutdownPort ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> index a9713c6 . . 776669f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> <nl> - public class WatcherFactory { <nl> + public final class WatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherFactory . class ) ; <nl> <nl> private FileWatcherFactory factory = new DefaultWatcherFactory ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 2c3147c . . 9a93205 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import static com . google . common . collect . Maps . newHashMap ; <nl> import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> <nl> - public class WatcherService { <nl> + public final class WatcherService { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; <nl> private static final long REGISTER _ INTERVAL = 1000 ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> index bee2d6e . . db1558f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - public class Watchers { <nl> + public final class Watchers { <nl> public static Watcher threadSafe ( final Watcher watcher ) { <nl> return new ThreadSafeWatcher ( watcher ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java <nl> index fb0a5d0 . . 03d4471 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> - public class ActualRestServer extends ActualHttpServer implements RestServer { <nl> + public final class ActualRestServer extends ActualHttpServer implements RestServer { <nl> public ActualRestServer ( final Optional < Integer > port , <nl> final Optional < HttpsCertificate > certificate , <nl> final MocoMonitor monitor , <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / CompositeRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / CompositeRestSetting . java <nl> index c945986 . . 2c5a0e9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / CompositeRestSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / CompositeRestSetting . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . RestIdMatcher ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public class CompositeRestSetting < T extends SimpleRestSetting > implements RestSetting { <nl> + public final class CompositeRestSetting < T extends SimpleRestSetting > implements RestSetting { <nl> private final Iterable < T > settings ; <nl> <nl> public CompositeRestSetting ( final Iterable < T > settings ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java <nl> index 255dee5 . . f6bc17e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> <nl> - public class RestAllSetting extends SimpleRestSetting { <nl> + public final class RestAllSetting extends SimpleRestSetting { <nl> public RestAllSetting ( final HttpMethod method , <nl> final Optional < RequestMatcher > matcher , <nl> final ResponseHandler handler ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> index 2b98aff . . cf0dfab 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import com . github . dreamhead . moco . handler . AbstractHttpResponseHandler ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public class RestHandler extends AbstractHttpResponseHandler { <nl> + public final class RestHandler extends AbstractHttpResponseHandler { <nl> private final RestRequestDispatcher dispatcher ; <nl> private final String name ; <nl> private final Iterable < RestSetting > settings ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java <nl> index 0b60b9e . . 1d5e59b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . RestIdMatcher ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public class RestSingleSetting extends SimpleRestSetting { <nl> + public final class RestSingleSetting extends SimpleRestSetting { <nl> private final RestIdMatcher id ; <nl> <nl> public RestSingleSetting ( final HttpMethod method , final RestIdMatcher id , <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SubResourceSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SubResourceSetting . java <nl> index 00d237c . . 380a8d0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SubResourceSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SubResourceSetting . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import com . google . common . base . Optional ; <nl> <nl> import static com . github . dreamhead . moco . util . URLs . join ; <nl> <nl> - public class SubResourceSetting implements RestSetting { <nl> + public final class SubResourceSetting implements RestSetting { <nl> private final RestIdMatcher id ; <nl> private final String name ; <nl> private final Iterable < RestSetting > settings ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> index 317cfdc . . 145f838 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import static com . github . dreamhead . moco . rest . RestIds . checkResourceName ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> - public class ActualSubResourceSettingBuilder implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { <nl> + public final class ActualSubResourceSettingBuilder implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { <nl> private final RestIdMatcher id ; <nl> private String name ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java <nl> index 1638edd . . d8ffe09 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoMonitor ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . Response ; <nl> <nl> - public class CompositeMonitor implements MocoMonitor { <nl> + public final class CompositeMonitor implements MocoMonitor { <nl> private final Iterable < MocoMonitor > monitors ; <nl> <nl> public CompositeMonitor ( final Iterable < MocoMonitor > monitors ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultLogFormatter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultLogFormatter . java <nl> index 8eb6294 . . 2ddbe73 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultLogFormatter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultLogFormatter . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ import java . io . StringWriter ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class DefaultLogFormatter implements LogFormatter { <nl> + public final class DefaultLogFormatter implements LogFormatter { <nl> private static final ImmutableMap < Class < ? extends Request > , Dumper < Request > > REQUEST _ DUMPERS = ImmutableMap . of ( <nl> HttpRequest . class , new HttpRequestDumper ( ) , <nl> SocketRequest . class , new SocketRequestDumper ( ) <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> index 1d3aa89 . . 54e3a19 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import java . util . List ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> - public class DefaultRequestHit extends AbstractMonitor implements RequestHit { <nl> + public final class DefaultRequestHit extends AbstractMonitor implements RequestHit { <nl> private List < Request > unexpectedRequests = newArrayList ( ) ; <nl> private List < Request > requests = newArrayList ( ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> index 3ccb26c . . b1d2392 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . google . common . io . Files ; <nl> import java . io . File ; <nl> import java . nio . charset . Charset ; <nl> <nl> - public class FileLogWriter implements LogWriter { <nl> + public final class FileLogWriter implements LogWriter { <nl> private final File file ; <nl> private Optional < Charset > charset ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogMonitor . java <nl> index 028b07e . . 2681af3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / LogMonitor . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco . monitor ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . Response ; <nl> <nl> - public class LogMonitor extends AbstractMonitor { <nl> + public final class LogMonitor extends AbstractMonitor { <nl> private final LogWriter writer ; <nl> private final LogFormatter formatter ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / QuietMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / QuietMonitor . java <nl> index 189f345 . . 9796294 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / QuietMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / QuietMonitor . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . monitor ; <nl> <nl> - public class QuietMonitor extends AbstractMonitor { <nl> + public final class QuietMonitor extends AbstractMonitor { <nl> @ Override <nl> public void onException ( final Throwable t ) { <nl> t . printStackTrace ( System . err ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / Slf4jMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / Slf4jMonitor . java <nl> index 670de41 . . f64ad0d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / Slf4jMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / Slf4jMonitor . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . dumper . Dumper ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public class Slf4jMonitor extends AbstractMonitor { <nl> + public final class Slf4jMonitor extends AbstractMonitor { <nl> private static Logger logger = LoggerFactory . getLogger ( Slf4jMonitor . class ) ; <nl> private final Dumper < Request > requestDumper ; <nl> private final Dumper < Response > responseDumper ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / StdLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / StdLogWriter . java <nl> index b8c0c4f . . a2e3a07 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / StdLogWriter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / StdLogWriter . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . monitor ; <nl> <nl> - public class StdLogWriter implements LogWriter { <nl> + public final class StdLogWriter implements LogWriter { <nl> @ Override <nl> public void write ( final String content ) { <nl> System . out . println ( content ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java <nl> index 1ed6e82 . . bebff6f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import java . util . concurrent . locks . ReentrantLock ; <nl> <nl> import static com . github . dreamhead . moco . util . Locks . withLock ; <nl> <nl> - public class ThreadSafeMonitor implements MocoMonitor { <nl> + public final class ThreadSafeMonitor implements MocoMonitor { <nl> private MocoMonitor monitor ; <nl> private Lock lock = new ReentrantLock ( ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoContextConfig . java b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoContextConfig . java <nl> index 607e5c6 . . 1945b7e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoContextConfig . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoContextConfig . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> <nl> import static com . github . dreamhead . moco . util . URLs . join ; <nl> <nl> - public class MocoContextConfig implements MocoConfig < String > { <nl> + public final class MocoContextConfig implements MocoConfig < String > { <nl> private final String context ; <nl> <nl> public MocoContextConfig ( final String context ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoFileRootConfig . java b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoFileRootConfig . java <nl> index 7b458ab . . 294853a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoFileRootConfig . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoFileRootConfig . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> <nl> import static com . github . dreamhead . moco . util . Files . join ; <nl> <nl> - public class MocoFileRootConfig implements MocoConfig < String > { <nl> + public final class MocoFileRootConfig implements MocoConfig < String > { <nl> private final String fileRoot ; <nl> <nl> public MocoFileRootConfig ( final String fileRoot ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoRequestConfig . java b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoRequestConfig . java <nl> index c707825 . . 6fead76 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoRequestConfig . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoRequestConfig . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . github . dreamhead . moco . RequestMatcher ; <nl> <nl> import static com . github . dreamhead . moco . Moco . and ; <nl> <nl> - public class MocoRequestConfig implements MocoConfig < RequestMatcher > { <nl> + public final class MocoRequestConfig implements MocoConfig < RequestMatcher > { <nl> private final RequestMatcher requestMatcher ; <nl> <nl> public MocoRequestConfig ( final RequestMatcher requestMatcher ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoResponseConfig . java b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoResponseConfig . java <nl> index 4dad890 . . 0a33df5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoResponseConfig . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / config / MocoResponseConfig . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> <nl> import static com . github . dreamhead . moco . handler . AndResponseHandler . and ; <nl> <nl> - public class MocoResponseConfig implements MocoConfig < ResponseHandler > { <nl> + public final class MocoResponseConfig implements MocoConfig < ResponseHandler > { <nl> private final ResponseHandler handler ; <nl> <nl> public MocoResponseConfig ( final ResponseHandler handler ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java <nl> index 395f20b . . 519e0b8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieAttribute . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . cookie ; <nl> <nl> import io . netty . handler . codec . http . cookie . Cookie ; <nl> <nl> - public class DomainCookieAttribute extends ActualCookieAttribute { <nl> + public final class DomainCookieAttribute extends ActualCookieAttribute { <nl> private final String domain ; <nl> <nl> public DomainCookieAttribute ( final String actualDomain ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / HttpOnlyAttribute . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / HttpOnlyAttribute . java <nl> index 2d93a72 . . 7dfe4fe 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / HttpOnlyAttribute . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / HttpOnlyAttribute . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . cookie ; <nl> <nl> import io . netty . handler . codec . http . cookie . Cookie ; <nl> <nl> - public class HttpOnlyAttribute extends ActualCookieAttribute { <nl> + public final class HttpOnlyAttribute extends ActualCookieAttribute { <nl> @ Override <nl> public final void visit ( final Cookie cookie ) { <nl> cookie . setHttpOnly ( true ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java <nl> index fe53868 . . e7d573e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieAttribute . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import io . netty . handler . codec . http . cookie . Cookie ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - public class MaxAgeCookieAttribute extends ActualCookieAttribute { <nl> + public final class MaxAgeCookieAttribute extends ActualCookieAttribute { <nl> private final long maxAge ; <nl> private final TimeUnit unit ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieAttribute . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieAttribute . java <nl> index 0cf2c22 . . 57b760d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieAttribute . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieAttribute . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . cookie ; <nl> <nl> import io . netty . handler . codec . http . cookie . Cookie ; <nl> <nl> - public class SecureCookieAttribute extends ActualCookieAttribute { <nl> + public final class SecureCookieAttribute extends ActualCookieAttribute { <nl> @ Override <nl> public final void visit ( final Cookie cookie ) { <nl> cookie . setSecure ( true ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtLeastVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtLeastVerification . java <nl> index 27fdbfc . . 4488050 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtLeastVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtLeastVerification . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . verification ; <nl> <nl> - public class AtLeastVerification extends UnaryTimesVerification { <nl> + public final class AtLeastVerification extends UnaryTimesVerification { <nl> public AtLeastVerification ( final int count ) { <nl> super ( count ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtMostVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtMostVerification . java <nl> index b534d8b . . 41e3d23 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtMostVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AtMostVerification . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . verification ; <nl> <nl> - public class AtMostVerification extends UnaryTimesVerification { <nl> + public final class AtMostVerification extends UnaryTimesVerification { <nl> <nl> public AtMostVerification ( final int count ) { <nl> super ( count ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java <nl> index 47ff154 . . d3e7400 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . verification ; <nl> <nl> import static java . lang . String . format ; <nl> <nl> - public class BetweenVerification extends AbstractTimesVerification { <nl> + public final class BetweenVerification extends AbstractTimesVerification { <nl> private final int min ; <nl> private final int max ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / TimesVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / TimesVerification . java <nl> index 9e06186 . . 6993054 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / TimesVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / TimesVerification . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . verification ; <nl> <nl> - public class TimesVerification extends UnaryTimesVerification { <nl> + public final class TimesVerification extends UnaryTimesVerification { <nl> public TimesVerification ( final int count ) { <nl> super ( count ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / RedirectDelegate . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / RedirectDelegate . java <nl> index 010ad38 . . 416ecaa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / RedirectDelegate . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / RedirectDelegate . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> - public class RedirectDelegate { <nl> + public final class RedirectDelegate { <nl> public HttpResponseSetting redirectTo ( final HttpResponseSetting setting , final String url ) { <nl> return this . redirectTo ( setting , text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> index 0717f1d . . 7c1c6cc 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import java . nio . file . attribute . BasicFileAttributes ; <nl> <nl> import static com . google . common . collect . ImmutableList . of ; <nl> <nl> - public class Globs { <nl> + public final class Globs { <nl> public static ImmutableList < String > glob ( final String glob ) { <nl> Path path = Paths . get ( glob ) ; <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 08a940e . . 13f52e9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> import static com . github . dreamhead . moco . runner . RunnerSetting . aRunnerSetting ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> - import static com . google . common . collect . ImmutableList . of ; <nl> import static com . google . common . collect . Iterables . toArray ; <nl> <nl> public final class JsonRunner implements Runner { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index cc5b781 . . 2560c5e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 59 , 10 + 59 , 9 @ @ public class SettingRunner implements Runner { <nl> return new Function < GlobalSetting , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( final GlobalSetting setting ) { <nl> - ImmutableList < InputStream > streams = from ( setting . includes ( ) ) . transform ( toStream ( ) ) . toList ( ) ; <nl> <nl> return aRunnerSetting ( ) <nl> - . addStreams ( streams ) <nl> + . addStreams ( from ( setting . includes ( ) ) . transform ( toStream ( ) ) . toList ( ) ) <nl> . withContext ( setting . getContext ( ) ) <nl> . withFileRoot ( setting . getFileRoot ( ) ) <nl> . withRequest ( setting . getRequest ( ) )
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index f974ddb . . 01cde8e 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1614 , 7 + 1614 , 7 @ @ server . mount ( dir , to ( " / uri " ) ) ; <nl> } <nl> ` ` ` <nl> <nl> - Wildcard is acceptable to filter specified files , e . g we can include by <nl> + Glob is acceptable to filter specified files , e . g we can include by <nl> <nl> * Java API <nl>
diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index f663ae4 . . 8882265 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 62 , 6 + 62 , 7 @ @ Feel free to open your browser to try . <nl> * [ Environment ] ( # environment ) <nl> * [ Request ] ( # request ) <nl> * [ Response ] ( # response ) <nl> + * [ Glob Inclusion ] ( # glob - inclusion ) <nl> <nl> # # Configuration <nl> <nl> @ @ - 192 , 3 + 193 , 17 @ @ In some cases , you may want to setup a global response for all response , for exa <nl> ` ` ` <nl> <nl> When you issue any request to server , it will return response with " foo " , " bar " header . <nl> + <nl> + # # # Glob Inclusion <nl> + <nl> + * * @ Since will be at the next release * * <nl> + <nl> + You may need include many files , glob can help you to do this . <nl> + <nl> + ` ` ` json <nl> + [ <nl> + { <nl> + " include " : " * . json " <nl> + } <nl> + ] <nl> + ` ` ` <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index a8a6533 . . 8792794 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 1 , 10 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . io . Resources ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . IOException ; <nl> import java . io . InputStream ; <nl> <nl> import static com . github . dreamhead . moco . util . Files . join ; <nl> @ @ - 74 , 6 + 77 , 10 @ @ public class GlobalSettingParserTest { <nl> } <nl> <nl> private InputStream getResourceAsStream ( final String filename ) { <nl> - return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> + try { <nl> + return Resources . getResource ( filename ) . openStream ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> index ecb81b8 . . 4320497 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 18 , 12 + 18 , 23 @ @ import static com . google . common . collect . ImmutableList . of ; <nl> public class Globs { <nl> public static ImmutableList < String > glob ( final String glob ) { <nl> Path path = Paths . get ( glob ) ; <nl> + <nl> int globIndex = getGlobIndex ( path ) ; <nl> if ( globIndex < 0 ) { <nl> return of ( glob ) ; <nl> } <nl> <nl> - return doGlob ( path , path . subpath ( 0 , globIndex ) ) ; <nl> + return doGlob ( path , searchPath ( path , globIndex ) ) ; <nl> + } <nl> + <nl> + private static Path searchPath ( final Path path , final int globIndex ) { <nl> + Path root = path . getRoot ( ) ; <nl> + Path subpath = path . subpath ( 0 , globIndex ) ; <nl> + if ( root = = null ) { <nl> + return subpath ; <nl> + } <nl> + <nl> + return Paths . get ( root . toString ( ) , subpath . toString ( ) ) ; <nl> } <nl> <nl> private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> index 1dda996 . . d914bbb 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> @ @ - 1 , 12 + 1 , 20 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> + import org . junit . Rule ; <nl> import org . junit . Test ; <nl> + import org . junit . rules . TemporaryFolder ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . * ; <nl> <nl> public class GlobsTest { <nl> + @ Rule <nl> + public TemporaryFolder folder = new TemporaryFolder ( ) ; <nl> + <nl> @ Test <nl> public void should _ glob _ relative _ files ( ) { <nl> ImmutableList < String > files = Globs . glob ( " src / test / resources / details / * . json " ) ; <nl> @ @ - 20 , 4 + 28 , 20 @ @ public class GlobsTest { <nl> assertThat ( files . contains ( " src / test / resources / details / foo . json " ) , is ( true ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ glob _ absolute _ files ( ) throws IOException { <nl> + File file = folder . newFile ( ) ; <nl> + String path = file . getAbsolutePath ( ) ; <nl> + ImmutableList < String > files = Globs . glob ( path ) ; <nl> + assertThat ( files . contains ( path ) , is ( true ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ glob _ absolute _ files _ with _ glob ( ) throws IOException { <nl> + File file = folder . newFile ( " glob . json " ) ; <nl> + String glob = Files . join ( folder . getRoot ( ) . getAbsolutePath ( ) , " * . json " ) ; <nl> + System . out . println ( glob ) ; <nl> + ImmutableList < String > files = Globs . glob ( glob ) ; <nl> + assertThat ( files . contains ( file . getAbsolutePath ( ) ) , is ( true ) ) ; <nl> + } <nl> } <nl> \ No newline at end of file
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> new file mode 100644 <nl> index 0000000 . . 5c344b9 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 0 , 0 + 1 , 73 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . FileVisitResult ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . PathMatcher ; <nl> + import java . nio . file . Paths ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . SimpleFileVisitor ; <nl> + import java . nio . file . attribute . BasicFileAttributes ; <nl> + <nl> + import static com . google . common . collect . ImmutableList . of ; <nl> + <nl> + public class Globs { <nl> + public static ImmutableList < String > glob ( final String glob ) { <nl> + Path path = Paths . get ( glob ) ; <nl> + int globIndex = getGlobIndex ( path ) ; <nl> + if ( globIndex < 0 ) { <nl> + return of ( glob ) ; <nl> + } <nl> + <nl> + return doGlob ( path , path . subpath ( 0 , globIndex ) ) ; <nl> + } <nl> + <nl> + private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { <nl> + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + path ) ; <nl> + <nl> + final ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; <nl> + try { <nl> + Files . walkFileTree ( searchPath , new SimpleFileVisitor < Path > ( ) { <nl> + @ Override <nl> + public FileVisitResult visitFile ( final Path file , final BasicFileAttributes attrs ) throws IOException { <nl> + if ( matcher . matches ( file ) ) { <nl> + builder . add ( file . toString ( ) ) ; <nl> + } <nl> + return FileVisitResult . CONTINUE ; <nl> + } <nl> + } ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + private static int getGlobIndex ( Path path ) { <nl> + int nameCount = path . getNameCount ( ) ; <nl> + for ( int i = 0 ; i < nameCount ; i + + ) { <nl> + String current = path . getName ( i ) . toString ( ) ; <nl> + int length = current . length ( ) ; <nl> + for ( int j = 0 ; j < length ; j + + ) { <nl> + if ( isGlobMeta ( current . charAt ( j ) ) ) { <nl> + return i ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return - 1 ; <nl> + } <nl> + <nl> + private static final String globMetaChars = " \ \ * ? [ { " ; <nl> + <nl> + private static boolean isGlobMeta ( char c ) { <nl> + return globMetaChars . indexOf ( c ) ! = - 1 ; <nl> + } <nl> + <nl> + private Globs ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 516af84 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class GlobsTest { <nl> + @ Test <nl> + public void should _ glob _ relative _ files ( ) { <nl> + ImmutableList < String > files = Globs . glob ( " src / test / resources / details / * . json " ) ; <nl> + assertThat ( files . contains ( " src / test / resources / details / foo . json " ) , is ( true ) ) ; <nl> + assertThat ( files . contains ( " src / test / resources / details / bar . json " ) , is ( true ) ) ; <nl> + } <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / moco - core / src / test / resources / details / bar . json b / moco - core / src / test / resources / details / bar . json <nl> new file mode 100644 <nl> index 0000000 . . 9ab1e10 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / details / bar . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / bar " <nl> + } , <nl> + " response " : { <nl> + " text " : " bar " <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / moco - core / src / test / resources / details / foo . json b / moco - core / src / test / resources / details / foo . json <nl> new file mode 100644 <nl> index 0000000 . . 85d861c <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / details / foo . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / foo " <nl> + } , <nl> + " response " : { <nl> + " text " : " foo " <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java <nl> index 5f98eed . . f5f1d39 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java <nl> @ @ - 27 , 8 + 27 , 8 @ @ public final class MocoMount { <nl> } ; <nl> } <nl> <nl> - public static MountPredicate exclude ( final String wildcard ) { <nl> - return not ( include ( checkNotNullOrEmpty ( wildcard , " Wildcard should not be null " ) ) ) ; <nl> + public static MountPredicate exclude ( final String glob ) { <nl> + return not ( include ( checkNotNullOrEmpty ( glob , " Glob should not be null " ) ) ) ; <nl> } <nl> <nl> private static MountPredicate not ( final MountPredicate predicate ) { <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMulipleConfigurationsTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMulipleConfigurationsTest . java <nl> index 941c171 . . edb1efb 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMulipleConfigurationsTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMulipleConfigurationsTest . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static org . junit . Assert . assertThat ; <nl> public class MocoMulipleConfigurationsTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ run _ with _ many _ configurations ( ) throws IOException { <nl> - runWithConfiguration ( " settings / foo . json " , " settings / bar . json " ) ; <nl> + runWithConfiguration ( " settings / details / foo . json " , " settings / details / bar . json " ) ; <nl> assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo " ) ) ; <nl> assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar " ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index 29268f0 . . 0aece8c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " details " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " details " , " bar . json " ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 34 , 9 + 34 , 9 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / context - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " details " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " details " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> } <nl> <nl> @ @ - 55 , 10 + 55 , 10 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / env - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " details " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getEnv ( ) , is ( " foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " details " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / resources / settings / bar . json b / moco - runner / src / test / resources / settings / bar . json <nl> deleted file mode 100644 <nl> index 9ab1e10 . . 0000000 <nl> - - - a / moco - runner / src / test / resources / settings / bar . json <nl> + + + / dev / null <nl> @ @ - 1 , 10 + 0 , 0 @ @ <nl> - [ <nl> - { <nl> - " request " : { <nl> - " uri " : " / bar " <nl> - } , <nl> - " response " : { <nl> - " text " : " bar " <nl> - } <nl> - } <nl> - ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / context - settings . json b / moco - runner / src / test / resources / settings / context - settings . json <nl> index 8a097a5 . . 63b2aa4 100644 <nl> - - - a / moco - runner / src / test / resources / settings / context - settings . json <nl> + + + b / moco - runner / src / test / resources / settings / context - settings . json <nl> @ @ - 1 , 10 + 1 , 10 @ @ <nl> [ <nl> { <nl> " context " : " / foo " , <nl> - " include " : " src / test / resources / settings / foo . json " <nl> + " include " : " src / test / resources / settings / details / foo . json " <nl> } , <nl> { <nl> " context " : " / bar " , <nl> - " include " : " src / test / resources / settings / bar . json " <nl> + " include " : " src / test / resources / settings / details / bar . json " <nl> } <nl> ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / details / bar . json b / moco - runner / src / test / resources / settings / details / bar . json <nl> new file mode 100644 <nl> index 0000000 . . 9ab1e10 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / settings / details / bar . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / bar " <nl> + } , <nl> + " response " : { <nl> + " text " : " bar " <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / details / foo . json b / moco - runner / src / test / resources / settings / details / foo . json <nl> new file mode 100644 <nl> index 0000000 . . 85d861c <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / settings / details / foo . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / foo " <nl> + } , <nl> + " response " : { <nl> + " text " : " foo " <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / env - settings . json b / moco - runner / src / test / resources / settings / env - settings . json <nl> index ffa4148 . . 934ed56 100644 <nl> - - - a / moco - runner / src / test / resources / settings / env - settings . json <nl> + + + b / moco - runner / src / test / resources / settings / env - settings . json <nl> @ @ - 2 , 11 + 2 , 11 @ @ <nl> { <nl> " context " : " / foo " , <nl> " env " : " foo " , <nl> - " include " : " src / test / resources / settings / foo . json " <nl> + " include " : " src / test / resources / settings / details / foo . json " <nl> } , <nl> { <nl> " context " : " / bar " , <nl> " env " : " bar " , <nl> - " include " : " src / test / resources / settings / bar . json " <nl> + " include " : " src / test / resources / settings / details / bar . json " <nl> } <nl> ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / foo . json b / moco - runner / src / test / resources / settings / foo . json <nl> deleted file mode 100644 <nl> index 85d861c . . 0000000 <nl> - - - a / moco - runner / src / test / resources / settings / foo . json <nl> + + + / dev / null <nl> @ @ - 1 , 10 + 0 , 0 @ @ <nl> - [ <nl> - { <nl> - " request " : { <nl> - " uri " : " / foo " <nl> - } , <nl> - " response " : { <nl> - " text " : " foo " <nl> - } <nl> - } <nl> - ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / request - settings . json b / moco - runner / src / test / resources / settings / request - settings . json <nl> index a56e975 . . 98374e8 100644 <nl> - - - a / moco - runner / src / test / resources / settings / request - settings . json <nl> + + + b / moco - runner / src / test / resources / settings / request - settings . json <nl> @ @ - 5 , 6 + 5 , 6 @ @ <nl> " foo " : " bar " <nl> } <nl> } , <nl> - " include " : " src / test / resources / settings / foo . json " <nl> + " include " : " src / test / resources / settings / details / foo . json " <nl> } <nl> ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / response - settings . json b / moco - runner / src / test / resources / settings / response - settings . json <nl> index 133df46 . . d71ec19 100644 <nl> - - - a / moco - runner / src / test / resources / settings / response - settings . json <nl> + + + b / moco - runner / src / test / resources / settings / response - settings . json <nl> @ @ - 5 , 6 + 5 , 6 @ @ <nl> " foo " : " bar " <nl> } <nl> } , <nl> - " include " : " src / test / resources / settings / foo . json " <nl> + " include " : " src / test / resources / settings / details / foo . json " <nl> } <nl> ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / settings / settings . json b / moco - runner / src / test / resources / settings / settings . json <nl> index dc9856a . . 6d89ccf 100644 <nl> - - - a / moco - runner / src / test / resources / settings / settings . json <nl> + + + b / moco - runner / src / test / resources / settings / settings . json <nl> @ @ - 1 , 8 + 1 , 8 @ @ <nl> [ <nl> { <nl> - " include " : " src / test / resources / settings / foo . json " <nl> + " include " : " src / test / resources / settings / details / foo . json " <nl> } , <nl> { <nl> - " include " : " src / test / resources / settings / bar . json " <nl> + " include " : " src / test / resources / settings / details / bar . json " <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java <nl> index ffd07a5 . . 983b51e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoMount . java <nl> @ @ - 3 , 9 + 3 , 12 @ @ package com . github . dreamhead . moco ; <nl> import com . github . dreamhead . moco . mount . MountPredicate ; <nl> import com . github . dreamhead . moco . mount . MountTo ; <nl> <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . PathMatcher ; <nl> + import java . nio . file . Paths ; <nl> + <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> - import static org . apache . commons . io . FilenameUtils . wildcardMatch ; <nl> <nl> public final class MocoMount { <nl> public static MountTo to ( final String target ) { <nl> @ @ - 14 , 10 + 17 , 12 @ @ public final class MocoMount { <nl> <nl> public static MountPredicate include ( final String wildcard ) { <nl> checkNotNullOrEmpty ( wildcard , " Wildcard should not be null " ) ; <nl> + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + wildcard ) ; <nl> + <nl> return new MountPredicate ( ) { <nl> @ Override <nl> public boolean apply ( final String filename ) { <nl> - return wildcardMatch ( filename , wildcard ) ; <nl> + return matcher . matches ( Paths . get ( filename ) ) ; <nl> } <nl> } ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> index 2154cb1 . . 1259d24 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> @ @ - 1 , 10 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> import com . google . common . base . MoreObjects ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import static com . github . dreamhead . moco . util . Files . join ; <nl> <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class GlobalSetting { <nl> private String include ; <nl> private String context ; <nl> @ @ - 14 , 8 + 17 , 8 @ @ public class GlobalSetting { <nl> private RequestSetting request ; <nl> private ResponseSetting response ; <nl> <nl> - public String getInclude ( ) { <nl> - return join ( fileRoot , include ) ; <nl> + public ImmutableList < String > includes ( ) { <nl> + return ImmutableList . of ( join ( fileRoot , include ) ) ; <nl> } <nl> <nl> public String getContext ( ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index 8a04f67 . . a500f75 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 81 , 6 + 81 , 11 @ @ public final class RunnerSetting { <nl> return this ; <nl> } <nl> <nl> + public Builder addStreams ( final ImmutableList < InputStream > streams ) { <nl> + this . streams . addAll ( streams ) ; <nl> + return this ; <nl> + } <nl> + <nl> public Builder withRequest ( final RequestSetting request ) { <nl> this . request = request ; <nl> return this ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 040ece0 . . cc5b781 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . parser . GlobalSettingParser ; <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> @ @ - 29 , 7 + 30 , 7 @ @ public class SettingRunner implements Runner { <nl> public SettingRunner ( final InputStream stream , final StartArgs args ) { <nl> this . env = args . getEnv ( ) ; <nl> this . globalSettings = parser . parse ( stream ) ; <nl> - this . files = from ( globalSettings ) . transform ( toFile ( ) ) ; <nl> + this . files = from ( globalSettings ) . transformAndConcat ( toFiles ( ) ) ; <nl> this . startArgs = args ; <nl> } <nl> <nl> @ @ - 58 , 16 + 59 , 27 @ @ public class SettingRunner implements Runner { <nl> return new Function < GlobalSetting , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( final GlobalSetting setting ) { <nl> + ImmutableList < InputStream > streams = from ( setting . includes ( ) ) . transform ( toStream ( ) ) . toList ( ) ; <nl> + <nl> + return aRunnerSetting ( ) <nl> + . addStreams ( streams ) <nl> + . withContext ( setting . getContext ( ) ) <nl> + . withFileRoot ( setting . getFileRoot ( ) ) <nl> + . withRequest ( setting . getRequest ( ) ) <nl> + . withResponse ( setting . getResponse ( ) ) <nl> + . build ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < String , InputStream > toStream ( ) { <nl> + return new Function < String , InputStream > ( ) { <nl> + @ Override <nl> + public InputStream apply ( final String input ) { <nl> try { <nl> - return aRunnerSetting ( ) <nl> - . addStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> - . withContext ( setting . getContext ( ) ) <nl> - . withFileRoot ( setting . getFileRoot ( ) ) <nl> - . withRequest ( setting . getRequest ( ) ) <nl> - . withResponse ( setting . getResponse ( ) ) <nl> - . build ( ) ; <nl> + return new FileInputStream ( input ) ; <nl> } catch ( FileNotFoundException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> + throw new MocoException ( e ) ; <nl> } <nl> } <nl> } ; <nl> @ @ - 77 , 11 + 89 , 21 @ @ public class SettingRunner implements Runner { <nl> runner . stop ( ) ; <nl> } <nl> <nl> - private Function < ? super GlobalSetting , File > toFile ( ) { <nl> - return new Function < GlobalSetting , File > ( ) { <nl> + private Function < ? super GlobalSetting , Iterable < ? extends File > > toFiles ( ) { <nl> + return new Function < GlobalSetting , Iterable < ? extends File > > ( ) { <nl> + @ Override <nl> + public Iterable < ? extends File > apply ( final GlobalSetting input ) { <nl> + return from ( input . includes ( ) ) . transform ( toFile ( ) ) ; <nl> + <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < String , File > toFile ( ) { <nl> + return new Function < String , File > ( ) { <nl> @ Override <nl> - public File apply ( final GlobalSetting input ) { <nl> - return new File ( input . getInclude ( ) ) ; <nl> + public File apply ( final String input ) { <nl> + return new File ( input ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index f9e092b . . 29268f0 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 34 , 9 + 34 , 9 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / context - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> } <nl> <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / fileroot - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " fileroot . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " fileroot . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / fileroot " ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources " ) ) ; <nl> } <nl> @ @ - 55 , 10 + 55 , 10 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / env - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getEnv ( ) , is ( " foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 6e96b1e . . 08a940e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 130 , 7 + 130 , 7 @ @ public final class JsonRunner implements Runner { <nl> return new Function < InputStream , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( final InputStream input ) { <nl> - return aRunnerSetting ( ) . withStream ( input ) . build ( ) ; <nl> + return aRunnerSetting ( ) . addStream ( input ) . build ( ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index a913233 . . 8a04f67 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 70 , 14 + 70 , 14 @ @ public final class RunnerSetting { <nl> } <nl> <nl> public static class Builder { <nl> - private InputStream stream ; <nl> + private ImmutableList . Builder < InputStream > streams = ImmutableList . builder ( ) ; <nl> private RequestSetting request ; <nl> private ResponseSetting response ; <nl> private String context ; <nl> private String fileRoot ; <nl> <nl> - public Builder withStream ( final InputStream stream ) { <nl> - this . stream = stream ; <nl> + public Builder addStream ( final InputStream stream ) { <nl> + this . streams . add ( stream ) ; <nl> return this ; <nl> } <nl> <nl> @ @ - 102 , 7 + 102 , 7 @ @ public final class RunnerSetting { <nl> } <nl> <nl> public RunnerSetting build ( ) { <nl> - return new RunnerSetting ( ImmutableList . of ( stream ) , context , fileRoot , request , response ) ; <nl> + return new RunnerSetting ( streams . build ( ) , context , fileRoot , request , response ) ; <nl> } <nl> <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 4e308fd . . 040ece0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class SettingRunner implements Runner { <nl> public RunnerSetting apply ( final GlobalSetting setting ) { <nl> try { <nl> return aRunnerSetting ( ) <nl> - . withStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> + . addStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> . withContext ( setting . getContext ( ) ) <nl> . withFileRoot ( setting . getFileRoot ( ) ) <nl> . withRequest ( setting . getRequest ( ) )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 025bd95 . . 6e96b1e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 58 , 7 + 58 , 7 @ @ public final class JsonRunner implements Runner { <nl> final StartArgs startArgs ) { <nl> SocketServer socketServer = ActualSocketServer . createLogServer ( startArgs . getPort ( ) ) ; <nl> for ( RunnerSetting setting : settings ) { <nl> - SocketServer parsedServer = socketParser . parseServer ( of ( setting . getStream ( ) ) , startArgs . getPort ( ) , <nl> + SocketServer parsedServer = socketParser . parseServer ( setting . getStreams ( ) , startArgs . getPort ( ) , <nl> toConfigs ( setting ) ) ; <nl> socketServer = mergeServer ( socketServer , parsedServer ) ; <nl> } <nl> @ @ - 83 , 7 + 83 , 7 @ @ public final class JsonRunner implements Runner { <nl> HttpServer targetServer = createHttpServer ( startArgs ) ; <nl> <nl> for ( RunnerSetting setting : settings ) { <nl> - HttpServer parsedServer = httpParser . parseServer ( of ( setting . getStream ( ) ) , <nl> + HttpServer parsedServer = httpParser . parseServer ( setting . getStreams ( ) , <nl> startArgs . getPort ( ) , toConfigs ( setting ) ) ; <nl> targetServer = mergeServer ( targetServer , parsedServer ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index 2dd43a0 . . 36e7d3a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . parser . model . RequestSetting ; <nl> import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import java . io . InputStream ; <nl> <nl> @ @ - 28 , 8 + 29 , 8 @ @ public final class RunnerSetting { <nl> this . fileRoot = fromNullable ( fileRoot ) ; <nl> } <nl> <nl> - public InputStream getStream ( ) { <nl> - return stream ; <nl> + public ImmutableList < InputStream > getStreams ( ) { <nl> + return ImmutableList . of ( stream ) ; <nl> } <nl> <nl> public Optional < MocoConfig > context ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 21964b0 . . 8e371e4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 7 , 6 + 7 , 8 @ @ import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> import com . fasterxml . jackson . databind . type . CollectionType ; <nl> import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableList ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 17 , 7 + 19 , 6 @ @ import java . io . InputStream ; <nl> import java . util . List ; <nl> <nl> import static com . google . common . collect . ImmutableList . of ; <nl> - import static com . google . common . io . Closeables . closeQuietly ; <nl> import static java . lang . String . format ; <nl> <nl> public final class Jsons { <nl> @ @ - 59 , 28 + 60 , 27 @ @ public final class Jsons { <nl> } <nl> <nl> public static < T > ImmutableList < T > toObjects ( final ImmutableList < InputStream > streams , final Class < T > elementClass ) { <nl> - try { <nl> - ImmutableList . Builder < T > builder = ImmutableList . builder ( ) ; <nl> - CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + final CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + return FluentIterable . from ( streams ) . transformAndConcat ( Jsons . < T > toObject ( type ) ) . toList ( ) ; <nl> + } <nl> <nl> - for ( InputStream stream : streams ) { <nl> - try { <nl> - builder . addAll ( mapper . < List < T > > readValue ( stream , type ) ) ; <nl> - } finally { <nl> - closeQuietly ( stream ) ; <nl> + private static < T > Function < InputStream , Iterable < T > > toObject ( final CollectionType type ) { <nl> + return new Function < InputStream , Iterable < T > > ( ) { <nl> + @ Override <nl> + public Iterable < T > apply ( final InputStream input ) { <nl> + try ( InputStream actual = input ) { <nl> + return mapper . readValue ( actual , type ) ; <nl> + } catch ( UnrecognizedPropertyException e ) { <nl> + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> + throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> + } catch ( JsonMappingException e ) { <nl> + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> + throw new MocoException ( e ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> } <nl> } <nl> - <nl> - return builder . build ( ) ; <nl> - } catch ( UnrecognizedPropertyException e ) { <nl> - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> - throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> - } catch ( JsonMappingException e ) { <nl> - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> - throw new MocoException ( e ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> + } ; <nl> } <nl> <nl> private Jsons ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> index f602341 . . fc0e4e2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> @ @ - 4 , 12 + 4 , 14 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> + import org . apache . http . entity . ByteArrayEntity ; <nl> import org . apache . http . entity . ContentType ; <nl> import org . apache . http . entity . InputStreamEntity ; <nl> <nl> @ @ - 32 , 7 + 34 , 7 @ @ public class MocoPostRequestAction extends MocoRequestAction { <nl> } <nl> <nl> private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> - return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) , getContentType ( ( HttpRequest ) request ) ) ; <nl> + return new ByteArrayEntity ( resource . readFor ( of ( request ) ) . getContent ( ) , getContentType ( ( HttpRequest ) request ) ) ; <nl> } <nl> <nl> private ContentType getContentType ( HttpRequest request ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index 52d78c7 . . d9064a0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 13 , 7 + 13 , 6 @ @ import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public final class MocoJsonRunner { <nl> - <nl> private static HttpServerParser parser = new HttpServerParser ( ) ; <nl> <nl> public static HttpServer jsonHttpServer ( final int port , final Resource resource ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 68c7442 . . be67c6d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 61 , 7 + 61 , 7 @ @ public final class Jsons { <nl> return copyOf ( sessionSettings ) ; <nl> } catch ( UnrecognizedPropertyException e ) { <nl> logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> + throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> } catch ( JsonMappingException e ) { <nl> logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> throw new MocoException ( e ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> index a633944 . . dad73e1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> @ @ - 12 , 6 + 12 , 9 @ @ public class InternalMessageContent { <nl> private byte [ ] content ; <nl> private Charset charset ; <nl> <nl> + public InternalMessageContent ( ) { <nl> + } <nl> + <nl> public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> this . content = content ; <nl> this . charset = charset ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> index 6def1ac . . 485436f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { <nl> InputStream inputStream = null ; <nl> try { <nl> inputStream = new FileInputStream ( file ) ; <nl> - List < Session > sessions = Jsons . toObject ( inputStream , new TypeReference < List < Session > > ( ) { } ) ; <nl> + List < Session > sessions = Jsons . toObjects ( inputStream , Session . class ) ; <nl> return copyOf ( sessions ) ; <nl> } catch ( MocoException me ) { <nl> logger . error ( " exception found " , me ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index d246fd3 . . 8f7eeca 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . fasterxml . jackson . core . JsonProcessingException ; <nl> - import com . fasterxml . jackson . core . type . TypeReference ; <nl> import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> @ @ - 51 , 14 + 50 , 6 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> - public static < T > T toObject ( final InputStream value , final TypeReference clazz ) { <nl> - try { <nl> - return mapper . readValue ( value , clazz ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> - } <nl> - <nl> public static < T > ImmutableList < T > toObjects ( final String value , final Class < T > elementClass ) { <nl> return toObjects ( new ByteArrayInputStream ( value . getBytes ( ) ) , elementClass ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 7d92224 . . fefe6b7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 2 , 14 + 2 , 29 @ @ package com . github . dreamhead . moco . util ; <nl> <nl> import com . fasterxml . jackson . core . JsonProcessingException ; <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> + import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> + import com . fasterxml . jackson . databind . type . CollectionType ; <nl> + import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . util . List ; <nl> + <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + import static com . google . common . io . Closeables . closeQuietly ; <nl> + import static java . lang . String . format ; <nl> <nl> public final class Jsons { <nl> - private static ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + private static Logger logger = LoggerFactory . getLogger ( Jsons . class ) ; <nl> + <nl> + private final static TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> + private final static ObjectMapper mapper = new ObjectMapper ( ) ; <nl> <nl> public static String toJson ( final Object value ) { <nl> try { <nl> @ @ - 51 , 6 + 66 , 24 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static < T > ImmutableList < T > toList ( final InputStream stream , final Class < T > elementClass ) { <nl> + try { <nl> + CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + List < T > sessionSettings = mapper . readValue ( stream , type ) ; <nl> + return copyOf ( sessionSettings ) ; <nl> + } catch ( UnrecognizedPropertyException e ) { <nl> + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> + throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> + } catch ( JsonMappingException e ) { <nl> + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } finally { <nl> + closeQuietly ( stream ) ; <nl> + } <nl> + } <nl> + <nl> private Jsons ( ) { <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> index 457c402 . . 8409fea 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> @ @ - 3 , 9 + 3 , 9 @ @ package com . github . dreamhead . moco . parser ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . Server ; <nl> import com . github . dreamhead . moco . parser . model . SessionSetting ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . io . Closeables ; <nl> <nl> import java . io . InputStream ; <nl> <nl> @ @ - 13 , 18 + 13 , 9 @ @ public abstract class BaseParser < T extends Server > implements Parser < T > { <nl> protected abstract T createServer ( final ImmutableList < SessionSetting > read , <nl> final Optional < Integer > port , final MocoConfig . . . configs ) ; <nl> <nl> - private final CollectionReader reader ; <nl> - <nl> - protected BaseParser ( ) { <nl> - this . reader = new CollectionReader ( ) ; <nl> - } <nl> - <nl> public T parseServer ( final InputStream is , final Optional < Integer > port , <nl> final MocoConfig . . . configs ) { <nl> - try { <nl> - return createServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; <nl> - } finally { <nl> - Closeables . closeQuietly ( is ) ; <nl> - } <nl> + ImmutableList < SessionSetting > settings = Jsons . toList ( is , SessionSetting . class ) ; <nl> + return createServer ( settings , port , configs ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> deleted file mode 100644 <nl> index 21f9a52 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> + + + / dev / null <nl> @ @ - 1 , 51 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser ; <nl> - <nl> - import com . fasterxml . jackson . databind . JsonMappingException ; <nl> - import com . fasterxml . jackson . databind . Module ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> - import com . fasterxml . jackson . databind . type . CollectionType ; <nl> - import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> - import com . github . dreamhead . moco . HttpServer ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - import java . util . List ; <nl> - <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> - import static com . google . common . io . Closeables . closeQuietly ; <nl> - import static java . lang . String . format ; <nl> - <nl> - public class CollectionReader { <nl> - private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; <nl> - <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> - <nl> - public CollectionReader ( final Module . . . modules ) { <nl> - for ( Module module : modules ) { <nl> - mapper . registerModule ( module ) ; <nl> - } <nl> - } <nl> - <nl> - public < T > ImmutableList < T > read ( final InputStream is , final Class < T > elementClass ) { <nl> - try { <nl> - CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> - List < T > sessionSettings = mapper . readValue ( is , type ) ; <nl> - return copyOf ( sessionSettings ) ; <nl> - } catch ( UnrecognizedPropertyException e ) { <nl> - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> - } catch ( JsonMappingException e ) { <nl> - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> - throw new RuntimeException ( e ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } finally { <nl> - closeQuietly ( is ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> index 3bcc893 . . a56b8ab 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> @ @ - 1 , 14 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser ; <nl> <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> import java . io . InputStream ; <nl> <nl> public class GlobalSettingParser { <nl> - private final CollectionReader reader = new CollectionReader ( ) ; <nl> - <nl> public ImmutableList < GlobalSetting > parse ( final InputStream is ) { <nl> - return reader . read ( is , GlobalSetting . class ) ; <nl> + return Jsons . toList ( is , GlobalSetting . class ) ; <nl> } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . eacad5c <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class DefaultWatcher implements Watcher { <nl> + private final WatcherService service ; <nl> + private final Function < File , Void > listener ; <nl> + private final File file ; <nl> + <nl> + public DefaultWatcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { <nl> + this . service = service ; <nl> + this . listener = listener ; <nl> + this . file = file ; <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + service . register ( file , listener ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + service . unregister ( file ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0c7865d <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + public class DefaultWatcherFactory implements FileWatcherFactory { <nl> + private WatcherService service = new WatcherService ( ) ; <nl> + <nl> + @ Override <nl> + public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + <nl> + try { <nl> + this . service . start ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> + @ Override <nl> + public Watcher apply ( final File file ) { <nl> + return new DefaultWatcher ( service , listener , file ) ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> deleted file mode 100644 <nl> index ec2515c . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . google . common . base . Function ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public class Java7Watcher implements Watcher { <nl> - private final WatcherService service ; <nl> - private final Function < File , Void > listener ; <nl> - private final File file ; <nl> - <nl> - public Java7Watcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { <nl> - this . service = service ; <nl> - this . listener = listener ; <nl> - this . file = file ; <nl> - } <nl> - <nl> - @ Override <nl> - public void start ( ) { <nl> - service . register ( file , listener ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - service . unregister ( file ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> deleted file mode 100644 <nl> index 403556e . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 33 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . github . dreamhead . moco . MocoException ; <nl> - import com . google . common . base . Function ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> - <nl> - public class Java7WatcherFactory implements FileWatcherFactory { <nl> - private WatcherService service = new WatcherService ( ) ; <nl> - <nl> - @ Override <nl> - public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> - if ( files . length = = 0 ) { <nl> - throw new IllegalArgumentException ( " No file is specified " ) ; <nl> - } <nl> - <nl> - try { <nl> - this . service . start ( ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> - <nl> - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> - @ Override <nl> - public Watcher apply ( final File file ) { <nl> - return new Java7Watcher ( service , listener , file ) ; <nl> - } <nl> - } ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> index d51880f . . a9713c6 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . io . File ; <nl> public class WatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherFactory . class ) ; <nl> <nl> - private FileWatcherFactory factory = new Java7WatcherFactory ( ) ; <nl> + private FileWatcherFactory factory = new DefaultWatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort ,
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 2261c99 . . 4567f2f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . util . Files ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> import org . slf4j . Logger ; <nl> @ @ - 24 , 6 + 25 , 7 @ @ import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import static com . github . dreamhead . moco . util . Idles . idle ; <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . Maps . newHashMap ; <nl> import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> @ @ - 76 , 17 + 78 , 13 @ @ public class WatcherService { <nl> WatchKey key = service . take ( ) ; <nl> Collection < Path > paths = keys . get ( key ) ; <nl> <nl> - for ( WatchEvent < ? > event : key . pollEvents ( ) ) { <nl> - if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { <nl> - final Path context = ( Path ) event . context ( ) ; <nl> - for ( Path path : paths ) { <nl> - if ( path . endsWith ( context ) ) { <nl> - for ( Function < File , Void > listener : this . listeners . get ( path ) ) { <nl> - listener . apply ( path . toFile ( ) ) ; <nl> - } <nl> - break ; <nl> - } <nl> + for ( WatchEvent < ? > event : from ( key . pollEvents ( ) ) . filter ( isModifyEvent ( ) ) ) { <nl> + final Path context = ( Path ) event . context ( ) ; <nl> + for ( Path path : from ( paths ) . filter ( isForPath ( context ) ) ) { <nl> + for ( Function < File , Void > listener : this . listeners . get ( path ) ) { <nl> + listener . apply ( path . toFile ( ) ) ; <nl> } <nl> + break ; <nl> } <nl> } <nl> key . reset ( ) ; <nl> @ @ - 96 , 6 + 94 , 24 @ @ public class WatcherService { <nl> } <nl> } <nl> <nl> + private Predicate < Path > isForPath ( final Path context ) { <nl> + return new Predicate < Path > ( ) { <nl> + @ Override <nl> + public boolean apply ( final Path path ) { <nl> + return path . endsWith ( context ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Predicate < WatchEvent < ? > > isModifyEvent ( ) { <nl> + return new Predicate < WatchEvent < ? > > ( ) { <nl> + @ Override <nl> + public boolean apply ( final WatchEvent < ? > event ) { <nl> + return event . kind ( ) . equals ( ENTRY _ MODIFY ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> public synchronized void stop ( ) { <nl> if ( this . running ) { <nl> try {
diff - - git a / build . gradle b / build . gradle <nl> index 9ce400d . . 45bad8a 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 0 . 2 ' <nl> + gradleVersion = ' 4 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index faffffa . . d00ca5c 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Sun Jul 30 22 : 04 : 00 CST 2017 <nl> + # Wed Aug 09 21 : 43 : 49 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 0 . 2 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 1 - bin . zip
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 497310c . . ec2515c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 1 , 10 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - import com . github . dreamhead . moco . MocoException ; <nl> import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> <nl> public class Java7Watcher implements Watcher { <nl> private final WatcherService service ; <nl> @ @ - 19 , 11 + 17 , 7 @ @ public class Java7Watcher implements Watcher { <nl> <nl> @ Override <nl> public void start ( ) { <nl> - try { <nl> - service . register ( file , listener ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> + service . register ( file , listener ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 202bd33 . . 5904fc0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 106 , 15 + 106 , 19 @ @ public class WatcherService { <nl> } <nl> } <nl> <nl> - public void register ( final File file , final Function < File , Void > listener ) throws IOException { <nl> - Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> - WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> - Path path = file . toPath ( ) ; <nl> - keys . put ( key , path ) ; <nl> - listeners . put ( path , listener ) ; <nl> - directoryToFiles . put ( directory , path ) ; <nl> - directoryToKey . put ( directory , key ) ; <nl> - idle ( 800 , TimeUnit . MILLISECONDS ) ; <nl> + public void register ( final File file , final Function < File , Void > listener ) { <nl> + try { <nl> + Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> + Path path = file . toPath ( ) ; <nl> + keys . put ( key , path ) ; <nl> + listeners . put ( path , listener ) ; <nl> + directoryToFiles . put ( directory , path ) ; <nl> + directoryToKey . put ( directory , key ) ; <nl> + idle ( 800 , TimeUnit . MILLISECONDS ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> } <nl> <nl> public void unregister ( final File file ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 06a6547 . . 202bd33 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 36 , 6 + 36 , 8 @ @ public class WatcherService { <nl> private boolean running ; <nl> private Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> private Multimap < Path , Function < File , Void > > listeners = HashMultimap . create ( ) ; <nl> + private Multimap < Path , Path > directoryToFiles = HashMultimap . create ( ) ; <nl> + private Map < Path , WatchKey > directoryToKey = newHashMap ( ) ; <nl> private Future < ? > result ; <nl> <nl> public synchronized void start ( ) throws IOException { <nl> @ @ - 64 , 8 + 66 , 8 @ @ public class WatcherService { <nl> private void doStop ( ) { <nl> this . listeners . clear ( ) ; <nl> this . keys . clear ( ) ; <nl> - directoryToFiles . clear ( ) ; <nl> - directoryToKey . clear ( ) ; <nl> + this . directoryToFiles . clear ( ) ; <nl> + this . directoryToKey . clear ( ) ; <nl> } <nl> <nl> private void loop ( ) { <nl> @ @ - 104 , 9 + 106 , 6 @ @ public class WatcherService { <nl> } <nl> } <nl> <nl> - private Multimap < Path , Path > directoryToFiles = HashMultimap . create ( ) ; <nl> - private Map < Path , WatchKey > directoryToKey = newHashMap ( ) ; <nl> - <nl> public void register ( final File file , final Function < File , Void > listener ) throws IOException { <nl> Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ;
diff - - git a / build . gradle b / build . gradle <nl> index 7912b91 . . c680931 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 13 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 8 . 9 ' <nl> + jacksonVersion = ' 2 . 9 . 0 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 8 . 47 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 9a644fc . . a3ac6c4 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ public class Java7Watcher implements Watcher { <nl> } <nl> <nl> @ Override <nl> - public synchronized void start ( ) { <nl> + public void start ( ) { <nl> try { <nl> service . register ( file , listener ) ; <nl> } catch ( IOException e ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 467f868 . . dc24801 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 18 , 11 + 18 , 12 @ @ import java . nio . file . WatchKey ; <nl> import java . nio . file . WatchService ; <nl> import java . util . Collection ; <nl> import java . util . Map ; <nl> - import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . Future ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> + import static com . github . dreamhead . moco . util . Idles . idle ; <nl> import static com . google . common . collect . Maps . newHashMap ; <nl> import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> @ @ - 88 , 7 + 89 , 6 @ @ public class WatcherService { <nl> } <nl> key . reset ( ) ; <nl> } catch ( ClosedWatchServiceException ignored ) { <nl> - System . out . println ( ignored ) ; <nl> } catch ( InterruptedException e ) { <nl> logger . error ( " Error happens " , e ) ; <nl> } <nl> @ @ - 110 , 7 + 110 , 6 @ @ public class WatcherService { <nl> private Map < Path , WatchKey > directoryToKey = newHashMap ( ) ; <nl> <nl> public void register ( final File file , final Function < File , Void > listener ) throws IOException { <nl> - System . out . println ( " Register " + file ) ; <nl> Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> Path path = file . toPath ( ) ; <nl> @ @ - 118 , 6 + 117 , 7 @ @ public class WatcherService { <nl> listeners . put ( path , listener ) ; <nl> directoryToFiles . put ( directory , path ) ; <nl> directoryToKey . put ( directory , key ) ; <nl> + idle ( 800 , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> public void stop ( final File file ) { <nl> @ @ - 133 , 7 + 133 , 6 @ @ public class WatcherService { <nl> WatchKey key = directoryToKey . remove ( directory ) ; <nl> if ( key ! = null ) { <nl> key . cancel ( ) ; <nl> - System . out . println ( " Stopping " + directory ) ; <nl> } <nl> } <nl>
diff - - git a / build . gradle b / build . gradle <nl> index 15cb8e2 . . 7912b91 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 0 . 1 ' <nl> + gradleVersion = ' 4 . 0 . 2 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 5092e86 . . faffffa 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Wed Jul 12 10 : 17 : 15 CST 2017 <nl> + # Sun Jul 30 22 : 04 : 00 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 0 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 0 . 2 - bin . zip
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> index 8faadf6 . . bee2d6e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> @ @ - 2 , 14 + 2 , 14 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> public class Watchers { <nl> public static Watcher threadSafe ( final Watcher watcher ) { <nl> - return new ThreadSafeRunnerWatcher ( watcher ) ; <nl> + return new ThreadSafeWatcher ( watcher ) ; <nl> } <nl> <nl> - private static class ThreadSafeRunnerWatcher implements Watcher { <nl> + private static class ThreadSafeWatcher implements Watcher { <nl> private final Watcher watcher ; <nl> private boolean running = false ; <nl> <nl> - ThreadSafeRunnerWatcher ( final Watcher watcher ) { <nl> + private ThreadSafeWatcher ( final Watcher watcher ) { <nl> this . watcher = watcher ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 06fc17d . . c22fa1a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 101 , 7 + 101 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> if ( " attachment " . equalsIgnoreCase ( name ) ) { <nl> - AttachmentSetting attachment = ( AttachmentSetting ) value ; <nl> + AttachmentSetting attachment = AttachmentSetting . class . cast ( value ) ; <nl> return attachment ( attachment . getFilename ( ) , resourceFrom ( attachment ) ) ; <nl> } <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index 767add3 . . ebc3552 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 8 , 11 + 8 , 13 @ @ import org . apache . commons . io . monitor . FileAlterationObserver ; <nl> <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> - import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; <nl> import static com . github . dreamhead . moco . util . Files . directoryOf ; <nl> <nl> public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> + private static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> + <nl> protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { <nl> return new CommonsIoWatcher ( monitorFile ( file , createListener ( listener ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> index 71ffd69 . . 8faadf6 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> @ @ - 1 , 10 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - import java . util . concurrent . TimeUnit ; <nl> - <nl> public class Watchers { <nl> - public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> - <nl> public static Watcher threadSafe ( final Watcher watcher ) { <nl> return new ThreadSafeRunnerWatcher ( watcher ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> index 648a818 . . 0f729cb 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> @ @ - 15 , 6 + 15 , 8 @ @ import static java . lang . String . format ; <nl> import static org . junit . Assert . fail ; <nl> <nl> public abstract class AbstractRunnerTest { <nl> + private static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> + <nl> protected final MocoTestHelper helper = new MocoTestHelper ( ) ; <nl> protected Runner runner ; <nl> <nl> @ @ - 27 , 7 + 29 , 7 @ @ public abstract class AbstractRunnerTest { <nl> <nl> protected void waitChangeHappens ( ) { <nl> try { <nl> - idle ( Watchers . INTERVAL * 3 , TimeUnit . MILLISECONDS ) ; <nl> + idle ( INTERVAL * 3 , TimeUnit . MILLISECONDS ) ; <nl> } catch ( Exception e ) { <nl> fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 6122445 . . 0cc94ee 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ public class Java7Watcher implements Watcher { <nl> private final Function < File , Void > listener ; <nl> private final File file ; <nl> <nl> - public Java7Watcher ( WatcherService service , final Function < File , Void > listener , final File file ) { <nl> + public Java7Watcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { <nl> this . service = service ; <nl> this . listener = listener ; <nl> this . file = file ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 1216861 . . 489a2ff 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 31 , 10 + 31 , 6 @ @ public class WatcherService { <nl> private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> private final Multimap < Path , Function < File , Void > > listeners = HashMultimap . create ( ) ; <nl> <nl> - public boolean isRunning ( ) { <nl> - return this . running ; <nl> - } <nl> - <nl> public void start ( ) throws IOException { <nl> if ( running ) { <nl> throw new IllegalStateException ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java <nl> index 3fb4139 . . 47ff154 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / BetweenVerification . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class BetweenVerification extends AbstractTimesVerification { <nl> <nl> @ Override <nl> protected boolean meet ( final int size ) { <nl> - return size > = min | | size < = max ; <nl> + return size > = min & & size < = max ; <nl> } <nl> <nl> @ Override
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 66a3028 . . 1730216 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 11 , 7 + 11 , 8 @ @ public class Java7Watcher implements Watcher { <nl> private final Function < File , Void > listener ; <nl> private final File file ; <nl> <nl> - public Java7Watcher ( final Function < File , Void > listener , final File file ) { <nl> + public Java7Watcher ( WatcherService service , final Function < File , Void > listener , final File file ) { <nl> + this . service = service ; <nl> this . listener = listener ; <nl> this . file = file ; <nl> } <nl> @ @ - 19 , 10 + 20 , 6 @ @ public class Java7Watcher implements Watcher { <nl> @ Override <nl> public synchronized void start ( ) { <nl> try { <nl> - if ( ! service . isRunning ( ) ) { <nl> - service . start ( ) ; <nl> - } <nl> - <nl> service . register ( file , listener ) ; <nl> } catch ( IOException e ) { <nl> throw new MocoException ( e ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> index 1b8a978 . . dd803de 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> @ @ - 1 , 12 + 1 , 24 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public class Java7WatcherFactory implements FileWatcherFactory { <nl> + private WatcherService service = new WatcherService ( ) ; <nl> + <nl> + public Java7WatcherFactory ( ) { <nl> + try { <nl> + this . service . start ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> @ Override <nl> public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> if ( files . length = = 0 ) { <nl> @ @ - 16 , 7 + 28 , 7 @ @ public class Java7WatcherFactory implements FileWatcherFactory { <nl> return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> @ Override <nl> public Watcher apply ( final File file ) { <nl> - return new Java7Watcher ( listener , file ) ; <nl> + return new Java7Watcher ( service , listener , file ) ; <nl> } <nl> } ) ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 97a3e11 . . 66a3028 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 2 , 14 + 2 , 11 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . google . common . base . Function ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> <nl> public class Java7Watcher implements Watcher { <nl> - private static Logger logger = LoggerFactory . getLogger ( Java7Watcher . class ) ; <nl> private static WatcherService service = new WatcherService ( ) ; <nl> private final Function < File , Void > listener ; <nl> private final File file ;
diff - - git a / build . gradle b / build . gradle <nl> index 4ad0b1f . . 15cb8e2 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 4 . 0 ' <nl> + gradleVersion = ' 4 . 0 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 575b9ff . . 5092e86 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Thu Jun 15 22 : 11 : 01 CST 2017 <nl> + # Wed Jul 12 10 : 17 : 15 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 0 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 0 . 1 - bin . zip <nl> diff - - git a / gradlew b / gradlew <nl> index 4453cce . . cccdd3d 100755 <nl> - - - a / gradlew <nl> + + + b / gradlew <nl> @ @ - 33 , 11 + 33 , 11 @ @ DEFAULT _ JVM _ OPTS = " " <nl> # Use the maximum available , or set MAX _ FD ! = - 1 to use that value . <nl> MAX _ FD = " maximum " <nl> <nl> - warn ( ) { <nl> + warn ( ) { <nl> echo " $ * " <nl> } <nl> <nl> - die ( ) { <nl> + die ( ) { <nl> echo <nl> echo " $ * " <nl> echo <nl> @ @ - 155 , 7 + 155 , 7 @ @ if $ cygwin ; then <nl> fi <nl> <nl> # Escape application args <nl> - save ( ) { <nl> + save ( ) { <nl> for i do printf % s \ \ n " $ i " | sed " s / ' / ' \ \ \ \ ' ' / g ; 1s / ^ / ' / ; \ $ s / \ $ / ' \ \ \ \ / " ; done <nl> echo " " <nl> }
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index dfbab5c . . fe72b8f 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 125 , 6 + 125 , 8 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> System . setOut ( oldOut ) ; <nl> System . setErr ( oldErr ) ; <nl> <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo1 " ) ) ; <nl> + <nl> String result = new String ( out . toByteArray ( ) ) ; <nl> assertThat ( result . contains ( " Fail " ) , is ( false ) ) ; <nl> runner . stop ( ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> new file mode 100644 <nl> index 0000000 . . 35f30c6 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . util . Files ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . file . ClosedWatchServiceException ; <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . WatchEvent ; <nl> + import java . nio . file . WatchKey ; <nl> + import java . nio . file . WatchService ; <nl> + import java . util . Collection ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> + import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> + <nl> + public class Java7Watcher implements Watcher { <nl> + private static Logger logger = LoggerFactory . getLogger ( Java7Watcher . class ) ; <nl> + private static ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> + <nl> + private final WatchService service ; <nl> + private final Function < File , Void > listener ; <nl> + private boolean running ; <nl> + private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> + <nl> + public Java7Watcher ( final Function < File , Void > listener , final File [ ] files ) { <nl> + this . listener = listener ; <nl> + this . running = false ; <nl> + <nl> + try { <nl> + this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; <nl> + for ( File file : files ) { <nl> + Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> + keys . put ( key , file . toPath ( ) ) ; <nl> + } <nl> + <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + this . running = true ; <nl> + <nl> + executor . execute ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + while ( running ) { <nl> + loop ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void loop ( ) { <nl> + try { <nl> + WatchKey key = service . take ( ) ; <nl> + <nl> + final Collection < Path > paths = keys . get ( key ) ; <nl> + for ( WatchEvent < ? > event : key . pollEvents ( ) ) { <nl> + final Path context = ( Path ) event . context ( ) ; <nl> + if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { <nl> + for ( Path path : paths ) { <nl> + if ( path . endsWith ( context ) ) { <nl> + listener . apply ( context . toFile ( ) ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + key . reset ( ) ; <nl> + } catch ( ClosedWatchServiceException ignored ) { <nl> + } catch ( InterruptedException e ) { <nl> + logger . error ( " Error happens " , e ) ; <nl> + } finally { <nl> + try { <nl> + service . close ( ) ; <nl> + } catch ( IOException ignore ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + if ( running ) { <nl> + this . running = false ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . f46d1b0 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class Java7WatcherFactory implements FileWatcherFactory { <nl> + @ Override <nl> + public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + return new Java7Watcher ( listener , files ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> index d505e12 . . 5ee0739 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . io . File ; <nl> public class WatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractWatcherFactory . class ) ; <nl> <nl> - private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> + private FileWatcherFactory factory = new Java7WatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort , <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> index 9a52250 . . d402b57 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> @ @ - 40 , 5 + 40 , 6 @ @ public class DynamicConfigurationRunnerTest extends AbstractRunnerTest { <nl> waitChangeHappens ( ) ; <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> + runner . stop ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index cc8a2d8 . . dfbab5c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> waitChangeHappens ( ) ; <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> + runner . stop ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 126 , 5 + 127 , 6 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> <nl> String result = new String ( out . toByteArray ( ) ) ; <nl> assertThat ( result . contains ( " Fail " ) , is ( false ) ) ; <nl> + runner . stop ( ) ; <nl> } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 7a82215 . . 47a279f 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 81 , 7 + 81 , 7 @ @ subprojects { <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 8 . 47 ' <nl> httpComponentVersion = ' 4 . 5 . 3 ' <nl> - jsonpathVersion = ' 2 . 3 . 0 ' <nl> + jsonpathVersion = ' 2 . 4 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 26 - incubating ' <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index abf9c8d . . fcf3dfc 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 28 , 6 + 28 , 15 @ @ public final class Files { <nl> return new File ( new File ( path1 ) , path2 ) ; <nl> } <nl> <nl> + public static File directoryOf ( final File file ) { <nl> + File parentFile = file . getParentFile ( ) ; <nl> + if ( parentFile = = null ) { <nl> + return new File ( " . " ) ; <nl> + } <nl> + <nl> + return parentFile ; <nl> + } <nl> + <nl> private Files ( ) { <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index b626b6a . . 767add3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import java . io . File ; <nl> import java . io . FileFilter ; <nl> <nl> import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; <nl> + import static com . github . dreamhead . moco . util . Files . directoryOf ; <nl> <nl> public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { <nl> @ @ - 26 , 22 + 27 , 13 @ @ public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> } <nl> <nl> private FileAlterationMonitor monitorFile ( final File file , final FileAlterationListener listener ) { <nl> - File parentFile = file . getParentFile ( ) ; <nl> - File directory = toDirectory ( parentFile ) ; <nl> + File directory = directoryOf ( file ) ; <nl> FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; <nl> observer . addListener ( listener ) ; <nl> <nl> return new FileAlterationMonitor ( INTERVAL , observer ) ; <nl> } <nl> <nl> - private File toDirectory ( final File parentFile ) { <nl> - if ( parentFile = = null ) { <nl> - return new File ( " . " ) ; <nl> - } <nl> - <nl> - return parentFile ; <nl> - } <nl> - <nl> private FileFilter sameFile ( final File file ) { <nl> return new FileFilter ( ) { <nl> @ Override
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> index 49da66c . . de57ceb 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> @ @ - 2 , 6 + 2 , 8 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import com . github . dreamhead . moco . runner . FileRunner ; <nl> import com . google . common . base . Function ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> <nl> @ @ - 9 , 7 + 11 , 9 @ @ import static com . github . dreamhead . moco . runner . watcher . Watchers . threadSafe ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> - protected abstract Watcher doCreate ( final FileRunner fileRunner , final File file ) ; <nl> + private static Logger logger = LoggerFactory . getLogger ( AbstractWatcherFactory . class ) ; <nl> + <nl> + protected abstract Watcher doCreate ( final File file , final Function < File , Void > listener ) ; <nl> <nl> public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> if ( files . length = = 0 ) { <nl> @ @ - 23 , 8 + 27 , 26 @ @ public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> return doCreate ( fileRunner , files ) ; <nl> } <nl> <nl> + private Function < File , Void > listener ( final FileRunner fileRunner ) { <nl> + return new Function < File , Void > ( ) { <nl> + @ Override <nl> + public Void apply ( final File file ) { <nl> + logger . info ( " { } change detected . " , file . getName ( ) ) ; <nl> + try { <nl> + fileRunner . restart ( ) ; <nl> + } catch ( Exception e ) { <nl> + logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; <nl> + logger . error ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> private Watcher create ( final FileRunner fileRunner , final File file ) { <nl> - return threadSafe ( doCreate ( fileRunner , file ) ) ; <nl> + Function < File , Void > listener = listener ( fileRunner ) ; <nl> + return threadSafe ( doCreate ( file , listener ) ) ; <nl> } <nl> <nl> private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index 7fe7f66 . . b626b6a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 1 , 12 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . google . common . base . Function ; <nl> import org . apache . commons . io . monitor . FileAlterationListener ; <nl> import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> import org . apache . commons . io . monitor . FileAlterationObserver ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> @ @ - 14 , 23 + 12 , 15 @ @ import java . io . FileFilter ; <nl> import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; <nl> <nl> public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> - private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> - <nl> - protected Watcher doCreate ( final FileRunner fileRunner , final File file ) { <nl> - return new CommonsIoWatcher ( monitorFile ( file , createListener ( fileRunner ) ) ) ; <nl> + protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { <nl> + return new CommonsIoWatcher ( monitorFile ( file , createListener ( listener ) ) ) ; <nl> } <nl> <nl> - private FileAlterationListener createListener ( final FileRunner fileRunner ) { <nl> + private FileAlterationListener createListener ( final Function < File , Void > listener ) { <nl> return new FileAlterationListenerAdaptor ( ) { <nl> @ Override <nl> public void onFileChange ( final File file ) { <nl> - logger . info ( " { } change detected . " , file . getName ( ) ) ; <nl> - try { <nl> - fileRunner . restart ( ) ; <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; <nl> - logger . error ( e . getMessage ( ) ) ; <nl> - } <nl> + listener . apply ( file ) ; <nl> } <nl> } ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 9c4faed . . 3c4d3a8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ public class RunnerFactory { <nl> return createShutdownRunner ( dynamicRunner , startArgs . getShutdownPort ( ) , shutdownKey ) ; <nl> } <nl> <nl> - public ShutdownRunner createShutdownRunner ( final Runner runner , final Optional < Integer > shutdownPort , <nl> + private ShutdownRunner createShutdownRunner ( final Runner runner , final Optional < Integer > shutdownPort , <nl> final String shutdownKey ) { <nl> return new ShutdownRunner ( runner , factory . createShutdownWatcher ( runner , shutdownPort , shutdownKey ) ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 88b6e82 . . 9c4faed 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> - import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; <nl> + import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . File ; <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFil <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> <nl> public class RunnerFactory { <nl> - private final MonitorFactory factory = new MonitorFactory ( ) ; <nl> + private final WatcherFactory factory = new WatcherFactory ( ) ; <nl> private final String shutdownKey ; <nl> <nl> public RunnerFactory ( final String shutdownKey ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> deleted file mode 100644 <nl> index 383d8d3 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 34 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . github . dreamhead . moco . runner . FileRunner ; <nl> - import com . github . dreamhead . moco . runner . Runner ; <nl> - import com . google . common . base . Optional ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public class MonitorFactory { <nl> - private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> - <nl> - public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> - final Optional < Integer > shutdownPort , <nl> - final String shutdownKey ) { <nl> - return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { <nl> - @ Override <nl> - public void onShutdown ( ) { <nl> - runner . stop ( ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> - return factory . createWatcher ( fileRunner , file ) ; <nl> - } <nl> - <nl> - public Watcher createSettingWatcher ( final File settingsFile , <nl> - final Iterable < File > configurationFiles , <nl> - final FileRunner fileRunner ) { <nl> - ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> - return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . b5d7cd1 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . github . dreamhead . moco . runner . Runner ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class WatcherFactory { <nl> + private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> + <nl> + public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> + final Optional < Integer > shutdownPort , <nl> + final String shutdownKey ) { <nl> + return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { <nl> + @ Override <nl> + public void onShutdown ( ) { <nl> + runner . stop ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> + return factory . createWatcher ( fileRunner , file ) ; <nl> + } <nl> + <nl> + public Watcher createSettingWatcher ( final File settingsFile , <nl> + final Iterable < File > configurationFiles , <nl> + final FileRunner fileRunner ) { <nl> + ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> + return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> + } <nl> + }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 1533c80 . . b2ea890 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco ; <nl> import com . github . dreamhead . moco . action . MocoAsyncAction ; <nl> import com . github . dreamhead . moco . action . MocoGetRequestAction ; <nl> import com . github . dreamhead . moco . action . MocoPostRequestAction ; <nl> - import com . github . dreamhead . moco . action . MocoRequestAction ; <nl> import com . github . dreamhead . moco . config . MocoContextConfig ; <nl> import com . github . dreamhead . moco . config . MocoFileRootConfig ; <nl> import com . github . dreamhead . moco . config . MocoRequestConfig ;
diff - - git a / build . gradle b / build . gradle <nl> index 9c5d2d6 . . 23a49ee 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 6 , 8 + 6 , 8 @ @ allprojects { <nl> <nl> idea { <nl> project { <nl> - jdkName = JavaVersion . VERSION _ 1 _ 6 <nl> - languageLevel = JavaVersion . VERSION _ 1 _ 6 <nl> + jdkName = JavaVersion . VERSION _ 1 _ 7 <nl> + languageLevel = JavaVersion . VERSION _ 1 _ 7 <nl> <nl> vcs = " Git " <nl> } <nl> @ @ - 24 , 8 + 24 , 8 @ @ subprojects { <nl> apply plugin : ' java ' <nl> group = ' com . github . dreamhead ' <nl> version = ' 0 . 11 . 1 - SNAPSHOT ' <nl> - sourceCompatibility = JavaVersion . VERSION _ 1 _ 6 <nl> - targetCompatibility = JavaVersion . VERSION _ 1 _ 6 <nl> + sourceCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> + targetCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> <nl> repositories { <nl> jcenter ( )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> deleted file mode 100644 <nl> index a6cd93a . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> + + + / dev / null <nl> @ @ - 1 , 25 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner ; <nl> - <nl> - import com . github . dreamhead . moco . runner . watcher . RunnerWatcher ; <nl> - <nl> - public class MonitorRunner implements Runner { <nl> - private final Runner runner ; <nl> - private final RunnerWatcher watcher ; <nl> - <nl> - public MonitorRunner ( final Runner runner , final RunnerWatcher watcher ) { <nl> - this . runner = runner ; <nl> - this . watcher = watcher ; <nl> - } <nl> - <nl> - @ Override <nl> - public void run ( ) { <nl> - this . runner . run ( ) ; <nl> - this . watcher . start ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - this . watcher . stop ( ) ; <nl> - this . runner . stop ( ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 7bf04be . . 88b6e82 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> - import com . github . dreamhead . moco . runner . watcher . RunnerWatcher ; <nl> + import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; <nl> import com . google . common . base . Optional ; <nl> <nl> @ @ - 40 , 15 + 40 , 15 @ @ public class RunnerFactory { <nl> final File settingsFile = new File ( startArgs . getSettings ( ) . get ( ) ) ; <nl> final FileRunner fileRunner = createSettingFileRunner ( settingsFile , startArgs ) ; <nl> final SettingRunner runner = ( SettingRunner ) fileRunner . getRunner ( ) ; <nl> - RunnerWatcher watcher = factory . createSettingWatcher ( settingsFile , <nl> + Watcher watcher = factory . createSettingWatcher ( settingsFile , <nl> runner . getFiles ( ) , fileRunner ) ; <nl> - return new MonitorRunner ( fileRunner , watcher ) ; <nl> + return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; <nl> final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs ) ; <nl> - RunnerWatcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; <nl> - return new MonitorRunner ( fileRunner , watcher ) ; <nl> + Watcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; <nl> + return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> index e4065dc . . 9e667b8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> @ @ - 2 , 12 + 2 , 13 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> <nl> - public class ShutdownRunner extends MonitorRunner { <nl> + public class ShutdownRunner extends WatcherRunner { <nl> private final ShutdownMocoRunnerWatcher monitor ; <nl> <nl> - public ShutdownRunner ( final Runner runner , final ShutdownMocoRunnerWatcher mocoRunnerMonitor ) { <nl> - super ( runner , mocoRunnerMonitor ) ; <nl> - this . monitor = mocoRunnerMonitor ; <nl> + public ShutdownRunner ( final Runner runner , <nl> + final ShutdownMocoRunnerWatcher watcher ) { <nl> + super ( runner , watcher ) ; <nl> + this . monitor = watcher ; <nl> } <nl> <nl> public int shutdownPort ( ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> new file mode 100644 <nl> index 0000000 . . 405c392 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> + <nl> + public class WatcherRunner implements Runner { <nl> + private final Runner runner ; <nl> + private final Watcher watcher ; <nl> + <nl> + public WatcherRunner ( final Runner runner , final Watcher watcher ) { <nl> + this . runner = runner ; <nl> + this . watcher = watcher ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) { <nl> + this . runner . run ( ) ; <nl> + this . watcher . start ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + this . watcher . stop ( ) ; <nl> + this . runner . stop ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> index 6d755ee . . bee968d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public class CommonsIoWatcher implements RunnerWatcher { <nl> + public class CommonsIoWatcher implements Watcher { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcher . class ) ; <nl> <nl> private final FileAlterationMonitor monitor ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index 5be1b58 . . f533e49 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 15 , 11 + 15 , 11 @ @ import java . io . FileFilter ; <nl> import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class CommonsIoWatcherFactory implements WatcherFactory { <nl> + public class CommonsIoWatcherFactory implements FileWatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> <nl> @ Override <nl> - public RunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> if ( files . length = = 0 ) { <nl> throw new IllegalArgumentException ( " No file is specified " ) ; <nl> } <nl> @ @ - 33 , 14 + 33 , 14 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { <nl> return createFilesWatcher ( files , listener ) ; <nl> } <nl> <nl> - private RunnerWatcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> + private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; <nl> } <nl> <nl> - private RunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> - return new CompositeRunnerWatcher ( from ( files ) . transform ( new Function < File , RunnerWatcher > ( ) { <nl> + private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> @ Override <nl> - public RunnerWatcher apply ( final File file ) { <nl> + public Watcher apply ( final File file ) { <nl> return createWatcher ( file , listener ) ; <nl> } <nl> } ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java <nl> deleted file mode 100644 <nl> index ff0def8 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 23 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - public class CompositeRunnerWatcher implements RunnerWatcher { <nl> - private final Iterable < RunnerWatcher > watchers ; <nl> - <nl> - public CompositeRunnerWatcher ( final Iterable < RunnerWatcher > watchers ) { <nl> - this . watchers = watchers ; <nl> - } <nl> - <nl> - @ Override <nl> - public void start ( ) { <nl> - for ( RunnerWatcher watcher : watchers ) { <nl> - watcher . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - for ( RunnerWatcher monitor : watchers ) { <nl> - monitor . stop ( ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 9f8641e <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public class CompositeWatcher implements Watcher { <nl> + private final Iterable < Watcher > watchers ; <nl> + <nl> + public CompositeWatcher ( final Iterable < Watcher > watchers ) { <nl> + this . watchers = watchers ; <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + for ( Watcher watcher : watchers ) { <nl> + watcher . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + for ( Watcher monitor : watchers ) { <nl> + monitor . stop ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . d190740 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public interface FileWatcherFactory { <nl> + Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> index 8ba8b70 . . 383d8d3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import java . io . File ; <nl> <nl> public class MonitorFactory { <nl> - private WatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> + private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort , <nl> @ @ - 21 , 13 + 21 , 13 @ @ public class MonitorFactory { <nl> } ) ; <nl> } <nl> <nl> - public RunnerWatcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> + public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> return factory . createWatcher ( fileRunner , file ) ; <nl> } <nl> <nl> - public RunnerWatcher createSettingWatcher ( final File settingsFile , <nl> - final Iterable < File > configurationFiles , <nl> - final FileRunner fileRunner ) { <nl> + public Watcher createSettingWatcher ( final File settingsFile , <nl> + final Iterable < File > configurationFiles , <nl> + final FileRunner fileRunner ) { <nl> ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java <nl> deleted file mode 100644 <nl> index 5a1cd90 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - public interface RunnerWatcher { <nl> - void start ( ) ; <nl> - void stop ( ) ; <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> index da43389 . . d1493b1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ import java . util . concurrent . Executors ; <nl> import static com . google . common . io . CharSource . wrap ; <nl> import static io . netty . channel . ChannelHandler . Sharable ; <nl> <nl> - public class ShutdownMocoRunnerWatcher implements RunnerWatcher { <nl> + public class ShutdownMocoRunnerWatcher implements Watcher { <nl> private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerWatcher . class ) ; <nl> private final MocoServer server = new MocoServer ( ) ; <nl> private final Optional < Integer > shutdownPort ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> index 50e5116 . . aae0fd2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - public class ThreadSafeRunnerWatcher implements RunnerWatcher { <nl> + public class ThreadSafeRunnerWatcher implements Watcher { <nl> public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> <nl> - private final RunnerWatcher watcher ; <nl> + private final Watcher watcher ; <nl> private boolean running = false ; <nl> <nl> - public ThreadSafeRunnerWatcher ( final RunnerWatcher watcher ) { <nl> + public ThreadSafeRunnerWatcher ( final Watcher watcher ) { <nl> this . watcher = watcher ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java <nl> new file mode 100644 <nl> index 0000000 . . 684a855 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public interface Watcher { <nl> + void start ( ) ; <nl> + void stop ( ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> deleted file mode 100644 <nl> index d833025 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . github . dreamhead . moco . runner . FileRunner ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public interface WatcherFactory { <nl> - RunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; <nl> - } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> deleted file mode 100644 <nl> index 3917b5f . . 0000000 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 111 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner ; <nl> - <nl> - import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; <nl> - import org . apache . http . conn . HttpHostConnectException ; <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . io . OutputStream ; <nl> - import java . net . ConnectException ; <nl> - import java . net . InetAddress ; <nl> - import java . net . Socket ; <nl> - <nl> - import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> - import static org . hamcrest . CoreMatchers . is ; <nl> - import static org . junit . Assert . assertThat ; <nl> - import static org . junit . Assert . fail ; <nl> - <nl> - public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { <nl> - private static final String SHUTDOWN _ MOCO _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; <nl> - private static final int SHUTDOWN _ PORT = 9527 ; <nl> - <nl> - @ Before <nl> - public void setup ( ) { <nl> - RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) <nl> - . withPort ( port ( ) ) <nl> - . withShutdownPort ( SHUTDOWN _ PORT ) <nl> - . withConfigurationFile ( " src / test / resources / foo . json " ) <nl> - . build ( ) ) ; <nl> - } <nl> - <nl> - @ Test ( expected = HttpHostConnectException . class ) <nl> - public void should _ shutdown _ runner _ by _ socket ( ) throws IOException { <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> - waitChangeHappens ( ) ; <nl> - helper . get ( root ( ) ) ; <nl> - } <nl> - <nl> - @ Test ( expected = ConnectException . class ) <nl> - public void should _ stop _ runner _ directly ( ) throws IOException { <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - runner . stop ( ) ; <nl> - <nl> - shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> - } <nl> - <nl> - @ Test ( expected = HttpHostConnectException . class ) <nl> - public void should _ stop _ runner _ via _ shutdown _ task ( ) throws IOException { <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - ShutdownTask task = new ShutdownTask ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - task . run ( new String [ ] { " - s " , Integer . toString ( SHUTDOWN _ PORT ) } ) ; <nl> - <nl> - waitChangeHappens ( ) ; <nl> - helper . get ( root ( ) ) ; <nl> - } <nl> - <nl> - private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { <nl> - Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; <nl> - socket . setSoLinger ( false , 0 ) ; <nl> - <nl> - OutputStream outputStream = socket . getOutputStream ( ) ; <nl> - outputStream . write ( ( shutdownMocoKey + " \ r \ n " ) . getBytes ( ) ) ; <nl> - <nl> - outputStream . flush ( ) ; <nl> - socket . close ( ) ; <nl> - } <nl> - <nl> - @ Test ( expected = HttpHostConnectException . class ) <nl> - public void should _ shutdown _ with _ shutdown _ port ( ) throws IOException { <nl> - RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - ShutdownRunner shutdownRunner = ( ShutdownRunner ) runner ; <nl> - int port = shutdownRunner . shutdownPort ( ) ; <nl> - shutdownMoco ( port , SHUTDOWN _ MOCO _ KEY ) ; <nl> - waitChangeHappens ( ) ; <nl> - helper . get ( root ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2e622d5 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; <nl> + import org . apache . http . conn . HttpHostConnectException ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> + import java . net . ConnectException ; <nl> + import java . net . InetAddress ; <nl> + import java . net . Socket ; <nl> + <nl> + import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + public class ShutdownWatcherRunnerTest extends AbstractRunnerTest { <nl> + private static final String SHUTDOWN _ MOCO _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; <nl> + private static final int SHUTDOWN _ PORT = 9527 ; <nl> + <nl> + @ Before <nl> + public void setup ( ) { <nl> + RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( SHUTDOWN _ PORT ) <nl> + . withConfigurationFile ( " src / test / resources / foo . json " ) <nl> + . build ( ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ shutdown _ runner _ by _ socket ( ) throws IOException { <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> + waitChangeHappens ( ) ; <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = ConnectException . class ) <nl> + public void should _ stop _ runner _ directly ( ) throws IOException { <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + runner . stop ( ) ; <nl> + <nl> + shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ stop _ runner _ via _ shutdown _ task ( ) throws IOException { <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + ShutdownTask task = new ShutdownTask ( SHUTDOWN _ MOCO _ KEY ) ; <nl> + task . run ( new String [ ] { " - s " , Integer . toString ( SHUTDOWN _ PORT ) } ) ; <nl> + <nl> + waitChangeHappens ( ) ; <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + <nl> + private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { <nl> + Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; <nl> + socket . setSoLinger ( false , 0 ) ; <nl> + <nl> + OutputStream outputStream = socket . getOutputStream ( ) ; <nl> + outputStream . write ( ( shutdownMocoKey + " \ r \ n " ) . getBytes ( ) ) ; <nl> + <nl> + outputStream . flush ( ) ; <nl> + socket . close ( ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ shutdown _ with _ shutdown _ port ( ) throws IOException { <nl> + RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + ShutdownRunner shutdownRunner = ( ShutdownRunner ) runner ; <nl> + int port = shutdownRunner . shutdownPort ( ) ; <nl> + shutdownMoco ( port , SHUTDOWN _ MOCO _ KEY ) ; <nl> + waitChangeHappens ( ) ; <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index da126cd . . ad30871 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 26 , 17 + 26 , 22 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { <nl> <nl> FileAlterationListener listener = createListener ( fileRunner ) ; <nl> if ( files . length = = 1 ) { <nl> - return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( files [ 0 ] , listener ) ) ) ; <nl> + File file = files [ 0 ] ; <nl> + return createWatcher ( file , listener ) ; <nl> } <nl> <nl> return createFilesWatcher ( files , listener ) ; <nl> } <nl> <nl> + private MocoRunnerWatcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> + return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; <nl> + } <nl> + <nl> private MocoRunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> - return new FilesMocoRunnerWatcher ( from ( files ) . transform ( new Function < File , ThreadSafeRunnerWatcher > ( ) { <nl> + return new CompositeRunnerWatcher ( from ( files ) . transform ( new Function < File , MocoRunnerWatcher > ( ) { <nl> @ Override <nl> - public ThreadSafeRunnerWatcher apply ( final File file ) { <nl> - return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; <nl> + public MocoRunnerWatcher apply ( final File file ) { <nl> + return createWatcher ( file , listener ) ; <nl> } <nl> } ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 32b91aa <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public class CompositeRunnerWatcher implements MocoRunnerWatcher { <nl> + private final Iterable < MocoRunnerWatcher > watchers ; <nl> + <nl> + public CompositeRunnerWatcher ( final Iterable < MocoRunnerWatcher > watchers ) { <nl> + this . watchers = watchers ; <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + for ( MocoRunnerWatcher watcher : watchers ) { <nl> + watcher . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + for ( MocoRunnerWatcher monitor : watchers ) { <nl> + monitor . stop ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> deleted file mode 100644 <nl> index 71c1f2a . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 23 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { <nl> - private final Iterable < ThreadSafeRunnerWatcher > monitors ; <nl> - <nl> - public FilesMocoRunnerWatcher ( final Iterable < ThreadSafeRunnerWatcher > monitors ) { <nl> - this . monitors = monitors ; <nl> - } <nl> - <nl> - @ Override <nl> - public void start ( ) { <nl> - for ( ThreadSafeRunnerWatcher monitor : monitors ) { <nl> - monitor . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - for ( ThreadSafeRunnerWatcher monitor : monitors ) { <nl> - monitor . stop ( ) ; <nl> - } <nl> - } <nl> - }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index 3b7c0b5 . . 414c558 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 8 , 12 + 8 , 11 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> - import java . util . Arrays ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public class CommonsIoWatcherFactory implements WatcherFactory { <nl> - private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> + private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; ` <nl> <nl> @ Override <nl> public MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> @ @ - 25 , 10 + 24 , 10 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { <nl> return new FileMocoRunnerWatcher ( files [ 0 ] , createListener ( fileRunner ) ) ; <nl> } <nl> <nl> - return createFilesWatcher ( Arrays . asList ( files ) , createListener ( fileRunner ) ) ; <nl> + return createFilesWatcher ( files , createListener ( fileRunner ) ) ; <nl> } <nl> <nl> - private MocoRunnerWatcher createFilesWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { <nl> + private MocoRunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> return new FilesMocoRunnerWatcher ( from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { <nl> @ Override <nl> public FileMocoRunnerWatcher apply ( final File file ) {
diff - - git a / build . gradle b / build . gradle <nl> index 8fd0dd5 . . 9c5d2d6 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 9 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 8 . 9 ' <nl> + mockitoVersion = ' 2 . 8 . 47 ' <nl> httpComponentVersion = ' 4 . 5 . 3 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 26 - incubating '
diff - - git a / build . gradle b / build . gradle <nl> index 0d3631f . . 8fd0dd5 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 3 . 5 ' <nl> + gradleVersion = ' 4 . 0 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 9c66bbe . . 575b9ff 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Thu Apr 13 21 : 17 : 15 CST 2017 <nl> + # Thu Jun 15 22 : 11 : 01 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 5 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 4 . 0 - bin . zip
diff - - git a / build . gradle b / build . gradle <nl> index a30e390 . . 6dc761f 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 11 . Final ' <nl> + nettyVersion = ' 4 . 1 . 12 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 8 . 8 . 1 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / ShutdownPortOption . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / ShutdownPortOption . java <nl> index 1a760b0 . . 7a3164e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / ShutdownPortOption . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / ShutdownPortOption . java <nl> @ @ - 3 , 15 + 3 , 15 @ @ package com . github . dreamhead . moco . bootstrap ; <nl> import com . google . common . base . Optional ; <nl> import org . apache . commons . cli . Option ; <nl> <nl> - public class ShutdownPortOption { <nl> - private final Optional < Integer > shutdownPort ; <nl> + public abstract class ShutdownPortOption { <nl> + private final Integer shutdownPort ; <nl> <nl> - public ShutdownPortOption ( final Integer shutdownPort ) { <nl> - this . shutdownPort = Optional . fromNullable ( shutdownPort ) ; <nl> + protected ShutdownPortOption ( final Integer shutdownPort ) { <nl> + this . shutdownPort = shutdownPort ; <nl> } <nl> <nl> public Optional < Integer > getShutdownPort ( ) { <nl> - return shutdownPort ; <nl> + return Optional . fromNullable ( shutdownPort ) ; <nl> } <nl> <nl> public static Option shutdownPortOption ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index 948c0ed . . abf9c8d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 15 , 10 + 15 , 10 @ @ public final class Files { <nl> } <nl> <nl> private static String actualJoin ( final String path1 , final String path2 ) { <nl> - return joinedFile ( path1 , path2 ) . getPath ( ) ; <nl> + return joinFiles ( path1 , path2 ) . getPath ( ) ; <nl> } <nl> <nl> - private static File joinedFile ( final String path1 , final String path2 ) { <nl> + private static File joinFiles ( final String path1 , final String path2 ) { <nl> checkNotNull ( path2 ) ; <nl> <nl> if ( path1 = = null ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java <nl> index 8a6a780 . . d862840 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormsRequestExtractor . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import io . netty . handler . codec . http . FullHttpRequest ; <nl> import io . netty . handler . codec . http . HttpUtil ; <nl> import io . netty . handler . codec . http . multipart . Attribute ; <nl> import io . netty . handler . codec . http . multipart . DefaultHttpDataFactory ; <nl> + import io . netty . handler . codec . http . multipart . HttpDataFactory ; <nl> import io . netty . handler . codec . http . multipart . HttpPostRequestDecoder ; <nl> import io . netty . handler . codec . http . multipart . InterfaceHttpData ; <nl> <nl> @ @ - 28 , 7 + 29 , 7 @ @ public class FormsRequestExtractor extends HttpRequestExtractor < ImmutableMap < Str <nl> protected Optional < ImmutableMap < String , String > > doExtract ( final HttpRequest request ) { <nl> HttpPostRequestDecoder decoder = null ; <nl> try { <nl> - DefaultHttpDataFactory factory = new DefaultHttpDataFactory ( DefaultHttpDataFactory . MINSIZE ) ; <nl> + HttpDataFactory factory = new DefaultHttpDataFactory ( DefaultHttpDataFactory . MINSIZE ) ; <nl> FullHttpRequest targetRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; <nl> Charset charset = HttpUtil . getCharset ( targetRequest ) ; <nl> decoder = new HttpPostRequestDecoder ( factory , targetRequest , charset ) ;
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index a2f99f0 . . 3daa461 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 48 , 6 + 48 , 7 @ @ That means if we get the expected request and then return our response . Now , you <nl> * [ Domain ] ( # domain ) <nl> * [ Secure ] ( # secure ) <nl> * [ HTTP Only ] ( # http - only ) <nl> + * [ Max Age ] ( # max - age ) <nl> * [ Attachment ] ( # attachment ) <nl> * [ Latency ] ( # latency ) <nl> * [ Sequence ] ( # sequence ) <nl> @ @ - 64 , 6 + 65 , 8 @ @ That means if we get the expected request and then return our response . Now , you <nl> * [ Custom Variable ] ( # custom - variable ) <nl> * [ Redirect ] ( # redirect - 1 ) <nl> * [ File Name Template ] ( # file - name - template ) <nl> + * [ Proxy ] ( # proxy - 1 ) <nl> + * [ Template for Event Action ] ( # template - for - event - action ) <nl> * [ Event ] ( # event ) <nl> * [ Complete ] ( # complete ) <nl> * [ Asynchronous ] ( # asynchronous )
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 1cdf1cc . . 3d5ed9f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . Files ; <nl> import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> @ @ - 29 , 9 + 30 , 11 @ @ import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . Moco . from ; <nl> import static com . github . dreamhead . moco . Moco . header ; <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . match ; <nl> import static com . github . dreamhead . moco . Moco . method ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . playback ; <nl> import static com . github . dreamhead . moco . Moco . proxy ; <nl> import static com . github . dreamhead . moco . Moco . query ; <nl> @ @ - 478 , 4 + 481 , 21 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ forward _ gbk _ request ( ) throws Exception { <nl> + server = httpServer ( port ( ) , log ( ) ) ; <nl> + final Charset gbk = Charset . forName ( " GBK " ) ; <nl> + server . request ( and ( by ( uri ( " / proxy " ) ) , json ( pathResource ( " gbk . json " , gbk ) ) ) ) . response ( " response " ) ; <nl> + server . response ( proxy ( remoteUrl ( " / proxy " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + byte [ ] bytes = ByteStreams . toByteArray ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " gbk . json " ) ) ; <nl> + String result = helper . postBytes ( root ( ) , bytes , gbk ) ; <nl> + assertThat ( result , is ( " response " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> index ce1805f . . afa3ff3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> @ @ - 3 , 9 + 3 , 7 @ @ package com . github . dreamhead . moco . action ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> - import com . google . common . base . Optional ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> <nl> @ @ - 13 , 7 + 11 , 7 @ @ import static com . google . common . base . Optional . of ; <nl> <nl> public class MocoGetRequestAction extends MocoRequestAction { <nl> public MocoGetRequestAction ( Resource url ) { <nl> - super ( url , Optional . < ContentResource > absent ( ) ) ; <nl> + super ( url ) ; <nl> } <nl> <nl> protected HttpRequestBase createRequest ( final Resource url , final Request request ) { <nl> @ @ - 22 , 12 + 20 , 7 @ @ public class MocoGetRequestAction extends MocoRequestAction { <nl> } <nl> <nl> @ Override <nl> - protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> - Resource appliedContent = originalContent . apply ( config ) ; <nl> - if ( appliedContent ! = originalContent ) { <nl> - return new MocoGetRequestAction ( this . url ) ; <nl> - } <nl> - <nl> + public MocoEventAction apply ( MocoConfig config ) { <nl> return this ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> index 120e557 . . 38c25fe 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> @ @ - 5 , 25 + 5 , 36 @ @ import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> + import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> + import org . apache . http . entity . InputStreamEntity ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class MocoPostRequestAction extends MocoRequestAction { <nl> - public MocoPostRequestAction ( Resource url , ContentResource content ) { <nl> - super ( url , of ( content ) ) ; <nl> + private final ContentResource content ; <nl> + <nl> + public MocoPostRequestAction ( final Resource url , final ContentResource content ) { <nl> + super ( url ) ; <nl> + this . content = content ; <nl> } <nl> <nl> protected HttpRequestBase createRequest ( final Resource url , final Request request ) { <nl> String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> - return new HttpPost ( targetUrl ) ; <nl> + HttpPost targetRequest = new HttpPost ( targetUrl ) ; <nl> + targetRequest . setEntity ( asEntity ( content , request ) ) ; <nl> + return targetRequest ; <nl> + } <nl> + <nl> + private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> + return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> @ Override <nl> - protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> - Resource appliedContent = originalContent . apply ( config ) ; <nl> - if ( appliedContent ! = originalContent ) { <nl> + public MocoEventAction apply ( final MocoConfig config ) { <nl> + Resource appliedContent = this . content . apply ( config ) ; <nl> + if ( appliedContent ! = this . content ) { <nl> return new MocoPostRequestAction ( this . url , ( ContentResource ) appliedContent ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index 5684017 . . 6e77a28 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 1 , 33 + 1 , 22 @ @ <nl> package com . github . dreamhead . moco . action ; <nl> <nl> - import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> - import com . google . common . base . Optional ; <nl> - import org . apache . http . HttpEntity ; <nl> - import org . apache . http . HttpEntityEnclosingRequest ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> - import org . apache . http . entity . InputStreamEntity ; <nl> import org . apache . http . impl . client . CloseableHttpClient ; <nl> import org . apache . http . impl . client . HttpClients ; <nl> <nl> import java . io . IOException ; <nl> <nl> - import static com . google . common . base . Optional . of ; <nl> - <nl> public abstract class MocoRequestAction implements MocoEventAction { <nl> protected final Resource url ; <nl> - private final Optional < ContentResource > content ; <nl> <nl> protected abstract HttpRequestBase createRequest ( final Resource url , final Request request ) ; <nl> - protected abstract MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) ; <nl> <nl> - public MocoRequestAction ( final Resource url , final Optional < ContentResource > content ) { <nl> + public MocoRequestAction ( final Resource url ) { <nl> this . url = url ; <nl> - this . content = content ; <nl> } <nl> <nl> @ Override <nl> @ @ - 46 , 33 + 35 , 6 @ @ public abstract class MocoRequestAction implements MocoEventAction { <nl> } <nl> <nl> private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> - HttpRequestBase targetRequest = createRequest ( url , request ) ; <nl> - if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; <nl> - } <nl> - <nl> - client . execute ( targetRequest ) ; <nl> + client . execute ( createRequest ( url , request ) ) ; <nl> } <nl> - <nl> - private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> - return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public MocoEventAction apply ( final MocoConfig config ) { <nl> - if ( this . content . isPresent ( ) ) { <nl> - return applyContent ( config , this . content . get ( ) ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - / / private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { <nl> - / / Resource appliedContent = originalContent . apply ( config ) ; <nl> - / / if ( appliedContent ! = originalContent ) { <nl> - / / return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; <nl> - / / } <nl> - / / <nl> - / / return this ; <nl> - / / } <nl> }
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 2977fdf . . a2f99f0 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2035 , 20 + 2035 , 55 @ @ server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( template ( " http : / / localhost : 1230 <nl> <nl> ` ` ` json <nl> { <nl> - " request " : <nl> - { <nl> - " uri " : " / template - url " <nl> - } , <nl> - " response " : <nl> - { <nl> - " proxy " : <nl> - { <nl> - " url " : { <nl> - " template " : " http : / / localhost : 12306 / $ { req . queries [ ' foo ' ] } " <nl> - } <nl> + " request " : { <nl> + " uri " : " / proxy " <nl> + } , <nl> + " response " : { <nl> + " proxy " : { <nl> + " url " : { <nl> + " template " : " http : / / localhost : 12306 / $ { req . queries [ ' foo ' ] } " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # Template for Event Action <nl> + <nl> + Template also can ben applied to event action . Check out [ Event ] ( # event ) for more details about event . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / localhost : 12306 / target " ) , template ( " $ { target } " , of ( " target " , var ( " target " ) ) ) ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / event " <nl> + } , <nl> + " response " : { <nl> + " text " : " event " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> + " content " : { <nl> + " template " : { <nl> + " with " : " $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> } <nl> + } <nl> } <nl> + } <nl> } <nl> + } <nl> + } <nl> ` ` ` <nl> <nl> # # Event
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index c267c9a . . 2977fdf 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1435 , 6 + 1435 , 42 @ @ server . response ( cookie ( " loggedIn " , " true " , httpOnly ( ) ) , status ( 302 ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # # # Max Age <nl> + <nl> + @ Since will be at next version <nl> + <nl> + The Max - Age attribute can be used to set the cookie ' s expiration as an interval of seconds in the future , relative to the time the browser received the cookie . You can add your own ` maxAge ` cookie attribute to your response . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . response ( cookie ( " loggedIn " , " true " , maxAge ( 1 , TimeUnit . HOURS ) ) , status ( 302 ) ) <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / cookie " <nl> + } , <nl> + " response " : <nl> + { <nl> + " cookies " : <nl> + { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " maxAge " : { <nl> + " duration " : 1 , <nl> + " unit " : " hour " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # Attachment <nl> * * @ Since 0 . 10 . 0 * * <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> index a954717 . . 6def1ac 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> @ @ - 39 , 23 + 39 , 23 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { <nl> } <nl> <nl> @ Override <nl> - public void onCompleteResponse ( final HttpRequest request , final HttpResponse httpResponse ) { <nl> + public void onCompleteResponse ( final HttpRequest request , final HttpResponse response ) { <nl> try { <nl> ObjectWriter writer = mapper . writerWithDefaultPrettyPrinter ( ) ; <nl> - Session targetSession = Session . newSession ( request , httpResponse ) ; <nl> - writer . writeValue ( this . file , prepareTargetSessions ( targetSession ) ) ; <nl> + Session targetSession = Session . newSession ( request , response ) ; <nl> + writer . writeValue ( this . file , prepareTargetSessions ( this . file , targetSession ) ) ; <nl> } catch ( IOException e ) { <nl> throw new MocoException ( e ) ; <nl> } <nl> } <nl> <nl> - private ImmutableList < Session > prepareTargetSessions ( final Session targetSession ) { <nl> + private ImmutableList < Session > prepareTargetSessions ( final File file , final Session targetSession ) { <nl> if ( file . length ( ) = = 0 ) { <nl> return of ( targetSession ) ; <nl> } <nl> <nl> return ImmutableList . < Session > builder ( ) <nl> - . addAll ( toUniqueSessions ( targetSession , restoreSessions ( this . file ) ) ) <nl> + . addAll ( toUniqueSessions ( targetSession , restoreSessions ( file ) ) ) <nl> . add ( targetSession ) <nl> . build ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 5c8a914 . . 60e2767 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 19 , 8 + 19 , 8 @ @ public class Failover { <nl> return executor . failover ( request ) ; <nl> } <nl> <nl> - public void onCompleteResponse ( final HttpRequest request , final HttpResponse httpResponse ) { <nl> - executor . onCompleteResponse ( request , httpResponse ) ; <nl> + public void onCompleteResponse ( final HttpRequest request , final HttpResponse response ) { <nl> + executor . onCompleteResponse ( request , response ) ; <nl> } <nl> <nl> public boolean isPlayback ( ) {
diff - - git a / build . gradle b / build . gradle <nl> index 0f83efc . . dfbcc25 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 8 . 1 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 7 . 22 ' <nl> + mockitoVersion = ' 2 . 8 . 9 ' <nl> httpComponentVersion = ' 4 . 5 . 3 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 26 - incubating '
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 1d9e8b2 . . 1296c44 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> * Fix : parse json with charset <nl> * Fix : fail to load configuration with multiple modification <nl> * Fix : allowed empty query <nl> + * Fix : make request hit and moco monitor thread safe <nl> <nl> # Release 0 . 11 . 0 ( 20 - May - 2016 ) <nl>
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index a837393 . . 3e52863 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 68 , 7 + 68 , 7 @ @ task proguard ( type : proguard . gradle . ProGuardTask , dependsOn : uberjar ) { <nl> <nl> task proguardCheck ( type : Test , dependsOn : proguard ) { <nl> testLogging { exceptionFormat " full " } <nl> - classpath = classpath - files ( sourceSets . main . output . classesDir ) - files ( configurations . runtime ) + files ( proguard . outputs . files . singleFile ) + findJar ( ' netty - codec - http ' ) <nl> + classpath = classpath - files ( sourceSets . main . output . classesDir ) - configurations . runtime + files ( proguard . outputs . files . singleFile ) + findJar ( ' netty - codec - http ' ) <nl> } <nl> <nl> uploadArchives . dependsOn proguard , proguardCheck <nl> @ @ - 85 , 7 + 85 , 7 @ @ def jsseLib ( ) { <nl> javaLibPath ( " / lib / jsse . jar " , " / . . / Classes / jsse . jar " ) <nl> } <nl> <nl> - def javaLibPath ( lib , osxLib ) { <nl> + def javaLibPath ( String lib , String osxLib ) { <nl> def javaBase = System . properties [ " java . home " ] ; <nl> def target = lib <nl> if ( OperatingSystem . current ( ) . isMacOsX ( ) ) { <nl> @ @ - 96 , 6 + 96 , 6 @ @ def javaLibPath ( lib , osxLib ) { <nl> javaBase + target <nl> } <nl> <nl> - def findJar ( prefix ) { <nl> + def findJar ( String prefix ) { <nl> configurations . runtime . filter { it . name . startsWith ( prefix ) } <nl> } <nl> \ No newline at end of file
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 0294118 . . 6b09a12 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import org . apache . http . Header ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . HttpEntityEnclosingRequest ; <nl> import org . apache . http . client . config . RequestConfig ; <nl> - import org . apache . http . client . methods . CloseableHttpResponse ; <nl> import org . apache . http . client . methods . HttpDelete ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> import org . apache . http . client . methods . HttpHead ; <nl> @ @ - 66 , 7 + 65 , 6 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> . setConnectionManager ( connManager ) <nl> . setConnectionManagerShared ( true ) <nl> . build ( ) ; <nl> - <nl> } <nl> <nl> protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; <nl> @ @ - 155 , 7 + 153 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpResponse setupResponse ( final HttpRequest request , <nl> - final org . apache . http . HttpResponse remoteResponse ) throws IOException { <nl> + final org . apache . http . HttpResponse remoteResponse ) throws IOException { <nl> int statusCode = remoteResponse . getStatusLine ( ) . getStatusCode ( ) ; <nl> if ( statusCode = = HttpResponseStatus . BAD _ REQUEST . code ( ) ) { <nl> return failover . failover ( request ) ; <nl> @ @ - 250 , 7 + 248 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpRequestBase prepareRemoteRequest ( final HttpRequest request , final URL remoteUrl ) { <nl> - FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; <nl> + FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; <nl> return prepareRemoteRequest ( httpRequest , remoteUrl ) ; <nl> } <nl>
diff - - git a / build . gradle b / build . gradle <nl> index e8c0b70 . . 0f83efc 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 10 . Final ' <nl> + nettyVersion = ' 4 . 1 . 11 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 8 . 8 . 1 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java <nl> index 1c7d96c . . 1211f1d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / ThreadSafeMonitor . java <nl> @ @ - 4 , 32 + 4 , 63 @ @ import com . github . dreamhead . moco . MocoMonitor ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . Response ; <nl> <nl> + import java . util . concurrent . locks . Lock ; <nl> + import java . util . concurrent . locks . ReentrantLock ; <nl> + <nl> public class ThreadSafeMonitor implements MocoMonitor { <nl> private MocoMonitor monitor ; <nl> + private Lock lock = new ReentrantLock ( ) ; <nl> <nl> - public ThreadSafeMonitor ( MocoMonitor monitor ) { <nl> + public ThreadSafeMonitor ( final MocoMonitor monitor ) { <nl> this . monitor = monitor ; <nl> } <nl> <nl> @ Override <nl> - public synchronized void onMessageArrived ( Request request ) { <nl> - this . monitor . onMessageArrived ( request ) ; <nl> - <nl> + public void onMessageArrived ( final Request request ) { <nl> + withLock ( lock , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + monitor . onMessageArrived ( request ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Override <nl> - public synchronized void onException ( Throwable t ) { <nl> - this . monitor . onException ( t ) ; <nl> + public void onException ( final Throwable t ) { <nl> + withLock ( lock , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + monitor . onException ( t ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Override <nl> - public void onMessageLeave ( Response response ) { <nl> - this . monitor . onMessageLeave ( response ) ; <nl> - <nl> + public void onMessageLeave ( final Response response ) { <nl> + withLock ( lock , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + monitor . onMessageLeave ( response ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ Override <nl> - public void onUnexpectedMessage ( Request request ) { <nl> - this . monitor . onUnexpectedMessage ( request ) ; <nl> + public void onUnexpectedMessage ( final Request request ) { <nl> + withLock ( lock , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + monitor . onUnexpectedMessage ( request ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void withLock ( final Lock lock , final Runnable runnable ) { <nl> + lock . lock ( ) ; <nl> + try { <nl> + runnable . run ( ) ; <nl> + } finally { <nl> + lock . unlock ( ) ; <nl> + } <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> index 1d3aa89 . . 7f1b134 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> @ @ - 17 , 12 + 17 , 12 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { <nl> private List < Request > requests = newArrayList ( ) ; <nl> <nl> @ Override <nl> - public void onMessageArrived ( final Request request ) { <nl> + public synchronized void onMessageArrived ( final Request request ) { <nl> this . requests . add ( request ) ; <nl> } <nl> <nl> @ Override <nl> - public void onUnexpectedMessage ( final Request request ) { <nl> + public synchronized void onUnexpectedMessage ( final Request request ) { <nl> this . unexpectedRequests . add ( request ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 1c43f5e <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . times ; <nl> + import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoMultithreadingTest { <nl> + private MocoTestHelper helper ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + helper = new MocoTestHelper ( ) ; <nl> + <nl> + } <nl> + @ Test <nl> + public void should _ work _ well _ for _ request _ hit ( ) throws Exception { <nl> + RequestHit hit = requestHit ( ) ; <nl> + final HttpServer server = httpServer ( port ( ) , hit ) ; <nl> + server . get ( by ( uri ( " / foo " ) ) ) . response ( " bar " ) ; <nl> + <nl> + final ExecutorService executorService = Executors . newFixedThreadPool ( 50 ) ; <nl> + final int count = 100 ; <nl> + final CountDownLatch latch = new CountDownLatch ( count ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + for ( int i = 0 ; i < count ; i + + ) { <nl> + executorService . execute ( new java . lang . Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + latch . countDown ( ) ; <nl> + } catch ( IOException ignored ) { <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + latch . await ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + hit . verify ( by ( uri ( " / foo " ) ) , times ( count ) ) ; <nl> + } <nl> + }
diff - - git a / . travis . yml b / . travis . yml <nl> index f4d852a . . 61f6156 100644 <nl> - - - a / . travis . yml <nl> + + + b / . travis . yml <nl> @ @ - 3 , 7 + 3 , 7 @ @ jdk : <nl> - oraclejdk8 <nl> - oraclejdk7 <nl> - openjdk7 <nl> - - openjdk6 <nl> + # - openjdk6 <nl> <nl> script : <nl> " . / gradlew check - i "
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index e0dd293 . . ac32eab 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import org . apache . http . Header ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . HttpEntityEnclosingRequest ; <nl> import org . apache . http . client . config . RequestConfig ; <nl> + import org . apache . http . client . methods . CloseableHttpResponse ; <nl> import org . apache . http . client . methods . HttpDelete ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> import org . apache . http . client . methods . HttpHead ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . http . client . methods . HttpTrace ; <nl> import org . apache . http . entity . InputStreamEntity ; <nl> import org . apache . http . impl . client . CloseableHttpClient ; <nl> import org . apache . http . impl . client . HttpClients ; <nl> + import org . apache . http . impl . conn . PoolingHttpClientConnectionManager ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 210 , 11 + 212 , 32 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> return doForward ( request , remoteUrl ) ; <nl> } <nl> <nl> + private static CloseableHttpClient client ; <nl> + <nl> + public synchronized static CloseableHttpClient getHttpClient ( ) { <nl> + if ( client = = null ) { <nl> + PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager ( ) ; <nl> + client = HttpClients . custom ( ) <nl> + . setConnectionManager ( connManager ) <nl> + . setConnectionManagerShared ( true ) <nl> + . build ( ) ; <nl> + } <nl> + <nl> + return client ; <nl> + } <nl> + <nl> private HttpResponse doForward ( final HttpRequest request , final URL remoteUrl ) { <nl> - CloseableHttpClient httpclient = HttpClients . createDefault ( ) ; <nl> + CloseableHttpClient httpclient = getHttpClient ( ) ; <nl> try { <nl> + RequestConfig requestConfig = RequestConfig . custom ( ) <nl> + . setSocketTimeout ( 0 ) <nl> + . setStaleConnectionCheckEnabled ( true ) <nl> + . build ( ) ; <nl> FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; <nl> - return setupResponse ( request , httpclient . execute ( prepareRemoteRequest ( httpRequest , remoteUrl ) ) ) ; <nl> + HttpRequestBase remoteRequest = prepareRemoteRequest ( httpRequest , remoteUrl ) ; <nl> + remoteRequest . setConfig ( requestConfig ) ; <nl> + CloseableHttpResponse response = httpclient . execute ( remoteRequest ) ; <nl> + return setupResponse ( request , response ) ; <nl> } catch ( IOException e ) { <nl> logger . error ( " Failed to load remote and try to failover " , e ) ; <nl> return failover . failover ( request ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> new file mode 100644 <nl> index 0000000 . . dad73e1 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package com . github . dreamhead . moco . dumper ; <nl> + <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> + <nl> + import java . nio . charset . Charset ; <nl> + <nl> + import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> + public class InternalMessageContent { <nl> + private byte [ ] content ; <nl> + private Charset charset ; <nl> + <nl> + public InternalMessageContent ( ) { <nl> + } <nl> + <nl> + public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> + this . content = content ; <nl> + this . charset = charset ; <nl> + } <nl> + <nl> + public MessageContent toContent ( ) { <nl> + return content ( ) . withCharset ( charset ) . withContent ( content ) . build ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> index af15870 . . b0e2f54 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . dumper ; <nl> <nl> - import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> @ @ - 8 , 7 + 7 , 6 @ @ import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> <nl> import java . io . IOException ; <nl> - import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> @ @ - 28 , 14 + 26 , 4 @ @ public class MessageContentDeserializer extends JsonDeserializer < MessageContent > <nl> <nl> return ( MessageContent ) ctx . handleUnexpectedToken ( MessageContent . class , jp ) ; <nl> } <nl> - <nl> - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - private static class InternalMessageContent { <nl> - private byte [ ] content ; <nl> - private Charset charset ; <nl> - <nl> - public MessageContent toContent ( ) { <nl> - return content ( ) . withCharset ( charset ) . withContent ( content ) . build ( ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java <nl> index 0fb2b06 . . 4d2a99a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java <nl> @ @ - 1 , 13 + 1 , 11 @ @ <nl> package com . github . dreamhead . moco . dumper ; <nl> <nl> - import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonGenerator ; <nl> import com . fasterxml . jackson . databind . JsonSerializer ; <nl> import com . fasterxml . jackson . databind . SerializerProvider ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> <nl> import java . io . IOException ; <nl> - import java . nio . charset . Charset ; <nl> <nl> public class MessageContentSerializer extends JsonSerializer < MessageContent > { <nl> @ Override <nl> @ @ - 20 , 15 + 18 , 4 @ @ public class MessageContentSerializer extends JsonSerializer < MessageContent > { <nl> <nl> generator . writeString ( new String ( value . getContent ( ) ) ) ; <nl> } <nl> - <nl> - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - private static class InternalMessageContent { <nl> - private byte [ ] content ; <nl> - private Charset charset ; <nl> - <nl> - public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> - this . content = content ; <nl> - this . charset = charset ; <nl> - } <nl> - } <nl> }
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 279e09b . . 1d9e8b2 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 14 , 6 + 14 , 10 @ @ <nl> # # Implementation Details <nl> * Fix : get Moco standalone version from manifest <nl> * Fix : merge server with port <nl> + * Fix : set charset from http request <nl> + * Fix : parse json with charset <nl> + * Fix : fail to load configuration with multiple modification <nl> + * Fix : allowed empty query <nl> <nl> # Release 0 . 11 . 0 ( 20 - May - 2016 ) <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java <nl> index 6531d6a . . 967cfef 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java <nl> @ @ - 8 , 19 + 8 , 19 @ @ import com . google . common . base . Strings ; <nl> import java . util . Map ; <nl> <nl> public class HttpRequestFailoverMatcher { <nl> - private final HttpRequest failover ; <nl> + private final HttpRequest source ; <nl> <nl> - public HttpRequestFailoverMatcher ( final HttpRequest failover ) { <nl> - this . failover = failover ; <nl> + public HttpRequestFailoverMatcher ( final HttpRequest source ) { <nl> + this . source = source ; <nl> } <nl> <nl> public boolean match ( final HttpRequest target ) { <nl> - return doMatch ( failover . getUri ( ) , target . getUri ( ) ) <nl> - & & doMatch ( failover . getVersion ( ) , target . getVersion ( ) ) <nl> - & & doMatch ( failover . getContent ( ) , target . getContent ( ) ) <nl> - & & doMatch ( failover . getHeaders ( ) , target . getHeaders ( ) ) <nl> - & & doMatch ( failover . getMethod ( ) , target . getMethod ( ) ) <nl> - & & doMatch ( failover . getQueries ( ) , target . getQueries ( ) ) ; <nl> + return doMatch ( source . getUri ( ) , target . getUri ( ) ) <nl> + & & doMatch ( source . getVersion ( ) , target . getVersion ( ) ) <nl> + & & doMatch ( source . getContent ( ) , target . getContent ( ) ) <nl> + & & doMatch ( source . getHeaders ( ) , target . getHeaders ( ) ) <nl> + & & doMatch ( source . getMethod ( ) , target . getMethod ( ) ) <nl> + & & doMatch ( source . getQueries ( ) , target . getQueries ( ) ) ; <nl> } <nl> <nl> protected boolean doMatch ( final Map < String , ? > thisField , final Map < String , ? > thatField ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> index 5e3c54a . . d5aa3a0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> @ @ - 34 , 8 + 34 , 8 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { <nl> <nl> private boolean doMatch ( final Request request , final byte [ ] content ) { <nl> try { <nl> - JsonNode requestNode = mapper . readTree ( content ) ; <nl> - JsonNode resourceNode = mapper . readTree ( expected . readFor ( of ( request ) ) . getContent ( ) ) ; <nl> + JsonNode requestNode = mapper . readTree ( new String ( content ) ) ; <nl> + JsonNode resourceNode = mapper . readTree ( expected . readFor ( of ( request ) ) . toString ( ) ) ; <nl> return requestNode . equals ( resourceNode ) ; <nl> } catch ( JsonProcessingException jpe ) { <nl> return false ;
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 6f30076 . . 13e5cc4 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ reload _ configuration _ with _ mulitiple _ modification ( ) throws IOException , InterruptedException { <nl> + public void should _ reload _ configuration _ with _ multiple _ modification ( ) throws IOException , InterruptedException { <nl> final File config1 = tempFolder . newFile ( " config1 . json " ) ; <nl> changeFileContent ( config1 , " [ { " + <nl> " \ " request \ " : { " + <nl> @ @ - 111 , 7 + 111 , 6 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> " \ " text \ " : \ " foo1 \ " " + <nl> " } " + <nl> " } ] " ) ; <nl> - Idles . idle ( 500 , TimeUnit . MILLISECONDS ) ; <nl> changeFileContent ( config2 , " [ { " + <nl> " \ " request \ " : { " + <nl> " \ " uri \ " : \ " / bar \ " " + <nl> @ @ - 124 , 10 + 123 , 10 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> <nl> waitChangeHappens ( ) ; <nl> <nl> - String result = new String ( out . toByteArray ( ) ) ; <nl> - assertThat ( result . contains ( " Fail " ) , is ( false ) ) ; <nl> - <nl> System . setOut ( oldOut ) ; <nl> System . setErr ( oldErr ) ; <nl> + <nl> + String result = new String ( out . toByteArray ( ) ) ; <nl> + assertThat ( result . contains ( " Fail " ) , is ( false ) ) ; <nl> } <nl> }
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 15cd302 . . a186c9c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> @ @ - 48 , 4 + 49 , 67 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ reload _ configuration _ with _ mulitiple _ modification ( ) throws IOException , InterruptedException { <nl> + final File config1 = tempFolder . newFile ( " config1 . json " ) ; <nl> + changeFileContent ( config1 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / foo \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " foo \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + <nl> + final File config2 = tempFolder . newFile ( " config2 . json " ) ; <nl> + changeFileContent ( config2 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / bar \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " bar \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + <nl> + <nl> + final File setting = tempFolder . newFile ( " settings . json " ) ; <nl> + changeFileContent ( setting , " [ " <nl> + + " { \ " include \ " : \ " " + FilenameUtils . separatorsToUnix ( config1 . getAbsolutePath ( ) ) + " \ " } , " <nl> + + " { \ " include \ " : \ " " + FilenameUtils . separatorsToUnix ( config2 . getAbsolutePath ( ) ) + " \ " } " <nl> + + " ] " ) ; <nl> + <nl> + RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( 9090 ) <nl> + . withSettings ( setting . getAbsolutePath ( ) ) <nl> + . build ( ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar " ) ) ; <nl> + <nl> + changeFileContent ( config1 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / foo \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " foo1 \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + changeFileContent ( config2 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / bar \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " bar1 \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + <nl> + waitChangeHappens ( ) ; <nl> + <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo1 " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar1 " ) ) ; <nl> + } <nl> }
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> index c4a0fcc . . bccd430 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> @ @ - 159 , 6 + 159 , 12 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ return _ expected _ response _ based _ on _ specified _ multi _ query _ request ( ) throws IOException { <nl> + runWithConfiguration ( " query . json " ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / multi - query ? param1 = foo & param2 = bar " ) ) , is ( " response _ for _ multi _ query _ request " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ expected _ response _ status _ code ( ) throws IOException { <nl> runWithConfiguration ( " foo . json " ) ; <nl> assertThat ( helper . getForStatus ( remoteUrl ( " / status " ) ) , is ( 200 ) ) ; <nl> diff - - git a / moco - runner / src / test / resources / query . json b / moco - runner / src / test / resources / query . json <nl> index 18afc7c . . 2ea033f 100644 <nl> - - - a / moco - runner / src / test / resources / query . json <nl> + + + b / moco - runner / src / test / resources / query . json <nl> @ @ - 24 , 5 + 24 , 19 @ @ <nl> { <nl> " text " : " response _ for _ empty _ query _ request " <nl> } <nl> + } , <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / multi - query " , <nl> + " queries " : { <nl> + " param1 " : " foo " , <nl> + " param2 " : " bar " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " response _ for _ multi _ query _ request " <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / MIT - LICENSE . txt b / MIT - LICENSE . txt <nl> index fedac6a . . 97ee4f5 100644 <nl> - - - a / MIT - LICENSE . txt <nl> + + + b / MIT - LICENSE . txt <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> The MIT License ( MIT ) <nl> - Copyright ( c ) 2012 - 2015 ZHENG Ye <nl> + Copyright ( c ) 2012 - 2017 ZHENG Ye <nl> <nl> Permission is hereby granted , free of charge , to any person obtaining <nl> a copy of this software and associated documentation files ( the
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java <nl> index 4e99fdf . . f033a5b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / ParamRequestExtractor . java <nl> @ @ - 15 , 6 + 15 , 7 @ @ public class ParamRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> <nl> @ Override <nl> protected Optional < String [ ] > doExtract ( final HttpRequest request ) { <nl> - return fromNullable ( request . getQueries ( ) . get ( this . param ) ) ; <nl> + String [ ] reference = request . getQueries ( ) . get ( this . param ) ; <nl> + return fromNullable ( reference ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index f8f75cb . . 67f7cc0 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 435 , 6 + 435 , 19 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ exist _ query ( ) throws Exception { <nl> + server . request ( exist ( query ( " foo " ) ) ) . response ( " query " ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / path ? foo " ) ) , is ( " query " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / other ? foo " ) ) , is ( " query " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ starts _ with ( ) throws Exception { <nl> server . request ( startsWith ( uri ( " / foo " ) ) ) . response ( " bar " ) ; <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> index d110713 . . 8d13918 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class MocoTestHelper { <nl> <nl> public String patchForResponse ( final String url , final String content ) throws IOException { <nl> return executeAsString ( Request . Patch ( url ) <nl> - . bodyByteArray ( content . getBytes ( ) , ContentType . DEFAULT _ TEXT ) ) ; <nl> + . bodyString ( content , ContentType . DEFAULT _ TEXT ) ) ; <nl> } <nl> <nl> public HttpResponse execute ( final Request request ) throws IOException {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index 3f54ae4 . . 10d3b64 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 138 , 14 + 138 , 14 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws Exception { <nl> server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> - server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , domain ( " localhost " ) ) , status ( 302 ) ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> - assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> + assertThat ( decodeCookie . domain ( ) , is ( " localhost " ) ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> index b54af9e . . d110713 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> @ @ - 4 , 6 + 4 , 8 @ @ import com . google . common . collect . ImmutableMultimap ; <nl> import com . google . common . io . Resources ; <nl> import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> + import org . apache . http . client . config . CookieSpecs ; <nl> + import org . apache . http . client . config . RequestConfig ; <nl> import org . apache . http . client . fluent . Executor ; <nl> import org . apache . http . client . fluent . Request ; <nl> import org . apache . http . config . Registry ; <nl> @ @ - 13 , 6 + 15 , 7 @ @ import org . apache . http . conn . socket . ConnectionSocketFactory ; <nl> import org . apache . http . conn . socket . PlainConnectionSocketFactory ; <nl> import org . apache . http . conn . ssl . SSLConnectionSocketFactory ; <nl> import org . apache . http . entity . ContentType ; <nl> + import org . apache . http . impl . client . CloseableHttpClient ; <nl> import org . apache . http . impl . client . HttpClients ; <nl> import org . apache . http . impl . conn . PoolingHttpClientConnectionManager ; <nl> import org . apache . http . util . EntityUtils ; <nl> @ @ - 36 , 7 + 39 , 12 @ @ public class MocoTestHelper { <nl> . register ( " https " , new SSLConnectionSocketFactory ( createClientContext ( ) ) ) <nl> . build ( ) ; <nl> HttpClientConnectionManager cm = new PoolingHttpClientConnectionManager ( registry ) ; <nl> - executor = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; <nl> + CloseableHttpClient client = HttpClients . custom ( ) <nl> + . setConnectionManager ( cm ) <nl> + . setDefaultRequestConfig ( RequestConfig . custom ( ) . setCookieSpec ( CookieSpecs . STANDARD ) . build ( ) ) <nl> + . build ( ) ; <nl> + <nl> + executor = Executor . newInstance ( client ) ; <nl> } <nl> <nl> public String get ( final String url ) throws IOException {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoFileRootTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoFileRootTest . java <nl> index b0f28ca . . 432a37e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoFileRootTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoFileRootTest . java <nl> @ @ - 15 , 10 + 15 , 10 @ @ import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . MocoMount . to ; <nl> + import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> - import static com . github . dreamhead . moco . Runner . running ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 52 , 7 + 52 , 9 @ @ public class MocoFileRootTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - Header header = Request . Get ( root ( ) ) . execute ( ) . returnResponse ( ) . getFirstHeader ( " foo " ) ; <nl> + Request request = Request . Get ( root ( ) ) ; <nl> + Header header = helper . execute ( request ) . getFirstHeader ( " foo " ) ; <nl> + <nl> assertThat ( header . getValue ( ) , is ( " foo . response " ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 65 , 7 + 67 , 8 @ @ public class MocoFileRootTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - Header header = Request . Get ( root ( ) ) . execute ( ) . returnResponse ( ) . getFirstHeader ( " foo " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + Header header = response . getFirstHeader ( " foo " ) ; <nl> assertThat ( header . getValue ( ) , is ( " foo . response " ) ) ; <nl> } <nl> } ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoHttpMethodTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoHttpMethodTest . java <nl> index 7c5670f . . 299f762 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoHttpMethodTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoHttpMethodTest . java <nl> @ @ - 58 , 7 + 58 , 8 @ @ public class MocoHttpMethodTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - String response = Request . Delete ( remoteUrl ( " / foo " ) ) . execute ( ) . returnContent ( ) . asString ( ) ; <nl> + Request request = Request . Delete ( remoteUrl ( " / foo " ) ) ; <nl> + String response = helper . executeAsString ( request ) ; <nl> assertThat ( response , is ( " bar " ) ) ; <nl> } <nl> } ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java <nl> index 33499ac . . 9f2e3a2 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco ; <nl> import com . google . common . io . CharStreams ; <nl> import com . google . common . net . HttpHeaders ; <nl> import org . apache . http . client . HttpResponseException ; <nl> - import org . apache . http . client . fluent . Request ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> @ @ - 101 , 7 + 100 , 7 @ @ public class MocoMountTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - org . apache . http . HttpResponse httpResponse = Request . Get ( remoteUrl ( " / dir / dir . response " ) ) . execute ( ) . returnResponse ( ) ; <nl> + org . apache . http . HttpResponse httpResponse = helper . getResponse ( remoteUrl ( " / dir / dir . response " ) ) ; <nl> String value = httpResponse . getFirstHeader ( HttpHeaders . CONTENT _ TYPE ) . getValue ( ) ; <nl> assertThat ( value , is ( " text / plain " ) ) ; <nl> String content = CharStreams . toString ( new InputStreamReader ( httpResponse . getEntity ( ) . getContent ( ) ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java <nl> index 538a105 . . 2f34dee 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java <nl> @ @ - 259 , 7 + 259 , 8 @ @ public class MocoRequestHitTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - String content = Request . Post ( root ( ) ) . bodyForm ( new BasicNameValuePair ( " name " , " dreamhead " ) ) . execute ( ) . returnContent ( ) . asString ( ) ; <nl> + Request request = Request . Post ( root ( ) ) . bodyForm ( new BasicNameValuePair ( " name " , " dreamhead " ) ) ; <nl> + String content = helper . executeAsString ( request ) ; <nl> assertThat ( content , is ( " foobar " ) ) ; <nl> } <nl> } ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> index 0ce8ae9 . . b54af9e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> @ @ - 40 , 22 + 40 , 19 @ @ public class MocoTestHelper { <nl> } <nl> <nl> public String get ( final String url ) throws IOException { <nl> - return get ( Request . Get ( url ) ) ; <nl> + return executeAsString ( Request . Get ( url ) ) ; <nl> } <nl> <nl> public byte [ ] getAsBytes ( final String url ) throws IOException { <nl> - return getAsBytes ( Request . Get ( url ) ) ; <nl> + return EntityUtils . toByteArray ( execute ( Request . Get ( url ) ) . getEntity ( ) ) ; <nl> } <nl> <nl> public HttpResponse getResponse ( final String url ) throws IOException { <nl> - Request request = Request . Get ( url ) ; <nl> - return runRequest ( request ) ; <nl> + return execute ( Request . Get ( url ) ) ; <nl> } <nl> <nl> public String getWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) throws IOException { <nl> - Request request = getRequest ( url , headers ) ; <nl> - <nl> - return get ( request ) ; <nl> + return executeAsString ( getRequest ( url , headers ) ) ; <nl> } <nl> <nl> private Request getRequest ( final String url , final ImmutableMultimap < String , String > headers ) { <nl> @ @ - 68 , 23 + 65 , 11 @ @ public class MocoTestHelper { <nl> <nl> public HttpResponse getResponseWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) <nl> throws IOException { <nl> - return runRequest ( getRequest ( url , headers ) ) ; <nl> - } <nl> - <nl> - private HttpResponse runRequest ( final Request request ) throws IOException { <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + return execute ( getRequest ( url , headers ) ) ; <nl> } <nl> <nl> public String getWithVersion ( final String url , final HttpVersion version ) throws IOException { <nl> - return get ( Request . Get ( url ) . version ( version ) ) ; <nl> - } <nl> - <nl> - private String get ( final Request request ) throws IOException { <nl> - return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> - } <nl> - <nl> - public byte [ ] getAsBytes ( final Request request ) throws IOException { <nl> - return executor . execute ( request ) . returnContent ( ) . asBytes ( ) ; <nl> + return executeAsString ( Request . Get ( url ) . version ( version ) ) ; <nl> } <nl> <nl> public String postContent ( final String url , final String postContent ) throws IOException { <nl> @ @ - 92 , 10 + 77 , 9 @ @ public class MocoTestHelper { <nl> } <nl> <nl> public String postBytes ( final String url , final byte [ ] bytes ) throws IOException { <nl> - Request request = Request . Post ( url ) <nl> + return executeAsString ( Request . Post ( url ) <nl> . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> - . bodyByteArray ( bytes ) ; <nl> - return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + . bodyByteArray ( bytes ) ) ; <nl> } <nl> <nl> public HttpResponse postForResponse ( final String url , final String content ) throws IOException { <nl> @ @ - 104 , 17 + 88 , 15 @ @ public class MocoTestHelper { <nl> <nl> public HttpResponse postForResponse ( final String url , final String content , final String contentType ) <nl> throws IOException { <nl> - Request request = Request . Post ( url ) <nl> + return execute ( Request . Post ( url ) <nl> . addHeader ( CONTENT _ TYPE , contentType ) <nl> - . bodyByteArray ( content . getBytes ( ) ) ; <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + . bodyByteArray ( content . getBytes ( ) ) ) ; <nl> } <nl> <nl> public HttpResponse putForResponse ( final String url , final String content ) throws IOException { <nl> - Request request = Request . Put ( url ) <nl> + return execute ( Request . Put ( url ) <nl> . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> - . bodyByteArray ( content . getBytes ( ) ) ; <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + . bodyByteArray ( content . getBytes ( ) ) ) ; <nl> } <nl> <nl> public HttpResponse putForResponseWithHeaders ( final String url , final String content , <nl> @ @ - 124 , 12 + 106 , 11 @ @ public class MocoTestHelper { <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + return execute ( request ) ; <nl> } <nl> <nl> public HttpResponse deleteForResponse ( final String url ) throws IOException { <nl> - Request request = Request . Delete ( url ) ; <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + return execute ( Request . Delete ( url ) ) ; <nl> } <nl> <nl> public HttpResponse deleteForResponseWithHeaders ( final String url , final ImmutableMultimap < String , String > headers ) <nl> @ @ - 138 , 12 + 119 , 11 @ @ public class MocoTestHelper { <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + return execute ( request ) ; <nl> } <nl> <nl> public HttpResponse headForResponse ( final String url ) throws IOException { <nl> - Request request = Request . Head ( url ) ; <nl> - return executor . execute ( request ) . returnResponse ( ) ; <nl> + return execute ( Request . Head ( url ) ) ; <nl> } <nl> <nl> public String postStream ( final String url , final InputStream stream ) throws IOException { <nl> @ @ - 155 , 12 + 135 , 12 @ @ public class MocoTestHelper { <nl> } <nl> <nl> public int getForStatus ( final String url ) throws IOException { <nl> - return runRequest ( Request . Get ( url ) ) . getStatusLine ( ) . getStatusCode ( ) ; <nl> + return execute ( Request . Get ( url ) ) . getStatusLine ( ) . getStatusCode ( ) ; <nl> } <nl> <nl> public String patchForResponse ( final String url , final String content ) throws IOException { <nl> - Request request = Request . Patch ( url ) . bodyByteArray ( content . getBytes ( ) , ContentType . DEFAULT _ TEXT ) ; <nl> - return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + return executeAsString ( Request . Patch ( url ) <nl> + . bodyByteArray ( content . getBytes ( ) , ContentType . DEFAULT _ TEXT ) ) ; <nl> } <nl> <nl> public HttpResponse execute ( final Request request ) throws IOException { <nl> @ @ - 168 , 7 + 148 , 7 @ @ public class MocoTestHelper { <nl> } <nl> <nl> public String executeAsString ( final Request request ) throws IOException { <nl> - return EntityUtils . toString ( executor . execute ( request ) . returnResponse ( ) . getEntity ( ) ) ; <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> private static final String PROTOCOL = " TLS " ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / MocoConnectionTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / MocoConnectionTest . java <nl> index 6ee2865 . . df2cee0 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / MocoConnectionTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / MocoConnectionTest . java <nl> @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . internal ; <nl> <nl> import com . github . dreamhead . moco . AbstractMocoHttpTest ; <nl> import com . github . dreamhead . moco . Runnable ; <nl> + import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . client . fluent . Request ; <nl> - import org . apache . http . client . fluent . Response ; <nl> import org . junit . Test ; <nl> <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . hamcrest . CoreMatchers . nullValue ; <nl> import static org . junit . Assert . assertThat ; <nl> @ @ - 21 , 8 + 21 , 9 @ @ public class MocoConnectionTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - Response response = Request . Get ( root ( ) ) . version ( HttpVersion . HTTP _ 1 _ 0 ) . addHeader ( " Connection " , " keep - alive " ) . execute ( ) ; <nl> - String connection = response . returnResponse ( ) . getFirstHeader ( " Connection " ) . getValue ( ) ; <nl> + Request request = Request . Get ( root ( ) ) . version ( HttpVersion . HTTP _ 1 _ 0 ) . addHeader ( " Connection " , " keep - alive " ) ; <nl> + HttpResponse response = helper . execute ( request ) ; <nl> + String connection = response . getFirstHeader ( " Connection " ) . getValue ( ) ; <nl> assertThat ( connection , is ( " keep - alive " ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 35 , 8 + 36 , 9 @ @ public class MocoConnectionTest extends AbstractMocoHttpTest { <nl> running ( server , new com . github . dreamhead . moco . Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - Response response = Request . Get ( root ( ) ) . version ( HttpVersion . HTTP _ 1 _ 1 ) . addHeader ( " Connection " , " keep - alive " ) . execute ( ) ; <nl> - assertThat ( response . returnResponse ( ) . getFirstHeader ( " Connection " ) , nullValue ( ) ) ; <nl> + Request request = Request . Get ( root ( ) ) . version ( HttpVersion . HTTP _ 1 _ 1 ) . addHeader ( " Connection " , " keep - alive " ) ; <nl> + HttpResponse response = helper . execute ( request ) ; <nl> + assertThat ( response . getFirstHeader ( " Connection " ) , nullValue ( ) ) ; <nl> } <nl> } ) ; <nl> } <nl> @ @ - 48 , 8 + 50 , 9 @ @ public class MocoConnectionTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - Response response = Request . Get ( root ( ) ) . addHeader ( " Connection " , " close " ) . execute ( ) ; <nl> - assertThat ( response . returnResponse ( ) . getFirstHeader ( " Connection " ) , nullValue ( ) ) ; <nl> + Request request = Request . Get ( root ( ) ) . addHeader ( " Connection " , " close " ) ; <nl> + HttpResponse response = helper . execute ( request ) ; <nl> + assertThat ( response . getFirstHeader ( " Connection " ) , nullValue ( ) ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMountStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMountStandaloneTest . java <nl> index 6c4b510 . . 62bd3a6 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMountStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoMountStandaloneTest . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ public class MocoMountStandaloneTest extends AbstractMocoStandaloneTest { <nl> public void should _ mount _ dir _ to _ uri _ with _ response ( ) throws IOException { <nl> runWithConfiguration ( " mount . json " ) ; <nl> <nl> - org . apache . http . HttpResponse httpResponse = org . apache . http . client . fluent . Request . Get ( remoteUrl ( " / mount - response / mount . response " ) ) . execute ( ) . returnResponse ( ) ; <nl> + org . apache . http . HttpResponse httpResponse = helper . getResponse ( remoteUrl ( " / mount - response / mount . response " ) ) ; <nl> String value = httpResponse . getFirstHeader ( HttpHeaders . CONTENT _ TYPE ) . getValue ( ) ; <nl> assertThat ( value , is ( " text / plain " ) ) ; <nl> String content = CharStreams . toString ( new InputStreamReader ( httpResponse . getEntity ( ) . getContent ( ) ) ) ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> index fb7f476 . . 4d0c4af 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> import org . apache . http . Header ; <nl> import org . apache . http . client . HttpResponseException ; <nl> - import org . apache . http . client . fluent . Request ; <nl> import org . junit . After ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 87 , 7 + 86 , 7 @ @ public class SettingRunnerTest { <nl> runner = new SettingRunner ( stream , createStartArgs ( 12306 ) ) ; <nl> runner . run ( ) ; <nl> <nl> - Header header = Request . Get ( remoteUrl ( " / foo " ) ) . execute ( ) . returnResponse ( ) . getFirstHeader ( " foo " ) ; <nl> + Header header = helper . getResponse ( remoteUrl ( " / foo " ) ) . getFirstHeader ( " foo " ) ; <nl> assertThat ( header . getValue ( ) , is ( " bar " ) ) ; <nl> } <nl>
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 61d1c00 . . 194f499 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 16 , 7 + 16 , 7 @ @ buildscript { <nl> <nl> project . ext { <nl> logbackVersion = ' 1 . 2 . 3 ' <nl> - commonsCliVersion = ' 1 . 3 . 1 ' <nl> + commonsCliVersion = ' 1 . 4 ' <nl> } <nl> <nl> project . dependencies {
diff - - git a / build . gradle b / build . gradle <nl> index 2cc59cc . . e57ea0f 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 3 . 4 . 1 ' <nl> + gradleVersion = ' 3 . 5 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 13f80ae . . 9c66bbe 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Thu Apr 06 21 : 33 : 39 CST 2017 <nl> + # Thu Apr 13 21 : 17 : 15 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 4 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 5 - bin . zip
diff - - git a / build . gradle b / build . gradle <nl> index e228f9f . . 2cc59cc 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 82 , 7 + 82 , 7 @ @ subprojects { <nl> mockitoVersion = ' 2 . 7 . 22 ' <nl> httpComponentVersion = ' 4 . 5 . 3 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> - freemarkerVersion = ' 2 . 3 . 23 ' <nl> + freemarkerVersion = ' 2 . 3 . 26 - incubating ' <nl> } <nl> <nl> project . jar {
diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index 40b18ea . . f663ae4 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Global Settings <nl> We could put all configurations in one single configuration files . But if we want stub many services in a single Moco instance , the configurations file would be huge . <nl> <nl> - In this case , we can use settings file to separate our configurations for different into different configugration files . <nl> + In this case , we can use settings file to separate our configurations for different into different configuration files . <nl> <nl> It ' s example time . We have two services to stub : <nl> <nl> @ @ - 191 , 4 + 191 , 4 @ @ In some cases , you may want to setup a global response for all response , for exa <nl> ] <nl> ` ` ` <nl> <nl> - When you issue any request to server , it will return response with " foo " , " bar " header . <nl> \ No newline at end of file <nl> + When you issue any request to server , it will return response with " foo " , " bar " header .
diff - - git a / build . gradle b / build . gradle <nl> index eead882 . . 577e20c 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 80 , 7 + 80 , 7 @ @ subprojects { <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 6 . 3 ' <nl> - httpComponentVersion = ' 4 . 5 . 2 ' <nl> + httpComponentVersion = ' 4 . 5 . 3 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 ' <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 8b2febc . . d13dd3c 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 3 . 3 ' <nl> + gradleVersion = ' 3 . 4 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index 632d37f . . 13f80ae 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Wed Jan 04 22 : 37 : 01 CST 2017 <nl> + # Thu Apr 06 21 : 33 : 39 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 3 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 4 . 1 - bin . zip
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> index 3382d9a . . 561f636 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> @ @ - 7 , 11 + 7 , 13 @ @ import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> + <nl> public class HttpProtocolVersionDeserializer extends JsonDeserializer < HttpProtocolVersion > { <nl> @ Override <nl> public HttpProtocolVersion deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> try { <nl> - return HttpProtocolVersion . versionOf ( jp . getText ( ) . trim ( ) ) ; <nl> + return HttpProtocolVersion . versionOf ( strip ( jp . getText ( ) ) ) ; <nl> } catch ( IllegalArgumentException e ) { <nl> return ( HttpProtocolVersion ) ctx . handleUnexpectedToken ( HttpProtocolVersion . class , jp ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> index dfd7e54 . . 07b0401 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> @ @ - 8 , 10 + 8 , 11 @ @ import com . github . dreamhead . moco . model . MessageContent ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> <nl> public class MessageContentDeserializer extends JsonDeserializer < MessageContent > { <nl> @ Override <nl> public MessageContent deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> - return content ( jp . getText ( ) . trim ( ) ) ; <nl> + return content ( strip ( jp . getText ( ) ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java <nl> new file mode 100644 <nl> index 0000000 . . 0933840 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import static com . google . common . base . Strings . isNullOrEmpty ; <nl> + <nl> + public final class StringUtil { <nl> + public static String strip ( final String text ) { <nl> + if ( isNullOrEmpty ( text ) ) { <nl> + return " " ; <nl> + } <nl> + <nl> + return text . trim ( ) ; <nl> + } <nl> + <nl> + private StringUtil ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> index 6c80c52 . . 75ac7af 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> @ @ - 34 , 7 + 34 , 14 @ @ public class HttpsArgsParser extends StartArgsParser { <nl> throw new ParseArgException ( " only one arg not allowed " ) ; <nl> } <nl> <nl> - return httpsArgs ( ) . withPort ( getPort ( port ) ) . withShutdownPort ( getPort ( shutdownPort ) ) . withConfigurationFile ( config ) . withSettings ( globalSettings ) . withEnv ( env ) . withHttpsArg ( httpsArg ( cmd ) ) . build ( ) ; <nl> + return httpsArgs ( ) <nl> + . withPort ( getPort ( port ) ) <nl> + . withShutdownPort ( getPort ( shutdownPort ) ) <nl> + . withConfigurationFile ( config ) <nl> + . withSettings ( globalSettings ) <nl> + . withEnv ( env ) <nl> + . withHttpsArg ( httpsArg ( cmd ) ) <nl> + . build ( ) ; <nl> } <nl> <nl> private HttpsArg httpsArg ( final CommandLine cmd ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> index d7cb4f9 . . e59e412 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> @ @ - 10 , 12 + 10 , 14 @ @ import com . github . dreamhead . moco . parser . model . LatencyContainer ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> + <nl> public class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { <nl> @ Override <nl> public CookieContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return CookieContainer . newContainer ( jp . getText ( ) . trim ( ) ) ; <nl> + return CookieContainer . newContainer ( strip ( jp . getText ( ) ) ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index 8a853d1 . . b4c7172 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContainer ; <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> <nl> public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> @ @ - 26 , 7 + 27 , 7 @ @ public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> jp . nextToken ( ) ; <nl> <nl> - String target = jp . getText ( ) . trim ( ) ; <nl> + String target = strip ( jp . getText ( ) ) ; <nl> if ( isForFileContainer ( target ) ) { <nl> return toFileContainer ( jp ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> index b7c9472 . . 14ddfcb 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 10 , 13 + 10 , 14 @ @ import com . github . dreamhead . moco . parser . model . ProxyContainer ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . ProxyContainer . builder ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> <nl> public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> @ Override <nl> public ProxyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return builder ( ) . withUrl ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + return builder ( ) . withUrl ( strip ( jp . getText ( ) ) ) . build ( ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index 9ddd13a . . b5416ce 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ import java . util . Map ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . getTemplateName ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> @ @ - 29 , 7 + 30 , 7 @ @ public class TextContainerDeserializerHelper { <nl> public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> - String operation = jp . getText ( ) . trim ( ) ; <nl> + String operation = strip ( jp . getText ( ) ) ; <nl> <nl> JsonToken token = jp . nextToken ( ) ; <nl> if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> @ @ - 39 , 7 + 40 , 7 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> <nl> if ( token = = JsonToken . VALUE _ STRING ) { <nl> - String text = jp . getText ( ) . trim ( ) ; <nl> + String text = strip ( jp . getText ( ) ) ; <nl> jp . nextToken ( ) ; <nl> return builder ( ) . withOperation ( operation ) . withText ( text ) . build ( ) ; <nl> } <nl> @ @ - 49 , 7 + 50 , 7 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> <nl> protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> - return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + return builder ( ) . withText ( strip ( jp . getText ( ) ) ) . build ( ) ; <nl> } <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 20a6499 . . c50c4b2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 196 , 7 + 196 , 8 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> final CookieContainer cookieContainer ) { <nl> try { <nl> Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieAttribute [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , <nl> + getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index f361e45 . . 39eba72 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class GlobalSettingParserTest { <nl> assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; <nl> } <nl> <nl> - private InputStream getResourceAsStream ( String filename ) { <nl> + private InputStream getResourceAsStream ( final String filename ) { <nl> return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> index 118a219 . . f7bcd8f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> @ @ - 10 , 6 + 10 , 10 @ @ import java . io . IOException ; <nl> public class HttpProtocolVersionDeserializer extends JsonDeserializer < HttpProtocolVersion > { <nl> @ Override <nl> public HttpProtocolVersion deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> - return HttpProtocolVersion . versionOf ( jp . getText ( ) ) ; <nl> + try { <nl> + return HttpProtocolVersion . versionOf ( jp . getText ( ) ) ; <nl> + } catch ( IllegalArgumentException e ) { <nl> + return ( HttpProtocolVersion ) ctx . handleUnexpectedToken ( HttpProtocolVersion . class , jp ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> index 5a382f1 . . fb7f476 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public class SettingRunnerTest { <nl> return httpArgs ( ) . withPort ( port ) . build ( ) ; <nl> } <nl> <nl> - private InputStream getResourceAsStream ( String filename ) { <nl> + private InputStream getResourceAsStream ( final String filename ) { <nl> return SettingRunnerTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> index 5e3b763 . . 3917b5f 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { <nl> helper . get ( root ( ) ) ; <nl> } <nl> <nl> - private void shutdownMoco ( int shutdownPort , String shutdownMocoKey ) throws IOException { <nl> + private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { <nl> Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; <nl> socket . setSoLinger ( false , 0 ) ; <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index 727970b . . 9ddd13a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> + import static com . github . dreamhead . moco . parser . model . TextContainer . getTemplateName ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> @ @ - 28 , 30 + 29 , 25 @ @ public class TextContainerDeserializerHelper { <nl> public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> - TextContainer . Builder builder = builder ( ) ; <nl> String operation = jp . getText ( ) . trim ( ) ; <nl> - builder . withOperation ( operation ) ; <nl> + <nl> JsonToken token = jp . nextToken ( ) ; <nl> if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> - return template ( jp , builder ) ; <nl> + Template template = jp . readValueAs ( Template . class ) ; <nl> + jp . nextToken ( ) ; <nl> + return template . template ( ) ; <nl> } <nl> <nl> if ( token = = JsonToken . VALUE _ STRING ) { <nl> String text = jp . getText ( ) . trim ( ) ; <nl> jp . nextToken ( ) ; <nl> - return builder . withText ( text ) . build ( ) ; <nl> + return builder ( ) . withOperation ( operation ) . withText ( text ) . build ( ) ; <nl> } <nl> } <nl> <nl> return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> - private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> - Template template = jp . readValueAs ( Template . class ) ; <nl> - jp . nextToken ( ) ; <nl> - return builder . withText ( template . with ) . withProps ( template . toTemplateVars ( ) ) . build ( ) ; <nl> - } <nl> - <nl> protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> } <nl> @ @ - 85 , 5 + 81 , 9 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> } <nl> + <nl> + public TextContainer template ( ) { <nl> + return builder ( ) . withOperation ( getTemplateName ( ) ) . withText ( with ) . withProps ( toTemplateVars ( ) ) . build ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 043fe39 . . e28a0c9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 94 , 6 + 94 , 10 @ @ public class TextContainer implements Container { <nl> return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; <nl> } <nl> <nl> + public static String getTemplateName ( ) { <nl> + return TEMPLATE _ NAME ; <nl> + } <nl> + <nl> public boolean isForTemplate ( ) { <nl> return isForTemplate ( this . operation ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> index f543c4c . . 3020878 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . deserializer ; <nl> <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> @ @ - 22 , 15 + 23 , 20 @ @ public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContai <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> jp . nextToken ( ) ; <nl> InternalLatencyContainer container = get ( jp . readValuesAs ( InternalLatencyContainer . class ) , 0 ) ; <nl> - return LatencyContainer . latencyWithUnit ( container . duration , <nl> - TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; <nl> + return container . toLatencyContainer ( ) ; <nl> } <nl> <nl> return ( LatencyContainer ) ctxt . handleUnexpectedToken ( LatencyContainer . class , jp ) ; <nl> } <nl> <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> private static class InternalLatencyContainer { <nl> - public long duration ; <nl> - public String unit ; <nl> + private long duration ; <nl> + private String unit ; <nl> + <nl> + private LatencyContainer toLatencyContainer ( ) { <nl> + return LatencyContainer . latencyWithUnit ( duration , <nl> + TimeUnit . valueOf ( unit . toUpperCase ( ) + ' S ' ) ) ; <nl> + } <nl> } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> index f4ec4f2 . . 9d46046 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . deserializer ; <nl> <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> @ @ - 28 , 14 + 29 , 15 @ @ public class CookieContainerDeserializer extends JsonDeserializer < CookieContaine <nl> return ( CookieContainer ) ctxt . handleUnexpectedToken ( CookieContainer . class , jp ) ; <nl> } <nl> <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public static class InternalCookieContainer { <nl> - public String value ; <nl> - public String path ; <nl> - public String domain ; <nl> - public LatencyContainer maxAge ; <nl> - public boolean secure ; <nl> - public boolean httpOnly ; <nl> - public String template ; <nl> + private String value ; <nl> + private String path ; <nl> + private String domain ; <nl> + private LatencyContainer maxAge ; <nl> + private boolean secure ; <nl> + private boolean httpOnly ; <nl> + private String template ; <nl> <nl> public CookieContainer toContainer ( ) { <nl> return CookieContainer . newContainer ( value , path , domain , maxAge , secure , httpOnly , template ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index e2f6c38 . . b936f71 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . deserializer ; <nl> <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> @ @ - 58 , 9 + 59 , 10 @ @ public class TextContainerDeserializerHelper { <nl> return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> } <nl> <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> private static class Template { <nl> - public String with ; <nl> - public Map < String , TextContainer > vars ; <nl> + private String with ; <nl> + private Map < String , TextContainer > vars ; <nl> <nl> private ImmutableMap < String , TextContainer > toTemplateVars ( ) { <nl> return copyOf ( transformEntries ( vars , toLocalContainer ( ) ) ) ;
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 60a2a5a . . 253b320 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 15 , 7 + 15 , 7 @ @ buildscript { <nl> } <nl> <nl> project . ext { <nl> - logbackVersion = ' 1 . 1 . 8 ' <nl> + logbackVersion = ' 1 . 1 . 9 ' <nl> commonsCliVersion = ' 1 . 3 . 1 ' <nl> } <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 87272c0 . . 47c75ca 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> public TemporaryFolder folder = new TemporaryFolder ( ) ; <nl> <nl> @ Override <nl> - protected RestServer createServer ( int port ) { <nl> + protected RestServer createServer ( final int port ) { <nl> return restServer ( port , log ( ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoSocketTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoSocketTest . java <nl> index 0c88e65 . . 63333e4 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoSocketTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoSocketTest . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class MocoSocketTest { <nl> hit . verify ( by ( " foo " ) , once ( ) ) ; <nl> } <nl> <nl> - private String times ( String base , int times ) { <nl> + private String times ( final String base , final int times ) { <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> for ( int i = 0 ; i < times ; i + + ) { <nl> sb . append ( base ) ; <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class MocoSocketTest { <nl> return sb . toString ( ) ; <nl> } <nl> <nl> - private String line ( String text ) { <nl> + private String line ( final String text ) { <nl> return text + " \ r \ n " ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index f53da18 . . 24aba1f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 763 , 4 + 763 , 4 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIdMatchers . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIdMatchers . java <nl> index 2f6a937 . . 95a7de4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIdMatchers . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIdMatchers . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . RestIdMatcher ; <nl> <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> - import static com . github . dreamhead . moco . rest . RestIds . checkId ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . github . dreamhead . moco . util . URLs . join ; <nl> import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / InternalApisTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / InternalApisTest . java <nl> index 8d8c1f1 . . 991bd89 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / InternalApisTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / InternalApisTest . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class InternalApisTest { <nl> assertThat ( matcher . match ( requestByUri ( " targetshello " ) ) , is ( false ) ) ; <nl> } <nl> <nl> - private DefaultHttpRequest requestByUri ( String uri ) { <nl> + private DefaultHttpRequest requestByUri ( final String uri ) { <nl> return DefaultHttpRequest . builder ( ) . withUri ( uri ) . build ( ) ; <nl> } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 4569737 . . 8b2febc 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 6 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 5 . 5 ' <nl> + mockitoVersion = ' 2 . 6 . 3 ' <nl> httpComponentVersion = ' 4 . 5 . 2 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 '
diff - - git a / build . gradle b / build . gradle <nl> index 3faa4e0 . . 4569737 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 4 . Final ' <nl> slf4jVersion = ' 1 . 7 . 22 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 8 . 4 ' <nl> + jacksonVersion = ' 2 . 8 . 6 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 2 . 5 . 5 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> index d4c0492 . . 5c13814 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> @ @ - 12 , 15 + 12 , 15 @ @ import static com . google . common . collect . ImmutableList . of ; <nl> public abstract class FileRunner implements Runner { <nl> private Runner runner ; <nl> <nl> - protected abstract Runner createRunner ( ) ; <nl> + protected abstract Runner newRunner ( ) ; <nl> <nl> private FileRunner ( ) { <nl> - this . runner = createRunner ( ) ; <nl> + this . runner = newRunner ( ) ; <nl> } <nl> <nl> public void restart ( ) { <nl> this . runner . stop ( ) ; <nl> - this . runner = createRunner ( ) ; <nl> + this . runner = newRunner ( ) ; <nl> this . runner . run ( ) ; <nl> } <nl> <nl> @ @ - 41 , 7 + 41 , 7 @ @ public abstract class FileRunner implements Runner { <nl> public static FileRunner createConfigurationFileRunner ( final File file , final StartArgs startArgs ) { <nl> return new FileRunner ( ) { <nl> @ Override <nl> - protected Runner createRunner ( ) { <nl> + protected Runner newRunner ( ) { <nl> return newJsonRunnerWithStreams ( of ( toInputStream ( file ) ) , startArgs ) ; <nl> } <nl> } ; <nl> @ @ - 50 , 7 + 50 , 7 @ @ public abstract class FileRunner implements Runner { <nl> public static FileRunner createSettingFileRunner ( final File settingsFile , final StartArgs startArgs ) { <nl> return new FileRunner ( ) { <nl> @ Override <nl> - protected Runner createRunner ( ) { <nl> + protected Runner newRunner ( ) { <nl> return new SettingRunner ( toInputStream ( settingsFile ) , startArgs ) ; <nl> } <nl> } ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index c9d119f . . 88c5abd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 34 , 10 + 34 , 10 @ @ public final class JsonRunner implements Runner { <nl> private final Server server ; <nl> <nl> private JsonRunner ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> - this . server = createServer ( settings , startArgs ) ; <nl> + this . server = newServer ( settings , startArgs ) ; <nl> } <nl> <nl> - private Server createServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> + private Server newServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> if ( startArgs . isSocket ( ) ) { <nl> return createSocketServer ( settings , startArgs ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> index 88f4d52 . . b0c2c10 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class StandaloneRunner { <nl> private Runner runner ; <nl> <nl> public void run ( final Server server ) { <nl> - runner = createRunner ( server ) ; <nl> + runner = newRunner ( server ) ; <nl> runner . start ( ) ; <nl> logger . info ( " Server is started at { } " , server . port ( ) ) ; <nl> } <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class StandaloneRunner { <nl> super ( ) ; <nl> } <nl> <nl> - private Runner createRunner ( final Server server ) { <nl> + private Runner newRunner ( final Server server ) { <nl> if ( server instanceof HttpServer ) { <nl> return Runner . runner ( ( HttpServer ) server ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> index 2995f13 . . d4c0492 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ public abstract class FileRunner implements Runner { <nl> <nl> protected abstract Runner createRunner ( ) ; <nl> <nl> - protected FileRunner ( ) { <nl> + private FileRunner ( ) { <nl> this . runner = createRunner ( ) ; <nl> } <nl>
diff - - git a / build . gradle b / build . gradle <nl> index afbcc75 . . 3faa4e0 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 5 . 0 ' <nl> + mockitoVersion = ' 2 . 5 . 5 ' <nl> httpComponentVersion = ' 4 . 5 . 2 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java <nl> index 5094263 . . d89ab68 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / PlainExtractor . java <nl> @ @ - 7 , 14 + 7 , 14 @ @ import com . google . common . base . Optional ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class PlainExtractor < T > implements RequestExtractor < T > { <nl> - private final T text ; <nl> + private final T object ; <nl> <nl> - public PlainExtractor ( final T text ) { <nl> - this . text = text ; <nl> + public PlainExtractor ( final T object ) { <nl> + this . object = object ; <nl> } <nl> <nl> @ Override <nl> public Optional < T > extract ( final Request request ) { <nl> - return of ( this . text ) ; <nl> + return of ( this . object ) ; <nl> } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index d0abe5b . . afbcc75 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 3 . 2 . 1 ' <nl> + gradleVersion = ' 3 . 3 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index fc03183 . . 632d37f 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Tue Nov 29 20 : 34 : 02 CST 2016 <nl> + # Wed Jan 04 22 : 37 : 01 CST 2017 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 2 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 3 - bin . zip <nl> diff - - git a / gradlew b / gradlew <nl> index 4ef3a87 . . 4453cce 100755 <nl> - - - a / gradlew <nl> + + + b / gradlew <nl> @ @ - 155 , 13 + 155 , 14 @ @ if $ cygwin ; then <nl> fi <nl> <nl> # Escape application args <nl> - for s in " $ { @ } " ; do <nl> - s = \ " $ s \ " <nl> - APP _ ARGS = $ APP _ ARGS " " $ s <nl> - done <nl> + save ( ) { <nl> + for i do printf % s \ \ n " $ i " | sed " s / ' / ' \ \ \ \ ' ' / g ; 1s / ^ / ' / ; \ $ s / \ $ / ' \ \ \ \ / " ; done <nl> + echo " " <nl> + } <nl> + APP _ ARGS = $ ( save " $ @ " ) <nl> <nl> # Collect all arguments for the java command , following the shell quoting and substitution rules <nl> - eval set - - " $ DEFAULT _ JVM _ OPTS " " $ JAVA _ OPTS " " $ GRADLE _ OPTS " " \ " - Dorg . gradle . appname = $ APP _ BASE _ NAME \ " " - classpath " \ " $ CLASSPATH \ " " org . gradle . wrapper . GradleWrapperMain " $ APP _ ARGS " <nl> + eval set - - $ DEFAULT _ JVM _ OPTS $ JAVA _ OPTS $ GRADLE _ OPTS " \ " - Dorg . gradle . appname = $ APP _ BASE _ NAME \ " " - classpath " \ " $ CLASSPATH \ " " org . gradle . wrapper . GradleWrapperMain " $ APP _ ARGS " <nl> <nl> # by default we should be in the correct project dir , but when run from Finder on Mac , the cwd is wrong <nl> if [ " $ ( uname ) " = " Darwin " ] & & [ " $ HOME " = " $ PWD " ] ; then
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> index 9d0134a . . 142cc28 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ public abstract class AbstractRunnerTest { <nl> } <nl> } <nl> <nl> - protected void changeFileContent ( File response , String content ) { <nl> + protected void changeFileContent ( final File response , final String content ) { <nl> PrintStream stream = null ; <nl> try { <nl> stream = new PrintStream ( new FileOutputStream ( response ) ) ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 0b0717c . . 15cd302 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 21 , 24 + 21 , 28 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> @ Test <nl> public void should _ reload _ configuration ( ) throws IOException , InterruptedException { <nl> final File config = tempFolder . newFile ( " config . json " ) ; <nl> - changeFileContent ( config , " [ { \ " response \ " : { " + <nl> - " \ " text \ " : \ " foo \ " " + <nl> - " } } ] " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foo \ " " <nl> + + " } } ] " ) ; <nl> <nl> final File setting = tempFolder . newFile ( " settings . json " ) ; <nl> String path = FilenameUtils . separatorsToUnix ( config . getAbsolutePath ( ) ) ; <nl> - changeFileContent ( setting , " [ { " + <nl> - " \ " include \ " : \ " " + path + " \ " " + <nl> - " } ] " ) ; <nl> + changeFileContent ( setting , " [ { " <nl> + + " \ " include \ " : \ " " + path + " \ " " <nl> + + " } ] " ) ; <nl> <nl> RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withShutdownPort ( 9090 ) . withSettings ( setting . getAbsolutePath ( ) ) . build ( ) ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( 9090 ) <nl> + . withSettings ( setting . getAbsolutePath ( ) ) <nl> + . build ( ) ) ; <nl> runner . run ( ) ; <nl> assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> <nl> - changeFileContent ( config , " [ { \ " response \ " : { " + <nl> - " \ " text \ " : \ " foobar \ " " + <nl> - " } } ] " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foobar \ " " <nl> + + " } } ] " ) ; <nl> <nl> waitChangeHappens ( ) ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 7c40e35 . . bb1b144 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 79 , 18 + 79 , 22 @ @ public final class Moco { <nl> public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoConfig . . . configs ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , <nl> - checkNotNull ( monitor , " Monitor should not be null " ) , configs ) ; <nl> + checkNotNull ( monitor , " Monitor should not be null " ) , <nl> + checkNotNull ( configs , " Configuration should not be null " ) ) ; <nl> } <nl> <nl> - public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> + public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , <nl> + final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , <nl> ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , <nl> - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> + checkNotNull ( monitor2 , " Monitor should not be null " ) , <nl> + checkNotNull ( monitors , " Monitors should not be null " ) ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoConfig . . . configs ) { <nl> - return ActualHttpServer . createQuietServer ( Optional . < Integer > absent ( ) , configs ) ; <nl> + return ActualHttpServer . createQuietServer ( Optional . < Integer > absent ( ) , <nl> + checkNotNull ( configs , " Configuration should not be null " ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoMonitor monitor , final MocoConfig . . . configs ) { <nl> @ @ - 144 , 7 + 148 , 7 @ @ public final class Moco { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualSocketServer . createServerWithMonitor ( of ( port ) , <nl> ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , <nl> - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> } <nl> <nl> <nl> @ @ - 494 , 7 + 498 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , <nl> @ @ - 510 , 7 + 514 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , <nl> @ @ - 519 , 12 + 523 , 14 @ @ public final class Moco { <nl> ) ; <nl> } <nl> <nl> - public static ContentResource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final String template , <nl> + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , <nl> checkNotNull ( variables , " Template variable should not be null " ) ) ; <nl> } <nl> <nl> - public static ContentResource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final ContentResource template , <nl> + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> @ @ - 534 , 11 + 540 , 13 @ @ public final class Moco { <nl> } <nl> <nl> public static Failover failover ( final String file ) { <nl> - return new Failover ( ApiUtils . failoverExecutor ( checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER ) ; <nl> + return new Failover ( ApiUtils . failoverExecutor ( <nl> + checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER ) ; <nl> } <nl> <nl> public static Failover playback ( final String file ) { <nl> - return new Failover ( ApiUtils . failoverExecutor ( checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK ) ; <nl> + return new Failover ( ApiUtils . failoverExecutor ( <nl> + checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK ) ; <nl> } <nl> <nl> public static MocoEventTrigger complete ( final MocoEventAction action ) { <nl> @ @ - 546 , 11 + 554 , 13 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoEventAction async ( final MocoEventAction action ) { <nl> - return async ( checkNotNull ( action , " Action should not be null " ) , latency ( LatencyProcedure . DEFAULT _ LATENCY , TimeUnit . MILLISECONDS ) ) ; <nl> + return async ( checkNotNull ( action , " Action should not be null " ) , <nl> + latency ( LatencyProcedure . DEFAULT _ LATENCY , TimeUnit . MILLISECONDS ) ) ; <nl> } <nl> <nl> public static MocoEventAction async ( final MocoEventAction action , final LatencyProcedure procedure ) { <nl> - return new MocoAsyncAction ( checkNotNull ( action , " Action should not be null " ) , checkNotNull ( procedure , " Procedure should not be null " ) ) ; <nl> + return new MocoAsyncAction ( checkNotNull ( action , " Action should not be null " ) , <nl> + checkNotNull ( procedure , " Procedure should not be null " ) ) ; <nl> } <nl> <nl> public static MocoEventAction get ( final String url ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 147f470 . . 08c0fed 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 31 , 7 + 31 , 8 @ @ import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> public final class ApiUtils { <nl> - public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> + public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , <nl> + final MocoMonitor [ ] monitors ) { <nl> return new CompositeMonitor ( asIterable ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> @ @ - 45 , 7 + 46 , 8 @ @ public final class ApiUtils { <nl> } ; <nl> } <nl> <nl> - public static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ImmutableMap < String , Variable > toVariables ( <nl> + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java <nl> index b6c54fe . . d50cbfc 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco ; <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> <nl> public class AbstractMocoHttpTest extends BaseMocoHttpTest < HttpServer > { <nl> - protected HttpServer createServer ( int port ) { <nl> + protected HttpServer createServer ( final int port ) { <nl> return httpServer ( port ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> index 520bfe4 . . f722806 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> @ @ - 22 , 4 + 22 , 4 @ @ public class ClasspathFileResourceReaderTest { <nl> ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , Optional . < Charset > absent ( ) ) ; <nl> reader . readFor ( Optional . < Request > absent ( ) ) ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> index 6678ad3 . . 9a52250 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> @ @ - 20 , 18 + 20 , 22 @ @ public class DynamicConfigurationRunnerTest extends AbstractRunnerTest { <nl> @ Test <nl> public void should _ reload _ configuration ( ) throws IOException , InterruptedException { <nl> final File config = tempFolder . newFile ( ) ; <nl> - changeFileContent ( config , " [ { \ " response \ " : { " + <nl> - " \ " text \ " : \ " foo \ " " + <nl> - " } } ] " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foo \ " " <nl> + + " } } ] " ) ; <nl> <nl> RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withShutdownPort ( 9090 ) . withConfigurationFile ( config . getAbsolutePath ( ) ) . build ( ) ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( 9090 ) <nl> + . withConfigurationFile ( config . getAbsolutePath ( ) ) <nl> + . build ( ) ) ; <nl> runner . run ( ) ; <nl> assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> <nl> - changeFileContent ( config , " [ { \ " response \ " : { " + <nl> - " \ " text \ " : \ " foobar \ " " + <nl> - " } } ] " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foobar \ " " <nl> + + " } } ] " ) ; <nl> <nl> waitChangeHappens ( ) ; <nl> <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> index e716a0c . . 5a382f1 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> @ @ - 109 , 11 + 109 , 11 @ @ public class SettingRunnerTest { <nl> helper . get ( remoteUrl ( " / foo " ) ) ; <nl> } <nl> <nl> - private StartArgs createStartArgs ( int port , String env ) { <nl> + private StartArgs createStartArgs ( final int port , final String env ) { <nl> return httpArgs ( ) . withPort ( port ) . withEnv ( env ) . build ( ) ; <nl> } <nl> <nl> - private StartArgs createStartArgs ( int port ) { <nl> + private StartArgs createStartArgs ( final int port ) { <nl> return httpArgs ( ) . withPort ( port ) . build ( ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> index 1bcffc8 . . 5e3b763 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> @ @ - 25 , 7 + 25 , 11 @ @ public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { <nl> @ Before <nl> public void setup ( ) { <nl> RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withShutdownPort ( SHUTDOWN _ PORT ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( SHUTDOWN _ PORT ) <nl> + . withConfigurationFile ( " src / test / resources / foo . json " ) <nl> + . build ( ) ) ; <nl> } <nl> <nl> @ Test ( expected = HttpHostConnectException . class )
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / AbstractMocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / AbstractMocoStandaloneTest . java <nl> index 0b438e7 . . 0d94c42 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / AbstractMocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / AbstractMocoStandaloneTest . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class AbstractMocoStandaloneTest { <nl> } <nl> } <nl> <nl> - protected void runWithConfiguration ( String . . . resourceNames ) { <nl> + protected void runWithConfiguration ( final String . . . resourceNames ) { <nl> try { <nl> runner = newRunner ( resourceNames ) ; <nl> runner . run ( ) ; <nl> @ @ - 33 , 7 + 33 , 7 @ @ public class AbstractMocoStandaloneTest { <nl> } <nl> } <nl> <nl> - private JsonRunner newRunner ( String [ ] resourceNames ) throws IOException { <nl> + private JsonRunner newRunner ( final String [ ] resourceNames ) throws IOException { <nl> ImmutableList . Builder < InputStream > builder = ImmutableList . builder ( ) ; <nl> for ( String resourceName : resourceNames ) { <nl> builder . add ( Resources . getResource ( resourceName ) . openStream ( ) ) ;
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java <nl> index 780e8d1 . . 57b31f3 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java <nl> @ @ - 5 , 16 + 5 , 18 @ @ import javax . net . ssl . X509TrustManager ; <nl> import java . security . cert . CertificateException ; <nl> import java . security . cert . X509Certificate ; <nl> <nl> - public class AnyCertificateAcceptingTrustManagerFactory { <nl> + public final class AnyCertificateAcceptingTrustManagerFactory { <nl> <nl> private static final TrustManager DUMMY _ TRUST _ MANAGER = new X509TrustManager ( ) { <nl> @ Override <nl> - public void checkClientTrusted ( X509Certificate [ ] x509Certificates , String s ) throws CertificateException { <nl> + public void checkClientTrusted ( final X509Certificate [ ] x509Certificates , final String s ) <nl> + throws CertificateException { <nl> / / always trust <nl> } <nl> <nl> @ Override <nl> - public void checkServerTrusted ( X509Certificate [ ] x509Certificates , String s ) throws CertificateException { <nl> + public void checkServerTrusted ( final X509Certificate [ ] x509Certificates , final String s ) <nl> + throws CertificateException { <nl> / / always trust <nl> } <nl> <nl> @ @ - 27 , 4 + 29 , 7 @ @ public class AnyCertificateAcceptingTrustManagerFactory { <nl> public static TrustManager [ ] getTrustManagers ( ) { <nl> return new TrustManager [ ] { DUMMY _ TRUST _ MANAGER } ; <nl> } <nl> + <nl> + private AnyCertificateAcceptingTrustManagerFactory ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> index 823b8e0 . . ee563d0 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import static com . google . common . net . HttpHeaders . CONTENT _ TYPE ; <nl> import static com . google . common . net . MediaType . PLAIN _ TEXT _ UTF _ 8 ; <nl> <nl> public class MocoTestHelper { <nl> - private final Executor EXECUTOR ; <nl> + private final Executor executor ; <nl> <nl> public MocoTestHelper ( ) { <nl> / / make fluent HC accept any certificates so we can test HTTPS calls as well <nl> @ @ - 35 , 29 + 35 , 29 @ @ public class MocoTestHelper { <nl> . register ( " https " , new SSLConnectionSocketFactory ( createClientContext ( ) ) ) <nl> . build ( ) ; <nl> HttpClientConnectionManager cm = new PoolingHttpClientConnectionManager ( registry ) ; <nl> - EXECUTOR = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; <nl> + executor = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; <nl> } <nl> <nl> - public String get ( String url ) throws IOException { <nl> + public String get ( final String url ) throws IOException { <nl> return get ( Request . Get ( url ) ) ; <nl> } <nl> <nl> - public byte [ ] getAsBytes ( String url ) throws IOException { <nl> + public byte [ ] getAsBytes ( final String url ) throws IOException { <nl> return getAsBytes ( Request . Get ( url ) ) ; <nl> } <nl> <nl> - public HttpResponse getResponse ( String url ) throws IOException { <nl> + public HttpResponse getResponse ( final String url ) throws IOException { <nl> Request request = Request . Get ( url ) ; <nl> return runRequest ( request ) ; <nl> } <nl> <nl> - public String getWithHeader ( String url , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public String getWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) throws IOException { <nl> Request request = getRequest ( url , headers ) ; <nl> <nl> return get ( request ) ; <nl> } <nl> <nl> - private Request getRequest ( String url , ImmutableMultimap < String , String > headers ) { <nl> + private Request getRequest ( final String url , final ImmutableMultimap < String , String > headers ) { <nl> Request request = Request . Get ( url ) ; <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request = request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> @ @ - 65 , 97 + 65 , 101 @ @ public class MocoTestHelper { <nl> return request ; <nl> } <nl> <nl> - public HttpResponse getResponseWithHeader ( String url , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public HttpResponse getResponseWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) <nl> + throws IOException { <nl> return runRequest ( getRequest ( url , headers ) ) ; <nl> } <nl> <nl> - private HttpResponse runRequest ( Request request ) throws IOException { <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + private HttpResponse runRequest ( final Request request ) throws IOException { <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public String getWithVersion ( String url , HttpVersion version ) throws IOException { <nl> + public String getWithVersion ( final String url , final HttpVersion version ) throws IOException { <nl> return get ( Request . Get ( url ) . version ( version ) ) ; <nl> } <nl> <nl> - private String get ( Request request ) throws IOException { <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + private String get ( final Request request ) throws IOException { <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> - public byte [ ] getAsBytes ( Request request ) throws IOException { <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asBytes ( ) ; <nl> + public byte [ ] getAsBytes ( final Request request ) throws IOException { <nl> + return executor . execute ( request ) . returnContent ( ) . asBytes ( ) ; <nl> } <nl> <nl> - public String postContent ( String url , String postContent ) throws IOException { <nl> + public String postContent ( final String url , final String postContent ) throws IOException { <nl> return postBytes ( url , postContent . getBytes ( ) ) ; <nl> } <nl> <nl> - public String postBytes ( String url , byte [ ] bytes ) throws IOException { <nl> + public String postBytes ( final String url , final byte [ ] bytes ) throws IOException { <nl> Request request = Request . Post ( url ) <nl> . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> . bodyByteArray ( bytes ) ; <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> - public HttpResponse postForResponse ( final String url , String content ) throws IOException { <nl> + public HttpResponse postForResponse ( final String url , final String content ) throws IOException { <nl> return postForResponse ( url , content , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) ; <nl> } <nl> <nl> - public HttpResponse postForResponse ( String url , String content , String contentType ) throws IOException { <nl> + public HttpResponse postForResponse ( final String url , final String content , final String contentType ) <nl> + throws IOException { <nl> Request request = Request . Post ( url ) <nl> . addHeader ( CONTENT _ TYPE , contentType ) <nl> . bodyByteArray ( content . getBytes ( ) ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public HttpResponse putForResponse ( final String url , String content ) throws IOException { <nl> + public HttpResponse putForResponse ( final String url , final String content ) throws IOException { <nl> Request request = Request . Put ( url ) <nl> . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> . bodyByteArray ( content . getBytes ( ) ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public HttpResponse putForResponseWithHeaders ( final String url , String content , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public HttpResponse putForResponseWithHeaders ( final String url , final String content , <nl> + final ImmutableMultimap < String , String > headers ) throws IOException { <nl> Request request = Request . Put ( url ) <nl> . bodyByteArray ( content . getBytes ( ) ) ; <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> public HttpResponse deleteForResponse ( final String url ) throws IOException { <nl> Request request = Request . Delete ( url ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public HttpResponse deleteForResponseWithHeaders ( final String url , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public HttpResponse deleteForResponseWithHeaders ( final String url , final ImmutableMultimap < String , String > headers ) <nl> + throws IOException { <nl> Request request = Request . Delete ( url ) ; <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> public HttpResponse headForResponse ( final String url ) throws IOException { <nl> Request request = Request . Head ( url ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public String postStream ( String url , InputStream stream ) throws IOException { <nl> + public String postStream ( final String url , final InputStream stream ) throws IOException { <nl> return postBytes ( url , toByteArray ( stream ) ) ; <nl> } <nl> <nl> - public String postFile ( String url , String file ) throws IOException { <nl> + public String postFile ( final String url , final String file ) throws IOException { <nl> return postStream ( url , Resources . getResource ( file ) . openStream ( ) ) ; <nl> } <nl> <nl> - public int getForStatus ( String url ) throws IOException { <nl> + public int getForStatus ( final String url ) throws IOException { <nl> return runRequest ( Request . Get ( url ) ) . getStatusLine ( ) . getStatusCode ( ) ; <nl> } <nl> <nl> - public String patchForResponse ( final String url , String content ) throws IOException { <nl> + public String patchForResponse ( final String url , final String content ) throws IOException { <nl> Request request = Request . Patch ( url ) . bodyByteArray ( content . getBytes ( ) , ContentType . DEFAULT _ TEXT ) ; <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> private static final String PROTOCOL = " TLS " ;
diff - - git a / build . gradle b / build . gradle <nl> index 05190ec . . a5f8232 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 3 . 0 ' <nl> + mockitoVersion = ' 2 . 4 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 2 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 '
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java <nl> index c4bb04b . . 7f069e2 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java <nl> @ @ - 14 , 7 + 14 , 9 @ @ import java . io . IOException ; <nl> import java . io . PrintStream ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . github . dreamhead . moco . Runner . running ;
diff - - git a / build . gradle b / build . gradle <nl> index 93c0988 . . 05190ec 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 74 , 7 + 74 , 7 @ @ subprojects { <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> nettyVersion = ' 4 . 1 . 4 . Final ' <nl> - slf4jVersion = ' 1 . 7 . 21 ' <nl> + slf4jVersion = ' 1 . 7 . 22 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 8 . 4 ' <nl> junitVersion = ' 4 . 12 '
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java <nl> index e4c75d6 . . eaeef59 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java <nl> @ @ - 5 , 7 + 5 , 17 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . eq ; <nl> + import static com . github . dreamhead . moco . Moco . exist ; <nl> + import static com . github . dreamhead . moco . Moco . header ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> + import static com . github . dreamhead . moco . Moco . not ; <nl> + import static com . github . dreamhead . moco . Moco . request ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . Moco . xml ; <nl> import static com . github . dreamhead . moco . MocoMount . to ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ;
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index 1a35c87 . . 523cdca 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 11 , 9 + 11 , 18 @ @ import org . junit . Test ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . context ; <nl> + import static com . github . dreamhead . moco . Moco . file ; <nl> + import static com . github . dreamhead . moco . Moco . fileRoot ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . httpsServer ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . * ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteHttpsUrl ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl>
diff - - git a / build . gradle b / build . gradle <nl> index db30c60 . . 93c0988 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 2 . 27 ' <nl> + mockitoVersion = ' 2 . 3 . 0 ' <nl> httpComponentVersion = ' 4 . 5 . 2 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 '
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoSocketHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoSocketHelper . java <nl> index 62431ae . . 48b18b9 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoSocketHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoSocketHelper . java <nl> @ @ - 1 , 6 + 1 , 11 @ @ <nl> package com . github . dreamhead . moco . helper ; <nl> <nl> - import java . io . * ; <nl> + import java . io . BufferedReader ; <nl> + import java . io . Closeable ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStreamReader ; <nl> + import java . io . OutputStream ; <nl> + import java . io . PrintStream ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . Socket ; <nl> import java . net . SocketAddress ; <nl> @ @ - 12 , 7 + 17 , 7 @ @ public class MocoSocketHelper implements Closeable { <nl> private PrintStream os ; <nl> private BufferedReader reader ; <nl> <nl> - public MocoSocketHelper ( String target , int port ) { <nl> + public MocoSocketHelper ( final String target , final int port ) { <nl> socket = new Socket ( ) ; <nl> address = new InetSocketAddress ( target , port ) ; <nl> } <nl> @ @ - 29 , 7 + 34 , 7 @ @ public class MocoSocketHelper implements Closeable { <nl> } <nl> } <nl> <nl> - public String send ( String request ) { <nl> + public String send ( final String request ) { <nl> os . print ( request ) ; <nl> os . flush ( ) ; <nl> <nl> @ @ - 40 , 7 + 45 , 7 @ @ public class MocoSocketHelper implements Closeable { <nl> } <nl> } <nl> <nl> - public String send ( String request , int readCount ) { <nl> + public String send ( final String request , final int readCount ) { <nl> os . print ( request ) ; <nl> os . flush ( ) ; <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java <nl> index dff0b66 . . 3f70f1a 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRequestHitTest . java <nl> @ @ - 10 , 10 + 10 , 25 @ @ import org . mockito . Mockito ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> - import static com . github . dreamhead . moco . MocoRequestHit . * ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . * ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . eq ; <nl> + import static com . github . dreamhead . moco . Moco . form ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . atLeast ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . atMost ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . between ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . never ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . once ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . times ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . unexpected ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteHttpsUrl ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . mockito . Mockito . any ; <nl> @ @ - 21 , 7 + 36 , 7 @ @ import static org . mockito . Mockito . mock ; <nl> import static org . mockito . Mockito . verify ; <nl> <nl> public class MocoRequestHitTest { <nl> - private final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> <nl> private MocoTestHelper helper ; <nl> private RequestHit hit ;
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoPortTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoPortTest . java <nl> index d0b1aaf . . b4974fe 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoPortTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoPortTest . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoPortTest { <nl> - <nl> + <nl> private MocoTestHelper helper ; <nl> <nl> @ Before <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / extractor / VersionExtractorTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / extractor / VersionExtractorTest . java <nl> index 69a83cc . . f9517b5 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / extractor / VersionExtractorTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / extractor / VersionExtractorTest . java <nl> @ @ - 1 , 20 + 1 , 16 @ @ <nl> package com . github . dreamhead . moco . extractor ; <nl> <nl> - import static org . hamcrest . CoreMatchers . is ; <nl> - import static org . junit . Assert . assertThat ; <nl> - import static org . mockito . Mockito . mock ; <nl> - import static org . mockito . Mockito . when ; <nl> - <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> - import io . netty . handler . codec . http . DefaultFullHttpRequest ; <nl> - import io . netty . handler . codec . http . FullHttpRequest ; <nl> - import io . netty . handler . codec . http . HttpMethod ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> - <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + import static org . mockito . Mockito . mock ; <nl> + import static org . mockito . Mockito . when ; <nl> + <nl> public class VersionExtractorTest { <nl> 	 private VersionExtractor extractor ; <nl> 	 private HttpRequest request ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / mount / MountToTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / mount / MountToTest . java <nl> index 97def69 . . 7dcdf2c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / mount / MountToTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / mount / MountToTest . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco . mount ; <nl> import org . junit . Test ; <nl> <nl> import static org . hamcrest . CoreMatchers . is ; <nl> - import static org . hamcrest . Matchers . isEmptyOrNullString ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MountToTest {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 3b2253d . . 6184902 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 17 , 15 + 17 , 40 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . HttpProtocolVersion . * ; <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . HttpProtocolVersion . VERSION _ 0 _ 9 ; <nl> + import static com . github . dreamhead . moco . HttpProtocolVersion . VERSION _ 1 _ 0 ; <nl> + import static com . github . dreamhead . moco . HttpProtocolVersion . VERSION _ 1 _ 1 ; <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . context ; <nl> + import static com . github . dreamhead . moco . Moco . eq ; <nl> + import static com . github . dreamhead . moco . Moco . failover ; <nl> + import static com . github . dreamhead . moco . Moco . file ; <nl> + import static com . github . dreamhead . moco . Moco . from ; <nl> + import static com . github . dreamhead . moco . Moco . header ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . log ; <nl> + import static com . github . dreamhead . moco . Moco . match ; <nl> + import static com . github . dreamhead . moco . Moco . method ; <nl> + import static com . github . dreamhead . moco . Moco . playback ; <nl> + import static com . github . dreamhead . moco . Moco . proxy ; <nl> + import static com . github . dreamhead . moco . Moco . query ; <nl> + import static com . github . dreamhead . moco . Moco . status ; <nl> + import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . Moco . version ; <nl> + import static com . github . dreamhead . moco . Moco . with ; <nl> import static com . github . dreamhead . moco . MocoRequestHit . once ; <nl> import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . google . common . collect . ImmutableMultimap . of ; <nl> import static java . lang . String . format ; <nl> - import static org . hamcrest . CoreMatchers . * ; <nl> + import static org . hamcrest . CoreMatchers . containsString ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . hamcrest . CoreMatchers . nullValue ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoProxyTest extends AbstractMocoHttpTest { <nl> @ @ - 216 , 7 + 241 , 7 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> private Matcher < String > countString ( final String substring , final int targetCount ) { <nl> return new SubstringMatcher ( substring ) { <nl> @ Override <nl> - protected boolean evalSubstringOf ( String string ) { <nl> + protected boolean evalSubstringOf ( final String string ) { <nl> int count = 0 ; <nl> int current = 0 ; <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoDefenseTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoDefenseTest . java <nl> index 0bdc644 . . 1ea6f87 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoDefenseTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoDefenseTest . java <nl> @ @ - 3 , 7 + 3 , 10 @ @ package com . github . dreamhead . moco ; <nl> import org . apache . http . client . HttpResponseException ; <nl> import org . junit . Test ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . context ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> index 0e053a0 . . 6c80c52 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ public class HttpsArgsParser extends StartArgsParser { <nl> return httpsArgs ( ) . withPort ( getPort ( port ) ) . withShutdownPort ( getPort ( shutdownPort ) ) . withConfigurationFile ( config ) . withSettings ( globalSettings ) . withEnv ( env ) . withHttpsArg ( httpsArg ( cmd ) ) . build ( ) ; <nl> } <nl> <nl> - <nl> private HttpsArg httpsArg ( final CommandLine cmd ) { <nl> String https = cmd . getOptionValue ( " https " ) ; <nl> String keystore = cmd . getOptionValue ( " keystore " ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index e1ff1df . . 45c66e8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ public final class MocoJsonRunner { <nl> public static HttpsServer jsonHttpsServer ( final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> - ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> + ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ) ; <nl> } <nl> @ @ - 34 , 7 + 34 , 7 @ @ public final class MocoJsonRunner { <nl> final HttpsCertificate certificate ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> - ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> + ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> index 5ce9b18 . . 74f242f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . bootstrap . arg ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . ServerType ; <nl> <nl> - public class HttpArgs extends StartArgs { <nl> + public final class HttpArgs extends StartArgs { <nl> private HttpArgs ( final Integer port , final Integer shutdownPort , <nl> final String configurationFile , final String globalSettings , <nl> final String env ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index 161750e . . 3651e33 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 23 , 6 + 23 , 6 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> return helper . textContainer ( jp , ctxt ) ; <nl> } <nl> <nl> - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index f464003 . . f86899e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> } <nl> <nl> - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index e8d2014 . . 043fe39 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFacto <nl> import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; <nl> <nl> @ JsonDeserialize ( using = TextContainerDeserializer . class ) <nl> - public class TextContainer implements Container { <nl> + public class TextContainer implements Container { <nl> private static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ;
diff - - git a / build . gradle b / build . gradle <nl> index a392cc6 . . 36e7aa1 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 3 . 2 ' <nl> + gradleVersion = ' 3 . 2 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index c31cf01 . . fc03183 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Thu Nov 17 21 : 25 : 57 CST 2016 <nl> + # Tue Nov 29 20 : 34 : 02 CST 2016 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 2 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 2 . 1 - bin . zip <nl> diff - - git a / gradlew b / gradlew <nl> index 9aa616c . . 4ef3a87 100755 <nl> - - - a / gradlew <nl> + + + b / gradlew <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - # ! / usr / bin / env bash <nl> + # ! / usr / bin / env sh <nl> <nl> # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> # # <nl> @ @ - 154 , 16 + 154 , 18 @ @ if $ cygwin ; then <nl> esac <nl> fi <nl> <nl> - # Split up the JVM _ OPTS And GRADLE _ OPTS values into an array , following the shell quoting and substitution rules <nl> - function splitJvmOpts ( ) { <nl> - JVM _ OPTS = ( " $ @ " ) <nl> - } <nl> - eval splitJvmOpts $ DEFAULT _ JVM _ OPTS $ JAVA _ OPTS $ GRADLE _ OPTS <nl> - JVM _ OPTS [ $ { # JVM _ OPTS [ * ] } ] = " - Dorg . gradle . appname = $ APP _ BASE _ NAME " <nl> + # Escape application args <nl> + for s in " $ { @ } " ; do <nl> + s = \ " $ s \ " <nl> + APP _ ARGS = $ APP _ ARGS " " $ s <nl> + done <nl> + <nl> + # Collect all arguments for the java command , following the shell quoting and substitution rules <nl> + eval set - - " $ DEFAULT _ JVM _ OPTS " " $ JAVA _ OPTS " " $ GRADLE _ OPTS " " \ " - Dorg . gradle . appname = $ APP _ BASE _ NAME \ " " - classpath " \ " $ CLASSPATH \ " " org . gradle . wrapper . GradleWrapperMain " $ APP _ ARGS " <nl> <nl> # by default we should be in the correct project dir , but when run from Finder on Mac , the cwd is wrong <nl> - if [ [ " $ ( uname ) " = = " Darwin " ] ] & & [ [ " $ HOME " = = " $ PWD " ] ] ; then <nl> + if [ " $ ( uname ) " = " Darwin " ] & & [ " $ HOME " = " $ PWD " ] ; then <nl> cd " $ ( dirname " $ 0 " ) " <nl> fi <nl> <nl> - exec " $ JAVACMD " " $ { JVM _ OPTS [ @ ] } " - classpath " $ CLASSPATH " org . gradle . wrapper . GradleWrapperMain " $ @ " <nl> + exec " $ JAVACMD " " $ @ "
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> index 2f868e1 . . 5b50af3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpDumpers . java <nl> @ @ - 50 , 5 + 50 , 6 @ @ public final class HttpDumpers { <nl> return defaultValue ; <nl> } <nl> <nl> - private HttpDumpers ( ) { } <nl> + private HttpDumpers ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> index b0e58fd . . 738bd12 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> @ Override <nl> protected Optional < Object > doExtract ( final HttpRequest request ) { <nl> Optional < byte [ ] > requestBody = extractor . extract ( request ) ; <nl> - 	 	 try { <nl> + try { <nl> if ( ! requestBody . isPresent ( ) ) { <nl> return absent ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index a1e8453 . . e0dd293 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . IOException ; <nl> - import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> import java . util . Map ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIds . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIds . java <nl> index e60bce5 . . 6aa9d7e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIds . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestIds . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class RestIds { <nl> return checkValidUrlItem ( name , " Resource name " ) ; <nl> } <nl> <nl> - private static String checkValidUrlItem ( String id , String item ) { <nl> + private static String checkValidUrlItem ( final String id , final String item ) { <nl> checkNotNullOrEmpty ( id , item + " should not be null or empty " ) ; <nl> <nl> if ( id . contains ( URLs . SEPARATOR ) ) {
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 5c2faaf . . 24089b8 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1301 , 7 + 1301 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " ) , status ( 302 ) ) ; <nl> <nl> # # # # Cookie Attributes <nl> <nl> - Cookie attributes are an important part in cookie usage . <nl> + Cookie attributes are sent in http response , which are used by browsers to determine when to delete a cookie , block a cookie or whether to send a cookie to the server . <nl> <nl> # # # # # Path <nl>
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index 873fb6f . . 7134239 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import java . util . List ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> @ JsonDeserialize ( using = CookieContainerDeserializer . class ) <nl> - public class CookieContainer implements Container { <nl> + public class CookieContainer implements Container { <nl> private String value ; <nl> private String path ; <nl> private String domain ; <nl> @ @ - 39 , 19 + 39 , 19 @ @ public class CookieContainer implements Container { <nl> return container ; <nl> } <nl> <nl> - public String getValue ( ) { <nl> + public final String getValue ( ) { <nl> return value ; <nl> } <nl> <nl> - public boolean isForTemplate ( ) { <nl> + public final boolean isForTemplate ( ) { <nl> return this . template ! = null ; <nl> } <nl> <nl> - public String getTemplate ( ) { <nl> + public final String getTemplate ( ) { <nl> return template ; <nl> } <nl> <nl> - public CookieAttribute [ ] getOptions ( ) { <nl> + public final CookieAttribute [ ] getOptions ( ) { <nl> List < CookieAttribute > options = newArrayList ( ) ; <nl> if ( this . path ! = null ) { <nl> options . add ( CookieAttribute . path ( this . path ) ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 5ada542 . . 7c40e35 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 289 , 17 + 289 , 17 @ @ public final class Moco { <nl> return new CookieRequestExtractor ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) ) ; <nl> } <nl> <nl> - public static ResponseHandler cookie ( final String key , final String value , final CookieAttribute . . . options ) { <nl> + public static ResponseHandler cookie ( final String key , final String value , final CookieAttribute . . . attributes ) { <nl> return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , <nl> text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) , <nl> - options ) ; <nl> + checkNotNull ( attributes , " Cookie options should not be null " ) ) ; <nl> } <nl> <nl> - public static ResponseHandler cookie ( final String key , final Resource resource , final CookieAttribute . . . options ) { <nl> + public static ResponseHandler cookie ( final String key , final Resource resource , final CookieAttribute . . . attributes ) { <nl> return header ( SET _ COOKIE , cookieResource ( <nl> checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , <nl> checkNotNull ( resource , " Cookie value should not be null " ) , <nl> - options ) ) ; <nl> + checkNotNull ( attributes , " Cookie options should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestExtractor < String > form ( final String key ) { <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 86a3fda . . 5c2faaf 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1406 , 7 + 1406 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; <nl> <nl> @ Since will be at next version <nl> <nl> - An HttpOnly cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . <nl> + An http only cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . <nl> <nl> * Java <nl>
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index e56fc51 . . f626b6e 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1403 , 6 + 1403 , 41 @ @ server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # # # HTTP Only <nl> + <nl> + @ Since will be at next version <nl> + <nl> + An HttpOnly cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . response ( cookie ( " loggedIn " , " true " , httpOnly ( ) ) , status ( 302 ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / cookie " <nl> + } , <nl> + " response " : <nl> + { <nl> + " cookies " : <nl> + { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " httpOnly " : " true " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # Attachment <nl> * * @ Since 0 . 10 . 0 * * <nl>
diff - - git a / build . gradle b / build . gradle <nl> index a9ae2ef . . 5cc94cf 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 3 . 1 ' <nl> + gradleVersion = ' 3 . 2 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index f7f9097 . . c31cf01 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Mon Sep 19 22 : 26 : 12 CST 2016 <nl> + # Thu Nov 17 21 : 25 : 57 CST 2016 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 1 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 3 . 2 - bin . zip
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 0d04115 . . a63bfd8 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1333 , 6 + 1333 , 41 @ @ server . response ( cookie ( " loggedIn " , " true " , path ( " / " ) ) , status ( 302 ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # # # Domain <nl> + <nl> + @ Since will be at next version <nl> + <nl> + Domain cookie attribute defines the scope of the cookie . You can add your own ` domain ` cookie attribute to your response . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / cookie " <nl> + } , <nl> + " response " : <nl> + { <nl> + " cookies " : <nl> + { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " domain " : " github . com " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # Attachment <nl> * * @ Since 0 . 10 . 0 * * <nl>
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index b8c1de5 . . b8d519b 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1294 , 6 + 1294 , 44 @ @ server . response ( cookie ( " loggedIn " , " true " ) , status ( 302 ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # # Cookie Attributes <nl> + <nl> + Cookie attributes are an important part in cookie usage . <nl> + <nl> + # # # # # Path <nl> + <nl> + Path cookie attribute defines the scope of the cookie . You can add your own ` path ` cookie attribute to your response . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . response ( cookie ( " loggedIn " , " true " , path ( " / " ) ) , status ( 302 ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / cookie " <nl> + } , <nl> + " response " : <nl> + { <nl> + " cookies " : <nl> + { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " path " : " / " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + <nl> # # # Attachment <nl> * * @ Since 0 . 10 . 0 * * <nl>
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index a6cde9d . . 1e61210 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 15 , 10 + 15 , 7 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie ( ) throws IOException { <nl> runWithConfiguration ( " cookie . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + Cookie decodeCookie = getCookie ( " / cookie " ) ; <nl> assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> } <nl> @ @ - 26 , 10 + 23 , 7 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie _ with _ path ( ) throws IOException { <nl> runWithConfiguration ( " cookie . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - path " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + Cookie decodeCookie = getCookie ( " / cookie - with - path " ) ; <nl> assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; <nl> @ @ - 38 , 10 + 32 , 7 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws IOException { <nl> runWithConfiguration ( " cookie . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - domain " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + Cookie decodeCookie = getCookie ( " / cookie - with - domain " ) ; <nl> assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> @ @ - 50 , 10 + 41 , 7 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie _ with _ secure ( ) throws IOException { <nl> runWithConfiguration ( " cookie . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - secure " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + Cookie decodeCookie = getCookie ( " / cookie - with - secure " ) ; <nl> assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; <nl> @ @ - 62 , 12 + 50 , 17 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie _ with _ http _ only ( ) throws IOException { <nl> runWithConfiguration ( " cookie . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - http - only " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + String uri = " / cookie - with - http - only " ; <nl> + Cookie decodeCookie = getCookie ( uri ) ; <nl> assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . isHttpOnly ( ) , is ( true ) ) ; <nl> } <nl> + <nl> + private Cookie getCookie ( String uri ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + return ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index d65c0fe . . a9ae2ef 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 2 . 9 ' <nl> + mockitoVersion = ' 2 . 2 . 11 ' <nl> httpComponentVersion = ' 4 . 5 . 2 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index 903eaca . . af52583 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 65 , 6 + 65 , 10 @ @ public class CookieContainer implements Container { <nl> options . add ( CookieOption . secure ( ) ) ; <nl> } <nl> <nl> + if ( this . httpOnly ) { <nl> + options . add ( CookieOption . httpOnly ( ) ) ; <nl> + } <nl> + <nl> return options . toArray ( new CookieOption [ options . size ( ) ] ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index 1abd752 . . a6cde9d 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 58 , 4 + 58 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ http _ only ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - http - only " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + assertThat ( decodeCookie . isHttpOnly ( ) , is ( true ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> index fb376c3 . . ed070c6 100644 <nl> - - - a / moco - runner / src / test / resources / cookie . json <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 47 , 5 + 47 , 18 @ @ <nl> } <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie - with - http - only " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " httpOnly " : " true " <nl> + } <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index a0f2043 . . e55753a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 56 , 6 + 56 , 11 @ @ public class CookieContainer implements Container { <nl> if ( this . path ! = null ) { <nl> options . add ( CookieOption . path ( this . path ) ) ; <nl> } <nl> + <nl> + if ( this . domain ! = null ) { <nl> + options . add ( CookieOption . domain ( this . domain ) ) ; <nl> + } <nl> + <nl> return options . toArray ( new CookieOption [ options . size ( ) ] ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index 289ba4c . . bda1f1e 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 34 , 4 + 34 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - domain " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> index 1cadddb . . 722005b 100644 <nl> - - - a / moco - runner / src / test / resources / cookie . json <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 21 , 5 + 21 , 18 @ @ <nl> } <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie - with - domain " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " domain " : " github . com " <nl> + } <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index a6bc71a . . 9606c2a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 170 , 38 + 170 , 38 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> private ResponseHandler createResponseHandler ( final Map . Entry < String , Container > pair , <nl> final String targetMethodName ) { <nl> Container container = pair . getValue ( ) ; <nl> + String key = pair . getKey ( ) ; <nl> if ( container instanceof TextContainer ) { <nl> - TextContainer textContainer = ( TextContainer ) container ; <nl> - Resource resource = getResource ( textContainer ) ; <nl> - try { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; <nl> - } <nl> - <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; <nl> - <nl> - } catch ( Exception e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return createResponseHandler ( targetMethodName , key , ( TextContainer ) container ) ; <nl> } <nl> <nl> if ( container instanceof CookieContainer ) { <nl> - CookieContainer cookieContainer = ( CookieContainer ) container ; <nl> - try { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; <nl> - } <nl> - } catch ( Exception e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return createResponseHandler ( targetMethodName , key , ( CookieContainer ) container ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( ) ; <nl> } <nl> <nl> + private ResponseHandler createResponseHandler ( final String target , final String key , <nl> + final TextContainer textContainer ) { <nl> + try { <nl> + Method method = Moco . class . getMethod ( target , String . class , Resource . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , getResource ( textContainer ) ) ; <nl> + } catch ( Exception e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private ResponseHandler createResponseHandler ( final String target , final String key , <nl> + final CookieContainer cookieContainer ) { <nl> + try { <nl> + Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; <nl> + } catch ( Exception e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> @ SuppressWarnings ( " unchecked " ) <nl> private Map < String , Container > castToMap ( final Object value ) { <nl> return Map . class . cast ( value ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index 4a5b419 . . f464003 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 33 , 15 + 33 , 15 @ @ public class TextContainerDeserializerHelper { <nl> String operation = jp . getText ( ) . trim ( ) ; <nl> builder . withOperation ( operation ) ; <nl> JsonToken token = jp . nextToken ( ) ; <nl> + if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + return template ( jp , builder ) ; <nl> + } <nl> + <nl> if ( token = = JsonToken . VALUE _ STRING ) { <nl> String text = jp . getText ( ) . trim ( ) ; <nl> jp . nextToken ( ) ; <nl> return builder . withText ( text ) . build ( ) ; <nl> } <nl> - <nl> - if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> - return template ( jp , builder ) ; <nl> - } <nl> } <nl> <nl> return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ;
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> new file mode 100644 <nl> index 0000000 . . e3f59d8 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . google . common . net . HttpHeaders ; <nl> + import io . netty . handler . codec . http . cookie . ClientCookieDecoder ; <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> index 70ec4f7 . . 9bfa18c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> @ @ - 184 , 17 + 184 , 6 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ set _ and _ recognize _ cookie ( ) throws IOException { <nl> - runWithConfiguration ( " foo . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> - assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> - assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void should _ wait _ for _ awhile ( ) throws IOException { <nl> final long latency = 1000 ; <nl> final long delta = 200 ; <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> new file mode 100644 <nl> index 0000000 . . b500b0b <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : " true " <nl> + } <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json <nl> index 485a740 . . afae078 100644 <nl> - - - a / moco - runner / src / test / resources / foo . json <nl> + + + b / moco - runner / src / test / resources / foo . json <nl> @ @ - 140 , 16 + 140 , 6 @ @ <nl> } , <nl> { <nl> " request " : { <nl> - " uri " : " / cookie " <nl> - } , <nl> - " response " : { <nl> - " cookies " : { <nl> - " login " : " true " <nl> - } <nl> - } <nl> - } , <nl> - { <nl> - " request " : { <nl> " version " : " HTTP / 1 . 0 " <nl> } , <nl> " response " : {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index e024e8f . . 44b2d8c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 94 , 6 + 94 , 7 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + <nl> String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> assertThat ( decodeCookie . maxAge ( ) , is ( 3600L ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index f577fe4 . . 735ae61 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . util . Map ; <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> import static com . github . dreamhead . moco . Moco . var ; <nl> import static com . github . dreamhead . moco . Moco . version ; <nl> @ @ - 150 , 27 + 151 , 27 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } ; <nl> } <nl> <nl> + private Resource getResource ( final TextContainer container ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> + return template ( container . getText ( ) ) ; <nl> + } <nl> + <nl> + return text ( container . getText ( ) ) ; <nl> + } <nl> + <nl> private ResponseHandler createResponseHandler ( final Map . Entry < String , TextContainer > pair , <nl> final String targetMethodName ) { <nl> TextContainer container = pair . getValue ( ) ; <nl> + Resource resource = getResource ( container ) ; <nl> try { <nl> - if ( container . isForTemplate ( ) ) { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) , new CookieOption [ 0 ] ) ; <nl> - } <nl> - <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> - } <nl> - <nl> if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) , new CookieOption [ 0 ] ) ; <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; <nl> } <nl> <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) ) ; <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; <nl> + <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> @ @ - 240 , 7 + 241 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> private Resource asResource ( final String name , final FileContainer fileContainer ) { <nl> Optional < Charset > charset = fileContainer . getCharset ( ) ; <nl> String text = fileContainer . getName ( ) . getText ( ) ; <nl> - return asResource ( name , Moco . text ( text ) , charset ) ; <nl> + return asResource ( name , text ( text ) , charset ) ; <nl> } <nl> <nl> public static ImmutableMap < String , RequestExtractor < ? > > toVariables ( final Map < String , TextContainer > props ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> index 7a9082d . . c7dc7d5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . cookie . DomainCookieOption ; <nl> import com . github . dreamhead . moco . cookie . HttpOnlyOption ; <nl> import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; <nl> import com . github . dreamhead . moco . cookie . PathCookieOption ; <nl> @ @ - 10 , 6 + 11 , 10 @ @ public abstract class CookieOption { <nl> return new PathCookieOption ( path ) ; <nl> } <nl> <nl> + public static CookieOption domain ( final String domain ) { <nl> + return new DomainCookieOption ( domain ) ; <nl> + } <nl> + <nl> public static CookieOption maxAge ( final long maxAge ) { <nl> return new MaxAgeCookieOption ( maxAge ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . 4a01b66 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public class DomainCookieOption extends ActualCookieOption { <nl> + private final String domain ; <nl> + <nl> + public DomainCookieOption ( final String domain ) { <nl> + this . domain = domain ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + public void visit ( final Cookie cookie ) { <nl> + cookie . setDomain ( this . domain ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index 8bbf97c . . e024e8f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . CookieOption . domain ; <nl> import static com . github . dreamhead . moco . CookieOption . httpOnly ; <nl> import static com . github . dreamhead . moco . CookieOption . maxAge ; <nl> import static com . github . dreamhead . moco . CookieOption . path ; <nl> @ @ - 133 , 6 + 134 , 21 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws Exception { <nl> + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ redirect _ to _ expected _ url ( ) throws Exception { <nl> server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; <nl> server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> index c0ca618 . . 472f831 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public abstract class CookieOption { <nl> return new MaxAgeCookieOption ( maxAge ) ; <nl> } <nl> <nl> - public static CookieOption secure ( final boolean secure ) { <nl> - return new SecureCookieOption ( secure ) ; <nl> + public static CookieOption secure ( ) { <nl> + return new SecureCookieOption ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java <nl> index f73f012 . . 67960cd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java <nl> @ @ - 3 , 14 + 3 , 8 @ @ package com . github . dreamhead . moco . cookie ; <nl> import io . netty . handler . codec . http . cookie . Cookie ; <nl> <nl> public class SecureCookieOption extends ActualCookieOption { <nl> - private final boolean secure ; <nl> - <nl> - public SecureCookieOption ( final boolean secure ) { <nl> - this . secure = secure ; <nl> - } <nl> - <nl> @ Override <nl> public void visit ( final Cookie cookie ) { <nl> - cookie . setSecure ( this . secure ) ; <nl> + cookie . setSecure ( true ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index 35a044c . . fb4418d 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ set _ and _ recognize _ cookie _ with _ secure ( ) throws Exception { <nl> server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> - server . response ( cookie ( " loggedIn " , " true " , secure ( true ) ) , status ( 302 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 0a6692f . . f577fe4 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . github . dreamhead . moco . CookieOption ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> @ @ - 154 , 10 + 155 , 20 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> TextContainer container = pair . getValue ( ) ; <nl> try { <nl> if ( container . isForTemplate ( ) ) { <nl> + if ( " cookie " . equals ( targetMethodName ) ) { <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) , new CookieOption [ 0 ] ) ; <nl> + } <nl> + <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> } <nl> <nl> + if ( " cookie " . equals ( targetMethodName ) ) { <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) , new CookieOption [ 0 ] ) ; <nl> + } <nl> + <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) ) ; <nl> } catch ( Exception e ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> index 6bf2f32 . . 43a594b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 1 , 9 + 1 , 14 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; <nl> import com . github . dreamhead . moco . cookie . PathCookieOption ; <nl> <nl> public abstract class CookieOption { <nl> public static CookieOption path ( final String path ) { <nl> return new PathCookieOption ( path ) ; <nl> } <nl> + <nl> + public static CookieOption maxAge ( final long maxAge ) { <nl> + return new MaxAgeCookieOption ( maxAge ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . 20754f5 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public class MaxAgeCookieOption extends ActualCookieOption { <nl> + private final long maxAge ; <nl> + <nl> + public MaxAgeCookieOption ( long maxAge ) { <nl> + this . maxAge = maxAge ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visit ( final Cookie cookie ) { <nl> + cookie . setMaxAge ( maxAge ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> index 720cf58 . . d63260a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ public class PathCookieOption extends ActualCookieOption { <nl> } <nl> <nl> @ Override <nl> - public void visit ( Cookie cookie ) { <nl> + public void visit ( final Cookie cookie ) { <nl> cookie . setPath ( path ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index c597699 . . 0209426 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . CookieOption . maxAge ; <nl> import static com . github . dreamhead . moco . CookieOption . path ; <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> @ @ - 77 , 6 + 78 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ max _ age ( ) throws Exception { <nl> + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , maxAge ( 3600 ) ) , status ( 302 ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . maxAge ( ) , is ( 3600L ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ redirect _ to _ expected _ url ( ) throws Exception { <nl> server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; <nl> server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;
diff - - git a / build . gradle b / build . gradle <nl> index 12baa4b . . 95a9580 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 79 , 7 + 79 , 7 @ @ subprojects { <nl> jacksonVersion = ' 2 . 8 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> - mockitoVersion = ' 2 . 2 . 0 ' <nl> + mockitoVersion = ' 2 . 2 . 3 ' <nl> httpComponentVersion = ' 4 . 5 . 2 ' <nl> jsonpathVersion = ' 2 . 2 . 0 ' <nl> freemarkerVersion = ' 2 . 3 . 23 '
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 30fcb71 . . 2777eec 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> # APIs <nl> * Template for Event action <nl> * Remove publish API with Optional , e . g . file and pathResource <nl> + * Proxy with content resource as url <nl> <nl> # JUnit <nl> * HTTPS JUnit runner for POJO , JSON and from path resource
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index 8c38e01 . . d92855e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . base . Supplier ; <nl> <nl> import java . net . URL ; <nl> <nl> + import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class ProxyResponseHandler extends AbstractProxyResponseHandler implements ResponseHandler { <nl> @ @ - 21 , 7 + 22 , 10 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement <nl> <nl> @ Override <nl> protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> - <nl> - return of ( url . apply ( request ) . toString ( ) ) ; <nl> + try { <nl> + return of ( url . apply ( request ) . toString ( ) ) ; <nl> + } catch ( IllegalArgumentException e ) { <nl> + return absent ( ) ; <nl> + } <nl> } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> index a751a28 . . 410f6ae 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import java . io . InputStream ; <nl> <nl> public abstract class BaseParser < T extends Server > implements Parser < T > { <nl> protected abstract T createServer ( final ImmutableList < SessionSetting > read , <nl> - final Optional < Integer > port , final MocoConfig [ ] configs ) ; <nl> + final Optional < Integer > port , final MocoConfig . . . configs ) ; <nl> <nl> private final CollectionReader reader ; <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> index 877e9ea . . 7eb3b40 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> @ @ - 75 , 10 + 75 , 6 @ @ public final class URLs { <nl> } <nl> } <nl> <nl> - public static Function < HttpRequest , URL > toUrlFunction ( final String url ) { <nl> - return constant ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> - } <nl> - <nl> public static Function < HttpRequest , URL > toUrlFunction ( final Resource url ) { <nl> return new Function < HttpRequest , URL > ( ) { <nl> @ Override <nl> @ @ - 88 , 15 + 84 , 6 @ @ public final class URLs { <nl> } ; <nl> } <nl> <nl> - private static < F , T > Function < F , T > constant ( final T constant ) { <nl> - return new Function < F , T > ( ) { <nl> - @ Override <nl> - public T apply ( final F input ) { <nl> - return constant ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> private URLs ( ) { <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 2c4dcca . . 9c43dae 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 422 , 16 + 422 , 16 @ @ public final class Moco { <nl> return proxy ( checkNotNullOrEmpty ( url , " URL should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> - public static ResponseHandler proxy ( final Resource url ) { <nl> + public static ResponseHandler proxy ( final ContentResource url ) { <nl> return proxy ( checkNotNull ( url , " URL should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> public static ResponseHandler proxy ( final String url , final Failover failover ) { <nl> - return new ProxyResponseHandler ( toUrlFunction ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> + return proxy ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> } <nl> <nl> - public static ResponseHandler proxy ( final Resource url , final Failover failover ) { <nl> + public static ResponseHandler proxy ( final ContentResource url , final Failover failover ) { <nl> return new ProxyResponseHandler ( toUrlFunction ( checkNotNull ( url , " URL should not be null " ) ) , <nl> checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 40b22e3 . . 2c4dcca 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 422 , 11 + 422 , 20 @ @ public final class Moco { <nl> return proxy ( checkNotNullOrEmpty ( url , " URL should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> + public static ResponseHandler proxy ( final Resource url ) { <nl> + return proxy ( checkNotNull ( url , " URL should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> + } <nl> + <nl> public static ResponseHandler proxy ( final String url , final Failover failover ) { <nl> return new ProxyResponseHandler ( toUrlFunction ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> } <nl> <nl> + public static ResponseHandler proxy ( final Resource url , final Failover failover ) { <nl> + return new ProxyResponseHandler ( toUrlFunction ( checkNotNull ( url , " URL should not be null " ) ) , <nl> + checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> + } <nl> + <nl> public static ResponseHandler proxy ( final ProxyConfig proxyConfig ) { <nl> return proxy ( checkNotNull ( proxyConfig ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> index 267a67e . . 877e9ea 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> @ @ - 1 , 7 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> import com . google . common . base . Strings ; <nl> <nl> import java . io . UnsupportedEncodingException ; <nl> @ @ - 77 , 6 + 79 , 15 @ @ public final class URLs { <nl> return constant ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> } <nl> <nl> + public static Function < HttpRequest , URL > toUrlFunction ( final Resource url ) { <nl> + return new Function < HttpRequest , URL > ( ) { <nl> + @ Override <nl> + public URL apply ( final HttpRequest input ) { <nl> + return toUrl ( url . readFor ( Optional . of ( input ) ) . toString ( ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> private static < F , T > Function < F , T > constant ( final T constant ) { <nl> return new Function < F , T > ( ) { <nl> @ Override <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index a070726 . . 4da72f6 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 422 , 4 + 422 , 17 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ work _ with _ file _ resource _ url ( ) throws Exception { <nl> + server . get ( by ( uri ( " / target " ) ) ) . response ( " get _ proxy " ) ; <nl> + server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( file ( " src / test / resources / remote _ url . resource " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . get ( remoteUrl ( " / proxy " ) ) , is ( " get _ proxy " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / test / resources / remote _ url . resource b / moco - core / src / test / resources / remote _ url . resource <nl> new file mode 100644 <nl> index 0000000 . . 0d582ec <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / remote _ url . resource <nl> @ @ - 0 , 0 + 1 @ @ <nl> + http : / / localhost : 12306 / target <nl> \ No newline at end of file
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index fd2086b . . a1e8453 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> private static final ImmutableSet < String > IGNORED _ REQUEST _ HEADERS = ImmutableSet . of ( HOST , CONTENT _ LENGTH ) ; <nl> private static final ImmutableSet < String > IGNORED _ RESPONSE _ HEADERS = ImmutableSet . of ( DATE , SERVER ) ; <nl> <nl> - protected abstract Optional < String > remoteUrl ( final String uri ) ; <nl> + protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; <nl> <nl> @ @ - 228 , 7 + 228 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private Optional < URL > remoteUrl ( final HttpRequest request ) { <nl> - Optional < String > remoteUrl = this . remoteUrl ( request . getUri ( ) ) ; <nl> + Optional < String > remoteUrl = this . doRemoteUrl ( request ) ; <nl> if ( ! remoteUrl . isPresent ( ) ) { <nl> return absent ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> index c268cfc . . 94f69d8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler ; <nl> <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> @ @ - 19 , 7 + 20 , 8 @ @ public class ProxyBatchResponseHandler extends AbstractProxyResponseHandler { <nl> } <nl> <nl> @ Override <nl> - protected Optional < String > remoteUrl ( final String uri ) { <nl> + protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> + String uri = request . getUri ( ) ; <nl> if ( ! proxyConfig . canAccessedBy ( uri ) ) { <nl> return absent ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index c2fd4e9 . . 738104d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler ; <nl> <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . google . common . base . Optional ; <nl> @ @ - 18 , 7 + 19 , 7 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement <nl> } <nl> <nl> @ Override <nl> - protected Optional < String > remoteUrl ( final String uri ) { <nl> + protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> return of ( this . url . get ( ) . toString ( ) ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> index f8b0e8e . . 0def8e4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class MessageContent { <nl> <nl> @ Override <nl> public int hashCode ( ) { <nl> - return Objects . hashCode ( this . content , this . charset ) ; <nl> + return Objects . hashCode ( Arrays . hashCode ( this . content ) , this . charset ) ; <nl> } <nl> <nl> public static Builder content ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index bcda353 . . fd2086b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import java . net . URL ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . DefaultHttpResponse . newResponse ; <nl> + import static com . github . dreamhead . moco . util . URLs . toUrl ; <nl> import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . net . HttpHeaders . CONTENT _ LENGTH ; <nl> @ @ - 240 , 8 + 241 , 8 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> try { <nl> - return of ( new URL ( encoder . toString ( ) ) ) ; <nl> - } catch ( MalformedURLException e ) { <nl> + return of ( toUrl ( encoder . toString ( ) ) ) ; <nl> + } catch ( IllegalArgumentException e ) { <nl> return absent ( ) ; <nl> } <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 2c2f253 . . bcda353 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> <nl> private final Failover failover ; <nl> <nl> - public AbstractProxyResponseHandler ( final Failover failover ) { <nl> + protected AbstractProxyResponseHandler ( final Failover failover ) { <nl> this . failover = failover ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java <nl> index a7954a8 . . 490745e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestRequestDispatcher . java <nl> @ @ - 216 , 27 + 216 , 28 @ @ public final class RestRequestDispatcher { <nl> } <nl> <nl> private Optional < ResponseHandler > doGetResponseHandler ( final HttpRequest httpRequest ) { <nl> - if ( HttpMethod . GET = = httpRequest . getMethod ( ) ) { <nl> + HttpMethod method = httpRequest . getMethod ( ) ; <nl> + if ( HttpMethod . GET = = method ) { <nl> return getGetHandler ( httpRequest ) ; <nl> } <nl> <nl> - if ( HttpMethod . POST = = httpRequest . getMethod ( ) ) { <nl> + if ( HttpMethod . POST = = method ) { <nl> return getPostHandler ( httpRequest ) ; <nl> } <nl> <nl> - if ( HttpMethod . PUT = = httpRequest . getMethod ( ) ) { <nl> + if ( HttpMethod . PUT = = method ) { <nl> return getSingleResponseHandler ( putSettings , httpRequest ) ; <nl> } <nl> <nl> - if ( HttpMethod . DELETE = = httpRequest . getMethod ( ) ) { <nl> + if ( HttpMethod . DELETE = = method ) { <nl> return getSingleResponseHandler ( deleteSettings , httpRequest ) ; <nl> } <nl> <nl> - if ( HttpMethod . HEAD = = httpRequest . getMethod ( ) ) { <nl> + if ( HttpMethod . HEAD = = method ) { <nl> return getHeadHandler ( httpRequest ) ; <nl> } <nl> <nl> - if ( HttpMethod . PATCH = = httpRequest . getMethod ( ) ) { <nl> + if ( HttpMethod . PATCH = = method ) { <nl> return getSingleResponseHandler ( patchSettings , httpRequest ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java <nl> index 4cb8c0e . . dbf905e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . google . common . base . Predicate ; <nl> import java . util . Map ; <nl> <nl> public final class HttpHeaders { <nl> - public static boolean isSameHeaderName ( final String name , final String key ) { <nl> + private static boolean isSameHeaderName ( final String name , final String key ) { <nl> return key . equalsIgnoreCase ( name ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index 64f0c5f . . 10200ec 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> } <nl> } <nl> <nl> - protected < V extends ConfigApplier < V > > V configured ( final V source ) { <nl> + private < V extends ConfigApplier < V > > V configured ( final V source ) { <nl> return configItem ( source , this . configs ) ; <nl> } <nl>
diff - - git a / build . gradle b / build . gradle <nl> index 4a22f5f . . 3734004 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 4 . Final ' <nl> slf4jVersion = ' 1 . 7 . 21 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 8 . 2 ' <nl> + jacksonVersion = ' 2 . 8 . 3 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 1 . 10 . 19 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 8ce7fe1 . . cae15ad 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class TextContainer { <nl> private String operation ; <nl> private Map < String , TextContainer > props = ImmutableMap . of ( ) ; <nl> <nl> - protected TextContainer ( final String text , final String operation , <nl> + private TextContainer ( final String text , final String operation , <nl> final Map < String , TextContainer > props ) { <nl> this . text = text ; <nl> this . operation = operation ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> index 130c4dd . . c288b04 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class CompleteEventSetting { <nl> MocoEventAction action = doCreateAction ( ) ; <nl> <nl> if ( this . async ) { <nl> - return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUnit ( ) ) ) ; <nl> + return Moco . async ( action , latency . asProcedure ( ) ) ; <nl> } <nl> <nl> return action ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index b4e6df8 . . 0a6692f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> - import static com . github . dreamhead . moco . Moco . latency ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> @ @ - 92 , 7 + 91 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> <nl> if ( " latency " . equalsIgnoreCase ( name ) ) { <nl> LatencyContainer container = LatencyContainer . class . cast ( value ) ; <nl> - return with ( latency ( container . getLatency ( ) , container . getUnit ( ) ) ) ; <nl> + return with ( container . asProcedure ( ) ) ; <nl> } <nl> <nl> if ( ProxyContainer . class . isInstance ( value ) ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> index feaaf45 . . ec148bf 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> @ @ - 1 , 7 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . parser . deserializer . LatencyContainerDeserializer ; <nl> + import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> @ @ - 11 , 14 + 13 , 6 @ @ public class LatencyContainer { <nl> private long latency ; <nl> private TimeUnit unit = TimeUnit . MILLISECONDS ; <nl> <nl> - public long getLatency ( ) { <nl> - return latency ; <nl> - } <nl> - <nl> - public TimeUnit getUnit ( ) { <nl> - return unit ; <nl> - } <nl> - <nl> @ Override <nl> public String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> @ @ - 38 , 4 + 32 , 8 @ @ public class LatencyContainer { <nl> latencyContainer . unit = timeUnit ; <nl> return latencyContainer ; <nl> } <nl> + <nl> + public LatencyProcedure asProcedure ( ) { <nl> + return Moco . latency ( latency , unit ) ; <nl> + } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> index dcb6406 . . cbc5aac 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> @ @ - 2 , 11 + 2 , 13 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . parser . deserializer . FileContainerDeserializer ; <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . google . common . base . MoreObjects ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . nio . charset . Charset ; <nl> import java . nio . charset . UnsupportedCharsetException ; <nl> + import java . util . Map ; <nl> <nl> import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> @ @ - 15 , 16 + 17 , 19 @ @ import static com . google . common . base . Optional . of ; <nl> public final class FileContainer extends TextContainer { <nl> private TextContainer name ; <nl> private Optional < Charset > charset ; <nl> + private TextContainer content ; <nl> <nl> private FileContainer ( final TextContainer container ) { <nl> - super ( container . getText ( ) , container . getOperation ( ) , container . getProps ( ) ) ; <nl> + / / super ( container . getText ( ) , container . getOperation ( ) , container . getProps ( ) ) ; <nl> this . name = container ; <nl> this . charset = absent ( ) ; <nl> + this . content = container ; <nl> } <nl> <nl> private FileContainer ( final TextContainer name , final Optional < Charset > charset ) { <nl> this . name = name ; <nl> this . charset = charset ; <nl> + this . content = null ; <nl> } <nl> <nl> public TextContainer getName ( ) { <nl> @ @ - 36 , 6 + 41 , 76 @ @ public final class FileContainer extends TextContainer { <nl> } <nl> <nl> @ Override <nl> + public ContentResource asResource ( ) { <nl> + if ( this . content = = null ) { <nl> + return null ; <nl> + } <nl> + <nl> + return this . content . asResource ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ContentResource asTemplateResource ( ) { <nl> + if ( this . content = = null ) { <nl> + return null ; <nl> + } <nl> + <nl> + return this . content . asTemplateResource ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ContentResource asTemplateResource ( final String resourceName ) { <nl> + if ( this . content = = null ) { <nl> + return null ; <nl> + } <nl> + <nl> + return this . content . asTemplateResource ( resourceName ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isRawText ( ) { <nl> + return this . content ! = null & & this . content . isRawText ( ) ; <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public String getText ( ) { <nl> + if ( this . content = = null ) { <nl> + return null ; <nl> + } <nl> + <nl> + return this . content . getText ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getOperation ( ) { <nl> + if ( this . content = = null ) { <nl> + return null ; <nl> + } <nl> + <nl> + return this . content . getOperation ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasProperties ( ) { <nl> + return this . content ! = null & & this . content . hasProperties ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Map < String , TextContainer > getProps ( ) { <nl> + if ( this . content = = null ) { <nl> + return null ; <nl> + } <nl> + <nl> + return this . content . getProps ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isForTemplate ( ) { <nl> + return this . content ! = null & & this . content . isForTemplate ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> index f62800c . . 5ce9b18 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco . bootstrap . arg ; <nl> import com . github . dreamhead . moco . bootstrap . ServerType ; <nl> <nl> public class HttpArgs extends StartArgs { <nl> - protected HttpArgs ( final Integer port , final Integer shutdownPort , <nl> + private HttpArgs ( final Integer port , final Integer shutdownPort , <nl> final String configurationFile , final String globalSettings , <nl> final String env ) { <nl> super ( ServerType . HTTP , port , shutdownPort , configurationFile , globalSettings , env , null ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java <nl> index 1913f20 . . c600f6c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpsArgs . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . bootstrap . HttpsArg ; <nl> import com . github . dreamhead . moco . bootstrap . ServerType ; <nl> <nl> public class HttpsArgs extends StartArgs { <nl> - protected HttpsArgs ( final Integer port , final Integer shutdownPort , final String configurationFile , <nl> + private HttpsArgs ( final Integer port , final Integer shutdownPort , final String configurationFile , <nl> final String globalSettings , final String env , final HttpsArg httpsArg ) { <nl> super ( ServerType . HTTPS , port , shutdownPort , configurationFile , globalSettings , env , httpsArg ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 2b4a0b6 . . 8ce7fe1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 137 , 11 + 137 , 7 @ @ public class TextContainer { <nl> } <nl> <nl> public TextContainer build ( ) { <nl> - TextContainer container = new TextContainer ( ) ; <nl> - container . text = text ; <nl> - container . operation = operation ; <nl> - container . props = asProps ( props ) ; <nl> - return container ; <nl> + return new TextContainer ( text , operation , asProps ( props ) ) ; <nl> } <nl> <nl> private Map < String , TextContainer > asProps ( final Map < String , TextContainer > props ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index a9e4d0f . . 596c379 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ public class TextContainer { <nl> private static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ; <nl> - private Map < String , TextContainer > props ; <nl> + private Map < String , TextContainer > props = ImmutableMap . of ( ) ; <nl> <nl> protected TextContainer ( final String text , final String operation , <nl> final Map < String , TextContainer > props ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index fbfbcfe . . 47bfda2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 176 , 6 + 176 , 10 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return fileResource ( name , FileContainer . class . cast ( container ) ) ; <nl> } <nl> <nl> + return textResource ( name , container ) ; <nl> + } <nl> + <nl> + private Resource textResource ( final String name , final TextContainer container ) { <nl> if ( container . isRawText ( ) ) { <nl> return invokeTarget ( name , container . getText ( ) , Resource . class ) ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 7a40773 . . 7fde1b9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 18 , 9 + 18 , 7 @ @ import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> - import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . Moco . latency ; <nl> - import static com . github . dreamhead . moco . Moco . proxy ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> @ @ - 174 , 6 + 172 , 13 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> private Resource resourceFrom ( final String name , final TextContainer container ) { <nl> + if ( container . isFileContainer ( ) ) { <nl> + Optional < Resource > resource = fileResource ( name , FileContainer . class . cast ( container ) ) ; <nl> + if ( resource . isPresent ( ) ) { <nl> + return resource . get ( ) ; <nl> + } <nl> + } <nl> + <nl> if ( container . isRawText ( ) ) { <nl> return invokeTarget ( name , container . getText ( ) , Resource . class ) ; <nl> } <nl> @ @ - 186 , 17 + 191 , 18 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return container . asTemplateResource ( name ) ; <nl> } <nl> <nl> - if ( container . isFileContainer ( ) ) { <nl> - Optional < Resource > resource = fileResource ( name , FileContainer . class . cast ( container ) ) ; <nl> - if ( resource . isPresent ( ) ) { <nl> - return resource . get ( ) ; <nl> - } <nl> - } <nl> - <nl> throw new IllegalArgumentException ( format ( " unknown operation [ % s ] " , container . getOperation ( ) ) ) ; <nl> } <nl> <nl> private Optional < Resource > fileResource ( final String name , final FileContainer fileContainer ) { <nl> + if ( fileContainer . isForTemplate ( ) ) { <nl> + if ( " version " . equalsIgnoreCase ( name ) ) { <nl> + return Optional . of ( version ( fileContainer . asTemplateResource ( ) ) ) ; <nl> + } <nl> + <nl> + return Optional . < Resource > of ( fileContainer . asTemplateResource ( name ) ) ; <nl> + } <nl> + <nl> TextContainer filename = fileContainer . getName ( ) ; <nl> if ( filename . isRawText ( ) ) { <nl> return Optional . of ( asResource ( name , fileContainer ) ) ;
diff - - git a / build . gradle b / build . gradle <nl> index 8378622 . . 4944d24 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 4 . Final ' <nl> slf4jVersion = ' 1 . 7 . 21 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 8 . 1 ' <nl> + jacksonVersion = ' 2 . 8 . 2 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 1 . 10 . 19 '
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> deleted file mode 100644 <nl> index 3851a2b . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 91 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . deserializer ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> - import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Iterators ; <nl> - import com . google . common . collect . Maps ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Iterator ; <nl> - import java . util . Map ; <nl> - <nl> - import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> - import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> - import static com . google . common . collect . ImmutableMap . copyOf ; <nl> - import static com . google . common . collect . Maps . transformEntries ; <nl> - <nl> - public abstract class AbstractTextContainerDeserializer < T extends TextContainer > extends JsonDeserializer < T > { <nl> - private final ImmutableMap < String , String > names = ImmutableMap . < String , String > builder ( ) <nl> - . put ( " json _ path " , " jsonPaths " ) <nl> - . put ( " xpath " , " xpaths " ) <nl> - . put ( " header " , " headers " ) <nl> - . put ( " cookie " , " cookies " ) <nl> - . put ( " form " , " forms " ) <nl> - . build ( ) ; <nl> - <nl> - protected TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> - TextContainer . Builder builder = builder ( ) ; <nl> - String operation = jp . getText ( ) . trim ( ) ; <nl> - builder . withOperation ( operation ) ; <nl> - JsonToken token = jp . nextToken ( ) ; <nl> - if ( token = = JsonToken . VALUE _ STRING ) { <nl> - String text = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - return builder . withText ( text ) . build ( ) ; <nl> - } <nl> - <nl> - if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> - return template ( jp , builder ) ; <nl> - } <nl> - } <nl> - <nl> - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> - } <nl> - <nl> - private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> - Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> - Template template = Iterators . get ( iterator , 0 ) ; <nl> - jp . nextToken ( ) ; <nl> - return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; <nl> - } <nl> - <nl> - private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { <nl> - return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; <nl> - } <nl> - <nl> - private Maps . EntryTransformer < String , TextContainer , TextContainer > toLocalContainer ( ) { <nl> - return new Maps . EntryTransformer < String , TextContainer , TextContainer > ( ) { <nl> - @ Override <nl> - public TextContainer transformEntry ( final String key , final TextContainer container ) { <nl> - if ( container . isRawText ( ) ) { <nl> - return container ; <nl> - } <nl> - <nl> - return toLocal ( container ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private TextContainer toLocal ( final TextContainer container ) { <nl> - String name = names . get ( container . getOperation ( ) ) ; <nl> - if ( name = = null ) { <nl> - return container ; <nl> - } <nl> - return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> - } <nl> - <nl> - protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> - return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> - } <nl> - <nl> - private static class Template { <nl> - public String with ; <nl> - public Map < String , TextContainer > vars ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index a0bd521 . . 7111d3b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . parser . deserializer ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . parser . model . FileContainer ; <nl> import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> @ @ - 13 , 12 + 14 , 14 @ @ import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContaine <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; <nl> import static com . google . common . collect . Iterators . get ; <nl> <nl> - public class FileContainerDeserializer extends AbstractTextContainerDeserializer < FileContainer > { <nl> + public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> + private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> + <nl> @ Override <nl> public FileContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return asFileContainer ( text ( jp ) ) ; <nl> + return asFileContainer ( helper . text ( jp ) ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> @ @ - 29 , 7 + 32 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer <nl> return toFileContainer ( jp ) ; <nl> } <nl> <nl> - return asFileContainer ( textContainer ( jp , ctxt ) ) ; <nl> + return asFileContainer ( helper . textContainer ( jp , ctxt ) ) ; <nl> } <nl> <nl> return ( FileContainer ) ctxt . handleUnexpectedToken ( FileContainer . class , jp ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index d422723 . . 161750e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 3 , 21 + 3 , 24 @ @ package com . github . dreamhead . moco . parser . deserializer ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> import java . io . IOException ; <nl> <nl> - public class TextContainerDeserializer extends AbstractTextContainerDeserializer < TextContainer > { <nl> + public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> + private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> + <nl> @ Override <nl> public TextContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return text ( jp ) ; <nl> + return helper . text ( jp ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> jp . nextToken ( ) ; <nl> - return textContainer ( jp , ctxt ) ; <nl> + return helper . textContainer ( jp , ctxt ) ; <nl> } <nl> <nl> return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> new file mode 100644 <nl> index 0000000 . . dd139ed <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 0 , 0 + 1 , 91 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterators ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> + import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> + import static com . google . common . collect . ImmutableMap . copyOf ; <nl> + import static com . google . common . collect . Maps . transformEntries ; <nl> + <nl> + public class TextContainerDeserializerHelper { <nl> + private final ImmutableMap < String , String > names = ImmutableMap . < String , String > builder ( ) <nl> + . put ( " json _ path " , " jsonPaths " ) <nl> + . put ( " xpath " , " xpaths " ) <nl> + . put ( " header " , " headers " ) <nl> + . put ( " cookie " , " cookies " ) <nl> + . put ( " form " , " forms " ) <nl> + . build ( ) ; <nl> + <nl> + public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> + TextContainer . Builder builder = builder ( ) ; <nl> + String operation = jp . getText ( ) . trim ( ) ; <nl> + builder . withOperation ( operation ) ; <nl> + JsonToken token = jp . nextToken ( ) ; <nl> + if ( token = = JsonToken . VALUE _ STRING ) { <nl> + String text = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + return builder . withText ( text ) . build ( ) ; <nl> + } <nl> + <nl> + if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + return template ( jp , builder ) ; <nl> + } <nl> + } <nl> + <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + } <nl> + <nl> + private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> + Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> + Template template = Iterators . get ( iterator , 0 ) ; <nl> + jp . nextToken ( ) ; <nl> + return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; <nl> + } <nl> + <nl> + private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { <nl> + return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; <nl> + } <nl> + <nl> + private Maps . EntryTransformer < String , TextContainer , TextContainer > toLocalContainer ( ) { <nl> + return new Maps . EntryTransformer < String , TextContainer , TextContainer > ( ) { <nl> + @ Override <nl> + public TextContainer transformEntry ( final String key , final TextContainer container ) { <nl> + if ( container . isRawText ( ) ) { <nl> + return container ; <nl> + } <nl> + <nl> + return toLocal ( container ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private TextContainer toLocal ( final TextContainer container ) { <nl> + String name = names . get ( container . getOperation ( ) ) ; <nl> + if ( name = = null ) { <nl> + return container ; <nl> + } <nl> + return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> + } <nl> + <nl> + protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> + return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + } <nl> + <nl> + private static class Template { <nl> + public String with ; <nl> + public Map < String , TextContainer > vars ; <nl> + } <nl> + }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> index 97aeb23 . . 5759355 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / BaseResourceSetting . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ public abstract class BaseResourceSetting { <nl> return file ; <nl> } <nl> <nl> - public TextContainer getPathResource ( ) { <nl> + public FileContainer getPathResource ( ) { <nl> return pathResource ; <nl> } <nl> }
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index e7933ef . . 30fcb71 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> <nl> # APIs <nl> * Template for Event action <nl> + * Remove publish API with Optional , e . g . file and pathResource <nl> <nl> # JUnit <nl> * HTTPS JUnit runner for POJO , JSON and from path resource
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 76962b8 . . 2c2f253 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . HttpResponse ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . MutableHttpResponse ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> - import com . github . dreamhead . moco . handler . failover . FailoverStrategy ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableSet ; <nl> @ @ - 201 , 7 + 200 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpResponse doProxy ( final HttpRequest request , final URL remoteUrl ) { <nl> - if ( failover . getStrategy ( ) = = FailoverStrategy . PLAYBACK ) { <nl> + if ( failover . isPlayback ( ) ) { <nl> try { <nl> return failover . failover ( request ) ; <nl> } catch ( RuntimeException ignored ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 5365ce2 . . 5c8a914 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 15 , 10 + 15 , 6 @ @ public class Failover { <nl> this . strategy = strategy ; <nl> } <nl> <nl> - public FailoverStrategy getStrategy ( ) { <nl> - return strategy ; <nl> - } <nl> - <nl> public HttpResponse failover ( final HttpRequest request ) { <nl> return executor . failover ( request ) ; <nl> } <nl> @ @ - 26 , 4 + 22 , 8 @ @ public class Failover { <nl> public void onCompleteResponse ( final HttpRequest request , final HttpResponse httpResponse ) { <nl> executor . onCompleteResponse ( request , httpResponse ) ; <nl> } <nl> + <nl> + public boolean isPlayback ( ) { <nl> + return strategy = = FailoverStrategy . PLAYBACK ; <nl> + } <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 29fdd8e . . 37a15de 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> @ @ - 99 , 7 + 98 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> if ( ProxyContainer . class . isInstance ( value ) ) { <nl> - return createProxy ( ( ProxyContainer ) value ) ; <nl> + return ( ( ProxyContainer ) value ) . asResponseHandler ( ) ; <nl> } <nl> <nl> if ( " attachment " . equalsIgnoreCase ( name ) ) { <nl> @ @ - 245 , 13 + 244 , 4 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } ; <nl> } <nl> <nl> - private ResponseHandler createProxy ( final ProxyContainer proxy ) { <nl> - Failover failover = proxy . getFailover ( ) ; <nl> - <nl> - if ( proxy . hasProxyConfig ( ) ) { <nl> - return proxy ( proxy . getProxyConfig ( ) , failover ) ; <nl> - } <nl> - <nl> - return proxy ( proxy . getUrl ( ) , failover ) ; <nl> - } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> index 2884750 . . 54b366c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainer . java <nl> @ @ - 1 , 6 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . Moco ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; <nl> import com . github . dreamhead . moco . parser . deserializer . ProxyContainerDeserializer ; <nl> @ @ - 59 , 10 + 61 , 20 @ @ public class ProxyContainer { <nl> return from ( from ) . to ( to ) ; <nl> } <nl> <nl> - public boolean hasProxyConfig ( ) { <nl> + private boolean hasProxyConfig ( ) { <nl> return from ! = null & & to ! = null ; <nl> } <nl> <nl> + public ResponseHandler asResponseHandler ( ) { <nl> + Failover failover = getFailover ( ) ; <nl> + <nl> + if ( hasProxyConfig ( ) ) { <nl> + return Moco . proxy ( getProxyConfig ( ) , failover ) ; <nl> + } <nl> + <nl> + return Moco . proxy ( getUrl ( ) , failover ) ; <nl> + } <nl> + <nl> public static class Builder { <nl> private String url ; <nl> private String failover ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> index 9355dcc . . 4f7b407 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FileContainer . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ public final class FileContainer extends TextContainer { <nl> <nl> private FileContainer ( final TextContainer container ) { <nl> super ( container . getText ( ) , container . getOperation ( ) , container . getProps ( ) ) ; <nl> + this . name = container ; <nl> } <nl> <nl> private FileContainer ( final TextContainer name , final Optional < Charset > charset ) { <nl> @ @ - 44 , 7 + 45 , 7 @ @ public final class FileContainer extends TextContainer { <nl> <nl> @ Override <nl> public boolean isFileContainer ( ) { <nl> - return name ! = null ; <nl> + return true ; <nl> } <nl> <nl> public static FileContainer asFileContainer ( final TextContainer container ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 5cca6ff . . f782f11 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> - import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> @ @ - 185 , 7 + 184 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return version ( template ( container . getText ( ) ) ) ; <nl> } <nl> <nl> - return createTemplate ( name , container ) ; <nl> + return container . asTemplateResource ( name ) ; <nl> } <nl> <nl> if ( container . isFileContainer ( ) ) { <nl> @ @ - 229 , 15 + 228 , 6 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return asResource ( name , Moco . text ( text ) , charset ) ; <nl> } <nl> <nl> - private Resource createTemplate ( final String name , final TextContainer container ) { <nl> - if ( container . hasProperties ( ) ) { <nl> - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , <nl> - toVariables ( container . getProps ( ) ) ) ; <nl> - } <nl> - <nl> - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; <nl> - } <nl> - <nl> public static ImmutableMap < String , RequestExtractor < ? > > toVariables ( final Map < String , TextContainer > props ) { <nl> return copyOf ( Maps . transformEntries ( props , toVariable ( ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 4666c27 . . 1a870f5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 43 , 15 + 43 , 29 @ @ public class TextContainer { <nl> } <nl> <nl> public ContentResource asTemplateResource ( ) { <nl> + ensureTemplate ( ) ; <nl> + <nl> + if ( hasProperties ( ) ) { <nl> + return template ( this . text , toVariables ( this . props ) ) ; <nl> + } <nl> + <nl> + return template ( this . text ) ; <nl> + } <nl> + <nl> + private void ensureTemplate ( ) { <nl> if ( ! isForTemplate ( ) ) { <nl> throw new IllegalArgumentException ( this + " is not a template " ) ; <nl> } <nl> + } <nl> + <nl> + public ContentResource asTemplateResource ( final String resourceName ) { <nl> + ensureTemplate ( ) ; <nl> <nl> if ( hasProperties ( ) ) { <nl> - return template ( this . text , toVariables ( this . props ) ) ; <nl> + return template ( invokeTarget ( resourceName , this . text , ContentResource . class ) , toVariables ( this . props ) ) ; <nl> } <nl> <nl> - return template ( this . text ) ; <nl> + return template ( invokeTarget ( resourceName , this . text , ContentResource . class ) ) ; <nl> } <nl> <nl> private String getMethodName ( ) {
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 496b951 . . 931ac01 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 36 , 16 + 36 , 20 @ @ public class TextContainer { <nl> } <nl> <nl> if ( isForTemplate ( ) ) { <nl> - if ( hasProperties ( ) ) { <nl> - return template ( this . text , toVariables ( this . props ) ) ; <nl> - } <nl> - <nl> - return template ( this . text ) ; <nl> + return asTemplateResource ( ) ; <nl> } <nl> <nl> return invokeTarget ( getMethodName ( ) , this . text , ContentResource . class ) ; <nl> } <nl> <nl> + private ContentResource asTemplateResource ( ) { <nl> + if ( hasProperties ( ) ) { <nl> + return template ( this . text , toVariables ( this . props ) ) ; <nl> + } <nl> + <nl> + return template ( this . text ) ; <nl> + } <nl> + <nl> private String getMethodName ( ) { <nl> if ( this . operation . equalsIgnoreCase ( " path _ resource " ) ) { <nl> return " pathResource " ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 8e0f651 . . 2a09d0e 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 89 , 5 + 89 , 4 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> - <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 1f7a1f8 . . 427e46a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> FileContainer fileContainer = FileContainer . class . cast ( container ) ; <nl> TextContainer filename = fileContainer . getName ( ) ; <nl> if ( filename . isRawText ( ) ) { <nl> - return Optional . of ( asRawResource ( name , fileContainer ) ) ; <nl> + return Optional . of ( asResource ( name , fileContainer ) ) ; <nl> } <nl> <nl> if ( filename . isForTemplate ( ) ) { <nl> @ @ - 218 , 17 + 218 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> if ( charset . isPresent ( ) ) { <nl> return invokeTarget ( name , resource , charset . get ( ) , <nl> Resource . class , Resource . class , Charset . class ) ; <nl> - } else { <nl> - return invokeTarget ( name , resource , <nl> - Resource . class , Resource . class ) ; <nl> } <nl> + <nl> + return invokeTarget ( name , resource , Resource . class ) ; <nl> } <nl> <nl> - private Resource asRawResource ( final String name , final FileContainer fileContainer ) { <nl> + private Resource asResource ( final String name , final FileContainer fileContainer ) { <nl> Optional < Charset > charset = fileContainer . getCharset ( ) ; <nl> String text = fileContainer . getName ( ) . getText ( ) ; <nl> return asResource ( name , Moco . text ( text ) , charset ) ; <nl> - <nl> } <nl> <nl> private Resource createTemplate ( final String name , final TextContainer container ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index cafd619 . . a0b3954 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 401 , 11 + 401 , 7 @ @ public final class Moco { <nl> return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> - public static ContentResource pathResource ( final String filename , final Optional < Charset > charset ) { <nl> - return pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; <nl> - } <nl> - <nl> - public static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> + private static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , checkNotNull ( charset , " Charset should not be null " ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 913718f . . e54d70a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import com . google . common . collect . Maps ; <nl> <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> + import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> @ @ - 200 , 8 + 201 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> FileContainer fileContainer = FileContainer . class . cast ( container ) ; <nl> TextContainer filename = fileContainer . getName ( ) ; <nl> if ( filename . isRawText ( ) ) { <nl> - return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , fileContainer . getCharset ( ) , <nl> - Resource . class , String . class , Optional . class ) ) ; <nl> + Optional < Charset > charset = fileContainer . getCharset ( ) ; <nl> + if ( charset . isPresent ( ) ) { <nl> + return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , charset . get ( ) , <nl> + Resource . class , String . class , Charset . class ) ) ; <nl> + } else { <nl> + return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , <nl> + Resource . class , String . class ) ) ; <nl> + <nl> + } <nl> } <nl> <nl> if ( filename . isForTemplate ( ) ) {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 4cc501e . . 3246719 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 197 , 7 + 197 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource _ url ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( pathResource ( " template . url " ) , " content " ) ) ) ; <nl> @ @ - 213 , 6 + 213 , 22 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource _ content ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pathResource ( " foo . request " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ;
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 023a903 . . a5b8bd9 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import static com . github . dreamhead . moco . Moco . fileRoot ; <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . Moco . latency ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> @ @ - 131 , 6 + 132 , 23 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( pathResource ( " template . url " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " target " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ template ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> diff - - git a / moco - core / src / test / resources / template . url b / moco - core / src / test / resources / template . url <nl> new file mode 100644 <nl> index 0000000 . . 0d582ec <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / template . url <nl> @ @ - 0 , 0 + 1 @ @ <nl> + http : / / localhost : 12306 / target <nl> \ No newline at end of file
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> index ece4648 . . df3ba79 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> @ @ - 12 , 16 + 12 , 12 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> - import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . rest . ActualRestServer ; <nl> import com . google . common . base . MoreObjects ; <nl> import com . google . common . base . Optional ; <nl> <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> - import static com . github . dreamhead . moco . Moco . template ; <nl> - import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . MocoMount . to ; <nl> - import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> import static com . github . dreamhead . moco . util . Iterables . head ; <nl> import static com . github . dreamhead . moco . util . Iterables . tail ; <nl> <nl> @ @ - 117 , 28 + 113 , 12 @ @ public class SessionSetting { <nl> <nl> HttpResponseSetting targetRequest = server . request ( getRequestMatcher ( ) ) ; <nl> if ( isRedirectResponse ( ) ) { <nl> - return targetRequest . redirectTo ( redirectResource ( this . redirectTo ) ) ; <nl> + return targetRequest . redirectTo ( this . redirectTo . asResource ( ) ) ; <nl> } <nl> <nl> return targetRequest . response ( getResponseHandler ( ) ) ; <nl> } <nl> <nl> - private Resource redirectResource ( final TextContainer textContainer ) { <nl> - if ( textContainer . isRawText ( ) ) { <nl> - return text ( textContainer . getText ( ) ) ; <nl> - } <nl> - <nl> - if ( textContainer . isForTemplate ( ) ) { <nl> - if ( textContainer . hasProperties ( ) ) { <nl> - return template ( textContainer . getText ( ) , toVariables ( textContainer . getProps ( ) ) ) ; <nl> - } <nl> - <nl> - return template ( textContainer . getText ( ) ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; <nl> - } <nl> - <nl> private boolean isProxy ( ) { <nl> return this . proxy ! = null ; <nl> }
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> index e1b7c66 . . 997e651 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> @ @ - 7 , 7 + 8 , 7 @ @ import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> public class EventActionSettings { <nl> - public static Resource urlResource ( final TextContainer url ) { <nl> + public static ContentResource asResource ( final TextContainer url ) { <nl> if ( url . isRawText ( ) ) { <nl> return text ( url . getText ( ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 1d81591 . . 952b7fd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 5 , 14 + 5 , 14 @ @ import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> - import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; <nl> + import static com . github . dreamhead . moco . parser . model . EventActionSettings . asResource ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class GetSetting { <nl> private TextContainer url ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return get ( urlResource ( url ) ) ; <nl> + return get ( asResource ( url ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index c41eef3 . . 859db79 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 1 , 20 + 1 , 19 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> - import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> - import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; <nl> + import static com . github . dreamhead . moco . parser . model . EventActionSettings . asResource ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class PostSetting { <nl> private TextContainer url ; <nl> - private String content ; <nl> + private TextContainer content ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return post ( urlResource ( this . url ) , Moco . text ( content ) ) ; <nl> + return post ( asResource ( this . url ) , asResource ( content ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 0698fde . . 8e0f651 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 78 , 4 + 78 , 16 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ fire _ event _ with _ post _ content _ template ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - content " ) ) , is ( " post _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index 1bf46ea . . 7dcce9e 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 105 , 6 + 105 , 31 @ @ <nl> } <nl> } , <nl> { <nl> + " request " : { <nl> + " uri " : " / post - event - with - template - content " <nl> + } , <nl> + " response " : { <nl> + " text " : " post _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> + " content " : { <nl> + " template " : { <nl> + " with " : " $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } , <nl> + { <nl> " request " : { <nl> " uri " : " / target " <nl> } ,
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> index 3972bb6 . . e1b7c66 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> @ @ - 13 , 7 + 13 , 11 @ @ public class EventActionSettings { <nl> } <nl> <nl> if ( url . isForTemplate ( ) ) { <nl> - return template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ; <nl> + if ( url . hasProperties ( ) ) { <nl> + return template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ; <nl> + } <nl> + <nl> + return template ( url . getText ( ) ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( " Unknown " + url + " for event action setting " ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 9b98ca1 . . 1d81591 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 2 , 13 + 2 , 9 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> - import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> - import static com . github . dreamhead . moco . Moco . template ; <nl> - import static com . github . dreamhead . moco . Moco . text ; <nl> - import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index 66d10aa . . c41eef3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 3 , 14 + 3 , 9 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> - import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> - import static com . github . dreamhead . moco . Moco . template ; <nl> - import static com . github . dreamhead . moco . Moco . text ; <nl> - import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY )
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index b29f1f9 . . 8c1813e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 2 , 10 + 2 , 12 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> @ @ - 13 , 12 + 15 , 16 @ @ public class GetSetting { <nl> private TextContainer url ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> + return get ( urlResource ( url ) ) ; <nl> + } <nl> + <nl> + private Resource urlResource ( final TextContainer url ) { <nl> if ( url . isRawText ( ) ) { <nl> - return get ( url . getText ( ) ) ; <nl> + return text ( url . getText ( ) ) ; <nl> } <nl> <nl> if ( url . isForTemplate ( ) ) { <nl> - return get ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ) ; <nl> + return template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index 040c719 . . 98cdf66 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 3 , 11 + 3 , 13 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> @ @ - 16 , 15 + 18 , 19 @ @ public class PostSetting { <nl> private String content ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> + return post ( urlResource ( this . url ) , Moco . text ( content ) ) ; <nl> + } <nl> + <nl> + private Resource urlResource ( final TextContainer url ) { <nl> if ( url . isRawText ( ) ) { <nl> - return post ( url . getText ( ) , Moco . text ( content ) ) ; <nl> + return text ( url . getText ( ) ) ; <nl> } <nl> <nl> if ( url . isForTemplate ( ) ) { <nl> - return post ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) , Moco . text ( content ) ) ; <nl> + return template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ; <nl> } <nl> <nl> - throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; <nl> + throw new IllegalArgumentException ( " Unknown " + url + " for post setting " ) ; <nl> } <nl> <nl> @ Override
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 391cae7 . . 87644e9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 5 , 13 + 5 , 23 @ @ import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> + import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class GetSetting { <nl> - private String url ; <nl> + private TextContainer url ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return get ( url ) ; <nl> + if ( url . isRawText ( ) ) { <nl> + return get ( url . getText ( ) ) ; <nl> + } <nl> + <nl> + if ( url . isForTemplate ( ) ) { <nl> + return get ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown " + url ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index e0488a3 . . 3ba5356 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 47 , 6 + 47 , 17 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ fire _ get _ event _ with _ template ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / get _ event _ template " ) ) , is ( " get _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ fire _ event _ with _ unit ( ) throws IOException { <nl> runWithConfiguration ( " event . json " ) ; <nl> File file = folder . newFile ( ) ; <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index a772f87 . . a2e8fa3 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 56 , 6 + 56 , 30 @ @ <nl> } <nl> } <nl> } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / get _ event _ template " <nl> + } , <nl> + " response " : { <nl> + " text " : " get _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 1000 , <nl> + " get " : { <nl> + " url " : { <nl> + " template " : { <nl> + " with " : " http : / / localhost : 12306 / $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } , <nl> <nl> { <nl> " request " : {
diff - - git a / build . gradle b / build . gradle <nl> index af439f9 . . 2e2e188 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 2 . Final ' <nl> slf4jVersion = ' 1 . 7 . 21 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 8 . 0 ' <nl> + jacksonVersion = ' 2 . 8 . 1 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 1 . 10 . 19 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / UnexpectedRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / UnexpectedRequestMatcher . java <nl> index 4f89037 . . dbc0d0e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / UnexpectedRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / UnexpectedRequestMatcher . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - public class UnexpectedRequestMatcher implements RequestMatcher { <nl> + public final class UnexpectedRequestMatcher implements RequestMatcher { <nl> @ Override <nl> public boolean match ( final Request request ) { <nl> return true ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 5c1445e . . 147f470 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import java . nio . charset . Charset ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> - public class ApiUtils { <nl> + public final class ApiUtils { <nl> public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> return new CompositeMonitor ( asIterable ( monitor , monitor2 , monitors ) ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 85c49e5 . . 8a35963 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan <nl> protected abstract MediaType getContentType ( final HttpRequest request ) ; <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> + public final void writeToResponse ( final SessionContext context ) { <nl> Request request = context . getRequest ( ) ; <nl> Response response = context . getResponse ( ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 54c1336 . . 9a44daf 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> } <nl> <nl> @ Override <nl> - public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> + public final MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> return asMessageContent ( doReadFor ( request ) ) ; <nl> } <nl> <nl> @ @ - 40 , 12 + 40 , 12 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> } <nl> <nl> @ Override <nl> - public MediaType getContentType ( final HttpRequest request ) { <nl> + public final MediaType getContentType ( final HttpRequest request ) { <nl> String targetFilename = this . filename ( of ( request ) ) ; <nl> return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; <nl> } <nl> <nl> - protected String filename ( final Optional < ? extends Request > request ) { <nl> + protected final String filename ( final Optional < ? extends Request > request ) { <nl> MessageContent messageContent = this . filename . readFor ( request ) ; <nl> return messageContent . toString ( ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 08b6b01 . . 1d98429 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . HttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> + import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 35 , 7 + 36 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> return builder ( ) <nl> - . withVersion ( HttpProtocolVersion . versionOf ( response . protocolVersion ( ) . text ( ) ) ) <nl> + . withVersion ( toHttpProtocolVersion ( response . protocolVersion ( ) ) ) <nl> . withStatus ( response . status ( ) . code ( ) ) <nl> . withHeaders ( headerBuilder . build ( ) ) <nl> . withContent ( content ( ) <nl> @ @ - 44 , 6 + 45 , 10 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> . build ( ) ; <nl> } <nl> <nl> + private static HttpProtocolVersion toHttpProtocolVersion ( final HttpVersion httpVersion ) { <nl> + return HttpProtocolVersion . versionOf ( httpVersion . text ( ) ) ; <nl> + } <nl> + <nl> public static Builder builder ( ) { <nl> return new Builder ( ) ; <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 3513fad . . af439f9 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 148 , 5 + 148 , 5 @ @ subprojects { <nl> } <nl> <nl> task wrapper ( type : Wrapper ) { <nl> - gradleVersion = ' 2 . 14 ' <nl> + gradleVersion = ' 2 . 14 . 1 ' <nl> } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> index d4bf10d . . d74a9ce 100644 <nl> - - - a / gradle / wrapper / gradle - wrapper . properties <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - # Wed Jun 15 11 : 24 : 55 CST 2016 <nl> + # Mon Jul 18 21 : 38 : 55 CST 2016 <nl> distributionBase = GRADLE _ USER _ HOME <nl> distributionPath = wrapper / dists <nl> zipStoreBase = GRADLE _ USER _ HOME <nl> zipStorePath = wrapper / dists <nl> - distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 14 - bin . zip <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 14 . 1 - bin . zip
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 3c44370 . . 9c80ac5 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 5 + 1 , 8 @ @ <nl> # Release <nl> <nl> + # APIs <nl> + * Template for Event action <nl> + <nl> # JUnit <nl> * HTTPS JUnit runner for POJO , JSON and from path resource <nl> * Http JSON runner with path resource <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 914afdb . . b8c1de5 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1906 , 7 + 1906 , 7 @ @ server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / ano <nl> } <nl> ` ` ` <nl> <nl> - Let me know if you need more method . <nl> + Let me know if you need more methods . <nl> <nl> # # # Asynchronous <nl> * * @ Since 0 . 9 * *
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 6891274 . . cafd619 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 447 , 17 + 447 , 17 @ @ public final class Moco { <nl> return ProxyConfig . builder ( checkNotNullOrEmpty ( localBase , " Local base should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final String template ) { <nl> + public static ContentResource template ( final String template ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) ) ; <nl> } <nl> <nl> - public static Resource template ( final String template , final String name , final String value ) { <nl> + public static ContentResource template ( final String template , final String name , final String value ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> + public static ContentResource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , <nl> @ @ - 465 , 17 + 465 , 17 @ @ public final class Moco { <nl> checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource resource ) { <nl> + public static ContentResource template ( final ContentResource resource ) { <nl> return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , RequestExtractor < ? > > of ( ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource template , final String name , final String value ) { <nl> + public static ContentResource template ( final ContentResource template , final String name , final String value ) { <nl> return template ( checkNotNull ( template , " Template should not be null " ) , <nl> checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> var ( checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> + public static ContentResource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> return template ( checkNotNull ( template , " Template should not be null " ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> var ( checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) ) , <nl> @ @ - 483 , 13 + 483 , 13 @ @ public final class Moco { <nl> var ( checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; <nl> } <nl> <nl> - public static < T > Resource template ( final String template , final String name , final RequestExtractor < T > extractor ) { <nl> + public static < T > ContentResource template ( final String template , final String name , final RequestExtractor < T > extractor ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ; <nl> } <nl> <nl> - public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> + public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> @ @ - 498 , 14 + 498 , 14 @ @ public final class Moco { <nl> checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ; <nl> } <nl> <nl> - public static < T > Resource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> + public static < T > ContentResource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> new ExtractorVariable < T > ( checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ) <nl> ) ; <nl> } <nl> <nl> - public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> + public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> @ @ - 515 , 12 + 515 , 12 @ @ public final class Moco { <nl> ) ; <nl> } <nl> <nl> - public static Resource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , <nl> checkNotNull ( variables , " Template variable should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index 0502376 . . 4586b64 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 51 , 14 + 51 , 14 @ @ public class MocoRequestAction implements MocoEventAction { <nl> private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> HttpRequestBase targetRequest = createRequest ( url , method , request ) ; <nl> if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) ) ) ; <nl> + ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; <nl> } <nl> <nl> client . execute ( targetRequest ) ; <nl> } <nl> <nl> - private HttpEntity asEntity ( ContentResource resource ) { <nl> - return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> + private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> + return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 5828fe7 . . 023a903 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import org . mockito . Mockito ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> import static com . github . dreamhead . moco . Moco . async ; <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . complete ; <nl> @ @ - 148 , 7 + 149 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , " content " ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 164 , 7 + 165 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string _ and _ resource _ url ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( text ( remoteUrl ( " / target " ) ) , " content " ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 180 , 7 + 181 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 194 , 9 + 195 , 25 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ template _ content ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , template ( " $ { req . headers [ ' foo ' ] } " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " content " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ resource _ url ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( text ( remoteUrl ( " / target " ) ) , text ( " content " ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 212 , 7 + 229 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ asyc ( ) throws Exception { <nl> final ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( async ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 230 , 7 + 247 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ async _ after _ awhile ( ) throws Exception { <nl> final ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( async ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) , latency ( 1 , TimeUnit . SECONDS ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> index d567968 . . 3c1dfbd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> public interface MocoEventAction extends ConfigApplier < MocoEventAction > { <nl> - void execute ( ) ; <nl> + void execute ( final Request request ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> index b802393 . . 56c3d90 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> @ @ - 13 , 8 + 13 , 8 @ @ public class MocoEventTrigger implements ConfigApplier < MocoEventTrigger > { <nl> return this . event = = event ; <nl> } <nl> <nl> - public void fireEvent ( ) { <nl> - action . execute ( ) ; <nl> + public void fireEvent ( final Request request ) { <nl> + action . execute ( request ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> index 598ada8 . . 45a072c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . action ; <nl> <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> + import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 18 , 12 + 19 , 12 @ @ public class MocoAsyncAction implements MocoEventAction { <nl> } <nl> <nl> @ Override <nl> - public void execute ( ) { <nl> + public void execute ( final Request request ) { <nl> service . execute ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> procedure . execute ( ) ; <nl> - action . execute ( ) ; <nl> + action . execute ( request ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index d11a7f9 . . 0502376 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 34 , 10 + 34 , 10 @ @ public class MocoRequestAction implements MocoEventAction { <nl> } <nl> <nl> @ Override <nl> - public void execute ( ) { <nl> + public void execute ( final Request request ) { <nl> CloseableHttpClient client = HttpClients . createDefault ( ) ; <nl> try { <nl> - doExecute ( client ) ; <nl> + doExecute ( client , request ) ; <nl> } catch ( IOException e ) { <nl> throw new MocoException ( e ) ; <nl> } finally { <nl> @ @ - 48 , 21 + 48 , 21 @ @ public class MocoRequestAction implements MocoEventAction { <nl> } <nl> } <nl> <nl> - private void doExecute ( final CloseableHttpClient client ) throws IOException { <nl> - HttpRequestBase request = createRequest ( url , method ) ; <nl> - if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( content . get ( ) ) ) ; <nl> + private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> + HttpRequestBase targetRequest = createRequest ( url , method , request ) ; <nl> + if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> + ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) ) ) ; <nl> } <nl> <nl> - client . execute ( request ) ; <nl> + client . execute ( targetRequest ) ; <nl> } <nl> <nl> private HttpEntity asEntity ( ContentResource resource ) { <nl> return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> - private HttpRequestBase createRequest ( final Resource url , final HttpMethod method ) { <nl> - String targetUrl = url . readFor ( Optional . < Request > absent ( ) ) . toString ( ) ; <nl> + private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { <nl> + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> if ( HttpMethod . GET = = method ) { <nl> return new HttpGet ( targetUrl ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> index 39b6d83 . . 9095c83 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> @ @ - 33 , 13 + 33 , 13 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> @ Override <nl> public void writeToResponse ( final SessionContext context ) { <nl> this . handler . writeToResponse ( context ) ; <nl> - this . fireCompleteEvent ( ) ; <nl> + this . fireCompleteEvent ( context . getRequest ( ) ) ; <nl> } <nl> <nl> - public void fireCompleteEvent ( ) { <nl> + public void fireCompleteEvent ( final Request request ) { <nl> for ( MocoEventTrigger eventTrigger : eventTriggers ) { <nl> if ( eventTrigger . isFor ( MocoEvent . COMPLETE ) ) { <nl> - eventTrigger . fireEvent ( ) ; <nl> + eventTrigger . fireEvent ( request ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index cfd1b85 . . 80f9885 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action ) . execute ( ) ; <nl> + verify ( action ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action ) . execute ( ) ; <nl> + verify ( action ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action , Mockito . never ( ) ) . execute ( ) ; <nl> + verify ( action , Mockito . never ( ) ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 94 , 6 + 94 , 21 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ template ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( template ( " $ { var } " , " var " , remoteUrl ( " / target " ) ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { <nl> @ @ - 209 , 7 + 224 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action ) . execute ( ) ; <nl> + verify ( action ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 166b52e . . 38eb2c4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 550 , 11 + 550 , 15 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoEventAction get ( final String url ) { <nl> - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; <nl> + return get ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> + } <nl> + <nl> + public static MocoEventAction get ( final Resource url ) { <nl> + return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final ContentResource content ) { <nl> - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> + return new MocoRequestAction ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final String content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index ba714d9 . . d11a7f9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 23 , 11 + 23 , 11 @ @ import static com . google . common . base . Optional . of ; <nl> import static java . lang . String . format ; <nl> <nl> public class MocoRequestAction implements MocoEventAction { <nl> - private final String url ; <nl> + private final Resource url ; <nl> private final HttpMethod method ; <nl> private final Optional < ContentResource > content ; <nl> <nl> - public MocoRequestAction ( final String url , final HttpMethod method , final Optional < ContentResource > content ) { <nl> + public MocoRequestAction ( final Resource url , final HttpMethod method , final Optional < ContentResource > content ) { <nl> this . url = url ; <nl> this . method = method ; <nl> this . content = content ; <nl> @ @ - 61 , 13 + 61 , 14 @ @ public class MocoRequestAction implements MocoEventAction { <nl> return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> - private HttpRequestBase createRequest ( final String url , final HttpMethod method ) { <nl> + private HttpRequestBase createRequest ( final Resource url , final HttpMethod method ) { <nl> + String targetUrl = url . readFor ( Optional . < Request > absent ( ) ) . toString ( ) ; <nl> if ( HttpMethod . GET = = method ) { <nl> - return new HttpGet ( url ) ; <nl> + return new HttpGet ( targetUrl ) ; <nl> } <nl> <nl> if ( HttpMethod . POST = = method ) { <nl> - return new HttpPost ( url ) ; <nl> + return new HttpPost ( targetUrl ) ; <nl> } <nl> <nl> throw new MocoException ( format ( " unknown HTTP method : % s " , method ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 1917f45 . . 8d785d5 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 79 , 6 + 79 , 23 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ resource ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( text ( remoteUrl ( " / target " ) ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ;
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index 9bed046 . . e1ff1df 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 15 , 19 + 15 , 19 @ @ import static com . google . common . base . Preconditions . checkNotNull ; <nl> public final class MocoJsonRunner { <nl> public static HttpServer jsonHttpServer ( final int port , final Resource resource ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> - return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; <nl> + return parseHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; <nl> } <nl> <nl> public static HttpServer jsonHttpServer ( final Resource resource ) { <nl> - return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ; <nl> + return parseHttpServer ( checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ; <nl> } <nl> <nl> public static HttpsServer jsonHttpsServer ( final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> - return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( <nl> - checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> + return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> + checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ) ; <nl> } <nl> <nl> public static HttpsServer jsonHttpsServer ( final int port , final Resource resource , <nl> @ @ - 35 , 8 + 35 , 8 @ @ public final class MocoJsonRunner { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> - return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( port , <nl> - checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> + return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> + checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ) ; <nl> } <nl> <nl> public static SocketServer jsonSocketServer ( final int port , final Resource resource ) { <nl> @ @ - 53 , 7 + 53 , 7 @ @ public final class MocoJsonRunner { <nl> return parser . parseServer ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) , port ) ; <nl> } <nl> <nl> - private static HttpServer jsonHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> + private static HttpServer parseHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> HttpServerParser parser = new HttpServerParser ( ) ; <nl> return parser . parseServer ( toStream ( resource ) , port ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index 8f2076e . . 654307f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> private final MocoMonitor monitor ; <nl> private final List < Setting < T > > settings = newArrayList ( ) ; <nl> private Optional < Integer > port ; <nl> - private RequestMatcher matcher = ANY _ REQUEST _ MATCHER ; <nl> + private RequestMatcher anyMatcher = ANY _ REQUEST _ MATCHER ; <nl> <nl> public BaseActualServer ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { <nl> this . port = port ; <nl> @ @ - 52 , 9 + 52 , 9 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> } <nl> <nl> public Setting < T > getAnySetting ( ) { <nl> - Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; <nl> + Setting < T > setting = newSetting ( configuredAnyMatcher ( ) ) ; <nl> if ( this . handler ! = null ) { <nl> - setting . response ( configuredResponseHandler ( ) ) ; <nl> + setting . response ( configuredAnyResponseHandler ( ) ) ; <nl> } <nl> for ( MocoEventTrigger trigger : eventTriggers ) { <nl> setting . on ( trigger ) ; <nl> @ @ - 78 , 10 + 78 , 10 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> this . eventTriggers . addAll ( eventTriggers ) ; <nl> } <nl> <nl> - protected void anySetting ( final RequestMatcher matcher , final ResponseHandler handler ) { <nl> + protected void anySetting ( final RequestMatcher anyMatcher , final ResponseHandler handler ) { <nl> if ( handler ! = null ) { <nl> this . response ( handler ) ; <nl> - this . matcher = matcher ; <nl> + this . anyMatcher = anyMatcher ; <nl> } <nl> } <nl> <nl> @ @ - 95 , 11 + 95 , 11 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> return configItem ( source , this . configs ) ; <nl> } <nl> <nl> - protected RequestMatcher configuredMatcher ( ) { <nl> - return configured ( this . matcher ) ; <nl> + protected RequestMatcher configuredAnyMatcher ( ) { <nl> + return configured ( this . anyMatcher ) ; <nl> } <nl> <nl> - protected ResponseHandler configuredResponseHandler ( ) { <nl> + protected ResponseHandler configuredAnyResponseHandler ( ) { <nl> return configured ( this . handler ) ; <nl> } <nl> <nl> @ @ - 108 , 8 + 108 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> <nl> - newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configuredResponseHandler ( ) ) ; <nl> + newServer . anySetting ( configuredAnyMatcher ( ) , this . configuredAnyResponseHandler ( ) ) ; <nl> + newServer . anySetting ( thatServer . configuredAnyMatcher ( ) , thatServer . configuredAnyResponseHandler ( ) ) ; <nl> <nl> newServer . addEvents ( this . eventTriggers ) ; <nl> newServer . addEvents ( thatServer . eventTriggers ) ;
diff - - git a / build . gradle b / build . gradle <nl> index d13f595 . . 7f1645e 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 19 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 1 . Final ' <nl> + nettyVersion = ' 4 . 1 . 2 . Final ' <nl> slf4jVersion = ' 1 . 7 . 21 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 7 . 5 '
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 1b3adc6 . . 43d7324 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 10 , 9 + 10 , 10 @ @ import com . github . dreamhead . moco . monitor . QuietMonitor ; <nl> import com . github . dreamhead . moco . monitor . Slf4jMonitor ; <nl> import com . github . dreamhead . moco . setting . HttpSetting ; <nl> import com . google . common . base . Optional ; <nl> + <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class ActualHttpServer extends HttpConfiguration { <nl> + public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> private final Optional < HttpsCertificate > certificate ; <nl> <nl> protected ActualHttpServer ( final Optional < Integer > port , <nl> @ @ - 30 , 19 + 31 , 8 @ @ public class ActualHttpServer extends HttpConfiguration { <nl> return certificate ; <nl> } <nl> <nl> - public ActualHttpServer mergeServer ( final ActualHttpServer thatServer ) { <nl> - ActualHttpServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , <nl> - this . certificate . or ( thatServer . certificate ) ) ; <nl> - newServer . addSettings ( this . getSettings ( ) ) ; <nl> - newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> - <nl> - newServer . anySetting ( configuredMatcher ( ) , configured ( this . handler ) ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configured ( thatServer . handler ) ) ; <nl> - <nl> - newServer . addEvents ( this . eventTriggers ) ; <nl> - newServer . addEvents ( thatServer . eventTriggers ) ; <nl> - <nl> - return newServer ; <nl> + protected ActualHttpServer doCreateServer ( final ActualHttpServer thatServer ) { <nl> + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , this . certificate . or ( thatServer . certificate ) ) ; <nl> } <nl> <nl> private ActualHttpServer newBaseServer ( final Optional < Integer > port , final Optional < HttpsCertificate > certificate ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index 343afe1 . . 4c46c37 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import com . github . dreamhead . moco . setting . Setting ; <nl> import com . github . dreamhead . moco . setting . SocketSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting > implements SocketServer { <nl> + public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting , ActualSocketServer > implements SocketServer { <nl> private ActualSocketServer ( final Optional < Integer > port , final MocoMonitor monitor ) { <nl> super ( port , monitor , new MocoConfig [ 0 ] ) ; <nl> } <nl> @ @ - 30 , 18 + 30 , 9 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> return baseSetting ; <nl> } <nl> <nl> - public ActualSocketServer mergeServer ( final ActualSocketServer thatServer ) { <nl> - ActualSocketServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; <nl> - newServer . addSettings ( this . getSettings ( ) ) ; <nl> - newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> - <nl> - newServer . anySetting ( configuredMatcher ( ) , configured ( this . handler ) ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configured ( thatServer . handler ) ) ; <nl> - <nl> - newServer . addEvents ( this . eventTriggers ) ; <nl> - newServer . addEvents ( thatServer . eventTriggers ) ; <nl> - <nl> - return newServer ; <nl> + @ Override <nl> + protected ActualSocketServer doCreateServer ( final ActualSocketServer thatServer ) { <nl> + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; <nl> } <nl> <nl> private ActualSocketServer newBaseServer ( final Optional < Integer > thisPort ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index e5a7d6c . . 81fa992 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ import static com . github . dreamhead . moco . util . Configs . configItems ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> - public abstract class BaseActualServer < T extends ResponseSetting < T > > extends BaseServer < T > { <nl> + public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends BaseActualServer > extends BaseServer < T > { <nl> protected abstract Setting < T > newSetting ( final RequestMatcher matcher ) ; <nl> <nl> private final MocoConfig [ ] configs ; <nl> @ @ - 74 , 7 + 74 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas <nl> <nl> public Setting < T > getAnySetting ( ) { <nl> Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; <nl> - ResponseHandler configuredHandler = configured ( this . handler ) ; <nl> + ResponseHandler configuredHandler = configuredResponseHandler ( ) ; <nl> if ( configuredHandler ! = null ) { <nl> setting . response ( configuredHandler ) ; <nl> } <nl> @ @ - 120 , 4 + 120 , 25 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas <nl> protected RequestMatcher configuredMatcher ( ) { <nl> return configured ( this . matcher ) ; <nl> } <nl> + <nl> + public U mergeServer ( final U thatServer ) { <nl> + U newServer = doCreateServer ( thatServer ) ; <nl> + newServer . addSettings ( this . getSettings ( ) ) ; <nl> + newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> + <nl> + newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; <nl> + ResponseHandler configured = thatServer . configuredResponseHandler ( ) ; <nl> + newServer . anySetting ( thatServer . configuredMatcher ( ) , configured ) ; <nl> + <nl> + newServer . addEvents ( this . eventTriggers ) ; <nl> + newServer . addEvents ( thatServer . eventTriggers ) ; <nl> + <nl> + return newServer ; <nl> + } <nl> + <nl> + protected ResponseHandler configuredResponseHandler ( ) { <nl> + return configured ( this . handler ) ; <nl> + } <nl> + <nl> + protected abstract U doCreateServer ( final U thatServer ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> index f867ac4 . . e93cdc1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> @ @ - 5 , 15 + 5 , 15 @ @ import com . github . dreamhead . moco . Runner ; <nl> import io . netty . channel . Channel ; <nl> import io . netty . channel . ChannelInitializer ; <nl> <nl> - public abstract class BaseServerRunner < T extends ResponseSetting < T > > extends Runner { <nl> - protected abstract BaseActualServer < T > serverSetting ( ) ; <nl> + public abstract class BaseServerRunner < T extends ResponseSetting < T > , U extends BaseActualServer > extends Runner { <nl> + protected abstract BaseActualServer < T , U > serverSetting ( ) ; <nl> protected abstract ChannelInitializer < ? extends Channel > channelInitializer ( ) ; <nl> <nl> private final MocoServer server = new MocoServer ( ) ; <nl> <nl> @ Override <nl> public void start ( ) { <nl> - BaseActualServer < T > setting = serverSetting ( ) ; <nl> + BaseActualServer < T , U > setting = serverSetting ( ) ; <nl> int port = this . server . start ( setting . getPort ( ) . or ( 0 ) , channelInitializer ( ) ) ; <nl> setting . setPort ( port ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> index 4e7c26b . . f7db9aa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> @ @ - 27 , 7 + 27 , 8 @ @ import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> - public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSetting > implements HttpsServer { <nl> + public abstract class HttpConfiguration < T extends BaseActualServer > <nl> + extends BaseActualServer < HttpResponseSetting , T > implements HttpsServer { <nl> private final RedirectDelegate delegate = new RedirectDelegate ( ) ; <nl> <nl> protected HttpConfiguration ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java <nl> index 8e2a3d8 . . 42146d4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import io . netty . channel . ChannelInitializer ; <nl> import io . netty . channel . ChannelPipeline ; <nl> import io . netty . channel . socket . SocketChannel ; <nl> <nl> - public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting > { <nl> + public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting , ActualSocketServer > { <nl> private final ActualSocketServer serverSetting ; <nl> <nl> public MocoSocketServer ( final ActualSocketServer serverSetting ) { <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting > { <nl> } <nl> <nl> @ Override <nl> - protected BaseActualServer < SocketResponseSetting > serverSetting ( ) { <nl> + protected ActualSocketServer serverSetting ( ) { <nl> return this . serverSetting ; <nl> } <nl>
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> index 792e8ba . . 834924f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> @ @ - 43 , 6 + 43 , 37 @ @ public class ActualSocketServerTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ merge _ socket _ servers _ with _ first _ port ( ) throws Exception { <nl> + SocketServer server = socketServer ( 12306 ) ; <nl> + SocketServer secondServer = socketServer ( ) ; <nl> + <nl> + <nl> + final SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; <nl> + <nl> + running ( newServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( newServer . port ( ) , is ( 12306 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ merge _ socket _ servers _ with _ second _ port ( ) throws Exception { <nl> + SocketServer server = socketServer ( ) ; <nl> + SocketServer secondServer = socketServer ( 12307 ) ; <nl> + <nl> + final SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; <nl> + <nl> + running ( newServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( newServer . port ( ) , is ( 12307 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private String line ( String text ) { <nl> return text + " \ r \ n " ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 313d2b7 . . 1b3adc6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public class ActualHttpServer extends HttpConfiguration { <nl> return certificate ; <nl> } <nl> <nl> - public ActualHttpServer mergeHttpServer ( final ActualHttpServer thatServer ) { <nl> + public ActualHttpServer mergeServer ( final ActualHttpServer thatServer ) { <nl> ActualHttpServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , <nl> this . certificate . or ( thatServer . certificate ) ) ; <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index 4c7b5a4 . . 988b39a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> return baseSetting ; <nl> } <nl> <nl> - public SocketServer mergeHttpServer ( final ActualSocketServer thatServer ) { <nl> + public SocketServer mergeServer ( final ActualSocketServer thatServer ) { <nl> ActualSocketServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index e3cc0b4 . . 1a35c87 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ merge _ http _ server _ with _ any _ handler _ one _ side ( ) throws Exception { <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> <nl> @ Test ( expected = HttpResponseException . class ) <nl> public void should _ throw _ exception _ for _ merging _ http _ server _ with _ any _ handler _ one _ side ( ) throws Exception { <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ merge _ http _ server _ with _ any _ handler _ other _ side ( ) throws Exception { <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) httpServer ) . mergeHttpServer ( ( ActualHttpServer ) anotherServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) httpServer ) . mergeServer ( ( ActualHttpServer ) anotherServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> <nl> @ Test ( expected = HttpResponseException . class ) <nl> public void should _ throw _ for _ merging _ http _ server _ with _ any _ handler _ other _ side ( ) throws Exception { <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) httpServer ) . mergeHttpServer ( ( ActualHttpServer ) anotherServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) httpServer ) . mergeServer ( ( ActualHttpServer ) anotherServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ config _ handler _ correctly _ while _ merging ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , fileRoot ( " src / test / resources " ) ) ; <nl> httpServer . response ( file ( " foo . response " ) ) ; <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> @ @ - 91 , 7 + 91 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ config _ handler _ correctly _ other _ side _ while _ merging ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , fileRoot ( " src / test / resources " ) ) ; <nl> httpServer . response ( file ( " foo . response " ) ) ; <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) httpServer ) . mergeHttpServer ( ( ActualHttpServer ) anotherServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) httpServer ) . mergeServer ( ( ActualHttpServer ) anotherServer ) ; <nl> <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ merge _ https _ server ( ) throws Exception { <nl> anotherServer = httpsServer ( 12306 , DEFAULT _ CERTIFICATE , context ( " / bar " ) ) ; <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> httpServer . response ( " foo " ) ; <nl> anotherServer = httpsServer ( 12306 , DEFAULT _ CERTIFICATE , context ( " / bar " ) ) ; <nl> anotherServer . request ( by ( uri ( " / bar " ) ) ) . response ( " bar " ) ; <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ merge _ https _ server _ into _ http _ server ( ) throws Exception { <nl> httpServer = httpsServer ( 12306 , DEFAULT _ CERTIFICATE , context ( " / foo " ) ) ; <nl> httpServer . response ( " foo " ) ; <nl> - HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ merge _ http _ server _ with _ same _ port ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , context ( " / foo " ) ) ; <nl> anotherServer = httpServer ( 12306 , context ( " / bar " ) ) ; <nl> - final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 161 , 7 + 161 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ merge _ http _ server _ with _ different _ port ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , context ( " / foo " ) ) ; <nl> anotherServer = httpServer ( 12307 , context ( " / bar " ) ) ; <nl> - final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 174 , 7 + 174 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ merge _ http _ server _ without _ port _ for _ first _ server ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , context ( " / foo " ) ) ; <nl> anotherServer = httpServer ( context ( " / bar " ) ) ; <nl> - final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 187 , 7 + 187 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ merge _ http _ server _ without _ port _ for _ second _ server ( ) throws Exception { <nl> httpServer = httpServer ( context ( " / foo " ) ) ; <nl> anotherServer = httpServer ( 12307 , context ( " / bar " ) ) ; <nl> - final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> running ( mergedServer , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> @ @ - 200 , 7 + 200 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> public void should _ merge _ http _ server _ without _ port _ for _ both _ servers ( ) throws Exception { <nl> httpServer = httpServer ( context ( " / foo " ) ) ; <nl> anotherServer = httpServer ( context ( " / bar " ) ) ; <nl> - final ActualHttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + final ActualHttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeServer ( ( ActualHttpServer ) httpServer ) ; <nl> assertThat ( mergedServer . getPort ( ) . isPresent ( ) , is ( false ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index 37d3e15 . . 9bed046 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public final class MocoJsonRunner { <nl> final HttpsCertificate certificate ) { <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( <nl> + return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( <nl> checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> } <nl> <nl> @ @ - 35 , 7 + 35 , 7 @ @ public final class MocoJsonRunner { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , <nl> + return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( port , <nl> checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> index b58b1a7 . . a9528c3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class HttpServerParser extends BaseParser < HttpServer > { <nl> <nl> for ( SessionSetting session : sessionSettings ) { <nl> logger . debug ( " Parse session : { } " , session ) ; <nl> - targetServer = targetServer . mergeHttpServer ( session . newHttpServer ( port , configs ) ) ; <nl> + targetServer = targetServer . mergeServer ( session . newHttpServer ( port , configs ) ) ; <nl> } <nl> <nl> return targetServer ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 8c512b0 . . c9d119f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public final class JsonRunner implements Runner { <nl> <nl> private SocketServer mergeServer ( final SocketServer socketServer , final SocketServer parsedServer ) { <nl> ActualSocketServer thisServer = ( ActualSocketServer ) socketServer ; <nl> - return thisServer . mergeHttpServer ( ( ActualSocketServer ) parsedServer ) ; <nl> + return thisServer . mergeServer ( ( ActualSocketServer ) parsedServer ) ; <nl> } <nl> <nl> private HttpServer createHttpServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> @ @ - 117 , 7 + 117 , 7 @ @ public final class JsonRunner implements Runner { <nl> <nl> private HttpServer mergeServer ( final HttpServer server , final HttpServer parsedServer ) { <nl> ActualHttpServer thisServer = ( ActualHttpServer ) server ; <nl> - return thisServer . mergeHttpServer ( ( ActualHttpServer ) parsedServer ) ; <nl> + return thisServer . mergeServer ( ( ActualHttpServer ) parsedServer ) ; <nl> } <nl> <nl> public static JsonRunner newJsonRunnerWithStreams ( final Iterable < ? extends InputStream > streams ,
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index c1bc07d . . c37b0d2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 25 , 14 + 25 , 19 @ @ public final class MocoJsonRunner { <nl> <nl> public static HttpsServer jsonHttpsServer ( final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> + checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( resource ) ) ; <nl> + return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( <nl> + checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> } <nl> <nl> public static HttpsServer jsonHttpsServer ( final int port , final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , resource ) ) ; <nl> + return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , <nl> + checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> } <nl> <nl> public static SocketServer jsonSocketServer ( final int port , final Resource resource ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index 1ea0857 . . 5ab4518 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> } <nl> <nl> public SocketServer mergeHttpServer ( final ActualSocketServer thatServer ) { <nl> - ActualSocketServer newServer = newBaseServer ( ) ; <nl> + ActualSocketServer newServer = newBaseServer ( this . getPort ( ) ) ; <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> <nl> @ @ - 44 , 8 + 44 , 8 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> return newServer ; <nl> } <nl> <nl> - private ActualSocketServer newBaseServer ( ) { <nl> - return createLogServer ( this . getPort ( ) ) ; <nl> + private ActualSocketServer newBaseServer ( final Optional < Integer > thisPort ) { <nl> + return createLogServer ( thisPort ) ; <nl> } <nl> <nl> public static ActualSocketServer createQuietServer ( final Optional < Integer > port ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index 3084fee . . e3cc0b4 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 144 , 7 + 144 , 6 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> - <nl> @ Test <nl> public void should _ merge _ http _ server _ with _ same _ port ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , context ( " / foo " ) ) ;
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index b248908 . . 3084fee 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 116 , 6 + 116 , 22 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ merge _ two _ https _ servers ( ) throws Exception { <nl> + httpServer = httpsServer ( 12306 , DEFAULT _ CERTIFICATE , context ( " / foo " ) ) ; <nl> + httpServer . response ( " foo " ) ; <nl> + anotherServer = httpsServer ( 12306 , DEFAULT _ CERTIFICATE , context ( " / bar " ) ) ; <nl> + anotherServer . request ( by ( uri ( " / bar " ) ) ) . response ( " bar " ) ; <nl> + HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + running ( mergedServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteHttpsUrl ( " / foo / anything " ) ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . get ( remoteHttpsUrl ( " / bar / bar " ) ) , is ( " bar " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ merge _ https _ server _ into _ http _ server ( ) throws Exception { <nl> httpServer = httpsServer ( 12306 , DEFAULT _ CERTIFICATE , context ( " / foo " ) ) ; <nl> httpServer . response ( " foo " ) ; <nl> @ @ - 128 , 6 + 144 , 7 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> + <nl> @ Test <nl> public void should _ merge _ http _ server _ with _ same _ port ( ) throws Exception { <nl> httpServer = httpServer ( 12306 , context ( " / foo " ) ) ;
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index 4088304 . . b248908 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 179 , 4 + 179 , 12 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ merge _ http _ server _ without _ port _ for _ both _ servers ( ) throws Exception { <nl> + httpServer = httpServer ( context ( " / foo " ) ) ; <nl> + anotherServer = httpServer ( context ( " / bar " ) ) ; <nl> + final ActualHttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + assertThat ( mergedServer . getPort ( ) . isPresent ( ) , is ( false ) ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index ca4d55d . . 09a5110 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 154 , 4 + 154 , 16 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ merge _ http _ server _ without _ port _ for _ first _ server ( ) throws Exception { <nl> + httpServer = httpServer ( 12306 , context ( " / foo " ) ) ; <nl> + anotherServer = httpServer ( context ( " / bar " ) ) ; <nl> + final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + running ( mergedServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( mergedServer . port ( ) , is ( 12306 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> index 7d94f40 . . 912ef8e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualHttpServerTest . java <nl> @ @ - 127 , 4 + 127 , 17 @ @ public class ActualHttpServerTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ merge _ http _ server _ with _ same _ port ( ) throws Exception { <nl> + httpServer = httpServer ( 12306 , context ( " / foo " ) ) ; <nl> + anotherServer = httpServer ( 12306 , context ( " / bar " ) ) ; <nl> + final HttpServer mergedServer = ( ( ActualHttpServer ) anotherServer ) . mergeHttpServer ( ( ActualHttpServer ) httpServer ) ; <nl> + running ( mergedServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( mergedServer . port ( ) , is ( 12306 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }
diff - - git a / build . gradle b / build . gradle <nl> index 57f0a08 . . 8990fa2 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 76 , 7 + 76 , 7 @ @ subprojects { <nl> nettyVersion = ' 4 . 1 . 1 . Final ' <nl> slf4jVersion = ' 1 . 7 . 21 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> - jacksonVersion = ' 2 . 7 . 4 ' <nl> + jacksonVersion = ' 2 . 7 . 5 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 ' <nl> mockitoVersion = ' 1 . 10 . 19 '
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index a850b2e . . 3c44370 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 8 + 1 , 9 @ @ <nl> # Release <nl> <nl> # JUnit <nl> - * Http JSON Runner with path resource <nl> - * Socket JSON Runner with path resource <nl> + * HTTPS JUnit runner for POJO , JSON and from path resource <nl> + * Http JSON runner with path resource <nl> + * Socket JSON runner with path resource <nl> <nl> # # Implementation Details <nl> * Fix : get Moco standalone version from manifest <nl> diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 5bbcf93 . . 879f4a7 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 66 , 6 + 66 , 61 @ @ public class MocoJunitJsonHttpRunnerTest { <nl> } <nl> ` ` ` <nl> <nl> + # # HTTPS Server <nl> + <nl> + # # # POJO HTTPS Server <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + * * httpsRunner * * can reference a HttpsServer object . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitPojoHttpRunnerTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + private static HttpServer server ; <nl> + <nl> + static { <nl> + server = httpsServer ( 12306 , DEFAULT _ CERTIFICATE ) ; <nl> + server . response ( " foo " ) ; <nl> + } <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . httpsRunner ( server ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # JSON HTTPS Server <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + * * jsonHttpsRunner * * can reference a JSON file as a HTTP server . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , " foo . json " , DEFAULT _ CERTIFICATE ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + JSON configuration can be retrieved from the classpath . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , Moco . pathResource ( " foo . json " ) , DEFAULT _ CERTIFICATE ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> # # Socket Server <nl> <nl> # # # POJO Socket Server
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index 9b1d1c8 . . 6fb6137 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . junit ; <nl> <nl> import com . github . dreamhead . moco . HttpServer ; <nl> import com . github . dreamhead . moco . HttpsCertificate ; <nl> + import com . github . dreamhead . moco . HttpsServer ; <nl> import com . github . dreamhead . moco . RestServer ; <nl> import com . github . dreamhead . moco . Runner ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> @ @ - 57 , 6 + 58 , 11 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner httpsRunner ( final HttpsServer server ) { <nl> + checkNotNull ( server , " Server should not be null " ) ; <nl> + return new MocoJunitRunner ( runner ( server ) ) ; <nl> + } <nl> + <nl> public static MocoJunitRunner restRunner ( final RestServer server ) { <nl> checkNotNull ( server , " Server should not be null " ) ; <nl> return httpRunner ( server ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoHttpsRunnerTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoHttpsRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . ce3a95d <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoHttpsRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import com . github . dreamhead . moco . HttpsCertificate ; <nl> + import com . github . dreamhead . moco . HttpsServer ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> + import static com . github . dreamhead . moco . Moco . httpsServer ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitPojoHttpsRunnerTest extends AbstractMocoStandaloneTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + <nl> + private static HttpsServer server ; <nl> + <nl> + static { <nl> + server = httpsServer ( 12306 , DEFAULT _ CERTIFICATE ) ; <nl> + server . response ( " foo " ) ; <nl> + } <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . httpsRunner ( server ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + }
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index e2fabab . . f22a184 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . junit ; <nl> <nl> import com . github . dreamhead . moco . HttpServer ; <nl> + import com . github . dreamhead . moco . HttpsCertificate ; <nl> import com . github . dreamhead . moco . RestServer ; <nl> import com . github . dreamhead . moco . Runner ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> @ @ - 9 , 6 + 10 , 7 @ @ import org . junit . rules . ExternalResource ; <nl> <nl> import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; <nl> + import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpsServer ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonSocketServer ; <nl> import static com . github . dreamhead . moco . Runner . runner ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> @ @ - 34 , 6 + 36 , 14 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ) ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonHttpsRunner ( final int port , final String filename , <nl> + final HttpsCertificate certificate ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; <nl> + checkNotNull ( certificate , " Filename should not be null " ) ; <nl> + return new MocoJunitRunner ( runner ( jsonHttpsServer ( port , file ( filename ) , certificate ) ) ) ; <nl> + } <nl> + <nl> public static MocoJunitRunner httpRunner ( final HttpServer server ) { <nl> checkNotNull ( server , " Server should not be null " ) ; <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 4d31223 <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import com . github . dreamhead . moco . HttpsCertificate ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonHttpsRunnerTest extends AbstractMocoStandaloneTest { <nl> + private final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , " src / test / resources / foo . json " , DEFAULT _ CERTIFICATE ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message _ 2 ( ) throws IOException { <nl> + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java <nl> index 87af655 . . 52f23a7 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java <nl> @ @ - 5 , 12 + 5 , 10 @ @ import org . junit . Test ; <nl> import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> - import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpsServer ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl>
diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 32ea988 . . 5bbcf93 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 11 , 8 + 11 , 8 @ @ Moco makes use of Test Rule in JUnit to simplify JUnit integration . * * MocoJunitR <nl> * [ POJO Socket Server ] ( # pojo - socket - server ) <nl> * [ JSON Socket Server ] ( # json - socket - server ) <nl> * [ Rest Server ] ( # rest - server ) <nl> - * [ POJO Socket Server ] ( # pojo - rest - server ) <nl> - * [ JSON Socket Server ] ( # json - rest - server ) <nl> + * [ POJO Rest Server ] ( # pojo - rest - server ) <nl> + * [ JSON Rest Server ] ( # json - rest - server ) <nl> <nl> # # HTTP Server <nl> <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { <nl> <nl> # # Rest Server <nl> <nl> - # # # POJO HTTP Server <nl> + # # # POJO Rest Server <nl> <nl> * * @ Since 0 . 11 . 0 * * <nl>
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index c7b6f68 . . bddf1a9 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 61 , 13 + 61 , 13 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> } <nl> <nl> - public static MocoJunitRunner jsonRestRunner ( int port , String filename ) { <nl> + public static MocoJunitRunner jsonRestRunner ( final int port , final String filename ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; <nl> return jsonRestRunner ( port , file ( filename ) ) ; <nl> } <nl> <nl> - public static MocoJunitRunner jsonRestRunner ( int port , Resource file ) { <nl> + public static MocoJunitRunner jsonRestRunner ( final int port , final Resource file ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNull ( file , " File should not be null " ) ; <nl> return jsonHttpRunner ( port , file ) ;
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index a430095 . . a850b2e 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 4 , 6 + 4 , 9 @ @ <nl> * Http JSON Runner with path resource <nl> * Socket JSON Runner with path resource <nl> <nl> + # # Implementation Details <nl> + * Fix : get Moco standalone version from manifest <nl> + <nl> # Release 0 . 11 . 0 ( 20 - May - 2016 ) <nl> <nl> # # Usage
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index b8ca4e5 . . 76962b8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 15 , 9 + 15 , 9 @ @ import io . netty . buffer . Unpooled ; <nl> import io . netty . handler . codec . http . DefaultFullHttpResponse ; <nl> import io . netty . handler . codec . http . FullHttpRequest ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> - import io . netty . handler . codec . http . HttpHeaders ; <nl> import io . netty . handler . codec . http . HttpMethod ; <nl> import io . netty . handler . codec . http . HttpResponseStatus ; <nl> + import io . netty . handler . codec . http . HttpUtil ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> import org . apache . http . Header ; <nl> @ @ - 73 , 7 + 73 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> remoteRequest . setConfig ( config ) ; <nl> remoteRequest . setProtocolVersion ( createVersion ( request ) ) ; <nl> <nl> - long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; <nl> + long contentLength = HttpUtil . getContentLength ( request , - 1 ) ; <nl> if ( contentLength > 0 & & remoteRequest instanceof HttpEntityEnclosingRequest ) { <nl> HttpEntityEnclosingRequest entityRequest = ( HttpEntityEnclosingRequest ) remoteRequest ; <nl> entityRequest . setEntity ( createEntity ( request . content ( ) , contentLength ) ) ; <nl> @ @ - 83 , 7 + 83 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpRequestBase createRemoteRequest ( final FullHttpRequest request , final URL url ) { <nl> - HttpRequestBase remoteRequest = createBaseRequest ( url , request . getMethod ( ) ) ; <nl> + HttpRequestBase remoteRequest = createBaseRequest ( url , request . method ( ) ) ; <nl> for ( Map . Entry < String , String > entry : request . headers ( ) ) { <nl> if ( isRequestHeader ( entry ) ) { <nl> remoteRequest . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> @ @ - 98 , 7 + 98 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private org . apache . http . HttpVersion createVersion ( final FullHttpRequest request ) { <nl> - HttpVersion protocolVersion = request . getProtocolVersion ( ) ; <nl> + HttpVersion protocolVersion = request . protocolVersion ( ) ; <nl> return new org . apache . http . HttpVersion ( protocolVersion . majorVersion ( ) , protocolVersion . minorVersion ( ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> index 187a63d . . 8133272 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> @ @ - 17 , 10 + 17 , 10 @ @ import io . netty . handler . codec . http . HttpResponseStatus ; <nl> <nl> import static com . github . dreamhead . moco . model . DefaultMutableHttpResponse . newResponse ; <nl> import static io . netty . channel . ChannelHandler . Sharable ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . isContentLengthSet ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . isKeepAlive ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . setContentLength ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . setKeepAlive ; <nl> + import static io . netty . handler . codec . http . HttpUtil . isContentLengthSet ; <nl> + import static io . netty . handler . codec . http . HttpUtil . isKeepAlive ; <nl> + import static io . netty . handler . codec . http . HttpUtil . setContentLength ; <nl> + import static io . netty . handler . codec . http . HttpUtil . setKeepAlive ; <nl> <nl> @ Sharable <nl> public class MocoHandler extends SimpleChannelInboundHandler < FullHttpRequest > { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index ab0fb09 . . 3765a6b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . buffer . Unpooled ; <nl> import io . netty . handler . codec . http . DefaultFullHttpRequest ; <nl> import io . netty . handler . codec . http . FullHttpRequest ; <nl> - import io . netty . handler . codec . http . HttpHeaders ; <nl> + import io . netty . handler . codec . http . HttpUtil ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringDecoder ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> @ @ - 123 , 7 + 123 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> private static MessageContent toMessageContent ( final FullHttpRequest request ) { <nl> - long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; <nl> + long contentLength = HttpUtil . getContentLength ( request , - 1 ) ; <nl> if ( contentLength < = 0 ) { <nl> return content ( ) . build ( ) ; <nl> } <nl> @ @ - 132 , 13 + 132 , 13 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> public static HttpRequest newRequest ( final FullHttpRequest request ) { <nl> - QueryStringDecoder decoder = new QueryStringDecoder ( request . getUri ( ) ) ; <nl> + QueryStringDecoder decoder = new QueryStringDecoder ( request . uri ( ) ) ; <nl> ImmutableMap < String , String [ ] > queries = toQueries ( decoder ) ; <nl> <nl> return builder ( ) <nl> - . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) <nl> + . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> . withHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> - . withMethod ( HttpMethod . valueOf ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> + . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> . withContent ( toMessageContent ( request ) ) <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 79e8b39 . . 08b6b01 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 35 , 8 + 35 , 8 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> return builder ( ) <nl> - . withVersion ( HttpProtocolVersion . versionOf ( response . getProtocolVersion ( ) . text ( ) ) ) <nl> - . withStatus ( response . getStatus ( ) . code ( ) ) <nl> + . withVersion ( HttpProtocolVersion . versionOf ( response . protocolVersion ( ) . text ( ) ) ) <nl> + . withStatus ( response . status ( ) . code ( ) ) <nl> . withHeaders ( headerBuilder . build ( ) ) <nl> . withContent ( content ( ) <nl> . withContent ( new ByteBufInputStream ( response . content ( ) ) )
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index cf3146f . . a430095 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 3 + 1 , 9 @ @ <nl> + # Release <nl> + <nl> + # JUnit <nl> + * Http JSON Runner with path resource <nl> + * Socket JSON Runner with path resource <nl> + <nl> # Release 0 . 11 . 0 ( 20 - May - 2016 ) <nl> <nl> # # Usage <nl> diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 5137ae8 . . 77837b4 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 50 , 6 + 50 , 19 @ @ public class MocoJunitJsonHttpRunnerTest extends AbstractMocoStandaloneTest { <nl> } <nl> ` ` ` <nl> <nl> + * * @ Since will be at next release <nl> + <nl> + JSON configuration can be retrieved from the classpath . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpRunner ( 12306 , Moco . pathResource ( " foo . json " ) ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> # # Socket Server <nl> <nl> # # # POJO Socket Server <nl> @ @ - 88 , 3 + 101 , 16 @ @ public class MocoJunitJsonSocketRunnerTest { <nl> . . . <nl> } <nl> ` ` ` <nl> + <nl> + * * @ Since will be at next release <nl> + <nl> + JSON configuration can be retrieved from the classpath . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonSocketRunner ( 12306 , Moco . pathResource ( " foo . json " ) ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> \ No newline at end of file
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index 3735a47 . . ff59833 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 64 , 6 + 64 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> public static MocoJunitRunner jsonRestRunner ( int port , String filename ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; <nl> + return jsonRestRunner ( port , file ( filename ) ) ; <nl> + } <nl> + <nl> + public static MocoJunitRunner jsonRestRunner ( int port , Resource filename ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( filename , " Filename should not be null " ) ; <nl> return jsonHttpRunner ( port , filename ) ; <nl> } <nl> <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java <nl> new file mode 100644 <nl> index 0000000 . . f018bef <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import org . apache . http . HttpResponse ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonRestRunnerWithPathTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonRestRunner ( 12306 , pathResource ( " rest . json " ) ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + HttpResponse response = helper . postForResponse ( remoteUrl ( " / targets " ) , " hello " ) ; <nl> + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; <nl> + assertThat ( response . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; <nl> + } <nl> + }
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index ae7abe3 . . ac45be4 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 51 , 6 + 51 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( jsonSocketServer ( port , file ( filename ) ) ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonSocketRunner ( final int port , final Resource filename ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( filename , " Filename should not be null " ) ; <nl> + return new MocoJunitRunner ( runner ( jsonSocketServer ( port , filename ) ) ) ; <nl> + } <nl> + <nl> public static MocoJunitRunner socketRunner ( final SocketServer server ) { <nl> checkNotNull ( server , " Server should not be null " ) ; <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7d9ca7d <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoSocketHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonSocketRunnerWithPathTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonSocketRunner ( 12306 , pathResource ( " base . json " ) ) ; <nl> + <nl> + private MocoSocketHelper helper ; <nl> + <nl> + @ Before <nl> + public void setup ( ) { <nl> + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ response ( ) throws Exception { <nl> + helper . connect ( ) ; <nl> + assertThat ( helper . send ( " foo " , 3 ) , is ( " bar " ) ) ; <nl> + helper . close ( ) ; <nl> + } <nl> + <nl> + }
diff - - git a / build . gradle b / build . gradle <nl> index e756237 . . 8af1cd2 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 75 , 7 + 75 , 7 @ @ subprojects { <nl> guavaVersion = ' 19 . 0 ' <nl> nettyVersion = ' 4 . 0 . 36 . Final ' <nl> slf4jVersion = ' 1 . 7 . 21 ' <nl> - commonsIoVersion = ' 2 . 4 ' <nl> + commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 7 . 4 ' <nl> junitVersion = ' 4 . 12 ' <nl> hamcrestVersion = ' 1 . 3 '
diff - - git a / README . md b / README . md <nl> index 415fc0a . . f8e5363 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> Moco is an easy setup stub framework . <nl> <nl> # # Latest Release <nl> - * _ _ 0 . 10 . 2 _ _ <nl> + * _ _ 0 . 11 . 0 _ _ <nl> <nl> More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) <nl> <nl> @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w <nl> In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . <nl> <nl> # # Quick Start <nl> - * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) <nl> + * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> * Write your own configuration file to describe your Moco server configuration as follow : <nl> ` ` ` json <nl> [ <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index abd84e1 . . 9ecb09a 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Standalone Command Line <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index b5e4472 . . 0e7ef80 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 30 , 7 + 30 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in <nl> < dependency > <nl> < groupId > com . github . dreamhead < / groupId > <nl> < artifactId > moco - core < / artifactId > <nl> - < version > 0 . 10 . 2 < / version > <nl> + < version > 0 . 11 . 0 < / version > <nl> < / dependency > <nl> ` ` ` <nl> <nl> @ @ - 43 , 7 + 43 , 7 @ @ repositories { <nl> <nl> dependencies { <nl> testCompile ( <nl> - " com . github . dreamhead : moco - core : 0 . 10 . 2 " , <nl> + " com . github . dreamhead : moco - core : 0 . 11 . 0 " , <nl> ) <nl> } <nl> ` ` ` <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class MocoRunnerTest { <nl> # # Standalone <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl>
diff - - git a / moco - runner / build . gradle b / moco - runner / build . gradle <nl> index 4d76b1e . . 4ee367d 100644 <nl> - - - a / moco - runner / build . gradle <nl> + + + b / moco - runner / build . gradle <nl> @ @ - 71 , 8 + 71 , 7 @ @ task proguardCheck ( type : Test , dependsOn : proguard ) { <nl> classpath = classpath - files ( sourceSets . main . output . classesDir ) - files ( configurations . runtime ) + files ( proguard . outputs . files . singleFile ) <nl> } <nl> <nl> - uploadArchives . dependsOn proguard <nl> - uploadArchives . dependsOn proguardCheck <nl> + uploadArchives . dependsOn proguard , proguardCheck <nl> <nl> artifacts { <nl> archives proguard . outputs . files . singleFile
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index dbb5d78 . . 9fb066d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 158 , 7 + 158 , 7 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> return not ( exist ( extractor ) ) ; <nl> } <nl> <nl> - throw new RuntimeException ( String . format ( " Unknown exist parameter : [ % s ] " , text ) ) ; <nl> + throw new IllegalArgumentException ( String . format ( " Unknown exist parameter : [ % s ] " , text ) ) ; <nl> } <nl> <nl> private static RequestMatcher wrapRequestMatcher ( final RequestSetting request ,
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index dd1ccf2 . . 3eefd35 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 10 , 7 + 10 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 46 , 15 + 45 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> FluentIterable < ResponseHandler > handlers = from ( getFields ( responseSetting . getClass ( ) ) ) <nl> . filter ( isValidField ( responseSetting ) ) <nl> . transform ( fieldToResponseHandler ( responseSetting ) ) ; <nl> - return getResponseHandler ( handlers . toList ( ) ) ; <nl> + return getResponseHandler ( handlers ) ; <nl> } <nl> <nl> - private ResponseHandler getResponseHandler ( final ImmutableList < ResponseHandler > list ) { <nl> - if ( list . size ( ) = = 1 ) { <nl> - return list . get ( 0 ) ; <nl> + private ResponseHandler getResponseHandler ( final FluentIterable < ResponseHandler > handlers ) { <nl> + if ( handlers . size ( ) = = 1 ) { <nl> + return handlers . get ( 0 ) ; <nl> } <nl> <nl> - return and ( list ) ; <nl> + return and ( handlers ) ; <nl> } <nl> <nl> private boolean isResource ( final String name ) { <nl> @ @ - 135 , 7 + 134 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> private ResponseHandler createCompositeHandler ( final String name , final Map < String , TextContainer > map ) { <nl> - ImmutableList < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) . toList ( ) ; <nl> + FluentIterable < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) ; <nl> return getResponseHandler ( handlers ) ; <nl> } <nl>
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java b / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java <nl> index f2f8548 . . 0f044e6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / VerificationData . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class VerificationData { <nl> return format ( mismatchFormat , expected , actualSize ) ; <nl> } <nl> <nl> - public int matchedSize ( ) { <nl> + public final int matchedSize ( ) { <nl> return from ( requests ) . filter ( matched ( ) ) . size ( ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> index d697dc6 . . 9eca973 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> @ @ - 1 , 6 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco . matcher ; <nl> <nl> - import com . github . dreamhead . moco . * ; <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . MocoException ; <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . RequestExtractor ; <nl> + import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . extractor . XmlExtractorHelper ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ;
diff - - git a / proguard . pro b / proguard . pro <nl> index e46ac12 . . 801a074 100644 <nl> - - - a / proguard . pro <nl> + + + b / proguard . pro <nl> @ @ - 22 , 6 + 22 , 7 @ @ <nl> - keep public class com . github . dreamhead . moco . handler . * { * ; } <nl> - keep public class com . github . dreamhead . moco . dumper . * { * ; } <nl> - keep public class com . github . dreamhead . moco . MocoJsonRunner { * ; } <nl> + - keep public class com . github . dreamhead . moco . util . Jsons { * ; } <nl> - keep public class com . github . dreamhead . moco . runner . ShutdownRunner { <nl> public int shutdownPort ( ) ; <nl> }
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 82a1c0a . . 9a356d7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 26 , 18 + 26 , 12 @ @ import com . google . common . collect . Maps ; <nl> import java . io . File ; <nl> import java . nio . charset . Charset ; <nl> <nl> + import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> public class ApiUtils { <nl> public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> - MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; <nl> - targetMonitors [ 0 ] = monitor ; <nl> - targetMonitors [ 1 ] = monitor2 ; <nl> - if ( monitors . length > 0 ) { <nl> - System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; <nl> - } <nl> - <nl> - return new CompositeMonitor ( targetMonitors ) ; <nl> + return new CompositeMonitor ( asIterable ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> public static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java <nl> index 2a55a65 . . 1638edd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / CompositeMonitor . java <nl> @ @ - 5 , 9 + 5 , 9 @ @ import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . Response ; <nl> <nl> public class CompositeMonitor implements MocoMonitor { <nl> - private final MocoMonitor [ ] monitors ; <nl> + private final Iterable < MocoMonitor > monitors ; <nl> <nl> - public CompositeMonitor ( final MocoMonitor [ ] monitors ) { <nl> + public CompositeMonitor ( final Iterable < MocoMonitor > monitors ) { <nl> this . monitors = monitors ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Iterables . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Iterables . java <nl> index ce74882 . . d3e00e7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Iterables . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Iterables . java <nl> @ @ - 22 , 6 + 22 , 22 @ @ public final class Iterables { <nl> . build ( ) ; <nl> } <nl> <nl> + public static < T > Iterable < T > asIterable ( final T handler , final T handler2 , final T [ ] handlers ) { <nl> + checkNotNull ( handler ) ; <nl> + checkNotNull ( handler2 ) ; <nl> + checkNotNull ( handlers ) ; <nl> + <nl> + if ( handlers . length = = 0 ) { <nl> + return of ( handler , handler2 ) ; <nl> + } <nl> + <nl> + return ImmutableList . < T > builder ( ) <nl> + . add ( handler ) <nl> + . add ( handler2 ) <nl> + . add ( handlers ) <nl> + . build ( ) ; <nl> + } <nl> + <nl> public static < T > T head ( final T [ ] elements ) { <nl> checkNotNull ( elements ) ; <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index f9254a3 . . 87272c0 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . context ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . header ; <nl> - import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . query ; <nl> import static com . github . dreamhead . moco . Moco . status ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 44ac073 . . 488a103 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 187 , 8 + 187 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher match ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . match ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . match ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 200 , 8 + 199 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher startsWith ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . startsWith ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . startsWith ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 210 , 8 + 208 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher endsWith ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . endsWith ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . endsWith ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 220 , 8 + 217 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher contain ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . contain ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . contain ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final String expected ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 78053b7 . . 280d934 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 91 , 18 + 91 , 15 @ @ public class ApiUtils { <nl> } <nl> <nl> public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new StartsWithMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , <nl> - checkNotNull ( resource , " Expected resource should not be null " ) ) ; <nl> + return new StartsWithMatcher < T > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new EndsWithMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , <nl> - checkNotNull ( resource , " Expected resource should not be null " ) ) ; <nl> + return new EndsWithMatcher < T > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new ContainMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , <nl> - checkNotNull ( resource , " Expected resource should not be null " ) ) ; <nl> + return new ContainMatcher < T > ( extractor , resource ) ; <nl> } <nl> <nl> private ApiUtils ( ) {
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index a018cd4 . . 5b9bc49 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import com . github . dreamhead . moco . handler . failover . FailoverStrategy ; <nl> import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> import com . github . dreamhead . moco . internal . ActualSocketServer ; <nl> + import com . github . dreamhead . moco . internal . ApiUtils ; <nl> import com . github . dreamhead . moco . matcher . AndRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . ContainMatcher ; <nl> import com . github . dreamhead . moco . matcher . EndsWithMatcher ; <nl> @ @ - 38 , 7 + 39 , 6 @ @ import com . github . dreamhead . moco . matcher . NotRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . OrRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . StartsWithMatcher ; <nl> import com . github . dreamhead . moco . matcher . XmlRequestMatcher ; <nl> - import com . github . dreamhead . moco . monitor . CompositeMonitor ; <nl> import com . github . dreamhead . moco . monitor . DefaultLogFormatter ; <nl> import com . github . dreamhead . moco . monitor . FileLogWriter ; <nl> import com . github . dreamhead . moco . monitor . LogMonitor ; <nl> @ @ - 48 , 14 + 48 , 11 @ @ import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> - import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> import com . github . dreamhead . moco . util . URLs ; <nl> - import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Maps ; <nl> import com . google . common . net . HttpHeaders ; <nl> <nl> import java . io . File ; <nl> @ @ - 78 , 7 + 75 , 6 @ @ import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> - import static com . google . common . collect . Maps . transformEntries ; <nl> import static com . google . common . net . HttpHeaders . SET _ COOKIE ; <nl> import static java . lang . String . format ; <nl> <nl> @ @ - 96 , 18 + 92 , 7 @ @ public final class Moco { <nl> <nl> public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> - return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> - } <nl> - <nl> - private static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> - MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; <nl> - targetMonitors [ 0 ] = checkNotNull ( monitor , " Monitor should not be null " ) ; <nl> - targetMonitors [ 1 ] = checkNotNull ( monitor2 , " Monitor should not be null " ) ; <nl> - if ( monitors . length > 0 ) { <nl> - System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; <nl> - } <nl> - <nl> - return new CompositeMonitor ( targetMonitors ) ; <nl> + return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoConfig . . . configs ) { <nl> @ @ - 143 , 7 + 128 , 7 @ @ public final class Moco { <nl> public static HttpServer httpsServer ( final int port , final HttpsCertificate certificate , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpsServerWithMonitor ( of ( port ) , checkNotNull ( certificate , " Certificate should not be null " ) , <nl> - mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> + ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> public static SocketServer socketServer ( ) { <nl> @ @ - 162 , 7 + 147 , 7 @ @ public final class Moco { <nl> <nl> public static SocketServer socketServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> - return ActualSocketServer . createServerWithMonitor ( of ( port ) , mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> + return ActualSocketServer . createServerWithMonitor ( of ( port ) , ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> <nl> @ @ - 398 , 12 + 383 , 12 @ @ public final class Moco { <nl> <nl> public static ResponseHandler seq ( final String . . . contents ) { <nl> checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> - return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) ) ; <nl> + return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( ApiUtils . textToResource ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final Resource . . . contents ) { <nl> checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> - return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> + return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( ApiUtils . resourceToResourceHandler ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { <nl> @ @ - 572 , 7 + 557 , 7 @ @ public final class Moco { <nl> <nl> public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> + ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestExtractor < Object > var ( final Object text ) { <nl> @ @ - 621 , 38 + 606 , 6 @ @ public final class Moco { <nl> with ( checkNotNull ( resource , " Resource should not be null " ) ) ) ; <nl> } <nl> <nl> - private static Function < String , ResponseHandler > textToResource ( ) { <nl> - return new Function < String , ResponseHandler > ( ) { <nl> - @ Override <nl> - public ResponseHandler apply ( final String content ) { <nl> - return with ( text ( content ) ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private static Function < Resource , ResponseHandler > resourceToResourceHandler ( ) { <nl> - return new Function < Resource , ResponseHandler > ( ) { <nl> - @ Override <nl> - public ResponseHandler apply ( final Resource content ) { <nl> - return with ( content ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> - return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> - } <nl> - <nl> - private static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { <nl> - return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { <nl> - @ Override <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - public Variable transformEntry ( final String key , final RequestExtractor < ? > value ) { <nl> - return new ExtractorVariable ( value ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> private Moco ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> index 6af7705 . . 0e86d04 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> import com . github . dreamhead . moco . monitor . QuietMonitor ; <nl> import com . github . dreamhead . moco . rest . ActualRestServer ; <nl> import com . github . dreamhead . moco . rest . RestIdMatchers ; <nl> @ @ - 7 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . rest . builder . ActualSubResourceSettingBuilder ; <nl> import com . github . dreamhead . moco . rest . builder . SubResourceSettingBuilder ; <nl> import com . google . common . base . Optional ; <nl> <nl> + import static com . github . dreamhead . moco . internal . ApiUtils . mergeMonitor ; <nl> import static com . github . dreamhead . moco . rest . RestIdMatchers . eq ; <nl> import static com . github . dreamhead . moco . rest . RestIds . checkId ; <nl> import static com . github . dreamhead . moco . rest . builder . RestSettingBuilders . all ; <nl> @ @ - 29 , 6 + 31 , 12 @ @ public final class MocoRest { <nl> checkNotNull ( monitor , " Monitor should not be null " ) , configs ) ; <nl> } <nl> <nl> + public static RestServer restServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , <nl> + mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> + } <nl> + <nl> public static RestIdMatcher anyId ( ) { <nl> return RestIdMatchers . anyId ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> new file mode 100644 <nl> index 0000000 . . 920a773 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + package com . github . dreamhead . moco . internal ; <nl> + <nl> + import com . github . dreamhead . moco . Moco ; <nl> + import com . github . dreamhead . moco . MocoMonitor ; <nl> + import com . github . dreamhead . moco . RequestExtractor ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . monitor . CompositeMonitor ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> + import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> + import com . github . dreamhead . moco . resource . reader . Variable ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + import static com . google . common . collect . Maps . transformEntries ; <nl> + <nl> + public class ApiUtils { <nl> + public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> + MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; <nl> + targetMonitors [ 0 ] = checkNotNull ( monitor , " Monitor should not be null " ) ; <nl> + targetMonitors [ 1 ] = checkNotNull ( monitor2 , " Monitor should not be null " ) ; <nl> + if ( monitors . length > 0 ) { <nl> + System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; <nl> + } <nl> + <nl> + return new CompositeMonitor ( targetMonitors ) ; <nl> + } <nl> + <nl> + public static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { <nl> + return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { <nl> + @ Override <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public Variable transformEntry ( final String key , final RequestExtractor < ? > value ) { <nl> + return new ExtractorVariable ( value ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> + } <nl> + <nl> + public static Function < String , ResponseHandler > textToResource ( ) { <nl> + return new Function < String , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final String content ) { <nl> + return Moco . with ( Moco . text ( content ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public static Function < Resource , ResponseHandler > resourceToResourceHandler ( ) { <nl> + return new Function < Resource , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final Resource content ) { <nl> + return Moco . with ( content ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private ApiUtils ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> index 595ae55 . . d697dc6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class XmlRequestMatcher extends AbstractRequestMatcher { <nl> } <nl> } <nl> <nl> - private Document extractDocument ( InputSource inputSource , DocumentBuilder documentBuilder ) throws SAXException { <nl> + private Document extractDocument ( final InputSource inputSource , final DocumentBuilder documentBuilder ) throws SAXException { <nl> try { <nl> Document document = documentBuilder . parse ( inputSource ) ; <nl> document . normalizeDocument ( ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index a149a56 . . f9254a3 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 20 , 15 + 20 , 20 @ @ import java . io . PrintStream ; <nl> import java . nio . charset . Charset ; <nl> import java . util . List ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . context ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . header ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . query ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . times ; <nl> import static com . github . dreamhead . moco . MocoRest . anyId ; <nl> import static com . github . dreamhead . moco . MocoRest . delete ; <nl> import static com . github . dreamhead . moco . MocoRest . get ; <nl> @ @ - 784 , 6 + 789 , 40 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ verify _ expected _ request _ and _ log _ at _ same _ time ( ) throws Exception { <nl> + Plain resource1 = new Plain ( ) ; <nl> + resource1 . code = 1 ; <nl> + resource1 . message = " hello " ; <nl> + <nl> + Plain resource2 = new Plain ( ) ; <nl> + resource2 . code = 2 ; <nl> + resource2 . message = " world " ; <nl> + <nl> + final RequestHit hit = requestHit ( ) ; <nl> + final RestServer server = restServer ( port ( ) , hit , log ( ) ) ; <nl> + server . resource ( " targets " , <nl> + get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + Plain response1 = getResource ( " / targets / 1 " ) ; <nl> + assertThat ( response1 . code , is ( 1 ) ) ; <nl> + assertThat ( response1 . message , is ( " hello " ) ) ; <nl> + <nl> + Plain response2 = getResource ( " / targets / 2 " ) ; <nl> + assertThat ( response2 . code , is ( 2 ) ) ; <nl> + assertThat ( response2 . message , is ( " world " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + hit . verify ( by ( uri ( " / targets / 1 " ) ) , times ( 1 ) ) ; <nl> + hit . verify ( by ( uri ( " / targets / 2 " ) ) , times ( 1 ) ) ; <nl> + } <nl> + <nl> private Plain getResource ( String uri ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; <nl> return asPlain ( response ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index a27bfea . . ab0fb09 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) <nl> . withHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> - . withMethod ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) <nl> + . withMethod ( HttpMethod . valueOf ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> . withContent ( toMessageContent ( request ) ) <nl> @ @ - 218 , 8 + 218 , 8 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return this ; <nl> } <nl> <nl> - public Builder withMethod ( final String method ) { <nl> - this . method = HttpMethod . valueOf ( method . toUpperCase ( ) ) ; <nl> + public Builder withMethod ( final HttpMethod method ) { <nl> + this . method = method ; <nl> return this ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> index 1fa5461 . . 178ee9f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> + import com . github . dreamhead . moco . HttpMethod ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> @ @ - 16 , 7 + 17 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 29 , 7 + 30 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 37 , 7 + 38 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest another = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " different " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 50 , 7 + 51 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withUri ( " / foo " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> @ @ - 59 , 7 + 60 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest another = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withUri ( " / bar " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> @ @ - 73 , 14 + 74 , 14 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> HttpRequest failover = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 93 , 7 + 94 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 101 , 7 + 102 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest failover = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> index edee7a2 . . e342ef3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . fasterxml . jackson . databind . ObjectWriter ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> @ @ - 17 , 6 + 16 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> <nl> @ @ - 69 , 10 + 69 , 10 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { <nl> <nl> private ImmutableList < Session > restoreSessions ( final File file ) { <nl> try { <nl> - List < Session > sessions = mapper . readValue ( file , new TypeReference < List < Session > > ( ) { } ) ; <nl> + List < Session > sessions = Jsons . toObject ( new FileInputStream ( file ) , new TypeReference < List < Session > > ( ) { } ) ; <nl> return copyOf ( sessions ) ; <nl> - } catch ( JsonMappingException jme ) { <nl> - logger . error ( " exception found " , jme ) ; <nl> + } catch ( MocoException me ) { <nl> + logger . error ( " exception found " , me ) ; <nl> return of ( ) ; <nl> } catch ( IOException e ) { <nl> throw new MocoException ( e ) ;
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 5f5a22b . . 7d92224 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 1 , 12 + 1 , 17 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . fasterxml . jackson . core . JsonProcessingException ; <nl> + import com . fasterxml . jackson . core . type . TypeReference ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> public final class Jsons { <nl> + private static ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + <nl> public static String toJson ( final Object value ) { <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> try { <nl> return mapper . writeValueAsString ( value ) ; <nl> } catch ( JsonProcessingException e ) { <nl> @ @ - 14 , 6 + 19 , 38 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static < T > T toObject ( final String value , final Class < T > clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static < T > T toObject ( final String value , final TypeReference clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static < T > T toObject ( final InputStream value , final TypeReference clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> private Jsons ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 96a24b6 . . 407113d 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . HttpResponseException ; <nl> @ @ - 140 , 8 + 140 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - PlainA responseA = mapper . readValue ( entity . getContent ( ) , PlainA . class ) ; <nl> + PlainA responseA = Jsons . toObject ( entity . getContent ( ) , PlainA . class ) ; <nl> assertThat ( responseA . code , is ( 1 ) ) ; <nl> assertThat ( responseA . message , is ( " message " ) ) ; <nl> } <nl> @ @ - 158 , 8 + 157 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> String content = helper . get ( remoteUrl ( root ( ) ) ) ; <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - PlainA responseA = mapper . readValue ( content , PlainA . class ) ; <nl> + PlainA responseA = Jsons . toObject ( content , PlainA . class ) ; <nl> assertThat ( responseA . code , is ( 1 ) ) ; <nl> assertThat ( responseA . message , is ( " 消 息 " ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 97e2b4b . . a149a56 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMultimap ; <nl> @ @ - 51 , 8 + 50 , 6 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> @ Rule <nl> public TemporaryFolder folder = new TemporaryFolder ( ) ; <nl> <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - <nl> @ Override <nl> protected RestServer createServer ( int port ) { <nl> return restServer ( port , log ( ) ) ; <nl> @ @ - 268 , 7 + 265 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - List < Plain > plains = mapper . readValue ( helper . get ( remoteUrl ( " / targets ? foo = bar " ) ) , new TypeReference < List < Plain > > ( ) { <nl> + List < Plain > plains = Jsons . toObject ( helper . get ( remoteUrl ( " / targets ? foo = bar " ) ) , new TypeReference < List < Plain > > ( ) { <nl> } ) ; <nl> assertThat ( plains . size ( ) , is ( 2 ) ) ; <nl> <nl> @ @ - 794 , 7 + 791 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> private Plain asPlain ( HttpResponse response ) throws IOException { <nl> HttpEntity entity = checkJsonResponse ( response ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; <nl> + return Jsons . toObject ( entity . getContent ( ) , Plain . class ) ; <nl> } <nl> <nl> private List < Plain > getResources ( final String uri ) throws IOException { <nl> @ @ - 804 , 7 + 801 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> private List < Plain > asPlains ( HttpResponse response ) throws IOException { <nl> HttpEntity entity = checkJsonResponse ( response ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> + return Jsons . toObject ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> } ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> index 8afec26 . . 238165f 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> @ @ - 1 , 10 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . net . HttpHeaders ; <nl> import com . google . common . net . MediaType ; <nl> - import org . apache . http . * ; <nl> + import org . apache . http . HttpEntity ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> @ @ - 16 , 8 + 16 , 6 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - <nl> @ Test <nl> public void should _ get _ resource ( ) throws IOException { <nl> runWithConfiguration ( " rest / rest . json " ) ; <nl> @ @ - 43 , 7 + 41 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> resource1 . message = " hello " ; <nl> <nl> org . apache . http . HttpResponse httpResponse = helper . postForResponse ( remoteUrl ( " / targets " ) , <nl> - mapper . writeValueAsString ( resource1 ) ) ; <nl> + Jsons . toJson ( resource1 ) ) ; <nl> assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; <nl> assertThat ( httpResponse . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; <nl> } <nl> @ @ - 57 , 7 + 55 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> resource1 . message = " hello " ; <nl> <nl> org . apache . http . HttpResponse httpResponse = helper . putForResponse ( remoteUrl ( " / targets / 1 " ) , <nl> - mapper . writeValueAsString ( resource1 ) ) ; <nl> + Jsons . toJson ( resource1 ) ) ; <nl> assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> } <nl> <nl> @ @ - 183 , 7 + 181 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> HttpEntity entity = response . getEntity ( ) ; <nl> - List < Plain > plains = mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> + List < Plain > plains = Jsons . toObject ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> } ) ; <nl> assertThat ( plains . size ( ) , is ( 2 ) ) ; <nl> } <nl> @ @ - 223 , 7 + 221 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; <nl> + return Jsons . toObject ( entity . getContent ( ) , Plain . class ) ; <nl> } <nl> <nl> private static class Plain {
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 82fd9dd . . f74ebb6 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 104 , 10 + 104 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / targets " ) ) ; <nl> - assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> - HttpEntity entity = response . getEntity ( ) ; <nl> - List < Plain > plains = mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> - } ) ; <nl> + List < Plain > plains = asPlains ( response ) ; <nl> assertThat ( plains . size ( ) , is ( 2 ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 132 , 10 + 129 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / targets " ) ) ; <nl> - assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> - HttpEntity entity = response . getEntity ( ) ; <nl> - List < Plain > plains = mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> - } ) ; <nl> + List < Plain > plains = asPlains ( response ) ; <nl> assertThat ( plains . size ( ) , is ( 2 ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 799 , 12 + 793 , 23 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> } <nl> <nl> private Plain asPlain ( HttpResponse response ) throws IOException { <nl> + HttpEntity entity = checkJsonResponse ( response ) ; <nl> + return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; <nl> + } <nl> + <nl> + private List < Plain > asPlains ( HttpResponse response ) throws IOException { <nl> + HttpEntity entity = checkJsonResponse ( response ) ; <nl> + return mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> + } ) ; <nl> + } <nl> + <nl> + private HttpEntity checkJsonResponse ( HttpResponse response ) { <nl> assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> HttpEntity entity = response . getEntity ( ) ; <nl> MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; <nl> + return entity ; <nl> } <nl> <nl> private static class Plain {
