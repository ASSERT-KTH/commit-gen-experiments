BLEU SCORE: 0.018738883683389617

TEST MSG: replaced stream with byte array for entity in post request action
GENERATED MSG: extracted abstract http content response handler

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> index f602341 . . fc0e4e2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> @ @ - 4 , 12 + 4 , 14 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> + import org . apache . http . entity . ByteArrayEntity ; <nl> import org . apache . http . entity . ContentType ; <nl> import org . apache . http . entity . InputStreamEntity ; <nl> <nl> @ @ - 32 , 7 + 34 , 7 @ @ public class MocoPostRequestAction extends MocoRequestAction { <nl> } <nl> <nl> private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> - return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) , getContentType ( ( HttpRequest ) request ) ) ; <nl> + return new ByteArrayEntity ( resource . readFor ( of ( request ) ) . getContent ( ) , getContentType ( ( HttpRequest ) request ) ) ; <nl> } <nl> <nl> private ContentType getContentType ( HttpRequest request ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index 52d78c7 . . d9064a0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 13 , 7 + 13 , 6 @ @ import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public final class MocoJsonRunner { <nl> - <nl> private static HttpServerParser parser = new HttpServerParser ( ) ; <nl> <nl> public static HttpServer jsonHttpServer ( final int port , final Resource resource ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> new file mode 100644 <nl> index 0000000 . . b35e511 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . github . dreamhead . moco . mount ; <nl> + <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> + <nl> + public abstract class AbstractHttpContentResponseHandler extends AbstractContentResponseHandler { <nl> + protected abstract MessageContent responseContent ( HttpRequest httpRequest ) ; <nl> + <nl> + @ Override <nl> + protected MessageContent responseContent ( final Request request ) { <nl> + if ( ! HttpRequest . class . isInstance ( request ) ) { <nl> + throw new RuntimeException ( " Only HTTP request is allowed " ) ; <nl> + } <nl> + <nl> + return responseContent ( ( HttpRequest ) request ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java <nl> index e726a00 . . e67aca5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java <nl> @ @ - 2 , 20 + 2 , 18 @ @ package com . github . dreamhead . moco . mount ; <nl> <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> - import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . github . dreamhead . moco . resource . reader . FileResourceReader ; <nl> import com . github . dreamhead . moco . util . FileContentType ; <nl> import com . google . common . base . Optional ; <nl> - import com . google . common . io . Files ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> + import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . google . common . base . Optional . of ; <nl> <nl> - public class MountHandler extends AbstractContentResponseHandler { <nl> + public class MountHandler extends AbstractHttpContentResponseHandler { <nl> private final MountPathExtractor extractor ; <nl> <nl> private final File dir ; <nl> @ @ - 28 , 17 + 26 , 9 @ @ public class MountHandler extends AbstractContentResponseHandler { <nl> } <nl> <nl> @ Override <nl> - protected MessageContent responseContent ( final Request request ) { <nl> - if ( ! HttpRequest . class . isInstance ( request ) ) { <nl> - throw new RuntimeException ( " Only HTTP request is allowed " ) ; <nl> - } <nl> - <nl> - try { <nl> - byte [ ] bytes = Files . toByteArray ( targetFile ( ( HttpRequest ) request ) ) ; <nl> - return content ( ) . withContent ( bytes ) . build ( ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + protected MessageContent responseContent ( HttpRequest httpRequest ) { <nl> + FileResourceReader reader = new FileResourceReader ( targetFile ( httpRequest ) , Optional . < Charset > absent ( ) ) ; <nl> + return reader . readFor ( of ( httpRequest ) ) ; <nl> } <nl> <nl> private File targetFile ( HttpRequest request ) { <nl> @ @ - 63 , 7 + 53 , 7 @ @ public class MountHandler extends AbstractContentResponseHandler { <nl> } <nl> <nl> if ( config . isFor ( MocoConfig . FILE _ ID ) ) { <nl> - return new MountHandler ( new File ( ( String ) config . apply ( this . dir . getName ( ) ) ) , this . target ) ; <nl> + return new MountHandler ( new File ( ( String ) config . apply ( this . dir . getName ( ) ) ) , this . target ) ; <nl> } <nl> <nl> return this ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java <nl> index 32a1e34 . . 87fbcb3 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java <nl> @ @ - 1 , 11 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . CharStreams ; <nl> import com . google . common . net . HttpHeaders ; <nl> - import org . apache . http . * ; <nl> import org . apache . http . client . HttpResponseException ; <nl> - import org . apache . http . client . fluent . * ; <nl> import org . apache . http . client . fluent . Request ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 14 , 9 + 11 , 8 @ @ import java . io . InputStreamReader ; <nl> <nl> import static com . github . dreamhead . moco . Moco . header ; <nl> import static com . github . dreamhead . moco . MocoMount . * ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl>

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 index f602341 . . fc0e4e2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 @ @ - 4 , 12 + 4 , 14 @ @ import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . Request ; 
 + import com . github . dreamhead . moco . model . MessageContent ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . net . MediaType ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . client . methods . HttpPost ; 
 import org . apache . http . client . methods . HttpRequestBase ; 
 + import org . apache . http . entity . ByteArrayEntity ; 
 import org . apache . http . entity . ContentType ; 
 import org . apache . http . entity . InputStreamEntity ; 
 
 @ @ - 32 , 7 + 34 , 7 @ @ public class MocoPostRequestAction extends MocoRequestAction { 
 } 
 
 private HttpEntity asEntity ( final ContentResource resource , final Request request ) { 
 - return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) , getContentType ( ( HttpRequest ) request ) ) ; 
 + return new ByteArrayEntity ( resource . readFor ( of ( request ) ) . getContent ( ) , getContentType ( ( HttpRequest ) request ) ) ; 
 } 
 
 private ContentType getContentType ( HttpRequest request ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 index 52d78c7 . . d9064a0 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 @ @ - 13 , 7 + 13 , 6 @ @ import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 
 public final class MocoJsonRunner { 
 - 
 private static HttpServerParser parser = new HttpServerParser ( ) ; 
 
 public static HttpServer jsonHttpServer ( final int port , final Resource resource ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java 
 new file mode 100644 
 index 0000000 . . b35e511 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . github . dreamhead . moco . mount ; 
 + 
 + import com . github . dreamhead . moco . HttpRequest ; 
 + import com . github . dreamhead . moco . Request ; 
 + import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; 
 + import com . github . dreamhead . moco . model . MessageContent ; 
 + 
 + public abstract class AbstractHttpContentResponseHandler extends AbstractContentResponseHandler { 
 + protected abstract MessageContent responseContent ( HttpRequest httpRequest ) ; 
 + 
 + @ Override 
 + protected MessageContent responseContent ( final Request request ) { 
 + if ( ! HttpRequest . class . isInstance ( request ) ) { 
 + throw new RuntimeException ( " Only HTTP request is allowed " ) ; 
 + } 
 + 
 + return responseContent ( ( HttpRequest ) request ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java 
 index e726a00 . . e67aca5 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java 
 @ @ - 2 , 20 + 2 , 18 @ @ package com . github . dreamhead . moco . mount ; 
 
 import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 - import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 + import com . github . dreamhead . moco . resource . reader . FileResourceReader ; 
 import com . github . dreamhead . moco . util . FileContentType ; 
 import com . google . common . base . Optional ; 
 - import com . google . common . io . Files ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 + import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . model . MessageContent . content ; 
 + import static com . google . common . base . Optional . of ; 
 
 - public class MountHandler extends AbstractContentResponseHandler { 
 + public class MountHandler extends AbstractHttpContentResponseHandler { 
 private final MountPathExtractor extractor ; 
 
 private final File dir ; 
 @ @ - 28 , 17 + 26 , 9 @ @ public class MountHandler extends AbstractContentResponseHandler { 
 } 
 
 @ Override 
 - protected MessageContent responseContent ( final Request request ) { 
 - if ( ! HttpRequest . class . isInstance ( request ) ) { 
 - throw new RuntimeException ( " Only HTTP request is allowed " ) ; 
 - } 
 - 
 - try { 
 - byte [ ] bytes = Files . toByteArray ( targetFile ( ( HttpRequest ) request ) ) ; 
 - return content ( ) . withContent ( bytes ) . build ( ) ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + protected MessageContent responseContent ( HttpRequest httpRequest ) { 
 + FileResourceReader reader = new FileResourceReader ( targetFile ( httpRequest ) , Optional . < Charset > absent ( ) ) ; 
 + return reader . readFor ( of ( httpRequest ) ) ; 
 } 
 
 private File targetFile ( HttpRequest request ) { 
 @ @ - 63 , 7 + 53 , 7 @ @ public class MountHandler extends AbstractContentResponseHandler { 
 } 
 
 if ( config . isFor ( MocoConfig . FILE _ ID ) ) { 
 - return new MountHandler ( new File ( ( String ) config . apply ( this . dir . getName ( ) ) ) , this . target ) ; 
 + return new MountHandler ( new File ( ( String ) config . apply ( this . dir . getName ( ) ) ) , this . target ) ; 
 } 
 
 return this ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java 
 index 32a1e34 . . 87fbcb3 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMountTest . java 
 @ @ - 1 , 11 + 1 , 8 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . google . common . io . ByteStreams ; 
 import com . google . common . io . CharStreams ; 
 import com . google . common . net . HttpHeaders ; 
 - import org . apache . http . * ; 
 import org . apache . http . client . HttpResponseException ; 
 - import org . apache . http . client . fluent . * ; 
 import org . apache . http . client . fluent . Request ; 
 import org . junit . Test ; 
 
 @ @ - 14 , 9 + 11 , 8 @ @ import java . io . InputStreamReader ; 
 
 import static com . github . dreamhead . moco . Moco . header ; 
 import static com . github . dreamhead . moco . MocoMount . * ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 

