BLEU SCORE: 0.8668778997501817

TEST MSG: added missing final to default http message
GENERATED MSG: added missing final to default http message builder

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 9a9425f . . 8d62262 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 30 , 17 + 30 , 17 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ Override <nl> - public HttpProtocolVersion getVersion ( ) { <nl> + public final HttpProtocolVersion getVersion ( ) { <nl> return this . version ; <nl> } <nl> <nl> @ Override <nl> - public ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + public final ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> return this . headers ; <nl> } <nl> <nl> @ Override <nl> - public String getHeader ( final String name ) { <nl> + public final String getHeader ( final String name ) { <nl> if ( ! this . headers . containsKey ( name ) ) { <nl> return null ; <nl> } <nl> @ @ - 50 , 7 + 50 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ Override <nl> - public MessageContent getContent ( ) { <nl> + public final MessageContent getContent ( ) { <nl> return this . content ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 4786889 . . 9a9425f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 93 , 22 + 93 , 22 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> return clazz . cast ( this ) ; <nl> } <nl> <nl> - public T withVersion ( final HttpProtocolVersion version ) { <nl> + public final T withVersion ( final HttpProtocolVersion version ) { <nl> this . version = version ; <nl> return self ( ) ; <nl> } <nl> <nl> - public T withContent ( final String content ) { <nl> + public final T withContent ( final String content ) { <nl> this . content = content ( content ) ; <nl> return self ( ) ; <nl> } <nl> <nl> - public T withContent ( final MessageContent content ) { <nl> + public final T withContent ( final MessageContent content ) { <nl> this . content = content ; <nl> return self ( ) ; <nl> } <nl> <nl> - public T withHeaders ( final Map < String , ? > headers ) { <nl> + public final T withHeaders ( final Map < String , ? > headers ) { <nl> if ( headers ! = null ) { <nl> this . headers = asHeaders ( headers ) ; <nl> } <nl> @ @ - 138 , 15 + 138 , 15 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> } <nl> <nl> - protected HttpProtocolVersion getVersion ( ) { <nl> + protected final HttpProtocolVersion getVersion ( ) { <nl> return version ; <nl> } <nl> <nl> - protected MessageContent getContent ( ) { <nl> + protected final MessageContent getContent ( ) { <nl> return content ; <nl> } <nl> <nl> - protected ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + protected final ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> if ( headers = = null ) { <nl> return ImmutableMap . of ( ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index 9a9425f . . 8d62262 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 30 , 17 + 30 , 17 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 } 
 
 @ Override 
 - public HttpProtocolVersion getVersion ( ) { 
 + public final HttpProtocolVersion getVersion ( ) { 
 return this . version ; 
 } 
 
 @ Override 
 - public ImmutableMap < String , String [ ] > getHeaders ( ) { 
 + public final ImmutableMap < String , String [ ] > getHeaders ( ) { 
 return this . headers ; 
 } 
 
 @ Override 
 - public String getHeader ( final String name ) { 
 + public final String getHeader ( final String name ) { 
 if ( ! this . headers . containsKey ( name ) ) { 
 return null ; 
 } 
 @ @ - 50 , 7 + 50 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 } 
 
 @ Override 
 - public MessageContent getContent ( ) { 
 + public final MessageContent getContent ( ) { 
 return this . content ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index 4786889 . . 9a9425f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 93 , 22 + 93 , 22 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 return clazz . cast ( this ) ; 
 } 
 
 - public T withVersion ( final HttpProtocolVersion version ) { 
 + public final T withVersion ( final HttpProtocolVersion version ) { 
 this . version = version ; 
 return self ( ) ; 
 } 
 
 - public T withContent ( final String content ) { 
 + public final T withContent ( final String content ) { 
 this . content = content ( content ) ; 
 return self ( ) ; 
 } 
 
 - public T withContent ( final MessageContent content ) { 
 + public final T withContent ( final MessageContent content ) { 
 this . content = content ; 
 return self ( ) ; 
 } 
 
 - public T withHeaders ( final Map < String , ? > headers ) { 
 + public final T withHeaders ( final Map < String , ? > headers ) { 
 if ( headers ! = null ) { 
 this . headers = asHeaders ( headers ) ; 
 } 
 @ @ - 138 , 15 + 138 , 15 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; 
 } 
 
 - protected HttpProtocolVersion getVersion ( ) { 
 + protected final HttpProtocolVersion getVersion ( ) { 
 return version ; 
 } 
 
 - protected MessageContent getContent ( ) { 
 + protected final MessageContent getContent ( ) { 
 return content ; 
 } 
 
 - protected ImmutableMap < String , String [ ] > getHeaders ( ) { 
 + protected final ImmutableMap < String , String [ ] > getHeaders ( ) { 
 if ( headers = = null ) { 
 return ImmutableMap . of ( ) ; 
 }
