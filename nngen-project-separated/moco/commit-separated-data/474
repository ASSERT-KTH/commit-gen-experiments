BLEU SCORE: 0.15619699684601282

TEST MSG: added missing check to json https server
GENERATED MSG: added missing argument check for json runner

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index c1bc07d . . c37b0d2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 25 , 14 + 25 , 19 @ @ public final class MocoJsonRunner { <nl> <nl> public static HttpsServer jsonHttpsServer ( final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> + checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( resource ) ) ; <nl> + return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( <nl> + checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> } <nl> <nl> public static HttpsServer jsonHttpsServer ( final int port , final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , resource ) ) ; <nl> + return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , <nl> + checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> } <nl> <nl> public static SocketServer jsonSocketServer ( final int port , final Resource resource ) {
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index 5e4d56d . . 1007414 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class MocoJsonRunner { <nl> <nl> private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) { <nl> SocketServerParser parser = new SocketServerParser ( ) ; <nl> - return parser . parseServer ( toStream ( resource ) , port ) ; <nl> + return parser . parseServer ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) , port ) ; <nl> } <nl> <nl> private static HttpServer jsonHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class MocoJsonRunner { <nl> <nl> private static InputStream toStream ( final Resource resource ) { <nl> Optional < Request > request = Optional . absent ( ) ; <nl> - return new ByteArrayInputStream ( resource . readFor ( request ) ) ; <nl> + return new ByteArrayInputStream ( checkNotNull ( resource , " resource should not be null " ) . readFor ( request ) ) ; <nl> } <nl> <nl> private MocoJsonRunner ( ) { }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 index c1bc07d . . c37b0d2 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 @ @ - 25 , 14 + 25 , 19 @ @ public final class MocoJsonRunner { 
 
 public static HttpsServer jsonHttpsServer ( final Resource resource , 
 final HttpsCertificate certificate ) { 
 + checkNotNull ( certificate , " Certificate should not be null " ) ; 
 ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; 
 - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( resource ) ) ; 
 + return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( 
 + checkNotNull ( resource , " resource should not be null " ) ) ) ; 
 } 
 
 public static HttpsServer jsonHttpsServer ( final int port , final Resource resource , 
 final HttpsCertificate certificate ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + checkNotNull ( certificate , " Certificate should not be null " ) ; 
 ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; 
 - return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , resource ) ) ; 
 + return httpsServer . mergeHttpServer ( ( ActualHttpServer ) jsonHttpServer ( port , 
 + checkNotNull ( resource , " resource should not be null " ) ) ) ; 
 } 
 
 public static SocketServer jsonSocketServer ( final int port , final Resource resource ) {

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 index 5e4d56d . . 1007414 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 @ @ - 35 , 7 + 35 , 7 @ @ public class MocoJsonRunner { 
 
 private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) { 
 SocketServerParser parser = new SocketServerParser ( ) ; 
 - return parser . parseServer ( toStream ( resource ) , port ) ; 
 + return parser . parseServer ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) , port ) ; 
 } 
 
 private static HttpServer jsonHttpServer ( final Resource resource , final Optional < Integer > port ) { 
 @ @ - 45 , 7 + 45 , 7 @ @ public class MocoJsonRunner { 
 
 private static InputStream toStream ( final Resource resource ) { 
 Optional < Request > request = Optional . absent ( ) ; 
 - return new ByteArrayInputStream ( resource . readFor ( request ) ) ; 
 + return new ByteArrayInputStream ( checkNotNull ( resource , " resource should not be null " ) . readFor ( request ) ) ; 
 } 
 
 private MocoJsonRunner ( ) { }
