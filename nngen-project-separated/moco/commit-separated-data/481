BLEU SCORE: 0.1270331870386537

TEST MSG: documented https for junit runner
GENERATED MSG: documented junit integration

TEST DIFF (one line): diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index a850b2e . . 3c44370 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 8 + 1 , 9 @ @ <nl> # Release <nl> <nl> # JUnit <nl> - * Http JSON Runner with path resource <nl> - * Socket JSON Runner with path resource <nl> + * HTTPS JUnit runner for POJO , JSON and from path resource <nl> + * Http JSON runner with path resource <nl> + * Socket JSON runner with path resource <nl> <nl> # # Implementation Details <nl> * Fix : get Moco standalone version from manifest <nl> diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 5bbcf93 . . 879f4a7 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 66 , 6 + 66 , 61 @ @ public class MocoJunitJsonHttpRunnerTest { <nl> } <nl> ` ` ` <nl> <nl> + # # HTTPS Server <nl> + <nl> + # # # POJO HTTPS Server <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + * * httpsRunner * * can reference a HttpsServer object . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitPojoHttpRunnerTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + private static HttpServer server ; <nl> + <nl> + static { <nl> + server = httpsServer ( 12306 , DEFAULT _ CERTIFICATE ) ; <nl> + server . response ( " foo " ) ; <nl> + } <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . httpsRunner ( server ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # JSON HTTPS Server <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + * * jsonHttpsRunner * * can reference a JSON file as a HTTP server . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , " foo . json " , DEFAULT _ CERTIFICATE ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + JSON configuration can be retrieved from the classpath . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest { <nl> + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , Moco . pathResource ( " foo . json " ) , DEFAULT _ CERTIFICATE ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> # # Socket Server <nl> <nl> # # # POJO Socket Server
NEAREST DIFF (one line): diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> new file mode 100644 <nl> index 0000000 . . fbd3ad3 <nl> - - - / dev / null <nl> + + + b / moco - doc / junit . md <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + # JUnit Integration <nl> + <nl> + Moco make use of Test Rule in JUnit to simplify JUnit integration . * * MocoJunitRunner * * provices several ways to run Moco server as Test Rule , which can start Moco server before your test and stop after the test . <nl> + <nl> + # # HTTP Server <nl> + <nl> + # # # POJO HTTP Server <nl> + <nl> + * * httpRunner * * can reference a HttpServer object . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitPojoHttpRunnerTest { <nl> + private static HttpServer server ; <nl> + <nl> + static { <nl> + server = httpServer ( 12306 ) ; <nl> + server . response ( " foo " ) ; <nl> + } <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . httpRunner ( server ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # JSON HTTP Server <nl> + <nl> + * * jsonHttpRunner * * can reference a JSON file as HTTP server . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonHttpRunnerTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpRunner ( 12306 , " foo . json " ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + # # Socket Server <nl> + <nl> + # # # POJO Socket Server <nl> + <nl> + * * socketRunner * * can reference a HttpServer object . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitPojoSocketRunnerTest { <nl> + private static SocketServer server ; <nl> + <nl> + static { <nl> + server = socketServer ( 12306 ) ; <nl> + server . response ( " bar \ n " ) ; <nl> + } <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . socketRunner ( server ) ; <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # JSON Socket Server <nl> + <nl> + * * jsonHttpRunner * * can reference a JSON file as HTTP server . <nl> + <nl> + ` ` ` java <nl> + public class MocoJunitJsonSocketRunnerTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonSocketRunner ( 12306 , " foo . json " ) ; <nl> + <nl> + <nl> + . . . <nl> + } <nl> + ` ` ` <nl> diff - - git a / moco - doc / plan . md b / moco - doc / plan . md <nl> index 4223473 . . e003e18 100644 <nl> - - - a / moco - doc / plan . md <nl> + + + b / moco - doc / plan . md <nl> @ @ - 17 , 8 + 17 , 6 @ @ <nl> * Cookbook <nl> <nl> # Tools Support <nl> - * JUnit better support <nl> - * homebrew <nl> * IntelliJ IDEA plugin <nl> * Eclipse plugin <nl> * Runtime configuration change

TEST DIFF:
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index a850b2e . . 3c44370 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 1 , 8 + 1 , 9 @ @ 
 # Release 
 
 # JUnit 
 - * Http JSON Runner with path resource 
 - * Socket JSON Runner with path resource 
 + * HTTPS JUnit runner for POJO , JSON and from path resource 
 + * Http JSON runner with path resource 
 + * Socket JSON runner with path resource 
 
 # # Implementation Details 
 * Fix : get Moco standalone version from manifest 
 diff - - git a / moco - doc / junit . md b / moco - doc / junit . md 
 index 5bbcf93 . . 879f4a7 100644 
 - - - a / moco - doc / junit . md 
 + + + b / moco - doc / junit . md 
 @ @ - 66 , 6 + 66 , 61 @ @ public class MocoJunitJsonHttpRunnerTest { 
 } 
 ` ` ` 
 
 + # # HTTPS Server 
 + 
 + # # # POJO HTTPS Server 
 + 
 + * * @ Since will be at next release * * 
 + 
 + * * httpsRunner * * can reference a HttpsServer object . 
 + 
 + ` ` ` java 
 + public class MocoJunitPojoHttpRunnerTest { 
 + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; 
 + private static HttpServer server ; 
 + 
 + static { 
 + server = httpsServer ( 12306 , DEFAULT _ CERTIFICATE ) ; 
 + server . response ( " foo " ) ; 
 + } 
 + 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . httpsRunner ( server ) ; 
 + 
 + . . . 
 + } 
 + ` ` ` 
 + 
 + # # # JSON HTTPS Server 
 + 
 + * * @ Since will be at next release * * 
 + 
 + * * jsonHttpsRunner * * can reference a JSON file as a HTTP server . 
 + 
 + ` ` ` java 
 + public class MocoJunitJsonHttpRunnerTest { 
 + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , " foo . json " , DEFAULT _ CERTIFICATE ) ; 
 + 
 + . . . 
 + } 
 + ` ` ` 
 + 
 + * * @ Since will be at next release * * 
 + 
 + JSON configuration can be retrieved from the classpath . 
 + 
 + ` ` ` java 
 + public class MocoJunitJsonHttpRunnerTest { 
 + private static final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , Moco . pathResource ( " foo . json " ) , DEFAULT _ CERTIFICATE ) ; 
 + 
 + . . . 
 + } 
 + ` ` ` 
 + 
 # # Socket Server 
 
 # # # POJO Socket Server

NEAREST DIFF:
diff - - git a / moco - doc / junit . md b / moco - doc / junit . md 
 new file mode 100644 
 index 0000000 . . fbd3ad3 
 - - - / dev / null 
 + + + b / moco - doc / junit . md 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + # JUnit Integration 
 + 
 + Moco make use of Test Rule in JUnit to simplify JUnit integration . * * MocoJunitRunner * * provices several ways to run Moco server as Test Rule , which can start Moco server before your test and stop after the test . 
 + 
 + # # HTTP Server 
 + 
 + # # # POJO HTTP Server 
 + 
 + * * httpRunner * * can reference a HttpServer object . 
 + 
 + ` ` ` java 
 + public class MocoJunitPojoHttpRunnerTest { 
 + private static HttpServer server ; 
 + 
 + static { 
 + server = httpServer ( 12306 ) ; 
 + server . response ( " foo " ) ; 
 + } 
 + 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . httpRunner ( server ) ; 
 + 
 + . . . 
 + } 
 + ` ` ` 
 + 
 + # # # JSON HTTP Server 
 + 
 + * * jsonHttpRunner * * can reference a JSON file as HTTP server . 
 + 
 + ` ` ` java 
 + public class MocoJunitJsonHttpRunnerTest extends AbstractMocoStandaloneTest { 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpRunner ( 12306 , " foo . json " ) ; 
 + 
 + . . . 
 + } 
 + ` ` ` 
 + 
 + # # Socket Server 
 + 
 + # # # POJO Socket Server 
 + 
 + * * socketRunner * * can reference a HttpServer object . 
 + 
 + ` ` ` java 
 + public class MocoJunitPojoSocketRunnerTest { 
 + private static SocketServer server ; 
 + 
 + static { 
 + server = socketServer ( 12306 ) ; 
 + server . response ( " bar \ n " ) ; 
 + } 
 + 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . socketRunner ( server ) ; 
 + 
 + . . . 
 + } 
 + ` ` ` 
 + 
 + # # # JSON Socket Server 
 + 
 + * * jsonHttpRunner * * can reference a JSON file as HTTP server . 
 + 
 + ` ` ` java 
 + public class MocoJunitJsonSocketRunnerTest { 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonSocketRunner ( 12306 , " foo . json " ) ; 
 + 
 + 
 + . . . 
 + } 
 + ` ` ` 
 diff - - git a / moco - doc / plan . md b / moco - doc / plan . md 
 index 4223473 . . e003e18 100644 
 - - - a / moco - doc / plan . md 
 + + + b / moco - doc / plan . md 
 @ @ - 17 , 8 + 17 , 6 @ @ 
 * Cookbook 
 
 # Tools Support 
 - * JUnit better support 
 - * homebrew 
 * IntelliJ IDEA plugin 
 * Eclipse plugin 
 * Runtime configuration change
