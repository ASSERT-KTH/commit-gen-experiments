BLEU SCORE: 0.08310415003234632

TEST MSG: introduced tojson resource
GENERATED MSG: added pojo to json request matcher

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f3d665a . . 30160f6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ import static com . github . dreamhead . moco . internal . ApiUtils . textToResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . methodResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> @ @ - 349 , 6 + 350 , 10 @ @ public final class Moco { <nl> return new JsonResponseHandler ( checkNotNull ( pojo , " Json object should not be null " ) ) ; <nl> } <nl> <nl> + public static ContentResource toJsonResource ( final Object pojo ) { <nl> + return jsonResource ( checkNotNull ( pojo , " Json object should not be null " ) ) ; <nl> + } <nl> + <nl> public static JsonPathRequestExtractor jsonPath ( final String jsonPath ) { <nl> return new JsonPathRequestExtractor ( checkNotNullOrEmpty ( jsonPath , " JsonPath should not be null " ) ) ; <nl> } <nl> @ @ - 587 , 11 + 592 , 6 @ @ public final class Moco { <nl> return post ( checkNotNull ( url , " URL should not be null " ) , text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> - public static MocoEventAction post ( final String url , final Object object ) { <nl> - return post ( checkNotNullOrEmpty ( url , " URL should not be null " ) , <nl> - Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> - } <nl> - <nl> public static MocoEventAction post ( final Resource url , final Object object ) { <nl> return post ( checkNotNull ( url , " URL should not be null " ) , <nl> Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 0a43044 . . e97275e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . reader . ClasspathFileResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . ContentResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . FileResourceReader ; <nl> + import com . github . dreamhead . moco . resource . reader . JsonResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . TemplateResourceReader ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . github . dreamhead . moco . util . Cookies ; <nl> @ @ - 53 , 6 + 54 , 11 @ @ public final class ResourceFactory { <nl> new ClasspathFileResourceReader ( filename , charset ) ) ; <nl> } <nl> <nl> + public static ContentResource jsonResource ( final Object pojo ) { <nl> + return contentResource ( id ( " json " ) , DO _ NOTHING _ APPLIER , <nl> + new JsonResourceReader ( pojo ) ) ; <nl> + } <nl> + <nl> public static Resource methodResource ( final String method ) { <nl> return resource ( id ( " method " ) , DO _ NOTHING _ APPLIER , new ResourceReader ( ) { <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java <nl> new file mode 100644 <nl> index 0000000 . . b245398 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . github . dreamhead . moco . resource . reader ; <nl> + <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . net . MediaType ; <nl> + <nl> + import static com . github . dreamhead . moco . util . Jsons . toJson ; <nl> + <nl> + public class JsonResourceReader implements ContentResourceReader { <nl> + private Object pojo ; <nl> + <nl> + public JsonResourceReader ( final Object pojo ) { <nl> + this . pojo = pojo ; <nl> + } <nl> + <nl> + @ Override <nl> + public MediaType getContentType ( HttpRequest request ) { <nl> + return MediaType . create ( " application " , " json " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public MessageContent readFor ( Optional < ? extends Request > request ) { <nl> + return MessageContent . content ( ) . withContent ( toJson ( pojo ) ) . build ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 8fe86ab . . cb4b2a4 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . toJsonResource ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> @ @ - 217 , 7 + 218 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( and ( by ( uri ( " / target " ) ) , json ( pojo ) ) ) . response ( handler ) ; <nl> - server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pojo ) ) ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , toJsonResource ( pojo ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index b56dd1e . . 4ead349 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . github . dreamhead . moco . util . URLs ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> @ @ - 323 , 6 + 324 , 10 @ @ public final class Moco { <nl> return json ( text ( checkNotNull ( jsonText , " JSON should not be null " ) ) ) ; <nl> } <nl> <nl> + public static RequestMatcher json ( final Object pojo ) { <nl> + return json ( Jsons . toJson ( checkNotNull ( pojo , " Json object should not be null " ) ) ) ; <nl> + } <nl> + <nl> public static RequestMatcher json ( final Resource resource ) { <nl> checkNotNull ( resource , " JSON should not be null " ) ; <nl> return new JsonRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> new file mode 100644 <nl> index 0000000 . . 2702453 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonProcessingException ; <nl> + import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + <nl> + public final class Jsons { <nl> + public static String toJson ( Object value ) { <nl> + ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + try { <nl> + return mapper . writeValueAsString ( value ) ; <nl> + } catch ( JsonProcessingException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private Jsons ( ) { } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 11c9edb . . 6020868 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 2 , 8 + 2 , 7 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . google . common . io . CharStreams ; <nl> - import com . google . common . net . * ; <nl> - import org . apache . http . * ; <nl> + import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . HttpResponseException ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 11 , 11 + 10 , 13 @ @ import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static com . github . dreamhead . moco . Moco . eq ; <nl> + import static com . github . dreamhead . moco . Moco . exist ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> + import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> + import static com . github . dreamhead . moco . Moco . toJson ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> - import static com . google . common . net . HttpHeaders . CONTENT _ TYPE ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 101 , 6 + 102 , 20 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ match _ POJO _ json ( ) throws Exception { <nl> + PlainA pojo = new PlainA ( ) ; <nl> + pojo . code = 1 ; <nl> + pojo . message = " message " ; <nl> + server . request ( json ( pojo ) ) . response ( " foo " ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " foo " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ return _ content _ based _ on _ jsonpath _ existing ( ) throws Exception { <nl> server . request ( exist ( jsonPath ( " $ . book . price " ) ) ) . response ( " jsonpath match success " ) ; <nl> running ( server , new Runnable ( ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - runner / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> deleted file mode 100644 <nl> index 2702453 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + / dev / null <nl> @ @ - 1 , 17 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . util ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonProcessingException ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> - <nl> - public final class Jsons { <nl> - public static String toJson ( Object value ) { <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - try { <nl> - return mapper . writeValueAsString ( value ) ; <nl> - } catch ( JsonProcessingException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - private Jsons ( ) { } <nl> - }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index f3d665a . . 30160f6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 56 , 6 + 56 , 7 @ @ import static com . github . dreamhead . moco . internal . ApiUtils . textToResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; 
 + import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . methodResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; 
 @ @ - 349 , 6 + 350 , 10 @ @ public final class Moco { 
 return new JsonResponseHandler ( checkNotNull ( pojo , " Json object should not be null " ) ) ; 
 } 
 
 + public static ContentResource toJsonResource ( final Object pojo ) { 
 + return jsonResource ( checkNotNull ( pojo , " Json object should not be null " ) ) ; 
 + } 
 + 
 public static JsonPathRequestExtractor jsonPath ( final String jsonPath ) { 
 return new JsonPathRequestExtractor ( checkNotNullOrEmpty ( jsonPath , " JsonPath should not be null " ) ) ; 
 } 
 @ @ - 587 , 11 + 592 , 6 @ @ public final class Moco { 
 return post ( checkNotNull ( url , " URL should not be null " ) , text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; 
 } 
 
 - public static MocoEventAction post ( final String url , final Object object ) { 
 - return post ( checkNotNullOrEmpty ( url , " URL should not be null " ) , 
 - Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; 
 - } 
 - 
 public static MocoEventAction post ( final Resource url , final Object object ) { 
 return post ( checkNotNull ( url , " URL should not be null " ) , 
 Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 index 0a43044 . . e97275e 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import com . github . dreamhead . moco . model . MessageContent ; 
 import com . github . dreamhead . moco . resource . reader . ClasspathFileResourceReader ; 
 import com . github . dreamhead . moco . resource . reader . ContentResourceReader ; 
 import com . github . dreamhead . moco . resource . reader . FileResourceReader ; 
 + import com . github . dreamhead . moco . resource . reader . JsonResourceReader ; 
 import com . github . dreamhead . moco . resource . reader . TemplateResourceReader ; 
 import com . github . dreamhead . moco . resource . reader . Variable ; 
 import com . github . dreamhead . moco . util . Cookies ; 
 @ @ - 53 , 6 + 54 , 11 @ @ public final class ResourceFactory { 
 new ClasspathFileResourceReader ( filename , charset ) ) ; 
 } 
 
 + public static ContentResource jsonResource ( final Object pojo ) { 
 + return contentResource ( id ( " json " ) , DO _ NOTHING _ APPLIER , 
 + new JsonResourceReader ( pojo ) ) ; 
 + } 
 + 
 public static Resource methodResource ( final String method ) { 
 return resource ( id ( " method " ) , DO _ NOTHING _ APPLIER , new ResourceReader ( ) { 
 @ Override 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java 
 new file mode 100644 
 index 0000000 . . b245398 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / JsonResourceReader . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . github . dreamhead . moco . resource . reader ; 
 + 
 + import com . github . dreamhead . moco . HttpRequest ; 
 + import com . github . dreamhead . moco . Request ; 
 + import com . github . dreamhead . moco . model . MessageContent ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . net . MediaType ; 
 + 
 + import static com . github . dreamhead . moco . util . Jsons . toJson ; 
 + 
 + public class JsonResourceReader implements ContentResourceReader { 
 + private Object pojo ; 
 + 
 + public JsonResourceReader ( final Object pojo ) { 
 + this . pojo = pojo ; 
 + } 
 + 
 + @ Override 
 + public MediaType getContentType ( HttpRequest request ) { 
 + return MediaType . create ( " application " , " json " ) ; 
 + } 
 + 
 + @ Override 
 + public MessageContent readFor ( Optional < ? extends Request > request ) { 
 + return MessageContent . content ( ) . withContent ( toJson ( pojo ) ) . build ( ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index 8fe86ab . . cb4b2a4 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static com . github . dreamhead . moco . Moco . log ; 
 import static com . github . dreamhead . moco . Moco . pathResource ; 
 import static com . github . dreamhead . moco . Moco . post ; 
 import static com . github . dreamhead . moco . Moco . toJson ; 
 + import static com . github . dreamhead . moco . Moco . toJsonResource ; 
 import static com . github . dreamhead . moco . Moco . uri ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 @ @ - 217 , 7 + 218 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 server . request ( and ( by ( uri ( " / target " ) ) , json ( pojo ) ) ) . response ( handler ) ; 
 - server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pojo ) ) ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , toJsonResource ( pojo ) ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ Override

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index b56dd1e . . 4ead349 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 import com . github . dreamhead . moco . resource . reader . Variable ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . github . dreamhead . moco . util . URLs ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 @ @ - 323 , 6 + 324 , 10 @ @ public final class Moco { 
 return json ( text ( checkNotNull ( jsonText , " JSON should not be null " ) ) ) ; 
 } 
 
 + public static RequestMatcher json ( final Object pojo ) { 
 + return json ( Jsons . toJson ( checkNotNull ( pojo , " Json object should not be null " ) ) ) ; 
 + } 
 + 
 public static RequestMatcher json ( final Resource resource ) { 
 checkNotNull ( resource , " JSON should not be null " ) ; 
 return new JsonRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 new file mode 100644 
 index 0000000 . . 2702453 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import com . fasterxml . jackson . core . JsonProcessingException ; 
 + import com . fasterxml . jackson . databind . ObjectMapper ; 
 + 
 + public final class Jsons { 
 + public static String toJson ( Object value ) { 
 + ObjectMapper mapper = new ObjectMapper ( ) ; 
 + try { 
 + return mapper . writeValueAsString ( value ) ; 
 + } catch ( JsonProcessingException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private Jsons ( ) { } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index 11c9edb . . 6020868 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 2 , 8 + 2 , 7 @ @ package com . github . dreamhead . moco ; 
 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . google . common . io . CharStreams ; 
 - import com . google . common . net . * ; 
 - import org . apache . http . * ; 
 + import org . apache . http . HttpEntity ; 
 import org . apache . http . client . HttpResponseException ; 
 import org . junit . Test ; 
 
 @ @ - 11 , 11 + 10 , 13 @ @ import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . Moco . * ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 + import static com . github . dreamhead . moco . Moco . eq ; 
 + import static com . github . dreamhead . moco . Moco . exist ; 
 + import static com . github . dreamhead . moco . Moco . json ; 
 + import static com . github . dreamhead . moco . Moco . jsonPath ; 
 + import static com . github . dreamhead . moco . Moco . toJson ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 - import static com . google . common . net . HttpHeaders . CONTENT _ TYPE ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 @ @ - 101 , 6 + 102 , 20 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ match _ POJO _ json ( ) throws Exception { 
 + PlainA pojo = new PlainA ( ) ; 
 + pojo . code = 1 ; 
 + pojo . message = " message " ; 
 + server . request ( json ( pojo ) ) . response ( " foo " ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " foo " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ return _ content _ based _ on _ jsonpath _ existing ( ) throws Exception { 
 server . request ( exist ( jsonPath ( " $ . book . price " ) ) ) . response ( " jsonpath match success " ) ; 
 running ( server , new Runnable ( ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - runner / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 deleted file mode 100644 
 index 2702453 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + / dev / null 
 @ @ - 1 , 17 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . util ; 
 - 
 - import com . fasterxml . jackson . core . JsonProcessingException ; 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 - 
 - public final class Jsons { 
 - public static String toJson ( Object value ) { 
 - ObjectMapper mapper = new ObjectMapper ( ) ; 
 - try { 
 - return mapper . writeValueAsString ( value ) ; 
 - } catch ( JsonProcessingException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - private Jsons ( ) { } 
 - }
