BLEU SCORE: 0.19357693493908812

TEST MSG: created configuration runner with glob
GENERATED MSG: created file runner with file collection

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index d9e84c1 . . bbacd57 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 4 , 12 + 4 , 14 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> + import com . github . dreamhead . moco . util . Globs ; <nl> + import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> <nl> import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> - import static com . google . common . collect . ImmutableList . of ; <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public final class RunnerFactory { <nl> private final WatcherFactory factory = new WatcherFactory ( ) ; <nl> @ @ - 43 , 9 + 45 , 19 @ @ public final class RunnerFactory { <nl> } <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> - final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; <nl> - final FileRunner fileRunner = createConfigurationFileRunner ( of ( configuration ) , startArgs ) ; <nl> - Watcher watcher = factory . createConfigurationWatcher ( of ( configuration ) , fileRunner ) ; <nl> + String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; <nl> + Iterable < File > files = from ( Globs . glob ( pathname ) ) . transform ( toFile ( ) ) ; <nl> + final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; <nl> + Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; <nl> return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> + <nl> + private Function < String , File > toFile ( ) { <nl> + return new Function < String , File > ( ) { <nl> + @ Override <nl> + public File apply ( final String input ) { <nl> + return new File ( input ) ; <nl> + } <nl> + } ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> index 0b0e37d . . 6cbe4ac 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> @ @ - 1 , 13 + 1 , 15 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . FluentIterable ; <nl> <nl> import java . io . File ; <nl> import java . io . FileInputStream ; <nl> import java . io . FileNotFoundException ; <nl> + import java . io . InputStream ; <nl> <nl> import static com . github . dreamhead . moco . runner . JsonRunner . newJsonRunnerWithStreams ; <nl> - import static com . google . common . collect . ImmutableList . of ; <nl> <nl> public abstract class FileRunner implements Runner { <nl> private Runner runner ; <nl> @ @ - 38 , 11 + 40 , 11 @ @ public abstract class FileRunner implements Runner { <nl> this . runner . stop ( ) ; <nl> } <nl> <nl> - public static FileRunner createConfigurationFileRunner ( final File file , final StartArgs startArgs ) { <nl> + public static FileRunner createConfigurationFileRunner ( final Iterable < File > files , final StartArgs startArgs ) { <nl> return new FileRunner ( ) { <nl> @ Override <nl> protected Runner newRunner ( ) { <nl> - return newJsonRunnerWithStreams ( of ( toInputStream ( file ) ) , startArgs ) ; <nl> + return newJsonRunnerWithStreams ( toInputStreams ( files ) , startArgs ) ; <nl> } <nl> } ; <nl> } <nl> @ @ - 63 , 4 + 65 , 13 @ @ public abstract class FileRunner implements Runner { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> + <nl> + private static Iterable < InputStream > toInputStreams ( final Iterable < File > files ) { <nl> + return FluentIterable . from ( files ) . transform ( new Function < File , InputStream > ( ) { <nl> + @ Override <nl> + public InputStream apply ( final File input ) { <nl> + return toInputStream ( input ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 3db3392 . . 8cf19cb 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import java . io . File ; <nl> <nl> import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> + import static com . google . common . collect . ImmutableList . of ; <nl> <nl> public final class RunnerFactory { <nl> private final WatcherFactory factory = new WatcherFactory ( ) ; <nl> @ @ - 43 , 7 + 44 , 7 @ @ public final class RunnerFactory { <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; <nl> - final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs ) ; <nl> + final FileRunner fileRunner = createConfigurationFileRunner ( of ( configuration ) , startArgs ) ; <nl> Watcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; <nl> return new WatcherRunner ( fileRunner , watcher ) ; <nl> }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index d9e84c1 . . bbacd57 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 4 , 12 + 4 , 14 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; 
 import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; 
 + import com . github . dreamhead . moco . util . Globs ; 
 + import com . google . common . base . Function ; 
 
 import java . io . File ; 
 
 import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; 
 import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; 
 - import static com . google . common . collect . ImmutableList . of ; 
 + import static com . google . common . collect . FluentIterable . from ; 
 
 public final class RunnerFactory { 
 private final WatcherFactory factory = new WatcherFactory ( ) ; 
 @ @ - 43 , 9 + 45 , 19 @ @ public final class RunnerFactory { 
 } 
 
 private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { 
 - final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; 
 - final FileRunner fileRunner = createConfigurationFileRunner ( of ( configuration ) , startArgs ) ; 
 - Watcher watcher = factory . createConfigurationWatcher ( of ( configuration ) , fileRunner ) ; 
 + String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; 
 + Iterable < File > files = from ( Globs . glob ( pathname ) ) . transform ( toFile ( ) ) ; 
 + final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; 
 + Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; 
 return new WatcherRunner ( fileRunner , watcher ) ; 
 } 
 + 
 + private Function < String , File > toFile ( ) { 
 + return new Function < String , File > ( ) { 
 + @ Override 
 + public File apply ( final String input ) { 
 + return new File ( input ) ; 
 + } 
 + } ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java 
 index 0b0e37d . . 6cbe4ac 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java 
 @ @ - 1 , 13 + 1 , 15 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . FluentIterable ; 
 
 import java . io . File ; 
 import java . io . FileInputStream ; 
 import java . io . FileNotFoundException ; 
 + import java . io . InputStream ; 
 
 import static com . github . dreamhead . moco . runner . JsonRunner . newJsonRunnerWithStreams ; 
 - import static com . google . common . collect . ImmutableList . of ; 
 
 public abstract class FileRunner implements Runner { 
 private Runner runner ; 
 @ @ - 38 , 11 + 40 , 11 @ @ public abstract class FileRunner implements Runner { 
 this . runner . stop ( ) ; 
 } 
 
 - public static FileRunner createConfigurationFileRunner ( final File file , final StartArgs startArgs ) { 
 + public static FileRunner createConfigurationFileRunner ( final Iterable < File > files , final StartArgs startArgs ) { 
 return new FileRunner ( ) { 
 @ Override 
 protected Runner newRunner ( ) { 
 - return newJsonRunnerWithStreams ( of ( toInputStream ( file ) ) , startArgs ) ; 
 + return newJsonRunnerWithStreams ( toInputStreams ( files ) , startArgs ) ; 
 } 
 } ; 
 } 
 @ @ - 63 , 4 + 65 , 13 @ @ public abstract class FileRunner implements Runner { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 + 
 + private static Iterable < InputStream > toInputStreams ( final Iterable < File > files ) { 
 + return FluentIterable . from ( files ) . transform ( new Function < File , InputStream > ( ) { 
 + @ Override 
 + public InputStream apply ( final File input ) { 
 + return toInputStream ( input ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index 3db3392 . . 8cf19cb 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import java . io . File ; 
 
 import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; 
 import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; 
 + import static com . google . common . collect . ImmutableList . of ; 
 
 public final class RunnerFactory { 
 private final WatcherFactory factory = new WatcherFactory ( ) ; 
 @ @ - 43 , 7 + 44 , 7 @ @ public final class RunnerFactory { 
 
 private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { 
 final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; 
 - final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs ) ; 
 + final FileRunner fileRunner = createConfigurationFileRunner ( of ( configuration ) , startArgs ) ; 
 Watcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; 
 return new WatcherRunner ( fileRunner , watcher ) ; 
 }
