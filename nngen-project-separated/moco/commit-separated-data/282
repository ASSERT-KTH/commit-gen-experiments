BLEU SCORE: 0.034353182138500235

TEST MSG: documented glob inclusion for global settings
GENERATED MSG: added request matcher to standalone rest setting

TEST DIFF (one line): diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index f663ae4 . . 8882265 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 62 , 6 + 62 , 7 @ @ Feel free to open your browser to try . <nl> * [ Environment ] ( # environment ) <nl> * [ Request ] ( # request ) <nl> * [ Response ] ( # response ) <nl> + * [ Glob Inclusion ] ( # glob - inclusion ) <nl> <nl> # # Configuration <nl> <nl> @ @ - 192 , 3 + 193 , 17 @ @ In some cases , you may want to setup a global response for all response , for exa <nl> ` ` ` <nl> <nl> When you issue any request to server , it will return response with " foo " , " bar " header . <nl> + <nl> + # # # Glob Inclusion <nl> + <nl> + * * @ Since will be at the next release * * <nl> + <nl> + You may need include many files , glob can help you to do this . <nl> + <nl> + ` ` ` json <nl> + [ <nl> + { <nl> + " include " : " * . json " <nl> + } <nl> + ] <nl> + ` ` ` <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index a8a6533 . . 8792794 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 1 , 10 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . io . Resources ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . IOException ; <nl> import java . io . InputStream ; <nl> <nl> import static com . github . dreamhead . moco . util . Files . join ; <nl> @ @ - 74 , 6 + 77 , 10 @ @ public class GlobalSettingParserTest { <nl> } <nl> <nl> private InputStream getResourceAsStream ( final String filename ) { <nl> - return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> + try { <nl> + return Resources . getResource ( filename ) . openStream ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> index 5fd591e . . 0e6287b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java <nl> @ @ - 1 , 25 + 1 , 45 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . github . dreamhead . moco . RestSettingBuilder ; <nl> + import com . github . dreamhead . moco . RestSettingResponseBuilder ; <nl> import com . google . common . base . Function ; <nl> <nl> public abstract class RestBaseSetting { <nl> + private RequestSetting request ; <nl> private ResponseSetting response ; <nl> <nl> protected abstract RestSettingBuilder startRestSetting ( ) ; <nl> <nl> + protected boolean hasRequest ( ) { <nl> + return request ! = null ; <nl> + } <nl> + <nl> protected ResponseHandler getResponseHandler ( ) { <nl> return response . getResponseHandler ( ) ; <nl> } <nl> <nl> + protected RequestMatcher getRequestMatcher ( ) { <nl> + return request . getRequestMatcher ( ) ; <nl> + } <nl> + <nl> public static < T extends RestBaseSetting > Function < T , RestSetting > toSetting ( ) { <nl> return new Function < T , RestSetting > ( ) { <nl> @ Override <nl> public RestSetting apply ( final T setting ) { <nl> - return setting . startRestSetting ( ) . response ( setting . getResponseHandler ( ) ) ; <nl> + return getRestSettingBuilder ( setting ) . response ( setting . getResponseHandler ( ) ) ; <nl> } <nl> } ; <nl> } <nl> + <nl> + private static < T extends RestBaseSetting > RestSettingResponseBuilder getRestSettingBuilder ( T setting ) { <nl> + RestSettingBuilder builder = setting . startRestSetting ( ) ; <nl> + if ( setting . hasRequest ( ) ) { <nl> + return builder . request ( setting . getRequestMatcher ( ) ) ; <nl> + } <nl> + <nl> + return builder ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> index d13a1e4 . . 0eb98b6 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . google . common . net . HttpHeaders ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . junit . Test ; <nl> @ @ - 8 , 6 + 9 , 7 @ @ import org . junit . Test ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static com . google . common . collect . ImmutableMultimap . of ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 18 , 9 + 20 , 12 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> public void should _ get _ resource ( ) throws IOException { <nl> runWithConfiguration ( " rest . json " ) ; <nl> <nl> - Plain response1 = getResource ( " / targets / 1 " ) ; <nl> - assertThat ( response1 . code , is ( 1 ) ) ; <nl> - assertThat ( response1 . message , is ( " foo " ) ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponseWithHeader ( remoteUrl ( " / targets / 1 " ) , <nl> + of ( HttpHeaders . CONTENT _ TYPE , " application / json " ) ) ; <nl> + Plain plain = asPlain ( response ) ; <nl> + <nl> + assertThat ( plain . code , is ( 1 ) ) ; <nl> + assertThat ( plain . message , is ( " foo " ) ) ; <nl> <nl> Plain response2 = getResource ( " / targets / 2 " ) ; <nl> assertThat ( response2 . code , is ( 2 ) ) ; <nl> diff - - git a / moco - runner / src / test / resources / rest . json b / moco - runner / src / test / resources / rest . json <nl> index ded202a . . a072008 100644 <nl> - - - a / moco - runner / src / test / resources / rest . json <nl> + + + b / moco - runner / src / test / resources / rest . json <nl> @ @ - 5 , 6 + 5 , 11 @ @ <nl> " get " : [ <nl> { <nl> " id " : " 1 " , <nl> + " request " : { <nl> + " headers " : { <nl> + " Content - Type " : " application / json " <nl> + } <nl> + } , <nl> " response " : { <nl> " json " : { <nl> " code " : 1 ,

TEST DIFF:
diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md 
 index f663ae4 . . 8882265 100644 
 - - - a / moco - doc / global - settings . md 
 + + + b / moco - doc / global - settings . md 
 @ @ - 62 , 6 + 62 , 7 @ @ Feel free to open your browser to try . 
 * [ Environment ] ( # environment ) 
 * [ Request ] ( # request ) 
 * [ Response ] ( # response ) 
 + * [ Glob Inclusion ] ( # glob - inclusion ) 
 
 # # Configuration 
 
 @ @ - 192 , 3 + 193 , 17 @ @ In some cases , you may want to setup a global response for all response , for exa 
 ` ` ` 
 
 When you issue any request to server , it will return response with " foo " , " bar " header . 
 + 
 + # # # Glob Inclusion 
 + 
 + * * @ Since will be at the next release * * 
 + 
 + You may need include many files , glob can help you to do this . 
 + 
 + ` ` ` json 
 + [ 
 + { 
 + " include " : " * . json " 
 + } 
 + ] 
 + ` ` ` 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 index a8a6533 . . 8792794 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 @ @ - 1 , 10 + 1 , 13 @ @ 
 package com . github . dreamhead . moco . parser ; 
 
 + import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . parser . model . GlobalSetting ; 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . io . Resources ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 + import java . io . IOException ; 
 import java . io . InputStream ; 
 
 import static com . github . dreamhead . moco . util . Files . join ; 
 @ @ - 74 , 6 + 77 , 10 @ @ public class GlobalSettingParserTest { 
 } 
 
 private InputStream getResourceAsStream ( final String filename ) { 
 - return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; 
 + try { 
 + return Resources . getResource ( filename ) . openStream ( ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java 
 index 5fd591e . . 0e6287b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestBaseSetting . java 
 @ @ - 1 , 25 + 1 , 45 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 + import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . RestSetting ; 
 import com . github . dreamhead . moco . RestSettingBuilder ; 
 + import com . github . dreamhead . moco . RestSettingResponseBuilder ; 
 import com . google . common . base . Function ; 
 
 public abstract class RestBaseSetting { 
 + private RequestSetting request ; 
 private ResponseSetting response ; 
 
 protected abstract RestSettingBuilder startRestSetting ( ) ; 
 
 + protected boolean hasRequest ( ) { 
 + return request ! = null ; 
 + } 
 + 
 protected ResponseHandler getResponseHandler ( ) { 
 return response . getResponseHandler ( ) ; 
 } 
 
 + protected RequestMatcher getRequestMatcher ( ) { 
 + return request . getRequestMatcher ( ) ; 
 + } 
 + 
 public static < T extends RestBaseSetting > Function < T , RestSetting > toSetting ( ) { 
 return new Function < T , RestSetting > ( ) { 
 @ Override 
 public RestSetting apply ( final T setting ) { 
 - return setting . startRestSetting ( ) . response ( setting . getResponseHandler ( ) ) ; 
 + return getRestSettingBuilder ( setting ) . response ( setting . getResponseHandler ( ) ) ; 
 } 
 } ; 
 } 
 + 
 + private static < T extends RestBaseSetting > RestSettingResponseBuilder getRestSettingBuilder ( T setting ) { 
 + RestSettingBuilder builder = setting . startRestSetting ( ) ; 
 + if ( setting . hasRequest ( ) ) { 
 + return builder . request ( setting . getRequestMatcher ( ) ) ; 
 + } 
 + 
 + return builder ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 index d13a1e4 . . 0eb98b6 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . github . dreamhead . moco ; 
 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 + import com . google . common . net . HttpHeaders ; 
 import com . google . common . net . MediaType ; 
 import org . apache . http . HttpEntity ; 
 import org . junit . Test ; 
 @ @ - 8 , 6 + 9 , 7 @ @ import org . junit . Test ; 
 import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 + import static com . google . common . collect . ImmutableMultimap . of ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 @ @ - 18 , 9 + 20 , 12 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 public void should _ get _ resource ( ) throws IOException { 
 runWithConfiguration ( " rest . json " ) ; 
 
 - Plain response1 = getResource ( " / targets / 1 " ) ; 
 - assertThat ( response1 . code , is ( 1 ) ) ; 
 - assertThat ( response1 . message , is ( " foo " ) ) ; 
 + org . apache . http . HttpResponse response = helper . getResponseWithHeader ( remoteUrl ( " / targets / 1 " ) , 
 + of ( HttpHeaders . CONTENT _ TYPE , " application / json " ) ) ; 
 + Plain plain = asPlain ( response ) ; 
 + 
 + assertThat ( plain . code , is ( 1 ) ) ; 
 + assertThat ( plain . message , is ( " foo " ) ) ; 
 
 Plain response2 = getResource ( " / targets / 2 " ) ; 
 assertThat ( response2 . code , is ( 2 ) ) ; 
 diff - - git a / moco - runner / src / test / resources / rest . json b / moco - runner / src / test / resources / rest . json 
 index ded202a . . a072008 100644 
 - - - a / moco - runner / src / test / resources / rest . json 
 + + + b / moco - runner / src / test / resources / rest . json 
 @ @ - 5 , 6 + 5 , 11 @ @ 
 " get " : [ 
 { 
 " id " : " 1 " , 
 + " request " : { 
 + " headers " : { 
 + " Content - Type " : " application / json " 
 + } 
 + } , 
 " response " : { 
 " json " : { 
 " code " : 1 ,
