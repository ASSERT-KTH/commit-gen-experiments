BLEU SCORE: 0.26269098944241576

TEST MSG: added missing final to simple rest setting
GENERATED MSG: added simple rest setting

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> index e8e4695 . . c482f5f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> @ @ - 26 , 11 + 26 , 11 @ @ public abstract class SimpleRestSetting implements RestSetting { <nl> this . handler = handler ; <nl> } <nl> <nl> - public ResponseHandler getHandler ( ) { <nl> + public final ResponseHandler getHandler ( ) { <nl> return handler ; <nl> } <nl> <nl> - public RequestMatcher getRequestMatcher ( final RestIdMatcher resourceName ) { <nl> + public final RequestMatcher getRequestMatcher ( final RestIdMatcher resourceName ) { <nl> RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; <nl> if ( this . matcher . isPresent ( ) ) { <nl> return and ( rootMatcher , this . matcher . get ( ) ) ; <nl> @ @ - 39 , 17 + 39 , 17 @ @ public abstract class SimpleRestSetting implements RestSetting { <nl> return rootMatcher ; <nl> } <nl> <nl> - public boolean isFor ( final HttpMethod method ) { <nl> + public final boolean isFor ( final HttpMethod method ) { <nl> return this . method = = method ; <nl> } <nl> <nl> @ Override <nl> - public boolean isSimple ( ) { <nl> + public final boolean isSimple ( ) { <nl> return true ; <nl> } <nl> <nl> @ Override <nl> - public Optional < ResponseHandler > getMatched ( final RestIdMatcher resourceName , final HttpRequest httpRequest ) { <nl> + public final Optional < ResponseHandler > getMatched ( final RestIdMatcher resourceName , final HttpRequest httpRequest ) { <nl> if ( getRequestMatcher ( resourceName ) . match ( httpRequest ) ) { <nl> return of ( handler ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java <nl> index 20277f7 . . cc86f01 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java <nl> @ @ - 1 , 30 + 1 , 4 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . base . Optional ; <nl> - <nl> - import static com . github . dreamhead . moco . Moco . and ; <nl> - <nl> - public abstract class RestSetting { <nl> - private final Optional < RequestMatcher > matcher ; <nl> - private final ResponseHandler handler ; <nl> - <nl> - protected abstract RequestMatcher getBaseRequestMatcher ( final String resourceName ) ; <nl> - <nl> - public RestSetting ( final Optional < RequestMatcher > matcher , final ResponseHandler handler ) { <nl> - this . matcher = matcher ; <nl> - this . handler = handler ; <nl> - } <nl> - <nl> - public ResponseHandler getHandler ( ) { <nl> - return handler ; <nl> - } <nl> - <nl> - public RequestMatcher getRequestMatcher ( final String resourceName ) { <nl> - RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; <nl> - if ( this . matcher . isPresent ( ) ) { <nl> - return and ( rootMatcher , this . matcher . get ( ) ) ; <nl> - } <nl> - <nl> - return rootMatcher ; <nl> - } <nl> + public interface RestSetting { <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java <nl> index 9ebc23d . . d3c4646 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java <nl> @ @ - 2 , 14 + 2 , 13 @ @ package com . github . dreamhead . moco . rest ; <nl> <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . RestSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> <nl> - public abstract class RestAllSetting extends RestSetting { <nl> + public abstract class RestAllSetting extends SimpleRestSetting { <nl> public RestAllSetting ( final Optional < RequestMatcher > matcher , <nl> final ResponseHandler handler ) { <nl> super ( matcher , handler ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> index 073bfbc . . d3806c5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> @ @ - 106 , 10 + 106 , 10 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> return of ( notFoundHandler ) ; <nl> } <nl> <nl> - private Function < RestSetting , ResponseHandler > toResponseHandler ( ) { <nl> - return new Function < RestSetting , ResponseHandler > ( ) { <nl> + private Function < SimpleRestSetting , ResponseHandler > toResponseHandler ( ) { <nl> + return new Function < SimpleRestSetting , ResponseHandler > ( ) { <nl> @ Override <nl> - public ResponseHandler apply ( final RestSetting input ) { <nl> + public ResponseHandler apply ( final SimpleRestSetting input ) { <nl> return input . getHandler ( ) ; <nl> } <nl> } ; <nl> @ @ - 161 , 10 + 161 , 10 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> return of ( notFoundHandler ) ; <nl> } <nl> <nl> - private Predicate < RestSetting > match ( final HttpRequest request ) { <nl> - return new Predicate < RestSetting > ( ) { <nl> + private Predicate < SimpleRestSetting > match ( final HttpRequest request ) { <nl> + return new Predicate < SimpleRestSetting > ( ) { <nl> @ Override <nl> - public boolean apply ( final RestSetting input ) { <nl> + public boolean apply ( final SimpleRestSetting input ) { <nl> return input . getRequestMatcher ( name ) . match ( request ) ; <nl> } <nl> } ; <nl> @ @ - 188 , 19 + 188 , 19 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> } ; <nl> } <nl> <nl> - private Function < RestSetting , JsonResponseHandler > toJsonHandler ( ) { <nl> - return new Function < RestSetting , JsonResponseHandler > ( ) { <nl> + private Function < SimpleRestSetting , JsonResponseHandler > toJsonHandler ( ) { <nl> + return new Function < SimpleRestSetting , JsonResponseHandler > ( ) { <nl> @ Override <nl> - public JsonResponseHandler apply ( final RestSetting setting ) { <nl> + public JsonResponseHandler apply ( final SimpleRestSetting setting ) { <nl> return JsonResponseHandler . class . cast ( setting . getHandler ( ) ) ; <nl> } <nl> } ; <nl> } <nl> <nl> - private Predicate < RestSetting > isJsonHandlers ( ) { <nl> - return new Predicate < RestSetting > ( ) { <nl> + private Predicate < SimpleRestSetting > isJsonHandlers ( ) { <nl> + return new Predicate < SimpleRestSetting > ( ) { <nl> @ Override <nl> - public boolean apply ( final RestSetting setting ) { <nl> + public boolean apply ( final SimpleRestSetting setting ) { <nl> return setting . getHandler ( ) instanceof JsonResponseHandler ; <nl> } <nl> } ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java <nl> index beab08d . . a535021 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java <nl> @ @ - 2 , 7 + 2 , 6 @ @ package com . github . dreamhead . moco . rest ; <nl> <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . RestSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> @ @ - 10 , 7 + 9 , 7 @ @ import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . util . URLs . join ; <nl> import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> <nl> - public abstract class RestSingleSetting extends RestSetting { <nl> + public abstract class RestSingleSetting extends SimpleRestSetting { <nl> private final String id ; <nl> <nl> public RestSingleSetting ( final String id , final Optional < RequestMatcher > matcher , final ResponseHandler handler ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> new file mode 100644 <nl> index 0000000 . . a25f7b6 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . rest ; <nl> + <nl> + import com . github . dreamhead . moco . RequestMatcher ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . RestSetting ; <nl> + import com . google . common . base . Optional ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> + <nl> + public abstract class SimpleRestSetting implements RestSetting { <nl> + private final Optional < RequestMatcher > matcher ; <nl> + private final ResponseHandler handler ; <nl> + <nl> + protected abstract RequestMatcher getBaseRequestMatcher ( final String resourceName ) ; <nl> + <nl> + public SimpleRestSetting ( final Optional < RequestMatcher > matcher , final ResponseHandler handler ) { <nl> + this . matcher = matcher ; <nl> + this . handler = handler ; <nl> + } <nl> + <nl> + public ResponseHandler getHandler ( ) { <nl> + return handler ; <nl> + } <nl> + <nl> + public RequestMatcher getRequestMatcher ( final String resourceName ) { <nl> + RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; <nl> + if ( this . matcher . isPresent ( ) ) { <nl> + return and ( rootMatcher , this . matcher . get ( ) ) ; <nl> + } <nl> + <nl> + return rootMatcher ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java 
 index e8e4695 . . c482f5f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java 
 @ @ - 26 , 11 + 26 , 11 @ @ public abstract class SimpleRestSetting implements RestSetting { 
 this . handler = handler ; 
 } 
 
 - public ResponseHandler getHandler ( ) { 
 + public final ResponseHandler getHandler ( ) { 
 return handler ; 
 } 
 
 - public RequestMatcher getRequestMatcher ( final RestIdMatcher resourceName ) { 
 + public final RequestMatcher getRequestMatcher ( final RestIdMatcher resourceName ) { 
 RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; 
 if ( this . matcher . isPresent ( ) ) { 
 return and ( rootMatcher , this . matcher . get ( ) ) ; 
 @ @ - 39 , 17 + 39 , 17 @ @ public abstract class SimpleRestSetting implements RestSetting { 
 return rootMatcher ; 
 } 
 
 - public boolean isFor ( final HttpMethod method ) { 
 + public final boolean isFor ( final HttpMethod method ) { 
 return this . method = = method ; 
 } 
 
 @ Override 
 - public boolean isSimple ( ) { 
 + public final boolean isSimple ( ) { 
 return true ; 
 } 
 
 @ Override 
 - public Optional < ResponseHandler > getMatched ( final RestIdMatcher resourceName , final HttpRequest httpRequest ) { 
 + public final Optional < ResponseHandler > getMatched ( final RestIdMatcher resourceName , final HttpRequest httpRequest ) { 
 if ( getRequestMatcher ( resourceName ) . match ( httpRequest ) ) { 
 return of ( handler ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java 
 index 20277f7 . . cc86f01 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / RestSetting . java 
 @ @ - 1 , 30 + 1 , 4 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . google . common . base . Optional ; 
 - 
 - import static com . github . dreamhead . moco . Moco . and ; 
 - 
 - public abstract class RestSetting { 
 - private final Optional < RequestMatcher > matcher ; 
 - private final ResponseHandler handler ; 
 - 
 - protected abstract RequestMatcher getBaseRequestMatcher ( final String resourceName ) ; 
 - 
 - public RestSetting ( final Optional < RequestMatcher > matcher , final ResponseHandler handler ) { 
 - this . matcher = matcher ; 
 - this . handler = handler ; 
 - } 
 - 
 - public ResponseHandler getHandler ( ) { 
 - return handler ; 
 - } 
 - 
 - public RequestMatcher getRequestMatcher ( final String resourceName ) { 
 - RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; 
 - if ( this . matcher . isPresent ( ) ) { 
 - return and ( rootMatcher , this . matcher . get ( ) ) ; 
 - } 
 - 
 - return rootMatcher ; 
 - } 
 + public interface RestSetting { 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java 
 index 9ebc23d . . d3c4646 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestAllSetting . java 
 @ @ - 2 , 14 + 2 , 13 @ @ package com . github . dreamhead . moco . rest ; 
 
 import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . RestSetting ; 
 import com . google . common . base . Optional ; 
 
 import static com . github . dreamhead . moco . Moco . by ; 
 import static com . github . dreamhead . moco . Moco . uri ; 
 import static com . github . dreamhead . moco . util . URLs . resourceRoot ; 
 
 - public abstract class RestAllSetting extends RestSetting { 
 + public abstract class RestAllSetting extends SimpleRestSetting { 
 public RestAllSetting ( final Optional < RequestMatcher > matcher , 
 final ResponseHandler handler ) { 
 super ( matcher , handler ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 index 073bfbc . . d3806c5 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 @ @ - 106 , 10 + 106 , 10 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 return of ( notFoundHandler ) ; 
 } 
 
 - private Function < RestSetting , ResponseHandler > toResponseHandler ( ) { 
 - return new Function < RestSetting , ResponseHandler > ( ) { 
 + private Function < SimpleRestSetting , ResponseHandler > toResponseHandler ( ) { 
 + return new Function < SimpleRestSetting , ResponseHandler > ( ) { 
 @ Override 
 - public ResponseHandler apply ( final RestSetting input ) { 
 + public ResponseHandler apply ( final SimpleRestSetting input ) { 
 return input . getHandler ( ) ; 
 } 
 } ; 
 @ @ - 161 , 10 + 161 , 10 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 return of ( notFoundHandler ) ; 
 } 
 
 - private Predicate < RestSetting > match ( final HttpRequest request ) { 
 - return new Predicate < RestSetting > ( ) { 
 + private Predicate < SimpleRestSetting > match ( final HttpRequest request ) { 
 + return new Predicate < SimpleRestSetting > ( ) { 
 @ Override 
 - public boolean apply ( final RestSetting input ) { 
 + public boolean apply ( final SimpleRestSetting input ) { 
 return input . getRequestMatcher ( name ) . match ( request ) ; 
 } 
 } ; 
 @ @ - 188 , 19 + 188 , 19 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 } ; 
 } 
 
 - private Function < RestSetting , JsonResponseHandler > toJsonHandler ( ) { 
 - return new Function < RestSetting , JsonResponseHandler > ( ) { 
 + private Function < SimpleRestSetting , JsonResponseHandler > toJsonHandler ( ) { 
 + return new Function < SimpleRestSetting , JsonResponseHandler > ( ) { 
 @ Override 
 - public JsonResponseHandler apply ( final RestSetting setting ) { 
 + public JsonResponseHandler apply ( final SimpleRestSetting setting ) { 
 return JsonResponseHandler . class . cast ( setting . getHandler ( ) ) ; 
 } 
 } ; 
 } 
 
 - private Predicate < RestSetting > isJsonHandlers ( ) { 
 - return new Predicate < RestSetting > ( ) { 
 + private Predicate < SimpleRestSetting > isJsonHandlers ( ) { 
 + return new Predicate < SimpleRestSetting > ( ) { 
 @ Override 
 - public boolean apply ( final RestSetting setting ) { 
 + public boolean apply ( final SimpleRestSetting setting ) { 
 return setting . getHandler ( ) instanceof JsonResponseHandler ; 
 } 
 } ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java 
 index beab08d . . a535021 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestSingleSetting . java 
 @ @ - 2 , 7 + 2 , 6 @ @ package com . github . dreamhead . moco . rest ; 
 
 import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . RestSetting ; 
 import com . google . common . base . Optional ; 
 
 import static com . github . dreamhead . moco . Moco . by ; 
 @ @ - 10 , 7 + 9 , 7 @ @ import static com . github . dreamhead . moco . Moco . uri ; 
 import static com . github . dreamhead . moco . util . URLs . join ; 
 import static com . github . dreamhead . moco . util . URLs . resourceRoot ; 
 
 - public abstract class RestSingleSetting extends RestSetting { 
 + public abstract class RestSingleSetting extends SimpleRestSetting { 
 private final String id ; 
 
 public RestSingleSetting ( final String id , final Optional < RequestMatcher > matcher , final ResponseHandler handler ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java 
 new file mode 100644 
 index 0000000 . . a25f7b6 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / SimpleRestSetting . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . rest ; 
 + 
 + import com . github . dreamhead . moco . RequestMatcher ; 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . RestSetting ; 
 + import com . google . common . base . Optional ; 
 + 
 + import static com . github . dreamhead . moco . Moco . and ; 
 + 
 + public abstract class SimpleRestSetting implements RestSetting { 
 + private final Optional < RequestMatcher > matcher ; 
 + private final ResponseHandler handler ; 
 + 
 + protected abstract RequestMatcher getBaseRequestMatcher ( final String resourceName ) ; 
 + 
 + public SimpleRestSetting ( final Optional < RequestMatcher > matcher , final ResponseHandler handler ) { 
 + this . matcher = matcher ; 
 + this . handler = handler ; 
 + } 
 + 
 + public ResponseHandler getHandler ( ) { 
 + return handler ; 
 + } 
 + 
 + public RequestMatcher getRequestMatcher ( final String resourceName ) { 
 + RequestMatcher rootMatcher = getBaseRequestMatcher ( resourceName ) ; 
 + if ( this . matcher . isPresent ( ) ) { 
 + return and ( rootMatcher , this . matcher . get ( ) ) ; 
 + } 
 + 
 + return rootMatcher ; 
 + } 
 + }
