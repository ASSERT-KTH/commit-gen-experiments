BLEU SCORE: 0.03283637368030199

TEST MSG: introduced json support for json releated test
GENERATED MSG: used entity utils to shorten code

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index d178230 . . 01d75ba 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 11 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> + import com . github . dreamhead . moco . support . JsonSupport ; <nl> import com . google . common . io . ByteStreams ; <nl> - import com . google . common . net . MediaType ; <nl> - import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . HttpResponseException ; <nl> - import org . apache . http . util . EntityUtils ; <nl> import org . junit . Test ; <nl> import org . skyscreamer . jsonassert . JSONAssert ; <nl> import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> @ @ - 165 , 14 + 163 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> - HttpEntity entity = response . getEntity ( ) ; <nl> - MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> - assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> - assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - <nl> - JSONAssert . assertEquals ( " { code : 1 , message : \ " message \ " } " , <nl> - EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> + JsonSupport . assertEquals ( " { code : 1 , message : \ " message \ " } " , helper . getResponse ( root ( ) ) ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java b / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java <nl> new file mode 100644 <nl> index 0000000 . . 7425536 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . github . dreamhead . moco . support ; <nl> + <nl> + import com . google . common . net . MediaType ; <nl> + import org . apache . http . HttpEntity ; <nl> + import org . apache . http . HttpResponse ; <nl> + import org . apache . http . util . EntityUtils ; <nl> + import org . json . JSONException ; <nl> + import org . skyscreamer . jsonassert . JSONAssert ; <nl> + import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class JsonSupport { <nl> + public static void assertEquals ( final String expected , final HttpResponse response ) { <nl> + HttpEntity entity = response . getEntity ( ) ; <nl> + MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> + assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> + assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> + <nl> + try { <nl> + JSONAssert . assertEquals ( expected , <nl> + EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> + } catch ( JSONException | IOException e ) { <nl> + throw new AssertionError ( " fail to parse entity to json " ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> index b1e96ae . . a618499 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> @ @ - 1 , 13 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . net . MediaType ; <nl> - import org . apache . http . HttpEntity ; <nl> - import org . apache . http . HttpResponse ; <nl> - import org . apache . http . util . EntityUtils ; <nl> + import com . github . dreamhead . moco . support . JsonSupport ; <nl> import org . json . JSONException ; <nl> import org . junit . Test ; <nl> - import org . skyscreamer . jsonassert . JSONAssert ; <nl> - import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> <nl> import java . io . IOException ; <nl> <nl> @ @ - 31 , 12 + 26 , 7 @ @ public class MocoJsonStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ Test <nl> public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException , JSONException { <nl> runWithConfiguration ( " json . json " ) ; <nl> - HttpResponse response = helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ; <nl> - HttpEntity entity = response . getEntity ( ) ; <nl> - JSONAssert . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> - MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> - assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> - assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> + JsonSupport . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index f467401 . . d178230 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 2 , 16 + 2 , 15 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . io . ByteStreams ; <nl> - import com . google . common . io . CharStreams ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . HttpResponseException ; <nl> + import org . apache . http . util . EntityUtils ; <nl> import org . junit . Test ; <nl> import org . skyscreamer . jsonassert . JSONAssert ; <nl> import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> <nl> import java . io . IOException ; <nl> - import java . io . InputStreamReader ; <nl> import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . Moco . and ; <nl> @ @ - 173 , 7 + 172 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> <nl> JSONAssert . assertEquals ( " { code : 1 , message : \ " message \ " } " , <nl> - CharStreams . toString ( new InputStreamReader ( entity . getContent ( ) ) ) , JSONCompareMode . LENIENT ) ; <nl> + EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> index fb12580 . . b1e96ae 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java <nl> @ @ - 1 , 10 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . io . ByteStreams ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . HttpResponse ; <nl> + import org . apache . http . util . EntityUtils ; <nl> + import org . json . JSONException ; <nl> import org . junit . Test ; <nl> + import org . skyscreamer . jsonassert . JSONAssert ; <nl> + import org . skyscreamer . jsonassert . JSONCompareMode ; <nl> <nl> import java . io . IOException ; <nl> <nl> @ @ - 26 , 12 + 29 , 11 @ @ public class MocoJsonStandaloneTest extends AbstractMocoStandaloneTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException { <nl> + public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException , JSONException { <nl> runWithConfiguration ( " json . json " ) ; <nl> HttpResponse response = helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ; <nl> HttpEntity entity = response . getEntity ( ) ; <nl> - byte [ ] bytes = ByteStreams . toByteArray ( entity . getContent ( ) ) ; <nl> - assertThat ( new String ( bytes ) , is ( " { \ " foo \ " : \ " bar \ " } " ) ) ; <nl> + JSONAssert . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; <nl> MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ;

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index d178230 . . 01d75ba 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 1 , 11 + 1 , 9 @ @ 
 package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . internal . SessionContext ; 
 + import com . github . dreamhead . moco . support . JsonSupport ; 
 import com . google . common . io . ByteStreams ; 
 - import com . google . common . net . MediaType ; 
 - import org . apache . http . HttpEntity ; 
 import org . apache . http . client . HttpResponseException ; 
 - import org . apache . http . util . EntityUtils ; 
 import org . junit . Test ; 
 import org . skyscreamer . jsonassert . JSONAssert ; 
 import org . skyscreamer . jsonassert . JSONCompareMode ; 
 @ @ - 165 , 14 + 163 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws Exception { 
 - org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; 
 - HttpEntity entity = response . getEntity ( ) ; 
 - MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; 
 - assertThat ( mediaType . type ( ) , is ( " application " ) ) ; 
 - assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; 
 - 
 - JSONAssert . assertEquals ( " { code : 1 , message : \ " message \ " } " , 
 - EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; 
 + JsonSupport . assertEquals ( " { code : 1 , message : \ " message \ " } " , helper . getResponse ( root ( ) ) ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java b / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java 
 new file mode 100644 
 index 0000000 . . 7425536 
 - - - / dev / null 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / support / JsonSupport . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . github . dreamhead . moco . support ; 
 + 
 + import com . google . common . net . MediaType ; 
 + import org . apache . http . HttpEntity ; 
 + import org . apache . http . HttpResponse ; 
 + import org . apache . http . util . EntityUtils ; 
 + import org . json . JSONException ; 
 + import org . skyscreamer . jsonassert . JSONAssert ; 
 + import org . skyscreamer . jsonassert . JSONCompareMode ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class JsonSupport { 
 + public static void assertEquals ( final String expected , final HttpResponse response ) { 
 + HttpEntity entity = response . getEntity ( ) ; 
 + MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; 
 + assertThat ( mediaType . type ( ) , is ( " application " ) ) ; 
 + assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; 
 + 
 + try { 
 + JSONAssert . assertEquals ( expected , 
 + EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; 
 + } catch ( JSONException | IOException e ) { 
 + throw new AssertionError ( " fail to parse entity to json " ) ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java 
 index b1e96ae . . a618499 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java 
 @ @ - 1 , 13 + 1 , 8 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . google . common . net . MediaType ; 
 - import org . apache . http . HttpEntity ; 
 - import org . apache . http . HttpResponse ; 
 - import org . apache . http . util . EntityUtils ; 
 + import com . github . dreamhead . moco . support . JsonSupport ; 
 import org . json . JSONException ; 
 import org . junit . Test ; 
 - import org . skyscreamer . jsonassert . JSONAssert ; 
 - import org . skyscreamer . jsonassert . JSONCompareMode ; 
 
 import java . io . IOException ; 
 
 @ @ - 31 , 12 + 26 , 7 @ @ public class MocoJsonStandaloneTest extends AbstractMocoStandaloneTest { 
 @ Test 
 public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException , JSONException { 
 runWithConfiguration ( " json . json " ) ; 
 - HttpResponse response = helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ; 
 - HttpEntity entity = response . getEntity ( ) ; 
 - JSONAssert . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; 
 - MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; 
 - assertThat ( mediaType . type ( ) , is ( " application " ) ) ; 
 - assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; 
 + JsonSupport . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index f467401 . . d178230 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 2 , 16 + 2 , 15 @ @ package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . internal . SessionContext ; 
 import com . google . common . io . ByteStreams ; 
 - import com . google . common . io . CharStreams ; 
 import com . google . common . net . MediaType ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . client . HttpResponseException ; 
 + import org . apache . http . util . EntityUtils ; 
 import org . junit . Test ; 
 import org . skyscreamer . jsonassert . JSONAssert ; 
 import org . skyscreamer . jsonassert . JSONCompareMode ; 
 
 import java . io . IOException ; 
 - import java . io . InputStreamReader ; 
 import java . nio . charset . Charset ; 
 
 import static com . github . dreamhead . moco . Moco . and ; 
 @ @ - 173 , 7 + 172 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; 
 
 JSONAssert . assertEquals ( " { code : 1 , message : \ " message \ " } " , 
 - CharStreams . toString ( new InputStreamReader ( entity . getContent ( ) ) ) , JSONCompareMode . LENIENT ) ; 
 + EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java 
 index fb12580 . . b1e96ae 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonStandaloneTest . java 
 @ @ - 1 , 10 + 1 , 13 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . google . common . io . ByteStreams ; 
 import com . google . common . net . MediaType ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . HttpResponse ; 
 + import org . apache . http . util . EntityUtils ; 
 + import org . json . JSONException ; 
 import org . junit . Test ; 
 + import org . skyscreamer . jsonassert . JSONAssert ; 
 + import org . skyscreamer . jsonassert . JSONCompareMode ; 
 
 import java . io . IOException ; 
 
 @ @ - 26 , 12 + 29 , 11 @ @ public class MocoJsonStandaloneTest extends AbstractMocoStandaloneTest { 
 } 
 
 @ Test 
 - public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException { 
 + public void should _ return _ expected _ json _ response _ based _ on _ specified _ json _ request _ shortcut ( ) throws IOException , JSONException { 
 runWithConfiguration ( " json . json " ) ; 
 HttpResponse response = helper . getResponse ( remoteUrl ( " / json _ response _ shortcut " ) ) ; 
 HttpEntity entity = response . getEntity ( ) ; 
 - byte [ ] bytes = ByteStreams . toByteArray ( entity . getContent ( ) ) ; 
 - assertThat ( new String ( bytes ) , is ( " { \ " foo \ " : \ " bar \ " } " ) ) ; 
 + JSONAssert . assertEquals ( " { \ " foo \ " : \ " bar \ " } " , EntityUtils . toString ( entity ) , JSONCompareMode . LENIENT ) ; 
 MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; 
 assertThat ( mediaType . type ( ) , is ( " application " ) ) ; 
 assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ;
