BLEU SCORE: 0.042343488066592626

TEST MSG: added json to event post
GENERATED MSG: added template for post url in event handler for standalone mode

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index 9c3be29 . . d8aa333 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> if ( matcher . isPresent ( ) ) { <nl> return matcher . get ( ) ; <nl> } <nl> - <nl> + <nl> throw new IllegalArgumentException ( " unknown operation [ " + operation + " ] " ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index 360c5a9 . . 00c2410 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> @ @ - 10 , 9 + 11 , 18 @ @ import static com . github . dreamhead . moco . Moco . post ; <nl> public class PostSetting { <nl> private TextContainer url ; <nl> private TextContainer content ; <nl> + private Object json ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return post ( this . url . asResource ( ) , content . asResource ( ) ) ; <nl> + if ( content ! = null ) { <nl> + return post ( this . url . asResource ( ) , content . asResource ( ) ) ; <nl> + } <nl> + <nl> + if ( json ! = null ) { <nl> + return post ( this . url . asResource ( ) , Moco . json ( json ) ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " content or json should be setup for post " ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 21 , 6 + 31 , 7 @ @ public class PostSetting { <nl> . omitNullValues ( ) <nl> . add ( " url " , url ) <nl> . add ( " content " , content ) <nl> + . add ( " json " , json ) <nl> . toString ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 2a09d0e . . c237e59 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 89 , 4 + 89 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ fire _ event _ with _ post _ json ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / event - with - json - post " ) ) , is ( " post _ json _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XMOCOJSON " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index 7dcce9e . . 03e3874 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 130 , 11 + 130 , 42 @ @ <nl> } <nl> } , <nl> { <nl> + " request " : { <nl> + " uri " : " / event - with - json - post " <nl> + } , <nl> + " response " : { <nl> + " text " : " post _ json _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target - json " , <nl> + " json " : { <nl> + " foo " : " bar " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } , <nl> + { <nl> " request " : { <nl> " uri " : " / target " <nl> } , <nl> " response " : { <nl> " text " : " 0XCAFEBABE " <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / target - json " , <nl> + " json " : { <nl> + " foo " : " bar " <nl> + } <nl> + } , <nl> + " response " : { <nl> + " text " : " 0XMOCOJSON " <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 87644e9 . . b29f1f9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ public class GetSetting { <nl> return get ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ) ; <nl> } <nl> <nl> - throw new IllegalArgumentException ( " Unknown " + url ) ; <nl> + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index aa5d3b7 . . 040c719 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 5 , 15 + 5 , 26 @ @ import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> + import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class PostSetting { <nl> - private String url ; <nl> + private TextContainer url ; <nl> private String content ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return post ( url , Moco . text ( content ) ) ; <nl> + if ( url . isRawText ( ) ) { <nl> + return post ( url . getText ( ) , Moco . text ( content ) ) ; <nl> + } <nl> + <nl> + if ( url . isForTemplate ( ) ) { <nl> + return post ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) , Moco . text ( content ) ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 3ba5356 . . 0698fde 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 67 , 4 + 67 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ fire _ event _ with _ post _ url _ template ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - url " ) ) , is ( " post _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index a2e8fa3 . . 1bf46ea 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 1 , 17 + 1 , 17 @ @ <nl> [ <nl> { <nl> " request " : { <nl> - " uri " : " / event " <nl> + " uri " : " / event " <nl> } , <nl> " response " : { <nl> " text " : " post _ foo " <nl> } , <nl> " on " : { <nl> " complete " : { <nl> - " async " : " true " , <nl> - " latency " : 500 , <nl> - " post " : { <nl> - " url " : " http : / / localhost : 12306 / target " , <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> " content " : " content " <nl> } <nl> } <nl> @ @ - 37 , 8 + 37 , 7 @ @ <nl> } <nl> } <nl> } <nl> - } , <nl> - <nl> + } , <nl> { <nl> " request " : { <nl> " uri " : " / get _ event " <nl> @ @ - 80 , 7 + 79 , 31 @ @ <nl> } <nl> } <nl> } , <nl> - <nl> + { <nl> + " request " : { <nl> + " uri " : " / post - event - with - template - url " <nl> + } , <nl> + " response " : { <nl> + " text " : " post _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : { <nl> + " template " : { <nl> + " with " : " http : / / localhost : 12306 / $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> + } <nl> + } <nl> + } , <nl> + " content " : " content " <nl> + } <nl> + } <nl> + } <nl> + } , <nl> { <nl> " request " : { <nl> " uri " : " / target "

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 index 9c3be29 . . d8aa333 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 @ @ - 103 , 7 + 103 , 7 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat 
 if ( matcher . isPresent ( ) ) { 
 return matcher . get ( ) ; 
 } 
 - 
 + 
 throw new IllegalArgumentException ( " unknown operation [ " + operation + " ] " ) ; 
 } catch ( Exception e ) { 
 throw new RuntimeException ( e ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 index 360c5a9 . . 00c2410 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 + import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . google . common . base . MoreObjects ; 
 
 @ @ - 10 , 9 + 11 , 18 @ @ import static com . github . dreamhead . moco . Moco . post ; 
 public class PostSetting { 
 private TextContainer url ; 
 private TextContainer content ; 
 + private Object json ; 
 
 public MocoEventAction createAction ( ) { 
 - return post ( this . url . asResource ( ) , content . asResource ( ) ) ; 
 + if ( content ! = null ) { 
 + return post ( this . url . asResource ( ) , content . asResource ( ) ) ; 
 + } 
 + 
 + if ( json ! = null ) { 
 + return post ( this . url . asResource ( ) , Moco . json ( json ) ) ; 
 + } 
 + 
 + throw new IllegalArgumentException ( " content or json should be setup for post " ) ; 
 } 
 
 @ Override 
 @ @ - 21 , 6 + 31 , 7 @ @ public class PostSetting { 
 . omitNullValues ( ) 
 . add ( " url " , url ) 
 . add ( " content " , content ) 
 + . add ( " json " , json ) 
 . toString ( ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 index 2a09d0e . . c237e59 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 @ @ - 89 , 4 + 89 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 
 assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ fire _ event _ with _ post _ json ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / event - with - json - post " ) ) , is ( " post _ json _ foo " ) ) ; 
 + idle ( IDLE , TimeUnit . MILLISECONDS ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XMOCOJSON " ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json 
 index 7dcce9e . . 03e3874 100644 
 - - - a / moco - runner / src / test / resources / event . json 
 + + + b / moco - runner / src / test / resources / event . json 
 @ @ - 130 , 11 + 130 , 42 @ @ 
 } 
 } , 
 { 
 + " request " : { 
 + " uri " : " / event - with - json - post " 
 + } , 
 + " response " : { 
 + " text " : " post _ json _ foo " 
 + } , 
 + " on " : { 
 + " complete " : { 
 + " async " : " true " , 
 + " latency " : 500 , 
 + " post " : { 
 + " url " : " http : / / localhost : 12306 / target - json " , 
 + " json " : { 
 + " foo " : " bar " 
 + } 
 + } 
 + } 
 + } 
 + } , 
 + { 
 " request " : { 
 " uri " : " / target " 
 } , 
 " response " : { 
 " text " : " 0XCAFEBABE " 
 } 
 + } , 
 + { 
 + " request " : { 
 + " uri " : " / target - json " , 
 + " json " : { 
 + " foo " : " bar " 
 + } 
 + } , 
 + " response " : { 
 + " text " : " 0XMOCOJSON " 
 + } 
 } 
 ] 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 index 87644e9 . . b29f1f9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 @ @ - 21 , 7 + 21 , 7 @ @ public class GetSetting { 
 return get ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ) ; 
 } 
 
 - throw new IllegalArgumentException ( " Unknown " + url ) ; 
 + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 index aa5d3b7 . . 040c719 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 @ @ - 5 , 15 + 5 , 26 @ @ import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . google . common . base . MoreObjects ; 
 
 + import static com . github . dreamhead . moco . Moco . get ; 
 import static com . github . dreamhead . moco . Moco . post ; 
 + import static com . github . dreamhead . moco . Moco . template ; 
 + import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; 
 
 @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 public class PostSetting { 
 - private String url ; 
 + private TextContainer url ; 
 private String content ; 
 
 public MocoEventAction createAction ( ) { 
 - return post ( url , Moco . text ( content ) ) ; 
 + if ( url . isRawText ( ) ) { 
 + return post ( url . getText ( ) , Moco . text ( content ) ) ; 
 + } 
 + 
 + if ( url . isForTemplate ( ) ) { 
 + return post ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) , Moco . text ( content ) ) ; 
 + } 
 + 
 + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 index 3ba5356 . . 0698fde 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 @ @ - 67 , 4 + 67 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 
 assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ fire _ event _ with _ post _ url _ template ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - url " ) ) , is ( " post _ foo " ) ) ; 
 + idle ( IDLE , TimeUnit . MILLISECONDS ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json 
 index a2e8fa3 . . 1bf46ea 100644 
 - - - a / moco - runner / src / test / resources / event . json 
 + + + b / moco - runner / src / test / resources / event . json 
 @ @ - 1 , 17 + 1 , 17 @ @ 
 [ 
 { 
 " request " : { 
 - " uri " : " / event " 
 + " uri " : " / event " 
 } , 
 " response " : { 
 " text " : " post _ foo " 
 } , 
 " on " : { 
 " complete " : { 
 - " async " : " true " , 
 - " latency " : 500 , 
 - " post " : { 
 - " url " : " http : / / localhost : 12306 / target " , 
 + " async " : " true " , 
 + " latency " : 500 , 
 + " post " : { 
 + " url " : " http : / / localhost : 12306 / target " , 
 " content " : " content " 
 } 
 } 
 @ @ - 37 , 8 + 37 , 7 @ @ 
 } 
 } 
 } 
 - } , 
 - 
 + } , 
 { 
 " request " : { 
 " uri " : " / get _ event " 
 @ @ - 80 , 7 + 79 , 31 @ @ 
 } 
 } 
 } , 
 - 
 + { 
 + " request " : { 
 + " uri " : " / post - event - with - template - url " 
 + } , 
 + " response " : { 
 + " text " : " post _ foo " 
 + } , 
 + " on " : { 
 + " complete " : { 
 + " async " : " true " , 
 + " latency " : 500 , 
 + " post " : { 
 + " url " : { 
 + " template " : { 
 + " with " : " http : / / localhost : 12306 / $ { target } " , 
 + " vars " : { 
 + " target " : " target " 
 + } 
 + } 
 + } , 
 + " content " : " content " 
 + } 
 + } 
 + } 
 + } , 
 { 
 " request " : { 
 " uri " : " / target "
