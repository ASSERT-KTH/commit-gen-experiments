BLEU SCORE: 0.19640732545025652

TEST MSG: added json rest runner with path resource for junit rule
GENERATED MSG: added json rest api for junit

TEST DIFF (one line): diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index 3735a47 . . ff59833 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 64 , 6 + 64 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> public static MocoJunitRunner jsonRestRunner ( int port , String filename ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; <nl> + return jsonRestRunner ( port , file ( filename ) ) ; <nl> + } <nl> + <nl> + public static MocoJunitRunner jsonRestRunner ( int port , Resource filename ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( filename , " Filename should not be null " ) ; <nl> return jsonHttpRunner ( port , filename ) ; <nl> } <nl> <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java <nl> new file mode 100644 <nl> index 0000000 . . f018bef <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import org . apache . http . HttpResponse ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonRestRunnerWithPathTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonRestRunner ( 12306 , pathResource ( " rest . json " ) ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + HttpResponse response = helper . postForResponse ( remoteUrl ( " / targets " ) , " hello " ) ; <nl> + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; <nl> + assertThat ( response . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index 6642523 . . 434c90d 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 48 , 6 + 48 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonRestRunner ( int port , String filename ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; <nl> + return jsonHttpRunner ( port , filename ) ; <nl> + } <nl> + <nl> @ Override <nl> protected void before ( ) throws Throwable { <nl> runner . start ( ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . fd3c3cc <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import org . apache . http . HttpResponse ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonRestRunnerTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonRestRunner ( 12306 , " src / test / resources / rest . json " ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + HttpResponse response = helper . postForResponse ( remoteUrl ( " / targets " ) , " hello " ) ; <nl> + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; <nl> + assertThat ( response . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - junit / src / test / resources / rest . json b / moco - junit / src / test / resources / rest . json <nl> new file mode 100644 <nl> index 0000000 . . 37a81ff <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / resources / rest . json <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + [ <nl> + { <nl> + " resource " : { <nl> + " name " : " targets " , <nl> + " post " : [ <nl> + { <nl> + " response " : { <nl> + " status " : 201 , <nl> + " headers " : { <nl> + " Location " : " / targets / 123 " <nl> + } <nl> + } <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 index 3735a47 . . ff59833 100644 
 - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 @ @ - 64 , 6 + 64 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { 
 public static MocoJunitRunner jsonRestRunner ( int port , String filename ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; 
 + return jsonRestRunner ( port , file ( filename ) ) ; 
 + } 
 + 
 + public static MocoJunitRunner jsonRestRunner ( int port , Resource filename ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + checkNotNull ( filename , " Filename should not be null " ) ; 
 return jsonHttpRunner ( port , filename ) ; 
 } 
 
 diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java 
 new file mode 100644 
 index 0000000 . . f018bef 
 - - - / dev / null 
 + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerWithPathTest . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; 
 + import org . apache . http . HttpResponse ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . Moco . pathResource ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitJsonRestRunnerWithPathTest extends AbstractMocoStandaloneTest { 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonRestRunner ( 12306 , pathResource ( " rest . json " ) ) ; 
 + 
 + @ Test 
 + public void should _ return _ expected _ message ( ) throws IOException { 
 + HttpResponse response = helper . postForResponse ( remoteUrl ( " / targets " ) , " hello " ) ; 
 + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; 
 + assertThat ( response . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 index 6642523 . . 434c90d 100644 
 - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 @ @ - 48 , 6 + 48 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { 
 return new MocoJunitRunner ( runner ( server ) ) ; 
 } 
 
 + public static MocoJunitRunner jsonRestRunner ( int port , String filename ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; 
 + return jsonHttpRunner ( port , filename ) ; 
 + } 
 + 
 @ Override 
 protected void before ( ) throws Throwable { 
 runner . start ( ) ; 
 diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerTest . java 
 new file mode 100644 
 index 0000000 . . fd3c3cc 
 - - - / dev / null 
 + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonRestRunnerTest . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; 
 + import org . apache . http . HttpResponse ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitJsonRestRunnerTest extends AbstractMocoStandaloneTest { 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonRestRunner ( 12306 , " src / test / resources / rest . json " ) ; 
 + 
 + @ Test 
 + public void should _ return _ expected _ message ( ) throws IOException { 
 + HttpResponse response = helper . postForResponse ( remoteUrl ( " / targets " ) , " hello " ) ; 
 + assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; 
 + assertThat ( response . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; 
 + } 
 + } 
 diff - - git a / moco - junit / src / test / resources / rest . json b / moco - junit / src / test / resources / rest . json 
 new file mode 100644 
 index 0000000 . . 37a81ff 
 - - - / dev / null 
 + + + b / moco - junit / src / test / resources / rest . json 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + [ 
 + { 
 + " resource " : { 
 + " name " : " targets " , 
 + " post " : [ 
 + { 
 + " response " : { 
 + " status " : 201 , 
 + " headers " : { 
 + " Location " : " / targets / 123 " 
 + } 
 + } 
 + } 
 + ] 
 + } 
 + } 
 + ] 
 \ No newline at end of file
