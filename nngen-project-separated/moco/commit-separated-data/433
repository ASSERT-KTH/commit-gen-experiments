BLEU SCORE: 0.08116697886877475

TEST MSG: extracted as procedure in latency container
GENERATED MSG: fixed latency unit typo

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> index 130c4dd . . c288b04 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class CompleteEventSetting { <nl> MocoEventAction action = doCreateAction ( ) ; <nl> <nl> if ( this . async ) { <nl> - return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUnit ( ) ) ) ; <nl> + return Moco . async ( action , latency . asProcedure ( ) ) ; <nl> } <nl> <nl> return action ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index b4e6df8 . . 0a6692f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> - import static com . github . dreamhead . moco . Moco . latency ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> @ @ - 92 , 7 + 91 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> <nl> if ( " latency " . equalsIgnoreCase ( name ) ) { <nl> LatencyContainer container = LatencyContainer . class . cast ( value ) ; <nl> - return with ( latency ( container . getLatency ( ) , container . getUnit ( ) ) ) ; <nl> + return with ( container . asProcedure ( ) ) ; <nl> } <nl> <nl> if ( ProxyContainer . class . isInstance ( value ) ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> index feaaf45 . . ec148bf 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> @ @ - 1 , 7 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . parser . deserializer . LatencyContainerDeserializer ; <nl> + import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> @ @ - 11 , 14 + 13 , 6 @ @ public class LatencyContainer { <nl> private long latency ; <nl> private TimeUnit unit = TimeUnit . MILLISECONDS ; <nl> <nl> - public long getLatency ( ) { <nl> - return latency ; <nl> - } <nl> - <nl> - public TimeUnit getUnit ( ) { <nl> - return unit ; <nl> - } <nl> - <nl> @ Override <nl> public String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> @ @ - 38 , 4 + 32 , 8 @ @ public class LatencyContainer { <nl> latencyContainer . unit = timeUnit ; <nl> return latencyContainer ; <nl> } <nl> + <nl> + public LatencyProcedure asProcedure ( ) { <nl> + return Moco . latency ( latency , unit ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> index 159f04f . . d10b99b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class CompleteEventSetting { <nl> MocoEventAction action = doCreateAction ( ) ; <nl> <nl> if ( this . async ) { <nl> - return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUint ( ) ) ) ; <nl> + return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUnit ( ) ) ) ; <nl> } <nl> <nl> return action ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index c0dd17b . . ffe586b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> <nl> if ( " latency " . equalsIgnoreCase ( name ) ) { <nl> LatencyContainer container = LatencyContainer . class . cast ( value ) ; <nl> - return with ( latency ( container . getLatency ( ) , container . getUint ( ) ) ) ; <nl> + return with ( latency ( container . getLatency ( ) , container . getUnit ( ) ) ) ; <nl> } <nl> <nl> if ( ProxyContainer . class . isInstance ( value ) ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> index 223fb50 . . ae4d540 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> @ @ - 9 , 14 + 9 , 14 @ @ import java . util . concurrent . TimeUnit ; <nl> @ JsonDeserialize ( using = LatencyContainerDeserializer . class ) <nl> public class LatencyContainer { <nl> private long latency ; <nl> - private TimeUnit uint = TimeUnit . MILLISECONDS ; <nl> + private TimeUnit unit = TimeUnit . MILLISECONDS ; <nl> <nl> public long getLatency ( ) { <nl> return latency ; <nl> } <nl> <nl> - public TimeUnit getUint ( ) { <nl> - return uint ; <nl> + public TimeUnit getUnit ( ) { <nl> + return unit ; <nl> } <nl> <nl> @ Override <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class LatencyContainer { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " latency " , latency ) <nl> - . add ( " unit " , uint ) <nl> + . add ( " unit " , unit ) <nl> . toString ( ) ; <nl> } <nl> <nl> @ @ - 37 , 7 + 37 , 7 @ @ public class LatencyContainer { <nl> public static LatencyContainer latencyWithUnit ( long latency , TimeUnit timeUnit ) { <nl> LatencyContainer latencyContainer = new LatencyContainer ( ) ; <nl> latencyContainer . latency = latency ; <nl> - latencyContainer . uint = timeUnit ; <nl> + latencyContainer . unit = timeUnit ; <nl> return latencyContainer ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> index d41d0b1 . . f81c625 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> @ @ - 123 , 7 + 123 , 6 @ @ public class SessionSetting { <nl> return template ( textContainer . getText ( ) ) ; <nl> } <nl> <nl> - <nl> throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 index 130c4dd . . c288b04 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 @ @ - 20 , 7 + 20 , 7 @ @ public class CompleteEventSetting { 
 MocoEventAction action = doCreateAction ( ) ; 
 
 if ( this . async ) { 
 - return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUnit ( ) ) ) ; 
 + return Moco . async ( action , latency . asProcedure ( ) ) ; 
 } 
 
 return action ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index b4e6df8 . . 0a6692f 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 18 , 7 + 18 , 6 @ @ import java . nio . charset . Charset ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . Moco . attachment ; 
 - import static com . github . dreamhead . moco . Moco . latency ; 
 import static com . github . dreamhead . moco . Moco . status ; 
 import static com . github . dreamhead . moco . Moco . template ; 
 import static com . github . dreamhead . moco . Moco . toJson ; 
 @ @ - 92 , 7 + 91 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 
 if ( " latency " . equalsIgnoreCase ( name ) ) { 
 LatencyContainer container = LatencyContainer . class . cast ( value ) ; 
 - return with ( latency ( container . getLatency ( ) , container . getUnit ( ) ) ) ; 
 + return with ( container . asProcedure ( ) ) ; 
 } 
 
 if ( ProxyContainer . class . isInstance ( value ) ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 index feaaf45 . . ec148bf 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 @ @ - 1 , 7 + 1 , 9 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 + import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . parser . deserializer . LatencyContainerDeserializer ; 
 + import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 import com . google . common . base . MoreObjects ; 
 
 import java . util . concurrent . TimeUnit ; 
 @ @ - 11 , 14 + 13 , 6 @ @ public class LatencyContainer { 
 private long latency ; 
 private TimeUnit unit = TimeUnit . MILLISECONDS ; 
 
 - public long getLatency ( ) { 
 - return latency ; 
 - } 
 - 
 - public TimeUnit getUnit ( ) { 
 - return unit ; 
 - } 
 - 
 @ Override 
 public String toString ( ) { 
 return MoreObjects . toStringHelper ( this ) 
 @ @ - 38 , 4 + 32 , 8 @ @ public class LatencyContainer { 
 latencyContainer . unit = timeUnit ; 
 return latencyContainer ; 
 } 
 + 
 + public LatencyProcedure asProcedure ( ) { 
 + return Moco . latency ( latency , unit ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 index 159f04f . . d10b99b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 @ @ - 20 , 7 + 20 , 7 @ @ public class CompleteEventSetting { 
 MocoEventAction action = doCreateAction ( ) ; 
 
 if ( this . async ) { 
 - return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUint ( ) ) ) ; 
 + return Moco . async ( action , Moco . latency ( latency . getLatency ( ) , latency . getUnit ( ) ) ) ; 
 } 
 
 return action ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index c0dd17b . . ffe586b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 93 , 7 + 93 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 
 if ( " latency " . equalsIgnoreCase ( name ) ) { 
 LatencyContainer container = LatencyContainer . class . cast ( value ) ; 
 - return with ( latency ( container . getLatency ( ) , container . getUint ( ) ) ) ; 
 + return with ( latency ( container . getLatency ( ) , container . getUnit ( ) ) ) ; 
 } 
 
 if ( ProxyContainer . class . isInstance ( value ) ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 index 223fb50 . . ae4d540 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 @ @ - 9 , 14 + 9 , 14 @ @ import java . util . concurrent . TimeUnit ; 
 @ JsonDeserialize ( using = LatencyContainerDeserializer . class ) 
 public class LatencyContainer { 
 private long latency ; 
 - private TimeUnit uint = TimeUnit . MILLISECONDS ; 
 + private TimeUnit unit = TimeUnit . MILLISECONDS ; 
 
 public long getLatency ( ) { 
 return latency ; 
 } 
 
 - public TimeUnit getUint ( ) { 
 - return uint ; 
 + public TimeUnit getUnit ( ) { 
 + return unit ; 
 } 
 
 @ Override 
 @ @ - 24 , 7 + 24 , 7 @ @ public class LatencyContainer { 
 return MoreObjects . toStringHelper ( this ) 
 . omitNullValues ( ) 
 . add ( " latency " , latency ) 
 - . add ( " unit " , uint ) 
 + . add ( " unit " , unit ) 
 . toString ( ) ; 
 } 
 
 @ @ - 37 , 7 + 37 , 7 @ @ public class LatencyContainer { 
 public static LatencyContainer latencyWithUnit ( long latency , TimeUnit timeUnit ) { 
 LatencyContainer latencyContainer = new LatencyContainer ( ) ; 
 latencyContainer . latency = latency ; 
 - latencyContainer . uint = timeUnit ; 
 + latencyContainer . unit = timeUnit ; 
 return latencyContainer ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 index d41d0b1 . . f81c625 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 @ @ - 123 , 7 + 123 , 6 @ @ public class SessionSetting { 
 return template ( textContainer . getText ( ) ) ; 
 } 
 
 - 
 throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; 
 } 

