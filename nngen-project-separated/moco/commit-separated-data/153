BLEU SCORE: 0.24446151121745052

TEST MSG: added missing final to moco request action
GENERATED MSG: extracted method in moco request action

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index e63f253 . . a8afedb 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 15 , 18 + 15 , 18 @ @ import static com . google . common . base . Optional . of ; <nl> public abstract class MocoRequestAction implements MocoEventAction { <nl> private final Resource url ; <nl> <nl> - protected abstract HttpRequestBase createRequest ( final String url , final Request request ) ; <nl> + protected abstract HttpRequestBase createRequest ( String url , Request request ) ; <nl> <nl> protected MocoRequestAction ( final Resource url ) { <nl> this . url = url ; <nl> } <nl> <nl> - protected Resource getUrl ( ) { <nl> + protected final Resource getUrl ( ) { <nl> return url ; <nl> } <nl> <nl> @ Override <nl> - public void execute ( final Request request ) { <nl> + public final void execute ( final Request request ) { <nl> try ( CloseableHttpClient client = HttpClients . createDefault ( ) ) { <nl> doExecute ( client , request ) ; <nl> } catch ( IOException e ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index 1ad0ef4 . . 79a6104 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 36 , 12 + 36 , 7 @ @ public class MocoRequestAction implements MocoEventAction { <nl> public void execute ( ) { <nl> CloseableHttpClient client = HttpClients . createDefault ( ) ; <nl> try { <nl> - HttpRequestBase request = createRequest ( url , method ) ; <nl> - if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( ) ) ; <nl> - } <nl> - <nl> - client . execute ( request ) ; <nl> + doExecute ( client ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> } finally { <nl> @ @ - 52 , 6 + 47 , 15 @ @ public class MocoRequestAction implements MocoEventAction { <nl> } <nl> } <nl> <nl> + private void doExecute ( final CloseableHttpClient client ) throws IOException { <nl> + HttpRequestBase request = createRequest ( url , method ) ; <nl> + if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> + ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( ) ) ; <nl> + } <nl> + <nl> + client . execute ( request ) ; <nl> + } <nl> + <nl> private HttpEntity asEntity ( ) { <nl> return new ByteArrayEntity ( content . get ( ) . readFor ( Optional . < Request > absent ( ) ) . getContent ( ) ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index e63f253 . . a8afedb 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 15 , 18 + 15 , 18 @ @ import static com . google . common . base . Optional . of ; 
 public abstract class MocoRequestAction implements MocoEventAction { 
 private final Resource url ; 
 
 - protected abstract HttpRequestBase createRequest ( final String url , final Request request ) ; 
 + protected abstract HttpRequestBase createRequest ( String url , Request request ) ; 
 
 protected MocoRequestAction ( final Resource url ) { 
 this . url = url ; 
 } 
 
 - protected Resource getUrl ( ) { 
 + protected final Resource getUrl ( ) { 
 return url ; 
 } 
 
 @ Override 
 - public void execute ( final Request request ) { 
 + public final void execute ( final Request request ) { 
 try ( CloseableHttpClient client = HttpClients . createDefault ( ) ) { 
 doExecute ( client , request ) ; 
 } catch ( IOException e ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index 1ad0ef4 . . 79a6104 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 36 , 12 + 36 , 7 @ @ public class MocoRequestAction implements MocoEventAction { 
 public void execute ( ) { 
 CloseableHttpClient client = HttpClients . createDefault ( ) ; 
 try { 
 - HttpRequestBase request = createRequest ( url , method ) ; 
 - if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 - ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( ) ) ; 
 - } 
 - 
 - client . execute ( request ) ; 
 + doExecute ( client ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 } finally { 
 @ @ - 52 , 6 + 47 , 15 @ @ public class MocoRequestAction implements MocoEventAction { 
 } 
 } 
 
 + private void doExecute ( final CloseableHttpClient client ) throws IOException { 
 + HttpRequestBase request = createRequest ( url , method ) ; 
 + if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 + ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( ) ) ; 
 + } 
 + 
 + client . execute ( request ) ; 
 + } 
 + 
 private HttpEntity asEntity ( ) { 
 return new ByteArrayEntity ( content . get ( ) . readFor ( Optional . < Request > absent ( ) ) . getContent ( ) ) ; 
 }
