BLEU SCORE: 0.027611988917697356

TEST MSG: created response handler for cookie with cookie options
GENERATED MSG: collected magic text ' template '

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 0a6692f . . f577fe4 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . github . dreamhead . moco . CookieOption ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> @ @ - 154 , 10 + 155 , 20 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> TextContainer container = pair . getValue ( ) ; <nl> try { <nl> if ( container . isForTemplate ( ) ) { <nl> + if ( " cookie " . equals ( targetMethodName ) ) { <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) , new CookieOption [ 0 ] ) ; <nl> + } <nl> + <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> } <nl> <nl> + if ( " cookie " . equals ( targetMethodName ) ) { <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) , new CookieOption [ 0 ] ) ; <nl> + } <nl> + <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) ) ; <nl> } catch ( Exception e ) {
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index afd1c36 . . 00860c1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 40 , 11 + 40 , 11 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> return builder . withText ( text ) . build ( ) ; <nl> } <nl> <nl> - if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + if ( TextContainer . isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> Template template = Iterators . get ( iterator , 0 ) ; <nl> jp . nextToken ( ) ; <nl> - return TextContainer . builder ( ) . withOperation ( " template " ) . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; <nl> + return builder . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 3445d70 . . be3a136 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public class ResponseSetting extends Dynamics { <nl> private ResponseHandler createResponseHandler ( Map . Entry < String , TextContainer > pair , String targetMethodName ) { <nl> TextContainer container = pair . getValue ( ) ; <nl> try { <nl> - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> } <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class ResponseSetting extends Dynamics { <nl> return invokeTarget ( name , container . getText ( ) , Resource . class ) ; <nl> } <nl> <nl> - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> if ( " version " . equalsIgnoreCase ( name ) ) { <nl> return version ( template ( container . getText ( ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index a9e09b7 . . 02cbc22 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> public class TextContainer { <nl> + public static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ; <nl> private ImmutableMap < String , Object > props ; <nl> @ @ - 28 , 6 + 29 , 15 @ @ public class TextContainer { <nl> return props ; <nl> } <nl> <nl> + public static boolean isForTemplate ( String operation ) { <nl> + return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; <nl> + } <nl> + <nl> + public boolean isForTemplate ( ) { <nl> + return isForTemplate ( this . operation ) ; <nl> + } <nl> + <nl> + <nl> @ Override <nl> public String toString ( ) { <nl> return Objects . toStringHelper ( this )

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 0a6692f . . f577fe4 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 + import com . github . dreamhead . moco . CookieOption ; 
 import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . RequestExtractor ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 @ @ - 154 , 10 + 155 , 20 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 TextContainer container = pair . getValue ( ) ; 
 try { 
 if ( container . isForTemplate ( ) ) { 
 + if ( " cookie " . equals ( targetMethodName ) ) { 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) , new CookieOption [ 0 ] ) ; 
 + } 
 + 
 Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; 
 } 
 
 + if ( " cookie " . equals ( targetMethodName ) ) { 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class , CookieOption [ ] . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) , new CookieOption [ 0 ] ) ; 
 + } 
 + 
 Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class ) ; 
 return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) ) ; 
 } catch ( Exception e ) {

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index afd1c36 . . 00860c1 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 40 , 11 + 40 , 11 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 return builder . withText ( text ) . build ( ) ; 
 } 
 
 - if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 + if ( TextContainer . isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; 
 Template template = Iterators . get ( iterator , 0 ) ; 
 jp . nextToken ( ) ; 
 - return TextContainer . builder ( ) . withOperation ( " template " ) . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; 
 + return builder . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; 
 } 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 3445d70 . . be3a136 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 138 , 7 + 138 , 7 @ @ public class ResponseSetting extends Dynamics { 
 private ResponseHandler createResponseHandler ( Map . Entry < String , TextContainer > pair , String targetMethodName ) { 
 TextContainer container = pair . getValue ( ) ; 
 try { 
 - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { 
 + if ( container . isForTemplate ( ) ) { 
 Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; 
 } 
 @ @ - 160 , 7 + 160 , 7 @ @ public class ResponseSetting extends Dynamics { 
 return invokeTarget ( name , container . getText ( ) , Resource . class ) ; 
 } 
 
 - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { 
 + if ( container . isForTemplate ( ) ) { 
 if ( " version " . equalsIgnoreCase ( name ) ) { 
 return version ( template ( container . getText ( ) ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index a9e09b7 . . 02cbc22 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableMap ; 
 
 public class TextContainer { 
 + public static final String TEMPLATE _ NAME = " template " ; 
 private String text ; 
 private String operation ; 
 private ImmutableMap < String , Object > props ; 
 @ @ - 28 , 6 + 29 , 15 @ @ public class TextContainer { 
 return props ; 
 } 
 
 + public static boolean isForTemplate ( String operation ) { 
 + return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; 
 + } 
 + 
 + public boolean isForTemplate ( ) { 
 + return isForTemplate ( this . operation ) ; 
 + } 
 + 
 + 
 @ Override 
 public String toString ( ) { 
 return Objects . toStringHelper ( this )
