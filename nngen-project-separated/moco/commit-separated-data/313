BLEU SCORE: 0.027611988917697356

TEST MSG: started to work on java 7 watch service
GENERATED MSG: added shutdown monitor

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> new file mode 100644 <nl> index 0000000 . . 35f30c6 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . util . Files ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . file . ClosedWatchServiceException ; <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . WatchEvent ; <nl> + import java . nio . file . WatchKey ; <nl> + import java . nio . file . WatchService ; <nl> + import java . util . Collection ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> + import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> + <nl> + public class Java7Watcher implements Watcher { <nl> + private static Logger logger = LoggerFactory . getLogger ( Java7Watcher . class ) ; <nl> + private static ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> + <nl> + private final WatchService service ; <nl> + private final Function < File , Void > listener ; <nl> + private boolean running ; <nl> + private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> + <nl> + public Java7Watcher ( final Function < File , Void > listener , final File [ ] files ) { <nl> + this . listener = listener ; <nl> + this . running = false ; <nl> + <nl> + try { <nl> + this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; <nl> + for ( File file : files ) { <nl> + Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> + keys . put ( key , file . toPath ( ) ) ; <nl> + } <nl> + <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + this . running = true ; <nl> + <nl> + executor . execute ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + while ( running ) { <nl> + loop ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void loop ( ) { <nl> + try { <nl> + WatchKey key = service . take ( ) ; <nl> + <nl> + final Collection < Path > paths = keys . get ( key ) ; <nl> + for ( WatchEvent < ? > event : key . pollEvents ( ) ) { <nl> + final Path context = ( Path ) event . context ( ) ; <nl> + if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { <nl> + for ( Path path : paths ) { <nl> + if ( path . endsWith ( context ) ) { <nl> + listener . apply ( context . toFile ( ) ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + key . reset ( ) ; <nl> + } catch ( ClosedWatchServiceException ignored ) { <nl> + } catch ( InterruptedException e ) { <nl> + logger . error ( " Error happens " , e ) ; <nl> + } finally { <nl> + try { <nl> + service . close ( ) ; <nl> + } catch ( IOException ignore ) { <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + if ( running ) { <nl> + this . running = false ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . f46d1b0 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class Java7WatcherFactory implements FileWatcherFactory { <nl> + @ Override <nl> + public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + return new Java7Watcher ( listener , files ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> index d505e12 . . 5ee0739 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . io . File ; <nl> public class WatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractWatcherFactory . class ) ; <nl> <nl> - private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> + private FileWatcherFactory factory = new Java7WatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort , <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> index 9a52250 . . d402b57 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java <nl> @ @ - 40 , 5 + 40 , 6 @ @ public class DynamicConfigurationRunnerTest extends AbstractRunnerTest { <nl> waitChangeHappens ( ) ; <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> + runner . stop ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index cc8a2d8 . . dfbab5c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> waitChangeHappens ( ) ; <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> + runner . stop ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 126 , 5 + 127 , 6 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> <nl> String result = new String ( out . toByteArray ( ) ) ; <nl> assertThat ( result . contains ( " Fail " ) , is ( false ) ) ; <nl> + runner . stop ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java <nl> index 206a637 . . 20ff7f6 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java <nl> @ @ - 1 , 14 + 1 , 19 @ @ <nl> package com . github . dreamhead . moco . bootstrap ; <nl> <nl> import com . github . dreamhead . moco . runner . DynamicRunner ; <nl> + import com . github . dreamhead . moco . runner . Runner ; <nl> + import com . github . dreamhead . moco . runner . ShutdownMonitorRunner ; <nl> <nl> import static com . github . dreamhead . moco . bootstrap . BootArgs . parse ; <nl> <nl> public class Main { <nl> + private static final String SHUTDOWN _ FILE = " . shutdown _ moco _ hook " ; <nl> + <nl> public static void main ( String [ ] args ) { <nl> try { <nl> BootArgs bootArgs = parse ( args ) ; <nl> - new DynamicRunner ( bootArgs . getConfigurationFile ( ) , bootArgs . getPort ( ) ) . run ( ) ; <nl> + Runner runner = new DynamicRunner ( bootArgs . getConfigurationFile ( ) , bootArgs . getPort ( ) ) ; <nl> + new ShutdownMonitorRunner ( runner , SHUTDOWN _ FILE ) . run ( ) ; <nl> } catch ( ParseArgException e ) { <nl> help ( ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java <nl> index 987660b . . 9522ce6 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . * ; <nl> <nl> - public class DynamicRunner { <nl> + public class DynamicRunner implements Runner { <nl> private static Logger logger = LoggerFactory . getLogger ( DynamicRunner . class ) ; <nl> <nl> private final FileMonitor fileMonitor = new FileMonitor ( ) ; <nl> @ @ - 21 , 6 + 21 , 7 @ @ public class DynamicRunner { <nl> this . port = port ; <nl> } <nl> <nl> + @ Override <nl> public void run ( ) { <nl> try { <nl> jsonRunner . run ( new FileInputStream ( filename ) , port ) ; <nl> @ @ - 30 , 6 + 31 , 12 @ @ public class DynamicRunner { <nl> } <nl> } <nl> <nl> + @ Override <nl> + public void stop ( ) { <nl> + fileMonitor . stopMonitor ( ) ; <nl> + jsonRunner . stop ( ) ; <nl> + } <nl> + <nl> private FileAlterationListener configurationChangeListener ( final int port ) { <nl> return new FileAlterationListenerAdaptor ( ) { <nl> @ Override <nl> @ @ - 44 , 9 + 51 , 4 @ @ public class DynamicRunner { <nl> } <nl> } ; <nl> } <nl> - <nl> - public void stop ( ) { <nl> - fileMonitor . stopMonitor ( ) ; <nl> - jsonRunner . stop ( ) ; <nl> - } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java <nl> index 664b2f0 . . c967245 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java <nl> @ @ - 14 , 20 + 14 , 23 @ @ public class FileMonitor { <nl> private static Logger logger = LoggerFactory . getLogger ( FileMonitor . class ) ; <nl> <nl> private FileAlterationMonitor monitor ; <nl> + private boolean running = false ; <nl> <nl> - public void startMonitor ( File file , FileAlterationListener listener ) { <nl> + public synchronized void startMonitor ( File file , FileAlterationListener listener ) { <nl> monitor = monitorFile ( file , listener ) ; <nl> try { <nl> monitor . start ( ) ; <nl> + running = true ; <nl> } catch ( Exception e ) { <nl> logger . error ( " Error found . " , e ) ; <nl> } <nl> } <nl> <nl> - public void stopMonitor ( ) { <nl> + public synchronized void stopMonitor ( ) { <nl> try { <nl> - if ( monitor ! = null ) { <nl> + if ( monitor ! = null & & running ) { <nl> monitor . stop ( ) ; <nl> + running = false ; <nl> } <nl> } catch ( Exception e ) { <nl> logger . error ( " Error found . " , e ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 0385dcd . . 5f9e494 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 7 , 8 + 7 , 8 @ @ import java . io . InputStream ; <nl> <nl> public class JsonRunner { <nl> <nl> - static final HttpServerParser httpServerParser = new HttpServerParser ( ) ; <nl> - static final StandaloneRunner runner = new StandaloneRunner ( ) ; <nl> + private final HttpServerParser httpServerParser = new HttpServerParser ( ) ; <nl> + private final StandaloneRunner runner = new StandaloneRunner ( ) ; <nl> <nl> public void run ( InputStream is , int port ) { <nl> runner . run ( httpServerParser . parseServer ( is , port ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / Runner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / Runner . java <nl> new file mode 100644 <nl> index 0000000 . . b9834e6 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / Runner . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + public interface Runner { <nl> + void run ( ) ; <nl> + void stop ( ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunner . java <nl> new file mode 100644 <nl> index 0000000 . . 20ca64f <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunner . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class ShutdownMonitorRunner implements Runner { <nl> + private Runner runner ; <nl> + private String shutdownHookFile ; <nl> + private FileMonitor monitor = new FileMonitor ( ) ; <nl> + <nl> + public ShutdownMonitorRunner ( Runner runner , String shutdownHookFile ) { <nl> + this . runner = runner ; <nl> + this . shutdownHookFile = shutdownHookFile ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) { <nl> + runner . run ( ) ; <nl> + <nl> + monitor . startMonitor ( new File ( shutdownHookFile ) , new FileAlterationListenerAdaptor ( ) { <nl> + @ Override <nl> + public void onFileCreate ( File file ) { <nl> + file . delete ( ) ; <nl> + stop ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + runner . stop ( ) ; <nl> + monitor . stopMonitor ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3e42a55 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> + import org . junit . After ; <nl> + <nl> + import static java . lang . String . format ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + public abstract class AbstractRunnerTest { <nl> + protected final MocoTestHelper helper = new MocoTestHelper ( ) ; <nl> + protected Runner runner ; <nl> + <nl> + @ After <nl> + public void tearDown ( ) { <nl> + if ( runner ! = null ) { <nl> + runner . stop ( ) ; <nl> + } <nl> + } <nl> + <nl> + protected void waitChangeHappens ( ) { <nl> + try { <nl> + Thread . sleep ( FileMonitor . INTERVAL * 2 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java <nl> index db96d2f . . c11d898 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java <nl> @ @ - 1 , 7 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> - import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> - import org . junit . After ; <nl> import org . junit . Test ; <nl> <nl> import java . io . * ; <nl> @ @ - 12 , 17 + 10 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . fail ; <nl> <nl> - public class DynamicRunnerTest { <nl> - protected final MocoTestHelper helper = new MocoTestHelper ( ) ; <nl> - private DynamicRunner runner ; <nl> - <nl> - @ After <nl> - public void tearDown ( ) { <nl> - if ( runner ! = null ) { <nl> - runner . stop ( ) ; <nl> - } <nl> - } <nl> - <nl> + public class DynamicRunnerTest extends AbstractRunnerTest { <nl> @ Test <nl> public void should _ reload _ configuration ( ) throws IOException , InterruptedException { <nl> final File config = File . createTempFile ( " config " , " . json " ) ; <nl> @ @ - 38 , 7 + 26 , 7 @ @ public class DynamicRunnerTest { <nl> " \ " text \ " : \ " foobar \ " " + <nl> " } } ] " ) ; <nl> <nl> - Thread . sleep ( FileMonitor . INTERVAL + 500 ) ; <nl> + waitChangeHappens ( ) ; <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . d734f93 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import org . apache . http . conn . HttpHostConnectException ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . RemoteTestUtils . root ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ shutdown _ runner ( ) throws IOException , InterruptedException { <nl> + Runner rawRunner = new DynamicRunner ( " src / test / resources / foo . json " , port ( ) ) ; <nl> + File shutdownFile = File . createTempFile ( " shutdown " , " hook " ) ; <nl> + shutdownFile . delete ( ) ; <nl> + runner = new ShutdownMonitorRunner ( rawRunner , shutdownFile . getAbsolutePath ( ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + <nl> + shutdownFile . createNewFile ( ) ; <nl> + waitChangeHappens ( ) ; <nl> + <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 new file mode 100644 
 index 0000000 . . 35f30c6 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . util . Files ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Multimap ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . file . ClosedWatchServiceException ; 
 + import java . nio . file . FileSystems ; 
 + import java . nio . file . Path ; 
 + import java . nio . file . WatchEvent ; 
 + import java . nio . file . WatchKey ; 
 + import java . nio . file . WatchService ; 
 + import java . util . Collection ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + 
 + import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; 
 + import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; 
 + 
 + public class Java7Watcher implements Watcher { 
 + private static Logger logger = LoggerFactory . getLogger ( Java7Watcher . class ) ; 
 + private static ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; 
 + 
 + private final WatchService service ; 
 + private final Function < File , Void > listener ; 
 + private boolean running ; 
 + private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; 
 + 
 + public Java7Watcher ( final Function < File , Void > listener , final File [ ] files ) { 
 + this . listener = listener ; 
 + this . running = false ; 
 + 
 + try { 
 + this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; 
 + for ( File file : files ) { 
 + Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; 
 + keys . put ( key , file . toPath ( ) ) ; 
 + } 
 + 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + 
 + } 
 + 
 + @ Override 
 + public void start ( ) { 
 + this . running = true ; 
 + 
 + executor . execute ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + while ( running ) { 
 + loop ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 + private void loop ( ) { 
 + try { 
 + WatchKey key = service . take ( ) ; 
 + 
 + final Collection < Path > paths = keys . get ( key ) ; 
 + for ( WatchEvent < ? > event : key . pollEvents ( ) ) { 
 + final Path context = ( Path ) event . context ( ) ; 
 + if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { 
 + for ( Path path : paths ) { 
 + if ( path . endsWith ( context ) ) { 
 + listener . apply ( context . toFile ( ) ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + } 
 + key . reset ( ) ; 
 + } catch ( ClosedWatchServiceException ignored ) { 
 + } catch ( InterruptedException e ) { 
 + logger . error ( " Error happens " , e ) ; 
 + } finally { 
 + try { 
 + service . close ( ) ; 
 + } catch ( IOException ignore ) { 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void stop ( ) { 
 + if ( running ) { 
 + this . running = false ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 new file mode 100644 
 index 0000000 . . f46d1b0 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . google . common . base . Function ; 
 + 
 + import java . io . File ; 
 + 
 + public class Java7WatcherFactory implements FileWatcherFactory { 
 + @ Override 
 + public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { 
 + if ( files . length = = 0 ) { 
 + throw new IllegalArgumentException ( " No file is specified " ) ; 
 + } 
 + return new Java7Watcher ( listener , files ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 index d505e12 . . 5ee0739 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 @ @ - 13 , 7 + 13 , 7 @ @ import java . io . File ; 
 public class WatcherFactory { 
 private static Logger logger = LoggerFactory . getLogger ( AbstractWatcherFactory . class ) ; 
 
 - private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; 
 + private FileWatcherFactory factory = new Java7WatcherFactory ( ) ; 
 
 public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , 
 final Optional < Integer > shutdownPort , 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java 
 index 9a52250 . . d402b57 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicConfigurationRunnerTest . java 
 @ @ - 40 , 5 + 40 , 6 @ @ public class DynamicConfigurationRunnerTest extends AbstractRunnerTest { 
 waitChangeHappens ( ) ; 
 
 assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; 
 + runner . stop ( ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 index cc8a2d8 . . dfbab5c 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 @ @ - 50 , 6 + 50 , 7 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { 
 waitChangeHappens ( ) ; 
 
 assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; 
 + runner . stop ( ) ; 
 } 
 
 @ Test 
 @ @ - 126 , 5 + 127 , 6 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { 
 
 String result = new String ( out . toByteArray ( ) ) ; 
 assertThat ( result . contains ( " Fail " ) , is ( false ) ) ; 
 + runner . stop ( ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java 
 index 206a637 . . 20ff7f6 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Main . java 
 @ @ - 1 , 14 + 1 , 19 @ @ 
 package com . github . dreamhead . moco . bootstrap ; 
 
 import com . github . dreamhead . moco . runner . DynamicRunner ; 
 + import com . github . dreamhead . moco . runner . Runner ; 
 + import com . github . dreamhead . moco . runner . ShutdownMonitorRunner ; 
 
 import static com . github . dreamhead . moco . bootstrap . BootArgs . parse ; 
 
 public class Main { 
 + private static final String SHUTDOWN _ FILE = " . shutdown _ moco _ hook " ; 
 + 
 public static void main ( String [ ] args ) { 
 try { 
 BootArgs bootArgs = parse ( args ) ; 
 - new DynamicRunner ( bootArgs . getConfigurationFile ( ) , bootArgs . getPort ( ) ) . run ( ) ; 
 + Runner runner = new DynamicRunner ( bootArgs . getConfigurationFile ( ) , bootArgs . getPort ( ) ) ; 
 + new ShutdownMonitorRunner ( runner , SHUTDOWN _ FILE ) . run ( ) ; 
 } catch ( ParseArgException e ) { 
 help ( ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java 
 index 987660b . . 9522ce6 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / DynamicRunner . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 import java . io . * ; 
 
 - public class DynamicRunner { 
 + public class DynamicRunner implements Runner { 
 private static Logger logger = LoggerFactory . getLogger ( DynamicRunner . class ) ; 
 
 private final FileMonitor fileMonitor = new FileMonitor ( ) ; 
 @ @ - 21 , 6 + 21 , 7 @ @ public class DynamicRunner { 
 this . port = port ; 
 } 
 
 + @ Override 
 public void run ( ) { 
 try { 
 jsonRunner . run ( new FileInputStream ( filename ) , port ) ; 
 @ @ - 30 , 6 + 31 , 12 @ @ public class DynamicRunner { 
 } 
 } 
 
 + @ Override 
 + public void stop ( ) { 
 + fileMonitor . stopMonitor ( ) ; 
 + jsonRunner . stop ( ) ; 
 + } 
 + 
 private FileAlterationListener configurationChangeListener ( final int port ) { 
 return new FileAlterationListenerAdaptor ( ) { 
 @ Override 
 @ @ - 44 , 9 + 51 , 4 @ @ public class DynamicRunner { 
 } 
 } ; 
 } 
 - 
 - public void stop ( ) { 
 - fileMonitor . stopMonitor ( ) ; 
 - jsonRunner . stop ( ) ; 
 - } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java 
 index 664b2f0 . . c967245 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileMonitor . java 
 @ @ - 14 , 20 + 14 , 23 @ @ public class FileMonitor { 
 private static Logger logger = LoggerFactory . getLogger ( FileMonitor . class ) ; 
 
 private FileAlterationMonitor monitor ; 
 + private boolean running = false ; 
 
 - public void startMonitor ( File file , FileAlterationListener listener ) { 
 + public synchronized void startMonitor ( File file , FileAlterationListener listener ) { 
 monitor = monitorFile ( file , listener ) ; 
 try { 
 monitor . start ( ) ; 
 + running = true ; 
 } catch ( Exception e ) { 
 logger . error ( " Error found . " , e ) ; 
 } 
 } 
 
 - public void stopMonitor ( ) { 
 + public synchronized void stopMonitor ( ) { 
 try { 
 - if ( monitor ! = null ) { 
 + if ( monitor ! = null & & running ) { 
 monitor . stop ( ) ; 
 + running = false ; 
 } 
 } catch ( Exception e ) { 
 logger . error ( " Error found . " , e ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 index 0385dcd . . 5f9e494 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 @ @ - 7 , 8 + 7 , 8 @ @ import java . io . InputStream ; 
 
 public class JsonRunner { 
 
 - static final HttpServerParser httpServerParser = new HttpServerParser ( ) ; 
 - static final StandaloneRunner runner = new StandaloneRunner ( ) ; 
 + private final HttpServerParser httpServerParser = new HttpServerParser ( ) ; 
 + private final StandaloneRunner runner = new StandaloneRunner ( ) ; 
 
 public void run ( InputStream is , int port ) { 
 runner . run ( httpServerParser . parseServer ( is , port ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / Runner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / Runner . java 
 new file mode 100644 
 index 0000000 . . b9834e6 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / Runner . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . github . dreamhead . moco . runner ; 
 + 
 + public interface Runner { 
 + void run ( ) ; 
 + void stop ( ) ; 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunner . java 
 new file mode 100644 
 index 0000000 . . 20ca64f 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunner . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package com . github . dreamhead . moco . runner ; 
 + 
 + import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 + 
 + import java . io . File ; 
 + 
 + public class ShutdownMonitorRunner implements Runner { 
 + private Runner runner ; 
 + private String shutdownHookFile ; 
 + private FileMonitor monitor = new FileMonitor ( ) ; 
 + 
 + public ShutdownMonitorRunner ( Runner runner , String shutdownHookFile ) { 
 + this . runner = runner ; 
 + this . shutdownHookFile = shutdownHookFile ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) { 
 + runner . run ( ) ; 
 + 
 + monitor . startMonitor ( new File ( shutdownHookFile ) , new FileAlterationListenerAdaptor ( ) { 
 + @ Override 
 + public void onFileCreate ( File file ) { 
 + file . delete ( ) ; 
 + stop ( ) ; 
 + } 
 + } ) ; 
 + 
 + } 
 + 
 + @ Override 
 + public void stop ( ) { 
 + runner . stop ( ) ; 
 + monitor . stopMonitor ( ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 new file mode 100644 
 index 0000000 . . 3e42a55 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . github . dreamhead . moco . runner ; 
 + 
 + import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 + import org . junit . After ; 
 + 
 + import static java . lang . String . format ; 
 + import static org . junit . Assert . fail ; 
 + 
 + public abstract class AbstractRunnerTest { 
 + protected final MocoTestHelper helper = new MocoTestHelper ( ) ; 
 + protected Runner runner ; 
 + 
 + @ After 
 + public void tearDown ( ) { 
 + if ( runner ! = null ) { 
 + runner . stop ( ) ; 
 + } 
 + } 
 + 
 + protected void waitChangeHappens ( ) { 
 + try { 
 + Thread . sleep ( FileMonitor . INTERVAL * 2 ) ; 
 + } catch ( InterruptedException e ) { 
 + fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java 
 index db96d2f . . c11d898 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicRunnerTest . java 
 @ @ - 1 , 7 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 - import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 - import org . junit . After ; 
 import org . junit . Test ; 
 
 import java . io . * ; 
 @ @ - 12 , 17 + 10 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . fail ; 
 
 - public class DynamicRunnerTest { 
 - protected final MocoTestHelper helper = new MocoTestHelper ( ) ; 
 - private DynamicRunner runner ; 
 - 
 - @ After 
 - public void tearDown ( ) { 
 - if ( runner ! = null ) { 
 - runner . stop ( ) ; 
 - } 
 - } 
 - 
 + public class DynamicRunnerTest extends AbstractRunnerTest { 
 @ Test 
 public void should _ reload _ configuration ( ) throws IOException , InterruptedException { 
 final File config = File . createTempFile ( " config " , " . json " ) ; 
 @ @ - 38 , 7 + 26 , 7 @ @ public class DynamicRunnerTest { 
 " \ " text \ " : \ " foobar \ " " + 
 " } } ] " ) ; 
 
 - Thread . sleep ( FileMonitor . INTERVAL + 500 ) ; 
 + waitChangeHappens ( ) ; 
 
 assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java 
 new file mode 100644 
 index 0000000 . . d734f93 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package com . github . dreamhead . moco . runner ; 
 + 
 + import org . apache . http . conn . HttpHostConnectException ; 
 + import org . junit . Test ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . RemoteTestUtils . port ; 
 + import static com . github . dreamhead . moco . RemoteTestUtils . root ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { 
 + @ Test ( expected = HttpHostConnectException . class ) 
 + public void should _ shutdown _ runner ( ) throws IOException , InterruptedException { 
 + Runner rawRunner = new DynamicRunner ( " src / test / resources / foo . json " , port ( ) ) ; 
 + File shutdownFile = File . createTempFile ( " shutdown " , " hook " ) ; 
 + shutdownFile . delete ( ) ; 
 + runner = new ShutdownMonitorRunner ( rawRunner , shutdownFile . getAbsolutePath ( ) ) ; 
 + runner . run ( ) ; 
 + 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + 
 + shutdownFile . createNewFile ( ) ; 
 + waitChangeHappens ( ) ; 
 + 
 + helper . get ( root ( ) ) ; 
 + } 
 + }
