BLEU SCORE: 0.16233395773754944

TEST MSG: added missing final to base setting
GENERATED MSG: implemented setting interface for base setting

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> index c922685 . . 9e49e3d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> @ @ - 26 , 12 + 26 , 12 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> } <nl> <nl> @ Override <nl> - public boolean match ( final Request request ) { <nl> + public final boolean match ( final Request request ) { <nl> return this . matcher . match ( request ) & & this . handler ! = null ; <nl> } <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> + public final void writeToResponse ( final SessionContext context ) { <nl> this . handler . writeToResponse ( context ) ; <nl> this . fireCompleteEvent ( context . getRequest ( ) ) ; <nl> } <nl> @ @ - 45 , 7 + 45 , 7 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> } <nl> <nl> @ Override <nl> - public Setting < T > apply ( final MocoConfig config ) { <nl> + public final Setting < T > apply ( final MocoConfig config ) { <nl> BaseSetting < T > setting = createSetting ( configMatcher ( this . matcher , config ) ) ; <nl> setting . handler = configItem ( this . handler , config ) ; <nl> setting . eventTriggers = configItems ( eventTriggers , config ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> index 387f77c . . 506872a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> @ @ - 4 , 17 + 4 , 20 @ @ import com . github . dreamhead . moco . * ; <nl> import com . github . dreamhead . moco . internal . BaseResponseSettingConfiguration ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> <nl> - public abstract class BaseSetting < T extends ResponseSetting < T > > extends BaseResponseSettingConfiguration < T > { <nl> + public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> + extends BaseResponseSettingConfiguration < T > implements Setting < T > { <nl> protected final RequestMatcher matcher ; <nl> <nl> public BaseSetting ( final RequestMatcher matcher ) { <nl> this . matcher = matcher ; <nl> } <nl> <nl> + @ Override <nl> public boolean match ( Request request ) { <nl> return this . matcher . match ( request ) & & this . handler ! = null ; <nl> } <nl> <nl> + @ Override <nl> public void writeToResponse ( SessionContext context ) { <nl> this . handler . writeToResponse ( context ) ; <nl> this . fireCompleteEvent ( ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 index c922685 . . 9e49e3d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 @ @ - 26 , 12 + 26 , 12 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > 
 } 
 
 @ Override 
 - public boolean match ( final Request request ) { 
 + public final boolean match ( final Request request ) { 
 return this . matcher . match ( request ) & & this . handler ! = null ; 
 } 
 
 @ Override 
 - public void writeToResponse ( final SessionContext context ) { 
 + public final void writeToResponse ( final SessionContext context ) { 
 this . handler . writeToResponse ( context ) ; 
 this . fireCompleteEvent ( context . getRequest ( ) ) ; 
 } 
 @ @ - 45 , 7 + 45 , 7 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > 
 } 
 
 @ Override 
 - public Setting < T > apply ( final MocoConfig config ) { 
 + public final Setting < T > apply ( final MocoConfig config ) { 
 BaseSetting < T > setting = createSetting ( configMatcher ( this . matcher , config ) ) ; 
 setting . handler = configItem ( this . handler , config ) ; 
 setting . eventTriggers = configItems ( eventTriggers , config ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 index 387f77c . . 506872a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 @ @ - 4 , 17 + 4 , 20 @ @ import com . github . dreamhead . moco . * ; 
 import com . github . dreamhead . moco . internal . BaseResponseSettingConfiguration ; 
 import com . github . dreamhead . moco . internal . SessionContext ; 
 
 - public abstract class BaseSetting < T extends ResponseSetting < T > > extends BaseResponseSettingConfiguration < T > { 
 + public abstract class BaseSetting < T extends ResponseSetting < T > > 
 + extends BaseResponseSettingConfiguration < T > implements Setting < T > { 
 protected final RequestMatcher matcher ; 
 
 public BaseSetting ( final RequestMatcher matcher ) { 
 this . matcher = matcher ; 
 } 
 
 + @ Override 
 public boolean match ( Request request ) { 
 return this . matcher . match ( request ) & & this . handler ! = null ; 
 } 
 
 + @ Override 
 public void writeToResponse ( SessionContext context ) { 
 this . handler . writeToResponse ( context ) ; 
 this . fireCompleteEvent ( ) ;
