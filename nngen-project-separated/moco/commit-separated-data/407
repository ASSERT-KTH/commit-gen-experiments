BLEU SCORE: 0.6104735835807844

TEST MSG: added http only cookie option for standalone cookie option
GENERATED MSG: added secure cookie option for standalone cookie option

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index 903eaca . . af52583 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 65 , 6 + 65 , 10 @ @ public class CookieContainer implements Container { <nl> options . add ( CookieOption . secure ( ) ) ; <nl> } <nl> <nl> + if ( this . httpOnly ) { <nl> + options . add ( CookieOption . httpOnly ( ) ) ; <nl> + } <nl> + <nl> return options . toArray ( new CookieOption [ options . size ( ) ] ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index 1abd752 . . a6cde9d 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 58 , 4 + 58 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ http _ only ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - http - only " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + assertThat ( decodeCookie . isHttpOnly ( ) , is ( true ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> index fb376c3 . . ed070c6 100644 <nl> - - - a / moco - runner / src / test / resources / cookie . json <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 47 , 5 + 47 , 18 @ @ <nl> } <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie - with - http - only " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " httpOnly " : " true " <nl> + } <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index e55753a . . 903eaca 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 61 , 6 + 61 , 10 @ @ public class CookieContainer implements Container { <nl> options . add ( CookieOption . domain ( this . domain ) ) ; <nl> } <nl> <nl> + if ( this . secure ) { <nl> + options . add ( CookieOption . secure ( ) ) ; <nl> + } <nl> + <nl> return options . toArray ( new CookieOption [ options . size ( ) ] ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index bda1f1e . . 1abd752 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 46 , 4 + 46 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ secure ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - secure " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> index 722005b . . fb376c3 100644 <nl> - - - a / moco - runner / src / test / resources / cookie . json <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 34 , 5 + 34 , 18 @ @ <nl> } <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie - with - secure " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " secure " : " true " <nl> + } <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 index 903eaca . . af52583 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 @ @ - 65 , 6 + 65 , 10 @ @ public class CookieContainer implements Container { 
 options . add ( CookieOption . secure ( ) ) ; 
 } 
 
 + if ( this . httpOnly ) { 
 + options . add ( CookieOption . httpOnly ( ) ) ; 
 + } 
 + 
 return options . toArray ( new CookieOption [ options . size ( ) ] ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 index 1abd752 . . a6cde9d 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 @ @ - 58 , 4 + 58 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ http _ only ( ) throws IOException { 
 + runWithConfiguration ( " cookie . json " ) ; 
 + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - http - only " ) ) ; 
 + 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 + assertThat ( decodeCookie . isHttpOnly ( ) , is ( true ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json 
 index fb376c3 . . ed070c6 100644 
 - - - a / moco - runner / src / test / resources / cookie . json 
 + + + b / moco - runner / src / test / resources / cookie . json 
 @ @ - 47 , 5 + 47 , 18 @ @ 
 } 
 } 
 } 
 + } , 
 + { 
 + " request " : { 
 + " uri " : " / cookie - with - http - only " 
 + } , 
 + " response " : { 
 + " cookies " : { 
 + " login " : { 
 + " value " : " true " , 
 + " httpOnly " : " true " 
 + } 
 + } 
 + } 
 } 
 ] 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 index e55753a . . 903eaca 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 @ @ - 61 , 6 + 61 , 10 @ @ public class CookieContainer implements Container { 
 options . add ( CookieOption . domain ( this . domain ) ) ; 
 } 
 
 + if ( this . secure ) { 
 + options . add ( CookieOption . secure ( ) ) ; 
 + } 
 + 
 return options . toArray ( new CookieOption [ options . size ( ) ] ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 index bda1f1e . . 1abd752 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 @ @ - 46 , 4 + 46 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ secure ( ) throws IOException { 
 + runWithConfiguration ( " cookie . json " ) ; 
 + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - secure " ) ) ; 
 + 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 + assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json 
 index 722005b . . fb376c3 100644 
 - - - a / moco - runner / src / test / resources / cookie . json 
 + + + b / moco - runner / src / test / resources / cookie . json 
 @ @ - 34 , 5 + 34 , 18 @ @ 
 } 
 } 
 } 
 + } , 
 + { 
 + " request " : { 
 + " uri " : " / cookie - with - secure " 
 + } , 
 + " response " : { 
 + " cookies " : { 
 + " login " : { 
 + " value " : " true " , 
 + " secure " : " true " 
 + } 
 + } 
 + } 
 } 
 ] 
 \ No newline at end of file
