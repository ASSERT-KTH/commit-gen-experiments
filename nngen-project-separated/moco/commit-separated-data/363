BLEU SCORE: 0.07986788803078405

TEST MSG: introduced strip for string
GENERATED MSG: applied final to parser

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> index 3382d9a . . 561f636 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java <nl> @ @ - 7 , 11 + 7 , 13 @ @ import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> + <nl> public class HttpProtocolVersionDeserializer extends JsonDeserializer < HttpProtocolVersion > { <nl> @ Override <nl> public HttpProtocolVersion deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> try { <nl> - return HttpProtocolVersion . versionOf ( jp . getText ( ) . trim ( ) ) ; <nl> + return HttpProtocolVersion . versionOf ( strip ( jp . getText ( ) ) ) ; <nl> } catch ( IllegalArgumentException e ) { <nl> return ( HttpProtocolVersion ) ctx . handleUnexpectedToken ( HttpProtocolVersion . class , jp ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> index dfd7e54 . . 07b0401 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> @ @ - 8 , 10 + 8 , 11 @ @ import com . github . dreamhead . moco . model . MessageContent ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> <nl> public class MessageContentDeserializer extends JsonDeserializer < MessageContent > { <nl> @ Override <nl> public MessageContent deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> - return content ( jp . getText ( ) . trim ( ) ) ; <nl> + return content ( strip ( jp . getText ( ) ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java <nl> new file mode 100644 <nl> index 0000000 . . 0933840 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import static com . google . common . base . Strings . isNullOrEmpty ; <nl> + <nl> + public final class StringUtil { <nl> + public static String strip ( final String text ) { <nl> + if ( isNullOrEmpty ( text ) ) { <nl> + return " " ; <nl> + } <nl> + <nl> + return text . trim ( ) ; <nl> + } <nl> + <nl> + private StringUtil ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> index 6c80c52 . . 75ac7af 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java <nl> @ @ - 34 , 7 + 34 , 14 @ @ public class HttpsArgsParser extends StartArgsParser { <nl> throw new ParseArgException ( " only one arg not allowed " ) ; <nl> } <nl> <nl> - return httpsArgs ( ) . withPort ( getPort ( port ) ) . withShutdownPort ( getPort ( shutdownPort ) ) . withConfigurationFile ( config ) . withSettings ( globalSettings ) . withEnv ( env ) . withHttpsArg ( httpsArg ( cmd ) ) . build ( ) ; <nl> + return httpsArgs ( ) <nl> + . withPort ( getPort ( port ) ) <nl> + . withShutdownPort ( getPort ( shutdownPort ) ) <nl> + . withConfigurationFile ( config ) <nl> + . withSettings ( globalSettings ) <nl> + . withEnv ( env ) <nl> + . withHttpsArg ( httpsArg ( cmd ) ) <nl> + . build ( ) ; <nl> } <nl> <nl> private HttpsArg httpsArg ( final CommandLine cmd ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> index d7cb4f9 . . e59e412 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> @ @ - 10 , 12 + 10 , 14 @ @ import com . github . dreamhead . moco . parser . model . LatencyContainer ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> + <nl> public class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { <nl> @ Override <nl> public CookieContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return CookieContainer . newContainer ( jp . getText ( ) . trim ( ) ) ; <nl> + return CookieContainer . newContainer ( strip ( jp . getText ( ) ) ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index 8a853d1 . . b4c7172 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContainer ; <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> <nl> public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> @ @ - 26 , 7 + 27 , 7 @ @ public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> jp . nextToken ( ) ; <nl> <nl> - String target = jp . getText ( ) . trim ( ) ; <nl> + String target = strip ( jp . getText ( ) ) ; <nl> if ( isForFileContainer ( target ) ) { <nl> return toFileContainer ( jp ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> index b7c9472 . . 14ddfcb 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 10 , 13 + 10 , 14 @ @ import com . github . dreamhead . moco . parser . model . ProxyContainer ; <nl> import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . ProxyContainer . builder ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> <nl> public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> @ Override <nl> public ProxyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return builder ( ) . withUrl ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + return builder ( ) . withUrl ( strip ( jp . getText ( ) ) ) . build ( ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index 9ddd13a . . b5416ce 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ import java . util . Map ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . getTemplateName ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> + import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> @ @ - 29 , 7 + 30 , 7 @ @ public class TextContainerDeserializerHelper { <nl> public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> - String operation = jp . getText ( ) . trim ( ) ; <nl> + String operation = strip ( jp . getText ( ) ) ; <nl> <nl> JsonToken token = jp . nextToken ( ) ; <nl> if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> @ @ - 39 , 7 + 40 , 7 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> <nl> if ( token = = JsonToken . VALUE _ STRING ) { <nl> - String text = jp . getText ( ) . trim ( ) ; <nl> + String text = strip ( jp . getText ( ) ) ; <nl> jp . nextToken ( ) ; <nl> return builder ( ) . withOperation ( operation ) . withText ( text ) . build ( ) ; <nl> } <nl> @ @ - 49 , 7 + 50 , 7 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> <nl> protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> - return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + return builder ( ) . withText ( strip ( jp . getText ( ) ) ) . build ( ) ; <nl> } <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 20a6499 . . c50c4b2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 196 , 7 + 196 , 8 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> final CookieContainer cookieContainer ) { <nl> try { <nl> Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieAttribute [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , <nl> + getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index f361e45 . . 39eba72 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class GlobalSettingParserTest { <nl> assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; <nl> } <nl> <nl> - private InputStream getResourceAsStream ( String filename ) { <nl> + private InputStream getResourceAsStream ( final String filename ) { <nl> return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> index 62c8805 . . 8263267 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import java . io . InputStream ; <nl> <nl> public abstract class BaseParser < T extends Server > implements Parser < T > { <nl> - protected abstract T createServer ( ImmutableList < SessionSetting > read , Optional < Integer > port , MocoConfig [ ] configs ) ; <nl> + protected abstract T createServer ( final ImmutableList < SessionSetting > read , final Optional < Integer > port , final MocoConfig [ ] configs ) ; <nl> <nl> protected final CollectionReader reader ; <nl> <nl> @ @ - 17 , 7 + 17 , 7 @ @ public abstract class BaseParser < T extends Server > implements Parser < T > { <nl> this . reader = new CollectionReader ( ) ; <nl> } <nl> <nl> - public T parseServer ( InputStream is , Optional < Integer > port , MocoConfig . . . configs ) { <nl> + public T parseServer ( final InputStream is , final Optional < Integer > port , final MocoConfig . . . configs ) { <nl> return createServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> index 4ad7d93 . . 06e0fac 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> @ @ - 27 , 13 + 27 , 13 @ @ public class CollectionReader { <nl> private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> <nl> - public CollectionReader ( Module . . . modules ) { <nl> + public CollectionReader ( final Module . . . modules ) { <nl> for ( Module module : modules ) { <nl> mapper . registerModule ( module ) ; <nl> } <nl> } <nl> <nl> - public < T > ImmutableList < T > read ( InputStream is , Class < T > elementClass ) { <nl> + public < T > ImmutableList < T > read ( final InputStream is , final Class < T > elementClass ) { <nl> Closer closer = Closer . create ( ) ; <nl> InputStream in = closer . register ( is ) ; <nl> try { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> index 5dd6eac . . 3bcc893 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> @ @ - 6 , 9 + 6 , 9 @ @ import com . google . common . collect . ImmutableList ; <nl> import java . io . InputStream ; <nl> <nl> public class GlobalSettingParser { <nl> - private CollectionReader reader = new CollectionReader ( ) ; <nl> + private final CollectionReader reader = new CollectionReader ( ) ; <nl> <nl> - public ImmutableList < GlobalSetting > parse ( InputStream is ) { <nl> + public ImmutableList < GlobalSetting > parse ( final InputStream is ) { <nl> return reader . read ( is , GlobalSetting . class ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> index 54184d1 . . 273cbc9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class HttpServerParser extends BaseParser < HttpServer > { <nl> private static Logger logger = LoggerFactory . getLogger ( HttpServerParser . class ) ; <nl> <nl> @ Override <nl> - protected HttpServer createServer ( ImmutableList < SessionSetting > sessionSettings , Optional < Integer > port , MocoConfig . . . configs ) { <nl> + protected HttpServer createServer ( final ImmutableList < SessionSetting > sessionSettings , final Optional < Integer > port , final MocoConfig . . . configs ) { <nl> HttpServer server = ActualHttpServer . createLogServer ( port , configs ) ; <nl> for ( SessionSetting session : sessionSettings ) { <nl> logger . debug ( " Parse session : { } " , session ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java <nl> index da9fc9c . . c30e35e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java <nl> @ @ - 7 , 5 + 7 , 5 @ @ import com . google . common . base . Optional ; <nl> import java . io . InputStream ; <nl> <nl> public interface Parser < T extends Server > { <nl> - T parseServer ( InputStream is , Optional < Integer > port , MocoConfig . . . configs ) ; <nl> + T parseServer ( final InputStream is , final Optional < Integer > port , final MocoConfig . . . configs ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java <nl> index 8ea895d . . 5af002d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class SocketServerParser extends BaseParser < SocketServer > { <nl> protected static Logger logger = LoggerFactory . getLogger ( SocketServerParser . class ) ; <nl> <nl> @ Override <nl> - protected SocketServer createServer ( ImmutableList < SessionSetting > sessionSettings , Optional < Integer > port , MocoConfig . . . configs ) { <nl> + protected SocketServer createServer ( final ImmutableList < SessionSetting > sessionSettings , final Optional < Integer > port , final MocoConfig . . . configs ) { <nl> SocketServer server = ActualSocketServer . createLogServer ( port ) ; <nl> for ( SessionSetting session : sessionSettings ) { <nl> logger . debug ( " Parse session : { } " , session ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> index eda7554 . . c2c0fc7 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > <nl> . put ( " form " , " forms " ) <nl> . build ( ) ; <nl> <nl> - protected TextContainer textContainer ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + protected TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> TextContainer . Builder builder = builder ( ) ; <nl> @ @ - 48 , 14 + 48 , 14 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > <nl> throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; <nl> } <nl> <nl> - private TextContainer template ( JsonParser jp , TextContainer . Builder builder ) throws IOException { <nl> + private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> Template template = Iterators . get ( iterator , 0 ) ; <nl> jp . nextToken ( ) ; <nl> return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; <nl> } <nl> <nl> - private ImmutableMap < String , TextContainer > toTemplateVars ( Template template ) { <nl> + private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { <nl> return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; <nl> } <nl> <nl> @ @ - 72 , 12 + 72 , 12 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > <nl> } ; <nl> } <nl> <nl> - private TextContainer toLocal ( TextContainer container ) { <nl> + private TextContainer toLocal ( final TextContainer container ) { <nl> String name = names . get ( container . getOperation ( ) ) ; <nl> return name = = null ? container : builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> } <nl> <nl> - protected TextContainer text ( JsonParser jp ) throws IOException { <nl> + protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index c1c4153 . . 0c6126f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import static com . google . common . collect . Iterators . get ; <nl> <nl> public class FileContainerDeserializer extends AbstractTextContainerDeserializer < FileContainer > { <nl> @ Override <nl> - public FileContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + public FileContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> return asFileContainer ( text ( jp ) ) ; <nl> @ @ - 35 , 7 + 35 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer <nl> throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> } <nl> <nl> - private FileContainer toFileContainer ( JsonParser jp ) throws IOException { <nl> + private FileContainer toFileContainer ( final JsonParser jp ) throws IOException { <nl> Iterator < FileVar > iterator = jp . readValuesAs ( FileVar . class ) ; <nl> FileVar file = get ( iterator , 0 ) ; <nl> TextContainer filename = file . name ; <nl> @ @ - 46 , 11 + 46 , 11 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer <nl> return aFileContainer ( ) . withName ( filename ) . withCharset ( file . charset ) . build ( ) ; <nl> } <nl> <nl> - private boolean isAllowedFilename ( TextContainer filename ) { <nl> + private boolean isAllowedFilename ( final TextContainer filename ) { <nl> return filename . isRawText ( ) | | filename . isForTemplate ( ) ; <nl> } <nl> <nl> - private boolean isForFileContainer ( String target ) { <nl> + private boolean isForFileContainer ( final String target ) { <nl> return " name " . equalsIgnoreCase ( target ) | | " charset " . equalsIgnoreCase ( target ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> index 189100e . . d66147d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . Iterators . get ; <nl> <nl> public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContainer > { <nl> @ Override <nl> - public LatencyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + public LatencyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ NUMBER _ INT ) { <nl> return LatencyContainer . latency ( jp . getLongValue ( ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> index 7daeffd . . 90ee3fa 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . Iterators . get ; <nl> <nl> public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> @ Override <nl> - public ProxyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + public ProxyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> return builder ( ) . withUrl ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index 3176223 . . bafd6da 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import java . io . IOException ; <nl> <nl> public class TextContainerDeserializer extends AbstractTextContainerDeserializer < TextContainer > { <nl> @ Override <nl> - public TextContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + public TextContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> return text ( jp ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java 
 index 3382d9a . . 561f636 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpProtocolVersionDeserializer . java 
 @ @ - 7 , 11 + 7 , 13 @ @ import com . github . dreamhead . moco . HttpProtocolVersion ; 
 
 import java . io . IOException ; 
 
 + import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 + 
 public class HttpProtocolVersionDeserializer extends JsonDeserializer < HttpProtocolVersion > { 
 @ Override 
 public HttpProtocolVersion deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { 
 try { 
 - return HttpProtocolVersion . versionOf ( jp . getText ( ) . trim ( ) ) ; 
 + return HttpProtocolVersion . versionOf ( strip ( jp . getText ( ) ) ) ; 
 } catch ( IllegalArgumentException e ) { 
 return ( HttpProtocolVersion ) ctx . handleUnexpectedToken ( HttpProtocolVersion . class , jp ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java 
 index dfd7e54 . . 07b0401 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java 
 @ @ - 8 , 10 + 8 , 11 @ @ import com . github . dreamhead . moco . model . MessageContent ; 
 import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . model . MessageContent . content ; 
 + import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 
 public class MessageContentDeserializer extends JsonDeserializer < MessageContent > { 
 @ Override 
 public MessageContent deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { 
 - return content ( jp . getText ( ) . trim ( ) ) ; 
 + return content ( strip ( jp . getText ( ) ) ) ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java 
 new file mode 100644 
 index 0000000 . . 0933840 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / StringUtil . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import static com . google . common . base . Strings . isNullOrEmpty ; 
 + 
 + public final class StringUtil { 
 + public static String strip ( final String text ) { 
 + if ( isNullOrEmpty ( text ) ) { 
 + return " " ; 
 + } 
 + 
 + return text . trim ( ) ; 
 + } 
 + 
 + private StringUtil ( ) { 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java 
 index 6c80c52 . . 75ac7af 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / parser / HttpsArgsParser . java 
 @ @ - 34 , 7 + 34 , 14 @ @ public class HttpsArgsParser extends StartArgsParser { 
 throw new ParseArgException ( " only one arg not allowed " ) ; 
 } 
 
 - return httpsArgs ( ) . withPort ( getPort ( port ) ) . withShutdownPort ( getPort ( shutdownPort ) ) . withConfigurationFile ( config ) . withSettings ( globalSettings ) . withEnv ( env ) . withHttpsArg ( httpsArg ( cmd ) ) . build ( ) ; 
 + return httpsArgs ( ) 
 + . withPort ( getPort ( port ) ) 
 + . withShutdownPort ( getPort ( shutdownPort ) ) 
 + . withConfigurationFile ( config ) 
 + . withSettings ( globalSettings ) 
 + . withEnv ( env ) 
 + . withHttpsArg ( httpsArg ( cmd ) ) 
 + . build ( ) ; 
 } 
 
 private HttpsArg httpsArg ( final CommandLine cmd ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java 
 index d7cb4f9 . . e59e412 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java 
 @ @ - 10 , 12 + 10 , 14 @ @ import com . github . dreamhead . moco . parser . model . LatencyContainer ; 
 
 import java . io . IOException ; 
 
 + import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 + 
 public class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { 
 @ Override 
 public CookieContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 - return CookieContainer . newContainer ( jp . getText ( ) . trim ( ) ) ; 
 + return CookieContainer . newContainer ( strip ( jp . getText ( ) ) ) ; 
 } 
 
 if ( currentToken = = JsonToken . START _ OBJECT ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 index 8a853d1 . . b4c7172 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContainer ; 
 import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; 
 + import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 
 public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { 
 private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; 
 @ @ - 26 , 7 + 27 , 7 @ @ public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { 
 if ( currentToken = = JsonToken . START _ OBJECT ) { 
 jp . nextToken ( ) ; 
 
 - String target = jp . getText ( ) . trim ( ) ; 
 + String target = strip ( jp . getText ( ) ) ; 
 if ( isForFileContainer ( target ) ) { 
 return toFileContainer ( jp ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 index b7c9472 . . 14ddfcb 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 @ @ - 10 , 13 + 10 , 14 @ @ import com . github . dreamhead . moco . parser . model . ProxyContainer ; 
 import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . parser . model . ProxyContainer . builder ; 
 + import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 
 public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { 
 @ Override 
 public ProxyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 - return builder ( ) . withUrl ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 + return builder ( ) . withUrl ( strip ( jp . getText ( ) ) ) . build ( ) ; 
 } 
 
 if ( currentToken = = JsonToken . START _ OBJECT ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 index 9ddd13a . . b5416ce 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import java . util . Map ; 
 import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; 
 import static com . github . dreamhead . moco . parser . model . TextContainer . getTemplateName ; 
 import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; 
 + import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 import static com . google . common . collect . Maps . transformEntries ; 
 
 @ @ - 29 , 7 + 30 , 7 @ @ public class TextContainerDeserializerHelper { 
 public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . FIELD _ NAME ) { 
 - String operation = jp . getText ( ) . trim ( ) ; 
 + String operation = strip ( jp . getText ( ) ) ; 
 
 JsonToken token = jp . nextToken ( ) ; 
 if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 @ @ - 39 , 7 + 40 , 7 @ @ public class TextContainerDeserializerHelper { 
 } 
 
 if ( token = = JsonToken . VALUE _ STRING ) { 
 - String text = jp . getText ( ) . trim ( ) ; 
 + String text = strip ( jp . getText ( ) ) ; 
 jp . nextToken ( ) ; 
 return builder ( ) . withOperation ( operation ) . withText ( text ) . build ( ) ; 
 } 
 @ @ - 49 , 7 + 50 , 7 @ @ public class TextContainerDeserializerHelper { 
 } 
 
 protected TextContainer text ( final JsonParser jp ) throws IOException { 
 - return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 + return builder ( ) . withText ( strip ( jp . getText ( ) ) ) . build ( ) ; 
 } 
 
 @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 20a6499 . . c50c4b2 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 196 , 7 + 196 , 8 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 final CookieContainer cookieContainer ) { 
 try { 
 Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieAttribute [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; 
 + return ( ResponseHandler ) method . invoke ( null , key , 
 + getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; 
 } catch ( Exception e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 index f361e45 . . 39eba72 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class GlobalSettingParserTest { 
 assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; 
 } 
 
 - private InputStream getResourceAsStream ( String filename ) { 
 + private InputStream getResourceAsStream ( final String filename ) { 
 return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java 
 index 62c8805 . . 8263267 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java 
 @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import java . io . InputStream ; 
 
 public abstract class BaseParser < T extends Server > implements Parser < T > { 
 - protected abstract T createServer ( ImmutableList < SessionSetting > read , Optional < Integer > port , MocoConfig [ ] configs ) ; 
 + protected abstract T createServer ( final ImmutableList < SessionSetting > read , final Optional < Integer > port , final MocoConfig [ ] configs ) ; 
 
 protected final CollectionReader reader ; 
 
 @ @ - 17 , 7 + 17 , 7 @ @ public abstract class BaseParser < T extends Server > implements Parser < T > { 
 this . reader = new CollectionReader ( ) ; 
 } 
 
 - public T parseServer ( InputStream is , Optional < Integer > port , MocoConfig . . . configs ) { 
 + public T parseServer ( final InputStream is , final Optional < Integer > port , final MocoConfig . . . configs ) { 
 return createServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 index 4ad7d93 . . 06e0fac 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 @ @ - 27 , 13 + 27 , 13 @ @ public class CollectionReader { 
 private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; 
 
 - public CollectionReader ( Module . . . modules ) { 
 + public CollectionReader ( final Module . . . modules ) { 
 for ( Module module : modules ) { 
 mapper . registerModule ( module ) ; 
 } 
 } 
 
 - public < T > ImmutableList < T > read ( InputStream is , Class < T > elementClass ) { 
 + public < T > ImmutableList < T > read ( final InputStream is , final Class < T > elementClass ) { 
 Closer closer = Closer . create ( ) ; 
 InputStream in = closer . register ( is ) ; 
 try { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 index 5dd6eac . . 3bcc893 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 @ @ - 6 , 9 + 6 , 9 @ @ import com . google . common . collect . ImmutableList ; 
 import java . io . InputStream ; 
 
 public class GlobalSettingParser { 
 - private CollectionReader reader = new CollectionReader ( ) ; 
 + private final CollectionReader reader = new CollectionReader ( ) ; 
 
 - public ImmutableList < GlobalSetting > parse ( InputStream is ) { 
 + public ImmutableList < GlobalSetting > parse ( final InputStream is ) { 
 return reader . read ( is , GlobalSetting . class ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 index 54184d1 . . 273cbc9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 @ @ - 13 , 7 + 13 , 7 @ @ public class HttpServerParser extends BaseParser < HttpServer > { 
 private static Logger logger = LoggerFactory . getLogger ( HttpServerParser . class ) ; 
 
 @ Override 
 - protected HttpServer createServer ( ImmutableList < SessionSetting > sessionSettings , Optional < Integer > port , MocoConfig . . . configs ) { 
 + protected HttpServer createServer ( final ImmutableList < SessionSetting > sessionSettings , final Optional < Integer > port , final MocoConfig . . . configs ) { 
 HttpServer server = ActualHttpServer . createLogServer ( port , configs ) ; 
 for ( SessionSetting session : sessionSettings ) { 
 logger . debug ( " Parse session : { } " , session ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java 
 index da9fc9c . . c30e35e 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / Parser . java 
 @ @ - 7 , 5 + 7 , 5 @ @ import com . google . common . base . Optional ; 
 import java . io . InputStream ; 
 
 public interface Parser < T extends Server > { 
 - T parseServer ( InputStream is , Optional < Integer > port , MocoConfig . . . configs ) ; 
 + T parseServer ( final InputStream is , final Optional < Integer > port , final MocoConfig . . . configs ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java 
 index 8ea895d . . 5af002d 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / SocketServerParser . java 
 @ @ - 13 , 7 + 13 , 7 @ @ public class SocketServerParser extends BaseParser < SocketServer > { 
 protected static Logger logger = LoggerFactory . getLogger ( SocketServerParser . class ) ; 
 
 @ Override 
 - protected SocketServer createServer ( ImmutableList < SessionSetting > sessionSettings , Optional < Integer > port , MocoConfig . . . configs ) { 
 + protected SocketServer createServer ( final ImmutableList < SessionSetting > sessionSettings , final Optional < Integer > port , final MocoConfig . . . configs ) { 
 SocketServer server = ActualSocketServer . createLogServer ( port ) ; 
 for ( SessionSetting session : sessionSettings ) { 
 logger . debug ( " Parse session : { } " , session ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 index eda7554 . . c2c0fc7 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 @ @ - 27 , 7 + 27 , 7 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > 
 . put ( " form " , " forms " ) 
 . build ( ) ; 
 
 - protected TextContainer textContainer ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + protected TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . FIELD _ NAME ) { 
 TextContainer . Builder builder = builder ( ) ; 
 @ @ - 48 , 14 + 48 , 14 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > 
 throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; 
 } 
 
 - private TextContainer template ( JsonParser jp , TextContainer . Builder builder ) throws IOException { 
 + private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { 
 Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; 
 Template template = Iterators . get ( iterator , 0 ) ; 
 jp . nextToken ( ) ; 
 return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; 
 } 
 
 - private ImmutableMap < String , TextContainer > toTemplateVars ( Template template ) { 
 + private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { 
 return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; 
 } 
 
 @ @ - 72 , 12 + 72 , 12 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > 
 } ; 
 } 
 
 - private TextContainer toLocal ( TextContainer container ) { 
 + private TextContainer toLocal ( final TextContainer container ) { 
 String name = names . get ( container . getOperation ( ) ) ; 
 return name = = null ? container : builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; 
 } 
 
 - protected TextContainer text ( JsonParser jp ) throws IOException { 
 + protected TextContainer text ( final JsonParser jp ) throws IOException { 
 return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 index c1c4153 . . 0c6126f 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 @ @ - 15 , 7 + 15 , 7 @ @ import static com . google . common . collect . Iterators . get ; 
 
 public class FileContainerDeserializer extends AbstractTextContainerDeserializer < FileContainer > { 
 @ Override 
 - public FileContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + public FileContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 return asFileContainer ( text ( jp ) ) ; 
 @ @ - 35 , 7 + 35 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer 
 throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 } 
 
 - private FileContainer toFileContainer ( JsonParser jp ) throws IOException { 
 + private FileContainer toFileContainer ( final JsonParser jp ) throws IOException { 
 Iterator < FileVar > iterator = jp . readValuesAs ( FileVar . class ) ; 
 FileVar file = get ( iterator , 0 ) ; 
 TextContainer filename = file . name ; 
 @ @ - 46 , 11 + 46 , 11 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer 
 return aFileContainer ( ) . withName ( filename ) . withCharset ( file . charset ) . build ( ) ; 
 } 
 
 - private boolean isAllowedFilename ( TextContainer filename ) { 
 + private boolean isAllowedFilename ( final TextContainer filename ) { 
 return filename . isRawText ( ) | | filename . isForTemplate ( ) ; 
 } 
 
 - private boolean isForFileContainer ( String target ) { 
 + private boolean isForFileContainer ( final String target ) { 
 return " name " . equalsIgnoreCase ( target ) | | " charset " . equalsIgnoreCase ( target ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 index 189100e . . d66147d 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . Iterators . get ; 
 
 public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContainer > { 
 @ Override 
 - public LatencyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + public LatencyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ NUMBER _ INT ) { 
 return LatencyContainer . latency ( jp . getLongValue ( ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 index 7daeffd . . 90ee3fa 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . Iterators . get ; 
 
 public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { 
 @ Override 
 - public ProxyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + public ProxyContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 return builder ( ) . withUrl ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index 3176223 . . bafd6da 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 9 , 7 + 9 , 7 @ @ import java . io . IOException ; 
 
 public class TextContainerDeserializer extends AbstractTextContainerDeserializer < TextContainer > { 
 @ Override 
 - public TextContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + public TextContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 return text ( jp ) ;
