BLEU SCORE: 0.16784459625186196

TEST MSG: introduced constructor with proxy statuses in abstract proxy response handler
GENERATED MSG: added guard for doRemoteUrl in proxy response handler

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index a13ce01 . . 2851928 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . primitives . Ints ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . buffer . Unpooled ; <nl> @ @ - 105 , 6 + 106 , 11 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> this . proxyStatuses = ImmutableSet . of ( HttpResponseStatus . BAD _ REQUEST . code ( ) ) ; <nl> } <nl> <nl> + protected AbstractProxyResponseHandler ( final Failover failover , final int . . . proxyStatuses ) { <nl> + this . failover = failover ; <nl> + this . proxyStatuses = ImmutableSet . copyOf ( Ints . asList ( proxyStatuses ) ) ; <nl> + } <nl> + <nl> private HttpRequestBase prepareRemoteRequest ( final FullHttpRequest request , final URL url ) { <nl> HttpRequestBase remoteRequest = createRemoteRequest ( request , url ) ; <nl> remoteRequest . setConfig ( createRequestConfig ( ) ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index d92855e . . 3179aa9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> - import com . google . common . base . Supplier ; <nl> <nl> import java . net . URL ; <nl> <nl> @ @ - 23 , 7 + 22 , 12 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement <nl> @ Override <nl> protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> try { <nl> - return of ( url . apply ( request ) . toString ( ) ) ; <nl> + URL targetUrl = url . apply ( request ) ; <nl> + if ( targetUrl ! = null ) { <nl> + return of ( targetUrl . toString ( ) ) ; <nl> + } <nl> + <nl> + return absent ( ) ; <nl> } catch ( IllegalArgumentException e ) { <nl> return absent ( ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index a13ce01 . . 2851928 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . primitives . Ints ; 
 import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . ByteBufInputStream ; 
 import io . netty . buffer . Unpooled ; 
 @ @ - 105 , 6 + 106 , 11 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 this . proxyStatuses = ImmutableSet . of ( HttpResponseStatus . BAD _ REQUEST . code ( ) ) ; 
 } 
 
 + protected AbstractProxyResponseHandler ( final Failover failover , final int . . . proxyStatuses ) { 
 + this . failover = failover ; 
 + this . proxyStatuses = ImmutableSet . copyOf ( Ints . asList ( proxyStatuses ) ) ; 
 + } 
 + 
 private HttpRequestBase prepareRemoteRequest ( final FullHttpRequest request , final URL url ) { 
 HttpRequestBase remoteRequest = createRemoteRequest ( request , url ) ; 
 remoteRequest . setConfig ( createRequestConfig ( ) ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 index d92855e . . 3179aa9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 - import com . google . common . base . Supplier ; 
 
 import java . net . URL ; 
 
 @ @ - 23 , 7 + 22 , 12 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement 
 @ Override 
 protected Optional < String > doRemoteUrl ( final HttpRequest request ) { 
 try { 
 - return of ( url . apply ( request ) . toString ( ) ) ; 
 + URL targetUrl = url . apply ( request ) ; 
 + if ( targetUrl ! = null ) { 
 + return of ( targetUrl . toString ( ) ) ; 
 + } 
 + 
 + return absent ( ) ; 
 } catch ( IllegalArgumentException e ) { 
 return absent ( ) ; 
 }
