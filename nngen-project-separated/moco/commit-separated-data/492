BLEU SCORE: 0.1199014838091355

TEST MSG: updated 0 . 11 . 0 as lastest release
GENERATED MSG: updated document for 0 . 10 . 1 release

TEST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 415fc0a . . f8e5363 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> Moco is an easy setup stub framework . <nl> <nl> # # Latest Release <nl> - * _ _ 0 . 10 . 2 _ _ <nl> + * _ _ 0 . 11 . 0 _ _ <nl> <nl> More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) <nl> <nl> @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w <nl> In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . <nl> <nl> # # Quick Start <nl> - * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) <nl> + * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> * Write your own configuration file to describe your Moco server configuration as follow : <nl> ` ` ` json <nl> [ <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index abd84e1 . . 9ecb09a 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Standalone Command Line <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index b5e4472 . . 0e7ef80 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 30 , 7 + 30 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in <nl> < dependency > <nl> < groupId > com . github . dreamhead < / groupId > <nl> < artifactId > moco - core < / artifactId > <nl> - < version > 0 . 10 . 2 < / version > <nl> + < version > 0 . 11 . 0 < / version > <nl> < / dependency > <nl> ` ` ` <nl> <nl> @ @ - 43 , 7 + 43 , 7 @ @ repositories { <nl> <nl> dependencies { <nl> testCompile ( <nl> - " com . github . dreamhead : moco - core : 0 . 10 . 2 " , <nl> + " com . github . dreamhead : moco - core : 0 . 11 . 0 " , <nl> ) <nl> } <nl> ` ` ` <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class MocoRunnerTest { <nl> # # Standalone <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl>
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 04bcba6 . . b48228d 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w <nl> In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . <nl> <nl> # # Quick Start <nl> - * Download [ Standalone Moco Runner ] ( http : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 0 / moco - runner - 0 . 10 . 0 - standalone . jar ) <nl> + * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 1 / moco - runner - 0 . 10 . 1 - standalone . jar ) <nl> * Write your own configuration file to describe your Moco server configuration as follow : <nl> ` ` ` json <nl> [ <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index c4bded5 . . 31f046f 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Standalone Command Line <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( http : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 0 / moco - runner - 0 . 10 . 0 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 1 / moco - runner - 0 . 10 . 1 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index fc50c6d . . d1f81d2 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 13 , 7 + 13 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in <nl> < dependency > <nl> < groupId > com . github . dreamhead < / groupId > <nl> < artifactId > moco - core < / artifactId > <nl> - < version > 0 . 10 . 0 < / version > <nl> + < version > 0 . 10 . 1 < / version > <nl> < / dependency > <nl> ` ` ` <nl> <nl> @ @ - 26 , 7 + 26 , 7 @ @ repositories { <nl> <nl> dependencies { <nl> testCompile ( <nl> - " com . github . dreamhead : moco - core : 0 . 10 . 0 " , <nl> + " com . github . dreamhead : moco - core : 0 . 10 . 1 " , <nl> ) <nl> } <nl> ` ` ` <nl> @ @ - 111 , 7 + 111 , 7 @ @ public class MocoRunnerTest { <nl> # # Standalone <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( http : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 0 / moco - runner - 0 . 10 . 0 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 1 / moco - runner - 0 . 10 . 1 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl>

TEST DIFF:
diff - - git a / README . md b / README . md 
 index 415fc0a . . f8e5363 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 9 , 7 + 9 , 7 @ @ 
 Moco is an easy setup stub framework . 
 
 # # Latest Release 
 - * _ _ 0 . 10 . 2 _ _ 
 + * _ _ 0 . 11 . 0 _ _ 
 
 More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) 
 
 @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w 
 In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . 
 
 # # Quick Start 
 - * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) 
 + * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) 
 * Write your own configuration file to describe your Moco server configuration as follow : 
 ` ` ` json 
 [ 
 diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md 
 index abd84e1 . . 9ecb09a 100644 
 - - - a / moco - doc / cmd . md 
 + + + b / moco - doc / cmd . md 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 # Standalone Command Line 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 
 
 diff - - git a / moco - doc / usage . md b / moco - doc / usage . md 
 index b5e4472 . . 0e7ef80 100644 
 - - - a / moco - doc / usage . md 
 + + + b / moco - doc / usage . md 
 @ @ - 30 , 7 + 30 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in 
 < dependency > 
 < groupId > com . github . dreamhead < / groupId > 
 < artifactId > moco - core < / artifactId > 
 - < version > 0 . 10 . 2 < / version > 
 + < version > 0 . 11 . 0 < / version > 
 < / dependency > 
 ` ` ` 
 
 @ @ - 43 , 7 + 43 , 7 @ @ repositories { 
 
 dependencies { 
 testCompile ( 
 - " com . github . dreamhead : moco - core : 0 . 10 . 2 " , 
 + " com . github . dreamhead : moco - core : 0 . 11 . 0 " , 
 ) 
 } 
 ` ` ` 
 @ @ - 127 , 7 + 127 , 7 @ @ public class MocoRunnerTest { 
 # # Standalone 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 2 / moco - runner - 0 . 10 . 2 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 


NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index 04bcba6 . . b48228d 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w 
 In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . 
 
 # # Quick Start 
 - * Download [ Standalone Moco Runner ] ( http : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 0 / moco - runner - 0 . 10 . 0 - standalone . jar ) 
 + * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 1 / moco - runner - 0 . 10 . 1 - standalone . jar ) 
 * Write your own configuration file to describe your Moco server configuration as follow : 
 ` ` ` json 
 [ 
 diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md 
 index c4bded5 . . 31f046f 100644 
 - - - a / moco - doc / cmd . md 
 + + + b / moco - doc / cmd . md 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 # Standalone Command Line 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( http : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 0 / moco - runner - 0 . 10 . 0 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 1 / moco - runner - 0 . 10 . 1 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 
 
 diff - - git a / moco - doc / usage . md b / moco - doc / usage . md 
 index fc50c6d . . d1f81d2 100644 
 - - - a / moco - doc / usage . md 
 + + + b / moco - doc / usage . md 
 @ @ - 13 , 7 + 13 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in 
 < dependency > 
 < groupId > com . github . dreamhead < / groupId > 
 < artifactId > moco - core < / artifactId > 
 - < version > 0 . 10 . 0 < / version > 
 + < version > 0 . 10 . 1 < / version > 
 < / dependency > 
 ` ` ` 
 
 @ @ - 26 , 7 + 26 , 7 @ @ repositories { 
 
 dependencies { 
 testCompile ( 
 - " com . github . dreamhead : moco - core : 0 . 10 . 0 " , 
 + " com . github . dreamhead : moco - core : 0 . 10 . 1 " , 
 ) 
 } 
 ` ` ` 
 @ @ - 111 , 7 + 111 , 7 @ @ public class MocoRunnerTest { 
 # # Standalone 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( http : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 0 / moco - runner - 0 . 10 . 0 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 10 . 1 / moco - runner - 0 . 10 . 1 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 

