BLEU SCORE: 0.12347293198886944

TEST MSG: fixed test for template random function with format
GENERATED MSG: added standalone test for random template function with range and format

TEST DIFF (one line): diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> index fd48733 . . d0a4d2a 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import org . apache . http . message . BasicNameValuePair ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> + import java . text . DecimalFormat ; <nl> import java . text . SimpleDateFormat ; <nl> import java . util . Date ; <nl> <nl> @ @ - 17 , 6 + 18 , 7 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . hamcrest . Matchers . greaterThan ; <nl> import static org . hamcrest . Matchers . lessThan ; <nl> + import static org . hamcrest . Matchers . lessThanOrEqualTo ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ @ - 122 , 7 + 124 , 7 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( result , lessThan ( 100d ) ) ; <nl> assertThat ( result , greaterThan ( 0d ) ) ; <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> - assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 139 , 7 + 141 , 7 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> runWithConfiguration ( " template _ with _ function . json " ) ; <nl> String response = helper . get ( remoteUrl ( " / random _ template _ with _ format " ) ) ; <nl> String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> - assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index e1b1f4a . . 503d8c6 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2233 , 7 + 2233 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 , ' # # # . # # # ' ) <nl> } , <nl> " response " : { <nl> " text " : { <nl> - " template " : " $ { random ( 100 , ' # # # . # # # ' ) } " <nl> + " template " : " $ { random ( 100 , \ " # # # . # # # \ " ) } " <nl> } <nl> } <nl> } <nl> @ @ - 2256 , 7 + 2256 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ' # # # . # # # ' ) } " ) ) ; <nl> } , <nl> " response " : { <nl> " text " : { <nl> - " template " : " $ { random ( ' # # # . # # # ' ) } " <nl> + " template " : " $ { random ( \ " # # # . # # # \ " ) } " <nl> } <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> index e3f09c0 . . 773eb0e 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . base . Splitter ; <nl> import org . apache . http . Header ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> @ @ - 14 , 6 + 15 , 8 @ @ import java . util . Date ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . hamcrest . Matchers . greaterThan ; <nl> + import static org . hamcrest . Matchers . lessThan ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ @ - 110 , 4 + 113 , 15 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { <nl> SimpleDateFormat format = new SimpleDateFormat ( " yyyy - MM - dd " ) ; <nl> assertThat ( helper . get ( remoteUrl ( " / now _ template " ) ) , is ( format . format ( date ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ random _ with _ range _ and _ format _ from _ template ( ) throws IOException { <nl> + runWithConfiguration ( " template _ with _ function . json " ) ; <nl> + String response = helper . get ( remoteUrl ( " / random _ template _ with _ range _ and _ format " ) ) ; <nl> + double result = Double . parseDouble ( response ) ; <nl> + assertThat ( result , lessThan ( 100d ) ) ; <nl> + assertThat ( result , greaterThan ( 0d ) ) ; <nl> + String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; <nl> + assertThat ( target . length ( ) , is ( 6 ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / template _ with _ function . json b / moco - runner / src / test / resources / template _ with _ function . json <nl> index 74c8c90 . . c4442de 100644 <nl> - - - a / moco - runner / src / test / resources / template _ with _ function . json <nl> + + + b / moco - runner / src / test / resources / template _ with _ function . json <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> [ <nl> - { <nl> + { <nl> " request " : { <nl> " uri " : " / now _ template " <nl> } , <nl> @ @ - 8 , 5 + 8 , 15 @ @ <nl> " template " : " $ { now ( \ " yyyy - MM - dd \ " ) } " <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / random _ template _ with _ range _ and _ format " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( 100 , \ " # # # . # # # # # # \ " ) } " <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java 
 index fd48733 . . d0a4d2a 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import org . apache . http . message . BasicNameValuePair ; 
 import org . junit . Test ; 
 
 import java . io . IOException ; 
 + import java . text . DecimalFormat ; 
 import java . text . SimpleDateFormat ; 
 import java . util . Date ; 
 
 @ @ - 17 , 6 + 18 , 7 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . hamcrest . Matchers . greaterThan ; 
 import static org . hamcrest . Matchers . lessThan ; 
 + import static org . hamcrest . Matchers . lessThanOrEqualTo ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { 
 @ @ - 122 , 7 + 124 , 7 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( result , lessThan ( 100d ) ) ; 
 assertThat ( result , greaterThan ( 0d ) ) ; 
 String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; 
 - assertThat ( target . length ( ) , is ( 6 ) ) ; 
 + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; 
 } 
 
 @ Test 
 @ @ - 139 , 7 + 141 , 7 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { 
 runWithConfiguration ( " template _ with _ function . json " ) ; 
 String response = helper . get ( remoteUrl ( " / random _ template _ with _ format " ) ) ; 
 String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; 
 - assertThat ( target . length ( ) , is ( 6 ) ) ; 
 + assertThat ( target . length ( ) , lessThanOrEqualTo ( 6 ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index e1b1f4a . . 503d8c6 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 2233 , 7 + 2233 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 , ' # # # . # # # ' ) 
 } , 
 " response " : { 
 " text " : { 
 - " template " : " $ { random ( 100 , ' # # # . # # # ' ) } " 
 + " template " : " $ { random ( 100 , \ " # # # . # # # \ " ) } " 
 } 
 } 
 } 
 @ @ - 2256 , 7 + 2256 , 7 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ' # # # . # # # ' ) } " ) ) ; 
 } , 
 " response " : { 
 " text " : { 
 - " template " : " $ { random ( ' # # # . # # # ' ) } " 
 + " template " : " $ { random ( \ " # # # . # # # \ " ) } " 
 } 
 } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java 
 index e3f09c0 . . 773eb0e 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoTemplateStandaloneTest . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . google . common . base . Splitter ; 
 import org . apache . http . Header ; 
 import org . apache . http . HttpVersion ; 
 import org . apache . http . ProtocolVersion ; 
 @ @ - 14 , 6 + 15 , 8 @ @ import java . util . Date ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 + import static org . hamcrest . Matchers . greaterThan ; 
 + import static org . hamcrest . Matchers . lessThan ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { 
 @ @ - 110 , 4 + 113 , 15 @ @ public class MocoTemplateStandaloneTest extends AbstractMocoStandaloneTest { 
 SimpleDateFormat format = new SimpleDateFormat ( " yyyy - MM - dd " ) ; 
 assertThat ( helper . get ( remoteUrl ( " / now _ template " ) ) , is ( format . format ( date ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ return _ random _ with _ range _ and _ format _ from _ template ( ) throws IOException { 
 + runWithConfiguration ( " template _ with _ function . json " ) ; 
 + String response = helper . get ( remoteUrl ( " / random _ template _ with _ range _ and _ format " ) ) ; 
 + double result = Double . parseDouble ( response ) ; 
 + assertThat ( result , lessThan ( 100d ) ) ; 
 + assertThat ( result , greaterThan ( 0d ) ) ; 
 + String target = Splitter . on ( ' . ' ) . splitToList ( response ) . get ( 1 ) ; 
 + assertThat ( target . length ( ) , is ( 6 ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / template _ with _ function . json b / moco - runner / src / test / resources / template _ with _ function . json 
 index 74c8c90 . . c4442de 100644 
 - - - a / moco - runner / src / test / resources / template _ with _ function . json 
 + + + b / moco - runner / src / test / resources / template _ with _ function . json 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 [ 
 - { 
 + { 
 " request " : { 
 " uri " : " / now _ template " 
 } , 
 @ @ - 8 , 5 + 8 , 15 @ @ 
 " template " : " $ { now ( \ " yyyy - MM - dd \ " ) } " 
 } 
 } 
 + } , 
 + { 
 + " request " : { 
 + " uri " : " / random _ template _ with _ range _ and _ format " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { random ( 100 , \ " # # # . # # # # # # \ " ) } " 
 + } 
 + } 
 } 
 ] 
 \ No newline at end of file
