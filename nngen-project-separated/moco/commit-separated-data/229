BLEU SCORE: 0.04027248192421852

TEST MSG: enhanced composite publish interface , e . g . and , or
GENERATED MSG: added missing argument check to and / or and request

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 9624b83 . . 25b3099 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 60 , 6 + 60 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . templateResourc <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> + import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> import static com . google . common . base . Optional . of ; <nl> @ @ - 235 , 16 + 236 , 22 @ @ public final class Moco { <nl> text ( checkNotNullOrEmpty ( expected , " Expected resource should not be null " ) ) ) ; <nl> } <nl> <nl> - public static RequestMatcher and ( final RequestMatcher . . . matchers ) { <nl> - return new AndRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> + public static RequestMatcher and ( final RequestMatcher matcher , final RequestMatcher . . . matchers ) { <nl> + return new AndRequestMatcher ( asIterable ( <nl> + checkNotNull ( matcher , " Matcher should not be null " ) , <nl> + checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> <nl> - public static ResponseHandler and ( final ResponseHandler . . . handlers ) { <nl> - return AndResponseHandler . and ( copyOf ( checkNotNull ( handlers , " Handlers should not be null " ) ) ) ; <nl> + public static ResponseHandler and ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> + return AndResponseHandler . and ( <nl> + checkNotNull ( handler , " Handlers should not be null " ) , <nl> + checkNotNull ( handlers , " Handlers should not be null " ) ) ; <nl> } <nl> <nl> - public static RequestMatcher or ( final RequestMatcher . . . matchers ) { <nl> - return new OrRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> + public static RequestMatcher or ( final RequestMatcher matcher , final RequestMatcher . . . matchers ) { <nl> + return new OrRequestMatcher ( asIterable ( <nl> + checkNotNull ( matcher , " Matcher should not be null " ) , <nl> + checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher not ( final RequestMatcher matcher ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> index 057f52c . . 386dc57 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> @ @ - 5 , 6 + 5 , 8 @ @ import com . github . dreamhead . moco . ResponseSetting ; <nl> import com . github . dreamhead . moco . Server ; <nl> <nl> import static com . github . dreamhead . moco . Moco . or ; <nl> + import static com . github . dreamhead . moco . util . Iterables . head ; <nl> + import static com . github . dreamhead . moco . util . Iterables . tail ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public abstract class BaseServer < T extends ResponseSetting < T > > <nl> @ @ - 16 , 6 + 18 , 7 @ @ public abstract class BaseServer < T extends ResponseSetting < T > > <nl> } <nl> <nl> public T request ( final RequestMatcher . . . matchers ) { <nl> - return request ( or ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> + checkNotNull ( matchers , " Matcher should not be null " ) ; <nl> + return request ( or ( head ( matchers ) , tail ( matchers ) ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 06a2f45 . . dc762df 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 283 , 11 + 283 , 11 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher and ( final RequestMatcher . . . matchers ) { <nl> - return new AndRequestMatcher ( copyOf ( matchers ) ) ; <nl> + return new AndRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher or ( final RequestMatcher . . . matchers ) { <nl> - return new OrRequestMatcher ( copyOf ( matchers ) ) ; <nl> + return new OrRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher not ( final RequestMatcher matcher ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> index 799161b . . 057f52c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java <nl> @ @ - 16 , 6 + 16 , 6 @ @ public abstract class BaseServer < T extends ResponseSetting < T > > <nl> } <nl> <nl> public T request ( final RequestMatcher . . . matchers ) { <nl> - return request ( or ( matchers ) ) ; <nl> + return request ( or ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 9624b83 . . 25b3099 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 60 , 6 + 60 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . templateResourc 
 import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; 
 + import static com . github . dreamhead . moco . util . Iterables . asIterable ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; 
 import static com . google . common . base . Optional . of ; 
 @ @ - 235 , 16 + 236 , 22 @ @ public final class Moco { 
 text ( checkNotNullOrEmpty ( expected , " Expected resource should not be null " ) ) ) ; 
 } 
 
 - public static RequestMatcher and ( final RequestMatcher . . . matchers ) { 
 - return new AndRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 + public static RequestMatcher and ( final RequestMatcher matcher , final RequestMatcher . . . matchers ) { 
 + return new AndRequestMatcher ( asIterable ( 
 + checkNotNull ( matcher , " Matcher should not be null " ) , 
 + checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 } 
 
 - public static ResponseHandler and ( final ResponseHandler . . . handlers ) { 
 - return AndResponseHandler . and ( copyOf ( checkNotNull ( handlers , " Handlers should not be null " ) ) ) ; 
 + public static ResponseHandler and ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { 
 + return AndResponseHandler . and ( 
 + checkNotNull ( handler , " Handlers should not be null " ) , 
 + checkNotNull ( handlers , " Handlers should not be null " ) ) ; 
 } 
 
 - public static RequestMatcher or ( final RequestMatcher . . . matchers ) { 
 - return new OrRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 + public static RequestMatcher or ( final RequestMatcher matcher , final RequestMatcher . . . matchers ) { 
 + return new OrRequestMatcher ( asIterable ( 
 + checkNotNull ( matcher , " Matcher should not be null " ) , 
 + checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 } 
 
 public static RequestMatcher not ( final RequestMatcher matcher ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java 
 index 057f52c . . 386dc57 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java 
 @ @ - 5 , 6 + 5 , 8 @ @ import com . github . dreamhead . moco . ResponseSetting ; 
 import com . github . dreamhead . moco . Server ; 
 
 import static com . github . dreamhead . moco . Moco . or ; 
 + import static com . github . dreamhead . moco . util . Iterables . head ; 
 + import static com . github . dreamhead . moco . util . Iterables . tail ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 
 public abstract class BaseServer < T extends ResponseSetting < T > > 
 @ @ - 16 , 6 + 18 , 7 @ @ public abstract class BaseServer < T extends ResponseSetting < T > > 
 } 
 
 public T request ( final RequestMatcher . . . matchers ) { 
 - return request ( or ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 + checkNotNull ( matchers , " Matcher should not be null " ) ; 
 + return request ( or ( head ( matchers ) , tail ( matchers ) ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 06a2f45 . . dc762df 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 283 , 11 + 283 , 11 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher and ( final RequestMatcher . . . matchers ) { 
 - return new AndRequestMatcher ( copyOf ( matchers ) ) ; 
 + return new AndRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 } 
 
 public static RequestMatcher or ( final RequestMatcher . . . matchers ) { 
 - return new OrRequestMatcher ( copyOf ( matchers ) ) ; 
 + return new OrRequestMatcher ( copyOf ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 } 
 
 public static RequestMatcher not ( final RequestMatcher matcher ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java 
 index 799161b . . 057f52c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServer . java 
 @ @ - 16 , 6 + 16 , 6 @ @ public abstract class BaseServer < T extends ResponseSetting < T > > 
 } 
 
 public T request ( final RequestMatcher . . . matchers ) { 
 - return request ( or ( matchers ) ) ; 
 + return request ( or ( checkNotNull ( matchers , " Matcher should not be null " ) ) ) ; 
 } 
 }
