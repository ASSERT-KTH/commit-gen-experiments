BLEU SCORE: 0.07809849842300641

TEST MSG: removed toObject with type reference in jsons
GENERATED MSG: removed inline condition in form request extractor

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> index a633944 . . dad73e1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> @ @ - 12 , 6 + 12 , 9 @ @ public class InternalMessageContent { <nl> private byte [ ] content ; <nl> private Charset charset ; <nl> <nl> + public InternalMessageContent ( ) { <nl> + } <nl> + <nl> public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> this . content = content ; <nl> this . charset = charset ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> index 6def1ac . . 485436f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { <nl> InputStream inputStream = null ; <nl> try { <nl> inputStream = new FileInputStream ( file ) ; <nl> - List < Session > sessions = Jsons . toObject ( inputStream , new TypeReference < List < Session > > ( ) { } ) ; <nl> + List < Session > sessions = Jsons . toObjects ( inputStream , Session . class ) ; <nl> return copyOf ( sessions ) ; <nl> } catch ( MocoException me ) { <nl> logger . error ( " exception found " , me ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index d246fd3 . . 8f7eeca 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . fasterxml . jackson . core . JsonProcessingException ; <nl> - import com . fasterxml . jackson . core . type . TypeReference ; <nl> import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> @ @ - 51 , 14 + 50 , 6 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> - public static < T > T toObject ( final InputStream value , final TypeReference clazz ) { <nl> - try { <nl> - return mapper . readValue ( value , clazz ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> - } <nl> - <nl> public static < T > ImmutableList < T > toObjects ( final String value , final Class < T > elementClass ) { <nl> return toObjects ( new ByteArrayInputStream ( value . getBytes ( ) ) , elementClass ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> index e6fbde3 . . 98c1c8b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> @ @ - 22 , 5 + 22 , 6 @ @ public final class Extractors { <nl> throw new IllegalArgumentException ( format ( " unknown extractor for [ % s ] " , id ) ) ; <nl> } <nl> <nl> - private Extractors ( ) { } <nl> + private Extractors ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java <nl> index efb5fb4 . . 83048ee 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java <nl> @ @ - 18 , 6 + 18 , 10 @ @ public class FormRequestExtractor extends HttpRequestExtractor < String > { <nl> @ Override <nl> protected Optional < String > doExtract ( final HttpRequest request ) { <nl> Optional < ImmutableMap < String , String > > forms = extractor . extract ( request ) ; <nl> - return forms . isPresent ( ) ? fromNullable ( forms . get ( ) . get ( key ) ) : Optional . < String > absent ( ) ; <nl> + if ( forms . isPresent ( ) ) { <nl> + return fromNullable ( forms . get ( ) . get ( key ) ) ; <nl> + } <nl> + <nl> + return Optional . absent ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> index 3bafac1 . . 5034f66 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> @ @ - 12 , 12 + 12 , 12 @ @ import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> - 	 private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; <nl> - 	 private final JsonPath jsonPath ; <nl> + private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; <nl> + private final JsonPath jsonPath ; <nl> <nl> - 	 public JsonPathRequestExtractor ( final String jsonPath ) { <nl> - 	 	 this . jsonPath = JsonPath . compile ( jsonPath ) ; <nl> - 	 } <nl> + public JsonPathRequestExtractor ( final String jsonPath ) { <nl> + this . jsonPath = JsonPath . compile ( jsonPath ) ; <nl> + } <nl> <nl> @ Override <nl> protected Optional < Object > doExtract ( final HttpRequest request ) { <nl> @ @ - 33 , 13 + 33 , 13 @ @ public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> } <nl> } <nl> <nl> - 	 private Object toStringArray ( final Object content ) { <nl> - 	 	 if ( content instanceof List ) { <nl> + private Object toStringArray ( final Object content ) { <nl> + if ( content instanceof List ) { <nl> @ SuppressWarnings ( " unchecked " ) <nl> List < String > texts = ( List < String > ) content ; <nl> return texts . toArray ( new String [ texts . size ( ) ] ) ; <nl> - 	 	 } <nl> + } <nl> <nl> - 	 	 return content . toString ( ) ; <nl> - 	 } <nl> + return content . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 130442c . . 5365ce2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 4 , 7 + 4 , 8 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> <nl> public class Failover { <nl> - public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , FailoverStrategy . FAILOVER ) ; <nl> + public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , <nl> + FailoverStrategy . FAILOVER ) ; <nl> <nl> private final FailoverExecutor executor ; <nl> private final FailoverStrategy strategy ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index d98761b . . dc49f9a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 78 , 7 + 78 , 8 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> } <nl> <nl> public FullHttpResponse toFullResponse ( ) { <nl> - FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , HttpResponseStatus . valueOf ( this . status ) ) ; <nl> + FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , <nl> + HttpResponseStatus . valueOf ( this . status ) ) ; <nl> for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { <nl> response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> index 5894d1d . . 166e01f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> @ @ - 29 , 9 + 29 , 10 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { <nl> <nl> @ Override <nl> public void verify ( final UnexpectedRequestMatcher matcher , final VerificationMode mode ) { <nl> - checkNotNull ( mode , " Verification mode should not be null " ) . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , <nl> - checkNotNull ( matcher , " Matcher should not be null " ) , <nl> - " expect unexpected request hit % s times but % d times " ) ) ; <nl> + checkNotNull ( mode , " Verification mode should not be null " ) <nl> + . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , <nl> + checkNotNull ( matcher , " Matcher should not be null " ) , <nl> + " expect unexpected request hit % s times but % d times " ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index 4811cfe . . 948c0ed 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 28 , 5 + 28 , 6 @ @ public final class Files { <nl> return new File ( new File ( path1 ) , path2 ) ; <nl> } <nl> <nl> - private Files ( ) { } <nl> + private Files ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index fbc265b . . f4cdc46 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 13 , 5 + 13 , 6 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> - private Jsons ( ) { } <nl> + private Jsons ( ) { <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java 
 index a633944 . . dad73e1 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java 
 @ @ - 12 , 6 + 12 , 9 @ @ public class InternalMessageContent { 
 private byte [ ] content ; 
 private Charset charset ; 
 
 + public InternalMessageContent ( ) { 
 + } 
 + 
 public InternalMessageContent ( byte [ ] content , Charset charset ) { 
 this . content = content ; 
 this . charset = charset ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java 
 index 6def1ac . . 485436f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java 
 @ @ - 73 , 7 + 73 , 7 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { 
 InputStream inputStream = null ; 
 try { 
 inputStream = new FileInputStream ( file ) ; 
 - List < Session > sessions = Jsons . toObject ( inputStream , new TypeReference < List < Session > > ( ) { } ) ; 
 + List < Session > sessions = Jsons . toObjects ( inputStream , Session . class ) ; 
 return copyOf ( sessions ) ; 
 } catch ( MocoException me ) { 
 logger . error ( " exception found " , me ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index d246fd3 . . 8f7eeca 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . util ; 
 
 import com . fasterxml . jackson . core . JsonProcessingException ; 
 - import com . fasterxml . jackson . core . type . TypeReference ; 
 import com . fasterxml . jackson . databind . JsonMappingException ; 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 @ @ - 51 , 14 + 50 , 6 @ @ public final class Jsons { 
 } 
 } 
 
 - public static < T > T toObject ( final InputStream value , final TypeReference clazz ) { 
 - try { 
 - return mapper . readValue ( value , clazz ) ; 
 - } catch ( IOException e ) { 
 - throw new MocoException ( e ) ; 
 - } 
 - } 
 - 
 public static < T > ImmutableList < T > toObjects ( final String value , final Class < T > elementClass ) { 
 return toObjects ( new ByteArrayInputStream ( value . getBytes ( ) ) , elementClass ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 index e6fbde3 . . 98c1c8b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 @ @ - 22 , 5 + 22 , 6 @ @ public final class Extractors { 
 throw new IllegalArgumentException ( format ( " unknown extractor for [ % s ] " , id ) ) ; 
 } 
 
 - private Extractors ( ) { } 
 + private Extractors ( ) { 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java 
 index efb5fb4 . . 83048ee 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java 
 @ @ - 18 , 6 + 18 , 10 @ @ public class FormRequestExtractor extends HttpRequestExtractor < String > { 
 @ Override 
 protected Optional < String > doExtract ( final HttpRequest request ) { 
 Optional < ImmutableMap < String , String > > forms = extractor . extract ( request ) ; 
 - return forms . isPresent ( ) ? fromNullable ( forms . get ( ) . get ( key ) ) : Optional . < String > absent ( ) ; 
 + if ( forms . isPresent ( ) ) { 
 + return fromNullable ( forms . get ( ) . get ( key ) ) ; 
 + } 
 + 
 + return Optional . absent ( ) ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java 
 index 3bafac1 . . 5034f66 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java 
 @ @ - 12 , 12 + 12 , 12 @ @ import static com . google . common . base . Optional . absent ; 
 import static com . google . common . base . Optional . of ; 
 
 public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { 
 - 	 private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; 
 - 	 private final JsonPath jsonPath ; 
 + private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; 
 + private final JsonPath jsonPath ; 
 
 - 	 public JsonPathRequestExtractor ( final String jsonPath ) { 
 - 	 	 this . jsonPath = JsonPath . compile ( jsonPath ) ; 
 - 	 } 
 + public JsonPathRequestExtractor ( final String jsonPath ) { 
 + this . jsonPath = JsonPath . compile ( jsonPath ) ; 
 + } 
 
 @ Override 
 protected Optional < Object > doExtract ( final HttpRequest request ) { 
 @ @ - 33 , 13 + 33 , 13 @ @ public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { 
 } 
 } 
 
 - 	 private Object toStringArray ( final Object content ) { 
 - 	 	 if ( content instanceof List ) { 
 + private Object toStringArray ( final Object content ) { 
 + if ( content instanceof List ) { 
 @ SuppressWarnings ( " unchecked " ) 
 List < String > texts = ( List < String > ) content ; 
 return texts . toArray ( new String [ texts . size ( ) ] ) ; 
 - 	 	 } 
 + } 
 
 - 	 	 return content . toString ( ) ; 
 - 	 } 
 + return content . toString ( ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 index 130442c . . 5365ce2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 @ @ - 4 , 7 + 4 , 8 @ @ import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . HttpResponse ; 
 
 public class Failover { 
 - public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , FailoverStrategy . FAILOVER ) ; 
 + public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , 
 + FailoverStrategy . FAILOVER ) ; 
 
 private final FailoverExecutor executor ; 
 private final FailoverStrategy strategy ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 index d98761b . . dc49f9a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 @ @ - 78 , 7 + 78 , 8 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 } 
 
 public FullHttpResponse toFullResponse ( ) { 
 - FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , HttpResponseStatus . valueOf ( this . status ) ) ; 
 + FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , 
 + HttpResponseStatus . valueOf ( this . status ) ) ; 
 for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { 
 response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 index 5894d1d . . 166e01f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 @ @ - 29 , 9 + 29 , 10 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { 
 
 @ Override 
 public void verify ( final UnexpectedRequestMatcher matcher , final VerificationMode mode ) { 
 - checkNotNull ( mode , " Verification mode should not be null " ) . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , 
 - checkNotNull ( matcher , " Matcher should not be null " ) , 
 - " expect unexpected request hit % s times but % d times " ) ) ; 
 + checkNotNull ( mode , " Verification mode should not be null " ) 
 + . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , 
 + checkNotNull ( matcher , " Matcher should not be null " ) , 
 + " expect unexpected request hit % s times but % d times " ) ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 index 4811cfe . . 948c0ed 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 28 , 5 + 28 , 6 @ @ public final class Files { 
 return new File ( new File ( path1 ) , path2 ) ; 
 } 
 
 - private Files ( ) { } 
 + private Files ( ) { 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index fbc265b . . f4cdc46 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 13 , 5 + 13 , 6 @ @ public final class Jsons { 
 } 
 } 
 
 - private Jsons ( ) { } 
 + private Jsons ( ) { 
 + } 
 }
