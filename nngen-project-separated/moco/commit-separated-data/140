BLEU SCORE: 0.10682175159905853

TEST MSG: introduced json in template req
GENERATED MSG: introduced config to rest server

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 3d623e0 . . 27d88db 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> import java . util . Map ; <nl> @ @ - 84 , 4 + 85 , 8 @ @ public class TemplateRequest { <nl> <nl> throw new IllegalArgumentException ( " Request is not HTTP request " ) ; <nl> } <nl> + <nl> + public Object getJson ( ) { <nl> + return Jsons . toObject ( this . request . getContent ( ) . toString ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index e9b19f9 . . c97a576 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 195 , 7 + 195 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> if ( reference < = 0 ) { <nl> throw new IllegalArgumentException ( " Random range should be greater than 0 " ) ; <nl> } <nl> - <nl> + <nl> return Optional . of ( reference ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 2e8a31d . . 0108d02 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 46 , 6 + 46 , 14 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static Object toObject ( final String value ) { <nl> + try { <nl> + return mapper . readValue ( value , Object . class ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { <nl> try { <nl> return mapper . readValue ( value , clazz ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index fb61acd . . 07cdf59 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 549 , 4 + 549 , 15 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ json ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . json . code } $ { req . json . message } " ) ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " 1 message " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> index c0d0e5c . . cdb7556 100755 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> @ @ - 4 , 9 + 4 , 6 @ @ import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; <nl> import com . github . dreamhead . moco . mount . MountPredicate ; <nl> import com . github . dreamhead . moco . mount . MountTo ; <nl> - import com . github . dreamhead . moco . rest . RestSetting ; <nl> - <nl> - import java . util . Map ; <nl> <nl> public interface HttpServer extends HttpResponseSetting , Server < HttpResponseSetting > { <nl> HttpResponseSetting get ( final RequestMatcher matcher ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> index 5fd9258 . . 5cd3fd6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> @ @ - 8 , 8 + 8 , 8 @ @ import com . google . common . base . Optional ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public final class MocoRest { <nl> - public static RestServer restServer ( final int port ) { <nl> - return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , new QuietMonitor ( ) ) ; <nl> + public static RestServer restServer ( final int port , final MocoConfig . . . configs ) { <nl> + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , new QuietMonitor ( ) , configs ) ; <nl> } <nl> <nl> public static RestSetting get ( final String id , final ResponseHandler handler ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> index 0dc0761 . . 22c0fb8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . rest ; <nl> <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . Moco ; <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MutableHttpResponse ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . AbstractHttpResponseHandler ; <nl> @ @ - 40 , 6 + 41 , 15 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> throw new UnsupportedOperationException ( " Unsupported REST request " ) ; <nl> } <nl> <nl> + @ Override <nl> + public ResponseHandler apply ( final MocoConfig config ) { <nl> + if ( config . isFor ( MocoConfig . URI _ ID ) ) { <nl> + return new RestHandler ( ( String ) config . apply ( name ) , settings ) ; <nl> + } <nl> + <nl> + return super . apply ( config ) ; <nl> + } <nl> + <nl> private ResponseHandler getGetHandler ( final HttpRequest httpRequest ) { <nl> FluentIterable < ? extends RestSetting > restSettings = FluentIterable . of ( settings ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> index 8cdfbed . . df17ecd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> @ @ - 11 , 6 + 11 , 10 @ @ public final class URLs { <nl> private static final String SEPARATOR = " / " ; <nl> <nl> public static String resourceRoot ( final String name ) { <nl> + if ( name . startsWith ( SEPARATOR ) ) { <nl> + return name ; <nl> + } <nl> + <nl> return SEPARATOR + name ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 23fa4d3 . . 20bc5c4 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 94 , 6 + 94 , 37 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ request _ server _ by _ moco _ config ( ) throws Exception { <nl> + RestServer server = restServer ( 12306 , Moco . context ( " / rest " ) ) ; <nl> + <nl> + Plain resource1 = new Plain ( ) ; <nl> + resource1 . code = 1 ; <nl> + resource1 . message = " hello " ; <nl> + <nl> + Plain resource2 = new Plain ( ) ; <nl> + resource2 . code = 2 ; <nl> + resource2 . message = " world " ; <nl> + <nl> + server . resource ( " targets " , <nl> + MocoRest . get ( " 1 " , Moco . toJson ( resource1 ) ) , <nl> + MocoRest . get ( " 2 " , Moco . toJson ( resource2 ) ) <nl> + ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + Plain response1 = getResource ( " / rest / targets / 1 " ) ; <nl> + assertThat ( response1 . code , is ( 1 ) ) ; <nl> + assertThat ( response1 . message , is ( " hello " ) ) ; <nl> + <nl> + Plain response2 = getResource ( " / rest / targets / 2 " ) ; <nl> + assertThat ( response2 . code , is ( 2 ) ) ; <nl> + assertThat ( response2 . message , is ( " world " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private Plain getResource ( String uri ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; <nl> HttpEntity entity = response . getEntity ( ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 index 3d623e0 . . 27d88db 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . collect . ImmutableMap ; 
 
 import java . util . Map ; 
 @ @ - 84 , 4 + 85 , 8 @ @ public class TemplateRequest { 
 
 throw new IllegalArgumentException ( " Request is not HTTP request " ) ; 
 } 
 + 
 + public Object getJson ( ) { 
 + return Jsons . toObject ( this . request . getContent ( ) . toString ( ) ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 index e9b19f9 . . c97a576 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 @ @ - 195 , 7 + 195 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { 
 if ( reference < = 0 ) { 
 throw new IllegalArgumentException ( " Random range should be greater than 0 " ) ; 
 } 
 - 
 + 
 return Optional . of ( reference ) ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index 2e8a31d . . 0108d02 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 46 , 6 + 46 , 14 @ @ public final class Jsons { 
 } 
 } 
 
 + public static Object toObject ( final String value ) { 
 + try { 
 + return mapper . readValue ( value , Object . class ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + } 
 + 
 public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { 
 try { 
 return mapper . readValue ( value , clazz ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index fb61acd . . 07cdf59 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 549 , 4 + 549 , 15 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ return _ json ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . json . code } $ { req . json . message } " ) ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " 1 message " ) ) ; 
 + } 
 + } ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java 
 index c0d0e5c . . cdb7556 100755 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java 
 @ @ - 4 , 9 + 4 , 6 @ @ import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; 
 import com . github . dreamhead . moco . mount . MountPredicate ; 
 import com . github . dreamhead . moco . mount . MountTo ; 
 - import com . github . dreamhead . moco . rest . RestSetting ; 
 - 
 - import java . util . Map ; 
 
 public interface HttpServer extends HttpResponseSetting , Server < HttpResponseSetting > { 
 HttpResponseSetting get ( final RequestMatcher matcher ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 index 5fd9258 . . 5cd3fd6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 @ @ - 8 , 8 + 8 , 8 @ @ import com . google . common . base . Optional ; 
 import static com . google . common . base . Optional . of ; 
 
 public final class MocoRest { 
 - public static RestServer restServer ( final int port ) { 
 - return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , new QuietMonitor ( ) ) ; 
 + public static RestServer restServer ( final int port , final MocoConfig . . . configs ) { 
 + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , new QuietMonitor ( ) , configs ) ; 
 } 
 
 public static RestSetting get ( final String id , final ResponseHandler handler ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 index 0dc0761 . . 22c0fb8 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . rest ; 
 
 import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . Moco ; 
 + import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MutableHttpResponse ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . AbstractHttpResponseHandler ; 
 @ @ - 40 , 6 + 41 , 15 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 throw new UnsupportedOperationException ( " Unsupported REST request " ) ; 
 } 
 
 + @ Override 
 + public ResponseHandler apply ( final MocoConfig config ) { 
 + if ( config . isFor ( MocoConfig . URI _ ID ) ) { 
 + return new RestHandler ( ( String ) config . apply ( name ) , settings ) ; 
 + } 
 + 
 + return super . apply ( config ) ; 
 + } 
 + 
 private ResponseHandler getGetHandler ( final HttpRequest httpRequest ) { 
 FluentIterable < ? extends RestSetting > restSettings = FluentIterable . of ( settings ) ; 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 index 8cdfbed . . df17ecd 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 @ @ - 11 , 6 + 11 , 10 @ @ public final class URLs { 
 private static final String SEPARATOR = " / " ; 
 
 public static String resourceRoot ( final String name ) { 
 + if ( name . startsWith ( SEPARATOR ) ) { 
 + return name ; 
 + } 
 + 
 return SEPARATOR + name ; 
 } 
 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 index 23fa4d3 . . 20bc5c4 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 @ @ - 94 , 6 + 94 , 37 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 } ) ; 
 } 
 
 + @ Test 
 + public void should _ request _ server _ by _ moco _ config ( ) throws Exception { 
 + RestServer server = restServer ( 12306 , Moco . context ( " / rest " ) ) ; 
 + 
 + Plain resource1 = new Plain ( ) ; 
 + resource1 . code = 1 ; 
 + resource1 . message = " hello " ; 
 + 
 + Plain resource2 = new Plain ( ) ; 
 + resource2 . code = 2 ; 
 + resource2 . message = " world " ; 
 + 
 + server . resource ( " targets " , 
 + MocoRest . get ( " 1 " , Moco . toJson ( resource1 ) ) , 
 + MocoRest . get ( " 2 " , Moco . toJson ( resource2 ) ) 
 + ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + Plain response1 = getResource ( " / rest / targets / 1 " ) ; 
 + assertThat ( response1 . code , is ( 1 ) ) ; 
 + assertThat ( response1 . message , is ( " hello " ) ) ; 
 + 
 + Plain response2 = getResource ( " / rest / targets / 2 " ) ; 
 + assertThat ( response2 . code , is ( 2 ) ) ; 
 + assertThat ( response2 . message , is ( " world " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private Plain getResource ( String uri ) throws IOException { 
 org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; 
 HttpEntity entity = response . getEntity ( ) ;
