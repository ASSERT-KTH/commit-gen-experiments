BLEU SCORE: 0.537284965911771

TEST MSG: fixed typo in cycle handler api
GENERATED MSG: fixed typo in cycle publish api

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index fc9c4a2 . . c9f7b7a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 378 , 19 + 378 , 19 @ @ public final class Moco { <nl> <nl> public static ResponseHandler cycle ( final String content , final String . . . contents ) { <nl> checkNotNull ( content , " Cycle content should not be null " ) ; <nl> - checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Cycle content should not be null " ) ; <nl> return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { <nl> checkNotNull ( content , " Cycle content should not be null " ) ; <nl> - checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Cycle contents should not be null " ) ; <nl> return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> checkNotNull ( handler , " Cycle handler should not be null " ) ; <nl> - checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; <nl> + checkArgument ( handlers . length > 0 , " Cycle handlers should not be null " ) ; <nl> return newCycle ( asIterable ( handler , handlers ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index d66414a . . fc9c4a2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 377 , 19 + 377 , 19 @ @ public final class Moco { <nl> } <nl> <nl> public static ResponseHandler cycle ( final String content , final String . . . contents ) { <nl> - checkNotNull ( content , " Sequence content should not be null " ) ; <nl> + checkNotNull ( content , " Cycle content should not be null " ) ; <nl> checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; <nl> return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { <nl> - checkNotNull ( content , " Sequence content should not be null " ) ; <nl> + checkNotNull ( content , " Cycle content should not be null " ) ; <nl> checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> - checkNotNull ( handler , " Sequence handler should not be null " ) ; <nl> + checkNotNull ( handler , " Cycle handler should not be null " ) ; <nl> checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; <nl> return newCycle ( asIterable ( handler , handlers ) ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index fc9c4a2 . . c9f7b7a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 378 , 19 + 378 , 19 @ @ public final class Moco { 
 
 public static ResponseHandler cycle ( final String content , final String . . . contents ) { 
 checkNotNull ( content , " Cycle content should not be null " ) ; 
 - checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; 
 + checkArgument ( contents . length > 0 , " Cycle content should not be null " ) ; 
 return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; 
 } 
 
 public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { 
 checkNotNull ( content , " Cycle content should not be null " ) ; 
 - checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 + checkArgument ( contents . length > 0 , " Cycle contents should not be null " ) ; 
 return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; 
 } 
 
 public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { 
 checkNotNull ( handler , " Cycle handler should not be null " ) ; 
 - checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; 
 + checkArgument ( handlers . length > 0 , " Cycle handlers should not be null " ) ; 
 return newCycle ( asIterable ( handler , handlers ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index d66414a . . fc9c4a2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 377 , 19 + 377 , 19 @ @ public final class Moco { 
 } 
 
 public static ResponseHandler cycle ( final String content , final String . . . contents ) { 
 - checkNotNull ( content , " Sequence content should not be null " ) ; 
 + checkNotNull ( content , " Cycle content should not be null " ) ; 
 checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; 
 return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; 
 } 
 
 public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { 
 - checkNotNull ( content , " Sequence content should not be null " ) ; 
 + checkNotNull ( content , " Cycle content should not be null " ) ; 
 checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; 
 } 
 
 public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { 
 - checkNotNull ( handler , " Sequence handler should not be null " ) ; 
 + checkNotNull ( handler , " Cycle handler should not be null " ) ; 
 checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; 
 return newCycle ( asIterable ( handler , handlers ) ) ; 
 }
