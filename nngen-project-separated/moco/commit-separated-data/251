BLEU SCORE: 0.035802380724744266

TEST MSG: added post action with pojo
GENERATED MSG: ensured toJson publish api setup correct charset

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 9a8ed65 . . f3d665a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 587 , 6 + 587 , 16 @ @ public final class Moco { <nl> return post ( checkNotNull ( url , " URL should not be null " ) , text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> + public static MocoEventAction post ( final String url , final Object object ) { <nl> + return post ( checkNotNullOrEmpty ( url , " URL should not be null " ) , <nl> + Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> + } <nl> + <nl> + public static MocoEventAction post ( final Resource url , final Object object ) { <nl> + return post ( checkNotNull ( url , " URL should not be null " ) , <nl> + Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; <nl> + } <nl> + <nl> public static ResponseHandler attachment ( final String filename , final Resource resource ) { <nl> return AndResponseHandler . and ( <nl> header ( HttpHeaders . CONTENT _ DISPOSITION , format ( " attachment ; filename = % s " , checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) ) ) , <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index fcb5465 . . 8fe86ab 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . net . MediaType ; <nl> @ @ - 10 , 6 + 11 , 9 @ @ import org . junit . Test ; <nl> import java . io . IOException ; <nl> import java . nio . charset . Charset ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . complete ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . exist ; <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> @ @ - 17 , 13 + 21 , 18 @ @ import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> + import static org . mockito . ArgumentMatchers . any ; <nl> + import static org . mockito . Mockito . mock ; <nl> + import static org . mockito . Mockito . verify ; <nl> <nl> public class MocoJsonTest extends AbstractMocoHttpTest { <nl> @ Test <nl> @ @ - 200 , 6 + 209 , 26 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ json ( ) throws Exception { <nl> + PlainA pojo = new PlainA ( ) ; <nl> + pojo . code = 1 ; <nl> + pojo . message = " message " ; <nl> + <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , json ( pojo ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pojo ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( any ( SessionContext . class ) ) ; <nl> + } <nl> + <nl> private static class PlainA { <nl> public int code ; <nl> public String message ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java <nl> index d86a342 . . c06e731 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java <nl> @ @ - 3 , 24 + 3 , 24 @ @ package com . github . dreamhead . moco . handler ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . google . common . net . MediaType ; <nl> <nl> import static com . github . dreamhead . moco . util . Jsons . toJson ; <nl> <nl> public class JsonResponseHandler extends AbstractContentResponseHandler { <nl> - private final Object pojo ; <nl> - <nl> + private final MessageContent content ; <nl> <nl> public JsonResponseHandler ( final Object pojo ) { <nl> - this . pojo = pojo ; <nl> + this . content = MessageContent . content ( ) . withContent ( toJson ( pojo ) ) . build ( ) ; <nl> } <nl> <nl> @ Override <nl> protected MessageContent responseContent ( final Request request ) { <nl> - return MessageContent . content ( ) . withContent ( toJson ( this . pojo ) ) . build ( ) ; <nl> + return content ; <nl> } <nl> <nl> @ Override <nl> protected String getContentType ( HttpRequest request ) { <nl> - return " application / json " ; <nl> + return MediaType . create ( " application " , " json " ) . withCharset ( content . getCharset ( ) ) . toString ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 6020868 . . d498d49 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 10 , 12 + 10 , 9 @ @ import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . eq ; <nl> - import static com . github . dreamhead . moco . Moco . exist ; <nl> - import static com . github . dreamhead . moco . Moco . json ; <nl> - import static com . github . dreamhead . moco . Moco . jsonPath ; <nl> - import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> @ @ - 148 , 6 + 145 , 24 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ return _ json _ for _ POJO _ with _ CJK ( ) throws Exception { <nl> + PlainA pojo = new PlainA ( ) ; <nl> + pojo . code = 1 ; <nl> + pojo . message = " 消 息 " ; <nl> + server . response ( toJson ( pojo ) ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + String content = helper . get ( remoteUrl ( root ( ) ) ) ; <nl> + ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + PlainA responseA = mapper . readValue ( content , PlainA . class ) ; <nl> + assertThat ( responseA . code , is ( 1 ) ) ; <nl> + assertThat ( responseA . message , is ( " 消 息 " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private static class PlainA { <nl> public int code ; <nl> public String message ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 9a8ed65 . . f3d665a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 587 , 6 + 587 , 16 @ @ public final class Moco { 
 return post ( checkNotNull ( url , " URL should not be null " ) , text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; 
 } 
 
 + public static MocoEventAction post ( final String url , final Object object ) { 
 + return post ( checkNotNullOrEmpty ( url , " URL should not be null " ) , 
 + Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; 
 + } 
 + 
 + public static MocoEventAction post ( final Resource url , final Object object ) { 
 + return post ( checkNotNull ( url , " URL should not be null " ) , 
 + Jsons . toJson ( checkNotNull ( object , " Content should not be null " ) ) ) ; 
 + } 
 + 
 public static ResponseHandler attachment ( final String filename , final Resource resource ) { 
 return AndResponseHandler . and ( 
 header ( HttpHeaders . CONTENT _ DISPOSITION , format ( " attachment ; filename = % s " , checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) ) ) , 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index fcb5465 . . 8fe86ab 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . internal . SessionContext ; 
 import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . io . ByteStreams ; 
 import com . google . common . net . MediaType ; 
 @ @ - 10 , 6 + 11 , 9 @ @ import org . junit . Test ; 
 import java . io . IOException ; 
 import java . nio . charset . Charset ; 
 
 + import static com . github . dreamhead . moco . Moco . and ; 
 + import static com . github . dreamhead . moco . Moco . by ; 
 + import static com . github . dreamhead . moco . Moco . complete ; 
 import static com . github . dreamhead . moco . Moco . eq ; 
 import static com . github . dreamhead . moco . Moco . exist ; 
 import static com . github . dreamhead . moco . Moco . httpServer ; 
 @ @ - 17 , 13 + 21 , 18 @ @ import static com . github . dreamhead . moco . Moco . json ; 
 import static com . github . dreamhead . moco . Moco . jsonPath ; 
 import static com . github . dreamhead . moco . Moco . log ; 
 import static com . github . dreamhead . moco . Moco . pathResource ; 
 + import static com . github . dreamhead . moco . Moco . post ; 
 import static com . github . dreamhead . moco . Moco . toJson ; 
 + import static com . github . dreamhead . moco . Moco . uri ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 + import static org . mockito . ArgumentMatchers . any ; 
 + import static org . mockito . Mockito . mock ; 
 + import static org . mockito . Mockito . verify ; 
 
 public class MocoJsonTest extends AbstractMocoHttpTest { 
 @ Test 
 @ @ - 200 , 6 + 209 , 26 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 } ) ; 
 } 
 
 + @ Test 
 + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ json ( ) throws Exception { 
 + PlainA pojo = new PlainA ( ) ; 
 + pojo . code = 1 ; 
 + pojo . message = " message " ; 
 + 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , json ( pojo ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pojo ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( any ( SessionContext . class ) ) ; 
 + } 
 + 
 private static class PlainA { 
 public int code ; 
 public String message ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java 
 index d86a342 . . c06e731 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / JsonResponseHandler . java 
 @ @ - 3 , 24 + 3 , 24 @ @ package com . github . dreamhead . moco . handler ; 
 import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 + import com . google . common . net . MediaType ; 
 
 import static com . github . dreamhead . moco . util . Jsons . toJson ; 
 
 public class JsonResponseHandler extends AbstractContentResponseHandler { 
 - private final Object pojo ; 
 - 
 + private final MessageContent content ; 
 
 public JsonResponseHandler ( final Object pojo ) { 
 - this . pojo = pojo ; 
 + this . content = MessageContent . content ( ) . withContent ( toJson ( pojo ) ) . build ( ) ; 
 } 
 
 @ Override 
 protected MessageContent responseContent ( final Request request ) { 
 - return MessageContent . content ( ) . withContent ( toJson ( this . pojo ) ) . build ( ) ; 
 + return content ; 
 } 
 
 @ Override 
 protected String getContentType ( HttpRequest request ) { 
 - return " application / json " ; 
 + return MediaType . create ( " application " , " json " ) . withCharset ( content . getCharset ( ) ) . toString ( ) ; 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index 6020868 . . d498d49 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 10 , 12 + 10 , 9 @ @ import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . Moco . eq ; 
 - import static com . github . dreamhead . moco . Moco . exist ; 
 - import static com . github . dreamhead . moco . Moco . json ; 
 - import static com . github . dreamhead . moco . Moco . jsonPath ; 
 - import static com . github . dreamhead . moco . Moco . toJson ; 
 + import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 @ @ - 148 , 6 + 145 , 24 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 } ) ; 
 } 
 
 + @ Test 
 + public void should _ return _ json _ for _ POJO _ with _ CJK ( ) throws Exception { 
 + PlainA pojo = new PlainA ( ) ; 
 + pojo . code = 1 ; 
 + pojo . message = " 消 息 " ; 
 + server . response ( toJson ( pojo ) ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + String content = helper . get ( remoteUrl ( root ( ) ) ) ; 
 + ObjectMapper mapper = new ObjectMapper ( ) ; 
 + PlainA responseA = mapper . readValue ( content , PlainA . class ) ; 
 + assertThat ( responseA . code , is ( 1 ) ) ; 
 + assertThat ( responseA . message , is ( " 消 息 " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private static class PlainA { 
 public int code ; 
 public String message ;
