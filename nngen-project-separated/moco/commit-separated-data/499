BLEU SCORE: 0.06870636427700047

TEST MSG: removed argument check in api utils
GENERATED MSG: added more argument checks to publish interface

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 44ac073 . . 488a103 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 187 , 8 + 187 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher match ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . match ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . match ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 200 , 8 + 199 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher startsWith ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . startsWith ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . startsWith ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 210 , 8 + 208 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher endsWith ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . endsWith ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . endsWith ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 220 , 8 + 217 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher contain ( final Resource resource ) { <nl> - checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return ApiUtils . contain ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return ApiUtils . contain ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; <nl> } <nl> <nl> public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final String expected ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 78053b7 . . 280d934 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 91 , 18 + 91 , 15 @ @ public class ApiUtils { <nl> } <nl> <nl> public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new StartsWithMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , <nl> - checkNotNull ( resource , " Expected resource should not be null " ) ) ; <nl> + return new StartsWithMatcher < T > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new EndsWithMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , <nl> - checkNotNull ( resource , " Expected resource should not be null " ) ) ; <nl> + return new EndsWithMatcher < T > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new ContainMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , <nl> - checkNotNull ( resource , " Expected resource should not be null " ) ) ; <nl> + return new ContainMatcher < T > ( extractor , resource ) ; <nl> } <nl> <nl> private ApiUtils ( ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index d43db75 . . c3faebe 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 35 , 10 + 35 , 12 @ @ public class Moco { <nl> private static final int DEFAULT _ LATENCY = 1000 ; <nl> <nl> public static HttpServer httpserver ( final int port , final MocoConfig . . . configs ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createQuietServer ( of ( port ) , configs ) ; <nl> } <nl> <nl> public static HttpServer httpserver ( final int port , final MocoMonitor monitor , final MocoConfig . . . configs ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , monitor , configs ) ; <nl> } <nl> <nl> @ @ - 63 , 6 + 65 , 7 @ @ public class Moco { <nl> } <nl> <nl> public static RequestMatcher by ( final Resource resource ) { <nl> + checkNotNull ( resource , " resource should not be null " ) ; <nl> return eq ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> @ @ - 71 , 11 + 74 , 12 @ @ public class Moco { <nl> } <nl> <nl> public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - return new EqRequestMatcher < T > ( extractor , expected ) ; <nl> + return new EqRequestMatcher < T > ( checkNotNull ( extractor , " extractor should not be null " ) , expected ) ; <nl> } <nl> <nl> - public static RequestMatcher match ( final Resource patternResource ) { <nl> - return match ( extractor ( patternResource . id ( ) ) , patternResource ) ; <nl> + public static RequestMatcher match ( final Resource resource ) { <nl> + checkNotNull ( resource , " resource should not be null " ) ; <nl> + return match ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 83 , 7 + 87 , 8 @ @ public class Moco { <nl> } <nl> <nl> private static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - return new MatchMatcher < T > ( extractor , expected ) ; <nl> + return new MatchMatcher < T > ( checkNotNull ( extractor , " extractor should not be null " ) , <nl> + checkNotNull ( expected , " expected resource should not be null " ) ) ; <nl> } <nl> <nl> public static RequestMatcher and ( final RequestMatcher . . . matchers ) { <nl> @ @ - 103 , 11 + 108 , 11 @ @ public class Moco { <nl> } <nl> <nl> public static ResponseHandler with ( final Resource resource ) { <nl> - return responseHandler ( resource ) ; <nl> + return responseHandler ( checkNotNull ( resource , " Null procedure is not allowed " ) ) ; <nl> } <nl> <nl> public static ResponseHandler with ( final MocoProcedure procedure ) { <nl> - return new ProcedureResponseHandler ( procedure ) ; <nl> + return new ProcedureResponseHandler ( checkNotNull ( procedure , " Null procedure is not allowed " ) ) ; <nl> } <nl> <nl> public static Resource uri ( final String uri ) { <nl> @ @ - 155 , 6 + 160 , 7 @ @ public class Moco { <nl> } <nl> <nl> public static LatencyProcedure latency ( final long millis ) { <nl> + checkArgument ( millis > 0 , " Latency must be greater than zero " ) ; <nl> return new LatencyProcedure ( millis ) ; <nl> } <nl> <nl> @ @ - 167 , 10 + 173 , 12 @ @ public class Moco { <nl> } <nl> <nl> public static RequestMatcher xml ( final Resource resource ) { <nl> + checkNotNull ( resource , " Null resource is not allowed " ) ; <nl> return new XmlRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> public static RequestMatcher json ( final Resource resource ) { <nl> + checkNotNull ( resource , " Null resource is not allowed " ) ; <nl> return new JsonRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> @ @ - 233 , 7 + 241 , 7 @ @ public class Moco { <nl> } <nl> <nl> public static ResponseHandler proxy ( final String url , Failover failover ) { <nl> - return new ProxyResponseHandler ( toUrl ( url ) , checkNotNull ( failover , " Null failover is not allowed " ) ) ; <nl> + return new ProxyResponseHandler ( toUrl ( checkNotNull ( url , " Null URL is not allowed " ) ) , checkNotNull ( failover , " Null failover is not allowed " ) ) ; <nl> } <nl> <nl> public static Resource template ( final String template ) {

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 44ac073 . . 488a103 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 187 , 8 + 187 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher match ( final Resource resource ) { 
 - checkNotNull ( resource , " Resource should not be null " ) ; 
 - return ApiUtils . match ( extractor ( resource . id ( ) ) , resource ) ; 
 + return ApiUtils . match ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; 
 } 
 
 public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final String expected ) { 
 @ @ - 200 , 8 + 199 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher startsWith ( final Resource resource ) { 
 - checkNotNull ( resource , " Resource should not be null " ) ; 
 - return ApiUtils . startsWith ( extractor ( resource . id ( ) ) , resource ) ; 
 + return ApiUtils . startsWith ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; 
 } 
 
 public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final String expected ) { 
 @ @ - 210 , 8 + 208 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher endsWith ( final Resource resource ) { 
 - checkNotNull ( resource , " Resource should not be null " ) ; 
 - return ApiUtils . endsWith ( extractor ( resource . id ( ) ) , resource ) ; 
 + return ApiUtils . endsWith ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; 
 } 
 
 public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final String expected ) { 
 @ @ - 220 , 8 + 217 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher contain ( final Resource resource ) { 
 - checkNotNull ( resource , " Resource should not be null " ) ; 
 - return ApiUtils . contain ( extractor ( resource . id ( ) ) , resource ) ; 
 + return ApiUtils . contain ( extractor ( resource . id ( ) ) , checkNotNull ( resource , " Resource should not be null " ) ) ; 
 } 
 
 public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final String expected ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 index 78053b7 . . 280d934 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 91 , 18 + 91 , 15 @ @ public class ApiUtils { 
 } 
 
 public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final Resource resource ) { 
 - return new StartsWithMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , 
 - checkNotNull ( resource , " Expected resource should not be null " ) ) ; 
 + return new StartsWithMatcher < T > ( extractor , resource ) ; 
 } 
 
 public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final Resource resource ) { 
 - return new EndsWithMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , 
 - checkNotNull ( resource , " Expected resource should not be null " ) ) ; 
 + return new EndsWithMatcher < T > ( extractor , resource ) ; 
 } 
 
 public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final Resource resource ) { 
 - return new ContainMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , 
 - checkNotNull ( resource , " Expected resource should not be null " ) ) ; 
 + return new ContainMatcher < T > ( extractor , resource ) ; 
 } 
 
 private ApiUtils ( ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index d43db75 . . c3faebe 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 35 , 10 + 35 , 12 @ @ public class Moco { 
 private static final int DEFAULT _ LATENCY = 1000 ; 
 
 public static HttpServer httpserver ( final int port , final MocoConfig . . . configs ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualHttpServer . createQuietServer ( of ( port ) , configs ) ; 
 } 
 
 public static HttpServer httpserver ( final int port , final MocoMonitor monitor , final MocoConfig . . . configs ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , monitor , configs ) ; 
 } 
 
 @ @ - 63 , 6 + 65 , 7 @ @ public class Moco { 
 } 
 
 public static RequestMatcher by ( final Resource resource ) { 
 + checkNotNull ( resource , " resource should not be null " ) ; 
 return eq ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 @ @ - 71 , 11 + 74 , 12 @ @ public class Moco { 
 } 
 
 public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final Resource expected ) { 
 - return new EqRequestMatcher < T > ( extractor , expected ) ; 
 + return new EqRequestMatcher < T > ( checkNotNull ( extractor , " extractor should not be null " ) , expected ) ; 
 } 
 
 - public static RequestMatcher match ( final Resource patternResource ) { 
 - return match ( extractor ( patternResource . id ( ) ) , patternResource ) ; 
 + public static RequestMatcher match ( final Resource resource ) { 
 + checkNotNull ( resource , " resource should not be null " ) ; 
 + return match ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final String expected ) { 
 @ @ - 83 , 7 + 87 , 8 @ @ public class Moco { 
 } 
 
 private static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final Resource expected ) { 
 - return new MatchMatcher < T > ( extractor , expected ) ; 
 + return new MatchMatcher < T > ( checkNotNull ( extractor , " extractor should not be null " ) , 
 + checkNotNull ( expected , " expected resource should not be null " ) ) ; 
 } 
 
 public static RequestMatcher and ( final RequestMatcher . . . matchers ) { 
 @ @ - 103 , 11 + 108 , 11 @ @ public class Moco { 
 } 
 
 public static ResponseHandler with ( final Resource resource ) { 
 - return responseHandler ( resource ) ; 
 + return responseHandler ( checkNotNull ( resource , " Null procedure is not allowed " ) ) ; 
 } 
 
 public static ResponseHandler with ( final MocoProcedure procedure ) { 
 - return new ProcedureResponseHandler ( procedure ) ; 
 + return new ProcedureResponseHandler ( checkNotNull ( procedure , " Null procedure is not allowed " ) ) ; 
 } 
 
 public static Resource uri ( final String uri ) { 
 @ @ - 155 , 6 + 160 , 7 @ @ public class Moco { 
 } 
 
 public static LatencyProcedure latency ( final long millis ) { 
 + checkArgument ( millis > 0 , " Latency must be greater than zero " ) ; 
 return new LatencyProcedure ( millis ) ; 
 } 
 
 @ @ - 167 , 10 + 173 , 12 @ @ public class Moco { 
 } 
 
 public static RequestMatcher xml ( final Resource resource ) { 
 + checkNotNull ( resource , " Null resource is not allowed " ) ; 
 return new XmlRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 public static RequestMatcher json ( final Resource resource ) { 
 + checkNotNull ( resource , " Null resource is not allowed " ) ; 
 return new JsonRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 @ @ - 233 , 7 + 241 , 7 @ @ public class Moco { 
 } 
 
 public static ResponseHandler proxy ( final String url , Failover failover ) { 
 - return new ProxyResponseHandler ( toUrl ( url ) , checkNotNull ( failover , " Null failover is not allowed " ) ) ; 
 + return new ProxyResponseHandler ( toUrl ( checkNotNull ( url , " Null URL is not allowed " ) ) , checkNotNull ( failover , " Null failover is not allowed " ) ) ; 
 } 
 
 public static Resource template ( final String template ) {
