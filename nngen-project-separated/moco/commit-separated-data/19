BLEU SCORE: 0.32466791547509893

TEST MSG: added missing final to failover container
GENERATED MSG: added toString to failover container

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> index 39bef6a . . 8f9db46 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . base . MoreObjects ; <nl> import static com . github . dreamhead . moco . Moco . playback ; <nl> <nl> @ JsonDeserialize ( using = FailoverContainerDeserializer . class ) <nl> - public class FailoverContainer { <nl> + public final class FailoverContainer { <nl> private String file ; <nl> private int [ ] status ; <nl> <nl> @ @ - 33 , 7 + 33 , 7 @ @ public class FailoverContainer { <nl> } <nl> <nl> @ Override <nl> - public final String toString ( ) { <nl> + public String toString ( ) { <nl> return MoreObjects . toStringHelper ( this ) <nl> . omitNullValues ( ) <nl> . add ( " file " , file ) <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class FailoverContainer { <nl> return new Builder ( ) ; <nl> } <nl> <nl> - public static class Builder { <nl> + public static final class Builder { <nl> private String file ; <nl> private int [ ] status ; <nl> <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class FailoverContainer { <nl> return this ; <nl> } <nl> <nl> - public Builder withStatus ( int [ ] status ) { <nl> + public Builder withStatus ( final int [ ] status ) { <nl> this . status = status ; <nl> return this ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> index e579711 . . 39bef6a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java <nl> @ @ - 4 , 12 + 4 , 13 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . parser . deserializer . FailoverContainerDeserializer ; <nl> + import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . playback ; <nl> <nl> @ JsonDeserialize ( using = FailoverContainerDeserializer . class ) <nl> public class FailoverContainer { <nl> - private String failover ; <nl> + private String file ; <nl> private int [ ] status ; <nl> <nl> private FailoverContainer ( ) { <nl> @ @ - 17 , 18 + 18 , 27 @ @ public class FailoverContainer { <nl> <nl> public Failover asFailover ( ) { <nl> if ( this . status = = null ) { <nl> - return Moco . failover ( failover ) ; <nl> + return Moco . failover ( file ) ; <nl> } <nl> <nl> - return Moco . failover ( failover , this . status ) ; <nl> + return Moco . failover ( file , this . status ) ; <nl> } <nl> <nl> public Failover asPlayback ( ) { <nl> if ( this . status = = null ) { <nl> - return playback ( failover ) ; <nl> + return playback ( file ) ; <nl> } <nl> <nl> - return playback ( failover , this . status ) ; <nl> + return playback ( file , this . status ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public final String toString ( ) { <nl> + return MoreObjects . toStringHelper ( this ) <nl> + . omitNullValues ( ) <nl> + . add ( " file " , file ) <nl> + . add ( " status " , status ) <nl> + . toString ( ) ; <nl> } <nl> <nl> public static Builder builder ( ) { <nl> @ @ - 41 , 7 + 51 , 7 @ @ public class FailoverContainer { <nl> <nl> public FailoverContainer build ( ) { <nl> FailoverContainer container = new FailoverContainer ( ) ; <nl> - container . failover = file ; <nl> + container . file = file ; <nl> container . status = status ; <nl> return container ; <nl> }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java 
 index 39bef6a . . 8f9db46 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java 
 @ @ - 9 , 7 + 9 , 7 @ @ import com . google . common . base . MoreObjects ; 
 import static com . github . dreamhead . moco . Moco . playback ; 
 
 @ JsonDeserialize ( using = FailoverContainerDeserializer . class ) 
 - public class FailoverContainer { 
 + public final class FailoverContainer { 
 private String file ; 
 private int [ ] status ; 
 
 @ @ - 33 , 7 + 33 , 7 @ @ public class FailoverContainer { 
 } 
 
 @ Override 
 - public final String toString ( ) { 
 + public String toString ( ) { 
 return MoreObjects . toStringHelper ( this ) 
 . omitNullValues ( ) 
 . add ( " file " , file ) 
 @ @ - 45 , 7 + 45 , 7 @ @ public class FailoverContainer { 
 return new Builder ( ) ; 
 } 
 
 - public static class Builder { 
 + public static final class Builder { 
 private String file ; 
 private int [ ] status ; 
 
 @ @ - 61 , 7 + 61 , 7 @ @ public class FailoverContainer { 
 return this ; 
 } 
 
 - public Builder withStatus ( int [ ] status ) { 
 + public Builder withStatus ( final int [ ] status ) { 
 this . status = status ; 
 return this ; 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java 
 index e579711 . . 39bef6a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / FailoverContainer . java 
 @ @ - 4 , 12 + 4 , 13 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . parser . deserializer . FailoverContainerDeserializer ; 
 + import com . google . common . base . MoreObjects ; 
 
 import static com . github . dreamhead . moco . Moco . playback ; 
 
 @ JsonDeserialize ( using = FailoverContainerDeserializer . class ) 
 public class FailoverContainer { 
 - private String failover ; 
 + private String file ; 
 private int [ ] status ; 
 
 private FailoverContainer ( ) { 
 @ @ - 17 , 18 + 18 , 27 @ @ public class FailoverContainer { 
 
 public Failover asFailover ( ) { 
 if ( this . status = = null ) { 
 - return Moco . failover ( failover ) ; 
 + return Moco . failover ( file ) ; 
 } 
 
 - return Moco . failover ( failover , this . status ) ; 
 + return Moco . failover ( file , this . status ) ; 
 } 
 
 public Failover asPlayback ( ) { 
 if ( this . status = = null ) { 
 - return playback ( failover ) ; 
 + return playback ( file ) ; 
 } 
 
 - return playback ( failover , this . status ) ; 
 + return playback ( file , this . status ) ; 
 + } 
 + 
 + @ Override 
 + public final String toString ( ) { 
 + return MoreObjects . toStringHelper ( this ) 
 + . omitNullValues ( ) 
 + . add ( " file " , file ) 
 + . add ( " status " , status ) 
 + . toString ( ) ; 
 } 
 
 public static Builder builder ( ) { 
 @ @ - 41 , 7 + 51 , 7 @ @ public class FailoverContainer { 
 
 public FailoverContainer build ( ) { 
 FailoverContainer container = new FailoverContainer ( ) ; 
 - container . failover = file ; 
 + container . file = file ; 
 container . status = status ; 
 return container ; 
 }
