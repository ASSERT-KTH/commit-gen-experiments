BLEU SCORE: 0.07809849842300641

TEST MSG: extracted template in text container deserializer helper
GENERATED MSG: collected magic text ' template '

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index 727970b . . 9ddd13a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> + import static com . github . dreamhead . moco . parser . model . TextContainer . getTemplateName ; <nl> import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> @ @ - 28 , 30 + 29 , 25 @ @ public class TextContainerDeserializerHelper { <nl> public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> - TextContainer . Builder builder = builder ( ) ; <nl> String operation = jp . getText ( ) . trim ( ) ; <nl> - builder . withOperation ( operation ) ; <nl> + <nl> JsonToken token = jp . nextToken ( ) ; <nl> if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> - return template ( jp , builder ) ; <nl> + Template template = jp . readValueAs ( Template . class ) ; <nl> + jp . nextToken ( ) ; <nl> + return template . template ( ) ; <nl> } <nl> <nl> if ( token = = JsonToken . VALUE _ STRING ) { <nl> String text = jp . getText ( ) . trim ( ) ; <nl> jp . nextToken ( ) ; <nl> - return builder . withText ( text ) . build ( ) ; <nl> + return builder ( ) . withOperation ( operation ) . withText ( text ) . build ( ) ; <nl> } <nl> } <nl> <nl> return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> - private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> - Template template = jp . readValueAs ( Template . class ) ; <nl> - jp . nextToken ( ) ; <nl> - return builder . withText ( template . with ) . withProps ( template . toTemplateVars ( ) ) . build ( ) ; <nl> - } <nl> - <nl> protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> } <nl> @ @ - 85 , 5 + 81 , 9 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> } <nl> + <nl> + public TextContainer template ( ) { <nl> + return builder ( ) . withOperation ( getTemplateName ( ) ) . withText ( with ) . withProps ( toTemplateVars ( ) ) . build ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 043fe39 . . e28a0c9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 94 , 6 + 94 , 10 @ @ public class TextContainer implements Container { <nl> return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; <nl> } <nl> <nl> + public static String getTemplateName ( ) { <nl> + return TEMPLATE _ NAME ; <nl> + } <nl> + <nl> public boolean isForTemplate ( ) { <nl> return isForTemplate ( this . operation ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index afd1c36 . . 00860c1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 40 , 11 + 40 , 11 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> return builder . withText ( text ) . build ( ) ; <nl> } <nl> <nl> - if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + if ( TextContainer . isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> Template template = Iterators . get ( iterator , 0 ) ; <nl> jp . nextToken ( ) ; <nl> - return TextContainer . builder ( ) . withOperation ( " template " ) . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; <nl> + return builder . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 3445d70 . . be3a136 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public class ResponseSetting extends Dynamics { <nl> private ResponseHandler createResponseHandler ( Map . Entry < String , TextContainer > pair , String targetMethodName ) { <nl> TextContainer container = pair . getValue ( ) ; <nl> try { <nl> - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> } <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class ResponseSetting extends Dynamics { <nl> return invokeTarget ( name , container . getText ( ) , Resource . class ) ; <nl> } <nl> <nl> - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> if ( " version " . equalsIgnoreCase ( name ) ) { <nl> return version ( template ( container . getText ( ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index a9e09b7 . . 02cbc22 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> public class TextContainer { <nl> + public static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ; <nl> private ImmutableMap < String , Object > props ; <nl> @ @ - 28 , 6 + 29 , 15 @ @ public class TextContainer { <nl> return props ; <nl> } <nl> <nl> + public static boolean isForTemplate ( String operation ) { <nl> + return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; <nl> + } <nl> + <nl> + public boolean isForTemplate ( ) { <nl> + return isForTemplate ( this . operation ) ; <nl> + } <nl> + <nl> + <nl> @ Override <nl> public String toString ( ) { <nl> return Objects . toStringHelper ( this )

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 index 727970b . . 9ddd13a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; 
 + import static com . github . dreamhead . moco . parser . model . TextContainer . getTemplateName ; 
 import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 import static com . google . common . collect . Maps . transformEntries ; 
 @ @ - 28 , 30 + 29 , 25 @ @ public class TextContainerDeserializerHelper { 
 public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . FIELD _ NAME ) { 
 - TextContainer . Builder builder = builder ( ) ; 
 String operation = jp . getText ( ) . trim ( ) ; 
 - builder . withOperation ( operation ) ; 
 + 
 JsonToken token = jp . nextToken ( ) ; 
 if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 - return template ( jp , builder ) ; 
 + Template template = jp . readValueAs ( Template . class ) ; 
 + jp . nextToken ( ) ; 
 + return template . template ( ) ; 
 } 
 
 if ( token = = JsonToken . VALUE _ STRING ) { 
 String text = jp . getText ( ) . trim ( ) ; 
 jp . nextToken ( ) ; 
 - return builder . withText ( text ) . build ( ) ; 
 + return builder ( ) . withOperation ( operation ) . withText ( text ) . build ( ) ; 
 } 
 } 
 
 return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 } 
 
 - private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { 
 - Template template = jp . readValueAs ( Template . class ) ; 
 - jp . nextToken ( ) ; 
 - return builder . withText ( template . with ) . withProps ( template . toTemplateVars ( ) ) . build ( ) ; 
 - } 
 - 
 protected TextContainer text ( final JsonParser jp ) throws IOException { 
 return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 } 
 @ @ - 85 , 5 + 81 , 9 @ @ public class TextContainerDeserializerHelper { 
 } 
 return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; 
 } 
 + 
 + public TextContainer template ( ) { 
 + return builder ( ) . withOperation ( getTemplateName ( ) ) . withText ( with ) . withProps ( toTemplateVars ( ) ) . build ( ) ; 
 + } 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index 043fe39 . . e28a0c9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 94 , 6 + 94 , 10 @ @ public class TextContainer implements Container { 
 return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; 
 } 
 
 + public static String getTemplateName ( ) { 
 + return TEMPLATE _ NAME ; 
 + } 
 + 
 public boolean isForTemplate ( ) { 
 return isForTemplate ( this . operation ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index afd1c36 . . 00860c1 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 40 , 11 + 40 , 11 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 return builder . withText ( text ) . build ( ) ; 
 } 
 
 - if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 + if ( TextContainer . isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; 
 Template template = Iterators . get ( iterator , 0 ) ; 
 jp . nextToken ( ) ; 
 - return TextContainer . builder ( ) . withOperation ( " template " ) . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; 
 + return builder . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; 
 } 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 3445d70 . . be3a136 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 138 , 7 + 138 , 7 @ @ public class ResponseSetting extends Dynamics { 
 private ResponseHandler createResponseHandler ( Map . Entry < String , TextContainer > pair , String targetMethodName ) { 
 TextContainer container = pair . getValue ( ) ; 
 try { 
 - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { 
 + if ( container . isForTemplate ( ) ) { 
 Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; 
 } 
 @ @ - 160 , 7 + 160 , 7 @ @ public class ResponseSetting extends Dynamics { 
 return invokeTarget ( name , container . getText ( ) , Resource . class ) ; 
 } 
 
 - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { 
 + if ( container . isForTemplate ( ) ) { 
 if ( " version " . equalsIgnoreCase ( name ) ) { 
 return version ( template ( container . getText ( ) ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index a9e09b7 . . 02cbc22 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableMap ; 
 
 public class TextContainer { 
 + public static final String TEMPLATE _ NAME = " template " ; 
 private String text ; 
 private String operation ; 
 private ImmutableMap < String , Object > props ; 
 @ @ - 28 , 6 + 29 , 15 @ @ public class TextContainer { 
 return props ; 
 } 
 
 + public static boolean isForTemplate ( String operation ) { 
 + return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; 
 + } 
 + 
 + public boolean isForTemplate ( ) { 
 + return isForTemplate ( this . operation ) ; 
 + } 
 + 
 + 
 @ Override 
 public String toString ( ) { 
 return Objects . toStringHelper ( this )
