BLEU SCORE: 0.16233395773754944

TEST MSG: renamed monitor factory to watcher factory
GENERATED MSG: introduced abstract watcher factory

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 88b6e82 . . 9c4faed 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> - import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; <nl> + import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . File ; <nl> @ @ - 11 , 7 + 11 , 7 @ @ import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFil <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> <nl> public class RunnerFactory { <nl> - private final MonitorFactory factory = new MonitorFactory ( ) ; <nl> + private final WatcherFactory factory = new WatcherFactory ( ) ; <nl> private final String shutdownKey ; <nl> <nl> public RunnerFactory ( final String shutdownKey ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> deleted file mode 100644 <nl> index 383d8d3 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 34 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . github . dreamhead . moco . runner . FileRunner ; <nl> - import com . github . dreamhead . moco . runner . Runner ; <nl> - import com . google . common . base . Optional ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public class MonitorFactory { <nl> - private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> - <nl> - public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> - final Optional < Integer > shutdownPort , <nl> - final String shutdownKey ) { <nl> - return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { <nl> - @ Override <nl> - public void onShutdown ( ) { <nl> - runner . stop ( ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> - return factory . createWatcher ( fileRunner , file ) ; <nl> - } <nl> - <nl> - public Watcher createSettingWatcher ( final File settingsFile , <nl> - final Iterable < File > configurationFiles , <nl> - final FileRunner fileRunner ) { <nl> - ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> - return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . b5d7cd1 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . github . dreamhead . moco . runner . Runner ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class WatcherFactory { <nl> + private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> + <nl> + public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> + final Optional < Integer > shutdownPort , <nl> + final String shutdownKey ) { <nl> + return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { <nl> + @ Override <nl> + public void onShutdown ( ) { <nl> + runner . stop ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> + return factory . createWatcher ( fileRunner , file ) ; <nl> + } <nl> + <nl> + public Watcher createSettingWatcher ( final File settingsFile , <nl> + final Iterable < File > configurationFiles , <nl> + final FileRunner fileRunner ) { <nl> + ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> + return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 413be88 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> + protected abstract Watcher doCreate ( final FileRunner fileRunner , final File file ) ; <nl> + <nl> + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + <nl> + if ( files . length = = 1 ) { <nl> + return doCreate ( fileRunner , files [ 0 ] ) ; <nl> + } <nl> + <nl> + return doCreate ( fileRunner , files ) ; <nl> + } <nl> + <nl> + private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> + @ Override <nl> + public Watcher apply ( final File file ) { <nl> + return doCreate ( fileRunner , file ) ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index f533e49 . . 15f5aaf 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import com . github . dreamhead . moco . runner . FileRunner ; <nl> - import com . google . common . base . Function ; <nl> import org . apache . commons . io . monitor . FileAlterationListener ; <nl> import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> @ @ - 13 , 37 + 12 , 12 @ @ import java . io . File ; <nl> import java . io . FileFilter ; <nl> <nl> import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class CommonsIoWatcherFactory implements FileWatcherFactory { <nl> + public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> <nl> - @ Override <nl> - public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> - if ( files . length = = 0 ) { <nl> - throw new IllegalArgumentException ( " No file is specified " ) ; <nl> - } <nl> - <nl> - FileAlterationListener listener = createListener ( fileRunner ) ; <nl> - if ( files . length = = 1 ) { <nl> - File file = files [ 0 ] ; <nl> - return createWatcher ( file , listener ) ; <nl> - } <nl> - <nl> - return createFilesWatcher ( files , listener ) ; <nl> - } <nl> - <nl> - private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> - return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; <nl> - } <nl> - <nl> - private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> - @ Override <nl> - public Watcher apply ( final File file ) { <nl> - return createWatcher ( file , listener ) ; <nl> - } <nl> - } ) ) ; <nl> + protected Watcher doCreate ( final FileRunner fileRunner , final File file ) { <nl> + return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , createListener ( fileRunner ) ) ) ) ; <nl> } <nl> <nl> private FileAlterationListener createListener ( final FileRunner fileRunner ) { <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 13e5cc4 . . cc8a2d8 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> - import com . github . dreamhead . moco . util . Idles ; <nl> import org . apache . commons . io . FilenameUtils ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 10 , 7 + 9 , 6 @ @ import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . PrintStream ; <nl> - import java . util . concurrent . TimeUnit ; <nl> <nl> import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ;

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index 88b6e82 . . 9c4faed 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 - import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; 
 + import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; 
 import com . google . common . base . Optional ; 
 
 import java . io . File ; 
 @ @ - 11 , 7 + 11 , 7 @ @ import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFil 
 import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; 
 
 public class RunnerFactory { 
 - private final MonitorFactory factory = new MonitorFactory ( ) ; 
 + private final WatcherFactory factory = new WatcherFactory ( ) ; 
 private final String shutdownKey ; 
 
 public RunnerFactory ( final String shutdownKey ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 deleted file mode 100644 
 index 383d8d3 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 + + + / dev / null 
 @ @ - 1 , 34 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import com . github . dreamhead . moco . runner . FileRunner ; 
 - import com . github . dreamhead . moco . runner . Runner ; 
 - import com . google . common . base . Optional ; 
 - import com . google . common . collect . ImmutableList ; 
 - 
 - import java . io . File ; 
 - 
 - public class MonitorFactory { 
 - private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; 
 - 
 - public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , 
 - final Optional < Integer > shutdownPort , 
 - final String shutdownKey ) { 
 - return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { 
 - @ Override 
 - public void onShutdown ( ) { 
 - runner . stop ( ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { 
 - return factory . createWatcher ( fileRunner , file ) ; 
 - } 
 - 
 - public Watcher createSettingWatcher ( final File settingsFile , 
 - final Iterable < File > configurationFiles , 
 - final FileRunner fileRunner ) { 
 - ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; 
 - return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 new file mode 100644 
 index 0000000 . . b5d7cd1 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + import com . github . dreamhead . moco . runner . Runner ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableList ; 
 + 
 + import java . io . File ; 
 + 
 + public class WatcherFactory { 
 + private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; 
 + 
 + public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , 
 + final Optional < Integer > shutdownPort , 
 + final String shutdownKey ) { 
 + return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { 
 + @ Override 
 + public void onShutdown ( ) { 
 + runner . stop ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { 
 + return factory . createWatcher ( fileRunner , file ) ; 
 + } 
 + 
 + public Watcher createSettingWatcher ( final File settingsFile , 
 + final Iterable < File > configurationFiles , 
 + final FileRunner fileRunner ) { 
 + ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; 
 + return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 new file mode 100644 
 index 0000000 . . 413be88 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + import com . google . common . base . Function ; 
 + 
 + import java . io . File ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 + public abstract class AbstractWatcherFactory implements FileWatcherFactory { 
 + protected abstract Watcher doCreate ( final FileRunner fileRunner , final File file ) ; 
 + 
 + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 + if ( files . length = = 0 ) { 
 + throw new IllegalArgumentException ( " No file is specified " ) ; 
 + } 
 + 
 + if ( files . length = = 1 ) { 
 + return doCreate ( fileRunner , files [ 0 ] ) ; 
 + } 
 + 
 + return doCreate ( fileRunner , files ) ; 
 + } 
 + 
 + private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { 
 + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 + @ Override 
 + public Watcher apply ( final File file ) { 
 + return doCreate ( fileRunner , file ) ; 
 + } 
 + } ) ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 index f533e49 . . 15f5aaf 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . runner . watcher ; 
 
 import com . github . dreamhead . moco . runner . FileRunner ; 
 - import com . google . common . base . Function ; 
 import org . apache . commons . io . monitor . FileAlterationListener ; 
 import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 @ @ - 13 , 37 + 12 , 12 @ @ import java . io . File ; 
 import java . io . FileFilter ; 
 
 import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; 
 - import static com . google . common . collect . FluentIterable . from ; 
 
 - public class CommonsIoWatcherFactory implements FileWatcherFactory { 
 + public class CommonsIoWatcherFactory extends AbstractWatcherFactory { 
 private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; 
 
 - @ Override 
 - public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 - if ( files . length = = 0 ) { 
 - throw new IllegalArgumentException ( " No file is specified " ) ; 
 - } 
 - 
 - FileAlterationListener listener = createListener ( fileRunner ) ; 
 - if ( files . length = = 1 ) { 
 - File file = files [ 0 ] ; 
 - return createWatcher ( file , listener ) ; 
 - } 
 - 
 - return createFilesWatcher ( files , listener ) ; 
 - } 
 - 
 - private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { 
 - return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; 
 - } 
 - 
 - private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { 
 - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 - @ Override 
 - public Watcher apply ( final File file ) { 
 - return createWatcher ( file , listener ) ; 
 - } 
 - } ) ) ; 
 + protected Watcher doCreate ( final FileRunner fileRunner , final File file ) { 
 + return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , createListener ( fileRunner ) ) ) ) ; 
 } 
 
 private FileAlterationListener createListener ( final FileRunner fileRunner ) { 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 index 13e5cc4 . . cc8a2d8 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 - import com . github . dreamhead . moco . util . Idles ; 
 import org . apache . commons . io . FilenameUtils ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 10 , 7 + 9 , 6 @ @ import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . PrintStream ; 
 - import java . util . concurrent . TimeUnit ; 
 
 import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ;
