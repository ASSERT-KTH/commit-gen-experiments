BLEU SCORE: 0.041961149062965476

TEST MSG: added test for many headers with same name in response
GENERATED MSG: Returned no content for head request

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index cc121ce . . 2ba1ee7 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco ; <nl> import com . google . common . io . Resources ; <nl> import com . google . common . net . HttpHeaders ; <nl> import org . apache . http . Header ; <nl> + import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> import org . apache . http . client . HttpResponseException ; <nl> @ @ - 613 , 6 + 614 , 22 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ multiple _ header _ with _ same _ name ( ) throws Exception { <nl> + server . response ( header ( " foo " , " bar " ) , header ( " foo " , " another " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + Header [ ] headers = response . getHeaders ( " foo " ) ; <nl> + assertThat ( headers . length , is ( 2 ) ) ; <nl> + assertThat ( headers [ 0 ] . getValue ( ) , is ( " bar " ) ) ; <nl> + assertThat ( headers [ 1 ] . getValue ( ) , is ( " another " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ return _ expected _ response _ for _ multiple _ specified _ query ( ) throws Exception { <nl> server . request ( and ( by ( uri ( " / foo " ) ) , eq ( query ( " param " ) , " blah " ) ) ) . response ( " bar " ) ; <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 311e162 . . 216148b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan <nl> Response response = context . getResponse ( ) ; <nl> <nl> if ( HttpRequest . class . isInstance ( request ) & & MutableHttpResponse . class . isInstance ( response ) ) { <nl> + if ( ! canResponseHaveContent ( HttpRequest . class . cast ( request ) ) ) { <nl> + return ; <nl> + } <nl> HttpRequest httpRequest = HttpRequest . class . cast ( request ) ; <nl> MutableHttpResponse httpResponse = MutableHttpResponse . class . cast ( response ) ; <nl> doWriteToResponse ( httpRequest , httpResponse ) ; <nl> @ @ - 32 , 6 + 35 , 10 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan <nl> mutableResponse . setContent ( requireResponseContent ( request ) ) ; <nl> } <nl> <nl> + private boolean canResponseHaveContent ( final HttpRequest request ) { <nl> + return ! " HEAD " . equalsIgnoreCase ( request . getMethod ( ) ) ; <nl> + } <nl> + <nl> protected void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) { <nl> MessageContent content = requireResponseContent ( httpRequest ) ; <nl> httpResponse . setContent ( content ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index cdcf9a2 . . c7981f5 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 1 , 11 + 1 , 17 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> import com . google . common . net . HttpHeaders ; <nl> - import org . apache . http . Header ; <nl> - import org . apache . http . HttpVersion ; <nl> - import org . apache . http . ProtocolVersion ; <nl> + import org . apache . http . * ; <nl> + import org . apache . http . HttpRequest ; <nl> + import org . apache . http . HttpResponse ; <nl> import org . apache . http . client . HttpResponseException ; <nl> import org . apache . http . client . fluent . Request ; <nl> + import org . apache . http . client . methods . CloseableHttpResponse ; <nl> + import org . apache . http . client . methods . HttpHead ; <nl> + import org . apache . http . impl . client . CloseableHttpClient ; <nl> + import org . apache . http . impl . client . HttpClients ; <nl> + import org . apache . http . protocol . HttpRequestExecutor ; <nl> import org . junit . Test ; <nl> <nl> import java . io . File ; <nl> @ @ - 692 , 4 + 698 , 26 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ not _ return _ response _ for _ head _ request ( ) throws Exception { <nl> + server . response ( header ( " foo " , " bar " ) , with ( template ( " $ { req . uri } " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + CloseableHttpClient httpClient = HttpClients . custom ( ) . setRequestExecutor ( new HttpRequestExecutor ( ) { <nl> + @ Override <nl> + protected boolean canResponseHaveBody ( HttpRequest request , HttpResponse response ) { <nl> + return " HEAD " . equalsIgnoreCase ( request . getRequestLine ( ) . getMethod ( ) ) <nl> + | | super . canResponseHaveBody ( request , response ) ; <nl> + } <nl> + } ) . build ( ) ; <nl> + HttpHead httpHead = new HttpHead ( remoteUrl ( " / request " ) ) ; <nl> + CloseableHttpResponse response = httpClient . execute ( httpHead ) ; <nl> + byte [ ] bytes = ByteStreams . toByteArray ( response . getEntity ( ) . getContent ( ) ) ; <nl> + assertThat ( bytes . length , is ( 0 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 index cc121ce . . 2ba1ee7 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco ; 
 import com . google . common . io . Resources ; 
 import com . google . common . net . HttpHeaders ; 
 import org . apache . http . Header ; 
 + import org . apache . http . HttpResponse ; 
 import org . apache . http . HttpVersion ; 
 import org . apache . http . ProtocolVersion ; 
 import org . apache . http . client . HttpResponseException ; 
 @ @ - 613 , 6 + 614 , 22 @ @ public class MocoTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ set _ multiple _ header _ with _ same _ name ( ) throws Exception { 
 + server . response ( header ( " foo " , " bar " ) , header ( " foo " , " another " ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + HttpResponse response = helper . getResponse ( root ( ) ) ; 
 + Header [ ] headers = response . getHeaders ( " foo " ) ; 
 + assertThat ( headers . length , is ( 2 ) ) ; 
 + assertThat ( headers [ 0 ] . getValue ( ) , is ( " bar " ) ) ; 
 + assertThat ( headers [ 1 ] . getValue ( ) , is ( " another " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ return _ expected _ response _ for _ multiple _ specified _ query ( ) throws Exception { 
 server . request ( and ( by ( uri ( " / foo " ) ) , eq ( query ( " param " ) , " blah " ) ) ) . response ( " bar " ) ; 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 index 311e162 . . 216148b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 @ @ - 22 , 6 + 22 , 9 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan 
 Response response = context . getResponse ( ) ; 
 
 if ( HttpRequest . class . isInstance ( request ) & & MutableHttpResponse . class . isInstance ( response ) ) { 
 + if ( ! canResponseHaveContent ( HttpRequest . class . cast ( request ) ) ) { 
 + return ; 
 + } 
 HttpRequest httpRequest = HttpRequest . class . cast ( request ) ; 
 MutableHttpResponse httpResponse = MutableHttpResponse . class . cast ( response ) ; 
 doWriteToResponse ( httpRequest , httpResponse ) ; 
 @ @ - 32 , 6 + 35 , 10 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan 
 mutableResponse . setContent ( requireResponseContent ( request ) ) ; 
 } 
 
 + private boolean canResponseHaveContent ( final HttpRequest request ) { 
 + return ! " HEAD " . equalsIgnoreCase ( request . getMethod ( ) ) ; 
 + } 
 + 
 protected void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) { 
 MessageContent content = requireResponseContent ( httpRequest ) ; 
 httpResponse . setContent ( content ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 index cdcf9a2 . . c7981f5 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 @ @ - 1 , 11 + 1 , 17 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . google . common . io . ByteStreams ; 
 import com . google . common . net . HttpHeaders ; 
 - import org . apache . http . Header ; 
 - import org . apache . http . HttpVersion ; 
 - import org . apache . http . ProtocolVersion ; 
 + import org . apache . http . * ; 
 + import org . apache . http . HttpRequest ; 
 + import org . apache . http . HttpResponse ; 
 import org . apache . http . client . HttpResponseException ; 
 import org . apache . http . client . fluent . Request ; 
 + import org . apache . http . client . methods . CloseableHttpResponse ; 
 + import org . apache . http . client . methods . HttpHead ; 
 + import org . apache . http . impl . client . CloseableHttpClient ; 
 + import org . apache . http . impl . client . HttpClients ; 
 + import org . apache . http . protocol . HttpRequestExecutor ; 
 import org . junit . Test ; 
 
 import java . io . File ; 
 @ @ - 692 , 4 + 698 , 26 @ @ public class MocoTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ not _ return _ response _ for _ head _ request ( ) throws Exception { 
 + server . response ( header ( " foo " , " bar " ) , with ( template ( " $ { req . uri } " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + CloseableHttpClient httpClient = HttpClients . custom ( ) . setRequestExecutor ( new HttpRequestExecutor ( ) { 
 + @ Override 
 + protected boolean canResponseHaveBody ( HttpRequest request , HttpResponse response ) { 
 + return " HEAD " . equalsIgnoreCase ( request . getRequestLine ( ) . getMethod ( ) ) 
 + | | super . canResponseHaveBody ( request , response ) ; 
 + } 
 + } ) . build ( ) ; 
 + HttpHead httpHead = new HttpHead ( remoteUrl ( " / request " ) ) ; 
 + CloseableHttpResponse response = httpClient . execute ( httpHead ) ; 
 + byte [ ] bytes = ByteStreams . toByteArray ( response . getEntity ( ) . getContent ( ) ) ; 
 + assertThat ( bytes . length , is ( 0 ) ) ; 
 + } 
 + } ) ; 
 + } 
 }
