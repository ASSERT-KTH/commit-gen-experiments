BLEU SCORE: 0.092875289995668

TEST MSG: added json https runner for junit rule
GENERATED MSG: added junit test rule for socket

TEST DIFF (one line): diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index e2fabab . . f22a184 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . junit ; <nl> <nl> import com . github . dreamhead . moco . HttpServer ; <nl> + import com . github . dreamhead . moco . HttpsCertificate ; <nl> import com . github . dreamhead . moco . RestServer ; <nl> import com . github . dreamhead . moco . Runner ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> @ @ - 9 , 6 + 10 , 7 @ @ import org . junit . rules . ExternalResource ; <nl> <nl> import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; <nl> + import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpsServer ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonSocketServer ; <nl> import static com . github . dreamhead . moco . Runner . runner ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> @ @ - 34 , 6 + 36 , 14 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ) ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonHttpsRunner ( final int port , final String filename , <nl> + final HttpsCertificate certificate ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; <nl> + checkNotNull ( certificate , " Filename should not be null " ) ; <nl> + return new MocoJunitRunner ( runner ( jsonHttpsServer ( port , file ( filename ) , certificate ) ) ) ; <nl> + } <nl> + <nl> public static MocoJunitRunner httpRunner ( final HttpServer server ) { <nl> checkNotNull ( server , " Server should not be null " ) ; <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 4d31223 <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import com . github . dreamhead . moco . HttpsCertificate ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonHttpsRunnerTest extends AbstractMocoStandaloneTest { <nl> + private final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , " src / test / resources / foo . json " , DEFAULT _ CERTIFICATE ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message _ 2 ( ) throws IOException { <nl> + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java <nl> index 87af655 . . 52f23a7 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java <nl> @ @ - 5 , 12 + 5 , 10 @ @ import org . junit . Test ; <nl> import static com . github . dreamhead . moco . HttpsCertificate . certificate ; <nl> import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . Moco . pathResource ; <nl> - import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpsServer ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl>
NEAREST DIFF (one line): diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 8c92f8e . . e47de9c 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 13 , 7 + 13 , 6 @ @ <nl> * Fix charset issue in toJson <nl> * Enhance file content type with MediaType implementation <nl> * Same name query has been supported <nl> - * Content will not be return for head request <nl> <nl> # Release 0 . 10 . 1 ( 1 - May - 2015 ) <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index 52d4663 . . 281ec58 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 2 , 10 + 2 , 12 @ @ package com . github . dreamhead . moco . junit ; <nl> <nl> import com . github . dreamhead . moco . HttpServer ; <nl> import com . github . dreamhead . moco . Runner ; <nl> + import com . github . dreamhead . moco . SocketServer ; <nl> import org . junit . rules . ExternalResource ; <nl> <nl> import static com . github . dreamhead . moco . Moco . file ; <nl> import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; <nl> + import static com . github . dreamhead . moco . MocoJsonRunner . jsonSocketServer ; <nl> <nl> public final class MocoJunitRunner extends ExternalResource { <nl> private final Runner runner ; <nl> @ @ - 22 , 6 + 24 , 14 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( Runner . runner ( server ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonSocketRunner ( final int port , final String filename ) { <nl> + return new MocoJunitRunner ( Runner . runner ( jsonSocketServer ( port , file ( filename ) ) ) ) ; <nl> + } <nl> + <nl> + public static MocoJunitRunner socketRunner ( final SocketServer server ) { <nl> + return new MocoJunitRunner ( Runner . runner ( server ) ) ; <nl> + } <nl> + <nl> @ Override <nl> protected void before ( ) throws Throwable { <nl> runner . start ( ) ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2955f8a <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoSocketHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . junit . MocoJunitRunner . jsonSocketRunner ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonSocketRunnerTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = jsonSocketRunner ( 12306 , " src / test / resources / base . json " ) ; <nl> + <nl> + private MocoSocketHelper helper ; <nl> + <nl> + @ Before <nl> + public void setup ( ) { <nl> + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ response ( ) throws Exception { <nl> + helper . connect ( ) ; <nl> + assertThat ( helper . send ( " foo " , 3 ) , is ( " bar " ) ) ; <nl> + helper . close ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoSocketRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoSocketRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 90cf4aa <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoSocketRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . SocketServer ; <nl> + import com . github . dreamhead . moco . helper . MocoSocketHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . socketServer ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . junit . MocoJunitRunner . socketRunner ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitPojoSocketRunnerTest { <nl> + public static SocketServer server ; <nl> + <nl> + static { <nl> + server = socketServer ( 12306 ) ; <nl> + server . response ( " bar \ n " ) ; <nl> + } <nl> + <nl> + @ Rule <nl> + public MocoJunitRunner runner = socketRunner ( server ) ; <nl> + <nl> + private MocoSocketHelper helper ; <nl> + <nl> + @ Before <nl> + public void setup ( ) { <nl> + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + helper . connect ( ) ; <nl> + assertThat ( helper . send ( " foo " ) , is ( " bar " ) ) ; <nl> + helper . close ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 index e2fabab . . f22a184 100644 
 - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . junit ; 
 
 import com . github . dreamhead . moco . HttpServer ; 
 + import com . github . dreamhead . moco . HttpsCertificate ; 
 import com . github . dreamhead . moco . RestServer ; 
 import com . github . dreamhead . moco . Runner ; 
 import com . github . dreamhead . moco . SocketServer ; 
 @ @ - 9 , 6 + 10 , 7 @ @ import org . junit . rules . ExternalResource ; 
 
 import static com . github . dreamhead . moco . Moco . file ; 
 import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; 
 + import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpsServer ; 
 import static com . github . dreamhead . moco . MocoJsonRunner . jsonSocketServer ; 
 import static com . github . dreamhead . moco . Runner . runner ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 @ @ - 34 , 6 + 36 , 14 @ @ public final class MocoJunitRunner extends ExternalResource { 
 return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ) ) ) ; 
 } 
 
 + public static MocoJunitRunner jsonHttpsRunner ( final int port , final String filename , 
 + final HttpsCertificate certificate ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + checkNotNullOrEmpty ( filename , " Filename should not be null " ) ; 
 + checkNotNull ( certificate , " Filename should not be null " ) ; 
 + return new MocoJunitRunner ( runner ( jsonHttpsServer ( port , file ( filename ) , certificate ) ) ) ; 
 + } 
 + 
 public static MocoJunitRunner httpRunner ( final HttpServer server ) { 
 checkNotNull ( server , " Server should not be null " ) ; 
 return new MocoJunitRunner ( runner ( server ) ) ; 
 diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java 
 new file mode 100644 
 index 0000000 . . 4d31223 
 - - - / dev / null 
 + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpsRunnerTest . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; 
 + import com . github . dreamhead . moco . HttpsCertificate ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . HttpsCertificate . certificate ; 
 + import static com . github . dreamhead . moco . Moco . pathResource ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitJsonHttpsRunnerTest extends AbstractMocoStandaloneTest { 
 + private final HttpsCertificate DEFAULT _ CERTIFICATE = certificate ( pathResource ( " cert . jks " ) , " mocohttps " , " mocohttps " ) ; 
 + 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpsRunner ( 12306 , " src / test / resources / foo . json " , DEFAULT _ CERTIFICATE ) ; 
 + 
 + @ Test 
 + public void should _ return _ expected _ message ( ) throws IOException { 
 + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ expected _ message _ 2 ( ) throws IOException { 
 + assertThat ( helper . get ( httpsRoot ( ) ) , is ( " foo " ) ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java 
 index 87af655 . . 52f23a7 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoJsonHttpsRunnerTest . java 
 @ @ - 5 , 12 + 5 , 10 @ @ import org . junit . Test ; 
 import static com . github . dreamhead . moco . HttpsCertificate . certificate ; 
 import static com . github . dreamhead . moco . Moco . file ; 
 import static com . github . dreamhead . moco . Moco . pathResource ; 
 - import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; 
 import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpsServer ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . httpsRoot ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 


NEAREST DIFF:
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index 8c92f8e . . e47de9c 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 13 , 7 + 13 , 6 @ @ 
 * Fix charset issue in toJson 
 * Enhance file content type with MediaType implementation 
 * Same name query has been supported 
 - * Content will not be return for head request 
 
 # Release 0 . 10 . 1 ( 1 - May - 2015 ) 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 index 52d4663 . . 281ec58 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 @ @ - 2 , 10 + 2 , 12 @ @ package com . github . dreamhead . moco . junit ; 
 
 import com . github . dreamhead . moco . HttpServer ; 
 import com . github . dreamhead . moco . Runner ; 
 + import com . github . dreamhead . moco . SocketServer ; 
 import org . junit . rules . ExternalResource ; 
 
 import static com . github . dreamhead . moco . Moco . file ; 
 import static com . github . dreamhead . moco . MocoJsonRunner . jsonHttpServer ; 
 + import static com . github . dreamhead . moco . MocoJsonRunner . jsonSocketServer ; 
 
 public final class MocoJunitRunner extends ExternalResource { 
 private final Runner runner ; 
 @ @ - 22 , 6 + 24 , 14 @ @ public final class MocoJunitRunner extends ExternalResource { 
 return new MocoJunitRunner ( Runner . runner ( server ) ) ; 
 } 
 
 + public static MocoJunitRunner jsonSocketRunner ( final int port , final String filename ) { 
 + return new MocoJunitRunner ( Runner . runner ( jsonSocketServer ( port , file ( filename ) ) ) ) ; 
 + } 
 + 
 + public static MocoJunitRunner socketRunner ( final SocketServer server ) { 
 + return new MocoJunitRunner ( Runner . runner ( server ) ) ; 
 + } 
 + 
 @ Override 
 protected void before ( ) throws Throwable { 
 runner . start ( ) ; 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerTest . java 
 new file mode 100644 
 index 0000000 . . 2955f8a 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerTest . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . helper . MocoSocketHelper ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static com . github . dreamhead . moco . junit . MocoJunitRunner . jsonSocketRunner ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitJsonSocketRunnerTest { 
 + @ Rule 
 + public MocoJunitRunner runner = jsonSocketRunner ( 12306 , " src / test / resources / base . json " ) ; 
 + 
 + private MocoSocketHelper helper ; 
 + 
 + @ Before 
 + public void setup ( ) { 
 + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ expected _ response ( ) throws Exception { 
 + helper . connect ( ) ; 
 + assertThat ( helper . send ( " foo " , 3 ) , is ( " bar " ) ) ; 
 + helper . close ( ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoSocketRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoSocketRunnerTest . java 
 new file mode 100644 
 index 0000000 . . 90cf4aa 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / junit / MocoJunitPojoSocketRunnerTest . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . SocketServer ; 
 + import com . github . dreamhead . moco . helper . MocoSocketHelper ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . Moco . socketServer ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static com . github . dreamhead . moco . junit . MocoJunitRunner . socketRunner ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitPojoSocketRunnerTest { 
 + public static SocketServer server ; 
 + 
 + static { 
 + server = socketServer ( 12306 ) ; 
 + server . response ( " bar \ n " ) ; 
 + } 
 + 
 + @ Rule 
 + public MocoJunitRunner runner = socketRunner ( server ) ; 
 + 
 + private MocoSocketHelper helper ; 
 + 
 + @ Before 
 + public void setup ( ) { 
 + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ expected _ message ( ) throws IOException { 
 + helper . connect ( ) ; 
 + assertThat ( helper . send ( " foo " ) , is ( " bar " ) ) ; 
 + helper . close ( ) ; 
 + } 
 + }
