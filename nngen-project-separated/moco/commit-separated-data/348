BLEU SCORE: 0.07986788803078405

TEST MSG: support other json encoding
GENERATED MSG: logged handle exception

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> index 5e3c54a . . d5aa3a0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> @ @ - 34 , 8 + 34 , 8 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { <nl> <nl> private boolean doMatch ( final Request request , final byte [ ] content ) { <nl> try { <nl> - JsonNode requestNode = mapper . readTree ( content ) ; <nl> - JsonNode resourceNode = mapper . readTree ( expected . readFor ( of ( request ) ) . getContent ( ) ) ; <nl> + JsonNode requestNode = mapper . readTree ( new String ( content ) ) ; <nl> + JsonNode resourceNode = mapper . readTree ( expected . readFor ( of ( request ) ) . toString ( ) ) ; <nl> return requestNode . equals ( resourceNode ) ; <nl> } catch ( JsonProcessingException jpe ) { <nl> return false ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java <nl> index a339751 . . e76abea 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java <nl> @ @ - 19 , 6 + 19 , 11 @ @ public class MocoEventListener { <nl> logger . info ( " Request received : \ n \ n { } \ n " , toMessageString ( request ) ) ; <nl> } <nl> <nl> + @ Subscribe <nl> + public void onException ( Exception e ) { <nl> + logger . error ( " Exception thrown " , e ) ; <nl> + } <nl> + <nl> private String toMessageString ( HttpRequest request ) { <nl> StringBuilder buf = new StringBuilder ( ) ; <nl> appendProtocolLine ( request , buf ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> index 98fb907 . . 7c6c290 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ public class MocoHandler extends SimpleChannelHandler { <nl> try { <nl> return doGetHttpResponse ( request ) ; <nl> } catch ( Exception e ) { <nl> + eventBus . post ( e ) ; <nl> return DEFAULT _ HTTP _ RESPONSE ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> index b342348 . . 780f1ed 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . matcher ; <nl> <nl> + import com . fasterxml . jackson . core . JsonProcessingException ; <nl> import com . fasterxml . jackson . databind . JsonNode ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> @ @ - 26 , 6 + 27 , 8 @ @ public class JsonRequestMatcher implements RequestMatcher { <nl> JsonNode requestNode = mapper . readTree ( extractor . extract ( request ) ) ; <nl> JsonNode resourceNode = mapper . readTree ( resource . asByteArray ( ) ) ; <nl> return requestNode . equals ( resourceNode ) ; <nl> + } catch ( JsonProcessingException jpe ) { <nl> + return false ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 index 5e3c54a . . d5aa3a0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 @ @ - 34 , 8 + 34 , 8 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { 
 
 private boolean doMatch ( final Request request , final byte [ ] content ) { 
 try { 
 - JsonNode requestNode = mapper . readTree ( content ) ; 
 - JsonNode resourceNode = mapper . readTree ( expected . readFor ( of ( request ) ) . getContent ( ) ) ; 
 + JsonNode requestNode = mapper . readTree ( new String ( content ) ) ; 
 + JsonNode resourceNode = mapper . readTree ( expected . readFor ( of ( request ) ) . toString ( ) ) ; 
 return requestNode . equals ( resourceNode ) ; 
 } catch ( JsonProcessingException jpe ) { 
 return false ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java 
 index a339751 . . e76abea 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoEventListener . java 
 @ @ - 19 , 6 + 19 , 11 @ @ public class MocoEventListener { 
 logger . info ( " Request received : \ n \ n { } \ n " , toMessageString ( request ) ) ; 
 } 
 
 + @ Subscribe 
 + public void onException ( Exception e ) { 
 + logger . error ( " Exception thrown " , e ) ; 
 + } 
 + 
 private String toMessageString ( HttpRequest request ) { 
 StringBuilder buf = new StringBuilder ( ) ; 
 appendProtocolLine ( request , buf ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java 
 index 98fb907 . . 7c6c290 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java 
 @ @ - 46 , 6 + 46 , 7 @ @ public class MocoHandler extends SimpleChannelHandler { 
 try { 
 return doGetHttpResponse ( request ) ; 
 } catch ( Exception e ) { 
 + eventBus . post ( e ) ; 
 return DEFAULT _ HTTP _ RESPONSE ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 index b342348 . . 780f1ed 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . matcher ; 
 
 + import com . fasterxml . jackson . core . JsonProcessingException ; 
 import com . fasterxml . jackson . databind . JsonNode ; 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . github . dreamhead . moco . RequestExtractor ; 
 @ @ - 26 , 6 + 27 , 8 @ @ public class JsonRequestMatcher implements RequestMatcher { 
 JsonNode requestNode = mapper . readTree ( extractor . extract ( request ) ) ; 
 JsonNode resourceNode = mapper . readTree ( resource . asByteArray ( ) ) ; 
 return requestNode . equals ( resourceNode ) ; 
 + } catch ( JsonProcessingException jpe ) { 
 + return false ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 }
