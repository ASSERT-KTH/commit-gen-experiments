BLEU SCORE: 0.4347208719449915

TEST MSG: documented release 0 . 12 . 0
GENERATED MSG: documented release 0 . 11 . 1

TEST DIFF (one line): diff - - git a / README . md b / README . md <nl> index e0e98e5 . . 03dfcd2 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> Moco is an easy setup stub framework . <nl> <nl> # # Latest Release <nl> - * _ _ 0 . 11 . 1 _ _ <nl> + * _ _ 0 . 12 . 0 _ _ <nl> <nl> More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) <nl> <nl> @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w <nl> In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . <nl> <nl> # # Quick Start <nl> - * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> + * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) <nl> * Write your own configuration file to describe your Moco server configuration as follow : <nl> ` ` ` json <nl> [ <nl> diff - - git a / build . gradle b / build . gradle <nl> index 6f2fd74 . . 771fda7 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 23 , 7 + 23 , 7 @ @ idea { <nl> subprojects { <nl> apply plugin : ' java ' <nl> group = ' com . github . dreamhead ' <nl> - version = ' 0 . 11 . 1 - SNAPSHOT ' <nl> + version = ' 0 . 12 . 0 - SNAPSHOT ' <nl> sourceCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> targetCompatibility = JavaVersion . VERSION _ 1 _ 7 <nl> <nl> diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 397a2cc . . 93a502e 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - # Release <nl> + # Release 0 . 12 . 0 ( 24 - Dec - 2017 ) <nl> <nl> * Upgrade minimal Java version to Java 7 <nl> <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index a5c88ac . . 70edeb2 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 539 , 7 + 539 , 7 @ @ server . request ( json ( text ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; <nl> ` ` ` <nl> <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> ` json ` will return a resource from next release <nl> <nl> ` ` ` java <nl> @ @ - 581 , 7 + 581 , 7 @ @ You can give a POJO to Java API , it will be converted JSON text . <nl> server . request ( json ( pojo ) ) . response ( " foo " ) ; <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> ` json ` will return a resource from next release <nl> <nl> ` ` ` java <nl> @ @ - 1575 , 7 + 1575 , 7 @ @ The other response settings are able to be set as well . <nl> server . request ( by ( uri ( " / seq " ) ) ) . response ( seq ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> ` ` ` json <nl> { <nl> @ @ - 1632 , 8 + 1632 , 8 @ @ You can give a POJO to Java API , it will be converted JSON text . Hint , this api <nl> server . request ( by ( uri ( " / json " ) ) ) . response ( toJson ( pojo ) ) ; <nl> ` ` ` <nl> <nl> - * * @ Since will be at next realease * * <nl> - ` toJson ` will be removed from next release , use ` json ` instead . <nl> + * * @ Since 0 . 12 . 0 * * <nl> + ` toJson ` will be removed from 0 . 12 . 0 , use ` json ` instead . <nl> <nl> ` ` ` java <nl> server . request ( by ( uri ( " / json " ) ) ) . response ( json ( pojo ) ) ; <nl> @ @ - 2226 , 7 + 2226 , 7 @ @ server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / ano <nl> } <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> If your post content is JSON , you can use ` json ` in your configuration directly . <nl> <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index a65b0d7 . . f7a1f90 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Standalone Command Line <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> @ @ - 74 , 7 + 74 , 7 @ @ java - jar moco - runner - < version > - standalone . jar http - p 12306 - c foo . json <nl> ` ` ` <nl> <nl> # # # Many Configuration Files <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> If you have many configuration files , you can use glob matcher as ` - c ` argument . <nl> But you need to make sure the configuration that don ' t conflict . <nl> diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index 7761a47 . . c78f6a6 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 197 , 7 + 197 , 7 @ @ When you issue any request to server , it will return response with " foo " , " bar " <nl> <nl> # # # Glob Inclusion <nl> <nl> - * * @ Since will be at the next release * * <nl> + * * @ Since 0 . 12 . 0 * * <nl> <nl> You may need include many files , glob can help you to do this . <nl> <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index de0620b . . 479fda3 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 31 , 7 + 31 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in <nl> < dependency > <nl> < groupId > com . github . dreamhead < / groupId > <nl> < artifactId > moco - core < / artifactId > <nl> - < version > 0 . 11 . 1 < / version > <nl> + < version > 0 . 12 . 0 < / version > <nl> < / dependency > <nl> ` ` ` <nl> <nl> @ @ - 44 , 7 + 44 , 7 @ @ repositories { <nl> <nl> dependencies { <nl> testCompile ( <nl> - " com . github . dreamhead : moco - core : 0 . 11 . 1 " , <nl> + " com . github . dreamhead : moco - core : 0 . 12 . 0 " , <nl> ) <nl> } <nl> ` ` ` <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class MocoRunnerTest { <nl> # # Standalone <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 5d6fdc9 . . b5d724c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 92 , 7 + 92 , 6 @ @ public final class SettingRunner implements Runner { <nl> @ Override <nl> public Iterable < ? extends File > apply ( final GlobalSetting input ) { <nl> return from ( input . includes ( ) ) . transform ( toFile ( ) ) ; <nl> - <nl> } <nl> } ; <nl> }
NEAREST DIFF (one line): diff - - git a / README . md b / README . md <nl> index 4947446 . . e0e98e5 100644 <nl> - - - a / README . md <nl> + + + b / README . md <nl> @ @ - 9 , 7 + 9 , 7 @ @ <nl> Moco is an easy setup stub framework . <nl> <nl> # # Latest Release <nl> - * _ _ 0 . 11 . 0 _ _ <nl> + * _ _ 0 . 11 . 1 _ _ <nl> <nl> More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) <nl> <nl> @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w <nl> In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . <nl> <nl> # # Quick Start <nl> - * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> + * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> * Write your own configuration file to describe your Moco server configuration as follow : <nl> ` ` ` json <nl> [ <nl> @ @ - 79 , 7 + 79 , 7 @ @ git clone git @ github . com : dreamhead / moco . git <nl> Check out what you can help [ here ] ( moco - doc / plan . md ) if you do not have any existing idea . <nl> <nl> # # Copyright and license <nl> - Copyright 2012 - 2015 ZHENG Ye <nl> + Copyright 2012 - 2017 ZHENG Ye <nl> <nl> Licensed under MIT License ( the " License " ) ; You may obtain a copy of the License in the LICENSE file , or at : <nl> <nl> diff - - git a / build . gradle b / build . gradle <nl> index dfbcc25 . . a30e390 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 23 , 7 + 23 , 7 @ @ idea { <nl> subprojects { <nl> apply plugin : ' java ' <nl> group = ' com . github . dreamhead ' <nl> - version = ' 0 . 11 . 0 - SNAPSHOT ' <nl> + version = ' 0 . 11 . 1 - SNAPSHOT ' <nl> sourceCompatibility = JavaVersion . VERSION _ 1 _ 6 <nl> targetCompatibility = JavaVersion . VERSION _ 1 _ 6 <nl> <nl> diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 66ccf14 . . dc4b61d 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 12 + 1 , 12 @ @ <nl> - # Release <nl> + # Release 0 . 11 . 1 ( 12 - Jun - 2017 ) <nl> <nl> - # APIs <nl> + # # APIs <nl> * Template for Event action <nl> * Remove publish API with Optional , e . g . file and pathResource <nl> * Proxy with content resource as url <nl> * Add cookie attribute API <nl> <nl> - # JUnit <nl> + # # JUnit <nl> * HTTPS JUnit runner for POJO , JSON and from path resource <nl> * Http JSON runner with path resource <nl> * Socket JSON runner with path resource <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 3daa461 . . f974ddb 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1308 , 7 + 1308 , 7 @ @ Cookie attributes are sent in http response , which are used by browsers to deter <nl> <nl> # # # # # Path <nl> <nl> - @ Since will be at next version <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> Path cookie attribute defines the scope of the cookie . You can add your own ` path ` cookie attribute to your response . <nl> <nl> @ @ - 1341 , 7 + 1341 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , path ( " / " ) ) , status ( 302 ) ) ; <nl> <nl> # # # # # Domain <nl> <nl> - @ Since will be at next version <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> Domain cookie attribute defines the scope of the cookie . You can add your own ` domain ` cookie attribute to your response . <nl> <nl> @ @ - 1374 , 7 + 1374 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; <nl> <nl> # # # # # Secure <nl> <nl> - @ Since will be at next version <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> A secure cookie can only be transmitted over an encrypted connection . You can add your own ` secure ` cookie attribute to your response . <nl> <nl> @ @ - 1407 , 7 + 1407 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; <nl> <nl> # # # # # HTTP Only <nl> <nl> - @ Since will be at next version <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> An http only cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . <nl> <nl> @ @ - 1440 , 7 + 1440 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , httpOnly ( ) ) , status ( 302 ) ) ; <nl> <nl> # # # # # Max Age <nl> <nl> - @ Since will be at next version <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> The Max - Age attribute can be used to set the cookie ' s expiration as an interval of seconds in the future , relative to the time the browser received the cookie . You can add your own ` maxAge ` cookie attribute to your response . <nl> <nl> @ @ - 2024 , 7 + 2024 , 7 @ @ server . response ( file ( template ( " $ { req . headers [ ' foo ' ] . txt " ) ) ) ; <nl> ` ` ` <nl> <nl> # # # Proxy <nl> - * * @ Since will be at the next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> You can use template in proxy API , so that you can dynamically decide which URL you will forward the request to . <nl> <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index 4a1c32e . . ac5ddd2 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> # Standalone Command Line <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl> <nl> diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 879f4a7 . . 1eb5b55 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { <nl> } <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> JSON configuration can be retrieved from the classpath . <nl> <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { <nl> <nl> # # # POJO HTTPS Server <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> * * httpsRunner * * can reference a HttpsServer object . <nl> <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class MocoJunitPojoHttpRunnerTest { <nl> <nl> # # # JSON HTTPS Server <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> * * jsonHttpsRunner * * can reference a JSON file as a HTTP server . <nl> <nl> @ @ - 107 , 7 + 107 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { <nl> } <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> JSON configuration can be retrieved from the classpath . <nl> <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class MocoJunitJsonSocketRunnerTest { <nl> } <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> JSON configuration can be retrieved from the classpath . <nl> <nl> @ @ - 201 , 7 + 201 , 7 @ @ public class MocoJunitPojoRestRunnerTest { <nl> <nl> # # # JSON Rest Server <nl> <nl> - * * @ Since 0 . 11 . 0 * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> * * jsonRestRunner * * can reference a JSON file as a HTTP server . <nl> <nl> @ @ - 214 , 7 + 214 , 7 @ @ public class MocoJunitJsonRestRunnerTest { <nl> } <nl> ` ` ` <nl> <nl> - * * @ Since will be at next release * * <nl> + * * @ Since 0 . 11 . 1 * * <nl> <nl> JSON configuration can be retrieved from the classpath . <nl> <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index bd3003b . . e2dc943 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 30 , 7 + 30 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in <nl> < dependency > <nl> < groupId > com . github . dreamhead < / groupId > <nl> < artifactId > moco - core < / artifactId > <nl> - < version > 0 . 11 . 0 < / version > <nl> + < version > 0 . 11 . 1 < / version > <nl> < / dependency > <nl> ` ` ` <nl> <nl> @ @ - 43 , 7 + 43 , 7 @ @ repositories { <nl> <nl> dependencies { <nl> testCompile ( <nl> - " com . github . dreamhead : moco - core : 0 . 11 . 0 " , <nl> + " com . github . dreamhead : moco - core : 0 . 11 . 1 " , <nl> ) <nl> } <nl> ` ` ` <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class MocoRunnerTest { <nl> # # Standalone <nl> <nl> Moco can be used as standalone to run with configuration and you can download standalone directly : <nl> - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) <nl> + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) <nl> <nl> First of all , a JSON configuration file needs to be provided to start Moco . <nl>

TEST DIFF:
diff - - git a / README . md b / README . md 
 index e0e98e5 . . 03dfcd2 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 9 , 7 + 9 , 7 @ @ 
 Moco is an easy setup stub framework . 
 
 # # Latest Release 
 - * _ _ 0 . 11 . 1 _ _ 
 + * _ _ 0 . 12 . 0 _ _ 
 
 More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) 
 
 @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w 
 In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . 
 
 # # Quick Start 
 - * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) 
 + * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) 
 * Write your own configuration file to describe your Moco server configuration as follow : 
 ` ` ` json 
 [ 
 diff - - git a / build . gradle b / build . gradle 
 index 6f2fd74 . . 771fda7 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 23 , 7 + 23 , 7 @ @ idea { 
 subprojects { 
 apply plugin : ' java ' 
 group = ' com . github . dreamhead ' 
 - version = ' 0 . 11 . 1 - SNAPSHOT ' 
 + version = ' 0 . 12 . 0 - SNAPSHOT ' 
 sourceCompatibility = JavaVersion . VERSION _ 1 _ 7 
 targetCompatibility = JavaVersion . VERSION _ 1 _ 7 
 
 diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index 397a2cc . . 93a502e 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - # Release 
 + # Release 0 . 12 . 0 ( 24 - Dec - 2017 ) 
 
 * Upgrade minimal Java version to Java 7 
 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index a5c88ac . . 70edeb2 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 539 , 7 + 539 , 7 @ @ server . request ( json ( text ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; 
 ` ` ` 
 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 12 . 0 * * 
 ` json ` will return a resource from next release 
 
 ` ` ` java 
 @ @ - 581 , 7 + 581 , 7 @ @ You can give a POJO to Java API , it will be converted JSON text . 
 server . request ( json ( pojo ) ) . response ( " foo " ) ; 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 12 . 0 * * 
 ` json ` will return a resource from next release 
 
 ` ` ` java 
 @ @ - 1575 , 7 + 1575 , 7 @ @ The other response settings are able to be set as well . 
 server . request ( by ( uri ( " / seq " ) ) ) . response ( seq ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 12 . 0 * * 
 
 ` ` ` json 
 { 
 @ @ - 1632 , 8 + 1632 , 8 @ @ You can give a POJO to Java API , it will be converted JSON text . Hint , this api 
 server . request ( by ( uri ( " / json " ) ) ) . response ( toJson ( pojo ) ) ; 
 ` ` ` 
 
 - * * @ Since will be at next realease * * 
 - ` toJson ` will be removed from next release , use ` json ` instead . 
 + * * @ Since 0 . 12 . 0 * * 
 + ` toJson ` will be removed from 0 . 12 . 0 , use ` json ` instead . 
 
 ` ` ` java 
 server . request ( by ( uri ( " / json " ) ) ) . response ( json ( pojo ) ) ; 
 @ @ - 2226 , 7 + 2226 , 7 @ @ server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / ano 
 } 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 12 . 0 * * 
 
 If your post content is JSON , you can use ` json ` in your configuration directly . 
 
 diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md 
 index a65b0d7 . . f7a1f90 100644 
 - - - a / moco - doc / cmd . md 
 + + + b / moco - doc / cmd . md 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 # Standalone Command Line 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 
 
 @ @ - 74 , 7 + 74 , 7 @ @ java - jar moco - runner - < version > - standalone . jar http - p 12306 - c foo . json 
 ` ` ` 
 
 # # # Many Configuration Files 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 12 . 0 * * 
 
 If you have many configuration files , you can use glob matcher as ` - c ` argument . 
 But you need to make sure the configuration that don ' t conflict . 
 diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md 
 index 7761a47 . . c78f6a6 100644 
 - - - a / moco - doc / global - settings . md 
 + + + b / moco - doc / global - settings . md 
 @ @ - 197 , 7 + 197 , 7 @ @ When you issue any request to server , it will return response with " foo " , " bar " 
 
 # # # Glob Inclusion 
 
 - * * @ Since will be at the next release * * 
 + * * @ Since 0 . 12 . 0 * * 
 
 You may need include many files , glob can help you to do this . 
 
 diff - - git a / moco - doc / usage . md b / moco - doc / usage . md 
 index de0620b . . 479fda3 100644 
 - - - a / moco - doc / usage . md 
 + + + b / moco - doc / usage . md 
 @ @ - 31 , 7 + 31 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in 
 < dependency > 
 < groupId > com . github . dreamhead < / groupId > 
 < artifactId > moco - core < / artifactId > 
 - < version > 0 . 11 . 1 < / version > 
 + < version > 0 . 12 . 0 < / version > 
 < / dependency > 
 ` ` ` 
 
 @ @ - 44 , 7 + 44 , 7 @ @ repositories { 
 
 dependencies { 
 testCompile ( 
 - " com . github . dreamhead : moco - core : 0 . 11 . 1 " , 
 + " com . github . dreamhead : moco - core : 0 . 12 . 0 " , 
 ) 
 } 
 ` ` ` 
 @ @ - 128 , 7 + 128 , 7 @ @ public class MocoRunnerTest { 
 # # Standalone 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 12 . 0 / moco - runner - 0 . 12 . 0 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 index 5d6fdc9 . . b5d724c 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 @ @ - 92 , 7 + 92 , 6 @ @ public final class SettingRunner implements Runner { 
 @ Override 
 public Iterable < ? extends File > apply ( final GlobalSetting input ) { 
 return from ( input . includes ( ) ) . transform ( toFile ( ) ) ; 
 - 
 } 
 } ; 
 }

NEAREST DIFF:
diff - - git a / README . md b / README . md 
 index 4947446 . . e0e98e5 100644 
 - - - a / README . md 
 + + + b / README . md 
 @ @ - 9 , 7 + 9 , 7 @ @ 
 Moco is an easy setup stub framework . 
 
 # # Latest Release 
 - * _ _ 0 . 11 . 0 _ _ 
 + * _ _ 0 . 11 . 1 _ _ 
 
 More details in [ Release Notes ] ( moco - doc / ReleaseNotes . md ) 
 
 @ @ - 23 , 7 + 23 , 7 @ @ Integration , especially based on HTTP protocol , e . g . web service , REST etc , is w 
 In the old days , we just deployed another WAR to an application server , e . g . Jetty or Tomcat etc . As we all know , it ' s so boring to develop a WAR and deploy it to any application server , even if we use an embeded server . And the WAR needs to be reassembled even if we just want to change a little bit . 
 
 # # Quick Start 
 - * Download [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) 
 + * Download [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) 
 * Write your own configuration file to describe your Moco server configuration as follow : 
 ` ` ` json 
 [ 
 @ @ - 79 , 7 + 79 , 7 @ @ git clone git @ github . com : dreamhead / moco . git 
 Check out what you can help [ here ] ( moco - doc / plan . md ) if you do not have any existing idea . 
 
 # # Copyright and license 
 - Copyright 2012 - 2015 ZHENG Ye 
 + Copyright 2012 - 2017 ZHENG Ye 
 
 Licensed under MIT License ( the " License " ) ; You may obtain a copy of the License in the LICENSE file , or at : 
 
 diff - - git a / build . gradle b / build . gradle 
 index dfbcc25 . . a30e390 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 23 , 7 + 23 , 7 @ @ idea { 
 subprojects { 
 apply plugin : ' java ' 
 group = ' com . github . dreamhead ' 
 - version = ' 0 . 11 . 0 - SNAPSHOT ' 
 + version = ' 0 . 11 . 1 - SNAPSHOT ' 
 sourceCompatibility = JavaVersion . VERSION _ 1 _ 6 
 targetCompatibility = JavaVersion . VERSION _ 1 _ 6 
 
 diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index 66ccf14 . . dc4b61d 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 1 , 12 + 1 , 12 @ @ 
 - # Release 
 + # Release 0 . 11 . 1 ( 12 - Jun - 2017 ) 
 
 - # APIs 
 + # # APIs 
 * Template for Event action 
 * Remove publish API with Optional , e . g . file and pathResource 
 * Proxy with content resource as url 
 * Add cookie attribute API 
 
 - # JUnit 
 + # # JUnit 
 * HTTPS JUnit runner for POJO , JSON and from path resource 
 * Http JSON runner with path resource 
 * Socket JSON runner with path resource 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 3daa461 . . f974ddb 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 1308 , 7 + 1308 , 7 @ @ Cookie attributes are sent in http response , which are used by browsers to deter 
 
 # # # # # Path 
 
 - @ Since will be at next version 
 + * * @ Since 0 . 11 . 1 * * 
 
 Path cookie attribute defines the scope of the cookie . You can add your own ` path ` cookie attribute to your response . 
 
 @ @ - 1341 , 7 + 1341 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , path ( " / " ) ) , status ( 302 ) ) ; 
 
 # # # # # Domain 
 
 - @ Since will be at next version 
 + * * @ Since 0 . 11 . 1 * * 
 
 Domain cookie attribute defines the scope of the cookie . You can add your own ` domain ` cookie attribute to your response . 
 
 @ @ - 1374 , 7 + 1374 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; 
 
 # # # # # Secure 
 
 - @ Since will be at next version 
 + * * @ Since 0 . 11 . 1 * * 
 
 A secure cookie can only be transmitted over an encrypted connection . You can add your own ` secure ` cookie attribute to your response . 
 
 @ @ - 1407 , 7 + 1407 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; 
 
 # # # # # HTTP Only 
 
 - @ Since will be at next version 
 + * * @ Since 0 . 11 . 1 * * 
 
 An http only cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . 
 
 @ @ - 1440 , 7 + 1440 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , httpOnly ( ) ) , status ( 302 ) ) ; 
 
 # # # # # Max Age 
 
 - @ Since will be at next version 
 + * * @ Since 0 . 11 . 1 * * 
 
 The Max - Age attribute can be used to set the cookie ' s expiration as an interval of seconds in the future , relative to the time the browser received the cookie . You can add your own ` maxAge ` cookie attribute to your response . 
 
 @ @ - 2024 , 7 + 2024 , 7 @ @ server . response ( file ( template ( " $ { req . headers [ ' foo ' ] . txt " ) ) ) ; 
 ` ` ` 
 
 # # # Proxy 
 - * * @ Since will be at the next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 You can use template in proxy API , so that you can dynamically decide which URL you will forward the request to . 
 
 diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md 
 index 4a1c32e . . ac5ddd2 100644 
 - - - a / moco - doc / cmd . md 
 + + + b / moco - doc / cmd . md 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 # Standalone Command Line 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 
 
 diff - - git a / moco - doc / junit . md b / moco - doc / junit . md 
 index 879f4a7 . . 1eb5b55 100644 
 - - - a / moco - doc / junit . md 
 + + + b / moco - doc / junit . md 
 @ @ - 53 , 7 + 53 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { 
 } 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 JSON configuration can be retrieved from the classpath . 
 
 @ @ - 70 , 7 + 70 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { 
 
 # # # POJO HTTPS Server 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 * * httpsRunner * * can reference a HttpsServer object . 
 
 @ @ - 93 , 7 + 93 , 7 @ @ public class MocoJunitPojoHttpRunnerTest { 
 
 # # # JSON HTTPS Server 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 * * jsonHttpsRunner * * can reference a JSON file as a HTTP server . 
 
 @ @ - 107 , 7 + 107 , 7 @ @ public class MocoJunitJsonHttpRunnerTest { 
 } 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 JSON configuration can be retrieved from the classpath . 
 
 @ @ - 160 , 7 + 160 , 7 @ @ public class MocoJunitJsonSocketRunnerTest { 
 } 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 JSON configuration can be retrieved from the classpath . 
 
 @ @ - 201 , 7 + 201 , 7 @ @ public class MocoJunitPojoRestRunnerTest { 
 
 # # # JSON Rest Server 
 
 - * * @ Since 0 . 11 . 0 * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 * * jsonRestRunner * * can reference a JSON file as a HTTP server . 
 
 @ @ - 214 , 7 + 214 , 7 @ @ public class MocoJunitJsonRestRunnerTest { 
 } 
 ` ` ` 
 
 - * * @ Since will be at next release * * 
 + * * @ Since 0 . 11 . 1 * * 
 
 JSON configuration can be retrieved from the classpath . 
 
 diff - - git a / moco - doc / usage . md b / moco - doc / usage . md 
 index bd3003b . . e2dc943 100644 
 - - - a / moco - doc / usage . md 
 + + + b / moco - doc / usage . md 
 @ @ - 30 , 7 + 30 , 7 @ @ Moco has been published on Maven repository , so you can refer to it directly in 
 < dependency > 
 < groupId > com . github . dreamhead < / groupId > 
 < artifactId > moco - core < / artifactId > 
 - < version > 0 . 11 . 0 < / version > 
 + < version > 0 . 11 . 1 < / version > 
 < / dependency > 
 ` ` ` 
 
 @ @ - 43 , 7 + 43 , 7 @ @ repositories { 
 
 dependencies { 
 testCompile ( 
 - " com . github . dreamhead : moco - core : 0 . 11 . 0 " , 
 + " com . github . dreamhead : moco - core : 0 . 11 . 1 " , 
 ) 
 } 
 ` ` ` 
 @ @ - 127 , 7 + 127 , 7 @ @ public class MocoRunnerTest { 
 # # Standalone 
 
 Moco can be used as standalone to run with configuration and you can download standalone directly : 
 - [ Standalone Moco Runner ] ( https : / / repo1 . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 0 / moco - runner - 0 . 11 . 0 - standalone . jar ) 
 + [ Standalone Moco Runner ] ( http : / / central . maven . org / maven2 / com / github / dreamhead / moco - runner / 0 . 11 . 1 / moco - runner - 0 . 11 . 1 - standalone . jar ) 
 
 First of all , a JSON configuration file needs to be provided to start Moco . 

