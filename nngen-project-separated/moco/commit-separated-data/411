BLEU SCORE: 0.07986788803078405

TEST MSG: created cookie standalone test
GENERATED MSG: added latency json support

TEST DIFF (one line): diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> new file mode 100644 <nl> index 0000000 . . e3f59d8 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . google . common . net . HttpHeaders ; <nl> + import io . netty . handler . codec . http . cookie . ClientCookieDecoder ; <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> index 70ec4f7 . . 9bfa18c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> @ @ - 184 , 17 + 184 , 6 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ set _ and _ recognize _ cookie ( ) throws IOException { <nl> - runWithConfiguration ( " foo . json " ) ; <nl> - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; <nl> - <nl> - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> - assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> - assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void should _ wait _ for _ awhile ( ) throws IOException { <nl> final long latency = 1000 ; <nl> final long delta = 200 ; <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> new file mode 100644 <nl> index 0000000 . . b500b0b <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : " true " <nl> + } <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json <nl> index 485a740 . . afae078 100644 <nl> - - - a / moco - runner / src / test / resources / foo . json <nl> + + + b / moco - runner / src / test / resources / foo . json <nl> @ @ - 140 , 16 + 140 , 6 @ @ <nl> } , <nl> { <nl> " request " : { <nl> - " uri " : " / cookie " <nl> - } , <nl> - " response " : { <nl> - " cookies " : { <nl> - " login " : " true " <nl> - } <nl> - } <nl> - } , <nl> - { <nl> - " request " : { <nl> " version " : " HTTP / 1 . 0 " <nl> } , <nl> " response " : {
NEAREST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index dc2000e . . 9efa4a8 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 481 , 7 + 481 , 6 @ @ public class MocoTest { <nl> } ) ; <nl> } <nl> <nl> - <nl> @ Test <nl> public void should _ run _ as _ proxy ( ) throws IOException { <nl> server . response ( url ( " http : / / www . github . com " ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 7b47435 . . 754b55d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import java . util . Collection ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . latency ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . google . common . collect . Collections2 . transform ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> @ @ - 20 , 6 + 21 , 7 @ @ public class ResponseSetting extends AbstractResource { <nl> protected String status ; <nl> protected Map < String , String > headers ; <nl> private CacheSetting cache ; <nl> + private Long latency ; <nl> <nl> public String getStatus ( ) { <nl> return status ; <nl> @ @ - 33 , 6 + 35 , 10 @ @ public class ResponseSetting extends AbstractResource { <nl> return cache ; <nl> } <nl> <nl> + public long getLatency ( ) { <nl> + return latency ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) { <nl> return Objects . toStringHelper ( this ) <nl> @ @ - 42 , 6 + 48 , 7 @ @ public class ResponseSetting extends AbstractResource { <nl> . add ( " headers " , headers ) <nl> . add ( " url " , url ) <nl> . add ( " cache " , cache ) <nl> + . add ( " latency " , latency ) <nl> . toString ( ) ; <nl> } <nl> <nl> @ @ - 81 , 6 + 88 , 10 @ @ public class ResponseSetting extends AbstractResource { <nl> handlers . add ( compositeResponseHandlers ( collection ) ) ; <nl> } <nl> <nl> + if ( latency ! = null ) { <nl> + handlers . add ( latency ( latency ) ) ; <nl> + } <nl> + <nl> if ( handlers . isEmpty ( ) ) { <nl> throw new IllegalArgumentException ( " unknown response setting with " + this ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> index 2e474ed . . 4ae9f1e 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . RemoteTestUtils . * ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . hamcrest . Matchers . greaterThan ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> @ @ - 144 , 4 + 145 , 17 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> assertThat ( response . getHeaders ( " foo " ) [ 0 ] . getValue ( ) , is ( " bar " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ wait _ for _ awhile ( ) throws IOException { <nl> + final long latency = 1000 ; <nl> + final long delta = 200 ; <nl> + <nl> + runWithConfiguration ( " foo . json " ) ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + helper . get ( remoteUrl ( " / latency " ) ) ; <nl> + long stop = System . currentTimeMillis ( ) ; <nl> + long gap = stop - start + delta ; <nl> + assertThat ( gap , greaterThan ( latency ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json <nl> index c78c53b . . e08f368 100644 <nl> - - - a / moco - runner / src / test / resources / foo . json <nl> + + + b / moco - runner / src / test / resources / foo . json <nl> @ @ - 130 , 5 + 130 , 15 @ @ <nl> " foo " : " bar " <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / latency " <nl> + } , <nl> + " response " : <nl> + { <nl> + " latency " : 1000 <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 new file mode 100644 
 index 0000000 . . e3f59d8 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . github . dreamhead . moco ; 
 + 
 + import com . google . common . net . HttpHeaders ; 
 + import io . netty . handler . codec . http . cookie . ClientCookieDecoder ; 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { 
 + @ Test 
 + public void should _ set _ and _ recognize _ cookie ( ) throws IOException { 
 + runWithConfiguration ( " cookie . json " ) ; 
 + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; 
 + 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 index 70ec4f7 . . 9bfa18c 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 @ @ - 184 , 17 + 184 , 6 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { 
 } 
 
 @ Test 
 - public void should _ set _ and _ recognize _ cookie ( ) throws IOException { 
 - runWithConfiguration ( " foo . json " ) ; 
 - org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie " ) ) ; 
 - 
 - String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 - Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 - assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 - assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 - } 
 - 
 - @ Test 
 public void should _ wait _ for _ awhile ( ) throws IOException { 
 final long latency = 1000 ; 
 final long delta = 200 ; 
 diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json 
 new file mode 100644 
 index 0000000 . . b500b0b 
 - - - / dev / null 
 + + + b / moco - runner / src / test / resources / cookie . json 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + [ 
 + { 
 + " request " : { 
 + " uri " : " / cookie " 
 + } , 
 + " response " : { 
 + " cookies " : { 
 + " login " : " true " 
 + } 
 + } 
 + } 
 + ] 
 \ No newline at end of file 
 diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json 
 index 485a740 . . afae078 100644 
 - - - a / moco - runner / src / test / resources / foo . json 
 + + + b / moco - runner / src / test / resources / foo . json 
 @ @ - 140 , 16 + 140 , 6 @ @ 
 } , 
 { 
 " request " : { 
 - " uri " : " / cookie " 
 - } , 
 - " response " : { 
 - " cookies " : { 
 - " login " : " true " 
 - } 
 - } 
 - } , 
 - { 
 - " request " : { 
 " version " : " HTTP / 1 . 0 " 
 } , 
 " response " : {

NEAREST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 index dc2000e . . 9efa4a8 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 @ @ - 481 , 7 + 481 , 6 @ @ public class MocoTest { 
 } ) ; 
 } 
 
 - 
 @ Test 
 public void should _ run _ as _ proxy ( ) throws IOException { 
 server . response ( url ( " http : / / www . github . com " ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 7b47435 . . 754b55d 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import java . util . Collection ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 + import static com . github . dreamhead . moco . Moco . latency ; 
 import static com . github . dreamhead . moco . Moco . status ; 
 import static com . google . common . collect . Collections2 . transform ; 
 import static com . google . common . collect . Lists . newArrayList ; 
 @ @ - 20 , 6 + 21 , 7 @ @ public class ResponseSetting extends AbstractResource { 
 protected String status ; 
 protected Map < String , String > headers ; 
 private CacheSetting cache ; 
 + private Long latency ; 
 
 public String getStatus ( ) { 
 return status ; 
 @ @ - 33 , 6 + 35 , 10 @ @ public class ResponseSetting extends AbstractResource { 
 return cache ; 
 } 
 
 + public long getLatency ( ) { 
 + return latency ; 
 + } 
 + 
 @ Override 
 public String toString ( ) { 
 return Objects . toStringHelper ( this ) 
 @ @ - 42 , 6 + 48 , 7 @ @ public class ResponseSetting extends AbstractResource { 
 . add ( " headers " , headers ) 
 . add ( " url " , url ) 
 . add ( " cache " , cache ) 
 + . add ( " latency " , latency ) 
 . toString ( ) ; 
 } 
 
 @ @ - 81 , 6 + 88 , 10 @ @ public class ResponseSetting extends AbstractResource { 
 handlers . add ( compositeResponseHandlers ( collection ) ) ; 
 } 
 
 + if ( latency ! = null ) { 
 + handlers . add ( latency ( latency ) ) ; 
 + } 
 + 
 if ( handlers . isEmpty ( ) ) { 
 throw new IllegalArgumentException ( " unknown response setting with " + this ) ; 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 index 2e474ed . . 4ae9f1e 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . RemoteTestUtils . * ; 
 import static org . hamcrest . CoreMatchers . is ; 
 + import static org . hamcrest . Matchers . greaterThan ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoStandaloneTest extends AbstractMocoStandaloneTest { 
 @ @ - 144 , 4 + 145 , 17 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; 
 assertThat ( response . getHeaders ( " foo " ) [ 0 ] . getValue ( ) , is ( " bar " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ wait _ for _ awhile ( ) throws IOException { 
 + final long latency = 1000 ; 
 + final long delta = 200 ; 
 + 
 + runWithConfiguration ( " foo . json " ) ; 
 + long start = System . currentTimeMillis ( ) ; 
 + helper . get ( remoteUrl ( " / latency " ) ) ; 
 + long stop = System . currentTimeMillis ( ) ; 
 + long gap = stop - start + delta ; 
 + assertThat ( gap , greaterThan ( latency ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json 
 index c78c53b . . e08f368 100644 
 - - - a / moco - runner / src / test / resources / foo . json 
 + + + b / moco - runner / src / test / resources / foo . json 
 @ @ - 130 , 5 + 130 , 15 @ @ 
 " foo " : " bar " 
 } 
 } 
 + } , 
 + { 
 + " request " : 
 + { 
 + " uri " : " / latency " 
 + } , 
 + " response " : 
 + { 
 + " latency " : 1000 
 + } 
 } 
 ] 
 \ No newline at end of file
