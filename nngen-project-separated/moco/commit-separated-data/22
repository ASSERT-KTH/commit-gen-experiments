BLEU SCORE: 0.04935157841536379

TEST MSG: enhanced error message for failover and playback
GENERATED MSG: changed failover executor return type to fail over executor

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 10e4be4 . . f442795 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 568 , 13 + 568 , 13 @ @ public final class Moco { <nl> <nl> public static Failover failover ( final String file , final int . . . statuses ) { <nl> return new Failover ( ApiUtils . failoverExecutor ( <nl> - checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER , <nl> + checkNotNullOrEmpty ( file , " Failover filename should not be null " ) ) , FailoverStrategy . FAILOVER , <nl> checkNotNull ( statuses , " Proxy status should not be null " ) ) ; <nl> } <nl> <nl> public static Failover playback ( final String file , final int . . . statuses ) { <nl> return new Failover ( ApiUtils . failoverExecutor ( <nl> - checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK , <nl> + checkNotNullOrEmpty ( file , " Playback filename should not be null " ) ) , FailoverStrategy . PLAYBACK , <nl> checkNotNull ( statuses , " Proxy status should not be null " ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> index ff2a593 . . 3ebe7c9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . deserializer ; <nl> <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonProcessingException ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> @ @ - 12 , 7 + 11 , 7 @ @ import java . io . IOException ; <nl> <nl> public class FailoverContainerDeserializer extends JsonDeserializer < FailoverContainer > { <nl> @ Override <nl> - public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException , JsonProcessingException { <nl> + public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> return new FailoverContainer ( jp . getText ( ) ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 84ea8a1 . . d89484f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public final class Moco { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , <nl> ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , <nl> - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoConfig . . . configs ) { <nl> @ @ - 142 , 9 + 142 , 10 @ @ public final class Moco { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualSocketServer . createServerWithMonitor ( of ( port ) , <nl> ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , <nl> - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> } <nl> <nl> + <nl> public static MocoConfig context ( final String context ) { <nl> return new MocoContextConfig ( checkNotNullOrEmpty ( context , " Context should not be null " ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 9a356d7 . . 5c1445e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; <nl> + import com . github . dreamhead . moco . handler . failover . FailoverExecutor ; <nl> import com . github . dreamhead . moco . matcher . ContainMatcher ; <nl> import com . github . dreamhead . moco . matcher . EndsWithMatcher ; <nl> import com . github . dreamhead . moco . matcher . MatchMatcher ; <nl> @ @ - 66 , 7 + 67 , 7 @ @ public class ApiUtils { <nl> } ; <nl> } <nl> <nl> - public static DefaultFailoverExecutor failoverExecutor ( final String file ) { <nl> + public static FailoverExecutor failoverExecutor ( final String file ) { <nl> return new DefaultFailoverExecutor ( new File ( file ) ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 10e4be4 . . f442795 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 568 , 13 + 568 , 13 @ @ public final class Moco { 
 
 public static Failover failover ( final String file , final int . . . statuses ) { 
 return new Failover ( ApiUtils . failoverExecutor ( 
 - checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER , 
 + checkNotNullOrEmpty ( file , " Failover filename should not be null " ) ) , FailoverStrategy . FAILOVER , 
 checkNotNull ( statuses , " Proxy status should not be null " ) ) ; 
 } 
 
 public static Failover playback ( final String file , final int . . . statuses ) { 
 return new Failover ( ApiUtils . failoverExecutor ( 
 - checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK , 
 + checkNotNullOrEmpty ( file , " Playback filename should not be null " ) ) , FailoverStrategy . PLAYBACK , 
 checkNotNull ( statuses , " Proxy status should not be null " ) ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java 
 index ff2a593 . . 3ebe7c9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FailoverContainerDeserializer . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . parser . deserializer ; 
 
 import com . fasterxml . jackson . core . JsonParser ; 
 - import com . fasterxml . jackson . core . JsonProcessingException ; 
 import com . fasterxml . jackson . core . JsonToken ; 
 import com . fasterxml . jackson . databind . DeserializationContext ; 
 import com . fasterxml . jackson . databind . JsonDeserializer ; 
 @ @ - 12 , 7 + 11 , 7 @ @ import java . io . IOException ; 
 
 public class FailoverContainerDeserializer extends JsonDeserializer < FailoverContainer > { 
 @ Override 
 - public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException , JsonProcessingException { 
 + public FailoverContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 return new FailoverContainer ( jp . getText ( ) ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 84ea8a1 . . d89484f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public final class Moco { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , 
 ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , 
 - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 } 
 
 public static HttpServer httpServer ( final MocoConfig . . . configs ) { 
 @ @ - 142 , 9 + 142 , 10 @ @ public final class Moco { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualSocketServer . createServerWithMonitor ( of ( port ) , 
 ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , 
 - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 } 
 
 + 
 public static MocoConfig context ( final String context ) { 
 return new MocoContextConfig ( checkNotNullOrEmpty ( context , " Context should not be null " ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 index 9a356d7 . . 5c1445e 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . RequestExtractor ; 
 import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; 
 + import com . github . dreamhead . moco . handler . failover . FailoverExecutor ; 
 import com . github . dreamhead . moco . matcher . ContainMatcher ; 
 import com . github . dreamhead . moco . matcher . EndsWithMatcher ; 
 import com . github . dreamhead . moco . matcher . MatchMatcher ; 
 @ @ - 66 , 7 + 67 , 7 @ @ public class ApiUtils { 
 } ; 
 } 
 
 - public static DefaultFailoverExecutor failoverExecutor ( final String file ) { 
 + public static FailoverExecutor failoverExecutor ( final String file ) { 
 return new DefaultFailoverExecutor ( new File ( file ) ) ; 
 } 

