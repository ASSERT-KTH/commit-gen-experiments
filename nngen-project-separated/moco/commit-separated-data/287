BLEU SCORE: 0.039297526283216276

TEST MSG: introduced includes to global setting
GENERATED MSG: fixed # 47 to run path related tests on windows

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> index 2154cb1 . . 1259d24 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> @ @ - 1 , 10 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> import com . google . common . base . MoreObjects ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import static com . github . dreamhead . moco . util . Files . join ; <nl> <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class GlobalSetting { <nl> private String include ; <nl> private String context ; <nl> @ @ - 14 , 8 + 17 , 8 @ @ public class GlobalSetting { <nl> private RequestSetting request ; <nl> private ResponseSetting response ; <nl> <nl> - public String getInclude ( ) { <nl> - return join ( fileRoot , include ) ; <nl> + public ImmutableList < String > includes ( ) { <nl> + return ImmutableList . of ( join ( fileRoot , include ) ) ; <nl> } <nl> <nl> public String getContext ( ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index 8a04f67 . . a500f75 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 81 , 6 + 81 , 11 @ @ public final class RunnerSetting { <nl> return this ; <nl> } <nl> <nl> + public Builder addStreams ( final ImmutableList < InputStream > streams ) { <nl> + this . streams . addAll ( streams ) ; <nl> + return this ; <nl> + } <nl> + <nl> public Builder withRequest ( final RequestSetting request ) { <nl> this . request = request ; <nl> return this ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 040ece0 . . cc5b781 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . parser . GlobalSettingParser ; <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> @ @ - 29 , 7 + 30 , 7 @ @ public class SettingRunner implements Runner { <nl> public SettingRunner ( final InputStream stream , final StartArgs args ) { <nl> this . env = args . getEnv ( ) ; <nl> this . globalSettings = parser . parse ( stream ) ; <nl> - this . files = from ( globalSettings ) . transform ( toFile ( ) ) ; <nl> + this . files = from ( globalSettings ) . transformAndConcat ( toFiles ( ) ) ; <nl> this . startArgs = args ; <nl> } <nl> <nl> @ @ - 58 , 16 + 59 , 27 @ @ public class SettingRunner implements Runner { <nl> return new Function < GlobalSetting , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( final GlobalSetting setting ) { <nl> + ImmutableList < InputStream > streams = from ( setting . includes ( ) ) . transform ( toStream ( ) ) . toList ( ) ; <nl> + <nl> + return aRunnerSetting ( ) <nl> + . addStreams ( streams ) <nl> + . withContext ( setting . getContext ( ) ) <nl> + . withFileRoot ( setting . getFileRoot ( ) ) <nl> + . withRequest ( setting . getRequest ( ) ) <nl> + . withResponse ( setting . getResponse ( ) ) <nl> + . build ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < String , InputStream > toStream ( ) { <nl> + return new Function < String , InputStream > ( ) { <nl> + @ Override <nl> + public InputStream apply ( final String input ) { <nl> try { <nl> - return aRunnerSetting ( ) <nl> - . addStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> - . withContext ( setting . getContext ( ) ) <nl> - . withFileRoot ( setting . getFileRoot ( ) ) <nl> - . withRequest ( setting . getRequest ( ) ) <nl> - . withResponse ( setting . getResponse ( ) ) <nl> - . build ( ) ; <nl> + return new FileInputStream ( input ) ; <nl> } catch ( FileNotFoundException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> + throw new MocoException ( e ) ; <nl> } <nl> } <nl> } ; <nl> @ @ - 77 , 11 + 89 , 21 @ @ public class SettingRunner implements Runner { <nl> runner . stop ( ) ; <nl> } <nl> <nl> - private Function < ? super GlobalSetting , File > toFile ( ) { <nl> - return new Function < GlobalSetting , File > ( ) { <nl> + private Function < ? super GlobalSetting , Iterable < ? extends File > > toFiles ( ) { <nl> + return new Function < GlobalSetting , Iterable < ? extends File > > ( ) { <nl> + @ Override <nl> + public Iterable < ? extends File > apply ( final GlobalSetting input ) { <nl> + return from ( input . includes ( ) ) . transform ( toFile ( ) ) ; <nl> + <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < String , File > toFile ( ) { <nl> + return new Function < String , File > ( ) { <nl> @ Override <nl> - public File apply ( final GlobalSetting input ) { <nl> - return new File ( input . getInclude ( ) ) ; <nl> + public File apply ( final String input ) { <nl> + return new File ( input ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index f9e092b . . 29268f0 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 34 , 9 + 34 , 9 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / context - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> } <nl> <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / fileroot - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " fileroot . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " fileroot . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / fileroot " ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources " ) ) ; <nl> } <nl> @ @ - 55 , 10 + 55 , 10 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " settings / env - settings . json " ) ; <nl> ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getEnv ( ) , is ( " foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> new file mode 100644 <nl> index 0000000 . . 38af00d <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class Files { <nl> + public static String join ( String path1 , String path2 , String . . . paths ) { <nl> + String finalPath = actualJoin ( path1 , path2 ) ; <nl> + for ( String path : paths ) { <nl> + finalPath = actualJoin ( finalPath , path ) ; <nl> + } <nl> + <nl> + return finalPath ; <nl> + } <nl> + <nl> + private static String actualJoin ( String path1 , String path2 ) { <nl> + File file1 = new File ( path1 ) ; <nl> + File file2 = new File ( file1 , path2 ) ; <nl> + return file2 . getPath ( ) ; <nl> + } <nl> + <nl> + private Files ( ) { } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> index 11d5adf . . 1cf8575 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonProperty ; <nl> <nl> - import java . io . File ; <nl> + import static com . github . dreamhead . moco . util . Files . join ; <nl> <nl> public class GlobalSetting { <nl> private String include ; <nl> @ @ - 12 , 7 + 12 , 7 @ @ public class GlobalSetting { <nl> private String env ; <nl> <nl> public String getInclude ( ) { <nl> - return fileRoot ! = null ? new File ( fileRoot , include ) . getPath ( ) : include ; <nl> + return fileRoot ! = null ? join ( fileRoot , include ) : include ; <nl> } <nl> <nl> public String getContext ( ) { <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> index 3ae1354 . . 6dd1091 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java <nl> @ @ - 7 , 6 + 7 , 7 @ @ import org . junit . Test ; <nl> import java . io . InputStream ; <nl> import java . util . List ; <nl> <nl> + import static com . github . dreamhead . moco . util . Files . join ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 24 , 12 + 25 , 8 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " multiple / settings . json " ) ; <nl> List < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / foo . json " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( " src / test / resources / multiple / bar . json " ) ) ; <nl> - } <nl> - <nl> - private InputStream getResourceAsStream ( String filename ) { <nl> - return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " foo . json " ) ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " bar . json " ) ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 37 , 9 + 34 , 9 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " multiple / context - settings . json " ) ; <nl> List < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / foo . json " ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( " src / test / resources / multiple / bar . json " ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> } <nl> <nl> @ @ - 48 , 9 + 45 , 9 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " multiple / fileroot - settings . json " ) ; <nl> List < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / fileroot . json " ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " fileroot . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / fileroot " ) ) ; <nl> - assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources / " ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources " ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 58 , 11 + 55 , 15 @ @ public class GlobalSettingParserTest { <nl> InputStream stream = getResourceAsStream ( " multiple / env - settings . json " ) ; <nl> List < GlobalSetting > globalSettings = parser . parse ( stream ) ; <nl> <nl> - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / foo . json " ) ) ; <nl> + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " foo . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; <nl> assertThat ( globalSettings . get ( 0 ) . getEnv ( ) , is ( " foo " ) ) ; <nl> - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( " src / test / resources / multiple / bar . json " ) ) ; <nl> + assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " bar . json " ) ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; <nl> assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; <nl> } <nl> + <nl> + private InputStream getResourceAsStream ( String filename ) { <nl> + return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / multiple / fileroot - settings . json b / moco - runner / src / test / resources / multiple / fileroot - settings . json <nl> index 5f337c4 . . ea731ff 100644 <nl> - - - a / moco - runner / src / test / resources / multiple / fileroot - settings . json <nl> + + + b / moco - runner / src / test / resources / multiple / fileroot - settings . json <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> [ <nl> { <nl> " context " : " / fileroot " , <nl> - " file _ root " : " src / test / resources / " , <nl> + " file _ root " : " src / test / resources " , <nl> " include " : " multiple / fileroot . json " <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 index 2154cb1 . . 1259d24 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 @ @ - 1 , 10 + 1 , 13 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 import com . fasterxml . jackson . annotation . JsonProperty ; 
 import com . google . common . base . MoreObjects ; 
 + import com . google . common . collect . ImmutableList ; 
 
 import static com . github . dreamhead . moco . util . Files . join ; 
 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 public class GlobalSetting { 
 private String include ; 
 private String context ; 
 @ @ - 14 , 8 + 17 , 8 @ @ public class GlobalSetting { 
 private RequestSetting request ; 
 private ResponseSetting response ; 
 
 - public String getInclude ( ) { 
 - return join ( fileRoot , include ) ; 
 + public ImmutableList < String > includes ( ) { 
 + return ImmutableList . of ( join ( fileRoot , include ) ) ; 
 } 
 
 public String getContext ( ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 index 8a04f67 . . a500f75 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 @ @ - 81 , 6 + 81 , 11 @ @ public final class RunnerSetting { 
 return this ; 
 } 
 
 + public Builder addStreams ( final ImmutableList < InputStream > streams ) { 
 + this . streams . addAll ( streams ) ; 
 + return this ; 
 + } 
 + 
 public Builder withRequest ( final RequestSetting request ) { 
 this . request = request ; 
 return this ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 index 040ece0 . . cc5b781 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 + import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 import com . github . dreamhead . moco . parser . GlobalSettingParser ; 
 import com . github . dreamhead . moco . parser . model . GlobalSetting ; 
 @ @ - 29 , 7 + 30 , 7 @ @ public class SettingRunner implements Runner { 
 public SettingRunner ( final InputStream stream , final StartArgs args ) { 
 this . env = args . getEnv ( ) ; 
 this . globalSettings = parser . parse ( stream ) ; 
 - this . files = from ( globalSettings ) . transform ( toFile ( ) ) ; 
 + this . files = from ( globalSettings ) . transformAndConcat ( toFiles ( ) ) ; 
 this . startArgs = args ; 
 } 
 
 @ @ - 58 , 16 + 59 , 27 @ @ public class SettingRunner implements Runner { 
 return new Function < GlobalSetting , RunnerSetting > ( ) { 
 @ Override 
 public RunnerSetting apply ( final GlobalSetting setting ) { 
 + ImmutableList < InputStream > streams = from ( setting . includes ( ) ) . transform ( toStream ( ) ) . toList ( ) ; 
 + 
 + return aRunnerSetting ( ) 
 + . addStreams ( streams ) 
 + . withContext ( setting . getContext ( ) ) 
 + . withFileRoot ( setting . getFileRoot ( ) ) 
 + . withRequest ( setting . getRequest ( ) ) 
 + . withResponse ( setting . getResponse ( ) ) 
 + . build ( ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private Function < String , InputStream > toStream ( ) { 
 + return new Function < String , InputStream > ( ) { 
 + @ Override 
 + public InputStream apply ( final String input ) { 
 try { 
 - return aRunnerSetting ( ) 
 - . addStream ( new FileInputStream ( setting . getInclude ( ) ) ) 
 - . withContext ( setting . getContext ( ) ) 
 - . withFileRoot ( setting . getFileRoot ( ) ) 
 - . withRequest ( setting . getRequest ( ) ) 
 - . withResponse ( setting . getResponse ( ) ) 
 - . build ( ) ; 
 + return new FileInputStream ( input ) ; 
 } catch ( FileNotFoundException e ) { 
 - throw new RuntimeException ( e ) ; 
 + throw new MocoException ( e ) ; 
 } 
 } 
 } ; 
 @ @ - 77 , 11 + 89 , 21 @ @ public class SettingRunner implements Runner { 
 runner . stop ( ) ; 
 } 
 
 - private Function < ? super GlobalSetting , File > toFile ( ) { 
 - return new Function < GlobalSetting , File > ( ) { 
 + private Function < ? super GlobalSetting , Iterable < ? extends File > > toFiles ( ) { 
 + return new Function < GlobalSetting , Iterable < ? extends File > > ( ) { 
 + @ Override 
 + public Iterable < ? extends File > apply ( final GlobalSetting input ) { 
 + return from ( input . includes ( ) ) . transform ( toFile ( ) ) ; 
 + 
 + } 
 + } ; 
 + } 
 + 
 + private Function < String , File > toFile ( ) { 
 + return new Function < String , File > ( ) { 
 @ Override 
 - public File apply ( final GlobalSetting input ) { 
 - return new File ( input . getInclude ( ) ) ; 
 + public File apply ( final String input ) { 
 + return new File ( input ) ; 
 } 
 } ; 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 index f9e092b . . 29268f0 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 @ @ - 25 , 8 + 25 , 8 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " settings / settings . json " ) ; 
 ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; 
 - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 34 , 9 + 34 , 9 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " settings / context - settings . json " ) ; 
 ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; 
 - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; 
 } 
 
 @ @ - 45 , 7 + 45 , 7 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " settings / fileroot - settings . json " ) ; 
 ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " fileroot . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " fileroot . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / fileroot " ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources " ) ) ; 
 } 
 @ @ - 55 , 10 + 55 , 10 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " settings / env - settings . json " ) ; 
 ImmutableList < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " foo . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getEnv ( ) , is ( " foo " ) ) ; 
 - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 1 ) . includes ( ) . get ( 0 ) , is ( join ( " src " , " test " , " resources " , " settings " , " bar . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; 
 assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 new file mode 100644 
 index 0000000 . . 38af00d 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import java . io . File ; 
 + 
 + public class Files { 
 + public static String join ( String path1 , String path2 , String . . . paths ) { 
 + String finalPath = actualJoin ( path1 , path2 ) ; 
 + for ( String path : paths ) { 
 + finalPath = actualJoin ( finalPath , path ) ; 
 + } 
 + 
 + return finalPath ; 
 + } 
 + 
 + private static String actualJoin ( String path1 , String path2 ) { 
 + File file1 = new File ( path1 ) ; 
 + File file2 = new File ( file1 , path2 ) ; 
 + return file2 . getPath ( ) ; 
 + } 
 + 
 + private Files ( ) { } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 index 11d5adf . . 1cf8575 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . parser . model ; 
 
 import com . fasterxml . jackson . annotation . JsonProperty ; 
 
 - import java . io . File ; 
 + import static com . github . dreamhead . moco . util . Files . join ; 
 
 public class GlobalSetting { 
 private String include ; 
 @ @ - 12 , 7 + 12 , 7 @ @ public class GlobalSetting { 
 private String env ; 
 
 public String getInclude ( ) { 
 - return fileRoot ! = null ? new File ( fileRoot , include ) . getPath ( ) : include ; 
 + return fileRoot ! = null ? join ( fileRoot , include ) : include ; 
 } 
 
 public String getContext ( ) { 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 index 3ae1354 . . 6dd1091 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / parser / GlobalSettingParserTest . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import org . junit . Test ; 
 import java . io . InputStream ; 
 import java . util . List ; 
 
 + import static com . github . dreamhead . moco . util . Files . join ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 @ @ - 24 , 12 + 25 , 8 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " multiple / settings . json " ) ; 
 List < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / foo . json " ) ) ; 
 - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( " src / test / resources / multiple / bar . json " ) ) ; 
 - } 
 - 
 - private InputStream getResourceAsStream ( String filename ) { 
 - return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; 
 + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " foo . json " ) ) ) ; 
 + assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " bar . json " ) ) ) ; 
 } 
 
 @ Test 
 @ @ - 37 , 9 + 34 , 9 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " multiple / context - settings . json " ) ; 
 List < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / foo . json " ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " foo . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; 
 - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( " src / test / resources / multiple / bar . json " ) ) ; 
 + assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " bar . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; 
 } 
 
 @ @ - 48 , 9 + 45 , 9 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " multiple / fileroot - settings . json " ) ; 
 List < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / fileroot . json " ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " fileroot . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / fileroot " ) ) ; 
 - assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources / " ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . getFileRoot ( ) , is ( " src / test / resources " ) ) ; 
 } 
 
 @ Test 
 @ @ - 58 , 11 + 55 , 15 @ @ public class GlobalSettingParserTest { 
 InputStream stream = getResourceAsStream ( " multiple / env - settings . json " ) ; 
 List < GlobalSetting > globalSettings = parser . parse ( stream ) ; 
 
 - assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( " src / test / resources / multiple / foo . json " ) ) ; 
 + assertThat ( globalSettings . get ( 0 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " foo . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getContext ( ) , is ( " / foo " ) ) ; 
 assertThat ( globalSettings . get ( 0 ) . getEnv ( ) , is ( " foo " ) ) ; 
 - assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( " src / test / resources / multiple / bar . json " ) ) ; 
 + assertThat ( globalSettings . get ( 1 ) . getInclude ( ) , is ( join ( " src " , " test " , " resources " , " multiple " , " bar . json " ) ) ) ; 
 assertThat ( globalSettings . get ( 1 ) . getContext ( ) , is ( " / bar " ) ) ; 
 assertThat ( globalSettings . get ( 1 ) . getEnv ( ) , is ( " bar " ) ) ; 
 } 
 + 
 + private InputStream getResourceAsStream ( String filename ) { 
 + return GlobalSettingParserTest . class . getClassLoader ( ) . getResourceAsStream ( filename ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / multiple / fileroot - settings . json b / moco - runner / src / test / resources / multiple / fileroot - settings . json 
 index 5f337c4 . . ea731ff 100644 
 - - - a / moco - runner / src / test / resources / multiple / fileroot - settings . json 
 + + + b / moco - runner / src / test / resources / multiple / fileroot - settings . json 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 [ 
 { 
 " context " : " / fileroot " , 
 - " file _ root " : " src / test / resources / " , 
 + " file _ root " : " src / test / resources " , 
 " include " : " multiple / fileroot . json " 
 } 
 ] 
 \ No newline at end of file
