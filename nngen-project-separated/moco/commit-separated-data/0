BLEU SCORE: 0.03283637368030199

TEST MSG: extracted merge port in actual http server
GENERATED MSG: handle request with handler

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index aec3637 . . 41810ea 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 33 , 9 + 33 , 14 @ @ public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> } <nl> <nl> protected final ActualHttpServer createMergeServer ( final ActualHttpServer thatServer ) { <nl> - return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; <nl> + return newBaseServer ( mergePort ( this , thatServer ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; <nl> } <nl> <nl> + private Optional < Integer > mergePort ( final ActualHttpServer thisServer , final ActualHttpServer thatServer ) { <nl> + return thisServer . getPort ( ) . or ( thatServer . getPort ( ) ) ; <nl> + } <nl> + <nl> + <nl> private HttpsCertificate mergedCertificate ( final HttpsCertificate one , final HttpsCertificate other ) { <nl> if ( one ! = null ) { <nl> return one ;
NEAREST DIFF (one line): diff - - git a / src / main / java / com / github / moco / MocoHandler . java b / src / main / java / com / github / moco / MocoHandler . java <nl> index faa926e . . d430f5a 100644 <nl> - - - a / src / main / java / com / github / moco / MocoHandler . java <nl> + + + b / src / main / java / com / github / moco / MocoHandler . java <nl> @ @ - 3 , 10 + 3 , 7 @ @ package com . github . moco ; <nl> import com . github . moco . request . BaseRequestSetting ; <nl> import org . jboss . netty . buffer . ChannelBuffer ; <nl> import org . jboss . netty . buffer . ChannelBuffers ; <nl> - import org . jboss . netty . channel . Channel ; <nl> - import org . jboss . netty . channel . ChannelHandlerContext ; <nl> - import org . jboss . netty . channel . MessageEvent ; <nl> - import org . jboss . netty . channel . SimpleChannelHandler ; <nl> + import org . jboss . netty . channel . * ; <nl> import org . jboss . netty . handler . codec . http . DefaultHttpResponse ; <nl> import org . jboss . netty . handler . codec . http . HttpRequest ; <nl> import org . jboss . netty . handler . codec . http . HttpResponseStatus ; <nl> @ @ - 36 , 18 + 33 , 23 @ @ public class MocoHandler extends SimpleChannelHandler { <nl> private void writeResponse ( Channel channel , HttpRequest request ) { <nl> for ( BaseRequestSetting requestSetting : requestSettings ) { <nl> if ( requestSetting . match ( request ) ) { <nl> - channel . write ( createResponse ( requestSetting ) ) ; <nl> + handleResponse ( request , requestSetting , channel ) ; <nl> return ; <nl> } <nl> } <nl> <nl> if ( anyRequestSetting ! = null ) { <nl> - channel . write ( createResponse ( anyRequestSetting ) ) ; <nl> + handleResponse ( request , anyRequestSetting , channel ) ; <nl> } else { <nl> channel . write ( new DefaultHttpResponse ( HttpVersion . HTTP _ 1 _ 1 , HttpResponseStatus . BAD _ REQUEST ) ) ; <nl> } <nl> } <nl> <nl> + private ChannelFuture handleResponse ( HttpRequest request , BaseRequestSetting requestSetting , Channel channel ) { <nl> + requestSetting . handleRequest ( request , channel ) ; <nl> + return channel . write ( createResponse ( requestSetting ) ) ; <nl> + } <nl> + <nl> private DefaultHttpResponse createResponse ( BaseRequestSetting setting ) { <nl> DefaultHttpResponse response = new DefaultHttpResponse ( HttpVersion . HTTP _ 1 _ 1 , HttpResponseStatus . OK ) ; <nl> ChannelBuffer buffer = ChannelBuffers . dynamicBuffer ( ) ; <nl> diff - - git a / src / main / java / com / github / moco / MocoServer . java b / src / main / java / com / github / moco / MocoServer . java <nl> index 7813acd . . f747f97 100644 <nl> - - - a / src / main / java / com / github / moco / MocoServer . java <nl> + + + b / src / main / java / com / github / moco / MocoServer . java <nl> @ @ - 67 , 11 + 67 , 11 @ @ public class MocoServer { <nl> new AnyRequestSetting ( this ) . response ( response ) ; <nl> } <nl> <nl> - public BaseRequestSetting withContent ( String requestContent ) { <nl> + public RequestSetting withContent ( String requestContent ) { <nl> return new ContentRequestSetting ( this , requestContent ) ; <nl> } <nl> <nl> - public BaseRequestSetting withUri ( String uri ) { <nl> + public RequestSetting withUri ( String uri ) { <nl> return new UriRequestSetting ( this , uri ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / com / github / moco / RequestHandler . java b / src / main / java / com / github / moco / RequestHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 20a681b <nl> - - - / dev / null <nl> + + + b / src / main / java / com / github / moco / RequestHandler . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . github . moco ; <nl> + <nl> + import org . jboss . netty . channel . Channel ; <nl> + import org . jboss . netty . handler . codec . http . HttpRequest ; <nl> + <nl> + public interface RequestHandler { <nl> + void handle ( HttpRequest request , Channel channel ) ; <nl> + } <nl> diff - - git a / src / main / java / com / github / moco / RequestSetting . java b / src / main / java / com / github / moco / RequestSetting . java <nl> index 44db124 . . e2d8ea6 100644 <nl> - - - a / src / main / java / com / github / moco / RequestSetting . java <nl> + + + b / src / main / java / com / github / moco / RequestSetting . java <nl> @ @ - 5 , 13 + 5 , 20 @ @ public abstract class RequestSetting { <nl> <nl> protected MocoServer server ; <nl> protected String response ; <nl> + protected RequestHandler handler ; <nl> <nl> public RequestSetting ( MocoServer server ) { <nl> this . server = server ; <nl> } <nl> <nl> + <nl> public void response ( String response ) { <nl> this . response = response ; <nl> addToServer ( server ) ; <nl> } <nl> + <nl> + public RequestSetting withHandler ( RequestHandler handler ) { <nl> + this . handler = handler ; <nl> + return this ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / com / github / moco / request / BaseRequestSetting . java b / src / main / java / com / github / moco / request / BaseRequestSetting . java <nl> index 4d4a19f . . e54c171 100644 <nl> - - - a / src / main / java / com / github / moco / request / BaseRequestSetting . java <nl> + + + b / src / main / java / com / github / moco / request / BaseRequestSetting . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . moco . request ; <nl> import com . github . moco . MocoServer ; <nl> import com . github . moco . RequestSetting ; <nl> import org . jboss . netty . buffer . ChannelBuffer ; <nl> + import org . jboss . netty . channel . Channel ; <nl> import org . jboss . netty . handler . codec . http . HttpRequest ; <nl> <nl> public abstract class BaseRequestSetting extends RequestSetting { <nl> @ @ - 21 , 6 + 22 , 14 @ @ public abstract class BaseRequestSetting extends RequestSetting { <nl> return false ; <nl> } <nl> <nl> + public void handleRequest ( HttpRequest request , Channel channel ) { <nl> + if ( handler = = null ) { <nl> + return ; <nl> + } <nl> + <nl> + handler . handle ( request , channel ) ; <nl> + } <nl> + <nl> public void writeResponse ( ChannelBuffer buffer ) { <nl> buffer . writeBytes ( response . getBytes ( ) ) ; <nl> } <nl> diff - - git a / src / test / java / com / github / moco / MocoTest . java b / src / test / java / com / github / moco / MocoTest . java <nl> index 0b4e7e6 . . 4877f45 100644 <nl> - - - a / src / test / java / com / github / moco / MocoTest . java <nl> + + + b / src / test / java / com / github / moco / MocoTest . java <nl> @ @ - 2 , 6 + 2 , 9 @ @ package com . github . moco ; <nl> <nl> import org . apache . http . client . fluent . Content ; <nl> import org . apache . http . client . fluent . Request ; <nl> + import org . jboss . netty . channel . Channel ; <nl> + import org . jboss . netty . handler . codec . http . HttpRequest ; <nl> + import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> @ @ - 11 , 9 + 14 , 16 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoTest { <nl> + <nl> + private MocoServer server ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + server = server ( 8080 ) ; <nl> + } <nl> + <nl> @ Test <nl> public void should _ return _ expected _ response ( ) { <nl> - MocoServer server = server ( 8080 ) ; <nl> server . response ( " foo " ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 32 , 7 + 42 , 6 @ @ public class MocoTest { <nl> <nl> @ Test <nl> public void should _ return _ expected _ response _ based _ on _ specified _ request ( ) { <nl> - MocoServer server = server ( 8080 ) ; <nl> server . withContent ( " foo " ) . response ( " bar " ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 51 , 7 + 60 , 6 @ @ public class MocoTest { <nl> <nl> @ Test <nl> public void should _ return _ expected _ response _ based _ on _ specified _ uri ( ) { <nl> - MocoServer server = server ( 8080 ) ; <nl> server . withUri ( " / foo " ) . response ( " bar " ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 70 , 8 + 78 , 6 @ @ public class MocoTest { <nl> <nl> @ Test ( expected = RuntimeException . class ) <nl> public void should _ throw _ exception _ for _ unknown _ request ( ) { <nl> - MocoServer server = server ( 8080 ) ; <nl> - <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> @ @ - 85 , 4 + 91 , 40 @ @ public class MocoTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ call _ function _ specified _ request ( ) { <nl> + StubRequestHandler handler = new StubRequestHandler ( ) ; <nl> + server . withUri ( " / foo " ) . withHandler ( handler ) . response ( " bar " ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + Content content = Request . Get ( " http : / / localhost : 8080 / foo " ) <nl> + . execute ( ) . returnContent ( ) ; <nl> + assertThat ( content . asString ( ) , is ( " bar " ) ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + assertThat ( handler . getResult ( ) , is ( " / foo " ) ) ; <nl> + } <nl> + <nl> + <nl> + <nl> + private static class StubRequestHandler implements RequestHandler { <nl> + private String result ; <nl> + <nl> + public String getResult ( ) { <nl> + return result ; <nl> + } <nl> + <nl> + @ Override <nl> + public void handle ( HttpRequest request , Channel channel ) { <nl> + result = request . getUri ( ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 index aec3637 . . 41810ea 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 @ @ - 33 , 9 + 33 , 14 @ @ public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { 
 } 
 
 protected final ActualHttpServer createMergeServer ( final ActualHttpServer thatServer ) { 
 - return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; 
 + return newBaseServer ( mergePort ( this , thatServer ) , mergedCertificate ( this . certificate , thatServer . certificate ) ) ; 
 } 
 
 + private Optional < Integer > mergePort ( final ActualHttpServer thisServer , final ActualHttpServer thatServer ) { 
 + return thisServer . getPort ( ) . or ( thatServer . getPort ( ) ) ; 
 + } 
 + 
 + 
 private HttpsCertificate mergedCertificate ( final HttpsCertificate one , final HttpsCertificate other ) { 
 if ( one ! = null ) { 
 return one ;

NEAREST DIFF:
diff - - git a / src / main / java / com / github / moco / MocoHandler . java b / src / main / java / com / github / moco / MocoHandler . java 
 index faa926e . . d430f5a 100644 
 - - - a / src / main / java / com / github / moco / MocoHandler . java 
 + + + b / src / main / java / com / github / moco / MocoHandler . java 
 @ @ - 3 , 10 + 3 , 7 @ @ package com . github . moco ; 
 import com . github . moco . request . BaseRequestSetting ; 
 import org . jboss . netty . buffer . ChannelBuffer ; 
 import org . jboss . netty . buffer . ChannelBuffers ; 
 - import org . jboss . netty . channel . Channel ; 
 - import org . jboss . netty . channel . ChannelHandlerContext ; 
 - import org . jboss . netty . channel . MessageEvent ; 
 - import org . jboss . netty . channel . SimpleChannelHandler ; 
 + import org . jboss . netty . channel . * ; 
 import org . jboss . netty . handler . codec . http . DefaultHttpResponse ; 
 import org . jboss . netty . handler . codec . http . HttpRequest ; 
 import org . jboss . netty . handler . codec . http . HttpResponseStatus ; 
 @ @ - 36 , 18 + 33 , 23 @ @ public class MocoHandler extends SimpleChannelHandler { 
 private void writeResponse ( Channel channel , HttpRequest request ) { 
 for ( BaseRequestSetting requestSetting : requestSettings ) { 
 if ( requestSetting . match ( request ) ) { 
 - channel . write ( createResponse ( requestSetting ) ) ; 
 + handleResponse ( request , requestSetting , channel ) ; 
 return ; 
 } 
 } 
 
 if ( anyRequestSetting ! = null ) { 
 - channel . write ( createResponse ( anyRequestSetting ) ) ; 
 + handleResponse ( request , anyRequestSetting , channel ) ; 
 } else { 
 channel . write ( new DefaultHttpResponse ( HttpVersion . HTTP _ 1 _ 1 , HttpResponseStatus . BAD _ REQUEST ) ) ; 
 } 
 } 
 
 + private ChannelFuture handleResponse ( HttpRequest request , BaseRequestSetting requestSetting , Channel channel ) { 
 + requestSetting . handleRequest ( request , channel ) ; 
 + return channel . write ( createResponse ( requestSetting ) ) ; 
 + } 
 + 
 private DefaultHttpResponse createResponse ( BaseRequestSetting setting ) { 
 DefaultHttpResponse response = new DefaultHttpResponse ( HttpVersion . HTTP _ 1 _ 1 , HttpResponseStatus . OK ) ; 
 ChannelBuffer buffer = ChannelBuffers . dynamicBuffer ( ) ; 
 diff - - git a / src / main / java / com / github / moco / MocoServer . java b / src / main / java / com / github / moco / MocoServer . java 
 index 7813acd . . f747f97 100644 
 - - - a / src / main / java / com / github / moco / MocoServer . java 
 + + + b / src / main / java / com / github / moco / MocoServer . java 
 @ @ - 67 , 11 + 67 , 11 @ @ public class MocoServer { 
 new AnyRequestSetting ( this ) . response ( response ) ; 
 } 
 
 - public BaseRequestSetting withContent ( String requestContent ) { 
 + public RequestSetting withContent ( String requestContent ) { 
 return new ContentRequestSetting ( this , requestContent ) ; 
 } 
 
 - public BaseRequestSetting withUri ( String uri ) { 
 + public RequestSetting withUri ( String uri ) { 
 return new UriRequestSetting ( this , uri ) ; 
 } 
 } 
 diff - - git a / src / main / java / com / github / moco / RequestHandler . java b / src / main / java / com / github / moco / RequestHandler . java 
 new file mode 100644 
 index 0000000 . . 20a681b 
 - - - / dev / null 
 + + + b / src / main / java / com / github / moco / RequestHandler . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . github . moco ; 
 + 
 + import org . jboss . netty . channel . Channel ; 
 + import org . jboss . netty . handler . codec . http . HttpRequest ; 
 + 
 + public interface RequestHandler { 
 + void handle ( HttpRequest request , Channel channel ) ; 
 + } 
 diff - - git a / src / main / java / com / github / moco / RequestSetting . java b / src / main / java / com / github / moco / RequestSetting . java 
 index 44db124 . . e2d8ea6 100644 
 - - - a / src / main / java / com / github / moco / RequestSetting . java 
 + + + b / src / main / java / com / github / moco / RequestSetting . java 
 @ @ - 5 , 13 + 5 , 20 @ @ public abstract class RequestSetting { 
 
 protected MocoServer server ; 
 protected String response ; 
 + protected RequestHandler handler ; 
 
 public RequestSetting ( MocoServer server ) { 
 this . server = server ; 
 } 
 
 + 
 public void response ( String response ) { 
 this . response = response ; 
 addToServer ( server ) ; 
 } 
 + 
 + public RequestSetting withHandler ( RequestHandler handler ) { 
 + this . handler = handler ; 
 + return this ; 
 + } 
 } 
 diff - - git a / src / main / java / com / github / moco / request / BaseRequestSetting . java b / src / main / java / com / github / moco / request / BaseRequestSetting . java 
 index 4d4a19f . . e54c171 100644 
 - - - a / src / main / java / com / github / moco / request / BaseRequestSetting . java 
 + + + b / src / main / java / com / github / moco / request / BaseRequestSetting . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package com . github . moco . request ; 
 import com . github . moco . MocoServer ; 
 import com . github . moco . RequestSetting ; 
 import org . jboss . netty . buffer . ChannelBuffer ; 
 + import org . jboss . netty . channel . Channel ; 
 import org . jboss . netty . handler . codec . http . HttpRequest ; 
 
 public abstract class BaseRequestSetting extends RequestSetting { 
 @ @ - 21 , 6 + 22 , 14 @ @ public abstract class BaseRequestSetting extends RequestSetting { 
 return false ; 
 } 
 
 + public void handleRequest ( HttpRequest request , Channel channel ) { 
 + if ( handler = = null ) { 
 + return ; 
 + } 
 + 
 + handler . handle ( request , channel ) ; 
 + } 
 + 
 public void writeResponse ( ChannelBuffer buffer ) { 
 buffer . writeBytes ( response . getBytes ( ) ) ; 
 } 
 diff - - git a / src / test / java / com / github / moco / MocoTest . java b / src / test / java / com / github / moco / MocoTest . java 
 index 0b4e7e6 . . 4877f45 100644 
 - - - a / src / test / java / com / github / moco / MocoTest . java 
 + + + b / src / test / java / com / github / moco / MocoTest . java 
 @ @ - 2 , 6 + 2 , 9 @ @ package com . github . moco ; 
 
 import org . apache . http . client . fluent . Content ; 
 import org . apache . http . client . fluent . Request ; 
 + import org . jboss . netty . channel . Channel ; 
 + import org . jboss . netty . handler . codec . http . HttpRequest ; 
 + import org . junit . Before ; 
 import org . junit . Test ; 
 
 import java . io . IOException ; 
 @ @ - 11 , 9 + 14 , 16 @ @ import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoTest { 
 + 
 + private MocoServer server ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + server = server ( 8080 ) ; 
 + } 
 + 
 @ Test 
 public void should _ return _ expected _ response ( ) { 
 - MocoServer server = server ( 8080 ) ; 
 server . response ( " foo " ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 32 , 7 + 42 , 6 @ @ public class MocoTest { 
 
 @ Test 
 public void should _ return _ expected _ response _ based _ on _ specified _ request ( ) { 
 - MocoServer server = server ( 8080 ) ; 
 server . withContent ( " foo " ) . response ( " bar " ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 51 , 7 + 60 , 6 @ @ public class MocoTest { 
 
 @ Test 
 public void should _ return _ expected _ response _ based _ on _ specified _ uri ( ) { 
 - MocoServer server = server ( 8080 ) ; 
 server . withUri ( " / foo " ) . response ( " bar " ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 70 , 8 + 78 , 6 @ @ public class MocoTest { 
 
 @ Test ( expected = RuntimeException . class ) 
 public void should _ throw _ exception _ for _ unknown _ request ( ) { 
 - MocoServer server = server ( 8080 ) ; 
 - 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 @ @ - 85 , 4 + 91 , 40 @ @ public class MocoTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ call _ function _ specified _ request ( ) { 
 + StubRequestHandler handler = new StubRequestHandler ( ) ; 
 + server . withUri ( " / foo " ) . withHandler ( handler ) . response ( " bar " ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + Content content = Request . Get ( " http : / / localhost : 8080 / foo " ) 
 + . execute ( ) . returnContent ( ) ; 
 + assertThat ( content . asString ( ) , is ( " bar " ) ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } ) ; 
 + 
 + assertThat ( handler . getResult ( ) , is ( " / foo " ) ) ; 
 + } 
 + 
 + 
 + 
 + private static class StubRequestHandler implements RequestHandler { 
 + private String result ; 
 + 
 + public String getResult ( ) { 
 + return result ; 
 + } 
 + 
 + @ Override 
 + public void handle ( HttpRequest request , Channel channel ) { 
 + result = request . getUri ( ) ; 
 + } 
 + } 
 }
