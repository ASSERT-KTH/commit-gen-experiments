BLEU SCORE: 0.08116697886877475

TEST MSG: renamed source request in failover matcher
GENERATED MSG: proxy failover with json

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java <nl> index 6531d6a . . 967cfef 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java <nl> @ @ - 8 , 19 + 8 , 19 @ @ import com . google . common . base . Strings ; <nl> import java . util . Map ; <nl> <nl> public class HttpRequestFailoverMatcher { <nl> - private final HttpRequest failover ; <nl> + private final HttpRequest source ; <nl> <nl> - public HttpRequestFailoverMatcher ( final HttpRequest failover ) { <nl> - this . failover = failover ; <nl> + public HttpRequestFailoverMatcher ( final HttpRequest source ) { <nl> + this . source = source ; <nl> } <nl> <nl> public boolean match ( final HttpRequest target ) { <nl> - return doMatch ( failover . getUri ( ) , target . getUri ( ) ) <nl> - & & doMatch ( failover . getVersion ( ) , target . getVersion ( ) ) <nl> - & & doMatch ( failover . getContent ( ) , target . getContent ( ) ) <nl> - & & doMatch ( failover . getHeaders ( ) , target . getHeaders ( ) ) <nl> - & & doMatch ( failover . getMethod ( ) , target . getMethod ( ) ) <nl> - & & doMatch ( failover . getQueries ( ) , target . getQueries ( ) ) ; <nl> + return doMatch ( source . getUri ( ) , target . getUri ( ) ) <nl> + & & doMatch ( source . getVersion ( ) , target . getVersion ( ) ) <nl> + & & doMatch ( source . getContent ( ) , target . getContent ( ) ) <nl> + & & doMatch ( source . getHeaders ( ) , target . getHeaders ( ) ) <nl> + & & doMatch ( source . getMethod ( ) , target . getMethod ( ) ) <nl> + & & doMatch ( source . getQueries ( ) , target . getQueries ( ) ) ; <nl> } <nl> <nl> protected boolean doMatch ( final Map < String , ? > thisField , final Map < String , ? > thatField ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index 64b23be . . 3605de6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class ProxyResponseHandler implements ResponseHandler { <nl> <nl> setupResponse ( response , httpclient . execute ( remoteRequest ) ) ; <nl> <nl> - failover . onCompleteResponse ( response ) ; <nl> + failover . onCompleteResponse ( request , response ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> @ @ - 71 , 6 + 71 , 11 @ @ public class ProxyResponseHandler implements ResponseHandler { <nl> <nl> private void setupResponse ( HttpResponse response , org . apache . http . HttpResponse remoteResponse ) throws IOException { <nl> int statusCode = remoteResponse . getStatusLine ( ) . getStatusCode ( ) ; <nl> + if ( statusCode = = HttpResponseStatus . BAD _ REQUEST . getCode ( ) ) { <nl> + failover . failover ( response ) ; <nl> + return ; <nl> + } <nl> + <nl> response . setProtocolVersion ( HttpVersion . valueOf ( remoteResponse . getProtocolVersion ( ) . toString ( ) ) ) ; <nl> response . setStatus ( HttpResponseStatus . valueOf ( statusCode ) ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> index 0cb772f . . 5a8900b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> @ @ - 1 , 29 + 1 , 62 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> - import com . github . dreamhead . moco . dumper . Dumper ; <nl> - import com . github . dreamhead . moco . dumper . HttpResponseDumper ; <nl> - import com . google . common . io . Files ; <nl> + import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . fasterxml . jackson . databind . ObjectWriter ; <nl> + import org . jboss . netty . buffer . ChannelBuffer ; <nl> + import org . jboss . netty . buffer . ChannelBuffers ; <nl> + import org . jboss . netty . handler . codec . http . HttpRequest ; <nl> import org . jboss . netty . handler . codec . http . HttpResponse ; <nl> + import org . jboss . netty . handler . codec . http . HttpResponseStatus ; <nl> + import org . jboss . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . Map ; <nl> <nl> public class DefaultFailover implements Failover { <nl> - private Dumper < HttpResponse > httpResponseDumper = new HttpResponseDumper ( ) ; <nl> - <nl> + private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> private final File file ; <nl> <nl> public DefaultFailover ( File file ) { <nl> this . file = file ; <nl> } <nl> <nl> - public void onCompleteResponse ( HttpResponse response ) { <nl> - String dumpedResponse = httpResponseDumper . dump ( response ) ; <nl> + public void onCompleteResponse ( HttpRequest request , HttpResponse response ) { <nl> try { <nl> - Files . write ( dumpedResponse , file , Charset . defaultCharset ( ) ) ; <nl> + ObjectWriter writer = mapper . writerWithDefaultPrettyPrinter ( ) ; <nl> + writer . writeValue ( this . file , createDumpedResponse ( response ) ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public void failover ( HttpResponse response ) { <nl> + try { <nl> + Response dumpedResponse = mapper . readValue ( this . file , Response . class ) ; <nl> + response . setProtocolVersion ( HttpVersion . valueOf ( dumpedResponse . getVersion ( ) ) ) ; <nl> + response . setStatus ( HttpResponseStatus . valueOf ( dumpedResponse . getStatusCode ( ) ) ) ; <nl> + for ( Map . Entry < String , String > entry : dumpedResponse . getHeaders ( ) . entrySet ( ) ) { <nl> + response . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + <nl> + ChannelBuffer buffer = ChannelBuffers . dynamicBuffer ( ) ; <nl> + buffer . writeBytes ( dumpedResponse . getContent ( ) . getBytes ( ) ) ; <nl> + response . setContent ( buffer ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private Response createDumpedResponse ( HttpResponse response ) { <nl> + Response dumpedResponse = new Response ( ) ; <nl> + dumpedResponse . setStatusCode ( response . getStatus ( ) . getCode ( ) ) ; <nl> + dumpedResponse . setVersion ( response . getProtocolVersion ( ) . getText ( ) ) ; <nl> + for ( Map . Entry < String , String > entry : response . getHeaders ( ) ) { <nl> + dumpedResponse . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + dumpedResponse . setContent ( response . getContent ( ) . toString ( Charset . defaultCharset ( ) ) ) ; <nl> + return dumpedResponse ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index fe3cacd . . 3b24199 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 1 , 13 + 1 , 19 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> + import org . jboss . netty . handler . codec . http . HttpRequest ; <nl> import org . jboss . netty . handler . codec . http . HttpResponse ; <nl> <nl> public interface Failover { <nl> - void onCompleteResponse ( HttpResponse response ) ; <nl> + void onCompleteResponse ( HttpRequest request , HttpResponse response ) ; <nl> + void failover ( HttpResponse response ) ; <nl> <nl> Failover EMPTY _ FAILOVER = new Failover ( ) { <nl> @ Override <nl> - public void onCompleteResponse ( HttpResponse response ) { <nl> + public void onCompleteResponse ( HttpRequest request , HttpResponse response ) { <nl> + } <nl> + <nl> + @ Override <nl> + public void failover ( HttpResponse response ) { <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java <nl> new file mode 100644 <nl> index 0000000 . . 0a5ef9b <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . github . dreamhead . moco . handler . failover ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> + <nl> + public class Message { <nl> + private String version ; <nl> + private String content ; <nl> + private Map < String , String > headers = newHashMap ( ) ; <nl> + <nl> + public void setVersion ( String version ) { <nl> + this . version = version ; <nl> + } <nl> + <nl> + public void setContent ( String content ) { <nl> + this . content = content ; <nl> + } <nl> + <nl> + public void addHeader ( String key , String value ) { <nl> + this . headers . put ( key , value ) ; <nl> + } <nl> + <nl> + public String getVersion ( ) { <nl> + return version ; <nl> + } <nl> + <nl> + public String getContent ( ) { <nl> + return content ; <nl> + } <nl> + <nl> + public Map < String , String > getHeaders ( ) { <nl> + return this . headers ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Response . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Response . java <nl> new file mode 100644 <nl> index 0000000 . . 6373e32 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Response . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . handler . failover ; <nl> + <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> + public class Response extends Message { <nl> + private int statusCode ; <nl> + <nl> + public void setStatusCode ( int statusCode ) { <nl> + this . statusCode = statusCode ; <nl> + } <nl> + <nl> + public int getStatusCode ( ) { <nl> + return statusCode ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 16c07a2 . . 025ce10 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class MocoProxyTest extends AbstractMocoTest { <nl> @ Test <nl> public void should _ failover _ with _ response _ content ( ) throws Exception { <nl> server . post ( and ( by ( uri ( " / target " ) ) , by ( " proxy " ) ) ) . response ( " proxy " ) ; <nl> - final File tempFile = File . createTempFile ( " temp " , " " ) ; <nl> + final File tempFile = File . createTempFile ( " temp " , " . json " ) ; <nl> server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( tempFile . getAbsolutePath ( ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 147 , 4 + 147 , 16 @ @ public class MocoProxyTest extends AbstractMocoTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ failover _ for _ unreachable _ remote _ server ( ) throws Exception { <nl> + server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( " src / test / resources / failover . response " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / proxy " ) , " proxy " ) , is ( " proxy " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / test / resources / failover . response b / moco - core / src / test / resources / failover . response <nl> new file mode 100644 <nl> index 0000000 . . 6245b35 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / failover . response <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + { <nl> + " version " : " HTTP / 1 . 1 " , <nl> + " content " : " proxy " , <nl> + " headers " : { <nl> + " Content - Length " : " 5 " , <nl> + " Content - Type " : " text / plain ; charset = UTF - 8 " <nl> + } , <nl> + " statusCode " : 200 <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java 
 index 6531d6a . . 967cfef 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / HttpRequestFailoverMatcher . java 
 @ @ - 8 , 19 + 8 , 19 @ @ import com . google . common . base . Strings ; 
 import java . util . Map ; 
 
 public class HttpRequestFailoverMatcher { 
 - private final HttpRequest failover ; 
 + private final HttpRequest source ; 
 
 - public HttpRequestFailoverMatcher ( final HttpRequest failover ) { 
 - this . failover = failover ; 
 + public HttpRequestFailoverMatcher ( final HttpRequest source ) { 
 + this . source = source ; 
 } 
 
 public boolean match ( final HttpRequest target ) { 
 - return doMatch ( failover . getUri ( ) , target . getUri ( ) ) 
 - & & doMatch ( failover . getVersion ( ) , target . getVersion ( ) ) 
 - & & doMatch ( failover . getContent ( ) , target . getContent ( ) ) 
 - & & doMatch ( failover . getHeaders ( ) , target . getHeaders ( ) ) 
 - & & doMatch ( failover . getMethod ( ) , target . getMethod ( ) ) 
 - & & doMatch ( failover . getQueries ( ) , target . getQueries ( ) ) ; 
 + return doMatch ( source . getUri ( ) , target . getUri ( ) ) 
 + & & doMatch ( source . getVersion ( ) , target . getVersion ( ) ) 
 + & & doMatch ( source . getContent ( ) , target . getContent ( ) ) 
 + & & doMatch ( source . getHeaders ( ) , target . getHeaders ( ) ) 
 + & & doMatch ( source . getMethod ( ) , target . getMethod ( ) ) 
 + & & doMatch ( source . getQueries ( ) , target . getQueries ( ) ) ; 
 } 
 
 protected boolean doMatch ( final Map < String , ? > thisField , final Map < String , ? > thatField ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 index 64b23be . . 3605de6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public class ProxyResponseHandler implements ResponseHandler { 
 
 setupResponse ( response , httpclient . execute ( remoteRequest ) ) ; 
 
 - failover . onCompleteResponse ( response ) ; 
 + failover . onCompleteResponse ( request , response ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 @ @ - 71 , 6 + 71 , 11 @ @ public class ProxyResponseHandler implements ResponseHandler { 
 
 private void setupResponse ( HttpResponse response , org . apache . http . HttpResponse remoteResponse ) throws IOException { 
 int statusCode = remoteResponse . getStatusLine ( ) . getStatusCode ( ) ; 
 + if ( statusCode = = HttpResponseStatus . BAD _ REQUEST . getCode ( ) ) { 
 + failover . failover ( response ) ; 
 + return ; 
 + } 
 + 
 response . setProtocolVersion ( HttpVersion . valueOf ( remoteResponse . getProtocolVersion ( ) . toString ( ) ) ) ; 
 response . setStatus ( HttpResponseStatus . valueOf ( statusCode ) ) ; 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 index 0cb772f . . 5a8900b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 @ @ - 1 , 29 + 1 , 62 @ @ 
 package com . github . dreamhead . moco . handler . failover ; 
 
 - import com . github . dreamhead . moco . dumper . Dumper ; 
 - import com . github . dreamhead . moco . dumper . HttpResponseDumper ; 
 - import com . google . common . io . Files ; 
 + import com . fasterxml . jackson . databind . ObjectMapper ; 
 + import com . fasterxml . jackson . databind . ObjectWriter ; 
 + import org . jboss . netty . buffer . ChannelBuffer ; 
 + import org . jboss . netty . buffer . ChannelBuffers ; 
 + import org . jboss . netty . handler . codec . http . HttpRequest ; 
 import org . jboss . netty . handler . codec . http . HttpResponse ; 
 + import org . jboss . netty . handler . codec . http . HttpResponseStatus ; 
 + import org . jboss . netty . handler . codec . http . HttpVersion ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . nio . charset . Charset ; 
 + import java . util . Map ; 
 
 public class DefaultFailover implements Failover { 
 - private Dumper < HttpResponse > httpResponseDumper = new HttpResponseDumper ( ) ; 
 - 
 + private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 private final File file ; 
 
 public DefaultFailover ( File file ) { 
 this . file = file ; 
 } 
 
 - public void onCompleteResponse ( HttpResponse response ) { 
 - String dumpedResponse = httpResponseDumper . dump ( response ) ; 
 + public void onCompleteResponse ( HttpRequest request , HttpResponse response ) { 
 try { 
 - Files . write ( dumpedResponse , file , Charset . defaultCharset ( ) ) ; 
 + ObjectWriter writer = mapper . writerWithDefaultPrettyPrinter ( ) ; 
 + writer . writeValue ( this . file , createDumpedResponse ( response ) ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 + 
 + @ Override 
 + public void failover ( HttpResponse response ) { 
 + try { 
 + Response dumpedResponse = mapper . readValue ( this . file , Response . class ) ; 
 + response . setProtocolVersion ( HttpVersion . valueOf ( dumpedResponse . getVersion ( ) ) ) ; 
 + response . setStatus ( HttpResponseStatus . valueOf ( dumpedResponse . getStatusCode ( ) ) ) ; 
 + for ( Map . Entry < String , String > entry : dumpedResponse . getHeaders ( ) . entrySet ( ) ) { 
 + response . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + 
 + ChannelBuffer buffer = ChannelBuffers . dynamicBuffer ( ) ; 
 + buffer . writeBytes ( dumpedResponse . getContent ( ) . getBytes ( ) ) ; 
 + response . setContent ( buffer ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private Response createDumpedResponse ( HttpResponse response ) { 
 + Response dumpedResponse = new Response ( ) ; 
 + dumpedResponse . setStatusCode ( response . getStatus ( ) . getCode ( ) ) ; 
 + dumpedResponse . setVersion ( response . getProtocolVersion ( ) . getText ( ) ) ; 
 + for ( Map . Entry < String , String > entry : response . getHeaders ( ) ) { 
 + dumpedResponse . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + dumpedResponse . setContent ( response . getContent ( ) . toString ( Charset . defaultCharset ( ) ) ) ; 
 + return dumpedResponse ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 index fe3cacd . . 3b24199 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 @ @ - 1 , 13 + 1 , 19 @ @ 
 package com . github . dreamhead . moco . handler . failover ; 
 
 + import org . jboss . netty . handler . codec . http . HttpRequest ; 
 import org . jboss . netty . handler . codec . http . HttpResponse ; 
 
 public interface Failover { 
 - void onCompleteResponse ( HttpResponse response ) ; 
 + void onCompleteResponse ( HttpRequest request , HttpResponse response ) ; 
 + void failover ( HttpResponse response ) ; 
 
 Failover EMPTY _ FAILOVER = new Failover ( ) { 
 @ Override 
 - public void onCompleteResponse ( HttpResponse response ) { 
 + public void onCompleteResponse ( HttpRequest request , HttpResponse response ) { 
 + } 
 + 
 + @ Override 
 + public void failover ( HttpResponse response ) { 
 } 
 } ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java 
 new file mode 100644 
 index 0000000 . . 0a5ef9b 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package com . github . dreamhead . moco . handler . failover ; 
 + 
 + import java . util . Map ; 
 + 
 + import static com . google . common . collect . Maps . newHashMap ; 
 + 
 + public class Message { 
 + private String version ; 
 + private String content ; 
 + private Map < String , String > headers = newHashMap ( ) ; 
 + 
 + public void setVersion ( String version ) { 
 + this . version = version ; 
 + } 
 + 
 + public void setContent ( String content ) { 
 + this . content = content ; 
 + } 
 + 
 + public void addHeader ( String key , String value ) { 
 + this . headers . put ( key , value ) ; 
 + } 
 + 
 + public String getVersion ( ) { 
 + return version ; 
 + } 
 + 
 + public String getContent ( ) { 
 + return content ; 
 + } 
 + 
 + public Map < String , String > getHeaders ( ) { 
 + return this . headers ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Response . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Response . java 
 new file mode 100644 
 index 0000000 . . 6373e32 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Response . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . github . dreamhead . moco . handler . failover ; 
 + 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 + 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 + public class Response extends Message { 
 + private int statusCode ; 
 + 
 + public void setStatusCode ( int statusCode ) { 
 + this . statusCode = statusCode ; 
 + } 
 + 
 + public int getStatusCode ( ) { 
 + return statusCode ; 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 index 16c07a2 . . 025ce10 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 @ @ - 136 , 7 + 136 , 7 @ @ public class MocoProxyTest extends AbstractMocoTest { 
 @ Test 
 public void should _ failover _ with _ response _ content ( ) throws Exception { 
 server . post ( and ( by ( uri ( " / target " ) ) , by ( " proxy " ) ) ) . response ( " proxy " ) ; 
 - final File tempFile = File . createTempFile ( " temp " , " " ) ; 
 + final File tempFile = File . createTempFile ( " temp " , " . json " ) ; 
 server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( tempFile . getAbsolutePath ( ) ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 147 , 4 + 147 , 16 @ @ public class MocoProxyTest extends AbstractMocoTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ failover _ for _ unreachable _ remote _ server ( ) throws Exception { 
 + server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( remoteUrl ( " / target " ) , failover ( " src / test / resources / failover . response " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . postContent ( remoteUrl ( " / proxy " ) , " proxy " ) , is ( " proxy " ) ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / test / resources / failover . response b / moco - core / src / test / resources / failover . response 
 new file mode 100644 
 index 0000000 . . 6245b35 
 - - - / dev / null 
 + + + b / moco - core / src / test / resources / failover . response 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + { 
 + " version " : " HTTP / 1 . 1 " , 
 + " content " : " proxy " , 
 + " headers " : { 
 + " Content - Length " : " 5 " , 
 + " Content - Type " : " text / plain ; charset = UTF - 8 " 
 + } , 
 + " statusCode " : 200 
 + } 
 \ No newline at end of file
