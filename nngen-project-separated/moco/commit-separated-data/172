BLEU SCORE: 0.041961149062965476

TEST MSG: extracted http headers from http message to default http message
GENERATED MSG: made dump http request and response immutable

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 9ecc0ff . . 2e556de 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 6 , 6 + 6 , 9 @ @ import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import java . lang . reflect . ParameterizedType ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> @ @ - 51 , 6 + 54 , 30 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> return this . content ; <nl> } <nl> <nl> + protected static Map < String , Iterable < String > > toHeaders ( final io . netty . handler . codec . http . HttpMessage message ) { <nl> + return toHeaders ( message . headers ( ) ) ; <nl> + } <nl> + <nl> + private static Map < String , Iterable < String > > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> + Map < String , Iterable < String > > headers = new HashMap < > ( ) ; <nl> + for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> + String key = entry . getKey ( ) ; <nl> + List < String > values = getValues ( headers , key ) ; <nl> + values . add ( entry . getValue ( ) ) ; <nl> + headers . put ( key , values ) ; <nl> + } <nl> + <nl> + return headers ; <nl> + } <nl> + <nl> + private static List < String > getValues ( final Map < String , Iterable < String > > headers , final String key ) { <nl> + if ( headers . containsKey ( key ) ) { <nl> + return ( List < String > ) headers . get ( key ) ; <nl> + } <nl> + <nl> + return new ArrayList < > ( ) ; <nl> + } <nl> + <nl> protected static abstract class Builder < T extends Builder > { <nl> private final Class < T > clazz ; <nl> protected HttpProtocolVersion version ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 4d712b0 . . b4ab412 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 22 , 8 + 22 , 6 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringDecoder ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> <nl> - import java . util . ArrayList ; <nl> - import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 142 , 7 + 140 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> - . withHeaders ( toHeaders ( request . headers ( ) ) ) <nl> + . withHeaders ( toHeaders ( request ) ) <nl> . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> @ @ - 187 , 26 + 185 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return request ; <nl> } <nl> <nl> - private static Map < String , Iterable < String > > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> - Map < String , Iterable < String > > headers = new HashMap < > ( ) ; <nl> - for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> - String key = entry . getKey ( ) ; <nl> - List < String > values = getValues ( headers , key ) ; <nl> - values . add ( entry . getValue ( ) ) ; <nl> - headers . put ( key , values ) ; <nl> - } <nl> - <nl> - return headers ; <nl> - } <nl> - <nl> - private static List < String > getValues ( final Map < String , Iterable < String > > headers , final String key ) { <nl> - if ( headers . containsKey ( key ) ) { <nl> - return ( List < String > ) headers . get ( key ) ; <nl> - } <nl> - <nl> - return new ArrayList < > ( ) ; <nl> - } <nl> - <nl> public static final class Builder extends DefaultHttpMessage . Builder < Builder > { <nl> private HttpMethod method ; <nl> private String uri ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index c9a2fd9 . . 9e0f5f0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 8 , 8 + 8 , 6 @ @ import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> - import java . util . Map ; <nl> - <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> @ @ - 29 , 15 + 27 , 10 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> public static HttpResponse newResponse ( final FullHttpResponse response ) { <nl> - ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String > entry : response . headers ( ) ) { <nl> - headerBuilder . put ( entry ) ; <nl> - } <nl> - <nl> return builder ( ) <nl> . withVersion ( toHttpProtocolVersion ( response . protocolVersion ( ) ) ) <nl> . withStatus ( response . status ( ) . code ( ) ) <nl> - . forHeaders ( headerBuilder . build ( ) ) <nl> + . withHeaders ( toHeaders ( response ) ) <nl> . withContent ( content ( ) <nl> . withContent ( new ByteBufInputStream ( response . content ( ) ) ) <nl> . build ( ) )
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java <nl> index 65e1b31 . . 51a46e2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java <nl> @ @ - 10 , 17 + 10 , 15 @ @ import static com . google . common . collect . Maps . newHashMap ; <nl> <nl> @ JsonDeserialize ( builder = DumpHttpRequest . Builder . class ) <nl> public class DumpHttpRequest extends DumpMessage implements HttpRequest { <nl> - private Map < String , String > queries = newHashMap ( ) ; <nl> - private String method ; <nl> - private String uri ; <nl> + private final Map < String , String > queries ; <nl> + private final String method ; <nl> + private final String uri ; <nl> <nl> private DumpHttpRequest ( String version , String content , String method , String uri , <nl> Map < String , String > headers , Map < String , String > queries ) { <nl> - this . version = version ; <nl> - this . content = content ; <nl> + super ( version , content , headers ) ; <nl> this . method = method ; <nl> this . uri = uri ; <nl> - this . headers = headers ; <nl> this . queries = queries ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java <nl> index 736702a . . 99850b6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java <nl> @ @ - 1 , 35 + 1 , 76 @ @ <nl> package com . github . dreamhead . moco . model ; <nl> <nl> + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> - import com . google . common . base . Strings ; <nl> - import io . netty . handler . codec . http . FullHttpMessage ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> <nl> import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> + <nl> + @ JsonDeserialize ( builder = DumpHttpResponse . Builder . class ) <nl> public class DumpHttpResponse extends DumpMessage implements HttpResponse { <nl> - private int statusCode ; <nl> + private final int statusCode ; <nl> + <nl> + public DumpHttpResponse ( String version , int statusCode , Map < String , String > headers , String content ) { <nl> + super ( version , content , headers ) ; <nl> + this . statusCode = statusCode ; <nl> + } <nl> <nl> public int getStatusCode ( ) { <nl> return statusCode ; <nl> } <nl> <nl> public static DumpHttpResponse newResponse ( FullHttpResponse response ) { <nl> - DumpHttpResponse httpResponse = new DumpHttpResponse ( ) ; <nl> - httpResponse . statusCode = response . getStatus ( ) . code ( ) ; <nl> - httpResponse . version = response . getProtocolVersion ( ) . text ( ) ; <nl> + ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String > entry : response . headers ( ) ) { <nl> - httpResponse . headers . put ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + headerBuilder . put ( entry ) ; <nl> } <nl> - setContent ( response , httpResponse ) ; <nl> - return httpResponse ; <nl> + <nl> + return builder ( ) <nl> + . withVersion ( response . getProtocolVersion ( ) . text ( ) ) <nl> + . withStatusCode ( response . getStatus ( ) . code ( ) ) <nl> + . withHeaders ( headerBuilder . build ( ) ) <nl> + . withContent ( response . content ( ) . toString ( Charset . defaultCharset ( ) ) ) <nl> + . build ( ) ; <nl> } <nl> <nl> - private static void setContent ( FullHttpMessage message , DumpMessage dumpedDumpMessage ) { <nl> - String text = message . content ( ) . toString ( Charset . defaultCharset ( ) ) ; <nl> - if ( ! Strings . isNullOrEmpty ( text ) ) { <nl> - dumpedDumpMessage . content = text ; <nl> + public static Builder builder ( ) { <nl> + return new Builder ( ) ; <nl> + } <nl> + <nl> + public static final class Builder { <nl> + private String version ; <nl> + private String content ; <nl> + private Map < String , String > headers = newHashMap ( ) ; <nl> + private int statusCode ; <nl> + <nl> + public Builder withVersion ( String version ) { <nl> + this . version = version ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withContent ( String content ) { <nl> + this . content = content ; <nl> + return this ; <nl> } <nl> + <nl> + public Builder withHeaders ( Map < String , String > headers ) { <nl> + this . headers = headers ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withStatusCode ( int code ) { <nl> + this . statusCode = code ; <nl> + return this ; <nl> + } <nl> + <nl> + public DumpHttpResponse build ( ) { <nl> + return new DumpHttpResponse ( version , statusCode , headers , content ) ; <nl> + } <nl> + <nl> + <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java <nl> index 150c1c5 . . 0c599b3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java <nl> @ @ - 4 , 12 + 4 , 16 @ @ import com . google . common . base . Objects ; <nl> <nl> import java . util . Map ; <nl> <nl> - import static com . google . common . collect . Maps . newHashMap ; <nl> - <nl> public abstract class DumpMessage { <nl> - protected String version ; <nl> - protected String content ; <nl> - protected Map < String , String > headers = newHashMap ( ) ; <nl> + protected final String version ; <nl> + protected final String content ; <nl> + protected final Map < String , String > headers ; <nl> + <nl> + protected DumpMessage ( String version , String content , Map < String , String > headers ) { <nl> + this . version = version ; <nl> + this . headers = headers ; <nl> + this . content = content ; <nl> + } <nl> <nl> public String getVersion ( ) { <nl> return version ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index 9ecc0ff . . 2e556de 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 6 , 6 + 6 , 9 @ @ import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Iterables ; 
 
 import java . lang . reflect . ParameterizedType ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . model . MessageContent . content ; 
 @ @ - 51 , 6 + 54 , 30 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 return this . content ; 
 } 
 
 + protected static Map < String , Iterable < String > > toHeaders ( final io . netty . handler . codec . http . HttpMessage message ) { 
 + return toHeaders ( message . headers ( ) ) ; 
 + } 
 + 
 + private static Map < String , Iterable < String > > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { 
 + Map < String , Iterable < String > > headers = new HashMap < > ( ) ; 
 + for ( Map . Entry < String , String > entry : httpHeaders ) { 
 + String key = entry . getKey ( ) ; 
 + List < String > values = getValues ( headers , key ) ; 
 + values . add ( entry . getValue ( ) ) ; 
 + headers . put ( key , values ) ; 
 + } 
 + 
 + return headers ; 
 + } 
 + 
 + private static List < String > getValues ( final Map < String , Iterable < String > > headers , final String key ) { 
 + if ( headers . containsKey ( key ) ) { 
 + return ( List < String > ) headers . get ( key ) ; 
 + } 
 + 
 + return new ArrayList < > ( ) ; 
 + } 
 + 
 protected static abstract class Builder < T extends Builder > { 
 private final Class < T > clazz ; 
 protected HttpProtocolVersion version ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index 4d712b0 . . b4ab412 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 22 , 8 + 22 , 6 @ @ import io . netty . handler . codec . http . HttpVersion ; 
 import io . netty . handler . codec . http . QueryStringDecoder ; 
 import io . netty . handler . codec . http . QueryStringEncoder ; 
 
 - import java . util . ArrayList ; 
 - import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 142 , 7 + 140 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 
 return builder ( ) 
 . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) 
 - . withHeaders ( toHeaders ( request . headers ( ) ) ) 
 + . withHeaders ( toHeaders ( request ) ) 
 . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) 
 . withUri ( decoder . path ( ) ) 
 . withQueries ( queries ) 
 @ @ - 187 , 26 + 185 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 return request ; 
 } 
 
 - private static Map < String , Iterable < String > > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { 
 - Map < String , Iterable < String > > headers = new HashMap < > ( ) ; 
 - for ( Map . Entry < String , String > entry : httpHeaders ) { 
 - String key = entry . getKey ( ) ; 
 - List < String > values = getValues ( headers , key ) ; 
 - values . add ( entry . getValue ( ) ) ; 
 - headers . put ( key , values ) ; 
 - } 
 - 
 - return headers ; 
 - } 
 - 
 - private static List < String > getValues ( final Map < String , Iterable < String > > headers , final String key ) { 
 - if ( headers . containsKey ( key ) ) { 
 - return ( List < String > ) headers . get ( key ) ; 
 - } 
 - 
 - return new ArrayList < > ( ) ; 
 - } 
 - 
 public static final class Builder extends DefaultHttpMessage . Builder < Builder > { 
 private HttpMethod method ; 
 private String uri ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index c9a2fd9 . . 9e0f5f0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 8 , 8 + 8 , 6 @ @ import io . netty . buffer . ByteBufInputStream ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 import io . netty . handler . codec . http . HttpVersion ; 
 
 - import java . util . Map ; 
 - 
 import static com . github . dreamhead . moco . model . MessageContent . content ; 
 
 @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) 
 @ @ - 29 , 15 + 27 , 10 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo 
 } 
 
 public static HttpResponse newResponse ( final FullHttpResponse response ) { 
 - ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; 
 - for ( Map . Entry < String , String > entry : response . headers ( ) ) { 
 - headerBuilder . put ( entry ) ; 
 - } 
 - 
 return builder ( ) 
 . withVersion ( toHttpProtocolVersion ( response . protocolVersion ( ) ) ) 
 . withStatus ( response . status ( ) . code ( ) ) 
 - . forHeaders ( headerBuilder . build ( ) ) 
 + . withHeaders ( toHeaders ( response ) ) 
 . withContent ( content ( ) 
 . withContent ( new ByteBufInputStream ( response . content ( ) ) ) 
 . build ( ) )

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java 
 index 65e1b31 . . 51a46e2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java 
 @ @ - 10 , 17 + 10 , 15 @ @ import static com . google . common . collect . Maps . newHashMap ; 
 
 @ JsonDeserialize ( builder = DumpHttpRequest . Builder . class ) 
 public class DumpHttpRequest extends DumpMessage implements HttpRequest { 
 - private Map < String , String > queries = newHashMap ( ) ; 
 - private String method ; 
 - private String uri ; 
 + private final Map < String , String > queries ; 
 + private final String method ; 
 + private final String uri ; 
 
 private DumpHttpRequest ( String version , String content , String method , String uri , 
 Map < String , String > headers , Map < String , String > queries ) { 
 - this . version = version ; 
 - this . content = content ; 
 + super ( version , content , headers ) ; 
 this . method = method ; 
 this . uri = uri ; 
 - this . headers = headers ; 
 this . queries = queries ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java 
 index 736702a . . 99850b6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpResponse . java 
 @ @ - 1 , 35 + 1 , 76 @ @ 
 package com . github . dreamhead . moco . model ; 
 
 + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 import com . github . dreamhead . moco . HttpResponse ; 
 - import com . google . common . base . Strings ; 
 - import io . netty . handler . codec . http . FullHttpMessage ; 
 + import com . google . common . collect . ImmutableMap ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 
 import java . nio . charset . Charset ; 
 import java . util . Map ; 
 
 + import static com . google . common . collect . Maps . newHashMap ; 
 + 
 + @ JsonDeserialize ( builder = DumpHttpResponse . Builder . class ) 
 public class DumpHttpResponse extends DumpMessage implements HttpResponse { 
 - private int statusCode ; 
 + private final int statusCode ; 
 + 
 + public DumpHttpResponse ( String version , int statusCode , Map < String , String > headers , String content ) { 
 + super ( version , content , headers ) ; 
 + this . statusCode = statusCode ; 
 + } 
 
 public int getStatusCode ( ) { 
 return statusCode ; 
 } 
 
 public static DumpHttpResponse newResponse ( FullHttpResponse response ) { 
 - DumpHttpResponse httpResponse = new DumpHttpResponse ( ) ; 
 - httpResponse . statusCode = response . getStatus ( ) . code ( ) ; 
 - httpResponse . version = response . getProtocolVersion ( ) . text ( ) ; 
 + ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; 
 for ( Map . Entry < String , String > entry : response . headers ( ) ) { 
 - httpResponse . headers . put ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + headerBuilder . put ( entry ) ; 
 } 
 - setContent ( response , httpResponse ) ; 
 - return httpResponse ; 
 + 
 + return builder ( ) 
 + . withVersion ( response . getProtocolVersion ( ) . text ( ) ) 
 + . withStatusCode ( response . getStatus ( ) . code ( ) ) 
 + . withHeaders ( headerBuilder . build ( ) ) 
 + . withContent ( response . content ( ) . toString ( Charset . defaultCharset ( ) ) ) 
 + . build ( ) ; 
 } 
 
 - private static void setContent ( FullHttpMessage message , DumpMessage dumpedDumpMessage ) { 
 - String text = message . content ( ) . toString ( Charset . defaultCharset ( ) ) ; 
 - if ( ! Strings . isNullOrEmpty ( text ) ) { 
 - dumpedDumpMessage . content = text ; 
 + public static Builder builder ( ) { 
 + return new Builder ( ) ; 
 + } 
 + 
 + public static final class Builder { 
 + private String version ; 
 + private String content ; 
 + private Map < String , String > headers = newHashMap ( ) ; 
 + private int statusCode ; 
 + 
 + public Builder withVersion ( String version ) { 
 + this . version = version ; 
 + return this ; 
 + } 
 + 
 + public Builder withContent ( String content ) { 
 + this . content = content ; 
 + return this ; 
 } 
 + 
 + public Builder withHeaders ( Map < String , String > headers ) { 
 + this . headers = headers ; 
 + return this ; 
 + } 
 + 
 + public Builder withStatusCode ( int code ) { 
 + this . statusCode = code ; 
 + return this ; 
 + } 
 + 
 + public DumpHttpResponse build ( ) { 
 + return new DumpHttpResponse ( version , statusCode , headers , content ) ; 
 + } 
 + 
 + 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java 
 index 150c1c5 . . 0c599b3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpMessage . java 
 @ @ - 4 , 12 + 4 , 16 @ @ import com . google . common . base . Objects ; 
 
 import java . util . Map ; 
 
 - import static com . google . common . collect . Maps . newHashMap ; 
 - 
 public abstract class DumpMessage { 
 - protected String version ; 
 - protected String content ; 
 - protected Map < String , String > headers = newHashMap ( ) ; 
 + protected final String version ; 
 + protected final String content ; 
 + protected final Map < String , String > headers ; 
 + 
 + protected DumpMessage ( String version , String content , Map < String , String > headers ) { 
 + this . version = version ; 
 + this . headers = headers ; 
 + this . content = content ; 
 + } 
 
 public String getVersion ( ) { 
 return version ;
