BLEU SCORE: 0.01509869171115925

TEST MSG: documented cycle
GENERATED MSG: updated document for form , version , match etc

TEST DIFF (one line): diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 93a502e . . 3811962 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 3 + 1 , 8 @ @ <nl> + # Release <nl> + <nl> + # # APIs <nl> + * ` cycle ` API returns response as a cycle . <nl> + <nl> # Release 0 . 12 . 0 ( 24 - Dec - 2017 ) <nl> <nl> * Upgrade minimal Java version to Java 7 <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 70edeb2 . . 9cf1fb2 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1621 , 6 + 1621 , 76 @ @ The other response settings are able to be set for json as well . <nl> } <nl> ` ` ` <nl> <nl> + # # # Cycle <nl> + * * @ Since will be at next release * * <nl> + <nl> + Cycle is similar to ` seq ` , but it will return response as cycle . An example is as following : <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / cycle " ) ) ) . response ( cycle ( " foo " , " bar " , " blah " ) ) ; <nl> + ` ` ` <nl> + <nl> + The response will returned as cycle : <nl> + * foo <nl> + * bar <nl> + * blah <nl> + * foo <nl> + * bar <nl> + * blah <nl> + * . . . <nl> + <nl> + The other response settings are able to be set as well . <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / cycle " ) ) ) . response ( cycle ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * * @ Since 0 . 12 . 0 * * <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / cycle " <nl> + } , <nl> + " response " : { <nl> + " cycle " : [ <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + { <nl> + " text " : " bar " <nl> + } , <nl> + { <nl> + " text " : " blah " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The other response settings are able to be set for json as well . <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / cycle " <nl> + } , <nl> + " response " : { <nl> + " cycle " : [ <nl> + { <nl> + " status " : " 302 " <nl> + } , <nl> + { <nl> + " status " : " 302 " <nl> + } , <nl> + { <nl> + " status " : " 200 " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # JSON Response <nl> If the response is JSON , we don ' t need to write JSON text with escape character in code . <nl>
NEAREST DIFF (one line): diff - - git a / moco - doc / ReleaseNote . md b / moco - doc / ReleaseNote . md <nl> index 174d727 . . 2c9be95 100644 <nl> - - - a / moco - doc / ReleaseNote . md <nl> + + + b / moco - doc / ReleaseNote . md <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> # Release 0 . 7 <nl> + in 2013 . 5 . 1 <nl> + <nl> the first public release of Moco <nl> <nl> # # Usage <nl> diff - - git a / moco - doc / configurations . md b / moco - doc / configurations . md <nl> index d34bf16 . . da75e9d 100644 <nl> - - - a / moco - doc / configurations . md <nl> + + + b / moco - doc / configurations . md <nl> @ @ - 1 , 9 + 1 , 7 @ @ <nl> # Configurations <nl> - Moco mainly focuses on server configuration . There are only two kinds of configuration right now : Request and Response . <nl> + Moco mainly focuses on server configuration . There are only two kinds of configuration right now : * * Request * * and * * Response * * . <nl> <nl> - That means if we get the expected request and then return our response . You have seen the simplest test case in previous example , that is , no matter what request is , return " foo " as response . <nl> - <nl> - Now , you can see a Moco reference in details . <nl> + That means if we get the expected request and then return our response . Now , you can see a Moco reference in details . <nl> <nl> * * WARNING * * the json configuration below is just configuration snippet for one pair of request and response , instead of the whole configuration file . <nl> <nl> @ @ - 94 , 10 + 92 , 11 @ @ server . request ( and ( by ( uri ( " / foo " ) ) , eq ( query ( " param " ) , " blah " ) ) ) . response ( " bar " ) <nl> { <nl> " request " : <nl> { <nl> - " uri " : " / foo " <nl> - " queries " : { <nl> - " param " : " blah " <nl> - } <nl> + " uri " : " / foo " , <nl> + " queries " : <nl> + { <nl> + " param " : " blah " <nl> + } <nl> } , <nl> " response " : <nl> { <nl> @ @ - 155 , 6 + 154 , 30 @ @ server . post ( by ( " foo " ) ) . response ( " bar " ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # Version <nl> + We can return different response for different HTTP version : <nl> + <nl> + * API <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( version ( " HTTP / 1 . 0 " ) ) ) . response ( " version " ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " version " : " HTTP / 1 . 0 " <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " version " <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # Header <nl> We will focus HTTP header at times : <nl> <nl> @ @ - 171 , 7 + 194 , 8 @ @ server . request ( eq ( header ( " foo " ) , " bar " ) ) . response ( " blah " ) <nl> " request " : <nl> { <nl> " method " : " post " , <nl> - " headers " : { <nl> + " headers " : <nl> + { <nl> " content - type " : " application / json " <nl> } <nl> } , <nl> @ @ - 199 , 9 + 223 , 9 @ @ server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> { <nl> " uri " : " / cookie " , <nl> " cookies " : <nl> - { <nl> - " login " : " true " <nl> - } <nl> + { <nl> + " login " : " true " <nl> + } <nl> } , <nl> " response " : <nl> { <nl> @ @ - 219 , 17 + 243 , 21 @ @ In web development , form is often used to submit information to server side . <nl> server . post ( eq ( form ( " name " ) , " foo " ) ) . response ( " bar " ) ; <nl> ` ` ` <nl> <nl> + * JSON <nl> + <nl> + <nl> ` ` ` json <nl> { <nl> " request " : <nl> { <nl> " method " : " post " , <nl> " forms " : <nl> - { <nl> - " name " : " foo " <nl> - } <nl> + { <nl> + " name " : " foo " <nl> + } <nl> } , <nl> - " response " : { <nl> + " response " : <nl> + { <nl> " text " : " bar " <nl> } <nl> } <nl> @ @ - 248 , 15 + 276 , 18 @ @ server . request ( xml ( text ( " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " <nl> <nl> ` ` ` json <nl> { <nl> - " request " : { <nl> - " uri " : " / xml " , <nl> - " text " : { <nl> - " xml " : " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " <nl> + " request " : <nl> + { <nl> + " uri " : " / xml " , <nl> + " text " : <nl> + { <nl> + " xml " : " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " foo " <nl> } <nl> - } , <nl> - " response " : { <nl> - " text " : " foo " <nl> - } <nl> } <nl> ` ` ` <nl> <nl> @ @ - 266 , 15 + 297 , 18 @ @ The large request can be put into a file : <nl> <nl> ` ` ` json <nl> { <nl> - " request " : { <nl> - " uri " : " / xml " , <nl> - " file " : { <nl> - " xml " : " your _ file . xml " <nl> + " request " : <nl> + { <nl> + " uri " : " / xml " , <nl> + " file " : <nl> + { <nl> + " xml " : " your _ file . xml " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " foo " <nl> } <nl> - } , <nl> - " response " : { <nl> - " text " : " foo " <nl> - } <nl> } <nl> ` ` ` <nl> <nl> @ @ - 295 , 9 + 329 , 10 @ @ server . request ( eq ( xpath ( " / request / parameters / id / text ( ) " ) , " 1 " ) ) . response ( " bar " ) ; <nl> " request " : <nl> { <nl> " method " : " post " , <nl> - " xpaths " : { <nl> - " / request / parameters / id / text ( ) " : " 1 " <nl> - } <nl> + " xpaths " : <nl> + { <nl> + " / request / parameters / id / text ( ) " : " 1 " <nl> + } <nl> } , <nl> " response " : <nl> { <nl> @ @ - 319 , 15 + 354 , 18 @ @ server . request ( json ( text ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; <nl> <nl> ` ` ` json <nl> { <nl> - " request " : { <nl> - " uri " : " / json " , <nl> - " text " : { <nl> - " json " : " { \ " foo \ " : \ " bar \ " } " <nl> + " request " : <nl> + { <nl> + " uri " : " / json " , <nl> + " text " : <nl> + { <nl> + " json " : " { \ " foo \ " : \ " bar \ " } " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " foo " <nl> } <nl> - } , <nl> - " response " : { <nl> - " text " : " foo " <nl> - } <nl> } <nl> ` ` ` <nl> <nl> @ @ - 337 , 18 + 375 , 51 @ @ The large request can be put into a file : <nl> <nl> ` ` ` json <nl> { <nl> - " request " : { <nl> - " uri " : " / json " , <nl> - " file " : { <nl> - " json " : " your _ file . json " <nl> + " request " : <nl> + { <nl> + " uri " : " / json " , <nl> + " file " : <nl> + { <nl> + " json " : " your _ file . json " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " foo " <nl> } <nl> - } , <nl> - " response " : { <nl> - " text " : " foo " <nl> - } <nl> } <nl> ` ` ` <nl> <nl> + # # # match <nl> + <nl> + match is not a functionality , it is an operator . You match your request with regular expression : <nl> + <nl> + * API <nl> + <nl> + ` ` ` java <nl> + server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( text ( " bar " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : <nl> + { <nl> + " match " : " / \ \ w * / foo " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " text " : " bar " <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + Moco is implemented by Java regular expression , you can refer [ here ] ( http : / / docs . oracle . com / javase / 7 / docs / api / java / util / regex / Pattern . html ) for more details . <nl> + <nl> # # Response <nl> <nl> # # # Content <nl> @ @ - 423 , 6 + 494 , 33 @ @ server . request ( by ( " foo " ) ) . response ( status ( 200 ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # Version <nl> + <nl> + By default , response HTTP version is supposed to request HTTP version , but you can set your own HTTP version : <nl> + <nl> + * API <nl> + <nl> + ` ` ` java <nl> + server . response ( version ( " HTTP / 1 . 0 " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / version10 " <nl> + } , <nl> + " response " : <nl> + { <nl> + " version " : " HTTP / 1 . 0 " <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + <nl> # # # Header <nl> We can also specify HTTP header in response . <nl> <nl> @ @ - 443 , 9 + 541 , 9 @ @ server . request ( by ( " foo " ) ) . response ( header ( " content - type " , " application / json " ) ) ; <nl> " response " : <nl> { <nl> " headers " : <nl> - { <nl> - " content - type " : " application / json " <nl> - } <nl> + { <nl> + " content - type " : " application / json " <nl> + } <nl> } <nl> } <nl> ` ` ` <nl> @ @ - 580 , 9 + 678 , 9 @ @ server . response ( cache ( file ( " target . txt " ) ) ) ; <nl> " response " : <nl> { <nl> " cache " : <nl> - { <nl> - " file " : " cache . response " <nl> - } <nl> + { <nl> + " file " : " cache . response " <nl> + } <nl> } <nl> } <nl> ` ` ` <nl> @ @ - 599 , 16 + 697 , 16 @ @ server . response ( cache ( file ( " target . txt " ) , with ( file ( " persist . txt " ) ) ) ) ; <nl> ` ` ` json <nl> { <nl> " response " : <nl> - { <nl> - " cache " : <nl> { <nl> - " file " : " cache . response " , <nl> - " with " : <nl> - { <nl> - " file " : " src / test / resources / cache / cache . persistence " <nl> - } <nl> + " cache " : <nl> + { <nl> + " file " : " cache . response " , <nl> + " with " : <nl> + { <nl> + " file " : " src / test / resources / cache / cache . persistence " <nl> + } <nl> + } <nl> } <nl> - } <nl> } <nl> ` ` ` <nl> <nl> @ @ - 653 , 9 + 751 , 9 @ @ server . mount ( dir , to ( " / uri " ) , include ( " * . txt " ) ) ; <nl> " dir " : " dir " , <nl> " uri " : " / uri " , <nl> " includes " : <nl> - [ <nl> - " * . txt " <nl> - ] <nl> + [ <nl> + " * . txt " <nl> + ] <nl> } <nl> } <nl> ` ` ` <nl> @ @ - 677 , 9 + 775 , 9 @ @ server . mount ( dir , to ( " / uri " ) , exclude ( " * . txt " ) ) ; <nl> " dir " : " dir " , <nl> " uri " : " / uri " , <nl> " excludes " : <nl> - [ <nl> - " * . txt " <nl> - ] <nl> + [ <nl> + " * . txt " <nl> + ] <nl> } <nl> } <nl> ` ` ` <nl> @ @ - 701 , 14 + 799 , 14 @ @ server . mount ( dir , to ( " / uri " ) , include ( " a . txt " ) , exclude ( " b . txt " ) , include ( " c . txt <nl> " dir " : " dir " , <nl> " uri " : " / uri " , <nl> " includes " : <nl> - [ <nl> - " a . txt " , <nl> - " b . txt " <nl> - ] , <nl> + [ <nl> + " a . txt " , <nl> + " b . txt " <nl> + ] , <nl> " excludes " : <nl> - [ <nl> - " c . txt " <nl> - ] <nl> + [ <nl> + " c . txt " <nl> + ] <nl> } <nl> } <nl> ` ` ` <nl> \ No newline at end of file <nl> diff - - git a / moco - doc / plan . md b / moco - doc / plan . md <nl> index 8154829 . . d3ccb0a 100644 <nl> - - - a / moco - doc / plan . md <nl> + + + b / moco - doc / plan . md <nl> @ @ - 1 , 9 + 1 , 10 @ @ <nl> # Functionality <nl> <nl> # # Configuration <nl> - * Multiple configuration files <nl> - * Session group <nl> - * Relative file root <nl> + * Setting file <nl> + * * multiple configuration files <nl> + * * context path <nl> + * * relative file root <nl> <nl> # # Matcher <nl> * JSONPath

TEST DIFF:
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index 93a502e . . 3811962 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 1 , 3 + 1 , 8 @ @ 
 + # Release 
 + 
 + # # APIs 
 + * ` cycle ` API returns response as a cycle . 
 + 
 # Release 0 . 12 . 0 ( 24 - Dec - 2017 ) 
 
 * Upgrade minimal Java version to Java 7 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 70edeb2 . . 9cf1fb2 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 1621 , 6 + 1621 , 76 @ @ The other response settings are able to be set for json as well . 
 } 
 ` ` ` 
 
 + # # # Cycle 
 + * * @ Since will be at next release * * 
 + 
 + Cycle is similar to ` seq ` , but it will return response as cycle . An example is as following : 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / cycle " ) ) ) . response ( cycle ( " foo " , " bar " , " blah " ) ) ; 
 + ` ` ` 
 + 
 + The response will returned as cycle : 
 + * foo 
 + * bar 
 + * blah 
 + * foo 
 + * bar 
 + * blah 
 + * . . . 
 + 
 + The other response settings are able to be set as well . 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / cycle " ) ) ) . response ( cycle ( status ( 302 ) , status ( 302 ) , status ( 200 ) ) ) ; 
 + ` ` ` 
 + 
 + * * @ Since 0 . 12 . 0 * * 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / cycle " 
 + } , 
 + " response " : { 
 + " cycle " : [ 
 + { 
 + " text " : " foo " 
 + } , 
 + { 
 + " text " : " bar " 
 + } , 
 + { 
 + " text " : " blah " 
 + } 
 + ] 
 + } 
 + } 
 + ` ` ` 
 + 
 + The other response settings are able to be set for json as well . 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / cycle " 
 + } , 
 + " response " : { 
 + " cycle " : [ 
 + { 
 + " status " : " 302 " 
 + } , 
 + { 
 + " status " : " 302 " 
 + } , 
 + { 
 + " status " : " 200 " 
 + } 
 + ] 
 + } 
 + } 
 + ` ` ` 
 + 
 # # # JSON Response 
 If the response is JSON , we don ' t need to write JSON text with escape character in code . 


NEAREST DIFF:
diff - - git a / moco - doc / ReleaseNote . md b / moco - doc / ReleaseNote . md 
 index 174d727 . . 2c9be95 100644 
 - - - a / moco - doc / ReleaseNote . md 
 + + + b / moco - doc / ReleaseNote . md 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 # Release 0 . 7 
 + in 2013 . 5 . 1 
 + 
 the first public release of Moco 
 
 # # Usage 
 diff - - git a / moco - doc / configurations . md b / moco - doc / configurations . md 
 index d34bf16 . . da75e9d 100644 
 - - - a / moco - doc / configurations . md 
 + + + b / moco - doc / configurations . md 
 @ @ - 1 , 9 + 1 , 7 @ @ 
 # Configurations 
 - Moco mainly focuses on server configuration . There are only two kinds of configuration right now : Request and Response . 
 + Moco mainly focuses on server configuration . There are only two kinds of configuration right now : * * Request * * and * * Response * * . 
 
 - That means if we get the expected request and then return our response . You have seen the simplest test case in previous example , that is , no matter what request is , return " foo " as response . 
 - 
 - Now , you can see a Moco reference in details . 
 + That means if we get the expected request and then return our response . Now , you can see a Moco reference in details . 
 
 * * WARNING * * the json configuration below is just configuration snippet for one pair of request and response , instead of the whole configuration file . 
 
 @ @ - 94 , 10 + 92 , 11 @ @ server . request ( and ( by ( uri ( " / foo " ) ) , eq ( query ( " param " ) , " blah " ) ) ) . response ( " bar " ) 
 { 
 " request " : 
 { 
 - " uri " : " / foo " 
 - " queries " : { 
 - " param " : " blah " 
 - } 
 + " uri " : " / foo " , 
 + " queries " : 
 + { 
 + " param " : " blah " 
 + } 
 } , 
 " response " : 
 { 
 @ @ - 155 , 6 + 154 , 30 @ @ server . post ( by ( " foo " ) ) . response ( " bar " ) ; 
 } 
 ` ` ` 
 
 + # # # Version 
 + We can return different response for different HTTP version : 
 + 
 + * API 
 + 
 + ` ` ` java 
 + server . request ( by ( version ( " HTTP / 1 . 0 " ) ) ) . response ( " version " ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : 
 + { 
 + " version " : " HTTP / 1 . 0 " 
 + } , 
 + " response " : 
 + { 
 + " text " : " version " 
 + } 
 + } 
 + ` ` ` 
 + 
 # # # Header 
 We will focus HTTP header at times : 
 
 @ @ - 171 , 7 + 194 , 8 @ @ server . request ( eq ( header ( " foo " ) , " bar " ) ) . response ( " blah " ) 
 " request " : 
 { 
 " method " : " post " , 
 - " headers " : { 
 + " headers " : 
 + { 
 " content - type " : " application / json " 
 } 
 } , 
 @ @ - 199 , 9 + 223 , 9 @ @ server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; 
 { 
 " uri " : " / cookie " , 
 " cookies " : 
 - { 
 - " login " : " true " 
 - } 
 + { 
 + " login " : " true " 
 + } 
 } , 
 " response " : 
 { 
 @ @ - 219 , 17 + 243 , 21 @ @ In web development , form is often used to submit information to server side . 
 server . post ( eq ( form ( " name " ) , " foo " ) ) . response ( " bar " ) ; 
 ` ` ` 
 
 + * JSON 
 + 
 + 
 ` ` ` json 
 { 
 " request " : 
 { 
 " method " : " post " , 
 " forms " : 
 - { 
 - " name " : " foo " 
 - } 
 + { 
 + " name " : " foo " 
 + } 
 } , 
 - " response " : { 
 + " response " : 
 + { 
 " text " : " bar " 
 } 
 } 
 @ @ - 248 , 15 + 276 , 18 @ @ server . request ( xml ( text ( " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " 
 
 ` ` ` json 
 { 
 - " request " : { 
 - " uri " : " / xml " , 
 - " text " : { 
 - " xml " : " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " 
 + " request " : 
 + { 
 + " uri " : " / xml " , 
 + " text " : 
 + { 
 + " xml " : " < request > < parameters > < id > 1 < / id > < / parameters > < / request > " 
 + } 
 + } , 
 + " response " : 
 + { 
 + " text " : " foo " 
 } 
 - } , 
 - " response " : { 
 - " text " : " foo " 
 - } 
 } 
 ` ` ` 
 
 @ @ - 266 , 15 + 297 , 18 @ @ The large request can be put into a file : 
 
 ` ` ` json 
 { 
 - " request " : { 
 - " uri " : " / xml " , 
 - " file " : { 
 - " xml " : " your _ file . xml " 
 + " request " : 
 + { 
 + " uri " : " / xml " , 
 + " file " : 
 + { 
 + " xml " : " your _ file . xml " 
 + } 
 + } , 
 + " response " : 
 + { 
 + " text " : " foo " 
 } 
 - } , 
 - " response " : { 
 - " text " : " foo " 
 - } 
 } 
 ` ` ` 
 
 @ @ - 295 , 9 + 329 , 10 @ @ server . request ( eq ( xpath ( " / request / parameters / id / text ( ) " ) , " 1 " ) ) . response ( " bar " ) ; 
 " request " : 
 { 
 " method " : " post " , 
 - " xpaths " : { 
 - " / request / parameters / id / text ( ) " : " 1 " 
 - } 
 + " xpaths " : 
 + { 
 + " / request / parameters / id / text ( ) " : " 1 " 
 + } 
 } , 
 " response " : 
 { 
 @ @ - 319 , 15 + 354 , 18 @ @ server . request ( json ( text ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; 
 
 ` ` ` json 
 { 
 - " request " : { 
 - " uri " : " / json " , 
 - " text " : { 
 - " json " : " { \ " foo \ " : \ " bar \ " } " 
 + " request " : 
 + { 
 + " uri " : " / json " , 
 + " text " : 
 + { 
 + " json " : " { \ " foo \ " : \ " bar \ " } " 
 + } 
 + } , 
 + " response " : 
 + { 
 + " text " : " foo " 
 } 
 - } , 
 - " response " : { 
 - " text " : " foo " 
 - } 
 } 
 ` ` ` 
 
 @ @ - 337 , 18 + 375 , 51 @ @ The large request can be put into a file : 
 
 ` ` ` json 
 { 
 - " request " : { 
 - " uri " : " / json " , 
 - " file " : { 
 - " json " : " your _ file . json " 
 + " request " : 
 + { 
 + " uri " : " / json " , 
 + " file " : 
 + { 
 + " json " : " your _ file . json " 
 + } 
 + } , 
 + " response " : 
 + { 
 + " text " : " foo " 
 } 
 - } , 
 - " response " : { 
 - " text " : " foo " 
 - } 
 } 
 ` ` ` 
 
 + # # # match 
 + 
 + match is not a functionality , it is an operator . You match your request with regular expression : 
 + 
 + * API 
 + 
 + ` ` ` java 
 + server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( text ( " bar " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : 
 + { 
 + " uri " : 
 + { 
 + " match " : " / \ \ w * / foo " 
 + } 
 + } , 
 + " response " : 
 + { 
 + " text " : " bar " 
 + } 
 + } 
 + ` ` ` 
 + 
 + Moco is implemented by Java regular expression , you can refer [ here ] ( http : / / docs . oracle . com / javase / 7 / docs / api / java / util / regex / Pattern . html ) for more details . 
 + 
 # # Response 
 
 # # # Content 
 @ @ - 423 , 6 + 494 , 33 @ @ server . request ( by ( " foo " ) ) . response ( status ( 200 ) ) ; 
 } 
 ` ` ` 
 
 + # # # Version 
 + 
 + By default , response HTTP version is supposed to request HTTP version , but you can set your own HTTP version : 
 + 
 + * API 
 + 
 + ` ` ` java 
 + server . response ( version ( " HTTP / 1 . 0 " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + 
 + ` ` ` json 
 + { 
 + " request " : 
 + { 
 + " uri " : " / version10 " 
 + } , 
 + " response " : 
 + { 
 + " version " : " HTTP / 1 . 0 " 
 + } 
 + } 
 + ` ` ` 
 + 
 + 
 # # # Header 
 We can also specify HTTP header in response . 
 
 @ @ - 443 , 9 + 541 , 9 @ @ server . request ( by ( " foo " ) ) . response ( header ( " content - type " , " application / json " ) ) ; 
 " response " : 
 { 
 " headers " : 
 - { 
 - " content - type " : " application / json " 
 - } 
 + { 
 + " content - type " : " application / json " 
 + } 
 } 
 } 
 ` ` ` 
 @ @ - 580 , 9 + 678 , 9 @ @ server . response ( cache ( file ( " target . txt " ) ) ) ; 
 " response " : 
 { 
 " cache " : 
 - { 
 - " file " : " cache . response " 
 - } 
 + { 
 + " file " : " cache . response " 
 + } 
 } 
 } 
 ` ` ` 
 @ @ - 599 , 16 + 697 , 16 @ @ server . response ( cache ( file ( " target . txt " ) , with ( file ( " persist . txt " ) ) ) ) ; 
 ` ` ` json 
 { 
 " response " : 
 - { 
 - " cache " : 
 { 
 - " file " : " cache . response " , 
 - " with " : 
 - { 
 - " file " : " src / test / resources / cache / cache . persistence " 
 - } 
 + " cache " : 
 + { 
 + " file " : " cache . response " , 
 + " with " : 
 + { 
 + " file " : " src / test / resources / cache / cache . persistence " 
 + } 
 + } 
 } 
 - } 
 } 
 ` ` ` 
 
 @ @ - 653 , 9 + 751 , 9 @ @ server . mount ( dir , to ( " / uri " ) , include ( " * . txt " ) ) ; 
 " dir " : " dir " , 
 " uri " : " / uri " , 
 " includes " : 
 - [ 
 - " * . txt " 
 - ] 
 + [ 
 + " * . txt " 
 + ] 
 } 
 } 
 ` ` ` 
 @ @ - 677 , 9 + 775 , 9 @ @ server . mount ( dir , to ( " / uri " ) , exclude ( " * . txt " ) ) ; 
 " dir " : " dir " , 
 " uri " : " / uri " , 
 " excludes " : 
 - [ 
 - " * . txt " 
 - ] 
 + [ 
 + " * . txt " 
 + ] 
 } 
 } 
 ` ` ` 
 @ @ - 701 , 14 + 799 , 14 @ @ server . mount ( dir , to ( " / uri " ) , include ( " a . txt " ) , exclude ( " b . txt " ) , include ( " c . txt 
 " dir " : " dir " , 
 " uri " : " / uri " , 
 " includes " : 
 - [ 
 - " a . txt " , 
 - " b . txt " 
 - ] , 
 + [ 
 + " a . txt " , 
 + " b . txt " 
 + ] , 
 " excludes " : 
 - [ 
 - " c . txt " 
 - ] 
 + [ 
 + " c . txt " 
 + ] 
 } 
 } 
 ` ` ` 
 \ No newline at end of file 
 diff - - git a / moco - doc / plan . md b / moco - doc / plan . md 
 index 8154829 . . d3ccb0a 100644 
 - - - a / moco - doc / plan . md 
 + + + b / moco - doc / plan . md 
 @ @ - 1 , 9 + 1 , 10 @ @ 
 # Functionality 
 
 # # Configuration 
 - * Multiple configuration files 
 - * Session group 
 - * Relative file root 
 + * Setting file 
 + * * multiple configuration files 
 + * * context path 
 + * * relative file root 
 
 # # Matcher 
 * JSONPath
