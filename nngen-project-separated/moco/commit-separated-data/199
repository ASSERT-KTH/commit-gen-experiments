BLEU SCORE: 0.10786826322527471

TEST MSG: used resources in class path file resource reader
GENERATED MSG: threw exception if class path resource does not exist

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index 4a825cc . . d43fa3c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . io . Resources ; <nl> <nl> import java . io . IOException ; <nl> import java . net . URL ; <nl> @ @ - 18 , 9 + 19 , 8 @ @ public class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> } <nl> <nl> protected byte [ ] doReadFor ( final Optional < ? extends Request > request ) { <nl> - ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; <nl> String actualFilename = this . filename ( request ) ; <nl> - URL resource = classLoader . getResource ( actualFilename ) ; <nl> + URL resource = Resources . getResource ( actualFilename ) ; <nl> if ( resource = = null ) { <nl> throw new IllegalArgumentException ( format ( " % s does not exist " , actualFilename ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index cc18729 . . 88ceb38 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 5 , 8 + 5 , 10 @ @ import com . github . dreamhead . moco . util . FileContentType ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . IOException ; <nl> + import java . net . URL ; <nl> <nl> import static com . google . common . io . ByteStreams . toByteArray ; <nl> + import static java . lang . String . format ; <nl> <nl> public class ClasspathFileResourceReader implements ContentResourceReader { <nl> private final String filename ; <nl> @ @ - 18 , 7 + 20 , 13 @ @ public class ClasspathFileResourceReader implements ContentResourceReader { <nl> @ Override <nl> public byte [ ] readFor ( final Optional < ? extends Request > request ) { <nl> try { <nl> - return toByteArray ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( filename ) ) ; <nl> + ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; <nl> + URL resource = classLoader . getResource ( filename ) ; <nl> + if ( resource = = null ) { <nl> + throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; <nl> + } <nl> + <nl> + return toByteArray ( resource . openStream ( ) ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> new file mode 100644 <nl> index 0000000 . . aa3a7ef <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . github . dreamhead . moco . resource . reader ; <nl> + <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . google . common . base . Optional ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class ClasspathFileResourceReaderTest { <nl> + @ Test <nl> + public void should _ return _ class _ path _ file _ content ( ) { <nl> + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( " foo . response " ) ; <nl> + assertThat ( new String ( reader . readFor ( Optional . < Request > absent ( ) ) ) , is ( " foo . response " ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = IllegalArgumentException . class ) <nl> + public void should _ throw _ exception _ when _ file _ does _ not _ exist ( ) { <nl> + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( " unknown . response " ) ; <nl> + reader . readFor ( Optional . < Request > absent ( ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 index 4a825cc . . d43fa3c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . io . Resources ; 
 
 import java . io . IOException ; 
 import java . net . URL ; 
 @ @ - 18 , 9 + 19 , 8 @ @ public class ClasspathFileResourceReader extends AbstractFileResourceReader { 
 } 
 
 protected byte [ ] doReadFor ( final Optional < ? extends Request > request ) { 
 - ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; 
 String actualFilename = this . filename ( request ) ; 
 - URL resource = classLoader . getResource ( actualFilename ) ; 
 + URL resource = Resources . getResource ( actualFilename ) ; 
 if ( resource = = null ) { 
 throw new IllegalArgumentException ( format ( " % s does not exist " , actualFilename ) ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 index cc18729 . . 88ceb38 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 @ @ - 5 , 8 + 5 , 10 @ @ import com . github . dreamhead . moco . util . FileContentType ; 
 import com . google . common . base . Optional ; 
 
 import java . io . IOException ; 
 + import java . net . URL ; 
 
 import static com . google . common . io . ByteStreams . toByteArray ; 
 + import static java . lang . String . format ; 
 
 public class ClasspathFileResourceReader implements ContentResourceReader { 
 private final String filename ; 
 @ @ - 18 , 7 + 20 , 13 @ @ public class ClasspathFileResourceReader implements ContentResourceReader { 
 @ Override 
 public byte [ ] readFor ( final Optional < ? extends Request > request ) { 
 try { 
 - return toByteArray ( this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( filename ) ) ; 
 + ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; 
 + URL resource = classLoader . getResource ( filename ) ; 
 + if ( resource = = null ) { 
 + throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; 
 + } 
 + 
 + return toByteArray ( resource . openStream ( ) ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java 
 new file mode 100644 
 index 0000000 . . aa3a7ef 
 - - - / dev / null 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . github . dreamhead . moco . resource . reader ; 
 + 
 + import com . github . dreamhead . moco . Request ; 
 + import com . google . common . base . Optional ; 
 + import org . junit . Test ; 
 + 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class ClasspathFileResourceReaderTest { 
 + @ Test 
 + public void should _ return _ class _ path _ file _ content ( ) { 
 + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( " foo . response " ) ; 
 + assertThat ( new String ( reader . readFor ( Optional . < Request > absent ( ) ) ) , is ( " foo . response " ) ) ; 
 + } 
 + 
 + @ Test ( expected = IllegalArgumentException . class ) 
 + public void should _ throw _ exception _ when _ file _ does _ not _ exist ( ) { 
 + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( " unknown . response " ) ; 
 + reader . readFor ( Optional . < Request > absent ( ) ) ; 
 + } 
 + } 
 \ No newline at end of file
