BLEU SCORE: 0.03416211359799979

TEST MSG: renamed matcher in base actual server to any matcher
GENERATED MSG: configured response handler only if response handle exists when getting any settings

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index 8f2076e . . 654307f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> private final MocoMonitor monitor ; <nl> private final List < Setting < T > > settings = newArrayList ( ) ; <nl> private Optional < Integer > port ; <nl> - private RequestMatcher matcher = ANY _ REQUEST _ MATCHER ; <nl> + private RequestMatcher anyMatcher = ANY _ REQUEST _ MATCHER ; <nl> <nl> public BaseActualServer ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { <nl> this . port = port ; <nl> @ @ - 52 , 9 + 52 , 9 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> } <nl> <nl> public Setting < T > getAnySetting ( ) { <nl> - Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; <nl> + Setting < T > setting = newSetting ( configuredAnyMatcher ( ) ) ; <nl> if ( this . handler ! = null ) { <nl> - setting . response ( configuredResponseHandler ( ) ) ; <nl> + setting . response ( configuredAnyResponseHandler ( ) ) ; <nl> } <nl> for ( MocoEventTrigger trigger : eventTriggers ) { <nl> setting . on ( trigger ) ; <nl> @ @ - 78 , 10 + 78 , 10 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> this . eventTriggers . addAll ( eventTriggers ) ; <nl> } <nl> <nl> - protected void anySetting ( final RequestMatcher matcher , final ResponseHandler handler ) { <nl> + protected void anySetting ( final RequestMatcher anyMatcher , final ResponseHandler handler ) { <nl> if ( handler ! = null ) { <nl> this . response ( handler ) ; <nl> - this . matcher = matcher ; <nl> + this . anyMatcher = anyMatcher ; <nl> } <nl> } <nl> <nl> @ @ - 95 , 11 + 95 , 11 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> return configItem ( source , this . configs ) ; <nl> } <nl> <nl> - protected RequestMatcher configuredMatcher ( ) { <nl> - return configured ( this . matcher ) ; <nl> + protected RequestMatcher configuredAnyMatcher ( ) { <nl> + return configured ( this . anyMatcher ) ; <nl> } <nl> <nl> - protected ResponseHandler configuredResponseHandler ( ) { <nl> + protected ResponseHandler configuredAnyResponseHandler ( ) { <nl> return configured ( this . handler ) ; <nl> } <nl> <nl> @ @ - 108 , 8 + 108 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> <nl> - newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configuredResponseHandler ( ) ) ; <nl> + newServer . anySetting ( configuredAnyMatcher ( ) , this . configuredAnyResponseHandler ( ) ) ; <nl> + newServer . anySetting ( thatServer . configuredAnyMatcher ( ) , thatServer . configuredAnyResponseHandler ( ) ) ; <nl> <nl> newServer . addEvents ( this . eventTriggers ) ; <nl> newServer . addEvents ( thatServer . eventTriggers ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 43d7324 . . 25450a6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> return certificate ; <nl> } <nl> <nl> - protected ActualHttpServer doCreateServer ( final ActualHttpServer thatServer ) { <nl> + protected ActualHttpServer createMergeServer ( final ActualHttpServer thatServer ) { <nl> return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , this . certificate . or ( thatServer . certificate ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index 4c46c37 . . c11ed7f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> } <nl> <nl> @ Override <nl> - protected ActualSocketServer doCreateServer ( final ActualSocketServer thatServer ) { <nl> + protected ActualSocketServer createMergeServer ( final ActualSocketServer thatServer ) { <nl> return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index 81fa992 . . 685ee88 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 74 , 9 + 74 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> <nl> public Setting < T > getAnySetting ( ) { <nl> Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; <nl> - ResponseHandler configuredHandler = configuredResponseHandler ( ) ; <nl> - if ( configuredHandler ! = null ) { <nl> - setting . response ( configuredHandler ) ; <nl> + if ( this . handler ! = null ) { <nl> + setting . response ( configuredResponseHandler ( ) ) ; <nl> } <nl> for ( MocoEventTrigger trigger : eventTriggers ) { <nl> setting . on ( trigger ) ; <nl> @ @ - 113 , 7 + 112 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> } <nl> } <nl> <nl> - protected < T extends ConfigApplier < T > > T configured ( final T source ) { <nl> + protected < V extends ConfigApplier < V > > V configured ( final V source ) { <nl> return configItem ( source , this . configs ) ; <nl> } <nl> <nl> @ @ - 121 , 14 + 120 , 17 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> return configured ( this . matcher ) ; <nl> } <nl> <nl> + protected ResponseHandler configuredResponseHandler ( ) { <nl> + return configured ( this . handler ) ; <nl> + } <nl> + <nl> public U mergeServer ( final U thatServer ) { <nl> - U newServer = doCreateServer ( thatServer ) ; <nl> + U newServer = createMergeServer ( thatServer ) ; <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> <nl> newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; <nl> - ResponseHandler configured = thatServer . configuredResponseHandler ( ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , configured ) ; <nl> + newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configuredResponseHandler ( ) ) ; <nl> <nl> newServer . addEvents ( this . eventTriggers ) ; <nl> newServer . addEvents ( thatServer . eventTriggers ) ; <nl> @ @ - 136 , 9 + 138 , 5 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B <nl> return newServer ; <nl> } <nl> <nl> - protected ResponseHandler configuredResponseHandler ( ) { <nl> - return configured ( this . handler ) ; <nl> - } <nl> - <nl> - protected abstract U doCreateServer ( final U thatServer ) ; <nl> + protected abstract U createMergeServer ( final U thatServer ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 index 8f2076e . . 654307f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 @ @ - 26 , 7 + 26 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 private final MocoMonitor monitor ; 
 private final List < Setting < T > > settings = newArrayList ( ) ; 
 private Optional < Integer > port ; 
 - private RequestMatcher matcher = ANY _ REQUEST _ MATCHER ; 
 + private RequestMatcher anyMatcher = ANY _ REQUEST _ MATCHER ; 
 
 public BaseActualServer ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { 
 this . port = port ; 
 @ @ - 52 , 9 + 52 , 9 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 } 
 
 public Setting < T > getAnySetting ( ) { 
 - Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; 
 + Setting < T > setting = newSetting ( configuredAnyMatcher ( ) ) ; 
 if ( this . handler ! = null ) { 
 - setting . response ( configuredResponseHandler ( ) ) ; 
 + setting . response ( configuredAnyResponseHandler ( ) ) ; 
 } 
 for ( MocoEventTrigger trigger : eventTriggers ) { 
 setting . on ( trigger ) ; 
 @ @ - 78 , 10 + 78 , 10 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 this . eventTriggers . addAll ( eventTriggers ) ; 
 } 
 
 - protected void anySetting ( final RequestMatcher matcher , final ResponseHandler handler ) { 
 + protected void anySetting ( final RequestMatcher anyMatcher , final ResponseHandler handler ) { 
 if ( handler ! = null ) { 
 this . response ( handler ) ; 
 - this . matcher = matcher ; 
 + this . anyMatcher = anyMatcher ; 
 } 
 } 
 
 @ @ - 95 , 11 + 95 , 11 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 return configItem ( source , this . configs ) ; 
 } 
 
 - protected RequestMatcher configuredMatcher ( ) { 
 - return configured ( this . matcher ) ; 
 + protected RequestMatcher configuredAnyMatcher ( ) { 
 + return configured ( this . anyMatcher ) ; 
 } 
 
 - protected ResponseHandler configuredResponseHandler ( ) { 
 + protected ResponseHandler configuredAnyResponseHandler ( ) { 
 return configured ( this . handler ) ; 
 } 
 
 @ @ - 108 , 8 + 108 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 newServer . addSettings ( this . getSettings ( ) ) ; 
 newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 
 - newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; 
 - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configuredResponseHandler ( ) ) ; 
 + newServer . anySetting ( configuredAnyMatcher ( ) , this . configuredAnyResponseHandler ( ) ) ; 
 + newServer . anySetting ( thatServer . configuredAnyMatcher ( ) , thatServer . configuredAnyResponseHandler ( ) ) ; 
 
 newServer . addEvents ( this . eventTriggers ) ; 
 newServer . addEvents ( thatServer . eventTriggers ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 index 43d7324 . . 25450a6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { 
 return certificate ; 
 } 
 
 - protected ActualHttpServer doCreateServer ( final ActualHttpServer thatServer ) { 
 + protected ActualHttpServer createMergeServer ( final ActualHttpServer thatServer ) { 
 return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , this . certificate . or ( thatServer . certificate ) ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 index 4c46c37 . . c11ed7f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet 
 } 
 
 @ Override 
 - protected ActualSocketServer doCreateServer ( final ActualSocketServer thatServer ) { 
 + protected ActualSocketServer createMergeServer ( final ActualSocketServer thatServer ) { 
 return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 index 81fa992 . . 685ee88 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 @ @ - 74 , 9 + 74 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 
 public Setting < T > getAnySetting ( ) { 
 Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; 
 - ResponseHandler configuredHandler = configuredResponseHandler ( ) ; 
 - if ( configuredHandler ! = null ) { 
 - setting . response ( configuredHandler ) ; 
 + if ( this . handler ! = null ) { 
 + setting . response ( configuredResponseHandler ( ) ) ; 
 } 
 for ( MocoEventTrigger trigger : eventTriggers ) { 
 setting . on ( trigger ) ; 
 @ @ - 113 , 7 + 112 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 } 
 } 
 
 - protected < T extends ConfigApplier < T > > T configured ( final T source ) { 
 + protected < V extends ConfigApplier < V > > V configured ( final V source ) { 
 return configItem ( source , this . configs ) ; 
 } 
 
 @ @ - 121 , 14 + 120 , 17 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 return configured ( this . matcher ) ; 
 } 
 
 + protected ResponseHandler configuredResponseHandler ( ) { 
 + return configured ( this . handler ) ; 
 + } 
 + 
 public U mergeServer ( final U thatServer ) { 
 - U newServer = doCreateServer ( thatServer ) ; 
 + U newServer = createMergeServer ( thatServer ) ; 
 newServer . addSettings ( this . getSettings ( ) ) ; 
 newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 
 newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; 
 - ResponseHandler configured = thatServer . configuredResponseHandler ( ) ; 
 - newServer . anySetting ( thatServer . configuredMatcher ( ) , configured ) ; 
 + newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configuredResponseHandler ( ) ) ; 
 
 newServer . addEvents ( this . eventTriggers ) ; 
 newServer . addEvents ( thatServer . eventTriggers ) ; 
 @ @ - 136 , 9 + 138 , 5 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends B 
 return newServer ; 
 } 
 
 - protected ResponseHandler configuredResponseHandler ( ) { 
 - return configured ( this . handler ) ; 
 - } 
 - 
 - protected abstract U doCreateServer ( final U thatServer ) ; 
 + protected abstract U createMergeServer ( final U thatServer ) ; 
 }
