BLEU SCORE: 0.03283637368030199

TEST MSG: added missing argument check to cookie attributes
GENERATED MSG: corrected typo in Moco publish API

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 5ada542 . . 7c40e35 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 289 , 17 + 289 , 17 @ @ public final class Moco { <nl> return new CookieRequestExtractor ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) ) ; <nl> } <nl> <nl> - public static ResponseHandler cookie ( final String key , final String value , final CookieAttribute . . . options ) { <nl> + public static ResponseHandler cookie ( final String key , final String value , final CookieAttribute . . . attributes ) { <nl> return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , <nl> text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) , <nl> - options ) ; <nl> + checkNotNull ( attributes , " Cookie options should not be null " ) ) ; <nl> } <nl> <nl> - public static ResponseHandler cookie ( final String key , final Resource resource , final CookieAttribute . . . options ) { <nl> + public static ResponseHandler cookie ( final String key , final Resource resource , final CookieAttribute . . . attributes ) { <nl> return header ( SET _ COOKIE , cookieResource ( <nl> checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , <nl> checkNotNull ( resource , " Cookie value should not be null " ) , <nl> - options ) ) ; <nl> + checkNotNull ( attributes , " Cookie options should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestExtractor < String > form ( final String key ) { <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 86a3fda . . 5c2faaf 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1406 , 7 + 1406 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; <nl> <nl> @ Since will be at next version <nl> <nl> - An HttpOnly cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . <nl> + An http only cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . <nl> <nl> * Java <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 0578856 . . 0337539 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 207 , 7 + 207 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher by ( final Resource resource ) { <nl> - checkNotNull ( resource , " resource should not be null " ) ; <nl> + checkNotNull ( resource , " Resource should not be null " ) ; <nl> return eq ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> @ @ - 372 , 7 + 372 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher json ( final String jsonText ) { <nl> - return json ( text ( checkNotNull ( jsonText , " JSON should not be null " ) ) ) ; <nl> + return json ( text ( checkNotNull ( jsonText , " Json should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher json ( final Object pojo ) { <nl> @ @ - 380 , 7 + 380 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static RequestMatcher json ( final Resource resource ) { <nl> - checkNotNull ( resource , " JSON should not be null " ) ; <nl> + checkNotNull ( resource , " Json should not be null " ) ; <nl> return new JsonRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> @ @ - 393 , 22 + 393 , 22 @ @ public final class Moco { <nl> } <nl> <nl> public static ResponseHandler seq ( final String . . . contents ) { <nl> - checkArgument ( contents . length > 0 , " seq contents should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) . toList ( ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final Resource . . . contents ) { <nl> - checkArgument ( contents . length > 0 , " seq contents should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) . toList ( ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { <nl> - checkArgument ( handlers . length > 0 , " seq contents should not be null " ) ; <nl> + checkArgument ( handlers . length > 0 , " Sequence contents should not be null " ) ; <nl> return seq ( copyOf ( handlers ) ) ; <nl> } <nl> <nl> private static ResponseHandler seq ( final ImmutableList < ResponseHandler > handlers ) { <nl> - checkArgument ( handlers . size ( ) > 0 , " seq contents should not be null " ) ; <nl> + checkArgument ( handlers . size ( ) > 0 , " Sequence contents should not be null " ) ; <nl> return new SequenceHandler ( handlers ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index 93f513c . . 61331d3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 29 , 7 + 29 , 10 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> } <nl> <nl> private ImmutableList < RequestMatcher > createRequestMatchers ( final RequestSetting request ) { <nl> - return from ( getFields ( RequestSetting . class ) ) . filter ( isValidField ( request ) ) . transform ( fieldToRequestMatcher ( request ) ) . toList ( ) ; <nl> + return from ( getFields ( RequestSetting . class ) ) <nl> + . filter ( isValidField ( request ) ) <nl> + . transform ( fieldToRequestMatcher ( request ) ) <nl> + . toList ( ) ; <nl> } <nl> <nl> private Function < Field , RequestMatcher > fieldToRequestMatcher ( final RequestSetting request ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> index 5878e8c . . e03ee2b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> @ @ - 36 , 7 + 36 , 8 @ @ public class SessionSetting { <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) . omitNullValues ( ) <nl> + return MoreObjects . toStringHelper ( this ) <nl> + . omitNullValues ( ) <nl> . add ( " request " , request ) <nl> . add ( " response " , response ) <nl> . add ( " redirect to " , redirectTo )

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 5ada542 . . 7c40e35 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 289 , 17 + 289 , 17 @ @ public final class Moco { 
 return new CookieRequestExtractor ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) ) ; 
 } 
 
 - public static ResponseHandler cookie ( final String key , final String value , final CookieAttribute . . . options ) { 
 + public static ResponseHandler cookie ( final String key , final String value , final CookieAttribute . . . attributes ) { 
 return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , 
 text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) , 
 - options ) ; 
 + checkNotNull ( attributes , " Cookie options should not be null " ) ) ; 
 } 
 
 - public static ResponseHandler cookie ( final String key , final Resource resource , final CookieAttribute . . . options ) { 
 + public static ResponseHandler cookie ( final String key , final Resource resource , final CookieAttribute . . . attributes ) { 
 return header ( SET _ COOKIE , cookieResource ( 
 checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , 
 checkNotNull ( resource , " Cookie value should not be null " ) , 
 - options ) ) ; 
 + checkNotNull ( attributes , " Cookie options should not be null " ) ) ) ; 
 } 
 
 public static RequestExtractor < String > form ( final String key ) { 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 86a3fda . . 5c2faaf 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 1406 , 7 + 1406 , 7 @ @ server . response ( cookie ( " loggedIn " , " true " , secure ( ) ) , status ( 302 ) ) ; 
 
 @ Since will be at next version 
 
 - An HttpOnly cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . 
 + An http only cookie cannot be accessed by client - side APIs . You can add your own ` httpOnly ` cookie attribute to your response . 
 
 * Java 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 0578856 . . 0337539 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 207 , 7 + 207 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher by ( final Resource resource ) { 
 - checkNotNull ( resource , " resource should not be null " ) ; 
 + checkNotNull ( resource , " Resource should not be null " ) ; 
 return eq ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 @ @ - 372 , 7 + 372 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher json ( final String jsonText ) { 
 - return json ( text ( checkNotNull ( jsonText , " JSON should not be null " ) ) ) ; 
 + return json ( text ( checkNotNull ( jsonText , " Json should not be null " ) ) ) ; 
 } 
 
 public static RequestMatcher json ( final Object pojo ) { 
 @ @ - 380 , 7 + 380 , 7 @ @ public final class Moco { 
 } 
 
 public static RequestMatcher json ( final Resource resource ) { 
 - checkNotNull ( resource , " JSON should not be null " ) ; 
 + checkNotNull ( resource , " Json should not be null " ) ; 
 return new JsonRequestMatcher ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 @ @ - 393 , 22 + 393 , 22 @ @ public final class Moco { 
 } 
 
 public static ResponseHandler seq ( final String . . . contents ) { 
 - checkArgument ( contents . length > 0 , " seq contents should not be null " ) ; 
 + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) . toList ( ) ) ; 
 } 
 
 public static ResponseHandler seq ( final Resource . . . contents ) { 
 - checkArgument ( contents . length > 0 , " seq contents should not be null " ) ; 
 + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) . toList ( ) ) ; 
 } 
 
 public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { 
 - checkArgument ( handlers . length > 0 , " seq contents should not be null " ) ; 
 + checkArgument ( handlers . length > 0 , " Sequence contents should not be null " ) ; 
 return seq ( copyOf ( handlers ) ) ; 
 } 
 
 private static ResponseHandler seq ( final ImmutableList < ResponseHandler > handlers ) { 
 - checkArgument ( handlers . size ( ) > 0 , " seq contents should not be null " ) ; 
 + checkArgument ( handlers . size ( ) > 0 , " Sequence contents should not be null " ) ; 
 return new SequenceHandler ( handlers ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 index 93f513c . . 61331d3 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 @ @ - 29 , 7 + 29 , 10 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat 
 } 
 
 private ImmutableList < RequestMatcher > createRequestMatchers ( final RequestSetting request ) { 
 - return from ( getFields ( RequestSetting . class ) ) . filter ( isValidField ( request ) ) . transform ( fieldToRequestMatcher ( request ) ) . toList ( ) ; 
 + return from ( getFields ( RequestSetting . class ) ) 
 + . filter ( isValidField ( request ) ) 
 + . transform ( fieldToRequestMatcher ( request ) ) 
 + . toList ( ) ; 
 } 
 
 private Function < Field , RequestMatcher > fieldToRequestMatcher ( final RequestSetting request ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 index 5878e8c . . e03ee2b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 @ @ - 36 , 7 + 36 , 8 @ @ public class SessionSetting { 
 
 @ Override 
 public String toString ( ) { 
 - return MoreObjects . toStringHelper ( this ) . omitNullValues ( ) 
 + return MoreObjects . toStringHelper ( this ) 
 + . omitNullValues ( ) 
 . add ( " request " , request ) 
 . add ( " response " , response ) 
 . add ( " redirect to " , redirectTo )
