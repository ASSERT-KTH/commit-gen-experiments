BLEU SCORE: 0.31020161970069987

TEST MSG: removed optional from field in abstract file resource reader
GENERATED MSG: removed optional from config in file resource reader

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 216eb4b . . 7f31454 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 113 , 11 + 113 , 11 @ @ public final class ApiUtils { <nl> } <nl> <nl> public static ContentResource file ( final Resource filename , final Charset charset ) { <nl> - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . fromNullable ( charset ) , null ) ; <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final Resource filename , final Charset charset ) { <nl> - return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . fromNullable ( charset ) ) ; <nl> + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; <nl> } <nl> <nl> private ApiUtils ( ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> index 372611d . . c65654a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public final class ResourceConfigApplierFactory { <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> protected Resource newResource ( final MocoConfig config ) { <nl> - return fileResource ( file , Optional . < Charset > absent ( ) , config ) ; <nl> + return fileResource ( file , null , config ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 419759b . . c48fc95 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 44 , 13 + 44 , 13 @ @ public final class ResourceFactory { <nl> } ) ; <nl> } <nl> <nl> - public static ContentResource fileResource ( final Resource filename , final Optional < Charset > charset , <nl> + public static ContentResource fileResource ( final Resource filename , final Charset charset , <nl> final MocoConfig config ) { <nl> return contentResource ( id ( MocoConfig . FILE _ ID ) , fileConfigApplier ( MocoConfig . FILE _ ID , filename ) , <nl> new FileResourceReader ( filename , charset , config ) ) ; <nl> } <nl> <nl> - public static ContentResource classpathFileResource ( final Resource filename , final Optional < Charset > charset ) { <nl> + public static ContentResource classpathFileResource ( final Resource filename , final Charset charset ) { <nl> return contentResource ( id ( " pathresource " ) , DO _ NOTHING _ APPLIER , <nl> new ClasspathFileResourceReader ( filename , charset ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 6fa14b8 . . 58bad83 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 18 , 9 + 18 , 9 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> protected abstract byte [ ] doReadFor ( Optional < ? extends Request > request ) ; <nl> <nl> private final Resource filename ; <nl> - private final Optional < Charset > charset ; <nl> + private final Charset charset ; <nl> <nl> - protected AbstractFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { <nl> + protected AbstractFileResourceReader ( final Resource filename , final Charset charset ) { <nl> this . charset = charset ; <nl> this . filename = filename ; <nl> } <nl> @ @ - 32 , 8 + 32 , 8 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> <nl> private MessageContent asMessageContent ( final byte [ ] content ) { <nl> MessageContent . Builder builder = content ( ) . withContent ( content ) ; <nl> - if ( charset . isPresent ( ) ) { <nl> - builder . withCharset ( charset . get ( ) ) ; <nl> + if ( charset ! = null ) { <nl> + builder . withCharset ( charset ) ; <nl> } <nl> <nl> return builder . build ( ) ; <nl> @ @ - 42 , 7 + 42 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> @ Override <nl> public final MediaType getContentType ( final HttpRequest request ) { <nl> String targetFilename = this . filename ( of ( request ) ) ; <nl> - return new FileContentType ( targetFilename , charset . orNull ( ) ) . getContentType ( ) ; <nl> + return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; <nl> } <nl> <nl> protected final String filename ( final Optional < ? extends Request > request ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index efa73e1 . . 91a480c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . io . ByteStreams . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> public final class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> - public ClasspathFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { <nl> + public ClasspathFileResourceReader ( final Resource filename , final Charset charset ) { <nl> super ( filename , charset ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> index 151abe8 . . d11b3e9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> @ @ - 17 , 10 + 17 , 10 @ @ public final class FileResourceReader extends AbstractFileResourceReader { <nl> private final MocoConfig config ; <nl> <nl> public FileResourceReader ( final Resource file ) { <nl> - this ( file , Optional . < Charset > absent ( ) , null ) ; <nl> + this ( file , null , null ) ; <nl> } <nl> <nl> - public FileResourceReader ( final Resource file , final Optional < Charset > charset , final MocoConfig config ) { <nl> + public FileResourceReader ( final Resource file , final Charset charset , final MocoConfig config ) { <nl> super ( file , charset ) ; <nl> this . config = config ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> index f722806 . . 5cbf22c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java <nl> @ @ - 13 , 13 + 13 , 13 @ @ import static org . junit . Assert . assertThat ; <nl> public class ClasspathFileResourceReaderTest { <nl> @ Test <nl> public void should _ return _ class _ path _ file _ content ( ) { <nl> - ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " foo . response " ) , Optional . < Charset > absent ( ) ) ; <nl> + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " foo . response " ) , null ) ; <nl> assertThat ( reader . readFor ( Optional . < Request > absent ( ) ) . toString ( ) , is ( " foo . response " ) ) ; <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void should _ throw _ exception _ when _ file _ does _ not _ exist ( ) { <nl> - ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , Optional . < Charset > absent ( ) ) ; <nl> + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , null ) ; <nl> reader . readFor ( Optional . < Request > absent ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index abb8d77 . . df15918 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 412 , 7 + 412 , 7 @ @ public final class Moco { <nl> } <nl> <nl> private static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { <nl> - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , Optional . < MocoConfig > absent ( ) ) ; <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final String filename ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> index d03cf5a . . 372611d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public final class ResourceConfigApplierFactory { <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> protected Resource newResource ( final MocoConfig config ) { <nl> - return fileResource ( file , Optional . < Charset > absent ( ) , Optional . of ( config ) ) ; <nl> + return fileResource ( file , Optional . < Charset > absent ( ) , config ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 1ae40b4 . . 419759b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public final class ResourceFactory { <nl> } <nl> <nl> public static ContentResource fileResource ( final Resource filename , final Optional < Charset > charset , <nl> - final Optional < MocoConfig > config ) { <nl> + final MocoConfig config ) { <nl> return contentResource ( id ( MocoConfig . FILE _ ID ) , fileConfigApplier ( MocoConfig . FILE _ ID , filename ) , <nl> new FileResourceReader ( filename , charset , config ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> index 032a05c . . 151abe8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> @ @ - 14 , 13 + 14 , 13 @ @ import static com . google . common . io . Files . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> public final class FileResourceReader extends AbstractFileResourceReader { <nl> - private final Optional < MocoConfig > config ; <nl> + private final MocoConfig config ; <nl> <nl> public FileResourceReader ( final Resource file ) { <nl> - this ( file , Optional . < Charset > absent ( ) , Optional . < MocoConfig > absent ( ) ) ; <nl> + this ( file , Optional . < Charset > absent ( ) , null ) ; <nl> } <nl> <nl> - public FileResourceReader ( final Resource file , final Optional < Charset > charset , final Optional < MocoConfig > config ) { <nl> + public FileResourceReader ( final Resource file , final Optional < Charset > charset , final MocoConfig config ) { <nl> super ( file , charset ) ; <nl> this . config = config ; <nl> } <nl> @ @ - 44 , 8 + 44 , 8 @ @ public final class FileResourceReader extends AbstractFileResourceReader { <nl> private String targetFileName ( final Optional < ? extends Request > request ) { <nl> String filename = this . filename ( request ) ; <nl> <nl> - if ( config . isPresent ( ) ) { <nl> - return ( String ) config . get ( ) . apply ( filename ) ; <nl> + if ( config ! = null ) { <nl> + return ( String ) config . apply ( filename ) ; <nl> } <nl> <nl> return filename ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 index 216eb4b . . 7f31454 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 113 , 11 + 113 , 11 @ @ public final class ApiUtils { 
 } 
 
 public static ContentResource file ( final Resource filename , final Charset charset ) { 
 - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . fromNullable ( charset ) , null ) ; 
 + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; 
 } 
 
 public static ContentResource pathResource ( final Resource filename , final Charset charset ) { 
 - return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . fromNullable ( charset ) ) ; 
 + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; 
 } 
 
 private ApiUtils ( ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java 
 index 372611d . . c65654a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java 
 @ @ - 26 , 7 + 26 , 7 @ @ public final class ResourceConfigApplierFactory { 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 protected Resource newResource ( final MocoConfig config ) { 
 - return fileResource ( file , Optional . < Charset > absent ( ) , config ) ; 
 + return fileResource ( file , null , config ) ; 
 } 
 } ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 index 419759b . . c48fc95 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 @ @ - 44 , 13 + 44 , 13 @ @ public final class ResourceFactory { 
 } ) ; 
 } 
 
 - public static ContentResource fileResource ( final Resource filename , final Optional < Charset > charset , 
 + public static ContentResource fileResource ( final Resource filename , final Charset charset , 
 final MocoConfig config ) { 
 return contentResource ( id ( MocoConfig . FILE _ ID ) , fileConfigApplier ( MocoConfig . FILE _ ID , filename ) , 
 new FileResourceReader ( filename , charset , config ) ) ; 
 } 
 
 - public static ContentResource classpathFileResource ( final Resource filename , final Optional < Charset > charset ) { 
 + public static ContentResource classpathFileResource ( final Resource filename , final Charset charset ) { 
 return contentResource ( id ( " pathresource " ) , DO _ NOTHING _ APPLIER , 
 new ClasspathFileResourceReader ( filename , charset ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 index 6fa14b8 . . 58bad83 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 @ @ - 18 , 9 + 18 , 9 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 protected abstract byte [ ] doReadFor ( Optional < ? extends Request > request ) ; 
 
 private final Resource filename ; 
 - private final Optional < Charset > charset ; 
 + private final Charset charset ; 
 
 - protected AbstractFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { 
 + protected AbstractFileResourceReader ( final Resource filename , final Charset charset ) { 
 this . charset = charset ; 
 this . filename = filename ; 
 } 
 @ @ - 32 , 8 + 32 , 8 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 
 private MessageContent asMessageContent ( final byte [ ] content ) { 
 MessageContent . Builder builder = content ( ) . withContent ( content ) ; 
 - if ( charset . isPresent ( ) ) { 
 - builder . withCharset ( charset . get ( ) ) ; 
 + if ( charset ! = null ) { 
 + builder . withCharset ( charset ) ; 
 } 
 
 return builder . build ( ) ; 
 @ @ - 42 , 7 + 42 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 @ Override 
 public final MediaType getContentType ( final HttpRequest request ) { 
 String targetFilename = this . filename ( of ( request ) ) ; 
 - return new FileContentType ( targetFilename , charset . orNull ( ) ) . getContentType ( ) ; 
 + return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; 
 } 
 
 protected final String filename ( final Optional < ? extends Request > request ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 index efa73e1 . . 91a480c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . io . ByteStreams . toByteArray ; 
 import static java . lang . String . format ; 
 
 public final class ClasspathFileResourceReader extends AbstractFileResourceReader { 
 - public ClasspathFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { 
 + public ClasspathFileResourceReader ( final Resource filename , final Charset charset ) { 
 super ( filename , charset ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 index 151abe8 . . d11b3e9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 @ @ - 17 , 10 + 17 , 10 @ @ public final class FileResourceReader extends AbstractFileResourceReader { 
 private final MocoConfig config ; 
 
 public FileResourceReader ( final Resource file ) { 
 - this ( file , Optional . < Charset > absent ( ) , null ) ; 
 + this ( file , null , null ) ; 
 } 
 
 - public FileResourceReader ( final Resource file , final Optional < Charset > charset , final MocoConfig config ) { 
 + public FileResourceReader ( final Resource file , final Charset charset , final MocoConfig config ) { 
 super ( file , charset ) ; 
 this . config = config ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java 
 index f722806 . . 5cbf22c 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReaderTest . java 
 @ @ - 13 , 13 + 13 , 13 @ @ import static org . junit . Assert . assertThat ; 
 public class ClasspathFileResourceReaderTest { 
 @ Test 
 public void should _ return _ class _ path _ file _ content ( ) { 
 - ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " foo . response " ) , Optional . < Charset > absent ( ) ) ; 
 + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " foo . response " ) , null ) ; 
 assertThat ( reader . readFor ( Optional . < Request > absent ( ) ) . toString ( ) , is ( " foo . response " ) ) ; 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void should _ throw _ exception _ when _ file _ does _ not _ exist ( ) { 
 - ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , Optional . < Charset > absent ( ) ) ; 
 + ClasspathFileResourceReader reader = new ClasspathFileResourceReader ( text ( " unknown . response " ) , null ) ; 
 reader . readFor ( Optional . < Request > absent ( ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index abb8d77 . . df15918 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 412 , 7 + 412 , 7 @ @ public final class Moco { 
 } 
 
 private static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { 
 - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , Optional . < MocoConfig > absent ( ) ) ; 
 + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; 
 } 
 
 public static ContentResource pathResource ( final String filename ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java 
 index d03cf5a . . 372611d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceConfigApplierFactory . java 
 @ @ - 26 , 7 + 26 , 7 @ @ public final class ResourceConfigApplierFactory { 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 protected Resource newResource ( final MocoConfig config ) { 
 - return fileResource ( file , Optional . < Charset > absent ( ) , Optional . of ( config ) ) ; 
 + return fileResource ( file , Optional . < Charset > absent ( ) , config ) ; 
 } 
 } ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 index 1ae40b4 . . 419759b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public final class ResourceFactory { 
 } 
 
 public static ContentResource fileResource ( final Resource filename , final Optional < Charset > charset , 
 - final Optional < MocoConfig > config ) { 
 + final MocoConfig config ) { 
 return contentResource ( id ( MocoConfig . FILE _ ID ) , fileConfigApplier ( MocoConfig . FILE _ ID , filename ) , 
 new FileResourceReader ( filename , charset , config ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 index 032a05c . . 151abe8 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 @ @ - 14 , 13 + 14 , 13 @ @ import static com . google . common . io . Files . toByteArray ; 
 import static java . lang . String . format ; 
 
 public final class FileResourceReader extends AbstractFileResourceReader { 
 - private final Optional < MocoConfig > config ; 
 + private final MocoConfig config ; 
 
 public FileResourceReader ( final Resource file ) { 
 - this ( file , Optional . < Charset > absent ( ) , Optional . < MocoConfig > absent ( ) ) ; 
 + this ( file , Optional . < Charset > absent ( ) , null ) ; 
 } 
 
 - public FileResourceReader ( final Resource file , final Optional < Charset > charset , final Optional < MocoConfig > config ) { 
 + public FileResourceReader ( final Resource file , final Optional < Charset > charset , final MocoConfig config ) { 
 super ( file , charset ) ; 
 this . config = config ; 
 } 
 @ @ - 44 , 8 + 44 , 8 @ @ public final class FileResourceReader extends AbstractFileResourceReader { 
 private String targetFileName ( final Optional < ? extends Request > request ) { 
 String filename = this . filename ( request ) ; 
 
 - if ( config . isPresent ( ) ) { 
 - return ( String ) config . get ( ) . apply ( filename ) ; 
 + if ( config ! = null ) { 
 + return ( String ) config . apply ( filename ) ; 
 } 
 
 return filename ;
