BLEU SCORE: 0.044568827606990644

TEST MSG: made fields of internal latency container in latency container deserializer private
GENERATED MSG: added unit to latency in json api

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> index f543c4c . . 3020878 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . deserializer ; <nl> <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> @ @ - 22 , 15 + 23 , 20 @ @ public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContai <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> jp . nextToken ( ) ; <nl> InternalLatencyContainer container = get ( jp . readValuesAs ( InternalLatencyContainer . class ) , 0 ) ; <nl> - return LatencyContainer . latencyWithUnit ( container . duration , <nl> - TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; <nl> + return container . toLatencyContainer ( ) ; <nl> } <nl> <nl> return ( LatencyContainer ) ctxt . handleUnexpectedToken ( LatencyContainer . class , jp ) ; <nl> } <nl> <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> private static class InternalLatencyContainer { <nl> - public long duration ; <nl> - public String unit ; <nl> + private long duration ; <nl> + private String unit ; <nl> + <nl> + private LatencyContainer toLatencyContainer ( ) { <nl> + return LatencyContainer . latencyWithUnit ( duration , <nl> + TimeUnit . valueOf ( unit . toUpperCase ( ) + ' S ' ) ) ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> new file mode 100644 <nl> index 0000000 . . 189100e <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . LatencyContainer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import static com . google . common . collect . Iterators . get ; <nl> + <nl> + public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContainer > { <nl> + @ Override <nl> + public LatencyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . VALUE _ NUMBER _ INT ) { <nl> + return LatencyContainer . latency ( jp . getLongValue ( ) ) ; <nl> + } <nl> + <nl> + if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> + jp . nextToken ( ) ; <nl> + InternalLatencyContainer container = get ( jp . readValuesAs ( InternalLatencyContainer . class ) , 0 ) ; <nl> + return LatencyContainer . latencyWithUnit ( container . duration , TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; <nl> + } <nl> + <nl> + throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> + } <nl> + <nl> + private static class InternalLatencyContainer { <nl> + public long duration ; <nl> + public String unit ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index b12d2ee . . 0dc2bfd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 82 , 7 + 82 , 8 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> if ( " latency " . equalsIgnoreCase ( name ) ) { <nl> - return with ( latency ( Long . parseLong ( value . toString ( ) ) ) ) ; <nl> + LatencyContainer container = LatencyContainer . class . cast ( value ) ; <nl> + return with ( latency ( container . getLatency ( ) , container . getUint ( ) ) ) ; <nl> } <nl> <nl> if ( ProxyContainer . class . isInstance ( value ) ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> new file mode 100644 <nl> index 0000000 . . 12d6167 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . parser . deserializer . LatencyContainerDeserializer ; <nl> + <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + @ JsonDeserialize ( using = LatencyContainerDeserializer . class ) <nl> + public class LatencyContainer { <nl> + private long latency ; <nl> + private TimeUnit uint = TimeUnit . MILLISECONDS ; <nl> + <nl> + public long getLatency ( ) { <nl> + return latency ; <nl> + } <nl> + <nl> + public TimeUnit getUint ( ) { <nl> + return uint ; <nl> + } <nl> + <nl> + public static LatencyContainer latency ( long latency ) { <nl> + LatencyContainer latencyContainer = new LatencyContainer ( ) ; <nl> + latencyContainer . latency = latency ; <nl> + return latencyContainer ; <nl> + } <nl> + <nl> + public static LatencyContainer latencyWithUnit ( long latency , TimeUnit timeUnit ) { <nl> + LatencyContainer latencyContainer = new LatencyContainer ( ) ; <nl> + latencyContainer . latency = latency ; <nl> + latencyContainer . uint = timeUnit ; <nl> + return latencyContainer ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 4331369 . . 0ba7a93 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> private ProxyContainer proxy ; <nl> private Map < String , TextContainer > headers ; <nl> private Map < String , TextContainer > cookies ; <nl> - private Long latency ; <nl> + private LatencyContainer latency ; <nl> <nl> private TextContainer version ; <nl> private Object json ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> index c5948bc . . 69be6b7 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java <nl> @ @ - 202 , 6 + 202 , 20 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ wait _ for _ awhile _ with _ unit ( ) throws IOException { <nl> + final long latency = 1000 ; <nl> + final long delta = 200 ; <nl> + <nl> + runWithConfiguration ( " foo . json " ) ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + int code = helper . getForStatus ( remoteUrl ( " / latency - with - unit " ) ) ; <nl> + long stop = System . currentTimeMillis ( ) ; <nl> + long gap = stop - start + delta ; <nl> + assertThat ( gap , greaterThan ( latency ) ) ; <nl> + assertThat ( code , is ( 200 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ match _ form _ value ( ) throws IOException { <nl> runWithConfiguration ( " form . json " ) ; <nl> <nl> diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json <nl> index 3c1f3d0 . . 485a740 100644 <nl> - - - a / moco - runner / src / test / resources / foo . json <nl> + + + b / moco - runner / src / test / resources / foo . json <nl> @ @ - 117 , 6 + 117 , 17 @ @ <nl> } <nl> } , <nl> { <nl> + " request " : { <nl> + " uri " : " / latency - with - unit " <nl> + } , <nl> + " response " : { <nl> + " latency " : { <nl> + " duration " : 1 , <nl> + " unit " : " second " <nl> + } <nl> + } <nl> + } , <nl> + { <nl> " request " : { <nl> " uri " : " / cookie " , <nl> " cookies " : {

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 index f543c4c . . 3020878 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . parser . deserializer ; 
 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 import com . fasterxml . jackson . core . JsonParser ; 
 import com . fasterxml . jackson . core . JsonToken ; 
 import com . fasterxml . jackson . databind . DeserializationContext ; 
 @ @ - 22 , 15 + 23 , 20 @ @ public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContai 
 if ( currentToken = = JsonToken . START _ OBJECT ) { 
 jp . nextToken ( ) ; 
 InternalLatencyContainer container = get ( jp . readValuesAs ( InternalLatencyContainer . class ) , 0 ) ; 
 - return LatencyContainer . latencyWithUnit ( container . duration , 
 - TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; 
 + return container . toLatencyContainer ( ) ; 
 } 
 
 return ( LatencyContainer ) ctxt . handleUnexpectedToken ( LatencyContainer . class , jp ) ; 
 } 
 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 private static class InternalLatencyContainer { 
 - public long duration ; 
 - public String unit ; 
 + private long duration ; 
 + private String unit ; 
 + 
 + private LatencyContainer toLatencyContainer ( ) { 
 + return LatencyContainer . latencyWithUnit ( duration , 
 + TimeUnit . valueOf ( unit . toUpperCase ( ) + ' S ' ) ) ; 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 new file mode 100644 
 index 0000000 . . 189100e 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package com . github . dreamhead . moco . parser . deserializer ; 
 + 
 + import com . fasterxml . jackson . core . JsonParser ; 
 + import com . fasterxml . jackson . core . JsonToken ; 
 + import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 + import com . github . dreamhead . moco . parser . model . LatencyContainer ; 
 + import com . github . dreamhead . moco . parser . model . TextContainer ; 
 + 
 + import java . io . IOException ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import static com . google . common . collect . Iterators . get ; 
 + 
 + public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContainer > { 
 + @ Override 
 + public LatencyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + if ( currentToken = = JsonToken . VALUE _ NUMBER _ INT ) { 
 + return LatencyContainer . latency ( jp . getLongValue ( ) ) ; 
 + } 
 + 
 + if ( currentToken = = JsonToken . START _ OBJECT ) { 
 + jp . nextToken ( ) ; 
 + InternalLatencyContainer container = get ( jp . readValuesAs ( InternalLatencyContainer . class ) , 0 ) ; 
 + return LatencyContainer . latencyWithUnit ( container . duration , TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; 
 + } 
 + 
 + throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 + } 
 + 
 + private static class InternalLatencyContainer { 
 + public long duration ; 
 + public String unit ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index b12d2ee . . 0dc2bfd 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 82 , 7 + 82 , 8 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 } 
 
 if ( " latency " . equalsIgnoreCase ( name ) ) { 
 - return with ( latency ( Long . parseLong ( value . toString ( ) ) ) ) ; 
 + LatencyContainer container = LatencyContainer . class . cast ( value ) ; 
 + return with ( latency ( container . getLatency ( ) , container . getUint ( ) ) ) ; 
 } 
 
 if ( ProxyContainer . class . isInstance ( value ) ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 new file mode 100644 
 index 0000000 . . 12d6167 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / LatencyContainer . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 + import com . github . dreamhead . moco . parser . deserializer . LatencyContainerDeserializer ; 
 + 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + @ JsonDeserialize ( using = LatencyContainerDeserializer . class ) 
 + public class LatencyContainer { 
 + private long latency ; 
 + private TimeUnit uint = TimeUnit . MILLISECONDS ; 
 + 
 + public long getLatency ( ) { 
 + return latency ; 
 + } 
 + 
 + public TimeUnit getUint ( ) { 
 + return uint ; 
 + } 
 + 
 + public static LatencyContainer latency ( long latency ) { 
 + LatencyContainer latencyContainer = new LatencyContainer ( ) ; 
 + latencyContainer . latency = latency ; 
 + return latencyContainer ; 
 + } 
 + 
 + public static LatencyContainer latencyWithUnit ( long latency , TimeUnit timeUnit ) { 
 + LatencyContainer latencyContainer = new LatencyContainer ( ) ; 
 + latencyContainer . latency = latency ; 
 + latencyContainer . uint = timeUnit ; 
 + return latencyContainer ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 4331369 . . 0ba7a93 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 15 , 7 + 15 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { 
 private ProxyContainer proxy ; 
 private Map < String , TextContainer > headers ; 
 private Map < String , TextContainer > cookies ; 
 - private Long latency ; 
 + private LatencyContainer latency ; 
 
 private TextContainer version ; 
 private Object json ; 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 index c5948bc . . 69be6b7 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoStandaloneTest . java 
 @ @ - 202 , 6 + 202 , 20 @ @ public class MocoStandaloneTest extends AbstractMocoStandaloneTest { 
 } 
 
 @ Test 
 + public void should _ wait _ for _ awhile _ with _ unit ( ) throws IOException { 
 + final long latency = 1000 ; 
 + final long delta = 200 ; 
 + 
 + runWithConfiguration ( " foo . json " ) ; 
 + long start = System . currentTimeMillis ( ) ; 
 + int code = helper . getForStatus ( remoteUrl ( " / latency - with - unit " ) ) ; 
 + long stop = System . currentTimeMillis ( ) ; 
 + long gap = stop - start + delta ; 
 + assertThat ( gap , greaterThan ( latency ) ) ; 
 + assertThat ( code , is ( 200 ) ) ; 
 + } 
 + 
 + @ Test 
 public void should _ match _ form _ value ( ) throws IOException { 
 runWithConfiguration ( " form . json " ) ; 
 
 diff - - git a / moco - runner / src / test / resources / foo . json b / moco - runner / src / test / resources / foo . json 
 index 3c1f3d0 . . 485a740 100644 
 - - - a / moco - runner / src / test / resources / foo . json 
 + + + b / moco - runner / src / test / resources / foo . json 
 @ @ - 117 , 6 + 117 , 17 @ @ 
 } 
 } , 
 { 
 + " request " : { 
 + " uri " : " / latency - with - unit " 
 + } , 
 + " response " : { 
 + " latency " : { 
 + " duration " : 1 , 
 + " unit " : " second " 
 + } 
 + } 
 + } , 
 + { 
 " request " : { 
 " uri " : " / cookie " , 
 " cookies " : {
