BLEU SCORE: 0.05341087579952926

TEST MSG: applied asResource to session setting
GENERATED MSG: extracted redirect resource

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> index ece4648 . . df3ba79 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> @ @ - 12 , 16 + 12 , 12 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> - import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . rest . ActualRestServer ; <nl> import com . google . common . base . MoreObjects ; <nl> import com . google . common . base . Optional ; <nl> <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> - import static com . github . dreamhead . moco . Moco . template ; <nl> - import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . MocoMount . to ; <nl> - import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> import static com . github . dreamhead . moco . util . Iterables . head ; <nl> import static com . github . dreamhead . moco . util . Iterables . tail ; <nl> <nl> @ @ - 117 , 28 + 113 , 12 @ @ public class SessionSetting { <nl> <nl> HttpResponseSetting targetRequest = server . request ( getRequestMatcher ( ) ) ; <nl> if ( isRedirectResponse ( ) ) { <nl> - return targetRequest . redirectTo ( redirectResource ( this . redirectTo ) ) ; <nl> + return targetRequest . redirectTo ( this . redirectTo . asResource ( ) ) ; <nl> } <nl> <nl> return targetRequest . response ( getResponseHandler ( ) ) ; <nl> } <nl> <nl> - private Resource redirectResource ( final TextContainer textContainer ) { <nl> - if ( textContainer . isRawText ( ) ) { <nl> - return text ( textContainer . getText ( ) ) ; <nl> - } <nl> - <nl> - if ( textContainer . isForTemplate ( ) ) { <nl> - if ( textContainer . hasProperties ( ) ) { <nl> - return template ( textContainer . getText ( ) , toVariables ( textContainer . getProps ( ) ) ) ; <nl> - } <nl> - <nl> - return template ( textContainer . getText ( ) ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; <nl> - } <nl> - <nl> private boolean isProxy ( ) { <nl> return this . proxy ! = null ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> index 07cabb6 . . d41d0b1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> @ @ - 8 , 9 + 8 , 11 @ @ import com . github . dreamhead . moco . MocoEventTrigger ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . MocoMount . to ; <nl> import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> @ @ - 102 , 20 + 104 , 27 @ @ public class SessionSetting { <nl> <nl> HttpResponseSetting request = server . request ( getRequestMatcher ( ) ) ; <nl> if ( isRedirectResponse ( ) ) { <nl> - if ( redirectTo . isRawText ( ) ) { <nl> - return request . redirectTo ( redirectTo . getText ( ) ) ; <nl> - } <nl> + return request . redirectTo ( redirectResource ( this . redirectTo ) ) ; <nl> + } <nl> <nl> - if ( redirectTo . isForTemplate ( ) ) { <nl> - if ( redirectTo . hasProperties ( ) ) { <nl> - return request . redirectTo ( template ( redirectTo . getText ( ) , toVariables ( redirectTo . getProps ( ) ) ) ) ; <nl> - } <nl> + return request . response ( getResponseHandler ( ) ) ; <nl> + } <nl> <nl> - return request . redirectTo ( template ( redirectTo . getText ( ) ) ) ; <nl> + private Resource redirectResource ( TextContainer textContainer ) { <nl> + if ( textContainer . isRawText ( ) ) { <nl> + return text ( textContainer . getText ( ) ) ; <nl> + } <nl> + <nl> + if ( textContainer . isForTemplate ( ) ) { <nl> + if ( textContainer . hasProperties ( ) ) { <nl> + return template ( textContainer . getText ( ) , toVariables ( textContainer . getProps ( ) ) ) ; <nl> } <nl> + <nl> + return template ( textContainer . getText ( ) ) ; <nl> } <nl> <nl> - return request . response ( getResponseHandler ( ) ) ; <nl> + <nl> + throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; <nl> } <nl> <nl> private boolean isProxy ( ) {

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 index ece4648 . . df3ba79 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 @ @ - 12 , 16 + 12 , 12 @ @ import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . RestSetting ; 
 import com . github . dreamhead . moco . SocketServer ; 
 import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 - import com . github . dreamhead . moco . resource . Resource ; 
 import com . github . dreamhead . moco . rest . ActualRestServer ; 
 import com . google . common . base . MoreObjects ; 
 import com . google . common . base . Optional ; 
 
 import static com . github . dreamhead . moco . Moco . log ; 
 - import static com . github . dreamhead . moco . Moco . template ; 
 - import static com . github . dreamhead . moco . Moco . text ; 
 import static com . github . dreamhead . moco . MocoMount . to ; 
 - import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; 
 import static com . github . dreamhead . moco . util . Iterables . head ; 
 import static com . github . dreamhead . moco . util . Iterables . tail ; 
 
 @ @ - 117 , 28 + 113 , 12 @ @ public class SessionSetting { 
 
 HttpResponseSetting targetRequest = server . request ( getRequestMatcher ( ) ) ; 
 if ( isRedirectResponse ( ) ) { 
 - return targetRequest . redirectTo ( redirectResource ( this . redirectTo ) ) ; 
 + return targetRequest . redirectTo ( this . redirectTo . asResource ( ) ) ; 
 } 
 
 return targetRequest . response ( getResponseHandler ( ) ) ; 
 } 
 
 - private Resource redirectResource ( final TextContainer textContainer ) { 
 - if ( textContainer . isRawText ( ) ) { 
 - return text ( textContainer . getText ( ) ) ; 
 - } 
 - 
 - if ( textContainer . isForTemplate ( ) ) { 
 - if ( textContainer . hasProperties ( ) ) { 
 - return template ( textContainer . getText ( ) , toVariables ( textContainer . getProps ( ) ) ) ; 
 - } 
 - 
 - return template ( textContainer . getText ( ) ) ; 
 - } 
 - 
 - throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; 
 - } 
 - 
 private boolean isProxy ( ) { 
 return this . proxy ! = null ; 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 index 07cabb6 . . d41d0b1 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 @ @ - 8 , 9 + 8 , 11 @ @ import com . github . dreamhead . moco . MocoEventTrigger ; 
 import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . SocketServer ; 
 + import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . MoreObjects ; 
 
 import static com . github . dreamhead . moco . Moco . template ; 
 + import static com . github . dreamhead . moco . Moco . text ; 
 import static com . github . dreamhead . moco . MocoMount . to ; 
 import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; 
 
 @ @ - 102 , 20 + 104 , 27 @ @ public class SessionSetting { 
 
 HttpResponseSetting request = server . request ( getRequestMatcher ( ) ) ; 
 if ( isRedirectResponse ( ) ) { 
 - if ( redirectTo . isRawText ( ) ) { 
 - return request . redirectTo ( redirectTo . getText ( ) ) ; 
 - } 
 + return request . redirectTo ( redirectResource ( this . redirectTo ) ) ; 
 + } 
 
 - if ( redirectTo . isForTemplate ( ) ) { 
 - if ( redirectTo . hasProperties ( ) ) { 
 - return request . redirectTo ( template ( redirectTo . getText ( ) , toVariables ( redirectTo . getProps ( ) ) ) ) ; 
 - } 
 + return request . response ( getResponseHandler ( ) ) ; 
 + } 
 
 - return request . redirectTo ( template ( redirectTo . getText ( ) ) ) ; 
 + private Resource redirectResource ( TextContainer textContainer ) { 
 + if ( textContainer . isRawText ( ) ) { 
 + return text ( textContainer . getText ( ) ) ; 
 + } 
 + 
 + if ( textContainer . isForTemplate ( ) ) { 
 + if ( textContainer . hasProperties ( ) ) { 
 + return template ( textContainer . getText ( ) , toVariables ( textContainer . getProps ( ) ) ) ; 
 } 
 + 
 + return template ( textContainer . getText ( ) ) ; 
 } 
 
 - return request . response ( getResponseHandler ( ) ) ; 
 + 
 + throw new IllegalArgumentException ( " Illegal resource " + textContainer ) ; 
 } 
 
 private boolean isProxy ( ) {
