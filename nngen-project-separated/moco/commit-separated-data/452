BLEU SCORE: 0.049900497019368314

TEST MSG: added test for get event with path resource as url
GENERATED MSG: added template in file test

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 023a903 . . a5b8bd9 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import static com . github . dreamhead . moco . Moco . fileRoot ; <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . Moco . latency ; <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> @ @ - 131 , 6 + 132 , 23 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( pathResource ( " template . url " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " target " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ template ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> diff - - git a / moco - core / src / test / resources / template . url b / moco - core / src / test / resources / template . url <nl> new file mode 100644 <nl> index 0000000 . . 0d582ec <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / template . url <nl> @ @ - 0 , 0 + 1 @ @ <nl> + http : / / localhost : 12306 / target <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 619bb2d . . 477a2bb 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 4 , 9 + 4 , 7 @ @ import org . apache . http . HttpVersion ; <nl> import org . apache . http . client . fluent . Request ; <nl> import org . junit . Test ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . by ; <nl> - import static com . github . dreamhead . moco . Moco . template ; <nl> - import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> @ @ - 76 , 4 + 74 , 16 @ @ public class MocoTemplateTest extends AbstractMocoTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ generate _ response _ from _ file ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / foo . template " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / template " ) ) , is ( " GET " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / test / resources / foo . template b / moco - core / src / test / resources / foo . template <nl> new file mode 100644 <nl> index 0000000 . . ab97a3d <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / foo . template <nl> @ @ - 0 , 0 + 1 @ @ <nl> + $ { req . method } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index 023a903 . . a5b8bd9 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import static com . github . dreamhead . moco . Moco . fileRoot ; 
 import static com . github . dreamhead . moco . Moco . get ; 
 import static com . github . dreamhead . moco . Moco . httpServer ; 
 import static com . github . dreamhead . moco . Moco . latency ; 
 + import static com . github . dreamhead . moco . Moco . pathResource ; 
 import static com . github . dreamhead . moco . Moco . post ; 
 import static com . github . dreamhead . moco . Moco . template ; 
 import static com . github . dreamhead . moco . Moco . text ; 
 @ @ - 131 , 6 + 132 , 23 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( pathResource ( " template . url " ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " target " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 + } 
 + 
 + 
 + @ Test 
 public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ template ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 diff - - git a / moco - core / src / test / resources / template . url b / moco - core / src / test / resources / template . url 
 new file mode 100644 
 index 0000000 . . 0d582ec 
 - - - / dev / null 
 + + + b / moco - core / src / test / resources / template . url 
 @ @ - 0 , 0 + 1 @ @ 
 + http : / / localhost : 12306 / target 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index 619bb2d . . 477a2bb 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 4 , 9 + 4 , 7 @ @ import org . apache . http . HttpVersion ; 
 import org . apache . http . client . fluent . Request ; 
 import org . junit . Test ; 
 
 - import static com . github . dreamhead . moco . Moco . by ; 
 - import static com . github . dreamhead . moco . Moco . template ; 
 - import static com . github . dreamhead . moco . Moco . uri ; 
 + import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static org . hamcrest . CoreMatchers . is ; 
 @ @ - 76 , 4 + 74 , 16 @ @ public class MocoTemplateTest extends AbstractMocoTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ generate _ response _ from _ file ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / foo . template " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / template " ) ) , is ( " GET " ) ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / test / resources / foo . template b / moco - core / src / test / resources / foo . template 
 new file mode 100644 
 index 0000000 . . ab97a3d 
 - - - / dev / null 
 + + + b / moco - core / src / test / resources / foo . template 
 @ @ - 0 , 0 + 1 @ @ 
 + $ { req . method } 
 \ No newline at end of file
