BLEU SCORE: 0.20556680845025987

TEST MSG: simplified next index implementation for seq and cycle
GENERATED MSG: introduced collection handler as seq and cycle base

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> index 2fbce40 . . 7b8d473 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> public abstract class CollectionHandler extends AbstractResponseHandler { <nl> protected final ImmutableList < ResponseHandler > handlers ; <nl> + private int index ; <nl> <nl> protected CollectionHandler ( final Iterable < ResponseHandler > handlers ) { <nl> this . handlers = copyOf ( handlers ) ; <nl> @ @ - 15 , 8 + 16 , 10 @ @ public abstract class CollectionHandler extends AbstractResponseHandler { <nl> <nl> @ Override <nl> public void writeToResponse ( final SessionContext context ) { <nl> - handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> + int current = index ; <nl> + this . index = next ( index , this . handlers . size ( ) ) ; <nl> + handlers . get ( current ) . writeToResponse ( context ) ; <nl> } <nl> <nl> - protected abstract int current ( ) ; <nl> + protected abstract int next ( final int index , final int size ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> index 68221e7 . . fc870d7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> @ @ - 2 , 10 + 2 , 8 @ @ package com . github . dreamhead . moco . handler ; <nl> <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 25 , 13 + 23 , 13 @ @ public class CycleHandler extends CollectionHandler { <nl> } <nl> <nl> @ Override <nl> - protected int current ( ) { <nl> - int current = this . index ; <nl> - if ( + + index > = handlers . size ( ) ) { <nl> - index = 0 ; <nl> + protected int next ( final int index , final int size ) { <nl> + int next = index + 1 ; <nl> + if ( next > = size ) { <nl> + next = 0 ; <nl> } <nl> <nl> - return current ; <nl> + return next ; <nl> } <nl> <nl> @ Override <nl> @ @ - 52 , 5 + 50 , 4 @ @ public class CycleHandler extends CollectionHandler { <nl> } <nl> } ; <nl> } <nl> - <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> index a18a3b7 . . 8ece9e2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> @ @ - 2 , 10 + 2 , 8 @ @ package com . github . dreamhead . moco . handler ; <nl> <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Iterables ; <nl> <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 25 , 13 + 23 , 13 @ @ public final class SequenceHandler extends CollectionHandler { <nl> } <nl> <nl> @ Override <nl> - protected int current ( ) { <nl> - int current = this . index ; <nl> - if ( + + index > = handlers . size ( ) ) { <nl> - index = handlers . size ( ) - 1 ; <nl> + protected int next ( final int index , final int size ) { <nl> + int next = index + 1 ; <nl> + if ( next > = size ) { <nl> + next = size - 1 ; <nl> } <nl> <nl> - return current ; <nl> + return next ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 2fbce40 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + package com . github . dreamhead . moco . handler ; <nl> + <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . internal . SessionContext ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + <nl> + public abstract class CollectionHandler extends AbstractResponseHandler { <nl> + protected final ImmutableList < ResponseHandler > handlers ; <nl> + <nl> + protected CollectionHandler ( final Iterable < ResponseHandler > handlers ) { <nl> + this . handlers = copyOf ( handlers ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void writeToResponse ( final SessionContext context ) { <nl> + handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> + } <nl> + <nl> + protected abstract int current ( ) ; <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> index 50bcff2 . . 68221e7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> @ @ - 12 , 12 + 12 , 11 @ @ import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> - public class CycleHandler extends AbstractResponseHandler { <nl> - private final ImmutableList < ResponseHandler > handlers ; <nl> + public class CycleHandler extends CollectionHandler { <nl> private int index ; <nl> <nl> private CycleHandler ( final Iterable < ResponseHandler > handlers ) { <nl> - this . handlers = copyOf ( handlers ) ; <nl> + super ( handlers ) ; <nl> } <nl> <nl> public static ResponseHandler newCycle ( final Iterable < ResponseHandler > handlers ) { <nl> @ @ - 26 , 11 + 25 , 7 @ @ public class CycleHandler extends AbstractResponseHandler { <nl> } <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> - handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> - } <nl> - <nl> - private int current ( ) { <nl> + protected int current ( ) { <nl> int current = this . index ; <nl> if ( + + index > = handlers . size ( ) ) { <nl> index = 0 ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> index 35c3adb . . a18a3b7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> @ @ - 12 , 12 + 12 , 11 @ @ import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> - public final class SequenceHandler extends AbstractResponseHandler { <nl> - private final ImmutableList < ResponseHandler > handlers ; <nl> + public final class SequenceHandler extends CollectionHandler { <nl> private int index ; <nl> <nl> private SequenceHandler ( final Iterable < ResponseHandler > handlers ) { <nl> - this . handlers = copyOf ( handlers ) ; <nl> + super ( handlers ) ; <nl> } <nl> <nl> public static ResponseHandler newSeq ( final Iterable < ResponseHandler > handlers ) { <nl> @ @ - 26 , 11 + 25 , 7 @ @ public final class SequenceHandler extends AbstractResponseHandler { <nl> } <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> - handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> - } <nl> - <nl> - private int current ( ) { <nl> + protected int current ( ) { <nl> int current = this . index ; <nl> if ( + + index > = handlers . size ( ) ) { <nl> index = handlers . size ( ) - 1 ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java 
 index 2fbce40 . . 7b8d473 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import static com . google . common . collect . ImmutableList . copyOf ; 
 
 public abstract class CollectionHandler extends AbstractResponseHandler { 
 protected final ImmutableList < ResponseHandler > handlers ; 
 + private int index ; 
 
 protected CollectionHandler ( final Iterable < ResponseHandler > handlers ) { 
 this . handlers = copyOf ( handlers ) ; 
 @ @ - 15 , 8 + 16 , 10 @ @ public abstract class CollectionHandler extends AbstractResponseHandler { 
 
 @ Override 
 public void writeToResponse ( final SessionContext context ) { 
 - handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 + int current = index ; 
 + this . index = next ( index , this . handlers . size ( ) ) ; 
 + handlers . get ( current ) . writeToResponse ( context ) ; 
 } 
 
 - protected abstract int current ( ) ; 
 + protected abstract int next ( final int index , final int size ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 index 68221e7 . . fc870d7 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 @ @ - 2 , 10 + 2 , 8 @ @ package com . github . dreamhead . moco . handler ; 
 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . internal . SessionContext ; 
 import com . google . common . base . Function ; 
 import com . google . common . collect . FluentIterable ; 
 - import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Iterables ; 
 
 import static com . google . common . base . Preconditions . checkArgument ; 
 @ @ - 25 , 13 + 23 , 13 @ @ public class CycleHandler extends CollectionHandler { 
 } 
 
 @ Override 
 - protected int current ( ) { 
 - int current = this . index ; 
 - if ( + + index > = handlers . size ( ) ) { 
 - index = 0 ; 
 + protected int next ( final int index , final int size ) { 
 + int next = index + 1 ; 
 + if ( next > = size ) { 
 + next = 0 ; 
 } 
 
 - return current ; 
 + return next ; 
 } 
 
 @ Override 
 @ @ - 52 , 5 + 50 , 4 @ @ public class CycleHandler extends CollectionHandler { 
 } 
 } ; 
 } 
 - 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 index a18a3b7 . . 8ece9e2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 @ @ - 2 , 10 + 2 , 8 @ @ package com . github . dreamhead . moco . handler ; 
 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . internal . SessionContext ; 
 import com . google . common . base . Function ; 
 import com . google . common . collect . FluentIterable ; 
 - import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Iterables ; 
 
 import static com . google . common . base . Preconditions . checkArgument ; 
 @ @ - 25 , 13 + 23 , 13 @ @ public final class SequenceHandler extends CollectionHandler { 
 } 
 
 @ Override 
 - protected int current ( ) { 
 - int current = this . index ; 
 - if ( + + index > = handlers . size ( ) ) { 
 - index = handlers . size ( ) - 1 ; 
 + protected int next ( final int index , final int size ) { 
 + int next = index + 1 ; 
 + if ( next > = size ) { 
 + next = size - 1 ; 
 } 
 
 - return current ; 
 + return next ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java 
 new file mode 100644 
 index 0000000 . . 2fbce40 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CollectionHandler . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + package com . github . dreamhead . moco . handler ; 
 + 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . internal . SessionContext ; 
 + import com . google . common . collect . ImmutableList ; 
 + 
 + import static com . google . common . collect . ImmutableList . copyOf ; 
 + 
 + public abstract class CollectionHandler extends AbstractResponseHandler { 
 + protected final ImmutableList < ResponseHandler > handlers ; 
 + 
 + protected CollectionHandler ( final Iterable < ResponseHandler > handlers ) { 
 + this . handlers = copyOf ( handlers ) ; 
 + } 
 + 
 + @ Override 
 + public void writeToResponse ( final SessionContext context ) { 
 + handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 + } 
 + 
 + protected abstract int current ( ) ; 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 index 50bcff2 . . 68221e7 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 @ @ - 12 , 12 + 12 , 11 @ @ import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 
 - public class CycleHandler extends AbstractResponseHandler { 
 - private final ImmutableList < ResponseHandler > handlers ; 
 + public class CycleHandler extends CollectionHandler { 
 private int index ; 
 
 private CycleHandler ( final Iterable < ResponseHandler > handlers ) { 
 - this . handlers = copyOf ( handlers ) ; 
 + super ( handlers ) ; 
 } 
 
 public static ResponseHandler newCycle ( final Iterable < ResponseHandler > handlers ) { 
 @ @ - 26 , 11 + 25 , 7 @ @ public class CycleHandler extends AbstractResponseHandler { 
 } 
 
 @ Override 
 - public void writeToResponse ( final SessionContext context ) { 
 - handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 - } 
 - 
 - private int current ( ) { 
 + protected int current ( ) { 
 int current = this . index ; 
 if ( + + index > = handlers . size ( ) ) { 
 index = 0 ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 index 35c3adb . . a18a3b7 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 @ @ - 12 , 12 + 12 , 11 @ @ import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 
 - public final class SequenceHandler extends AbstractResponseHandler { 
 - private final ImmutableList < ResponseHandler > handlers ; 
 + public final class SequenceHandler extends CollectionHandler { 
 private int index ; 
 
 private SequenceHandler ( final Iterable < ResponseHandler > handlers ) { 
 - this . handlers = copyOf ( handlers ) ; 
 + super ( handlers ) ; 
 } 
 
 public static ResponseHandler newSeq ( final Iterable < ResponseHandler > handlers ) { 
 @ @ - 26 , 11 + 25 , 7 @ @ public final class SequenceHandler extends AbstractResponseHandler { 
 } 
 
 @ Override 
 - public void writeToResponse ( final SessionContext context ) { 
 - handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 - } 
 - 
 - private int current ( ) { 
 + protected int current ( ) { 
 int current = this . index ; 
 if ( + + index > = handlers . size ( ) ) { 
 index = handlers . size ( ) - 1 ;
