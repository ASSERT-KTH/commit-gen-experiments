BLEU SCORE: 0.0260859600387516

TEST MSG: applied request to post content in request action
GENERATED MSG: introduced varabile map with request extractor for template and removed variable map with string

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 6891274 . . cafd619 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 447 , 17 + 447 , 17 @ @ public final class Moco { <nl> return ProxyConfig . builder ( checkNotNullOrEmpty ( localBase , " Local base should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final String template ) { <nl> + public static ContentResource template ( final String template ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) ) ; <nl> } <nl> <nl> - public static Resource template ( final String template , final String name , final String value ) { <nl> + public static ContentResource template ( final String template , final String name , final String value ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> + public static ContentResource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , <nl> @ @ - 465 , 17 + 465 , 17 @ @ public final class Moco { <nl> checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource resource ) { <nl> + public static ContentResource template ( final ContentResource resource ) { <nl> return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , RequestExtractor < ? > > of ( ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource template , final String name , final String value ) { <nl> + public static ContentResource template ( final ContentResource template , final String name , final String value ) { <nl> return template ( checkNotNull ( template , " Template should not be null " ) , <nl> checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> var ( checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> + public static ContentResource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> return template ( checkNotNull ( template , " Template should not be null " ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> var ( checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) ) , <nl> @ @ - 483 , 13 + 483 , 13 @ @ public final class Moco { <nl> var ( checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; <nl> } <nl> <nl> - public static < T > Resource template ( final String template , final String name , final RequestExtractor < T > extractor ) { <nl> + public static < T > ContentResource template ( final String template , final String name , final RequestExtractor < T > extractor ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ; <nl> } <nl> <nl> - public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> + public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> @ @ - 498 , 14 + 498 , 14 @ @ public final class Moco { <nl> checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ; <nl> } <nl> <nl> - public static < T > Resource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> + public static < T > ContentResource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> new ExtractorVariable < T > ( checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ) <nl> ) ; <nl> } <nl> <nl> - public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> + public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> @ @ - 515 , 12 + 515 , 12 @ @ public final class Moco { <nl> ) ; <nl> } <nl> <nl> - public static Resource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , <nl> checkNotNull ( variables , " Template variable should not be null " ) ) ; <nl> } <nl> <nl> - public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index 0502376 . . 4586b64 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 51 , 14 + 51 , 14 @ @ public class MocoRequestAction implements MocoEventAction { <nl> private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> HttpRequestBase targetRequest = createRequest ( url , method , request ) ; <nl> if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) ) ) ; <nl> + ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; <nl> } <nl> <nl> client . execute ( targetRequest ) ; <nl> } <nl> <nl> - private HttpEntity asEntity ( ContentResource resource ) { <nl> - return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> + private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> + return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 5828fe7 . . 023a903 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import org . mockito . Mockito ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> import static com . github . dreamhead . moco . Moco . async ; <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . complete ; <nl> @ @ - 148 , 7 + 149 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , " content " ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 164 , 7 + 165 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string _ and _ resource _ url ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( text ( remoteUrl ( " / target " ) ) , " content " ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 180 , 7 + 181 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 194 , 9 + 195 , 25 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ template _ content ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , template ( " $ { req . headers [ ' foo ' ] } " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " content " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ resource _ url ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( text ( remoteUrl ( " / target " ) ) , text ( " content " ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 212 , 7 + 229 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ asyc ( ) throws Exception { <nl> final ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( async ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 230 , 7 + 247 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ async _ after _ awhile ( ) throws Exception { <nl> final ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; <nl> + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( async ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) , latency ( 1 , TimeUnit . SECONDS ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index dfc0817 . . 2441069 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> - import com . github . dreamhead . moco . resource . reader . PlainVariable ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . github . dreamhead . moco . util . URLs ; <nl> import com . google . common . base . Function ; <nl> @ @ - 372 , 45 + 371 , 34 @ @ public class Moco { <nl> <nl> public static Resource template ( final String template , final String name , final String value ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> - checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; <nl> + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> + checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ; <nl> } <nl> <nl> public static Resource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> - checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , <nl> - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> - checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; <nl> - } <nl> - <nl> - public static Resource template ( final String template , final ImmutableMap < String , String > variables ) { <nl> - return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> - checkNotNull ( variables , " Template variable should not be null " ) ) ; <nl> - } <nl> - <nl> - public static Resource template ( final ContentResource template , final ImmutableMap < String , String > variables ) { <nl> - return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> + checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> + checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , <nl> + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> + checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ; <nl> } <nl> <nl> public static Resource template ( final ContentResource resource ) { <nl> - return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , String > of ( ) ) ; <nl> + return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , RequestExtractor < ? > > of ( ) ) ; <nl> } <nl> <nl> public static Resource template ( final ContentResource template , final String name , final String value ) { <nl> return template ( checkNotNull ( template , " Template should not be null " ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> - checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; <nl> + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> + var ( checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; <nl> } <nl> <nl> public static Resource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { <nl> return template ( checkNotNull ( template , " Template should not be null " ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> - checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , <nl> - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> - checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) <nl> - ) ; <nl> + checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> + var ( checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) ) , <nl> + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> + var ( checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; <nl> } <nl> <nl> public static < T > Resource template ( final String template , final String name , final RequestExtractor < T > extractor ) { <nl> @ @ - 420 , 7 + 408 , 7 @ @ public class Moco { <nl> } <nl> <nl> public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , <nl> @ @ - 436 , 7 + 424 , 7 @ @ public class Moco { <nl> } <nl> <nl> public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , <nl> @ @ - 445 , 21 + 433 , 18 @ @ public class Moco { <nl> ) ; <nl> } <nl> <nl> - public static RequestExtractor < String > var ( final String text ) { <nl> - return new PlainTextExtractor ( checkNotNullOrEmpty ( text , " Template variable should not be null or empty " ) ) ; <nl> + public static Resource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , <nl> + checkNotNull ( variables , " Template variable should not be null " ) ) ; <nl> } <nl> <nl> - private static ImmutableMap < String , Variable > toVariables ( ImmutableMap < String , String > variables ) { <nl> - return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> + public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> + toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> <nl> - private static Maps . EntryTransformer < String , String , Variable > toVariable ( ) { <nl> - return new Maps . EntryTransformer < String , String , Variable > ( ) { <nl> - @ Override <nl> - public Variable transformEntry ( String key , String value ) { <nl> - return new PlainVariable ( value ) ; <nl> - } <nl> - } ; <nl> + public static RequestExtractor < String > var ( final String text ) { <nl> + return new PlainTextExtractor ( checkNotNullOrEmpty ( text , " Template variable should not be null or empty " ) ) ; <nl> } <nl> <nl> public static Failover failover ( final String file ) { <nl> @ @ - 516 , 6 + 501 , 20 @ @ public class Moco { <nl> } ; <nl> } <nl> <nl> + private static ImmutableMap < String , Variable > toVariables ( ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> + } <nl> + <nl> + private static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { <nl> + return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { <nl> + @ Override <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public Variable transformEntry ( String key , RequestExtractor < ? > value ) { <nl> + return new ExtractorVariable ( value ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> private Moco ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Variables . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Variables . java <nl> new file mode 100644 <nl> index 0000000 . . de232d5 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Variables . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . github . dreamhead . moco . RequestExtractor ; <nl> + import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> + import com . github . dreamhead . moco . resource . reader . Variable ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import static com . google . common . collect . Maps . transformEntries ; <nl> + <nl> + public class Variables { <nl> + <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 42b2b04 . . 942f0e1 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . collect . ImmutableMap ; <nl> import org . apache . http . Header ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> @ @ - 198 , 7 + 197 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> @ Test <nl> public void should _ generate _ response _ with _ variable _ map ( ) throws Exception { <nl> server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { foo } $ { bar } " , <nl> - ImmutableMap . of ( " foo " , " ANOTHER " , " bar " , " TEMPLATE " ) ) ) ; <nl> + of ( " foo " , var ( " ANOTHER " ) , " bar " , var ( " TEMPLATE " ) ) ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> @ @ - 233 , 17 + 232 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> - @ Test <nl> - public void should _ generate _ response _ from _ file _ with _ variable _ map ( ) throws Exception { <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / var . template " ) , ImmutableMap . of ( " var " , " TEMPLATE " ) ) ) ; <nl> - <nl> - running ( server , new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) throws Exception { <nl> - assertThat ( helper . get ( remoteUrl ( " / template " ) ) , is ( " TEMPLATE " ) ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> + / / @ Test <nl> + / / public void should _ generate _ response _ from _ file _ with _ variable _ map ( ) throws Exception { <nl> + / / server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / var . template " ) , of ( " var " , " TEMPLATE " ) ) ) ; <nl> + / / <nl> + / / running ( server , new Runnable ( ) { <nl> + / / @ Override <nl> + / / public void run ( ) throws Exception { <nl> + / / assertThat ( helper . get ( remoteUrl ( " / template " ) ) , is ( " TEMPLATE " ) ) ; <nl> + / / } <nl> + / / } ) ; <nl> + / / } <nl> <nl> @ Test <nl> public void should _ generate _ response _ with _ two _ variables _ by _ request ( ) throws Exception { <nl> @ @ - 309 , 4 + 308 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ generate _ response _ from _ file _ with _ variable _ map ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / var . template " ) , of ( " var " , jsonPath ( " $ . book [ * ] . price " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 2 \ " } } " ) , is ( " 2 " ) ) ; <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 1 \ " } } " ) , is ( " 1 " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 9e2d4d9 . . daa7233 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoProcedure ; <nl> + import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . AndResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> @ @ - 9 , 10 + 10 , 7 @ @ import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> - import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . * ; <nl> import com . google . common . net . HttpHeaders ; <nl> <nl> import java . lang . reflect . Field ; <nl> @ @ - 20 , 9 + 18 , 9 @ @ import java . lang . reflect . Method ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> - import static com . github . dreamhead . moco . Moco . proxy ; <nl> import static com . github . dreamhead . moco . util . Jsons . toJson ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> + import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . ImmutableSet . of ; <nl> import static java . lang . String . format ; <nl> <nl> @ @ - 146 , 7 + 144 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> <nl> if ( container . hasProperties ( ) ) { <nl> return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , <nl> - container . getProps ( ) ) ; <nl> + toVariables ( container . getProps ( ) ) ) ; <nl> } <nl> <nl> return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; <nl> @ @ - 155 , 6 + 153 , 20 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> throw new IllegalArgumentException ( format ( " unknown operation [ % s ] " , container . getOperation ( ) ) ) ; <nl> } <nl> <nl> + private ImmutableMap < String , RequestExtractor < ? > > toVariables ( ImmutableMap < String , String > props ) { <nl> + return copyOf ( Maps . transformEntries ( props , toVariable ( ) ) ) ; <nl> + } <nl> + <nl> + private static Maps . EntryTransformer < String , String , RequestExtractor < ? > > toVariable ( ) { <nl> + return new Maps . EntryTransformer < String , String , RequestExtractor < ? > > ( ) { <nl> + @ Override <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public RequestExtractor < ? > transformEntry ( String key , String value ) { <nl> + return var ( value ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> private ResponseHandler createProxy ( ProxyContainer proxy ) { <nl> Failover failover = proxy . getFailover ( ) ; <nl>

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 6891274 . . cafd619 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 447 , 17 + 447 , 17 @ @ public final class Moco { 
 return ProxyConfig . builder ( checkNotNullOrEmpty ( localBase , " Local base should not be null " ) ) ; 
 } 
 
 - public static Resource template ( final String template ) { 
 + public static ContentResource template ( final String template ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) ) ; 
 } 
 
 - public static Resource template ( final String template , final String name , final String value ) { 
 + public static ContentResource template ( final String template , final String name , final String value ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ; 
 } 
 
 - public static Resource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { 
 + public static ContentResource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , 
 @ @ - 465 , 17 + 465 , 17 @ @ public final class Moco { 
 checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ; 
 } 
 
 - public static Resource template ( final ContentResource resource ) { 
 + public static ContentResource template ( final ContentResource resource ) { 
 return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , RequestExtractor < ? > > of ( ) ) ; 
 } 
 
 - public static Resource template ( final ContentResource template , final String name , final String value ) { 
 + public static ContentResource template ( final ContentResource template , final String name , final String value ) { 
 return template ( checkNotNull ( template , " Template should not be null " ) , 
 checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 var ( checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; 
 } 
 
 - public static Resource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { 
 + public static ContentResource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { 
 return template ( checkNotNull ( template , " Template should not be null " ) , 
 checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 var ( checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) ) , 
 @ @ - 483 , 13 + 483 , 13 @ @ public final class Moco { 
 var ( checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; 
 } 
 
 - public static < T > Resource template ( final String template , final String name , final RequestExtractor < T > extractor ) { 
 + public static < T > ContentResource template ( final String template , final String name , final RequestExtractor < T > extractor ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ; 
 } 
 
 - public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 + public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 @ @ - 498 , 14 + 498 , 14 @ @ public final class Moco { 
 checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ; 
 } 
 
 - public static < T > Resource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { 
 + public static < T > ContentResource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 new ExtractorVariable < T > ( checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ) 
 ) ; 
 } 
 
 - public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 + public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 @ @ - 515 , 12 + 515 , 12 @ @ public final class Moco { 
 ) ; 
 } 
 
 - public static Resource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + public static ContentResource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , 
 checkNotNull ( variables , " Template variable should not be null " ) ) ; 
 } 
 
 - public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + public static ContentResource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index 0502376 . . 4586b64 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 51 , 14 + 51 , 14 @ @ public class MocoRequestAction implements MocoEventAction { 
 private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { 
 HttpRequestBase targetRequest = createRequest ( url , method , request ) ; 
 if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 - ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) ) ) ; 
 + ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; 
 } 
 
 client . execute ( targetRequest ) ; 
 } 
 
 - private HttpEntity asEntity ( ContentResource resource ) { 
 - return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; 
 + private HttpEntity asEntity ( final ContentResource resource , final Request request ) { 
 + return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; 
 } 
 
 private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index 5828fe7 . . 023a903 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import org . mockito . Mockito ; 
 
 import java . util . concurrent . TimeUnit ; 
 
 + import static com . github . dreamhead . moco . Moco . and ; 
 import static com . github . dreamhead . moco . Moco . async ; 
 import static com . github . dreamhead . moco . Moco . by ; 
 import static com . github . dreamhead . moco . Moco . complete ; 
 @ @ - 148 , 7 + 149 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , " content " ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 164 , 7 + 165 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string _ and _ resource _ url ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( text ( remoteUrl ( " / target " ) ) , " content " ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 180 , 7 + 181 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 194 , 9 + 195 , 25 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ template _ content ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , template ( " $ { req . headers [ ' foo ' ] } " ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " content " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ resource _ url ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( text ( remoteUrl ( " / target " ) ) , text ( " content " ) ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 212 , 7 + 229 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ asyc ( ) throws Exception { 
 final ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( async ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 230 , 7 + 247 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ async _ after _ awhile ( ) throws Exception { 
 final ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 - server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ; 
 + server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( async ( post ( remoteUrl ( " / target " ) , text ( " content " ) ) , latency ( 1 , TimeUnit . SECONDS ) ) ) ) ; 
 
 running ( server , new Runnable ( ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index dfc0817 . . 2441069 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 19 , 7 + 19 , 6 @ @ import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 - import com . github . dreamhead . moco . resource . reader . PlainVariable ; 
 import com . github . dreamhead . moco . resource . reader . Variable ; 
 import com . github . dreamhead . moco . util . URLs ; 
 import com . google . common . base . Function ; 
 @ @ - 372 , 45 + 371 , 34 @ @ public class Moco { 
 
 public static Resource template ( final String template , final String name , final String value ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 - checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; 
 + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 + checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ; 
 } 
 
 public static Resource template ( final String template , final String name1 , final String value1 , final String name2 , final String value2 ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 - checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , 
 - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 - checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; 
 - } 
 - 
 - public static Resource template ( final String template , final ImmutableMap < String , String > variables ) { 
 - return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 - checkNotNull ( variables , " Template variable should not be null " ) ) ; 
 - } 
 - 
 - public static Resource template ( final ContentResource template , final ImmutableMap < String , String > variables ) { 
 - return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 - toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; 
 + checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 + checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , 
 + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 + checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ; 
 } 
 
 public static Resource template ( final ContentResource resource ) { 
 - return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , String > of ( ) ) ; 
 + return template ( checkNotNull ( resource , " Template should not be null " ) , ImmutableMap . < String , RequestExtractor < ? > > of ( ) ) ; 
 } 
 
 public static Resource template ( final ContentResource template , final String name , final String value ) { 
 return template ( checkNotNull ( template , " Template should not be null " ) , 
 - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 - checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; 
 + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 + var ( checkNotNullOrEmpty ( value , " Template variable value should not be null " ) ) ) ; 
 } 
 
 public static Resource template ( final ContentResource template , final String name1 , final String value1 , final String name2 , final String value2 ) { 
 return template ( checkNotNull ( template , " Template should not be null " ) , 
 - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 - checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) , 
 - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 - checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) 
 - ) ; 
 + checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 + var ( checkNotNullOrEmpty ( value1 , " Template variable value should not be null " ) ) , 
 + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 + var ( checkNotNullOrEmpty ( value2 , " Template variable value should not be null " ) ) ) ; 
 } 
 
 public static < T > Resource template ( final String template , final String name , final RequestExtractor < T > extractor ) { 
 @ @ - 420 , 7 + 408 , 7 @ @ public class Moco { 
 } 
 
 public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , 
 @ @ - 436 , 7 + 424 , 7 @ @ public class Moco { 
 } 
 
 public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , 
 @ @ - 445 , 21 + 433 , 18 @ @ public class Moco { 
 ) ; 
 } 
 
 - public static RequestExtractor < String > var ( final String text ) { 
 - return new PlainTextExtractor ( checkNotNullOrEmpty ( text , " Template variable should not be null or empty " ) ) ; 
 + public static Resource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , 
 + checkNotNull ( variables , " Template variable should not be null " ) ) ; 
 } 
 
 - private static ImmutableMap < String , Variable > toVariables ( ImmutableMap < String , String > variables ) { 
 - return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; 
 + public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 + toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; 
 } 
 
 - private static Maps . EntryTransformer < String , String , Variable > toVariable ( ) { 
 - return new Maps . EntryTransformer < String , String , Variable > ( ) { 
 - @ Override 
 - public Variable transformEntry ( String key , String value ) { 
 - return new PlainVariable ( value ) ; 
 - } 
 - } ; 
 + public static RequestExtractor < String > var ( final String text ) { 
 + return new PlainTextExtractor ( checkNotNullOrEmpty ( text , " Template variable should not be null or empty " ) ) ; 
 } 
 
 public static Failover failover ( final String file ) { 
 @ @ - 516 , 6 + 501 , 20 @ @ public class Moco { 
 } ; 
 } 
 
 + private static ImmutableMap < String , Variable > toVariables ( ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; 
 + } 
 + 
 + private static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { 
 + return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { 
 + @ Override 
 + @ SuppressWarnings ( " unchecked " ) 
 + public Variable transformEntry ( String key , RequestExtractor < ? > value ) { 
 + return new ExtractorVariable ( value ) ; 
 + } 
 + } ; 
 + } 
 + 
 private Moco ( ) { 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Variables . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Variables . java 
 new file mode 100644 
 index 0000000 . . de232d5 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Variables . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import com . github . dreamhead . moco . RequestExtractor ; 
 + import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 + import com . github . dreamhead . moco . resource . reader . Variable ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 + 
 + import static com . google . common . collect . Maps . transformEntries ; 
 + 
 + public class Variables { 
 + 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index 42b2b04 . . 942f0e1 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . google . common . collect . ImmutableMap ; 
 import org . apache . http . Header ; 
 import org . apache . http . HttpVersion ; 
 import org . apache . http . ProtocolVersion ; 
 @ @ - 198 , 7 + 197 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 @ Test 
 public void should _ generate _ response _ with _ variable _ map ( ) throws Exception { 
 server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { foo } $ { bar } " , 
 - ImmutableMap . of ( " foo " , " ANOTHER " , " bar " , " TEMPLATE " ) ) ) ; 
 + of ( " foo " , var ( " ANOTHER " ) , " bar " , var ( " TEMPLATE " ) ) ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ Override 
 @ @ - 233 , 17 + 232 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } ) ; 
 } 
 
 - @ Test 
 - public void should _ generate _ response _ from _ file _ with _ variable _ map ( ) throws Exception { 
 - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / var . template " ) , ImmutableMap . of ( " var " , " TEMPLATE " ) ) ) ; 
 - 
 - running ( server , new Runnable ( ) { 
 - @ Override 
 - public void run ( ) throws Exception { 
 - assertThat ( helper . get ( remoteUrl ( " / template " ) ) , is ( " TEMPLATE " ) ) ; 
 - } 
 - } ) ; 
 - } 
 + / / @ Test 
 + / / public void should _ generate _ response _ from _ file _ with _ variable _ map ( ) throws Exception { 
 + / / server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / var . template " ) , of ( " var " , " TEMPLATE " ) ) ) ; 
 + / / 
 + / / running ( server , new Runnable ( ) { 
 + / / @ Override 
 + / / public void run ( ) throws Exception { 
 + / / assertThat ( helper . get ( remoteUrl ( " / template " ) ) , is ( " TEMPLATE " ) ) ; 
 + / / } 
 + / / } ) ; 
 + / / } 
 
 @ Test 
 public void should _ generate _ response _ with _ two _ variables _ by _ request ( ) throws Exception { 
 @ @ - 309 , 4 + 308 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ generate _ response _ from _ file _ with _ variable _ map ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / var . template " ) , of ( " var " , jsonPath ( " $ . book [ * ] . price " ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 2 \ " } } " ) , is ( " 2 " ) ) ; 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 1 \ " } } " ) , is ( " 1 " ) ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 9e2d4d9 . . daa7233 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . parser . model ; 
 
 import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoProcedure ; 
 + import com . github . dreamhead . moco . RequestExtractor ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . AndResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 @ @ - 9 , 10 + 10 , 7 @ @ import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Function ; 
 - import com . google . common . collect . FluentIterable ; 
 - import com . google . common . collect . ImmutableList ; 
 - import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . * ; 
 import com . google . common . net . HttpHeaders ; 
 
 import java . lang . reflect . Field ; 
 @ @ - 20 , 9 + 18 , 9 @ @ import java . lang . reflect . Method ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . Moco . * ; 
 - import static com . github . dreamhead . moco . Moco . proxy ; 
 import static com . github . dreamhead . moco . util . Jsons . toJson ; 
 import static com . google . common . collect . FluentIterable . from ; 
 + import static com . google . common . collect . ImmutableMap . copyOf ; 
 import static com . google . common . collect . ImmutableSet . of ; 
 import static java . lang . String . format ; 
 
 @ @ - 146 , 7 + 144 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 
 if ( container . hasProperties ( ) ) { 
 return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , 
 - container . getProps ( ) ) ; 
 + toVariables ( container . getProps ( ) ) ) ; 
 } 
 
 return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; 
 @ @ - 155 , 6 + 153 , 20 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 throw new IllegalArgumentException ( format ( " unknown operation [ % s ] " , container . getOperation ( ) ) ) ; 
 } 
 
 + private ImmutableMap < String , RequestExtractor < ? > > toVariables ( ImmutableMap < String , String > props ) { 
 + return copyOf ( Maps . transformEntries ( props , toVariable ( ) ) ) ; 
 + } 
 + 
 + private static Maps . EntryTransformer < String , String , RequestExtractor < ? > > toVariable ( ) { 
 + return new Maps . EntryTransformer < String , String , RequestExtractor < ? > > ( ) { 
 + @ Override 
 + @ SuppressWarnings ( " unchecked " ) 
 + public RequestExtractor < ? > transformEntry ( String key , String value ) { 
 + return var ( value ) ; 
 + } 
 + } ; 
 + } 
 + 
 private ResponseHandler createProxy ( ProxyContainer proxy ) { 
 Failover failover = proxy . getFailover ( ) ; 

