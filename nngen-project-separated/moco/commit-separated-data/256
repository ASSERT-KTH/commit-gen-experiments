BLEU SCORE: 0.32555630133216146

TEST MSG: unified table of contents format
GENERATED MSG: updated command line table of contents

TEST DIFF (one line): diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index 8882265 . . 7761a47 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 54 , 7 + 54 , 8 @ @ java - jar moco - runner - < version > - standalone . jar start - p 12306 - g settings . json <nl> <nl> Feel free to open your browser to try . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ Configuration ] ( # configuration ) <nl> * [ Context ] ( # context ) <nl> diff - - git a / moco - doc / junit . md b / moco - doc / junit . md <nl> index 1eb5b55 . . ae60651 100644 <nl> - - - a / moco - doc / junit . md <nl> + + + b / moco - doc / junit . md <nl> @ @ - 2 , 7 + 2 , 8 @ @ <nl> <nl> Moco makes use of Test Rule in JUnit to simplify JUnit integration . * * MocoJunitRunner * * provides several ways to run Moco server as Test Rule , which can start Moco server before your test and stop after the test . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ HTTP Server ] ( # http - server ) <nl> * [ POJO HTTP Server ] ( # pojo - http - server ) <nl> diff - - git a / moco - doc / socket - apis . md b / moco - doc / socket - apis . md <nl> index 249020e . . 9765801 100644 <nl> - - - a / moco - doc / socket - apis . md <nl> + + + b / moco - doc / socket - apis . md <nl> @ @ - 5 , 7 + 5 , 8 @ @ That means if we get the expected request and then return our response . Now , you <nl> <nl> * * WARNING * * the json configuration below is just a snippet for one pair of request and response , instead of the whole configuration file . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ Composite Java API Design ] ( # composite - java - api - design ) <nl> * [ Description as comment ] ( # description - as - comment ) <nl> diff - - git a / moco - doc / usage . md b / moco - doc / usage . md <nl> index e2dc943 . . de0620b 100644 <nl> - - - a / moco - doc / usage . md <nl> + + + b / moco - doc / usage . md <nl> @ @ - 4 , 7 + 4 , 8 @ @ You have several ways to use Moco . One is API , which you can use in your unit te <nl> <nl> On the other hand , Moco has several different ways to integrate with some tools : Maven plugin , Gradle plugin and shell support . <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ API ] ( # api ) <nl> * [ dependency ] ( # dependency )
NEAREST DIFF (one line): diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 01cde8e . . ac0503c 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 5 , 7 + 5 , 9 @ @ That means if we get the expected request and then return our response . Now , you <nl> <nl> * * WARNING * * the json configuration below is just a snippet for one pair of request and response , instead of the whole configuration file . <nl> <nl> - * * Table of Contents * * <nl> + <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ Composite Java API Design ] ( # composite - java - api - design ) <nl> * [ Description as comment ] ( # description - as - comment ) <nl> diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md <nl> index 410d855 . . a65b0d7 100644 <nl> - - - a / moco - doc / cmd . md <nl> + + + b / moco - doc / cmd . md <nl> @ @ - 17 , 13 + 17 , 19 @ @ First of all , a JSON configuration file needs to be provided to start Moco . <nl> ` ` ` <nl> ( foo . json ) <nl> <nl> - * * Table of Contents * * <nl> + Table of Contents <nl> + = = = = = = = = = = = = = = = = = <nl> <nl> * [ Server Type ] ( # server - type ) <nl> * [ HTTP Server ] ( # http - server ) <nl> * [ HTTPS Server ] ( # https - server ) <nl> * [ Socket Server ] ( # socket - server ) <nl> + * [ Configuration Files ] ( # configuration - files ) <nl> + * [ One Configuration File ] ( # one - configuration - file ) <nl> + * [ Many Configuration Files ] ( # many - configuration - files ) <nl> * [ Port ] ( # port ) <nl> + * [ Specific Port ] ( # specific - port ) <nl> + * [ Without Port ] ( # without - port ) <nl> * [ Version ] ( # version ) <nl> * [ Global Settings ] ( # global - settings ) <nl> * [ Environment ] ( # environment )

TEST DIFF:
diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md 
 index 8882265 . . 7761a47 100644 
 - - - a / moco - doc / global - settings . md 
 + + + b / moco - doc / global - settings . md 
 @ @ - 54 , 7 + 54 , 8 @ @ java - jar moco - runner - < version > - standalone . jar start - p 12306 - g settings . json 
 
 Feel free to open your browser to try . 
 
 - * * Table of Contents * * 
 + Table of Contents 
 + = = = = = = = = = = = = = = = = = 
 
 * [ Configuration ] ( # configuration ) 
 * [ Context ] ( # context ) 
 diff - - git a / moco - doc / junit . md b / moco - doc / junit . md 
 index 1eb5b55 . . ae60651 100644 
 - - - a / moco - doc / junit . md 
 + + + b / moco - doc / junit . md 
 @ @ - 2 , 7 + 2 , 8 @ @ 
 
 Moco makes use of Test Rule in JUnit to simplify JUnit integration . * * MocoJunitRunner * * provides several ways to run Moco server as Test Rule , which can start Moco server before your test and stop after the test . 
 
 - * * Table of Contents * * 
 + Table of Contents 
 + = = = = = = = = = = = = = = = = = 
 
 * [ HTTP Server ] ( # http - server ) 
 * [ POJO HTTP Server ] ( # pojo - http - server ) 
 diff - - git a / moco - doc / socket - apis . md b / moco - doc / socket - apis . md 
 index 249020e . . 9765801 100644 
 - - - a / moco - doc / socket - apis . md 
 + + + b / moco - doc / socket - apis . md 
 @ @ - 5 , 7 + 5 , 8 @ @ That means if we get the expected request and then return our response . Now , you 
 
 * * WARNING * * the json configuration below is just a snippet for one pair of request and response , instead of the whole configuration file . 
 
 - * * Table of Contents * * 
 + Table of Contents 
 + = = = = = = = = = = = = = = = = = 
 
 * [ Composite Java API Design ] ( # composite - java - api - design ) 
 * [ Description as comment ] ( # description - as - comment ) 
 diff - - git a / moco - doc / usage . md b / moco - doc / usage . md 
 index e2dc943 . . de0620b 100644 
 - - - a / moco - doc / usage . md 
 + + + b / moco - doc / usage . md 
 @ @ - 4 , 7 + 4 , 8 @ @ You have several ways to use Moco . One is API , which you can use in your unit te 
 
 On the other hand , Moco has several different ways to integrate with some tools : Maven plugin , Gradle plugin and shell support . 
 
 - * * Table of Contents * * 
 + Table of Contents 
 + = = = = = = = = = = = = = = = = = 
 
 * [ API ] ( # api ) 
 * [ dependency ] ( # dependency )

NEAREST DIFF:
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 01cde8e . . ac0503c 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 5 , 7 + 5 , 9 @ @ That means if we get the expected request and then return our response . Now , you 
 
 * * WARNING * * the json configuration below is just a snippet for one pair of request and response , instead of the whole configuration file . 
 
 - * * Table of Contents * * 
 + 
 + Table of Contents 
 + = = = = = = = = = = = = = = = = = 
 
 * [ Composite Java API Design ] ( # composite - java - api - design ) 
 * [ Description as comment ] ( # description - as - comment ) 
 diff - - git a / moco - doc / cmd . md b / moco - doc / cmd . md 
 index 410d855 . . a65b0d7 100644 
 - - - a / moco - doc / cmd . md 
 + + + b / moco - doc / cmd . md 
 @ @ - 17 , 13 + 17 , 19 @ @ First of all , a JSON configuration file needs to be provided to start Moco . 
 ` ` ` 
 ( foo . json ) 
 
 - * * Table of Contents * * 
 + Table of Contents 
 + = = = = = = = = = = = = = = = = = 
 
 * [ Server Type ] ( # server - type ) 
 * [ HTTP Server ] ( # http - server ) 
 * [ HTTPS Server ] ( # https - server ) 
 * [ Socket Server ] ( # socket - server ) 
 + * [ Configuration Files ] ( # configuration - files ) 
 + * [ One Configuration File ] ( # one - configuration - file ) 
 + * [ Many Configuration Files ] ( # many - configuration - files ) 
 * [ Port ] ( # port ) 
 + * [ Specific Port ] ( # specific - port ) 
 + * [ Without Port ] ( # without - port ) 
 * [ Version ] ( # version ) 
 * [ Global Settings ] ( # global - settings ) 
 * [ Environment ] ( # environment )
