BLEU SCORE: 0.05341087579952926

TEST MSG: started to work on globs
GENERATED MSG: introduced watcher service

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> new file mode 100644 <nl> index 0000000 . . 5c344b9 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 0 , 0 + 1 , 73 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . FileVisitResult ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . PathMatcher ; <nl> + import java . nio . file . Paths ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . SimpleFileVisitor ; <nl> + import java . nio . file . attribute . BasicFileAttributes ; <nl> + <nl> + import static com . google . common . collect . ImmutableList . of ; <nl> + <nl> + public class Globs { <nl> + public static ImmutableList < String > glob ( final String glob ) { <nl> + Path path = Paths . get ( glob ) ; <nl> + int globIndex = getGlobIndex ( path ) ; <nl> + if ( globIndex < 0 ) { <nl> + return of ( glob ) ; <nl> + } <nl> + <nl> + return doGlob ( path , path . subpath ( 0 , globIndex ) ) ; <nl> + } <nl> + <nl> + private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { <nl> + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + path ) ; <nl> + <nl> + final ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; <nl> + try { <nl> + Files . walkFileTree ( searchPath , new SimpleFileVisitor < Path > ( ) { <nl> + @ Override <nl> + public FileVisitResult visitFile ( final Path file , final BasicFileAttributes attrs ) throws IOException { <nl> + if ( matcher . matches ( file ) ) { <nl> + builder . add ( file . toString ( ) ) ; <nl> + } <nl> + return FileVisitResult . CONTINUE ; <nl> + } <nl> + } ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + private static int getGlobIndex ( Path path ) { <nl> + int nameCount = path . getNameCount ( ) ; <nl> + for ( int i = 0 ; i < nameCount ; i + + ) { <nl> + String current = path . getName ( i ) . toString ( ) ; <nl> + int length = current . length ( ) ; <nl> + for ( int j = 0 ; j < length ; j + + ) { <nl> + if ( isGlobMeta ( current . charAt ( j ) ) ) { <nl> + return i ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return - 1 ; <nl> + } <nl> + <nl> + private static final String globMetaChars = " \ \ * ? [ { " ; <nl> + <nl> + private static boolean isGlobMeta ( char c ) { <nl> + return globMetaChars . indexOf ( c ) ! = - 1 ; <nl> + } <nl> + <nl> + private Globs ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 516af84 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import org . junit . Test ; <nl> + <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class GlobsTest { <nl> + @ Test <nl> + public void should _ glob _ relative _ files ( ) { <nl> + ImmutableList < String > files = Globs . glob ( " src / test / resources / details / * . json " ) ; <nl> + assertThat ( files . contains ( " src / test / resources / details / foo . json " ) , is ( true ) ) ; <nl> + assertThat ( files . contains ( " src / test / resources / details / bar . json " ) , is ( true ) ) ; <nl> + } <nl> + <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / moco - core / src / test / resources / details / bar . json b / moco - core / src / test / resources / details / bar . json <nl> new file mode 100644 <nl> index 0000000 . . 9ab1e10 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / details / bar . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / bar " <nl> + } , <nl> + " response " : { <nl> + " text " : " bar " <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / moco - core / src / test / resources / details / foo . json b / moco - core / src / test / resources / details / foo . json <nl> new file mode 100644 <nl> index 0000000 . . 85d861c <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / resources / details / foo . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " uri " : " / foo " <nl> + } , <nl> + " response " : { <nl> + " text " : " foo " <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 35f30c6 . . 4520d1b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 1 , 100 + 1 , 36 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - import com . github . dreamhead . moco . util . Files ; <nl> import com . google . common . base . Function ; <nl> - import com . google . common . collect . HashMultimap ; <nl> - import com . google . common . collect . Multimap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . nio . file . ClosedWatchServiceException ; <nl> - import java . nio . file . FileSystems ; <nl> - import java . nio . file . Path ; <nl> - import java . nio . file . WatchEvent ; <nl> - import java . nio . file . WatchKey ; <nl> - import java . nio . file . WatchService ; <nl> - import java . util . Collection ; <nl> - import java . util . concurrent . ExecutorService ; <nl> - import java . util . concurrent . Executors ; <nl> - <nl> - import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> - import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> <nl> public class Java7Watcher implements Watcher { <nl> private static Logger logger = LoggerFactory . getLogger ( Java7Watcher . class ) ; <nl> - private static ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> - <nl> - private final WatchService service ; <nl> + private static WatcherService service = new WatcherService ( ) ; <nl> private final Function < File , Void > listener ; <nl> - private boolean running ; <nl> - private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> + private final File file ; <nl> <nl> - public Java7Watcher ( final Function < File , Void > listener , final File [ ] files ) { <nl> + public Java7Watcher ( final Function < File , Void > listener , final File file ) { <nl> this . listener = listener ; <nl> - this . running = false ; <nl> - <nl> - try { <nl> - this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; <nl> - for ( File file : files ) { <nl> - Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> - WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> - keys . put ( key , file . toPath ( ) ) ; <nl> - } <nl> - <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - <nl> + this . file = file ; <nl> } <nl> <nl> @ Override <nl> - public void start ( ) { <nl> - this . running = true ; <nl> - <nl> - executor . execute ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - while ( running ) { <nl> - loop ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - private void loop ( ) { <nl> + public synchronized void start ( ) { <nl> try { <nl> - WatchKey key = service . take ( ) ; <nl> - <nl> - final Collection < Path > paths = keys . get ( key ) ; <nl> - for ( WatchEvent < ? > event : key . pollEvents ( ) ) { <nl> - final Path context = ( Path ) event . context ( ) ; <nl> - if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { <nl> - for ( Path path : paths ) { <nl> - if ( path . endsWith ( context ) ) { <nl> - listener . apply ( context . toFile ( ) ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - key . reset ( ) ; <nl> - } catch ( ClosedWatchServiceException ignored ) { <nl> - } catch ( InterruptedException e ) { <nl> - logger . error ( " Error happens " , e ) ; <nl> - } finally { <nl> - try { <nl> - service . close ( ) ; <nl> - } catch ( IOException ignore ) { <nl> + if ( ! service . isRunning ( ) ) { <nl> + service . start ( ) ; <nl> } <nl> + <nl> + service . register ( file , listener ) ; <nl> + } catch ( IOException ignored ) { <nl> } <nl> } <nl> <nl> @ Override <nl> public void stop ( ) { <nl> - if ( running ) { <nl> - this . running = false ; <nl> - } <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> index f46d1b0 . . 1b8a978 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> @ @ - 4 , 12 + 4 , 20 @ @ import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> public class Java7WatcherFactory implements FileWatcherFactory { <nl> @ Override <nl> public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> if ( files . length = = 0 ) { <nl> throw new IllegalArgumentException ( " No file is specified " ) ; <nl> } <nl> - return new Java7Watcher ( listener , files ) ; <nl> + <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> + @ Override <nl> + public Watcher apply ( final File file ) { <nl> + return new Java7Watcher ( listener , file ) ; <nl> + } <nl> + } ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> new file mode 100644 <nl> index 0000000 . . 667b2a7 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 0 , 0 + 1 , 93 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . util . Files ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . file . ClosedWatchServiceException ; <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . WatchEvent ; <nl> + import java . nio . file . WatchKey ; <nl> + import java . nio . file . WatchService ; <nl> + import java . util . Collection ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> + import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> + <nl> + public class WatcherService { <nl> + private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; <nl> + <nl> + private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> + private WatchService service ; <nl> + private boolean running ; <nl> + private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> + private final Multimap < Path , Function < File , Void > > listeners = HashMultimap . create ( ) ; <nl> + <nl> + public boolean isRunning ( ) { <nl> + return this . running ; <nl> + } <nl> + <nl> + public void start ( ) throws IOException { <nl> + if ( running ) { <nl> + throw new IllegalStateException ( ) ; <nl> + } <nl> + <nl> + this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; <nl> + this . running = true ; <nl> + executor . execute ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + while ( running ) { <nl> + loop ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private void loop ( ) { <nl> + try { <nl> + WatchKey key = service . take ( ) ; <nl> + Collection < Path > paths = keys . get ( key ) ; <nl> + for ( WatchEvent < ? > event : key . pollEvents ( ) ) { <nl> + if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { <nl> + final Path context = ( Path ) event . context ( ) ; <nl> + System . out . println ( " Modify : " + context ) ; <nl> + for ( Path path : paths ) { <nl> + if ( path . endsWith ( context ) ) { <nl> + for ( Function < File , Void > listener : this . listeners . get ( path ) ) { <nl> + listener . apply ( path . toFile ( ) ) ; <nl> + } <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + key . reset ( ) ; <nl> + } catch ( ClosedWatchServiceException ignored ) { <nl> + } catch ( InterruptedException e ) { <nl> + logger . error ( " Error happens " , e ) ; <nl> + } <nl> + } <nl> + <nl> + public void stop ( ) { <nl> + if ( this . running ) { <nl> + this . running = false ; <nl> + } <nl> + } <nl> + <nl> + public void register ( final File file , final Function < File , Void > listener ) throws IOException { <nl> + Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> + Path path = file . toPath ( ) ; <nl> + keys . put ( key , path ) ; <nl> + listeners . put ( path , listener ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java 
 new file mode 100644 
 index 0000000 . . 5c344b9 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java 
 @ @ - 0 , 0 + 1 , 73 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import com . github . dreamhead . moco . MocoException ; 
 + import com . google . common . collect . ImmutableList ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . file . FileSystems ; 
 + import java . nio . file . FileVisitResult ; 
 + import java . nio . file . Path ; 
 + import java . nio . file . PathMatcher ; 
 + import java . nio . file . Paths ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . SimpleFileVisitor ; 
 + import java . nio . file . attribute . BasicFileAttributes ; 
 + 
 + import static com . google . common . collect . ImmutableList . of ; 
 + 
 + public class Globs { 
 + public static ImmutableList < String > glob ( final String glob ) { 
 + Path path = Paths . get ( glob ) ; 
 + int globIndex = getGlobIndex ( path ) ; 
 + if ( globIndex < 0 ) { 
 + return of ( glob ) ; 
 + } 
 + 
 + return doGlob ( path , path . subpath ( 0 , globIndex ) ) ; 
 + } 
 + 
 + private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { 
 + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + path ) ; 
 + 
 + final ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; 
 + try { 
 + Files . walkFileTree ( searchPath , new SimpleFileVisitor < Path > ( ) { 
 + @ Override 
 + public FileVisitResult visitFile ( final Path file , final BasicFileAttributes attrs ) throws IOException { 
 + if ( matcher . matches ( file ) ) { 
 + builder . add ( file . toString ( ) ) ; 
 + } 
 + return FileVisitResult . CONTINUE ; 
 + } 
 + } ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + 
 + return builder . build ( ) ; 
 + } 
 + 
 + private static int getGlobIndex ( Path path ) { 
 + int nameCount = path . getNameCount ( ) ; 
 + for ( int i = 0 ; i < nameCount ; i + + ) { 
 + String current = path . getName ( i ) . toString ( ) ; 
 + int length = current . length ( ) ; 
 + for ( int j = 0 ; j < length ; j + + ) { 
 + if ( isGlobMeta ( current . charAt ( j ) ) ) { 
 + return i ; 
 + } 
 + } 
 + } 
 + 
 + return - 1 ; 
 + } 
 + 
 + private static final String globMetaChars = " \ \ * ? [ { " ; 
 + 
 + private static boolean isGlobMeta ( char c ) { 
 + return globMetaChars . indexOf ( c ) ! = - 1 ; 
 + } 
 + 
 + private Globs ( ) { 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java 
 new file mode 100644 
 index 0000000 . . 516af84 
 - - - / dev / null 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + import org . junit . Test ; 
 + 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . * ; 
 + 
 + public class GlobsTest { 
 + @ Test 
 + public void should _ glob _ relative _ files ( ) { 
 + ImmutableList < String > files = Globs . glob ( " src / test / resources / details / * . json " ) ; 
 + assertThat ( files . contains ( " src / test / resources / details / foo . json " ) , is ( true ) ) ; 
 + assertThat ( files . contains ( " src / test / resources / details / bar . json " ) , is ( true ) ) ; 
 + } 
 + 
 + } 
 \ No newline at end of file 
 diff - - git a / moco - core / src / test / resources / details / bar . json b / moco - core / src / test / resources / details / bar . json 
 new file mode 100644 
 index 0000000 . . 9ab1e10 
 - - - / dev / null 
 + + + b / moco - core / src / test / resources / details / bar . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + [ 
 + { 
 + " request " : { 
 + " uri " : " / bar " 
 + } , 
 + " response " : { 
 + " text " : " bar " 
 + } 
 + } 
 + ] 
 \ No newline at end of file 
 diff - - git a / moco - core / src / test / resources / details / foo . json b / moco - core / src / test / resources / details / foo . json 
 new file mode 100644 
 index 0000000 . . 85d861c 
 - - - / dev / null 
 + + + b / moco - core / src / test / resources / details / foo . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + [ 
 + { 
 + " request " : { 
 + " uri " : " / foo " 
 + } , 
 + " response " : { 
 + " text " : " foo " 
 + } 
 + } 
 + ] 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 index 35f30c6 . . 4520d1b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 @ @ - 1 , 100 + 1 , 36 @ @ 
 package com . github . dreamhead . moco . runner . watcher ; 
 
 - import com . github . dreamhead . moco . util . Files ; 
 import com . google . common . base . Function ; 
 - import com . google . common . collect . HashMultimap ; 
 - import com . google . common . collect . Multimap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . nio . file . ClosedWatchServiceException ; 
 - import java . nio . file . FileSystems ; 
 - import java . nio . file . Path ; 
 - import java . nio . file . WatchEvent ; 
 - import java . nio . file . WatchKey ; 
 - import java . nio . file . WatchService ; 
 - import java . util . Collection ; 
 - import java . util . concurrent . ExecutorService ; 
 - import java . util . concurrent . Executors ; 
 - 
 - import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; 
 - import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; 
 
 public class Java7Watcher implements Watcher { 
 private static Logger logger = LoggerFactory . getLogger ( Java7Watcher . class ) ; 
 - private static ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; 
 - 
 - private final WatchService service ; 
 + private static WatcherService service = new WatcherService ( ) ; 
 private final Function < File , Void > listener ; 
 - private boolean running ; 
 - private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; 
 + private final File file ; 
 
 - public Java7Watcher ( final Function < File , Void > listener , final File [ ] files ) { 
 + public Java7Watcher ( final Function < File , Void > listener , final File file ) { 
 this . listener = listener ; 
 - this . running = false ; 
 - 
 - try { 
 - this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; 
 - for ( File file : files ) { 
 - Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 - WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; 
 - keys . put ( key , file . toPath ( ) ) ; 
 - } 
 - 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - 
 + this . file = file ; 
 } 
 
 @ Override 
 - public void start ( ) { 
 - this . running = true ; 
 - 
 - executor . execute ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - while ( running ) { 
 - loop ( ) ; 
 - } 
 - } 
 - } ) ; 
 - } 
 - 
 - private void loop ( ) { 
 + public synchronized void start ( ) { 
 try { 
 - WatchKey key = service . take ( ) ; 
 - 
 - final Collection < Path > paths = keys . get ( key ) ; 
 - for ( WatchEvent < ? > event : key . pollEvents ( ) ) { 
 - final Path context = ( Path ) event . context ( ) ; 
 - if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { 
 - for ( Path path : paths ) { 
 - if ( path . endsWith ( context ) ) { 
 - listener . apply ( context . toFile ( ) ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - } 
 - key . reset ( ) ; 
 - } catch ( ClosedWatchServiceException ignored ) { 
 - } catch ( InterruptedException e ) { 
 - logger . error ( " Error happens " , e ) ; 
 - } finally { 
 - try { 
 - service . close ( ) ; 
 - } catch ( IOException ignore ) { 
 + if ( ! service . isRunning ( ) ) { 
 + service . start ( ) ; 
 } 
 + 
 + service . register ( file , listener ) ; 
 + } catch ( IOException ignored ) { 
 } 
 } 
 
 @ Override 
 public void stop ( ) { 
 - if ( running ) { 
 - this . running = false ; 
 - } 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 index f46d1b0 . . 1b8a978 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 @ @ - 4 , 12 + 4 , 20 @ @ import com . google . common . base . Function ; 
 
 import java . io . File ; 
 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 public class Java7WatcherFactory implements FileWatcherFactory { 
 @ Override 
 public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { 
 if ( files . length = = 0 ) { 
 throw new IllegalArgumentException ( " No file is specified " ) ; 
 } 
 - return new Java7Watcher ( listener , files ) ; 
 + 
 + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 + @ Override 
 + public Watcher apply ( final File file ) { 
 + return new Java7Watcher ( listener , file ) ; 
 + } 
 + } ) ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 new file mode 100644 
 index 0000000 . . 667b2a7 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 0 , 0 + 1 , 93 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . util . Files ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Multimap ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . file . ClosedWatchServiceException ; 
 + import java . nio . file . FileSystems ; 
 + import java . nio . file . Path ; 
 + import java . nio . file . WatchEvent ; 
 + import java . nio . file . WatchKey ; 
 + import java . nio . file . WatchService ; 
 + import java . util . Collection ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + 
 + import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; 
 + import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; 
 + 
 + public class WatcherService { 
 + private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; 
 + 
 + private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; 
 + private WatchService service ; 
 + private boolean running ; 
 + private final Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; 
 + private final Multimap < Path , Function < File , Void > > listeners = HashMultimap . create ( ) ; 
 + 
 + public boolean isRunning ( ) { 
 + return this . running ; 
 + } 
 + 
 + public void start ( ) throws IOException { 
 + if ( running ) { 
 + throw new IllegalStateException ( ) ; 
 + } 
 + 
 + this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; 
 + this . running = true ; 
 + executor . execute ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + while ( running ) { 
 + loop ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 + private void loop ( ) { 
 + try { 
 + WatchKey key = service . take ( ) ; 
 + Collection < Path > paths = keys . get ( key ) ; 
 + for ( WatchEvent < ? > event : key . pollEvents ( ) ) { 
 + if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { 
 + final Path context = ( Path ) event . context ( ) ; 
 + System . out . println ( " Modify : " + context ) ; 
 + for ( Path path : paths ) { 
 + if ( path . endsWith ( context ) ) { 
 + for ( Function < File , Void > listener : this . listeners . get ( path ) ) { 
 + listener . apply ( path . toFile ( ) ) ; 
 + } 
 + break ; 
 + } 
 + } 
 + } 
 + } 
 + key . reset ( ) ; 
 + } catch ( ClosedWatchServiceException ignored ) { 
 + } catch ( InterruptedException e ) { 
 + logger . error ( " Error happens " , e ) ; 
 + } 
 + } 
 + 
 + public void stop ( ) { 
 + if ( this . running ) { 
 + this . running = false ; 
 + } 
 + } 
 + 
 + public void register ( final File file , final Function < File , Void > listener ) throws IOException { 
 + Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; 
 + Path path = file . toPath ( ) ; 
 + keys . put ( key , path ) ; 
 + listeners . put ( path , listener ) ; 
 + } 
 + }
