BLEU SCORE: 0.09980099403873663

TEST MSG: removed unused path resource with optional charset from publish api
GENERATED MSG: added resource and charset to file and path resource api

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index cafd619 . . a0b3954 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 401 , 11 + 401 , 7 @ @ public final class Moco { <nl> return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> - public static ContentResource pathResource ( final String filename , final Optional < Charset > charset ) { <nl> - return pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; <nl> - } <nl> - <nl> - public static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> + private static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , checkNotNull ( charset , " Charset should not be null " ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 913718f . . e54d70a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import com . google . common . collect . Maps ; <nl> <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> + import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> @ @ - 200 , 8 + 201 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> FileContainer fileContainer = FileContainer . class . cast ( container ) ; <nl> TextContainer filename = fileContainer . getName ( ) ; <nl> if ( filename . isRawText ( ) ) { <nl> - return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , fileContainer . getCharset ( ) , <nl> - Resource . class , String . class , Optional . class ) ) ; <nl> + Optional < Charset > charset = fileContainer . getCharset ( ) ; <nl> + if ( charset . isPresent ( ) ) { <nl> + return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , charset . get ( ) , <nl> + Resource . class , String . class , Charset . class ) ) ; <nl> + } else { <nl> + return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , <nl> + Resource . class , String . class ) ) ; <nl> + <nl> + } <nl> } <nl> <nl> if ( filename . isForTemplate ( ) ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 98fbd10 . . d115fef 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 348 , 6 + 348 , 10 @ @ public class Moco { <nl> return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; <nl> } <nl> <nl> + public static ContentResource file ( final Resource filename , Charset charset ) { <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; <nl> + } <nl> + <nl> public static ContentResource file ( final String filename , Optional < Charset > charset ) { <nl> return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) , Optional . < MocoConfig > absent ( ) ) ; <nl> } <nl> @ @ - 364 , 6 + 368 , 10 @ @ public class Moco { <nl> return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> + public static ContentResource pathResource ( final Resource filename , Charset charset ) { <nl> + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> + } <nl> + <nl> public static ContentResource pathResource ( final String filename , Optional < Charset > charset ) { <nl> return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 17298b5 . . f18cdfe 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> import org . apache . http . Header ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> @ @ - 8 , 12 + 9 , 16 @ @ import org . apache . http . client . fluent . Request ; <nl> import org . apache . http . message . BasicNameValuePair ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . google . common . collect . ImmutableMap . of ; <nl> + import static com . google . common . io . Files . toByteArray ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 347 , 6 + 352 , 18 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ return _ file _ with _ template _ and _ charset ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( file ( template ( " src / test / resources / $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( toByteArray ( new File ( " src / test / resources / gbk . response " ) ) ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ return _ path _ resource _ with _ template ( ) throws Exception { <nl> server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " foo . response " ) ) ) ; <nl> <nl> @ @ - 357 , 4 + 374 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ path _ resource _ with _ template _ and _ charset ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + InputStream stream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " gbk . response " ) ; <nl> + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( ByteStreams . toByteArray ( stream ) ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index cafd619 . . a0b3954 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 401 , 11 + 401 , 7 @ @ public final class Moco { 
 return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 - public static ContentResource pathResource ( final String filename , final Optional < Charset > charset ) { 
 - return pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; 
 - } 
 - 
 - public static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { 
 + private static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { 
 return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , checkNotNull ( charset , " Charset should not be null " ) ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 913718f . . e54d70a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import com . google . common . collect . Maps ; 
 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 + import java . nio . charset . Charset ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . Moco . attachment ; 
 @ @ - 200 , 8 + 201 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 FileContainer fileContainer = FileContainer . class . cast ( container ) ; 
 TextContainer filename = fileContainer . getName ( ) ; 
 if ( filename . isRawText ( ) ) { 
 - return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , fileContainer . getCharset ( ) , 
 - Resource . class , String . class , Optional . class ) ) ; 
 + Optional < Charset > charset = fileContainer . getCharset ( ) ; 
 + if ( charset . isPresent ( ) ) { 
 + return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , charset . get ( ) , 
 + Resource . class , String . class , Charset . class ) ) ; 
 + } else { 
 + return Optional . of ( invokeTarget ( name , fileContainer . getName ( ) . getText ( ) , 
 + Resource . class , String . class ) ) ; 
 + 
 + } 
 } 
 
 if ( filename . isForTemplate ( ) ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 98fbd10 . . d115fef 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 348 , 6 + 348 , 10 @ @ public class Moco { 
 return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; 
 } 
 
 + public static ContentResource file ( final Resource filename , Charset charset ) { 
 + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; 
 + } 
 + 
 public static ContentResource file ( final String filename , Optional < Charset > charset ) { 
 return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) , Optional . < MocoConfig > absent ( ) ) ; 
 } 
 @ @ - 364 , 6 + 368 , 10 @ @ public class Moco { 
 return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 + public static ContentResource pathResource ( final Resource filename , Charset charset ) { 
 + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 + } 
 + 
 public static ContentResource pathResource ( final String filename , Optional < Charset > charset ) { 
 return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index 17298b5 . . f18cdfe 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . google . common . io . ByteStreams ; 
 import org . apache . http . Header ; 
 import org . apache . http . HttpVersion ; 
 import org . apache . http . ProtocolVersion ; 
 @ @ - 8 , 12 + 9 , 16 @ @ import org . apache . http . client . fluent . Request ; 
 import org . apache . http . message . BasicNameValuePair ; 
 import org . junit . Test ; 
 
 + import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . nio . charset . Charset ; 
 
 import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . google . common . collect . ImmutableMap . of ; 
 + import static com . google . common . io . Files . toByteArray ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 @ @ - 347 , 6 + 352 , 18 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ return _ file _ with _ template _ and _ charset ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( file ( template ( " src / test / resources / $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( toByteArray ( new File ( " src / test / resources / gbk . response " ) ) ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ return _ path _ resource _ with _ template ( ) throws Exception { 
 server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " foo . response " ) ) ) ; 
 
 @ @ - 357 , 4 + 374 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ return _ path _ resource _ with _ template _ and _ charset ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + InputStream stream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " gbk . response " ) ; 
 + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( ByteStreams . toByteArray ( stream ) ) ) ; 
 + } 
 + } ) ; 
 + } 
 }
