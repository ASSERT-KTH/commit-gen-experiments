BLEU SCORE: 0.06567274736060397

TEST MSG: added test for multiple modification for included files
GENERATED MSG: added get for standalone event

TEST DIFF (one line): diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 15cd302 . . a186c9c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> @ @ - 48 , 4 + 49 , 67 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> <nl> assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ reload _ configuration _ with _ mulitiple _ modification ( ) throws IOException , InterruptedException { <nl> + final File config1 = tempFolder . newFile ( " config1 . json " ) ; <nl> + changeFileContent ( config1 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / foo \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " foo \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + <nl> + final File config2 = tempFolder . newFile ( " config2 . json " ) ; <nl> + changeFileContent ( config2 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / bar \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " bar \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + <nl> + <nl> + final File setting = tempFolder . newFile ( " settings . json " ) ; <nl> + changeFileContent ( setting , " [ " <nl> + + " { \ " include \ " : \ " " + FilenameUtils . separatorsToUnix ( config1 . getAbsolutePath ( ) ) + " \ " } , " <nl> + + " { \ " include \ " : \ " " + FilenameUtils . separatorsToUnix ( config2 . getAbsolutePath ( ) ) + " \ " } " <nl> + + " ] " ) ; <nl> + <nl> + RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( 9090 ) <nl> + . withSettings ( setting . getAbsolutePath ( ) ) <nl> + . build ( ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar " ) ) ; <nl> + <nl> + changeFileContent ( config1 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / foo \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " foo1 \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + changeFileContent ( config2 , " [ { " + <nl> + " \ " request \ " : { " + <nl> + " \ " uri \ " : \ " / bar \ " " + <nl> + " } , " + <nl> + " \ " response \ " : { " + <nl> + " \ " text \ " : \ " bar1 \ " " + <nl> + " } " + <nl> + " } ] " ) ; <nl> + <nl> + waitChangeHappens ( ) ; <nl> + <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo1 " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar1 " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> index c1cb448 . . e31aa2d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ public class CompleteEventSetting { <nl> private boolean async ; <nl> private long latency ; <nl> private PostSetting post ; <nl> + private GetSetting get ; <nl> <nl> public MocoEventAction createTrigger ( ) { <nl> MocoEventAction action = doCreateAction ( ) ; <nl> @ @ - 22 , 6 + 23 , 10 @ @ public class CompleteEventSetting { <nl> } <nl> <nl> private MocoEventAction doCreateAction ( ) { <nl> + if ( get ! = null ) { <nl> + return get . createAction ( ) ; <nl> + } <nl> + <nl> if ( post ! = null ) { <nl> return post . createAction ( ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> new file mode 100644 <nl> index 0000000 . . fbdb5f2 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . MocoEventAction ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . get ; <nl> + <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> + public class GetSetting { <nl> + private String url ; <nl> + <nl> + public MocoEventAction createAction ( ) { <nl> + return get ( url ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index aa06e65 . . 8e79ddd 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . github . dreamhead . moco . runner . monitor . FileMocoRunnerMonitor ; <nl> import com . github . dreamhead . moco . util . Idles ; <nl> import com . google . common . io . Files ; <nl> import org . junit . Rule ; <nl> @ @ - 19 , 6 + 18 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> + private static final int IDLE = 1200 ; <nl> @ Rule <nl> public TemporaryFolder folder = new TemporaryFolder ( ) ; <nl> <nl> @ @ - 27 , 9 + 27 , 20 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> runWithConfiguration ( " event . json " ) ; <nl> File file = folder . newFile ( ) ; <nl> System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> - assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " foo " ) ) ; <nl> - Idles . idle ( 2000 ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " post _ foo " ) ) ; <nl> + Idles . idle ( IDLE ) ; <nl> <nl> - assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " success " ) ) ; <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ fire _ get _ event ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / get _ event " ) ) , is ( " get _ foo " ) ) ; <nl> + Idles . idle ( IDLE ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index 4c92777 . . d9176ec 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 4 , 12 + 4 , 12 @ @ <nl> " uri " : " / event " <nl> } , <nl> " response " : { <nl> - " text " : " foo " <nl> + " text " : " post _ foo " <nl> } , <nl> " on " : { <nl> " complete " : { <nl> " async " : " true " , <nl> - " latency " : 1000 , <nl> + " latency " : 500 , <nl> " post " : { <nl> " url " : " http : / / localhost : 12306 / target " , <nl> " content " : " content " <nl> @ @ - 17 , 12 + 17 , 31 @ @ <nl> } <nl> } <nl> } , <nl> + <nl> + { <nl> + " request " : { <nl> + " uri " : " / get _ event " <nl> + } , <nl> + " response " : { <nl> + " text " : " get _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 1000 , <nl> + " get " : { <nl> + " url " : " http : / / localhost : 12306 / target " <nl> + } <nl> + } <nl> + } <nl> + } , <nl> + <nl> { <nl> " request " : { <nl> " uri " : " / target " <nl> } , <nl> " response " : { <nl> - " text " : " success " <nl> + " text " : " 0XCAFEBABE " <nl> } <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 index 15cd302 . . a186c9c 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 @ @ - 48 , 4 + 49 , 67 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { 
 
 assertThat ( helper . get ( root ( ) ) , is ( " foobar " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ reload _ configuration _ with _ mulitiple _ modification ( ) throws IOException , InterruptedException { 
 + final File config1 = tempFolder . newFile ( " config1 . json " ) ; 
 + changeFileContent ( config1 , " [ { " + 
 + " \ " request \ " : { " + 
 + " \ " uri \ " : \ " / foo \ " " + 
 + " } , " + 
 + " \ " response \ " : { " + 
 + " \ " text \ " : \ " foo \ " " + 
 + " } " + 
 + " } ] " ) ; 
 + 
 + final File config2 = tempFolder . newFile ( " config2 . json " ) ; 
 + changeFileContent ( config2 , " [ { " + 
 + " \ " request \ " : { " + 
 + " \ " uri \ " : \ " / bar \ " " + 
 + " } , " + 
 + " \ " response \ " : { " + 
 + " \ " text \ " : \ " bar \ " " + 
 + " } " + 
 + " } ] " ) ; 
 + 
 + 
 + final File setting = tempFolder . newFile ( " settings . json " ) ; 
 + changeFileContent ( setting , " [ " 
 + + " { \ " include \ " : \ " " + FilenameUtils . separatorsToUnix ( config1 . getAbsolutePath ( ) ) + " \ " } , " 
 + + " { \ " include \ " : \ " " + FilenameUtils . separatorsToUnix ( config2 . getAbsolutePath ( ) ) + " \ " } " 
 + + " ] " ) ; 
 + 
 + RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; 
 + runner = factory . createRunner ( httpArgs ( ) 
 + . withPort ( port ( ) ) 
 + . withShutdownPort ( 9090 ) 
 + . withSettings ( setting . getAbsolutePath ( ) ) 
 + . build ( ) ) ; 
 + runner . run ( ) ; 
 + 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar " ) ) ; 
 + 
 + changeFileContent ( config1 , " [ { " + 
 + " \ " request \ " : { " + 
 + " \ " uri \ " : \ " / foo \ " " + 
 + " } , " + 
 + " \ " response \ " : { " + 
 + " \ " text \ " : \ " foo1 \ " " + 
 + " } " + 
 + " } ] " ) ; 
 + changeFileContent ( config2 , " [ { " + 
 + " \ " request \ " : { " + 
 + " \ " uri \ " : \ " / bar \ " " + 
 + " } , " + 
 + " \ " response \ " : { " + 
 + " \ " text \ " : \ " bar1 \ " " + 
 + " } " + 
 + " } ] " ) ; 
 + 
 + waitChangeHappens ( ) ; 
 + 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " foo1 " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / bar " ) ) , is ( " bar1 " ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 index c1cb448 . . e31aa2d 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CompleteEventSetting . java 
 @ @ - 9 , 6 + 9 , 7 @ @ public class CompleteEventSetting { 
 private boolean async ; 
 private long latency ; 
 private PostSetting post ; 
 + private GetSetting get ; 
 
 public MocoEventAction createTrigger ( ) { 
 MocoEventAction action = doCreateAction ( ) ; 
 @ @ - 22 , 6 + 23 , 10 @ @ public class CompleteEventSetting { 
 } 
 
 private MocoEventAction doCreateAction ( ) { 
 + if ( get ! = null ) { 
 + return get . createAction ( ) ; 
 + } 
 + 
 if ( post ! = null ) { 
 return post . createAction ( ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 new file mode 100644 
 index 0000000 . . fbdb5f2 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 + import com . github . dreamhead . moco . MocoEventAction ; 
 + 
 + import static com . github . dreamhead . moco . Moco . get ; 
 + 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 + public class GetSetting { 
 + private String url ; 
 + 
 + public MocoEventAction createAction ( ) { 
 + return get ( url ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 index aa06e65 . . 8e79ddd 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . github . dreamhead . moco . runner . monitor . FileMocoRunnerMonitor ; 
 import com . github . dreamhead . moco . util . Idles ; 
 import com . google . common . io . Files ; 
 import org . junit . Rule ; 
 @ @ - 19 , 6 + 18 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 + private static final int IDLE = 1200 ; 
 @ Rule 
 public TemporaryFolder folder = new TemporaryFolder ( ) ; 
 
 @ @ - 27 , 9 + 27 , 20 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 runWithConfiguration ( " event . json " ) ; 
 File file = folder . newFile ( ) ; 
 System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 - assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " foo " ) ) ; 
 - Idles . idle ( 2000 ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " post _ foo " ) ) ; 
 + Idles . idle ( IDLE ) ; 
 
 - assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " success " ) ) ; 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ fire _ get _ event ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / get _ event " ) ) , is ( " get _ foo " ) ) ; 
 + Idles . idle ( IDLE ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json 
 index 4c92777 . . d9176ec 100644 
 - - - a / moco - runner / src / test / resources / event . json 
 + + + b / moco - runner / src / test / resources / event . json 
 @ @ - 4 , 12 + 4 , 12 @ @ 
 " uri " : " / event " 
 } , 
 " response " : { 
 - " text " : " foo " 
 + " text " : " post _ foo " 
 } , 
 " on " : { 
 " complete " : { 
 " async " : " true " , 
 - " latency " : 1000 , 
 + " latency " : 500 , 
 " post " : { 
 " url " : " http : / / localhost : 12306 / target " , 
 " content " : " content " 
 @ @ - 17 , 12 + 17 , 31 @ @ 
 } 
 } 
 } , 
 + 
 + { 
 + " request " : { 
 + " uri " : " / get _ event " 
 + } , 
 + " response " : { 
 + " text " : " get _ foo " 
 + } , 
 + " on " : { 
 + " complete " : { 
 + " async " : " true " , 
 + " latency " : 1000 , 
 + " get " : { 
 + " url " : " http : / / localhost : 12306 / target " 
 + } 
 + } 
 + } 
 + } , 
 + 
 { 
 " request " : { 
 " uri " : " / target " 
 } , 
 " response " : { 
 - " text " : " success " 
 + " text " : " 0XCAFEBABE " 
 } 
 } 
 ] 
 \ No newline at end of file
