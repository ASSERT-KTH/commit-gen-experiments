BLEU SCORE: 0.2259005009024612

TEST MSG: introduced json toList
GENERATED MSG: extracted collection reader

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 7d92224 . . fefe6b7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 2 , 14 + 2 , 29 @ @ package com . github . dreamhead . moco . util ; <nl> <nl> import com . fasterxml . jackson . core . JsonProcessingException ; <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> + import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> + import com . fasterxml . jackson . databind . type . CollectionType ; <nl> + import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . util . List ; <nl> + <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + import static com . google . common . io . Closeables . closeQuietly ; <nl> + import static java . lang . String . format ; <nl> <nl> public final class Jsons { <nl> - private static ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + private static Logger logger = LoggerFactory . getLogger ( Jsons . class ) ; <nl> + <nl> + private final static TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> + private final static ObjectMapper mapper = new ObjectMapper ( ) ; <nl> <nl> public static String toJson ( final Object value ) { <nl> try { <nl> @ @ - 51 , 6 + 66 , 24 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static < T > ImmutableList < T > toList ( final InputStream stream , final Class < T > elementClass ) { <nl> + try { <nl> + CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + List < T > sessionSettings = mapper . readValue ( stream , type ) ; <nl> + return copyOf ( sessionSettings ) ; <nl> + } catch ( UnrecognizedPropertyException e ) { <nl> + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> + throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> + } catch ( JsonMappingException e ) { <nl> + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } finally { <nl> + closeQuietly ( stream ) ; <nl> + } <nl> + } <nl> + <nl> private Jsons ( ) { <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> index 457c402 . . 8409fea 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java <nl> @ @ - 3 , 9 + 3 , 9 @ @ package com . github . dreamhead . moco . parser ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . Server ; <nl> import com . github . dreamhead . moco . parser . model . SessionSetting ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . io . Closeables ; <nl> <nl> import java . io . InputStream ; <nl> <nl> @ @ - 13 , 18 + 13 , 9 @ @ public abstract class BaseParser < T extends Server > implements Parser < T > { <nl> protected abstract T createServer ( final ImmutableList < SessionSetting > read , <nl> final Optional < Integer > port , final MocoConfig . . . configs ) ; <nl> <nl> - private final CollectionReader reader ; <nl> - <nl> - protected BaseParser ( ) { <nl> - this . reader = new CollectionReader ( ) ; <nl> - } <nl> - <nl> public T parseServer ( final InputStream is , final Optional < Integer > port , <nl> final MocoConfig . . . configs ) { <nl> - try { <nl> - return createServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; <nl> - } finally { <nl> - Closeables . closeQuietly ( is ) ; <nl> - } <nl> + ImmutableList < SessionSetting > settings = Jsons . toList ( is , SessionSetting . class ) ; <nl> + return createServer ( settings , port , configs ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> deleted file mode 100644 <nl> index 21f9a52 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> + + + / dev / null <nl> @ @ - 1 , 51 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser ; <nl> - <nl> - import com . fasterxml . jackson . databind . JsonMappingException ; <nl> - import com . fasterxml . jackson . databind . Module ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> - import com . fasterxml . jackson . databind . type . CollectionType ; <nl> - import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> - import com . github . dreamhead . moco . HttpServer ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - import java . util . List ; <nl> - <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> - import static com . google . common . io . Closeables . closeQuietly ; <nl> - import static java . lang . String . format ; <nl> - <nl> - public class CollectionReader { <nl> - private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; <nl> - <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> - <nl> - public CollectionReader ( final Module . . . modules ) { <nl> - for ( Module module : modules ) { <nl> - mapper . registerModule ( module ) ; <nl> - } <nl> - } <nl> - <nl> - public < T > ImmutableList < T > read ( final InputStream is , final Class < T > elementClass ) { <nl> - try { <nl> - CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> - List < T > sessionSettings = mapper . readValue ( is , type ) ; <nl> - return copyOf ( sessionSettings ) ; <nl> - } catch ( UnrecognizedPropertyException e ) { <nl> - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> - } catch ( JsonMappingException e ) { <nl> - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> - throw new RuntimeException ( e ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } finally { <nl> - closeQuietly ( is ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> index 3bcc893 . . a56b8ab 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> @ @ - 1 , 14 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser ; <nl> <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> import java . io . InputStream ; <nl> <nl> public class GlobalSettingParser { <nl> - private final CollectionReader reader = new CollectionReader ( ) ; <nl> - <nl> public ImmutableList < GlobalSetting > parse ( final InputStream is ) { <nl> - return reader . read ( is , GlobalSetting . class ) ; <nl> + return Jsons . toList ( is , GlobalSetting . class ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index 3f22445 . . 19ba781 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 8 , 3 + 8 , 4 @ @ out <nl> reports <nl> . DS _ Store <nl> . idea <nl> + . gradletasknamecache <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> new file mode 100644 <nl> index 0000000 . . 5765938 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . github . dreamhead . moco . parser ; <nl> + <nl> + import com . fasterxml . jackson . databind . JsonMappingException ; <nl> + import com . fasterxml . jackson . databind . Module ; <nl> + import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> + import com . fasterxml . jackson . databind . type . CollectionType ; <nl> + import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> + import com . github . dreamhead . moco . HttpServer ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . util . List ; <nl> + <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + import static java . lang . String . format ; <nl> + <nl> + public class CollectionReader { <nl> + private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; <nl> + <nl> + private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> + <nl> + public CollectionReader ( Module . . . modules ) { <nl> + for ( Module module : modules ) { <nl> + mapper . registerModule ( module ) ; <nl> + } <nl> + } <nl> + <nl> + public < T > ImmutableList < T > read ( InputStream is , Class < T > elementClass ) { <nl> + try { <nl> + CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + List < T > sessionSettings = mapper . readValue ( is , type ) ; <nl> + return copyOf ( sessionSettings ) ; <nl> + } catch ( UnrecognizedPropertyException e ) { <nl> + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> + throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> + } catch ( JsonMappingException e ) { <nl> + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> index 8c7e29b . . 8b480de 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java <nl> @ @ - 1 , 34 + 1 , 14 @ @ <nl> package com . github . dreamhead . moco . parser ; <nl> <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> - import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> import com . github . dreamhead . moco . parser . model . GlobalSetting ; <nl> import com . google . common . collect . ImmutableList ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> - import java . io . IOException ; <nl> import java . io . InputStream ; <nl> - import java . util . List ; <nl> - <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> - import static java . lang . String . format ; <nl> <nl> public class GlobalSettingParser { <nl> - private static Logger logger = LoggerFactory . getLogger ( GlobalSettingParser . class ) ; <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> + private final CollectionReader reader = new CollectionReader ( ) ; <nl> <nl> public ImmutableList < GlobalSetting > parse ( InputStream is ) { <nl> - try { <nl> - List < GlobalSetting > settings = mapper . readValue ( is , factory . constructCollectionType ( List . class , GlobalSetting . class ) ) ; <nl> - return copyOf ( settings ) ; <nl> - } catch ( UnrecognizedPropertyException upe ) { <nl> - logger . info ( " Unrecognized field : { } " , upe . getMessage ( ) ) ; <nl> - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , upe . getPropertyName ( ) ) ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return reader . read ( is , GlobalSetting . class ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> index 4834fdb . . 4dfad59 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> @ @ - 1 , 12 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . parser ; <nl> <nl> import com . fasterxml . jackson . core . Version ; <nl> - import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . Module ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> import com . fasterxml . jackson . databind . module . SimpleModule ; <nl> - import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> import com . github . dreamhead . moco . HttpServer ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> @ @ - 16 , 18 + 12 , 11 @ @ import com . google . common . collect . ImmutableList ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import java . io . IOException ; <nl> import java . io . InputStream ; <nl> - import java . util . List ; <nl> - <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> - import static java . lang . String . format ; <nl> <nl> public class HttpServerParser { <nl> private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; <nl> - <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; <nl> + private CollectionReader reader ; <nl> <nl> public HttpServerParser ( ) { <nl> Module textContainerModule = new SimpleModule ( " TextContainerModule " , <nl> @ @ - 36 , 27 + 25 , 11 @ @ public class HttpServerParser { <nl> Module proxyContainerModule = new SimpleModule ( " ProxyContainerModule " , <nl> new Version ( 1 , 0 , 0 , null , null , null ) ) <nl> . addDeserializer ( ProxyContainer . class , new ProxyContainerDeserializer ( ) ) ; <nl> - mapper . registerModule ( textContainerModule ) ; <nl> - mapper . registerModule ( proxyContainerModule ) ; <nl> + this . reader = new CollectionReader ( textContainerModule , proxyContainerModule ) ; <nl> } <nl> <nl> public HttpServer parseServer ( InputStream is , Optional < Integer > port , MocoConfig . . . configs ) { <nl> - return createHttpServer ( readSessions ( is ) , port , configs ) ; <nl> - } <nl> - <nl> - private ImmutableList < SessionSetting > readSessions ( InputStream is ) { <nl> - try { <nl> - List < SessionSetting > sessionSettings = mapper . readValue ( is , factory . constructCollectionType ( List . class , SessionSetting . class ) ) ; <nl> - return copyOf ( sessionSettings ) ; <nl> - } catch ( UnrecognizedPropertyException e ) { <nl> - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> - } catch ( JsonMappingException e ) { <nl> - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> - throw new RuntimeException ( e ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return createHttpServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; <nl> } <nl> <nl> private HttpServer createHttpServer ( ImmutableList < SessionSetting > sessionSettings , Optional < Integer > port , MocoConfig . . . configs ) {

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index 7d92224 . . fefe6b7 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 2 , 14 + 2 , 29 @ @ package com . github . dreamhead . moco . util ; 
 
 import com . fasterxml . jackson . core . JsonProcessingException ; 
 import com . fasterxml . jackson . core . type . TypeReference ; 
 + import com . fasterxml . jackson . databind . JsonMappingException ; 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 + import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 + import com . fasterxml . jackson . databind . type . CollectionType ; 
 + import com . fasterxml . jackson . databind . type . TypeFactory ; 
 import com . github . dreamhead . moco . MocoException ; 
 + import com . google . common . collect . ImmutableList ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . util . List ; 
 + 
 + import static com . google . common . collect . ImmutableList . copyOf ; 
 + import static com . google . common . io . Closeables . closeQuietly ; 
 + import static java . lang . String . format ; 
 
 public final class Jsons { 
 - private static ObjectMapper mapper = new ObjectMapper ( ) ; 
 + private static Logger logger = LoggerFactory . getLogger ( Jsons . class ) ; 
 + 
 + private final static TypeFactory factory = TypeFactory . defaultInstance ( ) ; 
 + private final static ObjectMapper mapper = new ObjectMapper ( ) ; 
 
 public static String toJson ( final Object value ) { 
 try { 
 @ @ - 51 , 6 + 66 , 24 @ @ public final class Jsons { 
 } 
 } 
 
 + public static < T > ImmutableList < T > toList ( final InputStream stream , final Class < T > elementClass ) { 
 + try { 
 + CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; 
 + List < T > sessionSettings = mapper . readValue ( stream , type ) ; 
 + return copyOf ( sessionSettings ) ; 
 + } catch ( UnrecognizedPropertyException e ) { 
 + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; 
 + throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 + } catch ( JsonMappingException e ) { 
 + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 + throw new RuntimeException ( e ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } finally { 
 + closeQuietly ( stream ) ; 
 + } 
 + } 
 + 
 private Jsons ( ) { 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java 
 index 457c402 . . 8409fea 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / BaseParser . java 
 @ @ - 3 , 9 + 3 , 9 @ @ package com . github . dreamhead . moco . parser ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . Server ; 
 import com . github . dreamhead . moco . parser . model . SessionSetting ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableList ; 
 - import com . google . common . io . Closeables ; 
 
 import java . io . InputStream ; 
 
 @ @ - 13 , 18 + 13 , 9 @ @ public abstract class BaseParser < T extends Server > implements Parser < T > { 
 protected abstract T createServer ( final ImmutableList < SessionSetting > read , 
 final Optional < Integer > port , final MocoConfig . . . configs ) ; 
 
 - private final CollectionReader reader ; 
 - 
 - protected BaseParser ( ) { 
 - this . reader = new CollectionReader ( ) ; 
 - } 
 - 
 public T parseServer ( final InputStream is , final Optional < Integer > port , 
 final MocoConfig . . . configs ) { 
 - try { 
 - return createServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; 
 - } finally { 
 - Closeables . closeQuietly ( is ) ; 
 - } 
 + ImmutableList < SessionSetting > settings = Jsons . toList ( is , SessionSetting . class ) ; 
 + return createServer ( settings , port , configs ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 deleted file mode 100644 
 index 21f9a52 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 + + + / dev / null 
 @ @ - 1 , 51 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . parser ; 
 - 
 - import com . fasterxml . jackson . databind . JsonMappingException ; 
 - import com . fasterxml . jackson . databind . Module ; 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 - import com . fasterxml . jackson . databind . type . CollectionType ; 
 - import com . fasterxml . jackson . databind . type . TypeFactory ; 
 - import com . github . dreamhead . moco . HttpServer ; 
 - import com . google . common . collect . ImmutableList ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - import java . util . List ; 
 - 
 - import static com . google . common . collect . ImmutableList . copyOf ; 
 - import static com . google . common . io . Closeables . closeQuietly ; 
 - import static java . lang . String . format ; 
 - 
 - public class CollectionReader { 
 - private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; 
 - 
 - private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; 
 - 
 - public CollectionReader ( final Module . . . modules ) { 
 - for ( Module module : modules ) { 
 - mapper . registerModule ( module ) ; 
 - } 
 - } 
 - 
 - public < T > ImmutableList < T > read ( final InputStream is , final Class < T > elementClass ) { 
 - try { 
 - CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; 
 - List < T > sessionSettings = mapper . readValue ( is , type ) ; 
 - return copyOf ( sessionSettings ) ; 
 - } catch ( UnrecognizedPropertyException e ) { 
 - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; 
 - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 - } catch ( JsonMappingException e ) { 
 - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 - throw new RuntimeException ( e ) ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } finally { 
 - closeQuietly ( is ) ; 
 - } 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 index 3bcc893 . . a56b8ab 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 @ @ - 1 , 14 + 1 , 13 @ @ 
 package com . github . dreamhead . moco . parser ; 
 
 import com . github . dreamhead . moco . parser . model . GlobalSetting ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . collect . ImmutableList ; 
 
 import java . io . InputStream ; 
 
 public class GlobalSettingParser { 
 - private final CollectionReader reader = new CollectionReader ( ) ; 
 - 
 public ImmutableList < GlobalSetting > parse ( final InputStream is ) { 
 - return reader . read ( is , GlobalSetting . class ) ; 
 + return Jsons . toList ( is , GlobalSetting . class ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index 3f22445 . . 19ba781 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 8 , 3 + 8 , 4 @ @ out 
 reports 
 . DS _ Store 
 . idea 
 + . gradletasknamecache 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 new file mode 100644 
 index 0000000 . . 5765938 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / CollectionReader . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . github . dreamhead . moco . parser ; 
 + 
 + import com . fasterxml . jackson . databind . JsonMappingException ; 
 + import com . fasterxml . jackson . databind . Module ; 
 + import com . fasterxml . jackson . databind . ObjectMapper ; 
 + import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 + import com . fasterxml . jackson . databind . type . CollectionType ; 
 + import com . fasterxml . jackson . databind . type . TypeFactory ; 
 + import com . github . dreamhead . moco . HttpServer ; 
 + import com . google . common . collect . ImmutableList ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . util . List ; 
 + 
 + import static com . google . common . collect . ImmutableList . copyOf ; 
 + import static java . lang . String . format ; 
 + 
 + public class CollectionReader { 
 + private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; 
 + 
 + private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 + private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; 
 + 
 + public CollectionReader ( Module . . . modules ) { 
 + for ( Module module : modules ) { 
 + mapper . registerModule ( module ) ; 
 + } 
 + } 
 + 
 + public < T > ImmutableList < T > read ( InputStream is , Class < T > elementClass ) { 
 + try { 
 + CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; 
 + List < T > sessionSettings = mapper . readValue ( is , type ) ; 
 + return copyOf ( sessionSettings ) ; 
 + } catch ( UnrecognizedPropertyException e ) { 
 + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; 
 + throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 + } catch ( JsonMappingException e ) { 
 + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 + throw new RuntimeException ( e ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 index 8c7e29b . . 8b480de 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / GlobalSettingParser . java 
 @ @ - 1 , 34 + 1 , 14 @ @ 
 package com . github . dreamhead . moco . parser ; 
 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 - import com . fasterxml . jackson . databind . type . TypeFactory ; 
 import com . github . dreamhead . moco . parser . model . GlobalSetting ; 
 import com . google . common . collect . ImmutableList ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 
 - import java . io . IOException ; 
 import java . io . InputStream ; 
 - import java . util . List ; 
 - 
 - import static com . google . common . collect . ImmutableList . copyOf ; 
 - import static java . lang . String . format ; 
 
 public class GlobalSettingParser { 
 - private static Logger logger = LoggerFactory . getLogger ( GlobalSettingParser . class ) ; 
 - private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; 
 + private final CollectionReader reader = new CollectionReader ( ) ; 
 
 public ImmutableList < GlobalSetting > parse ( InputStream is ) { 
 - try { 
 - List < GlobalSetting > settings = mapper . readValue ( is , factory . constructCollectionType ( List . class , GlobalSetting . class ) ) ; 
 - return copyOf ( settings ) ; 
 - } catch ( UnrecognizedPropertyException upe ) { 
 - logger . info ( " Unrecognized field : { } " , upe . getMessage ( ) ) ; 
 - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , upe . getPropertyName ( ) ) ) ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return reader . read ( is , GlobalSetting . class ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 index 4834fdb . . 4dfad59 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 @ @ - 1 , 12 + 1 , 8 @ @ 
 package com . github . dreamhead . moco . parser ; 
 
 import com . fasterxml . jackson . core . Version ; 
 - import com . fasterxml . jackson . databind . JsonMappingException ; 
 import com . fasterxml . jackson . databind . Module ; 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 - import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 import com . fasterxml . jackson . databind . module . SimpleModule ; 
 - import com . fasterxml . jackson . databind . type . TypeFactory ; 
 import com . github . dreamhead . moco . HttpServer ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 @ @ - 16 , 18 + 12 , 11 @ @ import com . google . common . collect . ImmutableList ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import java . io . IOException ; 
 import java . io . InputStream ; 
 - import java . util . List ; 
 - 
 - import static com . google . common . collect . ImmutableList . copyOf ; 
 - import static java . lang . String . format ; 
 
 public class HttpServerParser { 
 private static Logger logger = LoggerFactory . getLogger ( HttpServer . class ) ; 
 - 
 - private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 - private final TypeFactory factory = TypeFactory . defaultInstance ( ) ; 
 + private CollectionReader reader ; 
 
 public HttpServerParser ( ) { 
 Module textContainerModule = new SimpleModule ( " TextContainerModule " , 
 @ @ - 36 , 27 + 25 , 11 @ @ public class HttpServerParser { 
 Module proxyContainerModule = new SimpleModule ( " ProxyContainerModule " , 
 new Version ( 1 , 0 , 0 , null , null , null ) ) 
 . addDeserializer ( ProxyContainer . class , new ProxyContainerDeserializer ( ) ) ; 
 - mapper . registerModule ( textContainerModule ) ; 
 - mapper . registerModule ( proxyContainerModule ) ; 
 + this . reader = new CollectionReader ( textContainerModule , proxyContainerModule ) ; 
 } 
 
 public HttpServer parseServer ( InputStream is , Optional < Integer > port , MocoConfig . . . configs ) { 
 - return createHttpServer ( readSessions ( is ) , port , configs ) ; 
 - } 
 - 
 - private ImmutableList < SessionSetting > readSessions ( InputStream is ) { 
 - try { 
 - List < SessionSetting > sessionSettings = mapper . readValue ( is , factory . constructCollectionType ( List . class , SessionSetting . class ) ) ; 
 - return copyOf ( sessionSettings ) ; 
 - } catch ( UnrecognizedPropertyException e ) { 
 - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; 
 - throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 - } catch ( JsonMappingException e ) { 
 - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 - throw new RuntimeException ( e ) ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return createHttpServer ( reader . read ( is , SessionSetting . class ) , port , configs ) ; 
 } 
 
 private HttpServer createHttpServer ( ImmutableList < SessionSetting > sessionSettings , Optional < Integer > port , MocoConfig . . . configs ) {
