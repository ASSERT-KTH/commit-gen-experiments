BLEU SCORE: 0.07160476144948855

TEST MSG: used runtime exception in register
GENERATED MSG: renamed stop in watcher service to unregister

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 497310c . . ec2515c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 1 , 10 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> - import com . github . dreamhead . moco . MocoException ; <nl> import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> - import java . io . IOException ; <nl> <nl> public class Java7Watcher implements Watcher { <nl> private final WatcherService service ; <nl> @ @ - 19 , 11 + 17 , 7 @ @ public class Java7Watcher implements Watcher { <nl> <nl> @ Override <nl> public void start ( ) { <nl> - try { <nl> - service . register ( file , listener ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> + service . register ( file , listener ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 202bd33 . . 5904fc0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 106 , 15 + 106 , 19 @ @ public class WatcherService { <nl> } <nl> } <nl> <nl> - public void register ( final File file , final Function < File , Void > listener ) throws IOException { <nl> - Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> - WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> - Path path = file . toPath ( ) ; <nl> - keys . put ( key , path ) ; <nl> - listeners . put ( path , listener ) ; <nl> - directoryToFiles . put ( directory , path ) ; <nl> - directoryToKey . put ( directory , key ) ; <nl> - idle ( 800 , TimeUnit . MILLISECONDS ) ; <nl> + public void register ( final File file , final Function < File , Void > listener ) { <nl> + try { <nl> + Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> + Path path = file . toPath ( ) ; <nl> + keys . put ( key , path ) ; <nl> + listeners . put ( path , listener ) ; <nl> + directoryToFiles . put ( directory , path ) ; <nl> + directoryToKey . put ( directory , key ) ; <nl> + idle ( 800 , TimeUnit . MILLISECONDS ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> } <nl> <nl> public void unregister ( final File file ) {
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index a3ac6c4 . . 497310c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 28 , 6 + 28 , 6 @ @ public class Java7Watcher implements Watcher { <nl> <nl> @ Override <nl> public void stop ( ) { <nl> - service . stop ( file ) ; <nl> + service . unregister ( file ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index c44afc9 . . 06a6547 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 47 , 7 + 47 , 6 @ @ public class WatcherService { <nl> } <nl> <nl> private void doStart ( ) throws IOException { <nl> - System . out . println ( " Start a service " ) ; <nl> this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; <nl> this . running = true ; <nl> result = executor . submit ( new Runnable ( ) { <nl> @ @ - 119 , 7 + 118 , 7 @ @ public class WatcherService { <nl> idle ( 800 , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> - public void stop ( final File file ) { <nl> + public void unregister ( final File file ) { <nl> Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> Path path = file . toPath ( ) ; <nl> if ( ! directoryToFiles . containsEntry ( directory , path ) ) {

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 index 497310c . . ec2515c 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 @ @ - 1 , 10 + 1 , 8 @ @ 
 package com . github . dreamhead . moco . runner . watcher ; 
 
 - import com . github . dreamhead . moco . MocoException ; 
 import com . google . common . base . Function ; 
 
 import java . io . File ; 
 - import java . io . IOException ; 
 
 public class Java7Watcher implements Watcher { 
 private final WatcherService service ; 
 @ @ - 19 , 11 + 17 , 7 @ @ public class Java7Watcher implements Watcher { 
 
 @ Override 
 public void start ( ) { 
 - try { 
 - service . register ( file , listener ) ; 
 - } catch ( IOException e ) { 
 - throw new MocoException ( e ) ; 
 - } 
 + service . register ( file , listener ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 index 202bd33 . . 5904fc0 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 106 , 15 + 106 , 19 @ @ public class WatcherService { 
 } 
 } 
 
 - public void register ( final File file , final Function < File , Void > listener ) throws IOException { 
 - Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 - WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; 
 - Path path = file . toPath ( ) ; 
 - keys . put ( key , path ) ; 
 - listeners . put ( path , listener ) ; 
 - directoryToFiles . put ( directory , path ) ; 
 - directoryToKey . put ( directory , key ) ; 
 - idle ( 800 , TimeUnit . MILLISECONDS ) ; 
 + public void register ( final File file , final Function < File , Void > listener ) { 
 + try { 
 + Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 + WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; 
 + Path path = file . toPath ( ) ; 
 + keys . put ( key , path ) ; 
 + listeners . put ( path , listener ) ; 
 + directoryToFiles . put ( directory , path ) ; 
 + directoryToKey . put ( directory , key ) ; 
 + idle ( 800 , TimeUnit . MILLISECONDS ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 } 
 
 public void unregister ( final File file ) {

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 index a3ac6c4 . . 497310c 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 @ @ - 28 , 6 + 28 , 6 @ @ public class Java7Watcher implements Watcher { 
 
 @ Override 
 public void stop ( ) { 
 - service . stop ( file ) ; 
 + service . unregister ( file ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 index c44afc9 . . 06a6547 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 47 , 7 + 47 , 6 @ @ public class WatcherService { 
 } 
 
 private void doStart ( ) throws IOException { 
 - System . out . println ( " Start a service " ) ; 
 this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; 
 this . running = true ; 
 result = executor . submit ( new Runnable ( ) { 
 @ @ - 119 , 7 + 118 , 7 @ @ public class WatcherService { 
 idle ( 800 , TimeUnit . MILLISECONDS ) ; 
 } 
 
 - public void stop ( final File file ) { 
 + public void unregister ( final File file ) { 
 Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 Path path = file . toPath ( ) ; 
 if ( ! directoryToFiles . containsEntry ( directory , path ) ) {
