BLEU SCORE: 0.018738883683389617

TEST MSG: replaced new url with url utility in abstract proxy response handler
GENERATED MSG: moved argument check to precondition class

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index bcda353 . . fd2086b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import java . net . URL ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . DefaultHttpResponse . newResponse ; <nl> + import static com . github . dreamhead . moco . util . URLs . toUrl ; <nl> import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . net . HttpHeaders . CONTENT _ LENGTH ; <nl> @ @ - 240 , 8 + 241 , 8 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> try { <nl> - return of ( new URL ( encoder . toString ( ) ) ) ; <nl> - } catch ( MalformedURLException e ) { <nl> + return of ( toUrl ( encoder . toString ( ) ) ) ; <nl> + } catch ( IllegalArgumentException e ) { <nl> return absent ( ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index ed65302 . . b1ad852 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> - import com . google . common . base . Strings ; <nl> import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import io . netty . handler . codec . http . HttpHeaders ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ import java . net . URL ; <nl> import static com . github . dreamhead . moco . extractor . Extractors . extractor ; <nl> import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . * ; <nl> + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> @ @ - 439 , 14 + 439 , 6 @ @ public class Moco { <nl> } <nl> } <nl> <nl> - public static String checkNotNullOrEmpty ( final String reference , final Object errorMessage ) { <nl> - if ( Strings . isNullOrEmpty ( reference ) ) { <nl> - throw new NullPointerException ( String . valueOf ( errorMessage ) ) ; <nl> - } <nl> - <nl> - return reference ; <nl> - } <nl> - <nl> private Moco ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java <nl> index 56f94a9 . . 4e4b142 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler . proxy ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . checkNotNullOrEmpty ; <nl> + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . github . dreamhead . moco . util . URLs . join ; <nl> import static com . github . dreamhead . moco . util . URLs . toBase ; <nl> import static com . google . common . base . Strings . nullToEmpty ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Preconditions . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Preconditions . java <nl> new file mode 100644 <nl> index 0000000 . . 7431aa3 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Preconditions . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import static com . google . common . base . Strings . isNullOrEmpty ; <nl> + <nl> + public class Preconditions { <nl> + public static String checkNotNullOrEmpty ( final String reference , final Object errorMessage ) { <nl> + if ( isNullOrEmpty ( reference ) ) { <nl> + throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; <nl> + } <nl> + <nl> + return reference ; <nl> + } <nl> + <nl> + private Preconditions ( ) { } <nl> + }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index bcda353 . . fd2086b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import java . net . URL ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . model . DefaultHttpResponse . newResponse ; 
 + import static com . github . dreamhead . moco . util . URLs . toUrl ; 
 import static com . google . common . base . Optional . absent ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . net . HttpHeaders . CONTENT _ LENGTH ; 
 @ @ - 240 , 8 + 241 , 8 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 try { 
 - return of ( new URL ( encoder . toString ( ) ) ) ; 
 - } catch ( MalformedURLException e ) { 
 + return of ( toUrl ( encoder . toString ( ) ) ) ; 
 + } catch ( IllegalArgumentException e ) { 
 return absent ( ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index ed65302 . . b1ad852 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 - import com . google . common . base . Strings ; 
 import com . google . common . collect . FluentIterable ; 
 import com . google . common . collect . ImmutableMap ; 
 import io . netty . handler . codec . http . HttpHeaders ; 
 @ @ - 35 , 6 + 34 , 7 @ @ import java . net . URL ; 
 import static com . github . dreamhead . moco . extractor . Extractors . extractor ; 
 import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . * ; 
 + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 @ @ - 439 , 14 + 439 , 6 @ @ public class Moco { 
 } 
 } 
 
 - public static String checkNotNullOrEmpty ( final String reference , final Object errorMessage ) { 
 - if ( Strings . isNullOrEmpty ( reference ) ) { 
 - throw new NullPointerException ( String . valueOf ( errorMessage ) ) ; 
 - } 
 - 
 - return reference ; 
 - } 
 - 
 private Moco ( ) { 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java 
 index 56f94a9 . . 4e4b142 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / proxy / ProxyConfig . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . handler . proxy ; 
 
 - import static com . github . dreamhead . moco . Moco . checkNotNullOrEmpty ; 
 + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 import static com . github . dreamhead . moco . util . URLs . join ; 
 import static com . github . dreamhead . moco . util . URLs . toBase ; 
 import static com . google . common . base . Strings . nullToEmpty ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Preconditions . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Preconditions . java 
 new file mode 100644 
 index 0000000 . . 7431aa3 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Preconditions . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import static com . google . common . base . Strings . isNullOrEmpty ; 
 + 
 + public class Preconditions { 
 + public static String checkNotNullOrEmpty ( final String reference , final Object errorMessage ) { 
 + if ( isNullOrEmpty ( reference ) ) { 
 + throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; 
 + } 
 + 
 + return reference ; 
 + } 
 + 
 + private Preconditions ( ) { } 
 + }
