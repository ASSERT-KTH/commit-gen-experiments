BLEU SCORE: 0.10682175159905853

TEST MSG: fixed deprecation from netty upgrade
GENERATED MSG: applied netty http header

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index b8ca4e5 . . 76962b8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 15 , 9 + 15 , 9 @ @ import io . netty . buffer . Unpooled ; <nl> import io . netty . handler . codec . http . DefaultFullHttpResponse ; <nl> import io . netty . handler . codec . http . FullHttpRequest ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> - import io . netty . handler . codec . http . HttpHeaders ; <nl> import io . netty . handler . codec . http . HttpMethod ; <nl> import io . netty . handler . codec . http . HttpResponseStatus ; <nl> + import io . netty . handler . codec . http . HttpUtil ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> import org . apache . http . Header ; <nl> @ @ - 73 , 7 + 73 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> remoteRequest . setConfig ( config ) ; <nl> remoteRequest . setProtocolVersion ( createVersion ( request ) ) ; <nl> <nl> - long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; <nl> + long contentLength = HttpUtil . getContentLength ( request , - 1 ) ; <nl> if ( contentLength > 0 & & remoteRequest instanceof HttpEntityEnclosingRequest ) { <nl> HttpEntityEnclosingRequest entityRequest = ( HttpEntityEnclosingRequest ) remoteRequest ; <nl> entityRequest . setEntity ( createEntity ( request . content ( ) , contentLength ) ) ; <nl> @ @ - 83 , 7 + 83 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpRequestBase createRemoteRequest ( final FullHttpRequest request , final URL url ) { <nl> - HttpRequestBase remoteRequest = createBaseRequest ( url , request . getMethod ( ) ) ; <nl> + HttpRequestBase remoteRequest = createBaseRequest ( url , request . method ( ) ) ; <nl> for ( Map . Entry < String , String > entry : request . headers ( ) ) { <nl> if ( isRequestHeader ( entry ) ) { <nl> remoteRequest . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> @ @ - 98 , 7 + 98 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private org . apache . http . HttpVersion createVersion ( final FullHttpRequest request ) { <nl> - HttpVersion protocolVersion = request . getProtocolVersion ( ) ; <nl> + HttpVersion protocolVersion = request . protocolVersion ( ) ; <nl> return new org . apache . http . HttpVersion ( protocolVersion . majorVersion ( ) , protocolVersion . minorVersion ( ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> index 187a63d . . 8133272 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java <nl> @ @ - 17 , 10 + 17 , 10 @ @ import io . netty . handler . codec . http . HttpResponseStatus ; <nl> <nl> import static com . github . dreamhead . moco . model . DefaultMutableHttpResponse . newResponse ; <nl> import static io . netty . channel . ChannelHandler . Sharable ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . isContentLengthSet ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . isKeepAlive ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . setContentLength ; <nl> - import static io . netty . handler . codec . http . HttpHeaders . setKeepAlive ; <nl> + import static io . netty . handler . codec . http . HttpUtil . isContentLengthSet ; <nl> + import static io . netty . handler . codec . http . HttpUtil . isKeepAlive ; <nl> + import static io . netty . handler . codec . http . HttpUtil . setContentLength ; <nl> + import static io . netty . handler . codec . http . HttpUtil . setKeepAlive ; <nl> <nl> @ Sharable <nl> public class MocoHandler extends SimpleChannelInboundHandler < FullHttpRequest > { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index ab0fb09 . . 3765a6b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . buffer . Unpooled ; <nl> import io . netty . handler . codec . http . DefaultFullHttpRequest ; <nl> import io . netty . handler . codec . http . FullHttpRequest ; <nl> - import io . netty . handler . codec . http . HttpHeaders ; <nl> + import io . netty . handler . codec . http . HttpUtil ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> import io . netty . handler . codec . http . QueryStringDecoder ; <nl> import io . netty . handler . codec . http . QueryStringEncoder ; <nl> @ @ - 123 , 7 + 123 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> private static MessageContent toMessageContent ( final FullHttpRequest request ) { <nl> - long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; <nl> + long contentLength = HttpUtil . getContentLength ( request , - 1 ) ; <nl> if ( contentLength < = 0 ) { <nl> return content ( ) . build ( ) ; <nl> } <nl> @ @ - 132 , 13 + 132 , 13 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> public static HttpRequest newRequest ( final FullHttpRequest request ) { <nl> - QueryStringDecoder decoder = new QueryStringDecoder ( request . getUri ( ) ) ; <nl> + QueryStringDecoder decoder = new QueryStringDecoder ( request . uri ( ) ) ; <nl> ImmutableMap < String , String [ ] > queries = toQueries ( decoder ) ; <nl> <nl> return builder ( ) <nl> - . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) <nl> + . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> . withHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> - . withMethod ( HttpMethod . valueOf ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> + . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> . withContent ( toMessageContent ( request ) ) <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 79e8b39 . . 08b6b01 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 35 , 8 + 35 , 8 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> return builder ( ) <nl> - . withVersion ( HttpProtocolVersion . versionOf ( response . getProtocolVersion ( ) . text ( ) ) ) <nl> - . withStatus ( response . getStatus ( ) . code ( ) ) <nl> + . withVersion ( HttpProtocolVersion . versionOf ( response . protocolVersion ( ) . text ( ) ) ) <nl> + . withStatus ( response . status ( ) . code ( ) ) <nl> . withHeaders ( headerBuilder . build ( ) ) <nl> . withContent ( content ( ) <nl> . withContent ( new ByteBufInputStream ( response . content ( ) ) )
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 1862b2a . . a3f2ac6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 4 , 9 + 4 , 13 @ @ import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . Unpooled ; <nl> import io . netty . handler . codec . http . FullHttpRequest ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> + import io . netty . handler . codec . http . HttpHeaders ; <nl> + <nl> + import static io . netty . handler . codec . http . HttpHeaders . Names . * ; <nl> + import static io . netty . handler . codec . http . HttpHeaders . addHeader ; <nl> <nl> public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { <nl> - private final ContentTypeDetector detector = new ContentTypeDetector ( ) ; <nl> + private final HeaderDetector detector = new HeaderDetector ( ) ; <nl> <nl> protected abstract void writeContentResponse ( FullHttpRequest request , ByteBuf buffer ) ; <nl> <nl> @ @ - 15 , 9 + 19 , 9 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan <nl> ByteBuf buffer = Unpooled . buffer ( ) ; <nl> writeContentResponse ( request , buffer ) ; <nl> response . content ( ) . writeBytes ( buffer ) ; <nl> - response . headers ( ) . set ( " Content - Length " , buffer . writerIndex ( ) ) ; <nl> + addHeader ( response , CONTENT _ LENGTH , buffer . writerIndex ( ) ) ; <nl> if ( ! detector . hasContentType ( response ) ) { <nl> - response . headers ( ) . set ( " Content - Type " , getContentType ( request ) ) ; <nl> + addHeader ( response , CONTENT _ TYPE , getContentType ( request ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentTypeDetector . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentTypeDetector . java <nl> deleted file mode 100644 <nl> index 5640add . . 0000000 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentTypeDetector . java <nl> + + + / dev / null <nl> @ @ - 1 , 13 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . handler ; <nl> - <nl> - import io . netty . handler . codec . http . HttpResponse ; <nl> - <nl> - public class ContentTypeDetector { <nl> - public boolean hasContentType ( HttpResponse response ) { <nl> - return hasHeader ( response , " Content - Type " ) ; <nl> - } <nl> - <nl> - public boolean hasHeader ( HttpResponse response , String headerName ) { <nl> - return response . headers ( ) . contains ( headerName ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderDetector . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderDetector . java <nl> new file mode 100644 <nl> index 0000000 . . 46a6020 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderDetector . java <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + package com . github . dreamhead . moco . handler ; <nl> + <nl> + import io . netty . handler . codec . http . HttpHeaders ; <nl> + import io . netty . handler . codec . http . HttpResponse ; <nl> + <nl> + public class HeaderDetector { <nl> + public boolean hasContentType ( HttpResponse response ) { <nl> + return hasHeader ( response , HttpHeaders . Names . CONTENT _ TYPE ) ; <nl> + } <nl> + <nl> + public boolean hasHeader ( HttpResponse response , String headerName ) { <nl> + return response . headers ( ) . contains ( headerName ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java <nl> index 8d0c4c9 . . f897c48 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import io . netty . handler . codec . http . * ; <nl> <nl> public class HeaderResponseHandler implements ResponseHandler { <nl> - private final ContentTypeDetector detector = new ContentTypeDetector ( ) ; <nl> + private final HeaderDetector detector = new HeaderDetector ( ) ; <nl> <nl> private final String name ; <nl> private final Resource resource ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index b8ca4e5 . . 76962b8 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 15 , 9 + 15 , 9 @ @ import io . netty . buffer . Unpooled ; 
 import io . netty . handler . codec . http . DefaultFullHttpResponse ; 
 import io . netty . handler . codec . http . FullHttpRequest ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 - import io . netty . handler . codec . http . HttpHeaders ; 
 import io . netty . handler . codec . http . HttpMethod ; 
 import io . netty . handler . codec . http . HttpResponseStatus ; 
 + import io . netty . handler . codec . http . HttpUtil ; 
 import io . netty . handler . codec . http . HttpVersion ; 
 import io . netty . handler . codec . http . QueryStringEncoder ; 
 import org . apache . http . Header ; 
 @ @ - 73 , 7 + 73 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 remoteRequest . setConfig ( config ) ; 
 remoteRequest . setProtocolVersion ( createVersion ( request ) ) ; 
 
 - long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; 
 + long contentLength = HttpUtil . getContentLength ( request , - 1 ) ; 
 if ( contentLength > 0 & & remoteRequest instanceof HttpEntityEnclosingRequest ) { 
 HttpEntityEnclosingRequest entityRequest = ( HttpEntityEnclosingRequest ) remoteRequest ; 
 entityRequest . setEntity ( createEntity ( request . content ( ) , contentLength ) ) ; 
 @ @ - 83 , 7 + 83 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 private HttpRequestBase createRemoteRequest ( final FullHttpRequest request , final URL url ) { 
 - HttpRequestBase remoteRequest = createBaseRequest ( url , request . getMethod ( ) ) ; 
 + HttpRequestBase remoteRequest = createBaseRequest ( url , request . method ( ) ) ; 
 for ( Map . Entry < String , String > entry : request . headers ( ) ) { 
 if ( isRequestHeader ( entry ) ) { 
 remoteRequest . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 @ @ - 98 , 7 + 98 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 private org . apache . http . HttpVersion createVersion ( final FullHttpRequest request ) { 
 - HttpVersion protocolVersion = request . getProtocolVersion ( ) ; 
 + HttpVersion protocolVersion = request . protocolVersion ( ) ; 
 return new org . apache . http . HttpVersion ( protocolVersion . majorVersion ( ) , protocolVersion . minorVersion ( ) ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java 
 index 187a63d . . 8133272 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHandler . java 
 @ @ - 17 , 10 + 17 , 10 @ @ import io . netty . handler . codec . http . HttpResponseStatus ; 
 
 import static com . github . dreamhead . moco . model . DefaultMutableHttpResponse . newResponse ; 
 import static io . netty . channel . ChannelHandler . Sharable ; 
 - import static io . netty . handler . codec . http . HttpHeaders . isContentLengthSet ; 
 - import static io . netty . handler . codec . http . HttpHeaders . isKeepAlive ; 
 - import static io . netty . handler . codec . http . HttpHeaders . setContentLength ; 
 - import static io . netty . handler . codec . http . HttpHeaders . setKeepAlive ; 
 + import static io . netty . handler . codec . http . HttpUtil . isContentLengthSet ; 
 + import static io . netty . handler . codec . http . HttpUtil . isKeepAlive ; 
 + import static io . netty . handler . codec . http . HttpUtil . setContentLength ; 
 + import static io . netty . handler . codec . http . HttpUtil . setKeepAlive ; 
 
 @ Sharable 
 public class MocoHandler extends SimpleChannelInboundHandler < FullHttpRequest > { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index ab0fb09 . . 3765a6b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 17 , 7 + 17 , 7 @ @ import io . netty . buffer . ByteBufInputStream ; 
 import io . netty . buffer . Unpooled ; 
 import io . netty . handler . codec . http . DefaultFullHttpRequest ; 
 import io . netty . handler . codec . http . FullHttpRequest ; 
 - import io . netty . handler . codec . http . HttpHeaders ; 
 + import io . netty . handler . codec . http . HttpUtil ; 
 import io . netty . handler . codec . http . HttpVersion ; 
 import io . netty . handler . codec . http . QueryStringDecoder ; 
 import io . netty . handler . codec . http . QueryStringEncoder ; 
 @ @ - 123 , 7 + 123 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 } 
 
 private static MessageContent toMessageContent ( final FullHttpRequest request ) { 
 - long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; 
 + long contentLength = HttpUtil . getContentLength ( request , - 1 ) ; 
 if ( contentLength < = 0 ) { 
 return content ( ) . build ( ) ; 
 } 
 @ @ - 132 , 13 + 132 , 13 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 } 
 
 public static HttpRequest newRequest ( final FullHttpRequest request ) { 
 - QueryStringDecoder decoder = new QueryStringDecoder ( request . getUri ( ) ) ; 
 + QueryStringDecoder decoder = new QueryStringDecoder ( request . uri ( ) ) ; 
 ImmutableMap < String , String [ ] > queries = toQueries ( decoder ) ; 
 
 return builder ( ) 
 - . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) 
 + . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) 
 . withHeaders ( collectHeaders ( request . headers ( ) ) ) 
 - . withMethod ( HttpMethod . valueOf ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) ) 
 + . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) 
 . withUri ( decoder . path ( ) ) 
 . withQueries ( queries ) 
 . withContent ( toMessageContent ( request ) ) 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index 79e8b39 . . 08b6b01 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 35 , 8 + 35 , 8 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo 
 } 
 
 return builder ( ) 
 - . withVersion ( HttpProtocolVersion . versionOf ( response . getProtocolVersion ( ) . text ( ) ) ) 
 - . withStatus ( response . getStatus ( ) . code ( ) ) 
 + . withVersion ( HttpProtocolVersion . versionOf ( response . protocolVersion ( ) . text ( ) ) ) 
 + . withStatus ( response . status ( ) . code ( ) ) 
 . withHeaders ( headerBuilder . build ( ) ) 
 . withContent ( content ( ) 
 . withContent ( new ByteBufInputStream ( response . content ( ) ) )

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 index 1862b2a . . a3f2ac6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 @ @ - 4 , 9 + 4 , 13 @ @ import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . Unpooled ; 
 import io . netty . handler . codec . http . FullHttpRequest ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 + import io . netty . handler . codec . http . HttpHeaders ; 
 + 
 + import static io . netty . handler . codec . http . HttpHeaders . Names . * ; 
 + import static io . netty . handler . codec . http . HttpHeaders . addHeader ; 
 
 public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { 
 - private final ContentTypeDetector detector = new ContentTypeDetector ( ) ; 
 + private final HeaderDetector detector = new HeaderDetector ( ) ; 
 
 protected abstract void writeContentResponse ( FullHttpRequest request , ByteBuf buffer ) ; 
 
 @ @ - 15 , 9 + 19 , 9 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan 
 ByteBuf buffer = Unpooled . buffer ( ) ; 
 writeContentResponse ( request , buffer ) ; 
 response . content ( ) . writeBytes ( buffer ) ; 
 - response . headers ( ) . set ( " Content - Length " , buffer . writerIndex ( ) ) ; 
 + addHeader ( response , CONTENT _ LENGTH , buffer . writerIndex ( ) ) ; 
 if ( ! detector . hasContentType ( response ) ) { 
 - response . headers ( ) . set ( " Content - Type " , getContentType ( request ) ) ; 
 + addHeader ( response , CONTENT _ TYPE , getContentType ( request ) ) ; 
 } 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentTypeDetector . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentTypeDetector . java 
 deleted file mode 100644 
 index 5640add . . 0000000 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentTypeDetector . java 
 + + + / dev / null 
 @ @ - 1 , 13 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . handler ; 
 - 
 - import io . netty . handler . codec . http . HttpResponse ; 
 - 
 - public class ContentTypeDetector { 
 - public boolean hasContentType ( HttpResponse response ) { 
 - return hasHeader ( response , " Content - Type " ) ; 
 - } 
 - 
 - public boolean hasHeader ( HttpResponse response , String headerName ) { 
 - return response . headers ( ) . contains ( headerName ) ; 
 - } 
 - } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderDetector . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderDetector . java 
 new file mode 100644 
 index 0000000 . . 46a6020 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderDetector . java 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + package com . github . dreamhead . moco . handler ; 
 + 
 + import io . netty . handler . codec . http . HttpHeaders ; 
 + import io . netty . handler . codec . http . HttpResponse ; 
 + 
 + public class HeaderDetector { 
 + public boolean hasContentType ( HttpResponse response ) { 
 + return hasHeader ( response , HttpHeaders . Names . CONTENT _ TYPE ) ; 
 + } 
 + 
 + public boolean hasHeader ( HttpResponse response , String headerName ) { 
 + return response . headers ( ) . contains ( headerName ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java 
 index 8d0c4c9 . . f897c48 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / HeaderResponseHandler . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . resource . Resource ; 
 import io . netty . handler . codec . http . * ; 
 
 public class HeaderResponseHandler implements ResponseHandler { 
 - private final ContentTypeDetector detector = new ContentTypeDetector ( ) ; 
 + private final HeaderDetector detector = new HeaderDetector ( ) ; 
 
 private final String name ; 
 private final Resource resource ;
