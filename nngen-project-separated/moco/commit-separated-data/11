BLEU SCORE: 0.08116697886877475

TEST MSG: removed optional from file log writer
GENERATED MSG: cleaned up log api implementation

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f442795 . . abb8d77 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 174 , 11 + 174 , 11 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoMonitor log ( final String filename ) { <nl> - return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; <nl> + return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , null ) ) ; <nl> } <nl> <nl> public static MocoMonitor log ( final String filename , final Charset charset ) { <nl> - return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; <nl> + return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestMatcher by ( final String content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 55f5810 . . 104cc8b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 76 , 7 + 76 , 7 @ @ public final class ApiUtils { <nl> return new DefaultFailoverExecutor ( new File ( file ) ) ; <nl> } <nl> <nl> - public static LogWriter fileLogWriter ( final String filename , final Optional < Charset > charset ) { <nl> + public static LogWriter fileLogWriter ( final String filename , final Charset charset ) { <nl> return new FileLogWriter ( filename , charset ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> index b1d2392 . . 08f603f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . monitor ; <nl> <nl> import com . github . dreamhead . moco . MocoException ; <nl> - import com . google . common . base . Optional ; <nl> import com . google . common . io . Files ; <nl> <nl> import java . io . File ; <nl> @ @ - 9 , 17 + 8 , 17 @ @ import java . nio . charset . Charset ; <nl> <nl> public final class FileLogWriter implements LogWriter { <nl> private final File file ; <nl> - private Optional < Charset > charset ; <nl> + private final Charset charset ; <nl> <nl> - public FileLogWriter ( final String filename , final Optional < Charset > charset ) { <nl> + public FileLogWriter ( final String filename , final Charset charset ) { <nl> this . file = new File ( filename ) ; <nl> - this . charset = charset ; <nl> + this . charset = ( charset ! = null ? charset : Charset . defaultCharset ( ) ) ; <nl> } <nl> <nl> @ Override <nl> public void write ( final String content ) { <nl> try { <nl> - Files . append ( content , file , charset . or ( Charset . defaultCharset ( ) ) ) ; <nl> + Files . append ( content , file , charset ) ; <nl> } catch ( Exception e ) { <nl> throw new MocoException ( e ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 43478eb . . bf6ff0f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ import static com . github . dreamhead . moco . extractor . Extractors . extractor ; <nl> import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . * ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> - import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> @ @ - 132 , 15 + 131 , 23 @ @ public class Moco { <nl> } <nl> <nl> public static MocoMonitor log ( ) { <nl> - return new LogMonitor ( new DefaultLogFormatter ( ) , new StdLogWriter ( ) ) ; <nl> + return log ( new StdLogWriter ( ) ) ; <nl> } <nl> <nl> public static MocoMonitor log ( final String filename ) { <nl> - return new LogMonitor ( new DefaultLogFormatter ( ) , new FileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; <nl> + return log ( fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; <nl> } <nl> <nl> public static MocoMonitor log ( final String filename , final Charset charset ) { <nl> - return new LogMonitor ( new DefaultLogFormatter ( ) , new FileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; <nl> + return log ( fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; <nl> + } <nl> + <nl> + private static LogWriter fileLogWriter ( final String filename , final Optional < Charset > charset ) { <nl> + return new FileLogWriter ( filename , charset ) ; <nl> + } <nl> + <nl> + private static MocoMonitor log ( final LogWriter writer ) { <nl> + return new LogMonitor ( new DefaultLogFormatter ( ) , writer ) ; <nl> } <nl> <nl> public static RequestMatcher by ( final String content ) {

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index f442795 . . abb8d77 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 174 , 11 + 174 , 11 @ @ public final class Moco { 
 } 
 
 public static MocoMonitor log ( final String filename ) { 
 - return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; 
 + return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , null ) ) ; 
 } 
 
 public static MocoMonitor log ( final String filename , final Charset charset ) { 
 - return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; 
 + return ApiUtils . log ( ApiUtils . fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 public static RequestMatcher by ( final String content ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 index 55f5810 . . 104cc8b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 76 , 7 + 76 , 7 @ @ public final class ApiUtils { 
 return new DefaultFailoverExecutor ( new File ( file ) ) ; 
 } 
 
 - public static LogWriter fileLogWriter ( final String filename , final Optional < Charset > charset ) { 
 + public static LogWriter fileLogWriter ( final String filename , final Charset charset ) { 
 return new FileLogWriter ( filename , charset ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java 
 index b1d2392 . . 08f603f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileLogWriter . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . monitor ; 
 
 import com . github . dreamhead . moco . MocoException ; 
 - import com . google . common . base . Optional ; 
 import com . google . common . io . Files ; 
 
 import java . io . File ; 
 @ @ - 9 , 17 + 8 , 17 @ @ import java . nio . charset . Charset ; 
 
 public final class FileLogWriter implements LogWriter { 
 private final File file ; 
 - private Optional < Charset > charset ; 
 + private final Charset charset ; 
 
 - public FileLogWriter ( final String filename , final Optional < Charset > charset ) { 
 + public FileLogWriter ( final String filename , final Charset charset ) { 
 this . file = new File ( filename ) ; 
 - this . charset = charset ; 
 + this . charset = ( charset ! = null ? charset : Charset . defaultCharset ( ) ) ; 
 } 
 
 @ Override 
 public void write ( final String content ) { 
 try { 
 - Files . append ( content , file , charset . or ( Charset . defaultCharset ( ) ) ) ; 
 + Files . append ( content , file , charset ) ; 
 } catch ( Exception e ) { 
 throw new MocoException ( e ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 43478eb . . bf6ff0f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 38 , 7 + 38 , 6 @ @ import static com . github . dreamhead . moco . extractor . Extractors . extractor ; 
 import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . * ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 - import static com . google . common . base . Optional . absent ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 @ @ - 132 , 15 + 131 , 23 @ @ public class Moco { 
 } 
 
 public static MocoMonitor log ( ) { 
 - return new LogMonitor ( new DefaultLogFormatter ( ) , new StdLogWriter ( ) ) ; 
 + return log ( new StdLogWriter ( ) ) ; 
 } 
 
 public static MocoMonitor log ( final String filename ) { 
 - return new LogMonitor ( new DefaultLogFormatter ( ) , new FileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; 
 + return log ( fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , Optional . < Charset > absent ( ) ) ) ; 
 } 
 
 public static MocoMonitor log ( final String filename , final Charset charset ) { 
 - return new LogMonitor ( new DefaultLogFormatter ( ) , new FileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; 
 + return log ( fileLogWriter ( checkNotNullOrEmpty ( filename , " Filename should not be null or empty " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ) ; 
 + } 
 + 
 + private static LogWriter fileLogWriter ( final String filename , final Optional < Charset > charset ) { 
 + return new FileLogWriter ( filename , charset ) ; 
 + } 
 + 
 + private static MocoMonitor log ( final LogWriter writer ) { 
 + return new LogMonitor ( new DefaultLogFormatter ( ) , writer ) ; 
 } 
 
 public static RequestMatcher by ( final String content ) {
