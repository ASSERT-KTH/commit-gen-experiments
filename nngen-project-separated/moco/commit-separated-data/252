BLEU SCORE: 0.04767707020457096

TEST MSG: removed redundant final from handlers , matchers and readers
GENERATED MSG: added missing final to some abstract classes

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 8a35963 . . 2345f5b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 13 , 8 + 13 , 8 @ @ import com . google . common . net . MediaType ; <nl> public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { <nl> private final HeaderDetector detector = new HeaderDetector ( ) ; <nl> <nl> - protected abstract MessageContent responseContent ( final Request request ) ; <nl> - protected abstract MediaType getContentType ( final HttpRequest request ) ; <nl> + protected abstract MessageContent responseContent ( Request request ) ; <nl> + protected abstract MediaType getContentType ( HttpRequest request ) ; <nl> <nl> @ Override <nl> public final void writeToResponse ( final SessionContext context ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> index b2b97ca . . c7ab894 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . Response ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> <nl> public abstract class AbstractHttpResponseHandler extends AbstractResponseHandler { <nl> - protected abstract void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) ; <nl> + protected abstract void doWriteToResponse ( HttpRequest httpRequest , MutableHttpResponse httpResponse ) ; <nl> <nl> @ Override <nl> public final void writeToResponse ( final SessionContext context ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 06c12a7 . . ea80fac 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> <nl> } <nl> <nl> - protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; <nl> + protected abstract Optional < String > doRemoteUrl ( HttpRequest request ) ; <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> index 4881fd7 . . 42b6042 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher { <nl> - protected abstract RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) ; <nl> + protected abstract RequestMatcher newMatcher ( RequestExtractor < T > extractor , Resource resource ) ; <nl> <nl> private final RequestExtractor < T > extractor ; <nl> private final Resource expected ; <nl> @ @ - 37 , 7 + 37 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher <nl> <nl> T target = extractContent . get ( ) ; <nl> if ( target instanceof String ) { <nl> - return predicate . apply ( ( String ) target ) ; <nl> + return predicate . apply ( ( String ) target ) ; <nl> } <nl> <nl> if ( target instanceof String [ ] ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> index 484eb2d . . 0794098 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> <nl> public abstract class AbstractRequestMatcher implements RequestMatcher { <nl> - public abstract RequestMatcher doApply ( final MocoConfig config ) ; <nl> + public abstract RequestMatcher doApply ( MocoConfig config ) ; <nl> <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 69cf5ed . . 422b11f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 15 , 7 + 15 , 7 @ @ import static com . google . common . base . Optional . of ; <nl> <nl> public abstract class AbstractFileResourceReader implements ContentResourceReader { <nl> <nl> - protected abstract byte [ ] doReadFor ( final Optional < ? extends Request > request ) ; <nl> + protected abstract byte [ ] doReadFor ( Optional < ? extends Request > request ) ; <nl> <nl> private final Resource filename ; <nl> private final Optional < Charset > charset ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> index 15adf34 . . b2b97ca 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ public abstract class AbstractHttpResponseHandler extends AbstractResponseHandle <nl> protected abstract void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) ; <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> + public final void writeToResponse ( final SessionContext context ) { <nl> Request request = context . getRequest ( ) ; <nl> Response response = context . getResponse ( ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java <nl> index 5837fe1 . . b6ce7a6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> public abstract class AbstractResponseHandler implements ResponseHandler { <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public ResponseHandler apply ( final MocoConfig config ) { <nl> + public final ResponseHandler apply ( final MocoConfig config ) { <nl> if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { <nl> return ( ResponseHandler ) config . apply ( this ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java <nl> index c0337e7 . . 282751c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java <nl> @ @ - 11 , 17 + 11 , 17 @ @ import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public abstract class AbstractResponseBase < T > implements ResponseBase < T > { <nl> @ Override <nl> - public T response ( final String content ) { <nl> + public final T response ( final String content ) { <nl> return this . response ( text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> @ Override <nl> - public T response ( final Resource resource ) { <nl> + public final T response ( final Resource resource ) { <nl> return this . response ( with ( checkNotNull ( resource , " Resource should not be null " ) ) ) ; <nl> } <nl> <nl> @ Override <nl> - public T response ( final MocoProcedure procedure ) { <nl> + public final T response ( final MocoProcedure procedure ) { <nl> return this . response ( with ( checkNotNull ( procedure , " Procedure should not be null " ) ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> index 400ad9a . . 8aa442c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher <nl> } <nl> <nl> @ Override <nl> - public boolean match ( final Request request ) { <nl> + public final boolean match ( final Request request ) { <nl> Optional < T > extractContent = extractor . extract ( request ) ; <nl> if ( ! extractContent . isPresent ( ) ) { <nl> return false ; <nl> @ @ - 62 , 7 + 62 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher <nl> <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public RequestMatcher doApply ( final MocoConfig config ) { <nl> + public final RequestMatcher doApply ( final MocoConfig config ) { <nl> Resource appliedResource = expected . apply ( config ) ; <nl> if ( appliedResource = = expected ) { <nl> return this ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> index e4083b7 . . 484eb2d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ public abstract class AbstractRequestMatcher implements RequestMatcher { <nl> <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public RequestMatcher apply ( final MocoConfig config ) { <nl> + public final RequestMatcher apply ( final MocoConfig config ) { <nl> if ( config . isFor ( MocoConfig . REQUEST _ ID ) ) { <nl> return ( RequestMatcher ) config . apply ( this ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> index 93a4144 . . 755c471 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ public abstract class AbstractHttpContentResponseHandler extends AbstractContent <nl> protected abstract MessageContent responseContent ( HttpRequest httpRequest ) ; <nl> <nl> @ Override <nl> - protected MessageContent responseContent ( final Request request ) { <nl> + protected final MessageContent responseContent ( final Request request ) { <nl> if ( ! HttpRequest . class . isInstance ( request ) ) { <nl> throw new MocoException ( " Only HTTP request is allowed " ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java <nl> index fe8635d . . 987cd1a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ public abstract class AbstractTimesVerification implements VerificationMode { <nl> protected abstract String expectedTip ( ) ; <nl> <nl> @ Override <nl> - public void verify ( final VerificationData data ) { <nl> + public final void verify ( final VerificationData data ) { <nl> int actualSize = data . matchedSize ( ) ; <nl> if ( ! meet ( actualSize ) ) { <nl> throw new VerificationException ( data . mismatchDescription ( actualSize , expectedTip ( ) ) ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 index 8a35963 . . 2345f5b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 @ @ - 13 , 8 + 13 , 8 @ @ import com . google . common . net . MediaType ; 
 public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { 
 private final HeaderDetector detector = new HeaderDetector ( ) ; 
 
 - protected abstract MessageContent responseContent ( final Request request ) ; 
 - protected abstract MediaType getContentType ( final HttpRequest request ) ; 
 + protected abstract MessageContent responseContent ( Request request ) ; 
 + protected abstract MediaType getContentType ( HttpRequest request ) ; 
 
 @ Override 
 public final void writeToResponse ( final SessionContext context ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java 
 index b2b97ca . . c7ab894 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import com . github . dreamhead . moco . Response ; 
 import com . github . dreamhead . moco . internal . SessionContext ; 
 
 public abstract class AbstractHttpResponseHandler extends AbstractResponseHandler { 
 - protected abstract void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) ; 
 + protected abstract void doWriteToResponse ( HttpRequest httpRequest , MutableHttpResponse httpResponse ) ; 
 
 @ Override 
 public final void writeToResponse ( final SessionContext context ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index 06c12a7 . . ea80fac 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 
 } 
 
 - protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; 
 + protected abstract Optional < String > doRemoteUrl ( HttpRequest request ) ; 
 
 private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java 
 index 4881fd7 . . 42b6042 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java 
 @ @ - 14 , 7 + 14 , 7 @ @ import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . Lists . newArrayList ; 
 
 public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher { 
 - protected abstract RequestMatcher newMatcher ( final RequestExtractor < T > extractor , final Resource resource ) ; 
 + protected abstract RequestMatcher newMatcher ( RequestExtractor < T > extractor , Resource resource ) ; 
 
 private final RequestExtractor < T > extractor ; 
 private final Resource expected ; 
 @ @ - 37 , 7 + 37 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher 
 
 T target = extractContent . get ( ) ; 
 if ( target instanceof String ) { 
 - return predicate . apply ( ( String ) target ) ; 
 + return predicate . apply ( ( String ) target ) ; 
 } 
 
 if ( target instanceof String [ ] ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java 
 index 484eb2d . . 0794098 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java 
 @ @ - 4 , 7 + 4 , 7 @ @ import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . RequestMatcher ; 
 
 public abstract class AbstractRequestMatcher implements RequestMatcher { 
 - public abstract RequestMatcher doApply ( final MocoConfig config ) ; 
 + public abstract RequestMatcher doApply ( MocoConfig config ) ; 
 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 index 69cf5ed . . 422b11f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 @ @ - 15 , 7 + 15 , 7 @ @ import static com . google . common . base . Optional . of ; 
 
 public abstract class AbstractFileResourceReader implements ContentResourceReader { 
 
 - protected abstract byte [ ] doReadFor ( final Optional < ? extends Request > request ) ; 
 + protected abstract byte [ ] doReadFor ( Optional < ? extends Request > request ) ; 
 
 private final Resource filename ; 
 private final Optional < Charset > charset ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java 
 index 15adf34 . . b2b97ca 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractHttpResponseHandler . java 
 @ @ - 10 , 7 + 10 , 7 @ @ public abstract class AbstractHttpResponseHandler extends AbstractResponseHandle 
 protected abstract void doWriteToResponse ( final HttpRequest httpRequest , final MutableHttpResponse httpResponse ) ; 
 
 @ Override 
 - public void writeToResponse ( final SessionContext context ) { 
 + public final void writeToResponse ( final SessionContext context ) { 
 Request request = context . getRequest ( ) ; 
 Response response = context . getResponse ( ) ; 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java 
 index 5837fe1 . . b6ce7a6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractResponseHandler . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; 
 public abstract class AbstractResponseHandler implements ResponseHandler { 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 - public ResponseHandler apply ( final MocoConfig config ) { 
 + public final ResponseHandler apply ( final MocoConfig config ) { 
 if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { 
 return ( ResponseHandler ) config . apply ( this ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java 
 index c0337e7 . . 282751c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / AbstractResponseBase . java 
 @ @ - 11 , 17 + 11 , 17 @ @ import static com . google . common . base . Preconditions . checkNotNull ; 
 
 public abstract class AbstractResponseBase < T > implements ResponseBase < T > { 
 @ Override 
 - public T response ( final String content ) { 
 + public final T response ( final String content ) { 
 return this . response ( text ( checkNotNullOrEmpty ( content , " Content should not be null " ) ) ) ; 
 } 
 
 @ Override 
 - public T response ( final Resource resource ) { 
 + public final T response ( final Resource resource ) { 
 return this . response ( with ( checkNotNull ( resource , " Resource should not be null " ) ) ) ; 
 } 
 
 @ Override 
 - public T response ( final MocoProcedure procedure ) { 
 + public final T response ( final MocoProcedure procedure ) { 
 return this . response ( with ( checkNotNull ( procedure , " Procedure should not be null " ) ) ) ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java 
 index 400ad9a . . 8aa442c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractOperatorMatcher . java 
 @ @ - 28 , 7 + 28 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher 
 } 
 
 @ Override 
 - public boolean match ( final Request request ) { 
 + public final boolean match ( final Request request ) { 
 Optional < T > extractContent = extractor . extract ( request ) ; 
 if ( ! extractContent . isPresent ( ) ) { 
 return false ; 
 @ @ - 62 , 7 + 62 , 7 @ @ public abstract class AbstractOperatorMatcher < T > extends AbstractRequestMatcher 
 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 - public RequestMatcher doApply ( final MocoConfig config ) { 
 + public final RequestMatcher doApply ( final MocoConfig config ) { 
 Resource appliedResource = expected . apply ( config ) ; 
 if ( appliedResource = = expected ) { 
 return this ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java 
 index e4083b7 . . 484eb2d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / AbstractRequestMatcher . java 
 @ @ - 8 , 7 + 8 , 7 @ @ public abstract class AbstractRequestMatcher implements RequestMatcher { 
 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 - public RequestMatcher apply ( final MocoConfig config ) { 
 + public final RequestMatcher apply ( final MocoConfig config ) { 
 if ( config . isFor ( MocoConfig . REQUEST _ ID ) ) { 
 return ( RequestMatcher ) config . apply ( this ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java 
 index 93a4144 . . 755c471 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / AbstractHttpContentResponseHandler . java 
 @ @ - 10 , 7 + 10 , 7 @ @ public abstract class AbstractHttpContentResponseHandler extends AbstractContent 
 protected abstract MessageContent responseContent ( HttpRequest httpRequest ) ; 
 
 @ Override 
 - protected MessageContent responseContent ( final Request request ) { 
 + protected final MessageContent responseContent ( final Request request ) { 
 if ( ! HttpRequest . class . isInstance ( request ) ) { 
 throw new MocoException ( " Only HTTP request is allowed " ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java 
 index fe8635d . . 987cd1a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / verification / AbstractTimesVerification . java 
 @ @ - 9 , 7 + 9 , 7 @ @ public abstract class AbstractTimesVerification implements VerificationMode { 
 protected abstract String expectedTip ( ) ; 
 
 @ Override 
 - public void verify ( final VerificationData data ) { 
 + public final void verify ( final VerificationData data ) { 
 int actualSize = data . matchedSize ( ) ; 
 if ( ! meet ( actualSize ) ) { 
 throw new VerificationException ( data . mismatchDescription ( actualSize , expectedTip ( ) ) ) ;
