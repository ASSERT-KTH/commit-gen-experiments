BLEU SCORE: 0.08392229812593097

TEST MSG: extracted create response handler with text container and cookie container
GENERATED MSG: introduced cookie container for cookie option

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index a6bc71a . . 9606c2a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 170 , 38 + 170 , 38 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> private ResponseHandler createResponseHandler ( final Map . Entry < String , Container > pair , <nl> final String targetMethodName ) { <nl> Container container = pair . getValue ( ) ; <nl> + String key = pair . getKey ( ) ; <nl> if ( container instanceof TextContainer ) { <nl> - TextContainer textContainer = ( TextContainer ) container ; <nl> - Resource resource = getResource ( textContainer ) ; <nl> - try { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; <nl> - } <nl> - <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; <nl> - <nl> - } catch ( Exception e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return createResponseHandler ( targetMethodName , key , ( TextContainer ) container ) ; <nl> } <nl> <nl> if ( container instanceof CookieContainer ) { <nl> - CookieContainer cookieContainer = ( CookieContainer ) container ; <nl> - try { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; <nl> - } <nl> - } catch ( Exception e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return createResponseHandler ( targetMethodName , key , ( CookieContainer ) container ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( ) ; <nl> } <nl> <nl> + private ResponseHandler createResponseHandler ( final String target , final String key , <nl> + final TextContainer textContainer ) { <nl> + try { <nl> + Method method = Moco . class . getMethod ( target , String . class , Resource . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , getResource ( textContainer ) ) ; <nl> + } catch ( Exception e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private ResponseHandler createResponseHandler ( final String target , final String key , <nl> + final CookieContainer cookieContainer ) { <nl> + try { <nl> + Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; <nl> + } catch ( Exception e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> @ SuppressWarnings ( " unchecked " ) <nl> private Map < String , Container > castToMap ( final Object value ) { <nl> return Map . class . cast ( value ) ;
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> new file mode 100644 <nl> index 0000000 . . f465f7b <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . CookieContainer ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . google . common . collect . Iterators . get ; <nl> + <nl> + public class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { <nl> + @ Override <nl> + public CookieContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> + return CookieContainer . newContainer ( jp . getText ( ) ) ; <nl> + } <nl> + <nl> + if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> + jp . nextToken ( ) ; <nl> + InternalCookieContainer container = get ( jp . readValuesAs ( InternalCookieContainer . class ) , 0 ) ; <nl> + return container . toContainer ( ) ; <nl> + } <nl> + <nl> + return ( CookieContainer ) ctxt . handleUnexpectedToken ( CookieContainer . class , jp ) ; <nl> + } <nl> + <nl> + public static class InternalCookieContainer { <nl> + public String value ; <nl> + public String path ; <nl> + public String domain ; <nl> + public int maxAge ; <nl> + public boolean secure ; <nl> + public boolean httpOnly ; <nl> + public String template ; <nl> + <nl> + public CookieContainer toContainer ( ) { <nl> + return CookieContainer . newContainer ( value , path , domain , maxAge , secure , httpOnly , template ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Container . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Container . java <nl> new file mode 100644 <nl> index 0000000 . . 0ef8407 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Container . java <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + public interface Container { <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> new file mode 100644 <nl> index 0000000 . . 4679452 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . parser . deserializer . CookieContainerDeserializer ; <nl> + <nl> + @ JsonDeserialize ( using = CookieContainerDeserializer . class ) <nl> + public class CookieContainer implements Container { <nl> + private String value ; <nl> + private String path ; <nl> + private String domain ; <nl> + private int maxAge ; <nl> + private boolean secure ; <nl> + private boolean httpOnly ; <nl> + private String template ; <nl> + <nl> + public static CookieContainer newContainer ( final String text ) { <nl> + CookieContainer container = new CookieContainer ( ) ; <nl> + container . value = text ; <nl> + return container ; <nl> + } <nl> + <nl> + public static CookieContainer newContainer ( final String text , final String path , <nl> + final String domain , final int maxAge , <nl> + final boolean secure , final boolean httpOnly , <nl> + final String template ) { <nl> + CookieContainer container = new CookieContainer ( ) ; <nl> + container . value = text ; <nl> + container . path = path ; <nl> + container . domain = domain ; <nl> + container . maxAge = maxAge ; <nl> + container . secure = secure ; <nl> + container . httpOnly = httpOnly ; <nl> + container . template = template ; <nl> + return container ; <nl> + } <nl> + <nl> + public String getValue ( ) { <nl> + return value ; <nl> + } <nl> + <nl> + public boolean isForTemplate ( ) { <nl> + return this . template ! = null ; <nl> + } <nl> + <nl> + public String getTemplate ( ) { <nl> + return template ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 735ae61 . . a6bc71a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 132 , 15 + 132 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> throw new IllegalArgumentException ( " resourceSetting is expected " ) ; <nl> } <nl> <nl> - private ResponseHandler createCompositeHandler ( final String name , final Map < String , TextContainer > map ) { <nl> + private ResponseHandler createCompositeHandler ( final String name , final Map < String , Container > map ) { <nl> FluentIterable < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) ; <nl> return getResponseHandler ( handlers ) ; <nl> } <nl> <nl> - private Function < Map . Entry < String , TextContainer > , ResponseHandler > toTargetHandler ( final String name ) { <nl> - return new Function < Map . Entry < String , TextContainer > , ResponseHandler > ( ) { <nl> + private Function < Map . Entry < String , Container > , ResponseHandler > toTargetHandler ( final String name ) { <nl> + return new Function < Map . Entry < String , Container > , ResponseHandler > ( ) { <nl> @ Override <nl> - public ResponseHandler apply ( final Map . Entry < String , TextContainer > pair ) { <nl> + public ResponseHandler apply ( final Map . Entry < String , Container > pair ) { <nl> String result = COMPOSITES . get ( name ) ; <nl> if ( result = = null ) { <nl> throw new IllegalArgumentException ( " unknown composite handler name [ " + name + " ] " ) ; <nl> @ @ - 159 , 26 + 159 , 51 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return text ( container . getText ( ) ) ; <nl> } <nl> <nl> - private ResponseHandler createResponseHandler ( final Map . Entry < String , TextContainer > pair , <nl> + private Resource getResource ( final CookieContainer container ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> + return template ( container . getTemplate ( ) ) ; <nl> + } <nl> + <nl> + return text ( container . getValue ( ) ) ; <nl> + } <nl> + <nl> + private ResponseHandler createResponseHandler ( final Map . Entry < String , Container > pair , <nl> final String targetMethodName ) { <nl> - TextContainer container = pair . getValue ( ) ; <nl> - Resource resource = getResource ( container ) ; <nl> - try { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; <nl> - } <nl> + Container container = pair . getValue ( ) ; <nl> + if ( container instanceof TextContainer ) { <nl> + TextContainer textContainer = ( TextContainer ) container ; <nl> + Resource resource = getResource ( textContainer ) ; <nl> + try { <nl> + if ( " cookie " . equals ( targetMethodName ) ) { <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; <nl> + } <nl> + <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; <nl> <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; <nl> + } catch ( Exception e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> <nl> - } catch ( Exception e ) { <nl> - throw new RuntimeException ( e ) ; <nl> + if ( container instanceof CookieContainer ) { <nl> + CookieContainer cookieContainer = ( CookieContainer ) container ; <nl> + try { <nl> + if ( " cookie " . equals ( targetMethodName ) ) { <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; <nl> + } <nl> + } catch ( Exception e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> + <nl> + throw new IllegalArgumentException ( ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - private Map < String , TextContainer > castToMap ( final Object value ) { <nl> + private Map < String , Container > castToMap ( final Object value ) { <nl> return Map . class . cast ( value ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index a4b6d92 . . 195e027 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> private String status ; <nl> private ProxyContainer proxy ; <nl> private Map < String , TextContainer > headers ; <nl> - private Map < String , TextContainer > cookies ; <nl> + private Map < String , CookieContainer > cookies ; <nl> private LatencyContainer latency ; <nl> <nl> private TextContainer version ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index cae15ad . . e8d2014 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFacto <nl> import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; <nl> <nl> @ JsonDeserialize ( using = TextContainerDeserializer . class ) <nl> - public class TextContainer { <nl> + public class TextContainer implements Container { <nl> private static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ;

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index a6bc71a . . 9606c2a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 170 , 38 + 170 , 38 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 private ResponseHandler createResponseHandler ( final Map . Entry < String , Container > pair , 
 final String targetMethodName ) { 
 Container container = pair . getValue ( ) ; 
 + String key = pair . getKey ( ) ; 
 if ( container instanceof TextContainer ) { 
 - TextContainer textContainer = ( TextContainer ) container ; 
 - Resource resource = getResource ( textContainer ) ; 
 - try { 
 - if ( " cookie " . equals ( targetMethodName ) ) { 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; 
 - } 
 - 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; 
 - 
 - } catch ( Exception e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return createResponseHandler ( targetMethodName , key , ( TextContainer ) container ) ; 
 } 
 
 if ( container instanceof CookieContainer ) { 
 - CookieContainer cookieContainer = ( CookieContainer ) container ; 
 - try { 
 - if ( " cookie " . equals ( targetMethodName ) ) { 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; 
 - } 
 - } catch ( Exception e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return createResponseHandler ( targetMethodName , key , ( CookieContainer ) container ) ; 
 } 
 
 throw new IllegalArgumentException ( ) ; 
 } 
 
 + private ResponseHandler createResponseHandler ( final String target , final String key , 
 + final TextContainer textContainer ) { 
 + try { 
 + Method method = Moco . class . getMethod ( target , String . class , Resource . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , key , getResource ( textContainer ) ) ; 
 + } catch ( Exception e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private ResponseHandler createResponseHandler ( final String target , final String key , 
 + final CookieContainer cookieContainer ) { 
 + try { 
 + Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieOption [ ] . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; 
 + } catch ( Exception e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 @ SuppressWarnings ( " unchecked " ) 
 private Map < String , Container > castToMap ( final Object value ) { 
 return Map . class . cast ( value ) ;

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java 
 new file mode 100644 
 index 0000000 . . f465f7b 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CookieContainerDeserializer . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package com . github . dreamhead . moco . parser . deserializer ; 
 + 
 + import com . fasterxml . jackson . core . JsonParser ; 
 + import com . fasterxml . jackson . core . JsonToken ; 
 + import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 + import com . github . dreamhead . moco . parser . model . CookieContainer ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . google . common . collect . Iterators . get ; 
 + 
 + public class CookieContainerDeserializer extends JsonDeserializer < CookieContainer > { 
 + @ Override 
 + public CookieContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 + return CookieContainer . newContainer ( jp . getText ( ) ) ; 
 + } 
 + 
 + if ( currentToken = = JsonToken . START _ OBJECT ) { 
 + jp . nextToken ( ) ; 
 + InternalCookieContainer container = get ( jp . readValuesAs ( InternalCookieContainer . class ) , 0 ) ; 
 + return container . toContainer ( ) ; 
 + } 
 + 
 + return ( CookieContainer ) ctxt . handleUnexpectedToken ( CookieContainer . class , jp ) ; 
 + } 
 + 
 + public static class InternalCookieContainer { 
 + public String value ; 
 + public String path ; 
 + public String domain ; 
 + public int maxAge ; 
 + public boolean secure ; 
 + public boolean httpOnly ; 
 + public String template ; 
 + 
 + public CookieContainer toContainer ( ) { 
 + return CookieContainer . newContainer ( value , path , domain , maxAge , secure , httpOnly , template ) ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Container . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Container . java 
 new file mode 100644 
 index 0000000 . . 0ef8407 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Container . java 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + public interface Container { 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 new file mode 100644 
 index 0000000 . . 4679452 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 + import com . github . dreamhead . moco . parser . deserializer . CookieContainerDeserializer ; 
 + 
 + @ JsonDeserialize ( using = CookieContainerDeserializer . class ) 
 + public class CookieContainer implements Container { 
 + private String value ; 
 + private String path ; 
 + private String domain ; 
 + private int maxAge ; 
 + private boolean secure ; 
 + private boolean httpOnly ; 
 + private String template ; 
 + 
 + public static CookieContainer newContainer ( final String text ) { 
 + CookieContainer container = new CookieContainer ( ) ; 
 + container . value = text ; 
 + return container ; 
 + } 
 + 
 + public static CookieContainer newContainer ( final String text , final String path , 
 + final String domain , final int maxAge , 
 + final boolean secure , final boolean httpOnly , 
 + final String template ) { 
 + CookieContainer container = new CookieContainer ( ) ; 
 + container . value = text ; 
 + container . path = path ; 
 + container . domain = domain ; 
 + container . maxAge = maxAge ; 
 + container . secure = secure ; 
 + container . httpOnly = httpOnly ; 
 + container . template = template ; 
 + return container ; 
 + } 
 + 
 + public String getValue ( ) { 
 + return value ; 
 + } 
 + 
 + public boolean isForTemplate ( ) { 
 + return this . template ! = null ; 
 + } 
 + 
 + public String getTemplate ( ) { 
 + return template ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 735ae61 . . a6bc71a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 132 , 15 + 132 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 throw new IllegalArgumentException ( " resourceSetting is expected " ) ; 
 } 
 
 - private ResponseHandler createCompositeHandler ( final String name , final Map < String , TextContainer > map ) { 
 + private ResponseHandler createCompositeHandler ( final String name , final Map < String , Container > map ) { 
 FluentIterable < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) ; 
 return getResponseHandler ( handlers ) ; 
 } 
 
 - private Function < Map . Entry < String , TextContainer > , ResponseHandler > toTargetHandler ( final String name ) { 
 - return new Function < Map . Entry < String , TextContainer > , ResponseHandler > ( ) { 
 + private Function < Map . Entry < String , Container > , ResponseHandler > toTargetHandler ( final String name ) { 
 + return new Function < Map . Entry < String , Container > , ResponseHandler > ( ) { 
 @ Override 
 - public ResponseHandler apply ( final Map . Entry < String , TextContainer > pair ) { 
 + public ResponseHandler apply ( final Map . Entry < String , Container > pair ) { 
 String result = COMPOSITES . get ( name ) ; 
 if ( result = = null ) { 
 throw new IllegalArgumentException ( " unknown composite handler name [ " + name + " ] " ) ; 
 @ @ - 159 , 26 + 159 , 51 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 return text ( container . getText ( ) ) ; 
 } 
 
 - private ResponseHandler createResponseHandler ( final Map . Entry < String , TextContainer > pair , 
 + private Resource getResource ( final CookieContainer container ) { 
 + if ( container . isForTemplate ( ) ) { 
 + return template ( container . getTemplate ( ) ) ; 
 + } 
 + 
 + return text ( container . getValue ( ) ) ; 
 + } 
 + 
 + private ResponseHandler createResponseHandler ( final Map . Entry < String , Container > pair , 
 final String targetMethodName ) { 
 - TextContainer container = pair . getValue ( ) ; 
 - Resource resource = getResource ( container ) ; 
 - try { 
 - if ( " cookie " . equals ( targetMethodName ) ) { 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; 
 - } 
 + Container container = pair . getValue ( ) ; 
 + if ( container instanceof TextContainer ) { 
 + TextContainer textContainer = ( TextContainer ) container ; 
 + Resource resource = getResource ( textContainer ) ; 
 + try { 
 + if ( " cookie " . equals ( targetMethodName ) ) { 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; 
 + } 
 + 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; 
 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; 
 + } catch ( Exception e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 
 - } catch ( Exception e ) { 
 - throw new RuntimeException ( e ) ; 
 + if ( container instanceof CookieContainer ) { 
 + CookieContainer cookieContainer = ( CookieContainer ) container ; 
 + try { 
 + if ( " cookie " . equals ( targetMethodName ) ) { 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; 
 + } 
 + } catch ( Exception e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 + 
 + throw new IllegalArgumentException ( ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - private Map < String , TextContainer > castToMap ( final Object value ) { 
 + private Map < String , Container > castToMap ( final Object value ) { 
 return Map . class . cast ( value ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index a4b6d92 . . 195e027 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 14 , 7 + 14 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { 
 private String status ; 
 private ProxyContainer proxy ; 
 private Map < String , TextContainer > headers ; 
 - private Map < String , TextContainer > cookies ; 
 + private Map < String , CookieContainer > cookies ; 
 private LatencyContainer latency ; 
 
 private TextContainer version ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index cae15ad . . e8d2014 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFacto 
 import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; 
 
 @ JsonDeserialize ( using = TextContainerDeserializer . class ) 
 - public class TextContainer { 
 + public class TextContainer implements Container { 
 private static final String TEMPLATE _ NAME = " template " ; 
 private String text ; 
 private String operation ;
