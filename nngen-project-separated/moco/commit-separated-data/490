BLEU SCORE: 0.7071067811865475

TEST MSG: added json socket runner with path resource for junit rule
GENERATED MSG: added json http runner with path resource for junit rule

TEST DIFF (one line): diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index ae7abe3 . . ac45be4 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 51 , 6 + 51 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( jsonSocketServer ( port , file ( filename ) ) ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonSocketRunner ( final int port , final Resource filename ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( filename , " Filename should not be null " ) ; <nl> + return new MocoJunitRunner ( runner ( jsonSocketServer ( port , filename ) ) ) ; <nl> + } <nl> + <nl> public static MocoJunitRunner socketRunner ( final SocketServer server ) { <nl> checkNotNull ( server , " Server should not be null " ) ; <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7d9ca7d <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoSocketHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonSocketRunnerWithPathTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonSocketRunner ( 12306 , pathResource ( " base . json " ) ) ; <nl> + <nl> + private MocoSocketHelper helper ; <nl> + <nl> + @ Before <nl> + public void setup ( ) { <nl> + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ response ( ) throws Exception { <nl> + helper . connect ( ) ; <nl> + assertThat ( helper . send ( " foo " , 3 ) , is ( " bar " ) ) ; <nl> + helper . close ( ) ; <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> index 434c90d . . ae7abe3 100644 <nl> - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . HttpServer ; <nl> import com . github . dreamhead . moco . RestServer ; <nl> import com . github . dreamhead . moco . Runner ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> import org . junit . rules . ExternalResource ; <nl> <nl> import static com . github . dreamhead . moco . Moco . file ; <nl> @ @ - 27 , 6 + 28 , 13 @ @ public final class MocoJunitRunner extends ExternalResource { <nl> return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ( filename ) ) ) ) ; <nl> } <nl> <nl> + public static MocoJunitRunner jsonHttpRunner ( final int port , final Resource file ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + checkNotNull ( file , " Filename should not be null " ) ; <nl> + return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ) ) ) ; <nl> + } <nl> + <nl> + <nl> public static MocoJunitRunner httpRunner ( final HttpServer server ) { <nl> checkNotNull ( server , " Server should not be null " ) ; <nl> return new MocoJunitRunner ( runner ( server ) ) ; <nl> diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpRunnerWithPathTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7ce251a <nl> - - - / dev / null <nl> + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpRunnerWithPathTest . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . github . dreamhead . moco . junit ; <nl> + <nl> + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; <nl> + import org . junit . Rule ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . pathResource ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoJunitJsonHttpRunnerWithPathTest extends AbstractMocoStandaloneTest { <nl> + @ Rule <nl> + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpRunner ( 12306 , pathResource ( " foo . json " ) ) ; <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message ( ) throws IOException { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ expected _ message _ 2 ( ) throws IOException { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 index ae7abe3 . . ac45be4 100644 
 - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 @ @ - 51 , 6 + 51 , 12 @ @ public final class MocoJunitRunner extends ExternalResource { 
 return new MocoJunitRunner ( runner ( jsonSocketServer ( port , file ( filename ) ) ) ) ; 
 } 
 
 + public static MocoJunitRunner jsonSocketRunner ( final int port , final Resource filename ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + checkNotNull ( filename , " Filename should not be null " ) ; 
 + return new MocoJunitRunner ( runner ( jsonSocketServer ( port , filename ) ) ) ; 
 + } 
 + 
 public static MocoJunitRunner socketRunner ( final SocketServer server ) { 
 checkNotNull ( server , " Server should not be null " ) ; 
 return new MocoJunitRunner ( runner ( server ) ) ; 
 diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java 
 new file mode 100644 
 index 0000000 . . 7d9ca7d 
 - - - / dev / null 
 + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonSocketRunnerWithPathTest . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . helper . MocoSocketHelper ; 
 + import org . junit . Before ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import static com . github . dreamhead . moco . Moco . pathResource ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitJsonSocketRunnerWithPathTest { 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonSocketRunner ( 12306 , pathResource ( " base . json " ) ) ; 
 + 
 + private MocoSocketHelper helper ; 
 + 
 + @ Before 
 + public void setup ( ) { 
 + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ expected _ response ( ) throws Exception { 
 + helper . connect ( ) ; 
 + assertThat ( helper . send ( " foo " , 3 ) , is ( " bar " ) ) ; 
 + helper . close ( ) ; 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 index 434c90d . . ae7abe3 100644 
 - - - a / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 + + + b / moco - junit / src / main / java / com / github / dreamhead / moco / junit / MocoJunitRunner . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . HttpServer ; 
 import com . github . dreamhead . moco . RestServer ; 
 import com . github . dreamhead . moco . Runner ; 
 import com . github . dreamhead . moco . SocketServer ; 
 + import com . github . dreamhead . moco . resource . Resource ; 
 import org . junit . rules . ExternalResource ; 
 
 import static com . github . dreamhead . moco . Moco . file ; 
 @ @ - 27 , 6 + 28 , 13 @ @ public final class MocoJunitRunner extends ExternalResource { 
 return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ( filename ) ) ) ) ; 
 } 
 
 + public static MocoJunitRunner jsonHttpRunner ( final int port , final Resource file ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + checkNotNull ( file , " Filename should not be null " ) ; 
 + return new MocoJunitRunner ( runner ( jsonHttpServer ( port , file ) ) ) ; 
 + } 
 + 
 + 
 public static MocoJunitRunner httpRunner ( final HttpServer server ) { 
 checkNotNull ( server , " Server should not be null " ) ; 
 return new MocoJunitRunner ( runner ( server ) ) ; 
 diff - - git a / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpRunnerWithPathTest . java b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpRunnerWithPathTest . java 
 new file mode 100644 
 index 0000000 . . 7ce251a 
 - - - / dev / null 
 + + + b / moco - junit / src / test / java / com / github / dreamhead / moco / junit / MocoJunitJsonHttpRunnerWithPathTest . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . github . dreamhead . moco . junit ; 
 + 
 + import com . github . dreamhead . moco . AbstractMocoStandaloneTest ; 
 + import org . junit . Rule ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . Moco . pathResource ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoJunitJsonHttpRunnerWithPathTest extends AbstractMocoStandaloneTest { 
 + @ Rule 
 + public MocoJunitRunner runner = MocoJunitRunner . jsonHttpRunner ( 12306 , pathResource ( " foo . json " ) ) ; 
 + 
 + @ Test 
 + public void should _ return _ expected _ message ( ) throws IOException { 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ expected _ message _ 2 ( ) throws IOException { 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + } 
 + }
