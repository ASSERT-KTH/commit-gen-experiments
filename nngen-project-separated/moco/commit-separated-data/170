BLEU SCORE: 0.04767707020457096

TEST MSG: changed headers type to map in http message builder
GENERATED MSG: enabled multiple headers with same name

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index d61684a . . 98bb394 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 15 , 7 + 15 , 6 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . github . dreamhead . moco . util . Maps . iterableValueToArray ; <nl> import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> - import static java . util . Collections . EMPTY _ MAP ; <nl> <nl> public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final HttpProtocolVersion version ; <nl> @ @ - 81 , 9 + 80 , 9 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> protected static abstract class Builder < T extends Builder > { <nl> private final Class < T > clazz ; <nl> - protected HttpProtocolVersion version ; <nl> - protected MessageContent content ; <nl> - protected ImmutableMap < String , String [ ] > headers ; <nl> + private HttpProtocolVersion version ; <nl> + private MessageContent content ; <nl> + private Map < String , String [ ] > headers ; <nl> <nl> public Builder ( ) { <nl> this . clazz = getRealClass ( ) ; <nl> @ @ - 118 , 7 + 117 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> + private Map < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> if ( headers . isEmpty ( ) ) { <nl> return ImmutableMap . of ( ) ; <nl> } <nl> @ @ - 129 , 7 + 128 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> if ( value instanceof String [ ] ) { <nl> - return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> + return ( Map < String , String [ ] > ) headers ; <nl> } <nl> <nl> if ( value instanceof Iterable ) { <nl> @ @ - 138 , 5 + 137 , 17 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> <nl> throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> } <nl> + <nl> + protected HttpProtocolVersion getVersion ( ) { <nl> + return version ; <nl> + } <nl> + <nl> + protected MessageContent getContent ( ) { <nl> + return content ; <nl> + } <nl> + <nl> + protected ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + return copyOf ( headers ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index b4ab412 . . 9d58621 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 209 , 7 + 209 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> } <nl> <nl> public DefaultHttpRequest build ( ) { <nl> - return new DefaultHttpRequest ( version , content , method , this . uri , this . headers , this . queries ) ; <nl> + return new DefaultHttpRequest ( this . getVersion ( ) , this . getContent ( ) , method , this . uri , this . getHeaders ( ) , this . queries ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 9e0f5f0 . . 41fc963 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> public DefaultHttpResponse build ( ) { <nl> - return new DefaultHttpResponse ( version , status , headers , content ) ; <nl> + return new DefaultHttpResponse ( this . getVersion ( ) , status , this . getHeaders ( ) , this . getContent ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 44e9559 . . 3d623e0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 7 , 6 + 7 , 8 @ @ import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> + import java . util . Map ; <nl> + <nl> import static com . github . dreamhead . moco . util . Maps . arrayValueToSimple ; <nl> <nl> public class TemplateRequest { <nl> @ @ - 28 , 7 + 30 , 7 @ @ public class TemplateRequest { <nl> throw new IllegalArgumentException ( " Request is not HTTP request " ) ; <nl> } <nl> <nl> - public ImmutableMap < String , String > getHeaders ( ) { <nl> + public Map < String , String > getHeaders ( ) { <nl> if ( this . request instanceof HttpRequest ) { <nl> return arrayValueToSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> index 24ad670 . . 6155d93 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import com . google . common . collect . Iterables ; <nl> import java . util . Map ; <nl> <nl> public class Maps { <nl> - public static ImmutableMap < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { <nl> + public static Map < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { <nl> ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String [ ] > entry : map . entrySet ( ) ) { <nl> builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; <nl> @ @ - 15 , 7 + 15 , 7 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> - public static ImmutableMap < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { <nl> + public static Map < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { <nl> ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { <nl> builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class Maps { <nl> return builder . build ( ) ; <nl> } <nl> <nl> - public static ImmutableMap < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { <nl> + public static Map < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { <nl> ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , Iterable < String > > entry : map . entrySet ( ) ) { <nl> Iterable < String > value = entry . getValue ( ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java <nl> index 9deacc4 . . c68f37d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> public interface HttpMessage extends Message { <nl> HttpProtocolVersion getVersion ( ) ; <nl> <nl> - ImmutableMap < String , String > getHeaders ( ) ; <nl> + ImmutableMap < String , String [ ] > getHeaders ( ) ; <nl> <nl> String getHeader ( String name ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java <nl> index c268a16 . . e4d125d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . google . common . base . Joiner ; <nl> import io . netty . util . internal . StringUtil ; <nl> <nl> import static com . github . dreamhead . moco . dumper . HttpDumpers . asContent ; <nl> + import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> <nl> public final class HttpRequestDumper implements Dumper < Request > { <nl> private final Joiner . MapJoiner headerJoiner = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; <nl> @ @ - 16 , 7 + 17 , 7 @ @ public final class HttpRequestDumper implements Dumper < Request > { <nl> StringBuilder buf = new StringBuilder ( ) ; <nl> buf . append ( requestProtocolLine ( httpRequest ) ) <nl> . append ( StringUtil . NEWLINE ) <nl> - . append ( headerJoiner . join ( httpRequest . getHeaders ( ) ) ) <nl> + . append ( headerJoiner . join ( asSimple ( httpRequest . getHeaders ( ) ) ) ) <nl> . append ( asContent ( httpRequest ) ) ; <nl> return buf . toString ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java <nl> index 34fa0df . . e64c5c8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . google . common . base . Joiner ; <nl> import io . netty . util . internal . StringUtil ; <nl> <nl> import static com . github . dreamhead . moco . dumper . HttpDumpers . asContent ; <nl> + import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> <nl> public class HttpResponseDumper implements Dumper < Response > { <nl> private final Joiner . MapJoiner headerJoiner = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; <nl> @ @ - 16 , 7 + 17 , 7 @ @ public class HttpResponseDumper implements Dumper < Response > { <nl> return new StringBuilder ( ) <nl> . append ( responseProtocolLine ( httpResponse ) ) <nl> . append ( StringUtil . NEWLINE ) <nl> - . append ( headerJoiner . join ( httpResponse . getHeaders ( ) ) ) <nl> + . append ( headerJoiner . join ( asSimple ( httpResponse . getHeaders ( ) ) ) ) <nl> . append ( asContent ( httpResponse ) ) <nl> . toString ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> index 2af3908 . . 62ecb09 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpRequestExtractor ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> - import com . google . common . collect . ImmutableMap ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 22 , 8 + 21 , 7 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> <nl> @ Override <nl> protected Optional < String [ ] > doExtract ( final HttpRequest request ) { <nl> - final ImmutableMap < String , String > headers = request . getHeaders ( ) ; <nl> - String [ ] extractedValues = from ( headers . entrySet ( ) ) <nl> + String [ ] extractedValues = from ( request . getHeaders ( ) . entrySet ( ) ) <nl> . filter ( isForHeaderName ( name ) ) <nl> . transform ( toValue ( ) ) <nl> . toArray ( String . class ) ; <nl> @ @ - 35 , 11 + 33 , 12 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> return absent ( ) ; <nl> } <nl> <nl> - private Function < Map . Entry < String , String > , String > toValue ( ) { <nl> - return new Function < Map . Entry < String , String > , String > ( ) { <nl> + / / TO FLAT <nl> + private Function < Map . Entry < String , String [ ] > , String > toValue ( ) { <nl> + return new Function < Map . Entry < String , String [ ] > , String > ( ) { <nl> @ Override <nl> - public String apply ( final Map . Entry < String , String > input ) { <nl> - return input . getValue ( ) ; <nl> + public String apply ( final Map . Entry < String , String [ ] > input ) { <nl> + return input . getValue ( ) [ 0 ] ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index ea80fac . . 12a3f1e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 236 , 9 + 236 , 13 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> private void doWritHttpResponse ( final HttpResponse response , final MutableHttpResponse httpResponse ) { <nl> httpResponse . setVersion ( response . getVersion ( ) ) ; <nl> httpResponse . setStatus ( response . getStatus ( ) ) ; <nl> - for ( Map . Entry < String , String > entry : response . getHeaders ( ) . entrySet ( ) ) { <nl> - httpResponse . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + for ( Map . Entry < String , String [ ] > entry : response . getHeaders ( ) . entrySet ( ) ) { <nl> + String key = entry . getKey ( ) ; <nl> + for ( String value : entry . getValue ( ) ) { <nl> + httpResponse . addHeader ( key , value ) ; <nl> + } <nl> } <nl> + <nl> httpResponse . setContent ( response . getContent ( ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 46fb0f2 . . 7233273 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 4 , 8 + 4 , 6 @ @ import com . github . dreamhead . moco . HttpMessage ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> - import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> - <nl> public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final HttpProtocolVersion version ; <nl> private final MessageContent content ; <nl> @ @ - 25 , 8 + 23 , 8 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> } <nl> <nl> @ Override <nl> - public ImmutableMap < String , String > getHeaders ( ) { <nl> - return asSimple ( this . headers ) ; <nl> + public ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + return this . headers ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index f67feb0 . . afbcd07 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 177 , 8 + 177 , 12 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> <nl> FullHttpRequest request = new DefaultFullHttpRequest ( HttpVersion . valueOf ( getVersion ( ) . text ( ) ) , <nl> io . netty . handler . codec . http . HttpMethod . valueOf ( method . name ( ) ) , encoder . toString ( ) , buffer ) ; <nl> - for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { <nl> - request . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + <nl> + for ( Map . Entry < String , String [ ] > entry : getHeaders ( ) . entrySet ( ) ) { <nl> + String key = entry . getKey ( ) ; <nl> + for ( String value : entry . getValue ( ) ) { <nl> + request . headers ( ) . add ( key , value ) ; <nl> + } <nl> } <nl> <nl> return request ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index cc1c3ac . . ba562e3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 12 , 8 + 12 , 6 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . util . Map ; <nl> <nl> - import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> - <nl> public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> private HttpProtocolVersion version ; <nl> private Map < String , String [ ] > headers = Maps . newHashMap ( ) ; <nl> @ @ - 80 , 8 + 78 , 8 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> } <nl> <nl> @ Override <nl> - public ImmutableMap < String , String > getHeaders ( ) { <nl> - return asSimple ( ImmutableMap . copyOf ( this . headers ) ) ; <nl> + public ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + return ImmutableMap . copyOf ( this . headers ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 104 , 8 + 102 , 12 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> public FullHttpResponse toFullResponse ( ) { <nl> FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , <nl> HttpResponseStatus . valueOf ( this . status ) ) ; <nl> - for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { <nl> - response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + <nl> + for ( Map . Entry < String , String [ ] > entry : getHeaders ( ) . entrySet ( ) ) { <nl> + String key = entry . getKey ( ) ; <nl> + for ( String value : entry . getValue ( ) ) { <nl> + response . headers ( ) . add ( key , value ) ; <nl> + } <nl> } <nl> <nl> if ( this . content ! = null ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> index 11964e1 . . 70d8de4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java <nl> @ @ - 7 , 6 + 7 , 8 @ @ import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> + import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> + <nl> public class TemplateRequest { <nl> private Request request ; <nl> <nl> @ @ - 28 , 7 + 30 , 7 @ @ public class TemplateRequest { <nl> <nl> public ImmutableMap < String , String > getHeaders ( ) { <nl> if ( this . request instanceof HttpRequest ) { <nl> - return ( ( HttpRequest ) this . request ) . getHeaders ( ) ; <nl> + return asSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; <nl> } <nl> <nl> throw new IllegalArgumentException ( " Request is not HTTP request " ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java <nl> index dbf905e . . fa5d6a2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java <nl> @ @ - 9 , 10 + 9 , 10 @ @ public final class HttpHeaders { <nl> return key . equalsIgnoreCase ( name ) ; <nl> } <nl> <nl> - public static Predicate < Map . Entry < String , String > > isForHeaderName ( final String key ) { <nl> - return new Predicate < Map . Entry < String , String > > ( ) { <nl> + public static Predicate < Map . Entry < String , String [ ] > > isForHeaderName ( final String key ) { <nl> + return new Predicate < Map . Entry < String , String [ ] > > ( ) { <nl> @ Override <nl> - public boolean apply ( final Map . Entry < String , String > input ) { <nl> + public boolean apply ( final Map . Entry < String , String [ ] > input ) { <nl> return isSameHeaderName ( input . getKey ( ) , key ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index d61684a . . 98bb394 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 15 , 7 + 15 , 6 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; 
 import static com . github . dreamhead . moco . util . Maps . iterableValueToArray ; 
 import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 - import static java . util . Collections . EMPTY _ MAP ; 
 
 public abstract class DefaultHttpMessage implements HttpMessage { 
 private final HttpProtocolVersion version ; 
 @ @ - 81 , 9 + 80 , 9 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 
 protected static abstract class Builder < T extends Builder > { 
 private final Class < T > clazz ; 
 - protected HttpProtocolVersion version ; 
 - protected MessageContent content ; 
 - protected ImmutableMap < String , String [ ] > headers ; 
 + private HttpProtocolVersion version ; 
 + private MessageContent content ; 
 + private Map < String , String [ ] > headers ; 
 
 public Builder ( ) { 
 this . clazz = getRealClass ( ) ; 
 @ @ - 118 , 7 + 117 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { 
 + private Map < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { 
 if ( headers . isEmpty ( ) ) { 
 return ImmutableMap . of ( ) ; 
 } 
 @ @ - 129 , 7 + 128 , 7 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 } 
 
 if ( value instanceof String [ ] ) { 
 - return copyOf ( ( Map < String , String [ ] > ) headers ) ; 
 + return ( Map < String , String [ ] > ) headers ; 
 } 
 
 if ( value instanceof Iterable ) { 
 @ @ - 138 , 5 + 137 , 17 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 
 throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; 
 } 
 + 
 + protected HttpProtocolVersion getVersion ( ) { 
 + return version ; 
 + } 
 + 
 + protected MessageContent getContent ( ) { 
 + return content ; 
 + } 
 + 
 + protected ImmutableMap < String , String [ ] > getHeaders ( ) { 
 + return copyOf ( headers ) ; 
 + } 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index b4ab412 . . 9d58621 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 209 , 7 + 209 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 } 
 
 public DefaultHttpRequest build ( ) { 
 - return new DefaultHttpRequest ( version , content , method , this . uri , this . headers , this . queries ) ; 
 + return new DefaultHttpRequest ( this . getVersion ( ) , this . getContent ( ) , method , this . uri , this . getHeaders ( ) , this . queries ) ; 
 } 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index 9e0f5f0 . . 41fc963 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo 
 } 
 
 public DefaultHttpResponse build ( ) { 
 - return new DefaultHttpResponse ( version , status , headers , content ) ; 
 + return new DefaultHttpResponse ( this . getVersion ( ) , status , this . getHeaders ( ) , this . getContent ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 index 44e9559 . . 3d623e0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 @ @ - 7 , 6 + 7 , 8 @ @ import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 import com . google . common . collect . ImmutableMap ; 
 
 + import java . util . Map ; 
 + 
 import static com . github . dreamhead . moco . util . Maps . arrayValueToSimple ; 
 
 public class TemplateRequest { 
 @ @ - 28 , 7 + 30 , 7 @ @ public class TemplateRequest { 
 throw new IllegalArgumentException ( " Request is not HTTP request " ) ; 
 } 
 
 - public ImmutableMap < String , String > getHeaders ( ) { 
 + public Map < String , String > getHeaders ( ) { 
 if ( this . request instanceof HttpRequest ) { 
 return arrayValueToSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java 
 index 24ad670 . . 6155d93 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Maps . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import com . google . common . collect . Iterables ; 
 import java . util . Map ; 
 
 public class Maps { 
 - public static ImmutableMap < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { 
 + public static Map < String , String > arrayValueToSimple ( final Map < String , String [ ] > map ) { 
 ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; 
 for ( Map . Entry < String , String [ ] > entry : map . entrySet ( ) ) { 
 builder . put ( entry . getKey ( ) , entry . getValue ( ) [ 0 ] ) ; 
 @ @ - 15 , 7 + 15 , 7 @ @ public class Maps { 
 return builder . build ( ) ; 
 } 
 
 - public static ImmutableMap < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { 
 + public static Map < String , String [ ] > simpleValueToArray ( final Map < String , String > map ) { 
 ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; 
 for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { 
 builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; 
 @ @ - 24 , 7 + 24 , 7 @ @ public class Maps { 
 return builder . build ( ) ; 
 } 
 
 - public static ImmutableMap < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { 
 + public static Map < String , String [ ] > iterableValueToArray ( final Map < String , Iterable < String > > map ) { 
 ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; 
 for ( Map . Entry < String , Iterable < String > > entry : map . entrySet ( ) ) { 
 Iterable < String > value = entry . getValue ( ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java 
 index 9deacc4 . . c68f37d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpMessage . java 
 @ @ - 5 , 7 + 5 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 public interface HttpMessage extends Message { 
 HttpProtocolVersion getVersion ( ) ; 
 
 - ImmutableMap < String , String > getHeaders ( ) ; 
 + ImmutableMap < String , String [ ] > getHeaders ( ) ; 
 
 String getHeader ( String name ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java 
 index c268a16 . . e4d125d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpRequestDumper . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import com . google . common . base . Joiner ; 
 import io . netty . util . internal . StringUtil ; 
 
 import static com . github . dreamhead . moco . dumper . HttpDumpers . asContent ; 
 + import static com . github . dreamhead . moco . util . Maps . asSimple ; 
 
 public final class HttpRequestDumper implements Dumper < Request > { 
 private final Joiner . MapJoiner headerJoiner = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; 
 @ @ - 16 , 7 + 17 , 7 @ @ public final class HttpRequestDumper implements Dumper < Request > { 
 StringBuilder buf = new StringBuilder ( ) ; 
 buf . append ( requestProtocolLine ( httpRequest ) ) 
 . append ( StringUtil . NEWLINE ) 
 - . append ( headerJoiner . join ( httpRequest . getHeaders ( ) ) ) 
 + . append ( headerJoiner . join ( asSimple ( httpRequest . getHeaders ( ) ) ) ) 
 . append ( asContent ( httpRequest ) ) ; 
 return buf . toString ( ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java 
 index 34fa0df . . e64c5c8 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / HttpResponseDumper . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import com . google . common . base . Joiner ; 
 import io . netty . util . internal . StringUtil ; 
 
 import static com . github . dreamhead . moco . dumper . HttpDumpers . asContent ; 
 + import static com . github . dreamhead . moco . util . Maps . asSimple ; 
 
 public class HttpResponseDumper implements Dumper < Response > { 
 private final Joiner . MapJoiner headerJoiner = Joiner . on ( StringUtil . NEWLINE ) . withKeyValueSeparator ( " : " ) ; 
 @ @ - 16 , 7 + 17 , 7 @ @ public class HttpResponseDumper implements Dumper < Response > { 
 return new StringBuilder ( ) 
 . append ( responseProtocolLine ( httpResponse ) ) 
 . append ( StringUtil . NEWLINE ) 
 - . append ( headerJoiner . join ( httpResponse . getHeaders ( ) ) ) 
 + . append ( headerJoiner . join ( asSimple ( httpResponse . getHeaders ( ) ) ) ) 
 . append ( asContent ( httpResponse ) ) 
 . toString ( ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 index 2af3908 . . 62ecb09 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . HttpRequestExtractor ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 - import com . google . common . collect . ImmutableMap ; 
 
 import java . util . Map ; 
 
 @ @ - 22 , 8 + 21 , 7 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { 
 
 @ Override 
 protected Optional < String [ ] > doExtract ( final HttpRequest request ) { 
 - final ImmutableMap < String , String > headers = request . getHeaders ( ) ; 
 - String [ ] extractedValues = from ( headers . entrySet ( ) ) 
 + String [ ] extractedValues = from ( request . getHeaders ( ) . entrySet ( ) ) 
 . filter ( isForHeaderName ( name ) ) 
 . transform ( toValue ( ) ) 
 . toArray ( String . class ) ; 
 @ @ - 35 , 11 + 33 , 12 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { 
 return absent ( ) ; 
 } 
 
 - private Function < Map . Entry < String , String > , String > toValue ( ) { 
 - return new Function < Map . Entry < String , String > , String > ( ) { 
 + / / TO FLAT 
 + private Function < Map . Entry < String , String [ ] > , String > toValue ( ) { 
 + return new Function < Map . Entry < String , String [ ] > , String > ( ) { 
 @ Override 
 - public String apply ( final Map . Entry < String , String > input ) { 
 - return input . getValue ( ) ; 
 + public String apply ( final Map . Entry < String , String [ ] > input ) { 
 + return input . getValue ( ) [ 0 ] ; 
 } 
 } ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index ea80fac . . 12a3f1e 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 236 , 9 + 236 , 13 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 private void doWritHttpResponse ( final HttpResponse response , final MutableHttpResponse httpResponse ) { 
 httpResponse . setVersion ( response . getVersion ( ) ) ; 
 httpResponse . setStatus ( response . getStatus ( ) ) ; 
 - for ( Map . Entry < String , String > entry : response . getHeaders ( ) . entrySet ( ) ) { 
 - httpResponse . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + for ( Map . Entry < String , String [ ] > entry : response . getHeaders ( ) . entrySet ( ) ) { 
 + String key = entry . getKey ( ) ; 
 + for ( String value : entry . getValue ( ) ) { 
 + httpResponse . addHeader ( key , value ) ; 
 + } 
 } 
 + 
 httpResponse . setContent ( response . getContent ( ) ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index 46fb0f2 . . 7233273 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 4 , 8 + 4 , 6 @ @ import com . github . dreamhead . moco . HttpMessage ; 
 import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . google . common . collect . ImmutableMap ; 
 
 - import static com . github . dreamhead . moco . util . Maps . asSimple ; 
 - 
 public abstract class DefaultHttpMessage implements HttpMessage { 
 private final HttpProtocolVersion version ; 
 private final MessageContent content ; 
 @ @ - 25 , 8 + 23 , 8 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 } 
 
 @ Override 
 - public ImmutableMap < String , String > getHeaders ( ) { 
 - return asSimple ( this . headers ) ; 
 + public ImmutableMap < String , String [ ] > getHeaders ( ) { 
 + return this . headers ; 
 } 
 
 @ Override 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index f67feb0 . . afbcd07 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 177 , 8 + 177 , 12 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 
 FullHttpRequest request = new DefaultFullHttpRequest ( HttpVersion . valueOf ( getVersion ( ) . text ( ) ) , 
 io . netty . handler . codec . http . HttpMethod . valueOf ( method . name ( ) ) , encoder . toString ( ) , buffer ) ; 
 - for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { 
 - request . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + 
 + for ( Map . Entry < String , String [ ] > entry : getHeaders ( ) . entrySet ( ) ) { 
 + String key = entry . getKey ( ) ; 
 + for ( String value : entry . getValue ( ) ) { 
 + request . headers ( ) . add ( key , value ) ; 
 + } 
 } 
 
 return request ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 index cc1c3ac . . ba562e3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 @ @ - 12 , 8 + 12 , 6 @ @ import io . netty . handler . codec . http . HttpVersion ; 
 
 import java . util . Map ; 
 
 - import static com . github . dreamhead . moco . util . Maps . asSimple ; 
 - 
 public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 private HttpProtocolVersion version ; 
 private Map < String , String [ ] > headers = Maps . newHashMap ( ) ; 
 @ @ - 80 , 8 + 78 , 8 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 } 
 
 @ Override 
 - public ImmutableMap < String , String > getHeaders ( ) { 
 - return asSimple ( ImmutableMap . copyOf ( this . headers ) ) ; 
 + public ImmutableMap < String , String [ ] > getHeaders ( ) { 
 + return ImmutableMap . copyOf ( this . headers ) ; 
 } 
 
 @ Override 
 @ @ - 104 , 8 + 102 , 12 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 public FullHttpResponse toFullResponse ( ) { 
 FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , 
 HttpResponseStatus . valueOf ( this . status ) ) ; 
 - for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { 
 - response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + 
 + for ( Map . Entry < String , String [ ] > entry : getHeaders ( ) . entrySet ( ) ) { 
 + String key = entry . getKey ( ) ; 
 + for ( String value : entry . getValue ( ) ) { 
 + response . headers ( ) . add ( key , value ) ; 
 + } 
 } 
 
 if ( this . content ! = null ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 index 11964e1 . . 70d8de4 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateRequest . java 
 @ @ - 7 , 6 + 7 , 8 @ @ import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 import com . google . common . collect . ImmutableMap ; 
 
 + import static com . github . dreamhead . moco . util . Maps . asSimple ; 
 + 
 public class TemplateRequest { 
 private Request request ; 
 
 @ @ - 28 , 7 + 30 , 7 @ @ public class TemplateRequest { 
 
 public ImmutableMap < String , String > getHeaders ( ) { 
 if ( this . request instanceof HttpRequest ) { 
 - return ( ( HttpRequest ) this . request ) . getHeaders ( ) ; 
 + return asSimple ( ( ( HttpRequest ) this . request ) . getHeaders ( ) ) ; 
 } 
 
 throw new IllegalArgumentException ( " Request is not HTTP request " ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java 
 index dbf905e . . fa5d6a2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / HttpHeaders . java 
 @ @ - 9 , 10 + 9 , 10 @ @ public final class HttpHeaders { 
 return key . equalsIgnoreCase ( name ) ; 
 } 
 
 - public static Predicate < Map . Entry < String , String > > isForHeaderName ( final String key ) { 
 - return new Predicate < Map . Entry < String , String > > ( ) { 
 + public static Predicate < Map . Entry < String , String [ ] > > isForHeaderName ( final String key ) { 
 + return new Predicate < Map . Entry < String , String [ ] > > ( ) { 
 @ Override 
 - public boolean apply ( final Map . Entry < String , String > input ) { 
 + public boolean apply ( final Map . Entry < String , String [ ] > input ) { 
 return isSameHeaderName ( input . getKey ( ) , key ) ; 
 } 
 } ;
