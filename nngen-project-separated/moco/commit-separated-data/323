BLEU SCORE: 0.09535414040914189

TEST MSG: replaced iterable with arrays in commons io watcher factory
GENERATED MSG: introduced watcher factory

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index 3b7c0b5 . . 414c558 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 8 , 12 + 8 , 11 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> - import java . util . Arrays ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public class CommonsIoWatcherFactory implements WatcherFactory { <nl> - private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> + private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; ` <nl> <nl> @ Override <nl> public MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> @ @ - 25 , 10 + 24 , 10 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { <nl> return new FileMocoRunnerWatcher ( files [ 0 ] , createListener ( fileRunner ) ) ; <nl> } <nl> <nl> - return createFilesWatcher ( Arrays . asList ( files ) , createListener ( fileRunner ) ) ; <nl> + return createFilesWatcher ( files , createListener ( fileRunner ) ) ; <nl> } <nl> <nl> - private MocoRunnerWatcher createFilesWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { <nl> + private MocoRunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> return new FilesMocoRunnerWatcher ( from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { <nl> @ Override <nl> public FileMocoRunnerWatcher apply ( final File file ) {
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 3b7c0b5 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . google . common . base . Function ; <nl> + import org . apache . commons . io . monitor . FileAlterationListener ; <nl> + import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + public class CommonsIoWatcherFactory implements WatcherFactory { <nl> + private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> + <nl> + @ Override <nl> + public MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + <nl> + if ( files . length = = 1 ) { <nl> + return new FileMocoRunnerWatcher ( files [ 0 ] , createListener ( fileRunner ) ) ; <nl> + } <nl> + <nl> + return createFilesWatcher ( Arrays . asList ( files ) , createListener ( fileRunner ) ) ; <nl> + } <nl> + <nl> + private MocoRunnerWatcher createFilesWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { <nl> + return new FilesMocoRunnerWatcher ( from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { <nl> + @ Override <nl> + public FileMocoRunnerWatcher apply ( final File file ) { <nl> + return new FileMocoRunnerWatcher ( file , listener ) ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + <nl> + private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { <nl> + return new FileAlterationListenerAdaptor ( ) { <nl> + @ Override <nl> + public void onFileChange ( final File file ) { <nl> + logger . info ( " { } change detected . " , file . getName ( ) ) ; <nl> + try { <nl> + fileRunner . restart ( ) ; <nl> + } catch ( Exception e ) { <nl> + logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; <nl> + logger . error ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> index 7825744 . . 9a47bfd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> @ @ - 10 , 13 + 10 , 8 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { <nl> private final Iterable < FileMocoRunnerWatcher > monitors ; <nl> <nl> - public FilesMocoRunnerWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { <nl> - this . monitors = from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { <nl> - @ Override <nl> - public FileMocoRunnerWatcher apply ( final File file ) { <nl> - return new FileMocoRunnerWatcher ( file , listener ) ; <nl> - } <nl> - } ) ; <nl> + public FilesMocoRunnerWatcher ( final Iterable < FileMocoRunnerWatcher > monitors ) { <nl> + this . monitors = monitors ; <nl> } <nl> <nl> @ Override <nl> @ @ - 32 , 4 + 27 , 5 @ @ public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { <nl> monitor . stopMonitor ( ) ; <nl> } <nl> } <nl> + <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> index a9ada53 . . 3d8e7c3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> @ @ - 4 , 14 + 4 , 11 @ @ import com . github . dreamhead . moco . runner . FileRunner ; <nl> import com . github . dreamhead . moco . runner . Runner ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableList ; <nl> - import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> import java . io . File ; <nl> <nl> public class MonitorFactory { <nl> - private static Logger logger = LoggerFactory . getLogger ( MonitorFactory . class ) ; <nl> + private WatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort , <nl> @ @ - 24 , 29 + 21 , 14 @ @ public class MonitorFactory { <nl> } ) ; <nl> } <nl> <nl> - public FileMocoRunnerWatcher createConfigurationWatcher ( final File configuration , final FileRunner fileRunner ) { <nl> - return new FileMocoRunnerWatcher ( configuration , createListener ( fileRunner ) ) ; <nl> + public MocoRunnerWatcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> + return factory . createWatcher ( fileRunner , file ) ; <nl> } <nl> <nl> public MocoRunnerWatcher createSettingWatcher ( final File settingsFile , <nl> final Iterable < File > configurationFiles , <nl> final FileRunner fileRunner ) { <nl> ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> - return new FilesMocoRunnerWatcher ( files , createListener ( fileRunner ) ) ; <nl> - } <nl> - <nl> - private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { <nl> - return new FileAlterationListenerAdaptor ( ) { <nl> - @ Override <nl> - public void onFileChange ( final File file ) { <nl> - logger . info ( " { } change detected . " , file . getName ( ) ) ; <nl> - try { <nl> - fileRunner . restart ( ) ; <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; <nl> - logger . error ( e . getMessage ( ) ) ; <nl> - } <nl> - } <nl> - } ; <nl> + return factory . createWatcher ( fileRunner , files . toArray ( new File [ 0 ] ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 694b1bf <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public interface WatcherFactory { <nl> + MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; <nl> + }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 index 3b7c0b5 . . 414c558 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 8 , 12 + 8 , 11 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import java . io . File ; 
 - import java . util . Arrays ; 
 
 import static com . google . common . collect . FluentIterable . from ; 
 
 public class CommonsIoWatcherFactory implements WatcherFactory { 
 - private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; 
 + private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; ` 
 
 @ Override 
 public MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 @ @ - 25 , 10 + 24 , 10 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { 
 return new FileMocoRunnerWatcher ( files [ 0 ] , createListener ( fileRunner ) ) ; 
 } 
 
 - return createFilesWatcher ( Arrays . asList ( files ) , createListener ( fileRunner ) ) ; 
 + return createFilesWatcher ( files , createListener ( fileRunner ) ) ; 
 } 
 
 - private MocoRunnerWatcher createFilesWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { 
 + private MocoRunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { 
 return new FilesMocoRunnerWatcher ( from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { 
 @ Override 
 public FileMocoRunnerWatcher apply ( final File file ) {

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 new file mode 100644 
 index 0000000 . . 3b7c0b5 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + import com . google . common . base . Function ; 
 + import org . apache . commons . io . monitor . FileAlterationListener ; 
 + import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 + public class CommonsIoWatcherFactory implements WatcherFactory { 
 + private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; 
 + 
 + @ Override 
 + public MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 + if ( files . length = = 0 ) { 
 + throw new IllegalArgumentException ( " No file is specified " ) ; 
 + } 
 + 
 + if ( files . length = = 1 ) { 
 + return new FileMocoRunnerWatcher ( files [ 0 ] , createListener ( fileRunner ) ) ; 
 + } 
 + 
 + return createFilesWatcher ( Arrays . asList ( files ) , createListener ( fileRunner ) ) ; 
 + } 
 + 
 + private MocoRunnerWatcher createFilesWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { 
 + return new FilesMocoRunnerWatcher ( from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { 
 + @ Override 
 + public FileMocoRunnerWatcher apply ( final File file ) { 
 + return new FileMocoRunnerWatcher ( file , listener ) ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { 
 + return new FileAlterationListenerAdaptor ( ) { 
 + @ Override 
 + public void onFileChange ( final File file ) { 
 + logger . info ( " { } change detected . " , file . getName ( ) ) ; 
 + try { 
 + fileRunner . restart ( ) ; 
 + } catch ( Exception e ) { 
 + logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; 
 + logger . error ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java 
 index 7825744 . . 9a47bfd 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java 
 @ @ - 10 , 13 + 10 , 8 @ @ import static com . google . common . collect . FluentIterable . from ; 
 public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { 
 private final Iterable < FileMocoRunnerWatcher > monitors ; 
 
 - public FilesMocoRunnerWatcher ( final Iterable < File > files , final FileAlterationListener listener ) { 
 - this . monitors = from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { 
 - @ Override 
 - public FileMocoRunnerWatcher apply ( final File file ) { 
 - return new FileMocoRunnerWatcher ( file , listener ) ; 
 - } 
 - } ) ; 
 + public FilesMocoRunnerWatcher ( final Iterable < FileMocoRunnerWatcher > monitors ) { 
 + this . monitors = monitors ; 
 } 
 
 @ Override 
 @ @ - 32 , 4 + 27 , 5 @ @ public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { 
 monitor . stopMonitor ( ) ; 
 } 
 } 
 + 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 index a9ada53 . . 3d8e7c3 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 @ @ - 4 , 14 + 4 , 11 @ @ import com . github . dreamhead . moco . runner . FileRunner ; 
 import com . github . dreamhead . moco . runner . Runner ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableList ; 
 - import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 
 import java . io . File ; 
 
 public class MonitorFactory { 
 - private static Logger logger = LoggerFactory . getLogger ( MonitorFactory . class ) ; 
 + private WatcherFactory factory = new CommonsIoWatcherFactory ( ) ; 
 
 public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , 
 final Optional < Integer > shutdownPort , 
 @ @ - 24 , 29 + 21 , 14 @ @ public class MonitorFactory { 
 } ) ; 
 } 
 
 - public FileMocoRunnerWatcher createConfigurationWatcher ( final File configuration , final FileRunner fileRunner ) { 
 - return new FileMocoRunnerWatcher ( configuration , createListener ( fileRunner ) ) ; 
 + public MocoRunnerWatcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { 
 + return factory . createWatcher ( fileRunner , file ) ; 
 } 
 
 public MocoRunnerWatcher createSettingWatcher ( final File settingsFile , 
 final Iterable < File > configurationFiles , 
 final FileRunner fileRunner ) { 
 ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; 
 - return new FilesMocoRunnerWatcher ( files , createListener ( fileRunner ) ) ; 
 - } 
 - 
 - private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { 
 - return new FileAlterationListenerAdaptor ( ) { 
 - @ Override 
 - public void onFileChange ( final File file ) { 
 - logger . info ( " { } change detected . " , file . getName ( ) ) ; 
 - try { 
 - fileRunner . restart ( ) ; 
 - } catch ( Exception e ) { 
 - logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; 
 - logger . error ( e . getMessage ( ) ) ; 
 - } 
 - } 
 - } ; 
 + return factory . createWatcher ( fileRunner , files . toArray ( new File [ 0 ] ) ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 new file mode 100644 
 index 0000000 . . 694b1bf 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + 
 + import java . io . File ; 
 + 
 + public interface WatcherFactory { 
 + MocoRunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; 
 + }
