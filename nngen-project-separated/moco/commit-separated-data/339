BLEU SCORE: 0.05522397783539471

TEST MSG: removed unused import in abstract proxy response handler
GENERATED MSG: fix a bug on proxy feature

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 0294118 . . 6b09a12 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import org . apache . http . Header ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . HttpEntityEnclosingRequest ; <nl> import org . apache . http . client . config . RequestConfig ; <nl> - import org . apache . http . client . methods . CloseableHttpResponse ; <nl> import org . apache . http . client . methods . HttpDelete ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> import org . apache . http . client . methods . HttpHead ; <nl> @ @ - 66 , 7 + 65 , 6 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> . setConnectionManager ( connManager ) <nl> . setConnectionManagerShared ( true ) <nl> . build ( ) ; <nl> - <nl> } <nl> <nl> protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; <nl> @ @ - 155 , 7 + 153 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpResponse setupResponse ( final HttpRequest request , <nl> - final org . apache . http . HttpResponse remoteResponse ) throws IOException { <nl> + final org . apache . http . HttpResponse remoteResponse ) throws IOException { <nl> int statusCode = remoteResponse . getStatusLine ( ) . getStatusCode ( ) ; <nl> if ( statusCode = = HttpResponseStatus . BAD _ REQUEST . code ( ) ) { <nl> return failover . failover ( request ) ; <nl> @ @ - 250 , 7 + 248 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpRequestBase prepareRemoteRequest ( final HttpRequest request , final URL remoteUrl ) { <nl> - FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; <nl> + FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; <nl> return prepareRemoteRequest ( httpRequest , remoteUrl ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index f311a83 . . 4e2612a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 100 , 6 + 100 , 10 @ @ public class ProxyResponseHandler implements ResponseHandler { <nl> private HttpRequestBase createRemoteRequest ( HttpRequest request , URL url ) { <nl> HttpRequestBase remoteRequest = createBaseRequest ( url , request ) ; <nl> for ( Map . Entry < String , String > entry : request . headers ( ) ) { <nl> + if ( entry . getKey ( ) . equals ( " Host " ) ) { <nl> + continue ; <nl> + } <nl> + <nl> remoteRequest . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index f893950 . . ce03a9c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 6 , 7 + 6 , 10 @ @ import org . apache . http . HttpVersion ; <nl> import org . apache . http . StatusLine ; <nl> import org . apache . http . client . fluent . Content ; <nl> import org . apache . http . client . fluent . Request ; <nl> + import org . apache . http . client . methods . HttpGet ; <nl> + import org . apache . http . client . methods . HttpRequestBase ; <nl> import org . apache . http . entity . ContentType ; <nl> + import org . apache . http . impl . client . DefaultHttpClient ; <nl> import org . hamcrest . Matcher ; <nl> import org . hamcrest . core . SubstringMatcher ; <nl> import org . junit . Test ; <nl> @ @ - 261 , 4 + 264 , 17 @ @ public class MocoProxyTest extends AbstractMocoTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ be _ able _ to _ connect _ to _ baidu ( ) throws Exception { <nl> + server . response ( proxy ( " http : / / www . baidu . com / " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + int statusCode = Request . Get ( root ( ) ) . execute ( ) . returnResponse ( ) . getStatusLine ( ) . getStatusCode ( ) ; <nl> + assertThat ( statusCode , is ( 200 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index 0294118 . . 6b09a12 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import org . apache . http . Header ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . HttpEntityEnclosingRequest ; 
 import org . apache . http . client . config . RequestConfig ; 
 - import org . apache . http . client . methods . CloseableHttpResponse ; 
 import org . apache . http . client . methods . HttpDelete ; 
 import org . apache . http . client . methods . HttpGet ; 
 import org . apache . http . client . methods . HttpHead ; 
 @ @ - 66 , 7 + 65 , 6 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 . setConnectionManager ( connManager ) 
 . setConnectionManagerShared ( true ) 
 . build ( ) ; 
 - 
 } 
 
 protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; 
 @ @ - 155 , 7 + 153 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 private HttpResponse setupResponse ( final HttpRequest request , 
 - final org . apache . http . HttpResponse remoteResponse ) throws IOException { 
 + final org . apache . http . HttpResponse remoteResponse ) throws IOException { 
 int statusCode = remoteResponse . getStatusLine ( ) . getStatusCode ( ) ; 
 if ( statusCode = = HttpResponseStatus . BAD _ REQUEST . code ( ) ) { 
 return failover . failover ( request ) ; 
 @ @ - 250 , 7 + 248 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 private HttpRequestBase prepareRemoteRequest ( final HttpRequest request , final URL remoteUrl ) { 
 - FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; 
 + FullHttpRequest httpRequest = ( ( DefaultHttpRequest ) request ) . toFullHttpRequest ( ) ; 
 return prepareRemoteRequest ( httpRequest , remoteUrl ) ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 index f311a83 . . 4e2612a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 @ @ - 100 , 6 + 100 , 10 @ @ public class ProxyResponseHandler implements ResponseHandler { 
 private HttpRequestBase createRemoteRequest ( HttpRequest request , URL url ) { 
 HttpRequestBase remoteRequest = createBaseRequest ( url , request ) ; 
 for ( Map . Entry < String , String > entry : request . headers ( ) ) { 
 + if ( entry . getKey ( ) . equals ( " Host " ) ) { 
 + continue ; 
 + } 
 + 
 remoteRequest . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 index f893950 . . ce03a9c 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 @ @ - 6 , 7 + 6 , 10 @ @ import org . apache . http . HttpVersion ; 
 import org . apache . http . StatusLine ; 
 import org . apache . http . client . fluent . Content ; 
 import org . apache . http . client . fluent . Request ; 
 + import org . apache . http . client . methods . HttpGet ; 
 + import org . apache . http . client . methods . HttpRequestBase ; 
 import org . apache . http . entity . ContentType ; 
 + import org . apache . http . impl . client . DefaultHttpClient ; 
 import org . hamcrest . Matcher ; 
 import org . hamcrest . core . SubstringMatcher ; 
 import org . junit . Test ; 
 @ @ - 261 , 4 + 264 , 17 @ @ public class MocoProxyTest extends AbstractMocoTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ be _ able _ to _ connect _ to _ baidu ( ) throws Exception { 
 + server . response ( proxy ( " http : / / www . baidu . com / " ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + int statusCode = Request . Get ( root ( ) ) . execute ( ) . returnResponse ( ) . getStatusLine ( ) . getStatusCode ( ) ; 
 + assertThat ( statusCode , is ( 200 ) ) ; 
 + } 
 + } ) ; 
 + } 
 }
