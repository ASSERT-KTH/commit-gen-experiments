BLEU SCORE: 0.07495553473355841

TEST MSG: replaced immutable list with fluent iterable in dynamic response handler factory
GENERATED MSG: used immutable list for seq

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index dd1ccf2 . . 3eefd35 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 10 , 7 + 10 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 46 , 15 + 45 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> FluentIterable < ResponseHandler > handlers = from ( getFields ( responseSetting . getClass ( ) ) ) <nl> . filter ( isValidField ( responseSetting ) ) <nl> . transform ( fieldToResponseHandler ( responseSetting ) ) ; <nl> - return getResponseHandler ( handlers . toList ( ) ) ; <nl> + return getResponseHandler ( handlers ) ; <nl> } <nl> <nl> - private ResponseHandler getResponseHandler ( final ImmutableList < ResponseHandler > list ) { <nl> - if ( list . size ( ) = = 1 ) { <nl> - return list . get ( 0 ) ; <nl> + private ResponseHandler getResponseHandler ( final FluentIterable < ResponseHandler > handlers ) { <nl> + if ( handlers . size ( ) = = 1 ) { <nl> + return handlers . get ( 0 ) ; <nl> } <nl> <nl> - return and ( list ) ; <nl> + return and ( handlers ) ; <nl> } <nl> <nl> private boolean isResource ( final String name ) { <nl> @ @ - 135 , 7 + 134 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> private ResponseHandler createCompositeHandler ( final String name , final Map < String , TextContainer > map ) { <nl> - ImmutableList < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) . toList ( ) ; <nl> + FluentIterable < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) ; <nl> return getResponseHandler ( handlers ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index b37d9f0 . . 13ddff4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import com . github . dreamhead . moco . util . URLs ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> + import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import io . netty . handler . codec . http . HttpHeaders ; <nl> <nl> @ @ - 291 , 15 + 292 , 19 @ @ public class Moco { <nl> } <nl> <nl> public static ResponseHandler seq ( final String . . . contents ) { <nl> - return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) . toArray ( ResponseHandler . class ) ) ; <nl> + return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) . toList ( ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final Resource . . . contents ) { <nl> - return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) . toArray ( ResponseHandler . class ) ) ; <nl> + return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) . toList ( ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { <nl> - return new SequenceContentHandler ( handlers ) ; <nl> + return seq ( copyOf ( handlers ) ) ; <nl> + } <nl> + <nl> + private static ResponseHandler seq ( ImmutableList < ResponseHandler > list ) { <nl> + return new SequenceContentHandler ( list ) ; <nl> } <nl> <nl> public static ContentResource file ( final String filename ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java <nl> index c2f70a1 . . cc3cdfc 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java <nl> @ @ - 5 , 27 + 5 , 28 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . FluentIterable ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> public class SequenceContentHandler extends AbstractResponseHandler { <nl> - private final ResponseHandler [ ] handlers ; <nl> + private final ImmutableList < ResponseHandler > handlers ; <nl> private int index ; <nl> <nl> - public SequenceContentHandler ( final ResponseHandler [ ] handlers ) { <nl> + public SequenceContentHandler ( final ImmutableList < ResponseHandler > handlers ) { <nl> this . handlers = handlers ; <nl> } <nl> <nl> @ Override <nl> public void writeToResponse ( final SessionContext context ) { <nl> - handlers [ current ( ) ] . writeToResponse ( context ) ; <nl> + handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> } <nl> <nl> private int current ( ) { <nl> int current = this . index ; <nl> - if ( + + index > = handlers . length ) { <nl> - index = handlers . length - 1 ; <nl> + if ( + + index > = handlers . size ( ) ) { <nl> + index = handlers . size ( ) - 1 ; <nl> } <nl> <nl> return current ; <nl> @ @ - 38 , 7 + 39 , 7 @ @ public class SequenceContentHandler extends AbstractResponseHandler { <nl> } <nl> <nl> FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; <nl> - return new SequenceContentHandler ( transformedResources . toArray ( ResponseHandler . class ) ) ; <nl> + return new SequenceContentHandler ( transformedResources . toList ( ) ) ; <nl> } <nl> <nl> private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) {

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index dd1ccf2 . . 3eefd35 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 10 , 7 + 10 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . FluentIterable ; 
 - import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . Maps ; 
 @ @ - 46 , 15 + 45 , 15 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 FluentIterable < ResponseHandler > handlers = from ( getFields ( responseSetting . getClass ( ) ) ) 
 . filter ( isValidField ( responseSetting ) ) 
 . transform ( fieldToResponseHandler ( responseSetting ) ) ; 
 - return getResponseHandler ( handlers . toList ( ) ) ; 
 + return getResponseHandler ( handlers ) ; 
 } 
 
 - private ResponseHandler getResponseHandler ( final ImmutableList < ResponseHandler > list ) { 
 - if ( list . size ( ) = = 1 ) { 
 - return list . get ( 0 ) ; 
 + private ResponseHandler getResponseHandler ( final FluentIterable < ResponseHandler > handlers ) { 
 + if ( handlers . size ( ) = = 1 ) { 
 + return handlers . get ( 0 ) ; 
 } 
 
 - return and ( list ) ; 
 + return and ( handlers ) ; 
 } 
 
 private boolean isResource ( final String name ) { 
 @ @ - 135 , 7 + 134 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 } 
 
 private ResponseHandler createCompositeHandler ( final String name , final Map < String , TextContainer > map ) { 
 - ImmutableList < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) . toList ( ) ; 
 + FluentIterable < ResponseHandler > handlers = from ( map . entrySet ( ) ) . transform ( toTargetHandler ( name ) ) ; 
 return getResponseHandler ( handlers ) ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index b37d9f0 . . 13ddff4 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import com . github . dreamhead . moco . util . URLs ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . FluentIterable ; 
 + import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import io . netty . handler . codec . http . HttpHeaders ; 
 
 @ @ - 291 , 15 + 292 , 19 @ @ public class Moco { 
 } 
 
 public static ResponseHandler seq ( final String . . . contents ) { 
 - return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) . toArray ( ResponseHandler . class ) ) ; 
 + return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) . toList ( ) ) ; 
 } 
 
 public static ResponseHandler seq ( final Resource . . . contents ) { 
 - return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) . toArray ( ResponseHandler . class ) ) ; 
 + return seq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) . toList ( ) ) ; 
 } 
 
 public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { 
 - return new SequenceContentHandler ( handlers ) ; 
 + return seq ( copyOf ( handlers ) ) ; 
 + } 
 + 
 + private static ResponseHandler seq ( ImmutableList < ResponseHandler > list ) { 
 + return new SequenceContentHandler ( list ) ; 
 } 
 
 public static ContentResource file ( final String filename ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java 
 index c2f70a1 . . cc3cdfc 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java 
 @ @ - 5 , 27 + 5 , 28 @ @ import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . internal . SessionContext ; 
 import com . google . common . base . Function ; 
 import com . google . common . collect . FluentIterable ; 
 + import com . google . common . collect . ImmutableList ; 
 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 
 public class SequenceContentHandler extends AbstractResponseHandler { 
 - private final ResponseHandler [ ] handlers ; 
 + private final ImmutableList < ResponseHandler > handlers ; 
 private int index ; 
 
 - public SequenceContentHandler ( final ResponseHandler [ ] handlers ) { 
 + public SequenceContentHandler ( final ImmutableList < ResponseHandler > handlers ) { 
 this . handlers = handlers ; 
 } 
 
 @ Override 
 public void writeToResponse ( final SessionContext context ) { 
 - handlers [ current ( ) ] . writeToResponse ( context ) ; 
 + handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 } 
 
 private int current ( ) { 
 int current = this . index ; 
 - if ( + + index > = handlers . length ) { 
 - index = handlers . length - 1 ; 
 + if ( + + index > = handlers . size ( ) ) { 
 + index = handlers . size ( ) - 1 ; 
 } 
 
 return current ; 
 @ @ - 38 , 7 + 39 , 7 @ @ public class SequenceContentHandler extends AbstractResponseHandler { 
 } 
 
 FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; 
 - return new SequenceContentHandler ( transformedResources . toArray ( ResponseHandler . class ) ) ; 
 + return new SequenceContentHandler ( transformedResources . toList ( ) ) ; 
 } 
 
 private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) {
