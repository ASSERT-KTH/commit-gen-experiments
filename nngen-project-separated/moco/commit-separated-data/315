BLEU SCORE: 0.07986788803078405

TEST MSG: created directoryOf in files
GENERATED MSG: introduced abstract watcher factory

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index abf9c8d . . fcf3dfc 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 28 , 6 + 28 , 15 @ @ public final class Files { <nl> return new File ( new File ( path1 ) , path2 ) ; <nl> } <nl> <nl> + public static File directoryOf ( final File file ) { <nl> + File parentFile = file . getParentFile ( ) ; <nl> + if ( parentFile = = null ) { <nl> + return new File ( " . " ) ; <nl> + } <nl> + <nl> + return parentFile ; <nl> + } <nl> + <nl> private Files ( ) { <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index b626b6a . . 767add3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import java . io . File ; <nl> import java . io . FileFilter ; <nl> <nl> import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; <nl> + import static com . github . dreamhead . moco . util . Files . directoryOf ; <nl> <nl> public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { <nl> @ @ - 26 , 22 + 27 , 13 @ @ public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> } <nl> <nl> private FileAlterationMonitor monitorFile ( final File file , final FileAlterationListener listener ) { <nl> - File parentFile = file . getParentFile ( ) ; <nl> - File directory = toDirectory ( parentFile ) ; <nl> + File directory = directoryOf ( file ) ; <nl> FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; <nl> observer . addListener ( listener ) ; <nl> <nl> return new FileAlterationMonitor ( INTERVAL , observer ) ; <nl> } <nl> <nl> - private File toDirectory ( final File parentFile ) { <nl> - if ( parentFile = = null ) { <nl> - return new File ( " . " ) ; <nl> - } <nl> - <nl> - return parentFile ; <nl> - } <nl> - <nl> private FileFilter sameFile ( final File file ) { <nl> return new FileFilter ( ) { <nl> @ Override
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 413be88 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> + protected abstract Watcher doCreate ( final FileRunner fileRunner , final File file ) ; <nl> + <nl> + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + <nl> + if ( files . length = = 1 ) { <nl> + return doCreate ( fileRunner , files [ 0 ] ) ; <nl> + } <nl> + <nl> + return doCreate ( fileRunner , files ) ; <nl> + } <nl> + <nl> + private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> + @ Override <nl> + public Watcher apply ( final File file ) { <nl> + return doCreate ( fileRunner , file ) ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index f533e49 . . 15f5aaf 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import com . github . dreamhead . moco . runner . FileRunner ; <nl> - import com . google . common . base . Function ; <nl> import org . apache . commons . io . monitor . FileAlterationListener ; <nl> import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> @ @ - 13 , 37 + 12 , 12 @ @ import java . io . File ; <nl> import java . io . FileFilter ; <nl> <nl> import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class CommonsIoWatcherFactory implements FileWatcherFactory { <nl> + public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> <nl> - @ Override <nl> - public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> - if ( files . length = = 0 ) { <nl> - throw new IllegalArgumentException ( " No file is specified " ) ; <nl> - } <nl> - <nl> - FileAlterationListener listener = createListener ( fileRunner ) ; <nl> - if ( files . length = = 1 ) { <nl> - File file = files [ 0 ] ; <nl> - return createWatcher ( file , listener ) ; <nl> - } <nl> - <nl> - return createFilesWatcher ( files , listener ) ; <nl> - } <nl> - <nl> - private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> - return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; <nl> - } <nl> - <nl> - private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> - @ Override <nl> - public Watcher apply ( final File file ) { <nl> - return createWatcher ( file , listener ) ; <nl> - } <nl> - } ) ) ; <nl> + protected Watcher doCreate ( final FileRunner fileRunner , final File file ) { <nl> + return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , createListener ( fileRunner ) ) ) ) ; <nl> } <nl> <nl> private FileAlterationListener createListener ( final FileRunner fileRunner ) { <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 13e5cc4 . . cc8a2d8 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> - import com . github . dreamhead . moco . util . Idles ; <nl> import org . apache . commons . io . FilenameUtils ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> @ @ - 10 , 7 + 9 , 6 @ @ import java . io . ByteArrayOutputStream ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . PrintStream ; <nl> - import java . util . concurrent . TimeUnit ; <nl> <nl> import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 index abf9c8d . . fcf3dfc 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 28 , 6 + 28 , 15 @ @ public final class Files { 
 return new File ( new File ( path1 ) , path2 ) ; 
 } 
 
 + public static File directoryOf ( final File file ) { 
 + File parentFile = file . getParentFile ( ) ; 
 + if ( parentFile = = null ) { 
 + return new File ( " . " ) ; 
 + } 
 + 
 + return parentFile ; 
 + } 
 + 
 private Files ( ) { 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 index b626b6a . . 767add3 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import java . io . File ; 
 import java . io . FileFilter ; 
 
 import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; 
 + import static com . github . dreamhead . moco . util . Files . directoryOf ; 
 
 public class CommonsIoWatcherFactory extends AbstractWatcherFactory { 
 protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { 
 @ @ - 26 , 22 + 27 , 13 @ @ public class CommonsIoWatcherFactory extends AbstractWatcherFactory { 
 } 
 
 private FileAlterationMonitor monitorFile ( final File file , final FileAlterationListener listener ) { 
 - File parentFile = file . getParentFile ( ) ; 
 - File directory = toDirectory ( parentFile ) ; 
 + File directory = directoryOf ( file ) ; 
 FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; 
 observer . addListener ( listener ) ; 
 
 return new FileAlterationMonitor ( INTERVAL , observer ) ; 
 } 
 
 - private File toDirectory ( final File parentFile ) { 
 - if ( parentFile = = null ) { 
 - return new File ( " . " ) ; 
 - } 
 - 
 - return parentFile ; 
 - } 
 - 
 private FileFilter sameFile ( final File file ) { 
 return new FileFilter ( ) { 
 @ Override

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 new file mode 100644 
 index 0000000 . . 413be88 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + import com . google . common . base . Function ; 
 + 
 + import java . io . File ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 + public abstract class AbstractWatcherFactory implements FileWatcherFactory { 
 + protected abstract Watcher doCreate ( final FileRunner fileRunner , final File file ) ; 
 + 
 + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 + if ( files . length = = 0 ) { 
 + throw new IllegalArgumentException ( " No file is specified " ) ; 
 + } 
 + 
 + if ( files . length = = 1 ) { 
 + return doCreate ( fileRunner , files [ 0 ] ) ; 
 + } 
 + 
 + return doCreate ( fileRunner , files ) ; 
 + } 
 + 
 + private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { 
 + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 + @ Override 
 + public Watcher apply ( final File file ) { 
 + return doCreate ( fileRunner , file ) ; 
 + } 
 + } ) ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 index f533e49 . . 15f5aaf 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . runner . watcher ; 
 
 import com . github . dreamhead . moco . runner . FileRunner ; 
 - import com . google . common . base . Function ; 
 import org . apache . commons . io . monitor . FileAlterationListener ; 
 import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 @ @ - 13 , 37 + 12 , 12 @ @ import java . io . File ; 
 import java . io . FileFilter ; 
 
 import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; 
 - import static com . google . common . collect . FluentIterable . from ; 
 
 - public class CommonsIoWatcherFactory implements FileWatcherFactory { 
 + public class CommonsIoWatcherFactory extends AbstractWatcherFactory { 
 private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; 
 
 - @ Override 
 - public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 - if ( files . length = = 0 ) { 
 - throw new IllegalArgumentException ( " No file is specified " ) ; 
 - } 
 - 
 - FileAlterationListener listener = createListener ( fileRunner ) ; 
 - if ( files . length = = 1 ) { 
 - File file = files [ 0 ] ; 
 - return createWatcher ( file , listener ) ; 
 - } 
 - 
 - return createFilesWatcher ( files , listener ) ; 
 - } 
 - 
 - private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { 
 - return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; 
 - } 
 - 
 - private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { 
 - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 - @ Override 
 - public Watcher apply ( final File file ) { 
 - return createWatcher ( file , listener ) ; 
 - } 
 - } ) ) ; 
 + protected Watcher doCreate ( final FileRunner fileRunner , final File file ) { 
 + return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , createListener ( fileRunner ) ) ) ) ; 
 } 
 
 private FileAlterationListener createListener ( final FileRunner fileRunner ) { 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 index 13e5cc4 . . cc8a2d8 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 - import com . github . dreamhead . moco . util . Idles ; 
 import org . apache . commons . io . FilenameUtils ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 @ @ - 10 , 7 + 9 , 6 @ @ import java . io . ByteArrayOutputStream ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . PrintStream ; 
 - import java . util . concurrent . TimeUnit ; 
 
 import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ;
