BLEU SCORE: 0.10552670315936319

TEST MSG: added tests for merging socket server with different port
GENERATED MSG: added actual socket server test

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> index 792e8ba . . 834924f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> @ @ - 43 , 6 + 43 , 37 @ @ public class ActualSocketServerTest { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ merge _ socket _ servers _ with _ first _ port ( ) throws Exception { <nl> + SocketServer server = socketServer ( 12306 ) ; <nl> + SocketServer secondServer = socketServer ( ) ; <nl> + <nl> + <nl> + final SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; <nl> + <nl> + running ( newServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( newServer . port ( ) , is ( 12306 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ merge _ socket _ servers _ with _ second _ port ( ) throws Exception { <nl> + SocketServer server = socketServer ( ) ; <nl> + SocketServer secondServer = socketServer ( 12307 ) ; <nl> + <nl> + final SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; <nl> + <nl> + running ( newServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( newServer . port ( ) , is ( 12307 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private String line ( String text ) { <nl> return text + " \ r \ n " ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 792e8ba <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + package com . github . dreamhead . moco . internal ; <nl> + <nl> + import com . github . dreamhead . moco . Runnable ; <nl> + import com . github . dreamhead . moco . SocketServer ; <nl> + import com . github . dreamhead . moco . helper . MocoSocketHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . socketServer ; <nl> + import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . * ; <nl> + <nl> + public class ActualSocketServerTest { <nl> + private MocoSocketHelper helper ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ merge _ socket _ servers ( ) throws Exception { <nl> + SocketServer server = socketServer ( 12306 ) ; <nl> + SocketServer secondServer = socketServer ( 12306 ) ; <nl> + <nl> + server . request ( by ( " foo " ) ) . response ( line ( " bar " ) ) ; <nl> + secondServer . request ( by ( " foo1 " ) ) . response ( line ( " bar1 " ) ) ; <nl> + <nl> + SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; <nl> + <nl> + running ( newServer , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + helper . connect ( ) ; <nl> + assertThat ( helper . send ( " foo " ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . send ( " foo1 " ) , is ( " bar1 " ) ) ; <nl> + helper . close ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private String line ( String text ) { <nl> + return text + " \ r \ n " ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java 
 index 792e8ba . . 834924f 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java 
 @ @ - 43 , 6 + 43 , 37 @ @ public class ActualSocketServerTest { 
 } ) ; 
 } 
 
 + @ Test 
 + public void should _ merge _ socket _ servers _ with _ first _ port ( ) throws Exception { 
 + SocketServer server = socketServer ( 12306 ) ; 
 + SocketServer secondServer = socketServer ( ) ; 
 + 
 + 
 + final SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; 
 + 
 + running ( newServer , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( newServer . port ( ) , is ( 12306 ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ merge _ socket _ servers _ with _ second _ port ( ) throws Exception { 
 + SocketServer server = socketServer ( ) ; 
 + SocketServer secondServer = socketServer ( 12307 ) ; 
 + 
 + final SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; 
 + 
 + running ( newServer , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( newServer . port ( ) , is ( 12307 ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private String line ( String text ) { 
 return text + " \ r \ n " ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java 
 new file mode 100644 
 index 0000000 . . 792e8ba 
 - - - / dev / null 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / internal / ActualSocketServerTest . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + package com . github . dreamhead . moco . internal ; 
 + 
 + import com . github . dreamhead . moco . Runnable ; 
 + import com . github . dreamhead . moco . SocketServer ; 
 + import com . github . dreamhead . moco . helper . MocoSocketHelper ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import static com . github . dreamhead . moco . Moco . by ; 
 + import static com . github . dreamhead . moco . Moco . socketServer ; 
 + import static com . github . dreamhead . moco . Runner . running ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . local ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . * ; 
 + 
 + public class ActualSocketServerTest { 
 + private MocoSocketHelper helper ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + this . helper = new MocoSocketHelper ( local ( ) , port ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ merge _ socket _ servers ( ) throws Exception { 
 + SocketServer server = socketServer ( 12306 ) ; 
 + SocketServer secondServer = socketServer ( 12306 ) ; 
 + 
 + server . request ( by ( " foo " ) ) . response ( line ( " bar " ) ) ; 
 + secondServer . request ( by ( " foo1 " ) ) . response ( line ( " bar1 " ) ) ; 
 + 
 + SocketServer newServer = ( ( ActualSocketServer ) server ) . mergeServer ( ( ActualSocketServer ) secondServer ) ; 
 + 
 + running ( newServer , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + helper . connect ( ) ; 
 + assertThat ( helper . send ( " foo " ) , is ( " bar " ) ) ; 
 + assertThat ( helper . send ( " foo1 " ) , is ( " bar1 " ) ) ; 
 + helper . close ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private String line ( String text ) { 
 + return text + " \ r \ n " ; 
 + } 
 + } 
 \ No newline at end of file
