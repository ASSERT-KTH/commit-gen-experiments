BLEU SCORE: 0.08170609724417775

TEST MSG: upgraded hamcrest to 2 . 1
GENERATED MSG: upgraded netty 4 . 0 . 10

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 8593113 . . 4c4e05a 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 78 , 7 + 78 , 7 @ @ subprojects { <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> jacksonVersion = ' 2 . 9 . 8 ' <nl> junitVersion = ' 4 . 12 ' <nl> - hamcrestVersion = ' 1 . 3 ' <nl> + hamcrestVersion = ' 2 . 1 ' <nl> mockitoVersion = ' 2 . 23 . 4 ' <nl> httpComponentVersion = ' 4 . 5 . 6 ' <nl> jsonpathVersion = ' 2 . 4 . 0 ' <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 5c992cf . . 623898a 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 52 , 7 + 52 , 6 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . google . common . collect . ImmutableMultimap . of ; <nl> - import static java . lang . String . format ; <nl> import static org . hamcrest . CoreMatchers . containsString ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . hamcrest . CoreMatchers . nullValue ; <nl> @ @ - 249 , 7 + 248 , 7 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> private Matcher < String > countString ( final String substring , final int targetCount ) { <nl> - return new SubstringMatcher ( substring ) { <nl> + return new SubstringMatcher ( " counting " , false , substring ) { <nl> @ Override <nl> protected boolean evalSubstringOf ( final String string ) { <nl> int count = 0 ; <nl> @ @ - 267 , 11 + 266 , 6 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { <nl> <nl> return count = = targetCount ; <nl> } <nl> - <nl> - @ Override <nl> - protected String relationship ( ) { <nl> - return format ( " count % d string " , targetCount ) ; <nl> - } <nl> } ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index dacdd82 . . f515488 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 77 , 7 + 77 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 15 . 0 ' <nl> - nettyVersion = ' 4 . 0 . 9 . Final ' <nl> + nettyVersion = ' 4 . 0 . 10 . Final ' <nl> slf4jVersion = ' 1 . 7 . 5 ' <nl> commonsIoVersion = ' 2 . 4 ' <nl> jacksonVersion = ' 2 . 2 . 3 ' <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index 0d5340a . . f930c35 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import java . io . IOException ; <nl> import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> + import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 49 , 7 + 50 , 7 @ @ public class ProxyResponseHandler implements ResponseHandler { <nl> long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; <nl> if ( contentLength > 0 & & remoteRequest instanceof HttpEntityEnclosingRequest ) { <nl> HttpEntityEnclosingRequest entityRequest = ( HttpEntityEnclosingRequest ) remoteRequest ; <nl> - entityRequest . setEntity ( new ByteArrayEntity ( request . content ( ) . array ( ) ) ) ; <nl> + entityRequest . setEntity ( createEntity ( request . content ( ) ) ) ; <nl> } <nl> <nl> setupResponse ( request , response , httpclient . execute ( remoteRequest ) ) ; <nl> @ @ - 59 , 6 + 60 , 18 @ @ public class ProxyResponseHandler implements ResponseHandler { <nl> } <nl> } <nl> <nl> + private HttpEntity createEntity ( ByteBuf content ) { <nl> + if ( content . hasArray ( ) ) { <nl> + new ByteArrayEntity ( content . array ( ) ) ; <nl> + <nl> + } <nl> + <nl> + ByteBuffer byteBuffer = content . nioBuffer ( ) ; <nl> + byte [ ] bytes = new byte [ byteBuffer . capacity ( ) ] ; <nl> + byteBuffer . get ( bytes ) ; <nl> + return new ByteArrayEntity ( bytes ) ; <nl> + } <nl> + <nl> private org . apache . http . HttpVersion createVersion ( HttpRequest request ) { <nl> HttpVersion protocolVersion = request . getProtocolVersion ( ) ; <nl> return new org . apache . http . HttpVersion ( protocolVersion . majorVersion ( ) , protocolVersion . minorVersion ( ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> index 18d4487 . . 90e87bb 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> + import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> import com . google . common . io . Files ; <nl> import org . apache . http . HttpResponse ; <nl> import org . apache . http . HttpVersion ; <nl> @ @ - 9 , 6 + 11 , 7 @ @ import org . apache . http . client . fluent . Request ; <nl> import org . apache . http . entity . ContentType ; <nl> import org . hamcrest . Matcher ; <nl> import org . hamcrest . core . SubstringMatcher ; <nl> + import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import java . io . File ; <nl> @ @ - 16 , 15 + 19 , 25 @ @ import java . io . IOException ; <nl> import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . Moco . httpserver ; <nl> + import static com . github . dreamhead . moco . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . RemoteTestUtils . root ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . google . common . base . Optional . of ; <nl> import static java . lang . String . format ; <nl> import static org . hamcrest . CoreMatchers . containsString ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoProxyTest extends AbstractMocoTest { <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + super . setUp ( ) ; <nl> + server = ActualHttpServer . createLogServer ( of ( port ( ) ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void should _ fetch _ remote _ url ( ) throws Exception { <nl> server . response ( proxy ( " https : / / github . com / " ) ) ;

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 8593113 . . 4c4e05a 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 78 , 7 + 78 , 7 @ @ subprojects { 
 slf4jVersion = ' 1 . 7 . 25 ' 
 jacksonVersion = ' 2 . 9 . 8 ' 
 junitVersion = ' 4 . 12 ' 
 - hamcrestVersion = ' 1 . 3 ' 
 + hamcrestVersion = ' 2 . 1 ' 
 mockitoVersion = ' 2 . 23 . 4 ' 
 httpComponentVersion = ' 4 . 5 . 6 ' 
 jsonpathVersion = ' 2 . 4 . 0 ' 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 index 5c992cf . . 623898a 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 @ @ - 52 , 7 + 52 , 6 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static com . google . common . collect . ImmutableMultimap . of ; 
 - import static java . lang . String . format ; 
 import static org . hamcrest . CoreMatchers . containsString ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . hamcrest . CoreMatchers . nullValue ; 
 @ @ - 249 , 7 + 248 , 7 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { 
 } 
 
 private Matcher < String > countString ( final String substring , final int targetCount ) { 
 - return new SubstringMatcher ( substring ) { 
 + return new SubstringMatcher ( " counting " , false , substring ) { 
 @ Override 
 protected boolean evalSubstringOf ( final String string ) { 
 int count = 0 ; 
 @ @ - 267 , 11 + 266 , 6 @ @ public class MocoProxyTest extends AbstractMocoHttpTest { 
 
 return count = = targetCount ; 
 } 
 - 
 - @ Override 
 - protected String relationship ( ) { 
 - return format ( " count % d string " , targetCount ) ; 
 - } 
 } ; 
 } 


NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index dacdd82 . . f515488 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 77 , 7 + 77 , 7 @ @ subprojects { 
 
 project . ext { 
 guavaVersion = ' 15 . 0 ' 
 - nettyVersion = ' 4 . 0 . 9 . Final ' 
 + nettyVersion = ' 4 . 0 . 10 . Final ' 
 slf4jVersion = ' 1 . 7 . 5 ' 
 commonsIoVersion = ' 2 . 4 ' 
 jacksonVersion = ' 2 . 2 . 3 ' 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 index 0d5340a . . f930c35 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import java . io . IOException ; 
 import java . net . MalformedURLException ; 
 import java . net . URL ; 
 + import java . nio . ByteBuffer ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 49 , 7 + 50 , 7 @ @ public class ProxyResponseHandler implements ResponseHandler { 
 long contentLength = HttpHeaders . getContentLength ( request , - 1 ) ; 
 if ( contentLength > 0 & & remoteRequest instanceof HttpEntityEnclosingRequest ) { 
 HttpEntityEnclosingRequest entityRequest = ( HttpEntityEnclosingRequest ) remoteRequest ; 
 - entityRequest . setEntity ( new ByteArrayEntity ( request . content ( ) . array ( ) ) ) ; 
 + entityRequest . setEntity ( createEntity ( request . content ( ) ) ) ; 
 } 
 
 setupResponse ( request , response , httpclient . execute ( remoteRequest ) ) ; 
 @ @ - 59 , 6 + 60 , 18 @ @ public class ProxyResponseHandler implements ResponseHandler { 
 } 
 } 
 
 + private HttpEntity createEntity ( ByteBuf content ) { 
 + if ( content . hasArray ( ) ) { 
 + new ByteArrayEntity ( content . array ( ) ) ; 
 + 
 + } 
 + 
 + ByteBuffer byteBuffer = content . nioBuffer ( ) ; 
 + byte [ ] bytes = new byte [ byteBuffer . capacity ( ) ] ; 
 + byteBuffer . get ( bytes ) ; 
 + return new ByteArrayEntity ( bytes ) ; 
 + } 
 + 
 private org . apache . http . HttpVersion createVersion ( HttpRequest request ) { 
 HttpVersion protocolVersion = request . getProtocolVersion ( ) ; 
 return new org . apache . http . HttpVersion ( protocolVersion . majorVersion ( ) , protocolVersion . minorVersion ( ) ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 index 18d4487 . . 90e87bb 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoProxyTest . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 + import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 import com . google . common . io . Files ; 
 import org . apache . http . HttpResponse ; 
 import org . apache . http . HttpVersion ; 
 @ @ - 9 , 6 + 11 , 7 @ @ import org . apache . http . client . fluent . Request ; 
 import org . apache . http . entity . ContentType ; 
 import org . hamcrest . Matcher ; 
 import org . hamcrest . core . SubstringMatcher ; 
 + import org . junit . Before ; 
 import org . junit . Test ; 
 
 import java . io . File ; 
 @ @ - 16 , 15 + 19 , 25 @ @ import java . io . IOException ; 
 import java . nio . charset . Charset ; 
 
 import static com . github . dreamhead . moco . Moco . * ; 
 + import static com . github . dreamhead . moco . Moco . httpserver ; 
 + import static com . github . dreamhead . moco . RemoteTestUtils . port ; 
 import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . RemoteTestUtils . root ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 + import static com . google . common . base . Optional . of ; 
 import static java . lang . String . format ; 
 import static org . hamcrest . CoreMatchers . containsString ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoProxyTest extends AbstractMocoTest { 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + super . setUp ( ) ; 
 + server = ActualHttpServer . createLogServer ( of ( port ( ) ) ) ; 
 + } 
 + 
 @ Test 
 public void should _ fetch _ remote _ url ( ) throws Exception { 
 server . response ( proxy ( " https : / / github . com / " ) ) ;
