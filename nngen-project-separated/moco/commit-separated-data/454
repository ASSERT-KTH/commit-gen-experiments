BLEU SCORE: 0.15685718045401453

TEST MSG: added content template for post event action
GENERATED MSG: added template for post url in event handler for standalone mode

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> index e1b7c66 . . 997e651 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> @ @ - 7 , 7 + 8 , 7 @ @ import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> public class EventActionSettings { <nl> - public static Resource urlResource ( final TextContainer url ) { <nl> + public static ContentResource asResource ( final TextContainer url ) { <nl> if ( url . isRawText ( ) ) { <nl> return text ( url . getText ( ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 1d81591 . . 952b7fd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 5 , 14 + 5 , 14 @ @ import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . get ; <nl> - import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; <nl> + import static com . github . dreamhead . moco . parser . model . EventActionSettings . asResource ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class GetSetting { <nl> private TextContainer url ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return get ( urlResource ( url ) ) ; <nl> + return get ( asResource ( url ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index c41eef3 . . 859db79 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 1 , 20 + 1 , 19 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> - import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> - import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; <nl> + import static com . github . dreamhead . moco . parser . model . EventActionSettings . asResource ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class PostSetting { <nl> private TextContainer url ; <nl> - private String content ; <nl> + private TextContainer content ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return post ( urlResource ( this . url ) , Moco . text ( content ) ) ; <nl> + return post ( asResource ( this . url ) , asResource ( content ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 0698fde . . 8e0f651 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 78 , 4 + 78 , 16 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ fire _ event _ with _ post _ content _ template ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - content " ) ) , is ( " post _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index 1bf46ea . . 7dcce9e 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 105 , 6 + 105 , 31 @ @ <nl> } <nl> } , <nl> { <nl> + " request " : { <nl> + " uri " : " / post - event - with - template - content " <nl> + } , <nl> + " response " : { <nl> + " text " : " post _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> + " content " : { <nl> + " template " : { <nl> + " with " : " $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } , <nl> + { <nl> " request " : { <nl> " uri " : " / target " <nl> } ,
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> index 87644e9 . . b29f1f9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ public class GetSetting { <nl> return get ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ) ; <nl> } <nl> <nl> - throw new IllegalArgumentException ( " Unknown " + url ) ; <nl> + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> index aa5d3b7 . . 040c719 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java <nl> @ @ - 5 , 15 + 5 , 26 @ @ import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . get ; <nl> import static com . github . dreamhead . moco . Moco . post ; <nl> + import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> public class PostSetting { <nl> - private String url ; <nl> + private TextContainer url ; <nl> private String content ; <nl> <nl> public MocoEventAction createAction ( ) { <nl> - return post ( url , Moco . text ( content ) ) ; <nl> + if ( url . isRawText ( ) ) { <nl> + return post ( url . getText ( ) , Moco . text ( content ) ) ; <nl> + } <nl> + <nl> + if ( url . isForTemplate ( ) ) { <nl> + return post ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) , Moco . text ( content ) ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index 3ba5356 . . 0698fde 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 67 , 4 + 67 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ fire _ event _ with _ post _ url _ template ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - url " ) ) , is ( " post _ foo " ) ) ; <nl> + idle ( IDLE , TimeUnit . MILLISECONDS ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index a2e8fa3 . . 1bf46ea 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 1 , 17 + 1 , 17 @ @ <nl> [ <nl> { <nl> " request " : { <nl> - " uri " : " / event " <nl> + " uri " : " / event " <nl> } , <nl> " response " : { <nl> " text " : " post _ foo " <nl> } , <nl> " on " : { <nl> " complete " : { <nl> - " async " : " true " , <nl> - " latency " : 500 , <nl> - " post " : { <nl> - " url " : " http : / / localhost : 12306 / target " , <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> " content " : " content " <nl> } <nl> } <nl> @ @ - 37 , 8 + 37 , 7 @ @ <nl> } <nl> } <nl> } <nl> - } , <nl> - <nl> + } , <nl> { <nl> " request " : { <nl> " uri " : " / get _ event " <nl> @ @ - 80 , 7 + 79 , 31 @ @ <nl> } <nl> } <nl> } , <nl> - <nl> + { <nl> + " request " : { <nl> + " uri " : " / post - event - with - template - url " <nl> + } , <nl> + " response " : { <nl> + " text " : " post _ foo " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " async " : " true " , <nl> + " latency " : 500 , <nl> + " post " : { <nl> + " url " : { <nl> + " template " : { <nl> + " with " : " http : / / localhost : 12306 / $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> + } <nl> + } <nl> + } , <nl> + " content " : " content " <nl> + } <nl> + } <nl> + } <nl> + } , <nl> { <nl> " request " : { <nl> " uri " : " / target "

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java 
 index e1b7c66 . . 997e651 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / EventActionSettings . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 + import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 
 import static com . github . dreamhead . moco . Moco . template ; 
 @ @ - 7 , 7 + 8 , 7 @ @ import static com . github . dreamhead . moco . Moco . text ; 
 import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; 
 
 public class EventActionSettings { 
 - public static Resource urlResource ( final TextContainer url ) { 
 + public static ContentResource asResource ( final TextContainer url ) { 
 if ( url . isRawText ( ) ) { 
 return text ( url . getText ( ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 index 1d81591 . . 952b7fd 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 @ @ - 5 , 14 + 5 , 14 @ @ import com . github . dreamhead . moco . MocoEventAction ; 
 import com . google . common . base . MoreObjects ; 
 
 import static com . github . dreamhead . moco . Moco . get ; 
 - import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; 
 + import static com . github . dreamhead . moco . parser . model . EventActionSettings . asResource ; 
 
 @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 public class GetSetting { 
 private TextContainer url ; 
 
 public MocoEventAction createAction ( ) { 
 - return get ( urlResource ( url ) ) ; 
 + return get ( asResource ( url ) ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 index c41eef3 . . 859db79 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 @ @ - 1 , 20 + 1 , 19 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 - import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . google . common . base . MoreObjects ; 
 
 import static com . github . dreamhead . moco . Moco . post ; 
 - import static com . github . dreamhead . moco . parser . model . EventActionSettings . urlResource ; 
 + import static com . github . dreamhead . moco . parser . model . EventActionSettings . asResource ; 
 
 @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 public class PostSetting { 
 private TextContainer url ; 
 - private String content ; 
 + private TextContainer content ; 
 
 public MocoEventAction createAction ( ) { 
 - return post ( urlResource ( this . url ) , Moco . text ( content ) ) ; 
 + return post ( asResource ( this . url ) , asResource ( content ) ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 index 0698fde . . 8e0f651 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 @ @ - 78 , 4 + 78 , 16 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 
 assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ fire _ event _ with _ post _ content _ template ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - content " ) ) , is ( " post _ foo " ) ) ; 
 + idle ( IDLE , TimeUnit . MILLISECONDS ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 + } 
 + 
 } 
 diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json 
 index 1bf46ea . . 7dcce9e 100644 
 - - - a / moco - runner / src / test / resources / event . json 
 + + + b / moco - runner / src / test / resources / event . json 
 @ @ - 105 , 6 + 105 , 31 @ @ 
 } 
 } , 
 { 
 + " request " : { 
 + " uri " : " / post - event - with - template - content " 
 + } , 
 + " response " : { 
 + " text " : " post _ foo " 
 + } , 
 + " on " : { 
 + " complete " : { 
 + " async " : " true " , 
 + " latency " : 500 , 
 + " post " : { 
 + " url " : " http : / / localhost : 12306 / target " , 
 + " content " : { 
 + " template " : { 
 + " with " : " $ { target } " , 
 + " vars " : { 
 + " target " : " target " 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } , 
 + { 
 " request " : { 
 " uri " : " / target " 
 } ,

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 index 87644e9 . . b29f1f9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GetSetting . java 
 @ @ - 21 , 7 + 21 , 7 @ @ public class GetSetting { 
 return get ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) ) ; 
 } 
 
 - throw new IllegalArgumentException ( " Unknown " + url ) ; 
 + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 index aa5d3b7 . . 040c719 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / PostSetting . java 
 @ @ - 5 , 15 + 5 , 26 @ @ import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . google . common . base . MoreObjects ; 
 
 + import static com . github . dreamhead . moco . Moco . get ; 
 import static com . github . dreamhead . moco . Moco . post ; 
 + import static com . github . dreamhead . moco . Moco . template ; 
 + import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; 
 
 @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 public class PostSetting { 
 - private String url ; 
 + private TextContainer url ; 
 private String content ; 
 
 public MocoEventAction createAction ( ) { 
 - return post ( url , Moco . text ( content ) ) ; 
 + if ( url . isRawText ( ) ) { 
 + return post ( url . getText ( ) , Moco . text ( content ) ) ; 
 + } 
 + 
 + if ( url . isForTemplate ( ) ) { 
 + return post ( template ( url . getText ( ) , toVariables ( url . getProps ( ) ) ) , Moco . text ( content ) ) ; 
 + } 
 + 
 + throw new IllegalArgumentException ( " Unknown " + url + " for get setting " ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 index 3ba5356 . . 0698fde 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 @ @ - 67 , 4 + 67 , 15 @ @ public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 
 assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ fire _ event _ with _ post _ url _ template ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / post - event - with - template - url " ) ) , is ( " post _ foo " ) ) ; 
 + idle ( IDLE , TimeUnit . MILLISECONDS ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json 
 index a2e8fa3 . . 1bf46ea 100644 
 - - - a / moco - runner / src / test / resources / event . json 
 + + + b / moco - runner / src / test / resources / event . json 
 @ @ - 1 , 17 + 1 , 17 @ @ 
 [ 
 { 
 " request " : { 
 - " uri " : " / event " 
 + " uri " : " / event " 
 } , 
 " response " : { 
 " text " : " post _ foo " 
 } , 
 " on " : { 
 " complete " : { 
 - " async " : " true " , 
 - " latency " : 500 , 
 - " post " : { 
 - " url " : " http : / / localhost : 12306 / target " , 
 + " async " : " true " , 
 + " latency " : 500 , 
 + " post " : { 
 + " url " : " http : / / localhost : 12306 / target " , 
 " content " : " content " 
 } 
 } 
 @ @ - 37 , 8 + 37 , 7 @ @ 
 } 
 } 
 } 
 - } , 
 - 
 + } , 
 { 
 " request " : { 
 " uri " : " / get _ event " 
 @ @ - 80 , 7 + 79 , 31 @ @ 
 } 
 } 
 } , 
 - 
 + { 
 + " request " : { 
 + " uri " : " / post - event - with - template - url " 
 + } , 
 + " response " : { 
 + " text " : " post _ foo " 
 + } , 
 + " on " : { 
 + " complete " : { 
 + " async " : " true " , 
 + " latency " : 500 , 
 + " post " : { 
 + " url " : { 
 + " template " : { 
 + " with " : " http : / / localhost : 12306 / $ { target } " , 
 + " vars " : { 
 + " target " : " target " 
 + } 
 + } 
 + } , 
 + " content " : " content " 
 + } 
 + } 
 + } 
 + } , 
 { 
 " request " : { 
 " uri " : " / target "
