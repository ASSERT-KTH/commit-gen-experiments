BLEU SCORE: 0.07545383788761362

TEST MSG: introduced cycle response handler
GENERATED MSG: changed sequence content handler to sequence handler

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f356a8c . . d66414a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import java . nio . charset . Charset ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import static com . github . dreamhead . moco . extractor . Extractors . extractor ; <nl> + import static com . github . dreamhead . moco . handler . CycleHandler . newCycle ; <nl> import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; <nl> import static com . github . dreamhead . moco . handler . SequenceHandler . newSeq ; <nl> import static com . github . dreamhead . moco . internal . ApiUtils . resourceToResourceHandler ; <nl> @ @ - 375 , 6 + 376 , 24 @ @ public final class Moco { <nl> return newSeq ( asIterable ( handler , handlers ) ) ; <nl> } <nl> <nl> + public static ResponseHandler cycle ( final String content , final String . . . contents ) { <nl> + checkNotNull ( content , " Sequence content should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; <nl> + return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; <nl> + } <nl> + <nl> + public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { <nl> + checkNotNull ( content , " Sequence content should not be null " ) ; <nl> + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> + return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> + } <nl> + <nl> + public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { <nl> + checkNotNull ( handler , " Sequence handler should not be null " ) ; <nl> + checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; <nl> + return newCycle ( asIterable ( handler , handlers ) ) ; <nl> + } <nl> + <nl> public static ContentResource file ( final String filename ) { <nl> return file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 50bcff2 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package com . github . dreamhead . moco . handler ; <nl> + <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . internal . SessionContext ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . FluentIterable ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkArgument ; <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + <nl> + public class CycleHandler extends AbstractResponseHandler { <nl> + private final ImmutableList < ResponseHandler > handlers ; <nl> + private int index ; <nl> + <nl> + private CycleHandler ( final Iterable < ResponseHandler > handlers ) { <nl> + this . handlers = copyOf ( handlers ) ; <nl> + } <nl> + <nl> + public static ResponseHandler newCycle ( final Iterable < ResponseHandler > handlers ) { <nl> + checkArgument ( Iterables . size ( handlers ) > 0 , " Sequence contents should not be null " ) ; <nl> + return new CycleHandler ( handlers ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void writeToResponse ( final SessionContext context ) { <nl> + handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> + } <nl> + <nl> + private int current ( ) { <nl> + int current = this . index ; <nl> + if ( + + index > = handlers . size ( ) ) { <nl> + index = 0 ; <nl> + } <nl> + <nl> + return current ; <nl> + } <nl> + <nl> + @ Override <nl> + public ResponseHandler apply ( final MocoConfig config ) { <nl> + if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { <nl> + return super . apply ( config ) ; <nl> + } <nl> + <nl> + FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; <nl> + return new CycleHandler ( transformedResources . toList ( ) ) ; <nl> + } <nl> + <nl> + private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { <nl> + return new Function < ResponseHandler , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final ResponseHandler input ) { <nl> + return input . apply ( config ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index 0626fb8 . . 46cb42c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import static com . github . dreamhead . moco . HttpProtocolVersion . VERSION _ 1 _ 0 ; <nl> import static com . github . dreamhead . moco . Moco . and ; <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . contain ; <nl> + import static com . github . dreamhead . moco . Moco . cycle ; <nl> import static com . github . dreamhead . moco . Moco . endsWith ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . exist ; <nl> @ @ - 384 , 6 + 385 , 51 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ return _ content _ circularly _ one _ by _ one ( ) throws Exception { <nl> + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( " bar " , " blah " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ content _ one _ by _ one _ with _ text _ api _ circularly ( ) throws Exception { <nl> + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( text ( " bar " ) , text ( " blah " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ return _ response _ circularly _ one _ by _ one ( ) throws Exception { <nl> + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( status ( 302 ) , status ( 200 ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 302 ) ) ; <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 200 ) ) ; <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 302 ) ) ; <nl> + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 200 ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ match ( ) throws Exception { <nl> server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( " bar " ) ; <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index dc762df . . 6a7e68f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ import com . github . dreamhead . moco . handler . JsonResponseHandler ; <nl> import com . github . dreamhead . moco . handler . ProcedureResponseHandler ; <nl> import com . github . dreamhead . moco . handler . ProxyBatchResponseHandler ; <nl> import com . github . dreamhead . moco . handler . ProxyResponseHandler ; <nl> - import com . github . dreamhead . moco . handler . SequenceContentHandler ; <nl> + import com . github . dreamhead . moco . handler . SequenceHandler ; <nl> import com . github . dreamhead . moco . handler . StatusCodeResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> @ @ - 409 , 7 + 409 , 7 @ @ public final class Moco { <nl> <nl> private static ResponseHandler seq ( final ImmutableList < ResponseHandler > handlers ) { <nl> checkArgument ( handlers . size ( ) > 0 , " seq contents should not be null " ) ; <nl> - return new SequenceContentHandler ( handlers ) ; <nl> + return new SequenceHandler ( handlers ) ; <nl> } <nl> <nl> public static ContentResource file ( final String filename ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java <nl> deleted file mode 100644 <nl> index cc3cdfc . . 0000000 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java <nl> + + + / dev / null <nl> @ @ - 1 , 53 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . handler ; <nl> - <nl> - import com . github . dreamhead . moco . MocoConfig ; <nl> - import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . internal . SessionContext ; <nl> - import com . google . common . base . Function ; <nl> - import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> - <nl> - public class SequenceContentHandler extends AbstractResponseHandler { <nl> - private final ImmutableList < ResponseHandler > handlers ; <nl> - private int index ; <nl> - <nl> - public SequenceContentHandler ( final ImmutableList < ResponseHandler > handlers ) { <nl> - this . handlers = handlers ; <nl> - } <nl> - <nl> - @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> - handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> - } <nl> - <nl> - private int current ( ) { <nl> - int current = this . index ; <nl> - if ( + + index > = handlers . size ( ) ) { <nl> - index = handlers . size ( ) - 1 ; <nl> - } <nl> - <nl> - return current ; <nl> - } <nl> - <nl> - @ Override <nl> - public ResponseHandler apply ( final MocoConfig config ) { <nl> - if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { <nl> - return super . apply ( config ) ; <nl> - } <nl> - <nl> - FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; <nl> - return new SequenceContentHandler ( transformedResources . toList ( ) ) ; <nl> - } <nl> - <nl> - private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { <nl> - return new Function < ResponseHandler , ResponseHandler > ( ) { <nl> - @ Override <nl> - public ResponseHandler apply ( ResponseHandler input ) { <nl> - return input . apply ( config ) ; <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> new file mode 100644 <nl> index 0000000 . . de88227 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java <nl> @ @ - 0 , 0 + 1 , 53 @ @ <nl> + package com . github . dreamhead . moco . handler ; <nl> + <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . internal . SessionContext ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . FluentIterable ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + <nl> + public class SequenceHandler extends AbstractResponseHandler { <nl> + private final ImmutableList < ResponseHandler > handlers ; <nl> + private int index ; <nl> + <nl> + public SequenceHandler ( final ImmutableList < ResponseHandler > handlers ) { <nl> + this . handlers = handlers ; <nl> + } <nl> + <nl> + @ Override <nl> + public void writeToResponse ( final SessionContext context ) { <nl> + handlers . get ( current ( ) ) . writeToResponse ( context ) ; <nl> + } <nl> + <nl> + private int current ( ) { <nl> + int current = this . index ; <nl> + if ( + + index > = handlers . size ( ) ) { <nl> + index = handlers . size ( ) - 1 ; <nl> + } <nl> + <nl> + return current ; <nl> + } <nl> + <nl> + @ Override <nl> + public ResponseHandler apply ( final MocoConfig config ) { <nl> + if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { <nl> + return super . apply ( config ) ; <nl> + } <nl> + <nl> + FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; <nl> + return new SequenceHandler ( transformedResources . toList ( ) ) ; <nl> + } <nl> + <nl> + private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { <nl> + return new Function < ResponseHandler , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( ResponseHandler input ) { <nl> + return input . apply ( config ) ; <nl> + } <nl> + } ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index f356a8c . . d66414a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import java . nio . charset . Charset ; 
 import java . util . concurrent . TimeUnit ; 
 
 import static com . github . dreamhead . moco . extractor . Extractors . extractor ; 
 + import static com . github . dreamhead . moco . handler . CycleHandler . newCycle ; 
 import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; 
 import static com . github . dreamhead . moco . handler . SequenceHandler . newSeq ; 
 import static com . github . dreamhead . moco . internal . ApiUtils . resourceToResourceHandler ; 
 @ @ - 375 , 6 + 376 , 24 @ @ public final class Moco { 
 return newSeq ( asIterable ( handler , handlers ) ) ; 
 } 
 
 + public static ResponseHandler cycle ( final String content , final String . . . contents ) { 
 + checkNotNull ( content , " Sequence content should not be null " ) ; 
 + checkArgument ( contents . length > 0 , " Sequence content should not be null " ) ; 
 + return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( textToResource ( ) ) ) ; 
 + } 
 + 
 + public static ResponseHandler cycle ( final Resource content , final Resource . . . contents ) { 
 + checkNotNull ( content , " Sequence content should not be null " ) ; 
 + checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 + return newCycle ( FluentIterable . from ( asIterable ( content , contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; 
 + } 
 + 
 + public static ResponseHandler cycle ( final ResponseHandler handler , final ResponseHandler . . . handlers ) { 
 + checkNotNull ( handler , " Sequence handler should not be null " ) ; 
 + checkArgument ( handlers . length > 0 , " Sequence handlers should not be null " ) ; 
 + return newCycle ( asIterable ( handler , handlers ) ) ; 
 + } 
 + 
 public static ContentResource file ( final String filename ) { 
 return file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 new file mode 100644 
 index 0000000 . . 50bcff2 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / CycleHandler . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package com . github . dreamhead . moco . handler ; 
 + 
 + import com . github . dreamhead . moco . MocoConfig ; 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . internal . SessionContext ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . FluentIterable ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Iterables ; 
 + 
 + import static com . google . common . base . Preconditions . checkArgument ; 
 + import static com . google . common . collect . FluentIterable . from ; 
 + import static com . google . common . collect . ImmutableList . copyOf ; 
 + 
 + public class CycleHandler extends AbstractResponseHandler { 
 + private final ImmutableList < ResponseHandler > handlers ; 
 + private int index ; 
 + 
 + private CycleHandler ( final Iterable < ResponseHandler > handlers ) { 
 + this . handlers = copyOf ( handlers ) ; 
 + } 
 + 
 + public static ResponseHandler newCycle ( final Iterable < ResponseHandler > handlers ) { 
 + checkArgument ( Iterables . size ( handlers ) > 0 , " Sequence contents should not be null " ) ; 
 + return new CycleHandler ( handlers ) ; 
 + } 
 + 
 + @ Override 
 + public void writeToResponse ( final SessionContext context ) { 
 + handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 + } 
 + 
 + private int current ( ) { 
 + int current = this . index ; 
 + if ( + + index > = handlers . size ( ) ) { 
 + index = 0 ; 
 + } 
 + 
 + return current ; 
 + } 
 + 
 + @ Override 
 + public ResponseHandler apply ( final MocoConfig config ) { 
 + if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { 
 + return super . apply ( config ) ; 
 + } 
 + 
 + FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; 
 + return new CycleHandler ( transformedResources . toList ( ) ) ; 
 + } 
 + 
 + private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { 
 + return new Function < ResponseHandler , ResponseHandler > ( ) { 
 + @ Override 
 + public ResponseHandler apply ( final ResponseHandler input ) { 
 + return input . apply ( config ) ; 
 + } 
 + } ; 
 + } 
 + 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 index 0626fb8 . . 46cb42c 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import static com . github . dreamhead . moco . HttpProtocolVersion . VERSION _ 1 _ 0 ; 
 import static com . github . dreamhead . moco . Moco . and ; 
 import static com . github . dreamhead . moco . Moco . by ; 
 import static com . github . dreamhead . moco . Moco . contain ; 
 + import static com . github . dreamhead . moco . Moco . cycle ; 
 import static com . github . dreamhead . moco . Moco . endsWith ; 
 import static com . github . dreamhead . moco . Moco . eq ; 
 import static com . github . dreamhead . moco . Moco . exist ; 
 @ @ - 384 , 6 + 385 , 51 @ @ public class MocoTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ return _ content _ circularly _ one _ by _ one ( ) throws Exception { 
 + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( " bar " , " blah " ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ content _ one _ by _ one _ with _ text _ api _ circularly ( ) throws Exception { 
 + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( text ( " bar " ) , text ( " blah " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " blah " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ return _ response _ circularly _ one _ by _ one ( ) throws Exception { 
 + server . request ( by ( uri ( " / foo " ) ) ) . response ( cycle ( status ( 302 ) , status ( 200 ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 302 ) ) ; 
 + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 200 ) ) ; 
 + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 302 ) ) ; 
 + assertThat ( helper . getForStatus ( remoteUrl ( " / foo " ) ) , is ( 200 ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ match ( ) throws Exception { 
 server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( " bar " ) ; 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index dc762df . . 6a7e68f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 19 , 7 + 19 , 7 @ @ import com . github . dreamhead . moco . handler . JsonResponseHandler ; 
 import com . github . dreamhead . moco . handler . ProcedureResponseHandler ; 
 import com . github . dreamhead . moco . handler . ProxyBatchResponseHandler ; 
 import com . github . dreamhead . moco . handler . ProxyResponseHandler ; 
 - import com . github . dreamhead . moco . handler . SequenceContentHandler ; 
 + import com . github . dreamhead . moco . handler . SequenceHandler ; 
 import com . github . dreamhead . moco . handler . StatusCodeResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 @ @ - 409 , 7 + 409 , 7 @ @ public final class Moco { 
 
 private static ResponseHandler seq ( final ImmutableList < ResponseHandler > handlers ) { 
 checkArgument ( handlers . size ( ) > 0 , " seq contents should not be null " ) ; 
 - return new SequenceContentHandler ( handlers ) ; 
 + return new SequenceHandler ( handlers ) ; 
 } 
 
 public static ContentResource file ( final String filename ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java 
 deleted file mode 100644 
 index cc3cdfc . . 0000000 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceContentHandler . java 
 + + + / dev / null 
 @ @ - 1 , 53 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . handler ; 
 - 
 - import com . github . dreamhead . moco . MocoConfig ; 
 - import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . internal . SessionContext ; 
 - import com . google . common . base . Function ; 
 - import com . google . common . collect . FluentIterable ; 
 - import com . google . common . collect . ImmutableList ; 
 - 
 - import static com . google . common . collect . FluentIterable . from ; 
 - import static com . google . common . collect . ImmutableList . copyOf ; 
 - 
 - public class SequenceContentHandler extends AbstractResponseHandler { 
 - private final ImmutableList < ResponseHandler > handlers ; 
 - private int index ; 
 - 
 - public SequenceContentHandler ( final ImmutableList < ResponseHandler > handlers ) { 
 - this . handlers = handlers ; 
 - } 
 - 
 - @ Override 
 - public void writeToResponse ( final SessionContext context ) { 
 - handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 - } 
 - 
 - private int current ( ) { 
 - int current = this . index ; 
 - if ( + + index > = handlers . size ( ) ) { 
 - index = handlers . size ( ) - 1 ; 
 - } 
 - 
 - return current ; 
 - } 
 - 
 - @ Override 
 - public ResponseHandler apply ( final MocoConfig config ) { 
 - if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { 
 - return super . apply ( config ) ; 
 - } 
 - 
 - FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; 
 - return new SequenceContentHandler ( transformedResources . toList ( ) ) ; 
 - } 
 - 
 - private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { 
 - return new Function < ResponseHandler , ResponseHandler > ( ) { 
 - @ Override 
 - public ResponseHandler apply ( ResponseHandler input ) { 
 - return input . apply ( config ) ; 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 new file mode 100644 
 index 0000000 . . de88227 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / SequenceHandler . java 
 @ @ - 0 , 0 + 1 , 53 @ @ 
 + package com . github . dreamhead . moco . handler ; 
 + 
 + import com . github . dreamhead . moco . MocoConfig ; 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . internal . SessionContext ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . FluentIterable ; 
 + import com . google . common . collect . ImmutableList ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + import static com . google . common . collect . ImmutableList . copyOf ; 
 + 
 + public class SequenceHandler extends AbstractResponseHandler { 
 + private final ImmutableList < ResponseHandler > handlers ; 
 + private int index ; 
 + 
 + public SequenceHandler ( final ImmutableList < ResponseHandler > handlers ) { 
 + this . handlers = handlers ; 
 + } 
 + 
 + @ Override 
 + public void writeToResponse ( final SessionContext context ) { 
 + handlers . get ( current ( ) ) . writeToResponse ( context ) ; 
 + } 
 + 
 + private int current ( ) { 
 + int current = this . index ; 
 + if ( + + index > = handlers . size ( ) ) { 
 + index = handlers . size ( ) - 1 ; 
 + } 
 + 
 + return current ; 
 + } 
 + 
 + @ Override 
 + public ResponseHandler apply ( final MocoConfig config ) { 
 + if ( config . isFor ( MocoConfig . RESPONSE _ ID ) ) { 
 + return super . apply ( config ) ; 
 + } 
 + 
 + FluentIterable < ResponseHandler > transformedResources = from ( copyOf ( handlers ) ) . transform ( applyConfig ( config ) ) ; 
 + return new SequenceHandler ( transformedResources . toList ( ) ) ; 
 + } 
 + 
 + private Function < ResponseHandler , ResponseHandler > applyConfig ( final MocoConfig config ) { 
 + return new Function < ResponseHandler , ResponseHandler > ( ) { 
 + @ Override 
 + public ResponseHandler apply ( ResponseHandler input ) { 
 + return input . apply ( config ) ; 
 + } 
 + } ; 
 + } 
 + }
