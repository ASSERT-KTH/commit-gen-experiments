BLEU SCORE: 0.037477767366779206

TEST MSG: replaced json read with json to object in moco rest test
GENERATED MSG: added rest post setting

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 5f5a22b . . 7d92224 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 1 , 12 + 1 , 17 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . fasterxml . jackson . core . JsonProcessingException ; <nl> + import com . fasterxml . jackson . core . type . TypeReference ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> public final class Jsons { <nl> + private static ObjectMapper mapper = new ObjectMapper ( ) ; <nl> + <nl> public static String toJson ( final Object value ) { <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> try { <nl> return mapper . writeValueAsString ( value ) ; <nl> } catch ( JsonProcessingException e ) { <nl> @ @ - 14 , 6 + 19 , 38 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static < T > T toObject ( final String value , final Class < T > clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static < T > T toObject ( final String value , final TypeReference clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static < T > T toObject ( final InputStream value , final TypeReference clazz ) { <nl> + try { <nl> + return mapper . readValue ( value , clazz ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> private Jsons ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 96a24b6 . . 407113d 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . net . MediaType ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . HttpResponseException ; <nl> @ @ - 140 , 8 + 140 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - PlainA responseA = mapper . readValue ( entity . getContent ( ) , PlainA . class ) ; <nl> + PlainA responseA = Jsons . toObject ( entity . getContent ( ) , PlainA . class ) ; <nl> assertThat ( responseA . code , is ( 1 ) ) ; <nl> assertThat ( responseA . message , is ( " message " ) ) ; <nl> } <nl> @ @ - 158 , 8 + 157 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> String content = helper . get ( remoteUrl ( root ( ) ) ) ; <nl> - ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - PlainA responseA = mapper . readValue ( content , PlainA . class ) ; <nl> + PlainA responseA = Jsons . toObject ( content , PlainA . class ) ; <nl> assertThat ( responseA . code , is ( 1 ) ) ; <nl> assertThat ( responseA . message , is ( " 消 息 " ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 97e2b4b . . a149a56 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 1 , 7 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMultimap ; <nl> @ @ - 51 , 8 + 50 , 6 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> @ Rule <nl> public TemporaryFolder folder = new TemporaryFolder ( ) ; <nl> <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - <nl> @ Override <nl> protected RestServer createServer ( int port ) { <nl> return restServer ( port , log ( ) ) ; <nl> @ @ - 268 , 7 + 265 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - List < Plain > plains = mapper . readValue ( helper . get ( remoteUrl ( " / targets ? foo = bar " ) ) , new TypeReference < List < Plain > > ( ) { <nl> + List < Plain > plains = Jsons . toObject ( helper . get ( remoteUrl ( " / targets ? foo = bar " ) ) , new TypeReference < List < Plain > > ( ) { <nl> } ) ; <nl> assertThat ( plains . size ( ) , is ( 2 ) ) ; <nl> <nl> @ @ - 794 , 7 + 791 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> private Plain asPlain ( HttpResponse response ) throws IOException { <nl> HttpEntity entity = checkJsonResponse ( response ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; <nl> + return Jsons . toObject ( entity . getContent ( ) , Plain . class ) ; <nl> } <nl> <nl> private List < Plain > getResources ( final String uri ) throws IOException { <nl> @ @ - 804 , 7 + 801 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> private List < Plain > asPlains ( HttpResponse response ) throws IOException { <nl> HttpEntity entity = checkJsonResponse ( response ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> + return Jsons . toObject ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> } ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> index 8afec26 . . 238165f 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> @ @ - 1 , 10 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . ObjectMapper ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . net . HttpHeaders ; <nl> import com . google . common . net . MediaType ; <nl> - import org . apache . http . * ; <nl> + import org . apache . http . HttpEntity ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> @ @ - 16 , 8 + 16 , 6 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> - private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> - <nl> @ Test <nl> public void should _ get _ resource ( ) throws IOException { <nl> runWithConfiguration ( " rest / rest . json " ) ; <nl> @ @ - 43 , 7 + 41 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> resource1 . message = " hello " ; <nl> <nl> org . apache . http . HttpResponse httpResponse = helper . postForResponse ( remoteUrl ( " / targets " ) , <nl> - mapper . writeValueAsString ( resource1 ) ) ; <nl> + Jsons . toJson ( resource1 ) ) ; <nl> assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; <nl> assertThat ( httpResponse . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; <nl> } <nl> @ @ - 57 , 7 + 55 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> resource1 . message = " hello " ; <nl> <nl> org . apache . http . HttpResponse httpResponse = helper . putForResponse ( remoteUrl ( " / targets / 1 " ) , <nl> - mapper . writeValueAsString ( resource1 ) ) ; <nl> + Jsons . toJson ( resource1 ) ) ; <nl> assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> } <nl> <nl> @ @ - 183 , 7 + 181 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; <nl> HttpEntity entity = response . getEntity ( ) ; <nl> - List < Plain > plains = mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> + List < Plain > plains = Jsons . toObject ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { <nl> } ) ; <nl> assertThat ( plains . size ( ) , is ( 2 ) ) ; <nl> } <nl> @ @ - 223 , 7 + 221 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; <nl> assertThat ( mediaType . type ( ) , is ( " application " ) ) ; <nl> assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; <nl> - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; <nl> + return Jsons . toObject ( entity . getContent ( ) , Plain . class ) ; <nl> } <nl> <nl> private static class Plain {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> index fe59571 . . 3c4a160 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> @ @ - 1 , 9 + 1 , 11 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . handler . AndResponseHandler ; <nl> import com . github . dreamhead . moco . monitor . QuietMonitor ; <nl> import com . github . dreamhead . moco . rest . ActualRestServer ; <nl> import com . github . dreamhead . moco . rest . GetAllRestSetting ; <nl> import com . github . dreamhead . moco . rest . GetSingleRestSetting ; <nl> + import com . github . dreamhead . moco . rest . PostRestSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> @ @ - 42 , 6 + 44 , 11 @ @ public final class MocoRest { <nl> checkNotNull ( handler , " Get response handler should not be null " ) ) ; <nl> } <nl> <nl> + public static RestSetting post ( final ResponseHandler . . . handler ) { <nl> + return new PostRestSetting ( AndResponseHandler . and ( handler ) ) ; <nl> + } <nl> + <nl> + <nl> private MocoRest ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / PostRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / PostRestSetting . java <nl> new file mode 100644 <nl> index 0000000 . . f7a051d <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / PostRestSetting . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package com . github . dreamhead . moco . rest ; <nl> + <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . RestSetting ; <nl> + <nl> + public class PostRestSetting extends RestSetting { <nl> + public PostRestSetting ( final ResponseHandler handler ) { <nl> + super ( handler ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> index 9e83add . . 6eb4da0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> private final ResponseHandler notFoundHandler ; <nl> private final FluentIterable < GetAllRestSetting > getAllSettings ; <nl> private final FluentIterable < GetSingleRestSetting > getSingleSettings ; <nl> + private final FluentIterable < PostRestSetting > postSettings ; <nl> <nl> public RestHandler ( final String name , final RestSetting . . . settings ) { <nl> this . name = name ; <nl> @ @ - 38 , 6 + 39 , 9 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> this . getSingleSettings = FluentIterable . of ( settings ) <nl> . filter ( GetSingleRestSetting . class ) <nl> . transform ( toInstance ( GetSingleRestSetting . class ) ) ; <nl> + this . postSettings = FluentIterable . of ( settings ) <nl> + . filter ( PostRestSetting . class ) <nl> + . transform ( toInstance ( PostRestSetting . class ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 47 , 9 + 51 , 26 @ @ public class RestHandler extends AbstractHttpResponseHandler { <nl> return ; <nl> } <nl> <nl> + if ( " post " . equalsIgnoreCase ( httpRequest . getMethod ( ) ) ) { <nl> + Optional < ResponseHandler > postHandler = getPostHandler ( httpRequest ) ; <nl> + if ( postHandler . isPresent ( ) ) { <nl> + postHandler . get ( ) . writeToResponse ( new SessionContext ( httpRequest , httpResponse ) ) ; <nl> + return ; <nl> + } <nl> + } <nl> + <nl> throw new UnsupportedOperationException ( " Unsupported REST request " ) ; <nl> } <nl> <nl> + private Optional < ResponseHandler > getPostHandler ( final HttpRequest httpRequest ) { <nl> + Optional < PostRestSetting > first = postSettings . first ( ) ; <nl> + if ( first . isPresent ( ) ) { <nl> + return Optional . of ( first . get ( ) . getHandler ( ) ) ; <nl> + } <nl> + return Optional . absent ( ) ; <nl> + <nl> + } <nl> + <nl> @ Override <nl> @ SuppressWarnings ( " unchecked " ) <nl> public ResponseHandler apply ( final MocoConfig config ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 71cc230 . . b018f6e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 24 , 7 + 24 , 10 @ @ import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . header ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . query ; <nl> + import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . MocoRest . get ; <nl> + import static com . github . dreamhead . moco . MocoRest . post ; <nl> import static com . github . dreamhead . moco . MocoRest . restServer ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> @ @ - 56 , 8 + 59 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , <nl> - MocoRest . get ( " 2 " , toJson ( resource2 ) ) <nl> + get ( " 1 " , toJson ( resource1 ) ) , <nl> + get ( " 2 " , toJson ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 85 , 8 + 88 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , <nl> - MocoRest . get ( " 2 " , toJson ( resource2 ) ) <nl> + get ( " 1 " , toJson ( resource1 ) ) , <nl> + get ( " 2 " , toJson ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 128 , 8 + 131 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , <nl> - MocoRest . get ( " 2 " , toJson ( resource2 ) ) <nl> + get ( " 1 " , toJson ( resource1 ) ) , <nl> + get ( " 2 " , toJson ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 162 , 8 + 165 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " 0XBABE " ; <nl> <nl> server . resource ( " targets " , <nl> - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , <nl> - MocoRest . get ( " 2 " , toJson ( resource2 ) ) <nl> + get ( " 1 " , toJson ( resource1 ) ) , <nl> + get ( " 2 " , toJson ( resource2 ) ) <nl> ) ; <nl> <nl> File file = folder . newFile ( ) ; <nl> @ @ - 192 , 8 + 195 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - MocoRest . get ( " 1 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource1 ) ) , <nl> - MocoRest . get ( " 2 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource2 ) ) <nl> + get ( " 1 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource1 ) ) , <nl> + get ( " 2 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource2 ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 220 , 7 + 223 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> @ Test <nl> public void should _ query _ with _ condition ( ) throws Exception { <nl> - RestServer server = restServer ( 12306 , log ( ) ) ; <nl> + RestServer server = restServer ( 12306 ) ; <nl> Plain resource1 = new Plain ( ) ; <nl> resource1 . code = 1 ; <nl> resource1 . message = " hello " ; <nl> @ @ - 230 , 7 + 233 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> resource2 . message = " world " ; <nl> <nl> server . resource ( " targets " , <nl> - MocoRest . get ( eq ( query ( " foo " ) , " bar " ) , toJson ( ImmutableList . of ( resource1 , resource2 ) ) ) <nl> + get ( eq ( query ( " foo " ) , " bar " ) , toJson ( ImmutableList . of ( resource1 , resource2 ) ) ) <nl> ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 246 , 6 + 249 , 28 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ post ( ) throws Exception { <nl> + RestServer server = restServer ( 12306 ) ; <nl> + final Plain resource1 = new Plain ( ) ; <nl> + resource1 . code = 1 ; <nl> + resource1 . message = " hello " ; <nl> + <nl> + server . resource ( " targets " , <nl> + post ( status ( 201 ) , header ( " Location " , " / targets / 123 " ) ) <nl> + ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + HttpResponse httpResponse = helper . postForResponse ( remoteUrl ( " / targets " ) , <nl> + mapper . writeValueAsString ( resource1 ) ) ; <nl> + assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; <nl> + assertThat ( httpResponse . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private Plain getResource ( String uri ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; <nl> return asPlain ( response ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> index 22b7190 . . 276ce1e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> @ @ - 95 , 6 + 95 , 14 @ @ public class MocoTestHelper { <nl> return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> + public HttpResponse postForResponse ( final String url , String content ) throws IOException { <nl> + Request request = Request . Post ( url ) <nl> + . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> + . bodyByteArray ( content . getBytes ( ) ) ; <nl> + return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + <nl> + } <nl> + <nl> public String postStream ( String url , InputStream stream ) throws IOException { <nl> return postBytes ( url , toByteArray ( stream ) ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index 5f5a22b . . 7d92224 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 1 , 12 + 1 , 17 @ @ 
 package com . github . dreamhead . moco . util ; 
 
 import com . fasterxml . jackson . core . JsonProcessingException ; 
 + import com . fasterxml . jackson . core . type . TypeReference ; 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . github . dreamhead . moco . MocoException ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + 
 public final class Jsons { 
 + private static ObjectMapper mapper = new ObjectMapper ( ) ; 
 + 
 public static String toJson ( final Object value ) { 
 - ObjectMapper mapper = new ObjectMapper ( ) ; 
 try { 
 return mapper . writeValueAsString ( value ) ; 
 } catch ( JsonProcessingException e ) { 
 @ @ - 14 , 6 + 19 , 38 @ @ public final class Jsons { 
 } 
 } 
 
 + public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { 
 + try { 
 + return mapper . readValue ( value , clazz ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + } 
 + 
 + public static < T > T toObject ( final String value , final Class < T > clazz ) { 
 + try { 
 + return mapper . readValue ( value , clazz ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + } 
 + 
 + public static < T > T toObject ( final String value , final TypeReference clazz ) { 
 + try { 
 + return mapper . readValue ( value , clazz ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + } 
 + 
 + public static < T > T toObject ( final InputStream value , final TypeReference clazz ) { 
 + try { 
 + return mapper . readValue ( value , clazz ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + } 
 + 
 private Jsons ( ) { 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index 96a24b6 . . 407113d 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . net . MediaType ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . client . HttpResponseException ; 
 @ @ - 140 , 8 + 140 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; 
 assertThat ( mediaType . type ( ) , is ( " application " ) ) ; 
 assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; 
 - ObjectMapper mapper = new ObjectMapper ( ) ; 
 - PlainA responseA = mapper . readValue ( entity . getContent ( ) , PlainA . class ) ; 
 + PlainA responseA = Jsons . toObject ( entity . getContent ( ) , PlainA . class ) ; 
 assertThat ( responseA . code , is ( 1 ) ) ; 
 assertThat ( responseA . message , is ( " message " ) ) ; 
 } 
 @ @ - 158 , 8 + 157 , 7 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 @ Override 
 public void run ( ) throws Exception { 
 String content = helper . get ( remoteUrl ( root ( ) ) ) ; 
 - ObjectMapper mapper = new ObjectMapper ( ) ; 
 - PlainA responseA = mapper . readValue ( content , PlainA . class ) ; 
 + PlainA responseA = Jsons . toObject ( content , PlainA . class ) ; 
 assertThat ( responseA . code , is ( 1 ) ) ; 
 assertThat ( responseA . message , is ( " 消 息 " ) ) ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 index 97e2b4b . . a149a56 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 @ @ - 1 , 7 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 import com . fasterxml . jackson . core . type . TypeReference ; 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMultimap ; 
 @ @ - 51 , 8 + 50 , 6 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 @ Rule 
 public TemporaryFolder folder = new TemporaryFolder ( ) ; 
 
 - private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 - 
 @ Override 
 protected RestServer createServer ( int port ) { 
 return restServer ( port , log ( ) ) ; 
 @ @ - 268 , 7 + 265 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws Exception { 
 - List < Plain > plains = mapper . readValue ( helper . get ( remoteUrl ( " / targets ? foo = bar " ) ) , new TypeReference < List < Plain > > ( ) { 
 + List < Plain > plains = Jsons . toObject ( helper . get ( remoteUrl ( " / targets ? foo = bar " ) ) , new TypeReference < List < Plain > > ( ) { 
 } ) ; 
 assertThat ( plains . size ( ) , is ( 2 ) ) ; 
 
 @ @ - 794 , 7 + 791 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 
 private Plain asPlain ( HttpResponse response ) throws IOException { 
 HttpEntity entity = checkJsonResponse ( response ) ; 
 - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; 
 + return Jsons . toObject ( entity . getContent ( ) , Plain . class ) ; 
 } 
 
 private List < Plain > getResources ( final String uri ) throws IOException { 
 @ @ - 804 , 7 + 801 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 
 private List < Plain > asPlains ( HttpResponse response ) throws IOException { 
 HttpEntity entity = checkJsonResponse ( response ) ; 
 - return mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { 
 + return Jsons . toObject ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { 
 } ) ; 
 } 
 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 index 8afec26 . . 238165f 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 @ @ - 1 , 10 + 1 , 10 @ @ 
 package com . github . dreamhead . moco ; 
 
 import com . fasterxml . jackson . core . type . TypeReference ; 
 - import com . fasterxml . jackson . databind . ObjectMapper ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . net . HttpHeaders ; 
 import com . google . common . net . MediaType ; 
 - import org . apache . http . * ; 
 + import org . apache . http . HttpEntity ; 
 import org . junit . Test ; 
 
 import java . io . IOException ; 
 @ @ - 16 , 8 + 16 , 6 @ @ import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 - private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 - 
 @ Test 
 public void should _ get _ resource ( ) throws IOException { 
 runWithConfiguration ( " rest / rest . json " ) ; 
 @ @ - 43 , 7 + 41 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 resource1 . message = " hello " ; 
 
 org . apache . http . HttpResponse httpResponse = helper . postForResponse ( remoteUrl ( " / targets " ) , 
 - mapper . writeValueAsString ( resource1 ) ) ; 
 + Jsons . toJson ( resource1 ) ) ; 
 assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; 
 assertThat ( httpResponse . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; 
 } 
 @ @ - 57 , 7 + 55 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 resource1 . message = " hello " ; 
 
 org . apache . http . HttpResponse httpResponse = helper . putForResponse ( remoteUrl ( " / targets / 1 " ) , 
 - mapper . writeValueAsString ( resource1 ) ) ; 
 + Jsons . toJson ( resource1 ) ) ; 
 assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; 
 } 
 
 @ @ - 183 , 7 + 181 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 
 assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) ) ; 
 HttpEntity entity = response . getEntity ( ) ; 
 - List < Plain > plains = mapper . readValue ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { 
 + List < Plain > plains = Jsons . toObject ( entity . getContent ( ) , new TypeReference < List < Plain > > ( ) { 
 } ) ; 
 assertThat ( plains . size ( ) , is ( 2 ) ) ; 
 } 
 @ @ - 223 , 7 + 221 , 7 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 MediaType mediaType = MediaType . parse ( entity . getContentType ( ) . getValue ( ) ) ; 
 assertThat ( mediaType . type ( ) , is ( " application " ) ) ; 
 assertThat ( mediaType . subtype ( ) , is ( " json " ) ) ; 
 - return mapper . readValue ( entity . getContent ( ) , Plain . class ) ; 
 + return Jsons . toObject ( entity . getContent ( ) , Plain . class ) ; 
 } 
 
 private static class Plain {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 index fe59571 . . 3c4a160 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 @ @ - 1 , 9 + 1 , 11 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . handler . AndResponseHandler ; 
 import com . github . dreamhead . moco . monitor . QuietMonitor ; 
 import com . github . dreamhead . moco . rest . ActualRestServer ; 
 import com . github . dreamhead . moco . rest . GetAllRestSetting ; 
 import com . github . dreamhead . moco . rest . GetSingleRestSetting ; 
 + import com . github . dreamhead . moco . rest . PostRestSetting ; 
 import com . google . common . base . Optional ; 
 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 @ @ - 42 , 6 + 44 , 11 @ @ public final class MocoRest { 
 checkNotNull ( handler , " Get response handler should not be null " ) ) ; 
 } 
 
 + public static RestSetting post ( final ResponseHandler . . . handler ) { 
 + return new PostRestSetting ( AndResponseHandler . and ( handler ) ) ; 
 + } 
 + 
 + 
 private MocoRest ( ) { 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / PostRestSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / PostRestSetting . java 
 new file mode 100644 
 index 0000000 . . f7a051d 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / PostRestSetting . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package com . github . dreamhead . moco . rest ; 
 + 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . RestSetting ; 
 + 
 + public class PostRestSetting extends RestSetting { 
 + public PostRestSetting ( final ResponseHandler handler ) { 
 + super ( handler ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 index 9e83add . . 6eb4da0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / RestHandler . java 
 @ @ - 27 , 6 + 27 , 7 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 private final ResponseHandler notFoundHandler ; 
 private final FluentIterable < GetAllRestSetting > getAllSettings ; 
 private final FluentIterable < GetSingleRestSetting > getSingleSettings ; 
 + private final FluentIterable < PostRestSetting > postSettings ; 
 
 public RestHandler ( final String name , final RestSetting . . . settings ) { 
 this . name = name ; 
 @ @ - 38 , 6 + 39 , 9 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 this . getSingleSettings = FluentIterable . of ( settings ) 
 . filter ( GetSingleRestSetting . class ) 
 . transform ( toInstance ( GetSingleRestSetting . class ) ) ; 
 + this . postSettings = FluentIterable . of ( settings ) 
 + . filter ( PostRestSetting . class ) 
 + . transform ( toInstance ( PostRestSetting . class ) ) ; 
 } 
 
 @ Override 
 @ @ - 47 , 9 + 51 , 26 @ @ public class RestHandler extends AbstractHttpResponseHandler { 
 return ; 
 } 
 
 + if ( " post " . equalsIgnoreCase ( httpRequest . getMethod ( ) ) ) { 
 + Optional < ResponseHandler > postHandler = getPostHandler ( httpRequest ) ; 
 + if ( postHandler . isPresent ( ) ) { 
 + postHandler . get ( ) . writeToResponse ( new SessionContext ( httpRequest , httpResponse ) ) ; 
 + return ; 
 + } 
 + } 
 + 
 throw new UnsupportedOperationException ( " Unsupported REST request " ) ; 
 } 
 
 + private Optional < ResponseHandler > getPostHandler ( final HttpRequest httpRequest ) { 
 + Optional < PostRestSetting > first = postSettings . first ( ) ; 
 + if ( first . isPresent ( ) ) { 
 + return Optional . of ( first . get ( ) . getHandler ( ) ) ; 
 + } 
 + return Optional . absent ( ) ; 
 + 
 + } 
 + 
 @ Override 
 @ SuppressWarnings ( " unchecked " ) 
 public ResponseHandler apply ( final MocoConfig config ) { 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 index 71cc230 . . b018f6e 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 @ @ - 24 , 7 + 24 , 10 @ @ import static com . github . dreamhead . moco . Moco . eq ; 
 import static com . github . dreamhead . moco . Moco . header ; 
 import static com . github . dreamhead . moco . Moco . log ; 
 import static com . github . dreamhead . moco . Moco . query ; 
 + import static com . github . dreamhead . moco . Moco . status ; 
 import static com . github . dreamhead . moco . Moco . toJson ; 
 + import static com . github . dreamhead . moco . MocoRest . get ; 
 + import static com . github . dreamhead . moco . MocoRest . post ; 
 import static com . github . dreamhead . moco . MocoRest . restServer ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 @ @ - 56 , 8 + 59 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 resource2 . message = " world " ; 
 
 server . resource ( " targets " , 
 - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , 
 - MocoRest . get ( " 2 " , toJson ( resource2 ) ) 
 + get ( " 1 " , toJson ( resource1 ) ) , 
 + get ( " 2 " , toJson ( resource2 ) ) 
 ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 85 , 8 + 88 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 resource2 . message = " world " ; 
 
 server . resource ( " targets " , 
 - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , 
 - MocoRest . get ( " 2 " , toJson ( resource2 ) ) 
 + get ( " 1 " , toJson ( resource1 ) ) , 
 + get ( " 2 " , toJson ( resource2 ) ) 
 ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 128 , 8 + 131 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 resource2 . message = " world " ; 
 
 server . resource ( " targets " , 
 - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , 
 - MocoRest . get ( " 2 " , toJson ( resource2 ) ) 
 + get ( " 1 " , toJson ( resource1 ) ) , 
 + get ( " 2 " , toJson ( resource2 ) ) 
 ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 162 , 8 + 165 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 resource2 . message = " 0XBABE " ; 
 
 server . resource ( " targets " , 
 - MocoRest . get ( " 1 " , toJson ( resource1 ) ) , 
 - MocoRest . get ( " 2 " , toJson ( resource2 ) ) 
 + get ( " 1 " , toJson ( resource1 ) ) , 
 + get ( " 2 " , toJson ( resource2 ) ) 
 ) ; 
 
 File file = folder . newFile ( ) ; 
 @ @ - 192 , 8 + 195 , 8 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 resource2 . message = " world " ; 
 
 server . resource ( " targets " , 
 - MocoRest . get ( " 1 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource1 ) ) , 
 - MocoRest . get ( " 2 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource2 ) ) 
 + get ( " 1 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource1 ) ) , 
 + get ( " 2 " , eq ( header ( HttpHeaders . CONTENT _ TYPE ) , " application / json " ) , toJson ( resource2 ) ) 
 ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 220 , 7 + 223 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 
 @ Test 
 public void should _ query _ with _ condition ( ) throws Exception { 
 - RestServer server = restServer ( 12306 , log ( ) ) ; 
 + RestServer server = restServer ( 12306 ) ; 
 Plain resource1 = new Plain ( ) ; 
 resource1 . code = 1 ; 
 resource1 . message = " hello " ; 
 @ @ - 230 , 7 + 233 , 7 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 resource2 . message = " world " ; 
 
 server . resource ( " targets " , 
 - MocoRest . get ( eq ( query ( " foo " ) , " bar " ) , toJson ( ImmutableList . of ( resource1 , resource2 ) ) ) 
 + get ( eq ( query ( " foo " ) , " bar " ) , toJson ( ImmutableList . of ( resource1 , resource2 ) ) ) 
 ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 246 , 6 + 249 , 28 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 } ) ; 
 } 
 
 + @ Test 
 + public void should _ post ( ) throws Exception { 
 + RestServer server = restServer ( 12306 ) ; 
 + final Plain resource1 = new Plain ( ) ; 
 + resource1 . code = 1 ; 
 + resource1 . message = " hello " ; 
 + 
 + server . resource ( " targets " , 
 + post ( status ( 201 ) , header ( " Location " , " / targets / 123 " ) ) 
 + ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + HttpResponse httpResponse = helper . postForResponse ( remoteUrl ( " / targets " ) , 
 + mapper . writeValueAsString ( resource1 ) ) ; 
 + assertThat ( httpResponse . getStatusLine ( ) . getStatusCode ( ) , is ( 201 ) ) ; 
 + assertThat ( httpResponse . getFirstHeader ( " Location " ) . getValue ( ) , is ( " / targets / 123 " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private Plain getResource ( String uri ) throws IOException { 
 org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; 
 return asPlain ( response ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java 
 index 22b7190 . . 276ce1e 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java 
 @ @ - 95 , 6 + 95 , 14 @ @ public class MocoTestHelper { 
 return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; 
 } 
 
 + public HttpResponse postForResponse ( final String url , String content ) throws IOException { 
 + Request request = Request . Post ( url ) 
 + . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) 
 + . bodyByteArray ( content . getBytes ( ) ) ; 
 + return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + 
 + } 
 + 
 public String postStream ( String url , InputStream stream ) throws IOException { 
 return postBytes ( url , toByteArray ( stream ) ) ; 
 }
