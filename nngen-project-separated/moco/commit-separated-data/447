BLEU SCORE: 0.06567274736060397

TEST MSG: moved create template with resource to text container
GENERATED MSG: collected magic text ' template '

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 5cca6ff . . f782f11 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> - import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> @ @ - 185 , 7 + 184 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return version ( template ( container . getText ( ) ) ) ; <nl> } <nl> <nl> - return createTemplate ( name , container ) ; <nl> + return container . asTemplateResource ( name ) ; <nl> } <nl> <nl> if ( container . isFileContainer ( ) ) { <nl> @ @ - 229 , 15 + 228 , 6 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return asResource ( name , Moco . text ( text ) , charset ) ; <nl> } <nl> <nl> - private Resource createTemplate ( final String name , final TextContainer container ) { <nl> - if ( container . hasProperties ( ) ) { <nl> - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , <nl> - toVariables ( container . getProps ( ) ) ) ; <nl> - } <nl> - <nl> - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; <nl> - } <nl> - <nl> public static ImmutableMap < String , RequestExtractor < ? > > toVariables ( final Map < String , TextContainer > props ) { <nl> return copyOf ( Maps . transformEntries ( props , toVariable ( ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 4666c27 . . 1a870f5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 43 , 15 + 43 , 29 @ @ public class TextContainer { <nl> } <nl> <nl> public ContentResource asTemplateResource ( ) { <nl> + ensureTemplate ( ) ; <nl> + <nl> + if ( hasProperties ( ) ) { <nl> + return template ( this . text , toVariables ( this . props ) ) ; <nl> + } <nl> + <nl> + return template ( this . text ) ; <nl> + } <nl> + <nl> + private void ensureTemplate ( ) { <nl> if ( ! isForTemplate ( ) ) { <nl> throw new IllegalArgumentException ( this + " is not a template " ) ; <nl> } <nl> + } <nl> + <nl> + public ContentResource asTemplateResource ( final String resourceName ) { <nl> + ensureTemplate ( ) ; <nl> <nl> if ( hasProperties ( ) ) { <nl> - return template ( this . text , toVariables ( this . props ) ) ; <nl> + return template ( invokeTarget ( resourceName , this . text , ContentResource . class ) , toVariables ( this . props ) ) ; <nl> } <nl> <nl> - return template ( this . text ) ; <nl> + return template ( invokeTarget ( resourceName , this . text , ContentResource . class ) ) ; <nl> } <nl> <nl> private String getMethodName ( ) {
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index afd1c36 . . 00860c1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 40 , 11 + 40 , 11 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> return builder . withText ( text ) . build ( ) ; <nl> } <nl> <nl> - if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + if ( TextContainer . isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> Template template = Iterators . get ( iterator , 0 ) ; <nl> jp . nextToken ( ) ; <nl> - return TextContainer . builder ( ) . withOperation ( " template " ) . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; <nl> + return builder . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 3445d70 . . be3a136 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public class ResponseSetting extends Dynamics { <nl> private ResponseHandler createResponseHandler ( Map . Entry < String , TextContainer > pair , String targetMethodName ) { <nl> TextContainer container = pair . getValue ( ) ; <nl> try { <nl> - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> } <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class ResponseSetting extends Dynamics { <nl> return invokeTarget ( name , container . getText ( ) , Resource . class ) ; <nl> } <nl> <nl> - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> if ( " version " . equalsIgnoreCase ( name ) ) { <nl> return version ( template ( container . getText ( ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index a9e09b7 . . 02cbc22 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> public class TextContainer { <nl> + public static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ; <nl> private ImmutableMap < String , Object > props ; <nl> @ @ - 28 , 6 + 29 , 15 @ @ public class TextContainer { <nl> return props ; <nl> } <nl> <nl> + public static boolean isForTemplate ( String operation ) { <nl> + return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; <nl> + } <nl> + <nl> + public boolean isForTemplate ( ) { <nl> + return isForTemplate ( this . operation ) ; <nl> + } <nl> + <nl> + <nl> @ Override <nl> public String toString ( ) { <nl> return Objects . toStringHelper ( this )

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 5cca6ff . . f782f11 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . RequestExtractor ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; 
 - import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 @ @ - 185 , 7 + 184 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 return version ( template ( container . getText ( ) ) ) ; 
 } 
 
 - return createTemplate ( name , container ) ; 
 + return container . asTemplateResource ( name ) ; 
 } 
 
 if ( container . isFileContainer ( ) ) { 
 @ @ - 229 , 15 + 228 , 6 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 return asResource ( name , Moco . text ( text ) , charset ) ; 
 } 
 
 - private Resource createTemplate ( final String name , final TextContainer container ) { 
 - if ( container . hasProperties ( ) ) { 
 - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , 
 - toVariables ( container . getProps ( ) ) ) ; 
 - } 
 - 
 - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; 
 - } 
 - 
 public static ImmutableMap < String , RequestExtractor < ? > > toVariables ( final Map < String , TextContainer > props ) { 
 return copyOf ( Maps . transformEntries ( props , toVariable ( ) ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index 4666c27 . . 1a870f5 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 43 , 15 + 43 , 29 @ @ public class TextContainer { 
 } 
 
 public ContentResource asTemplateResource ( ) { 
 + ensureTemplate ( ) ; 
 + 
 + if ( hasProperties ( ) ) { 
 + return template ( this . text , toVariables ( this . props ) ) ; 
 + } 
 + 
 + return template ( this . text ) ; 
 + } 
 + 
 + private void ensureTemplate ( ) { 
 if ( ! isForTemplate ( ) ) { 
 throw new IllegalArgumentException ( this + " is not a template " ) ; 
 } 
 + } 
 + 
 + public ContentResource asTemplateResource ( final String resourceName ) { 
 + ensureTemplate ( ) ; 
 
 if ( hasProperties ( ) ) { 
 - return template ( this . text , toVariables ( this . props ) ) ; 
 + return template ( invokeTarget ( resourceName , this . text , ContentResource . class ) , toVariables ( this . props ) ) ; 
 } 
 
 - return template ( this . text ) ; 
 + return template ( invokeTarget ( resourceName , this . text , ContentResource . class ) ) ; 
 } 
 
 private String getMethodName ( ) {

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index afd1c36 . . 00860c1 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 40 , 11 + 40 , 11 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 return builder . withText ( text ) . build ( ) ; 
 } 
 
 - if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 + if ( TextContainer . isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; 
 Template template = Iterators . get ( iterator , 0 ) ; 
 jp . nextToken ( ) ; 
 - return TextContainer . builder ( ) . withOperation ( " template " ) . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; 
 + return builder . withText ( template . with ) . withProps ( copyOf ( template . vars ) ) . build ( ) ; 
 } 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 3445d70 . . be3a136 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 138 , 7 + 138 , 7 @ @ public class ResponseSetting extends Dynamics { 
 private ResponseHandler createResponseHandler ( Map . Entry < String , TextContainer > pair , String targetMethodName ) { 
 TextContainer container = pair . getValue ( ) ; 
 try { 
 - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { 
 + if ( container . isForTemplate ( ) ) { 
 Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; 
 } 
 @ @ - 160 , 7 + 160 , 7 @ @ public class ResponseSetting extends Dynamics { 
 return invokeTarget ( name , container . getText ( ) , Resource . class ) ; 
 } 
 
 - if ( " template " . equalsIgnoreCase ( container . getOperation ( ) ) ) { 
 + if ( container . isForTemplate ( ) ) { 
 if ( " version " . equalsIgnoreCase ( name ) ) { 
 return version ( template ( container . getText ( ) ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index a9e09b7 . . 02cbc22 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableMap ; 
 
 public class TextContainer { 
 + public static final String TEMPLATE _ NAME = " template " ; 
 private String text ; 
 private String operation ; 
 private ImmutableMap < String , Object > props ; 
 @ @ - 28 , 6 + 29 , 15 @ @ public class TextContainer { 
 return props ; 
 } 
 
 + public static boolean isForTemplate ( String operation ) { 
 + return TEMPLATE _ NAME . equalsIgnoreCase ( operation ) ; 
 + } 
 + 
 + public boolean isForTemplate ( ) { 
 + return isForTemplate ( this . operation ) ; 
 + } 
 + 
 + 
 @ Override 
 public String toString ( ) { 
 return Objects . toStringHelper ( this )
