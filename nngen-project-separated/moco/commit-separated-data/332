BLEU SCORE: 0.08170609724417775

TEST MSG: moved content to post event action
GENERATED MSG: introduced moco get and post request action

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> index ce1805f . . afa3ff3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> @ @ - 3 , 9 + 3 , 7 @ @ package com . github . dreamhead . moco . action ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> - import com . google . common . base . Optional ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> <nl> @ @ - 13 , 7 + 11 , 7 @ @ import static com . google . common . base . Optional . of ; <nl> <nl> public class MocoGetRequestAction extends MocoRequestAction { <nl> public MocoGetRequestAction ( Resource url ) { <nl> - super ( url , Optional . < ContentResource > absent ( ) ) ; <nl> + super ( url ) ; <nl> } <nl> <nl> protected HttpRequestBase createRequest ( final Resource url , final Request request ) { <nl> @ @ - 22 , 12 + 20 , 7 @ @ public class MocoGetRequestAction extends MocoRequestAction { <nl> } <nl> <nl> @ Override <nl> - protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> - Resource appliedContent = originalContent . apply ( config ) ; <nl> - if ( appliedContent ! = originalContent ) { <nl> - return new MocoGetRequestAction ( this . url ) ; <nl> - } <nl> - <nl> + public MocoEventAction apply ( MocoConfig config ) { <nl> return this ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> index 120e557 . . 38c25fe 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> @ @ - 5 , 25 + 5 , 36 @ @ import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> + import org . apache . http . HttpEntity ; <nl> import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> + import org . apache . http . entity . InputStreamEntity ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class MocoPostRequestAction extends MocoRequestAction { <nl> - public MocoPostRequestAction ( Resource url , ContentResource content ) { <nl> - super ( url , of ( content ) ) ; <nl> + private final ContentResource content ; <nl> + <nl> + public MocoPostRequestAction ( final Resource url , final ContentResource content ) { <nl> + super ( url ) ; <nl> + this . content = content ; <nl> } <nl> <nl> protected HttpRequestBase createRequest ( final Resource url , final Request request ) { <nl> String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> - return new HttpPost ( targetUrl ) ; <nl> + HttpPost targetRequest = new HttpPost ( targetUrl ) ; <nl> + targetRequest . setEntity ( asEntity ( content , request ) ) ; <nl> + return targetRequest ; <nl> + } <nl> + <nl> + private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> + return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> @ Override <nl> - protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> - Resource appliedContent = originalContent . apply ( config ) ; <nl> - if ( appliedContent ! = originalContent ) { <nl> + public MocoEventAction apply ( final MocoConfig config ) { <nl> + Resource appliedContent = this . content . apply ( config ) ; <nl> + if ( appliedContent ! = this . content ) { <nl> return new MocoPostRequestAction ( this . url , ( ContentResource ) appliedContent ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index 5684017 . . 6e77a28 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 1 , 33 + 1 , 22 @ @ <nl> package com . github . dreamhead . moco . action ; <nl> <nl> - import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> - import com . google . common . base . Optional ; <nl> - import org . apache . http . HttpEntity ; <nl> - import org . apache . http . HttpEntityEnclosingRequest ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> - import org . apache . http . entity . InputStreamEntity ; <nl> import org . apache . http . impl . client . CloseableHttpClient ; <nl> import org . apache . http . impl . client . HttpClients ; <nl> <nl> import java . io . IOException ; <nl> <nl> - import static com . google . common . base . Optional . of ; <nl> - <nl> public abstract class MocoRequestAction implements MocoEventAction { <nl> protected final Resource url ; <nl> - private final Optional < ContentResource > content ; <nl> <nl> protected abstract HttpRequestBase createRequest ( final Resource url , final Request request ) ; <nl> - protected abstract MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) ; <nl> <nl> - public MocoRequestAction ( final Resource url , final Optional < ContentResource > content ) { <nl> + public MocoRequestAction ( final Resource url ) { <nl> this . url = url ; <nl> - this . content = content ; <nl> } <nl> <nl> @ Override <nl> @ @ - 46 , 33 + 35 , 6 @ @ public abstract class MocoRequestAction implements MocoEventAction { <nl> } <nl> <nl> private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> - HttpRequestBase targetRequest = createRequest ( url , request ) ; <nl> - if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; <nl> - } <nl> - <nl> - client . execute ( targetRequest ) ; <nl> + client . execute ( createRequest ( url , request ) ) ; <nl> } <nl> - <nl> - private HttpEntity asEntity ( final ContentResource resource , final Request request ) { <nl> - return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public MocoEventAction apply ( final MocoConfig config ) { <nl> - if ( this . content . isPresent ( ) ) { <nl> - return applyContent ( config , this . content . get ( ) ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - / / private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { <nl> - / / Resource appliedContent = originalContent . apply ( config ) ; <nl> - / / if ( appliedContent ! = originalContent ) { <nl> - / / return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; <nl> - / / } <nl> - / / <nl> - / / return this ; <nl> - / / } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index f4ed474 . . 1533c80 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 1 , 6 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . action . MocoAsyncAction ; <nl> + import com . github . dreamhead . moco . action . MocoGetRequestAction ; <nl> + import com . github . dreamhead . moco . action . MocoPostRequestAction ; <nl> import com . github . dreamhead . moco . action . MocoRequestAction ; <nl> import com . github . dreamhead . moco . config . MocoContextConfig ; <nl> import com . github . dreamhead . moco . config . MocoFileRootConfig ; <nl> @ @ - 567 , 11 + 569 , 11 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoEventAction get ( final Resource url ) { <nl> - return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; <nl> + return new MocoGetRequestAction ( checkNotNull ( url , " URL should not be null " ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final Resource url , final ContentResource content ) { <nl> - return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> + return new MocoPostRequestAction ( checkNotNull ( url , " URL should not be null " ) , checkNotNull ( content , " Content should not be null " ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final ContentResource content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> new file mode 100644 <nl> index 0000000 . . ce1805f <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . action ; <nl> + <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . MocoEventAction ; <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> + import com . google . common . base . Optional ; <nl> + import org . apache . http . client . methods . HttpGet ; <nl> + import org . apache . http . client . methods . HttpRequestBase ; <nl> + <nl> + import static com . google . common . base . Optional . of ; <nl> + <nl> + public class MocoGetRequestAction extends MocoRequestAction { <nl> + public MocoGetRequestAction ( Resource url ) { <nl> + super ( url , Optional . < ContentResource > absent ( ) ) ; <nl> + } <nl> + <nl> + protected HttpRequestBase createRequest ( final Resource url , final Request request ) { <nl> + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> + return new HttpGet ( targetUrl ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> + Resource appliedContent = originalContent . apply ( config ) ; <nl> + if ( appliedContent ! = originalContent ) { <nl> + return new MocoGetRequestAction ( this . url ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> new file mode 100644 <nl> index 0000000 . . 120e557 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . action ; <nl> + <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . MocoEventAction ; <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> + import org . apache . http . client . methods . HttpPost ; <nl> + import org . apache . http . client . methods . HttpRequestBase ; <nl> + <nl> + import static com . google . common . base . Optional . of ; <nl> + <nl> + public class MocoPostRequestAction extends MocoRequestAction { <nl> + public MocoPostRequestAction ( Resource url , ContentResource content ) { <nl> + super ( url , of ( content ) ) ; <nl> + } <nl> + <nl> + protected HttpRequestBase createRequest ( final Resource url , final Request request ) { <nl> + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> + return new HttpPost ( targetUrl ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> + Resource appliedContent = originalContent . apply ( config ) ; <nl> + if ( appliedContent ! = originalContent ) { <nl> + return new MocoPostRequestAction ( this . url , ( ContentResource ) appliedContent ) ; <nl> + } <nl> + <nl> + return this ; <nl> + <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index 4586b64 . . 5684017 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . action ; <nl> <nl> - import com . github . dreamhead . moco . HttpMethod ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> @ @ - 10 , 8 + 9 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . HttpEntityEnclosingRequest ; <nl> - import org . apache . http . client . methods . HttpGet ; <nl> - import org . apache . http . client . methods . HttpPost ; <nl> import org . apache . http . client . methods . HttpRequestBase ; <nl> import org . apache . http . entity . InputStreamEntity ; <nl> import org . apache . http . impl . client . CloseableHttpClient ; <nl> @ @ - 20 , 16 + 17 , 16 @ @ import org . apache . http . impl . client . HttpClients ; <nl> import java . io . IOException ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> - import static java . lang . String . format ; <nl> <nl> - public class MocoRequestAction implements MocoEventAction { <nl> - private final Resource url ; <nl> - private final HttpMethod method ; <nl> + public abstract class MocoRequestAction implements MocoEventAction { <nl> + protected final Resource url ; <nl> private final Optional < ContentResource > content ; <nl> <nl> - public MocoRequestAction ( final Resource url , final HttpMethod method , final Optional < ContentResource > content ) { <nl> + protected abstract HttpRequestBase createRequest ( final Resource url , final Request request ) ; <nl> + protected abstract MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) ; <nl> + <nl> + public MocoRequestAction ( final Resource url , final Optional < ContentResource > content ) { <nl> this . url = url ; <nl> - this . method = method ; <nl> this . content = content ; <nl> } <nl> <nl> @ @ - 49 , 7 + 46 , 7 @ @ public class MocoRequestAction implements MocoEventAction { <nl> } <nl> <nl> private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> - HttpRequestBase targetRequest = createRequest ( url , method , request ) ; <nl> + HttpRequestBase targetRequest = createRequest ( url , request ) ; <nl> if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; <nl> } <nl> @ @ - 61 , 19 + 58 , 6 @ @ public class MocoRequestAction implements MocoEventAction { <nl> return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> - private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { <nl> - String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> - if ( HttpMethod . GET = = method ) { <nl> - return new HttpGet ( targetUrl ) ; <nl> - } <nl> - <nl> - if ( HttpMethod . POST = = method ) { <nl> - return new HttpPost ( targetUrl ) ; <nl> - } <nl> - <nl> - throw new MocoException ( format ( " unknown HTTP method : % s " , method ) ) ; <nl> - } <nl> - <nl> @ Override <nl> public MocoEventAction apply ( final MocoConfig config ) { <nl> if ( this . content . isPresent ( ) ) { <nl> @ @ - 83 , 12 + 67 , 12 @ @ public class MocoRequestAction implements MocoEventAction { <nl> return this ; <nl> } <nl> <nl> - private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { <nl> - Resource appliedContent = originalContent . apply ( config ) ; <nl> - if ( appliedContent ! = originalContent ) { <nl> - return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> + / / private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { <nl> + / / Resource appliedContent = originalContent . apply ( config ) ; <nl> + / / if ( appliedContent ! = originalContent ) { <nl> + / / return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; <nl> + / / } <nl> + / / <nl> + / / return this ; <nl> + / / } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java 
 index ce1805f . . afa3ff3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java 
 @ @ - 3 , 9 + 3 , 7 @ @ package com . github . dreamhead . moco . action ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . Request ; 
 - import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 - import com . google . common . base . Optional ; 
 import org . apache . http . client . methods . HttpGet ; 
 import org . apache . http . client . methods . HttpRequestBase ; 
 
 @ @ - 13 , 7 + 11 , 7 @ @ import static com . google . common . base . Optional . of ; 
 
 public class MocoGetRequestAction extends MocoRequestAction { 
 public MocoGetRequestAction ( Resource url ) { 
 - super ( url , Optional . < ContentResource > absent ( ) ) ; 
 + super ( url ) ; 
 } 
 
 protected HttpRequestBase createRequest ( final Resource url , final Request request ) { 
 @ @ - 22 , 12 + 20 , 7 @ @ public class MocoGetRequestAction extends MocoRequestAction { 
 } 
 
 @ Override 
 - protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { 
 - Resource appliedContent = originalContent . apply ( config ) ; 
 - if ( appliedContent ! = originalContent ) { 
 - return new MocoGetRequestAction ( this . url ) ; 
 - } 
 - 
 + public MocoEventAction apply ( MocoConfig config ) { 
 return this ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 index 120e557 . . 38c25fe 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 @ @ - 5 , 25 + 5 , 36 @ @ import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 + import org . apache . http . HttpEntity ; 
 import org . apache . http . client . methods . HttpPost ; 
 import org . apache . http . client . methods . HttpRequestBase ; 
 + import org . apache . http . entity . InputStreamEntity ; 
 
 import static com . google . common . base . Optional . of ; 
 
 public class MocoPostRequestAction extends MocoRequestAction { 
 - public MocoPostRequestAction ( Resource url , ContentResource content ) { 
 - super ( url , of ( content ) ) ; 
 + private final ContentResource content ; 
 + 
 + public MocoPostRequestAction ( final Resource url , final ContentResource content ) { 
 + super ( url ) ; 
 + this . content = content ; 
 } 
 
 protected HttpRequestBase createRequest ( final Resource url , final Request request ) { 
 String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; 
 - return new HttpPost ( targetUrl ) ; 
 + HttpPost targetRequest = new HttpPost ( targetUrl ) ; 
 + targetRequest . setEntity ( asEntity ( content , request ) ) ; 
 + return targetRequest ; 
 + } 
 + 
 + private HttpEntity asEntity ( final ContentResource resource , final Request request ) { 
 + return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; 
 } 
 
 @ Override 
 - protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { 
 - Resource appliedContent = originalContent . apply ( config ) ; 
 - if ( appliedContent ! = originalContent ) { 
 + public MocoEventAction apply ( final MocoConfig config ) { 
 + Resource appliedContent = this . content . apply ( config ) ; 
 + if ( appliedContent ! = this . content ) { 
 return new MocoPostRequestAction ( this . url , ( ContentResource ) appliedContent ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index 5684017 . . 6e77a28 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 1 , 33 + 1 , 22 @ @ 
 package com . github . dreamhead . moco . action ; 
 
 - import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . Request ; 
 - import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 - import com . google . common . base . Optional ; 
 - import org . apache . http . HttpEntity ; 
 - import org . apache . http . HttpEntityEnclosingRequest ; 
 import org . apache . http . client . methods . HttpRequestBase ; 
 - import org . apache . http . entity . InputStreamEntity ; 
 import org . apache . http . impl . client . CloseableHttpClient ; 
 import org . apache . http . impl . client . HttpClients ; 
 
 import java . io . IOException ; 
 
 - import static com . google . common . base . Optional . of ; 
 - 
 public abstract class MocoRequestAction implements MocoEventAction { 
 protected final Resource url ; 
 - private final Optional < ContentResource > content ; 
 
 protected abstract HttpRequestBase createRequest ( final Resource url , final Request request ) ; 
 - protected abstract MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) ; 
 
 - public MocoRequestAction ( final Resource url , final Optional < ContentResource > content ) { 
 + public MocoRequestAction ( final Resource url ) { 
 this . url = url ; 
 - this . content = content ; 
 } 
 
 @ Override 
 @ @ - 46 , 33 + 35 , 6 @ @ public abstract class MocoRequestAction implements MocoEventAction { 
 } 
 
 private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { 
 - HttpRequestBase targetRequest = createRequest ( url , request ) ; 
 - if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 - ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; 
 - } 
 - 
 - client . execute ( targetRequest ) ; 
 + client . execute ( createRequest ( url , request ) ) ; 
 } 
 - 
 - private HttpEntity asEntity ( final ContentResource resource , final Request request ) { 
 - return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public MocoEventAction apply ( final MocoConfig config ) { 
 - if ( this . content . isPresent ( ) ) { 
 - return applyContent ( config , this . content . get ( ) ) ; 
 - } 
 - 
 - return this ; 
 - } 
 - 
 - / / private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { 
 - / / Resource appliedContent = originalContent . apply ( config ) ; 
 - / / if ( appliedContent ! = originalContent ) { 
 - / / return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; 
 - / / } 
 - / / 
 - / / return this ; 
 - / / } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index f4ed474 . . 1533c80 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 1 , 6 + 1 , 8 @ @ 
 package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . action . MocoAsyncAction ; 
 + import com . github . dreamhead . moco . action . MocoGetRequestAction ; 
 + import com . github . dreamhead . moco . action . MocoPostRequestAction ; 
 import com . github . dreamhead . moco . action . MocoRequestAction ; 
 import com . github . dreamhead . moco . config . MocoContextConfig ; 
 import com . github . dreamhead . moco . config . MocoFileRootConfig ; 
 @ @ - 567 , 11 + 569 , 11 @ @ public final class Moco { 
 } 
 
 public static MocoEventAction get ( final Resource url ) { 
 - return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; 
 + return new MocoGetRequestAction ( checkNotNull ( url , " URL should not be null " ) ) ; 
 } 
 
 public static MocoEventAction post ( final Resource url , final ContentResource content ) { 
 - return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; 
 + return new MocoPostRequestAction ( checkNotNull ( url , " URL should not be null " ) , checkNotNull ( content , " Content should not be null " ) ) ; 
 } 
 
 public static MocoEventAction post ( final String url , final ContentResource content ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java 
 new file mode 100644 
 index 0000000 . . ce1805f 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoGetRequestAction . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . action ; 
 + 
 + import com . github . dreamhead . moco . MocoConfig ; 
 + import com . github . dreamhead . moco . MocoEventAction ; 
 + import com . github . dreamhead . moco . Request ; 
 + import com . github . dreamhead . moco . resource . ContentResource ; 
 + import com . github . dreamhead . moco . resource . Resource ; 
 + import com . google . common . base . Optional ; 
 + import org . apache . http . client . methods . HttpGet ; 
 + import org . apache . http . client . methods . HttpRequestBase ; 
 + 
 + import static com . google . common . base . Optional . of ; 
 + 
 + public class MocoGetRequestAction extends MocoRequestAction { 
 + public MocoGetRequestAction ( Resource url ) { 
 + super ( url , Optional . < ContentResource > absent ( ) ) ; 
 + } 
 + 
 + protected HttpRequestBase createRequest ( final Resource url , final Request request ) { 
 + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; 
 + return new HttpGet ( targetUrl ) ; 
 + } 
 + 
 + @ Override 
 + protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { 
 + Resource appliedContent = originalContent . apply ( config ) ; 
 + if ( appliedContent ! = originalContent ) { 
 + return new MocoGetRequestAction ( this . url ) ; 
 + } 
 + 
 + return this ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 new file mode 100644 
 index 0000000 . . 120e557 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoPostRequestAction . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . action ; 
 + 
 + import com . github . dreamhead . moco . MocoConfig ; 
 + import com . github . dreamhead . moco . MocoEventAction ; 
 + import com . github . dreamhead . moco . Request ; 
 + import com . github . dreamhead . moco . resource . ContentResource ; 
 + import com . github . dreamhead . moco . resource . Resource ; 
 + import org . apache . http . client . methods . HttpPost ; 
 + import org . apache . http . client . methods . HttpRequestBase ; 
 + 
 + import static com . google . common . base . Optional . of ; 
 + 
 + public class MocoPostRequestAction extends MocoRequestAction { 
 + public MocoPostRequestAction ( Resource url , ContentResource content ) { 
 + super ( url , of ( content ) ) ; 
 + } 
 + 
 + protected HttpRequestBase createRequest ( final Resource url , final Request request ) { 
 + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; 
 + return new HttpPost ( targetUrl ) ; 
 + } 
 + 
 + @ Override 
 + protected MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { 
 + Resource appliedContent = originalContent . apply ( config ) ; 
 + if ( appliedContent ! = originalContent ) { 
 + return new MocoPostRequestAction ( this . url , ( ContentResource ) appliedContent ) ; 
 + } 
 + 
 + return this ; 
 + 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index 4586b64 . . 5684017 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . action ; 
 
 - import com . github . dreamhead . moco . HttpMethod ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . MocoException ; 
 @ @ - 10 , 8 + 9 , 6 @ @ import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Optional ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . HttpEntityEnclosingRequest ; 
 - import org . apache . http . client . methods . HttpGet ; 
 - import org . apache . http . client . methods . HttpPost ; 
 import org . apache . http . client . methods . HttpRequestBase ; 
 import org . apache . http . entity . InputStreamEntity ; 
 import org . apache . http . impl . client . CloseableHttpClient ; 
 @ @ - 20 , 16 + 17 , 16 @ @ import org . apache . http . impl . client . HttpClients ; 
 import java . io . IOException ; 
 
 import static com . google . common . base . Optional . of ; 
 - import static java . lang . String . format ; 
 
 - public class MocoRequestAction implements MocoEventAction { 
 - private final Resource url ; 
 - private final HttpMethod method ; 
 + public abstract class MocoRequestAction implements MocoEventAction { 
 + protected final Resource url ; 
 private final Optional < ContentResource > content ; 
 
 - public MocoRequestAction ( final Resource url , final HttpMethod method , final Optional < ContentResource > content ) { 
 + protected abstract HttpRequestBase createRequest ( final Resource url , final Request request ) ; 
 + protected abstract MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) ; 
 + 
 + public MocoRequestAction ( final Resource url , final Optional < ContentResource > content ) { 
 this . url = url ; 
 - this . method = method ; 
 this . content = content ; 
 } 
 
 @ @ - 49 , 7 + 46 , 7 @ @ public class MocoRequestAction implements MocoEventAction { 
 } 
 
 private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { 
 - HttpRequestBase targetRequest = createRequest ( url , method , request ) ; 
 + HttpRequestBase targetRequest = createRequest ( url , request ) ; 
 if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) , request ) ) ; 
 } 
 @ @ - 61 , 19 + 58 , 6 @ @ public class MocoRequestAction implements MocoEventAction { 
 return new InputStreamEntity ( resource . readFor ( of ( request ) ) . toInputStream ( ) ) ; 
 } 
 
 - private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { 
 - String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; 
 - if ( HttpMethod . GET = = method ) { 
 - return new HttpGet ( targetUrl ) ; 
 - } 
 - 
 - if ( HttpMethod . POST = = method ) { 
 - return new HttpPost ( targetUrl ) ; 
 - } 
 - 
 - throw new MocoException ( format ( " unknown HTTP method : % s " , method ) ) ; 
 - } 
 - 
 @ Override 
 public MocoEventAction apply ( final MocoConfig config ) { 
 if ( this . content . isPresent ( ) ) { 
 @ @ - 83 , 12 + 67 , 12 @ @ public class MocoRequestAction implements MocoEventAction { 
 return this ; 
 } 
 
 - private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { 
 - Resource appliedContent = originalContent . apply ( config ) ; 
 - if ( appliedContent ! = originalContent ) { 
 - return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; 
 - } 
 - 
 - return this ; 
 - } 
 + / / private MocoEventAction applyContent ( final MocoConfig config , final ContentResource originalContent ) { 
 + / / Resource appliedContent = originalContent . apply ( config ) ; 
 + / / if ( appliedContent ! = originalContent ) { 
 + / / return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) appliedContent ) ) ; 
 + / / } 
 + / / 
 + / / return this ; 
 + / / } 
 }
