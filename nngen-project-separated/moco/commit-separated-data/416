BLEU SCORE: 0.23643540225079396

TEST MSG: added max age cookie option
GENERATED MSG: added path cookie option

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> index 6bf2f32 . . 43a594b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 1 , 9 + 1 , 14 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; <nl> import com . github . dreamhead . moco . cookie . PathCookieOption ; <nl> <nl> public abstract class CookieOption { <nl> public static CookieOption path ( final String path ) { <nl> return new PathCookieOption ( path ) ; <nl> } <nl> + <nl> + public static CookieOption maxAge ( final long maxAge ) { <nl> + return new MaxAgeCookieOption ( maxAge ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . 20754f5 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public class MaxAgeCookieOption extends ActualCookieOption { <nl> + private final long maxAge ; <nl> + <nl> + public MaxAgeCookieOption ( long maxAge ) { <nl> + this . maxAge = maxAge ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visit ( final Cookie cookie ) { <nl> + cookie . setMaxAge ( maxAge ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> index 720cf58 . . d63260a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ public class PathCookieOption extends ActualCookieOption { <nl> } <nl> <nl> @ Override <nl> - public void visit ( Cookie cookie ) { <nl> + public void visit ( final Cookie cookie ) { <nl> cookie . setPath ( path ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index c597699 . . 0209426 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . CookieOption . maxAge ; <nl> import static com . github . dreamhead . moco . CookieOption . path ; <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> @ @ - 77 , 6 + 78 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ max _ age ( ) throws Exception { <nl> + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , maxAge ( 3600 ) ) , status ( 302 ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . maxAge ( ) , is ( 3600L ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ redirect _ to _ expected _ url ( ) throws Exception { <nl> server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; <nl> server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . 6bf2f32 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . github . dreamhead . moco . cookie . PathCookieOption ; <nl> + <nl> + public abstract class CookieOption { <nl> + public static CookieOption path ( final String path ) { <nl> + return new PathCookieOption ( path ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 9c43dae . . 01eb5ef 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 289 , 14 + 289 , 17 @ @ public final class Moco { <nl> return new CookieRequestExtractor ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) ) ; <nl> } <nl> <nl> - public static ResponseHandler cookie ( final String key , final String value ) { <nl> - return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) ) ; <nl> + public static ResponseHandler cookie ( final String key , final String value , final CookieOption . . . options ) { <nl> + return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , <nl> + text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) , <nl> + options ) ; <nl> } <nl> <nl> - public static ResponseHandler cookie ( final String key , final Resource resource ) { <nl> + public static ResponseHandler cookie ( final String key , final Resource resource , final CookieOption . . . options ) { <nl> return header ( SET _ COOKIE , cookieResource ( <nl> checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , <nl> - checkNotNull ( resource , " Cookie value should not be null " ) ) ) ; <nl> + checkNotNull ( resource , " Cookie value should not be null " ) , <nl> + options ) ) ; <nl> } <nl> <nl> public static RequestExtractor < String > form ( final String key ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / ActualCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / ActualCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . d5c00c3 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / ActualCookieOption . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import com . github . dreamhead . moco . CookieOption ; <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public abstract class ActualCookieOption extends CookieOption { <nl> + public abstract void visit ( final Cookie cookie ) ; <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . 720cf58 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public class PathCookieOption extends ActualCookieOption { <nl> + private final String path ; <nl> + <nl> + public PathCookieOption ( final String path ) { <nl> + this . path = path ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visit ( Cookie cookie ) { <nl> + cookie . setPath ( path ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> index 69866ea . . 318d9c0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . resource ; <nl> <nl> + import com . github . dreamhead . moco . CookieOption ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> @ @ - 80 , 12 + 81 , 12 @ @ public final class ResourceFactory { <nl> } ) ; <nl> } <nl> <nl> - public static Resource cookieResource ( final String key , final Resource resource ) { <nl> + public static Resource cookieResource ( final String key , final Resource resource , final CookieOption . . . options ) { <nl> return resource ( id ( " cookie " ) , cookieConfigApplier ( key , resource ) , new ResourceReader ( ) { <nl> @ Override <nl> public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> MessageContent messageContent = resource . readFor ( request ) ; <nl> - return content ( new Cookies ( ) . encodeCookie ( key , messageContent . toString ( ) ) ) ; <nl> + return content ( new Cookies ( ) . encodeCookie ( key , messageContent . toString ( ) , options ) ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java <nl> index 8d7ac02 . . a12409a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java <nl> @ @ - 1 , 13 + 1 , 17 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> + import com . github . dreamhead . moco . CookieOption ; <nl> + import com . github . dreamhead . moco . cookie . ActualCookieOption ; <nl> import io . netty . handler . codec . http . cookie . ServerCookieEncoder ; <nl> import io . netty . handler . codec . http . cookie . Cookie ; <nl> import io . netty . handler . codec . http . cookie . DefaultCookie ; <nl> <nl> public final class Cookies { <nl> - public String encodeCookie ( final String key , final String value ) { <nl> + public String encodeCookie ( final String key , final String value , final CookieOption . . . options ) { <nl> Cookie cookie = new DefaultCookie ( key , value ) ; <nl> - cookie . setPath ( " / " ) ; <nl> + for ( CookieOption option : options ) { <nl> + ( ( ActualCookieOption ) option ) . visit ( cookie ) ; <nl> + } <nl> return ServerCookieEncoder . STRICT . encode ( cookie ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index 344ca41 . . c597699 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 1 , 10 + 1 , 16 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . net . * ; <nl> + import com . google . common . net . HttpHeaders ; <nl> + import io . netty . handler . codec . http . cookie . ClientCookieDecoder ; <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + import org . apache . http . * ; <nl> import org . apache . http . message . BasicNameValuePair ; <nl> import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . CookieOption . path ; <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> @ @ - 55 , 6 + 61 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ path ( ) throws Exception { <nl> + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , path ( " / " ) ) , status ( 302 ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ redirect _ to _ expected _ url ( ) throws Exception { <nl> server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; <nl> server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 index 6bf2f32 . . 43a594b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 @ @ - 1 , 9 + 1 , 14 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; 
 import com . github . dreamhead . moco . cookie . PathCookieOption ; 
 
 public abstract class CookieOption { 
 public static CookieOption path ( final String path ) { 
 return new PathCookieOption ( path ) ; 
 } 
 + 
 + public static CookieOption maxAge ( final long maxAge ) { 
 + return new MaxAgeCookieOption ( maxAge ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java 
 new file mode 100644 
 index 0000000 . . 20754f5 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / MaxAgeCookieOption . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . github . dreamhead . moco . cookie ; 
 + 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + 
 + public class MaxAgeCookieOption extends ActualCookieOption { 
 + private final long maxAge ; 
 + 
 + public MaxAgeCookieOption ( long maxAge ) { 
 + this . maxAge = maxAge ; 
 + } 
 + 
 + @ Override 
 + public void visit ( final Cookie cookie ) { 
 + cookie . setMaxAge ( maxAge ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java 
 index 720cf58 . . d63260a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java 
 @ @ - 10 , 7 + 10 , 7 @ @ public class PathCookieOption extends ActualCookieOption { 
 } 
 
 @ Override 
 - public void visit ( Cookie cookie ) { 
 + public void visit ( final Cookie cookie ) { 
 cookie . setPath ( path ) ; 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 index c597699 . . 0209426 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import org . junit . Test ; 
 
 import java . io . IOException ; 
 
 + import static com . github . dreamhead . moco . CookieOption . maxAge ; 
 import static com . github . dreamhead . moco . CookieOption . path ; 
 import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 @ @ - 77 , 6 + 78 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ max _ age ( ) throws Exception { 
 + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; 
 + server . response ( cookie ( " loggedIn " , " true " , maxAge ( 3600 ) ) , status ( 302 ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . maxAge ( ) , is ( 3600L ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ redirect _ to _ expected _ url ( ) throws Exception { 
 server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; 
 server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 new file mode 100644 
 index 0000000 . . 6bf2f32 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . github . dreamhead . moco ; 
 + 
 + import com . github . dreamhead . moco . cookie . PathCookieOption ; 
 + 
 + public abstract class CookieOption { 
 + public static CookieOption path ( final String path ) { 
 + return new PathCookieOption ( path ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 9c43dae . . 01eb5ef 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 289 , 14 + 289 , 17 @ @ public final class Moco { 
 return new CookieRequestExtractor ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) ) ; 
 } 
 
 - public static ResponseHandler cookie ( final String key , final String value ) { 
 - return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) ) ; 
 + public static ResponseHandler cookie ( final String key , final String value , final CookieOption . . . options ) { 
 + return cookie ( checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , 
 + text ( checkNotNullOrEmpty ( value , " Cookie value should not be null " ) ) , 
 + options ) ; 
 } 
 
 - public static ResponseHandler cookie ( final String key , final Resource resource ) { 
 + public static ResponseHandler cookie ( final String key , final Resource resource , final CookieOption . . . options ) { 
 return header ( SET _ COOKIE , cookieResource ( 
 checkNotNullOrEmpty ( key , " Cookie key should not be null " ) , 
 - checkNotNull ( resource , " Cookie value should not be null " ) ) ) ; 
 + checkNotNull ( resource , " Cookie value should not be null " ) , 
 + options ) ) ; 
 } 
 
 public static RequestExtractor < String > form ( final String key ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / ActualCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / ActualCookieOption . java 
 new file mode 100644 
 index 0000000 . . d5c00c3 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / ActualCookieOption . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package com . github . dreamhead . moco . cookie ; 
 + 
 + import com . github . dreamhead . moco . CookieOption ; 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + 
 + public abstract class ActualCookieOption extends CookieOption { 
 + public abstract void visit ( final Cookie cookie ) ; 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java 
 new file mode 100644 
 index 0000000 . . 720cf58 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / PathCookieOption . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . github . dreamhead . moco . cookie ; 
 + 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + 
 + public class PathCookieOption extends ActualCookieOption { 
 + private final String path ; 
 + 
 + public PathCookieOption ( final String path ) { 
 + this . path = path ; 
 + } 
 + 
 + @ Override 
 + public void visit ( Cookie cookie ) { 
 + cookie . setPath ( path ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 index 69866ea . . 318d9c0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / ResourceFactory . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . resource ; 
 
 + import com . github . dreamhead . moco . CookieOption ; 
 import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 @ @ - 80 , 12 + 81 , 12 @ @ public final class ResourceFactory { 
 } ) ; 
 } 
 
 - public static Resource cookieResource ( final String key , final Resource resource ) { 
 + public static Resource cookieResource ( final String key , final Resource resource , final CookieOption . . . options ) { 
 return resource ( id ( " cookie " ) , cookieConfigApplier ( key , resource ) , new ResourceReader ( ) { 
 @ Override 
 public MessageContent readFor ( final Optional < ? extends Request > request ) { 
 MessageContent messageContent = resource . readFor ( request ) ; 
 - return content ( new Cookies ( ) . encodeCookie ( key , messageContent . toString ( ) ) ) ; 
 + return content ( new Cookies ( ) . encodeCookie ( key , messageContent . toString ( ) , options ) ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java 
 index 8d7ac02 . . a12409a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Cookies . java 
 @ @ - 1 , 13 + 1 , 17 @ @ 
 package com . github . dreamhead . moco . util ; 
 
 + import com . github . dreamhead . moco . CookieOption ; 
 + import com . github . dreamhead . moco . cookie . ActualCookieOption ; 
 import io . netty . handler . codec . http . cookie . ServerCookieEncoder ; 
 import io . netty . handler . codec . http . cookie . Cookie ; 
 import io . netty . handler . codec . http . cookie . DefaultCookie ; 
 
 public final class Cookies { 
 - public String encodeCookie ( final String key , final String value ) { 
 + public String encodeCookie ( final String key , final String value , final CookieOption . . . options ) { 
 Cookie cookie = new DefaultCookie ( key , value ) ; 
 - cookie . setPath ( " / " ) ; 
 + for ( CookieOption option : options ) { 
 + ( ( ActualCookieOption ) option ) . visit ( cookie ) ; 
 + } 
 return ServerCookieEncoder . STRICT . encode ( cookie ) ; 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 index 344ca41 . . c597699 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 @ @ - 1 , 10 + 1 , 16 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . google . common . net . * ; 
 + import com . google . common . net . HttpHeaders ; 
 + import io . netty . handler . codec . http . cookie . ClientCookieDecoder ; 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + import org . apache . http . * ; 
 import org . apache . http . message . BasicNameValuePair ; 
 import org . junit . Test ; 
 
 import java . io . IOException ; 
 
 + import static com . github . dreamhead . moco . CookieOption . path ; 
 import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 @ @ - 55 , 6 + 61 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ path ( ) throws Exception { 
 + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; 
 + server . response ( cookie ( " loggedIn " , " true " , path ( " / " ) ) , status ( 302 ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ redirect _ to _ expected _ url ( ) throws Exception { 
 server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; 
 server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;
