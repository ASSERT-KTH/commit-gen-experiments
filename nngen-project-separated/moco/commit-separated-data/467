BLEU SCORE: 0.2665429557589629

TEST MSG: added request action with resource
GENERATED MSG: implemented moco request action with http method

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 166b52e . . 38eb2c4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 550 , 11 + 550 , 15 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoEventAction get ( final String url ) { <nl> - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; <nl> + return get ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> + } <nl> + <nl> + public static MocoEventAction get ( final Resource url ) { <nl> + return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final ContentResource content ) { <nl> - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> + return new MocoRequestAction ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final String content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index ba714d9 . . d11a7f9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 23 , 11 + 23 , 11 @ @ import static com . google . common . base . Optional . of ; <nl> import static java . lang . String . format ; <nl> <nl> public class MocoRequestAction implements MocoEventAction { <nl> - private final String url ; <nl> + private final Resource url ; <nl> private final HttpMethod method ; <nl> private final Optional < ContentResource > content ; <nl> <nl> - public MocoRequestAction ( final String url , final HttpMethod method , final Optional < ContentResource > content ) { <nl> + public MocoRequestAction ( final Resource url , final HttpMethod method , final Optional < ContentResource > content ) { <nl> this . url = url ; <nl> this . method = method ; <nl> this . content = content ; <nl> @ @ - 61 , 13 + 61 , 14 @ @ public class MocoRequestAction implements MocoEventAction { <nl> return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> - private HttpRequestBase createRequest ( final String url , final HttpMethod method ) { <nl> + private HttpRequestBase createRequest ( final Resource url , final HttpMethod method ) { <nl> + String targetUrl = url . readFor ( Optional . < Request > absent ( ) ) . toString ( ) ; <nl> if ( HttpMethod . GET = = method ) { <nl> - return new HttpGet ( url ) ; <nl> + return new HttpGet ( targetUrl ) ; <nl> } <nl> <nl> if ( HttpMethod . POST = = method ) { <nl> - return new HttpPost ( url ) ; <nl> + return new HttpPost ( targetUrl ) ; <nl> } <nl> <nl> throw new MocoException ( format ( " unknown HTTP method : % s " , method ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 1917f45 . . 8d785d5 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 79 , 6 + 79 , 23 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ resource ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( text ( remoteUrl ( " / target " ) ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index fb3010d . . 0c9b680 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 610 , 11 + 610 , 11 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoEventAction get ( final String url ) { <nl> - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , " GET " , Optional . < ContentResource > absent ( ) ) ; <nl> + return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final ContentResource content ) { <nl> - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , " POST " , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> + return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> } <nl> <nl> public static MocoEventAction post ( final String url , final String content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index b6e83bb . . ba714d9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . action ; <nl> <nl> + import com . github . dreamhead . moco . HttpMethod ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> @ @ - 7 , 7 + 8 , 6 @ @ import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> - import io . netty . handler . codec . http . HttpMethod ; <nl> import org . apache . http . HttpEntity ; <nl> import org . apache . http . HttpEntityEnclosingRequest ; <nl> import org . apache . http . client . methods . HttpGet ; <nl> @ @ - 24 , 10 + 24 , 10 @ @ import static java . lang . String . format ; <nl> <nl> public class MocoRequestAction implements MocoEventAction { <nl> private final String url ; <nl> - private final String method ; <nl> + private final HttpMethod method ; <nl> private final Optional < ContentResource > content ; <nl> <nl> - public MocoRequestAction ( final String url , final String method , final Optional < ContentResource > content ) { <nl> + public MocoRequestAction ( final String url , final HttpMethod method , final Optional < ContentResource > content ) { <nl> this . url = url ; <nl> this . method = method ; <nl> this . content = content ; <nl> @ @ - 61 , 12 + 61 , 12 @ @ public class MocoRequestAction implements MocoEventAction { <nl> return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> - private HttpRequestBase createRequest ( final String url , final String method ) { <nl> - if ( HttpMethod . GET . name ( ) . equalsIgnoreCase ( method ) ) { <nl> + private HttpRequestBase createRequest ( final String url , final HttpMethod method ) { <nl> + if ( HttpMethod . GET = = method ) { <nl> return new HttpGet ( url ) ; <nl> } <nl> <nl> - if ( HttpMethod . POST . name ( ) . equalsIgnoreCase ( method ) ) { <nl> + if ( HttpMethod . POST = = method ) { <nl> return new HttpPost ( url ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> index a4da5b5 . . c589feb 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java <nl> @ @ - 360 , 7 + 360 , 6 @ @ public class MocoTest extends AbstractMocoHttpTest { <nl> } ) ; <nl> } <nl> <nl> - <nl> @ Test <nl> public void should _ match ( ) throws Exception { <nl> server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( " bar " ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 166b52e . . 38eb2c4 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 550 , 11 + 550 , 15 @ @ public final class Moco { 
 } 
 
 public static MocoEventAction get ( final String url ) { 
 - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; 
 + return get ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; 
 + } 
 + 
 + public static MocoEventAction get ( final Resource url ) { 
 + return new MocoRequestAction ( checkNotNull ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; 
 } 
 
 public static MocoEventAction post ( final String url , final ContentResource content ) { 
 - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; 
 + return new MocoRequestAction ( text ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; 
 } 
 
 public static MocoEventAction post ( final String url , final String content ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index ba714d9 . . d11a7f9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 23 , 11 + 23 , 11 @ @ import static com . google . common . base . Optional . of ; 
 import static java . lang . String . format ; 
 
 public class MocoRequestAction implements MocoEventAction { 
 - private final String url ; 
 + private final Resource url ; 
 private final HttpMethod method ; 
 private final Optional < ContentResource > content ; 
 
 - public MocoRequestAction ( final String url , final HttpMethod method , final Optional < ContentResource > content ) { 
 + public MocoRequestAction ( final Resource url , final HttpMethod method , final Optional < ContentResource > content ) { 
 this . url = url ; 
 this . method = method ; 
 this . content = content ; 
 @ @ - 61 , 13 + 61 , 14 @ @ public class MocoRequestAction implements MocoEventAction { 
 return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; 
 } 
 
 - private HttpRequestBase createRequest ( final String url , final HttpMethod method ) { 
 + private HttpRequestBase createRequest ( final Resource url , final HttpMethod method ) { 
 + String targetUrl = url . readFor ( Optional . < Request > absent ( ) ) . toString ( ) ; 
 if ( HttpMethod . GET = = method ) { 
 - return new HttpGet ( url ) ; 
 + return new HttpGet ( targetUrl ) ; 
 } 
 
 if ( HttpMethod . POST = = method ) { 
 - return new HttpPost ( url ) ; 
 + return new HttpPost ( targetUrl ) ; 
 } 
 
 throw new MocoException ( format ( " unknown HTTP method : % s " , method ) ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index 1917f45 . . 8d785d5 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 79 , 6 + 79 , 23 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ resource ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( text ( remoteUrl ( " / target " ) ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 + } 
 + 
 + 
 + @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 server . request ( by ( uri ( " / target " ) ) , by ( " content " ) ) . response ( handler ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index fb3010d . . 0c9b680 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 610 , 11 + 610 , 11 @ @ public final class Moco { 
 } 
 
 public static MocoEventAction get ( final String url ) { 
 - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , " GET " , Optional . < ContentResource > absent ( ) ) ; 
 + return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . GET , Optional . < ContentResource > absent ( ) ) ; 
 } 
 
 public static MocoEventAction post ( final String url , final ContentResource content ) { 
 - return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , " POST " , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; 
 + return new MocoRequestAction ( checkNotNullOrEmpty ( url , " URL should not be null " ) , HttpMethod . POST , of ( checkNotNull ( content , " Content should not be null " ) ) ) ; 
 } 
 
 public static MocoEventAction post ( final String url , final String content ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index b6e83bb . . ba714d9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . action ; 
 
 + import com . github . dreamhead . moco . HttpMethod ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . MocoException ; 
 @ @ - 7 , 7 + 8 , 6 @ @ import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Optional ; 
 - import io . netty . handler . codec . http . HttpMethod ; 
 import org . apache . http . HttpEntity ; 
 import org . apache . http . HttpEntityEnclosingRequest ; 
 import org . apache . http . client . methods . HttpGet ; 
 @ @ - 24 , 10 + 24 , 10 @ @ import static java . lang . String . format ; 
 
 public class MocoRequestAction implements MocoEventAction { 
 private final String url ; 
 - private final String method ; 
 + private final HttpMethod method ; 
 private final Optional < ContentResource > content ; 
 
 - public MocoRequestAction ( final String url , final String method , final Optional < ContentResource > content ) { 
 + public MocoRequestAction ( final String url , final HttpMethod method , final Optional < ContentResource > content ) { 
 this . url = url ; 
 this . method = method ; 
 this . content = content ; 
 @ @ - 61 , 12 + 61 , 12 @ @ public class MocoRequestAction implements MocoEventAction { 
 return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; 
 } 
 
 - private HttpRequestBase createRequest ( final String url , final String method ) { 
 - if ( HttpMethod . GET . name ( ) . equalsIgnoreCase ( method ) ) { 
 + private HttpRequestBase createRequest ( final String url , final HttpMethod method ) { 
 + if ( HttpMethod . GET = = method ) { 
 return new HttpGet ( url ) ; 
 } 
 
 - if ( HttpMethod . POST . name ( ) . equalsIgnoreCase ( method ) ) { 
 + if ( HttpMethod . POST = = method ) { 
 return new HttpPost ( url ) ; 
 } 
 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 index a4da5b5 . . c589feb 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTest . java 
 @ @ - 360 , 7 + 360 , 6 @ @ public class MocoTest extends AbstractMocoHttpTest { 
 } ) ; 
 } 
 
 - 
 @ Test 
 public void should _ match ( ) throws Exception { 
 server . request ( match ( uri ( " / \ \ w * / foo " ) ) ) . response ( " bar " ) ;
