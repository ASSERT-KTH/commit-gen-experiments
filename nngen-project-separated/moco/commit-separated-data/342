BLEU SCORE: 0.040583489434387374

TEST MSG: made default request hit thread safe
GENERATED MSG: logged session into file

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> index 1d3aa89 . . 7f1b134 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> @ @ - 17 , 12 + 17 , 12 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { <nl> private List < Request > requests = newArrayList ( ) ; <nl> <nl> @ Override <nl> - public void onMessageArrived ( final Request request ) { <nl> + public synchronized void onMessageArrived ( final Request request ) { <nl> this . requests . add ( request ) ; <nl> } <nl> <nl> @ Override <nl> - public void onUnexpectedMessage ( final Request request ) { <nl> + public synchronized void onUnexpectedMessage ( final Request request ) { <nl> this . unexpectedRequests . add ( request ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 1c43f5e <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . times ; <nl> + import static com . github . dreamhead . moco . Runner . running ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoMultithreadingTest { <nl> + private MocoTestHelper helper ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + helper = new MocoTestHelper ( ) ; <nl> + <nl> + } <nl> + @ Test <nl> + public void should _ work _ well _ for _ request _ hit ( ) throws Exception { <nl> + RequestHit hit = requestHit ( ) ; <nl> + final HttpServer server = httpServer ( port ( ) , hit ) ; <nl> + server . get ( by ( uri ( " / foo " ) ) ) . response ( " bar " ) ; <nl> + <nl> + final ExecutorService executorService = Executors . newFixedThreadPool ( 50 ) ; <nl> + final int count = 100 ; <nl> + final CountDownLatch latch = new CountDownLatch ( count ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + for ( int i = 0 ; i < count ; i + + ) { <nl> + executorService . execute ( new java . lang . Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; <nl> + latch . countDown ( ) ; <nl> + } catch ( IOException ignored ) { <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + latch . await ( ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + hit . verify ( by ( uri ( " / foo " ) ) , times ( count ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index a1abab9 . . 39e7a09 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import com . github . dreamhead . moco . handler . failover . DefaultFailover ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> import com . github . dreamhead . moco . matcher . * ; <nl> + import com . github . dreamhead . moco . monitor . FileMonitor ; <nl> import com . github . dreamhead . moco . monitor . Slf4jMonitor ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> @ @ - 18 , 6 + 19 , 9 @ @ import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . FileOutputStream ; <nl> import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> <nl> @ @ - 61 , 6 + 65 , 10 @ @ public class Moco { <nl> return new Slf4jMonitor ( ) ; <nl> } <nl> <nl> + public static MocoMonitor log ( String filename ) { <nl> + return new FileMonitor ( filename ) ; <nl> + } <nl> + <nl> public static RequestMatcher by ( final String content ) { <nl> return by ( text ( checkNotNull ( content , " Content should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileMonitor . java <nl> new file mode 100644 <nl> index 0000000 . . 555954d <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileMonitor . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + package com . github . dreamhead . moco . monitor ; <nl> + <nl> + import com . github . dreamhead . moco . MocoMonitor ; <nl> + import com . github . dreamhead . moco . dumper . Dumper ; <nl> + import com . github . dreamhead . moco . dumper . HttpRequestDumper ; <nl> + import com . github . dreamhead . moco . dumper . HttpResponseDumper ; <nl> + import com . google . common . io . Files ; <nl> + import io . netty . handler . codec . http . FullHttpRequest ; <nl> + import io . netty . handler . codec . http . FullHttpResponse ; <nl> + <nl> + import java . io . * ; <nl> + import java . nio . charset . Charset ; <nl> + <nl> + import static java . lang . String . format ; <nl> + <nl> + public class FileMonitor implements MocoMonitor { <nl> + <nl> + private final Dumper < FullHttpRequest > requestDumper = new HttpRequestDumper ( ) ; <nl> + private final Dumper < FullHttpResponse > responseDumper = new HttpResponseDumper ( ) ; <nl> + private final File file ; <nl> + <nl> + public FileMonitor ( String filename ) { <nl> + this . file = new File ( filename ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onMessageArrived ( FullHttpRequest request ) { <nl> + log ( format ( " Request received : \ n \ n % s \ n " , requestDumper . dump ( request ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onException ( Exception e ) { <nl> + log ( format ( " Exception thrown : \ n \ n % s \ n " , stackTraceToString ( e ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onMessageLeave ( FullHttpResponse response ) { <nl> + log ( format ( " Response return : \ n \ n % s \ n " , responseDumper . dump ( response ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onUnexpectedMessage ( FullHttpRequest request ) { <nl> + } <nl> + <nl> + private void log ( String content ) { <nl> + try { <nl> + Files . append ( content , file , Charset . defaultCharset ( ) ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private String stackTraceToString ( Exception e ) { <nl> + StringWriter writer = new StringWriter ( ) ; <nl> + e . printStackTrace ( new PrintWriter ( writer ) ) ; <nl> + return writer . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java <nl> index 53196ea . . 7911a18 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java <nl> @ @ - 2 , 26 + 2 , 29 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> import com . google . common . io . Files ; <nl> + import io . netty . handler . codec . http . FullHttpRequest ; <nl> + import io . netty . handler . codec . http . FullHttpResponse ; <nl> import org . junit . Before ; <nl> import org . junit . Rule ; <nl> import org . junit . Test ; <nl> import org . junit . rules . TemporaryFolder ; <nl> + import org . mockito . Matchers ; <nl> <nl> import java . io . File ; <nl> import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> import java . io . PrintStream ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . by ; <nl> - import static com . github . dreamhead . moco . Moco . httpserver ; <nl> - import static com . github . dreamhead . moco . Moco . log ; <nl> + import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . RemoteTestUtils . port ; <nl> - import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . RemoteTestUtils . root ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static org . hamcrest . CoreMatchers . containsString ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> + import static org . mockito . Mockito . doThrow ; <nl> + import static org . mockito . Mockito . mock ; <nl> <nl> public class MocoLogTest { <nl> @ Rule <nl> @ @ - 52 , 4 + 55 , 45 @ @ public class MocoLogTest { <nl> assertThat ( actual , containsString ( " 0XCAFE " ) ) ; <nl> assertThat ( actual , containsString ( " 0XCAFE " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ log _ request _ and _ response _ into _ file ( ) throws Exception { <nl> + File file = folder . newFile ( ) ; <nl> + HttpServer server = httpserver ( port ( ) , log ( file . getAbsolutePath ( ) ) ) ; <nl> + server . request ( by ( " 0XCAFE " ) ) . response ( " 0XBABE " ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . postContent ( root ( ) , " 0XCAFE " ) , is ( " 0XBABE " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + String actual = Files . toString ( file , Charset . defaultCharset ( ) ) ; <nl> + assertThat ( actual , containsString ( " 0XCAFE " ) ) ; <nl> + assertThat ( actual , containsString ( " 0XCAFE " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void should _ log _ request _ and _ response _ with _ exception ( ) throws Exception { <nl> + File file = folder . newFile ( ) ; <nl> + HttpServer server = httpserver ( port ( ) , log ( file . getAbsolutePath ( ) ) ) ; <nl> + ResponseHandler mock = mock ( ResponseHandler . class ) ; <nl> + doThrow ( RuntimeException . class ) . when ( mock ) . writeToResponse ( Matchers . < FullHttpRequest > anyObject ( ) , Matchers . < FullHttpResponse > anyObject ( ) ) ; <nl> + <nl> + server . request ( by ( " 0XCAFE " ) ) . response ( mock ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + try { <nl> + helper . postContent ( root ( ) , " 0XCAFE " ) ; <nl> + } catch ( IOException e ) { <nl> + } <nl> + } <nl> + } ) ; <nl> + <nl> + String actual = Files . toString ( file , Charset . defaultCharset ( ) ) ; <nl> + assertThat ( actual , containsString ( " RuntimeException " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index cdb1465 . . e07cf13 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 1155 , 7 + 1155 , 7 @ @ running ( server , new Runnable ( ) { <nl> } <nl> } ) ; <nl> <nl> - hit . verify ( by ( uri ( " / foo " ) ) , times ( 1 ) ) ; <nl> + hit . verify ( by ( uri ( " / foo " ) ) ) , times ( 1 ) ) ; <nl> ` ` ` <nl> <nl> You can also verify unexpected request like this :

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 index 1d3aa89 . . 7f1b134 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 @ @ - 17 , 12 + 17 , 12 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { 
 private List < Request > requests = newArrayList ( ) ; 
 
 @ Override 
 - public void onMessageArrived ( final Request request ) { 
 + public synchronized void onMessageArrived ( final Request request ) { 
 this . requests . add ( request ) ; 
 } 
 
 @ Override 
 - public void onUnexpectedMessage ( final Request request ) { 
 + public synchronized void onUnexpectedMessage ( final Request request ) { 
 this . unexpectedRequests . add ( request ) ; 
 } 
 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java 
 new file mode 100644 
 index 0000000 . . 1c43f5e 
 - - - / dev / null 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoMultithreadingTest . java 
 @ @ - 0 , 0 + 1 , 63 @ @ 
 + package com . github . dreamhead . moco ; 
 + 
 + import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + import java . util . concurrent . CountDownLatch ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + 
 + import static com . github . dreamhead . moco . Moco . by ; 
 + import static com . github . dreamhead . moco . Moco . httpServer ; 
 + import static com . github . dreamhead . moco . Moco . uri ; 
 + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; 
 + import static com . github . dreamhead . moco . MocoRequestHit . times ; 
 + import static com . github . dreamhead . moco . Runner . running ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoMultithreadingTest { 
 + private MocoTestHelper helper ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + helper = new MocoTestHelper ( ) ; 
 + 
 + } 
 + @ Test 
 + public void should _ work _ well _ for _ request _ hit ( ) throws Exception { 
 + RequestHit hit = requestHit ( ) ; 
 + final HttpServer server = httpServer ( port ( ) , hit ) ; 
 + server . get ( by ( uri ( " / foo " ) ) ) . response ( " bar " ) ; 
 + 
 + final ExecutorService executorService = Executors . newFixedThreadPool ( 50 ) ; 
 + final int count = 100 ; 
 + final CountDownLatch latch = new CountDownLatch ( count ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + for ( int i = 0 ; i < count ; i + + ) { 
 + executorService . execute ( new java . lang . Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + assertThat ( helper . get ( remoteUrl ( " / foo " ) ) , is ( " bar " ) ) ; 
 + latch . countDown ( ) ; 
 + } catch ( IOException ignored ) { 
 + } 
 + } 
 + } ) ; 
 + } 
 + 
 + latch . await ( ) ; 
 + } 
 + } ) ; 
 + 
 + hit . verify ( by ( uri ( " / foo " ) ) , times ( count ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index a1abab9 . . 39e7a09 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import com . github . dreamhead . moco . handler . failover . DefaultFailover ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 import com . github . dreamhead . moco . matcher . * ; 
 + import com . github . dreamhead . moco . monitor . FileMonitor ; 
 import com . github . dreamhead . moco . monitor . Slf4jMonitor ; 
 import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 @ @ - 18 , 6 + 19 , 9 @ @ import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 
 import java . io . File ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . FileOutputStream ; 
 import java . net . MalformedURLException ; 
 import java . net . URL ; 
 
 @ @ - 61 , 6 + 65 , 10 @ @ public class Moco { 
 return new Slf4jMonitor ( ) ; 
 } 
 
 + public static MocoMonitor log ( String filename ) { 
 + return new FileMonitor ( filename ) ; 
 + } 
 + 
 public static RequestMatcher by ( final String content ) { 
 return by ( text ( checkNotNull ( content , " Content should not be null " ) ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileMonitor . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileMonitor . java 
 new file mode 100644 
 index 0000000 . . 555954d 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / FileMonitor . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + package com . github . dreamhead . moco . monitor ; 
 + 
 + import com . github . dreamhead . moco . MocoMonitor ; 
 + import com . github . dreamhead . moco . dumper . Dumper ; 
 + import com . github . dreamhead . moco . dumper . HttpRequestDumper ; 
 + import com . github . dreamhead . moco . dumper . HttpResponseDumper ; 
 + import com . google . common . io . Files ; 
 + import io . netty . handler . codec . http . FullHttpRequest ; 
 + import io . netty . handler . codec . http . FullHttpResponse ; 
 + 
 + import java . io . * ; 
 + import java . nio . charset . Charset ; 
 + 
 + import static java . lang . String . format ; 
 + 
 + public class FileMonitor implements MocoMonitor { 
 + 
 + private final Dumper < FullHttpRequest > requestDumper = new HttpRequestDumper ( ) ; 
 + private final Dumper < FullHttpResponse > responseDumper = new HttpResponseDumper ( ) ; 
 + private final File file ; 
 + 
 + public FileMonitor ( String filename ) { 
 + this . file = new File ( filename ) ; 
 + } 
 + 
 + @ Override 
 + public void onMessageArrived ( FullHttpRequest request ) { 
 + log ( format ( " Request received : \ n \ n % s \ n " , requestDumper . dump ( request ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onException ( Exception e ) { 
 + log ( format ( " Exception thrown : \ n \ n % s \ n " , stackTraceToString ( e ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onMessageLeave ( FullHttpResponse response ) { 
 + log ( format ( " Response return : \ n \ n % s \ n " , responseDumper . dump ( response ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onUnexpectedMessage ( FullHttpRequest request ) { 
 + } 
 + 
 + private void log ( String content ) { 
 + try { 
 + Files . append ( content , file , Charset . defaultCharset ( ) ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private String stackTraceToString ( Exception e ) { 
 + StringWriter writer = new StringWriter ( ) ; 
 + e . printStackTrace ( new PrintWriter ( writer ) ) ; 
 + return writer . toString ( ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java 
 index 53196ea . . 7911a18 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoLogTest . java 
 @ @ - 2 , 26 + 2 , 29 @ @ package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 import com . google . common . io . Files ; 
 + import io . netty . handler . codec . http . FullHttpRequest ; 
 + import io . netty . handler . codec . http . FullHttpResponse ; 
 import org . junit . Before ; 
 import org . junit . Rule ; 
 import org . junit . Test ; 
 import org . junit . rules . TemporaryFolder ; 
 + import org . mockito . Matchers ; 
 
 import java . io . File ; 
 import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 import java . io . PrintStream ; 
 import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . Moco . by ; 
 - import static com . github . dreamhead . moco . Moco . httpserver ; 
 - import static com . github . dreamhead . moco . Moco . log ; 
 + import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . RemoteTestUtils . port ; 
 - import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . RemoteTestUtils . root ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static org . hamcrest . CoreMatchers . containsString ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 + import static org . mockito . Mockito . doThrow ; 
 + import static org . mockito . Mockito . mock ; 
 
 public class MocoLogTest { 
 @ Rule 
 @ @ - 52 , 4 + 55 , 45 @ @ public class MocoLogTest { 
 assertThat ( actual , containsString ( " 0XCAFE " ) ) ; 
 assertThat ( actual , containsString ( " 0XCAFE " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ log _ request _ and _ response _ into _ file ( ) throws Exception { 
 + File file = folder . newFile ( ) ; 
 + HttpServer server = httpserver ( port ( ) , log ( file . getAbsolutePath ( ) ) ) ; 
 + server . request ( by ( " 0XCAFE " ) ) . response ( " 0XBABE " ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . postContent ( root ( ) , " 0XCAFE " ) , is ( " 0XBABE " ) ) ; 
 + } 
 + } ) ; 
 + 
 + String actual = Files . toString ( file , Charset . defaultCharset ( ) ) ; 
 + assertThat ( actual , containsString ( " 0XCAFE " ) ) ; 
 + assertThat ( actual , containsString ( " 0XCAFE " ) ) ; 
 + } 
 + 
 + @ Test 
 + public void should _ log _ request _ and _ response _ with _ exception ( ) throws Exception { 
 + File file = folder . newFile ( ) ; 
 + HttpServer server = httpserver ( port ( ) , log ( file . getAbsolutePath ( ) ) ) ; 
 + ResponseHandler mock = mock ( ResponseHandler . class ) ; 
 + doThrow ( RuntimeException . class ) . when ( mock ) . writeToResponse ( Matchers . < FullHttpRequest > anyObject ( ) , Matchers . < FullHttpResponse > anyObject ( ) ) ; 
 + 
 + server . request ( by ( " 0XCAFE " ) ) . response ( mock ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + try { 
 + helper . postContent ( root ( ) , " 0XCAFE " ) ; 
 + } catch ( IOException e ) { 
 + } 
 + } 
 + } ) ; 
 + 
 + String actual = Files . toString ( file , Charset . defaultCharset ( ) ) ; 
 + assertThat ( actual , containsString ( " RuntimeException " ) ) ; 
 + } 
 } 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index cdb1465 . . e07cf13 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 1155 , 7 + 1155 , 7 @ @ running ( server , new Runnable ( ) { 
 } 
 } ) ; 
 
 - hit . verify ( by ( uri ( " / foo " ) ) , times ( 1 ) ) ; 
 + hit . verify ( by ( uri ( " / foo " ) ) ) , times ( 1 ) ) ; 
 ` ` ` 
 
 You can also verify unexpected request like this :
