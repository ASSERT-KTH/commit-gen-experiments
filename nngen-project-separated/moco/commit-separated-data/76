BLEU SCORE: 0.027611988917697356

TEST MSG: addded missing final to default mutable http response
GENERATED MSG: added resource parse in text container

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index fc716da . . d642d01 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> this . content = content ; <nl> } <nl> <nl> - private static String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { <nl> + private static final String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { <nl> HttpHeaders . CONTENT _ TYPE <nl> } ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> index df937e8 . . 8652775 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ import static com . google . common . base . Predicates . or ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> import static com . google . common . collect . Iterables . concat ; <nl> <nl> - public final class Dynamics { <nl> + public class Dynamics { <nl> private static final Map < String , String > EXTRACTORS = ImmutableMap . < String , String > builder ( ) <nl> . put ( " headers " , " header " ) <nl> . put ( " queries " , " query " ) <nl> @ @ - 27 , 7 + 27 , 7 @ @ public final class Dynamics { <nl> . put ( " forms " , " form " ) <nl> . build ( ) ; <nl> <nl> - protected Predicate < Field > isClassField ( ) { <nl> + protected final Predicate < Field > isClassField ( ) { <nl> return new Predicate < Field > ( ) { <nl> @ Override <nl> public boolean apply ( final Field field ) { <nl> @ @ - 36 , 7 + 36 , 7 @ @ public final class Dynamics { <nl> } ; <nl> } <nl> <nl> - protected Predicate < Field > isFinalField ( ) { <nl> + protected final Predicate < Field > isFinalField ( ) { <nl> return new Predicate < Field > ( ) { <nl> @ Override <nl> public boolean apply ( final Field field ) { <nl> @ @ - 45 , 7 + 45 , 7 @ @ public final class Dynamics { <nl> } ; <nl> } <nl> <nl> - protected < T > Predicate < Field > fieldExist ( final T target ) { <nl> + protected final < T > Predicate < Field > fieldExist ( final T target ) { <nl> return new Predicate < Field > ( ) { <nl> @ Override <nl> public boolean apply ( final Field field ) { <nl> @ @ - 58 , 7 + 58 , 7 @ @ public final class Dynamics { <nl> } ; <nl> } <nl> <nl> - protected Iterable < Field > getFields ( final Class < ? > clazz ) { <nl> + protected final Iterable < Field > getFields ( final Class < ? > clazz ) { <nl> ImmutableList < Field > fieldsForCurrent = getFieldsForCurrent ( clazz ) ; <nl> if ( clazz . getSuperclass ( ) = = null ) { <nl> return fieldsForCurrent ; <nl> @ @ - 76 , 7 + 76 , 7 @ @ public final class Dynamics { <nl> return copyOf ( fields ) ; <nl> } <nl> <nl> - protected < T > Predicate < Field > isValidField ( final T target ) { <nl> + protected final < T > Predicate < Field > isValidField ( final T target ) { <nl> return and ( not ( or ( isClassField ( ) , isFinalField ( ) ) ) , fieldExist ( target ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> index 8e65ed1 . . 9d9af8c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java <nl> @ @ - 80 , 11 + 80 , 11 @ @ public class Dynamics { <nl> return and ( not ( or ( isClassField ( ) , isFinalField ( ) ) ) , fieldExist ( target ) ) ; <nl> } <nl> <nl> - protected < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz ) { <nl> + public static < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz ) { <nl> return invokeTarget ( name , value , clazz , value . getClass ( ) ) ; <nl> } <nl> <nl> - private < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz , final Class < ? > argClass ) { <nl> + public static < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz , final Class < ? > argClass ) { <nl> try { <nl> Method method = Moco . class . getMethod ( name , argClass ) ; <nl> Object result = method . invoke ( null , value ) ; <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class Dynamics { <nl> } <nl> } <nl> <nl> - protected < T > T invokeTarget ( final String name , final Object arg1 , final Object arg2 , <nl> + public static < T > T invokeTarget ( final String name , final Object arg1 , final Object arg2 , <nl> final Class < T > clazz , final Class < ? > arg1Class , final Class < ? > arg2Class ) { <nl> try { <nl> Method method = Moco . class . getMethod ( name , arg1Class , arg2Class ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 4362ea9 . . 496b951 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ import java . util . Map ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; <nl> + import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; <nl> <nl> @ JsonDeserialize ( using = TextContainerDeserializer . class ) <nl> public class TextContainer { <nl> @ @ - 39 , 10 + 40 , 18 @ @ public class TextContainer { <nl> return template ( this . text , toVariables ( this . props ) ) ; <nl> } <nl> <nl> - return template ( text ) ; <nl> + return template ( this . text ) ; <nl> } <nl> <nl> - throw new IllegalArgumentException ( " Unknown " + this + " for event action setting " ) ; <nl> + return invokeTarget ( getMethodName ( ) , this . text , ContentResource . class ) ; <nl> + } <nl> + <nl> + private String getMethodName ( ) { <nl> + if ( this . operation . equalsIgnoreCase ( " path _ resource " ) ) { <nl> + return " pathResource " ; <nl> + } <nl> + <nl> + return this . operation ; <nl> } <nl> <nl> public boolean isRawText ( ) { <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java <nl> index 4521f73 . . 5938eb4 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java <nl> @ @ - 22 , 4 + 22 , 12 @ @ public class MocoRedirectStandaloneTest extends AbstractMocoStandaloneTest { <nl> <nl> assertThat ( helper . get ( remoteUrl ( " / redirect - with - template " ) ) , is ( " foo " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ redirect _ to _ expected _ url _ with _ path _ resource ( ) throws IOException { <nl> + runWithConfiguration ( " redirect . json " ) ; <nl> + <nl> + assertThat ( helper . get ( remoteUrl ( " / redirect - with - path - resource " ) ) , is ( " foo " ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / moco - runner / src / test / resources / redirect . json b / moco - runner / src / test / resources / redirect . json <nl> index 3a03927 . . a2cd98a 100644 <nl> - - - a / moco - runner / src / test / resources / redirect . json <nl> + + + b / moco - runner / src / test / resources / redirect . json <nl> @ @ - 31 , 5 + 31 , 15 @ @ <nl> } <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : " / redirect - with - path - resource " <nl> + } , <nl> + <nl> + " redirectTo " : { <nl> + " path _ resource " : " redirect . url " <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / test / resources / redirect . url b / moco - runner / src / test / resources / redirect . url <nl> new file mode 100644 <nl> index 0000000 . . 3ce0a3d <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / redirect . url <nl> @ @ - 0 , 0 + 1 @ @ <nl> + http : / / localhost : 12306 / redirectTo <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 index fc716da . . d642d01 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 @ @ - 41 , 7 + 41 , 7 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 this . content = content ; 
 } 
 
 - private static String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { 
 + private static final String [ ] SINGLE _ VALUE _ HEADERS = new String [ ] { 
 HttpHeaders . CONTENT _ TYPE 
 } ; 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java 
 index df937e8 . . 8652775 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java 
 @ @ - 17 , 7 + 17 , 7 @ @ import static com . google . common . base . Predicates . or ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 import static com . google . common . collect . Iterables . concat ; 
 
 - public final class Dynamics { 
 + public class Dynamics { 
 private static final Map < String , String > EXTRACTORS = ImmutableMap . < String , String > builder ( ) 
 . put ( " headers " , " header " ) 
 . put ( " queries " , " query " ) 
 @ @ - 27 , 7 + 27 , 7 @ @ public final class Dynamics { 
 . put ( " forms " , " form " ) 
 . build ( ) ; 
 
 - protected Predicate < Field > isClassField ( ) { 
 + protected final Predicate < Field > isClassField ( ) { 
 return new Predicate < Field > ( ) { 
 @ Override 
 public boolean apply ( final Field field ) { 
 @ @ - 36 , 7 + 36 , 7 @ @ public final class Dynamics { 
 } ; 
 } 
 
 - protected Predicate < Field > isFinalField ( ) { 
 + protected final Predicate < Field > isFinalField ( ) { 
 return new Predicate < Field > ( ) { 
 @ Override 
 public boolean apply ( final Field field ) { 
 @ @ - 45 , 7 + 45 , 7 @ @ public final class Dynamics { 
 } ; 
 } 
 
 - protected < T > Predicate < Field > fieldExist ( final T target ) { 
 + protected final < T > Predicate < Field > fieldExist ( final T target ) { 
 return new Predicate < Field > ( ) { 
 @ Override 
 public boolean apply ( final Field field ) { 
 @ @ - 58 , 7 + 58 , 7 @ @ public final class Dynamics { 
 } ; 
 } 
 
 - protected Iterable < Field > getFields ( final Class < ? > clazz ) { 
 + protected final Iterable < Field > getFields ( final Class < ? > clazz ) { 
 ImmutableList < Field > fieldsForCurrent = getFieldsForCurrent ( clazz ) ; 
 if ( clazz . getSuperclass ( ) = = null ) { 
 return fieldsForCurrent ; 
 @ @ - 76 , 7 + 76 , 7 @ @ public final class Dynamics { 
 return copyOf ( fields ) ; 
 } 
 
 - protected < T > Predicate < Field > isValidField ( final T target ) { 
 + protected final < T > Predicate < Field > isValidField ( final T target ) { 
 return and ( not ( or ( isClassField ( ) , isFinalField ( ) ) ) , fieldExist ( target ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java 
 index 8e65ed1 . . 9d9af8c 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Dynamics . java 
 @ @ - 80 , 11 + 80 , 11 @ @ public class Dynamics { 
 return and ( not ( or ( isClassField ( ) , isFinalField ( ) ) ) , fieldExist ( target ) ) ; 
 } 
 
 - protected < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz ) { 
 + public static < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz ) { 
 return invokeTarget ( name , value , clazz , value . getClass ( ) ) ; 
 } 
 
 - private < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz , final Class < ? > argClass ) { 
 + public static < T > T invokeTarget ( final String name , final Object value , final Class < T > clazz , final Class < ? > argClass ) { 
 try { 
 Method method = Moco . class . getMethod ( name , argClass ) ; 
 Object result = method . invoke ( null , value ) ; 
 @ @ - 94 , 7 + 94 , 7 @ @ public class Dynamics { 
 } 
 } 
 
 - protected < T > T invokeTarget ( final String name , final Object arg1 , final Object arg2 , 
 + public static < T > T invokeTarget ( final String name , final Object arg1 , final Object arg2 , 
 final Class < T > clazz , final Class < ? > arg1Class , final Class < ? > arg2Class ) { 
 try { 
 Method method = Moco . class . getMethod ( name , arg1Class , arg2Class ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index 4362ea9 . . 496b951 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . util . Map ; 
 import static com . github . dreamhead . moco . Moco . template ; 
 import static com . github . dreamhead . moco . Moco . text ; 
 import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFactory . toVariables ; 
 + import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; 
 
 @ JsonDeserialize ( using = TextContainerDeserializer . class ) 
 public class TextContainer { 
 @ @ - 39 , 10 + 40 , 18 @ @ public class TextContainer { 
 return template ( this . text , toVariables ( this . props ) ) ; 
 } 
 
 - return template ( text ) ; 
 + return template ( this . text ) ; 
 } 
 
 - throw new IllegalArgumentException ( " Unknown " + this + " for event action setting " ) ; 
 + return invokeTarget ( getMethodName ( ) , this . text , ContentResource . class ) ; 
 + } 
 + 
 + private String getMethodName ( ) { 
 + if ( this . operation . equalsIgnoreCase ( " path _ resource " ) ) { 
 + return " pathResource " ; 
 + } 
 + 
 + return this . operation ; 
 } 
 
 public boolean isRawText ( ) { 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java 
 index 4521f73 . . 5938eb4 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRedirectStandaloneTest . java 
 @ @ - 22 , 4 + 22 , 12 @ @ public class MocoRedirectStandaloneTest extends AbstractMocoStandaloneTest { 
 
 assertThat ( helper . get ( remoteUrl ( " / redirect - with - template " ) ) , is ( " foo " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ redirect _ to _ expected _ url _ with _ path _ resource ( ) throws IOException { 
 + runWithConfiguration ( " redirect . json " ) ; 
 + 
 + assertThat ( helper . get ( remoteUrl ( " / redirect - with - path - resource " ) ) , is ( " foo " ) ) ; 
 + } 
 + 
 } 
 diff - - git a / moco - runner / src / test / resources / redirect . json b / moco - runner / src / test / resources / redirect . json 
 index 3a03927 . . a2cd98a 100644 
 - - - a / moco - runner / src / test / resources / redirect . json 
 + + + b / moco - runner / src / test / resources / redirect . json 
 @ @ - 31 , 5 + 31 , 15 @ @ 
 } 
 } 
 } 
 + } , 
 + { 
 + " request " : 
 + { 
 + " uri " : " / redirect - with - path - resource " 
 + } , 
 + 
 + " redirectTo " : { 
 + " path _ resource " : " redirect . url " 
 + } 
 } 
 ] 
 \ No newline at end of file 
 diff - - git a / moco - runner / src / test / resources / redirect . url b / moco - runner / src / test / resources / redirect . url 
 new file mode 100644 
 index 0000000 . . 3ce0a3d 
 - - - / dev / null 
 + + + b / moco - runner / src / test / resources / redirect . url 
 @ @ - 0 , 0 + 1 @ @ 
 + http : / / localhost : 12306 / redirectTo 
 \ No newline at end of file
