BLEU SCORE: 0.08116697886877475

TEST MSG: introduced moco executors to share executors
GENERATED MSG: moved url related code to URLs

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> index 5bc3bc5 . . 8d71f47 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> @ @ - 4 , 14 + 4 , 14 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> + import com . github . dreamhead . moco . util . MocoExecutors ; <nl> <nl> import java . util . concurrent . ExecutorService ; <nl> - import java . util . concurrent . Executors ; <nl> <nl> public final class MocoAsyncAction implements MocoEventAction { <nl> private final MocoEventAction action ; <nl> private final LatencyProcedure procedure ; <nl> - private final ExecutorService service = Executors . newCachedThreadPool ( ) ; <nl> + private final ExecutorService service = MocoExecutors . executor ( ) ; <nl> <nl> public MocoAsyncAction ( final MocoEventAction action , final LatencyProcedure procedure ) { <nl> this . action = action ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> new file mode 100644 <nl> index 0000000 . . 9812c0a <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package com . github . dreamhead . moco . util ; <nl> + <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + <nl> + public class MocoExecutors { <nl> + private static final ExecutorService executor = Executors . newCachedThreadPool ( ) ; <nl> + <nl> + public static ExecutorService executor ( ) { <nl> + return executor ; <nl> + } <nl> + <nl> + private MocoExecutors ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index c62ebcf . . a9666b9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . util . Files ; <nl> + import com . github . dreamhead . moco . util . MocoExecutors ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> @ @ - 34 , 7 + 35 , 7 @ @ public final class WatcherService { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; <nl> private static final long REGISTER _ INTERVAL = 1000 ; <nl> <nl> - private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> + private ExecutorService executor = MocoExecutors . executor ( ) ; <nl> private WatchService service ; <nl> private boolean running ; <nl> private Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 5ac6a26 . . 80a30ac 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import com . github . dreamhead . moco . monitor . StdLogWriter ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> + import com . github . dreamhead . moco . util . URLs ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> @ @ - 28 , 8 + 29 , 6 @ @ import com . google . common . collect . ImmutableMap ; <nl> import io . netty . handler . codec . http . HttpHeaders ; <nl> <nl> import java . io . File ; <nl> - import java . net . MalformedURLException ; <nl> - import java . net . URL ; <nl> <nl> import static com . github . dreamhead . moco . extractor . Extractors . extractor ; <nl> import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; <nl> @ @ - 315 , 7 + 314 , 7 @ @ public class Moco { <nl> } <nl> <nl> public static ResponseHandler proxy ( final String url , final Failover failover ) { <nl> - return new ProxyResponseHandler ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> + return new ProxyResponseHandler ( URLs . toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> } <nl> <nl> @ @ - 431 , 14 + 430 , 6 @ @ public class Moco { <nl> } ; <nl> } <nl> <nl> - private static URL toUrl ( final String url ) { <nl> - try { <nl> - return new URL ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ; <nl> - } catch ( MalformedURLException e ) { <nl> - throw new IllegalArgumentException ( e ) ; <nl> - } <nl> - } <nl> - <nl> private Moco ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> index bdde32d . . 6ee864f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> @ @ - 1 , 5 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + <nl> + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> + <nl> public class URLs { <nl> private static final String SEPARATOR = " / " ; <nl> <nl> @ @ - 19 , 5 + 24 , 13 @ @ public class URLs { <nl> return base + SEPARATOR + path ; <nl> } <nl> <nl> + public static URL toUrl ( final String url ) { <nl> + try { <nl> + return new URL ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ; <nl> + } catch ( MalformedURLException e ) { <nl> + throw new IllegalArgumentException ( e ) ; <nl> + } <nl> + } <nl> + <nl> private URLs ( ) { } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java <nl> index 79537cb . . 4538f68 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . internal . HttpsCertificate ; <nl> import com . google . common . base . Optional ; <nl> import org . apache . commons . cli . * ; <nl> <nl> - import java . io . ByteArrayOutputStream ; <nl> import java . io . PrintWriter ; <nl> import java . io . StringWriter ; <nl>

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 index 5bc3bc5 . . 8d71f47 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 @ @ - 4 , 14 + 4 , 14 @ @ import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 + import com . github . dreamhead . moco . util . MocoExecutors ; 
 
 import java . util . concurrent . ExecutorService ; 
 - import java . util . concurrent . Executors ; 
 
 public final class MocoAsyncAction implements MocoEventAction { 
 private final MocoEventAction action ; 
 private final LatencyProcedure procedure ; 
 - private final ExecutorService service = Executors . newCachedThreadPool ( ) ; 
 + private final ExecutorService service = MocoExecutors . executor ( ) ; 
 
 public MocoAsyncAction ( final MocoEventAction action , final LatencyProcedure procedure ) { 
 this . action = action ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java 
 new file mode 100644 
 index 0000000 . . 9812c0a 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / MocoExecutors . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package com . github . dreamhead . moco . util ; 
 + 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + 
 + public class MocoExecutors { 
 + private static final ExecutorService executor = Executors . newCachedThreadPool ( ) ; 
 + 
 + public static ExecutorService executor ( ) { 
 + return executor ; 
 + } 
 + 
 + private MocoExecutors ( ) { 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 index c62ebcf . . a9666b9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . runner . watcher ; 
 
 import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . util . Files ; 
 + import com . github . dreamhead . moco . util . MocoExecutors ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . HashMultimap ; 
 @ @ - 34 , 7 + 35 , 7 @ @ public final class WatcherService { 
 private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; 
 private static final long REGISTER _ INTERVAL = 1000 ; 
 
 - private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; 
 + private ExecutorService executor = MocoExecutors . executor ( ) ; 
 private WatchService service ; 
 private boolean running ; 
 private Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 5ac6a26 . . 80a30ac 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import com . github . dreamhead . moco . monitor . StdLogWriter ; 
 import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 + import com . github . dreamhead . moco . util . URLs ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . FluentIterable ; 
 @ @ - 28 , 8 + 29 , 6 @ @ import com . google . common . collect . ImmutableMap ; 
 import io . netty . handler . codec . http . HttpHeaders ; 
 
 import java . io . File ; 
 - import java . net . MalformedURLException ; 
 - import java . net . URL ; 
 
 import static com . github . dreamhead . moco . extractor . Extractors . extractor ; 
 import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler ; 
 @ @ - 315 , 7 + 314 , 7 @ @ public class Moco { 
 } 
 
 public static ResponseHandler proxy ( final String url , final Failover failover ) { 
 - return new ProxyResponseHandler ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , 
 + return new ProxyResponseHandler ( URLs . toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , 
 checkNotNull ( failover , " Failover should not be null " ) ) ; 
 } 
 
 @ @ - 431 , 14 + 430 , 6 @ @ public class Moco { 
 } ; 
 } 
 
 - private static URL toUrl ( final String url ) { 
 - try { 
 - return new URL ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ; 
 - } catch ( MalformedURLException e ) { 
 - throw new IllegalArgumentException ( e ) ; 
 - } 
 - } 
 - 
 private Moco ( ) { 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 index bdde32d . . 6ee864f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 @ @ - 1 , 5 + 1 , 10 @ @ 
 package com . github . dreamhead . moco . util ; 
 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + 
 + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 + 
 public class URLs { 
 private static final String SEPARATOR = " / " ; 
 
 @ @ - 19 , 5 + 24 , 13 @ @ public class URLs { 
 return base + SEPARATOR + path ; 
 } 
 
 + public static URL toUrl ( final String url ) { 
 + try { 
 + return new URL ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ; 
 + } catch ( MalformedURLException e ) { 
 + throw new IllegalArgumentException ( e ) ; 
 + } 
 + } 
 + 
 private URLs ( ) { } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java 
 index 79537cb . . 4538f68 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartArgs . java 
 @ @ - 4 , 7 + 4 , 6 @ @ import com . github . dreamhead . moco . internal . HttpsCertificate ; 
 import com . google . common . base . Optional ; 
 import org . apache . commons . cli . * ; 
 
 - import java . io . ByteArrayOutputStream ; 
 import java . io . PrintWriter ; 
 import java . io . StringWriter ; 

