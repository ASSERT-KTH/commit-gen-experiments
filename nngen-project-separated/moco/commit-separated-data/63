BLEU SCORE: 0.08170609724417775

TEST MSG: added missing final to http configuration
GENERATED MSG: added override annotation for some missing methods

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> index f7db9aa . . 6bd156f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> @ @ - 36 , 27 + 36 , 27 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting get ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting get ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . GET , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting post ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting post ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . POST , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting put ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting put ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . PUT , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting delete ( final RequestMatcher matcher ) { <nl> + public final HttpResponseSetting delete ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . DELETE , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { <nl> + public final HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { <nl> File mountedDir = new File ( checkNotNullOrEmpty ( dir , " Directory should not be null " ) ) ; <nl> checkNotNull ( target , " Target should not be null " ) ; <nl> return this . request ( new MountMatcher ( mountedDir , target , copyOf ( predicates ) ) ) <nl> @ @ - 68 , 12 + 68 , 12 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting proxy ( final ProxyConfig config ) { <nl> + public final HttpResponseSetting proxy ( final ProxyConfig config ) { <nl> return proxy ( checkNotNull ( config , " Proxy config should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { <nl> + public final HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { <nl> ProxyConfig config = checkNotNull ( proxyConfig , " Proxy config should not be null " ) ; <nl> this . request ( InternalApis . context ( config . localBase ( ) ) ) <nl> . response ( Moco . proxy ( config , checkNotNull ( failover , " Failover should not be null " ) ) ) ; <nl> @ @ - 81 , 17 + 81 , 17 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting redirectTo ( final String url ) { <nl> + public final HttpResponseSetting redirectTo ( final String url ) { <nl> return delegate . redirectTo ( this , url ) ; <nl> } <nl> <nl> @ Override <nl> - public HttpResponseSetting redirectTo ( final Resource url ) { <nl> + public final HttpResponseSetting redirectTo ( final Resource url ) { <nl> return delegate . redirectTo ( this , url ) ; <nl> } <nl> <nl> @ Override <nl> - protected HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { <nl> + protected final HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { <nl> HttpSetting baseSetting = new HttpSetting ( matcher ) ; <nl> addSetting ( baseSetting ) ; <nl> return baseSetting ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> index f37d3dd . . 5c6a827 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> @ @ - 22 , 22 + 22 , 27 @ @ public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSet <nl> super ( port , monitor , configs ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting get ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . GET , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting post ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . POST , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting put ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . PUT , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting delete ( final RequestMatcher matcher ) { <nl> return requestByHttpMethod ( HttpMethod . DELETE , checkNotNull ( matcher , " Matcher should not be null " ) ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { <nl> File mountedDir = new File ( checkNotNullOrEmpty ( dir , " Directory should not be null " ) ) ; <nl> checkNotNull ( target , " Target should not be null " ) ; <nl> @ @ - 48 , 10 + 53 , 12 @ @ public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSet <nl> return request ( and ( by ( method ( method . name ( ) ) ) , matcher ) ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting proxy ( final ProxyConfig config ) { <nl> return proxy ( checkNotNull ( config , " Proxy config should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; <nl> } <nl> <nl> + @ Override <nl> public HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { <nl> ProxyConfig config = checkNotNull ( proxyConfig , " Proxy config should not be null " ) ; <nl> this . request ( InternalApis . context ( config . localBase ( ) ) ) . response ( Moco . proxy ( config , checkNotNull ( failover , " Failover should not be null " ) ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 42e0c3d . . f664b28 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 60 , 10 + 60 , 12 @ @ public class DefaultHttpRequest implements HttpRequest { <nl> return headers ; <nl> } <nl> <nl> + @ Override <nl> public String getMethod ( ) { <nl> return method ; <nl> } <nl> <nl> + @ Override <nl> public String getUri ( ) { <nl> return uri ; <nl> } <nl> @ @ - 78 , 6 + 80 , 7 @ @ public class DefaultHttpRequest implements HttpRequest { <nl> return cookieSupplier . get ( ) ; <nl> } <nl> <nl> + @ Override <nl> public ImmutableMap < String , String > getQueries ( ) { <nl> return queries ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 64954c2 . . 1627f52 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ public class DefaultHttpResponse implements HttpResponse { <nl> return this . headers ; <nl> } <nl> <nl> + @ Override <nl> public int getStatus ( ) { <nl> return status ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 index f7db9aa . . 6bd156f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 @ @ - 36 , 27 + 36 , 27 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > 
 } 
 
 @ Override 
 - public HttpResponseSetting get ( final RequestMatcher matcher ) { 
 + public final HttpResponseSetting get ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . GET , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 @ Override 
 - public HttpResponseSetting post ( final RequestMatcher matcher ) { 
 + public final HttpResponseSetting post ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . POST , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 @ Override 
 - public HttpResponseSetting put ( final RequestMatcher matcher ) { 
 + public final HttpResponseSetting put ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . PUT , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 @ Override 
 - public HttpResponseSetting delete ( final RequestMatcher matcher ) { 
 + public final HttpResponseSetting delete ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . DELETE , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 @ Override 
 - public HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { 
 + public final HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { 
 File mountedDir = new File ( checkNotNullOrEmpty ( dir , " Directory should not be null " ) ) ; 
 checkNotNull ( target , " Target should not be null " ) ; 
 return this . request ( new MountMatcher ( mountedDir , target , copyOf ( predicates ) ) ) 
 @ @ - 68 , 12 + 68 , 12 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > 
 } 
 
 @ Override 
 - public HttpResponseSetting proxy ( final ProxyConfig config ) { 
 + public final HttpResponseSetting proxy ( final ProxyConfig config ) { 
 return proxy ( checkNotNull ( config , " Proxy config should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; 
 } 
 
 @ Override 
 - public HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { 
 + public final HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { 
 ProxyConfig config = checkNotNull ( proxyConfig , " Proxy config should not be null " ) ; 
 this . request ( InternalApis . context ( config . localBase ( ) ) ) 
 . response ( Moco . proxy ( config , checkNotNull ( failover , " Failover should not be null " ) ) ) ; 
 @ @ - 81 , 17 + 81 , 17 @ @ public abstract class HttpConfiguration < T extends BaseActualServer > 
 } 
 
 @ Override 
 - public HttpResponseSetting redirectTo ( final String url ) { 
 + public final HttpResponseSetting redirectTo ( final String url ) { 
 return delegate . redirectTo ( this , url ) ; 
 } 
 
 @ Override 
 - public HttpResponseSetting redirectTo ( final Resource url ) { 
 + public final HttpResponseSetting redirectTo ( final Resource url ) { 
 return delegate . redirectTo ( this , url ) ; 
 } 
 
 @ Override 
 - protected HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { 
 + protected final HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { 
 HttpSetting baseSetting = new HttpSetting ( matcher ) ; 
 addSetting ( baseSetting ) ; 
 return baseSetting ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 index f37d3dd . . 5c6a827 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 @ @ - 22 , 22 + 22 , 27 @ @ public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSet 
 super ( port , monitor , configs ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting get ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . GET , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting post ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . POST , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting put ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . PUT , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting delete ( final RequestMatcher matcher ) { 
 return requestByHttpMethod ( HttpMethod . DELETE , checkNotNull ( matcher , " Matcher should not be null " ) ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting mount ( final String dir , final MountTo target , final MountPredicate . . . predicates ) { 
 File mountedDir = new File ( checkNotNullOrEmpty ( dir , " Directory should not be null " ) ) ; 
 checkNotNull ( target , " Target should not be null " ) ; 
 @ @ - 48 , 10 + 53 , 12 @ @ public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSet 
 return request ( and ( by ( method ( method . name ( ) ) ) , matcher ) ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting proxy ( final ProxyConfig config ) { 
 return proxy ( checkNotNull ( config , " Proxy config should not be null " ) , Failover . DEFAULT _ FAILOVER ) ; 
 } 
 
 + @ Override 
 public HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) { 
 ProxyConfig config = checkNotNull ( proxyConfig , " Proxy config should not be null " ) ; 
 this . request ( InternalApis . context ( config . localBase ( ) ) ) . response ( Moco . proxy ( config , checkNotNull ( failover , " Failover should not be null " ) ) ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index 42e0c3d . . f664b28 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 60 , 10 + 60 , 12 @ @ public class DefaultHttpRequest implements HttpRequest { 
 return headers ; 
 } 
 
 + @ Override 
 public String getMethod ( ) { 
 return method ; 
 } 
 
 + @ Override 
 public String getUri ( ) { 
 return uri ; 
 } 
 @ @ - 78 , 6 + 80 , 7 @ @ public class DefaultHttpRequest implements HttpRequest { 
 return cookieSupplier . get ( ) ; 
 } 
 
 + @ Override 
 public ImmutableMap < String , String > getQueries ( ) { 
 return queries ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index 64954c2 . . 1627f52 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 39 , 6 + 39 , 7 @ @ public class DefaultHttpResponse implements HttpResponse { 
 return this . headers ; 
 } 
 
 + @ Override 
 public int getStatus ( ) { 
 return status ; 
 }
