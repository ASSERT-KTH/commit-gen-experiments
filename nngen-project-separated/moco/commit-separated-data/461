BLEU SCORE: 0.11498759556447223

TEST MSG: added missing final to abstract content response handler and abstract file resource reader
GENERATED MSG: privated file name in file resource reader

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 85c49e5 . . 8a35963 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan <nl> protected abstract MediaType getContentType ( final HttpRequest request ) ; <nl> <nl> @ Override <nl> - public void writeToResponse ( final SessionContext context ) { <nl> + public final void writeToResponse ( final SessionContext context ) { <nl> Request request = context . getRequest ( ) ; <nl> Response response = context . getResponse ( ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 54c1336 . . 9a44daf 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> } <nl> <nl> @ Override <nl> - public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> + public final MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> return asMessageContent ( doReadFor ( request ) ) ; <nl> } <nl> <nl> @ @ - 40 , 12 + 40 , 12 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> } <nl> <nl> @ Override <nl> - public MediaType getContentType ( final HttpRequest request ) { <nl> + public final MediaType getContentType ( final HttpRequest request ) { <nl> String targetFilename = this . filename ( of ( request ) ) ; <nl> return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; <nl> } <nl> <nl> - protected String filename ( final Optional < ? extends Request > request ) { <nl> + protected final String filename ( final Optional < ? extends Request > request ) { <nl> MessageContent messageContent = this . filename . readFor ( request ) ; <nl> return messageContent . toString ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> index 21e6282 . . 54c1336 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 17 , 7 + 17 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> <nl> protected abstract byte [ ] doReadFor ( final Optional < ? extends Request > request ) ; <nl> <nl> - protected final Resource filename ; <nl> + private final Resource filename ; <nl> private final Optional < Charset > charset ; <nl> <nl> public AbstractFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { <nl> @ @ - 41 , 8 + 41 , 12 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade <nl> <nl> @ Override <nl> public MediaType getContentType ( final HttpRequest request ) { <nl> - MessageContent messageContent = this . filename . readFor ( of ( request ) ) ; <nl> - String filename = messageContent . toString ( ) ; <nl> - return new FileContentType ( filename , charset ) . getContentType ( ) ; <nl> + String targetFilename = this . filename ( of ( request ) ) ; <nl> + return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; <nl> + } <nl> + <nl> + protected String filename ( final Optional < ? extends Request > request ) { <nl> + MessageContent messageContent = this . filename . readFor ( request ) ; <nl> + return messageContent . toString ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index a891d6e . . 6cfe2f7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 18 , 9 + 18 , 10 @ @ public class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> <nl> protected byte [ ] doReadFor ( final Optional < ? extends Request > request ) { <nl> ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; <nl> - URL resource = classLoader . getResource ( filename . readFor ( request ) . toString ( ) ) ; <nl> + String actualFilename = this . filename ( request ) ; <nl> + URL resource = classLoader . getResource ( actualFilename ) ; <nl> if ( resource = = null ) { <nl> - throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; <nl> + throw new IllegalArgumentException ( format ( " % s does not exist " , actualFilename ) ) ; <nl> } <nl> try { <nl> return toByteArray ( resource . openStream ( ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> index 827d237 . . c8f459d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> @ @ - 42 , 8 + 42 , 7 @ @ public class FileResourceReader extends AbstractFileResourceReader { <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> private String targetFileName ( final Optional < ? extends Request > request ) { <nl> - MessageContent messageContent = filename . readFor ( request ) ; <nl> - String filename = messageContent . toString ( ) ; <nl> + String filename = this . filename ( request ) ; <nl> <nl> if ( config . isPresent ( ) ) { <nl> return ( String ) config . get ( ) . apply ( filename ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 index 85c49e5 . . 8a35963 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 @ @ - 17 , 7 + 17 , 7 @ @ public abstract class AbstractContentResponseHandler extends AbstractResponseHan 
 protected abstract MediaType getContentType ( final HttpRequest request ) ; 
 
 @ Override 
 - public void writeToResponse ( final SessionContext context ) { 
 + public final void writeToResponse ( final SessionContext context ) { 
 Request request = context . getRequest ( ) ; 
 Response response = context . getResponse ( ) ; 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 index 54c1336 . . 9a44daf 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 @ @ - 26 , 7 + 26 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 } 
 
 @ Override 
 - public MessageContent readFor ( final Optional < ? extends Request > request ) { 
 + public final MessageContent readFor ( final Optional < ? extends Request > request ) { 
 return asMessageContent ( doReadFor ( request ) ) ; 
 } 
 
 @ @ - 40 , 12 + 40 , 12 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 } 
 
 @ Override 
 - public MediaType getContentType ( final HttpRequest request ) { 
 + public final MediaType getContentType ( final HttpRequest request ) { 
 String targetFilename = this . filename ( of ( request ) ) ; 
 return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; 
 } 
 
 - protected String filename ( final Optional < ? extends Request > request ) { 
 + protected final String filename ( final Optional < ? extends Request > request ) { 
 MessageContent messageContent = this . filename . readFor ( request ) ; 
 return messageContent . toString ( ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 index 21e6282 . . 54c1336 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 @ @ - 17 , 7 + 17 , 7 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 
 protected abstract byte [ ] doReadFor ( final Optional < ? extends Request > request ) ; 
 
 - protected final Resource filename ; 
 + private final Resource filename ; 
 private final Optional < Charset > charset ; 
 
 public AbstractFileResourceReader ( final Resource filename , final Optional < Charset > charset ) { 
 @ @ - 41 , 8 + 41 , 12 @ @ public abstract class AbstractFileResourceReader implements ContentResourceReade 
 
 @ Override 
 public MediaType getContentType ( final HttpRequest request ) { 
 - MessageContent messageContent = this . filename . readFor ( of ( request ) ) ; 
 - String filename = messageContent . toString ( ) ; 
 - return new FileContentType ( filename , charset ) . getContentType ( ) ; 
 + String targetFilename = this . filename ( of ( request ) ) ; 
 + return new FileContentType ( targetFilename , charset ) . getContentType ( ) ; 
 + } 
 + 
 + protected String filename ( final Optional < ? extends Request > request ) { 
 + MessageContent messageContent = this . filename . readFor ( request ) ; 
 + return messageContent . toString ( ) ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 index a891d6e . . 6cfe2f7 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 @ @ - 18 , 9 + 18 , 10 @ @ public class ClasspathFileResourceReader extends AbstractFileResourceReader { 
 
 protected byte [ ] doReadFor ( final Optional < ? extends Request > request ) { 
 ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; 
 - URL resource = classLoader . getResource ( filename . readFor ( request ) . toString ( ) ) ; 
 + String actualFilename = this . filename ( request ) ; 
 + URL resource = classLoader . getResource ( actualFilename ) ; 
 if ( resource = = null ) { 
 - throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; 
 + throw new IllegalArgumentException ( format ( " % s does not exist " , actualFilename ) ) ; 
 } 
 try { 
 return toByteArray ( resource . openStream ( ) ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 index 827d237 . . c8f459d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 @ @ - 42 , 8 + 42 , 7 @ @ public class FileResourceReader extends AbstractFileResourceReader { 
 
 @ SuppressWarnings ( " unchecked " ) 
 private String targetFileName ( final Optional < ? extends Request > request ) { 
 - MessageContent messageContent = filename . readFor ( request ) ; 
 - String filename = messageContent . toString ( ) ; 
 + String filename = this . filename ( request ) ; 
 
 if ( config . isPresent ( ) ) { 
 return ( String ) config . get ( ) . apply ( filename ) ;
