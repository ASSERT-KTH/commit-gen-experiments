BLEU SCORE: 0.02399905349559606

TEST MSG: added final to http args
GENERATED MSG: fixed deprecation from jackson 2 . 8 . 0

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index e1ff1df . . 45c66e8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ public final class MocoJsonRunner { <nl> public static HttpsServer jsonHttpsServer ( final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> - ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> + ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ) ; <nl> } <nl> @ @ - 34 , 7 + 34 , 7 @ @ public final class MocoJsonRunner { <nl> final HttpsCertificate certificate ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> - ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> + ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> index 5ce9b18 . . 74f242f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . bootstrap . arg ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . ServerType ; <nl> <nl> - public class HttpArgs extends StartArgs { <nl> + public final class HttpArgs extends StartArgs { <nl> private HttpArgs ( final Integer port , final Integer shutdownPort , <nl> final String configurationFile , final String globalSettings , <nl> final String env ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index 161750e . . 3651e33 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 23 , 6 + 23 , 6 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> return helper . textContainer ( jp , ctxt ) ; <nl> } <nl> <nl> - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> index f464003 . . f86899e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class TextContainerDeserializerHelper { <nl> } <nl> } <nl> <nl> - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index e8d2014 . . 043fe39 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFacto <nl> import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; <nl> <nl> @ JsonDeserialize ( using = TextContainerDeserializer . class ) <nl> - public class TextContainer implements Container { <nl> + public class TextContainer implements Container { <nl> private static final String TEMPLATE _ NAME = " template " ; <nl> private String text ; <nl> private String operation ;
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> index 406f562 . . 3851a2b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > <nl> } <nl> } <nl> <nl> - throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index 7d4e78e . . a0bd521 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer <nl> return asFileContainer ( textContainer ( jp , ctxt ) ) ; <nl> } <nl> <nl> - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> + return ( FileContainer ) ctxt . handleUnexpectedToken ( FileContainer . class , jp ) ; <nl> } <nl> <nl> private FileContainer toFileContainer ( final JsonParser jp ) throws IOException { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> index bac266f . . 24879db 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContai <nl> TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; <nl> } <nl> <nl> - throw ctxt . mappingException ( LatencyContainer . class , currentToken ) ; <nl> + return ( LatencyContainer ) ctxt . handleUnexpectedToken ( LatencyContainer . class , jp ) ; <nl> } <nl> <nl> private static class InternalLatencyContainer { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> index aedfdbb . . 5cfd664 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > <nl> return container . toProxyContainer ( ) ; <nl> } <nl> <nl> - throw ctxt . mappingException ( ProxyContainer . class , currentToken ) ; <nl> + return ( ProxyContainer ) ctxt . handleUnexpectedToken ( ProxyContainer . class , jp ) ; <nl> } <nl> <nl> private static class InternalProxyContainer { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index bafd6da . . d422723 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 20 , 6 + 20 , 6 @ @ public class TextContainerDeserializer extends AbstractTextContainerDeserializer <nl> return textContainer ( jp , ctxt ) ; <nl> } <nl> <nl> - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 index e1ff1df . . 45c66e8 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 @ @ - 25 , 7 + 25 , 7 @ @ public final class MocoJsonRunner { 
 public static HttpsServer jsonHttpsServer ( final Resource resource , 
 final HttpsCertificate certificate ) { 
 checkNotNull ( certificate , " Certificate should not be null " ) ; 
 - ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; 
 + ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; 
 return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( 
 checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ) ; 
 } 
 @ @ - 34 , 7 + 34 , 7 @ @ public final class MocoJsonRunner { 
 final HttpsCertificate certificate ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 checkNotNull ( certificate , " Certificate should not be null " ) ; 
 - ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; 
 + ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; 
 return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( 
 checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java 
 index 5ce9b18 . . 74f242f 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / arg / HttpArgs . java 
 @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . bootstrap . arg ; 
 
 import com . github . dreamhead . moco . bootstrap . ServerType ; 
 
 - public class HttpArgs extends StartArgs { 
 + public final class HttpArgs extends StartArgs { 
 private HttpArgs ( final Integer port , final Integer shutdownPort , 
 final String configurationFile , final String globalSettings , 
 final String env ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index 161750e . . 3651e33 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 23 , 6 + 23 , 6 @ @ public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 return helper . textContainer ( jp , ctxt ) ; 
 } 
 
 - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 index f464003 . . f86899e 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class TextContainerDeserializerHelper { 
 } 
 } 
 
 - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 } 
 
 private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index e8d2014 . . 043fe39 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 14 , 7 + 14 , 7 @ @ import static com . github . dreamhead . moco . parser . model . DynamicResponseHandlerFacto 
 import static com . github . dreamhead . moco . parser . model . Dynamics . invokeTarget ; 
 
 @ JsonDeserialize ( using = TextContainerDeserializer . class ) 
 - public class TextContainer implements Container { 
 + public class TextContainer implements Container { 
 private static final String TEMPLATE _ NAME = " template " ; 
 private String text ; 
 private String operation ;

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 index 406f562 . . 3851a2b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public abstract class AbstractTextContainerDeserializer < T extends TextContainer > 
 } 
 } 
 
 - throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; 
 + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 } 
 
 private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 index 7d4e78e . . a0bd521 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer 
 return asFileContainer ( textContainer ( jp , ctxt ) ) ; 
 } 
 
 - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 + return ( FileContainer ) ctxt . handleUnexpectedToken ( FileContainer . class , jp ) ; 
 } 
 
 private FileContainer toFileContainer ( final JsonParser jp ) throws IOException { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 index bac266f . . 24879db 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / LatencyContainerDeserializer . java 
 @ @ - 26 , 7 + 26 , 7 @ @ public class LatencyContainerDeserializer extends JsonDeserializer < LatencyContai 
 TimeUnit . valueOf ( container . unit . toUpperCase ( ) + ' S ' ) ) ; 
 } 
 
 - throw ctxt . mappingException ( LatencyContainer . class , currentToken ) ; 
 + return ( LatencyContainer ) ctxt . handleUnexpectedToken ( LatencyContainer . class , jp ) ; 
 } 
 
 private static class InternalLatencyContainer { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 index aedfdbb . . 5cfd664 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 @ @ - 24 , 7 + 24 , 7 @ @ public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > 
 return container . toProxyContainer ( ) ; 
 } 
 
 - throw ctxt . mappingException ( ProxyContainer . class , currentToken ) ; 
 + return ( ProxyContainer ) ctxt . handleUnexpectedToken ( ProxyContainer . class , jp ) ; 
 } 
 
 private static class InternalProxyContainer { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index bafd6da . . d422723 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 20 , 6 + 20 , 6 @ @ public class TextContainerDeserializer extends AbstractTextContainerDeserializer 
 return textContainer ( jp , ctxt ) ; 
 } 
 
 - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 } 
 }
