BLEU SCORE: 0.12223075560872526

TEST MSG: replaced list with builder in runner setting builder
GENERATED MSG: added builder to runner setting

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 6e96b1e . . 08a940e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 130 , 7 + 130 , 7 @ @ public final class JsonRunner implements Runner { <nl> return new Function < InputStream , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( final InputStream input ) { <nl> - return aRunnerSetting ( ) . withStream ( input ) . build ( ) ; <nl> + return aRunnerSetting ( ) . addStream ( input ) . build ( ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index a913233 . . 8a04f67 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 70 , 14 + 70 , 14 @ @ public final class RunnerSetting { <nl> } <nl> <nl> public static class Builder { <nl> - private InputStream stream ; <nl> + private ImmutableList . Builder < InputStream > streams = ImmutableList . builder ( ) ; <nl> private RequestSetting request ; <nl> private ResponseSetting response ; <nl> private String context ; <nl> private String fileRoot ; <nl> <nl> - public Builder withStream ( final InputStream stream ) { <nl> - this . stream = stream ; <nl> + public Builder addStream ( final InputStream stream ) { <nl> + this . streams . add ( stream ) ; <nl> return this ; <nl> } <nl> <nl> @ @ - 102 , 7 + 102 , 7 @ @ public final class RunnerSetting { <nl> } <nl> <nl> public RunnerSetting build ( ) { <nl> - return new RunnerSetting ( ImmutableList . of ( stream ) , context , fileRoot , request , response ) ; <nl> + return new RunnerSetting ( streams . build ( ) , context , fileRoot , request , response ) ; <nl> } <nl> <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 4e308fd . . 040ece0 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class SettingRunner implements Runner { <nl> public RunnerSetting apply ( final GlobalSetting setting ) { <nl> try { <nl> return aRunnerSetting ( ) <nl> - . withStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> + . addStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> . withContext ( setting . getContext ( ) ) <nl> . withFileRoot ( setting . getFileRoot ( ) ) <nl> . withRequest ( setting . getRequest ( ) )
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 8588057 . . c08ad06 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import java . io . InputStream ; <nl> <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> + import static com . github . dreamhead . moco . runner . RunnerSetting . aRunnerSetting ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . Iterables . toArray ; <nl> <nl> @ @ - 116 , 7 + 117 , 7 @ @ public class JsonRunner implements Runner { <nl> return new Function < InputStream , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( InputStream input ) { <nl> - return new RunnerSetting ( input , null , null , null , null ) ; <nl> + return aRunnerSetting ( ) . withStream ( input ) . build ( ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index 86af4f8 . . ceabac4 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ public class RunnerSetting { <nl> private final Optional < String > context ; <nl> private final Optional < String > fileRoot ; <nl> <nl> - public RunnerSetting ( InputStream stream , String context , String fileRoot , <nl> + private RunnerSetting ( InputStream stream , String context , String fileRoot , <nl> RequestSetting requestSetting , ResponseSetting response ) { <nl> this . stream = stream ; <nl> this . request = fromNullable ( requestSetting ) ; <nl> @ @ - 64 , 4 + 64 , 45 @ @ public class RunnerSetting { <nl> return absent ( ) ; <nl> } <nl> <nl> + public static Builder aRunnerSetting ( ) { <nl> + return new Builder ( ) ; <nl> + } <nl> + <nl> + public static class Builder { <nl> + private InputStream stream ; <nl> + private RequestSetting request ; <nl> + private ResponseSetting response ; <nl> + private String context ; <nl> + private String fileRoot ; <nl> + <nl> + public Builder withStream ( InputStream stream ) { <nl> + this . stream = stream ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withRequest ( RequestSetting request ) { <nl> + this . request = request ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withResponse ( ResponseSetting response ) { <nl> + this . response = response ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withContext ( String context ) { <nl> + this . context = context ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withFileRoot ( String fileRoot ) { <nl> + this . fileRoot = fileRoot ; <nl> + return this ; <nl> + } <nl> + <nl> + public RunnerSetting build ( ) { <nl> + return new RunnerSetting ( stream , context , fileRoot , request , response ) ; <nl> + } <nl> + <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index 2cb0e7a . . b8018d3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 15 , 6 + 15 , 7 @ @ import java . io . FileNotFoundException ; <nl> import java . io . InputStream ; <nl> <nl> import static com . github . dreamhead . moco . runner . JsonRunner . newJsonRunnerWithSetting ; <nl> + import static com . github . dreamhead . moco . runner . RunnerSetting . aRunnerSetting ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public class SettingRunner implements Runner { <nl> @ @ - 57 , 11 + 58 , 13 @ @ public class SettingRunner implements Runner { <nl> @ Override <nl> public RunnerSetting apply ( GlobalSetting setting ) { <nl> try { <nl> - return new RunnerSetting ( new FileInputStream ( setting . getInclude ( ) ) , <nl> - setting . getContext ( ) , <nl> - setting . getFileRoot ( ) , <nl> - setting . getRequest ( ) , <nl> - setting . getResponse ( ) ) ; <nl> + return aRunnerSetting ( ) <nl> + . withStream ( new FileInputStream ( setting . getInclude ( ) ) ) <nl> + . withContext ( setting . getContext ( ) ) <nl> + . withFileRoot ( setting . getFileRoot ( ) ) <nl> + . withRequest ( setting . getRequest ( ) ) <nl> + . withResponse ( setting . getResponse ( ) ) <nl> + . build ( ) ; <nl> } catch ( FileNotFoundException e ) { <nl> throw new RuntimeException ( e ) ; <nl> }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 index 6e96b1e . . 08a940e 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 @ @ - 130 , 7 + 130 , 7 @ @ public final class JsonRunner implements Runner { 
 return new Function < InputStream , RunnerSetting > ( ) { 
 @ Override 
 public RunnerSetting apply ( final InputStream input ) { 
 - return aRunnerSetting ( ) . withStream ( input ) . build ( ) ; 
 + return aRunnerSetting ( ) . addStream ( input ) . build ( ) ; 
 } 
 } ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 index a913233 . . 8a04f67 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 @ @ - 70 , 14 + 70 , 14 @ @ public final class RunnerSetting { 
 } 
 
 public static class Builder { 
 - private InputStream stream ; 
 + private ImmutableList . Builder < InputStream > streams = ImmutableList . builder ( ) ; 
 private RequestSetting request ; 
 private ResponseSetting response ; 
 private String context ; 
 private String fileRoot ; 
 
 - public Builder withStream ( final InputStream stream ) { 
 - this . stream = stream ; 
 + public Builder addStream ( final InputStream stream ) { 
 + this . streams . add ( stream ) ; 
 return this ; 
 } 
 
 @ @ - 102 , 7 + 102 , 7 @ @ public final class RunnerSetting { 
 } 
 
 public RunnerSetting build ( ) { 
 - return new RunnerSetting ( ImmutableList . of ( stream ) , context , fileRoot , request , response ) ; 
 + return new RunnerSetting ( streams . build ( ) , context , fileRoot , request , response ) ; 
 } 
 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 index 4e308fd . . 040ece0 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class SettingRunner implements Runner { 
 public RunnerSetting apply ( final GlobalSetting setting ) { 
 try { 
 return aRunnerSetting ( ) 
 - . withStream ( new FileInputStream ( setting . getInclude ( ) ) ) 
 + . addStream ( new FileInputStream ( setting . getInclude ( ) ) ) 
 . withContext ( setting . getContext ( ) ) 
 . withFileRoot ( setting . getFileRoot ( ) ) 
 . withRequest ( setting . getRequest ( ) )

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 index 8588057 . . c08ad06 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import java . io . InputStream ; 
 
 import static com . github . dreamhead . moco . Moco . * ; 
 + import static com . github . dreamhead . moco . runner . RunnerSetting . aRunnerSetting ; 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . Iterables . toArray ; 
 
 @ @ - 116 , 7 + 117 , 7 @ @ public class JsonRunner implements Runner { 
 return new Function < InputStream , RunnerSetting > ( ) { 
 @ Override 
 public RunnerSetting apply ( InputStream input ) { 
 - return new RunnerSetting ( input , null , null , null , null ) ; 
 + return aRunnerSetting ( ) . withStream ( input ) . build ( ) ; 
 } 
 } ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 index 86af4f8 . . ceabac4 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 @ @ - 19 , 7 + 19 , 7 @ @ public class RunnerSetting { 
 private final Optional < String > context ; 
 private final Optional < String > fileRoot ; 
 
 - public RunnerSetting ( InputStream stream , String context , String fileRoot , 
 + private RunnerSetting ( InputStream stream , String context , String fileRoot , 
 RequestSetting requestSetting , ResponseSetting response ) { 
 this . stream = stream ; 
 this . request = fromNullable ( requestSetting ) ; 
 @ @ - 64 , 4 + 64 , 45 @ @ public class RunnerSetting { 
 return absent ( ) ; 
 } 
 
 + public static Builder aRunnerSetting ( ) { 
 + return new Builder ( ) ; 
 + } 
 + 
 + public static class Builder { 
 + private InputStream stream ; 
 + private RequestSetting request ; 
 + private ResponseSetting response ; 
 + private String context ; 
 + private String fileRoot ; 
 + 
 + public Builder withStream ( InputStream stream ) { 
 + this . stream = stream ; 
 + return this ; 
 + } 
 + 
 + public Builder withRequest ( RequestSetting request ) { 
 + this . request = request ; 
 + return this ; 
 + } 
 + 
 + public Builder withResponse ( ResponseSetting response ) { 
 + this . response = response ; 
 + return this ; 
 + } 
 + 
 + public Builder withContext ( String context ) { 
 + this . context = context ; 
 + return this ; 
 + } 
 + 
 + public Builder withFileRoot ( String fileRoot ) { 
 + this . fileRoot = fileRoot ; 
 + return this ; 
 + } 
 + 
 + public RunnerSetting build ( ) { 
 + return new RunnerSetting ( stream , context , fileRoot , request , response ) ; 
 + } 
 + 
 + } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 index 2cb0e7a . . b8018d3 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 @ @ - 15 , 6 + 15 , 7 @ @ import java . io . FileNotFoundException ; 
 import java . io . InputStream ; 
 
 import static com . github . dreamhead . moco . runner . JsonRunner . newJsonRunnerWithSetting ; 
 + import static com . github . dreamhead . moco . runner . RunnerSetting . aRunnerSetting ; 
 import static com . google . common . collect . FluentIterable . from ; 
 
 public class SettingRunner implements Runner { 
 @ @ - 57 , 11 + 58 , 13 @ @ public class SettingRunner implements Runner { 
 @ Override 
 public RunnerSetting apply ( GlobalSetting setting ) { 
 try { 
 - return new RunnerSetting ( new FileInputStream ( setting . getInclude ( ) ) , 
 - setting . getContext ( ) , 
 - setting . getFileRoot ( ) , 
 - setting . getRequest ( ) , 
 - setting . getResponse ( ) ) ; 
 + return aRunnerSetting ( ) 
 + . withStream ( new FileInputStream ( setting . getInclude ( ) ) ) 
 + . withContext ( setting . getContext ( ) ) 
 + . withFileRoot ( setting . getFileRoot ( ) ) 
 + . withRequest ( setting . getRequest ( ) ) 
 + . withResponse ( setting . getResponse ( ) ) 
 + . build ( ) ; 
 } catch ( FileNotFoundException e ) { 
 throw new RuntimeException ( e ) ; 
 }
