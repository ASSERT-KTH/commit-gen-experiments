BLEU SCORE: 0.6434588841607617

TEST MSG: added domain cookie option to standalone cookie
GENERATED MSG: added path cookie option to standalone cookie

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index a0f2043 . . e55753a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 56 , 6 + 56 , 11 @ @ public class CookieContainer implements Container { <nl> if ( this . path ! = null ) { <nl> options . add ( CookieOption . path ( this . path ) ) ; <nl> } <nl> + <nl> + if ( this . domain ! = null ) { <nl> + options . add ( CookieOption . domain ( this . domain ) ) ; <nl> + } <nl> + <nl> return options . toArray ( new CookieOption [ options . size ( ) ] ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index 289ba4c . . bda1f1e 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 34 , 4 + 34 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - domain " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> index 1cadddb . . 722005b 100644 <nl> - - - a / moco - runner / src / test / resources / cookie . json <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 21 , 5 + 21 , 18 @ @ <nl> } <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie - with - domain " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " domain " : " github . com " <nl> + } <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> index 4679452 . . a0f2043 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java <nl> @ @ - 1 , 8 + 1 , 13 @ @ <nl> package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . CookieOption ; <nl> import com . github . dreamhead . moco . parser . deserializer . CookieContainerDeserializer ; <nl> <nl> + import java . util . List ; <nl> + <nl> + import static com . google . common . collect . Lists . newArrayList ; <nl> + <nl> @ JsonDeserialize ( using = CookieContainerDeserializer . class ) <nl> public class CookieContainer implements Container { <nl> private String value ; <nl> @ @ - 45 , 4 + 50 , 12 @ @ public class CookieContainer implements Container { <nl> public String getTemplate ( ) { <nl> return template ; <nl> } <nl> + <nl> + public CookieOption [ ] getOptions ( ) { <nl> + List < CookieOption > options = newArrayList ( ) ; <nl> + if ( this . path ! = null ) { <nl> + options . add ( CookieOption . path ( this . path ) ) ; <nl> + } <nl> + return options . toArray ( new CookieOption [ options . size ( ) ] ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 9606c2a . . 3fa4d18 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 196 , 7 + 196 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> final CookieContainer cookieContainer ) { <nl> try { <nl> Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> index e3f59d8 . . 289ba4c 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java <nl> @ @ - 22 , 4 + 22 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ path ( ) throws IOException { <nl> + runWithConfiguration ( " cookie . json " ) ; <nl> + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - path " ) ) ; <nl> + <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; <nl> + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; <nl> + assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json <nl> index b500b0b . . 1cadddb 100644 <nl> - - - a / moco - runner / src / test / resources / cookie . json <nl> + + + b / moco - runner / src / test / resources / cookie . json <nl> @ @ - 8 , 5 + 8 , 18 @ @ <nl> " login " : " true " <nl> } <nl> } <nl> + } , <nl> + { <nl> + " request " : { <nl> + " uri " : " / cookie - with - path " <nl> + } , <nl> + " response " : { <nl> + " cookies " : { <nl> + " login " : { <nl> + " value " : " true " , <nl> + " path " : " / " <nl> + } <nl> + } <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 index a0f2043 . . e55753a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 @ @ - 56 , 6 + 56 , 11 @ @ public class CookieContainer implements Container { 
 if ( this . path ! = null ) { 
 options . add ( CookieOption . path ( this . path ) ) ; 
 } 
 + 
 + if ( this . domain ! = null ) { 
 + options . add ( CookieOption . domain ( this . domain ) ) ; 
 + } 
 + 
 return options . toArray ( new CookieOption [ options . size ( ) ] ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 index 289ba4c . . bda1f1e 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 @ @ - 34 , 4 + 34 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws IOException { 
 + runWithConfiguration ( " cookie . json " ) ; 
 + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - domain " ) ) ; 
 + 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 + assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json 
 index 1cadddb . . 722005b 100644 
 - - - a / moco - runner / src / test / resources / cookie . json 
 + + + b / moco - runner / src / test / resources / cookie . json 
 @ @ - 21 , 5 + 21 , 18 @ @ 
 } 
 } 
 } 
 + } , 
 + { 
 + " request " : { 
 + " uri " : " / cookie - with - domain " 
 + } , 
 + " response " : { 
 + " cookies " : { 
 + " login " : { 
 + " value " : " true " , 
 + " domain " : " github . com " 
 + } 
 + } 
 + } 
 } 
 ] 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 index 4679452 . . a0f2043 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CookieContainer . java 
 @ @ - 1 , 8 + 1 , 13 @ @ 
 package com . github . dreamhead . moco . parser . model ; 
 
 import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 + import com . github . dreamhead . moco . CookieOption ; 
 import com . github . dreamhead . moco . parser . deserializer . CookieContainerDeserializer ; 
 
 + import java . util . List ; 
 + 
 + import static com . google . common . collect . Lists . newArrayList ; 
 + 
 @ JsonDeserialize ( using = CookieContainerDeserializer . class ) 
 public class CookieContainer implements Container { 
 private String value ; 
 @ @ - 45 , 4 + 50 , 12 @ @ public class CookieContainer implements Container { 
 public String getTemplate ( ) { 
 return template ; 
 } 
 + 
 + public CookieOption [ ] getOptions ( ) { 
 + List < CookieOption > options = newArrayList ( ) ; 
 + if ( this . path ! = null ) { 
 + options . add ( CookieOption . path ( this . path ) ) ; 
 + } 
 + return options . toArray ( new CookieOption [ options . size ( ) ] ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 9606c2a . . 3fa4d18 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 196 , 7 + 196 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 final CookieContainer cookieContainer ) { 
 try { 
 Method method = Moco . class . getMethod ( target , String . class , Resource . class , CookieOption [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , new CookieOption [ 0 ] ) ; 
 + return ( ResponseHandler ) method . invoke ( null , key , getResource ( cookieContainer ) , cookieContainer . getOptions ( ) ) ; 
 } catch ( Exception e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 index e3f59d8 . . 289ba4c 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoCookieStandaloneTest . java 
 @ @ - 22 , 4 + 22 , 16 @ @ public class MocoCookieStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 } 
 + 
 + @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ path ( ) throws IOException { 
 + runWithConfiguration ( " cookie . json " ) ; 
 + org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( " / cookie - with - path " ) ) ; 
 + 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . name ( ) , is ( " login " ) ) ; 
 + assertThat ( decodeCookie . value ( ) , is ( " true " ) ) ; 
 + assertThat ( decodeCookie . path ( ) , is ( " / " ) ) ; 
 + } 
 } 
 diff - - git a / moco - runner / src / test / resources / cookie . json b / moco - runner / src / test / resources / cookie . json 
 index b500b0b . . 1cadddb 100644 
 - - - a / moco - runner / src / test / resources / cookie . json 
 + + + b / moco - runner / src / test / resources / cookie . json 
 @ @ - 8 , 5 + 8 , 18 @ @ 
 " login " : " true " 
 } 
 } 
 + } , 
 + { 
 + " request " : { 
 + " uri " : " / cookie - with - path " 
 + } , 
 + " response " : { 
 + " cookies " : { 
 + " login " : { 
 + " value " : " true " , 
 + " path " : " / " 
 + } 
 + } 
 + } 
 } 
 ] 
 \ No newline at end of file
