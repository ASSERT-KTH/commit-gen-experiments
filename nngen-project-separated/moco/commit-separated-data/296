BLEU SCORE: 0.06567274736060397

TEST MSG: replaced if with filter in watcher service
GENERATED MSG: stopped watcher

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 2261c99 . . 4567f2f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . util . Files ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> import org . slf4j . Logger ; <nl> @ @ - 24 , 6 + 25 , 7 @ @ import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import static com . github . dreamhead . moco . util . Idles . idle ; <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . Maps . newHashMap ; <nl> import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> @ @ - 76 , 17 + 78 , 13 @ @ public class WatcherService { <nl> WatchKey key = service . take ( ) ; <nl> Collection < Path > paths = keys . get ( key ) ; <nl> <nl> - for ( WatchEvent < ? > event : key . pollEvents ( ) ) { <nl> - if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { <nl> - final Path context = ( Path ) event . context ( ) ; <nl> - for ( Path path : paths ) { <nl> - if ( path . endsWith ( context ) ) { <nl> - for ( Function < File , Void > listener : this . listeners . get ( path ) ) { <nl> - listener . apply ( path . toFile ( ) ) ; <nl> - } <nl> - break ; <nl> - } <nl> + for ( WatchEvent < ? > event : from ( key . pollEvents ( ) ) . filter ( isModifyEvent ( ) ) ) { <nl> + final Path context = ( Path ) event . context ( ) ; <nl> + for ( Path path : from ( paths ) . filter ( isForPath ( context ) ) ) { <nl> + for ( Function < File , Void > listener : this . listeners . get ( path ) ) { <nl> + listener . apply ( path . toFile ( ) ) ; <nl> } <nl> + break ; <nl> } <nl> } <nl> key . reset ( ) ; <nl> @ @ - 96 , 6 + 94 , 24 @ @ public class WatcherService { <nl> } <nl> } <nl> <nl> + private Predicate < Path > isForPath ( final Path context ) { <nl> + return new Predicate < Path > ( ) { <nl> + @ Override <nl> + public boolean apply ( final Path path ) { <nl> + return path . endsWith ( context ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Predicate < WatchEvent < ? > > isModifyEvent ( ) { <nl> + return new Predicate < WatchEvent < ? > > ( ) { <nl> + @ Override <nl> + public boolean apply ( final WatchEvent < ? > event ) { <nl> + return event . kind ( ) . equals ( ENTRY _ MODIFY ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> public synchronized void stop ( ) { <nl> if ( this . running ) { <nl> try {
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> index 0cc94ee . . 9a644fc 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> @ @ - 28 , 5 + 28 , 6 @ @ public class Java7Watcher implements Watcher { <nl> <nl> @ Override <nl> public void stop ( ) { <nl> + service . stop ( file ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> index dd803de . . 403556e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> @ @ - 11 , 20 + 11 , 18 @ @ import static com . google . common . collect . FluentIterable . from ; <nl> public class Java7WatcherFactory implements FileWatcherFactory { <nl> private WatcherService service = new WatcherService ( ) ; <nl> <nl> - public Java7WatcherFactory ( ) { <nl> - try { <nl> - this . service . start ( ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> if ( files . length = = 0 ) { <nl> throw new IllegalArgumentException ( " No file is specified " ) ; <nl> } <nl> <nl> + try { <nl> + this . service . start ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + <nl> return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> @ Override <nl> public Watcher apply ( final File file ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 29d7177 . . 467f868 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> + import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . util . Files ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . HashMultimap ; <nl> @ @ - 16 , 9 + 17 , 13 @ @ import java . nio . file . WatchEvent ; <nl> import java . nio . file . WatchKey ; <nl> import java . nio . file . WatchService ; <nl> import java . util . Collection ; <nl> + import java . util . Map ; <nl> + import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . Future ; <nl> <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; <nl> import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> <nl> @ @ - 30 , 24 + 35 , 40 @ @ public class WatcherService { <nl> private boolean running ; <nl> private Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; <nl> private Multimap < Path , Function < File , Void > > listeners = HashMultimap . create ( ) ; <nl> + private Future < ? > result ; <nl> <nl> public synchronized void start ( ) throws IOException { <nl> if ( running ) { <nl> - throw new IllegalStateException ( ) ; <nl> + return ; <nl> } <nl> <nl> + doStart ( ) ; <nl> + } <nl> + <nl> + private void doStart ( ) throws IOException { <nl> + System . out . println ( " Start a service " ) ; <nl> this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; <nl> this . running = true ; <nl> - executor . execute ( new Runnable ( ) { <nl> + result = executor . submit ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> while ( running ) { <nl> loop ( ) ; <nl> } <nl> + <nl> + doStop ( ) ; <nl> } <nl> } ) ; <nl> } <nl> <nl> + private void doStop ( ) { <nl> + this . listeners . clear ( ) ; <nl> + this . keys . clear ( ) ; <nl> + directoryToFiles . clear ( ) ; <nl> + directoryToKey . clear ( ) ; <nl> + <nl> + } <nl> + <nl> private void loop ( ) { <nl> try { <nl> WatchKey key = service . take ( ) ; <nl> @ @ - 67 , 6 + 88 , 7 @ @ public class WatcherService { <nl> } <nl> key . reset ( ) ; <nl> } catch ( ClosedWatchServiceException ignored ) { <nl> + System . out . println ( ignored ) ; <nl> } catch ( InterruptedException e ) { <nl> logger . error ( " Error happens " , e ) ; <nl> } <nl> @ @ - 74 , 15 + 96 , 49 @ @ public class WatcherService { <nl> <nl> public synchronized void stop ( ) { <nl> if ( this . running ) { <nl> - this . running = false ; <nl> + try { <nl> + this . running = false ; <nl> + service . close ( ) ; <nl> + this . result . get ( ) ; <nl> + } catch ( Exception e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> } <nl> } <nl> <nl> + private Multimap < Path , Path > directoryToFiles = HashMultimap . create ( ) ; <nl> + private Map < Path , WatchKey > directoryToKey = newHashMap ( ) ; <nl> + <nl> public void register ( final File file , final Function < File , Void > listener ) throws IOException { <nl> + System . out . println ( " Register " + file ) ; <nl> Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; <nl> Path path = file . toPath ( ) ; <nl> keys . put ( key , path ) ; <nl> listeners . put ( path , listener ) ; <nl> + directoryToFiles . put ( directory , path ) ; <nl> + directoryToKey . put ( directory , key ) ; <nl> + } <nl> + <nl> + public void stop ( final File file ) { <nl> + Path directory = Files . directoryOf ( file ) . toPath ( ) ; <nl> + Path path = file . toPath ( ) ; <nl> + if ( ! directoryToFiles . containsEntry ( directory , path ) ) { <nl> + return ; <nl> + } <nl> + <nl> + directoryToFiles . remove ( directory , path ) ; <nl> + <nl> + if ( ! directoryToFiles . containsKey ( directory ) ) { <nl> + WatchKey key = directoryToKey . remove ( directory ) ; <nl> + if ( key ! = null ) { <nl> + key . cancel ( ) ; <nl> + System . out . println ( " Stopping " + directory ) ; <nl> + } <nl> + } <nl> + <nl> + if ( directoryToFiles . isEmpty ( ) ) { <nl> + this . stop ( ) ; <nl> + } <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 index 2261c99 . . 4567f2f 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . runner . watcher ; 
 import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . util . Files ; 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Predicate ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Multimap ; 
 import org . slf4j . Logger ; 
 @ @ - 24 , 6 + 25 , 7 @ @ import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 
 import static com . github . dreamhead . moco . util . Idles . idle ; 
 + import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . Maps . newHashMap ; 
 import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; 
 import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; 
 @ @ - 76 , 17 + 78 , 13 @ @ public class WatcherService { 
 WatchKey key = service . take ( ) ; 
 Collection < Path > paths = keys . get ( key ) ; 
 
 - for ( WatchEvent < ? > event : key . pollEvents ( ) ) { 
 - if ( event . kind ( ) . equals ( ENTRY _ MODIFY ) ) { 
 - final Path context = ( Path ) event . context ( ) ; 
 - for ( Path path : paths ) { 
 - if ( path . endsWith ( context ) ) { 
 - for ( Function < File , Void > listener : this . listeners . get ( path ) ) { 
 - listener . apply ( path . toFile ( ) ) ; 
 - } 
 - break ; 
 - } 
 + for ( WatchEvent < ? > event : from ( key . pollEvents ( ) ) . filter ( isModifyEvent ( ) ) ) { 
 + final Path context = ( Path ) event . context ( ) ; 
 + for ( Path path : from ( paths ) . filter ( isForPath ( context ) ) ) { 
 + for ( Function < File , Void > listener : this . listeners . get ( path ) ) { 
 + listener . apply ( path . toFile ( ) ) ; 
 } 
 + break ; 
 } 
 } 
 key . reset ( ) ; 
 @ @ - 96 , 6 + 94 , 24 @ @ public class WatcherService { 
 } 
 } 
 
 + private Predicate < Path > isForPath ( final Path context ) { 
 + return new Predicate < Path > ( ) { 
 + @ Override 
 + public boolean apply ( final Path path ) { 
 + return path . endsWith ( context ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private Predicate < WatchEvent < ? > > isModifyEvent ( ) { 
 + return new Predicate < WatchEvent < ? > > ( ) { 
 + @ Override 
 + public boolean apply ( final WatchEvent < ? > event ) { 
 + return event . kind ( ) . equals ( ENTRY _ MODIFY ) ; 
 + } 
 + } ; 
 + } 
 + 
 public synchronized void stop ( ) { 
 if ( this . running ) { 
 try {

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 index 0cc94ee . . 9a644fc 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 @ @ - 28 , 5 + 28 , 6 @ @ public class Java7Watcher implements Watcher { 
 
 @ Override 
 public void stop ( ) { 
 + service . stop ( file ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 index dd803de . . 403556e 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 @ @ - 11 , 20 + 11 , 18 @ @ import static com . google . common . collect . FluentIterable . from ; 
 public class Java7WatcherFactory implements FileWatcherFactory { 
 private WatcherService service = new WatcherService ( ) ; 
 
 - public Java7WatcherFactory ( ) { 
 - try { 
 - this . service . start ( ) ; 
 - } catch ( IOException e ) { 
 - throw new MocoException ( e ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { 
 if ( files . length = = 0 ) { 
 throw new IllegalArgumentException ( " No file is specified " ) ; 
 } 
 
 + try { 
 + this . service . start ( ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + 
 return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 @ Override 
 public Watcher apply ( final File file ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 index 29d7177 . . 467f868 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . runner . watcher ; 
 
 + import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . util . Files ; 
 import com . google . common . base . Function ; 
 import com . google . common . collect . HashMultimap ; 
 @ @ - 16 , 9 + 17 , 13 @ @ import java . nio . file . WatchEvent ; 
 import java . nio . file . WatchKey ; 
 import java . nio . file . WatchService ; 
 import java . util . Collection ; 
 + import java . util . Map ; 
 + import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 + import java . util . concurrent . Future ; 
 
 + import static com . google . common . collect . Maps . newHashMap ; 
 import static com . sun . nio . file . SensitivityWatchEventModifier . HIGH ; 
 import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; 
 
 @ @ - 30 , 24 + 35 , 40 @ @ public class WatcherService { 
 private boolean running ; 
 private Multimap < WatchKey , Path > keys = HashMultimap . create ( ) ; 
 private Multimap < Path , Function < File , Void > > listeners = HashMultimap . create ( ) ; 
 + private Future < ? > result ; 
 
 public synchronized void start ( ) throws IOException { 
 if ( running ) { 
 - throw new IllegalStateException ( ) ; 
 + return ; 
 } 
 
 + doStart ( ) ; 
 + } 
 + 
 + private void doStart ( ) throws IOException { 
 + System . out . println ( " Start a service " ) ; 
 this . service = FileSystems . getDefault ( ) . newWatchService ( ) ; 
 this . running = true ; 
 - executor . execute ( new Runnable ( ) { 
 + result = executor . submit ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 while ( running ) { 
 loop ( ) ; 
 } 
 + 
 + doStop ( ) ; 
 } 
 } ) ; 
 } 
 
 + private void doStop ( ) { 
 + this . listeners . clear ( ) ; 
 + this . keys . clear ( ) ; 
 + directoryToFiles . clear ( ) ; 
 + directoryToKey . clear ( ) ; 
 + 
 + } 
 + 
 private void loop ( ) { 
 try { 
 WatchKey key = service . take ( ) ; 
 @ @ - 67 , 6 + 88 , 7 @ @ public class WatcherService { 
 } 
 key . reset ( ) ; 
 } catch ( ClosedWatchServiceException ignored ) { 
 + System . out . println ( ignored ) ; 
 } catch ( InterruptedException e ) { 
 logger . error ( " Error happens " , e ) ; 
 } 
 @ @ - 74 , 15 + 96 , 49 @ @ public class WatcherService { 
 
 public synchronized void stop ( ) { 
 if ( this . running ) { 
 - this . running = false ; 
 + try { 
 + this . running = false ; 
 + service . close ( ) ; 
 + this . result . get ( ) ; 
 + } catch ( Exception e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 } 
 } 
 
 + private Multimap < Path , Path > directoryToFiles = HashMultimap . create ( ) ; 
 + private Map < Path , WatchKey > directoryToKey = newHashMap ( ) ; 
 + 
 public void register ( final File file , final Function < File , Void > listener ) throws IOException { 
 + System . out . println ( " Register " + file ) ; 
 Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 WatchKey key = directory . register ( service , new WatchEvent . Kind [ ] { ENTRY _ MODIFY } , HIGH ) ; 
 Path path = file . toPath ( ) ; 
 keys . put ( key , path ) ; 
 listeners . put ( path , listener ) ; 
 + directoryToFiles . put ( directory , path ) ; 
 + directoryToKey . put ( directory , key ) ; 
 + } 
 + 
 + public void stop ( final File file ) { 
 + Path directory = Files . directoryOf ( file ) . toPath ( ) ; 
 + Path path = file . toPath ( ) ; 
 + if ( ! directoryToFiles . containsEntry ( directory , path ) ) { 
 + return ; 
 + } 
 + 
 + directoryToFiles . remove ( directory , path ) ; 
 + 
 + if ( ! directoryToFiles . containsKey ( directory ) ) { 
 + WatchKey key = directoryToKey . remove ( directory ) ; 
 + if ( key ! = null ) { 
 + key . cancel ( ) ; 
 + System . out . println ( " Stopping " + directory ) ; 
 + } 
 + } 
 + 
 + if ( directoryToFiles . isEmpty ( ) ) { 
 + this . stop ( ) ; 
 + } 
 } 
 - } 
 + } 
 \ No newline at end of file
