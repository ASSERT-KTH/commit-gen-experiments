BLEU SCORE: 0.06567274736060397

TEST MSG: removed inheritance from text and file container deserializer
GENERATED MSG: cleaned up text container code

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> deleted file mode 100644 <nl> index 3851a2b . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 91 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . deserializer ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> - import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Iterators ; <nl> - import com . google . common . collect . Maps ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Iterator ; <nl> - import java . util . Map ; <nl> - <nl> - import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> - import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> - import static com . google . common . collect . ImmutableMap . copyOf ; <nl> - import static com . google . common . collect . Maps . transformEntries ; <nl> - <nl> - public abstract class AbstractTextContainerDeserializer < T extends TextContainer > extends JsonDeserializer < T > { <nl> - private final ImmutableMap < String , String > names = ImmutableMap . < String , String > builder ( ) <nl> - . put ( " json _ path " , " jsonPaths " ) <nl> - . put ( " xpath " , " xpaths " ) <nl> - . put ( " header " , " headers " ) <nl> - . put ( " cookie " , " cookies " ) <nl> - . put ( " form " , " forms " ) <nl> - . build ( ) ; <nl> - <nl> - protected TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> - TextContainer . Builder builder = builder ( ) ; <nl> - String operation = jp . getText ( ) . trim ( ) ; <nl> - builder . withOperation ( operation ) ; <nl> - JsonToken token = jp . nextToken ( ) ; <nl> - if ( token = = JsonToken . VALUE _ STRING ) { <nl> - String text = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - return builder . withText ( text ) . build ( ) ; <nl> - } <nl> - <nl> - if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> - return template ( jp , builder ) ; <nl> - } <nl> - } <nl> - <nl> - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> - } <nl> - <nl> - private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> - Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> - Template template = Iterators . get ( iterator , 0 ) ; <nl> - jp . nextToken ( ) ; <nl> - return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; <nl> - } <nl> - <nl> - private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { <nl> - return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; <nl> - } <nl> - <nl> - private Maps . EntryTransformer < String , TextContainer , TextContainer > toLocalContainer ( ) { <nl> - return new Maps . EntryTransformer < String , TextContainer , TextContainer > ( ) { <nl> - @ Override <nl> - public TextContainer transformEntry ( final String key , final TextContainer container ) { <nl> - if ( container . isRawText ( ) ) { <nl> - return container ; <nl> - } <nl> - <nl> - return toLocal ( container ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private TextContainer toLocal ( final TextContainer container ) { <nl> - String name = names . get ( container . getOperation ( ) ) ; <nl> - if ( name = = null ) { <nl> - return container ; <nl> - } <nl> - return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> - } <nl> - <nl> - protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> - return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> - } <nl> - <nl> - private static class Template { <nl> - public String with ; <nl> - public Map < String , TextContainer > vars ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> index a0bd521 . . 7111d3b 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . parser . deserializer ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . parser . model . FileContainer ; <nl> import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> @ @ - 13 , 12 + 14 , 14 @ @ import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContaine <nl> import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; <nl> import static com . google . common . collect . Iterators . get ; <nl> <nl> - public class FileContainerDeserializer extends AbstractTextContainerDeserializer < FileContainer > { <nl> + public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { <nl> + private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> + <nl> @ Override <nl> public FileContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return asFileContainer ( text ( jp ) ) ; <nl> + return asFileContainer ( helper . text ( jp ) ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> @ @ - 29 , 7 + 32 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer <nl> return toFileContainer ( jp ) ; <nl> } <nl> <nl> - return asFileContainer ( textContainer ( jp , ctxt ) ) ; <nl> + return asFileContainer ( helper . textContainer ( jp , ctxt ) ) ; <nl> } <nl> <nl> return ( FileContainer ) ctxt . handleUnexpectedToken ( FileContainer . class , jp ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> index d422723 . . 161750e 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 3 , 21 + 3 , 24 @ @ package com . github . dreamhead . moco . parser . deserializer ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> import java . io . IOException ; <nl> <nl> - public class TextContainerDeserializer extends AbstractTextContainerDeserializer < TextContainer > { <nl> + public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> + private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; <nl> + <nl> @ Override <nl> public TextContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return text ( jp ) ; <nl> + return helper . text ( jp ) ; <nl> } <nl> <nl> if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> jp . nextToken ( ) ; <nl> - return textContainer ( jp , ctxt ) ; <nl> + return helper . textContainer ( jp , ctxt ) ; <nl> } <nl> <nl> return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> new file mode 100644 <nl> index 0000000 . . dd139ed <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java <nl> @ @ - 0 , 0 + 1 , 91 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterators ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; <nl> + import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; <nl> + import static com . google . common . collect . ImmutableMap . copyOf ; <nl> + import static com . google . common . collect . Maps . transformEntries ; <nl> + <nl> + public class TextContainerDeserializerHelper { <nl> + private final ImmutableMap < String , String > names = ImmutableMap . < String , String > builder ( ) <nl> + . put ( " json _ path " , " jsonPaths " ) <nl> + . put ( " xpath " , " xpaths " ) <nl> + . put ( " header " , " headers " ) <nl> + . put ( " cookie " , " cookies " ) <nl> + . put ( " form " , " forms " ) <nl> + . build ( ) ; <nl> + <nl> + public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> + TextContainer . Builder builder = builder ( ) ; <nl> + String operation = jp . getText ( ) . trim ( ) ; <nl> + builder . withOperation ( operation ) ; <nl> + JsonToken token = jp . nextToken ( ) ; <nl> + if ( token = = JsonToken . VALUE _ STRING ) { <nl> + String text = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + return builder . withText ( text ) . build ( ) ; <nl> + } <nl> + <nl> + if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + return template ( jp , builder ) ; <nl> + } <nl> + } <nl> + <nl> + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + } <nl> + <nl> + private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { <nl> + Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; <nl> + Template template = Iterators . get ( iterator , 0 ) ; <nl> + jp . nextToken ( ) ; <nl> + return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; <nl> + } <nl> + <nl> + private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { <nl> + return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; <nl> + } <nl> + <nl> + private Maps . EntryTransformer < String , TextContainer , TextContainer > toLocalContainer ( ) { <nl> + return new Maps . EntryTransformer < String , TextContainer , TextContainer > ( ) { <nl> + @ Override <nl> + public TextContainer transformEntry ( final String key , final TextContainer container ) { <nl> + if ( container . isRawText ( ) ) { <nl> + return container ; <nl> + } <nl> + <nl> + return toLocal ( container ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private TextContainer toLocal ( final TextContainer container ) { <nl> + String name = names . get ( container . getOperation ( ) ) ; <nl> + if ( name = = null ) { <nl> + return container ; <nl> + } <nl> + return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; <nl> + } <nl> + <nl> + protected TextContainer text ( final JsonParser jp ) throws IOException { <nl> + return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + } <nl> + <nl> + private static class Template { <nl> + public String with ; <nl> + public Map < String , TextContainer > vars ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> index 4dfad59 . . 9d697ff 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java <nl> @ @ - 6 , 6 + 6 , 8 @ @ import com . fasterxml . jackson . databind . module . SimpleModule ; <nl> import com . github . dreamhead . moco . HttpServer ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> + import com . github . dreamhead . moco . parser . deserializer . ProxyContainerDeserializer ; <nl> + import com . github . dreamhead . moco . parser . deserializer . TextContainerDeserializer ; <nl> import com . github . dreamhead . moco . parser . model . * ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableList ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> new file mode 100644 <nl> index 0000000 . . f5e441f <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . ProxyContainer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> + <nl> + public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> + @ Override <nl> + public ProxyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> + return new ProxyContainer ( jp . getText ( ) . trim ( ) , null , null , null ) ; <nl> + } else if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> + JsonToken jsonToken = jp . nextToken ( ) ; <nl> + if ( jsonToken = = JsonToken . FIELD _ NAME ) { <nl> + return createFailoverProxy ( jp ) ; <nl> + } <nl> + } <nl> + <nl> + throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> + } <nl> + <nl> + private ProxyContainer createFailoverProxy ( JsonParser jp ) throws IOException { <nl> + Map < String , String > fields = newHashMap ( ) ; <nl> + while ( fetchField ( fields , jp ) ) { } <nl> + return ProxyContainer . builder ( ) <nl> + . withUrl ( fields . get ( " url " ) ) <nl> + . withFailover ( fields . get ( " failover " ) ) <nl> + . withFrom ( fields . get ( " from " ) ) <nl> + . withTo ( fields . get ( " to " ) ) <nl> + . build ( ) ; <nl> + } <nl> + <nl> + private boolean fetchField ( Map < String , String > fields , JsonParser jp ) throws IOException { <nl> + String fieldName = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + String fieldValue = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; <nl> + <nl> + return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> new file mode 100644 <nl> index 0000000 . . 22d7775 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java <nl> @ @ - 0 , 0 + 1 , 95 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . google . common . collect . ImmutableMap . copyOf ; <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> + <nl> + public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> + @ Override <nl> + public TextContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> + return text ( jp ) ; <nl> + } else if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> + jp . nextToken ( ) ; <nl> + return textContainer ( jp , ctxt ) ; <nl> + } <nl> + <nl> + throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> + } <nl> + <nl> + private TextContainer textContainer ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + if ( currentToken = = JsonToken . FIELD _ NAME ) { <nl> + TextContainer . Builder builder = TextContainer . builder ( ) ; <nl> + String operation = jp . getText ( ) . trim ( ) ; <nl> + builder . withOperation ( operation ) ; <nl> + JsonToken token = jp . nextToken ( ) ; <nl> + if ( token = = JsonToken . VALUE _ STRING ) { <nl> + String text = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + return builder . withText ( text ) . build ( ) ; <nl> + } <nl> + <nl> + if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { <nl> + jp . nextToken ( ) ; <nl> + return template ( jp , ctxt , builder ) ; <nl> + } <nl> + } <nl> + <nl> + throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; <nl> + } <nl> + <nl> + private TextContainer template ( JsonParser jp , DeserializationContext ctxt , TextContainer . Builder builder ) throws IOException { <nl> + String with = jp . getText ( ) . trim ( ) ; <nl> + if ( " with " . equals ( with ) ) { <nl> + jp . nextToken ( ) ; <nl> + builder . withText ( jp . getText ( ) . trim ( ) ) ; <nl> + <nl> + jp . nextToken ( ) ; <nl> + String vars = jp . getText ( ) . trim ( ) ; <nl> + <nl> + if ( " vars " . equals ( vars ) ) { <nl> + JsonToken startTemplateVars = jp . nextToken ( ) ; <nl> + if ( startTemplateVars = = JsonToken . START _ OBJECT ) { <nl> + jp . nextToken ( ) ; <nl> + ImmutableMap < String , Object > fields = getProps ( jp ) ; <nl> + jp . nextToken ( ) ; <nl> + jp . nextToken ( ) ; <nl> + return builder . withProps ( copyOf ( fields ) ) . build ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; <nl> + } <nl> + <nl> + private TextContainer text ( JsonParser jp ) throws IOException { <nl> + return TextContainer . builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; <nl> + } <nl> + <nl> + private ImmutableMap < String , Object > getProps ( JsonParser jp ) throws IOException { <nl> + Map < String , Object > fields = newHashMap ( ) ; <nl> + while ( fetchField ( fields , jp ) ) { } <nl> + return copyOf ( fields ) ; <nl> + } <nl> + <nl> + private boolean fetchField ( Map < String , Object > fields , JsonParser jp ) throws IOException { <nl> + String fieldName = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + String fieldValue = jp . getText ( ) . trim ( ) ; <nl> + jp . nextToken ( ) ; <nl> + fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; <nl> + <nl> + return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainerDeserializer . java <nl> deleted file mode 100644 <nl> index a2a7438 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 49 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . model ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Map ; <nl> - <nl> - import static com . google . common . collect . Maps . newHashMap ; <nl> - <nl> - public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { <nl> - @ Override <nl> - public ProxyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return new ProxyContainer ( jp . getText ( ) . trim ( ) , null , null , null ) ; <nl> - } else if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> - JsonToken jsonToken = jp . nextToken ( ) ; <nl> - if ( jsonToken = = JsonToken . FIELD _ NAME ) { <nl> - return createFailoverProxy ( jp ) ; <nl> - } <nl> - } <nl> - <nl> - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> - } <nl> - <nl> - private ProxyContainer createFailoverProxy ( JsonParser jp ) throws IOException { <nl> - Map < String , String > fields = newHashMap ( ) ; <nl> - while ( fetchField ( fields , jp ) ) { } <nl> - return ProxyContainer . builder ( ) <nl> - . withUrl ( fields . get ( " url " ) ) <nl> - . withFailover ( fields . get ( " failover " ) ) <nl> - . withFrom ( fields . get ( " from " ) ) <nl> - . withTo ( fields . get ( " to " ) ) <nl> - . build ( ) ; <nl> - } <nl> - <nl> - private boolean fetchField ( Map < String , String > fields , JsonParser jp ) throws IOException { <nl> - String fieldName = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - String fieldValue = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; <nl> - <nl> - return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 7a17729 . . 3445d70 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 165 , 9 + 165 , 9 @ @ public class ResponseSetting extends Dynamics { <nl> return version ( template ( container . getText ( ) ) ) ; <nl> } <nl> <nl> - if ( container . hasVars ( ) ) { <nl> - ImmutableMap < String , Object > vars = container . getVars ( ) ; <nl> - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , vars ) ; <nl> + if ( container . hasProperties ( ) ) { <nl> + return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , <nl> + container . getProps ( ) ) ; <nl> } <nl> <nl> return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> index 510eb79 . . 7e7bce6 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java <nl> @ @ - 3 , 23 + 3 , 12 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . google . common . base . Objects ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> - import static com . google . common . collect . ImmutableMap . of ; <nl> - <nl> public class TextContainer { <nl> - private final String text ; <nl> - private final String operation ; <nl> - private final ImmutableMap < String , Object > vars ; <nl> - <nl> - public TextContainer ( String text , String operation ) { <nl> - this . text = text ; <nl> - this . operation = operation ; <nl> - this . vars = of ( ) ; <nl> - } <nl> + private String text ; <nl> + private String operation ; <nl> + private ImmutableMap < String , Object > props ; <nl> <nl> - public TextContainer ( String text , String operation , ImmutableMap < String , Object > vars ) { <nl> - this . text = text ; <nl> - this . operation = operation ; <nl> - this . vars = vars ; <nl> + public TextContainer ( ) { <nl> } <nl> <nl> public boolean isRawText ( ) { <nl> @ @ - 34 , 12 + 23 , 12 @ @ public class TextContainer { <nl> return operation ; <nl> } <nl> <nl> - public boolean hasVars ( ) { <nl> - return ! this . vars . isEmpty ( ) ; <nl> + public boolean hasProperties ( ) { <nl> + return ! this . props . isEmpty ( ) ; <nl> } <nl> <nl> - public ImmutableMap < String , Object > getVars ( ) { <nl> - return vars ; <nl> + public ImmutableMap < String , Object > getProps ( ) { <nl> + return props ; <nl> } <nl> <nl> @ Override <nl> @ @ - 48 , 6 + 37 , 41 @ @ public class TextContainer { <nl> . omitNullValues ( ) <nl> . add ( " text " , text ) <nl> . add ( " operation " , operation ) <nl> + . add ( " properties " , props ) <nl> . toString ( ) ; <nl> } <nl> + <nl> + public static Builder builder ( ) { <nl> + return new Builder ( ) ; <nl> + } <nl> + <nl> + public static class Builder { <nl> + private String text ; <nl> + private String operation ; <nl> + private ImmutableMap < String , Object > props ; <nl> + <nl> + public Builder withText ( String text ) { <nl> + this . text = text ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withOperation ( String operation ) { <nl> + this . operation = operation ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder withProps ( ImmutableMap < String , Object > props ) { <nl> + this . props = props ; <nl> + return this ; <nl> + } <nl> + <nl> + public TextContainer build ( ) { <nl> + TextContainer container = new TextContainer ( ) ; <nl> + container . text = text ; <nl> + container . operation = operation ; <nl> + container . props = ( props ! = null ) ? props : ImmutableMap . < String , Object > of ( ) ; <nl> + return container ; <nl> + } <nl> + <nl> + } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainerDeserializer . java <nl> deleted file mode 100644 <nl> index d2eb29c . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 68 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . model ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Map ; <nl> - <nl> - import static com . google . common . collect . ImmutableMap . copyOf ; <nl> - import static com . google . common . collect . Maps . newHashMap ; <nl> - <nl> - public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { <nl> - @ Override <nl> - public TextContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - if ( currentToken = = JsonToken . VALUE _ STRING ) { <nl> - return new TextContainer ( jp . getText ( ) . trim ( ) , null ) ; <nl> - } else if ( currentToken = = JsonToken . START _ OBJECT ) { <nl> - JsonToken jsonToken = jp . nextToken ( ) ; <nl> - if ( jsonToken = = JsonToken . FIELD _ NAME ) { <nl> - String operation = jp . getText ( ) . trim ( ) ; <nl> - JsonToken token = jp . nextToken ( ) ; <nl> - if ( token = = JsonToken . VALUE _ STRING ) { <nl> - String text = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - return new TextContainer ( text , operation ) ; <nl> - } <nl> - <nl> - if ( token = = JsonToken . START _ OBJECT ) { <nl> - jp . nextToken ( ) ; <nl> - String with = jp . getText ( ) . trim ( ) ; <nl> - if ( " with " . equals ( with ) ) { <nl> - jp . nextToken ( ) ; <nl> - String template = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - String vars = jp . getText ( ) . trim ( ) ; <nl> - if ( " vars " . equals ( vars ) ) { <nl> - JsonToken startTemplateVars = jp . nextToken ( ) ; <nl> - if ( startTemplateVars = = JsonToken . START _ OBJECT ) { <nl> - <nl> - jp . nextToken ( ) ; <nl> - Map < String , Object > fields = newHashMap ( ) ; <nl> - while ( fetchField ( fields , jp ) ) { } <nl> - jp . nextToken ( ) ; <nl> - jp . nextToken ( ) ; <nl> - return new TextContainer ( template , operation , copyOf ( fields ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; <nl> - } <nl> - <nl> - private boolean fetchField ( Map < String , Object > fields , JsonParser jp ) throws IOException { <nl> - String fieldName = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - String fieldValue = jp . getText ( ) . trim ( ) ; <nl> - jp . nextToken ( ) ; <nl> - fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; <nl> - <nl> - return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 deleted file mode 100644 
 index 3851a2b . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / AbstractTextContainerDeserializer . java 
 + + + / dev / null 
 @ @ - 1 , 91 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . parser . deserializer ; 
 - 
 - import com . fasterxml . jackson . core . JsonParser ; 
 - import com . fasterxml . jackson . core . JsonToken ; 
 - import com . fasterxml . jackson . databind . DeserializationContext ; 
 - import com . fasterxml . jackson . databind . JsonDeserializer ; 
 - import com . github . dreamhead . moco . parser . model . TextContainer ; 
 - import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . Iterators ; 
 - import com . google . common . collect . Maps ; 
 - 
 - import java . io . IOException ; 
 - import java . util . Iterator ; 
 - import java . util . Map ; 
 - 
 - import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; 
 - import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; 
 - import static com . google . common . collect . ImmutableMap . copyOf ; 
 - import static com . google . common . collect . Maps . transformEntries ; 
 - 
 - public abstract class AbstractTextContainerDeserializer < T extends TextContainer > extends JsonDeserializer < T > { 
 - private final ImmutableMap < String , String > names = ImmutableMap . < String , String > builder ( ) 
 - . put ( " json _ path " , " jsonPaths " ) 
 - . put ( " xpath " , " xpaths " ) 
 - . put ( " header " , " headers " ) 
 - . put ( " cookie " , " cookies " ) 
 - . put ( " form " , " forms " ) 
 - . build ( ) ; 
 - 
 - protected TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 - JsonToken currentToken = jp . getCurrentToken ( ) ; 
 - if ( currentToken = = JsonToken . FIELD _ NAME ) { 
 - TextContainer . Builder builder = builder ( ) ; 
 - String operation = jp . getText ( ) . trim ( ) ; 
 - builder . withOperation ( operation ) ; 
 - JsonToken token = jp . nextToken ( ) ; 
 - if ( token = = JsonToken . VALUE _ STRING ) { 
 - String text = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - return builder . withText ( text ) . build ( ) ; 
 - } 
 - 
 - if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 - return template ( jp , builder ) ; 
 - } 
 - } 
 - 
 - return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 - } 
 - 
 - private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { 
 - Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; 
 - Template template = Iterators . get ( iterator , 0 ) ; 
 - jp . nextToken ( ) ; 
 - return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; 
 - } 
 - 
 - private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { 
 - return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; 
 - } 
 - 
 - private Maps . EntryTransformer < String , TextContainer , TextContainer > toLocalContainer ( ) { 
 - return new Maps . EntryTransformer < String , TextContainer , TextContainer > ( ) { 
 - @ Override 
 - public TextContainer transformEntry ( final String key , final TextContainer container ) { 
 - if ( container . isRawText ( ) ) { 
 - return container ; 
 - } 
 - 
 - return toLocal ( container ) ; 
 - } 
 - } ; 
 - } 
 - 
 - private TextContainer toLocal ( final TextContainer container ) { 
 - String name = names . get ( container . getOperation ( ) ) ; 
 - if ( name = = null ) { 
 - return container ; 
 - } 
 - return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; 
 - } 
 - 
 - protected TextContainer text ( final JsonParser jp ) throws IOException { 
 - return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 - } 
 - 
 - private static class Template { 
 - public String with ; 
 - public Map < String , TextContainer > vars ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 index a0bd521 . . 7111d3b 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / FileContainerDeserializer . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package com . github . dreamhead . moco . parser . deserializer ; 
 import com . fasterxml . jackson . core . JsonParser ; 
 import com . fasterxml . jackson . core . JsonToken ; 
 import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 import com . github . dreamhead . moco . parser . model . FileContainer ; 
 import com . github . dreamhead . moco . parser . model . TextContainer ; 
 
 @ @ - 13 , 12 + 14 , 14 @ @ import static com . github . dreamhead . moco . parser . model . FileContainer . aFileContaine 
 import static com . github . dreamhead . moco . parser . model . FileContainer . asFileContainer ; 
 import static com . google . common . collect . Iterators . get ; 
 
 - public class FileContainerDeserializer extends AbstractTextContainerDeserializer < FileContainer > { 
 + public class FileContainerDeserializer extends JsonDeserializer < FileContainer > { 
 + private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; 
 + 
 @ Override 
 public FileContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 - return asFileContainer ( text ( jp ) ) ; 
 + return asFileContainer ( helper . text ( jp ) ) ; 
 } 
 
 if ( currentToken = = JsonToken . START _ OBJECT ) { 
 @ @ - 29 , 7 + 32 , 7 @ @ public class FileContainerDeserializer extends AbstractTextContainerDeserializer 
 return toFileContainer ( jp ) ; 
 } 
 
 - return asFileContainer ( textContainer ( jp , ctxt ) ) ; 
 + return asFileContainer ( helper . textContainer ( jp , ctxt ) ) ; 
 } 
 
 return ( FileContainer ) ctxt . handleUnexpectedToken ( FileContainer . class , jp ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 index d422723 . . 161750e 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 3 , 21 + 3 , 24 @ @ package com . github . dreamhead . moco . parser . deserializer ; 
 import com . fasterxml . jackson . core . JsonParser ; 
 import com . fasterxml . jackson . core . JsonToken ; 
 import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 import com . github . dreamhead . moco . parser . model . TextContainer ; 
 
 import java . io . IOException ; 
 
 - public class TextContainerDeserializer extends AbstractTextContainerDeserializer < TextContainer > { 
 + public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 + private TextContainerDeserializerHelper helper = new TextContainerDeserializerHelper ( ) ; 
 + 
 @ Override 
 public TextContainer deserialize ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 - return text ( jp ) ; 
 + return helper . text ( jp ) ; 
 } 
 
 if ( currentToken = = JsonToken . START _ OBJECT ) { 
 jp . nextToken ( ) ; 
 - return textContainer ( jp , ctxt ) ; 
 + return helper . textContainer ( jp , ctxt ) ; 
 } 
 
 return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 new file mode 100644 
 index 0000000 . . dd139ed 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializerHelper . java 
 @ @ - 0 , 0 + 1 , 91 @ @ 
 + package com . github . dreamhead . moco . parser . deserializer ; 
 + 
 + import com . fasterxml . jackson . core . JsonParser ; 
 + import com . fasterxml . jackson . core . JsonToken ; 
 + import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 + import com . github . dreamhead . moco . parser . model . TextContainer ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Iterators ; 
 + import com . google . common . collect . Maps ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Iterator ; 
 + import java . util . Map ; 
 + 
 + import static com . github . dreamhead . moco . parser . model . TextContainer . builder ; 
 + import static com . github . dreamhead . moco . parser . model . TextContainer . isForTemplate ; 
 + import static com . google . common . collect . ImmutableMap . copyOf ; 
 + import static com . google . common . collect . Maps . transformEntries ; 
 + 
 + public class TextContainerDeserializerHelper { 
 + private final ImmutableMap < String , String > names = ImmutableMap . < String , String > builder ( ) 
 + . put ( " json _ path " , " jsonPaths " ) 
 + . put ( " xpath " , " xpaths " ) 
 + . put ( " header " , " headers " ) 
 + . put ( " cookie " , " cookies " ) 
 + . put ( " form " , " forms " ) 
 + . build ( ) ; 
 + 
 + public TextContainer textContainer ( final JsonParser jp , final DeserializationContext ctxt ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + if ( currentToken = = JsonToken . FIELD _ NAME ) { 
 + TextContainer . Builder builder = builder ( ) ; 
 + String operation = jp . getText ( ) . trim ( ) ; 
 + builder . withOperation ( operation ) ; 
 + JsonToken token = jp . nextToken ( ) ; 
 + if ( token = = JsonToken . VALUE _ STRING ) { 
 + String text = jp . getText ( ) . trim ( ) ; 
 + jp . nextToken ( ) ; 
 + return builder . withText ( text ) . build ( ) ; 
 + } 
 + 
 + if ( isForTemplate ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 + return template ( jp , builder ) ; 
 + } 
 + } 
 + 
 + return ( TextContainer ) ctxt . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 + } 
 + 
 + private TextContainer template ( final JsonParser jp , final TextContainer . Builder builder ) throws IOException { 
 + Iterator < Template > iterator = jp . readValuesAs ( Template . class ) ; 
 + Template template = Iterators . get ( iterator , 0 ) ; 
 + jp . nextToken ( ) ; 
 + return builder . withText ( template . with ) . withProps ( toTemplateVars ( template ) ) . build ( ) ; 
 + } 
 + 
 + private ImmutableMap < String , TextContainer > toTemplateVars ( final Template template ) { 
 + return copyOf ( transformEntries ( template . vars , toLocalContainer ( ) ) ) ; 
 + } 
 + 
 + private Maps . EntryTransformer < String , TextContainer , TextContainer > toLocalContainer ( ) { 
 + return new Maps . EntryTransformer < String , TextContainer , TextContainer > ( ) { 
 + @ Override 
 + public TextContainer transformEntry ( final String key , final TextContainer container ) { 
 + if ( container . isRawText ( ) ) { 
 + return container ; 
 + } 
 + 
 + return toLocal ( container ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private TextContainer toLocal ( final TextContainer container ) { 
 + String name = names . get ( container . getOperation ( ) ) ; 
 + if ( name = = null ) { 
 + return container ; 
 + } 
 + return builder ( ) . withOperation ( name ) . withText ( container . getText ( ) ) . withProps ( container . getProps ( ) ) . build ( ) ; 
 + } 
 + 
 + protected TextContainer text ( final JsonParser jp ) throws IOException { 
 + return builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 + } 
 + 
 + private static class Template { 
 + public String with ; 
 + public Map < String , TextContainer > vars ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 index 4dfad59 . . 9d697ff 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / HttpServerParser . java 
 @ @ - 6 , 6 + 6 , 8 @ @ import com . fasterxml . jackson . databind . module . SimpleModule ; 
 import com . github . dreamhead . moco . HttpServer ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 + import com . github . dreamhead . moco . parser . deserializer . ProxyContainerDeserializer ; 
 + import com . github . dreamhead . moco . parser . deserializer . TextContainerDeserializer ; 
 import com . github . dreamhead . moco . parser . model . * ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableList ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 new file mode 100644 
 index 0000000 . . f5e441f 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / ProxyContainerDeserializer . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + package com . github . dreamhead . moco . parser . deserializer ; 
 + 
 + import com . fasterxml . jackson . core . JsonParser ; 
 + import com . fasterxml . jackson . core . JsonToken ; 
 + import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 + import com . github . dreamhead . moco . parser . model . ProxyContainer ; 
 + import com . github . dreamhead . moco . parser . model . TextContainer ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Map ; 
 + 
 + import static com . google . common . collect . Maps . newHashMap ; 
 + 
 + public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { 
 + @ Override 
 + public ProxyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 + return new ProxyContainer ( jp . getText ( ) . trim ( ) , null , null , null ) ; 
 + } else if ( currentToken = = JsonToken . START _ OBJECT ) { 
 + JsonToken jsonToken = jp . nextToken ( ) ; 
 + if ( jsonToken = = JsonToken . FIELD _ NAME ) { 
 + return createFailoverProxy ( jp ) ; 
 + } 
 + } 
 + 
 + throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 + } 
 + 
 + private ProxyContainer createFailoverProxy ( JsonParser jp ) throws IOException { 
 + Map < String , String > fields = newHashMap ( ) ; 
 + while ( fetchField ( fields , jp ) ) { } 
 + return ProxyContainer . builder ( ) 
 + . withUrl ( fields . get ( " url " ) ) 
 + . withFailover ( fields . get ( " failover " ) ) 
 + . withFrom ( fields . get ( " from " ) ) 
 + . withTo ( fields . get ( " to " ) ) 
 + . build ( ) ; 
 + } 
 + 
 + private boolean fetchField ( Map < String , String > fields , JsonParser jp ) throws IOException { 
 + String fieldName = jp . getText ( ) . trim ( ) ; 
 + jp . nextToken ( ) ; 
 + String fieldValue = jp . getText ( ) . trim ( ) ; 
 + jp . nextToken ( ) ; 
 + fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; 
 + 
 + return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 new file mode 100644 
 index 0000000 . . 22d7775 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / TextContainerDeserializer . java 
 @ @ - 0 , 0 + 1 , 95 @ @ 
 + package com . github . dreamhead . moco . parser . deserializer ; 
 + 
 + import com . fasterxml . jackson . core . JsonParser ; 
 + import com . fasterxml . jackson . core . JsonToken ; 
 + import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 + import com . github . dreamhead . moco . parser . model . TextContainer ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + import java . io . IOException ; 
 + import java . util . Map ; 
 + 
 + import static com . google . common . collect . ImmutableMap . copyOf ; 
 + import static com . google . common . collect . Maps . newHashMap ; 
 + 
 + public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 + @ Override 
 + public TextContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 + return text ( jp ) ; 
 + } else if ( currentToken = = JsonToken . START _ OBJECT ) { 
 + jp . nextToken ( ) ; 
 + return textContainer ( jp , ctxt ) ; 
 + } 
 + 
 + throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 + } 
 + 
 + private TextContainer textContainer ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + if ( currentToken = = JsonToken . FIELD _ NAME ) { 
 + TextContainer . Builder builder = TextContainer . builder ( ) ; 
 + String operation = jp . getText ( ) . trim ( ) ; 
 + builder . withOperation ( operation ) ; 
 + JsonToken token = jp . nextToken ( ) ; 
 + if ( token = = JsonToken . VALUE _ STRING ) { 
 + String text = jp . getText ( ) . trim ( ) ; 
 + jp . nextToken ( ) ; 
 + return builder . withText ( text ) . build ( ) ; 
 + } 
 + 
 + if ( " template " . equals ( operation ) & & token = = JsonToken . START _ OBJECT ) { 
 + jp . nextToken ( ) ; 
 + return template ( jp , ctxt , builder ) ; 
 + } 
 + } 
 + 
 + throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; 
 + } 
 + 
 + private TextContainer template ( JsonParser jp , DeserializationContext ctxt , TextContainer . Builder builder ) throws IOException { 
 + String with = jp . getText ( ) . trim ( ) ; 
 + if ( " with " . equals ( with ) ) { 
 + jp . nextToken ( ) ; 
 + builder . withText ( jp . getText ( ) . trim ( ) ) ; 
 + 
 + jp . nextToken ( ) ; 
 + String vars = jp . getText ( ) . trim ( ) ; 
 + 
 + if ( " vars " . equals ( vars ) ) { 
 + JsonToken startTemplateVars = jp . nextToken ( ) ; 
 + if ( startTemplateVars = = JsonToken . START _ OBJECT ) { 
 + jp . nextToken ( ) ; 
 + ImmutableMap < String , Object > fields = getProps ( jp ) ; 
 + jp . nextToken ( ) ; 
 + jp . nextToken ( ) ; 
 + return builder . withProps ( copyOf ( fields ) ) . build ( ) ; 
 + } 
 + } 
 + } 
 + 
 + throw ctxt . mappingException ( TextContainer . class , jp . getCurrentToken ( ) ) ; 
 + } 
 + 
 + private TextContainer text ( JsonParser jp ) throws IOException { 
 + return TextContainer . builder ( ) . withText ( jp . getText ( ) . trim ( ) ) . build ( ) ; 
 + } 
 + 
 + private ImmutableMap < String , Object > getProps ( JsonParser jp ) throws IOException { 
 + Map < String , Object > fields = newHashMap ( ) ; 
 + while ( fetchField ( fields , jp ) ) { } 
 + return copyOf ( fields ) ; 
 + } 
 + 
 + private boolean fetchField ( Map < String , Object > fields , JsonParser jp ) throws IOException { 
 + String fieldName = jp . getText ( ) . trim ( ) ; 
 + jp . nextToken ( ) ; 
 + String fieldValue = jp . getText ( ) . trim ( ) ; 
 + jp . nextToken ( ) ; 
 + fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; 
 + 
 + return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainerDeserializer . java 
 deleted file mode 100644 
 index a2a7438 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ProxyContainerDeserializer . java 
 + + + / dev / null 
 @ @ - 1 , 49 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . parser . model ; 
 - 
 - import com . fasterxml . jackson . core . JsonParser ; 
 - import com . fasterxml . jackson . core . JsonToken ; 
 - import com . fasterxml . jackson . databind . DeserializationContext ; 
 - import com . fasterxml . jackson . databind . JsonDeserializer ; 
 - 
 - import java . io . IOException ; 
 - import java . util . Map ; 
 - 
 - import static com . google . common . collect . Maps . newHashMap ; 
 - 
 - public class ProxyContainerDeserializer extends JsonDeserializer < ProxyContainer > { 
 - @ Override 
 - public ProxyContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 - JsonToken currentToken = jp . getCurrentToken ( ) ; 
 - if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 - return new ProxyContainer ( jp . getText ( ) . trim ( ) , null , null , null ) ; 
 - } else if ( currentToken = = JsonToken . START _ OBJECT ) { 
 - JsonToken jsonToken = jp . nextToken ( ) ; 
 - if ( jsonToken = = JsonToken . FIELD _ NAME ) { 
 - return createFailoverProxy ( jp ) ; 
 - } 
 - } 
 - 
 - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 - } 
 - 
 - private ProxyContainer createFailoverProxy ( JsonParser jp ) throws IOException { 
 - Map < String , String > fields = newHashMap ( ) ; 
 - while ( fetchField ( fields , jp ) ) { } 
 - return ProxyContainer . builder ( ) 
 - . withUrl ( fields . get ( " url " ) ) 
 - . withFailover ( fields . get ( " failover " ) ) 
 - . withFrom ( fields . get ( " from " ) ) 
 - . withTo ( fields . get ( " to " ) ) 
 - . build ( ) ; 
 - } 
 - 
 - private boolean fetchField ( Map < String , String > fields , JsonParser jp ) throws IOException { 
 - String fieldName = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - String fieldValue = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; 
 - 
 - return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 7a17729 . . 3445d70 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 165 , 9 + 165 , 9 @ @ public class ResponseSetting extends Dynamics { 
 return version ( template ( container . getText ( ) ) ) ; 
 } 
 
 - if ( container . hasVars ( ) ) { 
 - ImmutableMap < String , Object > vars = container . getVars ( ) ; 
 - return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , vars ) ; 
 + if ( container . hasProperties ( ) ) { 
 + return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) , 
 + container . getProps ( ) ) ; 
 } 
 
 return template ( invokeTarget ( name , container . getText ( ) , ContentResource . class ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 index 510eb79 . . 7e7bce6 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainer . java 
 @ @ - 3 , 23 + 3 , 12 @ @ package com . github . dreamhead . moco . parser . model ; 
 import com . google . common . base . Objects ; 
 import com . google . common . collect . ImmutableMap ; 
 
 - import static com . google . common . collect . ImmutableMap . of ; 
 - 
 public class TextContainer { 
 - private final String text ; 
 - private final String operation ; 
 - private final ImmutableMap < String , Object > vars ; 
 - 
 - public TextContainer ( String text , String operation ) { 
 - this . text = text ; 
 - this . operation = operation ; 
 - this . vars = of ( ) ; 
 - } 
 + private String text ; 
 + private String operation ; 
 + private ImmutableMap < String , Object > props ; 
 
 - public TextContainer ( String text , String operation , ImmutableMap < String , Object > vars ) { 
 - this . text = text ; 
 - this . operation = operation ; 
 - this . vars = vars ; 
 + public TextContainer ( ) { 
 } 
 
 public boolean isRawText ( ) { 
 @ @ - 34 , 12 + 23 , 12 @ @ public class TextContainer { 
 return operation ; 
 } 
 
 - public boolean hasVars ( ) { 
 - return ! this . vars . isEmpty ( ) ; 
 + public boolean hasProperties ( ) { 
 + return ! this . props . isEmpty ( ) ; 
 } 
 
 - public ImmutableMap < String , Object > getVars ( ) { 
 - return vars ; 
 + public ImmutableMap < String , Object > getProps ( ) { 
 + return props ; 
 } 
 
 @ Override 
 @ @ - 48 , 6 + 37 , 41 @ @ public class TextContainer { 
 . omitNullValues ( ) 
 . add ( " text " , text ) 
 . add ( " operation " , operation ) 
 + . add ( " properties " , props ) 
 . toString ( ) ; 
 } 
 + 
 + public static Builder builder ( ) { 
 + return new Builder ( ) ; 
 + } 
 + 
 + public static class Builder { 
 + private String text ; 
 + private String operation ; 
 + private ImmutableMap < String , Object > props ; 
 + 
 + public Builder withText ( String text ) { 
 + this . text = text ; 
 + return this ; 
 + } 
 + 
 + public Builder withOperation ( String operation ) { 
 + this . operation = operation ; 
 + return this ; 
 + } 
 + 
 + public Builder withProps ( ImmutableMap < String , Object > props ) { 
 + this . props = props ; 
 + return this ; 
 + } 
 + 
 + public TextContainer build ( ) { 
 + TextContainer container = new TextContainer ( ) ; 
 + container . text = text ; 
 + container . operation = operation ; 
 + container . props = ( props ! = null ) ? props : ImmutableMap . < String , Object > of ( ) ; 
 + return container ; 
 + } 
 + 
 + } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainerDeserializer . java 
 deleted file mode 100644 
 index d2eb29c . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / TextContainerDeserializer . java 
 + + + / dev / null 
 @ @ - 1 , 68 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . parser . model ; 
 - 
 - import com . fasterxml . jackson . core . JsonParser ; 
 - import com . fasterxml . jackson . core . JsonToken ; 
 - import com . fasterxml . jackson . databind . DeserializationContext ; 
 - import com . fasterxml . jackson . databind . JsonDeserializer ; 
 - 
 - import java . io . IOException ; 
 - import java . util . Map ; 
 - 
 - import static com . google . common . collect . ImmutableMap . copyOf ; 
 - import static com . google . common . collect . Maps . newHashMap ; 
 - 
 - public class TextContainerDeserializer extends JsonDeserializer < TextContainer > { 
 - @ Override 
 - public TextContainer deserialize ( JsonParser jp , DeserializationContext ctxt ) throws IOException { 
 - JsonToken currentToken = jp . getCurrentToken ( ) ; 
 - if ( currentToken = = JsonToken . VALUE _ STRING ) { 
 - return new TextContainer ( jp . getText ( ) . trim ( ) , null ) ; 
 - } else if ( currentToken = = JsonToken . START _ OBJECT ) { 
 - JsonToken jsonToken = jp . nextToken ( ) ; 
 - if ( jsonToken = = JsonToken . FIELD _ NAME ) { 
 - String operation = jp . getText ( ) . trim ( ) ; 
 - JsonToken token = jp . nextToken ( ) ; 
 - if ( token = = JsonToken . VALUE _ STRING ) { 
 - String text = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - return new TextContainer ( text , operation ) ; 
 - } 
 - 
 - if ( token = = JsonToken . START _ OBJECT ) { 
 - jp . nextToken ( ) ; 
 - String with = jp . getText ( ) . trim ( ) ; 
 - if ( " with " . equals ( with ) ) { 
 - jp . nextToken ( ) ; 
 - String template = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - String vars = jp . getText ( ) . trim ( ) ; 
 - if ( " vars " . equals ( vars ) ) { 
 - JsonToken startTemplateVars = jp . nextToken ( ) ; 
 - if ( startTemplateVars = = JsonToken . START _ OBJECT ) { 
 - 
 - jp . nextToken ( ) ; 
 - Map < String , Object > fields = newHashMap ( ) ; 
 - while ( fetchField ( fields , jp ) ) { } 
 - jp . nextToken ( ) ; 
 - jp . nextToken ( ) ; 
 - return new TextContainer ( template , operation , copyOf ( fields ) ) ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 - } 
 - 
 - throw ctxt . mappingException ( TextContainer . class , currentToken ) ; 
 - } 
 - 
 - private boolean fetchField ( Map < String , Object > fields , JsonParser jp ) throws IOException { 
 - String fieldName = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - String fieldValue = jp . getText ( ) . trim ( ) ; 
 - jp . nextToken ( ) ; 
 - fields . put ( fieldName . toLowerCase ( ) , fieldValue ) ; 
 - 
 - return jp . getCurrentToken ( ) ! = JsonToken . END _ OBJECT ; 
 - } 
 - }
