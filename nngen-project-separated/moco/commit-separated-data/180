BLEU SCORE: 0.19070828081828378

TEST MSG: applied multiple same name header in mutable http response
GENERATED MSG: added add header to mutable http response

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index cc96e47 . . cc1c3ac 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 12 , 9 + 12 , 11 @ @ import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . util . Map ; <nl> <nl> + import static com . github . dreamhead . moco . util . Maps . asSimple ; <nl> + <nl> public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> private HttpProtocolVersion version ; <nl> - private Map < String , String > headers = Maps . newHashMap ( ) ; <nl> + private Map < String , String [ ] > headers = Maps . newHashMap ( ) ; <nl> private int status ; <nl> private MessageContent content ; <nl> <nl> @ @ - 42 , 12 + 44 , 29 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> <nl> @ Override <nl> public void addHeader ( final String name , final Object value ) { <nl> - this . headers . put ( name , value . toString ( ) ) ; <nl> + this . headers . put ( name , newValues ( name , value ) ) ; <nl> + } <nl> + <nl> + private String [ ] newValues ( final String name , final Object value ) { <nl> + if ( this . headers . containsKey ( name ) ) { <nl> + String [ ] values = this . headers . get ( name ) ; <nl> + String [ ] newValues = new String [ values . length + 1 ] ; <nl> + System . arraycopy ( values , 0 , newValues , 0 , values . length ) ; <nl> + newValues [ values . length ] = value . toString ( ) ; <nl> + return newValues ; <nl> + } <nl> + <nl> + return new String [ ] { value . toString ( ) } ; <nl> } <nl> <nl> @ Override <nl> public String getHeader ( final String name ) { <nl> - return this . headers . get ( name ) ; <nl> + if ( this . headers . containsKey ( name ) ) { <nl> + return null ; <nl> + } <nl> + <nl> + String [ ] values = this . headers . get ( name ) ; <nl> + return values [ 0 ] ; <nl> } <nl> <nl> @ Override <nl> @ @ - 62 , 7 + 81 , 7 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> <nl> @ Override <nl> public ImmutableMap < String , String > getHeaders ( ) { <nl> - return ImmutableMap . copyOf ( this . headers ) ; <nl> + return asSimple ( ImmutableMap . copyOf ( this . headers ) ) ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java <nl> index f840fc2 . . 4531a99 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java <nl> @ @ - 1 , 13 + 1 , 11 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . google . common . collect . ImmutableMap ; <nl> - <nl> public interface MutableHttpResponse extends HttpResponse { <nl> void setVersion ( HttpProtocolVersion version ) ; <nl> <nl> - void setHeaders ( ImmutableMap < String , String > headers ) ; <nl> - <nl> void setStatus ( int status ) ; <nl> <nl> void setContent ( String content ) ; <nl> + <nl> + void addHeader ( String name , String value ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index 2c8e3c6 . . 3ea8564 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 3 , 10 + 3 , 13 @ @ package com . github . dreamhead . moco . model ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . MutableHttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import java . util . Map ; <nl> <nl> public class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> private HttpProtocolVersion version ; <nl> - private ImmutableMap < String , String > headers ; <nl> + private Map < String , String > headers = Maps . newHashMap ( ) ; <nl> private int status ; <nl> private String content ; <nl> <nl> @ @ - 19 , 11 + 22 , 6 @ @ public class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> } <nl> <nl> @ Override <nl> - public void setHeaders ( ImmutableMap < String , String > headers ) { <nl> - this . headers = headers ; <nl> - } <nl> - <nl> - @ Override <nl> public void setStatus ( int status ) { <nl> this . status = status ; <nl> } <nl> @ @ - 34 , 13 + 32 , 18 @ @ public class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> } <nl> <nl> @ Override <nl> + public void addHeader ( String name , String value ) { <nl> + this . headers . put ( name , value ) ; <nl> + } <nl> + <nl> + @ Override <nl> public HttpProtocolVersion getVersion ( ) { <nl> return this . version ; <nl> } <nl> <nl> @ Override <nl> public ImmutableMap < String , String > getHeaders ( ) { <nl> - return this . headers ; <nl> + return ImmutableMap . copyOf ( this . headers ) ; <nl> } <nl> <nl> @ Override

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 index cc96e47 . . cc1c3ac 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 @ @ - 12 , 9 + 12 , 11 @ @ import io . netty . handler . codec . http . HttpVersion ; 
 
 import java . util . Map ; 
 
 + import static com . github . dreamhead . moco . util . Maps . asSimple ; 
 + 
 public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 private HttpProtocolVersion version ; 
 - private Map < String , String > headers = Maps . newHashMap ( ) ; 
 + private Map < String , String [ ] > headers = Maps . newHashMap ( ) ; 
 private int status ; 
 private MessageContent content ; 
 
 @ @ - 42 , 12 + 44 , 29 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 
 @ Override 
 public void addHeader ( final String name , final Object value ) { 
 - this . headers . put ( name , value . toString ( ) ) ; 
 + this . headers . put ( name , newValues ( name , value ) ) ; 
 + } 
 + 
 + private String [ ] newValues ( final String name , final Object value ) { 
 + if ( this . headers . containsKey ( name ) ) { 
 + String [ ] values = this . headers . get ( name ) ; 
 + String [ ] newValues = new String [ values . length + 1 ] ; 
 + System . arraycopy ( values , 0 , newValues , 0 , values . length ) ; 
 + newValues [ values . length ] = value . toString ( ) ; 
 + return newValues ; 
 + } 
 + 
 + return new String [ ] { value . toString ( ) } ; 
 } 
 
 @ Override 
 public String getHeader ( final String name ) { 
 - return this . headers . get ( name ) ; 
 + if ( this . headers . containsKey ( name ) ) { 
 + return null ; 
 + } 
 + 
 + String [ ] values = this . headers . get ( name ) ; 
 + return values [ 0 ] ; 
 } 
 
 @ Override 
 @ @ - 62 , 7 + 81 , 7 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 
 @ Override 
 public ImmutableMap < String , String > getHeaders ( ) { 
 - return ImmutableMap . copyOf ( this . headers ) ; 
 + return asSimple ( ImmutableMap . copyOf ( this . headers ) ) ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java 
 index f840fc2 . . 4531a99 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MutableHttpResponse . java 
 @ @ - 1 , 13 + 1 , 11 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . google . common . collect . ImmutableMap ; 
 - 
 public interface MutableHttpResponse extends HttpResponse { 
 void setVersion ( HttpProtocolVersion version ) ; 
 
 - void setHeaders ( ImmutableMap < String , String > headers ) ; 
 - 
 void setStatus ( int status ) ; 
 
 void setContent ( String content ) ; 
 + 
 + void addHeader ( String name , String value ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 index 2c8e3c6 . . 3ea8564 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 @ @ - 3 , 10 + 3 , 13 @ @ package com . github . dreamhead . moco . model ; 
 import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . github . dreamhead . moco . MutableHttpResponse ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 + 
 + import java . util . Map ; 
 
 public class DefaultMutableHttpResponse implements MutableHttpResponse { 
 private HttpProtocolVersion version ; 
 - private ImmutableMap < String , String > headers ; 
 + private Map < String , String > headers = Maps . newHashMap ( ) ; 
 private int status ; 
 private String content ; 
 
 @ @ - 19 , 11 + 22 , 6 @ @ public class DefaultMutableHttpResponse implements MutableHttpResponse { 
 } 
 
 @ Override 
 - public void setHeaders ( ImmutableMap < String , String > headers ) { 
 - this . headers = headers ; 
 - } 
 - 
 - @ Override 
 public void setStatus ( int status ) { 
 this . status = status ; 
 } 
 @ @ - 34 , 13 + 32 , 18 @ @ public class DefaultMutableHttpResponse implements MutableHttpResponse { 
 } 
 
 @ Override 
 + public void addHeader ( String name , String value ) { 
 + this . headers . put ( name , value ) ; 
 + } 
 + 
 + @ Override 
 public HttpProtocolVersion getVersion ( ) { 
 return this . version ; 
 } 
 
 @ Override 
 public ImmutableMap < String , String > getHeaders ( ) { 
 - return this . headers ; 
 + return ImmutableMap . copyOf ( this . headers ) ; 
 } 
 
 @ Override
