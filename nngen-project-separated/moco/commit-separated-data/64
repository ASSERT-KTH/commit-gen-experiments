BLEU SCORE: 0.035802380724744266

TEST MSG: added missing final to bootstrap
GENERATED MSG: removed inline condition in form request extractor

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java <nl> index 65f76cc . . bb99e58 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java <nl> @ @ - 11 , 7 + 11 , 8 @ @ import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class XmlExtractorHelper { <nl> - public final Optional < InputSource > extractAsInputSource ( final Request request , final ContentRequestExtractor extractor ) { <nl> + public final Optional < InputSource > extractAsInputSource ( final Request request , <nl> + final ContentRequestExtractor extractor ) { <nl> Optional < MessageContent > content = extractor . extract ( request ) ; <nl> if ( content . isPresent ( ) ) { <nl> return of ( new InputSource ( new ByteArrayInputStream ( content . get ( ) . getContent ( ) ) ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> index bde2119 . . 4019f94 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> @ @ - 66 , 7 + 66 , 8 @ @ public final class XmlRequestMatcher extends AbstractRequestMatcher { <nl> return extractDocument ( new InputSource ( stream ) ) ; <nl> } <nl> <nl> - private Optional < Document > extractDocument ( final Request request , final ContentRequestExtractor extractor ) throws SAXException { <nl> + private Optional < Document > extractDocument ( final Request request , <nl> + final ContentRequestExtractor extractor ) throws SAXException { <nl> Optional < InputSource > inputSourceOptional = helper . extractAsInputSource ( request , extractor ) ; <nl> if ( ! inputSourceOptional . isPresent ( ) ) { <nl> return absent ( ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> index 145f838 . . a6cf1d9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> @ @ - 8 , 7 + 8 , 8 @ @ import static com . github . dreamhead . moco . rest . RestIds . checkResourceName ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> - public final class ActualSubResourceSettingBuilder implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { <nl> + public final class ActualSubResourceSettingBuilder <nl> + implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { <nl> private final RestIdMatcher id ; <nl> private String name ; <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index de5ba8a . . 0ea4c47 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 53 , 7 + 53 , 8 @ @ public final class MocoJsonRunner { <nl> <nl> private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) { <nl> SocketServerParser parser = new SocketServerParser ( ) ; <nl> - return parser . parseServer ( ImmutableList . of ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) ) , port ) ; <nl> + return parser . parseServer ( ImmutableList . of ( <nl> + toStream ( checkNotNull ( resource , " resource should not be null " ) ) ) , port ) ; <nl> } <nl> <nl> private static HttpServer parseHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> index d962dad . . a8dbfcc 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class Bootstrap implements BootstrapTask { <nl> . build ( ) ; <nl> <nl> @ Override <nl> - public void run ( final String [ ] args ) { <nl> + public final void run ( final String [ ] args ) { <nl> try { <nl> if ( args . length < 1 ) { <nl> throw new ParseArgException ( " task name needs to be specified " ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 623acb5 . . 99ba824 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 24 , 7 + 24 , 8 @ @ public final class RunnerFactory { <nl> <nl> public ShutdownRunner createRunner ( final StartArgs startArgs ) { <nl> Runner dynamicRunner = createDynamicRunner ( startArgs ) ; <nl> - ShutdownMocoRunnerWatcher watcher = factory . createShutdownWatcher ( dynamicRunner , startArgs . getShutdownPort ( ) , shutdownKey ) ; <nl> + ShutdownMocoRunnerWatcher watcher = factory . createShutdownWatcher ( dynamicRunner , <nl> + startArgs . getShutdownPort ( ) , shutdownKey ) ; <nl> return new ShutdownRunner ( dynamicRunner , watcher ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> index e6fbde3 . . 98c1c8b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> @ @ - 22 , 5 + 22 , 6 @ @ public final class Extractors { <nl> throw new IllegalArgumentException ( format ( " unknown extractor for [ % s ] " , id ) ) ; <nl> } <nl> <nl> - private Extractors ( ) { } <nl> + private Extractors ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java <nl> index efb5fb4 . . 83048ee 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java <nl> @ @ - 18 , 6 + 18 , 10 @ @ public class FormRequestExtractor extends HttpRequestExtractor < String > { <nl> @ Override <nl> protected Optional < String > doExtract ( final HttpRequest request ) { <nl> Optional < ImmutableMap < String , String > > forms = extractor . extract ( request ) ; <nl> - return forms . isPresent ( ) ? fromNullable ( forms . get ( ) . get ( key ) ) : Optional . < String > absent ( ) ; <nl> + if ( forms . isPresent ( ) ) { <nl> + return fromNullable ( forms . get ( ) . get ( key ) ) ; <nl> + } <nl> + <nl> + return Optional . absent ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> index 3bafac1 . . 5034f66 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java <nl> @ @ - 12 , 12 + 12 , 12 @ @ import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> - 	 private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; <nl> - 	 private final JsonPath jsonPath ; <nl> + private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; <nl> + private final JsonPath jsonPath ; <nl> <nl> - 	 public JsonPathRequestExtractor ( final String jsonPath ) { <nl> - 	 	 this . jsonPath = JsonPath . compile ( jsonPath ) ; <nl> - 	 } <nl> + public JsonPathRequestExtractor ( final String jsonPath ) { <nl> + this . jsonPath = JsonPath . compile ( jsonPath ) ; <nl> + } <nl> <nl> @ Override <nl> protected Optional < Object > doExtract ( final HttpRequest request ) { <nl> @ @ - 33 , 13 + 33 , 13 @ @ public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { <nl> } <nl> } <nl> <nl> - 	 private Object toStringArray ( final Object content ) { <nl> - 	 	 if ( content instanceof List ) { <nl> + private Object toStringArray ( final Object content ) { <nl> + if ( content instanceof List ) { <nl> @ SuppressWarnings ( " unchecked " ) <nl> List < String > texts = ( List < String > ) content ; <nl> return texts . toArray ( new String [ texts . size ( ) ] ) ; <nl> - 	 	 } <nl> + } <nl> <nl> - 	 	 return content . toString ( ) ; <nl> - 	 } <nl> + return content . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 130442c . . 5365ce2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 4 , 7 + 4 , 8 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> <nl> public class Failover { <nl> - public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , FailoverStrategy . FAILOVER ) ; <nl> + public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , <nl> + FailoverStrategy . FAILOVER ) ; <nl> <nl> private final FailoverExecutor executor ; <nl> private final FailoverStrategy strategy ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> index d98761b . . dc49f9a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java <nl> @ @ - 78 , 7 + 78 , 8 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { <nl> } <nl> <nl> public FullHttpResponse toFullResponse ( ) { <nl> - FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , HttpResponseStatus . valueOf ( this . status ) ) ; <nl> + FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , <nl> + HttpResponseStatus . valueOf ( this . status ) ) ; <nl> for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { <nl> response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> index 5894d1d . . 166e01f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java <nl> @ @ - 29 , 9 + 29 , 10 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { <nl> <nl> @ Override <nl> public void verify ( final UnexpectedRequestMatcher matcher , final VerificationMode mode ) { <nl> - checkNotNull ( mode , " Verification mode should not be null " ) . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , <nl> - checkNotNull ( matcher , " Matcher should not be null " ) , <nl> - " expect unexpected request hit % s times but % d times " ) ) ; <nl> + checkNotNull ( mode , " Verification mode should not be null " ) <nl> + . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , <nl> + checkNotNull ( matcher , " Matcher should not be null " ) , <nl> + " expect unexpected request hit % s times but % d times " ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index 4811cfe . . 948c0ed 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 28 , 5 + 28 , 6 @ @ public final class Files { <nl> return new File ( new File ( path1 ) , path2 ) ; <nl> } <nl> <nl> - private Files ( ) { } <nl> + private Files ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index fbc265b . . f4cdc46 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 13 , 5 + 13 , 6 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> - private Jsons ( ) { } <nl> + private Jsons ( ) { <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java 
 index 65f76cc . . bb99e58 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / XmlExtractorHelper . java 
 @ @ - 11 , 7 + 11 , 8 @ @ import static com . google . common . base . Optional . absent ; 
 import static com . google . common . base . Optional . of ; 
 
 public class XmlExtractorHelper { 
 - public final Optional < InputSource > extractAsInputSource ( final Request request , final ContentRequestExtractor extractor ) { 
 + public final Optional < InputSource > extractAsInputSource ( final Request request , 
 + final ContentRequestExtractor extractor ) { 
 Optional < MessageContent > content = extractor . extract ( request ) ; 
 if ( content . isPresent ( ) ) { 
 return of ( new InputSource ( new ByteArrayInputStream ( content . get ( ) . getContent ( ) ) ) ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java 
 index bde2119 . . 4019f94 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java 
 @ @ - 66 , 7 + 66 , 8 @ @ public final class XmlRequestMatcher extends AbstractRequestMatcher { 
 return extractDocument ( new InputSource ( stream ) ) ; 
 } 
 
 - private Optional < Document > extractDocument ( final Request request , final ContentRequestExtractor extractor ) throws SAXException { 
 + private Optional < Document > extractDocument ( final Request request , 
 + final ContentRequestExtractor extractor ) throws SAXException { 
 Optional < InputSource > inputSourceOptional = helper . extractAsInputSource ( request , extractor ) ; 
 if ( ! inputSourceOptional . isPresent ( ) ) { 
 return absent ( ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java 
 index 145f838 . . a6cf1d9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java 
 @ @ - 8 , 7 + 8 , 8 @ @ import static com . github . dreamhead . moco . rest . RestIds . checkResourceName ; 
 import static com . github . dreamhead . moco . util . Iterables . asIterable ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 
 - public final class ActualSubResourceSettingBuilder implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { 
 + public final class ActualSubResourceSettingBuilder 
 + implements SubResourceSettingBuilder , NamedSubResourceSettingBuilder { 
 private final RestIdMatcher id ; 
 private String name ; 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 index de5ba8a . . 0ea4c47 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 @ @ - 53 , 7 + 53 , 8 @ @ public final class MocoJsonRunner { 
 
 private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) { 
 SocketServerParser parser = new SocketServerParser ( ) ; 
 - return parser . parseServer ( ImmutableList . of ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) ) , port ) ; 
 + return parser . parseServer ( ImmutableList . of ( 
 + toStream ( checkNotNull ( resource , " resource should not be null " ) ) ) , port ) ; 
 } 
 
 private static HttpServer parseHttpServer ( final Resource resource , final Optional < Integer > port ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java 
 index d962dad . . a8dbfcc 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / Bootstrap . java 
 @ @ - 22 , 7 + 22 , 7 @ @ public class Bootstrap implements BootstrapTask { 
 . build ( ) ; 
 
 @ Override 
 - public void run ( final String [ ] args ) { 
 + public final void run ( final String [ ] args ) { 
 try { 
 if ( args . length < 1 ) { 
 throw new ParseArgException ( " task name needs to be specified " ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index 623acb5 . . 99ba824 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 24 , 7 + 24 , 8 @ @ public final class RunnerFactory { 
 
 public ShutdownRunner createRunner ( final StartArgs startArgs ) { 
 Runner dynamicRunner = createDynamicRunner ( startArgs ) ; 
 - ShutdownMocoRunnerWatcher watcher = factory . createShutdownWatcher ( dynamicRunner , startArgs . getShutdownPort ( ) , shutdownKey ) ; 
 + ShutdownMocoRunnerWatcher watcher = factory . createShutdownWatcher ( dynamicRunner , 
 + startArgs . getShutdownPort ( ) , shutdownKey ) ; 
 return new ShutdownRunner ( dynamicRunner , watcher ) ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 index e6fbde3 . . 98c1c8b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 @ @ - 22 , 5 + 22 , 6 @ @ public final class Extractors { 
 throw new IllegalArgumentException ( format ( " unknown extractor for [ % s ] " , id ) ) ; 
 } 
 
 - private Extractors ( ) { } 
 + private Extractors ( ) { 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java 
 index efb5fb4 . . 83048ee 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / FormRequestExtractor . java 
 @ @ - 18 , 6 + 18 , 10 @ @ public class FormRequestExtractor extends HttpRequestExtractor < String > { 
 @ Override 
 protected Optional < String > doExtract ( final HttpRequest request ) { 
 Optional < ImmutableMap < String , String > > forms = extractor . extract ( request ) ; 
 - return forms . isPresent ( ) ? fromNullable ( forms . get ( ) . get ( key ) ) : Optional . < String > absent ( ) ; 
 + if ( forms . isPresent ( ) ) { 
 + return fromNullable ( forms . get ( ) . get ( key ) ) ; 
 + } 
 + 
 + return Optional . absent ( ) ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java 
 index 3bafac1 . . 5034f66 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / JsonPathRequestExtractor . java 
 @ @ - 12 , 12 + 12 , 12 @ @ import static com . google . common . base . Optional . absent ; 
 import static com . google . common . base . Optional . of ; 
 
 public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { 
 - 	 private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; 
 - 	 private final JsonPath jsonPath ; 
 + private final ContentRequestExtractor extractor = new ContentRequestExtractor ( ) ; 
 + private final JsonPath jsonPath ; 
 
 - 	 public JsonPathRequestExtractor ( final String jsonPath ) { 
 - 	 	 this . jsonPath = JsonPath . compile ( jsonPath ) ; 
 - 	 } 
 + public JsonPathRequestExtractor ( final String jsonPath ) { 
 + this . jsonPath = JsonPath . compile ( jsonPath ) ; 
 + } 
 
 @ Override 
 protected Optional < Object > doExtract ( final HttpRequest request ) { 
 @ @ - 33 , 13 + 33 , 13 @ @ public class JsonPathRequestExtractor extends HttpRequestExtractor < Object > { 
 } 
 } 
 
 - 	 private Object toStringArray ( final Object content ) { 
 - 	 	 if ( content instanceof List ) { 
 + private Object toStringArray ( final Object content ) { 
 + if ( content instanceof List ) { 
 @ SuppressWarnings ( " unchecked " ) 
 List < String > texts = ( List < String > ) content ; 
 return texts . toArray ( new String [ texts . size ( ) ] ) ; 
 - 	 	 } 
 + } 
 
 - 	 	 return content . toString ( ) ; 
 - 	 } 
 + return content . toString ( ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 index 130442c . . 5365ce2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 @ @ - 4 , 7 + 4 , 8 @ @ import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . HttpResponse ; 
 
 public class Failover { 
 - public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , FailoverStrategy . FAILOVER ) ; 
 + public static final Failover DEFAULT _ FAILOVER = new Failover ( FailoverExecutor . EMPTY _ FAILOVER , 
 + FailoverStrategy . FAILOVER ) ; 
 
 private final FailoverExecutor executor ; 
 private final FailoverStrategy strategy ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 index d98761b . . dc49f9a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultMutableHttpResponse . java 
 @ @ - 78 , 7 + 78 , 8 @ @ public final class DefaultMutableHttpResponse implements MutableHttpResponse { 
 } 
 
 public FullHttpResponse toFullResponse ( ) { 
 - FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , HttpResponseStatus . valueOf ( this . status ) ) ; 
 + FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( this . version . text ( ) ) , 
 + HttpResponseStatus . valueOf ( this . status ) ) ; 
 for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { 
 response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 index 5894d1d . . 166e01f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / monitor / DefaultRequestHit . java 
 @ @ - 29 , 9 + 29 , 10 @ @ public class DefaultRequestHit extends AbstractMonitor implements RequestHit { 
 
 @ Override 
 public void verify ( final UnexpectedRequestMatcher matcher , final VerificationMode mode ) { 
 - checkNotNull ( mode , " Verification mode should not be null " ) . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , 
 - checkNotNull ( matcher , " Matcher should not be null " ) , 
 - " expect unexpected request hit % s times but % d times " ) ) ; 
 + checkNotNull ( mode , " Verification mode should not be null " ) 
 + . verify ( new VerificationData ( copyOf ( unexpectedRequests ) , 
 + checkNotNull ( matcher , " Matcher should not be null " ) , 
 + " expect unexpected request hit % s times but % d times " ) ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 index 4811cfe . . 948c0ed 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 28 , 5 + 28 , 6 @ @ public final class Files { 
 return new File ( new File ( path1 ) , path2 ) ; 
 } 
 
 - private Files ( ) { } 
 + private Files ( ) { 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index fbc265b . . f4cdc46 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 13 , 5 + 13 , 6 @ @ public final class Jsons { 
 } 
 } 
 
 - private Jsons ( ) { } 
 + private Jsons ( ) { 
 + } 
 }
