BLEU SCORE: 0.04767707020457096

TEST MSG: added missing check to http server in publish API
GENERATED MSG: added two variables api for template

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 7c40e35 . . bb1b144 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 79 , 18 + 79 , 22 @ @ public final class Moco { <nl> public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoConfig . . . configs ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , <nl> - checkNotNull ( monitor , " Monitor should not be null " ) , configs ) ; <nl> + checkNotNull ( monitor , " Monitor should not be null " ) , <nl> + checkNotNull ( configs , " Configuration should not be null " ) ) ; <nl> } <nl> <nl> - public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> + public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , <nl> + final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , <nl> ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , <nl> - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> + checkNotNull ( monitor2 , " Monitor should not be null " ) , <nl> + checkNotNull ( monitors , " Monitors should not be null " ) ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoConfig . . . configs ) { <nl> - return ActualHttpServer . createQuietServer ( Optional . < Integer > absent ( ) , configs ) ; <nl> + return ActualHttpServer . createQuietServer ( Optional . < Integer > absent ( ) , <nl> + checkNotNull ( configs , " Configuration should not be null " ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoMonitor monitor , final MocoConfig . . . configs ) { <nl> @ @ - 144 , 7 + 148 , 7 @ @ public final class Moco { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualSocketServer . createServerWithMonitor ( of ( port ) , <nl> ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , <nl> - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; <nl> } <nl> <nl> <nl> @ @ - 494 , 7 + 498 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , <nl> @ @ - 510 , 7 + 514 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , <nl> @ @ - 519 , 12 + 523 , 14 @ @ public final class Moco { <nl> ) ; <nl> } <nl> <nl> - public static ContentResource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final String template , <nl> + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , <nl> checkNotNull ( variables , " Template variable should not be null " ) ) ; <nl> } <nl> <nl> - public static ContentResource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + public static ContentResource template ( final ContentResource template , <nl> + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> @ @ - 534 , 11 + 540 , 13 @ @ public final class Moco { <nl> } <nl> <nl> public static Failover failover ( final String file ) { <nl> - return new Failover ( ApiUtils . failoverExecutor ( checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER ) ; <nl> + return new Failover ( ApiUtils . failoverExecutor ( <nl> + checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER ) ; <nl> } <nl> <nl> public static Failover playback ( final String file ) { <nl> - return new Failover ( ApiUtils . failoverExecutor ( checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK ) ; <nl> + return new Failover ( ApiUtils . failoverExecutor ( <nl> + checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK ) ; <nl> } <nl> <nl> public static MocoEventTrigger complete ( final MocoEventAction action ) { <nl> @ @ - 546 , 11 + 554 , 13 @ @ public final class Moco { <nl> } <nl> <nl> public static MocoEventAction async ( final MocoEventAction action ) { <nl> - return async ( checkNotNull ( action , " Action should not be null " ) , latency ( LatencyProcedure . DEFAULT _ LATENCY , TimeUnit . MILLISECONDS ) ) ; <nl> + return async ( checkNotNull ( action , " Action should not be null " ) , <nl> + latency ( LatencyProcedure . DEFAULT _ LATENCY , TimeUnit . MILLISECONDS ) ) ; <nl> } <nl> <nl> public static MocoEventAction async ( final MocoEventAction action , final LatencyProcedure procedure ) { <nl> - return new MocoAsyncAction ( checkNotNull ( action , " Action should not be null " ) , checkNotNull ( procedure , " Procedure should not be null " ) ) ; <nl> + return new MocoAsyncAction ( checkNotNull ( action , " Action should not be null " ) , <nl> + checkNotNull ( procedure , " Procedure should not be null " ) ) ; <nl> } <nl> <nl> public static MocoEventAction get ( final String url ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index ab11cb9 . . 358700d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 419 , 6 + 419 , 15 @ @ public class Moco { <nl> checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ; <nl> } <nl> <nl> + public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , <nl> + checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> + checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , <nl> + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> + checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ; <nl> + } <nl> + <nl> public static < T > Resource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> @ @ - 426 , 6 + 435 , 16 @ @ public class Moco { <nl> ) ; <nl> } <nl> <nl> + public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> + return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> + ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> + new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , <nl> + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> + new ExtractorVariable < ExtractorType2 > ( checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ) <nl> + ) ; <nl> + } <nl> + <nl> private static ImmutableMap < String , Variable > toVariables ( ImmutableMap < String , String > variables ) { <nl> return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 29e18a9 . . 82f06fc 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 246 , 6 + 246 , 19 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ generate _ response _ with _ two _ variables _ by _ request ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { foo } $ { bar } " , " foo " , jsonPath ( " $ . book [ * ] . price " ) , " bar " , jsonPath ( " $ . book [ * ] . price " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 2 \ " } } " ) , is ( " 2 2 " ) ) ; <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 1 \ " } } " ) , is ( " 1 1 " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ generate _ response _ with _ variable _ by _ request ( ) throws Exception { <nl> server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { foo } " , " foo " , jsonPath ( " $ . book [ * ] . price " ) ) ) ; <nl> <nl> @ @ - 270 , 4 + 283 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ generate _ response _ from _ file _ with _ two _ variables _ by _ request ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / two _ vars . template " ) , " foo " , jsonPath ( " $ . book [ * ] . price " ) , " bar " , jsonPath ( " $ . book [ * ] . price " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 2 \ " } } " ) , is ( " 2 2 " ) ) ; <nl> + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 1 \ " } } " ) , is ( " 1 1 " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 7c40e35 . . bb1b144 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 79 , 18 + 79 , 22 @ @ public final class Moco { 
 public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoConfig . . . configs ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , 
 - checkNotNull ( monitor , " Monitor should not be null " ) , configs ) ; 
 + checkNotNull ( monitor , " Monitor should not be null " ) , 
 + checkNotNull ( configs , " Configuration should not be null " ) ) ; 
 } 
 
 - public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { 
 + public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , 
 + final MocoMonitor . . . monitors ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , 
 ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , 
 - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 + checkNotNull ( monitor2 , " Monitor should not be null " ) , 
 + checkNotNull ( monitors , " Monitors should not be null " ) ) ) ; 
 } 
 
 public static HttpServer httpServer ( final MocoConfig . . . configs ) { 
 - return ActualHttpServer . createQuietServer ( Optional . < Integer > absent ( ) , configs ) ; 
 + return ActualHttpServer . createQuietServer ( Optional . < Integer > absent ( ) , 
 + checkNotNull ( configs , " Configuration should not be null " ) ) ; 
 } 
 
 public static HttpServer httpServer ( final MocoMonitor monitor , final MocoConfig . . . configs ) { 
 @ @ - 144 , 7 + 148 , 7 @ @ public final class Moco { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualSocketServer . createServerWithMonitor ( of ( port ) , 
 ApiUtils . mergeMonitor ( checkNotNull ( monitor , " Monitor should not be null " ) , 
 - checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 + checkNotNull ( monitor2 , " Monitor should not be null " ) , monitors ) ) ; 
 } 
 
 
 @ @ - 494 , 7 + 498 , 7 @ @ public final class Moco { 
 } 
 
 public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , 
 @ @ - 510 , 7 + 514 , 7 @ @ public final class Moco { 
 } 
 
 public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 - final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , 
 @ @ - 519 , 12 + 523 , 14 @ @ public final class Moco { 
 ) ; 
 } 
 
 - public static ContentResource template ( final String template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + public static ContentResource template ( final String template , 
 + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 return template ( text ( checkNotNull ( template , " Template should not be null " ) ) , 
 checkNotNull ( variables , " Template variable should not be null " ) ) ; 
 } 
 
 - public static ContentResource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + public static ContentResource template ( final ContentResource template , 
 + final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; 
 } 
 @ @ - 534 , 11 + 540 , 13 @ @ public final class Moco { 
 } 
 
 public static Failover failover ( final String file ) { 
 - return new Failover ( ApiUtils . failoverExecutor ( checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER ) ; 
 + return new Failover ( ApiUtils . failoverExecutor ( 
 + checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . FAILOVER ) ; 
 } 
 
 public static Failover playback ( final String file ) { 
 - return new Failover ( ApiUtils . failoverExecutor ( checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK ) ; 
 + return new Failover ( ApiUtils . failoverExecutor ( 
 + checkNotNullOrEmpty ( file , " Filename should not be null " ) ) , FailoverStrategy . PLAYBACK ) ; 
 } 
 
 public static MocoEventTrigger complete ( final MocoEventAction action ) { 
 @ @ - 546 , 11 + 554 , 13 @ @ public final class Moco { 
 } 
 
 public static MocoEventAction async ( final MocoEventAction action ) { 
 - return async ( checkNotNull ( action , " Action should not be null " ) , latency ( LatencyProcedure . DEFAULT _ LATENCY , TimeUnit . MILLISECONDS ) ) ; 
 + return async ( checkNotNull ( action , " Action should not be null " ) , 
 + latency ( LatencyProcedure . DEFAULT _ LATENCY , TimeUnit . MILLISECONDS ) ) ; 
 } 
 
 public static MocoEventAction async ( final MocoEventAction action , final LatencyProcedure procedure ) { 
 - return new MocoAsyncAction ( checkNotNull ( action , " Action should not be null " ) , checkNotNull ( procedure , " Procedure should not be null " ) ) ; 
 + return new MocoAsyncAction ( checkNotNull ( action , " Action should not be null " ) , 
 + checkNotNull ( procedure , " Procedure should not be null " ) ) ; 
 } 
 
 public static MocoEventAction get ( final String url ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index ab11cb9 . . 358700d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 419 , 6 + 419 , 15 @ @ public class Moco { 
 checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ; 
 } 
 
 + public static < ExtractorType1 , ExtractorType2 > Resource template ( final String template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 + return template ( text ( checkNotNullOrEmpty ( template , " Template should not be null " ) ) , 
 + checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 + checkNotNull ( extractor1 , " Template variable extractor should not be null " ) , 
 + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 + checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ; 
 + } 
 + 
 public static < T > Resource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 @ @ - 426 , 6 + 435 , 16 @ @ public class Moco { 
 ) ; 
 } 
 
 + public static < ExtractorType1 , ExtractorType2 > Resource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 + final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 + return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 + ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 + new ExtractorVariable < ExtractorType1 > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , 
 + checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 + new ExtractorVariable < ExtractorType2 > ( checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ) 
 + ) ; 
 + } 
 + 
 private static ImmutableMap < String , Variable > toVariables ( ImmutableMap < String , String > variables ) { 
 return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index 29e18a9 . . 82f06fc 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 246 , 6 + 246 , 19 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ generate _ response _ with _ two _ variables _ by _ request ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { foo } $ { bar } " , " foo " , jsonPath ( " $ . book [ * ] . price " ) , " bar " , jsonPath ( " $ . book [ * ] . price " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 2 \ " } } " ) , is ( " 2 2 " ) ) ; 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 1 \ " } } " ) , is ( " 1 1 " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ generate _ response _ with _ variable _ by _ request ( ) throws Exception { 
 server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { foo } " , " foo " , jsonPath ( " $ . book [ * ] . price " ) ) ) ; 
 
 @ @ - 270 , 4 + 283 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ generate _ response _ from _ file _ with _ two _ variables _ by _ request ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( file ( " src / test / resources / two _ vars . template " ) , " foo " , jsonPath ( " $ . book [ * ] . price " ) , " bar " , jsonPath ( " $ . book [ * ] . price " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 2 \ " } } " ) , is ( " 2 2 " ) ) ; 
 + assertThat ( helper . postContent ( remoteUrl ( " / template " ) , " { \ " book \ " : { \ " price \ " : \ " 1 \ " } } " ) , is ( " 1 1 " ) ) ; 
 + } 
 + } ) ; 
 + } 
 }
