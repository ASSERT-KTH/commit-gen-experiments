BLEU SCORE: 0.041961149062965476

TEST MSG: applied multiple header with same name in header request extractor
GENERATED MSG: added lazy request to delay template parameter initialization

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> index 62ecb09 . . ea75ca9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . HttpRequestExtractor ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 24 , 6 + 25 , 7 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> String [ ] extractedValues = from ( request . getHeaders ( ) . entrySet ( ) ) <nl> . filter ( isForHeaderName ( name ) ) <nl> . transform ( toValue ( ) ) <nl> + . transformAndConcat ( arrayAsIterable ( ) ) <nl> . toArray ( String . class ) ; <nl> <nl> if ( extractedValues . length > 0 ) { <nl> @ @ - 33 , 12 + 35 , 20 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> return absent ( ) ; <nl> } <nl> <nl> - / / TO FLAT <nl> - private Function < Map . Entry < String , String [ ] > , String > toValue ( ) { <nl> - return new Function < Map . Entry < String , String [ ] > , String > ( ) { <nl> + private Function < String [ ] , Iterable < String > > arrayAsIterable ( ) { <nl> + return new Function < String [ ] , Iterable < String > > ( ) { <nl> @ Override <nl> - public String apply ( final Map . Entry < String , String [ ] > input ) { <nl> - return input . getValue ( ) [ 0 ] ; <nl> + public Iterable < String > apply ( final String [ ] input ) { <nl> + return ImmutableList . copyOf ( input ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < Map . Entry < String , String [ ] > , String [ ] > toValue ( ) { <nl> + return new Function < Map . Entry < String , String [ ] > , String [ ] > ( ) { <nl> + @ Override <nl> + public String [ ] apply ( final Map . Entry < String , String [ ] > input ) { <nl> + return input . getValue ( ) ; <nl> } <nl> } ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / LazyRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / LazyRequest . java <nl> new file mode 100644 <nl> index 0000000 . . d7e9514 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / LazyRequest . java <nl> @ @ - 0 , 0 + 1 , 91 @ @ <nl> + package com . github . dreamhead . moco . model ; <nl> + <nl> + import com . google . common . base . Supplier ; <nl> + import com . google . common . base . Suppliers ; <nl> + import io . netty . handler . codec . http . FullHttpRequest ; <nl> + import io . netty . handler . codec . http . HttpHeaders ; <nl> + import io . netty . handler . codec . http . QueryStringDecoder ; <nl> + <nl> + import java . nio . charset . Charset ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . google . common . base . Strings . isNullOrEmpty ; <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> + <nl> + public class LazyRequest extends Request { <nl> + private final FullHttpRequest request ; <nl> + private final Supplier < Map < String , String > > headersSupplier ; <nl> + private final Supplier < Map < String , String > > queriesSupplier ; <nl> + private final Supplier < String > contentSupplier ; <nl> + <nl> + public LazyRequest ( FullHttpRequest request ) { <nl> + this . request = request ; <nl> + this . queriesSupplier = queriesSupplier ( request . getUri ( ) ) ; <nl> + this . headersSupplier = headersSupplier ( request . headers ( ) ) ; <nl> + this . contentSupplier = contentSupplier ( request ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Map < String , String > getQueries ( ) { <nl> + return this . queriesSupplier . get ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getMethod ( ) { <nl> + return request . getMethod ( ) . name ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getVersion ( ) { <nl> + return request . getProtocolVersion ( ) . text ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getContent ( ) { <nl> + return contentSupplier . get ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Map < String , String > getHeaders ( ) { <nl> + return headersSupplier . get ( ) ; <nl> + } <nl> + <nl> + private Supplier < Map < String , String > > queriesSupplier ( final String uri ) { <nl> + return Suppliers . memoize ( new Supplier < Map < String , String > > ( ) { <nl> + @ Override <nl> + public Map < String , String > get ( ) { <nl> + Map < String , String > queries = newHashMap ( ) ; <nl> + <nl> + QueryStringDecoder decoder = new QueryStringDecoder ( uri ) ; <nl> + for ( Map . Entry < String , List < String > > entry : decoder . parameters ( ) . entrySet ( ) ) { <nl> + queries . put ( entry . getKey ( ) , entry . getValue ( ) . get ( 0 ) ) ; <nl> + } <nl> + return queries ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private Supplier < Map < String , String > > headersSupplier ( final HttpHeaders headers ) { <nl> + return Suppliers . memoize ( new Supplier < Map < String , String > > ( ) { <nl> + @ Override <nl> + public Map < String , String > get ( ) { <nl> + Map < String , String > headers = newHashMap ( ) ; <nl> + for ( Map . Entry < String , String > entry : request . headers ( ) ) { <nl> + headers . put ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + return headers ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private Supplier < String > contentSupplier ( final FullHttpRequest request ) { <nl> + return Suppliers . memoize ( new Supplier < String > ( ) { <nl> + @ Override <nl> + public String get ( ) { <nl> + String text = request . content ( ) . toString ( Charset . defaultCharset ( ) ) ; <nl> + return isNullOrEmpty ( text ) ? null : text ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index e7c491a . . fe2eb9f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . resource . reader ; <nl> <nl> - import com . github . dreamhead . moco . model . MessageFactory ; <nl> + import com . github . dreamhead . moco . model . LazyRequest ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import freemarker . cache . StringTemplateLoader ; <nl> import freemarker . core . ParseException ; <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> Template template = cfg . getTemplate ( " template " ) ; <nl> ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; <nl> Writer writer = new OutputStreamWriter ( stream ) ; <nl> - template . process ( of ( " req " , MessageFactory . createRequest ( request ) ) , writer ) ; <nl> + template . process ( of ( " req " , new LazyRequest ( request ) ) , writer ) ; <nl> return stream . toByteArray ( ) ; <nl> } catch ( ParseException e ) { <nl> logger . info ( " Template is { } " , templateSource ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 index 62ecb09 . . ea75ca9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . HttpRequestExtractor ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableList ; 
 
 import java . util . Map ; 
 
 @ @ - 24 , 6 + 25 , 7 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { 
 String [ ] extractedValues = from ( request . getHeaders ( ) . entrySet ( ) ) 
 . filter ( isForHeaderName ( name ) ) 
 . transform ( toValue ( ) ) 
 + . transformAndConcat ( arrayAsIterable ( ) ) 
 . toArray ( String . class ) ; 
 
 if ( extractedValues . length > 0 ) { 
 @ @ - 33 , 12 + 35 , 20 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { 
 return absent ( ) ; 
 } 
 
 - / / TO FLAT 
 - private Function < Map . Entry < String , String [ ] > , String > toValue ( ) { 
 - return new Function < Map . Entry < String , String [ ] > , String > ( ) { 
 + private Function < String [ ] , Iterable < String > > arrayAsIterable ( ) { 
 + return new Function < String [ ] , Iterable < String > > ( ) { 
 @ Override 
 - public String apply ( final Map . Entry < String , String [ ] > input ) { 
 - return input . getValue ( ) [ 0 ] ; 
 + public Iterable < String > apply ( final String [ ] input ) { 
 + return ImmutableList . copyOf ( input ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private Function < Map . Entry < String , String [ ] > , String [ ] > toValue ( ) { 
 + return new Function < Map . Entry < String , String [ ] > , String [ ] > ( ) { 
 + @ Override 
 + public String [ ] apply ( final Map . Entry < String , String [ ] > input ) { 
 + return input . getValue ( ) ; 
 } 
 } ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / LazyRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / LazyRequest . java 
 new file mode 100644 
 index 0000000 . . d7e9514 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / LazyRequest . java 
 @ @ - 0 , 0 + 1 , 91 @ @ 
 + package com . github . dreamhead . moco . model ; 
 + 
 + import com . google . common . base . Supplier ; 
 + import com . google . common . base . Suppliers ; 
 + import io . netty . handler . codec . http . FullHttpRequest ; 
 + import io . netty . handler . codec . http . HttpHeaders ; 
 + import io . netty . handler . codec . http . QueryStringDecoder ; 
 + 
 + import java . nio . charset . Charset ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import static com . google . common . base . Strings . isNullOrEmpty ; 
 + import static com . google . common . collect . Maps . newHashMap ; 
 + 
 + public class LazyRequest extends Request { 
 + private final FullHttpRequest request ; 
 + private final Supplier < Map < String , String > > headersSupplier ; 
 + private final Supplier < Map < String , String > > queriesSupplier ; 
 + private final Supplier < String > contentSupplier ; 
 + 
 + public LazyRequest ( FullHttpRequest request ) { 
 + this . request = request ; 
 + this . queriesSupplier = queriesSupplier ( request . getUri ( ) ) ; 
 + this . headersSupplier = headersSupplier ( request . headers ( ) ) ; 
 + this . contentSupplier = contentSupplier ( request ) ; 
 + } 
 + 
 + @ Override 
 + public Map < String , String > getQueries ( ) { 
 + return this . queriesSupplier . get ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getMethod ( ) { 
 + return request . getMethod ( ) . name ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getVersion ( ) { 
 + return request . getProtocolVersion ( ) . text ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getContent ( ) { 
 + return contentSupplier . get ( ) ; 
 + } 
 + 
 + @ Override 
 + public Map < String , String > getHeaders ( ) { 
 + return headersSupplier . get ( ) ; 
 + } 
 + 
 + private Supplier < Map < String , String > > queriesSupplier ( final String uri ) { 
 + return Suppliers . memoize ( new Supplier < Map < String , String > > ( ) { 
 + @ Override 
 + public Map < String , String > get ( ) { 
 + Map < String , String > queries = newHashMap ( ) ; 
 + 
 + QueryStringDecoder decoder = new QueryStringDecoder ( uri ) ; 
 + for ( Map . Entry < String , List < String > > entry : decoder . parameters ( ) . entrySet ( ) ) { 
 + queries . put ( entry . getKey ( ) , entry . getValue ( ) . get ( 0 ) ) ; 
 + } 
 + return queries ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private Supplier < Map < String , String > > headersSupplier ( final HttpHeaders headers ) { 
 + return Suppliers . memoize ( new Supplier < Map < String , String > > ( ) { 
 + @ Override 
 + public Map < String , String > get ( ) { 
 + Map < String , String > headers = newHashMap ( ) ; 
 + for ( Map . Entry < String , String > entry : request . headers ( ) ) { 
 + headers . put ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + return headers ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private Supplier < String > contentSupplier ( final FullHttpRequest request ) { 
 + return Suppliers . memoize ( new Supplier < String > ( ) { 
 + @ Override 
 + public String get ( ) { 
 + String text = request . content ( ) . toString ( Charset . defaultCharset ( ) ) ; 
 + return isNullOrEmpty ( text ) ? null : text ; 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 index e7c491a . . fe2eb9f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . resource . reader ; 
 
 - import com . github . dreamhead . moco . model . MessageFactory ; 
 + import com . github . dreamhead . moco . model . LazyRequest ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import freemarker . cache . StringTemplateLoader ; 
 import freemarker . core . ParseException ; 
 @ @ - 50 , 7 + 50 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { 
 Template template = cfg . getTemplate ( " template " ) ; 
 ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; 
 Writer writer = new OutputStreamWriter ( stream ) ; 
 - template . process ( of ( " req " , MessageFactory . createRequest ( request ) ) , writer ) ; 
 + template . process ( of ( " req " , new LazyRequest ( request ) ) , writer ) ; 
 return stream . toByteArray ( ) ; 
 } catch ( ParseException e ) { 
 logger . info ( " Template is { } " , templateSource ) ;
