BLEU SCORE: 0.02931251013275449

TEST MSG: renamed join files in Files
GENERATED MSG: joined file without parent to pass windows tests

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index 948c0ed . . abf9c8d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 15 , 10 + 15 , 10 @ @ public final class Files { <nl> } <nl> <nl> private static String actualJoin ( final String path1 , final String path2 ) { <nl> - return joinedFile ( path1 , path2 ) . getPath ( ) ; <nl> + return joinFiles ( path1 , path2 ) . getPath ( ) ; <nl> } <nl> <nl> - private static File joinedFile ( final String path1 , final String path2 ) { <nl> + private static File joinFiles ( final String path1 , final String path2 ) { <nl> checkNotNull ( path2 ) ; <nl> <nl> if ( path1 = = null ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index 38af00d . . 9206dd0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 2 , 6 + 2 , 8 @ @ package com . github . dreamhead . moco . util ; <nl> <nl> import java . io . File ; <nl> <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + <nl> public class Files { <nl> public static String join ( String path1 , String path2 , String . . . paths ) { <nl> String finalPath = actualJoin ( path1 , path2 ) ; <nl> @ @ - 13 , 9 + 15 , 17 @ @ public class Files { <nl> } <nl> <nl> private static String actualJoin ( String path1 , String path2 ) { <nl> - File file1 = new File ( path1 ) ; <nl> - File file2 = new File ( file1 , path2 ) ; <nl> - return file2 . getPath ( ) ; <nl> + return joinedFile ( path1 , path2 ) . getPath ( ) ; <nl> + } <nl> + <nl> + private static File joinedFile ( String path1 , String path2 ) { <nl> + checkNotNull ( path2 ) ; <nl> + <nl> + if ( path1 = = null ) { <nl> + return new File ( path2 ) ; <nl> + } <nl> + <nl> + return new File ( new File ( path1 ) , path2 ) ; <nl> } <nl> <nl> private Files ( ) { } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> index 1cf8575 . . 2d9fffc 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ public class GlobalSetting { <nl> private String env ; <nl> <nl> public String getInclude ( ) { <nl> - return fileRoot ! = null ? join ( fileRoot , include ) : include ; <nl> + return join ( fileRoot , include ) ; <nl> } <nl> <nl> public String getContext ( ) {

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 index 948c0ed . . abf9c8d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 15 , 10 + 15 , 10 @ @ public final class Files { 
 } 
 
 private static String actualJoin ( final String path1 , final String path2 ) { 
 - return joinedFile ( path1 , path2 ) . getPath ( ) ; 
 + return joinFiles ( path1 , path2 ) . getPath ( ) ; 
 } 
 
 - private static File joinedFile ( final String path1 , final String path2 ) { 
 + private static File joinFiles ( final String path1 , final String path2 ) { 
 checkNotNull ( path2 ) ; 
 
 if ( path1 = = null ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 index 38af00d . . 9206dd0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 2 , 6 + 2 , 8 @ @ package com . github . dreamhead . moco . util ; 
 
 import java . io . File ; 
 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 + 
 public class Files { 
 public static String join ( String path1 , String path2 , String . . . paths ) { 
 String finalPath = actualJoin ( path1 , path2 ) ; 
 @ @ - 13 , 9 + 15 , 17 @ @ public class Files { 
 } 
 
 private static String actualJoin ( String path1 , String path2 ) { 
 - File file1 = new File ( path1 ) ; 
 - File file2 = new File ( file1 , path2 ) ; 
 - return file2 . getPath ( ) ; 
 + return joinedFile ( path1 , path2 ) . getPath ( ) ; 
 + } 
 + 
 + private static File joinedFile ( String path1 , String path2 ) { 
 + checkNotNull ( path2 ) ; 
 + 
 + if ( path1 = = null ) { 
 + return new File ( path2 ) ; 
 + } 
 + 
 + return new File ( new File ( path1 ) , path2 ) ; 
 } 
 
 private Files ( ) { } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 index 1cf8575 . . 2d9fffc 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 @ @ - 12 , 7 + 12 , 7 @ @ public class GlobalSetting { 
 private String env ; 
 
 public String getInclude ( ) { 
 - return fileRoot ! = null ? join ( fileRoot , include ) : include ; 
 + return join ( fileRoot , include ) ; 
 } 
 
 public String getContext ( ) {
