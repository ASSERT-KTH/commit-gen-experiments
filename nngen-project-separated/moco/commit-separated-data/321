BLEU SCORE: 0.23643540225079396

TEST MSG: renamed runner watcher to watcher
GENERATED MSG: changed runner monitor to watcher

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> deleted file mode 100644 <nl> index a6cd93a . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> + + + / dev / null <nl> @ @ - 1 , 25 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner ; <nl> - <nl> - import com . github . dreamhead . moco . runner . watcher . RunnerWatcher ; <nl> - <nl> - public class MonitorRunner implements Runner { <nl> - private final Runner runner ; <nl> - private final RunnerWatcher watcher ; <nl> - <nl> - public MonitorRunner ( final Runner runner , final RunnerWatcher watcher ) { <nl> - this . runner = runner ; <nl> - this . watcher = watcher ; <nl> - } <nl> - <nl> - @ Override <nl> - public void run ( ) { <nl> - this . runner . run ( ) ; <nl> - this . watcher . start ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - this . watcher . stop ( ) ; <nl> - this . runner . stop ( ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 7bf04be . . 88b6e82 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> - import com . github . dreamhead . moco . runner . watcher . RunnerWatcher ; <nl> + import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; <nl> import com . google . common . base . Optional ; <nl> <nl> @ @ - 40 , 15 + 40 , 15 @ @ public class RunnerFactory { <nl> final File settingsFile = new File ( startArgs . getSettings ( ) . get ( ) ) ; <nl> final FileRunner fileRunner = createSettingFileRunner ( settingsFile , startArgs ) ; <nl> final SettingRunner runner = ( SettingRunner ) fileRunner . getRunner ( ) ; <nl> - RunnerWatcher watcher = factory . createSettingWatcher ( settingsFile , <nl> + Watcher watcher = factory . createSettingWatcher ( settingsFile , <nl> runner . getFiles ( ) , fileRunner ) ; <nl> - return new MonitorRunner ( fileRunner , watcher ) ; <nl> + return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; <nl> final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs ) ; <nl> - RunnerWatcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; <nl> - return new MonitorRunner ( fileRunner , watcher ) ; <nl> + Watcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; <nl> + return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> index e4065dc . . 9e667b8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> @ @ - 2 , 12 + 2 , 13 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> <nl> - public class ShutdownRunner extends MonitorRunner { <nl> + public class ShutdownRunner extends WatcherRunner { <nl> private final ShutdownMocoRunnerWatcher monitor ; <nl> <nl> - public ShutdownRunner ( final Runner runner , final ShutdownMocoRunnerWatcher mocoRunnerMonitor ) { <nl> - super ( runner , mocoRunnerMonitor ) ; <nl> - this . monitor = mocoRunnerMonitor ; <nl> + public ShutdownRunner ( final Runner runner , <nl> + final ShutdownMocoRunnerWatcher watcher ) { <nl> + super ( runner , watcher ) ; <nl> + this . monitor = watcher ; <nl> } <nl> <nl> public int shutdownPort ( ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> new file mode 100644 <nl> index 0000000 . . 405c392 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> + <nl> + public class WatcherRunner implements Runner { <nl> + private final Runner runner ; <nl> + private final Watcher watcher ; <nl> + <nl> + public WatcherRunner ( final Runner runner , final Watcher watcher ) { <nl> + this . runner = runner ; <nl> + this . watcher = watcher ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) { <nl> + this . runner . run ( ) ; <nl> + this . watcher . start ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + this . watcher . stop ( ) ; <nl> + this . runner . stop ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> index 6d755ee . . bee968d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - public class CommonsIoWatcher implements RunnerWatcher { <nl> + public class CommonsIoWatcher implements Watcher { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcher . class ) ; <nl> <nl> private final FileAlterationMonitor monitor ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index 5be1b58 . . f533e49 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 15 , 11 + 15 , 11 @ @ import java . io . FileFilter ; <nl> import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - public class CommonsIoWatcherFactory implements WatcherFactory { <nl> + public class CommonsIoWatcherFactory implements FileWatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> <nl> @ Override <nl> - public RunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { <nl> if ( files . length = = 0 ) { <nl> throw new IllegalArgumentException ( " No file is specified " ) ; <nl> } <nl> @ @ - 33 , 14 + 33 , 14 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { <nl> return createFilesWatcher ( files , listener ) ; <nl> } <nl> <nl> - private RunnerWatcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> + private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { <nl> return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; <nl> } <nl> <nl> - private RunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> - return new CompositeRunnerWatcher ( from ( files ) . transform ( new Function < File , RunnerWatcher > ( ) { <nl> + private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> @ Override <nl> - public RunnerWatcher apply ( final File file ) { <nl> + public Watcher apply ( final File file ) { <nl> return createWatcher ( file , listener ) ; <nl> } <nl> } ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java <nl> deleted file mode 100644 <nl> index ff0def8 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 23 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - public class CompositeRunnerWatcher implements RunnerWatcher { <nl> - private final Iterable < RunnerWatcher > watchers ; <nl> - <nl> - public CompositeRunnerWatcher ( final Iterable < RunnerWatcher > watchers ) { <nl> - this . watchers = watchers ; <nl> - } <nl> - <nl> - @ Override <nl> - public void start ( ) { <nl> - for ( RunnerWatcher watcher : watchers ) { <nl> - watcher . start ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - for ( RunnerWatcher monitor : watchers ) { <nl> - monitor . stop ( ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 9f8641e <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java <nl> @ @ - 0 , 0 + 1 , 23 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public class CompositeWatcher implements Watcher { <nl> + private final Iterable < Watcher > watchers ; <nl> + <nl> + public CompositeWatcher ( final Iterable < Watcher > watchers ) { <nl> + this . watchers = watchers ; <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + for ( Watcher watcher : watchers ) { <nl> + watcher . start ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + for ( Watcher monitor : watchers ) { <nl> + monitor . stop ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . d190740 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public interface FileWatcherFactory { <nl> + Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> index 8ba8b70 . . 383d8d3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> @ @ - 8 , 7 + 8 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import java . io . File ; <nl> <nl> public class MonitorFactory { <nl> - private WatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> + private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort , <nl> @ @ - 21 , 13 + 21 , 13 @ @ public class MonitorFactory { <nl> } ) ; <nl> } <nl> <nl> - public RunnerWatcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> + public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { <nl> return factory . createWatcher ( fileRunner , file ) ; <nl> } <nl> <nl> - public RunnerWatcher createSettingWatcher ( final File settingsFile , <nl> - final Iterable < File > configurationFiles , <nl> - final FileRunner fileRunner ) { <nl> + public Watcher createSettingWatcher ( final File settingsFile , <nl> + final Iterable < File > configurationFiles , <nl> + final FileRunner fileRunner ) { <nl> ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java <nl> deleted file mode 100644 <nl> index 5a1cd90 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - public interface RunnerWatcher { <nl> - void start ( ) ; <nl> - void stop ( ) ; <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> index da43389 . . d1493b1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> @ @ - 18 , 7 + 18 , 7 @ @ import java . util . concurrent . Executors ; <nl> import static com . google . common . io . CharSource . wrap ; <nl> import static io . netty . channel . ChannelHandler . Sharable ; <nl> <nl> - public class ShutdownMocoRunnerWatcher implements RunnerWatcher { <nl> + public class ShutdownMocoRunnerWatcher implements Watcher { <nl> private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerWatcher . class ) ; <nl> private final MocoServer server = new MocoServer ( ) ; <nl> private final Optional < Integer > shutdownPort ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> index 50e5116 . . aae0fd2 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . runner . watcher ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - public class ThreadSafeRunnerWatcher implements RunnerWatcher { <nl> + public class ThreadSafeRunnerWatcher implements Watcher { <nl> public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> <nl> - private final RunnerWatcher watcher ; <nl> + private final Watcher watcher ; <nl> private boolean running = false ; <nl> <nl> - public ThreadSafeRunnerWatcher ( final RunnerWatcher watcher ) { <nl> + public ThreadSafeRunnerWatcher ( final Watcher watcher ) { <nl> this . watcher = watcher ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java <nl> new file mode 100644 <nl> index 0000000 . . 684a855 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public interface Watcher { <nl> + void start ( ) ; <nl> + void stop ( ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> deleted file mode 100644 <nl> index d833025 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . github . dreamhead . moco . runner . FileRunner ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public interface WatcherFactory { <nl> - RunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; <nl> - } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> deleted file mode 100644 <nl> index 3917b5f . . 0000000 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 111 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner ; <nl> - <nl> - import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; <nl> - import org . apache . http . conn . HttpHostConnectException ; <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . io . OutputStream ; <nl> - import java . net . ConnectException ; <nl> - import java . net . InetAddress ; <nl> - import java . net . Socket ; <nl> - <nl> - import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> - import static org . hamcrest . CoreMatchers . is ; <nl> - import static org . junit . Assert . assertThat ; <nl> - import static org . junit . Assert . fail ; <nl> - <nl> - public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { <nl> - private static final String SHUTDOWN _ MOCO _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; <nl> - private static final int SHUTDOWN _ PORT = 9527 ; <nl> - <nl> - @ Before <nl> - public void setup ( ) { <nl> - RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) <nl> - . withPort ( port ( ) ) <nl> - . withShutdownPort ( SHUTDOWN _ PORT ) <nl> - . withConfigurationFile ( " src / test / resources / foo . json " ) <nl> - . build ( ) ) ; <nl> - } <nl> - <nl> - @ Test ( expected = HttpHostConnectException . class ) <nl> - public void should _ shutdown _ runner _ by _ socket ( ) throws IOException { <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> - waitChangeHappens ( ) ; <nl> - helper . get ( root ( ) ) ; <nl> - } <nl> - <nl> - @ Test ( expected = ConnectException . class ) <nl> - public void should _ stop _ runner _ directly ( ) throws IOException { <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - runner . stop ( ) ; <nl> - <nl> - shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> - } <nl> - <nl> - @ Test ( expected = HttpHostConnectException . class ) <nl> - public void should _ stop _ runner _ via _ shutdown _ task ( ) throws IOException { <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - ShutdownTask task = new ShutdownTask ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - task . run ( new String [ ] { " - s " , Integer . toString ( SHUTDOWN _ PORT ) } ) ; <nl> - <nl> - waitChangeHappens ( ) ; <nl> - helper . get ( root ( ) ) ; <nl> - } <nl> - <nl> - private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { <nl> - Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; <nl> - socket . setSoLinger ( false , 0 ) ; <nl> - <nl> - OutputStream outputStream = socket . getOutputStream ( ) ; <nl> - outputStream . write ( ( shutdownMocoKey + " \ r \ n " ) . getBytes ( ) ) ; <nl> - <nl> - outputStream . flush ( ) ; <nl> - socket . close ( ) ; <nl> - } <nl> - <nl> - @ Test ( expected = HttpHostConnectException . class ) <nl> - public void should _ shutdown _ with _ shutdown _ port ( ) throws IOException { <nl> - RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; <nl> - runner . run ( ) ; <nl> - <nl> - try { <nl> - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> - } catch ( HttpHostConnectException e ) { <nl> - fail ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> - ShutdownRunner shutdownRunner = ( ShutdownRunner ) runner ; <nl> - int port = shutdownRunner . shutdownPort ( ) ; <nl> - shutdownMoco ( port , SHUTDOWN _ MOCO _ KEY ) ; <nl> - waitChangeHappens ( ) ; <nl> - helper . get ( root ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2e622d5 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + package com . github . dreamhead . moco . runner ; <nl> + <nl> + import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; <nl> + import org . apache . http . conn . HttpHostConnectException ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> + import java . net . ConnectException ; <nl> + import java . net . InetAddress ; <nl> + import java . net . Socket ; <nl> + <nl> + import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + public class ShutdownWatcherRunnerTest extends AbstractRunnerTest { <nl> + private static final String SHUTDOWN _ MOCO _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; <nl> + private static final int SHUTDOWN _ PORT = 9527 ; <nl> + <nl> + @ Before <nl> + public void setup ( ) { <nl> + RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( SHUTDOWN _ PORT ) <nl> + . withConfigurationFile ( " src / test / resources / foo . json " ) <nl> + . build ( ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ shutdown _ runner _ by _ socket ( ) throws IOException { <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> + waitChangeHappens ( ) ; <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = ConnectException . class ) <nl> + public void should _ stop _ runner _ directly ( ) throws IOException { <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + runner . stop ( ) ; <nl> + <nl> + shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ stop _ runner _ via _ shutdown _ task ( ) throws IOException { <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + ShutdownTask task = new ShutdownTask ( SHUTDOWN _ MOCO _ KEY ) ; <nl> + task . run ( new String [ ] { " - s " , Integer . toString ( SHUTDOWN _ PORT ) } ) ; <nl> + <nl> + waitChangeHappens ( ) ; <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + <nl> + private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { <nl> + Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; <nl> + socket . setSoLinger ( false , 0 ) ; <nl> + <nl> + OutputStream outputStream = socket . getOutputStream ( ) ; <nl> + outputStream . write ( ( shutdownMocoKey + " \ r \ n " ) . getBytes ( ) ) ; <nl> + <nl> + outputStream . flush ( ) ; <nl> + socket . close ( ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpHostConnectException . class ) <nl> + public void should _ shutdown _ with _ shutdown _ port ( ) throws IOException { <nl> + RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + try { <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + } catch ( HttpHostConnectException e ) { <nl> + fail ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + ShutdownRunner shutdownRunner = ( ShutdownRunner ) runner ; <nl> + int port = shutdownRunner . shutdownPort ( ) ; <nl> + shutdownMoco ( port , SHUTDOWN _ MOCO _ KEY ) ; <nl> + waitChangeHappens ( ) ; <nl> + helper . get ( root ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> index f87b9f0 . . 8d993a5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java <nl> @ @ - 1 , 25 + 1 , 25 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> - import com . github . dreamhead . moco . runner . monitor . MocoRunnerMonitor ; <nl> + import com . github . dreamhead . moco . runner . watcher . MocoRunnerWatcher ; <nl> <nl> public class MonitorRunner implements Runner { <nl> private final Runner runner ; <nl> - private final MocoRunnerMonitor mocoRunnerMonitor ; <nl> + private final MocoRunnerWatcher mocoRunnerWatcher ; <nl> <nl> - public MonitorRunner ( Runner runner , MocoRunnerMonitor mocoRunnerMonitor ) { <nl> + public MonitorRunner ( Runner runner , MocoRunnerWatcher mocoRunnerWatcher ) { <nl> this . runner = runner ; <nl> - this . mocoRunnerMonitor = mocoRunnerMonitor ; <nl> + this . mocoRunnerWatcher = mocoRunnerWatcher ; <nl> } <nl> <nl> @ Override <nl> public void run ( ) { <nl> this . runner . run ( ) ; <nl> - this . mocoRunnerMonitor . startMonitor ( ) ; <nl> + this . mocoRunnerWatcher . startMonitor ( ) ; <nl> } <nl> <nl> @ Override <nl> public void stop ( ) { <nl> - this . mocoRunnerMonitor . stopMonitor ( ) ; <nl> + this . mocoRunnerWatcher . stopMonitor ( ) ; <nl> this . runner . stop ( ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 8a79d48 . . ce93262 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 1 , 8 + 1 , 8 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . bootstrap . StartArgs ; <nl> - import com . github . dreamhead . moco . runner . monitor . MocoRunnerMonitor ; <nl> - import com . github . dreamhead . moco . runner . monitor . MonitorFactory ; <nl> + import com . github . dreamhead . moco . runner . watcher . MocoRunnerWatcher ; <nl> + import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . File ; <nl> @ @ - 24 , 7 + 24 , 7 @ @ public class RunnerFactory { <nl> } <nl> <nl> public ShutdownRunner createShutdownRunner ( final Runner runner , final Optional < Integer > shutdownPort , final String shutdownKey ) { <nl> - return new ShutdownRunner ( runner , monitorFactory . createShutdownMonitor ( runner , shutdownPort , shutdownKey ) ) ; <nl> + return new ShutdownRunner ( runner , monitorFactory . createShutdownWatcher ( runner , shutdownPort , shutdownKey ) ) ; <nl> } <nl> <nl> private Runner createDynamicRunner ( StartArgs startArgs ) { <nl> @ @ - 39 , 15 + 39 , 15 @ @ public class RunnerFactory { <nl> final File settingsFile = new File ( startArgs . getSettings ( ) . get ( ) ) ; <nl> final FileRunner fileRunner = createSettingFileRunner ( settingsFile , startArgs ) ; <nl> final SettingRunner runner = ( SettingRunner ) fileRunner . getRunner ( ) ; <nl> - MocoRunnerMonitor fileMocoRunnerMonitor = monitorFactory . createSettingMonitor ( settingsFile , runner . getFiles ( ) , fileRunner ) ; <nl> - return new MonitorRunner ( fileRunner , fileMocoRunnerMonitor ) ; <nl> + MocoRunnerWatcher fileMocoRunnerWatcher = monitorFactory . createSettingWatcher ( settingsFile , runner . getFiles ( ) , fileRunner ) ; <nl> + return new MonitorRunner ( fileRunner , fileMocoRunnerWatcher ) ; <nl> } <nl> <nl> private Runner createDynamicConfigurationRunner ( StartArgs startArgs ) { <nl> final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; <nl> final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs . getPort ( ) ) ; <nl> - MocoRunnerMonitor fileMocoRunnerMonitor = monitorFactory . createConfigurationMonitor ( configuration , fileRunner ) ; <nl> - return new MonitorRunner ( fileRunner , fileMocoRunnerMonitor ) ; <nl> + MocoRunnerWatcher fileMocoRunnerWatcher = monitorFactory . createConfigurationWatcher ( configuration , fileRunner ) ; <nl> + return new MonitorRunner ( fileRunner , fileMocoRunnerWatcher ) ; <nl> } <nl> <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> index 9e90473 . . ba17908 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java <nl> @ @ - 1 , 11 + 1 , 11 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> - import com . github . dreamhead . moco . runner . monitor . ShutdownMocoRunnerMonitor ; <nl> + import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> <nl> public class ShutdownRunner extends MonitorRunner { <nl> - private final ShutdownMocoRunnerMonitor monitor ; <nl> + private final ShutdownMocoRunnerWatcher monitor ; <nl> <nl> - public ShutdownRunner ( Runner runner , ShutdownMocoRunnerMonitor mocoRunnerMonitor ) { <nl> + public ShutdownRunner ( Runner runner , ShutdownMocoRunnerWatcher mocoRunnerMonitor ) { <nl> super ( runner , mocoRunnerMonitor ) ; <nl> this . monitor = mocoRunnerMonitor ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FileMocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FileMocoRunnerMonitor . java <nl> deleted file mode 100644 <nl> index 9243afc . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FileMocoRunnerMonitor . java <nl> + + + / dev / null <nl> @ @ - 1 , 60 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . monitor ; <nl> - <nl> - import org . apache . commons . io . monitor . FileAlterationListener ; <nl> - import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> - import org . apache . commons . io . monitor . FileAlterationObserver ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . FileFilter ; <nl> - <nl> - public class FileMocoRunnerMonitor implements MocoRunnerMonitor { <nl> - public static final int INTERVAL = 1000 ; <nl> - private static Logger logger = LoggerFactory . getLogger ( FileMocoRunnerMonitor . class ) ; <nl> - <nl> - private final FileAlterationMonitor monitor ; <nl> - private boolean running = false ; <nl> - <nl> - public FileMocoRunnerMonitor ( File file , FileAlterationListener listener ) { <nl> - this . monitor = monitorFile ( file , listener ) ; <nl> - } <nl> - <nl> - public synchronized void startMonitor ( ) { <nl> - try { <nl> - monitor . start ( ) ; <nl> - running = true ; <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Error found . " , e ) ; <nl> - } <nl> - } <nl> - <nl> - public synchronized void stopMonitor ( ) { <nl> - try { <nl> - if ( monitor ! = null & & running ) { <nl> - monitor . stop ( ) ; <nl> - running = false ; <nl> - } <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Error found . " , e ) ; <nl> - } <nl> - } <nl> - <nl> - private FileAlterationMonitor monitorFile ( File file , FileAlterationListener listener ) { <nl> - File parentFile = file . getParentFile ( ) ; <nl> - File directory = ( parentFile = = null ) ? new File ( " . " ) : parentFile ; <nl> - FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; <nl> - observer . addListener ( listener ) ; <nl> - <nl> - return new FileAlterationMonitor ( INTERVAL , observer ) ; <nl> - } <nl> - <nl> - private FileFilter sameFile ( final File file ) { <nl> - return new FileFilter ( ) { <nl> - @ Override <nl> - public boolean accept ( File detectedFile ) { <nl> - return file . getName ( ) . equals ( detectedFile . getName ( ) ) ; <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FilesMocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FilesMocoRunnerMonitor . java <nl> deleted file mode 100644 <nl> index 6e2d1db . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FilesMocoRunnerMonitor . java <nl> + + + / dev / null <nl> @ @ - 1 , 35 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . monitor ; <nl> - <nl> - import com . google . common . base . Function ; <nl> - import org . apache . commons . io . monitor . FileAlterationListener ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> - <nl> - public class FilesMocoRunnerMonitor implements MocoRunnerMonitor { <nl> - private final Iterable < FileMocoRunnerMonitor > monitors ; <nl> - <nl> - public FilesMocoRunnerMonitor ( Iterable < File > files , final FileAlterationListener listener ) { <nl> - this . monitors = from ( files ) . transform ( new Function < File , FileMocoRunnerMonitor > ( ) { <nl> - @ Override <nl> - public FileMocoRunnerMonitor apply ( File file ) { <nl> - return new FileMocoRunnerMonitor ( file , listener ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void startMonitor ( ) { <nl> - for ( FileMocoRunnerMonitor monitor : monitors ) { <nl> - monitor . startMonitor ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void stopMonitor ( ) { <nl> - for ( FileMocoRunnerMonitor monitor : monitors ) { <nl> - monitor . stopMonitor ( ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MocoRunnerMonitor . java <nl> deleted file mode 100644 <nl> index ea0bfae . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MocoRunnerMonitor . java <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . monitor ; <nl> - <nl> - public interface MocoRunnerMonitor { <nl> - void startMonitor ( ) ; <nl> - void stopMonitor ( ) ; <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MonitorFactory . java <nl> deleted file mode 100644 <nl> index fa66ee8 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MonitorFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 48 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . monitor ; <nl> - <nl> - import com . github . dreamhead . moco . runner . FileRunner ; <nl> - import com . github . dreamhead . moco . runner . Runner ; <nl> - import com . google . common . base . Optional ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public class MonitorFactory { <nl> - private static Logger logger = LoggerFactory . getLogger ( MonitorFactory . class ) ; <nl> - <nl> - public ShutdownMocoRunnerMonitor createShutdownMonitor ( final Runner runner , Optional < Integer > shutdownPort , String shutdownKey ) { <nl> - return new ShutdownMocoRunnerMonitor ( shutdownPort , shutdownKey , new ShutdownListener ( ) { <nl> - @ Override <nl> - public void onShutdown ( ) { <nl> - runner . stop ( ) ; <nl> - } <nl> - } ) ; <nl> - } <nl> - <nl> - public FileMocoRunnerMonitor createConfigurationMonitor ( final File configuration , final FileRunner fileRunner ) { <nl> - return new FileMocoRunnerMonitor ( configuration , createListener ( fileRunner ) ) ; <nl> - } <nl> - <nl> - public MocoRunnerMonitor createSettingMonitor ( final File settingsFile , final Iterable < File > configurationFiles , final FileRunner fileRunner ) { <nl> - ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> - return new FilesMocoRunnerMonitor ( files , createListener ( fileRunner ) ) ; <nl> - } <nl> - <nl> - private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { <nl> - return new FileAlterationListenerAdaptor ( ) { <nl> - @ Override <nl> - public void onFileChange ( File file ) { <nl> - logger . info ( " { } change detected . " , file . getName ( ) ) ; <nl> - try { <nl> - fileRunner . restart ( ) ; <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; <nl> - logger . error ( e . getMessage ( ) ) ; <nl> - } <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownListener . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownListener . java <nl> deleted file mode 100644 <nl> index a9e32f7 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownListener . java <nl> + + + / dev / null <nl> @ @ - 1 , 5 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . monitor ; <nl> - <nl> - public interface ShutdownListener { <nl> - void onShutdown ( ) ; <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownMocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownMocoRunnerMonitor . java <nl> deleted file mode 100644 <nl> index d5c87b8 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownMocoRunnerMonitor . java <nl> + + + / dev / null <nl> @ @ - 1 , 92 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . monitor ; <nl> - <nl> - import com . github . dreamhead . moco . internal . MocoServer ; <nl> - import com . google . common . base . Optional ; <nl> - import com . google . common . io . CharStreams ; <nl> - import com . google . common . io . InputSupplier ; <nl> - import io . netty . channel . ChannelHandlerContext ; <nl> - import io . netty . channel . ChannelInitializer ; <nl> - import io . netty . channel . ChannelPipeline ; <nl> - import io . netty . channel . SimpleChannelInboundHandler ; <nl> - import io . netty . channel . socket . SocketChannel ; <nl> - import io . netty . handler . codec . string . StringDecoder ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . io . Reader ; <nl> - import java . io . StringReader ; <nl> - <nl> - public class ShutdownMocoRunnerMonitor implements MocoRunnerMonitor { <nl> - private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerMonitor . class ) ; <nl> - private final MocoServer server = new MocoServer ( ) ; <nl> - private final Optional < Integer > shutdownPort ; <nl> - private final String shutdownKey ; <nl> - private final ShutdownListener shutdownListener ; <nl> - private int port ; <nl> - <nl> - public ShutdownMocoRunnerMonitor ( Optional < Integer > shutdownPort , String shutdownKey , ShutdownListener shutdownListener ) { <nl> - this . shutdownPort = shutdownPort ; <nl> - this . shutdownKey = shutdownKey ; <nl> - this . shutdownListener = shutdownListener ; <nl> - } <nl> - <nl> - public void startMonitor ( ) { <nl> - int port = server . start ( this . shutdownPort . or ( 0 ) , new ChannelInitializer < SocketChannel > ( ) { <nl> - @ Override <nl> - protected void initChannel ( SocketChannel ch ) throws Exception { <nl> - ChannelPipeline pipeline = ch . pipeline ( ) ; <nl> - pipeline . addLast ( " decoder " , new StringDecoder ( ) ) ; <nl> - pipeline . addLast ( " handler " , new ShutdownHandler ( ) ) ; <nl> - } <nl> - } ) ; <nl> - <nl> - this . port = port ; <nl> - <nl> - logger . info ( " Shutdown port is { } " , port ) ; <nl> - } <nl> - <nl> - public void stopMonitor ( ) { <nl> - server . stop ( ) ; <nl> - } <nl> - <nl> - public int port ( ) { <nl> - return port ; <nl> - } <nl> - <nl> - private class ShutdownHandler extends SimpleChannelInboundHandler < String > { <nl> - @ Override <nl> - protected void channelRead0 ( ChannelHandlerContext ctx , String msg ) throws Exception { <nl> - if ( shouldShutdown ( msg ) ) { <nl> - shutdownListener . onShutdown ( ) ; <nl> - shutdownMonitorSelf ( ) ; <nl> - } <nl> - } <nl> - <nl> - private void shutdownMonitorSelf ( ) { <nl> - new Thread ( new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - stopMonitor ( ) ; <nl> - } <nl> - } ) . start ( ) ; <nl> - } <nl> - <nl> - private boolean shouldShutdown ( String message ) { <nl> - try { <nl> - return shutdownKey . equals ( CharStreams . readFirstLine ( toSuppiler ( message ) ) ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - private InputSupplier < Reader > toSuppiler ( final String content ) { <nl> - return new InputSupplier < Reader > ( ) { <nl> - @ Override <nl> - public Reader getInput ( ) throws IOException { <nl> - return new StringReader ( content ) ; <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileMocoRunnerWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 05e3da9 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileMocoRunnerWatcher . java <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import org . apache . commons . io . monitor . FileAlterationListener ; <nl> + import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> + import org . apache . commons . io . monitor . FileAlterationObserver ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileFilter ; <nl> + <nl> + public class FileMocoRunnerWatcher implements MocoRunnerWatcher { <nl> + public static final int INTERVAL = 1000 ; <nl> + private static Logger logger = LoggerFactory . getLogger ( FileMocoRunnerWatcher . class ) ; <nl> + <nl> + private final FileAlterationMonitor monitor ; <nl> + private boolean running = false ; <nl> + <nl> + public FileMocoRunnerWatcher ( File file , FileAlterationListener listener ) { <nl> + this . monitor = monitorFile ( file , listener ) ; <nl> + } <nl> + <nl> + public synchronized void startMonitor ( ) { <nl> + try { <nl> + monitor . start ( ) ; <nl> + running = true ; <nl> + } catch ( Exception e ) { <nl> + logger . error ( " Error found . " , e ) ; <nl> + } <nl> + } <nl> + <nl> + public synchronized void stopMonitor ( ) { <nl> + try { <nl> + if ( monitor ! = null & & running ) { <nl> + monitor . stop ( ) ; <nl> + running = false ; <nl> + } <nl> + } catch ( Exception e ) { <nl> + logger . error ( " Error found . " , e ) ; <nl> + } <nl> + } <nl> + <nl> + private FileAlterationMonitor monitorFile ( File file , FileAlterationListener listener ) { <nl> + File parentFile = file . getParentFile ( ) ; <nl> + File directory = ( parentFile = = null ) ? new File ( " . " ) : parentFile ; <nl> + FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; <nl> + observer . addListener ( listener ) ; <nl> + <nl> + return new FileAlterationMonitor ( INTERVAL , observer ) ; <nl> + } <nl> + <nl> + private FileFilter sameFile ( final File file ) { <nl> + return new FileFilter ( ) { <nl> + @ Override <nl> + public boolean accept ( File detectedFile ) { <nl> + return file . getName ( ) . equals ( detectedFile . getName ( ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 32bc84e <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + import org . apache . commons . io . monitor . FileAlterationListener ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { <nl> + private final Iterable < FileMocoRunnerWatcher > monitors ; <nl> + <nl> + public FilesMocoRunnerWatcher ( Iterable < File > files , final FileAlterationListener listener ) { <nl> + this . monitors = from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { <nl> + @ Override <nl> + public FileMocoRunnerWatcher apply ( File file ) { <nl> + return new FileMocoRunnerWatcher ( file , listener ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void startMonitor ( ) { <nl> + for ( FileMocoRunnerWatcher monitor : monitors ) { <nl> + monitor . startMonitor ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void stopMonitor ( ) { <nl> + for ( FileMocoRunnerWatcher monitor : monitors ) { <nl> + monitor . stopMonitor ( ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MocoRunnerWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 40ac06f <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MocoRunnerWatcher . java <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public interface MocoRunnerWatcher { <nl> + void startMonitor ( ) ; <nl> + void stopMonitor ( ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 7ff46f9 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . runner . FileRunner ; <nl> + import com . github . dreamhead . moco . runner . Runner ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class MonitorFactory { <nl> + private static Logger logger = LoggerFactory . getLogger ( MonitorFactory . class ) ; <nl> + <nl> + public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , Optional < Integer > shutdownPort , String shutdownKey ) { <nl> + return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { <nl> + @ Override <nl> + public void onShutdown ( ) { <nl> + runner . stop ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + public FileMocoRunnerWatcher createConfigurationWatcher ( final File configuration , final FileRunner fileRunner ) { <nl> + return new FileMocoRunnerWatcher ( configuration , createListener ( fileRunner ) ) ; <nl> + } <nl> + <nl> + public MocoRunnerWatcher createSettingWatcher ( final File settingsFile , final Iterable < File > configurationFiles , final FileRunner fileRunner ) { <nl> + ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; <nl> + return new FilesMocoRunnerWatcher ( files , createListener ( fileRunner ) ) ; <nl> + } <nl> + <nl> + private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { <nl> + return new FileAlterationListenerAdaptor ( ) { <nl> + @ Override <nl> + public void onFileChange ( File file ) { <nl> + logger . info ( " { } change detected . " , file . getName ( ) ) ; <nl> + try { <nl> + fileRunner . restart ( ) ; <nl> + } catch ( Exception e ) { <nl> + logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; <nl> + logger . error ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownListener . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownListener . java <nl> new file mode 100644 <nl> index 0000000 . . 22c4945 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownListener . java <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + public interface ShutdownListener { <nl> + void onShutdown ( ) ; <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . 293f436 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java <nl> @ @ - 0 , 0 + 1 , 92 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . internal . MocoServer ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . io . CharStreams ; <nl> + import com . google . common . io . InputSupplier ; <nl> + import io . netty . channel . ChannelHandlerContext ; <nl> + import io . netty . channel . ChannelInitializer ; <nl> + import io . netty . channel . ChannelPipeline ; <nl> + import io . netty . channel . SimpleChannelInboundHandler ; <nl> + import io . netty . channel . socket . SocketChannel ; <nl> + import io . netty . handler . codec . string . StringDecoder ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . Reader ; <nl> + import java . io . StringReader ; <nl> + <nl> + public class ShutdownMocoRunnerWatcher implements MocoRunnerWatcher { <nl> + private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerWatcher . class ) ; <nl> + private final MocoServer server = new MocoServer ( ) ; <nl> + private final Optional < Integer > shutdownPort ; <nl> + private final String shutdownKey ; <nl> + private final ShutdownListener shutdownListener ; <nl> + private int port ; <nl> + <nl> + public ShutdownMocoRunnerWatcher ( Optional < Integer > shutdownPort , String shutdownKey , ShutdownListener shutdownListener ) { <nl> + this . shutdownPort = shutdownPort ; <nl> + this . shutdownKey = shutdownKey ; <nl> + this . shutdownListener = shutdownListener ; <nl> + } <nl> + <nl> + public void startMonitor ( ) { <nl> + int port = server . start ( this . shutdownPort . or ( 0 ) , new ChannelInitializer < SocketChannel > ( ) { <nl> + @ Override <nl> + protected void initChannel ( SocketChannel ch ) throws Exception { <nl> + ChannelPipeline pipeline = ch . pipeline ( ) ; <nl> + pipeline . addLast ( " decoder " , new StringDecoder ( ) ) ; <nl> + pipeline . addLast ( " handler " , new ShutdownHandler ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + this . port = port ; <nl> + <nl> + logger . info ( " Shutdown port is { } " , port ) ; <nl> + } <nl> + <nl> + public void stopMonitor ( ) { <nl> + server . stop ( ) ; <nl> + } <nl> + <nl> + public int port ( ) { <nl> + return port ; <nl> + } <nl> + <nl> + private class ShutdownHandler extends SimpleChannelInboundHandler < String > { <nl> + @ Override <nl> + protected void channelRead0 ( ChannelHandlerContext ctx , String msg ) throws Exception { <nl> + if ( shouldShutdown ( msg ) ) { <nl> + shutdownListener . onShutdown ( ) ; <nl> + shutdownMonitorSelf ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void shutdownMonitorSelf ( ) { <nl> + new Thread ( new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + stopMonitor ( ) ; <nl> + } <nl> + } ) . start ( ) ; <nl> + } <nl> + <nl> + private boolean shouldShutdown ( String message ) { <nl> + try { <nl> + return shutdownKey . equals ( CharStreams . readFirstLine ( toSuppiler ( message ) ) ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private InputSupplier < Reader > toSuppiler ( final String content ) { <nl> + return new InputSupplier < Reader > ( ) { <nl> + @ Override <nl> + public Reader getInput ( ) throws IOException { <nl> + return new StringReader ( content ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> index 6963fef . . 5ff3c2e 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> - import com . github . dreamhead . moco . runner . monitor . FileMocoRunnerMonitor ; <nl> + import com . github . dreamhead . moco . runner . watcher . FileMocoRunnerWatcher ; <nl> import com . github . dreamhead . moco . util . Idles ; <nl> import org . junit . After ; <nl> <nl> @ @ - 23 , 7 + 23 , 7 @ @ public abstract class AbstractRunnerTest { <nl> <nl> protected void waitChangeHappens ( ) { <nl> try { <nl> - Idles . idle ( FileMocoRunnerMonitor . INTERVAL * 2 ) ; <nl> + Idles . idle ( FileMocoRunnerWatcher . INTERVAL * 2 ) ; <nl> } catch ( Exception e ) { <nl> fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; <nl> }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java 
 deleted file mode 100644 
 index a6cd93a . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java 
 + + + / dev / null 
 @ @ - 1 , 25 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner ; 
 - 
 - import com . github . dreamhead . moco . runner . watcher . RunnerWatcher ; 
 - 
 - public class MonitorRunner implements Runner { 
 - private final Runner runner ; 
 - private final RunnerWatcher watcher ; 
 - 
 - public MonitorRunner ( final Runner runner , final RunnerWatcher watcher ) { 
 - this . runner = runner ; 
 - this . watcher = watcher ; 
 - } 
 - 
 - @ Override 
 - public void run ( ) { 
 - this . runner . run ( ) ; 
 - this . watcher . start ( ) ; 
 - } 
 - 
 - @ Override 
 - public void stop ( ) { 
 - this . watcher . stop ( ) ; 
 - this . runner . stop ( ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index 7bf04be . . 88b6e82 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 - import com . github . dreamhead . moco . runner . watcher . RunnerWatcher ; 
 + import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; 
 import com . google . common . base . Optional ; 
 
 @ @ - 40 , 15 + 40 , 15 @ @ public class RunnerFactory { 
 final File settingsFile = new File ( startArgs . getSettings ( ) . get ( ) ) ; 
 final FileRunner fileRunner = createSettingFileRunner ( settingsFile , startArgs ) ; 
 final SettingRunner runner = ( SettingRunner ) fileRunner . getRunner ( ) ; 
 - RunnerWatcher watcher = factory . createSettingWatcher ( settingsFile , 
 + Watcher watcher = factory . createSettingWatcher ( settingsFile , 
 runner . getFiles ( ) , fileRunner ) ; 
 - return new MonitorRunner ( fileRunner , watcher ) ; 
 + return new WatcherRunner ( fileRunner , watcher ) ; 
 } 
 
 private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { 
 final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; 
 final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs ) ; 
 - RunnerWatcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; 
 - return new MonitorRunner ( fileRunner , watcher ) ; 
 + Watcher watcher = factory . createConfigurationWatcher ( configuration , fileRunner ) ; 
 + return new WatcherRunner ( fileRunner , watcher ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java 
 index e4065dc . . 9e667b8 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java 
 @ @ - 2 , 12 + 2 , 13 @ @ package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; 
 
 - public class ShutdownRunner extends MonitorRunner { 
 + public class ShutdownRunner extends WatcherRunner { 
 private final ShutdownMocoRunnerWatcher monitor ; 
 
 - public ShutdownRunner ( final Runner runner , final ShutdownMocoRunnerWatcher mocoRunnerMonitor ) { 
 - super ( runner , mocoRunnerMonitor ) ; 
 - this . monitor = mocoRunnerMonitor ; 
 + public ShutdownRunner ( final Runner runner , 
 + final ShutdownMocoRunnerWatcher watcher ) { 
 + super ( runner , watcher ) ; 
 + this . monitor = watcher ; 
 } 
 
 public int shutdownPort ( ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java 
 new file mode 100644 
 index 0000000 . . 405c392 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package com . github . dreamhead . moco . runner ; 
 + 
 + import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 + 
 + public class WatcherRunner implements Runner { 
 + private final Runner runner ; 
 + private final Watcher watcher ; 
 + 
 + public WatcherRunner ( final Runner runner , final Watcher watcher ) { 
 + this . runner = runner ; 
 + this . watcher = watcher ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) { 
 + this . runner . run ( ) ; 
 + this . watcher . start ( ) ; 
 + } 
 + 
 + @ Override 
 + public void stop ( ) { 
 + this . watcher . stop ( ) ; 
 + this . runner . stop ( ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java 
 index 6d755ee . . bee968d 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java 
 @ @ - 4 , 7 + 4 , 7 @ @ import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - public class CommonsIoWatcher implements RunnerWatcher { 
 + public class CommonsIoWatcher implements Watcher { 
 private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcher . class ) ; 
 
 private final FileAlterationMonitor monitor ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 index 5be1b58 . . f533e49 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 15 , 11 + 15 , 11 @ @ import java . io . FileFilter ; 
 import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; 
 import static com . google . common . collect . FluentIterable . from ; 
 
 - public class CommonsIoWatcherFactory implements WatcherFactory { 
 + public class CommonsIoWatcherFactory implements FileWatcherFactory { 
 private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; 
 
 @ Override 
 - public RunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 + public Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) { 
 if ( files . length = = 0 ) { 
 throw new IllegalArgumentException ( " No file is specified " ) ; 
 } 
 @ @ - 33 , 14 + 33 , 14 @ @ public class CommonsIoWatcherFactory implements WatcherFactory { 
 return createFilesWatcher ( files , listener ) ; 
 } 
 
 - private RunnerWatcher createWatcher ( final File file , final FileAlterationListener listener ) { 
 + private Watcher createWatcher ( final File file , final FileAlterationListener listener ) { 
 return new ThreadSafeRunnerWatcher ( new CommonsIoWatcher ( monitorFile ( file , listener ) ) ) ; 
 } 
 
 - private RunnerWatcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { 
 - return new CompositeRunnerWatcher ( from ( files ) . transform ( new Function < File , RunnerWatcher > ( ) { 
 + private Watcher createFilesWatcher ( final File [ ] files , final FileAlterationListener listener ) { 
 + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 @ Override 
 - public RunnerWatcher apply ( final File file ) { 
 + public Watcher apply ( final File file ) { 
 return createWatcher ( file , listener ) ; 
 } 
 } ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java 
 deleted file mode 100644 
 index ff0def8 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeRunnerWatcher . java 
 + + + / dev / null 
 @ @ - 1 , 23 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - public class CompositeRunnerWatcher implements RunnerWatcher { 
 - private final Iterable < RunnerWatcher > watchers ; 
 - 
 - public CompositeRunnerWatcher ( final Iterable < RunnerWatcher > watchers ) { 
 - this . watchers = watchers ; 
 - } 
 - 
 - @ Override 
 - public void start ( ) { 
 - for ( RunnerWatcher watcher : watchers ) { 
 - watcher . start ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void stop ( ) { 
 - for ( RunnerWatcher monitor : watchers ) { 
 - monitor . stop ( ) ; 
 - } 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java 
 new file mode 100644 
 index 0000000 . . 9f8641e 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CompositeWatcher . java 
 @ @ - 0 , 0 + 1 , 23 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + public class CompositeWatcher implements Watcher { 
 + private final Iterable < Watcher > watchers ; 
 + 
 + public CompositeWatcher ( final Iterable < Watcher > watchers ) { 
 + this . watchers = watchers ; 
 + } 
 + 
 + @ Override 
 + public void start ( ) { 
 + for ( Watcher watcher : watchers ) { 
 + watcher . start ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void stop ( ) { 
 + for ( Watcher monitor : watchers ) { 
 + monitor . stop ( ) ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java 
 new file mode 100644 
 index 0000000 . . d190740 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileWatcherFactory . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + 
 + import java . io . File ; 
 + 
 + public interface FileWatcherFactory { 
 + Watcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 index 8ba8b70 . . 383d8d3 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 @ @ - 8 , 7 + 8 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import java . io . File ; 
 
 public class MonitorFactory { 
 - private WatcherFactory factory = new CommonsIoWatcherFactory ( ) ; 
 + private FileWatcherFactory factory = new CommonsIoWatcherFactory ( ) ; 
 
 public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , 
 final Optional < Integer > shutdownPort , 
 @ @ - 21 , 13 + 21 , 13 @ @ public class MonitorFactory { 
 } ) ; 
 } 
 
 - public RunnerWatcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { 
 + public Watcher createConfigurationWatcher ( final File file , final FileRunner fileRunner ) { 
 return factory . createWatcher ( fileRunner , file ) ; 
 } 
 
 - public RunnerWatcher createSettingWatcher ( final File settingsFile , 
 - final Iterable < File > configurationFiles , 
 - final FileRunner fileRunner ) { 
 + public Watcher createSettingWatcher ( final File settingsFile , 
 + final Iterable < File > configurationFiles , 
 + final FileRunner fileRunner ) { 
 ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; 
 return factory . createWatcher ( fileRunner , files . toArray ( new File [ files . size ( ) ] ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java 
 deleted file mode 100644 
 index 5a1cd90 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / RunnerWatcher . java 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - public interface RunnerWatcher { 
 - void start ( ) ; 
 - void stop ( ) ; 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java 
 index da43389 . . d1493b1 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java 
 @ @ - 18 , 7 + 18 , 7 @ @ import java . util . concurrent . Executors ; 
 import static com . google . common . io . CharSource . wrap ; 
 import static io . netty . channel . ChannelHandler . Sharable ; 
 
 - public class ShutdownMocoRunnerWatcher implements RunnerWatcher { 
 + public class ShutdownMocoRunnerWatcher implements Watcher { 
 private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerWatcher . class ) ; 
 private final MocoServer server = new MocoServer ( ) ; 
 private final Optional < Integer > shutdownPort ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java 
 index 50e5116 . . aae0fd2 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java 
 @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . runner . watcher ; 
 
 import java . util . concurrent . TimeUnit ; 
 
 - public class ThreadSafeRunnerWatcher implements RunnerWatcher { 
 + public class ThreadSafeRunnerWatcher implements Watcher { 
 public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; 
 
 - private final RunnerWatcher watcher ; 
 + private final Watcher watcher ; 
 private boolean running = false ; 
 
 - public ThreadSafeRunnerWatcher ( final RunnerWatcher watcher ) { 
 + public ThreadSafeRunnerWatcher ( final Watcher watcher ) { 
 this . watcher = watcher ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java 
 new file mode 100644 
 index 0000000 . . 684a855 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watcher . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + public interface Watcher { 
 + void start ( ) ; 
 + void stop ( ) ; 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 deleted file mode 100644 
 index d833025 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import com . github . dreamhead . moco . runner . FileRunner ; 
 - 
 - import java . io . File ; 
 - 
 - public interface WatcherFactory { 
 - RunnerWatcher createWatcher ( final FileRunner fileRunner , final File . . . files ) ; 
 - } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java 
 deleted file mode 100644 
 index 3917b5f . . 0000000 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownMonitorRunnerTest . java 
 + + + / dev / null 
 @ @ - 1 , 111 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner ; 
 - 
 - import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; 
 - import org . apache . http . conn . HttpHostConnectException ; 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - import java . io . IOException ; 
 - import java . io . OutputStream ; 
 - import java . net . ConnectException ; 
 - import java . net . InetAddress ; 
 - import java . net . Socket ; 
 - 
 - import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 - import static org . hamcrest . CoreMatchers . is ; 
 - import static org . junit . Assert . assertThat ; 
 - import static org . junit . Assert . fail ; 
 - 
 - public class ShutdownMonitorRunnerTest extends AbstractRunnerTest { 
 - private static final String SHUTDOWN _ MOCO _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; 
 - private static final int SHUTDOWN _ PORT = 9527 ; 
 - 
 - @ Before 
 - public void setup ( ) { 
 - RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; 
 - runner = factory . createRunner ( httpArgs ( ) 
 - . withPort ( port ( ) ) 
 - . withShutdownPort ( SHUTDOWN _ PORT ) 
 - . withConfigurationFile ( " src / test / resources / foo . json " ) 
 - . build ( ) ) ; 
 - } 
 - 
 - @ Test ( expected = HttpHostConnectException . class ) 
 - public void should _ shutdown _ runner _ by _ socket ( ) throws IOException { 
 - runner . run ( ) ; 
 - 
 - try { 
 - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 - } catch ( HttpHostConnectException e ) { 
 - fail ( e . getMessage ( ) ) ; 
 - } 
 - 
 - shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; 
 - waitChangeHappens ( ) ; 
 - helper . get ( root ( ) ) ; 
 - } 
 - 
 - @ Test ( expected = ConnectException . class ) 
 - public void should _ stop _ runner _ directly ( ) throws IOException { 
 - runner . run ( ) ; 
 - 
 - try { 
 - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 - } catch ( HttpHostConnectException e ) { 
 - fail ( e . getMessage ( ) ) ; 
 - } 
 - 
 - runner . stop ( ) ; 
 - 
 - shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; 
 - } 
 - 
 - @ Test ( expected = HttpHostConnectException . class ) 
 - public void should _ stop _ runner _ via _ shutdown _ task ( ) throws IOException { 
 - runner . run ( ) ; 
 - 
 - try { 
 - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 - } catch ( HttpHostConnectException e ) { 
 - fail ( e . getMessage ( ) ) ; 
 - } 
 - 
 - ShutdownTask task = new ShutdownTask ( SHUTDOWN _ MOCO _ KEY ) ; 
 - task . run ( new String [ ] { " - s " , Integer . toString ( SHUTDOWN _ PORT ) } ) ; 
 - 
 - waitChangeHappens ( ) ; 
 - helper . get ( root ( ) ) ; 
 - } 
 - 
 - private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { 
 - Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; 
 - socket . setSoLinger ( false , 0 ) ; 
 - 
 - OutputStream outputStream = socket . getOutputStream ( ) ; 
 - outputStream . write ( ( shutdownMocoKey + " \ r \ n " ) . getBytes ( ) ) ; 
 - 
 - outputStream . flush ( ) ; 
 - socket . close ( ) ; 
 - } 
 - 
 - @ Test ( expected = HttpHostConnectException . class ) 
 - public void should _ shutdown _ with _ shutdown _ port ( ) throws IOException { 
 - RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; 
 - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; 
 - runner . run ( ) ; 
 - 
 - try { 
 - assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 - } catch ( HttpHostConnectException e ) { 
 - fail ( e . getMessage ( ) ) ; 
 - } 
 - 
 - ShutdownRunner shutdownRunner = ( ShutdownRunner ) runner ; 
 - int port = shutdownRunner . shutdownPort ( ) ; 
 - shutdownMoco ( port , SHUTDOWN _ MOCO _ KEY ) ; 
 - waitChangeHappens ( ) ; 
 - helper . get ( root ( ) ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java 
 new file mode 100644 
 index 0000000 . . 2e622d5 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / ShutdownWatcherRunnerTest . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + package com . github . dreamhead . moco . runner ; 
 + 
 + import com . github . dreamhead . moco . bootstrap . tasks . ShutdownTask ; 
 + import org . apache . http . conn . HttpHostConnectException ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + import java . io . OutputStream ; 
 + import java . net . ConnectException ; 
 + import java . net . InetAddress ; 
 + import java . net . Socket ; 
 + 
 + import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + import static org . junit . Assert . fail ; 
 + 
 + public class ShutdownWatcherRunnerTest extends AbstractRunnerTest { 
 + private static final String SHUTDOWN _ MOCO _ KEY = " _ SHUTDOWN _ MOCO _ KEY " ; 
 + private static final int SHUTDOWN _ PORT = 9527 ; 
 + 
 + @ Before 
 + public void setup ( ) { 
 + RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; 
 + runner = factory . createRunner ( httpArgs ( ) 
 + . withPort ( port ( ) ) 
 + . withShutdownPort ( SHUTDOWN _ PORT ) 
 + . withConfigurationFile ( " src / test / resources / foo . json " ) 
 + . build ( ) ) ; 
 + } 
 + 
 + @ Test ( expected = HttpHostConnectException . class ) 
 + public void should _ shutdown _ runner _ by _ socket ( ) throws IOException { 
 + runner . run ( ) ; 
 + 
 + try { 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + } catch ( HttpHostConnectException e ) { 
 + fail ( e . getMessage ( ) ) ; 
 + } 
 + 
 + shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; 
 + waitChangeHappens ( ) ; 
 + helper . get ( root ( ) ) ; 
 + } 
 + 
 + @ Test ( expected = ConnectException . class ) 
 + public void should _ stop _ runner _ directly ( ) throws IOException { 
 + runner . run ( ) ; 
 + 
 + try { 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + } catch ( HttpHostConnectException e ) { 
 + fail ( e . getMessage ( ) ) ; 
 + } 
 + 
 + runner . stop ( ) ; 
 + 
 + shutdownMoco ( SHUTDOWN _ PORT , SHUTDOWN _ MOCO _ KEY ) ; 
 + } 
 + 
 + @ Test ( expected = HttpHostConnectException . class ) 
 + public void should _ stop _ runner _ via _ shutdown _ task ( ) throws IOException { 
 + runner . run ( ) ; 
 + 
 + try { 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + } catch ( HttpHostConnectException e ) { 
 + fail ( e . getMessage ( ) ) ; 
 + } 
 + 
 + ShutdownTask task = new ShutdownTask ( SHUTDOWN _ MOCO _ KEY ) ; 
 + task . run ( new String [ ] { " - s " , Integer . toString ( SHUTDOWN _ PORT ) } ) ; 
 + 
 + waitChangeHappens ( ) ; 
 + helper . get ( root ( ) ) ; 
 + } 
 + 
 + private void shutdownMoco ( final int shutdownPort , final String shutdownMocoKey ) throws IOException { 
 + Socket socket = new Socket ( InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) , shutdownPort ) ; 
 + socket . setSoLinger ( false , 0 ) ; 
 + 
 + OutputStream outputStream = socket . getOutputStream ( ) ; 
 + outputStream . write ( ( shutdownMocoKey + " \ r \ n " ) . getBytes ( ) ) ; 
 + 
 + outputStream . flush ( ) ; 
 + socket . close ( ) ; 
 + } 
 + 
 + @ Test ( expected = HttpHostConnectException . class ) 
 + public void should _ shutdown _ with _ shutdown _ port ( ) throws IOException { 
 + RunnerFactory factory = new RunnerFactory ( SHUTDOWN _ MOCO _ KEY ) ; 
 + runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withConfigurationFile ( " src / test / resources / foo . json " ) . build ( ) ) ; 
 + runner . run ( ) ; 
 + 
 + try { 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + } catch ( HttpHostConnectException e ) { 
 + fail ( e . getMessage ( ) ) ; 
 + } 
 + 
 + ShutdownRunner shutdownRunner = ( ShutdownRunner ) runner ; 
 + int port = shutdownRunner . shutdownPort ( ) ; 
 + shutdownMoco ( port , SHUTDOWN _ MOCO _ KEY ) ; 
 + waitChangeHappens ( ) ; 
 + helper . get ( root ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java 
 index f87b9f0 . . 8d993a5 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / MonitorRunner . java 
 @ @ - 1 , 25 + 1 , 25 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 - import com . github . dreamhead . moco . runner . monitor . MocoRunnerMonitor ; 
 + import com . github . dreamhead . moco . runner . watcher . MocoRunnerWatcher ; 
 
 public class MonitorRunner implements Runner { 
 private final Runner runner ; 
 - private final MocoRunnerMonitor mocoRunnerMonitor ; 
 + private final MocoRunnerWatcher mocoRunnerWatcher ; 
 
 - public MonitorRunner ( Runner runner , MocoRunnerMonitor mocoRunnerMonitor ) { 
 + public MonitorRunner ( Runner runner , MocoRunnerWatcher mocoRunnerWatcher ) { 
 this . runner = runner ; 
 - this . mocoRunnerMonitor = mocoRunnerMonitor ; 
 + this . mocoRunnerWatcher = mocoRunnerWatcher ; 
 } 
 
 @ Override 
 public void run ( ) { 
 this . runner . run ( ) ; 
 - this . mocoRunnerMonitor . startMonitor ( ) ; 
 + this . mocoRunnerWatcher . startMonitor ( ) ; 
 } 
 
 @ Override 
 public void stop ( ) { 
 - this . mocoRunnerMonitor . stopMonitor ( ) ; 
 + this . mocoRunnerWatcher . stopMonitor ( ) ; 
 this . runner . stop ( ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index 8a79d48 . . ce93262 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 1 , 8 + 1 , 8 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . bootstrap . StartArgs ; 
 - import com . github . dreamhead . moco . runner . monitor . MocoRunnerMonitor ; 
 - import com . github . dreamhead . moco . runner . monitor . MonitorFactory ; 
 + import com . github . dreamhead . moco . runner . watcher . MocoRunnerWatcher ; 
 + import com . github . dreamhead . moco . runner . watcher . MonitorFactory ; 
 import com . google . common . base . Optional ; 
 
 import java . io . File ; 
 @ @ - 24 , 7 + 24 , 7 @ @ public class RunnerFactory { 
 } 
 
 public ShutdownRunner createShutdownRunner ( final Runner runner , final Optional < Integer > shutdownPort , final String shutdownKey ) { 
 - return new ShutdownRunner ( runner , monitorFactory . createShutdownMonitor ( runner , shutdownPort , shutdownKey ) ) ; 
 + return new ShutdownRunner ( runner , monitorFactory . createShutdownWatcher ( runner , shutdownPort , shutdownKey ) ) ; 
 } 
 
 private Runner createDynamicRunner ( StartArgs startArgs ) { 
 @ @ - 39 , 15 + 39 , 15 @ @ public class RunnerFactory { 
 final File settingsFile = new File ( startArgs . getSettings ( ) . get ( ) ) ; 
 final FileRunner fileRunner = createSettingFileRunner ( settingsFile , startArgs ) ; 
 final SettingRunner runner = ( SettingRunner ) fileRunner . getRunner ( ) ; 
 - MocoRunnerMonitor fileMocoRunnerMonitor = monitorFactory . createSettingMonitor ( settingsFile , runner . getFiles ( ) , fileRunner ) ; 
 - return new MonitorRunner ( fileRunner , fileMocoRunnerMonitor ) ; 
 + MocoRunnerWatcher fileMocoRunnerWatcher = monitorFactory . createSettingWatcher ( settingsFile , runner . getFiles ( ) , fileRunner ) ; 
 + return new MonitorRunner ( fileRunner , fileMocoRunnerWatcher ) ; 
 } 
 
 private Runner createDynamicConfigurationRunner ( StartArgs startArgs ) { 
 final File configuration = new File ( startArgs . getConfigurationFile ( ) . get ( ) ) ; 
 final FileRunner fileRunner = createConfigurationFileRunner ( configuration , startArgs . getPort ( ) ) ; 
 - MocoRunnerMonitor fileMocoRunnerMonitor = monitorFactory . createConfigurationMonitor ( configuration , fileRunner ) ; 
 - return new MonitorRunner ( fileRunner , fileMocoRunnerMonitor ) ; 
 + MocoRunnerWatcher fileMocoRunnerWatcher = monitorFactory . createConfigurationWatcher ( configuration , fileRunner ) ; 
 + return new MonitorRunner ( fileRunner , fileMocoRunnerWatcher ) ; 
 } 
 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java 
 index 9e90473 . . ba17908 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / ShutdownRunner . java 
 @ @ - 1 , 11 + 1 , 11 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 - import com . github . dreamhead . moco . runner . monitor . ShutdownMocoRunnerMonitor ; 
 + import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; 
 
 public class ShutdownRunner extends MonitorRunner { 
 - private final ShutdownMocoRunnerMonitor monitor ; 
 + private final ShutdownMocoRunnerWatcher monitor ; 
 
 - public ShutdownRunner ( Runner runner , ShutdownMocoRunnerMonitor mocoRunnerMonitor ) { 
 + public ShutdownRunner ( Runner runner , ShutdownMocoRunnerWatcher mocoRunnerMonitor ) { 
 super ( runner , mocoRunnerMonitor ) ; 
 this . monitor = mocoRunnerMonitor ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FileMocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FileMocoRunnerMonitor . java 
 deleted file mode 100644 
 index 9243afc . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FileMocoRunnerMonitor . java 
 + + + / dev / null 
 @ @ - 1 , 60 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . monitor ; 
 - 
 - import org . apache . commons . io . monitor . FileAlterationListener ; 
 - import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 - import org . apache . commons . io . monitor . FileAlterationObserver ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import java . io . File ; 
 - import java . io . FileFilter ; 
 - 
 - public class FileMocoRunnerMonitor implements MocoRunnerMonitor { 
 - public static final int INTERVAL = 1000 ; 
 - private static Logger logger = LoggerFactory . getLogger ( FileMocoRunnerMonitor . class ) ; 
 - 
 - private final FileAlterationMonitor monitor ; 
 - private boolean running = false ; 
 - 
 - public FileMocoRunnerMonitor ( File file , FileAlterationListener listener ) { 
 - this . monitor = monitorFile ( file , listener ) ; 
 - } 
 - 
 - public synchronized void startMonitor ( ) { 
 - try { 
 - monitor . start ( ) ; 
 - running = true ; 
 - } catch ( Exception e ) { 
 - logger . error ( " Error found . " , e ) ; 
 - } 
 - } 
 - 
 - public synchronized void stopMonitor ( ) { 
 - try { 
 - if ( monitor ! = null & & running ) { 
 - monitor . stop ( ) ; 
 - running = false ; 
 - } 
 - } catch ( Exception e ) { 
 - logger . error ( " Error found . " , e ) ; 
 - } 
 - } 
 - 
 - private FileAlterationMonitor monitorFile ( File file , FileAlterationListener listener ) { 
 - File parentFile = file . getParentFile ( ) ; 
 - File directory = ( parentFile = = null ) ? new File ( " . " ) : parentFile ; 
 - FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; 
 - observer . addListener ( listener ) ; 
 - 
 - return new FileAlterationMonitor ( INTERVAL , observer ) ; 
 - } 
 - 
 - private FileFilter sameFile ( final File file ) { 
 - return new FileFilter ( ) { 
 - @ Override 
 - public boolean accept ( File detectedFile ) { 
 - return file . getName ( ) . equals ( detectedFile . getName ( ) ) ; 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FilesMocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FilesMocoRunnerMonitor . java 
 deleted file mode 100644 
 index 6e2d1db . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / FilesMocoRunnerMonitor . java 
 + + + / dev / null 
 @ @ - 1 , 35 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . monitor ; 
 - 
 - import com . google . common . base . Function ; 
 - import org . apache . commons . io . monitor . FileAlterationListener ; 
 - 
 - import java . io . File ; 
 - 
 - import static com . google . common . collect . FluentIterable . from ; 
 - 
 - public class FilesMocoRunnerMonitor implements MocoRunnerMonitor { 
 - private final Iterable < FileMocoRunnerMonitor > monitors ; 
 - 
 - public FilesMocoRunnerMonitor ( Iterable < File > files , final FileAlterationListener listener ) { 
 - this . monitors = from ( files ) . transform ( new Function < File , FileMocoRunnerMonitor > ( ) { 
 - @ Override 
 - public FileMocoRunnerMonitor apply ( File file ) { 
 - return new FileMocoRunnerMonitor ( file , listener ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - @ Override 
 - public void startMonitor ( ) { 
 - for ( FileMocoRunnerMonitor monitor : monitors ) { 
 - monitor . startMonitor ( ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void stopMonitor ( ) { 
 - for ( FileMocoRunnerMonitor monitor : monitors ) { 
 - monitor . stopMonitor ( ) ; 
 - } 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MocoRunnerMonitor . java 
 deleted file mode 100644 
 index ea0bfae . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MocoRunnerMonitor . java 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . monitor ; 
 - 
 - public interface MocoRunnerMonitor { 
 - void startMonitor ( ) ; 
 - void stopMonitor ( ) ; 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MonitorFactory . java 
 deleted file mode 100644 
 index fa66ee8 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / MonitorFactory . java 
 + + + / dev / null 
 @ @ - 1 , 48 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . monitor ; 
 - 
 - import com . github . dreamhead . moco . runner . FileRunner ; 
 - import com . github . dreamhead . moco . runner . Runner ; 
 - import com . google . common . base . Optional ; 
 - import com . google . common . collect . ImmutableList ; 
 - import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import java . io . File ; 
 - 
 - public class MonitorFactory { 
 - private static Logger logger = LoggerFactory . getLogger ( MonitorFactory . class ) ; 
 - 
 - public ShutdownMocoRunnerMonitor createShutdownMonitor ( final Runner runner , Optional < Integer > shutdownPort , String shutdownKey ) { 
 - return new ShutdownMocoRunnerMonitor ( shutdownPort , shutdownKey , new ShutdownListener ( ) { 
 - @ Override 
 - public void onShutdown ( ) { 
 - runner . stop ( ) ; 
 - } 
 - } ) ; 
 - } 
 - 
 - public FileMocoRunnerMonitor createConfigurationMonitor ( final File configuration , final FileRunner fileRunner ) { 
 - return new FileMocoRunnerMonitor ( configuration , createListener ( fileRunner ) ) ; 
 - } 
 - 
 - public MocoRunnerMonitor createSettingMonitor ( final File settingsFile , final Iterable < File > configurationFiles , final FileRunner fileRunner ) { 
 - ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; 
 - return new FilesMocoRunnerMonitor ( files , createListener ( fileRunner ) ) ; 
 - } 
 - 
 - private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { 
 - return new FileAlterationListenerAdaptor ( ) { 
 - @ Override 
 - public void onFileChange ( File file ) { 
 - logger . info ( " { } change detected . " , file . getName ( ) ) ; 
 - try { 
 - fileRunner . restart ( ) ; 
 - } catch ( Exception e ) { 
 - logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; 
 - logger . error ( e . getMessage ( ) ) ; 
 - } 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownListener . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownListener . java 
 deleted file mode 100644 
 index a9e32f7 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownListener . java 
 + + + / dev / null 
 @ @ - 1 , 5 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . monitor ; 
 - 
 - public interface ShutdownListener { 
 - void onShutdown ( ) ; 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownMocoRunnerMonitor . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownMocoRunnerMonitor . java 
 deleted file mode 100644 
 index d5c87b8 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / monitor / ShutdownMocoRunnerMonitor . java 
 + + + / dev / null 
 @ @ - 1 , 92 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . monitor ; 
 - 
 - import com . github . dreamhead . moco . internal . MocoServer ; 
 - import com . google . common . base . Optional ; 
 - import com . google . common . io . CharStreams ; 
 - import com . google . common . io . InputSupplier ; 
 - import io . netty . channel . ChannelHandlerContext ; 
 - import io . netty . channel . ChannelInitializer ; 
 - import io . netty . channel . ChannelPipeline ; 
 - import io . netty . channel . SimpleChannelInboundHandler ; 
 - import io . netty . channel . socket . SocketChannel ; 
 - import io . netty . handler . codec . string . StringDecoder ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - import java . io . IOException ; 
 - import java . io . Reader ; 
 - import java . io . StringReader ; 
 - 
 - public class ShutdownMocoRunnerMonitor implements MocoRunnerMonitor { 
 - private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerMonitor . class ) ; 
 - private final MocoServer server = new MocoServer ( ) ; 
 - private final Optional < Integer > shutdownPort ; 
 - private final String shutdownKey ; 
 - private final ShutdownListener shutdownListener ; 
 - private int port ; 
 - 
 - public ShutdownMocoRunnerMonitor ( Optional < Integer > shutdownPort , String shutdownKey , ShutdownListener shutdownListener ) { 
 - this . shutdownPort = shutdownPort ; 
 - this . shutdownKey = shutdownKey ; 
 - this . shutdownListener = shutdownListener ; 
 - } 
 - 
 - public void startMonitor ( ) { 
 - int port = server . start ( this . shutdownPort . or ( 0 ) , new ChannelInitializer < SocketChannel > ( ) { 
 - @ Override 
 - protected void initChannel ( SocketChannel ch ) throws Exception { 
 - ChannelPipeline pipeline = ch . pipeline ( ) ; 
 - pipeline . addLast ( " decoder " , new StringDecoder ( ) ) ; 
 - pipeline . addLast ( " handler " , new ShutdownHandler ( ) ) ; 
 - } 
 - } ) ; 
 - 
 - this . port = port ; 
 - 
 - logger . info ( " Shutdown port is { } " , port ) ; 
 - } 
 - 
 - public void stopMonitor ( ) { 
 - server . stop ( ) ; 
 - } 
 - 
 - public int port ( ) { 
 - return port ; 
 - } 
 - 
 - private class ShutdownHandler extends SimpleChannelInboundHandler < String > { 
 - @ Override 
 - protected void channelRead0 ( ChannelHandlerContext ctx , String msg ) throws Exception { 
 - if ( shouldShutdown ( msg ) ) { 
 - shutdownListener . onShutdown ( ) ; 
 - shutdownMonitorSelf ( ) ; 
 - } 
 - } 
 - 
 - private void shutdownMonitorSelf ( ) { 
 - new Thread ( new Runnable ( ) { 
 - @ Override 
 - public void run ( ) { 
 - stopMonitor ( ) ; 
 - } 
 - } ) . start ( ) ; 
 - } 
 - 
 - private boolean shouldShutdown ( String message ) { 
 - try { 
 - return shutdownKey . equals ( CharStreams . readFirstLine ( toSuppiler ( message ) ) ) ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - private InputSupplier < Reader > toSuppiler ( final String content ) { 
 - return new InputSupplier < Reader > ( ) { 
 - @ Override 
 - public Reader getInput ( ) throws IOException { 
 - return new StringReader ( content ) ; 
 - } 
 - } ; 
 - } 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileMocoRunnerWatcher . java 
 new file mode 100644 
 index 0000000 . . 05e3da9 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FileMocoRunnerWatcher . java 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import org . apache . commons . io . monitor . FileAlterationListener ; 
 + import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 + import org . apache . commons . io . monitor . FileAlterationObserver ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . File ; 
 + import java . io . FileFilter ; 
 + 
 + public class FileMocoRunnerWatcher implements MocoRunnerWatcher { 
 + public static final int INTERVAL = 1000 ; 
 + private static Logger logger = LoggerFactory . getLogger ( FileMocoRunnerWatcher . class ) ; 
 + 
 + private final FileAlterationMonitor monitor ; 
 + private boolean running = false ; 
 + 
 + public FileMocoRunnerWatcher ( File file , FileAlterationListener listener ) { 
 + this . monitor = monitorFile ( file , listener ) ; 
 + } 
 + 
 + public synchronized void startMonitor ( ) { 
 + try { 
 + monitor . start ( ) ; 
 + running = true ; 
 + } catch ( Exception e ) { 
 + logger . error ( " Error found . " , e ) ; 
 + } 
 + } 
 + 
 + public synchronized void stopMonitor ( ) { 
 + try { 
 + if ( monitor ! = null & & running ) { 
 + monitor . stop ( ) ; 
 + running = false ; 
 + } 
 + } catch ( Exception e ) { 
 + logger . error ( " Error found . " , e ) ; 
 + } 
 + } 
 + 
 + private FileAlterationMonitor monitorFile ( File file , FileAlterationListener listener ) { 
 + File parentFile = file . getParentFile ( ) ; 
 + File directory = ( parentFile = = null ) ? new File ( " . " ) : parentFile ; 
 + FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; 
 + observer . addListener ( listener ) ; 
 + 
 + return new FileAlterationMonitor ( INTERVAL , observer ) ; 
 + } 
 + 
 + private FileFilter sameFile ( final File file ) { 
 + return new FileFilter ( ) { 
 + @ Override 
 + public boolean accept ( File detectedFile ) { 
 + return file . getName ( ) . equals ( detectedFile . getName ( ) ) ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java 
 new file mode 100644 
 index 0000000 . . 32bc84e 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / FilesMocoRunnerWatcher . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . google . common . base . Function ; 
 + import org . apache . commons . io . monitor . FileAlterationListener ; 
 + 
 + import java . io . File ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 + public class FilesMocoRunnerWatcher implements MocoRunnerWatcher { 
 + private final Iterable < FileMocoRunnerWatcher > monitors ; 
 + 
 + public FilesMocoRunnerWatcher ( Iterable < File > files , final FileAlterationListener listener ) { 
 + this . monitors = from ( files ) . transform ( new Function < File , FileMocoRunnerWatcher > ( ) { 
 + @ Override 
 + public FileMocoRunnerWatcher apply ( File file ) { 
 + return new FileMocoRunnerWatcher ( file , listener ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Override 
 + public void startMonitor ( ) { 
 + for ( FileMocoRunnerWatcher monitor : monitors ) { 
 + monitor . startMonitor ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void stopMonitor ( ) { 
 + for ( FileMocoRunnerWatcher monitor : monitors ) { 
 + monitor . stopMonitor ( ) ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MocoRunnerWatcher . java 
 new file mode 100644 
 index 0000000 . . 40ac06f 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MocoRunnerWatcher . java 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + public interface MocoRunnerWatcher { 
 + void startMonitor ( ) ; 
 + void stopMonitor ( ) ; 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 new file mode 100644 
 index 0000000 . . 7ff46f9 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / MonitorFactory . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . runner . FileRunner ; 
 + import com . github . dreamhead . moco . runner . Runner ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableList ; 
 + import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . File ; 
 + 
 + public class MonitorFactory { 
 + private static Logger logger = LoggerFactory . getLogger ( MonitorFactory . class ) ; 
 + 
 + public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , Optional < Integer > shutdownPort , String shutdownKey ) { 
 + return new ShutdownMocoRunnerWatcher ( shutdownPort , shutdownKey , new ShutdownListener ( ) { 
 + @ Override 
 + public void onShutdown ( ) { 
 + runner . stop ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public FileMocoRunnerWatcher createConfigurationWatcher ( final File configuration , final FileRunner fileRunner ) { 
 + return new FileMocoRunnerWatcher ( configuration , createListener ( fileRunner ) ) ; 
 + } 
 + 
 + public MocoRunnerWatcher createSettingWatcher ( final File settingsFile , final Iterable < File > configurationFiles , final FileRunner fileRunner ) { 
 + ImmutableList < File > files = ImmutableList . < File > builder ( ) . add ( settingsFile ) . addAll ( configurationFiles ) . build ( ) ; 
 + return new FilesMocoRunnerWatcher ( files , createListener ( fileRunner ) ) ; 
 + } 
 + 
 + private FileAlterationListenerAdaptor createListener ( final FileRunner fileRunner ) { 
 + return new FileAlterationListenerAdaptor ( ) { 
 + @ Override 
 + public void onFileChange ( File file ) { 
 + logger . info ( " { } change detected . " , file . getName ( ) ) ; 
 + try { 
 + fileRunner . restart ( ) ; 
 + } catch ( Exception e ) { 
 + logger . error ( " Fail to load configuration in { } . " , file . getName ( ) ) ; 
 + logger . error ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownListener . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownListener . java 
 new file mode 100644 
 index 0000000 . . 22c4945 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownListener . java 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + public interface ShutdownListener { 
 + void onShutdown ( ) ; 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java 
 new file mode 100644 
 index 0000000 . . 293f436 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ShutdownMocoRunnerWatcher . java 
 @ @ - 0 , 0 + 1 , 92 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . internal . MocoServer ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . io . CharStreams ; 
 + import com . google . common . io . InputSupplier ; 
 + import io . netty . channel . ChannelHandlerContext ; 
 + import io . netty . channel . ChannelInitializer ; 
 + import io . netty . channel . ChannelPipeline ; 
 + import io . netty . channel . SimpleChannelInboundHandler ; 
 + import io . netty . channel . socket . SocketChannel ; 
 + import io . netty . handler . codec . string . StringDecoder ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . io . IOException ; 
 + import java . io . Reader ; 
 + import java . io . StringReader ; 
 + 
 + public class ShutdownMocoRunnerWatcher implements MocoRunnerWatcher { 
 + private static Logger logger = LoggerFactory . getLogger ( ShutdownMocoRunnerWatcher . class ) ; 
 + private final MocoServer server = new MocoServer ( ) ; 
 + private final Optional < Integer > shutdownPort ; 
 + private final String shutdownKey ; 
 + private final ShutdownListener shutdownListener ; 
 + private int port ; 
 + 
 + public ShutdownMocoRunnerWatcher ( Optional < Integer > shutdownPort , String shutdownKey , ShutdownListener shutdownListener ) { 
 + this . shutdownPort = shutdownPort ; 
 + this . shutdownKey = shutdownKey ; 
 + this . shutdownListener = shutdownListener ; 
 + } 
 + 
 + public void startMonitor ( ) { 
 + int port = server . start ( this . shutdownPort . or ( 0 ) , new ChannelInitializer < SocketChannel > ( ) { 
 + @ Override 
 + protected void initChannel ( SocketChannel ch ) throws Exception { 
 + ChannelPipeline pipeline = ch . pipeline ( ) ; 
 + pipeline . addLast ( " decoder " , new StringDecoder ( ) ) ; 
 + pipeline . addLast ( " handler " , new ShutdownHandler ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + this . port = port ; 
 + 
 + logger . info ( " Shutdown port is { } " , port ) ; 
 + } 
 + 
 + public void stopMonitor ( ) { 
 + server . stop ( ) ; 
 + } 
 + 
 + public int port ( ) { 
 + return port ; 
 + } 
 + 
 + private class ShutdownHandler extends SimpleChannelInboundHandler < String > { 
 + @ Override 
 + protected void channelRead0 ( ChannelHandlerContext ctx , String msg ) throws Exception { 
 + if ( shouldShutdown ( msg ) ) { 
 + shutdownListener . onShutdown ( ) ; 
 + shutdownMonitorSelf ( ) ; 
 + } 
 + } 
 + 
 + private void shutdownMonitorSelf ( ) { 
 + new Thread ( new Runnable ( ) { 
 + @ Override 
 + public void run ( ) { 
 + stopMonitor ( ) ; 
 + } 
 + } ) . start ( ) ; 
 + } 
 + 
 + private boolean shouldShutdown ( String message ) { 
 + try { 
 + return shutdownKey . equals ( CharStreams . readFirstLine ( toSuppiler ( message ) ) ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private InputSupplier < Reader > toSuppiler ( final String content ) { 
 + return new InputSupplier < Reader > ( ) { 
 + @ Override 
 + public Reader getInput ( ) throws IOException { 
 + return new StringReader ( content ) ; 
 + } 
 + } ; 
 + } 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 index 6963fef . . 5ff3c2e 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 - import com . github . dreamhead . moco . runner . monitor . FileMocoRunnerMonitor ; 
 + import com . github . dreamhead . moco . runner . watcher . FileMocoRunnerWatcher ; 
 import com . github . dreamhead . moco . util . Idles ; 
 import org . junit . After ; 
 
 @ @ - 23 , 7 + 23 , 7 @ @ public abstract class AbstractRunnerTest { 
 
 protected void waitChangeHappens ( ) { 
 try { 
 - Idles . idle ( FileMocoRunnerMonitor . INTERVAL * 2 ) ; 
 + Idles . idle ( FileMocoRunnerWatcher . INTERVAL * 2 ) ; 
 } catch ( Exception e ) { 
 fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; 
 }
