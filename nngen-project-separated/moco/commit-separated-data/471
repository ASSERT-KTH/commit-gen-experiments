BLEU SCORE: 0.24446151121745052

TEST MSG: extracted merge server to base actual server
GENERATED MSG: made fields in base actual server private

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 1b3adc6 . . 43d7324 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 10 , 9 + 10 , 10 @ @ import com . github . dreamhead . moco . monitor . QuietMonitor ; <nl> import com . github . dreamhead . moco . monitor . Slf4jMonitor ; <nl> import com . github . dreamhead . moco . setting . HttpSetting ; <nl> import com . google . common . base . Optional ; <nl> + <nl> import static com . google . common . base . Optional . of ; <nl> <nl> - public class ActualHttpServer extends HttpConfiguration { <nl> + public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { <nl> private final Optional < HttpsCertificate > certificate ; <nl> <nl> protected ActualHttpServer ( final Optional < Integer > port , <nl> @ @ - 30 , 19 + 31 , 8 @ @ public class ActualHttpServer extends HttpConfiguration { <nl> return certificate ; <nl> } <nl> <nl> - public ActualHttpServer mergeServer ( final ActualHttpServer thatServer ) { <nl> - ActualHttpServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , <nl> - this . certificate . or ( thatServer . certificate ) ) ; <nl> - newServer . addSettings ( this . getSettings ( ) ) ; <nl> - newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> - <nl> - newServer . anySetting ( configuredMatcher ( ) , configured ( this . handler ) ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configured ( thatServer . handler ) ) ; <nl> - <nl> - newServer . addEvents ( this . eventTriggers ) ; <nl> - newServer . addEvents ( thatServer . eventTriggers ) ; <nl> - <nl> - return newServer ; <nl> + protected ActualHttpServer doCreateServer ( final ActualHttpServer thatServer ) { <nl> + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , this . certificate . or ( thatServer . certificate ) ) ; <nl> } <nl> <nl> private ActualHttpServer newBaseServer ( final Optional < Integer > port , final Optional < HttpsCertificate > certificate ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index 343afe1 . . 4c46c37 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import com . github . dreamhead . moco . setting . Setting ; <nl> import com . github . dreamhead . moco . setting . SocketSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> - public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting > implements SocketServer { <nl> + public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting , ActualSocketServer > implements SocketServer { <nl> private ActualSocketServer ( final Optional < Integer > port , final MocoMonitor monitor ) { <nl> super ( port , monitor , new MocoConfig [ 0 ] ) ; <nl> } <nl> @ @ - 30 , 18 + 30 , 9 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> return baseSetting ; <nl> } <nl> <nl> - public ActualSocketServer mergeServer ( final ActualSocketServer thatServer ) { <nl> - ActualSocketServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; <nl> - newServer . addSettings ( this . getSettings ( ) ) ; <nl> - newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> - <nl> - newServer . anySetting ( configuredMatcher ( ) , configured ( this . handler ) ) ; <nl> - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configured ( thatServer . handler ) ) ; <nl> - <nl> - newServer . addEvents ( this . eventTriggers ) ; <nl> - newServer . addEvents ( thatServer . eventTriggers ) ; <nl> - <nl> - return newServer ; <nl> + @ Override <nl> + protected ActualSocketServer doCreateServer ( final ActualSocketServer thatServer ) { <nl> + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; <nl> } <nl> <nl> private ActualSocketServer newBaseServer ( final Optional < Integer > thisPort ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index e5a7d6c . . 81fa992 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ import static com . github . dreamhead . moco . util . Configs . configItems ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> - public abstract class BaseActualServer < T extends ResponseSetting < T > > extends BaseServer < T > { <nl> + public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends BaseActualServer > extends BaseServer < T > { <nl> protected abstract Setting < T > newSetting ( final RequestMatcher matcher ) ; <nl> <nl> private final MocoConfig [ ] configs ; <nl> @ @ - 74 , 7 + 74 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas <nl> <nl> public Setting < T > getAnySetting ( ) { <nl> Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; <nl> - ResponseHandler configuredHandler = configured ( this . handler ) ; <nl> + ResponseHandler configuredHandler = configuredResponseHandler ( ) ; <nl> if ( configuredHandler ! = null ) { <nl> setting . response ( configuredHandler ) ; <nl> } <nl> @ @ - 120 , 4 + 120 , 25 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas <nl> protected RequestMatcher configuredMatcher ( ) { <nl> return configured ( this . matcher ) ; <nl> } <nl> + <nl> + public U mergeServer ( final U thatServer ) { <nl> + U newServer = doCreateServer ( thatServer ) ; <nl> + newServer . addSettings ( this . getSettings ( ) ) ; <nl> + newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> + <nl> + newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; <nl> + ResponseHandler configured = thatServer . configuredResponseHandler ( ) ; <nl> + newServer . anySetting ( thatServer . configuredMatcher ( ) , configured ) ; <nl> + <nl> + newServer . addEvents ( this . eventTriggers ) ; <nl> + newServer . addEvents ( thatServer . eventTriggers ) ; <nl> + <nl> + return newServer ; <nl> + } <nl> + <nl> + protected ResponseHandler configuredResponseHandler ( ) { <nl> + return configured ( this . handler ) ; <nl> + } <nl> + <nl> + protected abstract U doCreateServer ( final U thatServer ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> index f867ac4 . . e93cdc1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java <nl> @ @ - 5 , 15 + 5 , 15 @ @ import com . github . dreamhead . moco . Runner ; <nl> import io . netty . channel . Channel ; <nl> import io . netty . channel . ChannelInitializer ; <nl> <nl> - public abstract class BaseServerRunner < T extends ResponseSetting < T > > extends Runner { <nl> - protected abstract BaseActualServer < T > serverSetting ( ) ; <nl> + public abstract class BaseServerRunner < T extends ResponseSetting < T > , U extends BaseActualServer > extends Runner { <nl> + protected abstract BaseActualServer < T , U > serverSetting ( ) ; <nl> protected abstract ChannelInitializer < ? extends Channel > channelInitializer ( ) ; <nl> <nl> private final MocoServer server = new MocoServer ( ) ; <nl> <nl> @ Override <nl> public void start ( ) { <nl> - BaseActualServer < T > setting = serverSetting ( ) ; <nl> + BaseActualServer < T , U > setting = serverSetting ( ) ; <nl> int port = this . server . start ( setting . getPort ( ) . or ( 0 ) , channelInitializer ( ) ) ; <nl> setting . setPort ( port ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> index 4e7c26b . . f7db9aa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> @ @ - 27 , 7 + 27 , 8 @ @ import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> - public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSetting > implements HttpsServer { <nl> + public abstract class HttpConfiguration < T extends BaseActualServer > <nl> + extends BaseActualServer < HttpResponseSetting , T > implements HttpsServer { <nl> private final RedirectDelegate delegate = new RedirectDelegate ( ) ; <nl> <nl> protected HttpConfiguration ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java <nl> index 8e2a3d8 . . 42146d4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ import io . netty . channel . ChannelInitializer ; <nl> import io . netty . channel . ChannelPipeline ; <nl> import io . netty . channel . socket . SocketChannel ; <nl> <nl> - public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting > { <nl> + public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting , ActualSocketServer > { <nl> private final ActualSocketServer serverSetting ; <nl> <nl> public MocoSocketServer ( final ActualSocketServer serverSetting ) { <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting > { <nl> } <nl> <nl> @ Override <nl> - protected BaseActualServer < SocketResponseSetting > serverSetting ( ) { <nl> + protected ActualSocketServer serverSetting ( ) { <nl> return this . serverSetting ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 06b6493 . . 3b1a899 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 12 , 7 + 12 , 6 @ @ import com . github . dreamhead . moco . monitor . Slf4jMonitor ; <nl> import com . github . dreamhead . moco . setting . HttpSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> - import static com . github . dreamhead . moco . util . Configs . configItem ; <nl> import static com . google . common . base . Optional . absent ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> @ @ - 37 , 8 + 36 , 8 @ @ public class ActualHttpServer extends HttpConfiguration { <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> <nl> - newServer . anySetting ( configItem ( this . matcher , this . configs ) , configItem ( this . handler , this . configs ) ) ; <nl> - newServer . anySetting ( configItem ( thatServer . matcher , thatServer . configs ) , configItem ( thatServer . handler , thatServer . configs ) ) ; <nl> + newServer . anySetting ( configured ( this . matcher ) , configured ( this . handler ) ) ; <nl> + newServer . anySetting ( thatServer . configured ( thatServer . matcher ) , thatServer . configured ( thatServer . handler ) ) ; <nl> <nl> newServer . addEvents ( this . eventTriggers ) ; <nl> newServer . addEvents ( thatServer . eventTriggers ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index e6b1bcc . . 98cc5de 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 13 , 8 + 13 , 6 @ @ import com . github . dreamhead . moco . setting . Setting ; <nl> import com . github . dreamhead . moco . setting . SocketSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> - import static com . github . dreamhead . moco . util . Configs . configItem ; <nl> - <nl> public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting > implements SocketServer { <nl> private ActualSocketServer ( final Optional < Integer > port , final MocoMonitor monitor ) { <nl> super ( port , monitor , new MocoConfig [ 0 ] ) ; <nl> @ @ - 37 , 8 + 35 , 8 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> newServer . addSettings ( thatServer . getSettings ( ) ) ; <nl> <nl> - newServer . anySetting ( configItem ( this . matcher , this . configs ) , configItem ( this . handler , this . configs ) ) ; <nl> - newServer . anySetting ( configItem ( thatServer . matcher , thatServer . configs ) , configItem ( thatServer . handler , thatServer . configs ) ) ; <nl> + newServer . anySetting ( configured ( this . matcher ) , configured ( this . handler ) ) ; <nl> + newServer . anySetting ( thatServer . configured ( thatServer . matcher ) , thatServer . configured ( thatServer . handler ) ) ; <nl> <nl> newServer . addEvents ( this . eventTriggers ) ; <nl> newServer . addEvents ( thatServer . eventTriggers ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> index 0c07b01 . . 81a5f89 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . internal ; <nl> <nl> + import com . github . dreamhead . moco . ConfigApplier ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventTrigger ; <nl> import com . github . dreamhead . moco . MocoMonitor ; <nl> @ @ - 23 , 10 + 24 , 10 @ @ import static com . google . common . collect . Lists . newArrayList ; <nl> public abstract class BaseActualServer < T extends ResponseSetting < T > > extends BaseServer < T > { <nl> protected abstract Setting < T > newSetting ( final RequestMatcher matcher ) ; <nl> <nl> - protected final MocoConfig [ ] configs ; <nl> - protected final MocoMonitor monitor ; <nl> + private final MocoConfig [ ] configs ; <nl> + private final MocoMonitor monitor ; <nl> private final List < Setting < T > > settings = newArrayList ( ) ; <nl> - protected Optional < Integer > port ; <nl> + private Optional < Integer > port ; <nl> protected RequestMatcher matcher = anyRequest ( ) ; <nl> <nl> public BaseActualServer ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { <nl> @ @ - 111 , 4 + 112 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas <nl> addSetting ( thatSetting ) ; <nl> } <nl> } <nl> + <nl> + protected < T extends ConfigApplier < T > > T configured ( final T source ) { <nl> + return configItem ( source , this . configs ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java <nl> index 0443841 . . 46e249b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java <nl> @ @ - 10 , 7 + 10 , 7 @ @ import java . util . List ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public final class Configs { <nl> - public static < T extends ConfigApplier < T > > T configItem ( final T source , final MocoConfig . . . configs ) { <nl> + public static < T extends ConfigApplier < T > > T configItem ( final T source , final MocoConfig . . . configs ) { <nl> if ( source = = null ) { <nl> return null ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 index 1b3adc6 . . 43d7324 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 @ @ - 10 , 9 + 10 , 10 @ @ import com . github . dreamhead . moco . monitor . QuietMonitor ; 
 import com . github . dreamhead . moco . monitor . Slf4jMonitor ; 
 import com . github . dreamhead . moco . setting . HttpSetting ; 
 import com . google . common . base . Optional ; 
 + 
 import static com . google . common . base . Optional . of ; 
 
 - public class ActualHttpServer extends HttpConfiguration { 
 + public class ActualHttpServer extends HttpConfiguration < ActualHttpServer > { 
 private final Optional < HttpsCertificate > certificate ; 
 
 protected ActualHttpServer ( final Optional < Integer > port , 
 @ @ - 30 , 19 + 31 , 8 @ @ public class ActualHttpServer extends HttpConfiguration { 
 return certificate ; 
 } 
 
 - public ActualHttpServer mergeServer ( final ActualHttpServer thatServer ) { 
 - ActualHttpServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , 
 - this . certificate . or ( thatServer . certificate ) ) ; 
 - newServer . addSettings ( this . getSettings ( ) ) ; 
 - newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 - 
 - newServer . anySetting ( configuredMatcher ( ) , configured ( this . handler ) ) ; 
 - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configured ( thatServer . handler ) ) ; 
 - 
 - newServer . addEvents ( this . eventTriggers ) ; 
 - newServer . addEvents ( thatServer . eventTriggers ) ; 
 - 
 - return newServer ; 
 + protected ActualHttpServer doCreateServer ( final ActualHttpServer thatServer ) { 
 + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) , this . certificate . or ( thatServer . certificate ) ) ; 
 } 
 
 private ActualHttpServer newBaseServer ( final Optional < Integer > port , final Optional < HttpsCertificate > certificate ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 index 343afe1 . . 4c46c37 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 @ @ - 13 , 7 + 13 , 7 @ @ import com . github . dreamhead . moco . setting . Setting ; 
 import com . github . dreamhead . moco . setting . SocketSetting ; 
 import com . google . common . base . Optional ; 
 
 - public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting > implements SocketServer { 
 + public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting , ActualSocketServer > implements SocketServer { 
 private ActualSocketServer ( final Optional < Integer > port , final MocoMonitor monitor ) { 
 super ( port , monitor , new MocoConfig [ 0 ] ) ; 
 } 
 @ @ - 30 , 18 + 30 , 9 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet 
 return baseSetting ; 
 } 
 
 - public ActualSocketServer mergeServer ( final ActualSocketServer thatServer ) { 
 - ActualSocketServer newServer = newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; 
 - newServer . addSettings ( this . getSettings ( ) ) ; 
 - newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 - 
 - newServer . anySetting ( configuredMatcher ( ) , configured ( this . handler ) ) ; 
 - newServer . anySetting ( thatServer . configuredMatcher ( ) , thatServer . configured ( thatServer . handler ) ) ; 
 - 
 - newServer . addEvents ( this . eventTriggers ) ; 
 - newServer . addEvents ( thatServer . eventTriggers ) ; 
 - 
 - return newServer ; 
 + @ Override 
 + protected ActualSocketServer doCreateServer ( final ActualSocketServer thatServer ) { 
 + return newBaseServer ( this . getPort ( ) . or ( thatServer . getPort ( ) ) ) ; 
 } 
 
 private ActualSocketServer newBaseServer ( final Optional < Integer > thisPort ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 index e5a7d6c . . 81fa992 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 @ @ - 21 , 7 + 21 , 7 @ @ import static com . github . dreamhead . moco . util . Configs . configItems ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . collect . Lists . newArrayList ; 
 
 - public abstract class BaseActualServer < T extends ResponseSetting < T > > extends BaseServer < T > { 
 + public abstract class BaseActualServer < T extends ResponseSetting < T > , U extends BaseActualServer > extends BaseServer < T > { 
 protected abstract Setting < T > newSetting ( final RequestMatcher matcher ) ; 
 
 private final MocoConfig [ ] configs ; 
 @ @ - 74 , 7 + 74 , 7 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas 
 
 public Setting < T > getAnySetting ( ) { 
 Setting < T > setting = newSetting ( configuredMatcher ( ) ) ; 
 - ResponseHandler configuredHandler = configured ( this . handler ) ; 
 + ResponseHandler configuredHandler = configuredResponseHandler ( ) ; 
 if ( configuredHandler ! = null ) { 
 setting . response ( configuredHandler ) ; 
 } 
 @ @ - 120 , 4 + 120 , 25 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas 
 protected RequestMatcher configuredMatcher ( ) { 
 return configured ( this . matcher ) ; 
 } 
 + 
 + public U mergeServer ( final U thatServer ) { 
 + U newServer = doCreateServer ( thatServer ) ; 
 + newServer . addSettings ( this . getSettings ( ) ) ; 
 + newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 + 
 + newServer . anySetting ( configuredMatcher ( ) , this . configuredResponseHandler ( ) ) ; 
 + ResponseHandler configured = thatServer . configuredResponseHandler ( ) ; 
 + newServer . anySetting ( thatServer . configuredMatcher ( ) , configured ) ; 
 + 
 + newServer . addEvents ( this . eventTriggers ) ; 
 + newServer . addEvents ( thatServer . eventTriggers ) ; 
 + 
 + return newServer ; 
 + } 
 + 
 + protected ResponseHandler configuredResponseHandler ( ) { 
 + return configured ( this . handler ) ; 
 + } 
 + 
 + protected abstract U doCreateServer ( final U thatServer ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java 
 index f867ac4 . . e93cdc1 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseServerRunner . java 
 @ @ - 5 , 15 + 5 , 15 @ @ import com . github . dreamhead . moco . Runner ; 
 import io . netty . channel . Channel ; 
 import io . netty . channel . ChannelInitializer ; 
 
 - public abstract class BaseServerRunner < T extends ResponseSetting < T > > extends Runner { 
 - protected abstract BaseActualServer < T > serverSetting ( ) ; 
 + public abstract class BaseServerRunner < T extends ResponseSetting < T > , U extends BaseActualServer > extends Runner { 
 + protected abstract BaseActualServer < T , U > serverSetting ( ) ; 
 protected abstract ChannelInitializer < ? extends Channel > channelInitializer ( ) ; 
 
 private final MocoServer server = new MocoServer ( ) ; 
 
 @ Override 
 public void start ( ) { 
 - BaseActualServer < T > setting = serverSetting ( ) ; 
 + BaseActualServer < T , U > setting = serverSetting ( ) ; 
 int port = this . server . start ( setting . getPort ( ) . or ( 0 ) , channelInitializer ( ) ) ; 
 setting . setPort ( port ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 index 4e7c26b . . f7db9aa 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 @ @ - 27 , 7 + 27 , 8 @ @ import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 
 - public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSetting > implements HttpsServer { 
 + public abstract class HttpConfiguration < T extends BaseActualServer > 
 + extends BaseActualServer < HttpResponseSetting , T > implements HttpsServer { 
 private final RedirectDelegate delegate = new RedirectDelegate ( ) ; 
 
 protected HttpConfiguration ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java 
 index 8e2a3d8 . . 42146d4 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketServer . java 
 @ @ - 5 , 7 + 5 , 7 @ @ import io . netty . channel . ChannelInitializer ; 
 import io . netty . channel . ChannelPipeline ; 
 import io . netty . channel . socket . SocketChannel ; 
 
 - public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting > { 
 + public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting , ActualSocketServer > { 
 private final ActualSocketServer serverSetting ; 
 
 public MocoSocketServer ( final ActualSocketServer serverSetting ) { 
 @ @ - 13 , 7 + 13 , 7 @ @ public class MocoSocketServer extends BaseServerRunner < SocketResponseSetting > { 
 } 
 
 @ Override 
 - protected BaseActualServer < SocketResponseSetting > serverSetting ( ) { 
 + protected ActualSocketServer serverSetting ( ) { 
 return this . serverSetting ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 index 06b6493 . . 3b1a899 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 @ @ - 12 , 7 + 12 , 6 @ @ import com . github . dreamhead . moco . monitor . Slf4jMonitor ; 
 import com . github . dreamhead . moco . setting . HttpSetting ; 
 import com . google . common . base . Optional ; 
 
 - import static com . github . dreamhead . moco . util . Configs . configItem ; 
 import static com . google . common . base . Optional . absent ; 
 import static com . google . common . base . Optional . of ; 
 
 @ @ - 37 , 8 + 36 , 8 @ @ public class ActualHttpServer extends HttpConfiguration { 
 newServer . addSettings ( this . getSettings ( ) ) ; 
 newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 
 - newServer . anySetting ( configItem ( this . matcher , this . configs ) , configItem ( this . handler , this . configs ) ) ; 
 - newServer . anySetting ( configItem ( thatServer . matcher , thatServer . configs ) , configItem ( thatServer . handler , thatServer . configs ) ) ; 
 + newServer . anySetting ( configured ( this . matcher ) , configured ( this . handler ) ) ; 
 + newServer . anySetting ( thatServer . configured ( thatServer . matcher ) , thatServer . configured ( thatServer . handler ) ) ; 
 
 newServer . addEvents ( this . eventTriggers ) ; 
 newServer . addEvents ( thatServer . eventTriggers ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 index e6b1bcc . . 98cc5de 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 @ @ - 13 , 8 + 13 , 6 @ @ import com . github . dreamhead . moco . setting . Setting ; 
 import com . github . dreamhead . moco . setting . SocketSetting ; 
 import com . google . common . base . Optional ; 
 
 - import static com . github . dreamhead . moco . util . Configs . configItem ; 
 - 
 public final class ActualSocketServer extends BaseActualServer < SocketResponseSetting > implements SocketServer { 
 private ActualSocketServer ( final Optional < Integer > port , final MocoMonitor monitor ) { 
 super ( port , monitor , new MocoConfig [ 0 ] ) ; 
 @ @ - 37 , 8 + 35 , 8 @ @ public final class ActualSocketServer extends BaseActualServer < SocketResponseSet 
 newServer . addSettings ( this . getSettings ( ) ) ; 
 newServer . addSettings ( thatServer . getSettings ( ) ) ; 
 
 - newServer . anySetting ( configItem ( this . matcher , this . configs ) , configItem ( this . handler , this . configs ) ) ; 
 - newServer . anySetting ( configItem ( thatServer . matcher , thatServer . configs ) , configItem ( thatServer . handler , thatServer . configs ) ) ; 
 + newServer . anySetting ( configured ( this . matcher ) , configured ( this . handler ) ) ; 
 + newServer . anySetting ( thatServer . configured ( thatServer . matcher ) , thatServer . configured ( thatServer . handler ) ) ; 
 
 newServer . addEvents ( this . eventTriggers ) ; 
 newServer . addEvents ( thatServer . eventTriggers ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 index 0c07b01 . . 81a5f89 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseActualServer . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . internal ; 
 
 + import com . github . dreamhead . moco . ConfigApplier ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventTrigger ; 
 import com . github . dreamhead . moco . MocoMonitor ; 
 @ @ - 23 , 10 + 24 , 10 @ @ import static com . google . common . collect . Lists . newArrayList ; 
 public abstract class BaseActualServer < T extends ResponseSetting < T > > extends BaseServer < T > { 
 protected abstract Setting < T > newSetting ( final RequestMatcher matcher ) ; 
 
 - protected final MocoConfig [ ] configs ; 
 - protected final MocoMonitor monitor ; 
 + private final MocoConfig [ ] configs ; 
 + private final MocoMonitor monitor ; 
 private final List < Setting < T > > settings = newArrayList ( ) ; 
 - protected Optional < Integer > port ; 
 + private Optional < Integer > port ; 
 protected RequestMatcher matcher = anyRequest ( ) ; 
 
 public BaseActualServer ( final Optional < Integer > port , final MocoMonitor monitor , final MocoConfig [ ] configs ) { 
 @ @ - 111 , 4 + 112 , 8 @ @ public abstract class BaseActualServer < T extends ResponseSetting < T > > extends Bas 
 addSetting ( thatSetting ) ; 
 } 
 } 
 + 
 + protected < T extends ConfigApplier < T > > T configured ( final T source ) { 
 + return configItem ( source , this . configs ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java 
 index 0443841 . . 46e249b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java 
 @ @ - 10 , 7 + 10 , 7 @ @ import java . util . List ; 
 import static com . google . common . collect . FluentIterable . from ; 
 
 public final class Configs { 
 - public static < T extends ConfigApplier < T > > T configItem ( final T source , final MocoConfig . . . configs ) { 
 + public static < T extends ConfigApplier < T > > T configItem ( final T source , final MocoConfig . . . configs ) { 
 if ( source = = null ) { 
 return null ; 
 }
