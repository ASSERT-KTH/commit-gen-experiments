BLEU SCORE: 0.020980574531482755

TEST MSG: used http request for remote url in proxy response handler
GENERATED MSG: removed bytebuf interface from sub class

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index fd2086b . . a1e8453 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> private static final ImmutableSet < String > IGNORED _ REQUEST _ HEADERS = ImmutableSet . of ( HOST , CONTENT _ LENGTH ) ; <nl> private static final ImmutableSet < String > IGNORED _ RESPONSE _ HEADERS = ImmutableSet . of ( DATE , SERVER ) ; <nl> <nl> - protected abstract Optional < String > remoteUrl ( final String uri ) ; <nl> + protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; <nl> <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; <nl> <nl> @ @ - 228 , 7 + 228 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private Optional < URL > remoteUrl ( final HttpRequest request ) { <nl> - Optional < String > remoteUrl = this . remoteUrl ( request . getUri ( ) ) ; <nl> + Optional < String > remoteUrl = this . doRemoteUrl ( request ) ; <nl> if ( ! remoteUrl . isPresent ( ) ) { <nl> return absent ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> index c268cfc . . 94f69d8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler ; <nl> <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> @ @ - 19 , 7 + 20 , 8 @ @ public class ProxyBatchResponseHandler extends AbstractProxyResponseHandler { <nl> } <nl> <nl> @ Override <nl> - protected Optional < String > remoteUrl ( final String uri ) { <nl> + protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> + String uri = request . getUri ( ) ; <nl> if ( ! proxyConfig . canAccessedBy ( uri ) ) { <nl> return absent ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> index c2fd4e9 . . 738104d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler ; <nl> <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . google . common . base . Optional ; <nl> @ @ - 18 , 7 + 19 , 7 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement <nl> } <nl> <nl> @ Override <nl> - protected Optional < String > remoteUrl ( final String uri ) { <nl> + protected Optional < String > doRemoteUrl ( final HttpRequest request ) { <nl> return of ( this . url . get ( ) . toString ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> index 080fd23 . . cc862c7 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java <nl> @ @ - 13 , 13 + 13 , 13 @ @ import static io . netty . handler . codec . http . HttpHeaders . setContentLength ; <nl> public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { <nl> private final HeaderDetector detector = new HeaderDetector ( ) ; <nl> <nl> - protected abstract void writeContentResponse ( final HttpRequest request , ByteBuf buffer ) ; <nl> + protected abstract String responseContent ( final HttpRequest request ) ; <nl> <nl> @ Override <nl> public void writeToResponse ( final SessionContext context ) { <nl> FullHttpResponse response = context . getResponse ( ) ; <nl> ByteBuf buffer = Unpooled . buffer ( ) ; <nl> - writeContentResponse ( context . getRequest ( ) , buffer ) ; <nl> + buffer . writeBytes ( responseContent ( context . getRequest ( ) ) . getBytes ( ) ) ; <nl> response . content ( ) . writeBytes ( buffer ) ; <nl> setContentLength ( response , response . content ( ) . writerIndex ( ) ) ; <nl> if ( ! detector . hasContentType ( response ) ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java <nl> index 84af40b . . fa66be3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> - import io . netty . buffer . ByteBuf ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> <nl> @ @ - 17 , 8 + 16 , 8 @ @ public class ContentHandler extends AbstractContentResponseHandler { <nl> } <nl> <nl> @ Override <nl> - protected void writeContentResponse ( final HttpRequest request , ByteBuf buffer ) { <nl> - buffer . writeBytes ( this . resource . readFor ( of ( request ) ) ) ; <nl> + protected String responseContent ( final HttpRequest request ) { <nl> + return new String ( this . resource . readFor ( of ( request ) ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java <nl> index f141f45 . . 8f37d3d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java <nl> @ @ - 23 , 7 + 23 , 7 @ @ public class SessionContext { <nl> return response ; <nl> } <nl> <nl> - public HttpRequest getHttpRequest ( ) { <nl> - return httpRequest ; <nl> + public MutableHttpResponse getHttpResponse ( ) { <nl> + return httpResponse ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java <nl> index f97ca71 . . 781d273 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java <nl> @ @ - 6 , 12 + 6 , 11 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; <nl> import com . github . dreamhead . moco . util . FileContentType ; <nl> import com . google . common . base . Optional ; <nl> - import io . netty . buffer . ByteBuf ; <nl> + import com . google . common . io . Files ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - <nl> - import static com . google . common . io . Files . toByteArray ; <nl> + import java . nio . charset . Charset ; <nl> <nl> public class MountHandler extends AbstractContentResponseHandler { <nl> private final MountPathExtractor extractor ; <nl> @ @ - 26 , 9 + 25 , 9 @ @ public class MountHandler extends AbstractContentResponseHandler { <nl> } <nl> <nl> @ Override <nl> - protected void writeContentResponse ( final HttpRequest request , ByteBuf buffer ) { <nl> + protected String responseContent ( final HttpRequest request ) { <nl> try { <nl> - buffer . writeBytes ( toByteArray ( targetFile ( request ) ) ) ; <nl> + return Files . toString ( targetFile ( request ) , Charset . defaultCharset ( ) ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index fd2086b . . a1e8453 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 private static final ImmutableSet < String > IGNORED _ REQUEST _ HEADERS = ImmutableSet . of ( HOST , CONTENT _ LENGTH ) ; 
 private static final ImmutableSet < String > IGNORED _ RESPONSE _ HEADERS = ImmutableSet . of ( DATE , SERVER ) ; 
 
 - protected abstract Optional < String > remoteUrl ( final String uri ) ; 
 + protected abstract Optional < String > doRemoteUrl ( final HttpRequest request ) ; 
 
 private static Logger logger = LoggerFactory . getLogger ( AbstractProxyResponseHandler . class ) ; 
 
 @ @ - 228 , 7 + 228 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 private Optional < URL > remoteUrl ( final HttpRequest request ) { 
 - Optional < String > remoteUrl = this . remoteUrl ( request . getUri ( ) ) ; 
 + Optional < String > remoteUrl = this . doRemoteUrl ( request ) ; 
 if ( ! remoteUrl . isPresent ( ) ) { 
 return absent ( ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java 
 index c268cfc . . 94f69d8 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyBatchResponseHandler . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . handler ; 
 
 + import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 @ @ - 19 , 7 + 20 , 8 @ @ public class ProxyBatchResponseHandler extends AbstractProxyResponseHandler { 
 } 
 
 @ Override 
 - protected Optional < String > remoteUrl ( final String uri ) { 
 + protected Optional < String > doRemoteUrl ( final HttpRequest request ) { 
 + String uri = request . getUri ( ) ; 
 if ( ! proxyConfig . canAccessedBy ( uri ) ) { 
 return absent ( ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 index c2fd4e9 . . 738104d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ProxyResponseHandler . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . handler ; 
 
 + import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . google . common . base . Optional ; 
 @ @ - 18 , 7 + 19 , 7 @ @ public class ProxyResponseHandler extends AbstractProxyResponseHandler implement 
 } 
 
 @ Override 
 - protected Optional < String > remoteUrl ( final String uri ) { 
 + protected Optional < String > doRemoteUrl ( final HttpRequest request ) { 
 return of ( this . url . get ( ) . toString ( ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 index 080fd23 . . cc862c7 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractContentResponseHandler . java 
 @ @ - 13 , 13 + 13 , 13 @ @ import static io . netty . handler . codec . http . HttpHeaders . setContentLength ; 
 public abstract class AbstractContentResponseHandler extends AbstractResponseHandler { 
 private final HeaderDetector detector = new HeaderDetector ( ) ; 
 
 - protected abstract void writeContentResponse ( final HttpRequest request , ByteBuf buffer ) ; 
 + protected abstract String responseContent ( final HttpRequest request ) ; 
 
 @ Override 
 public void writeToResponse ( final SessionContext context ) { 
 FullHttpResponse response = context . getResponse ( ) ; 
 ByteBuf buffer = Unpooled . buffer ( ) ; 
 - writeContentResponse ( context . getRequest ( ) , buffer ) ; 
 + buffer . writeBytes ( responseContent ( context . getRequest ( ) ) . getBytes ( ) ) ; 
 response . content ( ) . writeBytes ( buffer ) ; 
 setContentLength ( response , response . content ( ) . writerIndex ( ) ) ; 
 if ( ! detector . hasContentType ( response ) ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java 
 index 84af40b . . fa66be3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / ContentHandler . java 
 @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 - import io . netty . buffer . ByteBuf ; 
 
 import static com . google . common . base . Optional . of ; 
 
 @ @ - 17 , 8 + 16 , 8 @ @ public class ContentHandler extends AbstractContentResponseHandler { 
 } 
 
 @ Override 
 - protected void writeContentResponse ( final HttpRequest request , ByteBuf buffer ) { 
 - buffer . writeBytes ( this . resource . readFor ( of ( request ) ) ) ; 
 + protected String responseContent ( final HttpRequest request ) { 
 + return new String ( this . resource . readFor ( of ( request ) ) ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java 
 index f141f45 . . 8f37d3d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / SessionContext . java 
 @ @ - 23 , 7 + 23 , 7 @ @ public class SessionContext { 
 return response ; 
 } 
 
 - public HttpRequest getHttpRequest ( ) { 
 - return httpRequest ; 
 + public MutableHttpResponse getHttpResponse ( ) { 
 + return httpResponse ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java 
 index f97ca71 . . 781d273 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / mount / MountHandler . java 
 @ @ - 6 , 12 + 6 , 11 @ @ import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . handler . AbstractContentResponseHandler ; 
 import com . github . dreamhead . moco . util . FileContentType ; 
 import com . google . common . base . Optional ; 
 - import io . netty . buffer . ByteBuf ; 
 + import com . google . common . io . Files ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - 
 - import static com . google . common . io . Files . toByteArray ; 
 + import java . nio . charset . Charset ; 
 
 public class MountHandler extends AbstractContentResponseHandler { 
 private final MountPathExtractor extractor ; 
 @ @ - 26 , 9 + 25 , 9 @ @ public class MountHandler extends AbstractContentResponseHandler { 
 } 
 
 @ Override 
 - protected void writeContentResponse ( final HttpRequest request , ByteBuf buffer ) { 
 + protected String responseContent ( final HttpRequest request ) { 
 try { 
 - buffer . writeBytes ( toByteArray ( targetFile ( request ) ) ) ; 
 + return Files . toString ( targetFile ( request ) , Charset . defaultCharset ( ) ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 }
