BLEU SCORE: 0.03283637368030199

TEST MSG: parsed https server with parse session directly
GENERATED MSG: added parameter check in moco json runner

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> index 9bed046 . . e1ff1df 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java <nl> @ @ - 15 , 19 + 15 , 19 @ @ import static com . google . common . base . Preconditions . checkNotNull ; <nl> public final class MocoJsonRunner { <nl> public static HttpServer jsonHttpServer ( final int port , final Resource resource ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> - return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; <nl> + return parseHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; <nl> } <nl> <nl> public static HttpServer jsonHttpServer ( final Resource resource ) { <nl> - return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ; <nl> + return parseHttpServer ( checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ; <nl> } <nl> <nl> public static HttpsServer jsonHttpsServer ( final Resource resource , <nl> final HttpsCertificate certificate ) { <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; <nl> - return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( <nl> - checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> + return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> + checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ) ; <nl> } <nl> <nl> public static HttpsServer jsonHttpsServer ( final int port , final Resource resource , <nl> @ @ - 35 , 8 + 35 , 8 @ @ public final class MocoJsonRunner { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> checkNotNull ( certificate , " Certificate should not be null " ) ; <nl> ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; <nl> - return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( port , <nl> - checkNotNull ( resource , " resource should not be null " ) ) ) ; <nl> + return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( <nl> + checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ) ; <nl> } <nl> <nl> public static SocketServer jsonSocketServer ( final int port , final Resource resource ) { <nl> @ @ - 53 , 7 + 53 , 7 @ @ public final class MocoJsonRunner { <nl> return parser . parseServer ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) , port ) ; <nl> } <nl> <nl> - private static HttpServer jsonHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> + private static HttpServer parseHttpServer ( final Resource resource , final Optional < Integer > port ) { <nl> HttpServerParser parser = new HttpServerParser ( ) ; <nl> return parser . parseServer ( toStream ( resource ) , port ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java <nl> index b52c420 . . a7eafde 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java <nl> @ @ - 9 , 24 + 9 , 28 @ @ import java . io . ByteArrayInputStream ; <nl> import java . io . InputStream ; <nl> <nl> import static com . google . common . base . Optional . of ; <nl> + import static com . google . common . base . Preconditions . checkArgument ; <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> <nl> public class MocoRunner { <nl> public static HttpServer jsonHttpServer ( final int port , final Resource resource ) { <nl> - return jsonHttpServer ( resource , of ( port ) ) ; <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; <nl> } <nl> <nl> public static HttpServer jsonHttpServer ( final Resource resource ) { <nl> Optional < Integer > port = Optional . absent ( ) ; <nl> - return jsonHttpServer ( resource , port ) ; <nl> + return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , port ) ; <nl> } <nl> <nl> public static SocketServer jsonSocketServer ( final int port , final Resource resource ) { <nl> - return jsonSocketServer ( resource , of ( port ) ) ; <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + return jsonSocketServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; <nl> } <nl> <nl> public static SocketServer jsonSocketServer ( final Resource resource ) { <nl> Optional < Integer > port = Optional . absent ( ) ; <nl> - return jsonSocketServer ( resource , port ) ; <nl> + return jsonSocketServer ( checkNotNull ( resource , " resource should not be null " ) , port ) ; <nl> } <nl> <nl> private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) {

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 index 9bed046 . . e1ff1df 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoJsonRunner . java 
 @ @ - 15 , 19 + 15 , 19 @ @ import static com . google . common . base . Preconditions . checkNotNull ; 
 public final class MocoJsonRunner { 
 public static HttpServer jsonHttpServer ( final int port , final Resource resource ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 - return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; 
 + return parseHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; 
 } 
 
 public static HttpServer jsonHttpServer ( final Resource resource ) { 
 - return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ; 
 + return parseHttpServer ( checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ; 
 } 
 
 public static HttpsServer jsonHttpsServer ( final Resource resource , 
 final HttpsCertificate certificate ) { 
 checkNotNull ( certificate , " Certificate should not be null " ) ; 
 ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( certificate ) ; 
 - return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( 
 - checkNotNull ( resource , " resource should not be null " ) ) ) ; 
 + return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( 
 + checkNotNull ( resource , " resource should not be null " ) , Optional . < Integer > absent ( ) ) ) ; 
 } 
 
 public static HttpsServer jsonHttpsServer ( final int port , final Resource resource , 
 @ @ - 35 , 8 + 35 , 8 @ @ public final class MocoJsonRunner { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 checkNotNull ( certificate , " Certificate should not be null " ) ; 
 ActualHttpServer httpsServer = ( ActualHttpServer ) Moco . httpsServer ( port , certificate ) ; 
 - return httpsServer . mergeServer ( ( ActualHttpServer ) jsonHttpServer ( port , 
 - checkNotNull ( resource , " resource should not be null " ) ) ) ; 
 + return httpsServer . mergeServer ( ( ActualHttpServer ) parseHttpServer ( 
 + checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ) ; 
 } 
 
 public static SocketServer jsonSocketServer ( final int port , final Resource resource ) { 
 @ @ - 53 , 7 + 53 , 7 @ @ public final class MocoJsonRunner { 
 return parser . parseServer ( toStream ( checkNotNull ( resource , " resource should not be null " ) ) , port ) ; 
 } 
 
 - private static HttpServer jsonHttpServer ( final Resource resource , final Optional < Integer > port ) { 
 + private static HttpServer parseHttpServer ( final Resource resource , final Optional < Integer > port ) { 
 HttpServerParser parser = new HttpServerParser ( ) ; 
 return parser . parseServer ( toStream ( resource ) , port ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java 
 index b52c420 . . a7eafde 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / MocoRunner . java 
 @ @ - 9 , 24 + 9 , 28 @ @ import java . io . ByteArrayInputStream ; 
 import java . io . InputStream ; 
 
 import static com . google . common . base . Optional . of ; 
 + import static com . google . common . base . Preconditions . checkArgument ; 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 
 public class MocoRunner { 
 public static HttpServer jsonHttpServer ( final int port , final Resource resource ) { 
 - return jsonHttpServer ( resource , of ( port ) ) ; 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; 
 } 
 
 public static HttpServer jsonHttpServer ( final Resource resource ) { 
 Optional < Integer > port = Optional . absent ( ) ; 
 - return jsonHttpServer ( resource , port ) ; 
 + return jsonHttpServer ( checkNotNull ( resource , " resource should not be null " ) , port ) ; 
 } 
 
 public static SocketServer jsonSocketServer ( final int port , final Resource resource ) { 
 - return jsonSocketServer ( resource , of ( port ) ) ; 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + return jsonSocketServer ( checkNotNull ( resource , " resource should not be null " ) , of ( port ) ) ; 
 } 
 
 public static SocketServer jsonSocketServer ( final Resource resource ) { 
 Optional < Integer > port = Optional . absent ( ) ; 
 - return jsonSocketServer ( resource , port ) ; 
 + return jsonSocketServer ( checkNotNull ( resource , " resource should not be null " ) , port ) ; 
 } 
 
 private static SocketServer jsonSocketServer ( final Resource resource , final Optional < Integer > port ) {
