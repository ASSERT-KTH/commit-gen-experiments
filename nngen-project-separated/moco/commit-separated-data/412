BLEU SCORE: 0.04767707020457096

TEST MSG: simplified create response handler in dynamic response handler factory
GENERATED MSG: extracted duplicate in exist matcher creation

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index e024e8f . . 44b2d8c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 94 , 6 + 94 , 7 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + <nl> String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> assertThat ( decodeCookie . maxAge ( ) , is ( 3600L ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index f577fe4 . . 735ae61 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . util . Map ; <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> + import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> import static com . github . dreamhead . moco . Moco . var ; <nl> import static com . github . dreamhead . moco . Moco . version ; <nl> @ @ - 150 , 27 + 151 , 27 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } ; <nl> } <nl> <nl> + private Resource getResource ( final TextContainer container ) { <nl> + if ( container . isForTemplate ( ) ) { <nl> + return template ( container . getText ( ) ) ; <nl> + } <nl> + <nl> + return text ( container . getText ( ) ) ; <nl> + } <nl> + <nl> private ResponseHandler createResponseHandler ( final Map . Entry < String , TextContainer > pair , <nl> final String targetMethodName ) { <nl> TextContainer container = pair . getValue ( ) ; <nl> + Resource resource = getResource ( container ) ; <nl> try { <nl> - if ( container . isForTemplate ( ) ) { <nl> - if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) , new CookieOption [ 0 ] ) ; <nl> - } <nl> - <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; <nl> - } <nl> - <nl> if ( " cookie " . equals ( targetMethodName ) ) { <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class , CookieOption [ ] . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) , new CookieOption [ 0 ] ) ; <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; <nl> } <nl> <nl> - Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class ) ; <nl> - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) ) ; <nl> + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; <nl> + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; <nl> + <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> @ @ - 240 , 7 + 241 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> private Resource asResource ( final String name , final FileContainer fileContainer ) { <nl> Optional < Charset > charset = fileContainer . getCharset ( ) ; <nl> String text = fileContainer . getName ( ) . getText ( ) ; <nl> - return asResource ( name , Moco . text ( text ) , charset ) ; <nl> + return asResource ( name , text ( text ) , charset ) ; <nl> } <nl> <nl> public static ImmutableMap < String , RequestExtractor < ? > > toVariables ( final Map < String , TextContainer > props ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> index 61bfcf4 . . 5a8bbe4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java <nl> @ @ - 23 , 7 + 23 , 11 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { <nl> @ Override <nl> protected Optional < String [ ] > doExtract ( final HttpRequest request ) { <nl> final ImmutableMap < String , String > headers = request . getHeaders ( ) ; <nl> - String [ ] extractedValues = from ( headers . entrySet ( ) ) . filter ( isForName ( name ) ) . transform ( toValue ( ) ) . toArray ( String . class ) ; <nl> + String [ ] extractedValues = from ( headers . entrySet ( ) ) <nl> + . filter ( isForName ( name ) ) <nl> + . transform ( toValue ( ) ) <nl> + . toArray ( String . class ) ; <nl> + <nl> if ( extractedValues . length > 0 ) { <nl> return of ( extractedValues ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> index 61331d3 . . dbb5d78 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java <nl> @ @ - 104 , 7 + 104 , 9 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> } <nl> <nl> private RequestMatcher createCompositeMatcher ( final String name , final Map < String , Object > collection ) { <nl> - ImmutableList < RequestMatcher > matchers = from ( collection . entrySet ( ) ) . transform ( toTargetMatcher ( getExtractorMethod ( name ) ) ) . toList ( ) ; <nl> + ImmutableList < RequestMatcher > matchers = from ( collection . entrySet ( ) ) <nl> + . transform ( toTargetMatcher ( getExtractorMethod ( name ) ) ) <nl> + . toList ( ) ; <nl> return wrapRequestMatcher ( null , matchers ) ; <nl> } <nl> <nl> @ @ - 137 , 8 + 139 , 9 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> } <nl> <nl> try { <nl> - Method operationMethod = Moco . class . getMethod ( container . getOperation ( ) , RequestExtractor . class , String . class ) ; <nl> - Object result = operationMethod . invoke ( null , extractor , container . getText ( ) ) ; <nl> + Method operatorMethod = Moco . class . getMethod ( container . getOperation ( ) , <nl> + RequestExtractor . class , String . class ) ; <nl> + Object result = operatorMethod . invoke ( null , extractor , container . getText ( ) ) ; <nl> return RequestMatcher . class . cast ( result ) ; <nl> } catch ( Exception e ) { <nl> throw new RuntimeException ( e ) ; <nl> @ @ - 146 , 18 + 149 , 20 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat <nl> } <nl> <nl> private < T > RequestMatcher existMatcher ( final RequestExtractor < T > extractor , final TextContainer container ) { <nl> - if ( " true " . equalsIgnoreCase ( container . getText ( ) ) ) { <nl> + String text = container . getText ( ) ; <nl> + if ( " true " . equalsIgnoreCase ( text ) ) { <nl> return exist ( extractor ) ; <nl> } <nl> <nl> - if ( " false " . equalsIgnoreCase ( container . getText ( ) ) ) { <nl> + if ( " false " . equalsIgnoreCase ( text ) ) { <nl> return not ( exist ( extractor ) ) ; <nl> } <nl> <nl> - throw new RuntimeException ( String . format ( " Unknown exist parameter : [ % s ] " , container . getText ( ) ) ) ; <nl> + throw new RuntimeException ( String . format ( " Unknown exist parameter : [ % s ] " , text ) ) ; <nl> } <nl> <nl> - private static RequestMatcher wrapRequestMatcher ( final RequestSetting request , final ImmutableList < RequestMatcher > matchers ) { <nl> + private static RequestMatcher wrapRequestMatcher ( final RequestSetting request , <nl> + final ImmutableList < RequestMatcher > matchers ) { <nl> switch ( matchers . size ( ) ) { <nl> case 0 : <nl> throw new IllegalArgumentException ( " illegal request setting : " + request ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 94fb7dc . . 5d42120 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco . parser . model ; <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . handler . AndResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> @ @ - 29 , 6 + 28 , 7 @ @ import static com . github . dreamhead . moco . Moco . toJson ; <nl> import static com . github . dreamhead . moco . Moco . var ; <nl> import static com . github . dreamhead . moco . Moco . version ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> + import static com . github . dreamhead . moco . handler . AndResponseHandler . and ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . ImmutableSet . of ; <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return list . get ( 0 ) ; <nl> } <nl> <nl> - return AndResponseHandler . and ( list ) ; <nl> + return and ( list ) ; <nl> } <nl> <nl> private boolean isResource ( final String name ) {

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 index e024e8f . . 44b2d8c 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 @ @ - 94 , 6 + 94 , 7 @ @ public class MocoWebTest extends AbstractMocoHttpTest { 
 @ Override 
 public void run ( ) throws IOException { 
 org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; 
 + 
 String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 assertThat ( decodeCookie . maxAge ( ) , is ( 3600L ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index f577fe4 . . 735ae61 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . util . Map ; 
 import static com . github . dreamhead . moco . Moco . attachment ; 
 import static com . github . dreamhead . moco . Moco . status ; 
 import static com . github . dreamhead . moco . Moco . template ; 
 + import static com . github . dreamhead . moco . Moco . text ; 
 import static com . github . dreamhead . moco . Moco . toJson ; 
 import static com . github . dreamhead . moco . Moco . var ; 
 import static com . github . dreamhead . moco . Moco . version ; 
 @ @ - 150 , 27 + 151 , 27 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 } ; 
 } 
 
 + private Resource getResource ( final TextContainer container ) { 
 + if ( container . isForTemplate ( ) ) { 
 + return template ( container . getText ( ) ) ; 
 + } 
 + 
 + return text ( container . getText ( ) ) ; 
 + } 
 + 
 private ResponseHandler createResponseHandler ( final Map . Entry < String , TextContainer > pair , 
 final String targetMethodName ) { 
 TextContainer container = pair . getValue ( ) ; 
 + Resource resource = getResource ( container ) ; 
 try { 
 - if ( container . isForTemplate ( ) ) { 
 - if ( " cookie " . equals ( targetMethodName ) ) { 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) , new CookieOption [ 0 ] ) ; 
 - } 
 - 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , template ( container . getText ( ) ) ) ; 
 - } 
 - 
 if ( " cookie " . equals ( targetMethodName ) ) { 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class , CookieOption [ ] . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) , new CookieOption [ 0 ] ) ; 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class , CookieOption [ ] . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource , new CookieOption [ 0 ] ) ; 
 } 
 
 - Method method = Moco . class . getMethod ( targetMethodName , String . class , String . class ) ; 
 - return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , container . getText ( ) ) ; 
 + Method method = Moco . class . getMethod ( targetMethodName , String . class , Resource . class ) ; 
 + return ( ResponseHandler ) method . invoke ( null , pair . getKey ( ) , resource ) ; 
 + 
 } catch ( Exception e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 @ @ - 240 , 7 + 241 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 private Resource asResource ( final String name , final FileContainer fileContainer ) { 
 Optional < Charset > charset = fileContainer . getCharset ( ) ; 
 String text = fileContainer . getName ( ) . getText ( ) ; 
 - return asResource ( name , Moco . text ( text ) , charset ) ; 
 + return asResource ( name , text ( text ) , charset ) ; 
 } 
 
 public static ImmutableMap < String , RequestExtractor < ? > > toVariables ( final Map < String , TextContainer > props ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 index 61bfcf4 . . 5a8bbe4 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / HeaderRequestExtractor . java 
 @ @ - 23 , 7 + 23 , 11 @ @ public class HeaderRequestExtractor extends HttpRequestExtractor < String [ ] > { 
 @ Override 
 protected Optional < String [ ] > doExtract ( final HttpRequest request ) { 
 final ImmutableMap < String , String > headers = request . getHeaders ( ) ; 
 - String [ ] extractedValues = from ( headers . entrySet ( ) ) . filter ( isForName ( name ) ) . transform ( toValue ( ) ) . toArray ( String . class ) ; 
 + String [ ] extractedValues = from ( headers . entrySet ( ) ) 
 + . filter ( isForName ( name ) ) 
 + . transform ( toValue ( ) ) 
 + . toArray ( String . class ) ; 
 + 
 if ( extractedValues . length > 0 ) { 
 return of ( extractedValues ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 index 61331d3 . . dbb5d78 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicRequestMatcherFactory . java 
 @ @ - 104 , 7 + 104 , 9 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat 
 } 
 
 private RequestMatcher createCompositeMatcher ( final String name , final Map < String , Object > collection ) { 
 - ImmutableList < RequestMatcher > matchers = from ( collection . entrySet ( ) ) . transform ( toTargetMatcher ( getExtractorMethod ( name ) ) ) . toList ( ) ; 
 + ImmutableList < RequestMatcher > matchers = from ( collection . entrySet ( ) ) 
 + . transform ( toTargetMatcher ( getExtractorMethod ( name ) ) ) 
 + . toList ( ) ; 
 return wrapRequestMatcher ( null , matchers ) ; 
 } 
 
 @ @ - 137 , 8 + 139 , 9 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat 
 } 
 
 try { 
 - Method operationMethod = Moco . class . getMethod ( container . getOperation ( ) , RequestExtractor . class , String . class ) ; 
 - Object result = operationMethod . invoke ( null , extractor , container . getText ( ) ) ; 
 + Method operatorMethod = Moco . class . getMethod ( container . getOperation ( ) , 
 + RequestExtractor . class , String . class ) ; 
 + Object result = operatorMethod . invoke ( null , extractor , container . getText ( ) ) ; 
 return RequestMatcher . class . cast ( result ) ; 
 } catch ( Exception e ) { 
 throw new RuntimeException ( e ) ; 
 @ @ - 146 , 18 + 149 , 20 @ @ public class DynamicRequestMatcherFactory extends Dynamics implements RequestMat 
 } 
 
 private < T > RequestMatcher existMatcher ( final RequestExtractor < T > extractor , final TextContainer container ) { 
 - if ( " true " . equalsIgnoreCase ( container . getText ( ) ) ) { 
 + String text = container . getText ( ) ; 
 + if ( " true " . equalsIgnoreCase ( text ) ) { 
 return exist ( extractor ) ; 
 } 
 
 - if ( " false " . equalsIgnoreCase ( container . getText ( ) ) ) { 
 + if ( " false " . equalsIgnoreCase ( text ) ) { 
 return not ( exist ( extractor ) ) ; 
 } 
 
 - throw new RuntimeException ( String . format ( " Unknown exist parameter : [ % s ] " , container . getText ( ) ) ) ; 
 + throw new RuntimeException ( String . format ( " Unknown exist parameter : [ % s ] " , text ) ) ; 
 } 
 
 - private static RequestMatcher wrapRequestMatcher ( final RequestSetting request , final ImmutableList < RequestMatcher > matchers ) { 
 + private static RequestMatcher wrapRequestMatcher ( final RequestSetting request , 
 + final ImmutableList < RequestMatcher > matchers ) { 
 switch ( matchers . size ( ) ) { 
 case 0 : 
 throw new IllegalArgumentException ( " illegal request setting : " + request ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 94fb7dc . . 5d42120 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 3 , 7 + 3 , 6 @ @ package com . github . dreamhead . moco . parser . model ; 
 import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . RequestExtractor ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . handler . AndResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 @ @ - 29 , 6 + 28 , 7 @ @ import static com . github . dreamhead . moco . Moco . toJson ; 
 import static com . github . dreamhead . moco . Moco . var ; 
 import static com . github . dreamhead . moco . Moco . version ; 
 import static com . github . dreamhead . moco . Moco . with ; 
 + import static com . github . dreamhead . moco . handler . AndResponseHandler . and ; 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 import static com . google . common . collect . ImmutableSet . of ; 
 @ @ - 54 , 7 + 54 , 7 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 return list . get ( 0 ) ; 
 } 
 
 - return AndResponseHandler . and ( list ) ; 
 + return and ( list ) ; 
 } 
 
 private boolean isResource ( final String name ) {
