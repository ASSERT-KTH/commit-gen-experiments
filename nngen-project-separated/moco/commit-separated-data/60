BLEU SCORE: 0.38498150077635496

TEST MSG: added missing final to message content
GENERATED MSG: added missing final to default http message builder

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> index 88417ad . . d8da360 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java <nl> @ @ - 22 , 29 + 22 , 29 @ @ public class MessageContent { <nl> private byte [ ] content ; <nl> private Optional < Charset > charset ; <nl> <nl> - public byte [ ] getContent ( ) { <nl> + public final byte [ ] getContent ( ) { <nl> return content ; <nl> } <nl> <nl> - public Charset getCharset ( ) { <nl> + public final Charset getCharset ( ) { <nl> return charset . or ( Charset . defaultCharset ( ) ) ; <nl> } <nl> <nl> - public boolean hasCharset ( ) { <nl> + public final boolean hasCharset ( ) { <nl> return charset . isPresent ( ) ; <nl> } <nl> <nl> - public boolean hasContent ( ) { <nl> + public final boolean hasContent ( ) { <nl> return content . length > 0 ; <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) { <nl> + public final String toString ( ) { <nl> return new String ( content , getCharset ( ) ) ; <nl> } <nl> <nl> @ Override <nl> - public boolean equals ( final Object obj ) { <nl> + public final boolean equals ( final Object obj ) { <nl> if ( obj = = null ) { <nl> return false ; <nl> } <nl> @ @ - 58 , 7 + 58 , 7 @ @ public class MessageContent { <nl> } <nl> <nl> @ Override <nl> - public int hashCode ( ) { <nl> + public final int hashCode ( ) { <nl> return Objects . hashCode ( Arrays . hashCode ( this . content ) , this . charset ) ; <nl> } <nl> <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class MessageContent { <nl> return content ( ) . withContent ( content ) . build ( ) ; <nl> } <nl> <nl> - public InputStream toInputStream ( ) { <nl> + public final InputStream toInputStream ( ) { <nl> return new ByteArrayInputStream ( this . content ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index 4786889 . . 9a9425f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 93 , 22 + 93 , 22 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> return clazz . cast ( this ) ; <nl> } <nl> <nl> - public T withVersion ( final HttpProtocolVersion version ) { <nl> + public final T withVersion ( final HttpProtocolVersion version ) { <nl> this . version = version ; <nl> return self ( ) ; <nl> } <nl> <nl> - public T withContent ( final String content ) { <nl> + public final T withContent ( final String content ) { <nl> this . content = content ( content ) ; <nl> return self ( ) ; <nl> } <nl> <nl> - public T withContent ( final MessageContent content ) { <nl> + public final T withContent ( final MessageContent content ) { <nl> this . content = content ; <nl> return self ( ) ; <nl> } <nl> <nl> - public T withHeaders ( final Map < String , ? > headers ) { <nl> + public final T withHeaders ( final Map < String , ? > headers ) { <nl> if ( headers ! = null ) { <nl> this . headers = asHeaders ( headers ) ; <nl> } <nl> @ @ - 138 , 15 + 138 , 15 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> } <nl> <nl> - protected HttpProtocolVersion getVersion ( ) { <nl> + protected final HttpProtocolVersion getVersion ( ) { <nl> return version ; <nl> } <nl> <nl> - protected MessageContent getContent ( ) { <nl> + protected final MessageContent getContent ( ) { <nl> return content ; <nl> } <nl> <nl> - protected ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> + protected final ImmutableMap < String , String [ ] > getHeaders ( ) { <nl> if ( headers = = null ) { <nl> return ImmutableMap . of ( ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java 
 index 88417ad . . d8da360 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageContent . java 
 @ @ - 22 , 29 + 22 , 29 @ @ public class MessageContent { 
 private byte [ ] content ; 
 private Optional < Charset > charset ; 
 
 - public byte [ ] getContent ( ) { 
 + public final byte [ ] getContent ( ) { 
 return content ; 
 } 
 
 - public Charset getCharset ( ) { 
 + public final Charset getCharset ( ) { 
 return charset . or ( Charset . defaultCharset ( ) ) ; 
 } 
 
 - public boolean hasCharset ( ) { 
 + public final boolean hasCharset ( ) { 
 return charset . isPresent ( ) ; 
 } 
 
 - public boolean hasContent ( ) { 
 + public final boolean hasContent ( ) { 
 return content . length > 0 ; 
 } 
 
 @ Override 
 - public String toString ( ) { 
 + public final String toString ( ) { 
 return new String ( content , getCharset ( ) ) ; 
 } 
 
 @ Override 
 - public boolean equals ( final Object obj ) { 
 + public final boolean equals ( final Object obj ) { 
 if ( obj = = null ) { 
 return false ; 
 } 
 @ @ - 58 , 7 + 58 , 7 @ @ public class MessageContent { 
 } 
 
 @ Override 
 - public int hashCode ( ) { 
 + public final int hashCode ( ) { 
 return Objects . hashCode ( Arrays . hashCode ( this . content ) , this . charset ) ; 
 } 
 
 @ @ - 70 , 7 + 70 , 7 @ @ public class MessageContent { 
 return content ( ) . withContent ( content ) . build ( ) ; 
 } 
 
 - public InputStream toInputStream ( ) { 
 + public final InputStream toInputStream ( ) { 
 return new ByteArrayInputStream ( this . content ) ; 
 } 


NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index 4786889 . . 9a9425f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 93 , 22 + 93 , 22 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 return clazz . cast ( this ) ; 
 } 
 
 - public T withVersion ( final HttpProtocolVersion version ) { 
 + public final T withVersion ( final HttpProtocolVersion version ) { 
 this . version = version ; 
 return self ( ) ; 
 } 
 
 - public T withContent ( final String content ) { 
 + public final T withContent ( final String content ) { 
 this . content = content ( content ) ; 
 return self ( ) ; 
 } 
 
 - public T withContent ( final MessageContent content ) { 
 + public final T withContent ( final MessageContent content ) { 
 this . content = content ; 
 return self ( ) ; 
 } 
 
 - public T withHeaders ( final Map < String , ? > headers ) { 
 + public final T withHeaders ( final Map < String , ? > headers ) { 
 if ( headers ! = null ) { 
 this . headers = asHeaders ( headers ) ; 
 } 
 @ @ - 138 , 15 + 138 , 15 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; 
 } 
 
 - protected HttpProtocolVersion getVersion ( ) { 
 + protected final HttpProtocolVersion getVersion ( ) { 
 return version ; 
 } 
 
 - protected MessageContent getContent ( ) { 
 + protected final MessageContent getContent ( ) { 
 return content ; 
 } 
 
 - protected ImmutableMap < String , String [ ] > getHeaders ( ) { 
 + protected final ImmutableMap < String , String [ ] > getHeaders ( ) { 
 if ( headers = = null ) { 
 return ImmutableMap . of ( ) ; 
 }
