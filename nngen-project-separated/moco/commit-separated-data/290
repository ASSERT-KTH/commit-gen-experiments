BLEU SCORE: 0.1584873897212071

TEST MSG: cleaned up toObjects in Jsons
GENERATED MSG: cleaned up code in default failover executor

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 21964b0 . . 8e371e4 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 7 , 6 + 7 , 8 @ @ import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; <nl> import com . fasterxml . jackson . databind . type . CollectionType ; <nl> import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableList ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 17 , 7 + 19 , 6 @ @ import java . io . InputStream ; <nl> import java . util . List ; <nl> <nl> import static com . google . common . collect . ImmutableList . of ; <nl> - import static com . google . common . io . Closeables . closeQuietly ; <nl> import static java . lang . String . format ; <nl> <nl> public final class Jsons { <nl> @ @ - 59 , 28 + 60 , 27 @ @ public final class Jsons { <nl> } <nl> <nl> public static < T > ImmutableList < T > toObjects ( final ImmutableList < InputStream > streams , final Class < T > elementClass ) { <nl> - try { <nl> - ImmutableList . Builder < T > builder = ImmutableList . builder ( ) ; <nl> - CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + final CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; <nl> + return FluentIterable . from ( streams ) . transformAndConcat ( Jsons . < T > toObject ( type ) ) . toList ( ) ; <nl> + } <nl> <nl> - for ( InputStream stream : streams ) { <nl> - try { <nl> - builder . addAll ( mapper . < List < T > > readValue ( stream , type ) ) ; <nl> - } finally { <nl> - closeQuietly ( stream ) ; <nl> + private static < T > Function < InputStream , Iterable < T > > toObject ( final CollectionType type ) { <nl> + return new Function < InputStream , Iterable < T > > ( ) { <nl> + @ Override <nl> + public Iterable < T > apply ( final InputStream input ) { <nl> + try ( InputStream actual = input ) { <nl> + return mapper . readValue ( actual , type ) ; <nl> + } catch ( UnrecognizedPropertyException e ) { <nl> + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> + throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> + } catch ( JsonMappingException e ) { <nl> + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> + throw new MocoException ( e ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> } <nl> } <nl> - <nl> - return builder . build ( ) ; <nl> - } catch ( UnrecognizedPropertyException e ) { <nl> - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; <nl> - throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> - } catch ( JsonMappingException e ) { <nl> - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> - throw new MocoException ( e ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> + } ; <nl> } <nl> <nl> private Jsons ( ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> index 485436f . . 1e237b1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> - import com . fasterxml . jackson . core . type . TypeReference ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . fasterxml . jackson . databind . ObjectWriter ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> @ @ - 12 , 7 + 11 , 6 @ @ import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . io . Closeables ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 20 , 11 + 18 , 9 @ @ import java . io . File ; <nl> import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> - import java . util . List ; <nl> <nl> import static com . google . common . base . Predicates . not ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> - import static com . google . common . collect . ImmutableList . copyOf ; <nl> import static com . google . common . collect . ImmutableList . of ; <nl> import static com . google . common . collect . Iterables . tryFind ; <nl> <nl> @ @ - 70 , 20 + 66 , 14 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { <nl> } <nl> <nl> private ImmutableList < Session > restoreSessions ( final File file ) { <nl> - InputStream inputStream = null ; <nl> try { <nl> - inputStream = new FileInputStream ( file ) ; <nl> - List < Session > sessions = Jsons . toObjects ( inputStream , Session . class ) ; <nl> - return copyOf ( sessions ) ; <nl> + InputStream inputStream = new FileInputStream ( file ) ; <nl> + return Jsons . toObjects ( inputStream , Session . class ) ; <nl> } catch ( MocoException me ) { <nl> logger . error ( " exception found " , me ) ; <nl> return of ( ) ; <nl> } catch ( IOException e ) { <nl> throw new MocoException ( e ) ; <nl> - } finally { <nl> - if ( inputStream ! = null ) { <nl> - Closeables . closeQuietly ( inputStream ) ; <nl> - } <nl> } <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 8f7eeca . . 68c7442 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 64 , 9 + 64 , 9 @ @ public final class Jsons { <nl> throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; <nl> } catch ( JsonMappingException e ) { <nl> logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; <nl> - throw new RuntimeException ( e ) ; <nl> + throw new MocoException ( e ) ; <nl> } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> + throw new MocoException ( e ) ; <nl> } finally { <nl> closeQuietly ( stream ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index 21964b0 . . 8e371e4 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 7 , 6 + 7 , 8 @ @ import com . fasterxml . jackson . databind . exc . UnrecognizedPropertyException ; 
 import com . fasterxml . jackson . databind . type . CollectionType ; 
 import com . fasterxml . jackson . databind . type . TypeFactory ; 
 import com . github . dreamhead . moco . MocoException ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . FluentIterable ; 
 import com . google . common . collect . ImmutableList ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 17 , 7 + 19 , 6 @ @ import java . io . InputStream ; 
 import java . util . List ; 
 
 import static com . google . common . collect . ImmutableList . of ; 
 - import static com . google . common . io . Closeables . closeQuietly ; 
 import static java . lang . String . format ; 
 
 public final class Jsons { 
 @ @ - 59 , 28 + 60 , 27 @ @ public final class Jsons { 
 } 
 
 public static < T > ImmutableList < T > toObjects ( final ImmutableList < InputStream > streams , final Class < T > elementClass ) { 
 - try { 
 - ImmutableList . Builder < T > builder = ImmutableList . builder ( ) ; 
 - CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; 
 + final CollectionType type = factory . constructCollectionType ( List . class , elementClass ) ; 
 + return FluentIterable . from ( streams ) . transformAndConcat ( Jsons . < T > toObject ( type ) ) . toList ( ) ; 
 + } 
 
 - for ( InputStream stream : streams ) { 
 - try { 
 - builder . addAll ( mapper . < List < T > > readValue ( stream , type ) ) ; 
 - } finally { 
 - closeQuietly ( stream ) ; 
 + private static < T > Function < InputStream , Iterable < T > > toObject ( final CollectionType type ) { 
 + return new Function < InputStream , Iterable < T > > ( ) { 
 + @ Override 
 + public Iterable < T > apply ( final InputStream input ) { 
 + try ( InputStream actual = input ) { 
 + return mapper . readValue ( actual , type ) ; 
 + } catch ( UnrecognizedPropertyException e ) { 
 + logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; 
 + throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 + } catch ( JsonMappingException e ) { 
 + logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 + throw new MocoException ( e ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 } 
 } 
 - 
 - return builder . build ( ) ; 
 - } catch ( UnrecognizedPropertyException e ) { 
 - logger . info ( " Unrecognized field : { } " , e . getMessage ( ) ) ; 
 - throw new MocoException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 - } catch ( JsonMappingException e ) { 
 - logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 - throw new MocoException ( e ) ; 
 - } catch ( IOException e ) { 
 - throw new MocoException ( e ) ; 
 - } 
 + } ; 
 } 
 
 private Jsons ( ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java 
 index 485436f . . 1e237b1 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailoverExecutor . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . handler . failover ; 
 
 - import com . fasterxml . jackson . core . type . TypeReference ; 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . fasterxml . jackson . databind . ObjectWriter ; 
 import com . github . dreamhead . moco . HttpRequest ; 
 @ @ - 12 , 7 + 11 , 6 @ @ import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . base . Optional ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . ImmutableList ; 
 - import com . google . common . io . Closeables ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 20 , 11 + 18 , 9 @ @ import java . io . File ; 
 import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 - import java . util . List ; 
 
 import static com . google . common . base . Predicates . not ; 
 import static com . google . common . collect . FluentIterable . from ; 
 - import static com . google . common . collect . ImmutableList . copyOf ; 
 import static com . google . common . collect . ImmutableList . of ; 
 import static com . google . common . collect . Iterables . tryFind ; 
 
 @ @ - 70 , 20 + 66 , 14 @ @ public class DefaultFailoverExecutor implements FailoverExecutor { 
 } 
 
 private ImmutableList < Session > restoreSessions ( final File file ) { 
 - InputStream inputStream = null ; 
 try { 
 - inputStream = new FileInputStream ( file ) ; 
 - List < Session > sessions = Jsons . toObjects ( inputStream , Session . class ) ; 
 - return copyOf ( sessions ) ; 
 + InputStream inputStream = new FileInputStream ( file ) ; 
 + return Jsons . toObjects ( inputStream , Session . class ) ; 
 } catch ( MocoException me ) { 
 logger . error ( " exception found " , me ) ; 
 return of ( ) ; 
 } catch ( IOException e ) { 
 throw new MocoException ( e ) ; 
 - } finally { 
 - if ( inputStream ! = null ) { 
 - Closeables . closeQuietly ( inputStream ) ; 
 - } 
 } 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index 8f7eeca . . 68c7442 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 64 , 9 + 64 , 9 @ @ public final class Jsons { 
 throw new RuntimeException ( format ( " Unrecognized field [ % s ] , please check ! " , e . getPropertyName ( ) ) ) ; 
 } catch ( JsonMappingException e ) { 
 logger . info ( " { } { } " , e . getMessage ( ) , e . getPathReference ( ) ) ; 
 - throw new RuntimeException ( e ) ; 
 + throw new MocoException ( e ) ; 
 } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 + throw new MocoException ( e ) ; 
 } finally { 
 closeQuietly ( stream ) ; 
 }
