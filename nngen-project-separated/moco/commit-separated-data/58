BLEU SCORE: 0.06567274736060397

TEST MSG: added missing final to moco http server
GENERATED MSG: introduced type token to remove self

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java <nl> index f6ae160 . . 3735ee3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java <nl> @ @ - 20 , 12 + 20 , 12 @ @ public class MocoHttpServer extends BaseServerRunner { <nl> } <nl> <nl> @ Override <nl> - protected BaseActualServer serverSetting ( ) { <nl> + protected final BaseActualServer serverSetting ( ) { <nl> return this . serverSetting ; <nl> } <nl> <nl> @ Override <nl> - protected ChannelInitializer < SocketChannel > channelInitializer ( ) { <nl> + protected final ChannelInitializer < SocketChannel > channelInitializer ( ) { <nl> return new ChannelInitializer < SocketChannel > ( ) { <nl> @ Override <nl> protected void initChannel ( final SocketChannel ch ) throws Exception {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 7ac9461 . . 0116c19 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 92 , 11 + 92 , 6 @ @ public class ActualHttpServer extends HttpConfiguration { <nl> } <nl> <nl> @ Override <nl> - protected HttpResponseSetting self ( ) { <nl> - return this ; <nl> - } <nl> - <nl> - @ Override <nl> public HttpResponseSetting redirectTo ( final String url ) { <nl> return this . response ( status ( HttpResponseStatus . FOUND . code ( ) ) , header ( HttpHeaders . LOCATION , checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> index 4a3fa83 . . 6cf5394 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java <nl> @ @ - 28 , 11 + 28 , 6 @ @ public class ActualSocketServer extends BaseActualServer < SocketResponseSetting > <nl> return baseSetting ; <nl> } <nl> <nl> - @ Override <nl> - protected SocketResponseSetting self ( ) { <nl> - return this ; <nl> - } <nl> - <nl> public SocketServer mergeHttpServer ( final ActualSocketServer thatServer ) { <nl> ActualSocketServer newServer = newBaseServer ( ) ; <nl> newServer . addSettings ( this . getSettings ( ) ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> index 528960b . . 493ae74 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . MocoProcedure ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . ResponseSetting ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> + import com . google . common . reflect . TypeToken ; <nl> <nl> import java . util . List ; <nl> <nl> @ @ - 16 , 10 + 17 , 19 @ @ import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> <nl> public abstract class BaseResponseSettingConfiguration < T extends ResponseSetting < T > > implements ResponseSetting < T > { <nl> - protected abstract T self ( ) ; <nl> <nl> protected ResponseHandler handler ; <nl> protected List < MocoEventTrigger > eventTriggers = newArrayList ( ) ; <nl> + private final Class < T > clazz ; <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public BaseResponseSettingConfiguration ( ) { <nl> + this . clazz = ( Class < T > ) new TypeToken < T > ( getClass ( ) ) { } . getRawType ( ) ; <nl> + } <nl> + <nl> + protected T self ( ) { <nl> + return clazz . cast ( this ) ; <nl> + } <nl> <nl> @ Override <nl> public T response ( final String content ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java <nl> index 0dc10e2 . . d13dd72 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java <nl> @ @ - 36 , 11 + 36 , 6 @ @ public class HttpSetting extends BaseSetting < HttpResponseSetting > implements Set <nl> } <nl> <nl> @ Override <nl> - protected HttpResponseSetting self ( ) { <nl> - return this ; <nl> - } <nl> - <nl> - @ Override <nl> public HttpResponseSetting redirectTo ( final String url ) { <nl> return this . response ( status ( HttpResponseStatus . FOUND . code ( ) ) , header ( HttpHeaders . LOCATION , checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java <nl> index 3886954 . . 2f80b5c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java <nl> @ @ - 13 , 11 + 13 , 6 @ @ public class SocketSetting extends BaseSetting < SocketResponseSetting > implements <nl> } <nl> <nl> @ Override <nl> - protected SocketResponseSetting self ( ) { <nl> - return this ; <nl> - } <nl> - <nl> - @ Override <nl> public Setting < SocketResponseSetting > apply ( final MocoConfig config ) { <nl> RequestMatcher appliedMatcher = configItem ( this . matcher , config ) ; <nl> SocketSetting setting = new SocketSetting ( appliedMatcher ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java 
 index f6ae160 . . 3735ee3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoHttpServer . java 
 @ @ - 20 , 12 + 20 , 12 @ @ public class MocoHttpServer extends BaseServerRunner { 
 } 
 
 @ Override 
 - protected BaseActualServer serverSetting ( ) { 
 + protected final BaseActualServer serverSetting ( ) { 
 return this . serverSetting ; 
 } 
 
 @ Override 
 - protected ChannelInitializer < SocketChannel > channelInitializer ( ) { 
 + protected final ChannelInitializer < SocketChannel > channelInitializer ( ) { 
 return new ChannelInitializer < SocketChannel > ( ) { 
 @ Override 
 protected void initChannel ( final SocketChannel ch ) throws Exception {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 index 7ac9461 . . 0116c19 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 @ @ - 92 , 11 + 92 , 6 @ @ public class ActualHttpServer extends HttpConfiguration { 
 } 
 
 @ Override 
 - protected HttpResponseSetting self ( ) { 
 - return this ; 
 - } 
 - 
 - @ Override 
 public HttpResponseSetting redirectTo ( final String url ) { 
 return this . response ( status ( HttpResponseStatus . FOUND . code ( ) ) , header ( HttpHeaders . LOCATION , checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 index 4a3fa83 . . 6cf5394 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualSocketServer . java 
 @ @ - 28 , 11 + 28 , 6 @ @ public class ActualSocketServer extends BaseActualServer < SocketResponseSetting > 
 return baseSetting ; 
 } 
 
 - @ Override 
 - protected SocketResponseSetting self ( ) { 
 - return this ; 
 - } 
 - 
 public SocketServer mergeHttpServer ( final ActualSocketServer thatServer ) { 
 ActualSocketServer newServer = newBaseServer ( ) ; 
 newServer . addSettings ( this . getSettings ( ) ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java 
 index 528960b . . 493ae74 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / BaseResponseSettingConfiguration . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . MocoProcedure ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . ResponseSetting ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 + import com . google . common . reflect . TypeToken ; 
 
 import java . util . List ; 
 
 @ @ - 16 , 10 + 17 , 19 @ @ import static com . google . common . base . Preconditions . checkNotNull ; 
 import static com . google . common . collect . Lists . newArrayList ; 
 
 public abstract class BaseResponseSettingConfiguration < T extends ResponseSetting < T > > implements ResponseSetting < T > { 
 - protected abstract T self ( ) ; 
 
 protected ResponseHandler handler ; 
 protected List < MocoEventTrigger > eventTriggers = newArrayList ( ) ; 
 + private final Class < T > clazz ; 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public BaseResponseSettingConfiguration ( ) { 
 + this . clazz = ( Class < T > ) new TypeToken < T > ( getClass ( ) ) { } . getRawType ( ) ; 
 + } 
 + 
 + protected T self ( ) { 
 + return clazz . cast ( this ) ; 
 + } 
 
 @ Override 
 public T response ( final String content ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java 
 index 0dc10e2 . . d13dd72 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / HttpSetting . java 
 @ @ - 36 , 11 + 36 , 6 @ @ public class HttpSetting extends BaseSetting < HttpResponseSetting > implements Set 
 } 
 
 @ Override 
 - protected HttpResponseSetting self ( ) { 
 - return this ; 
 - } 
 - 
 - @ Override 
 public HttpResponseSetting redirectTo ( final String url ) { 
 return this . response ( status ( HttpResponseStatus . FOUND . code ( ) ) , header ( HttpHeaders . LOCATION , checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java 
 index 3886954 . . 2f80b5c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / SocketSetting . java 
 @ @ - 13 , 11 + 13 , 6 @ @ public class SocketSetting extends BaseSetting < SocketResponseSetting > implements 
 } 
 
 @ Override 
 - protected SocketResponseSetting self ( ) { 
 - return this ; 
 - } 
 - 
 - @ Override 
 public Setting < SocketResponseSetting > apply ( final MocoConfig config ) { 
 RequestMatcher appliedMatcher = configItem ( this . matcher , config ) ; 
 SocketSetting setting = new SocketSetting ( appliedMatcher ) ;
