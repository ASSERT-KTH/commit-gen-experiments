BLEU SCORE: 0.027611988917697356

TEST MSG: upgraded netty to 4 . 1 . 16
GENERATED MSG: created watchers as utility

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index fc2c00f . . 7b6a5d4 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 73 , 7 + 73 , 7 @ @ subprojects { <nl> <nl> project . ext { <nl> guavaVersion = ' 20 . 0 ' <nl> - nettyVersion = ' 4 . 1 . 15 . Final ' <nl> + nettyVersion = ' 4 . 1 . 16 . Final ' <nl> slf4jVersion = ' 1 . 7 . 25 ' <nl> commonsIoVersion = ' 2 . 5 ' <nl> jacksonVersion = ' 2 . 9 . 1 ' <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> index 760e214 . . 405c392 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java <nl> @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> <nl> - public final class WatcherRunner implements Runner { <nl> + public class WatcherRunner implements Runner { <nl> private final Runner runner ; <nl> private final Watcher watcher ; <nl>
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> index c1205d5 . . 49da66c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> <nl> + import static com . github . dreamhead . moco . runner . watcher . Watchers . threadSafe ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> @ @ - 23 , 7 + 24 , 7 @ @ public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> } <nl> <nl> private Watcher create ( final FileRunner fileRunner , final File file ) { <nl> - return new ThreadSafeRunnerWatcher ( doCreate ( fileRunner , file ) ) ; <nl> + return threadSafe ( doCreate ( fileRunner , file ) ) ; <nl> } <nl> <nl> private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> index fc074d4 . . 7fe7f66 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> @ @ - 11 , 7 + 11 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> <nl> - import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; <nl> + import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; <nl> <nl> public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> deleted file mode 100644 <nl> index aae0fd2 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import java . util . concurrent . TimeUnit ; <nl> - <nl> - public class ThreadSafeRunnerWatcher implements Watcher { <nl> - public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> - <nl> - private final Watcher watcher ; <nl> - private boolean running = false ; <nl> - <nl> - public ThreadSafeRunnerWatcher ( final Watcher watcher ) { <nl> - this . watcher = watcher ; <nl> - } <nl> - <nl> - public synchronized void start ( ) { <nl> - watcher . start ( ) ; <nl> - running = true ; <nl> - } <nl> - <nl> - public synchronized void stop ( ) { <nl> - if ( watcher ! = null & & running ) { <nl> - watcher . stop ( ) ; <nl> - running = false ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> new file mode 100644 <nl> index 0000000 . . 71ffd69 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + public class Watchers { <nl> + public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> + <nl> + public static Watcher threadSafe ( final Watcher watcher ) { <nl> + return new ThreadSafeRunnerWatcher ( watcher ) ; <nl> + } <nl> + <nl> + private static class ThreadSafeRunnerWatcher implements Watcher { <nl> + private final Watcher watcher ; <nl> + private boolean running = false ; <nl> + <nl> + ThreadSafeRunnerWatcher ( final Watcher watcher ) { <nl> + this . watcher = watcher ; <nl> + } <nl> + <nl> + public synchronized void start ( ) { <nl> + watcher . start ( ) ; <nl> + running = true ; <nl> + } <nl> + <nl> + public synchronized void stop ( ) { <nl> + if ( watcher ! = null & & running ) { <nl> + watcher . stop ( ) ; <nl> + running = false ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private Watchers ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> index 809b704 . . 648a818 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> - import com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher ; <nl> + import com . github . dreamhead . moco . runner . watcher . Watchers ; <nl> import org . junit . After ; <nl> <nl> import java . io . File ; <nl> @ @ - 27 , 7 + 27 , 7 @ @ public abstract class AbstractRunnerTest { <nl> <nl> protected void waitChangeHappens ( ) { <nl> try { <nl> - idle ( ThreadSafeRunnerWatcher . INTERVAL * 3 , TimeUnit . MILLISECONDS ) ; <nl> + idle ( Watchers . INTERVAL * 3 , TimeUnit . MILLISECONDS ) ; <nl> } catch ( Exception e ) { <nl> fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; <nl> }

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index fc2c00f . . 7b6a5d4 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 73 , 7 + 73 , 7 @ @ subprojects { 
 
 project . ext { 
 guavaVersion = ' 20 . 0 ' 
 - nettyVersion = ' 4 . 1 . 15 . Final ' 
 + nettyVersion = ' 4 . 1 . 16 . Final ' 
 slf4jVersion = ' 1 . 7 . 25 ' 
 commonsIoVersion = ' 2 . 5 ' 
 jacksonVersion = ' 2 . 9 . 1 ' 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java 
 index 760e214 . . 405c392 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / WatcherRunner . java 
 @ @ - 2 , 7 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 
 - public final class WatcherRunner implements Runner { 
 + public class WatcherRunner implements Runner { 
 private final Runner runner ; 
 private final Watcher watcher ; 


NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 index c1205d5 . . 49da66c 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import com . google . common . base . Function ; 
 
 import java . io . File ; 
 
 + import static com . github . dreamhead . moco . runner . watcher . Watchers . threadSafe ; 
 import static com . google . common . collect . FluentIterable . from ; 
 
 public abstract class AbstractWatcherFactory implements FileWatcherFactory { 
 @ @ - 23 , 7 + 24 , 7 @ @ public abstract class AbstractWatcherFactory implements FileWatcherFactory { 
 } 
 
 private Watcher create ( final FileRunner fileRunner , final File file ) { 
 - return new ThreadSafeRunnerWatcher ( doCreate ( fileRunner , file ) ) ; 
 + return threadSafe ( doCreate ( fileRunner , file ) ) ; 
 } 
 
 private Watcher doCreate ( final FileRunner fileRunner , File [ ] files ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 index fc074d4 . . 7fe7f66 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 @ @ - 11 , 7 + 11 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import java . io . File ; 
 import java . io . FileFilter ; 
 
 - import static com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher . INTERVAL ; 
 + import static com . github . dreamhead . moco . runner . watcher . Watchers . INTERVAL ; 
 
 public class CommonsIoWatcherFactory extends AbstractWatcherFactory { 
 private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcherFactory . class ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java 
 deleted file mode 100644 
 index aae0fd2 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / ThreadSafeRunnerWatcher . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import java . util . concurrent . TimeUnit ; 
 - 
 - public class ThreadSafeRunnerWatcher implements Watcher { 
 - public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; 
 - 
 - private final Watcher watcher ; 
 - private boolean running = false ; 
 - 
 - public ThreadSafeRunnerWatcher ( final Watcher watcher ) { 
 - this . watcher = watcher ; 
 - } 
 - 
 - public synchronized void start ( ) { 
 - watcher . start ( ) ; 
 - running = true ; 
 - } 
 - 
 - public synchronized void stop ( ) { 
 - if ( watcher ! = null & & running ) { 
 - watcher . stop ( ) ; 
 - running = false ; 
 - } 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java 
 new file mode 100644 
 index 0000000 . . 71ffd69 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Watchers . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + public class Watchers { 
 + public static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; 
 + 
 + public static Watcher threadSafe ( final Watcher watcher ) { 
 + return new ThreadSafeRunnerWatcher ( watcher ) ; 
 + } 
 + 
 + private static class ThreadSafeRunnerWatcher implements Watcher { 
 + private final Watcher watcher ; 
 + private boolean running = false ; 
 + 
 + ThreadSafeRunnerWatcher ( final Watcher watcher ) { 
 + this . watcher = watcher ; 
 + } 
 + 
 + public synchronized void start ( ) { 
 + watcher . start ( ) ; 
 + running = true ; 
 + } 
 + 
 + public synchronized void stop ( ) { 
 + if ( watcher ! = null & & running ) { 
 + watcher . stop ( ) ; 
 + running = false ; 
 + } 
 + } 
 + } 
 + 
 + private Watchers ( ) { 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 index 809b704 . . 648a818 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 - import com . github . dreamhead . moco . runner . watcher . ThreadSafeRunnerWatcher ; 
 + import com . github . dreamhead . moco . runner . watcher . Watchers ; 
 import org . junit . After ; 
 
 import java . io . File ; 
 @ @ - 27 , 7 + 27 , 7 @ @ public abstract class AbstractRunnerTest { 
 
 protected void waitChangeHappens ( ) { 
 try { 
 - idle ( ThreadSafeRunnerWatcher . INTERVAL * 3 , TimeUnit . MILLISECONDS ) ; 
 + idle ( Watchers . INTERVAL * 3 , TimeUnit . MILLISECONDS ) ; 
 } catch ( Exception e ) { 
 fail ( format ( " failed to wait change happens : % s " , e . getMessage ( ) ) ) ; 
 }
