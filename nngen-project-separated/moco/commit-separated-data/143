BLEU SCORE: 0.06742555929751845

TEST MSG: used first argument as range in random template function
GENERATED MSG: added seed argument to random in template

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 49b8c98 . . b728696 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 152 , 18 + 152 , 18 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> private static class RandomMethod implements TemplateMethodModelEx { <nl> @ Override <nl> public Object exec ( List arguments ) { <nl> - Optional < Long > seed = getSeed ( arguments ) ; <nl> - Random random = getRandom ( seed ) ; <nl> + Optional < Long > range = getRange ( arguments ) ; <nl> Optional < ? extends NumberFormat > format = getFormat ( arguments ) ; <nl> + double result = new Random ( ) . nextDouble ( ) * range . or ( 1L ) ; <nl> + <nl> if ( format . isPresent ( ) ) { <nl> - return format . get ( ) . format ( random . nextDouble ( ) ) ; <nl> + return format . get ( ) . format ( result ) ; <nl> } <nl> - return random . nextDouble ( ) ; <nl> + return result ; <nl> } <nl> <nl> private Optional < ? extends NumberFormat > getFormat ( final List arguments ) { <nl> if ( arguments . size ( ) > 0 ) { <nl> - <nl> Object last = arguments . get ( arguments . size ( ) - 1 ) ; <nl> if ( last instanceof SimpleScalar ) { <nl> SimpleScalar lastArgument = ( SimpleScalar ) last ; <nl> @ @ - 174 , 14 + 174 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> return Optional . absent ( ) ; <nl> } <nl> <nl> - private Random getRandom ( final Optional < Long > seed ) { <nl> - if ( seed . isPresent ( ) ) { <nl> - return new Random ( seed . get ( ) ) ; <nl> - } <nl> - return new Random ( ) ; <nl> - } <nl> - <nl> - private Optional < Long > getSeed ( List arguments ) { <nl> + private Optional < Long > getRange ( List arguments ) { <nl> if ( arguments . size ( ) > 0 & & arguments . get ( 0 ) instanceof SimpleNumber ) { <nl> SimpleNumber seed = ( SimpleNumber ) arguments . get ( 0 ) ; <nl> return Optional . of ( seed . getAsNumber ( ) . longValue ( ) ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index d48337a . . 19987eb 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 463 , 7 + 463 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ generate _ response _ with _ random _ with _ seed ( ) throws Exception { <nl> + public void should _ generate _ response _ with _ random _ with _ range ( ) throws Exception { <nl> server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ @ - 472 , 7 + 472 , 8 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> try { <nl> double result = Double . parseDouble ( response ) ; <nl> - assertThat ( result , lessThan ( 1d ) ) ; <nl> + assertThat ( result , lessThan ( 100d ) ) ; <nl> + assertThat ( result , greaterThan ( 0d ) ) ; <nl> } catch ( NumberFormatException e ) { <nl> fail ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index cc8237b . . 1358a48 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 15 , 6 + 15 , 7 @ @ import freemarker . cache . TemplateLoader ; <nl> import freemarker . core . ParseException ; <nl> import freemarker . template . Configuration ; <nl> import freemarker . template . DefaultObjectWrapperBuilder ; <nl> + import freemarker . template . SimpleNumber ; <nl> import freemarker . template . Template ; <nl> import freemarker . template . TemplateException ; <nl> import freemarker . template . TemplateMethodModelEx ; <nl> @ @ - 148 , 11 + 149 , 30 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> } <nl> <nl> private static class RandomMethod implements TemplateMethodModelEx { <nl> - private Random random = new Random ( ) ; <nl> + <nl> <nl> @ Override <nl> public Object exec ( List arguments ) { <nl> + Optional < Long > seed = getSeed ( arguments ) ; <nl> + Random random = getRandom ( seed ) ; <nl> return random . nextDouble ( ) ; <nl> } <nl> + <nl> + private Random getRandom ( final Optional < Long > seed ) { <nl> + if ( seed . isPresent ( ) ) { <nl> + return new Random ( seed . get ( ) ) ; <nl> + } <nl> + return new Random ( ) ; <nl> + } <nl> + <nl> + private Optional < Long > getSeed ( List arguments ) { <nl> + if ( arguments . size ( ) > 0 ) { <nl> + <nl> + SimpleNumber seed = ( SimpleNumber ) arguments . get ( 0 ) ; <nl> + return Optional . of ( seed . getAsNumber ( ) . longValue ( ) ) ; <nl> + } <nl> + <nl> + return Optional . absent ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 3c65685 . . 93b5bed 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> import static com . google . common . collect . ImmutableMap . of ; <nl> import static com . google . common . io . Files . toByteArray ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . hamcrest . Matchers . lessThan ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ @ - 444 , 4 + 445 , 22 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ generate _ response _ with _ random _ with _ seed ( ) throws Exception { <nl> + server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + String response = helper . get ( remoteUrl ( " / random " ) ) ; <nl> + try { <nl> + double result = Double . parseDouble ( response ) ; <nl> + assertThat ( result , lessThan ( 1d ) ) ; <nl> + } catch ( NumberFormatException e ) { <nl> + fail ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 index 49b8c98 . . b728696 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 @ @ - 152 , 18 + 152 , 18 @ @ public class TemplateResourceReader implements ContentResourceReader { 
 private static class RandomMethod implements TemplateMethodModelEx { 
 @ Override 
 public Object exec ( List arguments ) { 
 - Optional < Long > seed = getSeed ( arguments ) ; 
 - Random random = getRandom ( seed ) ; 
 + Optional < Long > range = getRange ( arguments ) ; 
 Optional < ? extends NumberFormat > format = getFormat ( arguments ) ; 
 + double result = new Random ( ) . nextDouble ( ) * range . or ( 1L ) ; 
 + 
 if ( format . isPresent ( ) ) { 
 - return format . get ( ) . format ( random . nextDouble ( ) ) ; 
 + return format . get ( ) . format ( result ) ; 
 } 
 - return random . nextDouble ( ) ; 
 + return result ; 
 } 
 
 private Optional < ? extends NumberFormat > getFormat ( final List arguments ) { 
 if ( arguments . size ( ) > 0 ) { 
 - 
 Object last = arguments . get ( arguments . size ( ) - 1 ) ; 
 if ( last instanceof SimpleScalar ) { 
 SimpleScalar lastArgument = ( SimpleScalar ) last ; 
 @ @ - 174 , 14 + 174 , 7 @ @ public class TemplateResourceReader implements ContentResourceReader { 
 return Optional . absent ( ) ; 
 } 
 
 - private Random getRandom ( final Optional < Long > seed ) { 
 - if ( seed . isPresent ( ) ) { 
 - return new Random ( seed . get ( ) ) ; 
 - } 
 - return new Random ( ) ; 
 - } 
 - 
 - private Optional < Long > getSeed ( List arguments ) { 
 + private Optional < Long > getRange ( List arguments ) { 
 if ( arguments . size ( ) > 0 & & arguments . get ( 0 ) instanceof SimpleNumber ) { 
 SimpleNumber seed = ( SimpleNumber ) arguments . get ( 0 ) ; 
 return Optional . of ( seed . getAsNumber ( ) . longValue ( ) ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index d48337a . . 19987eb 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 463 , 7 + 463 , 7 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 - public void should _ generate _ response _ with _ random _ with _ seed ( ) throws Exception { 
 + public void should _ generate _ response _ with _ random _ with _ range ( ) throws Exception { 
 server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ @ - 472 , 7 + 472 , 8 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 String response = helper . get ( remoteUrl ( " / random " ) ) ; 
 try { 
 double result = Double . parseDouble ( response ) ; 
 - assertThat ( result , lessThan ( 1d ) ) ; 
 + assertThat ( result , lessThan ( 100d ) ) ; 
 + assertThat ( result , greaterThan ( 0d ) ) ; 
 } catch ( NumberFormatException e ) { 
 fail ( ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 index cc8237b . . 1358a48 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 @ @ - 15 , 6 + 15 , 7 @ @ import freemarker . cache . TemplateLoader ; 
 import freemarker . core . ParseException ; 
 import freemarker . template . Configuration ; 
 import freemarker . template . DefaultObjectWrapperBuilder ; 
 + import freemarker . template . SimpleNumber ; 
 import freemarker . template . Template ; 
 import freemarker . template . TemplateException ; 
 import freemarker . template . TemplateMethodModelEx ; 
 @ @ - 148 , 11 + 149 , 30 @ @ public class TemplateResourceReader implements ContentResourceReader { 
 } 
 
 private static class RandomMethod implements TemplateMethodModelEx { 
 - private Random random = new Random ( ) ; 
 + 
 
 @ Override 
 public Object exec ( List arguments ) { 
 + Optional < Long > seed = getSeed ( arguments ) ; 
 + Random random = getRandom ( seed ) ; 
 return random . nextDouble ( ) ; 
 } 
 + 
 + private Random getRandom ( final Optional < Long > seed ) { 
 + if ( seed . isPresent ( ) ) { 
 + return new Random ( seed . get ( ) ) ; 
 + } 
 + return new Random ( ) ; 
 + } 
 + 
 + private Optional < Long > getSeed ( List arguments ) { 
 + if ( arguments . size ( ) > 0 ) { 
 + 
 + SimpleNumber seed = ( SimpleNumber ) arguments . get ( 0 ) ; 
 + return Optional . of ( seed . getAsNumber ( ) . longValue ( ) ) ; 
 + } 
 + 
 + return Optional . absent ( ) ; 
 + } 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index 3c65685 . . 93b5bed 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 import static com . google . common . collect . ImmutableMap . of ; 
 import static com . google . common . io . Files . toByteArray ; 
 import static org . hamcrest . CoreMatchers . is ; 
 + import static org . hamcrest . Matchers . lessThan ; 
 import static org . junit . Assert . assertThat ; 
 import static org . junit . Assert . fail ; 
 
 @ @ - 444 , 4 + 445 , 22 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ generate _ response _ with _ random _ with _ seed ( ) throws Exception { 
 + server . request ( by ( uri ( " / random " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + String response = helper . get ( remoteUrl ( " / random " ) ) ; 
 + try { 
 + double result = Double . parseDouble ( response ) ; 
 + assertThat ( result , lessThan ( 1d ) ) ; 
 + } catch ( NumberFormatException e ) { 
 + fail ( ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 }
