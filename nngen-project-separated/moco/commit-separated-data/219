BLEU SCORE: 0.17491650626361266

TEST MSG: introduced map to json utility
GENERATED MSG: applied global matcher to json matcher

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> index 8e371e4 . . e38d9cf 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import java . io . ByteArrayInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> import static com . google . common . collect . ImmutableList . of ; <nl> import static java . lang . String . format ; <nl> @ @ - 35 , 6 + 36 , 14 @ @ public final class Jsons { <nl> } <nl> } <nl> <nl> + public static String toJson ( final Map map ) { <nl> + try { <nl> + return mapper . writeValueAsString ( map ) ; <nl> + } catch ( JsonProcessingException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + } <nl> + <nl> public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { <nl> try { <nl> return mapper . readValue ( value , clazz ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index 8a2e7f6 . . cc9a74e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . internal . SessionContext ; <nl> import com . github . dreamhead . moco . support . JsonSupport ; <nl> + import com . github . dreamhead . moco . util . Jsons ; <nl> import com . google . common . io . ByteStreams ; <nl> import org . apache . http . client . HttpResponseException ; <nl> import org . junit . Test ; <nl> @ @ - 25 , 6 + 26 , 7 @ @ import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static com . google . common . collect . ImmutableMap . of ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> import static org . mockito . ArgumentMatchers . any ; <nl> @ @ - 79 , 12 + 81 , 12 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ match _ exact _ json ( ) throws Exception { <nl> - final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; <nl> - server . request ( by ( json ( jsonContent ) ) ) . response ( " foo " ) ; <nl> + final String jsonText = Jsons . toJson ( of ( " foo " , " bar " ) ) ; <nl> + server . request ( by ( json ( jsonText ) ) ) . response ( " foo " ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - assertThat ( helper . postContent ( root ( ) , jsonContent ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . postContent ( root ( ) , jsonText ) , is ( " foo " ) ) ; <nl> } <nl> } ) ; <nl> } <nl> @ @ - 103 , 11 + 105 , 12 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> <nl> @ Test <nl> public void should _ match _ same _ structure _ json ( ) throws Exception { <nl> - server . request ( by ( json ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; <nl> + final String jsonText = Jsons . toJson ( of ( " foo " , " bar " ) ) ; <nl> + server . request ( by ( json ( jsonText ) ) ) . response ( " foo " ) ; <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws IOException { <nl> - assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " foo \ " : \ " bar \ " \ n } " ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . postContent ( root ( ) , jsonText ) , is ( " foo " ) ) ; <nl> } <nl> } ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> index d73a73a . . 0404168 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . base . Optional ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . and ; <nl> import static com . google . common . base . Optional . of ; <nl> <nl> public class JsonRequestMatcher implements RequestMatcher { <nl> @ @ - 41 , 7 + 42 , 12 @ @ public class JsonRequestMatcher implements RequestMatcher { <nl> } <nl> <nl> @ Override <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public RequestMatcher apply ( final MocoConfig config ) { <nl> + if ( config . isFor ( MocoConfig . REQUEST _ ID ) ) { <nl> + return ( RequestMatcher ) config . apply ( this ) ; <nl> + } <nl> + <nl> Resource appliedResource = this . resource . apply ( config ) ; <nl> if ( appliedResource = = this . resource ) { <nl> return this ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java <nl> index 66186ed . . 0e5f133 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java <nl> @ @ - 3 , 6 + 3 , 8 @ @ package com . github . dreamhead . moco ; <nl> import org . apache . http . client . HttpResponseException ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . IOException ; <nl> + <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> @ @ - 94 , 4 + 96 , 30 @ @ public class MocoGlobalRequestTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ match _ with _ json ( ) throws Exception { <nl> + server = httpserver ( port ( ) , request ( by ( uri ( " / path " ) ) ) ) ; <nl> + final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; <nl> + server . request ( json ( text ( jsonContent ) ) ) . response ( " foo " ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( remoteUrl ( " / path " ) , jsonContent ) , is ( " foo " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpResponseException . class ) <nl> + public void should _ throw _ match _ with _ json ( ) throws Exception { <nl> + server = httpserver ( port ( ) , request ( by ( uri ( " / path " ) ) ) ) ; <nl> + final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; <nl> + server . request ( json ( text ( jsonContent ) ) ) . response ( " foo " ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + helper . postContent ( root ( ) , jsonContent ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 index 8e371e4 . . e38d9cf 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Jsons . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import java . io . ByteArrayInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . util . List ; 
 + import java . util . Map ; 
 
 import static com . google . common . collect . ImmutableList . of ; 
 import static java . lang . String . format ; 
 @ @ - 35 , 6 + 36 , 14 @ @ public final class Jsons { 
 } 
 } 
 
 + public static String toJson ( final Map map ) { 
 + try { 
 + return mapper . writeValueAsString ( map ) ; 
 + } catch ( JsonProcessingException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + } 
 + 
 public static < T > T toObject ( final InputStream value , final Class < T > clazz ) { 
 try { 
 return mapper . readValue ( value , clazz ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index 8a2e7f6 . . cc9a74e 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . internal . SessionContext ; 
 import com . github . dreamhead . moco . support . JsonSupport ; 
 + import com . github . dreamhead . moco . util . Jsons ; 
 import com . google . common . io . ByteStreams ; 
 import org . apache . http . client . HttpResponseException ; 
 import org . junit . Test ; 
 @ @ - 25 , 6 + 26 , 7 @ @ import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 + import static com . google . common . collect . ImmutableMap . of ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 import static org . mockito . ArgumentMatchers . any ; 
 @ @ - 79 , 12 + 81 , 12 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 
 @ Test 
 public void should _ match _ exact _ json ( ) throws Exception { 
 - final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; 
 - server . request ( by ( json ( jsonContent ) ) ) . response ( " foo " ) ; 
 + final String jsonText = Jsons . toJson ( of ( " foo " , " bar " ) ) ; 
 + server . request ( by ( json ( jsonText ) ) ) . response ( " foo " ) ; 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws IOException { 
 - assertThat ( helper . postContent ( root ( ) , jsonContent ) , is ( " foo " ) ) ; 
 + assertThat ( helper . postContent ( root ( ) , jsonText ) , is ( " foo " ) ) ; 
 } 
 } ) ; 
 } 
 @ @ - 103 , 11 + 105 , 12 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 
 @ Test 
 public void should _ match _ same _ structure _ json ( ) throws Exception { 
 - server . request ( by ( json ( " { \ " foo \ " : \ " bar \ " } " ) ) ) . response ( " foo " ) ; 
 + final String jsonText = Jsons . toJson ( of ( " foo " , " bar " ) ) ; 
 + server . request ( by ( json ( jsonText ) ) ) . response ( " foo " ) ; 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws IOException { 
 - assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " foo \ " : \ " bar \ " \ n } " ) , is ( " foo " ) ) ; 
 + assertThat ( helper . postContent ( root ( ) , jsonText ) , is ( " foo " ) ) ; 
 } 
 } ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 index d73a73a . . 0404168 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import com . google . common . base . Optional ; 
 
 import java . io . IOException ; 
 
 + import static com . github . dreamhead . moco . Moco . and ; 
 import static com . google . common . base . Optional . of ; 
 
 public class JsonRequestMatcher implements RequestMatcher { 
 @ @ - 41 , 7 + 42 , 12 @ @ public class JsonRequestMatcher implements RequestMatcher { 
 } 
 
 @ Override 
 + @ SuppressWarnings ( " unchecked " ) 
 public RequestMatcher apply ( final MocoConfig config ) { 
 + if ( config . isFor ( MocoConfig . REQUEST _ ID ) ) { 
 + return ( RequestMatcher ) config . apply ( this ) ; 
 + } 
 + 
 Resource appliedResource = this . resource . apply ( config ) ; 
 if ( appliedResource = = this . resource ) { 
 return this ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java 
 index 66186ed . . 0e5f133 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoGlobalRequestTest . java 
 @ @ - 3 , 6 + 3 , 8 @ @ package com . github . dreamhead . moco ; 
 import org . apache . http . client . HttpResponseException ; 
 import org . junit . Test ; 
 
 + import java . io . IOException ; 
 + 
 import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 @ @ - 94 , 4 + 96 , 30 @ @ public class MocoGlobalRequestTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ match _ with _ json ( ) throws Exception { 
 + server = httpserver ( port ( ) , request ( by ( uri ( " / path " ) ) ) ) ; 
 + final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; 
 + server . request ( json ( text ( jsonContent ) ) ) . response ( " foo " ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . postContent ( remoteUrl ( " / path " ) , jsonContent ) , is ( " foo " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test ( expected = HttpResponseException . class ) 
 + public void should _ throw _ match _ with _ json ( ) throws Exception { 
 + server = httpserver ( port ( ) , request ( by ( uri ( " / path " ) ) ) ) ; 
 + final String jsonContent = " { \ " foo \ " : \ " bar \ " } " ; 
 + server . request ( json ( text ( jsonContent ) ) ) . response ( " foo " ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + helper . postContent ( root ( ) , jsonContent ) ; 
 + } 
 + } ) ; 
 + } 
 }
