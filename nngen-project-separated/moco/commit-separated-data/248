BLEU SCORE: 0.09535414040914189

TEST MSG: moved by with extractor and resource to api utils
GENERATED MSG: used toJson resource to matcher

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 4631be2 . . 394297a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 63 , 7 + 63 , 6 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> - import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 188 , 15 + 187 , 7 @ @ public final class Moco { <nl> <nl> public static RequestMatcher by ( final Resource resource ) { <nl> checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return by ( extractor ( resource . id ( ) ) , resource ) ; <nl> - } <nl> - <nl> - private static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { <nl> - return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; <nl> - } <nl> - <nl> - return eq ( extractor , expected ) ; <nl> + return ApiUtils . by ( extractor ( resource . id ( ) ) , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final String expected ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 37ecef9 . . 55f5810 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 5 , 10 + 5 , 13 @ @ import com . github . dreamhead . moco . MocoMonitor ; <nl> import com . github . dreamhead . moco . RequestExtractor ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . extractor . ContentRequestExtractor ; <nl> import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; <nl> import com . github . dreamhead . moco . handler . failover . FailoverExecutor ; <nl> import com . github . dreamhead . moco . matcher . ContainMatcher ; <nl> import com . github . dreamhead . moco . matcher . EndsWithMatcher ; <nl> + import com . github . dreamhead . moco . matcher . EqRequestMatcher ; <nl> + import com . github . dreamhead . moco . matcher . JsonRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . MatchMatcher ; <nl> import com . github . dreamhead . moco . matcher . StartsWithMatcher ; <nl> import com . github . dreamhead . moco . monitor . CompositeMonitor ; <nl> @ @ - 82 , 19 + 85 , 27 @ @ public final class ApiUtils { <nl> } <nl> <nl> public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - return new MatchMatcher < T > ( extractor , expected ) ; <nl> + return new MatchMatcher < > ( extractor , expected ) ; <nl> } <nl> <nl> public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new StartsWithMatcher < T > ( extractor , resource ) ; <nl> + return new StartsWithMatcher < > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new EndsWithMatcher < T > ( extractor , resource ) ; <nl> + return new EndsWithMatcher < > ( extractor , resource ) ; <nl> } <nl> <nl> public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final Resource resource ) { <nl> - return new ContainMatcher < T > ( extractor , resource ) ; <nl> + return new ContainMatcher < > ( extractor , resource ) ; <nl> + } <nl> + <nl> + public static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> + if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { <nl> + return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; <nl> + } <nl> + <nl> + return new EqRequestMatcher < > ( extractor , expected ) ; <nl> } <nl> <nl> private ApiUtils ( ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 61388c5 . . 4631be2 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 7 , 6 + 7 , 7 @ @ import com . github . dreamhead . moco . config . MocoContextConfig ; <nl> import com . github . dreamhead . moco . config . MocoFileRootConfig ; <nl> import com . github . dreamhead . moco . config . MocoRequestConfig ; <nl> import com . github . dreamhead . moco . config . MocoResponseConfig ; <nl> + import com . github . dreamhead . moco . extractor . ContentRequestExtractor ; <nl> import com . github . dreamhead . moco . extractor . CookieRequestExtractor ; <nl> import com . github . dreamhead . moco . extractor . FormRequestExtractor ; <nl> import com . github . dreamhead . moco . extractor . HeaderRequestExtractor ; <nl> @ @ - 16 , 7 + 17 , 6 @ @ import com . github . dreamhead . moco . extractor . PlainExtractor ; <nl> import com . github . dreamhead . moco . extractor . XPathRequestExtractor ; <nl> import com . github . dreamhead . moco . handler . AndResponseHandler ; <nl> import com . github . dreamhead . moco . handler . HeaderResponseHandler ; <nl> - import com . github . dreamhead . moco . handler . JsonResponseHandler ; <nl> import com . github . dreamhead . moco . handler . ProcedureResponseHandler ; <nl> import com . github . dreamhead . moco . handler . ProxyBatchResponseHandler ; <nl> import com . github . dreamhead . moco . handler . ProxyResponseHandler ; <nl> @ @ - 63 , 6 + 63 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> + import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> @ @ - 187 , 7 + 188 , 15 @ @ public final class Moco { <nl> <nl> public static RequestMatcher by ( final Resource resource ) { <nl> checkNotNull ( resource , " Resource should not be null " ) ; <nl> - return eq ( extractor ( resource . id ( ) ) , resource ) ; <nl> + return by ( extractor ( resource . id ( ) ) , resource ) ; <nl> + } <nl> + <nl> + private static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> + if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { <nl> + return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; <nl> + } <nl> + <nl> + return eq ( extractor , expected ) ; <nl> } <nl> <nl> public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final String expected ) { <nl> @ @ - 195 , 7 + 204 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final Resource expected ) { <nl> - return new EqRequestMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , checkNotNull ( expected , " Expected content should not be null " ) ) ; <nl> + return new EqRequestMatcher < > ( checkNotNull ( extractor , " Extractor should not be null " ) , checkNotNull ( expected , " Expected content should not be null " ) ) ; <nl> } <nl> <nl> public static RequestMatcher match ( final Resource resource ) { <nl> @ @ - 343 , 7 + 352 , 7 @ @ public final class Moco { <nl> <nl> public static RequestMatcher json ( final Resource resource ) { <nl> checkNotNull ( resource , " Json should not be null " ) ; <nl> - return new JsonRequestMatcher ( resource ) ; <nl> + return new JsonRequestMatcher ( resource , ContentRequestExtractor . class . cast ( extractor ( " json " ) ) ) ; <nl> } <nl> <nl> public static ContentResource toJson ( final Object pojo ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> index d242fec . . e7e3905 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ public final class Extractors { <nl> . put ( " file " , new ContentRequestExtractor ( ) ) <nl> . put ( " text " , new ContentRequestExtractor ( ) ) <nl> . put ( " pathresource " , new ContentRequestExtractor ( ) ) <nl> + . put ( " json " , new ContentRequestExtractor ( ) ) <nl> . put ( " uri " , new UriRequestExtractor ( ) ) <nl> . put ( " method " , new HttpMethodExtractor ( ) ) <nl> . put ( " version " , new VersionExtractor ( ) ) . build ( ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> index 3f9d7b4 . . 114dcd1 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java <nl> @ @ - 21 , 8 + 21 , 8 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { <nl> private final ObjectMapper mapper ; <nl> private final Resource expected ; <nl> <nl> - public JsonRequestMatcher ( final Resource expected ) { <nl> - this . extractor = new ContentRequestExtractor ( ) ; <nl> + public JsonRequestMatcher ( final Resource expected , final ContentRequestExtractor extractor ) { <nl> + this . extractor = extractor ; <nl> this . expected = expected ; <nl> this . mapper = new ObjectMapper ( ) ; <nl> } <nl> @ @ - 53 , 6 + 53 , 6 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { <nl> return this ; <nl> } <nl> <nl> - return new JsonRequestMatcher ( appliedResource ) ; <nl> + return new JsonRequestMatcher ( appliedResource , this . extractor ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> index fd5d709 . . 57682e2 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java <nl> @ @ - 116 , 6 + 116 , 20 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ match _ POJO _ json _ resource ( ) throws Exception { <nl> + PlainA pojo = new PlainA ( ) ; <nl> + pojo . code = 1 ; <nl> + pojo . message = " message " ; <nl> + server . request ( by ( toJson ( pojo ) ) ) . response ( " foo " ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " foo " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ match _ POJO _ json ( ) throws Exception { <nl> PlainA pojo = new PlainA ( ) ; <nl> pojo . code = 1 ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 4631be2 . . 394297a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 63 , 7 + 63 , 6 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 - import static com . github . dreamhead . moco . util . URLs . resourceRoot ; 
 import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . base . Preconditions . checkArgument ; 
 @ @ - 188 , 15 + 187 , 7 @ @ public final class Moco { 
 
 public static RequestMatcher by ( final Resource resource ) { 
 checkNotNull ( resource , " Resource should not be null " ) ; 
 - return by ( extractor ( resource . id ( ) ) , resource ) ; 
 - } 
 - 
 - private static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { 
 - if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { 
 - return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; 
 - } 
 - 
 - return eq ( extractor , expected ) ; 
 + return ApiUtils . by ( extractor ( resource . id ( ) ) , resource ) ; 
 } 
 
 public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final String expected ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 index 37ecef9 . . 55f5810 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 5 , 10 + 5 , 13 @ @ import com . github . dreamhead . moco . MocoMonitor ; 
 import com . github . dreamhead . moco . RequestExtractor ; 
 import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . extractor . ContentRequestExtractor ; 
 import com . github . dreamhead . moco . handler . failover . DefaultFailoverExecutor ; 
 import com . github . dreamhead . moco . handler . failover . FailoverExecutor ; 
 import com . github . dreamhead . moco . matcher . ContainMatcher ; 
 import com . github . dreamhead . moco . matcher . EndsWithMatcher ; 
 + import com . github . dreamhead . moco . matcher . EqRequestMatcher ; 
 + import com . github . dreamhead . moco . matcher . JsonRequestMatcher ; 
 import com . github . dreamhead . moco . matcher . MatchMatcher ; 
 import com . github . dreamhead . moco . matcher . StartsWithMatcher ; 
 import com . github . dreamhead . moco . monitor . CompositeMonitor ; 
 @ @ - 82 , 19 + 85 , 27 @ @ public final class ApiUtils { 
 } 
 
 public static < T > RequestMatcher match ( final RequestExtractor < T > extractor , final Resource expected ) { 
 - return new MatchMatcher < T > ( extractor , expected ) ; 
 + return new MatchMatcher < > ( extractor , expected ) ; 
 } 
 
 public static < T > RequestMatcher startsWith ( final RequestExtractor < T > extractor , final Resource resource ) { 
 - return new StartsWithMatcher < T > ( extractor , resource ) ; 
 + return new StartsWithMatcher < > ( extractor , resource ) ; 
 } 
 
 public static < T > RequestMatcher endsWith ( final RequestExtractor < T > extractor , final Resource resource ) { 
 - return new EndsWithMatcher < T > ( extractor , resource ) ; 
 + return new EndsWithMatcher < > ( extractor , resource ) ; 
 } 
 
 public static < T > RequestMatcher contain ( final RequestExtractor < T > extractor , final Resource resource ) { 
 - return new ContainMatcher < T > ( extractor , resource ) ; 
 + return new ContainMatcher < > ( extractor , resource ) ; 
 + } 
 + 
 + public static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { 
 + if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { 
 + return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; 
 + } 
 + 
 + return new EqRequestMatcher < > ( extractor , expected ) ; 
 } 
 
 private ApiUtils ( ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 61388c5 . . 4631be2 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import com . github . dreamhead . moco . config . MocoContextConfig ; 
 import com . github . dreamhead . moco . config . MocoFileRootConfig ; 
 import com . github . dreamhead . moco . config . MocoRequestConfig ; 
 import com . github . dreamhead . moco . config . MocoResponseConfig ; 
 + import com . github . dreamhead . moco . extractor . ContentRequestExtractor ; 
 import com . github . dreamhead . moco . extractor . CookieRequestExtractor ; 
 import com . github . dreamhead . moco . extractor . FormRequestExtractor ; 
 import com . github . dreamhead . moco . extractor . HeaderRequestExtractor ; 
 @ @ - 16 , 7 + 17 , 6 @ @ import com . github . dreamhead . moco . extractor . PlainExtractor ; 
 import com . github . dreamhead . moco . extractor . XPathRequestExtractor ; 
 import com . github . dreamhead . moco . handler . AndResponseHandler ; 
 import com . github . dreamhead . moco . handler . HeaderResponseHandler ; 
 - import com . github . dreamhead . moco . handler . JsonResponseHandler ; 
 import com . github . dreamhead . moco . handler . ProcedureResponseHandler ; 
 import com . github . dreamhead . moco . handler . ProxyBatchResponseHandler ; 
 import com . github . dreamhead . moco . handler . ProxyResponseHandler ; 
 @ @ - 63 , 6 + 63 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 + import static com . github . dreamhead . moco . util . URLs . resourceRoot ; 
 import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . base . Preconditions . checkArgument ; 
 @ @ - 187 , 7 + 188 , 15 @ @ public final class Moco { 
 
 public static RequestMatcher by ( final Resource resource ) { 
 checkNotNull ( resource , " Resource should not be null " ) ; 
 - return eq ( extractor ( resource . id ( ) ) , resource ) ; 
 + return by ( extractor ( resource . id ( ) ) , resource ) ; 
 + } 
 + 
 + private static < T > RequestMatcher by ( final RequestExtractor < T > extractor , final Resource expected ) { 
 + if ( " json " . equalsIgnoreCase ( expected . id ( ) ) ) { 
 + return new JsonRequestMatcher ( expected , ContentRequestExtractor . class . cast ( extractor ) ) ; 
 + } 
 + 
 + return eq ( extractor , expected ) ; 
 } 
 
 public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final String expected ) { 
 @ @ - 195 , 7 + 204 , 7 @ @ public final class Moco { 
 } 
 
 public static < T > RequestMatcher eq ( final RequestExtractor < T > extractor , final Resource expected ) { 
 - return new EqRequestMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) , checkNotNull ( expected , " Expected content should not be null " ) ) ; 
 + return new EqRequestMatcher < > ( checkNotNull ( extractor , " Extractor should not be null " ) , checkNotNull ( expected , " Expected content should not be null " ) ) ; 
 } 
 
 public static RequestMatcher match ( final Resource resource ) { 
 @ @ - 343 , 7 + 352 , 7 @ @ public final class Moco { 
 
 public static RequestMatcher json ( final Resource resource ) { 
 checkNotNull ( resource , " Json should not be null " ) ; 
 - return new JsonRequestMatcher ( resource ) ; 
 + return new JsonRequestMatcher ( resource , ContentRequestExtractor . class . cast ( extractor ( " json " ) ) ) ; 
 } 
 
 public static ContentResource toJson ( final Object pojo ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 index d242fec . . e7e3905 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / extractor / Extractors . java 
 @ @ - 10 , 6 + 10 , 7 @ @ public final class Extractors { 
 . put ( " file " , new ContentRequestExtractor ( ) ) 
 . put ( " text " , new ContentRequestExtractor ( ) ) 
 . put ( " pathresource " , new ContentRequestExtractor ( ) ) 
 + . put ( " json " , new ContentRequestExtractor ( ) ) 
 . put ( " uri " , new UriRequestExtractor ( ) ) 
 . put ( " method " , new HttpMethodExtractor ( ) ) 
 . put ( " version " , new VersionExtractor ( ) ) . build ( ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 index 3f9d7b4 . . 114dcd1 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / JsonRequestMatcher . java 
 @ @ - 21 , 8 + 21 , 8 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { 
 private final ObjectMapper mapper ; 
 private final Resource expected ; 
 
 - public JsonRequestMatcher ( final Resource expected ) { 
 - this . extractor = new ContentRequestExtractor ( ) ; 
 + public JsonRequestMatcher ( final Resource expected , final ContentRequestExtractor extractor ) { 
 + this . extractor = extractor ; 
 this . expected = expected ; 
 this . mapper = new ObjectMapper ( ) ; 
 } 
 @ @ - 53 , 6 + 53 , 6 @ @ public class JsonRequestMatcher extends AbstractRequestMatcher { 
 return this ; 
 } 
 
 - return new JsonRequestMatcher ( appliedResource ) ; 
 + return new JsonRequestMatcher ( appliedResource , this . extractor ) ; 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 index fd5d709 . . 57682e2 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoJsonTest . java 
 @ @ - 116 , 6 + 116 , 20 @ @ public class MocoJsonTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ match _ POJO _ json _ resource ( ) throws Exception { 
 + PlainA pojo = new PlainA ( ) ; 
 + pojo . code = 1 ; 
 + pojo . message = " message " ; 
 + server . request ( by ( toJson ( pojo ) ) ) . response ( " foo " ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + assertThat ( helper . postContent ( root ( ) , " { \ n \ t \ " code \ " : 1 , \ n \ t \ " message \ " : \ " message \ " \ n } " ) , is ( " foo " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ match _ POJO _ json ( ) throws Exception { 
 PlainA pojo = new PlainA ( ) ; 
 pojo . code = 1 ;
