BLEU SCORE: 0.10682175159905853

TEST MSG: renamed watcher and watcher factory
GENERATED MSG: removed commons io watcher

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> new file mode 100644 <nl> index 0000000 . . eacad5c <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + public class DefaultWatcher implements Watcher { <nl> + private final WatcherService service ; <nl> + private final Function < File , Void > listener ; <nl> + private final File file ; <nl> + <nl> + public DefaultWatcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { <nl> + this . service = service ; <nl> + this . listener = listener ; <nl> + this . file = file ; <nl> + } <nl> + <nl> + @ Override <nl> + public void start ( ) { <nl> + service . register ( file , listener ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void stop ( ) { <nl> + service . unregister ( file ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0c7865d <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . runner . watcher ; <nl> + <nl> + import com . github . dreamhead . moco . MocoException ; <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + public class DefaultWatcherFactory implements FileWatcherFactory { <nl> + private WatcherService service = new WatcherService ( ) ; <nl> + <nl> + @ Override <nl> + public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> + if ( files . length = = 0 ) { <nl> + throw new IllegalArgumentException ( " No file is specified " ) ; <nl> + } <nl> + <nl> + try { <nl> + this . service . start ( ) ; <nl> + } catch ( IOException e ) { <nl> + throw new MocoException ( e ) ; <nl> + } <nl> + <nl> + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> + @ Override <nl> + public Watcher apply ( final File file ) { <nl> + return new DefaultWatcher ( service , listener , file ) ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> deleted file mode 100644 <nl> index ec2515c . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 27 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . google . common . base . Function ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - public class Java7Watcher implements Watcher { <nl> - private final WatcherService service ; <nl> - private final Function < File , Void > listener ; <nl> - private final File file ; <nl> - <nl> - public Java7Watcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { <nl> - this . service = service ; <nl> - this . listener = listener ; <nl> - this . file = file ; <nl> - } <nl> - <nl> - @ Override <nl> - public void start ( ) { <nl> - service . register ( file , listener ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - service . unregister ( file ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> deleted file mode 100644 <nl> index 403556e . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 33 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . github . dreamhead . moco . MocoException ; <nl> - import com . google . common . base . Function ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> - <nl> - public class Java7WatcherFactory implements FileWatcherFactory { <nl> - private WatcherService service = new WatcherService ( ) ; <nl> - <nl> - @ Override <nl> - public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> - if ( files . length = = 0 ) { <nl> - throw new IllegalArgumentException ( " No file is specified " ) ; <nl> - } <nl> - <nl> - try { <nl> - this . service . start ( ) ; <nl> - } catch ( IOException e ) { <nl> - throw new MocoException ( e ) ; <nl> - } <nl> - <nl> - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> - @ Override <nl> - public Watcher apply ( final File file ) { <nl> - return new Java7Watcher ( service , listener , file ) ; <nl> - } <nl> - } ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> index d51880f . . a9713c6 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ import java . io . File ; <nl> public class WatcherFactory { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherFactory . class ) ; <nl> <nl> - private FileWatcherFactory factory = new Java7WatcherFactory ( ) ; <nl> + private FileWatcherFactory factory = new DefaultWatcherFactory ( ) ; <nl> <nl> public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , <nl> final Optional < Integer > shutdownPort ,
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> deleted file mode 100644 <nl> index 3882365 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . google . common . base . Function ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - import static com . github . dreamhead . moco . runner . watcher . Watchers . threadSafe ; <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> - <nl> - public abstract class AbstractWatcherFactory implements FileWatcherFactory { <nl> - protected abstract Watcher doCreate ( final File file , final Function < File , Void > listener ) ; <nl> - <nl> - public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { <nl> - if ( files . length = = 0 ) { <nl> - throw new IllegalArgumentException ( " No file is specified " ) ; <nl> - } <nl> - <nl> - if ( files . length = = 1 ) { <nl> - return create ( listener , files [ 0 ] ) ; <nl> - } <nl> - <nl> - return doCreate ( listener , files ) ; <nl> - } <nl> - <nl> - private Watcher create ( final Function < File , Void > listener , final File file ) { <nl> - return threadSafe ( doCreate ( file , listener ) ) ; <nl> - } <nl> - <nl> - private Watcher doCreate ( final Function < File , Void > listener , File [ ] files ) { <nl> - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { <nl> - @ Override <nl> - public Watcher apply ( final File file ) { <nl> - return create ( listener , file ) ; <nl> - } <nl> - } ) ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> deleted file mode 100644 <nl> index bee968d . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java <nl> + + + / dev / null <nl> @ @ - 1 , 33 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> - public class CommonsIoWatcher implements Watcher { <nl> - private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcher . class ) ; <nl> - <nl> - private final FileAlterationMonitor monitor ; <nl> - <nl> - public CommonsIoWatcher ( final FileAlterationMonitor monitor ) { <nl> - this . monitor = monitor ; <nl> - } <nl> - <nl> - @ Override <nl> - public void start ( ) { <nl> - try { <nl> - monitor . start ( ) ; <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Error found . " , e ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void stop ( ) { <nl> - try { <nl> - monitor . stop ( ) ; <nl> - } catch ( Exception e ) { <nl> - logger . error ( " Error found . " , e ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> deleted file mode 100644 <nl> index ebc3552 . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 47 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . runner . watcher ; <nl> - <nl> - import com . google . common . base . Function ; <nl> - import org . apache . commons . io . monitor . FileAlterationListener ; <nl> - import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; <nl> - import org . apache . commons . io . monitor . FileAlterationMonitor ; <nl> - import org . apache . commons . io . monitor . FileAlterationObserver ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . FileFilter ; <nl> - import java . util . concurrent . TimeUnit ; <nl> - <nl> - import static com . github . dreamhead . moco . util . Files . directoryOf ; <nl> - <nl> - public class CommonsIoWatcherFactory extends AbstractWatcherFactory { <nl> - private static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; <nl> - <nl> - protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { <nl> - return new CommonsIoWatcher ( monitorFile ( file , createListener ( listener ) ) ) ; <nl> - } <nl> - <nl> - private FileAlterationListener createListener ( final Function < File , Void > listener ) { <nl> - return new FileAlterationListenerAdaptor ( ) { <nl> - @ Override <nl> - public void onFileChange ( final File file ) { <nl> - listener . apply ( file ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private FileAlterationMonitor monitorFile ( final File file , final FileAlterationListener listener ) { <nl> - File directory = directoryOf ( file ) ; <nl> - FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; <nl> - observer . addListener ( listener ) ; <nl> - <nl> - return new FileAlterationMonitor ( INTERVAL , observer ) ; <nl> - } <nl> - <nl> - private FileFilter sameFile ( final File file ) { <nl> - return new FileFilter ( ) { <nl> - @ Override <nl> - public boolean accept ( final File detectedFile ) { <nl> - return file . getName ( ) . equals ( detectedFile . getName ( ) ) ; <nl> - } <nl> - } ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> index 4567f2f . . 2c3147c 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; <nl> <nl> public class WatcherService { <nl> private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; <nl> - private static final long REGISTER _ INTERVAL = 800 ; <nl> + private static final long REGISTER _ INTERVAL = 1000 ; <nl> <nl> private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; <nl> private WatchService service ;

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java 
 new file mode 100644 
 index 0000000 . . eacad5c 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcher . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . google . common . base . Function ; 
 + 
 + import java . io . File ; 
 + 
 + public class DefaultWatcher implements Watcher { 
 + private final WatcherService service ; 
 + private final Function < File , Void > listener ; 
 + private final File file ; 
 + 
 + public DefaultWatcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { 
 + this . service = service ; 
 + this . listener = listener ; 
 + this . file = file ; 
 + } 
 + 
 + @ Override 
 + public void start ( ) { 
 + service . register ( file , listener ) ; 
 + } 
 + 
 + @ Override 
 + public void stop ( ) { 
 + service . unregister ( file ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java 
 new file mode 100644 
 index 0000000 . . 0c7865d 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / DefaultWatcherFactory . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . runner . watcher ; 
 + 
 + import com . github . dreamhead . moco . MocoException ; 
 + import com . google . common . base . Function ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 + public class DefaultWatcherFactory implements FileWatcherFactory { 
 + private WatcherService service = new WatcherService ( ) ; 
 + 
 + @ Override 
 + public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { 
 + if ( files . length = = 0 ) { 
 + throw new IllegalArgumentException ( " No file is specified " ) ; 
 + } 
 + 
 + try { 
 + this . service . start ( ) ; 
 + } catch ( IOException e ) { 
 + throw new MocoException ( e ) ; 
 + } 
 + 
 + return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 + @ Override 
 + public Watcher apply ( final File file ) { 
 + return new DefaultWatcher ( service , listener , file ) ; 
 + } 
 + } ) ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 deleted file mode 100644 
 index ec2515c . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7Watcher . java 
 + + + / dev / null 
 @ @ - 1 , 27 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import com . google . common . base . Function ; 
 - 
 - import java . io . File ; 
 - 
 - public class Java7Watcher implements Watcher { 
 - private final WatcherService service ; 
 - private final Function < File , Void > listener ; 
 - private final File file ; 
 - 
 - public Java7Watcher ( final WatcherService service , final Function < File , Void > listener , final File file ) { 
 - this . service = service ; 
 - this . listener = listener ; 
 - this . file = file ; 
 - } 
 - 
 - @ Override 
 - public void start ( ) { 
 - service . register ( file , listener ) ; 
 - } 
 - 
 - @ Override 
 - public void stop ( ) { 
 - service . unregister ( file ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 deleted file mode 100644 
 index 403556e . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / Java7WatcherFactory . java 
 + + + / dev / null 
 @ @ - 1 , 33 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import com . github . dreamhead . moco . MocoException ; 
 - import com . google . common . base . Function ; 
 - 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - 
 - import static com . google . common . collect . FluentIterable . from ; 
 - 
 - public class Java7WatcherFactory implements FileWatcherFactory { 
 - private WatcherService service = new WatcherService ( ) ; 
 - 
 - @ Override 
 - public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { 
 - if ( files . length = = 0 ) { 
 - throw new IllegalArgumentException ( " No file is specified " ) ; 
 - } 
 - 
 - try { 
 - this . service . start ( ) ; 
 - } catch ( IOException e ) { 
 - throw new MocoException ( e ) ; 
 - } 
 - 
 - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 - @ Override 
 - public Watcher apply ( final File file ) { 
 - return new Java7Watcher ( service , listener , file ) ; 
 - } 
 - } ) ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 index d51880f . . a9713c6 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherFactory . java 
 @ @ - 13 , 7 + 13 , 7 @ @ import java . io . File ; 
 public class WatcherFactory { 
 private static Logger logger = LoggerFactory . getLogger ( WatcherFactory . class ) ; 
 
 - private FileWatcherFactory factory = new Java7WatcherFactory ( ) ; 
 + private FileWatcherFactory factory = new DefaultWatcherFactory ( ) ; 
 
 public ShutdownMocoRunnerWatcher createShutdownWatcher ( final Runner runner , 
 final Optional < Integer > shutdownPort ,

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 deleted file mode 100644 
 index 3882365 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / AbstractWatcherFactory . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import com . google . common . base . Function ; 
 - 
 - import java . io . File ; 
 - 
 - import static com . github . dreamhead . moco . runner . watcher . Watchers . threadSafe ; 
 - import static com . google . common . collect . FluentIterable . from ; 
 - 
 - public abstract class AbstractWatcherFactory implements FileWatcherFactory { 
 - protected abstract Watcher doCreate ( final File file , final Function < File , Void > listener ) ; 
 - 
 - public Watcher createWatcher ( final Function < File , Void > listener , final File . . . files ) { 
 - if ( files . length = = 0 ) { 
 - throw new IllegalArgumentException ( " No file is specified " ) ; 
 - } 
 - 
 - if ( files . length = = 1 ) { 
 - return create ( listener , files [ 0 ] ) ; 
 - } 
 - 
 - return doCreate ( listener , files ) ; 
 - } 
 - 
 - private Watcher create ( final Function < File , Void > listener , final File file ) { 
 - return threadSafe ( doCreate ( file , listener ) ) ; 
 - } 
 - 
 - private Watcher doCreate ( final Function < File , Void > listener , File [ ] files ) { 
 - return new CompositeWatcher ( from ( files ) . transform ( new Function < File , Watcher > ( ) { 
 - @ Override 
 - public Watcher apply ( final File file ) { 
 - return create ( listener , file ) ; 
 - } 
 - } ) ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java 
 deleted file mode 100644 
 index bee968d . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcher . java 
 + + + / dev / null 
 @ @ - 1 , 33 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 - public class CommonsIoWatcher implements Watcher { 
 - private static Logger logger = LoggerFactory . getLogger ( CommonsIoWatcher . class ) ; 
 - 
 - private final FileAlterationMonitor monitor ; 
 - 
 - public CommonsIoWatcher ( final FileAlterationMonitor monitor ) { 
 - this . monitor = monitor ; 
 - } 
 - 
 - @ Override 
 - public void start ( ) { 
 - try { 
 - monitor . start ( ) ; 
 - } catch ( Exception e ) { 
 - logger . error ( " Error found . " , e ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void stop ( ) { 
 - try { 
 - monitor . stop ( ) ; 
 - } catch ( Exception e ) { 
 - logger . error ( " Error found . " , e ) ; 
 - } 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 deleted file mode 100644 
 index ebc3552 . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / CommonsIoWatcherFactory . java 
 + + + / dev / null 
 @ @ - 1 , 47 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . runner . watcher ; 
 - 
 - import com . google . common . base . Function ; 
 - import org . apache . commons . io . monitor . FileAlterationListener ; 
 - import org . apache . commons . io . monitor . FileAlterationListenerAdaptor ; 
 - import org . apache . commons . io . monitor . FileAlterationMonitor ; 
 - import org . apache . commons . io . monitor . FileAlterationObserver ; 
 - 
 - import java . io . File ; 
 - import java . io . FileFilter ; 
 - import java . util . concurrent . TimeUnit ; 
 - 
 - import static com . github . dreamhead . moco . util . Files . directoryOf ; 
 - 
 - public class CommonsIoWatcherFactory extends AbstractWatcherFactory { 
 - private static final long INTERVAL = TimeUnit . SECONDS . toMillis ( 1 ) ; 
 - 
 - protected Watcher doCreate ( final File file , final Function < File , Void > listener ) { 
 - return new CommonsIoWatcher ( monitorFile ( file , createListener ( listener ) ) ) ; 
 - } 
 - 
 - private FileAlterationListener createListener ( final Function < File , Void > listener ) { 
 - return new FileAlterationListenerAdaptor ( ) { 
 - @ Override 
 - public void onFileChange ( final File file ) { 
 - listener . apply ( file ) ; 
 - } 
 - } ; 
 - } 
 - 
 - private FileAlterationMonitor monitorFile ( final File file , final FileAlterationListener listener ) { 
 - File directory = directoryOf ( file ) ; 
 - FileAlterationObserver observer = new FileAlterationObserver ( directory , sameFile ( file ) ) ; 
 - observer . addListener ( listener ) ; 
 - 
 - return new FileAlterationMonitor ( INTERVAL , observer ) ; 
 - } 
 - 
 - private FileFilter sameFile ( final File file ) { 
 - return new FileFilter ( ) { 
 - @ Override 
 - public boolean accept ( final File detectedFile ) { 
 - return file . getName ( ) . equals ( detectedFile . getName ( ) ) ; 
 - } 
 - } ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 index 4567f2f . . 2c3147c 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / watcher / WatcherService . java 
 @ @ - 32 , 7 + 32 , 7 @ @ import static java . nio . file . StandardWatchEventKinds . ENTRY _ MODIFY ; 
 
 public class WatcherService { 
 private static Logger logger = LoggerFactory . getLogger ( WatcherService . class ) ; 
 - private static final long REGISTER _ INTERVAL = 800 ; 
 + private static final long REGISTER _ INTERVAL = 1000 ; 
 
 private ExecutorService executor = Executors . newFixedThreadPool ( 5 ) ; 
 private WatchService service ;
