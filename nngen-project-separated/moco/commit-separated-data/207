BLEU SCORE: 0.34572078464194106

TEST MSG: renamed seq container deserializer to collection container deserializer
GENERATED MSG: renamed seq container to collection container

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java <nl> new file mode 100644 <nl> index 0000000 . . 1fc8eba <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + package com . github . dreamhead . moco . parser . deserializer ; <nl> + <nl> + import com . fasterxml . jackson . core . JsonParser ; <nl> + import com . fasterxml . jackson . core . JsonToken ; <nl> + import com . fasterxml . jackson . core . type . TypeReference ; <nl> + import com . fasterxml . jackson . databind . DeserializationContext ; <nl> + import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> + import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> + import com . github . dreamhead . moco . parser . model . CollectionContainer ; <nl> + import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . List ; <nl> + <nl> + public class CollectionContainerDeserializer extends JsonDeserializer < CollectionContainer > { <nl> + @ Override <nl> + public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> + JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> + <nl> + if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> + return new CollectionContainer ( getSeqSettings ( jp ) ) ; <nl> + } <nl> + <nl> + return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + } <nl> + <nl> + private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> + TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> + return jp . readValueAs ( reference ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> deleted file mode 100644 <nl> index 914788f . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> + + + / dev / null <nl> @ @ - 1 , 31 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . deserializer ; <nl> - <nl> - import com . fasterxml . jackson . core . JsonParser ; <nl> - import com . fasterxml . jackson . core . JsonToken ; <nl> - import com . fasterxml . jackson . core . type . TypeReference ; <nl> - import com . fasterxml . jackson . databind . DeserializationContext ; <nl> - import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> - import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> - import com . github . dreamhead . moco . parser . model . CollectionContainer ; <nl> - import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . List ; <nl> - <nl> - public class SeqContainerDeserializer extends JsonDeserializer < CollectionContainer > { <nl> - @ Override <nl> - public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> - JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> - <nl> - if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> - return new CollectionContainer ( getSeqSettings ( jp ) ) ; <nl> - } <nl> - <nl> - return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> - } <nl> - <nl> - private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> - TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; <nl> - return jp . readValueAs ( reference ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> index 43cb605 . . ca886f3 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . parser . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; <nl> + import com . github . dreamhead . moco . parser . deserializer . CollectionContainerDeserializer ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> - @ JsonDeserialize ( using = SeqContainerDeserializer . class ) <nl> + @ JsonDeserialize ( using = CollectionContainerDeserializer . class ) <nl> public class CollectionContainer implements Container { <nl> private Iterable < ResponseSetting > collection ; <nl>
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> index 00cd30f . . 914788f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java <nl> @ @ - 6 , 22 + 6 , 22 @ @ import com . fasterxml . jackson . core . type . TypeReference ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> - import com . github . dreamhead . moco . parser . model . SeqContainer ; <nl> + import com . github . dreamhead . moco . parser . model . CollectionContainer ; <nl> import com . github . dreamhead . moco . parser . model . TextContainer ; <nl> <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> <nl> - public class SeqContainerDeserializer extends JsonDeserializer < SeqContainer > { <nl> + public class SeqContainerDeserializer extends JsonDeserializer < CollectionContainer > { <nl> @ Override <nl> - public SeqContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> + public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { <nl> JsonToken currentToken = jp . getCurrentToken ( ) ; <nl> <nl> if ( currentToken = = JsonToken . START _ ARRAY ) { <nl> - return new SeqContainer ( getSeqSettings ( jp ) ) ; <nl> + return new CollectionContainer ( getSeqSettings ( jp ) ) ; <nl> } <nl> <nl> - return ( SeqContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> + return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; <nl> } <nl> <nl> private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> new file mode 100644 <nl> index 0000000 . . 43cb605 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . MoreObjects ; <nl> + <nl> + import static com . google . common . collect . FluentIterable . from ; <nl> + <nl> + @ JsonDeserialize ( using = SeqContainerDeserializer . class ) <nl> + public class CollectionContainer implements Container { <nl> + private Iterable < ResponseSetting > collection ; <nl> + <nl> + public CollectionContainer ( final Iterable < ResponseSetting > collection ) { <nl> + this . collection = collection ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return MoreObjects . toStringHelper ( this ) <nl> + . omitNullValues ( ) <nl> + . add ( " collection " , collection ) <nl> + . toString ( ) ; <nl> + } <nl> + <nl> + public ResponseHandler [ ] toResponseHandlers ( ) { <nl> + return from ( collection ) . transform ( toResponseHandler ( ) ) . toArray ( ResponseHandler . class ) ; <nl> + } <nl> + <nl> + private Function < ResponseSetting , ResponseHandler > toResponseHandler ( ) { <nl> + return new Function < ResponseSetting , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final ResponseSetting setting ) { <nl> + return setting . getResponseHandler ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 2680509 . . 8bb826f 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 108 , 13 + 108 , 13 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> } <nl> <nl> if ( " seq " . equalsIgnoreCase ( name ) ) { <nl> - SeqContainer sequence = SeqContainer . class . cast ( value ) ; <nl> + CollectionContainer sequence = CollectionContainer . class . cast ( value ) ; <nl> ResponseHandler [ ] responseHandlers = sequence . toResponseHandlers ( ) ; <nl> return Moco . seq ( head ( responseHandlers ) , tail ( responseHandlers ) ) ; <nl> } <nl> <nl> if ( " cycle " . equalsIgnoreCase ( name ) ) { <nl> - SeqContainer sequence = SeqContainer . class . cast ( value ) ; <nl> + CollectionContainer sequence = CollectionContainer . class . cast ( value ) ; <nl> ResponseHandler [ ] responseHandlers = sequence . toResponseHandlers ( ) ; <nl> return Moco . cycle ( head ( responseHandlers ) , tail ( responseHandlers ) ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 4ac97af . . 321b254 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 19 , 8 + 19 , 8 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> <nl> private TextContainer version ; <nl> private AttachmentSetting attachment ; <nl> - private SeqContainer seq ; <nl> - private SeqContainer cycle ; <nl> + private CollectionContainer seq ; <nl> + private CollectionContainer cycle ; <nl> <nl> public ResponseSetting asResponseSetting ( ) { <nl> ResponseSetting responseSetting = new ResponseSetting ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> deleted file mode 100644 <nl> index d39f6fd . . 0000000 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . parser . model ; <nl> - <nl> - import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> - import com . github . dreamhead . moco . ResponseHandler ; <nl> - import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; <nl> - import com . google . common . base . Function ; <nl> - import com . google . common . base . MoreObjects ; <nl> - <nl> - import static com . google . common . collect . FluentIterable . from ; <nl> - <nl> - @ JsonDeserialize ( using = SeqContainerDeserializer . class ) <nl> - public class SeqContainer implements Container { <nl> - private Iterable < ResponseSetting > sequence ; <nl> - <nl> - public SeqContainer ( final Iterable < ResponseSetting > sequence ) { <nl> - this . sequence = sequence ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) { <nl> - return MoreObjects . toStringHelper ( this ) <nl> - . omitNullValues ( ) <nl> - . add ( " sequence " , sequence ) <nl> - . toString ( ) ; <nl> - } <nl> - <nl> - public ResponseHandler [ ] toResponseHandlers ( ) { <nl> - return from ( sequence ) . transform ( toResponseHandler ( ) ) . toArray ( ResponseHandler . class ) ; <nl> - } <nl> - <nl> - private Function < ResponseSetting , ResponseHandler > toResponseHandler ( ) { <nl> - return new Function < ResponseSetting , ResponseHandler > ( ) { <nl> - @ Override <nl> - public ResponseHandler apply ( final ResponseSetting setting ) { <nl> - return setting . getResponseHandler ( ) ; <nl> - } <nl> - } ; <nl> - } <nl> - }

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java 
 new file mode 100644 
 index 0000000 . . 1fc8eba 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / CollectionContainerDeserializer . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + package com . github . dreamhead . moco . parser . deserializer ; 
 + 
 + import com . fasterxml . jackson . core . JsonParser ; 
 + import com . fasterxml . jackson . core . JsonToken ; 
 + import com . fasterxml . jackson . core . type . TypeReference ; 
 + import com . fasterxml . jackson . databind . DeserializationContext ; 
 + import com . fasterxml . jackson . databind . JsonDeserializer ; 
 + import com . github . dreamhead . moco . parser . model . ResponseSetting ; 
 + import com . github . dreamhead . moco . parser . model . CollectionContainer ; 
 + import com . github . dreamhead . moco . parser . model . TextContainer ; 
 + 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + 
 + public class CollectionContainerDeserializer extends JsonDeserializer < CollectionContainer > { 
 + @ Override 
 + public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { 
 + JsonToken currentToken = jp . getCurrentToken ( ) ; 
 + 
 + if ( currentToken = = JsonToken . START _ ARRAY ) { 
 + return new CollectionContainer ( getSeqSettings ( jp ) ) ; 
 + } 
 + 
 + return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 + } 
 + 
 + private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { 
 + TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; 
 + return jp . readValueAs ( reference ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java 
 deleted file mode 100644 
 index 914788f . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java 
 + + + / dev / null 
 @ @ - 1 , 31 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . parser . deserializer ; 
 - 
 - import com . fasterxml . jackson . core . JsonParser ; 
 - import com . fasterxml . jackson . core . JsonToken ; 
 - import com . fasterxml . jackson . core . type . TypeReference ; 
 - import com . fasterxml . jackson . databind . DeserializationContext ; 
 - import com . fasterxml . jackson . databind . JsonDeserializer ; 
 - import com . github . dreamhead . moco . parser . model . ResponseSetting ; 
 - import com . github . dreamhead . moco . parser . model . CollectionContainer ; 
 - import com . github . dreamhead . moco . parser . model . TextContainer ; 
 - 
 - import java . io . IOException ; 
 - import java . util . List ; 
 - 
 - public class SeqContainerDeserializer extends JsonDeserializer < CollectionContainer > { 
 - @ Override 
 - public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { 
 - JsonToken currentToken = jp . getCurrentToken ( ) ; 
 - 
 - if ( currentToken = = JsonToken . START _ ARRAY ) { 
 - return new CollectionContainer ( getSeqSettings ( jp ) ) ; 
 - } 
 - 
 - return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 - } 
 - 
 - private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { 
 - TypeReference < List < ResponseSetting > > reference = new TypeReference < List < ResponseSetting > > ( ) { } ; 
 - return jp . readValueAs ( reference ) ; 
 - } 
 - } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java 
 index 43cb605 . . ca886f3 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java 
 @ @ - 2 , 13 + 2 , 13 @ @ package com . github . dreamhead . moco . parser . model ; 
 
 import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; 
 + import com . github . dreamhead . moco . parser . deserializer . CollectionContainerDeserializer ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . MoreObjects ; 
 
 import static com . google . common . collect . FluentIterable . from ; 
 
 - @ JsonDeserialize ( using = SeqContainerDeserializer . class ) 
 + @ JsonDeserialize ( using = CollectionContainerDeserializer . class ) 
 public class CollectionContainer implements Container { 
 private Iterable < ResponseSetting > collection ; 


NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java 
 index 00cd30f . . 914788f 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / deserializer / SeqContainerDeserializer . java 
 @ @ - 6 , 22 + 6 , 22 @ @ import com . fasterxml . jackson . core . type . TypeReference ; 
 import com . fasterxml . jackson . databind . DeserializationContext ; 
 import com . fasterxml . jackson . databind . JsonDeserializer ; 
 import com . github . dreamhead . moco . parser . model . ResponseSetting ; 
 - import com . github . dreamhead . moco . parser . model . SeqContainer ; 
 + import com . github . dreamhead . moco . parser . model . CollectionContainer ; 
 import com . github . dreamhead . moco . parser . model . TextContainer ; 
 
 import java . io . IOException ; 
 import java . util . List ; 
 
 - public class SeqContainerDeserializer extends JsonDeserializer < SeqContainer > { 
 + public class SeqContainerDeserializer extends JsonDeserializer < CollectionContainer > { 
 @ Override 
 - public SeqContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { 
 + public CollectionContainer deserialize ( final JsonParser jp , final DeserializationContext ctx ) throws IOException { 
 JsonToken currentToken = jp . getCurrentToken ( ) ; 
 
 if ( currentToken = = JsonToken . START _ ARRAY ) { 
 - return new SeqContainer ( getSeqSettings ( jp ) ) ; 
 + return new CollectionContainer ( getSeqSettings ( jp ) ) ; 
 } 
 
 - return ( SeqContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 + return ( CollectionContainer ) ctx . handleUnexpectedToken ( TextContainer . class , jp ) ; 
 } 
 
 private Iterable < ResponseSetting > getSeqSettings ( final JsonParser jp ) throws IOException { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java 
 new file mode 100644 
 index 0000000 . . 43cb605 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / CollectionContainer . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . MoreObjects ; 
 + 
 + import static com . google . common . collect . FluentIterable . from ; 
 + 
 + @ JsonDeserialize ( using = SeqContainerDeserializer . class ) 
 + public class CollectionContainer implements Container { 
 + private Iterable < ResponseSetting > collection ; 
 + 
 + public CollectionContainer ( final Iterable < ResponseSetting > collection ) { 
 + this . collection = collection ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return MoreObjects . toStringHelper ( this ) 
 + . omitNullValues ( ) 
 + . add ( " collection " , collection ) 
 + . toString ( ) ; 
 + } 
 + 
 + public ResponseHandler [ ] toResponseHandlers ( ) { 
 + return from ( collection ) . transform ( toResponseHandler ( ) ) . toArray ( ResponseHandler . class ) ; 
 + } 
 + 
 + private Function < ResponseSetting , ResponseHandler > toResponseHandler ( ) { 
 + return new Function < ResponseSetting , ResponseHandler > ( ) { 
 + @ Override 
 + public ResponseHandler apply ( final ResponseSetting setting ) { 
 + return setting . getResponseHandler ( ) ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 2680509 . . 8bb826f 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 108 , 13 + 108 , 13 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 } 
 
 if ( " seq " . equalsIgnoreCase ( name ) ) { 
 - SeqContainer sequence = SeqContainer . class . cast ( value ) ; 
 + CollectionContainer sequence = CollectionContainer . class . cast ( value ) ; 
 ResponseHandler [ ] responseHandlers = sequence . toResponseHandlers ( ) ; 
 return Moco . seq ( head ( responseHandlers ) , tail ( responseHandlers ) ) ; 
 } 
 
 if ( " cycle " . equalsIgnoreCase ( name ) ) { 
 - SeqContainer sequence = SeqContainer . class . cast ( value ) ; 
 + CollectionContainer sequence = CollectionContainer . class . cast ( value ) ; 
 ResponseHandler [ ] responseHandlers = sequence . toResponseHandlers ( ) ; 
 return Moco . cycle ( head ( responseHandlers ) , tail ( responseHandlers ) ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 4ac97af . . 321b254 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 19 , 8 + 19 , 8 @ @ public class ResponseSetting extends BaseResourceSetting { 
 
 private TextContainer version ; 
 private AttachmentSetting attachment ; 
 - private SeqContainer seq ; 
 - private SeqContainer cycle ; 
 + private CollectionContainer seq ; 
 + private CollectionContainer cycle ; 
 
 public ResponseSetting asResponseSetting ( ) { 
 ResponseSetting responseSetting = new ResponseSetting ( ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java 
 deleted file mode 100644 
 index d39f6fd . . 0000000 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SeqContainer . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . parser . model ; 
 - 
 - import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 - import com . github . dreamhead . moco . ResponseHandler ; 
 - import com . github . dreamhead . moco . parser . deserializer . SeqContainerDeserializer ; 
 - import com . google . common . base . Function ; 
 - import com . google . common . base . MoreObjects ; 
 - 
 - import static com . google . common . collect . FluentIterable . from ; 
 - 
 - @ JsonDeserialize ( using = SeqContainerDeserializer . class ) 
 - public class SeqContainer implements Container { 
 - private Iterable < ResponseSetting > sequence ; 
 - 
 - public SeqContainer ( final Iterable < ResponseSetting > sequence ) { 
 - this . sequence = sequence ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) { 
 - return MoreObjects . toStringHelper ( this ) 
 - . omitNullValues ( ) 
 - . add ( " sequence " , sequence ) 
 - . toString ( ) ; 
 - } 
 - 
 - public ResponseHandler [ ] toResponseHandlers ( ) { 
 - return from ( sequence ) . transform ( toResponseHandler ( ) ) . toArray ( ResponseHandler . class ) ; 
 - } 
 - 
 - private Function < ResponseSetting , ResponseHandler > toResponseHandler ( ) { 
 - return new Function < ResponseSetting , ResponseHandler > ( ) { 
 - @ Override 
 - public ResponseHandler apply ( final ResponseSetting setting ) { 
 - return setting . getResponseHandler ( ) ; 
 - } 
 - } ; 
 - } 
 - }
