BLEU SCORE: 0.07545383788761362

TEST MSG: introduced isPlayback in failover
GENERATED MSG: added log for no matching failover request

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> index 76962b8 . . 2c2f253 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java <nl> @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . HttpResponse ; <nl> import com . github . dreamhead . moco . MocoException ; <nl> import com . github . dreamhead . moco . MutableHttpResponse ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> - import com . github . dreamhead . moco . handler . failover . FailoverStrategy ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableSet ; <nl> @ @ - 201 , 7 + 200 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH <nl> } <nl> <nl> private HttpResponse doProxy ( final HttpRequest request , final URL remoteUrl ) { <nl> - if ( failover . getStrategy ( ) = = FailoverStrategy . PLAYBACK ) { <nl> + if ( failover . isPlayback ( ) ) { <nl> try { <nl> return failover . failover ( request ) ; <nl> } catch ( RuntimeException ignored ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> index 5365ce2 . . 5c8a914 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java <nl> @ @ - 15 , 10 + 15 , 6 @ @ public class Failover { <nl> this . strategy = strategy ; <nl> } <nl> <nl> - public FailoverStrategy getStrategy ( ) { <nl> - return strategy ; <nl> - } <nl> - <nl> public HttpResponse failover ( final HttpRequest request ) { <nl> return executor . failover ( request ) ; <nl> } <nl> @ @ - 26 , 4 + 22 , 8 @ @ public class Failover { <nl> public void onCompleteResponse ( final HttpRequest request , final HttpResponse httpResponse ) { <nl> executor . onCompleteResponse ( request , httpResponse ) ; <nl> } <nl> + <nl> + public boolean isPlayback ( ) { <nl> + return strategy = = FailoverStrategy . PLAYBACK ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> index 71abce8 . . 92b7bd6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import java . util . Map ; <nl> <nl> import static com . google . common . collect . Iterables . tryFind ; <nl> import static com . google . common . collect . Lists . newArrayList ; <nl> + import static java . lang . String . format ; <nl> <nl> public class DefaultFailover implements Failover { <nl> private static final Logger logger = LoggerFactory . getLogger ( DefaultFailover . class ) ; <nl> @ @ - 84 , 6 + 85 , 8 @ @ public class DefaultFailover implements Failover { <nl> return session . get ( ) . getResponse ( ) ; <nl> } <nl> <nl> + logger . error ( format ( " no match request found : % s " , request . toString ( ) ) ) ; <nl> + <nl> throw new RuntimeException ( " no failover response found " ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java <nl> index fe08718 . . 7dccb77 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java <nl> @ @ - 6 , 10 + 6 , 10 @ @ import java . util . Map ; <nl> <nl> import static com . google . common . collect . Maps . newHashMap ; <nl> <nl> - public class Message { <nl> - private String version ; <nl> - private String content ; <nl> - private Map < String , String > headers = newHashMap ( ) ; <nl> + public abstract class Message { <nl> + protected String version ; <nl> + protected String content ; <nl> + protected Map < String , String > headers = newHashMap ( ) ; <nl> <nl> public void setVersion ( String version ) { <nl> this . version = version ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java <nl> index 6233324 . . 250efb3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java <nl> @ @ - 38 , 4 + 38 , 15 @ @ public class Request extends Message { <nl> public int hashCode ( ) { <nl> return Objects . hashCode ( super . hashCode ( ) , queries , method ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return Objects . toStringHelper ( Request . class ) <nl> + . add ( " version " , version ) <nl> + . add ( " queries " , queries ) <nl> + . add ( " method " , method ) <nl> + . add ( " header " , headers ) <nl> + . add ( " content " , content ) <nl> + . toString ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 index 76962b8 . . 2c2f253 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / AbstractProxyResponseHandler . java 
 @ @ - 5 , 7 + 5 , 6 @ @ import com . github . dreamhead . moco . HttpResponse ; 
 import com . github . dreamhead . moco . MocoException ; 
 import com . github . dreamhead . moco . MutableHttpResponse ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 - import com . github . dreamhead . moco . handler . failover . FailoverStrategy ; 
 import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableSet ; 
 @ @ - 201 , 7 + 200 , 7 @ @ public abstract class AbstractProxyResponseHandler extends AbstractHttpResponseH 
 } 
 
 private HttpResponse doProxy ( final HttpRequest request , final URL remoteUrl ) { 
 - if ( failover . getStrategy ( ) = = FailoverStrategy . PLAYBACK ) { 
 + if ( failover . isPlayback ( ) ) { 
 try { 
 return failover . failover ( request ) ; 
 } catch ( RuntimeException ignored ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 index 5365ce2 . . 5c8a914 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Failover . java 
 @ @ - 15 , 10 + 15 , 6 @ @ public class Failover { 
 this . strategy = strategy ; 
 } 
 
 - public FailoverStrategy getStrategy ( ) { 
 - return strategy ; 
 - } 
 - 
 public HttpResponse failover ( final HttpRequest request ) { 
 return executor . failover ( request ) ; 
 } 
 @ @ - 26 , 4 + 22 , 8 @ @ public class Failover { 
 public void onCompleteResponse ( final HttpRequest request , final HttpResponse httpResponse ) { 
 executor . onCompleteResponse ( request , httpResponse ) ; 
 } 
 + 
 + public boolean isPlayback ( ) { 
 + return strategy = = FailoverStrategy . PLAYBACK ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 index 71abce8 . . 92b7bd6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import java . util . Map ; 
 
 import static com . google . common . collect . Iterables . tryFind ; 
 import static com . google . common . collect . Lists . newArrayList ; 
 + import static java . lang . String . format ; 
 
 public class DefaultFailover implements Failover { 
 private static final Logger logger = LoggerFactory . getLogger ( DefaultFailover . class ) ; 
 @ @ - 84 , 6 + 85 , 8 @ @ public class DefaultFailover implements Failover { 
 return session . get ( ) . getResponse ( ) ; 
 } 
 
 + logger . error ( format ( " no match request found : % s " , request . toString ( ) ) ) ; 
 + 
 throw new RuntimeException ( " no failover response found " ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java 
 index fe08718 . . 7dccb77 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Message . java 
 @ @ - 6 , 10 + 6 , 10 @ @ import java . util . Map ; 
 
 import static com . google . common . collect . Maps . newHashMap ; 
 
 - public class Message { 
 - private String version ; 
 - private String content ; 
 - private Map < String , String > headers = newHashMap ( ) ; 
 + public abstract class Message { 
 + protected String version ; 
 + protected String content ; 
 + protected Map < String , String > headers = newHashMap ( ) ; 
 
 public void setVersion ( String version ) { 
 this . version = version ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java 
 index 6233324 . . 250efb3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / Request . java 
 @ @ - 38 , 4 + 38 , 15 @ @ public class Request extends Message { 
 public int hashCode ( ) { 
 return Objects . hashCode ( super . hashCode ( ) , queries , method ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return Objects . toStringHelper ( Request . class ) 
 + . add ( " version " , version ) 
 + . add ( " queries " , queries ) 
 + . add ( " method " , method ) 
 + . add ( " header " , headers ) 
 + . add ( " content " , content ) 
 + . toString ( ) ; 
 + } 
 }
