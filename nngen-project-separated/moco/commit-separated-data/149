BLEU SCORE: 0.07986788803078405

TEST MSG: checked template variable name
GENERATED MSG: introduced toUrlSupplier

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index dfb82e5 . . 0d54e3a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 61 , 6 + 61 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . templateResourc <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> + import static com . github . dreamhead . moco . resource . reader . TemplateResourceReader . checkValidVariableName ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; <nl> @ @ - 534 , 7 + 535 , 7 @ @ public final class Moco { <nl> <nl> public static < T > ContentResource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , <nl> + ImmutableMap . of ( checkValidVariableName ( name ) , <nl> new ExtractorVariable < > ( checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ) <nl> ) ; <nl> } <nl> @ @ - 542 , 9 + 543 , 9 @ @ public final class Moco { <nl> public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , <nl> final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , <nl> + ImmutableMap . of ( checkValidVariableName ( name1 ) , <nl> new ExtractorVariable < > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , <nl> - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , <nl> + checkValidVariableName ( name2 ) , <nl> new ExtractorVariable < > ( checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ) <nl> ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> index 3066416 . . db87d26 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . net . MediaType ; <nl> @ @ - 17 , 6 + 18 , 7 @ @ import freemarker . template . DefaultObjectWrapperBuilder ; <nl> import freemarker . template . Template ; <nl> import freemarker . template . TemplateException ; <nl> import freemarker . template . Version ; <nl> + import jdk . nashorn . internal . ir . annotations . Immutable ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 25 , 8 + 27 , 10 @ @ import java . io . IOException ; <nl> import java . io . OutputStreamWriter ; <nl> import java . io . Writer ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . List ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> public class TemplateResourceReader implements ContentResourceReader { <nl> @ @ - 42 , 6 + 46 , 16 @ @ public class TemplateResourceReader implements ContentResourceReader { <nl> <nl> private final ContentResource template ; <nl> private final ImmutableMap < String , ? extends Variable > variables ; <nl> + private static final List < String > RESERVED _ NAME = ImmutableList . of ( " req " ) ; <nl> + <nl> + public static String checkValidVariableName ( final String name ) { <nl> + if ( ! RESERVED _ NAME . contains ( <nl> + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) ) ) { <nl> + return name ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Template variable name should not be null " ) ; <nl> + } <nl> <nl> public TemplateResourceReader ( final ContentResource template , <nl> final ImmutableMap < String , ? extends Variable > variables ) {
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 5029179 . . ae21c13 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 40 , 7 + 40 , 6 @ @ import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> - import com . github . dreamhead . moco . util . URLs ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableMap ; <nl> @ @ - 63 , 11 + 62 , 10 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> - import static com . github . dreamhead . moco . util . URLs . toUrl ; <nl> + import static com . github . dreamhead . moco . util . URLs . toUrlSupplier ; <nl> import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> - import static com . google . common . base . Suppliers . ofInstance ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> import static com . google . common . net . HttpHeaders . SET _ COOKIE ; <nl> import static java . lang . String . format ; <nl> @ @ - 425 , 7 + 423 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static ResponseHandler proxy ( final String url , final Failover failover ) { <nl> - return new ProxyResponseHandler ( ofInstance ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) , <nl> + return new ProxyResponseHandler ( toUrlSupplier ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , <nl> checkNotNull ( failover , " Failover should not be null " ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> index e49b843 . . 311087e 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> import com . google . common . base . Strings ; <nl> + import com . google . common . base . Supplier ; <nl> <nl> import java . io . UnsupportedEncodingException ; <nl> import java . net . MalformedURLException ; <nl> @ @ - 9 , 6 + 10 , 7 @ @ import java . net . URLEncoder ; <nl> import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> + import static com . google . common . base . Suppliers . ofInstance ; <nl> <nl> public final class URLs { <nl> public static final String SEPARATOR = " / " ; <nl> @ @ - 71 , 6 + 73 , 10 @ @ public final class URLs { <nl> } <nl> } <nl> <nl> + public static Supplier < URL > toUrlSupplier ( final String url ) { <nl> + return ofInstance ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; <nl> + } <nl> + <nl> private URLs ( ) { <nl> } <nl>

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index dfb82e5 . . 0d54e3a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 61 , 6 + 61 , 7 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . templateResourc 
 import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; 
 + import static com . github . dreamhead . moco . resource . reader . TemplateResourceReader . checkValidVariableName ; 
 import static com . github . dreamhead . moco . util . Iterables . asIterable ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 import static com . github . dreamhead . moco . util . URLs . toUrlFunction ; 
 @ @ - 534 , 7 + 535 , 7 @ @ public final class Moco { 
 
 public static < T > ContentResource template ( final ContentResource template , final String name , final RequestExtractor < T > extractor ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 - ImmutableMap . of ( checkNotNullOrEmpty ( name , " Template variable name should not be null " ) , 
 + ImmutableMap . of ( checkValidVariableName ( name ) , 
 new ExtractorVariable < > ( checkNotNull ( extractor , " Template variable extractor should not be null " ) ) ) 
 ) ; 
 } 
 @ @ - 542 , 9 + 543 , 9 @ @ public final class Moco { 
 public static < ExtractorType1 , ExtractorType2 > ContentResource template ( final ContentResource template , final String name1 , final RequestExtractor < ExtractorType1 > extractor1 , 
 final String name2 , final RequestExtractor < ExtractorType2 > extractor2 ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 - ImmutableMap . of ( checkNotNullOrEmpty ( name1 , " Template variable name should not be null " ) , 
 + ImmutableMap . of ( checkValidVariableName ( name1 ) , 
 new ExtractorVariable < > ( checkNotNull ( extractor1 , " Template variable extractor should not be null " ) ) , 
 - checkNotNullOrEmpty ( name2 , " Template variable name should not be null " ) , 
 + checkValidVariableName ( name2 ) , 
 new ExtractorVariable < > ( checkNotNull ( extractor2 , " Template variable extractor should not be null " ) ) ) 
 ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 index 3066416 . . db87d26 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / TemplateResourceReader . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . net . MediaType ; 
 @ @ - 17 , 6 + 18 , 7 @ @ import freemarker . template . DefaultObjectWrapperBuilder ; 
 import freemarker . template . Template ; 
 import freemarker . template . TemplateException ; 
 import freemarker . template . Version ; 
 + import jdk . nashorn . internal . ir . annotations . Immutable ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 25 , 8 + 27 , 10 @ @ import java . io . IOException ; 
 import java . io . OutputStreamWriter ; 
 import java . io . Writer ; 
 import java . nio . charset . Charset ; 
 + import java . util . List ; 
 
 import static com . github . dreamhead . moco . model . MessageContent . content ; 
 + import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 
 public class TemplateResourceReader implements ContentResourceReader { 
 @ @ - 42 , 6 + 46 , 16 @ @ public class TemplateResourceReader implements ContentResourceReader { 
 
 private final ContentResource template ; 
 private final ImmutableMap < String , ? extends Variable > variables ; 
 + private static final List < String > RESERVED _ NAME = ImmutableList . of ( " req " ) ; 
 + 
 + public static String checkValidVariableName ( final String name ) { 
 + if ( ! RESERVED _ NAME . contains ( 
 + checkNotNullOrEmpty ( name , " Template variable name should not be null " ) ) ) { 
 + return name ; 
 + } 
 + 
 + throw new IllegalArgumentException ( " Template variable name should not be null " ) ; 
 + } 
 
 public TemplateResourceReader ( final ContentResource template , 
 final ImmutableMap < String , ? extends Variable > variables ) {

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 5029179 . . ae21c13 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 40 , 7 + 40 , 6 @ @ import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 import com . github . dreamhead . moco . util . Jsons ; 
 - import com . github . dreamhead . moco . util . URLs ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . FluentIterable ; 
 import com . google . common . collect . ImmutableMap ; 
 @ @ - 63 , 11 + 62 , 10 @ @ import static com . github . dreamhead . moco . resource . ResourceFactory . textResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . uriResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . versionResource ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 - import static com . github . dreamhead . moco . util . URLs . toUrl ; 
 + import static com . github . dreamhead . moco . util . URLs . toUrlSupplier ; 
 import static com . google . common . base . Optional . of ; 
 import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 - import static com . google . common . base . Suppliers . ofInstance ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 import static com . google . common . net . HttpHeaders . SET _ COOKIE ; 
 import static java . lang . String . format ; 
 @ @ - 425 , 7 + 423 , 7 @ @ public final class Moco { 
 } 
 
 public static ResponseHandler proxy ( final String url , final Failover failover ) { 
 - return new ProxyResponseHandler ( ofInstance ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) , 
 + return new ProxyResponseHandler ( toUrlSupplier ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) , 
 checkNotNull ( failover , " Failover should not be null " ) ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 index e49b843 . . 311087e 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / URLs . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . util ; 
 
 import com . google . common . base . Strings ; 
 + import com . google . common . base . Supplier ; 
 
 import java . io . UnsupportedEncodingException ; 
 import java . net . MalformedURLException ; 
 @ @ - 9 , 6 + 10 , 7 @ @ import java . net . URLEncoder ; 
 import java . nio . charset . Charset ; 
 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 + import static com . google . common . base . Suppliers . ofInstance ; 
 
 public final class URLs { 
 public static final String SEPARATOR = " / " ; 
 @ @ - 71 , 6 + 73 , 10 @ @ public final class URLs { 
 } 
 } 
 
 + public static Supplier < URL > toUrlSupplier ( final String url ) { 
 + return ofInstance ( toUrl ( checkNotNullOrEmpty ( url , " URL should not be null " ) ) ) ; 
 + } 
 + 
 private URLs ( ) { 
 } 

