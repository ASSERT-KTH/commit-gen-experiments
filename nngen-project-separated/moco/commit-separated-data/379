BLEU SCORE: 0.07809849842300641

TEST MSG: added missing final to abstract runner test
GENERATED MSG: added global request matcher to global settings

TEST DIFF (one line): diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> index 9d0134a . . 142cc28 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ public abstract class AbstractRunnerTest { <nl> } <nl> } <nl> <nl> - protected void changeFileContent ( File response , String content ) { <nl> + protected void changeFileContent ( final File response , final String content ) { <nl> PrintStream stream = null ; <nl> try { <nl> stream = new PrintStream ( new FileOutputStream ( response ) ) ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> index 0b0717c . . 15cd302 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java <nl> @ @ - 21 , 24 + 21 , 28 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { <nl> @ Test <nl> public void should _ reload _ configuration ( ) throws IOException , InterruptedException { <nl> final File config = tempFolder . newFile ( " config . json " ) ; <nl> - changeFileContent ( config , " [ { \ " response \ " : { " + <nl> - " \ " text \ " : \ " foo \ " " + <nl> - " } } ] " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foo \ " " <nl> + + " } } ] " ) ; <nl> <nl> final File setting = tempFolder . newFile ( " settings . json " ) ; <nl> String path = FilenameUtils . separatorsToUnix ( config . getAbsolutePath ( ) ) ; <nl> - changeFileContent ( setting , " [ { " + <nl> - " \ " include \ " : \ " " + path + " \ " " + <nl> - " } ] " ) ; <nl> + changeFileContent ( setting , " [ { " <nl> + + " \ " include \ " : \ " " + path + " \ " " <nl> + + " } ] " ) ; <nl> <nl> RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; <nl> - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withShutdownPort ( 9090 ) . withSettings ( setting . getAbsolutePath ( ) ) . build ( ) ) ; <nl> + runner = factory . createRunner ( httpArgs ( ) <nl> + . withPort ( port ( ) ) <nl> + . withShutdownPort ( 9090 ) <nl> + . withSettings ( setting . getAbsolutePath ( ) ) <nl> + . build ( ) ) ; <nl> runner . run ( ) ; <nl> assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> <nl> - changeFileContent ( config , " [ { \ " response \ " : { " + <nl> - " \ " text \ " : \ " foobar \ " " + <nl> - " } } ] " ) ; <nl> + changeFileContent ( config , " [ { \ " response \ " : { " <nl> + + " \ " text \ " : \ " foobar \ " " <nl> + + " } } ] " ) ; <nl> <nl> waitChangeHappens ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> index d645e2c . . 2154cb1 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ public class GlobalSetting { <nl> @ JsonProperty ( " file _ root " ) <nl> private String fileRoot ; <nl> private String env ; <nl> + private RequestSetting request ; <nl> private ResponseSetting response ; <nl> <nl> public String getInclude ( ) { <nl> @ @ - 29 , 6 + 30 , 10 @ @ public class GlobalSetting { <nl> return env ; <nl> } <nl> <nl> + public RequestSetting getRequest ( ) { <nl> + return request ; <nl> + } <nl> + <nl> public ResponseSetting getResponse ( ) { <nl> return response ; <nl> } <nl> @ @ - 41 , 6 + 46 , 7 @ @ public class GlobalSetting { <nl> . add ( " context " , context ) <nl> . add ( " file root " , fileRoot ) <nl> . add ( " env " , env ) <nl> + . add ( " request " , request ) <nl> . add ( " response " , response ) <nl> . toString ( ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index 431d4b8 . . 8588057 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 91 , 6 + 91 , 7 @ @ public class JsonRunner implements Runner { <nl> <nl> addConfig ( builder , setting . context ( ) ) ; <nl> addConfig ( builder , setting . fileRoot ( ) ) ; <nl> + addConfig ( builder , setting . request ( ) ) ; <nl> addConfig ( builder , setting . response ( ) ) ; <nl> <nl> return toArray ( builder . build ( ) , MocoConfig . class ) ; <nl> @ @ - 115 , 7 + 116 , 7 @ @ public class JsonRunner implements Runner { <nl> return new Function < InputStream , RunnerSetting > ( ) { <nl> @ Override <nl> public RunnerSetting apply ( InputStream input ) { <nl> - return new RunnerSetting ( input , null , null , null ) ; <nl> + return new RunnerSetting ( input , null , null , null , null ) ; <nl> } <nl> } ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> index 553ef62 . . 86af4f8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; <nl> <nl> import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . parser . model . RequestSetting ; <nl> import com . github . dreamhead . moco . parser . model . ResponseSetting ; <nl> import com . google . common . base . Optional ; <nl> <nl> @ @ - 13 , 12 + 14 , 15 @ @ import static com . google . common . base . Optional . of ; <nl> <nl> public class RunnerSetting { <nl> private InputStream stream ; <nl> + private final Optional < RequestSetting > request ; <nl> private final Optional < ResponseSetting > response ; <nl> private final Optional < String > context ; <nl> private final Optional < String > fileRoot ; <nl> <nl> - public RunnerSetting ( InputStream stream , String context , String fileRoot , ResponseSetting response ) { <nl> + public RunnerSetting ( InputStream stream , String context , String fileRoot , <nl> + RequestSetting requestSetting , ResponseSetting response ) { <nl> this . stream = stream ; <nl> + this . request = fromNullable ( requestSetting ) ; <nl> this . response = fromNullable ( response ) ; <nl> this . context = fromNullable ( context ) ; <nl> this . fileRoot = fromNullable ( fileRoot ) ; <nl> @ @ - 44 , 6 + 48 , 14 @ @ public class RunnerSetting { <nl> return absent ( ) ; <nl> } <nl> <nl> + public Optional < MocoConfig > request ( ) { <nl> + if ( request . isPresent ( ) ) { <nl> + return of ( Moco . request ( request . get ( ) . getRequestMatcher ( ) ) ) ; <nl> + } <nl> + <nl> + return absent ( ) ; <nl> + } <nl> + <nl> public Optional < MocoConfig > response ( ) { <nl> if ( response . isPresent ( ) ) { <nl> return of ( Moco . response ( response . get ( ) . getResponseHandler ( ) ) ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> index f86e699 . . 2cb0e7a 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java <nl> @ @ - 60 , 6 + 60 , 7 @ @ public class SettingRunner implements Runner { <nl> return new RunnerSetting ( new FileInputStream ( setting . getInclude ( ) ) , <nl> setting . getContext ( ) , <nl> setting . getFileRoot ( ) , <nl> + setting . getRequest ( ) , <nl> setting . getResponse ( ) ) ; <nl> } catch ( FileNotFoundException e ) { <nl> throw new RuntimeException ( e ) ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> index f6f1a3a . . a17419d 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ import java . io . InputStream ; <nl> <nl> import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> + import static com . google . common . collect . ImmutableMap . of ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 84 , 6 + 85 , 24 @ @ public class SettingRunnerTest { <nl> assertThat ( header . getValue ( ) , is ( " bar " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ run _ with _ global _ request _ settings ( ) throws IOException { <nl> + InputStream stream = getResourceAsStream ( " settings / request - settings . json " ) ; <nl> + runner = new SettingRunner ( stream , createStartArgs ( 12306 ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + assertThat ( helper . getWithHeader ( remoteUrl ( " / foo " ) , of ( " foo " , " bar " ) ) , is ( " foo " ) ) ; <nl> + } <nl> + <nl> + @ Test ( expected = HttpResponseException . class ) <nl> + public void should _ throw _ exception _ without _ global _ request _ settings ( ) throws IOException { <nl> + InputStream stream = getResourceAsStream ( " settings / request - settings . json " ) ; <nl> + runner = new SettingRunner ( stream , createStartArgs ( 12306 ) ) ; <nl> + runner . run ( ) ; <nl> + <nl> + helper . get ( remoteUrl ( " / foo " ) ) ; <nl> + } <nl> + <nl> private StartArgs createStartArgs ( int port , String env ) { <nl> return httpArgs ( ) . withPort ( port ) . withEnv ( env ) . build ( ) ; <nl> } <nl> diff - - git a / moco - runner / src / test / resources / settings / request - settings . json b / moco - runner / src / test / resources / settings / request - settings . json <nl> new file mode 100644 <nl> index 0000000 . . a56e975 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / settings / request - settings . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + [ <nl> + { <nl> + " request " : { <nl> + " headers " : { <nl> + " foo " : " bar " <nl> + } <nl> + } , <nl> + " include " : " src / test / resources / settings / foo . json " <nl> + } <nl> + ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 index 9d0134a . . 142cc28 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / AbstractRunnerTest . java 
 @ @ - 33 , 7 + 33 , 7 @ @ public abstract class AbstractRunnerTest { 
 } 
 } 
 
 - protected void changeFileContent ( File response , String content ) { 
 + protected void changeFileContent ( final File response , final String content ) { 
 PrintStream stream = null ; 
 try { 
 stream = new PrintStream ( new FileOutputStream ( response ) ) ; 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 index 0b0717c . . 15cd302 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / DynamicSettingRunnerTest . java 
 @ @ - 21 , 24 + 21 , 28 @ @ public class DynamicSettingRunnerTest extends AbstractRunnerTest { 
 @ Test 
 public void should _ reload _ configuration ( ) throws IOException , InterruptedException { 
 final File config = tempFolder . newFile ( " config . json " ) ; 
 - changeFileContent ( config , " [ { \ " response \ " : { " + 
 - " \ " text \ " : \ " foo \ " " + 
 - " } } ] " ) ; 
 + changeFileContent ( config , " [ { \ " response \ " : { " 
 + + " \ " text \ " : \ " foo \ " " 
 + + " } } ] " ) ; 
 
 final File setting = tempFolder . newFile ( " settings . json " ) ; 
 String path = FilenameUtils . separatorsToUnix ( config . getAbsolutePath ( ) ) ; 
 - changeFileContent ( setting , " [ { " + 
 - " \ " include \ " : \ " " + path + " \ " " + 
 - " } ] " ) ; 
 + changeFileContent ( setting , " [ { " 
 + + " \ " include \ " : \ " " + path + " \ " " 
 + + " } ] " ) ; 
 
 RunnerFactory factory = new RunnerFactory ( " SHUTDOWN " ) ; 
 - runner = factory . createRunner ( httpArgs ( ) . withPort ( port ( ) ) . withShutdownPort ( 9090 ) . withSettings ( setting . getAbsolutePath ( ) ) . build ( ) ) ; 
 + runner = factory . createRunner ( httpArgs ( ) 
 + . withPort ( port ( ) ) 
 + . withShutdownPort ( 9090 ) 
 + . withSettings ( setting . getAbsolutePath ( ) ) 
 + . build ( ) ) ; 
 runner . run ( ) ; 
 assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 
 - changeFileContent ( config , " [ { \ " response \ " : { " + 
 - " \ " text \ " : \ " foobar \ " " + 
 - " } } ] " ) ; 
 + changeFileContent ( config , " [ { \ " response \ " : { " 
 + + " \ " text \ " : \ " foobar \ " " 
 + + " } } ] " ) ; 
 
 waitChangeHappens ( ) ; 


NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 index d645e2c . . 2154cb1 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / GlobalSetting . java 
 @ @ - 11 , 6 + 11 , 7 @ @ public class GlobalSetting { 
 @ JsonProperty ( " file _ root " ) 
 private String fileRoot ; 
 private String env ; 
 + private RequestSetting request ; 
 private ResponseSetting response ; 
 
 public String getInclude ( ) { 
 @ @ - 29 , 6 + 30 , 10 @ @ public class GlobalSetting { 
 return env ; 
 } 
 
 + public RequestSetting getRequest ( ) { 
 + return request ; 
 + } 
 + 
 public ResponseSetting getResponse ( ) { 
 return response ; 
 } 
 @ @ - 41 , 6 + 46 , 7 @ @ public class GlobalSetting { 
 . add ( " context " , context ) 
 . add ( " file root " , fileRoot ) 
 . add ( " env " , env ) 
 + . add ( " request " , request ) 
 . add ( " response " , response ) 
 . toString ( ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 index 431d4b8 . . 8588057 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 @ @ - 91 , 6 + 91 , 7 @ @ public class JsonRunner implements Runner { 
 
 addConfig ( builder , setting . context ( ) ) ; 
 addConfig ( builder , setting . fileRoot ( ) ) ; 
 + addConfig ( builder , setting . request ( ) ) ; 
 addConfig ( builder , setting . response ( ) ) ; 
 
 return toArray ( builder . build ( ) , MocoConfig . class ) ; 
 @ @ - 115 , 7 + 116 , 7 @ @ public class JsonRunner implements Runner { 
 return new Function < InputStream , RunnerSetting > ( ) { 
 @ Override 
 public RunnerSetting apply ( InputStream input ) { 
 - return new RunnerSetting ( input , null , null , null ) ; 
 + return new RunnerSetting ( input , null , null , null , null ) ; 
 } 
 } ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 index 553ef62 . . 86af4f8 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerSetting . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . runner ; 
 
 import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 + import com . github . dreamhead . moco . parser . model . RequestSetting ; 
 import com . github . dreamhead . moco . parser . model . ResponseSetting ; 
 import com . google . common . base . Optional ; 
 
 @ @ - 13 , 12 + 14 , 15 @ @ import static com . google . common . base . Optional . of ; 
 
 public class RunnerSetting { 
 private InputStream stream ; 
 + private final Optional < RequestSetting > request ; 
 private final Optional < ResponseSetting > response ; 
 private final Optional < String > context ; 
 private final Optional < String > fileRoot ; 
 
 - public RunnerSetting ( InputStream stream , String context , String fileRoot , ResponseSetting response ) { 
 + public RunnerSetting ( InputStream stream , String context , String fileRoot , 
 + RequestSetting requestSetting , ResponseSetting response ) { 
 this . stream = stream ; 
 + this . request = fromNullable ( requestSetting ) ; 
 this . response = fromNullable ( response ) ; 
 this . context = fromNullable ( context ) ; 
 this . fileRoot = fromNullable ( fileRoot ) ; 
 @ @ - 44 , 6 + 48 , 14 @ @ public class RunnerSetting { 
 return absent ( ) ; 
 } 
 
 + public Optional < MocoConfig > request ( ) { 
 + if ( request . isPresent ( ) ) { 
 + return of ( Moco . request ( request . get ( ) . getRequestMatcher ( ) ) ) ; 
 + } 
 + 
 + return absent ( ) ; 
 + } 
 + 
 public Optional < MocoConfig > response ( ) { 
 if ( response . isPresent ( ) ) { 
 return of ( Moco . response ( response . get ( ) . getResponseHandler ( ) ) ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 index f86e699 . . 2cb0e7a 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / SettingRunner . java 
 @ @ - 60 , 6 + 60 , 7 @ @ public class SettingRunner implements Runner { 
 return new RunnerSetting ( new FileInputStream ( setting . getInclude ( ) ) , 
 setting . getContext ( ) , 
 setting . getFileRoot ( ) , 
 + setting . getRequest ( ) , 
 setting . getResponse ( ) ) ; 
 } catch ( FileNotFoundException e ) { 
 throw new RuntimeException ( e ) ; 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java 
 index f6f1a3a . . a17419d 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / runner / SettingRunnerTest . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import java . io . InputStream ; 
 
 import static com . github . dreamhead . moco . bootstrap . arg . HttpArgs . httpArgs ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 + import static com . google . common . collect . ImmutableMap . of ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 @ @ - 84 , 6 + 85 , 24 @ @ public class SettingRunnerTest { 
 assertThat ( header . getValue ( ) , is ( " bar " ) ) ; 
 } 
 
 + @ Test 
 + public void should _ run _ with _ global _ request _ settings ( ) throws IOException { 
 + InputStream stream = getResourceAsStream ( " settings / request - settings . json " ) ; 
 + runner = new SettingRunner ( stream , createStartArgs ( 12306 ) ) ; 
 + runner . run ( ) ; 
 + 
 + assertThat ( helper . getWithHeader ( remoteUrl ( " / foo " ) , of ( " foo " , " bar " ) ) , is ( " foo " ) ) ; 
 + } 
 + 
 + @ Test ( expected = HttpResponseException . class ) 
 + public void should _ throw _ exception _ without _ global _ request _ settings ( ) throws IOException { 
 + InputStream stream = getResourceAsStream ( " settings / request - settings . json " ) ; 
 + runner = new SettingRunner ( stream , createStartArgs ( 12306 ) ) ; 
 + runner . run ( ) ; 
 + 
 + helper . get ( remoteUrl ( " / foo " ) ) ; 
 + } 
 + 
 private StartArgs createStartArgs ( int port , String env ) { 
 return httpArgs ( ) . withPort ( port ) . withEnv ( env ) . build ( ) ; 
 } 
 diff - - git a / moco - runner / src / test / resources / settings / request - settings . json b / moco - runner / src / test / resources / settings / request - settings . json 
 new file mode 100644 
 index 0000000 . . a56e975 
 - - - / dev / null 
 + + + b / moco - runner / src / test / resources / settings / request - settings . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + [ 
 + { 
 + " request " : { 
 + " headers " : { 
 + " foo " : " bar " 
 + } 
 + } , 
 + " include " : " src / test / resources / settings / foo . json " 
 + } 
 + ] 
 \ No newline at end of file
