BLEU SCORE: 0.18995892141289814

TEST MSG: documented random template function
GENERATED MSG: documented template

TEST DIFF (one line): diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index ac06b4e . . 4e1456d 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> # # APIs <nl> * ` cycle ` API returns response as a cycle . <nl> * ` now ` as template function is supported in template <nl> + * ` random ` as template function is supported in template <nl> * ` req . json ` is supported in template <nl> <nl> # # Implementation Details <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 283eae2 . . 78ea4d6 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2160 , 7 + 2160 , 103 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { now ( ' yyyy - MM - dd ' ) } " ) ) ; <nl> } , <nl> " response " : { <nl> " text " : { <nl> - " template " : " $ { now ( ' yyyy - MM - dd ' ) } " ) <nl> + " template " : " $ { now ( ' yyyy - MM - dd ' ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # # random <nl> + <nl> + * * @ Since will be at next release * * <nl> + <nl> + ` random ` will generate a random number . If you didn ' t pass any argument , the generated random will be between 0 and 1 . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The first argument is random number range which means the generated number will be between 0 and range . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( 100 ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + The last argument is number format . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 , ' # # # . # # # ' ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( 100 , ' # # # . # # # ' ) } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + You can also use number format directly without range . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ' # # # . # # # ' ) } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { random ( ' # # # . # # # ' ) } " <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index e0d7d66 . . afd4880 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 56 , 12 + 56 , 12 @ @ public class MocoTemplateTest extends AbstractMocoTest { <nl> <nl> @ Test <nl> public void should _ generate _ response _ with _ http _ header ( ) throws Exception { <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ \ " foo \ " ] } " ) ) ; <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] } " ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - String response = Request . Get ( remoteUrl ( " / template " ) ) . addHeader ( " foo " , " bar " ) . version ( HttpVersion . HTTP _ 1 _ 0 ) . execute ( ) . returnContent ( ) . asString ( ) ; <nl> + String response = Request . Get ( remoteUrl ( " / template " ) ) . addHeader ( " foo " , " bar " ) . execute ( ) . returnContent ( ) . asString ( ) ; <nl> assertThat ( response , is ( " bar " ) ) ; <nl> } <nl> } ) ; <nl> @ @ - 69 , 12 + 69 , 12 @ @ public class MocoTemplateTest extends AbstractMocoTest { <nl> <nl> @ Test <nl> public void should _ generate _ response _ with _ http _ query ( ) throws Exception { <nl> - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ \ " foo \ " ] } " ) ) ; <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] } " ) ) ; <nl> <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - String response = Request . Get ( remoteUrl ( " / template ? foo = bar " ) ) . version ( HttpVersion . HTTP _ 1 _ 0 ) . execute ( ) . returnContent ( ) . asString ( ) ; <nl> + String response = helper . get ( remoteUrl ( " / template ? foo = bar " ) ) ; <nl> assertThat ( response , is ( " bar " ) ) ; <nl> } <nl> } ) ; <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index b9a37ad . . f55d890 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 78 , 7 + 78 , 7 @ @ server . request ( by ( uri ( " / foo " ) ) ) . response ( " bar " ) ; <nl> } <nl> ` ` ` <nl> # # # Query parameter <nl> - Sometimes , your request has parameters : <nl> + Sometimes , your request has parameters in query : <nl> <nl> * Java API <nl> <nl> @ @ - 819 , 3 + 819 , 127 @ @ server . mount ( dir , to ( " / uri " ) , include ( " a . txt " ) , exclude ( " b . txt " ) , include ( " c . txt <nl> } <nl> } <nl> ` ` ` <nl> + <nl> + # # Template ( Beta ) <nl> + * * Note * * : Template is an experimental feature which could be changed a lot in the future . Feel free to tell how it helps or you need more feature in template . <nl> + <nl> + Sometimes , we need to customize our response based on something , e . g . response should have same header with request . <nl> + <nl> + The goal can be reached by template : <nl> + <nl> + # # # Version <nl> + <nl> + With " req . version " , request version can be retrieved in template . <nl> + <nl> + The following example will return response version as content . <nl> + <nl> + * Java <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . version } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { req . version } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # Method <nl> + <nl> + Request method is identified by " req . method " <nl> + <nl> + * Java <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . method } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { req . method } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # Content <nl> + <nl> + All request content can be used in template with " req . content " <nl> + <nl> + * Java <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . content } " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { req . content } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # Header <nl> + <nl> + Header is another important element in template and we can use " req . headers " for headers . <nl> + <nl> + * Java <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { req . headers [ ' foo ' ] } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # Query <nl> + <nl> + " req . queries " helps us to extract request query . <nl> + <nl> + * Java <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : " $ { req . queries [ ' foo ' ] } " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index ac06b4e . . 4e1456d 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 # # APIs 
 * ` cycle ` API returns response as a cycle . 
 * ` now ` as template function is supported in template 
 + * ` random ` as template function is supported in template 
 * ` req . json ` is supported in template 
 
 # # Implementation Details 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 283eae2 . . 78ea4d6 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 2160 , 7 + 2160 , 103 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { now ( ' yyyy - MM - dd ' ) } " ) ) ; 
 } , 
 " response " : { 
 " text " : { 
 - " template " : " $ { now ( ' yyyy - MM - dd ' ) } " ) 
 + " template " : " $ { now ( ' yyyy - MM - dd ' ) } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + # # # # random 
 + 
 + * * @ Since will be at next release * * 
 + 
 + ` random ` will generate a random number . If you didn ' t pass any argument , the generated random will be between 0 and 1 . 
 + 
 + * Java 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ) } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { random ( ) } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + The first argument is random number range which means the generated number will be between 0 and range . 
 + 
 + * Java 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 ) } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { random ( 100 ) } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + The last argument is number format . 
 + 
 + * Java 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( 100 , ' # # # . # # # ' ) } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { random ( 100 , ' # # # . # # # ' ) } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + You can also use number format directly without range . 
 + 
 + * Java 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { random ( ' # # # . # # # ' ) } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { random ( ' # # # . # # # ' ) } " 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index e0d7d66 . . afd4880 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 56 , 12 + 56 , 12 @ @ public class MocoTemplateTest extends AbstractMocoTest { 
 
 @ Test 
 public void should _ generate _ response _ with _ http _ header ( ) throws Exception { 
 - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ \ " foo \ " ] } " ) ) ; 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] } " ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws Exception { 
 - String response = Request . Get ( remoteUrl ( " / template " ) ) . addHeader ( " foo " , " bar " ) . version ( HttpVersion . HTTP _ 1 _ 0 ) . execute ( ) . returnContent ( ) . asString ( ) ; 
 + String response = Request . Get ( remoteUrl ( " / template " ) ) . addHeader ( " foo " , " bar " ) . execute ( ) . returnContent ( ) . asString ( ) ; 
 assertThat ( response , is ( " bar " ) ) ; 
 } 
 } ) ; 
 @ @ - 69 , 12 + 69 , 12 @ @ public class MocoTemplateTest extends AbstractMocoTest { 
 
 @ Test 
 public void should _ generate _ response _ with _ http _ query ( ) throws Exception { 
 - server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ \ " foo \ " ] } " ) ) ; 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] } " ) ) ; 
 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws Exception { 
 - String response = Request . Get ( remoteUrl ( " / template ? foo = bar " ) ) . version ( HttpVersion . HTTP _ 1 _ 0 ) . execute ( ) . returnContent ( ) . asString ( ) ; 
 + String response = helper . get ( remoteUrl ( " / template ? foo = bar " ) ) ; 
 assertThat ( response , is ( " bar " ) ) ; 
 } 
 } ) ; 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index b9a37ad . . f55d890 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 78 , 7 + 78 , 7 @ @ server . request ( by ( uri ( " / foo " ) ) ) . response ( " bar " ) ; 
 } 
 ` ` ` 
 # # # Query parameter 
 - Sometimes , your request has parameters : 
 + Sometimes , your request has parameters in query : 
 
 * Java API 
 
 @ @ - 819 , 3 + 819 , 127 @ @ server . mount ( dir , to ( " / uri " ) , include ( " a . txt " ) , exclude ( " b . txt " ) , include ( " c . txt 
 } 
 } 
 ` ` ` 
 + 
 + # # Template ( Beta ) 
 + * * Note * * : Template is an experimental feature which could be changed a lot in the future . Feel free to tell how it helps or you need more feature in template . 
 + 
 + Sometimes , we need to customize our response based on something , e . g . response should have same header with request . 
 + 
 + The goal can be reached by template : 
 + 
 + # # # Version 
 + 
 + With " req . version " , request version can be retrieved in template . 
 + 
 + The following example will return response version as content . 
 + 
 + * Java 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . version } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { req . version } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + # # # Method 
 + 
 + Request method is identified by " req . method " 
 + 
 + * Java 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . method } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { req . method } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + # # # Content 
 + 
 + All request content can be used in template with " req . content " 
 + 
 + * Java 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . content } " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { req . content } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + # # # Header 
 + 
 + Header is another important element in template and we can use " req . headers " for headers . 
 + 
 + * Java 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . headers [ ' foo ' ] " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { req . headers [ ' foo ' ] } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + # # # Query 
 + 
 + " req . queries " helps us to extract request query . 
 + 
 + * Java 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . queries [ ' foo ' ] " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : " $ { req . queries [ ' foo ' ] } " 
 + } 
 + } 
 + } 
 + ` ` ` 
 \ No newline at end of file
