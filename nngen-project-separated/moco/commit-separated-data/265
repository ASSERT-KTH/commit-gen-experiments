BLEU SCORE: 0.04844232281716619

TEST MSG: fixed glob current path
GENERATED MSG: introduced filename to file in files

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> index 7c1c6cc . . 93842bd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ public final class Globs { <nl> <nl> private static Path searchPath ( final Path path , final int globIndex ) { <nl> Path root = path . getRoot ( ) ; <nl> - Path subpath = path . subpath ( 0 , globIndex ) ; <nl> + Path subpath = getSubpath ( path , globIndex ) ; <nl> if ( root = = null ) { <nl> return subpath ; <nl> } <nl> @ @ - 37 , 8 + 37 , 16 @ @ public final class Globs { <nl> return Paths . get ( root . toString ( ) , subpath . toString ( ) ) ; <nl> } <nl> <nl> + private static Path getSubpath ( Path path , int globIndex ) { <nl> + if ( globIndex = = 0 ) { <nl> + return Paths . get ( " . " ) . toAbsolutePath ( ) ; <nl> + } <nl> + return path . subpath ( 0 , globIndex ) ; <nl> + } <nl> + <nl> private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { <nl> - final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + path ) ; <nl> + Path globPath = getGlobPath ( path , searchPath ) ; <nl> + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + globPath ) ; <nl> <nl> try { <nl> final ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; <nl> @ @ - 58 , 6 + 66 , 13 @ @ public final class Globs { <nl> } <nl> } <nl> <nl> + private static Path getGlobPath ( final Path path , final Path searchPath ) { <nl> + if ( path . getNameCount ( ) = = 1 ) { <nl> + return searchPath . resolve ( path ) ; <nl> + } <nl> + return path ; <nl> + } <nl> + <nl> private static int getGlobIndex ( final Path path ) { <nl> int nameCount = path . getNameCount ( ) ; <nl> for ( int i = 0 ; i < nameCount ; i + + ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> index cd14a52 . . 167ab75 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java <nl> @ @ - 49 , 4 + 49 , 10 @ @ public class GlobsTest { <nl> public void should _ throw _ exception _ for _ unknown _ root ( ) { <nl> Globs . glob ( " unknown / src / test / resources / details / * . json " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ glob _ files ( ) { <nl> + ImmutableList < String > glob = Globs . glob ( " * . json " ) ; <nl> + assertThat ( glob . isEmpty ( ) , is ( true ) ) ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index 46e5ca9 . . 623acb5 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> + import com . google . common . collect . ImmutableList ; <nl> <nl> import java . io . File ; <nl> <nl> @ @ - 46 , 7 + 47 , 8 @ @ public final class RunnerFactory { <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; <nl> - Iterable < File > files = from ( glob ( pathname ) ) . transform ( filenameToFile ( ) ) ; <nl> + ImmutableList < String > glob = glob ( pathname ) ; <nl> + Iterable < File > files = from ( glob ) . transform ( filenameToFile ( ) ) ; <nl> final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; <nl> Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; <nl> return new WatcherRunner ( fileRunner , watcher ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> index 6e81e88 . . 1c0912f 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package com . github . dreamhead . moco . util ; <nl> <nl> + import com . google . common . base . Function ; <nl> + <nl> import java . io . File ; <nl> <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> @ @ - 38 , 6 + 40 , 15 @ @ public final class Files { <nl> return parentFile ; <nl> } <nl> <nl> + public static Function < String , File > filenameToFile ( ) { <nl> + return new Function < String , File > ( ) { <nl> + @ Override <nl> + public File apply ( final String input ) { <nl> + return new File ( input ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> private Files ( ) { <nl> } <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> index bbacd57 . . 46e5ca9 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java <nl> @ @ - 4 , 13 + 4 , 13 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; <nl> import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; <nl> import com . github . dreamhead . moco . runner . watcher . Watcher ; <nl> import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; <nl> - import com . github . dreamhead . moco . util . Globs ; <nl> - import com . google . common . base . Function ; <nl> <nl> import java . io . File ; <nl> <nl> import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; <nl> import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; <nl> + import static com . github . dreamhead . moco . util . Files . filenameToFile ; <nl> + import static com . github . dreamhead . moco . util . Globs . glob ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> <nl> public final class RunnerFactory { <nl> @ @ - 46 , 18 + 46 , 9 @ @ public final class RunnerFactory { <nl> <nl> private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { <nl> String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; <nl> - Iterable < File > files = from ( Globs . glob ( pathname ) ) . transform ( toFile ( ) ) ; <nl> + Iterable < File > files = from ( glob ( pathname ) ) . transform ( filenameToFile ( ) ) ; <nl> final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; <nl> Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; <nl> return new WatcherRunner ( fileRunner , watcher ) ; <nl> } <nl> - <nl> - private Function < String , File > toFile ( ) { <nl> - return new Function < String , File > ( ) { <nl> - @ Override <nl> - public File apply ( final String input ) { <nl> - return new File ( input ) ; <nl> - } <nl> - } ; <nl> - } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java 
 index 7c1c6cc . . 93842bd 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Globs . java 
 @ @ - 29 , 7 + 29 , 7 @ @ public final class Globs { 
 
 private static Path searchPath ( final Path path , final int globIndex ) { 
 Path root = path . getRoot ( ) ; 
 - Path subpath = path . subpath ( 0 , globIndex ) ; 
 + Path subpath = getSubpath ( path , globIndex ) ; 
 if ( root = = null ) { 
 return subpath ; 
 } 
 @ @ - 37 , 8 + 37 , 16 @ @ public final class Globs { 
 return Paths . get ( root . toString ( ) , subpath . toString ( ) ) ; 
 } 
 
 + private static Path getSubpath ( Path path , int globIndex ) { 
 + if ( globIndex = = 0 ) { 
 + return Paths . get ( " . " ) . toAbsolutePath ( ) ; 
 + } 
 + return path . subpath ( 0 , globIndex ) ; 
 + } 
 + 
 private static ImmutableList < String > doGlob ( final Path path , final Path searchPath ) { 
 - final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + path ) ; 
 + Path globPath = getGlobPath ( path , searchPath ) ; 
 + final PathMatcher matcher = FileSystems . getDefault ( ) . getPathMatcher ( " glob : " + globPath ) ; 
 
 try { 
 final ImmutableList . Builder < String > builder = ImmutableList . builder ( ) ; 
 @ @ - 58 , 6 + 66 , 13 @ @ public final class Globs { 
 } 
 } 
 
 + private static Path getGlobPath ( final Path path , final Path searchPath ) { 
 + if ( path . getNameCount ( ) = = 1 ) { 
 + return searchPath . resolve ( path ) ; 
 + } 
 + return path ; 
 + } 
 + 
 private static int getGlobIndex ( final Path path ) { 
 int nameCount = path . getNameCount ( ) ; 
 for ( int i = 0 ; i < nameCount ; i + + ) { 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java 
 index cd14a52 . . 167ab75 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / util / GlobsTest . java 
 @ @ - 49 , 4 + 49 , 10 @ @ public class GlobsTest { 
 public void should _ throw _ exception _ for _ unknown _ root ( ) { 
 Globs . glob ( " unknown / src / test / resources / details / * . json " ) ; 
 } 
 + 
 + @ Test 
 + public void should _ glob _ files ( ) { 
 + ImmutableList < String > glob = Globs . glob ( " * . json " ) ; 
 + assertThat ( glob . isEmpty ( ) , is ( true ) ) ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index 46e5ca9 . . 623acb5 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; 
 import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; 
 + import com . google . common . collect . ImmutableList ; 
 
 import java . io . File ; 
 
 @ @ - 46 , 7 + 47 , 8 @ @ public final class RunnerFactory { 
 
 private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { 
 String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; 
 - Iterable < File > files = from ( glob ( pathname ) ) . transform ( filenameToFile ( ) ) ; 
 + ImmutableList < String > glob = glob ( pathname ) ; 
 + Iterable < File > files = from ( glob ) . transform ( filenameToFile ( ) ) ; 
 final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; 
 Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; 
 return new WatcherRunner ( fileRunner , watcher ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 index 6e81e88 . . 1c0912f 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Files . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package com . github . dreamhead . moco . util ; 
 
 + import com . google . common . base . Function ; 
 + 
 import java . io . File ; 
 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 @ @ - 38 , 6 + 40 , 15 @ @ public final class Files { 
 return parentFile ; 
 } 
 
 + public static Function < String , File > filenameToFile ( ) { 
 + return new Function < String , File > ( ) { 
 + @ Override 
 + public File apply ( final String input ) { 
 + return new File ( input ) ; 
 + } 
 + } ; 
 + } 
 + 
 private Files ( ) { 
 } 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 index bbacd57 . . 46e5ca9 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / RunnerFactory . java 
 @ @ - 4 , 13 + 4 , 13 @ @ import com . github . dreamhead . moco . bootstrap . arg . StartArgs ; 
 import com . github . dreamhead . moco . runner . watcher . ShutdownMocoRunnerWatcher ; 
 import com . github . dreamhead . moco . runner . watcher . Watcher ; 
 import com . github . dreamhead . moco . runner . watcher . WatcherFactory ; 
 - import com . github . dreamhead . moco . util . Globs ; 
 - import com . google . common . base . Function ; 
 
 import java . io . File ; 
 
 import static com . github . dreamhead . moco . runner . FileRunner . createConfigurationFileRunner ; 
 import static com . github . dreamhead . moco . runner . FileRunner . createSettingFileRunner ; 
 + import static com . github . dreamhead . moco . util . Files . filenameToFile ; 
 + import static com . github . dreamhead . moco . util . Globs . glob ; 
 import static com . google . common . collect . FluentIterable . from ; 
 
 public final class RunnerFactory { 
 @ @ - 46 , 18 + 46 , 9 @ @ public final class RunnerFactory { 
 
 private Runner createDynamicConfigurationRunner ( final StartArgs startArgs ) { 
 String pathname = startArgs . getConfigurationFile ( ) . get ( ) ; 
 - Iterable < File > files = from ( Globs . glob ( pathname ) ) . transform ( toFile ( ) ) ; 
 + Iterable < File > files = from ( glob ( pathname ) ) . transform ( filenameToFile ( ) ) ; 
 final FileRunner fileRunner = createConfigurationFileRunner ( files , startArgs ) ; 
 Watcher watcher = factory . createConfigurationWatcher ( files , fileRunner ) ; 
 return new WatcherRunner ( fileRunner , watcher ) ; 
 } 
 - 
 - private Function < String , File > toFile ( ) { 
 - return new Function < String , File > ( ) { 
 - @ Override 
 - public File apply ( final String input ) { 
 - return new File ( input ) ; 
 - } 
 - } ; 
 - } 
 }
