BLEU SCORE: 0.049900497019368314

TEST MSG: replaced method with optional with or method in http request
GENERATED MSG: used immutable map in request generation

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 9d58621 . . e9d5d6d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 81 , 17 + 81 , 18 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> public ImmutableMap < String , String > get ( ) { <nl> Optional < ImmutableMap < String , String > > forms = <nl> new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; <nl> - return toResult ( forms ) ; <nl> + return forms . or ( emptyMapSupplier ( ) ) ; <nl> } <nl> } ) ; <nl> } <nl> <nl> - private ImmutableMap < String , String > toResult ( final Optional < ImmutableMap < String , String > > result ) { <nl> - if ( result . isPresent ( ) ) { <nl> - return result . get ( ) ; <nl> - } <nl> - <nl> - return ImmutableMap . of ( ) ; <nl> + private Supplier < ImmutableMap < String , String > > emptyMapSupplier ( ) { <nl> + return new Supplier < ImmutableMap < String , String > > ( ) { <nl> + @ Override <nl> + public ImmutableMap < String , String > get ( ) { <nl> + return ImmutableMap . of ( ) ; <nl> + } <nl> + } ; <nl> } <nl> <nl> private Supplier < ImmutableMap < String , String > > cookieSupplier ( ) { <nl> @ @ - 100 , 7 + 101 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> public ImmutableMap < String , String > get ( ) { <nl> Optional < ImmutableMap < String , String > > cookies = <nl> new CookiesRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; <nl> - return toResult ( cookies ) ; <nl> + return cookies . or ( emptyMapSupplier ( ) ) ; <nl> } <nl> } ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index f2fd144 . . 0ea418b 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> - import static com . google . common . collect . Maps . newHashMap ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpRequest . Builder . class ) <nl> public class DefaultHttpRequest implements HttpRequest { <nl> @ @ - 86 , 7 + 85 , 7 @ @ public class DefaultHttpRequest implements HttpRequest { <nl> return Suppliers . memoize ( new Supplier < ImmutableMap < String , String > > ( ) { <nl> @ Override <nl> public ImmutableMap < String , String > get ( ) { <nl> - Optional < ImmutableMap < String , String > > forms = new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; <nl> + Optional < ImmutableMap < String , String > > forms = new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; <nl> return forms . isPresent ( ) ? forms . get ( ) : ImmutableMap . < String , String > of ( ) ; <nl> } <nl> } ) ; <nl> @ @ - 125 , 15 + 124 , 12 @ @ public class DefaultHttpRequest implements HttpRequest { <nl> return " " ; <nl> } <nl> <nl> - return new String ( ByteBufs . asBytes ( request . content ( ) ) , 0 , ( int ) contentLength , Charset . defaultCharset ( ) ) ; <nl> + return new String ( ByteBufs . asBytes ( request . content ( ) ) , 0 , ( int ) contentLength , Charset . defaultCharset ( ) ) ; <nl> } <nl> <nl> public static HttpRequest newRequest ( FullHttpRequest request ) { <nl> QueryStringDecoder decoder = new QueryStringDecoder ( request . getUri ( ) ) ; <nl> - Map < String , String > queries = newHashMap ( ) ; <nl> - for ( Map . Entry < String , List < String > > entry : decoder . parameters ( ) . entrySet ( ) ) { <nl> - queries . put ( entry . getKey ( ) , entry . getValue ( ) . get ( 0 ) ) ; <nl> - } <nl> + ImmutableMap < String , String > queries = toQueries ( decoder ) ; <nl> <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) <nl> @ @ - 145 , 6 + 141 , 14 @ @ public class DefaultHttpRequest implements HttpRequest { <nl> . build ( ) ; <nl> } <nl> <nl> + private static ImmutableMap < String , String > toQueries ( QueryStringDecoder decoder ) { <nl> + ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , List < String > > entry : decoder . parameters ( ) . entrySet ( ) ) { <nl> + builder . put ( entry . getKey ( ) , entry . getValue ( ) . get ( 0 ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> public FullHttpRequest toFullHttpRequest ( ) { <nl> ByteBuf buffer = Unpooled . buffer ( ) ; <nl> if ( content ! = null ) {

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index 9d58621 . . e9d5d6d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 81 , 17 + 81 , 18 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 public ImmutableMap < String , String > get ( ) { 
 Optional < ImmutableMap < String , String > > forms = 
 new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; 
 - return toResult ( forms ) ; 
 + return forms . or ( emptyMapSupplier ( ) ) ; 
 } 
 } ) ; 
 } 
 
 - private ImmutableMap < String , String > toResult ( final Optional < ImmutableMap < String , String > > result ) { 
 - if ( result . isPresent ( ) ) { 
 - return result . get ( ) ; 
 - } 
 - 
 - return ImmutableMap . of ( ) ; 
 + private Supplier < ImmutableMap < String , String > > emptyMapSupplier ( ) { 
 + return new Supplier < ImmutableMap < String , String > > ( ) { 
 + @ Override 
 + public ImmutableMap < String , String > get ( ) { 
 + return ImmutableMap . of ( ) ; 
 + } 
 + } ; 
 } 
 
 private Supplier < ImmutableMap < String , String > > cookieSupplier ( ) { 
 @ @ - 100 , 7 + 101 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 public ImmutableMap < String , String > get ( ) { 
 Optional < ImmutableMap < String , String > > cookies = 
 new CookiesRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; 
 - return toResult ( cookies ) ; 
 + return cookies . or ( emptyMapSupplier ( ) ) ; 
 } 
 } ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index f2fd144 . . 0ea418b 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 21 , 7 + 21 , 6 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 - import static com . google . common . collect . Maps . newHashMap ; 
 
 @ JsonDeserialize ( builder = DefaultHttpRequest . Builder . class ) 
 public class DefaultHttpRequest implements HttpRequest { 
 @ @ - 86 , 7 + 85 , 7 @ @ public class DefaultHttpRequest implements HttpRequest { 
 return Suppliers . memoize ( new Supplier < ImmutableMap < String , String > > ( ) { 
 @ Override 
 public ImmutableMap < String , String > get ( ) { 
 - Optional < ImmutableMap < String , String > > forms = new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; 
 + Optional < ImmutableMap < String , String > > forms = new FormsRequestExtractor ( ) . extract ( DefaultHttpRequest . this ) ; 
 return forms . isPresent ( ) ? forms . get ( ) : ImmutableMap . < String , String > of ( ) ; 
 } 
 } ) ; 
 @ @ - 125 , 15 + 124 , 12 @ @ public class DefaultHttpRequest implements HttpRequest { 
 return " " ; 
 } 
 
 - return new String ( ByteBufs . asBytes ( request . content ( ) ) , 0 , ( int ) contentLength , Charset . defaultCharset ( ) ) ; 
 + return new String ( ByteBufs . asBytes ( request . content ( ) ) , 0 , ( int ) contentLength , Charset . defaultCharset ( ) ) ; 
 } 
 
 public static HttpRequest newRequest ( FullHttpRequest request ) { 
 QueryStringDecoder decoder = new QueryStringDecoder ( request . getUri ( ) ) ; 
 - Map < String , String > queries = newHashMap ( ) ; 
 - for ( Map . Entry < String , List < String > > entry : decoder . parameters ( ) . entrySet ( ) ) { 
 - queries . put ( entry . getKey ( ) , entry . getValue ( ) . get ( 0 ) ) ; 
 - } 
 + ImmutableMap < String , String > queries = toQueries ( decoder ) ; 
 
 return builder ( ) 
 . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) 
 @ @ - 145 , 6 + 141 , 14 @ @ public class DefaultHttpRequest implements HttpRequest { 
 . build ( ) ; 
 } 
 
 + private static ImmutableMap < String , String > toQueries ( QueryStringDecoder decoder ) { 
 + ImmutableMap . Builder < String , String > builder = ImmutableMap . builder ( ) ; 
 + for ( Map . Entry < String , List < String > > entry : decoder . parameters ( ) . entrySet ( ) ) { 
 + builder . put ( entry . getKey ( ) , entry . getValue ( ) . get ( 0 ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 public FullHttpRequest toFullHttpRequest ( ) { 
 ByteBuf buffer = Unpooled . buffer ( ) ; 
 if ( content ! = null ) {
