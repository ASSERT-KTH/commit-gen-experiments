BLEU SCORE: 0.08116697886877475

TEST MSG: added template resource for request action
GENERATED MSG: applied config to event action

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> index d567968 . . 3c1dfbd 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> public interface MocoEventAction extends ConfigApplier < MocoEventAction > { <nl> - void execute ( ) ; <nl> + void execute ( final Request request ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> index b802393 . . 56c3d90 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> @ @ - 13 , 8 + 13 , 8 @ @ public class MocoEventTrigger implements ConfigApplier < MocoEventTrigger > { <nl> return this . event = = event ; <nl> } <nl> <nl> - public void fireEvent ( ) { <nl> - action . execute ( ) ; <nl> + public void fireEvent ( final Request request ) { <nl> + action . execute ( request ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> index 598ada8 . . 45a072c 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . action ; <nl> <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> + import com . github . dreamhead . moco . Request ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 18 , 12 + 19 , 12 @ @ public class MocoAsyncAction implements MocoEventAction { <nl> } <nl> <nl> @ Override <nl> - public void execute ( ) { <nl> + public void execute ( final Request request ) { <nl> service . execute ( new Runnable ( ) { <nl> @ Override <nl> public void run ( ) { <nl> procedure . execute ( ) ; <nl> - action . execute ( ) ; <nl> + action . execute ( request ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index d11a7f9 . . 0502376 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 34 , 10 + 34 , 10 @ @ public class MocoRequestAction implements MocoEventAction { <nl> } <nl> <nl> @ Override <nl> - public void execute ( ) { <nl> + public void execute ( final Request request ) { <nl> CloseableHttpClient client = HttpClients . createDefault ( ) ; <nl> try { <nl> - doExecute ( client ) ; <nl> + doExecute ( client , request ) ; <nl> } catch ( IOException e ) { <nl> throw new MocoException ( e ) ; <nl> } finally { <nl> @ @ - 48 , 21 + 48 , 21 @ @ public class MocoRequestAction implements MocoEventAction { <nl> } <nl> } <nl> <nl> - private void doExecute ( final CloseableHttpClient client ) throws IOException { <nl> - HttpRequestBase request = createRequest ( url , method ) ; <nl> - if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> - ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( content . get ( ) ) ) ; <nl> + private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { <nl> + HttpRequestBase targetRequest = createRequest ( url , method , request ) ; <nl> + if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { <nl> + ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) ) ) ; <nl> } <nl> <nl> - client . execute ( request ) ; <nl> + client . execute ( targetRequest ) ; <nl> } <nl> <nl> private HttpEntity asEntity ( ContentResource resource ) { <nl> return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; <nl> } <nl> <nl> - private HttpRequestBase createRequest ( final Resource url , final HttpMethod method ) { <nl> - String targetUrl = url . readFor ( Optional . < Request > absent ( ) ) . toString ( ) ; <nl> + private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { <nl> + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; <nl> if ( HttpMethod . GET = = method ) { <nl> return new HttpGet ( targetUrl ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> index 39b6d83 . . 9095c83 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java <nl> @ @ - 33 , 13 + 33 , 13 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > <nl> @ Override <nl> public void writeToResponse ( final SessionContext context ) { <nl> this . handler . writeToResponse ( context ) ; <nl> - this . fireCompleteEvent ( ) ; <nl> + this . fireCompleteEvent ( context . getRequest ( ) ) ; <nl> } <nl> <nl> - public void fireCompleteEvent ( ) { <nl> + public void fireCompleteEvent ( final Request request ) { <nl> for ( MocoEventTrigger eventTrigger : eventTriggers ) { <nl> if ( eventTrigger . isFor ( MocoEvent . COMPLETE ) ) { <nl> - eventTrigger . fireEvent ( ) ; <nl> + eventTrigger . fireEvent ( request ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index cfd1b85 . . 80f9885 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action ) . execute ( ) ; <nl> + verify ( action ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 43 , 7 + 43 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action ) . execute ( ) ; <nl> + verify ( action ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action , Mockito . never ( ) ) . execute ( ) ; <nl> + verify ( action , Mockito . never ( ) ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 94 , 6 + 94 , 21 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ template ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( template ( " $ { var } " , " var " , remoteUrl ( " / target " ) ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> <nl> @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { <nl> @ @ - 209 , 7 + 224 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> <nl> - verify ( action ) . execute ( ) ; <nl> + verify ( action ) . execute ( any ( Request . class ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> index bec1b02 . . d567968 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - public interface MocoEventAction { <nl> + public interface MocoEventAction extends ConfigApplier < MocoEventAction > { <nl> void execute ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> index 9d0f88a . . 5a46e4d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java <nl> @ @ - 19 , 6 + 19 , 11 @ @ public class MocoEventTrigger implements ConfigApplier < MocoEventTrigger > { <nl> <nl> @ Override <nl> public MocoEventTrigger apply ( MocoConfig config ) { <nl> + MocoEventAction action = this . action . apply ( config ) ; <nl> + if ( action ! = this . action ) { <nl> + return new MocoEventTrigger ( event , action ) ; <nl> + } <nl> + <nl> return this ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> index b0b4fcf . . 671cb15 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . action ; <nl> <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> <nl> @ @ - 26 , 4 + 27 , 14 @ @ public class MocoAsyncAction implements MocoEventAction { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Override <nl> + public MocoEventAction apply ( MocoConfig config ) { <nl> + MocoEventAction action = this . action . apply ( config ) ; <nl> + if ( this . action ! = action ) { <nl> + return new MocoAsyncAction ( action , procedure ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> index dbfb853 . . 7e89738 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java <nl> @ @ - 1 , 7 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco . action ; <nl> <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventAction ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> import com . google . common . base . Optional ; <nl> import io . netty . handler . codec . http . HttpMethod ; <nl> import org . apache . http . HttpEntityEnclosingRequest ; <nl> @ @ - 14 , 6 + 16 , 7 @ @ import org . apache . http . impl . client . HttpClients ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . google . common . base . Optional . of ; <nl> import static java . lang . String . format ; <nl> <nl> public class MocoRequestAction implements MocoEventAction { <nl> @ @ - 53 , 4 + 56 , 22 @ @ public class MocoRequestAction implements MocoEventAction { <nl> <nl> throw new RuntimeException ( format ( " unknown HTTP method : % s " , method ) ) ; <nl> } <nl> + <nl> + @ Override <nl> + public MocoEventAction apply ( MocoConfig config ) { <nl> + if ( this . content . isPresent ( ) ) { <nl> + return applyContent ( config , this . content . get ( ) ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> + <nl> + private MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { <nl> + Resource content = originalContent . apply ( config ) ; <nl> + if ( content ! = originalContent ) { <nl> + return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) content ) ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> index 8b5a9e5 . . 8b380f5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java <nl> @ @ - 52 , 15 + 52 , 6 @ @ public class ActualHttpServer extends HttpServer { <nl> return monitor ; <nl> } <nl> <nl> - / / private Function < BaseSetting , BaseSetting > config ( final MocoConfig [ ] configs ) { <nl> - / / return new Function < BaseSetting , BaseSetting > ( ) { <nl> - / / @ Override <nl> - / / public BaseSetting apply ( BaseSetting setting ) { <nl> - / / return configItem ( setting , configs ) ; <nl> - / / } <nl> - / / } ; <nl> - / / } <nl> - <nl> private void addSetting ( final BaseSetting setting ) { <nl> this . settings . add ( setting ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java <nl> index 0aa7ac2 . . 128d011 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java <nl> @ @ - 22 , 10 + 22 , 9 @ @ public class Configs { <nl> return target ; <nl> } <nl> <nl> + @ SuppressWarnings ( " unchecked " ) <nl> public static < T extends ConfigApplier > ImmutableList < T > configItems ( List < T > items , MocoConfig . . . configs ) { <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - Function < T , T > config = config ( configs ) ; <nl> - return from ( items ) . transform ( config ) . toList ( ) ; <nl> + return from ( items ) . transform ( Configs . < T > config ( configs ) ) . toList ( ) ; <nl> } <nl> <nl> private static < T extends ConfigApplier < T > > Function < T , T > config ( final MocoConfig . . . configs ) { <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 3b696d4 . . 273d85f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 148 , 6 + 148 , 7 @ @ public class MocoEventTest extends AbstractMocoTest { <nl> @ Test <nl> public void should _ fire _ event _ for _ context _ configuration ( ) throws Exception { <nl> MocoEventAction action = mock ( MocoEventAction . class ) ; <nl> + when ( action . apply ( Matchers . < MocoConfig > anyObject ( ) ) ) . thenReturn ( action ) ; <nl> server = httpserver ( port ( ) , context ( " / context " ) ) ; <nl> server . get ( by ( uri ( " / foo " ) ) ) . response ( " foo " ) . on ( complete ( action ) ) ; <nl> <nl> @ @ - 160 , 4 + 161 , 23 @ @ public class MocoEventTest extends AbstractMocoTest { <nl> <nl> verify ( action ) . execute ( ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ send _ post _ request _ with _ file _ root _ configuration ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + when ( handler . apply ( Matchers . < MocoConfig > anyObject ( ) ) ) . thenReturn ( handler ) ; <nl> + <nl> + server = httpserver ( port ( ) , fileRoot ( " src / test / resources " ) ) ; <nl> + server . request ( by ( uri ( " / target " ) ) , by ( file ( " foo . request " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , file ( " foo . request " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < FullHttpRequest > anyObject ( ) , Matchers . < FullHttpResponse > anyObject ( ) ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java 
 index d567968 . . 3c1dfbd 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 package com . github . dreamhead . moco ; 
 
 public interface MocoEventAction extends ConfigApplier < MocoEventAction > { 
 - void execute ( ) ; 
 + void execute ( final Request request ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java 
 index b802393 . . 56c3d90 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java 
 @ @ - 13 , 8 + 13 , 8 @ @ public class MocoEventTrigger implements ConfigApplier < MocoEventTrigger > { 
 return this . event = = event ; 
 } 
 
 - public void fireEvent ( ) { 
 - action . execute ( ) ; 
 + public void fireEvent ( final Request request ) { 
 + action . execute ( request ) ; 
 } 
 
 @ Override 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 index 598ada8 . . 45a072c 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco . action ; 
 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 + import com . github . dreamhead . moco . Request ; 
 import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 
 import java . util . concurrent . ExecutorService ; 
 @ @ - 18 , 12 + 19 , 12 @ @ public class MocoAsyncAction implements MocoEventAction { 
 } 
 
 @ Override 
 - public void execute ( ) { 
 + public void execute ( final Request request ) { 
 service . execute ( new Runnable ( ) { 
 @ Override 
 public void run ( ) { 
 procedure . execute ( ) ; 
 - action . execute ( ) ; 
 + action . execute ( request ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index d11a7f9 . . 0502376 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 34 , 10 + 34 , 10 @ @ public class MocoRequestAction implements MocoEventAction { 
 } 
 
 @ Override 
 - public void execute ( ) { 
 + public void execute ( final Request request ) { 
 CloseableHttpClient client = HttpClients . createDefault ( ) ; 
 try { 
 - doExecute ( client ) ; 
 + doExecute ( client , request ) ; 
 } catch ( IOException e ) { 
 throw new MocoException ( e ) ; 
 } finally { 
 @ @ - 48 , 21 + 48 , 21 @ @ public class MocoRequestAction implements MocoEventAction { 
 } 
 } 
 
 - private void doExecute ( final CloseableHttpClient client ) throws IOException { 
 - HttpRequestBase request = createRequest ( url , method ) ; 
 - if ( request instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 - ( ( HttpEntityEnclosingRequest ) request ) . setEntity ( asEntity ( content . get ( ) ) ) ; 
 + private void doExecute ( final CloseableHttpClient client , final Request request ) throws IOException { 
 + HttpRequestBase targetRequest = createRequest ( url , method , request ) ; 
 + if ( targetRequest instanceof HttpEntityEnclosingRequest & & content . isPresent ( ) ) { 
 + ( ( HttpEntityEnclosingRequest ) targetRequest ) . setEntity ( asEntity ( content . get ( ) ) ) ; 
 } 
 
 - client . execute ( request ) ; 
 + client . execute ( targetRequest ) ; 
 } 
 
 private HttpEntity asEntity ( ContentResource resource ) { 
 return new InputStreamEntity ( resource . readFor ( Optional . < Request > absent ( ) ) . toInputStream ( ) ) ; 
 } 
 
 - private HttpRequestBase createRequest ( final Resource url , final HttpMethod method ) { 
 - String targetUrl = url . readFor ( Optional . < Request > absent ( ) ) . toString ( ) ; 
 + private HttpRequestBase createRequest ( final Resource url , final HttpMethod method , final Request request ) { 
 + String targetUrl = url . readFor ( of ( request ) ) . toString ( ) ; 
 if ( HttpMethod . GET = = method ) { 
 return new HttpGet ( targetUrl ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 index 39b6d83 . . 9095c83 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / setting / BaseSetting . java 
 @ @ - 33 , 13 + 33 , 13 @ @ public abstract class BaseSetting < T extends ResponseSetting < T > > 
 @ Override 
 public void writeToResponse ( final SessionContext context ) { 
 this . handler . writeToResponse ( context ) ; 
 - this . fireCompleteEvent ( ) ; 
 + this . fireCompleteEvent ( context . getRequest ( ) ) ; 
 } 
 
 - public void fireCompleteEvent ( ) { 
 + public void fireCompleteEvent ( final Request request ) { 
 for ( MocoEventTrigger eventTrigger : eventTriggers ) { 
 if ( eventTrigger . isFor ( MocoEvent . COMPLETE ) ) { 
 - eventTrigger . fireEvent ( ) ; 
 + eventTrigger . fireEvent ( request ) ; 
 } 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index cfd1b85 . . 80f9885 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 28 , 7 + 28 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 
 - verify ( action ) . execute ( ) ; 
 + verify ( action ) . execute ( any ( Request . class ) ) ; 
 } 
 
 @ Test 
 @ @ - 43 , 7 + 43 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 
 - verify ( action ) . execute ( ) ; 
 + verify ( action ) . execute ( any ( Request . class ) ) ; 
 } 
 
 @ Test 
 @ @ - 59 , 7 + 59 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 
 - verify ( action , Mockito . never ( ) ) . execute ( ) ; 
 + verify ( action , Mockito . never ( ) ) . execute ( any ( Request . class ) ) ; 
 } 
 
 @ Test 
 @ @ - 94 , 6 + 94 , 21 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 } 
 
 + @ Test 
 + public void should _ send _ get _ request _ to _ target _ on _ complete _ with _ template ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( get ( template ( " $ { var } " , " var " , remoteUrl ( " / target " ) ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 + } 
 
 @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ string ( ) throws Exception { 
 @ @ - 209 , 7 + 224 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 
 - verify ( action ) . execute ( ) ; 
 + verify ( action ) . execute ( any ( Request . class ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java 
 index bec1b02 . . d567968 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventAction . java 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 package com . github . dreamhead . moco ; 
 
 - public interface MocoEventAction { 
 + public interface MocoEventAction extends ConfigApplier < MocoEventAction > { 
 void execute ( ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java 
 index 9d0f88a . . 5a46e4d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoEventTrigger . java 
 @ @ - 19 , 6 + 19 , 11 @ @ public class MocoEventTrigger implements ConfigApplier < MocoEventTrigger > { 
 
 @ Override 
 public MocoEventTrigger apply ( MocoConfig config ) { 
 + MocoEventAction action = this . action . apply ( config ) ; 
 + if ( action ! = this . action ) { 
 + return new MocoEventTrigger ( event , action ) ; 
 + } 
 + 
 return this ; 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 index b0b4fcf . . 671cb15 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoAsyncAction . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . action ; 
 
 + import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 
 @ @ - 26 , 4 + 27 , 14 @ @ public class MocoAsyncAction implements MocoEventAction { 
 } 
 } ) ; 
 } 
 + 
 + @ Override 
 + public MocoEventAction apply ( MocoConfig config ) { 
 + MocoEventAction action = this . action . apply ( config ) ; 
 + if ( this . action ! = action ) { 
 + return new MocoAsyncAction ( action , procedure ) ; 
 + } 
 + 
 + return this ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 index dbfb853 . . 7e89738 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / action / MocoRequestAction . java 
 @ @ - 1 , 7 + 1 , 9 @ @ 
 package com . github . dreamhead . moco . action ; 
 
 + import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventAction ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 + import com . github . dreamhead . moco . resource . Resource ; 
 import com . google . common . base . Optional ; 
 import io . netty . handler . codec . http . HttpMethod ; 
 import org . apache . http . HttpEntityEnclosingRequest ; 
 @ @ - 14 , 6 + 16 , 7 @ @ import org . apache . http . impl . client . HttpClients ; 
 
 import java . io . IOException ; 
 
 + import static com . google . common . base . Optional . of ; 
 import static java . lang . String . format ; 
 
 public class MocoRequestAction implements MocoEventAction { 
 @ @ - 53 , 4 + 56 , 22 @ @ public class MocoRequestAction implements MocoEventAction { 
 
 throw new RuntimeException ( format ( " unknown HTTP method : % s " , method ) ) ; 
 } 
 + 
 + @ Override 
 + public MocoEventAction apply ( MocoConfig config ) { 
 + if ( this . content . isPresent ( ) ) { 
 + return applyContent ( config , this . content . get ( ) ) ; 
 + } 
 + 
 + return this ; 
 + } 
 + 
 + private MocoEventAction applyContent ( MocoConfig config , ContentResource originalContent ) { 
 + Resource content = originalContent . apply ( config ) ; 
 + if ( content ! = originalContent ) { 
 + return new MocoRequestAction ( this . url , this . method , of ( ( ContentResource ) content ) ) ; 
 + } 
 + 
 + return this ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 index 8b5a9e5 . . 8b380f5 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ActualHttpServer . java 
 @ @ - 52 , 15 + 52 , 6 @ @ public class ActualHttpServer extends HttpServer { 
 return monitor ; 
 } 
 
 - / / private Function < BaseSetting , BaseSetting > config ( final MocoConfig [ ] configs ) { 
 - / / return new Function < BaseSetting , BaseSetting > ( ) { 
 - / / @ Override 
 - / / public BaseSetting apply ( BaseSetting setting ) { 
 - / / return configItem ( setting , configs ) ; 
 - / / } 
 - / / } ; 
 - / / } 
 - 
 private void addSetting ( final BaseSetting setting ) { 
 this . settings . add ( setting ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java 
 index 0aa7ac2 . . 128d011 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / util / Configs . java 
 @ @ - 22 , 10 + 22 , 9 @ @ public class Configs { 
 return target ; 
 } 
 
 + @ SuppressWarnings ( " unchecked " ) 
 public static < T extends ConfigApplier > ImmutableList < T > configItems ( List < T > items , MocoConfig . . . configs ) { 
 - @ SuppressWarnings ( " unchecked " ) 
 - Function < T , T > config = config ( configs ) ; 
 - return from ( items ) . transform ( config ) . toList ( ) ; 
 + return from ( items ) . transform ( Configs . < T > config ( configs ) ) . toList ( ) ; 
 } 
 
 private static < T extends ConfigApplier < T > > Function < T , T > config ( final MocoConfig . . . configs ) { 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index 3b696d4 . . 273d85f 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 148 , 6 + 148 , 7 @ @ public class MocoEventTest extends AbstractMocoTest { 
 @ Test 
 public void should _ fire _ event _ for _ context _ configuration ( ) throws Exception { 
 MocoEventAction action = mock ( MocoEventAction . class ) ; 
 + when ( action . apply ( Matchers . < MocoConfig > anyObject ( ) ) ) . thenReturn ( action ) ; 
 server = httpserver ( port ( ) , context ( " / context " ) ) ; 
 server . get ( by ( uri ( " / foo " ) ) ) . response ( " foo " ) . on ( complete ( action ) ) ; 
 
 @ @ - 160 , 4 + 161 , 23 @ @ public class MocoEventTest extends AbstractMocoTest { 
 
 verify ( action ) . execute ( ) ; 
 } 
 + 
 + @ Test 
 + public void should _ send _ post _ request _ with _ file _ root _ configuration ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + when ( handler . apply ( Matchers . < MocoConfig > anyObject ( ) ) ) . thenReturn ( handler ) ; 
 + 
 + server = httpserver ( port ( ) , fileRoot ( " src / test / resources " ) ) ; 
 + server . request ( by ( uri ( " / target " ) ) , by ( file ( " foo . request " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , file ( " foo . request " ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < FullHttpRequest > anyObject ( ) , Matchers . < FullHttpResponse > anyObject ( ) ) ; 
 + } 
 }
