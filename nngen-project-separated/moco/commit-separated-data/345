BLEU SCORE: 0.08116697886877475

TEST MSG: extracted internal message content for serializer
GENERATED MSG: extracted abstract file resource reader

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> new file mode 100644 <nl> index 0000000 . . dad73e1 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package com . github . dreamhead . moco . dumper ; <nl> + <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> + <nl> + import java . nio . charset . Charset ; <nl> + <nl> + import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> + public class InternalMessageContent { <nl> + private byte [ ] content ; <nl> + private Charset charset ; <nl> + <nl> + public InternalMessageContent ( ) { <nl> + } <nl> + <nl> + public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> + this . content = content ; <nl> + this . charset = charset ; <nl> + } <nl> + <nl> + public MessageContent toContent ( ) { <nl> + return content ( ) . withCharset ( charset ) . withContent ( content ) . build ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> index af15870 . . b0e2f54 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . dumper ; <nl> <nl> - import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonParser ; <nl> import com . fasterxml . jackson . core . JsonToken ; <nl> import com . fasterxml . jackson . databind . DeserializationContext ; <nl> @ @ - 8 , 7 + 7 , 6 @ @ import com . fasterxml . jackson . databind . JsonDeserializer ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> <nl> import java . io . IOException ; <nl> - import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . github . dreamhead . moco . util . StringUtil . strip ; <nl> @ @ - 28 , 14 + 26 , 4 @ @ public class MessageContentDeserializer extends JsonDeserializer < MessageContent > <nl> <nl> return ( MessageContent ) ctx . handleUnexpectedToken ( MessageContent . class , jp ) ; <nl> } <nl> - <nl> - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - private static class InternalMessageContent { <nl> - private byte [ ] content ; <nl> - private Charset charset ; <nl> - <nl> - public MessageContent toContent ( ) { <nl> - return content ( ) . withCharset ( charset ) . withContent ( content ) . build ( ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java <nl> index 0fb2b06 . . 4d2a99a 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java <nl> @ @ - 1 , 13 + 1 , 11 @ @ <nl> package com . github . dreamhead . moco . dumper ; <nl> <nl> - import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> import com . fasterxml . jackson . core . JsonGenerator ; <nl> import com . fasterxml . jackson . databind . JsonSerializer ; <nl> import com . fasterxml . jackson . databind . SerializerProvider ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> <nl> import java . io . IOException ; <nl> - import java . nio . charset . Charset ; <nl> <nl> public class MessageContentSerializer extends JsonSerializer < MessageContent > { <nl> @ Override <nl> @ @ - 20 , 15 + 18 , 4 @ @ public class MessageContentSerializer extends JsonSerializer < MessageContent > { <nl> <nl> generator . writeString ( new String ( value . getContent ( ) ) ) ; <nl> } <nl> - <nl> - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - private static class InternalMessageContent { <nl> - private byte [ ] content ; <nl> - private Charset charset ; <nl> - <nl> - public InternalMessageContent ( byte [ ] content , Charset charset ) { <nl> - this . content = content ; <nl> - this . charset = charset ; <nl> - } <nl> - } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> new file mode 100644 <nl> index 0000000 . . c70f051 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + package com . github . dreamhead . moco . resource . reader ; <nl> + <nl> + import com . github . dreamhead . moco . Request ; <nl> + import com . github . dreamhead . moco . model . MessageContent ; <nl> + import com . github . dreamhead . moco . util . FileContentType ; <nl> + import com . google . common . base . Optional ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . charset . Charset ; <nl> + <nl> + import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . google . common . io . ByteStreams . toByteArray ; <nl> + <nl> + public abstract class AbstractFileResourceReader implements ContentResourceReader { <nl> + <nl> + protected abstract byte [ ] doReadFor ( ) ; <nl> + <nl> + protected final String filename ; <nl> + protected final Optional < Charset > charset ; <nl> + <nl> + public AbstractFileResourceReader ( Optional < Charset > charset , String filename ) { <nl> + this . charset = charset ; <nl> + this . filename = filename ; <nl> + } <nl> + <nl> + @ Override <nl> + public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> + return asMessageContent ( doReadFor ( ) ) ; <nl> + } <nl> + <nl> + private MessageContent asMessageContent ( byte [ ] content ) { <nl> + MessageContent . Builder builder = content ( ) . withContent ( content ) ; <nl> + if ( charset . isPresent ( ) ) { <nl> + builder . withCharset ( charset . get ( ) ) ; <nl> + } <nl> + <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getContentType ( ) { <nl> + return new FileContentType ( this . filename ) . getContentType ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> index a6e89ba . . 177c7ad 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java <nl> @ @ - 1 , 49 + 1 , 30 @ @ <nl> package com . github . dreamhead . moco . resource . reader ; <nl> <nl> - import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . model . MessageContent ; <nl> - import com . github . dreamhead . moco . util . FileContentType ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . IOException ; <nl> import java . net . URL ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . google . common . io . ByteStreams . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> - public class ClasspathFileResourceReader implements ContentResourceReader { <nl> - private final String filename ; <nl> - private final Optional < Charset > charset ; <nl> - <nl> + public class ClasspathFileResourceReader extends AbstractFileResourceReader { <nl> public ClasspathFileResourceReader ( String filename , Optional < Charset > charset ) { <nl> - this . filename = filename ; <nl> - this . charset = charset ; <nl> + super ( charset , filename ) ; <nl> } <nl> <nl> - @ Override <nl> - public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> + protected byte [ ] doReadFor ( ) { <nl> + ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; <nl> + URL resource = classLoader . getResource ( filename ) ; <nl> + if ( resource = = null ) { <nl> + throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; <nl> + } <nl> try { <nl> - ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; <nl> - URL resource = classLoader . getResource ( filename ) ; <nl> - if ( resource = = null ) { <nl> - throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; <nl> - } <nl> - <nl> - MessageContent . Builder builder = content ( ) . withContent ( toByteArray ( resource . openStream ( ) ) ) ; <nl> - if ( charset . isPresent ( ) ) { <nl> - builder . withCharset ( charset . get ( ) ) ; <nl> - } <nl> - <nl> - return builder . build ( ) ; <nl> + return toByteArray ( resource . openStream ( ) ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> <nl> - @ Override <nl> - public String getContentType ( ) { <nl> - return new FileContentType ( this . filename ) . getContentType ( ) ; <nl> - } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> index 6205b3f . . 61ebcaf 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java <nl> @ @ - 1 , 44 + 1 , 30 @ @ <nl> package com . github . dreamhead . moco . resource . reader ; <nl> <nl> - import com . github . dreamhead . moco . Request ; <nl> - import com . github . dreamhead . moco . model . MessageContent ; <nl> - import com . github . dreamhead . moco . util . FileContentType ; <nl> import com . google . common . base . Optional ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . google . common . io . Files . toByteArray ; <nl> import static java . lang . String . format ; <nl> <nl> - public class FileResourceReader implements ContentResourceReader { <nl> + public class FileResourceReader extends AbstractFileResourceReader { <nl> private final File file ; <nl> - private Optional < Charset > charset ; <nl> <nl> public FileResourceReader ( File file , Optional < Charset > charset ) { <nl> + super ( charset , file . getName ( ) ) ; <nl> this . file = file ; <nl> - this . charset = charset ; <nl> } <nl> <nl> @ Override <nl> - public String getContentType ( ) { <nl> - return new FileContentType ( file . getName ( ) ) . getContentType ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public MessageContent readFor ( final Optional < ? extends Request > request ) { <nl> + protected byte [ ] doReadFor ( ) { <nl> if ( ! file . exists ( ) ) { <nl> throw new IllegalArgumentException ( format ( " % s does not exist " , file . getPath ( ) ) ) ; <nl> } <nl> <nl> try { <nl> - MessageContent . Builder builder = content ( ) . withContent ( toByteArray ( file ) ) ; <nl> - if ( charset . isPresent ( ) ) { <nl> - builder . withCharset ( charset . get ( ) ) ; <nl> - } <nl> - return builder . build ( ) ; <nl> + return toByteArray ( file ) ; <nl> } catch ( IOException e ) { <nl> throw new RuntimeException ( e ) ; <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java 
 new file mode 100644 
 index 0000000 . . dad73e1 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / InternalMessageContent . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package com . github . dreamhead . moco . dumper ; 
 + 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 + import com . github . dreamhead . moco . model . MessageContent ; 
 + 
 + import java . nio . charset . Charset ; 
 + 
 + import static com . github . dreamhead . moco . model . MessageContent . content ; 
 + 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 + public class InternalMessageContent { 
 + private byte [ ] content ; 
 + private Charset charset ; 
 + 
 + public InternalMessageContent ( ) { 
 + } 
 + 
 + public InternalMessageContent ( byte [ ] content , Charset charset ) { 
 + this . content = content ; 
 + this . charset = charset ; 
 + } 
 + 
 + public MessageContent toContent ( ) { 
 + return content ( ) . withCharset ( charset ) . withContent ( content ) . build ( ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java 
 index af15870 . . b0e2f54 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentDeserializer . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . dumper ; 
 
 - import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 import com . fasterxml . jackson . core . JsonParser ; 
 import com . fasterxml . jackson . core . JsonToken ; 
 import com . fasterxml . jackson . databind . DeserializationContext ; 
 @ @ - 8 , 7 + 7 , 6 @ @ import com . fasterxml . jackson . databind . JsonDeserializer ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 
 import java . io . IOException ; 
 - import java . nio . charset . Charset ; 
 
 import static com . github . dreamhead . moco . model . MessageContent . content ; 
 import static com . github . dreamhead . moco . util . StringUtil . strip ; 
 @ @ - 28 , 14 + 26 , 4 @ @ public class MessageContentDeserializer extends JsonDeserializer < MessageContent > 
 
 return ( MessageContent ) ctx . handleUnexpectedToken ( MessageContent . class , jp ) ; 
 } 
 - 
 - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 - private static class InternalMessageContent { 
 - private byte [ ] content ; 
 - private Charset charset ; 
 - 
 - public MessageContent toContent ( ) { 
 - return content ( ) . withCharset ( charset ) . withContent ( content ) . build ( ) ; 
 - } 
 - } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java 
 index 0fb2b06 . . 4d2a99a 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / dumper / MessageContentSerializer . java 
 @ @ - 1 , 13 + 1 , 11 @ @ 
 package com . github . dreamhead . moco . dumper ; 
 
 - import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 import com . fasterxml . jackson . core . JsonGenerator ; 
 import com . fasterxml . jackson . databind . JsonSerializer ; 
 import com . fasterxml . jackson . databind . SerializerProvider ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 
 import java . io . IOException ; 
 - import java . nio . charset . Charset ; 
 
 public class MessageContentSerializer extends JsonSerializer < MessageContent > { 
 @ Override 
 @ @ - 20 , 15 + 18 , 4 @ @ public class MessageContentSerializer extends JsonSerializer < MessageContent > { 
 
 generator . writeString ( new String ( value . getContent ( ) ) ) ; 
 } 
 - 
 - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 - private static class InternalMessageContent { 
 - private byte [ ] content ; 
 - private Charset charset ; 
 - 
 - public InternalMessageContent ( byte [ ] content , Charset charset ) { 
 - this . content = content ; 
 - this . charset = charset ; 
 - } 
 - } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 new file mode 100644 
 index 0000000 . . c70f051 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / AbstractFileResourceReader . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + package com . github . dreamhead . moco . resource . reader ; 
 + 
 + import com . github . dreamhead . moco . Request ; 
 + import com . github . dreamhead . moco . model . MessageContent ; 
 + import com . github . dreamhead . moco . util . FileContentType ; 
 + import com . google . common . base . Optional ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . charset . Charset ; 
 + 
 + import static com . github . dreamhead . moco . model . MessageContent . content ; 
 + import static com . google . common . io . ByteStreams . toByteArray ; 
 + 
 + public abstract class AbstractFileResourceReader implements ContentResourceReader { 
 + 
 + protected abstract byte [ ] doReadFor ( ) ; 
 + 
 + protected final String filename ; 
 + protected final Optional < Charset > charset ; 
 + 
 + public AbstractFileResourceReader ( Optional < Charset > charset , String filename ) { 
 + this . charset = charset ; 
 + this . filename = filename ; 
 + } 
 + 
 + @ Override 
 + public MessageContent readFor ( final Optional < ? extends Request > request ) { 
 + return asMessageContent ( doReadFor ( ) ) ; 
 + } 
 + 
 + private MessageContent asMessageContent ( byte [ ] content ) { 
 + MessageContent . Builder builder = content ( ) . withContent ( content ) ; 
 + if ( charset . isPresent ( ) ) { 
 + builder . withCharset ( charset . get ( ) ) ; 
 + } 
 + 
 + return builder . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public String getContentType ( ) { 
 + return new FileContentType ( this . filename ) . getContentType ( ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 index a6e89ba . . 177c7ad 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / ClasspathFileResourceReader . java 
 @ @ - 1 , 49 + 1 , 30 @ @ 
 package com . github . dreamhead . moco . resource . reader ; 
 
 - import com . github . dreamhead . moco . Request ; 
 - import com . github . dreamhead . moco . model . MessageContent ; 
 - import com . github . dreamhead . moco . util . FileContentType ; 
 import com . google . common . base . Optional ; 
 
 import java . io . IOException ; 
 import java . net . URL ; 
 import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . model . MessageContent . content ; 
 import static com . google . common . io . ByteStreams . toByteArray ; 
 import static java . lang . String . format ; 
 
 - public class ClasspathFileResourceReader implements ContentResourceReader { 
 - private final String filename ; 
 - private final Optional < Charset > charset ; 
 - 
 + public class ClasspathFileResourceReader extends AbstractFileResourceReader { 
 public ClasspathFileResourceReader ( String filename , Optional < Charset > charset ) { 
 - this . filename = filename ; 
 - this . charset = charset ; 
 + super ( charset , filename ) ; 
 } 
 
 - @ Override 
 - public MessageContent readFor ( final Optional < ? extends Request > request ) { 
 + protected byte [ ] doReadFor ( ) { 
 + ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; 
 + URL resource = classLoader . getResource ( filename ) ; 
 + if ( resource = = null ) { 
 + throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; 
 + } 
 try { 
 - ClassLoader classLoader = this . getClass ( ) . getClassLoader ( ) ; 
 - URL resource = classLoader . getResource ( filename ) ; 
 - if ( resource = = null ) { 
 - throw new IllegalArgumentException ( format ( " % s does not exist " , filename ) ) ; 
 - } 
 - 
 - MessageContent . Builder builder = content ( ) . withContent ( toByteArray ( resource . openStream ( ) ) ) ; 
 - if ( charset . isPresent ( ) ) { 
 - builder . withCharset ( charset . get ( ) ) ; 
 - } 
 - 
 - return builder . build ( ) ; 
 + return toByteArray ( resource . openStream ( ) ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 
 - @ Override 
 - public String getContentType ( ) { 
 - return new FileContentType ( this . filename ) . getContentType ( ) ; 
 - } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 index 6205b3f . . 61ebcaf 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / resource / reader / FileResourceReader . java 
 @ @ - 1 , 44 + 1 , 30 @ @ 
 package com . github . dreamhead . moco . resource . reader ; 
 
 - import com . github . dreamhead . moco . Request ; 
 - import com . github . dreamhead . moco . model . MessageContent ; 
 - import com . github . dreamhead . moco . util . FileContentType ; 
 import com . google . common . base . Optional ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . model . MessageContent . content ; 
 import static com . google . common . io . Files . toByteArray ; 
 import static java . lang . String . format ; 
 
 - public class FileResourceReader implements ContentResourceReader { 
 + public class FileResourceReader extends AbstractFileResourceReader { 
 private final File file ; 
 - private Optional < Charset > charset ; 
 
 public FileResourceReader ( File file , Optional < Charset > charset ) { 
 + super ( charset , file . getName ( ) ) ; 
 this . file = file ; 
 - this . charset = charset ; 
 } 
 
 @ Override 
 - public String getContentType ( ) { 
 - return new FileContentType ( file . getName ( ) ) . getContentType ( ) ; 
 - } 
 - 
 - @ Override 
 - public MessageContent readFor ( final Optional < ? extends Request > request ) { 
 + protected byte [ ] doReadFor ( ) { 
 if ( ! file . exists ( ) ) { 
 throw new IllegalArgumentException ( format ( " % s does not exist " , file . getPath ( ) ) ) ; 
 } 
 
 try { 
 - MessageContent . Builder builder = content ( ) . withContent ( toByteArray ( file ) ) ; 
 - if ( charset . isPresent ( ) ) { 
 - builder . withCharset ( charset . get ( ) ) ; 
 - } 
 - return builder . build ( ) ; 
 + return toByteArray ( file ) ; 
 } catch ( IOException e ) { 
 throw new RuntimeException ( e ) ; 
 }
