BLEU SCORE: 0.21105340631872635

TEST MSG: extracted netty http version to moco http protocol version
GENERATED MSG: applied http protocol version to response

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 08b6b01 . . 1d98429 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . HttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> + import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . util . Map ; <nl> <nl> @ @ - 35 , 7 + 36 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> } <nl> <nl> return builder ( ) <nl> - . withVersion ( HttpProtocolVersion . versionOf ( response . protocolVersion ( ) . text ( ) ) ) <nl> + . withVersion ( toHttpProtocolVersion ( response . protocolVersion ( ) ) ) <nl> . withStatus ( response . status ( ) . code ( ) ) <nl> . withHeaders ( headerBuilder . build ( ) ) <nl> . withContent ( content ( ) <nl> @ @ - 44 , 6 + 45 , 10 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> . build ( ) ; <nl> } <nl> <nl> + private static HttpProtocolVersion toHttpProtocolVersion ( final HttpVersion httpVersion ) { <nl> + return HttpProtocolVersion . versionOf ( httpVersion . text ( ) ) ; <nl> + } <nl> + <nl> public static Builder builder ( ) { <nl> return new Builder ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java <nl> index 44eed11 . . 516dcbe 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> public interface HttpResponse { <nl> - String getVersion ( ) ; <nl> + HttpProtocolVersion getVersion ( ) ; <nl> <nl> String getContent ( ) ; <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index bcf81f9 . . 36b08a0 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 1 , 12 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco . model ; <nl> <nl> import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> + import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import io . netty . handler . codec . http . DefaultFullHttpResponse ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> - import io . netty . handler . codec . http . HttpResponseStatus ; <nl> - import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> import java . nio . charset . Charset ; <nl> import java . util . Map ; <nl> @ @ - 15 , 19 + 13 , 19 @ @ import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> public class DefaultHttpResponse implements HttpResponse { <nl> - private final String version ; <nl> + private final HttpProtocolVersion version ; <nl> private final String content ; <nl> private final ImmutableMap < String , String > headers ; <nl> private final int status ; <nl> <nl> - public DefaultHttpResponse ( String version , int status , ImmutableMap < String , String > headers , String content ) { <nl> + public DefaultHttpResponse ( HttpProtocolVersion version , int status , ImmutableMap < String , String > headers , String content ) { <nl> this . version = version ; <nl> this . headers = headers ; <nl> this . content = content ; <nl> this . status = status ; <nl> } <nl> <nl> - public String getVersion ( ) { <nl> + public HttpProtocolVersion getVersion ( ) { <nl> return version ; <nl> } <nl> <nl> @ @ - 50 , 34 + 48 , 24 @ @ public class DefaultHttpResponse implements HttpResponse { <nl> } <nl> <nl> return builder ( ) <nl> - . withVersion ( response . getProtocolVersion ( ) . text ( ) ) <nl> + . withVersion ( HttpProtocolVersion . versionOf ( response . getProtocolVersion ( ) . text ( ) ) ) <nl> . withStatus ( response . getStatus ( ) . code ( ) ) <nl> . withHeaders ( headerBuilder . build ( ) ) <nl> . withContent ( response . content ( ) . toString ( Charset . defaultCharset ( ) ) ) <nl> . build ( ) ; <nl> } <nl> <nl> - public FullHttpResponse toFullHttpResponse ( ) { <nl> - FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( version ) , HttpResponseStatus . valueOf ( status ) ) ; <nl> - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { <nl> - response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> - } <nl> - <nl> - response . content ( ) . writeBytes ( content . getBytes ( ) ) ; <nl> - return response ; <nl> - } <nl> - <nl> public static Builder builder ( ) { <nl> return new Builder ( ) ; <nl> } <nl> <nl> public static final class Builder { <nl> - private String version ; <nl> + private HttpProtocolVersion version ; <nl> private String content ; <nl> private ImmutableMap < String , String > headers ; <nl> private int status ; <nl> <nl> - public Builder withVersion ( String version ) { <nl> + public Builder withVersion ( HttpProtocolVersion version ) { <nl> this . version = version ; <nl> return this ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java <nl> index 72e6419 . . f50b916 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import java . util . Map ; <nl> <nl> public class MessageFactory { <nl> public static void writeResponse ( FullHttpResponse response , HttpResponse targetHttpResponse ) { <nl> - response . setProtocolVersion ( HttpVersion . valueOf ( targetHttpResponse . getVersion ( ) ) ) ; <nl> + response . setProtocolVersion ( HttpVersion . valueOf ( targetHttpResponse . getVersion ( ) . toString ( ) ) ) ; <nl> response . setStatus ( HttpResponseStatus . valueOf ( targetHttpResponse . getStatus ( ) ) ) ; <nl> for ( Map . Entry < String , String > entry : targetHttpResponse . getHeaders ( ) . entrySet ( ) ) { <nl> response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index 08b6b01 . . 1d98429 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import com . github . dreamhead . moco . HttpResponse ; 
 import com . google . common . collect . ImmutableMap ; 
 import io . netty . buffer . ByteBufInputStream ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 + import io . netty . handler . codec . http . HttpVersion ; 
 
 import java . util . Map ; 
 
 @ @ - 35 , 7 + 36 , 7 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo 
 } 
 
 return builder ( ) 
 - . withVersion ( HttpProtocolVersion . versionOf ( response . protocolVersion ( ) . text ( ) ) ) 
 + . withVersion ( toHttpProtocolVersion ( response . protocolVersion ( ) ) ) 
 . withStatus ( response . status ( ) . code ( ) ) 
 . withHeaders ( headerBuilder . build ( ) ) 
 . withContent ( content ( ) 
 @ @ - 44 , 6 + 45 , 10 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo 
 . build ( ) ; 
 } 
 
 + private static HttpProtocolVersion toHttpProtocolVersion ( final HttpVersion httpVersion ) { 
 + return HttpProtocolVersion . versionOf ( httpVersion . text ( ) ) ; 
 + } 
 + 
 public static Builder builder ( ) { 
 return new Builder ( ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java 
 index 44eed11 . . 516dcbe 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpResponse . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package com . github . dreamhead . moco ; 
 import com . google . common . collect . ImmutableMap ; 
 
 public interface HttpResponse { 
 - String getVersion ( ) ; 
 + HttpProtocolVersion getVersion ( ) ; 
 
 String getContent ( ) ; 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index bcf81f9 . . 36b08a0 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 1 , 12 + 1 , 10 @ @ 
 package com . github . dreamhead . moco . model ; 
 
 import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 + import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . github . dreamhead . moco . HttpResponse ; 
 import com . google . common . collect . ImmutableMap ; 
 - import io . netty . handler . codec . http . DefaultFullHttpResponse ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 - import io . netty . handler . codec . http . HttpResponseStatus ; 
 - import io . netty . handler . codec . http . HttpVersion ; 
 
 import java . nio . charset . Charset ; 
 import java . util . Map ; 
 @ @ - 15 , 19 + 13 , 19 @ @ import static com . google . common . collect . ImmutableMap . copyOf ; 
 
 @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) 
 public class DefaultHttpResponse implements HttpResponse { 
 - private final String version ; 
 + private final HttpProtocolVersion version ; 
 private final String content ; 
 private final ImmutableMap < String , String > headers ; 
 private final int status ; 
 
 - public DefaultHttpResponse ( String version , int status , ImmutableMap < String , String > headers , String content ) { 
 + public DefaultHttpResponse ( HttpProtocolVersion version , int status , ImmutableMap < String , String > headers , String content ) { 
 this . version = version ; 
 this . headers = headers ; 
 this . content = content ; 
 this . status = status ; 
 } 
 
 - public String getVersion ( ) { 
 + public HttpProtocolVersion getVersion ( ) { 
 return version ; 
 } 
 
 @ @ - 50 , 34 + 48 , 24 @ @ public class DefaultHttpResponse implements HttpResponse { 
 } 
 
 return builder ( ) 
 - . withVersion ( response . getProtocolVersion ( ) . text ( ) ) 
 + . withVersion ( HttpProtocolVersion . versionOf ( response . getProtocolVersion ( ) . text ( ) ) ) 
 . withStatus ( response . getStatus ( ) . code ( ) ) 
 . withHeaders ( headerBuilder . build ( ) ) 
 . withContent ( response . content ( ) . toString ( Charset . defaultCharset ( ) ) ) 
 . build ( ) ; 
 } 
 
 - public FullHttpResponse toFullHttpResponse ( ) { 
 - FullHttpResponse response = new DefaultFullHttpResponse ( HttpVersion . valueOf ( version ) , HttpResponseStatus . valueOf ( status ) ) ; 
 - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { 
 - response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 - } 
 - 
 - response . content ( ) . writeBytes ( content . getBytes ( ) ) ; 
 - return response ; 
 - } 
 - 
 public static Builder builder ( ) { 
 return new Builder ( ) ; 
 } 
 
 public static final class Builder { 
 - private String version ; 
 + private HttpProtocolVersion version ; 
 private String content ; 
 private ImmutableMap < String , String > headers ; 
 private int status ; 
 
 - public Builder withVersion ( String version ) { 
 + public Builder withVersion ( HttpProtocolVersion version ) { 
 this . version = version ; 
 return this ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java 
 index 72e6419 . . f50b916 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java 
 @ @ - 9 , 7 + 9 , 7 @ @ import java . util . Map ; 
 
 public class MessageFactory { 
 public static void writeResponse ( FullHttpResponse response , HttpResponse targetHttpResponse ) { 
 - response . setProtocolVersion ( HttpVersion . valueOf ( targetHttpResponse . getVersion ( ) ) ) ; 
 + response . setProtocolVersion ( HttpVersion . valueOf ( targetHttpResponse . getVersion ( ) . toString ( ) ) ) ; 
 response . setStatus ( HttpResponseStatus . valueOf ( targetHttpResponse . getStatus ( ) ) ) ; 
 for ( Map . Entry < String , String > entry : targetHttpResponse . getHeaders ( ) . entrySet ( ) ) { 
 response . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ;
