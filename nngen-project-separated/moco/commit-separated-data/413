BLEU SCORE: 0.31947155212313627

TEST MSG: introduced domain cookie option
GENERATED MSG: added secure cookie option

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> index 7a9082d . . c7dc7d5 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . cookie . DomainCookieOption ; <nl> import com . github . dreamhead . moco . cookie . HttpOnlyOption ; <nl> import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; <nl> import com . github . dreamhead . moco . cookie . PathCookieOption ; <nl> @ @ - 10 , 6 + 11 , 10 @ @ public abstract class CookieOption { <nl> return new PathCookieOption ( path ) ; <nl> } <nl> <nl> + public static CookieOption domain ( final String domain ) { <nl> + return new DomainCookieOption ( domain ) ; <nl> + } <nl> + <nl> public static CookieOption maxAge ( final long maxAge ) { <nl> return new MaxAgeCookieOption ( maxAge ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . 4a01b66 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public class DomainCookieOption extends ActualCookieOption { <nl> + private final String domain ; <nl> + <nl> + public DomainCookieOption ( final String domain ) { <nl> + this . domain = domain ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + public void visit ( final Cookie cookie ) { <nl> + cookie . setDomain ( this . domain ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index 8bbf97c . . e024e8f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> + import static com . github . dreamhead . moco . CookieOption . domain ; <nl> import static com . github . dreamhead . moco . CookieOption . httpOnly ; <nl> import static com . github . dreamhead . moco . CookieOption . maxAge ; <nl> import static com . github . dreamhead . moco . CookieOption . path ; <nl> @ @ - 133 , 6 + 134 , 21 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws Exception { <nl> + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ redirect _ to _ expected _ url ( ) throws Exception { <nl> server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; <nl> server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> index 43a594b . . c0ca618 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; <nl> import com . github . dreamhead . moco . cookie . PathCookieOption ; <nl> + import com . github . dreamhead . moco . cookie . SecureCookieOption ; <nl> <nl> public abstract class CookieOption { <nl> public static CookieOption path ( final String path ) { <nl> @ @ - 11 , 4 + 12 , 8 @ @ public abstract class CookieOption { <nl> public static CookieOption maxAge ( final long maxAge ) { <nl> return new MaxAgeCookieOption ( maxAge ) ; <nl> } <nl> + <nl> + public static CookieOption secure ( final boolean secure ) { <nl> + return new SecureCookieOption ( secure ) ; <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java <nl> new file mode 100644 <nl> index 0000000 . . f73f012 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + package com . github . dreamhead . moco . cookie ; <nl> + <nl> + import io . netty . handler . codec . http . cookie . Cookie ; <nl> + <nl> + public class SecureCookieOption extends ActualCookieOption { <nl> + private final boolean secure ; <nl> + <nl> + public SecureCookieOption ( final boolean secure ) { <nl> + this . secure = secure ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visit ( final Cookie cookie ) { <nl> + cookie . setSecure ( this . secure ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> index 0209426 . . 35a044c 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; <nl> <nl> import static com . github . dreamhead . moco . CookieOption . maxAge ; <nl> import static com . github . dreamhead . moco . CookieOption . path ; <nl> + import static com . github . dreamhead . moco . CookieOption . secure ; <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> @ @ - 94 , 6 + 95 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ set _ and _ recognize _ cookie _ with _ secure ( ) throws Exception { <nl> + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; <nl> + server . response ( cookie ( " loggedIn " , " true " , secure ( true ) ) , status ( 302 ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws IOException { <nl> + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; <nl> + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; <nl> + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; <nl> + assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ redirect _ to _ expected _ url ( ) throws Exception { <nl> server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; <nl> server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 index 7a9082d . . c7dc7d5 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . cookie . DomainCookieOption ; 
 import com . github . dreamhead . moco . cookie . HttpOnlyOption ; 
 import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; 
 import com . github . dreamhead . moco . cookie . PathCookieOption ; 
 @ @ - 10 , 6 + 11 , 10 @ @ public abstract class CookieOption { 
 return new PathCookieOption ( path ) ; 
 } 
 
 + public static CookieOption domain ( final String domain ) { 
 + return new DomainCookieOption ( domain ) ; 
 + } 
 + 
 public static CookieOption maxAge ( final long maxAge ) { 
 return new MaxAgeCookieOption ( maxAge ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java 
 new file mode 100644 
 index 0000000 . . 4a01b66 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / DomainCookieOption . java 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + package com . github . dreamhead . moco . cookie ; 
 + 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + 
 + public class DomainCookieOption extends ActualCookieOption { 
 + private final String domain ; 
 + 
 + public DomainCookieOption ( final String domain ) { 
 + this . domain = domain ; 
 + } 
 + 
 + 
 + @ Override 
 + public void visit ( final Cookie cookie ) { 
 + cookie . setDomain ( this . domain ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 index 8bbf97c . . e024e8f 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import org . junit . Test ; 
 
 import java . io . IOException ; 
 
 + import static com . github . dreamhead . moco . CookieOption . domain ; 
 import static com . github . dreamhead . moco . CookieOption . httpOnly ; 
 import static com . github . dreamhead . moco . CookieOption . maxAge ; 
 import static com . github . dreamhead . moco . CookieOption . path ; 
 @ @ - 133 , 6 + 134 , 21 @ @ public class MocoWebTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ domain ( ) throws Exception { 
 + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; 
 + server . response ( cookie ( " loggedIn " , " true " , domain ( " github . com " ) ) , status ( 302 ) ) ; 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . domain ( ) , is ( " github . com " ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ redirect _ to _ expected _ url ( ) throws Exception { 
 server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; 
 server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 index 43a594b . . c0ca618 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / CookieOption . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . cookie . MaxAgeCookieOption ; 
 import com . github . dreamhead . moco . cookie . PathCookieOption ; 
 + import com . github . dreamhead . moco . cookie . SecureCookieOption ; 
 
 public abstract class CookieOption { 
 public static CookieOption path ( final String path ) { 
 @ @ - 11 , 4 + 12 , 8 @ @ public abstract class CookieOption { 
 public static CookieOption maxAge ( final long maxAge ) { 
 return new MaxAgeCookieOption ( maxAge ) ; 
 } 
 + 
 + public static CookieOption secure ( final boolean secure ) { 
 + return new SecureCookieOption ( secure ) ; 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java 
 new file mode 100644 
 index 0000000 . . f73f012 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / cookie / SecureCookieOption . java 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + package com . github . dreamhead . moco . cookie ; 
 + 
 + import io . netty . handler . codec . http . cookie . Cookie ; 
 + 
 + public class SecureCookieOption extends ActualCookieOption { 
 + private final boolean secure ; 
 + 
 + public SecureCookieOption ( final boolean secure ) { 
 + this . secure = secure ; 
 + } 
 + 
 + @ Override 
 + public void visit ( final Cookie cookie ) { 
 + cookie . setSecure ( this . secure ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 index 0209426 . . 35a044c 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoWebTest . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import java . io . IOException ; 
 
 import static com . github . dreamhead . moco . CookieOption . maxAge ; 
 import static com . github . dreamhead . moco . CookieOption . path ; 
 + import static com . github . dreamhead . moco . CookieOption . secure ; 
 import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 @ @ - 94 , 6 + 95 , 22 @ @ public class MocoWebTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ set _ and _ recognize _ cookie _ with _ secure ( ) throws Exception { 
 + server . request ( eq ( cookie ( " loggedIn " ) , " true " ) ) . response ( status ( 200 ) ) ; 
 + server . response ( cookie ( " loggedIn " , " true " , secure ( true ) ) , status ( 302 ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws IOException { 
 + org . apache . http . HttpResponse response = helper . getResponse ( root ( ) ) ; 
 + String value = response . getFirstHeader ( HttpHeaders . SET _ COOKIE ) . getValue ( ) ; 
 + Cookie decodeCookie = ClientCookieDecoder . STRICT . decode ( value ) ; 
 + assertThat ( decodeCookie . isSecure ( ) , is ( true ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ redirect _ to _ expected _ url ( ) throws Exception { 
 server . get ( by ( uri ( " / " ) ) ) . response ( " foo " ) ; 
 server . get ( by ( uri ( " / redirectTo " ) ) ) . redirectTo ( root ( ) ) ;
