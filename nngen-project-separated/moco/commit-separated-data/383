BLEU SCORE: 0.0367352656298894

TEST MSG: fixed style check in moco test helper and any certificate accepting trust manager
GENERATED MSG: fixed proguard check

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java <nl> index 780e8d1 . . 57b31f3 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java <nl> @ @ - 5 , 16 + 5 , 18 @ @ import javax . net . ssl . X509TrustManager ; <nl> import java . security . cert . CertificateException ; <nl> import java . security . cert . X509Certificate ; <nl> <nl> - public class AnyCertificateAcceptingTrustManagerFactory { <nl> + public final class AnyCertificateAcceptingTrustManagerFactory { <nl> <nl> private static final TrustManager DUMMY _ TRUST _ MANAGER = new X509TrustManager ( ) { <nl> @ Override <nl> - public void checkClientTrusted ( X509Certificate [ ] x509Certificates , String s ) throws CertificateException { <nl> + public void checkClientTrusted ( final X509Certificate [ ] x509Certificates , final String s ) <nl> + throws CertificateException { <nl> / / always trust <nl> } <nl> <nl> @ Override <nl> - public void checkServerTrusted ( X509Certificate [ ] x509Certificates , String s ) throws CertificateException { <nl> + public void checkServerTrusted ( final X509Certificate [ ] x509Certificates , final String s ) <nl> + throws CertificateException { <nl> / / always trust <nl> } <nl> <nl> @ @ - 27 , 4 + 29 , 7 @ @ public class AnyCertificateAcceptingTrustManagerFactory { <nl> public static TrustManager [ ] getTrustManagers ( ) { <nl> return new TrustManager [ ] { DUMMY _ TRUST _ MANAGER } ; <nl> } <nl> + <nl> + private AnyCertificateAcceptingTrustManagerFactory ( ) { <nl> + } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> index 823b8e0 . . ee563d0 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import static com . google . common . net . HttpHeaders . CONTENT _ TYPE ; <nl> import static com . google . common . net . MediaType . PLAIN _ TEXT _ UTF _ 8 ; <nl> <nl> public class MocoTestHelper { <nl> - private final Executor EXECUTOR ; <nl> + private final Executor executor ; <nl> <nl> public MocoTestHelper ( ) { <nl> / / make fluent HC accept any certificates so we can test HTTPS calls as well <nl> @ @ - 35 , 29 + 35 , 29 @ @ public class MocoTestHelper { <nl> . register ( " https " , new SSLConnectionSocketFactory ( createClientContext ( ) ) ) <nl> . build ( ) ; <nl> HttpClientConnectionManager cm = new PoolingHttpClientConnectionManager ( registry ) ; <nl> - EXECUTOR = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; <nl> + executor = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; <nl> } <nl> <nl> - public String get ( String url ) throws IOException { <nl> + public String get ( final String url ) throws IOException { <nl> return get ( Request . Get ( url ) ) ; <nl> } <nl> <nl> - public byte [ ] getAsBytes ( String url ) throws IOException { <nl> + public byte [ ] getAsBytes ( final String url ) throws IOException { <nl> return getAsBytes ( Request . Get ( url ) ) ; <nl> } <nl> <nl> - public HttpResponse getResponse ( String url ) throws IOException { <nl> + public HttpResponse getResponse ( final String url ) throws IOException { <nl> Request request = Request . Get ( url ) ; <nl> return runRequest ( request ) ; <nl> } <nl> <nl> - public String getWithHeader ( String url , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public String getWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) throws IOException { <nl> Request request = getRequest ( url , headers ) ; <nl> <nl> return get ( request ) ; <nl> } <nl> <nl> - private Request getRequest ( String url , ImmutableMultimap < String , String > headers ) { <nl> + private Request getRequest ( final String url , final ImmutableMultimap < String , String > headers ) { <nl> Request request = Request . Get ( url ) ; <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request = request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> @ @ - 65 , 97 + 65 , 101 @ @ public class MocoTestHelper { <nl> return request ; <nl> } <nl> <nl> - public HttpResponse getResponseWithHeader ( String url , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public HttpResponse getResponseWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) <nl> + throws IOException { <nl> return runRequest ( getRequest ( url , headers ) ) ; <nl> } <nl> <nl> - private HttpResponse runRequest ( Request request ) throws IOException { <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + private HttpResponse runRequest ( final Request request ) throws IOException { <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public String getWithVersion ( String url , HttpVersion version ) throws IOException { <nl> + public String getWithVersion ( final String url , final HttpVersion version ) throws IOException { <nl> return get ( Request . Get ( url ) . version ( version ) ) ; <nl> } <nl> <nl> - private String get ( Request request ) throws IOException { <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + private String get ( final Request request ) throws IOException { <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> - public byte [ ] getAsBytes ( Request request ) throws IOException { <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asBytes ( ) ; <nl> + public byte [ ] getAsBytes ( final Request request ) throws IOException { <nl> + return executor . execute ( request ) . returnContent ( ) . asBytes ( ) ; <nl> } <nl> <nl> - public String postContent ( String url , String postContent ) throws IOException { <nl> + public String postContent ( final String url , final String postContent ) throws IOException { <nl> return postBytes ( url , postContent . getBytes ( ) ) ; <nl> } <nl> <nl> - public String postBytes ( String url , byte [ ] bytes ) throws IOException { <nl> + public String postBytes ( final String url , final byte [ ] bytes ) throws IOException { <nl> Request request = Request . Post ( url ) <nl> . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> . bodyByteArray ( bytes ) ; <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> - public HttpResponse postForResponse ( final String url , String content ) throws IOException { <nl> + public HttpResponse postForResponse ( final String url , final String content ) throws IOException { <nl> return postForResponse ( url , content , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) ; <nl> } <nl> <nl> - public HttpResponse postForResponse ( String url , String content , String contentType ) throws IOException { <nl> + public HttpResponse postForResponse ( final String url , final String content , final String contentType ) <nl> + throws IOException { <nl> Request request = Request . Post ( url ) <nl> . addHeader ( CONTENT _ TYPE , contentType ) <nl> . bodyByteArray ( content . getBytes ( ) ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public HttpResponse putForResponse ( final String url , String content ) throws IOException { <nl> + public HttpResponse putForResponse ( final String url , final String content ) throws IOException { <nl> Request request = Request . Put ( url ) <nl> . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) <nl> . bodyByteArray ( content . getBytes ( ) ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public HttpResponse putForResponseWithHeaders ( final String url , String content , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public HttpResponse putForResponseWithHeaders ( final String url , final String content , <nl> + final ImmutableMultimap < String , String > headers ) throws IOException { <nl> Request request = Request . Put ( url ) <nl> . bodyByteArray ( content . getBytes ( ) ) ; <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> public HttpResponse deleteForResponse ( final String url ) throws IOException { <nl> Request request = Request . Delete ( url ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public HttpResponse deleteForResponseWithHeaders ( final String url , ImmutableMultimap < String , String > headers ) throws IOException { <nl> + public HttpResponse deleteForResponseWithHeaders ( final String url , final ImmutableMultimap < String , String > headers ) <nl> + throws IOException { <nl> Request request = Request . Delete ( url ) ; <nl> for ( Map . Entry < String , String > entry : headers . entries ( ) ) { <nl> request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> public HttpResponse headForResponse ( final String url ) throws IOException { <nl> Request request = Request . Head ( url ) ; <nl> - return EXECUTOR . execute ( request ) . returnResponse ( ) ; <nl> + return executor . execute ( request ) . returnResponse ( ) ; <nl> } <nl> <nl> - public String postStream ( String url , InputStream stream ) throws IOException { <nl> + public String postStream ( final String url , final InputStream stream ) throws IOException { <nl> return postBytes ( url , toByteArray ( stream ) ) ; <nl> } <nl> <nl> - public String postFile ( String url , String file ) throws IOException { <nl> + public String postFile ( final String url , final String file ) throws IOException { <nl> return postStream ( url , Resources . getResource ( file ) . openStream ( ) ) ; <nl> } <nl> <nl> - public int getForStatus ( String url ) throws IOException { <nl> + public int getForStatus ( final String url ) throws IOException { <nl> return runRequest ( Request . Get ( url ) ) . getStatusLine ( ) . getStatusCode ( ) ; <nl> } <nl> <nl> - public String patchForResponse ( final String url , String content ) throws IOException { <nl> + public String patchForResponse ( final String url , final String content ) throws IOException { <nl> Request request = Request . Patch ( url ) . bodyByteArray ( content . getBytes ( ) , ContentType . DEFAULT _ TEXT ) ; <nl> - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; <nl> } <nl> <nl> private static final String PROTOCOL = " TLS " ;
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index d8c698f . . 8f62694 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 228 , 7 + 228 , 7 @ @ project ( ' : moco - runner ' ) { <nl> <nl> task proguardCheck ( type : Test , dependsOn : proguard ) { <nl> testLogging { exceptionFormat " full " } <nl> - classpath = classpath - files ( sourceSets . main . output . classesDir ) - files ( configurations . runtime ) + files ( configurations . testCompile ) + files ( proguard . outputs . files . singleFile ) <nl> + classpath = classpath - files ( sourceSets . main . output . classesDir ) - files ( configurations . runtime ) + files ( proguard . outputs . files . singleFile ) + files ( configurations . testCompile . findAll { it . name . startsWith ( ' hamcrest - ' ) } ) <nl> } <nl> <nl> uploadArchives . dependsOn proguardCheck <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> index ae50e52 . . d676d30 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java <nl> @ @ - 1 , 53 + 1 , 47 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> import com . github . dreamhead . moco . util . Idles ; <nl> - import org . junit . Before ; <nl> + import com . google . common . io . Files ; <nl> + import org . junit . Rule ; <nl> import org . junit . Test ; <nl> + import org . junit . rules . TemporaryFolder ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . PrintStream ; <nl> + import java . nio . charset . Charset ; <nl> <nl> - import static com . github . dreamhead . moco . Moco . * ; <nl> - import static com . github . dreamhead . moco . MocoRequestHit . once ; <nl> - import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; <nl> - import static com . github . dreamhead . moco . Runner . running ; <nl> + import static org . hamcrest . CoreMatchers . containsString ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { <nl> private static final int IDLE = 1200 ; <nl> <nl> - private RequestHit hit ; <nl> - private HttpServer server ; <nl> - <nl> - @ Before <nl> - public void setup ( ) { <nl> - hit = requestHit ( ) ; <nl> - server = httpserver ( 2587 , hit ) ; <nl> - server . request ( by ( uri ( " / target " ) ) ) . response ( " 0XCAFEBABE " ) ; <nl> - } <nl> + @ Rule <nl> + public TemporaryFolder folder = new TemporaryFolder ( ) ; <nl> <nl> @ Test <nl> - public void should _ fire _ event ( ) throws Exception { <nl> - running ( server , new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) throws Exception { <nl> - runWithConfiguration ( " event . json " ) ; <nl> - assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " post _ foo " ) ) ; <nl> - Idles . idle ( IDLE ) ; <nl> - } <nl> - } ) ; <nl> - hit . verify ( by ( uri ( " / target " ) ) , once ( ) ) ; <nl> + public void should _ fire _ event ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " post _ foo " ) ) ; <nl> + Idles . idle ( IDLE ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> <nl> @ Test <nl> - public void should _ fire _ get _ event ( ) throws Exception { <nl> - running ( server , new Runnable ( ) { <nl> - @ Override <nl> - public void run ( ) throws Exception { <nl> - runWithConfiguration ( " event . json " ) ; <nl> - assertThat ( helper . get ( remoteUrl ( " / get _ event " ) ) , is ( " get _ foo " ) ) ; <nl> - Idles . idle ( IDLE ) ; <nl> - } <nl> - } ) ; <nl> - hit . verify ( by ( uri ( " / target " ) ) , once ( ) ) ; <nl> + public void should _ fire _ get _ event ( ) throws IOException { <nl> + runWithConfiguration ( " event . json " ) ; <nl> + File file = folder . newFile ( ) ; <nl> + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / get _ event " ) ) , is ( " get _ foo " ) ) ; <nl> + Idles . idle ( IDLE ) ; <nl> + <nl> + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; <nl> } <nl> } <nl> diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json <nl> index daa350f . . d9176ec 100644 <nl> - - - a / moco - runner / src / test / resources / event . json <nl> + + + b / moco - runner / src / test / resources / event . json <nl> @ @ - 11 , 7 + 11 , 7 @ @ <nl> " async " : " true " , <nl> " latency " : 500 , <nl> " post " : { <nl> - " url " : " http : / / localhost : 2587 / target " , <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> " content " : " content " <nl> } <nl> } <nl> @ @ - 30 , 9 + 30 , 18 @ @ <nl> " async " : " true " , <nl> " latency " : 1000 , <nl> " get " : { <nl> - " url " : " http : / / localhost : 2587 / target " <nl> + " url " : " http : / / localhost : 12306 / target " <nl> } <nl> } <nl> } <nl> + } , <nl> + <nl> + { <nl> + " request " : { <nl> + " uri " : " / target " <nl> + } , <nl> + " response " : { <nl> + " text " : " 0XCAFEBABE " <nl> + } <nl> } <nl> ] <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java 
 index 780e8d1 . . 57b31f3 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / AnyCertificateAcceptingTrustManagerFactory . java 
 @ @ - 5 , 16 + 5 , 18 @ @ import javax . net . ssl . X509TrustManager ; 
 import java . security . cert . CertificateException ; 
 import java . security . cert . X509Certificate ; 
 
 - public class AnyCertificateAcceptingTrustManagerFactory { 
 + public final class AnyCertificateAcceptingTrustManagerFactory { 
 
 private static final TrustManager DUMMY _ TRUST _ MANAGER = new X509TrustManager ( ) { 
 @ Override 
 - public void checkClientTrusted ( X509Certificate [ ] x509Certificates , String s ) throws CertificateException { 
 + public void checkClientTrusted ( final X509Certificate [ ] x509Certificates , final String s ) 
 + throws CertificateException { 
 / / always trust 
 } 
 
 @ Override 
 - public void checkServerTrusted ( X509Certificate [ ] x509Certificates , String s ) throws CertificateException { 
 + public void checkServerTrusted ( final X509Certificate [ ] x509Certificates , final String s ) 
 + throws CertificateException { 
 / / always trust 
 } 
 
 @ @ - 27 , 4 + 29 , 7 @ @ public class AnyCertificateAcceptingTrustManagerFactory { 
 public static TrustManager [ ] getTrustManagers ( ) { 
 return new TrustManager [ ] { DUMMY _ TRUST _ MANAGER } ; 
 } 
 + 
 + private AnyCertificateAcceptingTrustManagerFactory ( ) { 
 + } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java 
 index 823b8e0 . . ee563d0 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / helper / MocoTestHelper . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import static com . google . common . net . HttpHeaders . CONTENT _ TYPE ; 
 import static com . google . common . net . MediaType . PLAIN _ TEXT _ UTF _ 8 ; 
 
 public class MocoTestHelper { 
 - private final Executor EXECUTOR ; 
 + private final Executor executor ; 
 
 public MocoTestHelper ( ) { 
 / / make fluent HC accept any certificates so we can test HTTPS calls as well 
 @ @ - 35 , 29 + 35 , 29 @ @ public class MocoTestHelper { 
 . register ( " https " , new SSLConnectionSocketFactory ( createClientContext ( ) ) ) 
 . build ( ) ; 
 HttpClientConnectionManager cm = new PoolingHttpClientConnectionManager ( registry ) ; 
 - EXECUTOR = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; 
 + executor = Executor . newInstance ( HttpClients . custom ( ) . setConnectionManager ( cm ) . build ( ) ) ; 
 } 
 
 - public String get ( String url ) throws IOException { 
 + public String get ( final String url ) throws IOException { 
 return get ( Request . Get ( url ) ) ; 
 } 
 
 - public byte [ ] getAsBytes ( String url ) throws IOException { 
 + public byte [ ] getAsBytes ( final String url ) throws IOException { 
 return getAsBytes ( Request . Get ( url ) ) ; 
 } 
 
 - public HttpResponse getResponse ( String url ) throws IOException { 
 + public HttpResponse getResponse ( final String url ) throws IOException { 
 Request request = Request . Get ( url ) ; 
 return runRequest ( request ) ; 
 } 
 
 - public String getWithHeader ( String url , ImmutableMultimap < String , String > headers ) throws IOException { 
 + public String getWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) throws IOException { 
 Request request = getRequest ( url , headers ) ; 
 
 return get ( request ) ; 
 } 
 
 - private Request getRequest ( String url , ImmutableMultimap < String , String > headers ) { 
 + private Request getRequest ( final String url , final ImmutableMultimap < String , String > headers ) { 
 Request request = Request . Get ( url ) ; 
 for ( Map . Entry < String , String > entry : headers . entries ( ) ) { 
 request = request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 @ @ - 65 , 97 + 65 , 101 @ @ public class MocoTestHelper { 
 return request ; 
 } 
 
 - public HttpResponse getResponseWithHeader ( String url , ImmutableMultimap < String , String > headers ) throws IOException { 
 + public HttpResponse getResponseWithHeader ( final String url , final ImmutableMultimap < String , String > headers ) 
 + throws IOException { 
 return runRequest ( getRequest ( url , headers ) ) ; 
 } 
 
 - private HttpResponse runRequest ( Request request ) throws IOException { 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + private HttpResponse runRequest ( final Request request ) throws IOException { 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 - public String getWithVersion ( String url , HttpVersion version ) throws IOException { 
 + public String getWithVersion ( final String url , final HttpVersion version ) throws IOException { 
 return get ( Request . Get ( url ) . version ( version ) ) ; 
 } 
 
 - private String get ( Request request ) throws IOException { 
 - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; 
 + private String get ( final Request request ) throws IOException { 
 + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; 
 } 
 
 - public byte [ ] getAsBytes ( Request request ) throws IOException { 
 - return EXECUTOR . execute ( request ) . returnContent ( ) . asBytes ( ) ; 
 + public byte [ ] getAsBytes ( final Request request ) throws IOException { 
 + return executor . execute ( request ) . returnContent ( ) . asBytes ( ) ; 
 } 
 
 - public String postContent ( String url , String postContent ) throws IOException { 
 + public String postContent ( final String url , final String postContent ) throws IOException { 
 return postBytes ( url , postContent . getBytes ( ) ) ; 
 } 
 
 - public String postBytes ( String url , byte [ ] bytes ) throws IOException { 
 + public String postBytes ( final String url , final byte [ ] bytes ) throws IOException { 
 Request request = Request . Post ( url ) 
 . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) 
 . bodyByteArray ( bytes ) ; 
 - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; 
 + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; 
 } 
 
 - public HttpResponse postForResponse ( final String url , String content ) throws IOException { 
 + public HttpResponse postForResponse ( final String url , final String content ) throws IOException { 
 return postForResponse ( url , content , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) ; 
 } 
 
 - public HttpResponse postForResponse ( String url , String content , String contentType ) throws IOException { 
 + public HttpResponse postForResponse ( final String url , final String content , final String contentType ) 
 + throws IOException { 
 Request request = Request . Post ( url ) 
 . addHeader ( CONTENT _ TYPE , contentType ) 
 . bodyByteArray ( content . getBytes ( ) ) ; 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 - public HttpResponse putForResponse ( final String url , String content ) throws IOException { 
 + public HttpResponse putForResponse ( final String url , final String content ) throws IOException { 
 Request request = Request . Put ( url ) 
 . addHeader ( CONTENT _ TYPE , PLAIN _ TEXT _ UTF _ 8 . toString ( ) ) 
 . bodyByteArray ( content . getBytes ( ) ) ; 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 - public HttpResponse putForResponseWithHeaders ( final String url , String content , ImmutableMultimap < String , String > headers ) throws IOException { 
 + public HttpResponse putForResponseWithHeaders ( final String url , final String content , 
 + final ImmutableMultimap < String , String > headers ) throws IOException { 
 Request request = Request . Put ( url ) 
 . bodyByteArray ( content . getBytes ( ) ) ; 
 for ( Map . Entry < String , String > entry : headers . entries ( ) ) { 
 request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 public HttpResponse deleteForResponse ( final String url ) throws IOException { 
 Request request = Request . Delete ( url ) ; 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 - public HttpResponse deleteForResponseWithHeaders ( final String url , ImmutableMultimap < String , String > headers ) throws IOException { 
 + public HttpResponse deleteForResponseWithHeaders ( final String url , final ImmutableMultimap < String , String > headers ) 
 + throws IOException { 
 Request request = Request . Delete ( url ) ; 
 for ( Map . Entry < String , String > entry : headers . entries ( ) ) { 
 request . addHeader ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 public HttpResponse headForResponse ( final String url ) throws IOException { 
 Request request = Request . Head ( url ) ; 
 - return EXECUTOR . execute ( request ) . returnResponse ( ) ; 
 + return executor . execute ( request ) . returnResponse ( ) ; 
 } 
 
 - public String postStream ( String url , InputStream stream ) throws IOException { 
 + public String postStream ( final String url , final InputStream stream ) throws IOException { 
 return postBytes ( url , toByteArray ( stream ) ) ; 
 } 
 
 - public String postFile ( String url , String file ) throws IOException { 
 + public String postFile ( final String url , final String file ) throws IOException { 
 return postStream ( url , Resources . getResource ( file ) . openStream ( ) ) ; 
 } 
 
 - public int getForStatus ( String url ) throws IOException { 
 + public int getForStatus ( final String url ) throws IOException { 
 return runRequest ( Request . Get ( url ) ) . getStatusLine ( ) . getStatusCode ( ) ; 
 } 
 
 - public String patchForResponse ( final String url , String content ) throws IOException { 
 + public String patchForResponse ( final String url , final String content ) throws IOException { 
 Request request = Request . Patch ( url ) . bodyByteArray ( content . getBytes ( ) , ContentType . DEFAULT _ TEXT ) ; 
 - return EXECUTOR . execute ( request ) . returnContent ( ) . asString ( ) ; 
 + return executor . execute ( request ) . returnContent ( ) . asString ( ) ; 
 } 
 
 private static final String PROTOCOL = " TLS " ;

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index d8c698f . . 8f62694 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 228 , 7 + 228 , 7 @ @ project ( ' : moco - runner ' ) { 
 
 task proguardCheck ( type : Test , dependsOn : proguard ) { 
 testLogging { exceptionFormat " full " } 
 - classpath = classpath - files ( sourceSets . main . output . classesDir ) - files ( configurations . runtime ) + files ( configurations . testCompile ) + files ( proguard . outputs . files . singleFile ) 
 + classpath = classpath - files ( sourceSets . main . output . classesDir ) - files ( configurations . runtime ) + files ( proguard . outputs . files . singleFile ) + files ( configurations . testCompile . findAll { it . name . startsWith ( ' hamcrest - ' ) } ) 
 } 
 
 uploadArchives . dependsOn proguardCheck 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 index ae50e52 . . d676d30 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoEventStandaloneTest . java 
 @ @ - 1 , 53 + 1 , 47 @ @ 
 package com . github . dreamhead . moco ; 
 
 import com . github . dreamhead . moco . util . Idles ; 
 - import org . junit . Before ; 
 + import com . google . common . io . Files ; 
 + import org . junit . Rule ; 
 import org . junit . Test ; 
 + import org . junit . rules . TemporaryFolder ; 
 + 
 + import java . io . File ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . PrintStream ; 
 + import java . nio . charset . Charset ; 
 
 - import static com . github . dreamhead . moco . Moco . * ; 
 - import static com . github . dreamhead . moco . MocoRequestHit . once ; 
 - import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; 
 import static com . github . dreamhead . moco . RemoteTestUtils . remoteUrl ; 
 - import static com . github . dreamhead . moco . Runner . running ; 
 + import static org . hamcrest . CoreMatchers . containsString ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 public class MocoEventStandaloneTest extends AbstractMocoStandaloneTest { 
 private static final int IDLE = 1200 ; 
 
 - private RequestHit hit ; 
 - private HttpServer server ; 
 - 
 - @ Before 
 - public void setup ( ) { 
 - hit = requestHit ( ) ; 
 - server = httpserver ( 2587 , hit ) ; 
 - server . request ( by ( uri ( " / target " ) ) ) . response ( " 0XCAFEBABE " ) ; 
 - } 
 + @ Rule 
 + public TemporaryFolder folder = new TemporaryFolder ( ) ; 
 
 @ Test 
 - public void should _ fire _ event ( ) throws Exception { 
 - running ( server , new Runnable ( ) { 
 - @ Override 
 - public void run ( ) throws Exception { 
 - runWithConfiguration ( " event . json " ) ; 
 - assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " post _ foo " ) ) ; 
 - Idles . idle ( IDLE ) ; 
 - } 
 - } ) ; 
 - hit . verify ( by ( uri ( " / target " ) ) , once ( ) ) ; 
 + public void should _ fire _ event ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " post _ foo " ) ) ; 
 + Idles . idle ( IDLE ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 
 @ Test 
 - public void should _ fire _ get _ event ( ) throws Exception { 
 - running ( server , new Runnable ( ) { 
 - @ Override 
 - public void run ( ) throws Exception { 
 - runWithConfiguration ( " event . json " ) ; 
 - assertThat ( helper . get ( remoteUrl ( " / get _ event " ) ) , is ( " get _ foo " ) ) ; 
 - Idles . idle ( IDLE ) ; 
 - } 
 - } ) ; 
 - hit . verify ( by ( uri ( " / target " ) ) , once ( ) ) ; 
 + public void should _ fire _ get _ event ( ) throws IOException { 
 + runWithConfiguration ( " event . json " ) ; 
 + File file = folder . newFile ( ) ; 
 + System . setOut ( new PrintStream ( new FileOutputStream ( file ) ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / get _ event " ) ) , is ( " get _ foo " ) ) ; 
 + Idles . idle ( IDLE ) ; 
 + 
 + assertThat ( Files . toString ( file , Charset . defaultCharset ( ) ) , containsString ( " 0XCAFEBABE " ) ) ; 
 } 
 } 
 diff - - git a / moco - runner / src / test / resources / event . json b / moco - runner / src / test / resources / event . json 
 index daa350f . . d9176ec 100644 
 - - - a / moco - runner / src / test / resources / event . json 
 + + + b / moco - runner / src / test / resources / event . json 
 @ @ - 11 , 7 + 11 , 7 @ @ 
 " async " : " true " , 
 " latency " : 500 , 
 " post " : { 
 - " url " : " http : / / localhost : 2587 / target " , 
 + " url " : " http : / / localhost : 12306 / target " , 
 " content " : " content " 
 } 
 } 
 @ @ - 30 , 9 + 30 , 18 @ @ 
 " async " : " true " , 
 " latency " : 1000 , 
 " get " : { 
 - " url " : " http : / / localhost : 2587 / target " 
 + " url " : " http : / / localhost : 12306 / target " 
 } 
 } 
 } 
 + } , 
 + 
 + { 
 + " request " : { 
 + " uri " : " / target " 
 + } , 
 + " response " : { 
 + " text " : " 0XCAFEBABE " 
 + } 
 } 
 ] 
 \ No newline at end of file
