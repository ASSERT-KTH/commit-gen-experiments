BLEU SCORE: 0.16233395773754944

TEST MSG: added rest server with many monitors
GENERATED MSG: introduced rest server

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index a018cd4 . . 5b9bc49 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import com . github . dreamhead . moco . handler . failover . FailoverStrategy ; <nl> import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; <nl> import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> import com . github . dreamhead . moco . internal . ActualSocketServer ; <nl> + import com . github . dreamhead . moco . internal . ApiUtils ; <nl> import com . github . dreamhead . moco . matcher . AndRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . ContainMatcher ; <nl> import com . github . dreamhead . moco . matcher . EndsWithMatcher ; <nl> @ @ - 38 , 7 + 39 , 6 @ @ import com . github . dreamhead . moco . matcher . NotRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . OrRequestMatcher ; <nl> import com . github . dreamhead . moco . matcher . StartsWithMatcher ; <nl> import com . github . dreamhead . moco . matcher . XmlRequestMatcher ; <nl> - import com . github . dreamhead . moco . monitor . CompositeMonitor ; <nl> import com . github . dreamhead . moco . monitor . DefaultLogFormatter ; <nl> import com . github . dreamhead . moco . monitor . FileLogWriter ; <nl> import com . github . dreamhead . moco . monitor . LogMonitor ; <nl> @ @ - 48 , 14 + 48 , 11 @ @ import com . github . dreamhead . moco . procedure . LatencyProcedure ; <nl> import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> - import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . github . dreamhead . moco . util . Jsons ; <nl> import com . github . dreamhead . moco . util . URLs ; <nl> - import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . FluentIterable ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Maps ; <nl> import com . google . common . net . HttpHeaders ; <nl> <nl> import java . io . File ; <nl> @ @ - 78 , 7 + 75 , 6 @ @ import static com . google . common . base . Optional . of ; <nl> import static com . google . common . base . Preconditions . checkArgument ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> - import static com . google . common . collect . Maps . transformEntries ; <nl> import static com . google . common . net . HttpHeaders . SET _ COOKIE ; <nl> import static java . lang . String . format ; <nl> <nl> @ @ - 96 , 18 + 92 , 7 @ @ public final class Moco { <nl> <nl> public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> - return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> - } <nl> - <nl> - private static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> - MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; <nl> - targetMonitors [ 0 ] = checkNotNull ( monitor , " Monitor should not be null " ) ; <nl> - targetMonitors [ 1 ] = checkNotNull ( monitor2 , " Monitor should not be null " ) ; <nl> - if ( monitors . length > 0 ) { <nl> - System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; <nl> - } <nl> - <nl> - return new CompositeMonitor ( targetMonitors ) ; <nl> + return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> public static HttpServer httpServer ( final MocoConfig . . . configs ) { <nl> @ @ - 143 , 7 + 128 , 7 @ @ public final class Moco { <nl> public static HttpServer httpsServer ( final int port , final HttpsCertificate certificate , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> return ActualHttpServer . createHttpsServerWithMonitor ( of ( port ) , checkNotNull ( certificate , " Certificate should not be null " ) , <nl> - mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> + ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> public static SocketServer socketServer ( ) { <nl> @ @ - 162 , 7 + 147 , 7 @ @ public final class Moco { <nl> <nl> public static SocketServer socketServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> - return ActualSocketServer . createServerWithMonitor ( of ( port ) , mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> + return ActualSocketServer . createServerWithMonitor ( of ( port ) , ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> } <nl> <nl> <nl> @ @ - 398 , 12 + 383 , 12 @ @ public final class Moco { <nl> <nl> public static ResponseHandler seq ( final String . . . contents ) { <nl> checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> - return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) ) ; <nl> + return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( ApiUtils . textToResource ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final Resource . . . contents ) { <nl> checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; <nl> - return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; <nl> + return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( ApiUtils . resourceToResourceHandler ( ) ) ) ; <nl> } <nl> <nl> public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { <nl> @ @ - 572 , 7 + 557 , 7 @ @ public final class Moco { <nl> <nl> public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> return templateResource ( checkNotNull ( template , " Template should not be null " ) , <nl> - toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> + ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; <nl> } <nl> <nl> public static RequestExtractor < Object > var ( final Object text ) { <nl> @ @ - 621 , 38 + 606 , 6 @ @ public final class Moco { <nl> with ( checkNotNull ( resource , " Resource should not be null " ) ) ) ; <nl> } <nl> <nl> - private static Function < String , ResponseHandler > textToResource ( ) { <nl> - return new Function < String , ResponseHandler > ( ) { <nl> - @ Override <nl> - public ResponseHandler apply ( final String content ) { <nl> - return with ( text ( content ) ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private static Function < Resource , ResponseHandler > resourceToResourceHandler ( ) { <nl> - return new Function < Resource , ResponseHandler > ( ) { <nl> - @ Override <nl> - public ResponseHandler apply ( final Resource content ) { <nl> - return with ( content ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> - return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> - } <nl> - <nl> - private static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { <nl> - return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { <nl> - @ Override <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - public Variable transformEntry ( final String key , final RequestExtractor < ? > value ) { <nl> - return new ExtractorVariable ( value ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> private Moco ( ) { <nl> } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> index 6af7705 . . 0e86d04 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> import com . github . dreamhead . moco . monitor . QuietMonitor ; <nl> import com . github . dreamhead . moco . rest . ActualRestServer ; <nl> import com . github . dreamhead . moco . rest . RestIdMatchers ; <nl> @ @ - 7 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . rest . builder . ActualSubResourceSettingBuilder ; <nl> import com . github . dreamhead . moco . rest . builder . SubResourceSettingBuilder ; <nl> import com . google . common . base . Optional ; <nl> <nl> + import static com . github . dreamhead . moco . internal . ApiUtils . mergeMonitor ; <nl> import static com . github . dreamhead . moco . rest . RestIdMatchers . eq ; <nl> import static com . github . dreamhead . moco . rest . RestIds . checkId ; <nl> import static com . github . dreamhead . moco . rest . builder . RestSettingBuilders . all ; <nl> @ @ - 29 , 6 + 31 , 12 @ @ public final class MocoRest { <nl> checkNotNull ( monitor , " Monitor should not be null " ) , configs ) ; <nl> } <nl> <nl> + public static RestServer restServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { <nl> + checkArgument ( port > 0 , " Port must be greater than zero " ) ; <nl> + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , <nl> + mergeMonitor ( monitor , monitor2 , monitors ) ) ; <nl> + } <nl> + <nl> public static RestIdMatcher anyId ( ) { <nl> return RestIdMatchers . anyId ( ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> new file mode 100644 <nl> index 0000000 . . 920a773 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + package com . github . dreamhead . moco . internal ; <nl> + <nl> + import com . github . dreamhead . moco . Moco ; <nl> + import com . github . dreamhead . moco . MocoMonitor ; <nl> + import com . github . dreamhead . moco . RequestExtractor ; <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + import com . github . dreamhead . moco . monitor . CompositeMonitor ; <nl> + import com . github . dreamhead . moco . resource . Resource ; <nl> + import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> + import com . github . dreamhead . moco . resource . reader . Variable ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + import static com . google . common . collect . Maps . transformEntries ; <nl> + <nl> + public class ApiUtils { <nl> + public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { <nl> + MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; <nl> + targetMonitors [ 0 ] = checkNotNull ( monitor , " Monitor should not be null " ) ; <nl> + targetMonitors [ 1 ] = checkNotNull ( monitor2 , " Monitor should not be null " ) ; <nl> + if ( monitors . length > 0 ) { <nl> + System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; <nl> + } <nl> + <nl> + return new CompositeMonitor ( targetMonitors ) ; <nl> + } <nl> + <nl> + public static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { <nl> + return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { <nl> + @ Override <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public Variable transformEntry ( final String key , final RequestExtractor < ? > value ) { <nl> + return new ExtractorVariable ( value ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { <nl> + return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; <nl> + } <nl> + <nl> + public static Function < String , ResponseHandler > textToResource ( ) { <nl> + return new Function < String , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final String content ) { <nl> + return Moco . with ( Moco . text ( content ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + public static Function < Resource , ResponseHandler > resourceToResourceHandler ( ) { <nl> + return new Function < Resource , ResponseHandler > ( ) { <nl> + @ Override <nl> + public ResponseHandler apply ( final Resource content ) { <nl> + return Moco . with ( content ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private ApiUtils ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> index 595ae55 . . d697dc6 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class XmlRequestMatcher extends AbstractRequestMatcher { <nl> } <nl> } <nl> <nl> - private Document extractDocument ( InputSource inputSource , DocumentBuilder documentBuilder ) throws SAXException { <nl> + private Document extractDocument ( final InputSource inputSource , final DocumentBuilder documentBuilder ) throws SAXException { <nl> try { <nl> Document document = documentBuilder . parse ( inputSource ) ; <nl> document . normalizeDocument ( ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index a149a56 . . f9254a3 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 20 , 15 + 20 , 20 @ @ import java . io . PrintStream ; <nl> import java . nio . charset . Charset ; <nl> import java . util . List ; <nl> <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . context ; <nl> import static com . github . dreamhead . moco . Moco . eq ; <nl> import static com . github . dreamhead . moco . Moco . header ; <nl> + import static com . github . dreamhead . moco . Moco . httpServer ; <nl> import static com . github . dreamhead . moco . Moco . log ; <nl> import static com . github . dreamhead . moco . Moco . query ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> import static com . github . dreamhead . moco . Moco . toJson ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; <nl> + import static com . github . dreamhead . moco . MocoRequestHit . times ; <nl> import static com . github . dreamhead . moco . MocoRest . anyId ; <nl> import static com . github . dreamhead . moco . MocoRest . delete ; <nl> import static com . github . dreamhead . moco . MocoRest . get ; <nl> @ @ - 784 , 6 + 789 , 40 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> } ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ verify _ expected _ request _ and _ log _ at _ same _ time ( ) throws Exception { <nl> + Plain resource1 = new Plain ( ) ; <nl> + resource1 . code = 1 ; <nl> + resource1 . message = " hello " ; <nl> + <nl> + Plain resource2 = new Plain ( ) ; <nl> + resource2 . code = 2 ; <nl> + resource2 . message = " world " ; <nl> + <nl> + final RequestHit hit = requestHit ( ) ; <nl> + final RestServer server = restServer ( port ( ) , hit , log ( ) ) ; <nl> + server . resource ( " targets " , <nl> + get ( " 1 " ) . response ( toJson ( resource1 ) ) , <nl> + get ( " 2 " ) . response ( toJson ( resource2 ) ) <nl> + ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + Plain response1 = getResource ( " / targets / 1 " ) ; <nl> + assertThat ( response1 . code , is ( 1 ) ) ; <nl> + assertThat ( response1 . message , is ( " hello " ) ) ; <nl> + <nl> + Plain response2 = getResource ( " / targets / 2 " ) ; <nl> + assertThat ( response2 . code , is ( 2 ) ) ; <nl> + assertThat ( response2 . message , is ( " world " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + hit . verify ( by ( uri ( " / targets / 1 " ) ) , times ( 1 ) ) ; <nl> + hit . verify ( by ( uri ( " / targets / 2 " ) ) , times ( 1 ) ) ; <nl> + } <nl> + <nl> private Plain getResource ( String uri ) throws IOException { <nl> org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; <nl> return asPlain ( response ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> index df5367c . . c0d0e5c 100755 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java <nl> @ @ - 22 , 6 + 22 , 4 @ @ public interface HttpServer extends HttpResponseSetting , Server < HttpResponseSett <nl> HttpResponseSetting proxy ( final ProxyConfig config ) ; <nl> <nl> HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) ; <nl> - <nl> - void resource ( final String name , final RestSetting . . . settings ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> index 78788cc . . 5fd9258 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java <nl> @ @ - 1 , 8 + 1 , 17 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . github . dreamhead . moco . monitor . QuietMonitor ; <nl> + import com . github . dreamhead . moco . rest . ActualRestServer ; <nl> import com . github . dreamhead . moco . rest . RestSetting ; <nl> + import com . google . common . base . Optional ; <nl> + <nl> + import static com . google . common . base . Optional . of ; <nl> <nl> public final class MocoRest { <nl> + public static RestServer restServer ( final int port ) { <nl> + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , new QuietMonitor ( ) ) ; <nl> + } <nl> + <nl> public static RestSetting get ( final String id , final ResponseHandler handler ) { <nl> return new RestSetting ( id , handler ) ; <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / RestServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / RestServer . java <nl> new file mode 100644 <nl> index 0000000 . . 41f595b <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / RestServer . java <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . github . dreamhead . moco . rest . RestSetting ; <nl> + <nl> + public interface RestServer extends HttpServer { <nl> + void resource ( final String name , final RestSetting . . . settings ) ; <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> index 891d9a5 . . 32edba9 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java <nl> @ @ - 6 , 7 + 6 , 6 @ @ import com . github . dreamhead . moco . Moco ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoMonitor ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> - import com . github . dreamhead . moco . handler . JsonResponseHandler ; <nl> import com . github . dreamhead . moco . handler . failover . Failover ; <nl> import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; <nl> import com . github . dreamhead . moco . mount . MountHandler ; <nl> @ @ - 14 , 27 + 13 , 17 @ @ import com . github . dreamhead . moco . mount . MountMatcher ; <nl> import com . github . dreamhead . moco . mount . MountPredicate ; <nl> import com . github . dreamhead . moco . mount . MountTo ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> - import com . github . dreamhead . moco . rest . RestSetting ; <nl> import com . github . dreamhead . moco . setting . HttpSetting ; <nl> import com . github . dreamhead . moco . util . RedirectDelegate ; <nl> - import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> - import com . google . common . base . Predicate ; <nl> - import com . google . common . collect . FluentIterable ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import io . netty . handler . codec . http . HttpMethod ; <nl> - import io . netty . handler . codec . http . HttpResponseStatus ; <nl> <nl> import java . io . File ; <nl> <nl> import static com . github . dreamhead . moco . Moco . and ; <nl> import static com . github . dreamhead . moco . Moco . by ; <nl> import static com . github . dreamhead . moco . Moco . method ; <nl> - import static com . github . dreamhead . moco . Moco . status ; <nl> - import static com . github . dreamhead . moco . Moco . uri ; <nl> import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; <nl> - import static com . github . dreamhead . moco . util . URLs . join ; <nl> - import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . ImmutableList . copyOf ; <nl> <nl> @ @ - 101 , 51 + 90 , 6 @ @ public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSet <nl> } <nl> <nl> @ Override <nl> - public void resource ( final String name , final RestSetting . . . settings ) { <nl> - checkNotNull ( name , " Resource name should not be null " ) ; <nl> - checkNotNull ( settings , " Rest settings should not be null " ) ; <nl> - <nl> - for ( RestSetting setting : settings ) { <nl> - this . get ( by ( uri ( join ( resourceRoot ( name ) , setting . getId ( ) ) ) ) ) . response ( setting . getHandler ( ) ) ; <nl> - } <nl> - <nl> - FluentIterable < ? extends RestSetting > handlers = FluentIterable . from ( copyOf ( settings ) ) ; <nl> - if ( handlers . allMatch ( isJsonHandlers ( ) ) ) { <nl> - ImmutableList < Object > objects = handlers . transform ( toJsonHandler ( ) ) . transform ( toPojo ( ) ) . toList ( ) ; <nl> - this . get ( by ( uri ( resourceRoot ( name ) ) ) ) . response ( Moco . toJson ( objects ) ) ; <nl> - } <nl> - <nl> - this . get ( InternalApis . context ( resourceRoot ( name ) ) ) . response ( status ( HttpResponseStatus . NOT _ FOUND . code ( ) ) ) ; <nl> - } <nl> - <nl> - private Function < JsonResponseHandler , Object > toPojo ( ) { <nl> - return new Function < JsonResponseHandler , Object > ( ) { <nl> - @ Override <nl> - public Object apply ( final JsonResponseHandler handler ) { <nl> - return handler . getPojo ( ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private Function < RestSetting , JsonResponseHandler > toJsonHandler ( ) { <nl> - return new Function < RestSetting , JsonResponseHandler > ( ) { <nl> - @ Override <nl> - public JsonResponseHandler apply ( final RestSetting setting ) { <nl> - return JsonResponseHandler . class . cast ( setting . getHandler ( ) ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - private Predicate < RestSetting > isJsonHandlers ( ) { <nl> - return new Predicate < RestSetting > ( ) { <nl> - @ Override <nl> - public boolean apply ( final RestSetting setting ) { <nl> - return setting . getHandler ( ) instanceof JsonResponseHandler ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> - @ Override <nl> protected HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { <nl> HttpSetting baseSetting = new HttpSetting ( matcher ) ; <nl> addSetting ( baseSetting ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java <nl> new file mode 100644 <nl> index 0000000 . . eae0dec <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + package com . github . dreamhead . moco . rest ; <nl> + <nl> + import com . github . dreamhead . moco . HttpsCertificate ; <nl> + import com . github . dreamhead . moco . Moco ; <nl> + import com . github . dreamhead . moco . MocoConfig ; <nl> + import com . github . dreamhead . moco . MocoMonitor ; <nl> + import com . github . dreamhead . moco . RestServer ; <nl> + import com . github . dreamhead . moco . handler . JsonResponseHandler ; <nl> + import com . github . dreamhead . moco . internal . ActualHttpServer ; <nl> + import com . github . dreamhead . moco . internal . InternalApis ; <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . base . Predicate ; <nl> + import com . google . common . collect . FluentIterable ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import io . netty . handler . codec . http . HttpResponseStatus ; <nl> + <nl> + import static com . github . dreamhead . moco . Moco . by ; <nl> + import static com . github . dreamhead . moco . Moco . status ; <nl> + import static com . github . dreamhead . moco . Moco . uri ; <nl> + import static com . github . dreamhead . moco . util . URLs . join ; <nl> + import static com . github . dreamhead . moco . util . URLs . resourceRoot ; <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + import static com . google . common . collect . ImmutableList . copyOf ; <nl> + <nl> + public class ActualRestServer extends ActualHttpServer implements RestServer { <nl> + public ActualRestServer ( final Optional < Integer > port , <nl> + final Optional < HttpsCertificate > certificate , <nl> + final MocoMonitor monitor , <nl> + final MocoConfig . . . configs ) { <nl> + super ( port , certificate , monitor , configs ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void resource ( final String name , final RestSetting . . . settings ) { <nl> + checkNotNull ( name , " Resource name should not be null " ) ; <nl> + checkNotNull ( settings , " Rest settings should not be null " ) ; <nl> + <nl> + for ( RestSetting setting : settings ) { <nl> + this . get ( by ( uri ( join ( resourceRoot ( name ) , setting . getId ( ) ) ) ) ) . response ( setting . getHandler ( ) ) ; <nl> + } <nl> + <nl> + FluentIterable < ? extends RestSetting > handlers = FluentIterable . from ( copyOf ( settings ) ) ; <nl> + if ( handlers . allMatch ( isJsonHandlers ( ) ) ) { <nl> + ImmutableList < Object > objects = handlers . transform ( toJsonHandler ( ) ) . transform ( toPojo ( ) ) . toList ( ) ; <nl> + this . get ( by ( uri ( resourceRoot ( name ) ) ) ) . response ( Moco . toJson ( objects ) ) ; <nl> + } <nl> + <nl> + this . get ( InternalApis . context ( resourceRoot ( name ) ) ) . response ( status ( HttpResponseStatus . NOT _ FOUND . code ( ) ) ) ; <nl> + } <nl> + <nl> + private Function < JsonResponseHandler , Object > toPojo ( ) { <nl> + return new Function < JsonResponseHandler , Object > ( ) { <nl> + @ Override <nl> + public Object apply ( final JsonResponseHandler handler ) { <nl> + return handler . getPojo ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Function < RestSetting , JsonResponseHandler > toJsonHandler ( ) { <nl> + return new Function < RestSetting , JsonResponseHandler > ( ) { <nl> + @ Override <nl> + public JsonResponseHandler apply ( final RestSetting setting ) { <nl> + return JsonResponseHandler . class . cast ( setting . getHandler ( ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + private Predicate < RestSetting > isJsonHandlers ( ) { <nl> + return new Predicate < RestSetting > ( ) { <nl> + @ Override <nl> + public boolean apply ( final RestSetting setting ) { <nl> + return setting . getHandler ( ) instanceof JsonResponseHandler ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java <nl> index f0489cd . . b6c54fe 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java <nl> @ @ - 1 , 18 + 1 , 9 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> - import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> - import org . junit . Before ; <nl> - <nl> import static com . github . dreamhead . moco . Moco . httpServer ; <nl> - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> - <nl> - public class AbstractMocoHttpTest { <nl> - protected HttpServer server ; <nl> - protected MocoTestHelper helper ; <nl> <nl> - @ Before <nl> - public void setUp ( ) throws Exception { <nl> - helper = new MocoTestHelper ( ) ; <nl> - server = httpServer ( port ( ) ) ; <nl> + public class AbstractMocoHttpTest extends BaseMocoHttpTest < HttpServer > { <nl> + protected HttpServer createServer ( int port ) { <nl> + return httpServer ( port ) ; <nl> } <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / BaseMocoHttpTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / BaseMocoHttpTest . java <nl> new file mode 100644 <nl> index 0000000 . . 8c62846 <nl> - - - / dev / null <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / BaseMocoHttpTest . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import com . github . dreamhead . moco . helper . MocoTestHelper ; <nl> + import org . junit . Before ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; <nl> + <nl> + public abstract class BaseMocoHttpTest < T extends HttpServer > { <nl> + protected T server ; <nl> + protected MocoTestHelper helper ; <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws Exception { <nl> + helper = new MocoTestHelper ( ) ; <nl> + server = createServer ( port ( ) ) ; <nl> + } <nl> + <nl> + protected abstract T createServer ( int port ) ; <nl> + } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> index 5dcd999 . . 23fa4d3 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java <nl> @ @ - 9 , 15 + 9 , 21 @ @ import org . junit . Test ; <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> <nl> + import static com . github . dreamhead . moco . MocoRest . restServer ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> - public class MocoRestTest extends AbstractMocoHttpTest { <nl> + public class MocoRestTest extends BaseMocoHttpTest < RestServer > { <nl> <nl> private final ObjectMapper mapper = new ObjectMapper ( ) ; <nl> <nl> + @ Override <nl> + protected RestServer createServer ( int port ) { <nl> + return restServer ( port ) ; <nl> + } <nl> + <nl> @ Test <nl> public void should _ get _ resource _ by _ id ( ) throws Exception { <nl> Plain resource1 = new Plain ( ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index a018cd4 . . 5b9bc49 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import com . github . dreamhead . moco . handler . failover . FailoverStrategy ; 
 import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; 
 import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 import com . github . dreamhead . moco . internal . ActualSocketServer ; 
 + import com . github . dreamhead . moco . internal . ApiUtils ; 
 import com . github . dreamhead . moco . matcher . AndRequestMatcher ; 
 import com . github . dreamhead . moco . matcher . ContainMatcher ; 
 import com . github . dreamhead . moco . matcher . EndsWithMatcher ; 
 @ @ - 38 , 7 + 39 , 6 @ @ import com . github . dreamhead . moco . matcher . NotRequestMatcher ; 
 import com . github . dreamhead . moco . matcher . OrRequestMatcher ; 
 import com . github . dreamhead . moco . matcher . StartsWithMatcher ; 
 import com . github . dreamhead . moco . matcher . XmlRequestMatcher ; 
 - import com . github . dreamhead . moco . monitor . CompositeMonitor ; 
 import com . github . dreamhead . moco . monitor . DefaultLogFormatter ; 
 import com . github . dreamhead . moco . monitor . FileLogWriter ; 
 import com . github . dreamhead . moco . monitor . LogMonitor ; 
 @ @ - 48 , 14 + 48 , 11 @ @ import com . github . dreamhead . moco . procedure . LatencyProcedure ; 
 import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 - import com . github . dreamhead . moco . resource . reader . Variable ; 
 import com . github . dreamhead . moco . util . Jsons ; 
 import com . github . dreamhead . moco . util . URLs ; 
 - import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . FluentIterable ; 
 import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . Maps ; 
 import com . google . common . net . HttpHeaders ; 
 
 import java . io . File ; 
 @ @ - 78 , 7 + 75 , 6 @ @ import static com . google . common . base . Optional . of ; 
 import static com . google . common . base . Preconditions . checkArgument ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 - import static com . google . common . collect . Maps . transformEntries ; 
 import static com . google . common . net . HttpHeaders . SET _ COOKIE ; 
 import static java . lang . String . format ; 
 
 @ @ - 96 , 18 + 92 , 7 @ @ public final class Moco { 
 
 public static HttpServer httpServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 - return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 - } 
 - 
 - private static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { 
 - MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; 
 - targetMonitors [ 0 ] = checkNotNull ( monitor , " Monitor should not be null " ) ; 
 - targetMonitors [ 1 ] = checkNotNull ( monitor2 , " Monitor should not be null " ) ; 
 - if ( monitors . length > 0 ) { 
 - System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; 
 - } 
 - 
 - return new CompositeMonitor ( targetMonitors ) ; 
 + return ActualHttpServer . createHttpServerWithMonitor ( of ( port ) , ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 } 
 
 public static HttpServer httpServer ( final MocoConfig . . . configs ) { 
 @ @ - 143 , 7 + 128 , 7 @ @ public final class Moco { 
 public static HttpServer httpsServer ( final int port , final HttpsCertificate certificate , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 return ActualHttpServer . createHttpsServerWithMonitor ( of ( port ) , checkNotNull ( certificate , " Certificate should not be null " ) , 
 - mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 + ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 } 
 
 public static SocketServer socketServer ( ) { 
 @ @ - 162 , 7 + 147 , 7 @ @ public final class Moco { 
 
 public static SocketServer socketServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { 
 checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 - return ActualSocketServer . createServerWithMonitor ( of ( port ) , mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 + return ActualSocketServer . createServerWithMonitor ( of ( port ) , ApiUtils . mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 } 
 
 
 @ @ - 398 , 12 + 383 , 12 @ @ public final class Moco { 
 
 public static ResponseHandler seq ( final String . . . contents ) { 
 checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 - return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( textToResource ( ) ) ) ; 
 + return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( ApiUtils . textToResource ( ) ) ) ; 
 } 
 
 public static ResponseHandler seq ( final Resource . . . contents ) { 
 checkArgument ( contents . length > 0 , " Sequence contents should not be null " ) ; 
 - return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( resourceToResourceHandler ( ) ) ) ; 
 + return newSeq ( FluentIterable . from ( copyOf ( contents ) ) . transform ( ApiUtils . resourceToResourceHandler ( ) ) ) ; 
 } 
 
 public static ResponseHandler seq ( final ResponseHandler . . . handlers ) { 
 @ @ - 572 , 7 + 557 , 7 @ @ public final class Moco { 
 
 public static Resource template ( final ContentResource template , final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 return templateResource ( checkNotNull ( template , " Template should not be null " ) , 
 - toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; 
 + ApiUtils . toVariables ( checkNotNull ( variables , " Template variable should not be null " ) ) ) ; 
 } 
 
 public static RequestExtractor < Object > var ( final Object text ) { 
 @ @ - 621 , 38 + 606 , 6 @ @ public final class Moco { 
 with ( checkNotNull ( resource , " Resource should not be null " ) ) ) ; 
 } 
 
 - private static Function < String , ResponseHandler > textToResource ( ) { 
 - return new Function < String , ResponseHandler > ( ) { 
 - @ Override 
 - public ResponseHandler apply ( final String content ) { 
 - return with ( text ( content ) ) ; 
 - } 
 - } ; 
 - } 
 - 
 - private static Function < Resource , ResponseHandler > resourceToResourceHandler ( ) { 
 - return new Function < Resource , ResponseHandler > ( ) { 
 - @ Override 
 - public ResponseHandler apply ( final Resource content ) { 
 - return with ( content ) ; 
 - } 
 - } ; 
 - } 
 - 
 - private static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 - return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; 
 - } 
 - 
 - private static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { 
 - return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { 
 - @ Override 
 - @ SuppressWarnings ( " unchecked " ) 
 - public Variable transformEntry ( final String key , final RequestExtractor < ? > value ) { 
 - return new ExtractorVariable ( value ) ; 
 - } 
 - } ; 
 - } 
 - 
 private Moco ( ) { 
 } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 index 6af7705 . . 0e86d04 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 import com . github . dreamhead . moco . monitor . QuietMonitor ; 
 import com . github . dreamhead . moco . rest . ActualRestServer ; 
 import com . github . dreamhead . moco . rest . RestIdMatchers ; 
 @ @ - 7 , 6 + 8 , 7 @ @ import com . github . dreamhead . moco . rest . builder . ActualSubResourceSettingBuilder ; 
 import com . github . dreamhead . moco . rest . builder . SubResourceSettingBuilder ; 
 import com . google . common . base . Optional ; 
 
 + import static com . github . dreamhead . moco . internal . ApiUtils . mergeMonitor ; 
 import static com . github . dreamhead . moco . rest . RestIdMatchers . eq ; 
 import static com . github . dreamhead . moco . rest . RestIds . checkId ; 
 import static com . github . dreamhead . moco . rest . builder . RestSettingBuilders . all ; 
 @ @ - 29 , 6 + 31 , 12 @ @ public final class MocoRest { 
 checkNotNull ( monitor , " Monitor should not be null " ) , configs ) ; 
 } 
 
 + public static RestServer restServer ( final int port , final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor . . . monitors ) { 
 + checkArgument ( port > 0 , " Port must be greater than zero " ) ; 
 + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , 
 + mergeMonitor ( monitor , monitor2 , monitors ) ) ; 
 + } 
 + 
 public static RestIdMatcher anyId ( ) { 
 return RestIdMatchers . anyId ( ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 new file mode 100644 
 index 0000000 . . 920a773 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + package com . github . dreamhead . moco . internal ; 
 + 
 + import com . github . dreamhead . moco . Moco ; 
 + import com . github . dreamhead . moco . MocoMonitor ; 
 + import com . github . dreamhead . moco . RequestExtractor ; 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + import com . github . dreamhead . moco . monitor . CompositeMonitor ; 
 + import com . github . dreamhead . moco . resource . Resource ; 
 + import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 + import com . github . dreamhead . moco . resource . reader . Variable ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 + 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 + import static com . google . common . collect . Maps . transformEntries ; 
 + 
 + public class ApiUtils { 
 + public static MocoMonitor mergeMonitor ( final MocoMonitor monitor , final MocoMonitor monitor2 , final MocoMonitor [ ] monitors ) { 
 + MocoMonitor [ ] targetMonitors = new MocoMonitor [ 2 + monitors . length ] ; 
 + targetMonitors [ 0 ] = checkNotNull ( monitor , " Monitor should not be null " ) ; 
 + targetMonitors [ 1 ] = checkNotNull ( monitor2 , " Monitor should not be null " ) ; 
 + if ( monitors . length > 0 ) { 
 + System . arraycopy ( monitors , 0 , targetMonitors , 2 , monitors . length ) ; 
 + } 
 + 
 + return new CompositeMonitor ( targetMonitors ) ; 
 + } 
 + 
 + public static Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > toVariable ( ) { 
 + return new Maps . EntryTransformer < String , RequestExtractor < ? > , Variable > ( ) { 
 + @ Override 
 + @ SuppressWarnings ( " unchecked " ) 
 + public Variable transformEntry ( final String key , final RequestExtractor < ? > value ) { 
 + return new ExtractorVariable ( value ) ; 
 + } 
 + } ; 
 + } 
 + 
 + public static ImmutableMap < String , Variable > toVariables ( final ImmutableMap < String , ? extends RequestExtractor < ? > > variables ) { 
 + return ImmutableMap . copyOf ( transformEntries ( variables , toVariable ( ) ) ) ; 
 + } 
 + 
 + public static Function < String , ResponseHandler > textToResource ( ) { 
 + return new Function < String , ResponseHandler > ( ) { 
 + @ Override 
 + public ResponseHandler apply ( final String content ) { 
 + return Moco . with ( Moco . text ( content ) ) ; 
 + } 
 + } ; 
 + } 
 + 
 + public static Function < Resource , ResponseHandler > resourceToResourceHandler ( ) { 
 + return new Function < Resource , ResponseHandler > ( ) { 
 + @ Override 
 + public ResponseHandler apply ( final Resource content ) { 
 + return Moco . with ( content ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private ApiUtils ( ) { 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java 
 index 595ae55 . . d697dc6 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / matcher / XmlRequestMatcher . java 
 @ @ - 109 , 7 + 109 , 7 @ @ public class XmlRequestMatcher extends AbstractRequestMatcher { 
 } 
 } 
 
 - private Document extractDocument ( InputSource inputSource , DocumentBuilder documentBuilder ) throws SAXException { 
 + private Document extractDocument ( final InputSource inputSource , final DocumentBuilder documentBuilder ) throws SAXException { 
 try { 
 Document document = documentBuilder . parse ( inputSource ) ; 
 document . normalizeDocument ( ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 index a149a56 . . f9254a3 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 @ @ - 20 , 15 + 20 , 20 @ @ import java . io . PrintStream ; 
 import java . nio . charset . Charset ; 
 import java . util . List ; 
 
 + import static com . github . dreamhead . moco . Moco . by ; 
 import static com . github . dreamhead . moco . Moco . context ; 
 import static com . github . dreamhead . moco . Moco . eq ; 
 import static com . github . dreamhead . moco . Moco . header ; 
 + import static com . github . dreamhead . moco . Moco . httpServer ; 
 import static com . github . dreamhead . moco . Moco . log ; 
 import static com . github . dreamhead . moco . Moco . query ; 
 import static com . github . dreamhead . moco . Moco . status ; 
 import static com . github . dreamhead . moco . Moco . text ; 
 import static com . github . dreamhead . moco . Moco . toJson ; 
 + import static com . github . dreamhead . moco . Moco . uri ; 
 import static com . github . dreamhead . moco . Moco . with ; 
 + import static com . github . dreamhead . moco . MocoRequestHit . requestHit ; 
 + import static com . github . dreamhead . moco . MocoRequestHit . times ; 
 import static com . github . dreamhead . moco . MocoRest . anyId ; 
 import static com . github . dreamhead . moco . MocoRest . delete ; 
 import static com . github . dreamhead . moco . MocoRest . get ; 
 @ @ - 784 , 6 + 789 , 40 @ @ public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 } ) ; 
 } 
 
 + @ Test 
 + public void should _ verify _ expected _ request _ and _ log _ at _ same _ time ( ) throws Exception { 
 + Plain resource1 = new Plain ( ) ; 
 + resource1 . code = 1 ; 
 + resource1 . message = " hello " ; 
 + 
 + Plain resource2 = new Plain ( ) ; 
 + resource2 . code = 2 ; 
 + resource2 . message = " world " ; 
 + 
 + final RequestHit hit = requestHit ( ) ; 
 + final RestServer server = restServer ( port ( ) , hit , log ( ) ) ; 
 + server . resource ( " targets " , 
 + get ( " 1 " ) . response ( toJson ( resource1 ) ) , 
 + get ( " 2 " ) . response ( toJson ( resource2 ) ) 
 + ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + Plain response1 = getResource ( " / targets / 1 " ) ; 
 + assertThat ( response1 . code , is ( 1 ) ) ; 
 + assertThat ( response1 . message , is ( " hello " ) ) ; 
 + 
 + Plain response2 = getResource ( " / targets / 2 " ) ; 
 + assertThat ( response2 . code , is ( 2 ) ) ; 
 + assertThat ( response2 . message , is ( " world " ) ) ; 
 + } 
 + } ) ; 
 + 
 + hit . verify ( by ( uri ( " / targets / 1 " ) ) , times ( 1 ) ) ; 
 + hit . verify ( by ( uri ( " / targets / 2 " ) ) , times ( 1 ) ) ; 
 + } 
 + 
 private Plain getResource ( String uri ) throws IOException { 
 org . apache . http . HttpResponse response = helper . getResponse ( remoteUrl ( uri ) ) ; 
 return asPlain ( response ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java 
 index df5367c . . c0d0e5c 100755 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / HttpServer . java 
 @ @ - 22 , 6 + 22 , 4 @ @ public interface HttpServer extends HttpResponseSetting , Server < HttpResponseSett 
 HttpResponseSetting proxy ( final ProxyConfig config ) ; 
 
 HttpResponseSetting proxy ( final ProxyConfig proxyConfig , final Failover failover ) ; 
 - 
 - void resource ( final String name , final RestSetting . . . settings ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 index 78788cc . . 5fd9258 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / MocoRest . java 
 @ @ - 1 , 8 + 1 , 17 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . github . dreamhead . moco . monitor . QuietMonitor ; 
 + import com . github . dreamhead . moco . rest . ActualRestServer ; 
 import com . github . dreamhead . moco . rest . RestSetting ; 
 + import com . google . common . base . Optional ; 
 + 
 + import static com . google . common . base . Optional . of ; 
 
 public final class MocoRest { 
 + public static RestServer restServer ( final int port ) { 
 + return new ActualRestServer ( of ( port ) , Optional . < HttpsCertificate > absent ( ) , new QuietMonitor ( ) ) ; 
 + } 
 + 
 public static RestSetting get ( final String id , final ResponseHandler handler ) { 
 return new RestSetting ( id , handler ) ; 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / RestServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / RestServer . java 
 new file mode 100644 
 index 0000000 . . 41f595b 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / RestServer . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package com . github . dreamhead . moco ; 
 + 
 + import com . github . dreamhead . moco . rest . RestSetting ; 
 + 
 + public interface RestServer extends HttpServer { 
 + void resource ( final String name , final RestSetting . . . settings ) ; 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 index 891d9a5 . . 32edba9 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / HttpConfiguration . java 
 @ @ - 6 , 7 + 6 , 6 @ @ import com . github . dreamhead . moco . Moco ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoMonitor ; 
 import com . github . dreamhead . moco . RequestMatcher ; 
 - import com . github . dreamhead . moco . handler . JsonResponseHandler ; 
 import com . github . dreamhead . moco . handler . failover . Failover ; 
 import com . github . dreamhead . moco . handler . proxy . ProxyConfig ; 
 import com . github . dreamhead . moco . mount . MountHandler ; 
 @ @ - 14 , 27 + 13 , 17 @ @ import com . github . dreamhead . moco . mount . MountMatcher ; 
 import com . github . dreamhead . moco . mount . MountPredicate ; 
 import com . github . dreamhead . moco . mount . MountTo ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 - import com . github . dreamhead . moco . rest . RestSetting ; 
 import com . github . dreamhead . moco . setting . HttpSetting ; 
 import com . github . dreamhead . moco . util . RedirectDelegate ; 
 - import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 - import com . google . common . base . Predicate ; 
 - import com . google . common . collect . FluentIterable ; 
 - import com . google . common . collect . ImmutableList ; 
 import io . netty . handler . codec . http . HttpMethod ; 
 - import io . netty . handler . codec . http . HttpResponseStatus ; 
 
 import java . io . File ; 
 
 import static com . github . dreamhead . moco . Moco . and ; 
 import static com . github . dreamhead . moco . Moco . by ; 
 import static com . github . dreamhead . moco . Moco . method ; 
 - import static com . github . dreamhead . moco . Moco . status ; 
 - import static com . github . dreamhead . moco . Moco . uri ; 
 import static com . github . dreamhead . moco . util . Preconditions . checkNotNullOrEmpty ; 
 - import static com . github . dreamhead . moco . util . URLs . join ; 
 - import static com . github . dreamhead . moco . util . URLs . resourceRoot ; 
 import static com . google . common . base . Preconditions . checkNotNull ; 
 import static com . google . common . collect . ImmutableList . copyOf ; 
 
 @ @ - 101 , 51 + 90 , 6 @ @ public abstract class HttpConfiguration extends BaseActualServer < HttpResponseSet 
 } 
 
 @ Override 
 - public void resource ( final String name , final RestSetting . . . settings ) { 
 - checkNotNull ( name , " Resource name should not be null " ) ; 
 - checkNotNull ( settings , " Rest settings should not be null " ) ; 
 - 
 - for ( RestSetting setting : settings ) { 
 - this . get ( by ( uri ( join ( resourceRoot ( name ) , setting . getId ( ) ) ) ) ) . response ( setting . getHandler ( ) ) ; 
 - } 
 - 
 - FluentIterable < ? extends RestSetting > handlers = FluentIterable . from ( copyOf ( settings ) ) ; 
 - if ( handlers . allMatch ( isJsonHandlers ( ) ) ) { 
 - ImmutableList < Object > objects = handlers . transform ( toJsonHandler ( ) ) . transform ( toPojo ( ) ) . toList ( ) ; 
 - this . get ( by ( uri ( resourceRoot ( name ) ) ) ) . response ( Moco . toJson ( objects ) ) ; 
 - } 
 - 
 - this . get ( InternalApis . context ( resourceRoot ( name ) ) ) . response ( status ( HttpResponseStatus . NOT _ FOUND . code ( ) ) ) ; 
 - } 
 - 
 - private Function < JsonResponseHandler , Object > toPojo ( ) { 
 - return new Function < JsonResponseHandler , Object > ( ) { 
 - @ Override 
 - public Object apply ( final JsonResponseHandler handler ) { 
 - return handler . getPojo ( ) ; 
 - } 
 - } ; 
 - } 
 - 
 - private Function < RestSetting , JsonResponseHandler > toJsonHandler ( ) { 
 - return new Function < RestSetting , JsonResponseHandler > ( ) { 
 - @ Override 
 - public JsonResponseHandler apply ( final RestSetting setting ) { 
 - return JsonResponseHandler . class . cast ( setting . getHandler ( ) ) ; 
 - } 
 - } ; 
 - } 
 - 
 - private Predicate < RestSetting > isJsonHandlers ( ) { 
 - return new Predicate < RestSetting > ( ) { 
 - @ Override 
 - public boolean apply ( final RestSetting setting ) { 
 - return setting . getHandler ( ) instanceof JsonResponseHandler ; 
 - } 
 - } ; 
 - } 
 - 
 - @ Override 
 protected HttpResponseSetting onRequestAttached ( final RequestMatcher matcher ) { 
 HttpSetting baseSetting = new HttpSetting ( matcher ) ; 
 addSetting ( baseSetting ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java 
 new file mode 100644 
 index 0000000 . . eae0dec 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / ActualRestServer . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + package com . github . dreamhead . moco . rest ; 
 + 
 + import com . github . dreamhead . moco . HttpsCertificate ; 
 + import com . github . dreamhead . moco . Moco ; 
 + import com . github . dreamhead . moco . MocoConfig ; 
 + import com . github . dreamhead . moco . MocoMonitor ; 
 + import com . github . dreamhead . moco . RestServer ; 
 + import com . github . dreamhead . moco . handler . JsonResponseHandler ; 
 + import com . github . dreamhead . moco . internal . ActualHttpServer ; 
 + import com . github . dreamhead . moco . internal . InternalApis ; 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . base . Predicate ; 
 + import com . google . common . collect . FluentIterable ; 
 + import com . google . common . collect . ImmutableList ; 
 + import io . netty . handler . codec . http . HttpResponseStatus ; 
 + 
 + import static com . github . dreamhead . moco . Moco . by ; 
 + import static com . github . dreamhead . moco . Moco . status ; 
 + import static com . github . dreamhead . moco . Moco . uri ; 
 + import static com . github . dreamhead . moco . util . URLs . join ; 
 + import static com . github . dreamhead . moco . util . URLs . resourceRoot ; 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 + import static com . google . common . collect . ImmutableList . copyOf ; 
 + 
 + public class ActualRestServer extends ActualHttpServer implements RestServer { 
 + public ActualRestServer ( final Optional < Integer > port , 
 + final Optional < HttpsCertificate > certificate , 
 + final MocoMonitor monitor , 
 + final MocoConfig . . . configs ) { 
 + super ( port , certificate , monitor , configs ) ; 
 + } 
 + 
 + @ Override 
 + public void resource ( final String name , final RestSetting . . . settings ) { 
 + checkNotNull ( name , " Resource name should not be null " ) ; 
 + checkNotNull ( settings , " Rest settings should not be null " ) ; 
 + 
 + for ( RestSetting setting : settings ) { 
 + this . get ( by ( uri ( join ( resourceRoot ( name ) , setting . getId ( ) ) ) ) ) . response ( setting . getHandler ( ) ) ; 
 + } 
 + 
 + FluentIterable < ? extends RestSetting > handlers = FluentIterable . from ( copyOf ( settings ) ) ; 
 + if ( handlers . allMatch ( isJsonHandlers ( ) ) ) { 
 + ImmutableList < Object > objects = handlers . transform ( toJsonHandler ( ) ) . transform ( toPojo ( ) ) . toList ( ) ; 
 + this . get ( by ( uri ( resourceRoot ( name ) ) ) ) . response ( Moco . toJson ( objects ) ) ; 
 + } 
 + 
 + this . get ( InternalApis . context ( resourceRoot ( name ) ) ) . response ( status ( HttpResponseStatus . NOT _ FOUND . code ( ) ) ) ; 
 + } 
 + 
 + private Function < JsonResponseHandler , Object > toPojo ( ) { 
 + return new Function < JsonResponseHandler , Object > ( ) { 
 + @ Override 
 + public Object apply ( final JsonResponseHandler handler ) { 
 + return handler . getPojo ( ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private Function < RestSetting , JsonResponseHandler > toJsonHandler ( ) { 
 + return new Function < RestSetting , JsonResponseHandler > ( ) { 
 + @ Override 
 + public JsonResponseHandler apply ( final RestSetting setting ) { 
 + return JsonResponseHandler . class . cast ( setting . getHandler ( ) ) ; 
 + } 
 + } ; 
 + } 
 + 
 + private Predicate < RestSetting > isJsonHandlers ( ) { 
 + return new Predicate < RestSetting > ( ) { 
 + @ Override 
 + public boolean apply ( final RestSetting setting ) { 
 + return setting . getHandler ( ) instanceof JsonResponseHandler ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java 
 index f0489cd . . b6c54fe 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / AbstractMocoHttpTest . java 
 @ @ - 1 , 18 + 1 , 9 @ @ 
 package com . github . dreamhead . moco ; 
 
 - import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 - import org . junit . Before ; 
 - 
 import static com . github . dreamhead . moco . Moco . httpServer ; 
 - import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 - 
 - public class AbstractMocoHttpTest { 
 - protected HttpServer server ; 
 - protected MocoTestHelper helper ; 
 
 - @ Before 
 - public void setUp ( ) throws Exception { 
 - helper = new MocoTestHelper ( ) ; 
 - server = httpServer ( port ( ) ) ; 
 + public class AbstractMocoHttpTest extends BaseMocoHttpTest < HttpServer > { 
 + protected HttpServer createServer ( int port ) { 
 + return httpServer ( port ) ; 
 } 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / BaseMocoHttpTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / BaseMocoHttpTest . java 
 new file mode 100644 
 index 0000000 . . 8c62846 
 - - - / dev / null 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / BaseMocoHttpTest . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . github . dreamhead . moco ; 
 + 
 + import com . github . dreamhead . moco . helper . MocoTestHelper ; 
 + import org . junit . Before ; 
 + 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . port ; 
 + 
 + public abstract class BaseMocoHttpTest < T extends HttpServer > { 
 + protected T server ; 
 + protected MocoTestHelper helper ; 
 + 
 + @ Before 
 + public void setUp ( ) throws Exception { 
 + helper = new MocoTestHelper ( ) ; 
 + server = createServer ( port ( ) ) ; 
 + } 
 + 
 + protected abstract T createServer ( int port ) ; 
 + } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 index 5dcd999 . . 23fa4d3 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoRestTest . java 
 @ @ - 9 , 15 + 9 , 21 @ @ import org . junit . Test ; 
 import java . io . IOException ; 
 import java . util . List ; 
 
 + import static com . github . dreamhead . moco . MocoRest . restServer ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 - public class MocoRestTest extends AbstractMocoHttpTest { 
 + public class MocoRestTest extends BaseMocoHttpTest < RestServer > { 
 
 private final ObjectMapper mapper = new ObjectMapper ( ) ; 
 
 + @ Override 
 + protected RestServer createServer ( int port ) { 
 + return restServer ( port ) ; 
 + } 
 + 
 @ Test 
 public void should _ get _ resource _ by _ id ( ) throws Exception { 
 Plain resource1 = new Plain ( ) ;
