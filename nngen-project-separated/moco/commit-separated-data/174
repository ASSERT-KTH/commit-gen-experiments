BLEU SCORE: 0.13134549472120793

TEST MSG: extracted http message base to http message
GENERATED MSG: introduced default http message

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> index c9a2c3c . . 327c6cb 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 3 , 6 + 3 , 16 @ @ package com . github . dreamhead . moco . model ; <nl> import com . github . dreamhead . moco . HttpMessage ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + import java . lang . reflect . ParameterizedType ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> + import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> + import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> + import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> public abstract class DefaultHttpMessage implements HttpMessage { <nl> private final HttpProtocolVersion version ; <nl> @ @ - 41 , 4 + 51 , 69 @ @ public abstract class DefaultHttpMessage implements HttpMessage { <nl> public MessageContent getContent ( ) { <nl> return this . content ; <nl> } <nl> + <nl> + protected static abstract class Builder < T extends Builder > { <nl> + private final Class < T > clazz ; <nl> + protected HttpProtocolVersion version ; <nl> + protected MessageContent content ; <nl> + protected ImmutableMap < String , String [ ] > headers ; <nl> + <nl> + public Builder ( ) { <nl> + this . clazz = getRealClass ( ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + private Class < T > getRealClass ( ) { <nl> + return ( Class < T > ) ( ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ) ; <nl> + } <nl> + <nl> + public T withVersion ( final HttpProtocolVersion version ) { <nl> + this . version = version ; <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T withTextContent ( final String content ) { <nl> + this . content = content ( content ) ; <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T withContent ( final MessageContent content ) { <nl> + this . content = content ; <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T forHeaders ( final Map < String , String > headers ) { <nl> + if ( headers ! = null ) { <nl> + this . headers = simpleValueToArray ( headers ) ; <nl> + } <nl> + <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + public T withHeaders ( final Map < String , ? > headers ) { <nl> + if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> + this . headers = asHeaders ( headers ) ; <nl> + } <nl> + <nl> + return clazz . cast ( this ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> + Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> + if ( value instanceof String ) { <nl> + return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof String [ ] ) { <nl> + return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> + } <nl> + <nl> + if ( value instanceof List ) { <nl> + return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> + } <nl> + <nl> + throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 1056a6b . . 76507b3 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 146 , 7 + 146 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) <nl> . withHeaders ( toHeaders ( request . headers ( ) ) ) <nl> - / / . forHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> @ @ - 191 , 15 + 190 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return request ; <nl> } <nl> <nl> - private static ImmutableMap < String , String > collectHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> - ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> - headerBuilder . put ( entry ) ; <nl> - } <nl> - <nl> - return headerBuilder . build ( ) ; <nl> - } <nl> - <nl> private static ImmutableMap < String , String [ ] > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { <nl> Map < String , List < String > > headers = new HashMap < > ( ) ; <nl> for ( Map . Entry < String , String > entry : httpHeaders ) { <nl> @ @ - 226 , 68 + 216 , 11 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return new ArrayList < > ( ) ; <nl> } <nl> <nl> - public static final class Builder { <nl> - private HttpProtocolVersion version ; <nl> - private MessageContent content ; <nl> - private ImmutableMap < String , String [ ] > headers ; <nl> + public static final class Builder extends DefaultHttpMessage . Builder < Builder > { <nl> private HttpMethod method ; <nl> private String uri ; <nl> private ImmutableMap < String , String [ ] > queries ; <nl> <nl> - public Builder withVersion ( final HttpProtocolVersion version ) { <nl> - this . version = version ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withTextContent ( final String content ) { <nl> - this . content = content ( content ) ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withContent ( final MessageContent content ) { <nl> - this . content = content ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder forHeaders ( final Map < String , String > headers ) { <nl> - if ( headers ! = null ) { <nl> - ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; <nl> - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { <nl> - builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; <nl> - } <nl> - this . headers = builder . build ( ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withHeaders ( final Map < String , ? > headers ) { <nl> - if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> - this . headers = asHeaders ( headers ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> - Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> - if ( value instanceof String ) { <nl> - return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof String [ ] ) { <nl> - return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof List ) { <nl> - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> - <nl> - } <nl> - <nl> public Builder withMethod ( final HttpMethod method ) { <nl> this . method = method ; <nl> return this ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index 58cac97 . . 1e4a165 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 4 , 18 + 4 , 13 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpResponse ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Iterables ; <nl> import io . netty . buffer . ByteBufInputStream ; <nl> import io . netty . handler . codec . http . FullHttpResponse ; <nl> import io . netty . handler . codec . http . HttpVersion ; <nl> <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> - import static com . github . dreamhead . moco . util . Maps . listValueToArray ; <nl> - import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; <nl> - import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> public class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse { <nl> @ @ - 57 , 56 + 52 , 9 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo <nl> return new Builder ( ) ; <nl> } <nl> <nl> - public static final class Builder { <nl> - private HttpProtocolVersion version ; <nl> - private MessageContent content ; <nl> - private ImmutableMap < String , String [ ] > headers ; <nl> + public static final class Builder extends DefaultHttpMessage . Builder < Builder > { <nl> private int status ; <nl> <nl> - public Builder withVersion ( final HttpProtocolVersion version ) { <nl> - this . version = version ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withContent ( final MessageContent content ) { <nl> - this . content = content ; <nl> - return this ; <nl> - } <nl> - <nl> - public Builder withHeaders ( final Map < String , ? > headers ) { <nl> - if ( headers ! = null & & ! headers . isEmpty ( ) ) { <nl> - this . headers = asHeaders ( headers ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { <nl> - Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; <nl> - if ( value instanceof String ) { <nl> - return simpleValueToArray ( ( Map < String , String > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof String [ ] ) { <nl> - return copyOf ( ( Map < String , String [ ] > ) headers ) ; <nl> - } <nl> - <nl> - if ( value instanceof List ) { <nl> - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; <nl> - } <nl> - <nl> - throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; <nl> - } <nl> - <nl> - public Builder forHeaders ( final Map < String , String > headers ) { <nl> - if ( headers ! = null ) { <nl> - this . headers = simpleValueToArray ( copyOf ( headers ) ) ; <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> public Builder withStatus ( final int code ) { <nl> this . status = code ; <nl> return this ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> new file mode 100644 <nl> index 0000000 . . ffebb07 <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + package com . github . dreamhead . moco . model ; <nl> + <nl> + import com . github . dreamhead . moco . HttpMessage ; <nl> + import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + public abstract class DefaultHttpMessage implements HttpMessage { <nl> + private final HttpProtocolVersion version ; <nl> + private final MessageContent content ; <nl> + private final ImmutableMap < String , String > headers ; <nl> + <nl> + protected DefaultHttpMessage ( final HttpProtocolVersion version , final MessageContent content , <nl> + final ImmutableMap < String , String > headers ) { <nl> + this . version = version ; <nl> + this . content = content ; <nl> + this . headers = headers ; <nl> + } <nl> + <nl> + @ Override <nl> + public HttpProtocolVersion getVersion ( ) { <nl> + return this . version ; <nl> + } <nl> + <nl> + @ Override <nl> + public ImmutableMap < String , String > getHeaders ( ) { <nl> + return this . headers ; <nl> + } <nl> + <nl> + @ Override <nl> + public MessageContent getContent ( ) { <nl> + return this . content ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index 5e162d2 . . 73785be 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 29 , 13 + 29 , 10 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpRequest . Builder . class ) <nl> - public final class DefaultHttpRequest implements HttpRequest { <nl> + public final class DefaultHttpRequest extends DefaultHttpMessage implements HttpRequest { <nl> private final Supplier < ImmutableMap < String , String > > formSupplier ; <nl> private final Supplier < ImmutableMap < String , String > > cookieSupplier ; <nl> <nl> - private final HttpProtocolVersion version ; <nl> - private final MessageContent content ; <nl> - private final ImmutableMap < String , String > headers ; <nl> private final String method ; <nl> <nl> private final String uri ; <nl> @ @ - 43 , 10 + 40 , 9 @ @ public final class DefaultHttpRequest implements HttpRequest { <nl> <nl> private DefaultHttpRequest ( final HttpProtocolVersion version , final MessageContent content , <nl> final String method , final String uri , <nl> - final ImmutableMap < String , String > headers , final ImmutableMap < String , String [ ] > queries ) { <nl> - this . version = version ; <nl> - this . content = content ; <nl> - this . headers = headers ; <nl> + final ImmutableMap < String , String > headers , <nl> + final ImmutableMap < String , String [ ] > queries ) { <nl> + super ( version , content , headers ) ; <nl> this . method = method ; <nl> this . uri = uri ; <nl> this . queries = queries ; <nl> @ @ - 54 , 19 + 50 , 6 @ @ public final class DefaultHttpRequest implements HttpRequest { <nl> this . cookieSupplier = cookieSupplier ( ) ; <nl> } <nl> <nl> - public HttpProtocolVersion getVersion ( ) { <nl> - return version ; <nl> - } <nl> - <nl> - @ Override <nl> - public MessageContent getContent ( ) { <nl> - return content ; <nl> - } <nl> - <nl> - public ImmutableMap < String , String > getHeaders ( ) { <nl> - return headers ; <nl> - } <nl> - <nl> @ Override <nl> public String getMethod ( ) { <nl> return method ; <nl> @ @ - 117 , 11 + 100 , 11 @ @ public final class DefaultHttpRequest implements HttpRequest { <nl> return MoreObjects . toStringHelper ( " HTTP Request " ) <nl> . omitNullValues ( ) <nl> . add ( " uri " , this . uri ) <nl> - . add ( " version " , this . version ) <nl> + . add ( " version " , this . getVersion ( ) ) <nl> . add ( " method " , this . method ) <nl> . add ( " queries " , this . queries ) <nl> - . add ( " headers " , this . headers ) <nl> - . add ( " content " , this . content ) <nl> + . add ( " headers " , this . getHeaders ( ) ) <nl> + . add ( " content " , this . getContent ( ) ) <nl> . toString ( ) ; <nl> } <nl> <nl> @ @ - 163 , 6 + 146 , 7 @ @ public final class DefaultHttpRequest implements HttpRequest { <nl> <nl> public FullHttpRequest toFullHttpRequest ( ) { <nl> ByteBuf buffer = Unpooled . buffer ( ) ; <nl> + MessageContent content = getContent ( ) ; <nl> if ( content ! = null ) { <nl> buffer . writeBytes ( content . getContent ( ) ) ; <nl> } <nl> @ @ - 175 , 8 + 159 , 8 @ @ public final class DefaultHttpRequest implements HttpRequest { <nl> } <nl> } <nl> <nl> - FullHttpRequest request = new DefaultFullHttpRequest ( HttpVersion . valueOf ( version . text ( ) ) , HttpMethod . valueOf ( method ) , encoder . toString ( ) , buffer ) ; <nl> - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { <nl> + FullHttpRequest request = new DefaultFullHttpRequest ( HttpVersion . valueOf ( getVersion ( ) . text ( ) ) , HttpMethod . valueOf ( method ) , encoder . toString ( ) , buffer ) ; <nl> + for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { <nl> request . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; <nl> } <nl> <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> index c134ebe . . 79e8b39 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java <nl> @ @ - 13 , 33 + 13 , 16 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> <nl> @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) <nl> - public class DefaultHttpResponse implements HttpResponse { <nl> - private final HttpProtocolVersion version ; <nl> - private final MessageContent content ; <nl> - private final ImmutableMap < String , String > headers ; <nl> + public class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse { <nl> private final int status ; <nl> <nl> public DefaultHttpResponse ( final HttpProtocolVersion version , final int status , <nl> - final ImmutableMap < String , String > headers , final MessageContent content ) { <nl> - this . version = version ; <nl> - this . headers = headers ; <nl> - this . content = content ; <nl> + final ImmutableMap < String , String > headers , <nl> + final MessageContent content ) { <nl> + super ( version , content , headers ) ; <nl> this . status = status ; <nl> } <nl> <nl> - public HttpProtocolVersion getVersion ( ) { <nl> - return version ; <nl> - } <nl> - <nl> - @ Override <nl> - public MessageContent getContent ( ) { <nl> - return content ; <nl> - } <nl> - <nl> - public ImmutableMap < String , String > getHeaders ( ) { <nl> - return this . headers ; <nl> - } <nl> - <nl> @ Override <nl> public int getStatus ( ) { <nl> return status ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 index c9a2c3c . . 327c6cb 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 3 , 6 + 3 , 16 @ @ package com . github . dreamhead . moco . model ; 
 import com . github . dreamhead . moco . HttpMessage ; 
 import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Iterables ; 
 + 
 + import java . lang . reflect . ParameterizedType ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import static com . github . dreamhead . moco . model . MessageContent . content ; 
 + import static com . github . dreamhead . moco . util . Maps . listValueToArray ; 
 + import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; 
 + import static com . google . common . collect . ImmutableMap . copyOf ; 
 
 public abstract class DefaultHttpMessage implements HttpMessage { 
 private final HttpProtocolVersion version ; 
 @ @ - 41 , 4 + 51 , 69 @ @ public abstract class DefaultHttpMessage implements HttpMessage { 
 public MessageContent getContent ( ) { 
 return this . content ; 
 } 
 + 
 + protected static abstract class Builder < T extends Builder > { 
 + private final Class < T > clazz ; 
 + protected HttpProtocolVersion version ; 
 + protected MessageContent content ; 
 + protected ImmutableMap < String , String [ ] > headers ; 
 + 
 + public Builder ( ) { 
 + this . clazz = getRealClass ( ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + private Class < T > getRealClass ( ) { 
 + return ( Class < T > ) ( ( ( ParameterizedType ) getClass ( ) . getGenericSuperclass ( ) ) . getActualTypeArguments ( ) [ 0 ] ) ; 
 + } 
 + 
 + public T withVersion ( final HttpProtocolVersion version ) { 
 + this . version = version ; 
 + return clazz . cast ( this ) ; 
 + } 
 + 
 + public T withTextContent ( final String content ) { 
 + this . content = content ( content ) ; 
 + return clazz . cast ( this ) ; 
 + } 
 + 
 + public T withContent ( final MessageContent content ) { 
 + this . content = content ; 
 + return clazz . cast ( this ) ; 
 + } 
 + 
 + public T forHeaders ( final Map < String , String > headers ) { 
 + if ( headers ! = null ) { 
 + this . headers = simpleValueToArray ( headers ) ; 
 + } 
 + 
 + return clazz . cast ( this ) ; 
 + } 
 + 
 + public T withHeaders ( final Map < String , ? > headers ) { 
 + if ( headers ! = null & & ! headers . isEmpty ( ) ) { 
 + this . headers = asHeaders ( headers ) ; 
 + } 
 + 
 + return clazz . cast ( this ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { 
 + Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; 
 + if ( value instanceof String ) { 
 + return simpleValueToArray ( ( Map < String , String > ) headers ) ; 
 + } 
 + 
 + if ( value instanceof String [ ] ) { 
 + return copyOf ( ( Map < String , String [ ] > ) headers ) ; 
 + } 
 + 
 + if ( value instanceof List ) { 
 + return listValueToArray ( ( Map < String , List < String > > ) headers ) ; 
 + } 
 + 
 + throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; 
 + } 
 + } 
 } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index 1056a6b . . 76507b3 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 146 , 7 + 146 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 return builder ( ) 
 . withVersion ( HttpProtocolVersion . versionOf ( request . protocolVersion ( ) . text ( ) ) ) 
 . withHeaders ( toHeaders ( request . headers ( ) ) ) 
 - / / . forHeaders ( collectHeaders ( request . headers ( ) ) ) 
 . withMethod ( HttpMethod . valueOf ( request . method ( ) . toString ( ) . toUpperCase ( ) ) ) 
 . withUri ( decoder . path ( ) ) 
 . withQueries ( queries ) 
 @ @ - 191 , 15 + 190 , 6 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 return request ; 
 } 
 
 - private static ImmutableMap < String , String > collectHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { 
 - ImmutableMap . Builder < String , String > headerBuilder = ImmutableMap . builder ( ) ; 
 - for ( Map . Entry < String , String > entry : httpHeaders ) { 
 - headerBuilder . put ( entry ) ; 
 - } 
 - 
 - return headerBuilder . build ( ) ; 
 - } 
 - 
 private static ImmutableMap < String , String [ ] > toHeaders ( final Iterable < Map . Entry < String , String > > httpHeaders ) { 
 Map < String , List < String > > headers = new HashMap < > ( ) ; 
 for ( Map . Entry < String , String > entry : httpHeaders ) { 
 @ @ - 226 , 68 + 216 , 11 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 return new ArrayList < > ( ) ; 
 } 
 
 - public static final class Builder { 
 - private HttpProtocolVersion version ; 
 - private MessageContent content ; 
 - private ImmutableMap < String , String [ ] > headers ; 
 + public static final class Builder extends DefaultHttpMessage . Builder < Builder > { 
 private HttpMethod method ; 
 private String uri ; 
 private ImmutableMap < String , String [ ] > queries ; 
 
 - public Builder withVersion ( final HttpProtocolVersion version ) { 
 - this . version = version ; 
 - return this ; 
 - } 
 - 
 - public Builder withTextContent ( final String content ) { 
 - this . content = content ( content ) ; 
 - return this ; 
 - } 
 - 
 - public Builder withContent ( final MessageContent content ) { 
 - this . content = content ; 
 - return this ; 
 - } 
 - 
 - public Builder forHeaders ( final Map < String , String > headers ) { 
 - if ( headers ! = null ) { 
 - ImmutableMap . Builder < String , String [ ] > builder = ImmutableMap . builder ( ) ; 
 - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { 
 - builder . put ( entry . getKey ( ) , new String [ ] { entry . getValue ( ) } ) ; 
 - } 
 - this . headers = builder . build ( ) ; 
 - } 
 - 
 - return this ; 
 - } 
 - 
 - public Builder withHeaders ( final Map < String , ? > headers ) { 
 - if ( headers ! = null & & ! headers . isEmpty ( ) ) { 
 - this . headers = asHeaders ( headers ) ; 
 - } 
 - 
 - return this ; 
 - } 
 - 
 - @ SuppressWarnings ( " unchecked " ) 
 - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { 
 - Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; 
 - if ( value instanceof String ) { 
 - return simpleValueToArray ( ( Map < String , String > ) headers ) ; 
 - } 
 - 
 - if ( value instanceof String [ ] ) { 
 - return copyOf ( ( Map < String , String [ ] > ) headers ) ; 
 - } 
 - 
 - if ( value instanceof List ) { 
 - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; 
 - } 
 - 
 - throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; 
 - 
 - } 
 - 
 public Builder withMethod ( final HttpMethod method ) { 
 this . method = method ; 
 return this ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index 58cac97 . . 1e4a165 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 4 , 18 + 4 , 13 @ @ import com . fasterxml . jackson . databind . annotation . JsonDeserialize ; 
 import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . github . dreamhead . moco . HttpResponse ; 
 import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . Iterables ; 
 import io . netty . buffer . ByteBufInputStream ; 
 import io . netty . handler . codec . http . FullHttpResponse ; 
 import io . netty . handler . codec . http . HttpVersion ; 
 
 - import java . util . List ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . model . MessageContent . content ; 
 - import static com . github . dreamhead . moco . util . Maps . listValueToArray ; 
 - import static com . github . dreamhead . moco . util . Maps . simpleValueToArray ; 
 - import static com . google . common . collect . ImmutableMap . copyOf ; 
 
 @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) 
 public class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse { 
 @ @ - 57 , 56 + 52 , 9 @ @ public class DefaultHttpResponse extends DefaultHttpMessage implements HttpRespo 
 return new Builder ( ) ; 
 } 
 
 - public static final class Builder { 
 - private HttpProtocolVersion version ; 
 - private MessageContent content ; 
 - private ImmutableMap < String , String [ ] > headers ; 
 + public static final class Builder extends DefaultHttpMessage . Builder < Builder > { 
 private int status ; 
 
 - public Builder withVersion ( final HttpProtocolVersion version ) { 
 - this . version = version ; 
 - return this ; 
 - } 
 - 
 - public Builder withContent ( final MessageContent content ) { 
 - this . content = content ; 
 - return this ; 
 - } 
 - 
 - public Builder withHeaders ( final Map < String , ? > headers ) { 
 - if ( headers ! = null & & ! headers . isEmpty ( ) ) { 
 - this . headers = asHeaders ( headers ) ; 
 - } 
 - 
 - return this ; 
 - } 
 - 
 - @ SuppressWarnings ( " unchecked " ) 
 - private ImmutableMap < String , String [ ] > asHeaders ( final Map < String , ? > headers ) { 
 - Object value = Iterables . getFirst ( headers . entrySet ( ) , null ) . getValue ( ) ; 
 - if ( value instanceof String ) { 
 - return simpleValueToArray ( ( Map < String , String > ) headers ) ; 
 - } 
 - 
 - if ( value instanceof String [ ] ) { 
 - return copyOf ( ( Map < String , String [ ] > ) headers ) ; 
 - } 
 - 
 - if ( value instanceof List ) { 
 - return listValueToArray ( ( Map < String , List < String > > ) headers ) ; 
 - } 
 - 
 - throw new IllegalArgumentException ( " Unknown header value type [ " + value . getClass ( ) + " ] " ) ; 
 - } 
 - 
 - public Builder forHeaders ( final Map < String , String > headers ) { 
 - if ( headers ! = null ) { 
 - this . headers = simpleValueToArray ( copyOf ( headers ) ) ; 
 - } 
 - 
 - return this ; 
 - } 
 - 
 public Builder withStatus ( final int code ) { 
 this . status = code ; 
 return this ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 new file mode 100644 
 index 0000000 . . ffebb07 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpMessage . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + package com . github . dreamhead . moco . model ; 
 + 
 + import com . github . dreamhead . moco . HttpMessage ; 
 + import com . github . dreamhead . moco . HttpProtocolVersion ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + public abstract class DefaultHttpMessage implements HttpMessage { 
 + private final HttpProtocolVersion version ; 
 + private final MessageContent content ; 
 + private final ImmutableMap < String , String > headers ; 
 + 
 + protected DefaultHttpMessage ( final HttpProtocolVersion version , final MessageContent content , 
 + final ImmutableMap < String , String > headers ) { 
 + this . version = version ; 
 + this . content = content ; 
 + this . headers = headers ; 
 + } 
 + 
 + @ Override 
 + public HttpProtocolVersion getVersion ( ) { 
 + return this . version ; 
 + } 
 + 
 + @ Override 
 + public ImmutableMap < String , String > getHeaders ( ) { 
 + return this . headers ; 
 + } 
 + 
 + @ Override 
 + public MessageContent getContent ( ) { 
 + return this . content ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index 5e162d2 . . 73785be 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 29 , 13 + 29 , 10 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 
 @ JsonDeserialize ( builder = DefaultHttpRequest . Builder . class ) 
 - public final class DefaultHttpRequest implements HttpRequest { 
 + public final class DefaultHttpRequest extends DefaultHttpMessage implements HttpRequest { 
 private final Supplier < ImmutableMap < String , String > > formSupplier ; 
 private final Supplier < ImmutableMap < String , String > > cookieSupplier ; 
 
 - private final HttpProtocolVersion version ; 
 - private final MessageContent content ; 
 - private final ImmutableMap < String , String > headers ; 
 private final String method ; 
 
 private final String uri ; 
 @ @ - 43 , 10 + 40 , 9 @ @ public final class DefaultHttpRequest implements HttpRequest { 
 
 private DefaultHttpRequest ( final HttpProtocolVersion version , final MessageContent content , 
 final String method , final String uri , 
 - final ImmutableMap < String , String > headers , final ImmutableMap < String , String [ ] > queries ) { 
 - this . version = version ; 
 - this . content = content ; 
 - this . headers = headers ; 
 + final ImmutableMap < String , String > headers , 
 + final ImmutableMap < String , String [ ] > queries ) { 
 + super ( version , content , headers ) ; 
 this . method = method ; 
 this . uri = uri ; 
 this . queries = queries ; 
 @ @ - 54 , 19 + 50 , 6 @ @ public final class DefaultHttpRequest implements HttpRequest { 
 this . cookieSupplier = cookieSupplier ( ) ; 
 } 
 
 - public HttpProtocolVersion getVersion ( ) { 
 - return version ; 
 - } 
 - 
 - @ Override 
 - public MessageContent getContent ( ) { 
 - return content ; 
 - } 
 - 
 - public ImmutableMap < String , String > getHeaders ( ) { 
 - return headers ; 
 - } 
 - 
 @ Override 
 public String getMethod ( ) { 
 return method ; 
 @ @ - 117 , 11 + 100 , 11 @ @ public final class DefaultHttpRequest implements HttpRequest { 
 return MoreObjects . toStringHelper ( " HTTP Request " ) 
 . omitNullValues ( ) 
 . add ( " uri " , this . uri ) 
 - . add ( " version " , this . version ) 
 + . add ( " version " , this . getVersion ( ) ) 
 . add ( " method " , this . method ) 
 . add ( " queries " , this . queries ) 
 - . add ( " headers " , this . headers ) 
 - . add ( " content " , this . content ) 
 + . add ( " headers " , this . getHeaders ( ) ) 
 + . add ( " content " , this . getContent ( ) ) 
 . toString ( ) ; 
 } 
 
 @ @ - 163 , 6 + 146 , 7 @ @ public final class DefaultHttpRequest implements HttpRequest { 
 
 public FullHttpRequest toFullHttpRequest ( ) { 
 ByteBuf buffer = Unpooled . buffer ( ) ; 
 + MessageContent content = getContent ( ) ; 
 if ( content ! = null ) { 
 buffer . writeBytes ( content . getContent ( ) ) ; 
 } 
 @ @ - 175 , 8 + 159 , 8 @ @ public final class DefaultHttpRequest implements HttpRequest { 
 } 
 } 
 
 - FullHttpRequest request = new DefaultFullHttpRequest ( HttpVersion . valueOf ( version . text ( ) ) , HttpMethod . valueOf ( method ) , encoder . toString ( ) , buffer ) ; 
 - for ( Map . Entry < String , String > entry : headers . entrySet ( ) ) { 
 + FullHttpRequest request = new DefaultFullHttpRequest ( HttpVersion . valueOf ( getVersion ( ) . text ( ) ) , HttpMethod . valueOf ( method ) , encoder . toString ( ) , buffer ) ; 
 + for ( Map . Entry < String , String > entry : getHeaders ( ) . entrySet ( ) ) { 
 request . headers ( ) . add ( entry . getKey ( ) , entry . getValue ( ) ) ; 
 } 
 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 index c134ebe . . 79e8b39 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpResponse . java 
 @ @ - 13 , 33 + 13 , 16 @ @ import static com . github . dreamhead . moco . model . MessageContent . content ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 
 @ JsonDeserialize ( builder = DefaultHttpResponse . Builder . class ) 
 - public class DefaultHttpResponse implements HttpResponse { 
 - private final HttpProtocolVersion version ; 
 - private final MessageContent content ; 
 - private final ImmutableMap < String , String > headers ; 
 + public class DefaultHttpResponse extends DefaultHttpMessage implements HttpResponse { 
 private final int status ; 
 
 public DefaultHttpResponse ( final HttpProtocolVersion version , final int status , 
 - final ImmutableMap < String , String > headers , final MessageContent content ) { 
 - this . version = version ; 
 - this . headers = headers ; 
 - this . content = content ; 
 + final ImmutableMap < String , String > headers , 
 + final MessageContent content ) { 
 + super ( version , content , headers ) ; 
 this . status = status ; 
 } 
 
 - public HttpProtocolVersion getVersion ( ) { 
 - return version ; 
 - } 
 - 
 - @ Override 
 - public MessageContent getContent ( ) { 
 - return content ; 
 - } 
 - 
 - public ImmutableMap < String , String > getHeaders ( ) { 
 - return this . headers ; 
 - } 
 - 
 @ Override 
 public int getStatus ( ) { 
 return status ;
