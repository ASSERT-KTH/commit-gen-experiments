BLEU SCORE: 0.8633400213704505

TEST MSG: added test for post event with path resource content
GENERATED MSG: added test for post event with path resource

TEST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index 4cc501e . . 3246719 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 197 , 7 + 197 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> - public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource _ url ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( pathResource ( " template . url " ) , " content " ) ) ) ; <nl> @ @ - 213 , 6 + 213 , 22 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource _ content ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pathResource ( " foo . request " ) ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> index a5b8bd9 . . 4cc501e 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java <nl> @ @ - 140 , 7 + 140 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> running ( server , new Runnable ( ) { <nl> @ Override <nl> public void run ( ) throws Exception { <nl> - assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " target " ) ) , is ( " event " ) ) ; <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> } <nl> } ) ; <nl> <nl> @ @ - 197 , 6 + 197 , 22 @ @ public class MocoEventTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { <nl> + ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( pathResource ( " template . url " ) , " content " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { <nl> ResponseHandler handler = mock ( ResponseHandler . class ) ; <nl> server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ;

TEST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index 4cc501e . . 3246719 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 197 , 7 + 197 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 - public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { 
 + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource _ url ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( pathResource ( " template . url " ) , " content " ) ) ) ; 
 @ @ - 213 , 6 + 213 , 22 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource _ content ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( remoteUrl ( " / target " ) , pathResource ( " foo . request " ) ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 index a5b8bd9 . . 4cc501e 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoEventTest . java 
 @ @ - 140 , 7 + 140 , 7 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 running ( server , new Runnable ( ) { 
 @ Override 
 public void run ( ) throws Exception { 
 - assertThat ( helper . getWithHeader ( remoteUrl ( " / event " ) , ImmutableMultimap . of ( " foo " , " target " ) ) , is ( " event " ) ) ; 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 } 
 } ) ; 
 
 @ @ - 197 , 6 + 197 , 22 @ @ public class MocoEventTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ send _ post _ request _ to _ target _ on _ complete _ with _ path _ resource ( ) throws Exception { 
 + ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 + server . request ( by ( uri ( " / target " ) ) ) . response ( handler ) ; 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( pathResource ( " template . url " ) , " content " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . get ( remoteUrl ( " / event " ) ) , is ( " event " ) ) ; 
 + } 
 + } ) ; 
 + 
 + verify ( handler ) . writeToResponse ( Matchers . < SessionContext > anyObject ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void should _ send _ post _ request _ to _ target _ on _ complete ( ) throws Exception { 
 ResponseHandler handler = mock ( ResponseHandler . class ) ; 
 server . request ( and ( by ( uri ( " / target " ) ) , by ( " content " ) ) ) . response ( handler ) ;
