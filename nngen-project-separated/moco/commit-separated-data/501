BLEU SCORE: 0.027611988917697356

TEST MSG: used http method for default http request builder
GENERATED MSG: renamed DefaultHttpRequest to DumpHttpRequest

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> index a27bfea . . ab0fb09 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return builder ( ) <nl> . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) <nl> . withHeaders ( collectHeaders ( request . headers ( ) ) ) <nl> - . withMethod ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) <nl> + . withMethod ( HttpMethod . valueOf ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) ) <nl> . withUri ( decoder . path ( ) ) <nl> . withQueries ( queries ) <nl> . withContent ( toMessageContent ( request ) ) <nl> @ @ - 218 , 8 + 218 , 8 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http <nl> return this ; <nl> } <nl> <nl> - public Builder withMethod ( final String method ) { <nl> - this . method = HttpMethod . valueOf ( method . toUpperCase ( ) ) ; <nl> + public Builder withMethod ( final HttpMethod method ) { <nl> + this . method = method ; <nl> return this ; <nl> } <nl> <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> index 1fa5461 . . 178ee9f 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> + import com . github . dreamhead . moco . HttpMethod ; <nl> import com . github . dreamhead . moco . HttpProtocolVersion ; <nl> import com . github . dreamhead . moco . HttpRequest ; <nl> import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> @ @ - 16 , 7 + 17 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 29 , 7 + 30 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 37 , 7 + 38 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest another = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " different " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 50 , 7 + 51 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withUri ( " / foo " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> @ @ - 59 , 7 + 60 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest another = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withUri ( " / bar " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> @ @ - 73 , 14 + 74 , 14 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> <nl> HttpRequest failover = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 93 , 7 + 94 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest request = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ; <nl> @ @ - 101 , 7 + 102 , 7 @ @ public class HttpRequestMatcherTest { <nl> HttpRequest failover = DefaultHttpRequest . builder ( ) <nl> . withUri ( " / uri " ) <nl> . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) <nl> - . withMethod ( " POST " ) <nl> + . withMethod ( HttpMethod . POST ) <nl> . withTextContent ( " proxy " ) <nl> . withHeaders ( of ( " Host " , " localhost : 12306 " ) ) <nl> . build ( ) ;
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> index 8a88c7c . . 6c41daa 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import com . fasterxml . jackson . databind . JsonMappingException ; <nl> import com . fasterxml . jackson . databind . ObjectMapper ; <nl> import com . fasterxml . jackson . databind . ObjectWriter ; <nl> import com . fasterxml . jackson . databind . type . TypeFactory ; <nl> - import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> + import com . github . dreamhead . moco . model . DumpHttpRequest ; <nl> import com . github . dreamhead . moco . model . MessageFactory ; <nl> import com . github . dreamhead . moco . model . Response ; <nl> import com . github . dreamhead . moco . model . Session ; <nl> @ @ - 88 , 7 + 88 , 7 @ @ public class DefaultFailover implements Failover { <nl> } <nl> <nl> private Response failoverResponse ( FullHttpRequest request ) { <nl> - final DefaultHttpRequest dumpedRequest = MessageFactory . createRequest ( request ) ; <nl> + final DumpHttpRequest dumpedRequest = MessageFactory . createRequest ( request ) ; <nl> ImmutableList < Session > sessions = restoreSessions ( this . file ) ; <nl> final Optional < Session > session = tryFind ( sessions , isForRequest ( dumpedRequest ) ) ; <nl> if ( session . isPresent ( ) ) { <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class DefaultFailover implements Failover { <nl> throw new RuntimeException ( " no failover response found " ) ; <nl> } <nl> <nl> - private Predicate < Session > isForRequest ( final DefaultHttpRequest dumpedRequest ) { <nl> + private Predicate < Session > isForRequest ( final DumpHttpRequest dumpedRequest ) { <nl> return new Predicate < Session > ( ) { <nl> @ Override <nl> public boolean apply ( Session session ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> deleted file mode 100644 <nl> index ab84636 . . 0000000 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java <nl> + + + / dev / null <nl> @ @ - 1 , 64 + 0 , 0 @ @ <nl> - package com . github . dreamhead . moco . model ; <nl> - <nl> - import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> - import com . github . dreamhead . moco . HttpRequest ; <nl> - import com . google . common . base . Objects ; <nl> - <nl> - import java . util . Map ; <nl> - <nl> - import static com . google . common . collect . Maps . newHashMap ; <nl> - <nl> - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> - public class DefaultHttpRequest extends Message implements HttpRequest { <nl> - private Map < String , String > queries = newHashMap ( ) ; <nl> - private String method ; <nl> - private String uri ; <nl> - <nl> - public void addQuery ( String key , String value ) { <nl> - this . queries . put ( key , value ) ; <nl> - } <nl> - <nl> - public void setUri ( String uri ) { <nl> - this . uri = uri ; <nl> - } <nl> - <nl> - @ Override <nl> - public String getUri ( ) { <nl> - return uri ; <nl> - } <nl> - <nl> - public Map < String , String > getQueries ( ) { <nl> - return queries ; <nl> - } <nl> - <nl> - public void setMethod ( String method ) { <nl> - this . method = method ; <nl> - } <nl> - <nl> - public String getMethod ( ) { <nl> - return method ; <nl> - } <nl> - <nl> - public boolean match ( DefaultHttpRequest that ) { <nl> - return super . match ( that ) & & doMatch ( method , that . method ) <nl> - & & doMatch ( queries , that . queries ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) { <nl> - return Objects . hashCode ( super . hashCode ( ) , queries , method ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) { <nl> - return Objects . toStringHelper ( DefaultHttpRequest . class ) <nl> - . omitNullValues ( ) <nl> - . add ( " uri " , uri ) <nl> - . add ( " version " , version ) <nl> - . add ( " queries " , queries ) <nl> - . add ( " method " , method ) <nl> - . add ( " headers " , headers ) <nl> - . add ( " content " , content ) <nl> - . toString ( ) ; <nl> - } <nl> - } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java <nl> new file mode 100644 <nl> index 0000000 . . c50d76e <nl> - - - / dev / null <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + package com . github . dreamhead . moco . model ; <nl> + <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . HttpRequest ; <nl> + import com . google . common . base . Objects ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + import static com . google . common . collect . Maps . newHashMap ; <nl> + <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> + public class DumpHttpRequest extends Message implements HttpRequest { <nl> + private Map < String , String > queries = newHashMap ( ) ; <nl> + private String method ; <nl> + private String uri ; <nl> + <nl> + public void addQuery ( String key , String value ) { <nl> + this . queries . put ( key , value ) ; <nl> + } <nl> + <nl> + public void setUri ( String uri ) { <nl> + this . uri = uri ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getUri ( ) { <nl> + return uri ; <nl> + } <nl> + <nl> + public Map < String , String > getQueries ( ) { <nl> + return queries ; <nl> + } <nl> + <nl> + public void setMethod ( String method ) { <nl> + this . method = method ; <nl> + } <nl> + <nl> + public String getMethod ( ) { <nl> + return method ; <nl> + } <nl> + <nl> + public boolean match ( DumpHttpRequest that ) { <nl> + return super . match ( that ) & & doMatch ( method , that . method ) <nl> + & & doMatch ( queries , that . queries ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) { <nl> + return Objects . hashCode ( super . hashCode ( ) , queries , method ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return Objects . toStringHelper ( DumpHttpRequest . class ) <nl> + . omitNullValues ( ) <nl> + . add ( " uri " , uri ) <nl> + . add ( " version " , version ) <nl> + . add ( " queries " , queries ) <nl> + . add ( " method " , method ) <nl> + . add ( " headers " , headers ) <nl> + . add ( " content " , content ) <nl> + . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java <nl> index aec2361 . . 9e7921d 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java <nl> @ @ - 15 , 8 + 15 , 8 @ @ public class MessageFactory { <nl> } <nl> } <nl> <nl> - public static DefaultHttpRequest createRequest ( FullHttpRequest request ) { <nl> - DefaultHttpRequest dumpedRequest = new DefaultHttpRequest ( ) ; <nl> + public static DumpHttpRequest createRequest ( FullHttpRequest request ) { <nl> + DumpHttpRequest dumpedRequest = new DumpHttpRequest ( ) ; <nl> dumpedRequest . setVersion ( request . getProtocolVersion ( ) . text ( ) ) ; <nl> dumpedRequest . setUri ( request . getUri ( ) ) ; <nl> setContent ( request , dumpedRequest ) ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java <nl> index 8cf2514 . . 3d5ea09 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java <nl> @ @ - 1 , 14 + 1 , 14 @ @ <nl> package com . github . dreamhead . moco . model ; <nl> <nl> public class Session { <nl> - private DefaultHttpRequest request ; <nl> + private DumpHttpRequest request ; <nl> private Response response ; <nl> <nl> - public DefaultHttpRequest getRequest ( ) { <nl> + public DumpHttpRequest getRequest ( ) { <nl> return request ; <nl> } <nl> <nl> - public void setRequest ( DefaultHttpRequest request ) { <nl> + public void setRequest ( DumpHttpRequest request ) { <nl> this . request = request ; <nl> } <nl> <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class Session { <nl> this . response = response ; <nl> } <nl> <nl> - public static Session newSession ( DefaultHttpRequest request , Response response ) { <nl> + public static Session newSession ( DumpHttpRequest request , Response response ) { <nl> Session session = new Session ( ) ; <nl> session . setRequest ( request ) ; <nl> session . setResponse ( response ) ; <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java <nl> index 89f25e8 . . 8b1d8b6 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco . handler . failover ; <nl> <nl> - import com . github . dreamhead . moco . model . DefaultHttpRequest ; <nl> + import com . github . dreamhead . moco . model . DumpHttpRequest ; <nl> import org . junit . Test ; <nl> <nl> import static org . hamcrest . CoreMatchers . is ; <nl> @ @ - 9 , 7 + 9 , 7 @ @ import static org . junit . Assert . assertThat ; <nl> public class DefaultHttpRequestTest { <nl> @ Test <nl> public void should _ be _ match _ if _ request _ is _ same ( ) { <nl> - DefaultHttpRequest request = new DefaultHttpRequest ( ) ; <nl> + DumpHttpRequest request = new DumpHttpRequest ( ) ; <nl> request . setVersion ( " HTTP / 1 . 1 " ) ; <nl> request . setMethod ( " POST " ) ; <nl> request . setContent ( " proxy " ) ; <nl> @ @ - 21 , 14 + 21 , 14 @ @ public class DefaultHttpRequestTest { <nl> <nl> @ Test <nl> public void should _ be _ match _ if _ failover _ field _ is _ null ( ) { <nl> - DefaultHttpRequest request = new DefaultHttpRequest ( ) ; <nl> + DumpHttpRequest request = new DumpHttpRequest ( ) ; <nl> request . setVersion ( " HTTP / 1 . 1 " ) ; <nl> request . setMethod ( " POST " ) ; <nl> request . setContent ( " proxy " ) ; <nl> request . addHeader ( " Cookie " , " loggedIn = true " ) ; <nl> request . addHeader ( " Host " , " localhost : 12306 " ) ; <nl> <nl> - DefaultHttpRequest failover = new DefaultHttpRequest ( ) ; <nl> + DumpHttpRequest failover = new DumpHttpRequest ( ) ; <nl> failover . setVersion ( null ) ; <nl> failover . setMethod ( " POST " ) ; <nl> failover . setContent ( " proxy " ) ; <nl> @ @ - 40 , 14 + 40 , 14 @ @ public class DefaultHttpRequestTest { <nl> <nl> @ Test <nl> public void should _ be _ match _ even _ if _ target _ request _ has _ more _ headers ( ) { <nl> - DefaultHttpRequest request = new DefaultHttpRequest ( ) ; <nl> + DumpHttpRequest request = new DumpHttpRequest ( ) ; <nl> request . setVersion ( " HTTP / 1 . 1 " ) ; <nl> request . setMethod ( " POST " ) ; <nl> request . setContent ( " proxy " ) ; <nl> request . addHeader ( " Cookie " , " loggedIn = true " ) ; <nl> request . addHeader ( " Host " , " localhost : 12306 " ) ; <nl> <nl> - DefaultHttpRequest failover = new DefaultHttpRequest ( ) ; <nl> + DumpHttpRequest failover = new DumpHttpRequest ( ) ; <nl> failover . setVersion ( " HTTP / 1 . 1 " ) ; <nl> failover . setMethod ( " POST " ) ; <nl> failover . setContent ( " proxy " ) ;

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 index a27bfea . . ab0fb09 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 @ @ - 138 , 7 + 138 , 7 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 return builder ( ) 
 . withVersion ( HttpProtocolVersion . versionOf ( request . getProtocolVersion ( ) . text ( ) ) ) 
 . withHeaders ( collectHeaders ( request . headers ( ) ) ) 
 - . withMethod ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) 
 + . withMethod ( HttpMethod . valueOf ( request . getMethod ( ) . toString ( ) . toUpperCase ( ) ) ) 
 . withUri ( decoder . path ( ) ) 
 . withQueries ( queries ) 
 . withContent ( toMessageContent ( request ) ) 
 @ @ - 218 , 8 + 218 , 8 @ @ public final class DefaultHttpRequest extends DefaultHttpMessage implements Http 
 return this ; 
 } 
 
 - public Builder withMethod ( final String method ) { 
 - this . method = HttpMethod . valueOf ( method . toUpperCase ( ) ) ; 
 + public Builder withMethod ( final HttpMethod method ) { 
 + this . method = method ; 
 return this ; 
 } 
 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java 
 index 1fa5461 . . 178ee9f 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / HttpRequestMatcherTest . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . handler . failover ; 
 
 + import com . github . dreamhead . moco . HttpMethod ; 
 import com . github . dreamhead . moco . HttpProtocolVersion ; 
 import com . github . dreamhead . moco . HttpRequest ; 
 import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 @ @ - 16 , 7 + 17 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest request = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 . build ( ) ; 
 @ @ - 29 , 7 + 30 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest request = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 . build ( ) ; 
 @ @ - 37 , 7 + 38 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest another = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " different " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 . build ( ) ; 
 @ @ - 50 , 7 + 51 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest request = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withUri ( " / foo " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 @ @ - 59 , 7 + 60 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest another = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withUri ( " / bar " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 @ @ - 73 , 14 + 74 , 14 @ @ public class HttpRequestMatcherTest { 
 HttpRequest request = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 . build ( ) ; 
 
 HttpRequest failover = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 . build ( ) ; 
 @ @ - 93 , 7 + 94 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest request = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withHeaders ( of ( " Cookie " , " loggedIn = true " , " Host " , " localhost : 12306 " ) ) 
 . build ( ) ; 
 @ @ - 101 , 7 + 102 , 7 @ @ public class HttpRequestMatcherTest { 
 HttpRequest failover = DefaultHttpRequest . builder ( ) 
 . withUri ( " / uri " ) 
 . withVersion ( HttpProtocolVersion . VERSION _ 1 _ 1 ) 
 - . withMethod ( " POST " ) 
 + . withMethod ( HttpMethod . POST ) 
 . withTextContent ( " proxy " ) 
 . withHeaders ( of ( " Host " , " localhost : 12306 " ) ) 
 . build ( ) ;

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 index 8a88c7c . . 6c41daa 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / handler / failover / DefaultFailover . java 
 @ @ - 4 , 7 + 4 , 7 @ @ import com . fasterxml . jackson . databind . JsonMappingException ; 
 import com . fasterxml . jackson . databind . ObjectMapper ; 
 import com . fasterxml . jackson . databind . ObjectWriter ; 
 import com . fasterxml . jackson . databind . type . TypeFactory ; 
 - import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 + import com . github . dreamhead . moco . model . DumpHttpRequest ; 
 import com . github . dreamhead . moco . model . MessageFactory ; 
 import com . github . dreamhead . moco . model . Response ; 
 import com . github . dreamhead . moco . model . Session ; 
 @ @ - 88 , 7 + 88 , 7 @ @ public class DefaultFailover implements Failover { 
 } 
 
 private Response failoverResponse ( FullHttpRequest request ) { 
 - final DefaultHttpRequest dumpedRequest = MessageFactory . createRequest ( request ) ; 
 + final DumpHttpRequest dumpedRequest = MessageFactory . createRequest ( request ) ; 
 ImmutableList < Session > sessions = restoreSessions ( this . file ) ; 
 final Optional < Session > session = tryFind ( sessions , isForRequest ( dumpedRequest ) ) ; 
 if ( session . isPresent ( ) ) { 
 @ @ - 99 , 7 + 99 , 7 @ @ public class DefaultFailover implements Failover { 
 throw new RuntimeException ( " no failover response found " ) ; 
 } 
 
 - private Predicate < Session > isForRequest ( final DefaultHttpRequest dumpedRequest ) { 
 + private Predicate < Session > isForRequest ( final DumpHttpRequest dumpedRequest ) { 
 return new Predicate < Session > ( ) { 
 @ Override 
 public boolean apply ( Session session ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 deleted file mode 100644 
 index ab84636 . . 0000000 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / DefaultHttpRequest . java 
 + + + / dev / null 
 @ @ - 1 , 64 + 0 , 0 @ @ 
 - package com . github . dreamhead . moco . model ; 
 - 
 - import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 - import com . github . dreamhead . moco . HttpRequest ; 
 - import com . google . common . base . Objects ; 
 - 
 - import java . util . Map ; 
 - 
 - import static com . google . common . collect . Maps . newHashMap ; 
 - 
 - @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 - public class DefaultHttpRequest extends Message implements HttpRequest { 
 - private Map < String , String > queries = newHashMap ( ) ; 
 - private String method ; 
 - private String uri ; 
 - 
 - public void addQuery ( String key , String value ) { 
 - this . queries . put ( key , value ) ; 
 - } 
 - 
 - public void setUri ( String uri ) { 
 - this . uri = uri ; 
 - } 
 - 
 - @ Override 
 - public String getUri ( ) { 
 - return uri ; 
 - } 
 - 
 - public Map < String , String > getQueries ( ) { 
 - return queries ; 
 - } 
 - 
 - public void setMethod ( String method ) { 
 - this . method = method ; 
 - } 
 - 
 - public String getMethod ( ) { 
 - return method ; 
 - } 
 - 
 - public boolean match ( DefaultHttpRequest that ) { 
 - return super . match ( that ) & & doMatch ( method , that . method ) 
 - & & doMatch ( queries , that . queries ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) { 
 - return Objects . hashCode ( super . hashCode ( ) , queries , method ) ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) { 
 - return Objects . toStringHelper ( DefaultHttpRequest . class ) 
 - . omitNullValues ( ) 
 - . add ( " uri " , uri ) 
 - . add ( " version " , version ) 
 - . add ( " queries " , queries ) 
 - . add ( " method " , method ) 
 - . add ( " headers " , headers ) 
 - . add ( " content " , content ) 
 - . toString ( ) ; 
 - } 
 - } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java 
 new file mode 100644 
 index 0000000 . . c50d76e 
 - - - / dev / null 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / DumpHttpRequest . java 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + package com . github . dreamhead . moco . model ; 
 + 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 + import com . github . dreamhead . moco . HttpRequest ; 
 + import com . google . common . base . Objects ; 
 + 
 + import java . util . Map ; 
 + 
 + import static com . google . common . collect . Maps . newHashMap ; 
 + 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 + public class DumpHttpRequest extends Message implements HttpRequest { 
 + private Map < String , String > queries = newHashMap ( ) ; 
 + private String method ; 
 + private String uri ; 
 + 
 + public void addQuery ( String key , String value ) { 
 + this . queries . put ( key , value ) ; 
 + } 
 + 
 + public void setUri ( String uri ) { 
 + this . uri = uri ; 
 + } 
 + 
 + @ Override 
 + public String getUri ( ) { 
 + return uri ; 
 + } 
 + 
 + public Map < String , String > getQueries ( ) { 
 + return queries ; 
 + } 
 + 
 + public void setMethod ( String method ) { 
 + this . method = method ; 
 + } 
 + 
 + public String getMethod ( ) { 
 + return method ; 
 + } 
 + 
 + public boolean match ( DumpHttpRequest that ) { 
 + return super . match ( that ) & & doMatch ( method , that . method ) 
 + & & doMatch ( queries , that . queries ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) { 
 + return Objects . hashCode ( super . hashCode ( ) , queries , method ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return Objects . toStringHelper ( DumpHttpRequest . class ) 
 + . omitNullValues ( ) 
 + . add ( " uri " , uri ) 
 + . add ( " version " , version ) 
 + . add ( " queries " , queries ) 
 + . add ( " method " , method ) 
 + . add ( " headers " , headers ) 
 + . add ( " content " , content ) 
 + . toString ( ) ; 
 + } 
 + } 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java 
 index aec2361 . . 9e7921d 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / MessageFactory . java 
 @ @ - 15 , 8 + 15 , 8 @ @ public class MessageFactory { 
 } 
 } 
 
 - public static DefaultHttpRequest createRequest ( FullHttpRequest request ) { 
 - DefaultHttpRequest dumpedRequest = new DefaultHttpRequest ( ) ; 
 + public static DumpHttpRequest createRequest ( FullHttpRequest request ) { 
 + DumpHttpRequest dumpedRequest = new DumpHttpRequest ( ) ; 
 dumpedRequest . setVersion ( request . getProtocolVersion ( ) . text ( ) ) ; 
 dumpedRequest . setUri ( request . getUri ( ) ) ; 
 setContent ( request , dumpedRequest ) ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java b / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java 
 index 8cf2514 . . 3d5ea09 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / model / Session . java 
 @ @ - 1 , 14 + 1 , 14 @ @ 
 package com . github . dreamhead . moco . model ; 
 
 public class Session { 
 - private DefaultHttpRequest request ; 
 + private DumpHttpRequest request ; 
 private Response response ; 
 
 - public DefaultHttpRequest getRequest ( ) { 
 + public DumpHttpRequest getRequest ( ) { 
 return request ; 
 } 
 
 - public void setRequest ( DefaultHttpRequest request ) { 
 + public void setRequest ( DumpHttpRequest request ) { 
 this . request = request ; 
 } 
 
 @ @ - 20 , 7 + 20 , 7 @ @ public class Session { 
 this . response = response ; 
 } 
 
 - public static Session newSession ( DefaultHttpRequest request , Response response ) { 
 + public static Session newSession ( DumpHttpRequest request , Response response ) { 
 Session session = new Session ( ) ; 
 session . setRequest ( request ) ; 
 session . setResponse ( response ) ; 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java 
 index 89f25e8 . . 8b1d8b6 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / handler / failover / DefaultHttpRequestTest . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package com . github . dreamhead . moco . handler . failover ; 
 
 - import com . github . dreamhead . moco . model . DefaultHttpRequest ; 
 + import com . github . dreamhead . moco . model . DumpHttpRequest ; 
 import org . junit . Test ; 
 
 import static org . hamcrest . CoreMatchers . is ; 
 @ @ - 9 , 7 + 9 , 7 @ @ import static org . junit . Assert . assertThat ; 
 public class DefaultHttpRequestTest { 
 @ Test 
 public void should _ be _ match _ if _ request _ is _ same ( ) { 
 - DefaultHttpRequest request = new DefaultHttpRequest ( ) ; 
 + DumpHttpRequest request = new DumpHttpRequest ( ) ; 
 request . setVersion ( " HTTP / 1 . 1 " ) ; 
 request . setMethod ( " POST " ) ; 
 request . setContent ( " proxy " ) ; 
 @ @ - 21 , 14 + 21 , 14 @ @ public class DefaultHttpRequestTest { 
 
 @ Test 
 public void should _ be _ match _ if _ failover _ field _ is _ null ( ) { 
 - DefaultHttpRequest request = new DefaultHttpRequest ( ) ; 
 + DumpHttpRequest request = new DumpHttpRequest ( ) ; 
 request . setVersion ( " HTTP / 1 . 1 " ) ; 
 request . setMethod ( " POST " ) ; 
 request . setContent ( " proxy " ) ; 
 request . addHeader ( " Cookie " , " loggedIn = true " ) ; 
 request . addHeader ( " Host " , " localhost : 12306 " ) ; 
 
 - DefaultHttpRequest failover = new DefaultHttpRequest ( ) ; 
 + DumpHttpRequest failover = new DumpHttpRequest ( ) ; 
 failover . setVersion ( null ) ; 
 failover . setMethod ( " POST " ) ; 
 failover . setContent ( " proxy " ) ; 
 @ @ - 40 , 14 + 40 , 14 @ @ public class DefaultHttpRequestTest { 
 
 @ Test 
 public void should _ be _ match _ even _ if _ target _ request _ has _ more _ headers ( ) { 
 - DefaultHttpRequest request = new DefaultHttpRequest ( ) ; 
 + DumpHttpRequest request = new DumpHttpRequest ( ) ; 
 request . setVersion ( " HTTP / 1 . 1 " ) ; 
 request . setMethod ( " POST " ) ; 
 request . setContent ( " proxy " ) ; 
 request . addHeader ( " Cookie " , " loggedIn = true " ) ; 
 request . addHeader ( " Host " , " localhost : 12306 " ) ; 
 
 - DefaultHttpRequest failover = new DefaultHttpRequest ( ) ; 
 + DumpHttpRequest failover = new DumpHttpRequest ( ) ; 
 failover . setVersion ( " HTTP / 1 . 1 " ) ; 
 failover . setMethod ( " POST " ) ; 
 failover . setContent ( " proxy " ) ;
