BLEU SCORE: 0.07160476144948855

TEST MSG: added seq to json api
GENERATED MSG: introduced sub resource to standalone rest setting

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 4d7a22f . . 73b3398 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 205 , 7 + 205 , 7 @ @ public final class Moco { <nl> } <nl> <nl> public static < T > RequestMatcher exist ( final RequestExtractor < T > extractor ) { <nl> - return new ExistMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) ) ; <nl> + return new ExistMatcher < > ( checkNotNull ( extractor , " Extractor should not be null " ) ) ; <nl> } <nl> <nl> public static RequestMatcher startsWith ( final Resource resource ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> index 04ffe15 . . ed67262 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java <nl> @ @ - 16 , 17 + 16 , 19 @ @ import com . google . common . collect . Maps ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . nio . charset . Charset ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import static com . github . dreamhead . moco . Moco . attachment ; <nl> + import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . status ; <nl> import static com . github . dreamhead . moco . Moco . template ; <nl> import static com . github . dreamhead . moco . Moco . text ; <nl> - import static com . github . dreamhead . moco . Moco . json ; <nl> import static com . github . dreamhead . moco . Moco . var ; <nl> import static com . github . dreamhead . moco . Moco . version ; <nl> import static com . github . dreamhead . moco . Moco . with ; <nl> import static com . github . dreamhead . moco . handler . AndResponseHandler . and ; <nl> + import static com . github . dreamhead . moco . parser . model . Seqs . toResponseHandlers ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . ImmutableMap . copyOf ; <nl> import static com . google . common . collect . ImmutableSet . of ; <nl> @ @ - 105 , 6 + 107 , 11 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH <nl> return attachment ( attachment . getFilename ( ) , resourceFrom ( attachment ) ) ; <nl> } <nl> <nl> + if ( " seq " . equalsIgnoreCase ( name ) ) { <nl> + List < ResponseSetting > sequence = ( List < ResponseSetting > ) value ; <nl> + return Moco . seq ( toResponseHandlers ( sequence ) ) ; <nl> + } <nl> + <nl> throw new IllegalArgumentException ( format ( " unknown field [ % s ] " , name ) ) ; <nl> } <nl> <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> index 195e027 . . 658d8b8 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; <nl> import com . google . common . base . MoreObjects ; <nl> <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> @ @ - 19 , 6 + 20 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { <nl> <nl> private TextContainer version ; <nl> private AttachmentSetting attachment ; <nl> + private List < ResponseSetting > seq ; <nl> <nl> public ResponseSetting asResponseSetting ( ) { <nl> ResponseSetting responseSetting = new ResponseSetting ( ) ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java <nl> new file mode 100644 <nl> index 0000000 . . 45f1c63 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . github . dreamhead . moco . ResponseHandler ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import static com . google . common . collect . Lists . newArrayList ; <nl> + <nl> + public class Seqs { <nl> + public static ResponseHandler [ ] toResponseHandlers ( final List < ResponseSetting > settings ) { <nl> + List < ResponseHandler > handlers = newArrayList ( ) ; <nl> + for ( ResponseSetting setting : settings ) { <nl> + handlers . add ( setting . getResponseHandler ( ) ) ; <nl> + } <nl> + <nl> + return handlers . toArray ( new ResponseHandler [ 0 ] ) ; <nl> + } <nl> + <nl> + private Seqs ( ) { <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java <nl> new file mode 100644 <nl> index 0000000 . . 703a7d8 <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package com . github . dreamhead . moco ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; <nl> + import static org . hamcrest . CoreMatchers . is ; <nl> + import static org . junit . Assert . assertThat ; <nl> + <nl> + public class MocoSeqStandaloneTest extends AbstractMocoStandaloneTest { <nl> + @ Test <nl> + public void should _ work _ well ( ) throws IOException { <nl> + runWithConfiguration ( " seq . json " ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " bar " ) ) ; <nl> + assertThat ( helper . get ( root ( ) ) , is ( " bar " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / test / resources / seq . json b / moco - runner / src / test / resources / seq . json <nl> new file mode 100644 <nl> index 0000000 . . 21ecd6c <nl> - - - / dev / null <nl> + + + b / moco - runner / src / test / resources / seq . json <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + [ <nl> + { <nl> + " description " : " any response " , <nl> + " response " : { <nl> + " seq " : [ <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + { <nl> + " text " : " bar " <nl> + } <nl> + ] <nl> + } <nl> + } <nl> + ] <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java <nl> index 9df3fb0 . . 81e7360 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java <nl> @ @ - 1 , 6 + 1 , 10 @ @ <nl> package com . github . dreamhead . moco . internal ; <nl> <nl> - import com . github . dreamhead . moco . * ; <nl> + import com . github . dreamhead . moco . MocoException ; <nl> + import com . github . dreamhead . moco . MocoMonitor ; <nl> + import com . github . dreamhead . moco . SocketRequest ; <nl> + import com . github . dreamhead . moco . SocketResponse ; <nl> + import com . github . dreamhead . moco . SocketResponseSetting ; <nl> import com . github . dreamhead . moco . model . DefaultSocketRequest ; <nl> import com . github . dreamhead . moco . model . DefaultSocketResponse ; <nl> import com . github . dreamhead . moco . model . MessageContent ; <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> index 57339e1 . . 09be482 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java <nl> @ @ - 1 , 6 + 1 , 5 @ @ <nl> package com . github . dreamhead . moco . rest . builder ; <nl> <nl> - import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . RestIdMatcher ; <nl> import com . github . dreamhead . moco . RestSetting ; <nl> import com . github . dreamhead . moco . rest . SubResourceSetting ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> index 83c8145 . . 9bf3918 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java <nl> @ @ - 7 , 6 + 7 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import java . util . List ; <nl> <nl> import static com . github . dreamhead . moco . parser . model . RestBaseSetting . toSetting ; <nl> + import static com . github . dreamhead . moco . parser . model . RestSubResourceSetting . toSubResourceSetting ; <nl> import static com . google . common . collect . FluentIterable . from ; <nl> import static com . google . common . collect . Iterables . concat ; <nl> import static com . google . common . collect . Iterables . toArray ; <nl> @ @ - 20 , 6 + 21 , 7 @ @ public class ResourceSetting { <nl> private List < RestDeleteSetting > delete ; <nl> private List < RestHeadSetting > head ; <nl> private List < RestPatchSetting > patch ; <nl> + private List < RestSubResourceSetting > resource ; <nl> <nl> public String getName ( ) { <nl> return name ; <nl> @ @ - 28 , 7 + 30 , 7 @ @ public class ResourceSetting { <nl> public RestSetting [ ] getSettings ( ) { <nl> return toArray ( concat ( asRestSetting ( get ) , asRestSetting ( post ) , <nl> asRestSetting ( put ) , asRestSetting ( delete ) , <nl> - asRestSetting ( head ) , asRestSetting ( patch ) ) , <nl> + asRestSetting ( head ) , asRestSetting ( patch ) , asSubRestSetting ( resource ) ) , <nl> RestSetting . class ) ; <nl> } <nl> <nl> @ @ - 39 , 4 + 41 , 13 @ @ public class ResourceSetting { <nl> <nl> return from ( setting ) . transform ( toSetting ( ) ) ; <nl> } <nl> + <nl> + private Iterable < RestSetting > asSubRestSetting ( final List < RestSubResourceSetting > setting ) { <nl> + if ( setting = = null | | setting . isEmpty ( ) ) { <nl> + return ImmutableList . of ( ) ; <nl> + } <nl> + <nl> + return from ( setting ) . transform ( toSubResourceSetting ( ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> new file mode 100644 <nl> index 0000000 . . 6f5dcfb <nl> - - - / dev / null <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package com . github . dreamhead . moco . parser . model ; <nl> + <nl> + import com . fasterxml . jackson . annotation . JsonAutoDetect ; <nl> + import com . github . dreamhead . moco . MocoRest ; <nl> + import com . github . dreamhead . moco . RestSetting ; <nl> + import com . google . common . base . Function ; <nl> + <nl> + import java . util . Arrays ; <nl> + <nl> + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) <nl> + public class RestSubResourceSetting extends ResourceSetting { <nl> + private String id ; <nl> + <nl> + public static Function < RestSubResourceSetting , RestSetting > toSubResourceSetting ( ) { <nl> + return new Function < RestSubResourceSetting , RestSetting > ( ) { <nl> + @ Override <nl> + public RestSetting apply ( final RestSubResourceSetting input ) { <nl> + RestSetting [ ] settings = input . getSettings ( ) ; <nl> + return MocoRest . id ( input . id ) . name ( input . getName ( ) ) . settings ( settings [ 0 ] , <nl> + Arrays . copyOfRange ( settings , 1 , settings . length ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> index a2cff73 . . f94b468 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java <nl> @ @ - 7 , 7 + 7 , 6 @ @ import com . github . dreamhead . moco . HttpServer ; <nl> import com . github . dreamhead . moco . HttpsCertificate ; <nl> import com . github . dreamhead . moco . MocoConfig ; <nl> import com . github . dreamhead . moco . MocoEventTrigger ; <nl> - import com . github . dreamhead . moco . MocoRest ; <nl> import com . github . dreamhead . moco . RequestMatcher ; <nl> import com . github . dreamhead . moco . ResponseHandler ; <nl> import com . github . dreamhead . moco . SocketServer ; <nl> diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> index 92c8b63 . . 7490da6 100644 <nl> - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java <nl> @ @ - 113 , 6 + 113 , 18 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { <nl> assertThat ( plain2 . message , is ( " any " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void should _ get _ sub _ resource ( ) throws IOException { <nl> + runWithConfiguration ( " rest / rest . json " ) ; <nl> + <nl> + org . apache . http . HttpResponse response = helper . getResponseWithHeader ( remoteUrl ( " / targets / 1 / subs / 1 " ) , <nl> + of ( HttpHeaders . CONTENT _ TYPE , " application / json " ) ) ; <nl> + Plain plain = asPlain ( response ) ; <nl> + <nl> + assertThat ( plain . code , is ( 3 ) ) ; <nl> + assertThat ( plain . message , is ( " sub " ) ) ; <nl> + } <nl> + <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> public void should _ throw _ exception _ while _ no _ response _ found _ in _ rest _ setting ( ) { <nl> runWithConfiguration ( " rest / rest _ error _ without _ response . json " ) ; <nl> diff - - git a / moco - runner / src / test / resources / rest / rest . json b / moco - runner / src / test / resources / rest / rest . json <nl> index 6e1706c . . fd5a6ae 100644 <nl> - - - a / moco - runner / src / test / resources / rest / rest . json <nl> + + + b / moco - runner / src / test / resources / rest / rest . json <nl> @ @ - 71 , 6 + 71 , 23 @ @ <nl> " text " : " patch result " <nl> } <nl> } <nl> + ] , <nl> + " resource " : [ <nl> + { <nl> + " id " : " 1 " , <nl> + " name " : " subs " , <nl> + " get " : [ <nl> + { <nl> + " id " : " 1 " , <nl> + " response " : { <nl> + " json " : { <nl> + " code " : 3 , <nl> + " message " : " sub " <nl> + } <nl> + } <nl> + } <nl> + ] <nl> + } <nl> ] <nl> } <nl> } ,

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 4d7a22f . . 73b3398 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 205 , 7 + 205 , 7 @ @ public final class Moco { 
 } 
 
 public static < T > RequestMatcher exist ( final RequestExtractor < T > extractor ) { 
 - return new ExistMatcher < T > ( checkNotNull ( extractor , " Extractor should not be null " ) ) ; 
 + return new ExistMatcher < > ( checkNotNull ( extractor , " Extractor should not be null " ) ) ; 
 } 
 
 public static RequestMatcher startsWith ( final Resource resource ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 index 04ffe15 . . ed67262 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / DynamicResponseHandlerFactory . java 
 @ @ - 16 , 17 + 16 , 19 @ @ import com . google . common . collect . Maps ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 import java . nio . charset . Charset ; 
 + import java . util . List ; 
 import java . util . Map ; 
 
 import static com . github . dreamhead . moco . Moco . attachment ; 
 + import static com . github . dreamhead . moco . Moco . json ; 
 import static com . github . dreamhead . moco . Moco . status ; 
 import static com . github . dreamhead . moco . Moco . template ; 
 import static com . github . dreamhead . moco . Moco . text ; 
 - import static com . github . dreamhead . moco . Moco . json ; 
 import static com . github . dreamhead . moco . Moco . var ; 
 import static com . github . dreamhead . moco . Moco . version ; 
 import static com . github . dreamhead . moco . Moco . with ; 
 import static com . github . dreamhead . moco . handler . AndResponseHandler . and ; 
 + import static com . github . dreamhead . moco . parser . model . Seqs . toResponseHandlers ; 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . ImmutableMap . copyOf ; 
 import static com . google . common . collect . ImmutableSet . of ; 
 @ @ - 105 , 6 + 107 , 11 @ @ public class DynamicResponseHandlerFactory extends Dynamics implements ResponseH 
 return attachment ( attachment . getFilename ( ) , resourceFrom ( attachment ) ) ; 
 } 
 
 + if ( " seq " . equalsIgnoreCase ( name ) ) { 
 + List < ResponseSetting > sequence = ( List < ResponseSetting > ) value ; 
 + return Moco . seq ( toResponseHandlers ( sequence ) ) ; 
 + } 
 + 
 throw new IllegalArgumentException ( format ( " unknown field [ % s ] " , name ) ) ; 
 } 
 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 index 195e027 . . 658d8b8 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResponseSetting . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . parser . ResponseHandlerFactory ; 
 import com . google . common . base . MoreObjects ; 
 
 + import java . util . List ; 
 import java . util . Map ; 
 
 @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 @ @ - 19 , 6 + 20 , 7 @ @ public class ResponseSetting extends BaseResourceSetting { 
 
 private TextContainer version ; 
 private AttachmentSetting attachment ; 
 + private List < ResponseSetting > seq ; 
 
 public ResponseSetting asResponseSetting ( ) { 
 ResponseSetting responseSetting = new ResponseSetting ( ) ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java 
 new file mode 100644 
 index 0000000 . . 45f1c63 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / Seqs . java 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + import com . github . dreamhead . moco . ResponseHandler ; 
 + 
 + import java . util . List ; 
 + 
 + import static com . google . common . collect . Lists . newArrayList ; 
 + 
 + public class Seqs { 
 + public static ResponseHandler [ ] toResponseHandlers ( final List < ResponseSetting > settings ) { 
 + List < ResponseHandler > handlers = newArrayList ( ) ; 
 + for ( ResponseSetting setting : settings ) { 
 + handlers . add ( setting . getResponseHandler ( ) ) ; 
 + } 
 + 
 + return handlers . toArray ( new ResponseHandler [ 0 ] ) ; 
 + } 
 + 
 + private Seqs ( ) { 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java 
 new file mode 100644 
 index 0000000 . . 703a7d8 
 - - - / dev / null 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoSeqStandaloneTest . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package com . github . dreamhead . moco ; 
 + 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + 
 + import static com . github . dreamhead . moco . helper . RemoteTestUtils . root ; 
 + import static org . hamcrest . CoreMatchers . is ; 
 + import static org . junit . Assert . assertThat ; 
 + 
 + public class MocoSeqStandaloneTest extends AbstractMocoStandaloneTest { 
 + @ Test 
 + public void should _ work _ well ( ) throws IOException { 
 + runWithConfiguration ( " seq . json " ) ; 
 + assertThat ( helper . get ( root ( ) ) , is ( " foo " ) ) ; 
 + assertThat ( helper . get ( root ( ) ) , is ( " bar " ) ) ; 
 + assertThat ( helper . get ( root ( ) ) , is ( " bar " ) ) ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / test / resources / seq . json b / moco - runner / src / test / resources / seq . json 
 new file mode 100644 
 index 0000000 . . 21ecd6c 
 - - - / dev / null 
 + + + b / moco - runner / src / test / resources / seq . json 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + [ 
 + { 
 + " description " : " any response " , 
 + " response " : { 
 + " seq " : [ 
 + { 
 + " text " : " foo " 
 + } , 
 + { 
 + " text " : " bar " 
 + } 
 + ] 
 + } 
 + } 
 + ] 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java 
 index 9df3fb0 . . 81e7360 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / MocoSocketHandler . java 
 @ @ - 1 , 6 + 1 , 10 @ @ 
 package com . github . dreamhead . moco . internal ; 
 
 - import com . github . dreamhead . moco . * ; 
 + import com . github . dreamhead . moco . MocoException ; 
 + import com . github . dreamhead . moco . MocoMonitor ; 
 + import com . github . dreamhead . moco . SocketRequest ; 
 + import com . github . dreamhead . moco . SocketResponse ; 
 + import com . github . dreamhead . moco . SocketResponseSetting ; 
 import com . github . dreamhead . moco . model . DefaultSocketRequest ; 
 import com . github . dreamhead . moco . model . DefaultSocketResponse ; 
 import com . github . dreamhead . moco . model . MessageContent ; 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java 
 index 57339e1 . . 09be482 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / rest / builder / ActualSubResourceSettingBuilder . java 
 @ @ - 1 , 6 + 1 , 5 @ @ 
 package com . github . dreamhead . moco . rest . builder ; 
 
 - import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . RestIdMatcher ; 
 import com . github . dreamhead . moco . RestSetting ; 
 import com . github . dreamhead . moco . rest . SubResourceSetting ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java 
 index 83c8145 . . 9bf3918 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / ResourceSetting . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import java . util . List ; 
 
 import static com . github . dreamhead . moco . parser . model . RestBaseSetting . toSetting ; 
 + import static com . github . dreamhead . moco . parser . model . RestSubResourceSetting . toSubResourceSetting ; 
 import static com . google . common . collect . FluentIterable . from ; 
 import static com . google . common . collect . Iterables . concat ; 
 import static com . google . common . collect . Iterables . toArray ; 
 @ @ - 20 , 6 + 21 , 7 @ @ public class ResourceSetting { 
 private List < RestDeleteSetting > delete ; 
 private List < RestHeadSetting > head ; 
 private List < RestPatchSetting > patch ; 
 + private List < RestSubResourceSetting > resource ; 
 
 public String getName ( ) { 
 return name ; 
 @ @ - 28 , 7 + 30 , 7 @ @ public class ResourceSetting { 
 public RestSetting [ ] getSettings ( ) { 
 return toArray ( concat ( asRestSetting ( get ) , asRestSetting ( post ) , 
 asRestSetting ( put ) , asRestSetting ( delete ) , 
 - asRestSetting ( head ) , asRestSetting ( patch ) ) , 
 + asRestSetting ( head ) , asRestSetting ( patch ) , asSubRestSetting ( resource ) ) , 
 RestSetting . class ) ; 
 } 
 
 @ @ - 39 , 4 + 41 , 13 @ @ public class ResourceSetting { 
 
 return from ( setting ) . transform ( toSetting ( ) ) ; 
 } 
 + 
 + private Iterable < RestSetting > asSubRestSetting ( final List < RestSubResourceSetting > setting ) { 
 + if ( setting = = null | | setting . isEmpty ( ) ) { 
 + return ImmutableList . of ( ) ; 
 + } 
 + 
 + return from ( setting ) . transform ( toSubResourceSetting ( ) ) ; 
 + } 
 + 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java 
 new file mode 100644 
 index 0000000 . . 6f5dcfb 
 - - - / dev / null 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / RestSubResourceSetting . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package com . github . dreamhead . moco . parser . model ; 
 + 
 + import com . fasterxml . jackson . annotation . JsonAutoDetect ; 
 + import com . github . dreamhead . moco . MocoRest ; 
 + import com . github . dreamhead . moco . RestSetting ; 
 + import com . google . common . base . Function ; 
 + 
 + import java . util . Arrays ; 
 + 
 + @ JsonAutoDetect ( fieldVisibility = JsonAutoDetect . Visibility . ANY ) 
 + public class RestSubResourceSetting extends ResourceSetting { 
 + private String id ; 
 + 
 + public static Function < RestSubResourceSetting , RestSetting > toSubResourceSetting ( ) { 
 + return new Function < RestSubResourceSetting , RestSetting > ( ) { 
 + @ Override 
 + public RestSetting apply ( final RestSubResourceSetting input ) { 
 + RestSetting [ ] settings = input . getSettings ( ) ; 
 + return MocoRest . id ( input . id ) . name ( input . getName ( ) ) . settings ( settings [ 0 ] , 
 + Arrays . copyOfRange ( settings , 1 , settings . length ) ) ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 index a2cff73 . . f94b468 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / parser / model / SessionSetting . java 
 @ @ - 7 , 7 + 7 , 6 @ @ import com . github . dreamhead . moco . HttpServer ; 
 import com . github . dreamhead . moco . HttpsCertificate ; 
 import com . github . dreamhead . moco . MocoConfig ; 
 import com . github . dreamhead . moco . MocoEventTrigger ; 
 - import com . github . dreamhead . moco . MocoRest ; 
 import com . github . dreamhead . moco . RequestMatcher ; 
 import com . github . dreamhead . moco . ResponseHandler ; 
 import com . github . dreamhead . moco . SocketServer ; 
 diff - - git a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 index 92c8b63 . . 7490da6 100644 
 - - - a / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 + + + b / moco - runner / src / test / java / com / github / dreamhead / moco / MocoRestStandaloneTest . java 
 @ @ - 113 , 6 + 113 , 18 @ @ public class MocoRestStandaloneTest extends AbstractMocoStandaloneTest { 
 assertThat ( plain2 . message , is ( " any " ) ) ; 
 } 
 
 + @ Test 
 + public void should _ get _ sub _ resource ( ) throws IOException { 
 + runWithConfiguration ( " rest / rest . json " ) ; 
 + 
 + org . apache . http . HttpResponse response = helper . getResponseWithHeader ( remoteUrl ( " / targets / 1 / subs / 1 " ) , 
 + of ( HttpHeaders . CONTENT _ TYPE , " application / json " ) ) ; 
 + Plain plain = asPlain ( response ) ; 
 + 
 + assertThat ( plain . code , is ( 3 ) ) ; 
 + assertThat ( plain . message , is ( " sub " ) ) ; 
 + } 
 + 
 @ Test ( expected = IllegalArgumentException . class ) 
 public void should _ throw _ exception _ while _ no _ response _ found _ in _ rest _ setting ( ) { 
 runWithConfiguration ( " rest / rest _ error _ without _ response . json " ) ; 
 diff - - git a / moco - runner / src / test / resources / rest / rest . json b / moco - runner / src / test / resources / rest / rest . json 
 index 6e1706c . . fd5a6ae 100644 
 - - - a / moco - runner / src / test / resources / rest / rest . json 
 + + + b / moco - runner / src / test / resources / rest / rest . json 
 @ @ - 71 , 6 + 71 , 23 @ @ 
 " text " : " patch result " 
 } 
 } 
 + ] , 
 + " resource " : [ 
 + { 
 + " id " : " 1 " , 
 + " name " : " subs " , 
 + " get " : [ 
 + { 
 + " id " : " 1 " , 
 + " response " : { 
 + " json " : { 
 + " code " : 3 , 
 + " message " : " sub " 
 + } 
 + } 
 + } 
 + ] 
 + } 
 ] 
 } 
 } ,
