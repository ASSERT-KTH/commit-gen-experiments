BLEU SCORE: 0.057079690340587526

TEST MSG: documented template for event action
GENERATED MSG: documented playback , template variables and global response settings

TEST DIFF (one line): diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 2977fdf . . a2f99f0 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 2035 , 20 + 2035 , 55 @ @ server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( template ( " http : / / localhost : 1230 <nl> <nl> ` ` ` json <nl> { <nl> - " request " : <nl> - { <nl> - " uri " : " / template - url " <nl> - } , <nl> - " response " : <nl> - { <nl> - " proxy " : <nl> - { <nl> - " url " : { <nl> - " template " : " http : / / localhost : 12306 / $ { req . queries [ ' foo ' ] } " <nl> - } <nl> + " request " : { <nl> + " uri " : " / proxy " <nl> + } , <nl> + " response " : { <nl> + " proxy " : { <nl> + " url " : { <nl> + " template " : " http : / / localhost : 12306 / $ { req . queries [ ' foo ' ] } " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> + # # # Template for Event Action <nl> + <nl> + Template also can ben applied to event action . Check out [ Event ] ( # event ) for more details about event . <nl> + <nl> + * Java <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / localhost : 12306 / target " ) , template ( " $ { target } " , of ( " target " , var ( " target " ) ) ) ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / event " <nl> + } , <nl> + " response " : { <nl> + " text " : " event " <nl> + } , <nl> + " on " : { <nl> + " complete " : { <nl> + " post " : { <nl> + " url " : " http : / / localhost : 12306 / target " , <nl> + " content " : { <nl> + " template " : { <nl> + " with " : " $ { target } " , <nl> + " vars " : { <nl> + " target " : " target " <nl> } <nl> + } <nl> } <nl> + } <nl> } <nl> + } <nl> + } <nl> ` ` ` <nl> <nl> # # Event
NEAREST DIFF (one line): diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md <nl> index 6941cd3 . . a1f9ba7 100644 <nl> - - - a / moco - doc / ReleaseNotes . md <nl> + + + b / moco - doc / ReleaseNotes . md <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - # Release 0 . 9 . 1 <nl> + # Release 0 . 9 . 1 ( 1 - Feb - 2014 ) <nl> # # Usage <nl> * ( Beta ) gmoco , moco groovy shell <nl> <nl> @ @ - 6 , 10 + 6 , 15 @ @ <nl> * log to record request <nl> * once for verifier <nl> * batch proxy <nl> + * proxy playback <nl> <nl> - # # # template <nl> + # # # Template <nl> * cookie <nl> * form <nl> + * template variables <nl> + <nl> + # # # Global Settings <nl> + * Response <nl> <nl> # # Implementation Details <nl> * Fixed " uri " in failover to remove query parameter . <nl> @ @ - 19 , 6 + 24 , 7 @ @ <nl> * Keep connect alive if request wants to keep alive <nl> * NPE for validating form / content in request hit <nl> * NPE for XPath matcher <nl> + * Wait server to shutdown completely <nl> <nl> # Release 0 . 9 ( 1 - Nov - 2013 ) <nl> <nl> @ @ - 47 , 6 + 53 , 7 @ @ <nl> # # APIs <nl> # # # Request <nl> * JSONPath <nl> + <nl> # # # Response <nl> # # # # Integration <nl> * proxy <nl> @ @ - 58 , 14 + 65 , 14 @ @ <nl> # # # # Misc Response <nl> * removed cache <nl> <nl> - # # # # template <nl> + # # # # Template <nl> * version <nl> * method <nl> * content <nl> * header <nl> * query <nl> <nl> - # # Settings <nl> + # # Global Settings <nl> * context <nl> * file root <nl> * environment <nl> diff - - git a / moco - doc / apis . md b / moco - doc / apis . md <nl> index 58666e3 . . af6a83e 100644 <nl> - - - a / moco - doc / apis . md <nl> + + + b / moco - doc / apis . md <nl> @ @ - 675 , 7 + 675 , 8 @ @ server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " ) ) ; <nl> <nl> Actually , proxy is more powerful than that . It can forward the whole request to the target url , including HTTP method , version , header , content etc . <nl> <nl> - Besides the basic functionality , proxy also support failover , for example : <nl> + # Failover <nl> + Besides the basic functionality , proxy also support failover , which means if remote server is not available temporarily , the server will know recovery from local configuration . <nl> <nl> * Java API <nl> <nl> @ @ - 705 , 6 + 706 , 33 @ @ Proxy will save request / response pair into your failover file . If the proxy targ <nl> <nl> As the file suffix suggests , this failover file is actually a JSON file , which means we can read / edit it to return whatever we want . <nl> <nl> + # Playback <nl> + Moco also supports playback which also save remote request and response into local file . The difference between failover and playback is that playback only accesses remote server when local request and response are not available . <nl> + <nl> + * Java API <nl> + <nl> + ` ` ` java <nl> + server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " , playback ( " playback . json " ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " text " : " foo " <nl> + } , <nl> + " response " : <nl> + { <nl> + " proxy " : <nl> + { <nl> + " url " : " http : / / localhost : 12306 / unknown " , <nl> + " playback " : " playback . json " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # # # Batch URLs <nl> If we want to proxy with a batch of URLs in the same context , proxy can also help us . <nl> <nl> @ @ - 732 , 7 + 760 , 7 @ @ server . get ( match ( uri ( " / proxy / . * " ) ) ) . response ( proxy ( from ( " / proxy " ) . to ( " http : / / loc <nl> } <nl> ` ` ` <nl> <nl> - Same with single url , you can also specify a failover . <nl> + Same with single url , you can also specify a failover <nl> * Java API <nl> ` ` ` java <nl> server . request ( match ( uri ( " / proxy / . * " ) ) ) <nl> @ @ - 760 , 6 + 788 , 35 @ @ server . request ( match ( uri ( " / proxy / . * " ) ) ) <nl> } <nl> ` ` ` <nl> <nl> + and playback . <nl> + <nl> + * Java API <nl> + ` ` ` java <nl> + server . request ( match ( uri ( " / proxy / . * " ) ) ) <nl> + . response ( proxy ( " http : / / localhost : 12306 / unknown " ) , playback ( " playback . response " ) ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : <nl> + { <nl> + " uri " : { <nl> + " match " : " / failover / . * " <nl> + } <nl> + } , <nl> + " response " : <nl> + { <nl> + " proxy " : <nl> + { <nl> + " from " : " / failover " , <nl> + " to " : " http : / / localhost : 12306 / unknown " , <nl> + " playback " : " playback . response " <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> As you may find , we often set request match same context with response , so Moco gives us a shortcut to do that . <nl> * Java API <nl> ` ` ` java <nl> @ @ - 794 , 6 + 851 , 23 @ @ server . proxy ( from ( " / proxy " ) . to ( " http : / / localhost : 12306 / unknown " ) , failover ( " fail <nl> } <nl> ` ` ` <nl> <nl> + and playback <nl> + * Java API <nl> + ` ` ` java <nl> + server . proxy ( from ( " / proxy " ) . to ( " http : / / localhost : 12306 / unknown " ) , playback ( " playback . response " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " proxy " : <nl> + { <nl> + " from " : " / failover " , <nl> + " to " : " http : / / localhost : 12306 / unknown " , <nl> + " playback " : " playback . response " <nl> + } <nl> + } <nl> + ` ` ` <nl> <nl> # # # Redirect <nl> <nl> @ @ - 1157 , 6 + 1231 , 34 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . cookies [ ' foo ' ] " ) ) ; <nl> } <nl> ` ` ` <nl> <nl> + # # # Custom Variable <nl> + <nl> + You can provide your own variables in your template . <nl> + <nl> + * Java <nl> + ` ` ` java <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { ' foo ' } " , " foo " , " bar " ) ) ; <nl> + ` ` ` <nl> + <nl> + * JSON <nl> + ` ` ` json <nl> + { <nl> + " request " : { <nl> + " uri " : " / template " <nl> + } , <nl> + " response " : { <nl> + " text " : { <nl> + " template " : { <nl> + " with " : " $ { ' foo ' } " , <nl> + " vars " : { <nl> + " foo " : " bar " <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ` ` ` <nl> + <nl> # # Event <nl> You may need to request another site when you receive a request , e . g . OAuth . Event could be your helper at that time . <nl> <nl> diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md <nl> index 143627c . . a482c3e 100644 <nl> - - - a / moco - doc / global - settings . md <nl> + + + b / moco - doc / global - settings . md <nl> @ @ - 138 , 4 + 138 , 23 @ @ java - jar moco - runner - < version > - standalone . jar start - p 12306 - g env . json - e rem <nl> <nl> Now , when you access your server , all configurations with " remote " environment rocks ! <nl> <nl> - In this case , http : / / localhost : 12306 / foo will give you " foo " , but http : / / localhost : 12306 / bar will return nothing . <nl> \ No newline at end of file <nl> + In this case , http : / / localhost : 12306 / foo will give you " foo " , but http : / / localhost : 12306 / bar will return nothing . <nl> + <nl> + # # Response <nl> + <nl> + In some cases , you may want to setup a global response for all response , for example , HTTP version , or HTTP header , so you don ' t have to setup it for every single response . <nl> + <nl> + ` ` ` json <nl> + [ <nl> + { <nl> + " response " : { <nl> + " headers " : { <nl> + " foo " : " bar " <nl> + } <nl> + } , <nl> + " include " : " blah . json " <nl> + } <nl> + ] <nl> + ` ` ` <nl> + <nl> + When you issue any request to server , it will return response with " foo " , " bar " header .

TEST DIFF:
diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 2977fdf . . a2f99f0 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 2035 , 20 + 2035 , 55 @ @ server . request ( by ( uri ( " / proxy " ) ) ) . response ( proxy ( template ( " http : / / localhost : 1230 
 
 ` ` ` json 
 { 
 - " request " : 
 - { 
 - " uri " : " / template - url " 
 - } , 
 - " response " : 
 - { 
 - " proxy " : 
 - { 
 - " url " : { 
 - " template " : " http : / / localhost : 12306 / $ { req . queries [ ' foo ' ] } " 
 - } 
 + " request " : { 
 + " uri " : " / proxy " 
 + } , 
 + " response " : { 
 + " proxy " : { 
 + " url " : { 
 + " template " : " http : / / localhost : 12306 / $ { req . queries [ ' foo ' ] } " 
 + } 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 + # # # Template for Event Action 
 + 
 + Template also can ben applied to event action . Check out [ Event ] ( # event ) for more details about event . 
 + 
 + * Java 
 + 
 + ` ` ` java 
 + server . request ( by ( uri ( " / event " ) ) ) . response ( " event " ) . on ( complete ( post ( " http : / / localhost : 12306 / target " ) , template ( " $ { target } " , of ( " target " , var ( " target " ) ) ) ) ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / event " 
 + } , 
 + " response " : { 
 + " text " : " event " 
 + } , 
 + " on " : { 
 + " complete " : { 
 + " post " : { 
 + " url " : " http : / / localhost : 12306 / target " , 
 + " content " : { 
 + " template " : { 
 + " with " : " $ { target } " , 
 + " vars " : { 
 + " target " : " target " 
 } 
 + } 
 } 
 + } 
 } 
 + } 
 + } 
 ` ` ` 
 
 # # Event

NEAREST DIFF:
diff - - git a / moco - doc / ReleaseNotes . md b / moco - doc / ReleaseNotes . md 
 index 6941cd3 . . a1f9ba7 100644 
 - - - a / moco - doc / ReleaseNotes . md 
 + + + b / moco - doc / ReleaseNotes . md 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - # Release 0 . 9 . 1 
 + # Release 0 . 9 . 1 ( 1 - Feb - 2014 ) 
 # # Usage 
 * ( Beta ) gmoco , moco groovy shell 
 
 @ @ - 6 , 10 + 6 , 15 @ @ 
 * log to record request 
 * once for verifier 
 * batch proxy 
 + * proxy playback 
 
 - # # # template 
 + # # # Template 
 * cookie 
 * form 
 + * template variables 
 + 
 + # # # Global Settings 
 + * Response 
 
 # # Implementation Details 
 * Fixed " uri " in failover to remove query parameter . 
 @ @ - 19 , 6 + 24 , 7 @ @ 
 * Keep connect alive if request wants to keep alive 
 * NPE for validating form / content in request hit 
 * NPE for XPath matcher 
 + * Wait server to shutdown completely 
 
 # Release 0 . 9 ( 1 - Nov - 2013 ) 
 
 @ @ - 47 , 6 + 53 , 7 @ @ 
 # # APIs 
 # # # Request 
 * JSONPath 
 + 
 # # # Response 
 # # # # Integration 
 * proxy 
 @ @ - 58 , 14 + 65 , 14 @ @ 
 # # # # Misc Response 
 * removed cache 
 
 - # # # # template 
 + # # # # Template 
 * version 
 * method 
 * content 
 * header 
 * query 
 
 - # # Settings 
 + # # Global Settings 
 * context 
 * file root 
 * environment 
 diff - - git a / moco - doc / apis . md b / moco - doc / apis . md 
 index 58666e3 . . af6a83e 100644 
 - - - a / moco - doc / apis . md 
 + + + b / moco - doc / apis . md 
 @ @ - 675 , 7 + 675 , 8 @ @ server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " ) ) ; 
 
 Actually , proxy is more powerful than that . It can forward the whole request to the target url , including HTTP method , version , header , content etc . 
 
 - Besides the basic functionality , proxy also support failover , for example : 
 + # Failover 
 + Besides the basic functionality , proxy also support failover , which means if remote server is not available temporarily , the server will know recovery from local configuration . 
 
 * Java API 
 
 @ @ - 705 , 6 + 706 , 33 @ @ Proxy will save request / response pair into your failover file . If the proxy targ 
 
 As the file suffix suggests , this failover file is actually a JSON file , which means we can read / edit it to return whatever we want . 
 
 + # Playback 
 + Moco also supports playback which also save remote request and response into local file . The difference between failover and playback is that playback only accesses remote server when local request and response are not available . 
 + 
 + * Java API 
 + 
 + ` ` ` java 
 + server . request ( by ( " foo " ) ) . response ( proxy ( " http : / / www . github . com " , playback ( " playback . json " ) ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : 
 + { 
 + " text " : " foo " 
 + } , 
 + " response " : 
 + { 
 + " proxy " : 
 + { 
 + " url " : " http : / / localhost : 12306 / unknown " , 
 + " playback " : " playback . json " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 # # # # Batch URLs 
 If we want to proxy with a batch of URLs in the same context , proxy can also help us . 
 
 @ @ - 732 , 7 + 760 , 7 @ @ server . get ( match ( uri ( " / proxy / . * " ) ) ) . response ( proxy ( from ( " / proxy " ) . to ( " http : / / loc 
 } 
 ` ` ` 
 
 - Same with single url , you can also specify a failover . 
 + Same with single url , you can also specify a failover 
 * Java API 
 ` ` ` java 
 server . request ( match ( uri ( " / proxy / . * " ) ) ) 
 @ @ - 760 , 6 + 788 , 35 @ @ server . request ( match ( uri ( " / proxy / . * " ) ) ) 
 } 
 ` ` ` 
 
 + and playback . 
 + 
 + * Java API 
 + ` ` ` java 
 + server . request ( match ( uri ( " / proxy / . * " ) ) ) 
 + . response ( proxy ( " http : / / localhost : 12306 / unknown " ) , playback ( " playback . response " ) ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : 
 + { 
 + " uri " : { 
 + " match " : " / failover / . * " 
 + } 
 + } , 
 + " response " : 
 + { 
 + " proxy " : 
 + { 
 + " from " : " / failover " , 
 + " to " : " http : / / localhost : 12306 / unknown " , 
 + " playback " : " playback . response " 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 As you may find , we often set request match same context with response , so Moco gives us a shortcut to do that . 
 * Java API 
 ` ` ` java 
 @ @ - 794 , 6 + 851 , 23 @ @ server . proxy ( from ( " / proxy " ) . to ( " http : / / localhost : 12306 / unknown " ) , failover ( " fail 
 } 
 ` ` ` 
 
 + and playback 
 + * Java API 
 + ` ` ` java 
 + server . proxy ( from ( " / proxy " ) . to ( " http : / / localhost : 12306 / unknown " ) , playback ( " playback . response " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " proxy " : 
 + { 
 + " from " : " / failover " , 
 + " to " : " http : / / localhost : 12306 / unknown " , 
 + " playback " : " playback . response " 
 + } 
 + } 
 + ` ` ` 
 
 # # # Redirect 
 
 @ @ - 1157 , 6 + 1231 , 34 @ @ server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { req . cookies [ ' foo ' ] " ) ) ; 
 } 
 ` ` ` 
 
 + # # # Custom Variable 
 + 
 + You can provide your own variables in your template . 
 + 
 + * Java 
 + ` ` ` java 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( template ( " $ { ' foo ' } " , " foo " , " bar " ) ) ; 
 + ` ` ` 
 + 
 + * JSON 
 + ` ` ` json 
 + { 
 + " request " : { 
 + " uri " : " / template " 
 + } , 
 + " response " : { 
 + " text " : { 
 + " template " : { 
 + " with " : " $ { ' foo ' } " , 
 + " vars " : { 
 + " foo " : " bar " 
 + } 
 + } 
 + } 
 + } 
 + } 
 + ` ` ` 
 + 
 # # Event 
 You may need to request another site when you receive a request , e . g . OAuth . Event could be your helper at that time . 
 
 diff - - git a / moco - doc / global - settings . md b / moco - doc / global - settings . md 
 index 143627c . . a482c3e 100644 
 - - - a / moco - doc / global - settings . md 
 + + + b / moco - doc / global - settings . md 
 @ @ - 138 , 4 + 138 , 23 @ @ java - jar moco - runner - < version > - standalone . jar start - p 12306 - g env . json - e rem 
 
 Now , when you access your server , all configurations with " remote " environment rocks ! 
 
 - In this case , http : / / localhost : 12306 / foo will give you " foo " , but http : / / localhost : 12306 / bar will return nothing . 
 \ No newline at end of file 
 + In this case , http : / / localhost : 12306 / foo will give you " foo " , but http : / / localhost : 12306 / bar will return nothing . 
 + 
 + # # Response 
 + 
 + In some cases , you may want to setup a global response for all response , for example , HTTP version , or HTTP header , so you don ' t have to setup it for every single response . 
 + 
 + ` ` ` json 
 + [ 
 + { 
 + " response " : { 
 + " headers " : { 
 + " foo " : " bar " 
 + } 
 + } , 
 + " include " : " blah . json " 
 + } 
 + ] 
 + ` ` ` 
 + 
 + When you issue any request to server , it will return response with " foo " , " bar " header .
