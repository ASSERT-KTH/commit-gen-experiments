BLEU SCORE: 0.03983253478176823

TEST MSG: renamed create server to new server in runner
GENERATED MSG: moved shutdown hook to root so that it can shutdown server correctly

TEST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> index d4c0492 . . 5c13814 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java <nl> @ @ - 12 , 15 + 12 , 15 @ @ import static com . google . common . collect . ImmutableList . of ; <nl> public abstract class FileRunner implements Runner { <nl> private Runner runner ; <nl> <nl> - protected abstract Runner createRunner ( ) ; <nl> + protected abstract Runner newRunner ( ) ; <nl> <nl> private FileRunner ( ) { <nl> - this . runner = createRunner ( ) ; <nl> + this . runner = newRunner ( ) ; <nl> } <nl> <nl> public void restart ( ) { <nl> this . runner . stop ( ) ; <nl> - this . runner = createRunner ( ) ; <nl> + this . runner = newRunner ( ) ; <nl> this . runner . run ( ) ; <nl> } <nl> <nl> @ @ - 41 , 7 + 41 , 7 @ @ public abstract class FileRunner implements Runner { <nl> public static FileRunner createConfigurationFileRunner ( final File file , final StartArgs startArgs ) { <nl> return new FileRunner ( ) { <nl> @ Override <nl> - protected Runner createRunner ( ) { <nl> + protected Runner newRunner ( ) { <nl> return newJsonRunnerWithStreams ( of ( toInputStream ( file ) ) , startArgs ) ; <nl> } <nl> } ; <nl> @ @ - 50 , 7 + 50 , 7 @ @ public abstract class FileRunner implements Runner { <nl> public static FileRunner createSettingFileRunner ( final File settingsFile , final StartArgs startArgs ) { <nl> return new FileRunner ( ) { <nl> @ Override <nl> - protected Runner createRunner ( ) { <nl> + protected Runner newRunner ( ) { <nl> return new SettingRunner ( toInputStream ( settingsFile ) , startArgs ) ; <nl> } <nl> } ; <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> index c9d119f . . 88c5abd 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java <nl> @ @ - 34 , 10 + 34 , 10 @ @ public final class JsonRunner implements Runner { <nl> private final Server server ; <nl> <nl> private JsonRunner ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> - this . server = createServer ( settings , startArgs ) ; <nl> + this . server = newServer ( settings , startArgs ) ; <nl> } <nl> <nl> - private Server createServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> + private Server newServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { <nl> if ( startArgs . isSocket ( ) ) { <nl> return createSocketServer ( settings , startArgs ) ; <nl> } <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> index 88f4d52 . . b0c2c10 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> @ @ - 13 , 7 + 13 , 7 @ @ public class StandaloneRunner { <nl> private Runner runner ; <nl> <nl> public void run ( final Server server ) { <nl> - runner = createRunner ( server ) ; <nl> + runner = newRunner ( server ) ; <nl> runner . start ( ) ; <nl> logger . info ( " Server is started at { } " , server . port ( ) ) ; <nl> } <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class StandaloneRunner { <nl> super ( ) ; <nl> } <nl> <nl> - private Runner createRunner ( final Server server ) { <nl> + private Runner newRunner ( final Server server ) { <nl> if ( server instanceof HttpServer ) { <nl> return Runner . runner ( ( HttpServer ) server ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java <nl> index 6d2c8f9 . . a7e6375 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java <nl> @ @ - 23 , 8 + 23 , 20 @ @ public class StartTask implements BootstrapTask { <nl> return ; <nl> } <nl> <nl> - Runner runner = new DynamicRunner ( startArgs . getConfigurationFile ( ) , startArgs . getPort ( ) ) ; <nl> - new SocketShutdownMonitorRunner ( runner , startArgs . getShutdownPort ( defaultShutdownPort ) , defaultShutdownKey ) . run ( ) ; <nl> + final Runner runner = createRunner ( startArgs ) ; <nl> + runner . run ( ) ; <nl> + <nl> + Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + runner . stop ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + private Runner createRunner ( StartArgs startArgs ) { <nl> + final Runner dynamicRunner = new DynamicRunner ( startArgs . getConfigurationFile ( ) , startArgs . getPort ( ) ) ; <nl> + return new SocketShutdownMonitorRunner ( dynamicRunner , startArgs . getShutdownPort ( defaultShutdownPort ) , defaultShutdownKey ) ; <nl> } <nl> <nl> private boolean conflictWithDefaultShutdownPort ( StartArgs startArgs , int defaultShutdownPort ) { <nl> diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> index 514c38b . . 66d156d 100644 <nl> - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java <nl> @ @ - 15 , 13 + 15 , 6 @ @ public class StandaloneRunner { <nl> <nl> logger . info ( " Server is started at { } " , httpServer . getPort ( ) ) ; <nl> <nl> - Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { <nl> - @ Override <nl> - public void run ( ) { <nl> - server . stop ( ) ; <nl> - } <nl> - } ) ; <nl> - <nl> server . start ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java 
 index d4c0492 . . 5c13814 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / FileRunner . java 
 @ @ - 12 , 15 + 12 , 15 @ @ import static com . google . common . collect . ImmutableList . of ; 
 public abstract class FileRunner implements Runner { 
 private Runner runner ; 
 
 - protected abstract Runner createRunner ( ) ; 
 + protected abstract Runner newRunner ( ) ; 
 
 private FileRunner ( ) { 
 - this . runner = createRunner ( ) ; 
 + this . runner = newRunner ( ) ; 
 } 
 
 public void restart ( ) { 
 this . runner . stop ( ) ; 
 - this . runner = createRunner ( ) ; 
 + this . runner = newRunner ( ) ; 
 this . runner . run ( ) ; 
 } 
 
 @ @ - 41 , 7 + 41 , 7 @ @ public abstract class FileRunner implements Runner { 
 public static FileRunner createConfigurationFileRunner ( final File file , final StartArgs startArgs ) { 
 return new FileRunner ( ) { 
 @ Override 
 - protected Runner createRunner ( ) { 
 + protected Runner newRunner ( ) { 
 return newJsonRunnerWithStreams ( of ( toInputStream ( file ) ) , startArgs ) ; 
 } 
 } ; 
 @ @ - 50 , 7 + 50 , 7 @ @ public abstract class FileRunner implements Runner { 
 public static FileRunner createSettingFileRunner ( final File settingsFile , final StartArgs startArgs ) { 
 return new FileRunner ( ) { 
 @ Override 
 - protected Runner createRunner ( ) { 
 + protected Runner newRunner ( ) { 
 return new SettingRunner ( toInputStream ( settingsFile ) , startArgs ) ; 
 } 
 } ; 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 index c9d119f . . 88c5abd 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / JsonRunner . java 
 @ @ - 34 , 10 + 34 , 10 @ @ public final class JsonRunner implements Runner { 
 private final Server server ; 
 
 private JsonRunner ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { 
 - this . server = createServer ( settings , startArgs ) ; 
 + this . server = newServer ( settings , startArgs ) ; 
 } 
 
 - private Server createServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { 
 + private Server newServer ( final Iterable < ? extends RunnerSetting > settings , final StartArgs startArgs ) { 
 if ( startArgs . isSocket ( ) ) { 
 return createSocketServer ( settings , startArgs ) ; 
 } 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java 
 index 88f4d52 . . b0c2c10 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java 
 @ @ - 13 , 7 + 13 , 7 @ @ public class StandaloneRunner { 
 private Runner runner ; 
 
 public void run ( final Server server ) { 
 - runner = createRunner ( server ) ; 
 + runner = newRunner ( server ) ; 
 runner . start ( ) ; 
 logger . info ( " Server is started at { } " , server . port ( ) ) ; 
 } 
 @ @ - 22 , 7 + 22 , 7 @ @ public class StandaloneRunner { 
 super ( ) ; 
 } 
 
 - private Runner createRunner ( final Server server ) { 
 + private Runner newRunner ( final Server server ) { 
 if ( server instanceof HttpServer ) { 
 return Runner . runner ( ( HttpServer ) server ) ; 
 }

NEAREST DIFF:
diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java 
 index 6d2c8f9 . . a7e6375 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / bootstrap / StartTask . java 
 @ @ - 23 , 8 + 23 , 20 @ @ public class StartTask implements BootstrapTask { 
 return ; 
 } 
 
 - Runner runner = new DynamicRunner ( startArgs . getConfigurationFile ( ) , startArgs . getPort ( ) ) ; 
 - new SocketShutdownMonitorRunner ( runner , startArgs . getShutdownPort ( defaultShutdownPort ) , defaultShutdownKey ) . run ( ) ; 
 + final Runner runner = createRunner ( startArgs ) ; 
 + runner . run ( ) ; 
 + 
 + Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + runner . stop ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + private Runner createRunner ( StartArgs startArgs ) { 
 + final Runner dynamicRunner = new DynamicRunner ( startArgs . getConfigurationFile ( ) , startArgs . getPort ( ) ) ; 
 + return new SocketShutdownMonitorRunner ( dynamicRunner , startArgs . getShutdownPort ( defaultShutdownPort ) , defaultShutdownKey ) ; 
 } 
 
 private boolean conflictWithDefaultShutdownPort ( StartArgs startArgs , int defaultShutdownPort ) { 
 diff - - git a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java 
 index 514c38b . . 66d156d 100644 
 - - - a / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java 
 + + + b / moco - runner / src / main / java / com / github / dreamhead / moco / runner / StandaloneRunner . java 
 @ @ - 15 , 13 + 15 , 6 @ @ public class StandaloneRunner { 
 
 logger . info ( " Server is started at { } " , httpServer . getPort ( ) ) ; 
 
 - Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ) { 
 - @ Override 
 - public void run ( ) { 
 - server . stop ( ) ; 
 - } 
 - } ) ; 
 - 
 server . start ( ) ; 
 } 

