BLEU SCORE: 0.29558013016570783

TEST MSG: moved internal file and path resource to api utils
GENERATED MSG: added resource and charset to file and path resource api

TEST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index df15918 . . e2d3823 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 52 , 9 + 52 , 7 @ @ import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler <nl> import static com . github . dreamhead . moco . handler . SequenceHandler . newSeq ; <nl> import static com . github . dreamhead . moco . internal . ApiUtils . resourceToResourceHandler ; <nl> import static com . github . dreamhead . moco . internal . ApiUtils . textToResource ; <nl> - import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; <nl> - import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . methodResource ; <nl> import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; <nl> @ @ - 400 , 19 + 398 , 15 @ @ public final class Moco { <nl> } <nl> <nl> public static ContentResource file ( final Resource filename ) { <nl> - return file ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> + return ApiUtils . file ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> } <nl> <nl> public static ContentResource file ( final String filename , final Charset charset ) { <nl> - return file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> + return ApiUtils . file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static ContentResource file ( final Resource filename , final Charset charset ) { <nl> - return file ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> - } <nl> - <nl> - private static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { <nl> - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> + return ApiUtils . file ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final String filename ) { <nl> @ @ - 420 , 19 + 414 , 15 @ @ public final class Moco { <nl> } <nl> <nl> public static ContentResource pathResource ( final Resource filename ) { <nl> - return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> + return ApiUtils . pathResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final String filename , final Charset charset ) { <nl> - return pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> + return ApiUtils . pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static ContentResource pathResource ( final Resource filename , final Charset charset ) { <nl> - return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> - } <nl> - <nl> - private static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> - return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; <nl> + return ApiUtils . pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> public static Resource version ( final String version ) { <nl> diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> index 278df92 . . a50b2b8 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java <nl> @ @ - 19 , 17 + 19 , 22 @ @ import com . github . dreamhead . moco . monitor . DefaultLogFormatter ; <nl> import com . github . dreamhead . moco . monitor . FileLogWriter ; <nl> import com . github . dreamhead . moco . monitor . LogMonitor ; <nl> import com . github . dreamhead . moco . monitor . LogWriter ; <nl> + import com . github . dreamhead . moco . resource . ContentResource ; <nl> import com . github . dreamhead . moco . resource . Resource ; <nl> import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; <nl> import com . github . dreamhead . moco . resource . reader . Variable ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl> <nl> import java . io . File ; <nl> import java . nio . charset . Charset ; <nl> <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; <nl> + import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; <nl> import static com . github . dreamhead . moco . util . Iterables . asIterable ; <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> import static com . google . common . collect . Maps . transformEntries ; <nl> <nl> public final class ApiUtils { <nl> @ @ - 109 , 4 + 114 , 12 @ @ public final class ApiUtils { <nl> <nl> private ApiUtils ( ) { <nl> } <nl> + <nl> + public static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; <nl> + } <nl> + <nl> + public static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { <nl> + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> index 98fbd10 . . d115fef 100644 <nl> - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java <nl> @ @ - 348 , 6 + 348 , 10 @ @ public class Moco { <nl> return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; <nl> } <nl> <nl> + public static ContentResource file ( final Resource filename , Charset charset ) { <nl> + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; <nl> + } <nl> + <nl> public static ContentResource file ( final String filename , Optional < Charset > charset ) { <nl> return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) , Optional . < MocoConfig > absent ( ) ) ; <nl> } <nl> @ @ - 364 , 6 + 368 , 10 @ @ public class Moco { <nl> return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> } <nl> <nl> + public static ContentResource pathResource ( final Resource filename , Charset charset ) { <nl> + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; <nl> + } <nl> + <nl> public static ContentResource pathResource ( final String filename , Optional < Charset > charset ) { <nl> return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; <nl> } <nl> diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> index 17298b5 . . f18cdfe 100644 <nl> - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package com . github . dreamhead . moco ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> import org . apache . http . Header ; <nl> import org . apache . http . HttpVersion ; <nl> import org . apache . http . ProtocolVersion ; <nl> @ @ - 8 , 12 + 9 , 16 @ @ import org . apache . http . client . fluent . Request ; <nl> import org . apache . http . message . BasicNameValuePair ; <nl> import org . junit . Test ; <nl> <nl> + import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . nio . charset . Charset ; <nl> <nl> import static com . github . dreamhead . moco . Moco . * ; <nl> import static com . github . dreamhead . moco . Runner . running ; <nl> import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; <nl> import static com . google . common . collect . ImmutableMap . of ; <nl> + import static com . google . common . io . Files . toByteArray ; <nl> import static org . hamcrest . CoreMatchers . is ; <nl> import static org . junit . Assert . assertThat ; <nl> <nl> @ @ - 347 , 6 + 352 , 18 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> <nl> @ Test <nl> + public void should _ return _ file _ with _ template _ and _ charset ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( file ( template ( " src / test / resources / $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( toByteArray ( new File ( " src / test / resources / gbk . response " ) ) ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void should _ return _ path _ resource _ with _ template ( ) throws Exception { <nl> server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " foo . response " ) ) ) ; <nl> <nl> @ @ - 357 , 4 + 374 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { <nl> } <nl> } ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void should _ return _ path _ resource _ with _ template _ and _ charset ( ) throws Exception { <nl> + server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; <nl> + <nl> + running ( server , new Runnable ( ) { <nl> + @ Override <nl> + public void run ( ) throws Exception { <nl> + InputStream stream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " gbk . response " ) ; <nl> + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( ByteStreams . toByteArray ( stream ) ) ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index df15918 . . e2d3823 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 52 , 9 + 52 , 7 @ @ import static com . github . dreamhead . moco . handler . ResponseHandlers . responseHandler 
 import static com . github . dreamhead . moco . handler . SequenceHandler . newSeq ; 
 import static com . github . dreamhead . moco . internal . ApiUtils . resourceToResourceHandler ; 
 import static com . github . dreamhead . moco . internal . ApiUtils . textToResource ; 
 - import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . cookieResource ; 
 - import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . jsonResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . methodResource ; 
 import static com . github . dreamhead . moco . resource . ResourceFactory . templateResource ; 
 @ @ - 400 , 19 + 398 , 15 @ @ public final class Moco { 
 } 
 
 public static ContentResource file ( final Resource filename ) { 
 - return file ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; 
 + return ApiUtils . file ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; 
 } 
 
 public static ContentResource file ( final String filename , final Charset charset ) { 
 - return file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 + return ApiUtils . file ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 public static ContentResource file ( final Resource filename , final Charset charset ) { 
 - return file ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 - } 
 - 
 - private static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { 
 - return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; 
 + return ApiUtils . file ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 public static ContentResource pathResource ( final String filename ) { 
 @ @ - 420 , 19 + 414 , 15 @ @ public final class Moco { 
 } 
 
 public static ContentResource pathResource ( final Resource filename ) { 
 - return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; 
 + return ApiUtils . pathResource ( checkNotNull ( filename , " Filename should not be null " ) , Optional . < Charset > absent ( ) ) ; 
 } 
 
 public static ContentResource pathResource ( final String filename , final Charset charset ) { 
 - return pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 + return ApiUtils . pathResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 public static ContentResource pathResource ( final Resource filename , final Charset charset ) { 
 - return pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 - } 
 - 
 - private static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { 
 - return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; 
 + return ApiUtils . pathResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 public static Resource version ( final String version ) { 
 diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 index 278df92 . . a50b2b8 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / internal / ApiUtils . java 
 @ @ - 19 , 17 + 19 , 22 @ @ import com . github . dreamhead . moco . monitor . DefaultLogFormatter ; 
 import com . github . dreamhead . moco . monitor . FileLogWriter ; 
 import com . github . dreamhead . moco . monitor . LogMonitor ; 
 import com . github . dreamhead . moco . monitor . LogWriter ; 
 + import com . github . dreamhead . moco . resource . ContentResource ; 
 import com . github . dreamhead . moco . resource . Resource ; 
 import com . github . dreamhead . moco . resource . reader . ExtractorVariable ; 
 import com . github . dreamhead . moco . resource . reader . Variable ; 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Maps ; 
 
 import java . io . File ; 
 import java . nio . charset . Charset ; 
 
 + import static com . github . dreamhead . moco . resource . ResourceFactory . classpathFileResource ; 
 + import static com . github . dreamhead . moco . resource . ResourceFactory . fileResource ; 
 import static com . github . dreamhead . moco . util . Iterables . asIterable ; 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 import static com . google . common . collect . Maps . transformEntries ; 
 
 public final class ApiUtils { 
 @ @ - 109 , 4 + 114 , 12 @ @ public final class ApiUtils { 
 
 private ApiUtils ( ) { 
 } 
 + 
 + public static ContentResource file ( final Resource filename , final Optional < Charset > charset ) { 
 + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset , null ) ; 
 + } 
 + 
 + public static ContentResource pathResource ( final Resource filename , final Optional < Charset > charset ) { 
 + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , charset ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 index 98fbd10 . . d115fef 100644 
 - - - a / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 + + + b / moco - core / src / main / java / com / github / dreamhead / moco / Moco . java 
 @ @ - 348 , 6 + 348 , 10 @ @ public class Moco { 
 return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; 
 } 
 
 + public static ContentResource file ( final Resource filename , Charset charset ) { 
 + return fileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) , Optional . < MocoConfig > absent ( ) ) ; 
 + } 
 + 
 public static ContentResource file ( final String filename , Optional < Charset > charset ) { 
 return fileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) , Optional . < MocoConfig > absent ( ) ) ; 
 } 
 @ @ - 364 , 6 + 368 , 10 @ @ public class Moco { 
 return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 } 
 
 + public static ContentResource pathResource ( final Resource filename , Charset charset ) { 
 + return classpathFileResource ( checkNotNull ( filename , " Filename should not be null " ) , of ( checkNotNull ( charset , " Charset should not be null " ) ) ) ; 
 + } 
 + 
 public static ContentResource pathResource ( final String filename , Optional < Charset > charset ) { 
 return classpathFileResource ( text ( checkNotNullOrEmpty ( filename , " Filename should not be null " ) ) , checkNotNull ( charset , " Charset should not be null " ) ) ; 
 } 
 diff - - git a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 index 17298b5 . . f18cdfe 100644 
 - - - a / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 + + + b / moco - core / src / test / java / com / github / dreamhead / moco / MocoTemplateTest . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package com . github . dreamhead . moco ; 
 
 + import com . google . common . io . ByteStreams ; 
 import org . apache . http . Header ; 
 import org . apache . http . HttpVersion ; 
 import org . apache . http . ProtocolVersion ; 
 @ @ - 8 , 12 + 9 , 16 @ @ import org . apache . http . client . fluent . Request ; 
 import org . apache . http . message . BasicNameValuePair ; 
 import org . junit . Test ; 
 
 + import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . nio . charset . Charset ; 
 
 import static com . github . dreamhead . moco . Moco . * ; 
 import static com . github . dreamhead . moco . Runner . running ; 
 import static com . github . dreamhead . moco . helper . RemoteTestUtils . remoteUrl ; 
 import static com . google . common . collect . ImmutableMap . of ; 
 + import static com . google . common . io . Files . toByteArray ; 
 import static org . hamcrest . CoreMatchers . is ; 
 import static org . junit . Assert . assertThat ; 
 
 @ @ - 347 , 6 + 352 , 18 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 
 @ Test 
 + public void should _ return _ file _ with _ template _ and _ charset ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( file ( template ( " src / test / resources / $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( toByteArray ( new File ( " src / test / resources / gbk . response " ) ) ) ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + @ Test 
 public void should _ return _ path _ resource _ with _ template ( ) throws Exception { 
 server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " foo . response " ) ) ) ; 
 
 @ @ - 357 , 4 + 374 , 17 @ @ public class MocoTemplateTest extends AbstractMocoHttpTest { 
 } 
 } ) ; 
 } 
 + 
 + @ Test 
 + public void should _ return _ path _ resource _ with _ template _ and _ charset ( ) throws Exception { 
 + server . request ( by ( uri ( " / template " ) ) ) . response ( pathResource ( template ( " $ { var } " , " var " , " gbk . response " ) , Charset . forName ( " GBK " ) ) ) ; 
 + 
 + running ( server , new Runnable ( ) { 
 + @ Override 
 + public void run ( ) throws Exception { 
 + InputStream stream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( " gbk . response " ) ; 
 + assertThat ( helper . getAsBytes ( remoteUrl ( " / template " ) ) , is ( ByteStreams . toByteArray ( stream ) ) ) ; 
 + } 
 + } ) ; 
 + } 
 }
