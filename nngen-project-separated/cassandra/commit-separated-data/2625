BLEU SCORE: 0.011246923682765546

TEST MSG: Remove unused import
GENERATED MSG: disable RoundTripTest . testTimeUUID ( ) until I get my act together

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java <nl> index fba4742 . . 2878820 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> package org . apache . cassandra . db . marshal ; <nl> <nl> import java . nio . ByteBuffer ; <nl> - import java . util . * ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ;
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> index 3e4c4d7 . . afae70e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ import java . math . BigInteger ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Arrays ; <nl> import java . util . Calendar ; <nl> + import java . util . TimeZone ; <nl> import java . util . UUID ; <nl> <nl> public class RoundTripTest <nl> @ @ - 68 , 7 + 69 , 7 @ @ public class RoundTripTest <nl> assert LexicalUUIDType . instance . compose ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) . equals ( uuid ) ; <nl> } <nl> <nl> - @ Test @ Ignore <nl> + @ Test <nl> public void testTimeUUID ( ) <nl> { <nl> UUID uuid = UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) ; <nl> @ @ - 81 , 6 + 82 , 7 @ @ public class RoundTripTest <nl> assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; <nl> <nl> Calendar c = Calendar . getInstance ( ) ; <nl> + Calendar . getInstance ( TimeZone . getTimeZone ( " America / Chicago " ) ) ; <nl> c . set ( Calendar . YEAR , 2011 ) ; <nl> c . set ( Calendar . MONTH , Calendar . MARCH ) ; <nl> c . set ( Calendar . DAY _ OF _ MONTH , 8 ) ; <nl> @ @ - 88 , 7 + 90 , 6 @ @ public class RoundTripTest <nl> c . set ( Calendar . MINUTE , 0 ) ; <nl> c . set ( Calendar . SECOND , 0 ) ; <nl> c . set ( Calendar . MILLISECOND , 0 ) ; <nl> - c . set ( Calendar . ZONE _ OFFSET , - 6 * 1000 * 60 * 60 ) ; <nl> Long ts = new Long ( 1299564000000L ) ; <nl> assert ts . equals ( c . getTimeInMillis ( ) ) : c . getTimeInMillis ( ) ; <nl>

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java 
 index fba4742 . . 2878820 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / CollectionTypeTest . java 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 package org . apache . cassandra . db . marshal ; 
 
 import java . nio . ByteBuffer ; 
 - import java . util . * ; 
 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ;

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 index 3e4c4d7 . . afae70e 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / RoundTripTest . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . math . BigInteger ; 
 import java . nio . ByteBuffer ; 
 import java . util . Arrays ; 
 import java . util . Calendar ; 
 + import java . util . TimeZone ; 
 import java . util . UUID ; 
 
 public class RoundTripTest 
 @ @ - 68 , 7 + 69 , 7 @ @ public class RoundTripTest 
 assert LexicalUUIDType . instance . compose ( ByteBuffer . wrap ( UUIDGen . decompose ( uuid ) ) ) . equals ( uuid ) ; 
 } 
 
 - @ Test @ Ignore 
 + @ Test 
 public void testTimeUUID ( ) 
 { 
 UUID uuid = UUIDGen . makeType1UUIDFromHost ( FBUtilities . getLocalAddress ( ) ) ; 
 @ @ - 81 , 6 + 82 , 7 @ @ public class RoundTripTest 
 assert uuid . equals ( TimeUUIDType . instance . compose ( TimeUUIDType . instance . fromString ( uuid . toString ( ) ) ) ) ; 
 
 Calendar c = Calendar . getInstance ( ) ; 
 + Calendar . getInstance ( TimeZone . getTimeZone ( " America / Chicago " ) ) ; 
 c . set ( Calendar . YEAR , 2011 ) ; 
 c . set ( Calendar . MONTH , Calendar . MARCH ) ; 
 c . set ( Calendar . DAY _ OF _ MONTH , 8 ) ; 
 @ @ - 88 , 7 + 90 , 6 @ @ public class RoundTripTest 
 c . set ( Calendar . MINUTE , 0 ) ; 
 c . set ( Calendar . SECOND , 0 ) ; 
 c . set ( Calendar . MILLISECOND , 0 ) ; 
 - c . set ( Calendar . ZONE _ OFFSET , - 6 * 1000 * 60 * 60 ) ; 
 Long ts = new Long ( 1299564000000L ) ; 
 assert ts . equals ( c . getTimeInMillis ( ) ) : c . getTimeInMillis ( ) ; 

