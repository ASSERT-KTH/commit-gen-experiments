BLEU SCORE: 0.001076291192960631

TEST MSG: Fix RandomReplicationAwareTokenAllocatorTest . testExistingCluster
GENERATED MSG: refactor getDefaultToken into default checking + getRandomToken . Decorate OPP keys so we don ' t have to special case IndexedDKs for getSplits .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 26bc68b . . 8a0e169 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Fix RandomReplicationAwareTokenAllocatorTest . testExistingCluster ( CASSANDRA - 12812 ) <nl> * Upgrade commons - codec to 1 . 9 ( CASSANDRA - 12790 ) <nl> * Make the fanout size for LeveledCompactionStrategy to be configurable ( CASSANDRA - 11550 ) <nl> * Add duration data type ( CASSANDRA - 11873 ) <nl> diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> index ee3b862 . . f6090e0 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class RandomPartitioner implements IPartitioner <nl> <nl> public BigIntegerToken getRandomToken ( Random random ) <nl> { <nl> - BigInteger token = FBUtilities . hashToBigInteger ( GuidGenerator . guidAsBytes ( random , 0 ) ) ; <nl> + BigInteger token = FBUtilities . hashToBigInteger ( GuidGenerator . guidAsBytes ( random , " host / 127 . 0 . 0 . 1 " , 0 ) ) ; <nl> if ( token . signum ( ) = = - 1 ) <nl> token = token . multiply ( BigInteger . valueOf ( - 1L ) ) ; <nl> return new BigIntegerToken ( token ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / GuidGenerator . java b / src / java / org / apache / cassandra / utils / GuidGenerator . java <nl> index c5ed7a7 . . 2209f6a 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / GuidGenerator . java <nl> + + + b / src / java / org / apache / cassandra / utils / GuidGenerator . java <nl> @ @ - 76 , 12 + 76 , 11 @ @ public class GuidGenerator <nl> return convertToStandardFormat ( sb . toString ( ) ) ; <nl> } <nl> <nl> - public static ByteBuffer guidAsBytes ( Random random , long time ) <nl> + public static ByteBuffer guidAsBytes ( Random random , String hostId , long time ) <nl> { <nl> StringBuilder sbValueBeforeMD5 = new StringBuilder ( ) ; <nl> - long rand = 0 ; <nl> - rand = random . nextLong ( ) ; <nl> - sbValueBeforeMD5 . append ( s _ id ) <nl> + long rand = random . nextLong ( ) ; <nl> + sbValueBeforeMD5 . append ( hostId ) <nl> . append ( " : " ) <nl> . append ( Long . toString ( time ) ) <nl> . append ( " : " ) <nl> @ @ - 93 , 7 + 92 , 7 @ @ public class GuidGenerator <nl> <nl> public static ByteBuffer guidAsBytes ( ) <nl> { <nl> - return guidAsBytes ( myRand , System . currentTimeMillis ( ) ) ; <nl> + return guidAsBytes ( myRand , s _ id , System . currentTimeMillis ( ) ) ; <nl> } <nl> <nl> / *
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java <nl> index a2b294d . . b767bbd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemTable . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemTable . java <nl> @ @ - 28 , 11 + 28 , 12 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . utils . BasicUtilities ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . db . filter . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> import java . net . InetAddress ; <nl> <nl> public class SystemTable <nl> @ @ - 121 , 7 + 122 , 13 @ @ public class SystemTable <nl> IPartitioner p = StorageService . getPartitioner ( ) ; <nl> if ( cf = = null ) <nl> { <nl> - Token token = p . getDefaultToken ( ) ; <nl> + Token token ; <nl> + String initialToken = DatabaseDescriptor . getInitialToken ( ) ; <nl> + if ( initialToken = = null ) <nl> + token = p . getRandomToken ( ) ; <nl> + else <nl> + token = p . getToken ( initialToken ) ; <nl> + <nl> logger . info ( " Saved Token not found . Using " + token ) ; <nl> / / seconds - since - epoch isn ' t a foolproof new generation <nl> / / ( where foolproof is " guaranteed to be larger than the last one seen at this ip address " ) , <nl> diff - - git a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> index 3a11457 . . abe9071 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java <nl> @ @ - 147 , 14 + 147 , 8 @ @ public class CollatingOrderPreservingPartitioner implements IPartitioner < BytesTo <nl> return MINIMUM ; <nl> } <nl> <nl> - public BytesToken getDefaultToken ( ) <nl> + public BytesToken getRandomToken ( ) <nl> { <nl> - String initialToken = DatabaseDescriptor . getInitialToken ( ) ; <nl> - if ( initialToken ! = null ) <nl> - / / assume that the user specified the intial Token as a String key <nl> - return getToken ( initialToken ) ; <nl> - <nl> - / / generate random token <nl> Random r = new Random ( ) ; <nl> byte [ ] buffer = new byte [ 16 ] ; <nl> r . nextBytes ( buffer ) ; <nl> diff - - git a / src / java / org / apache / cassandra / dht / IPartitioner . java b / src / java / org / apache / cassandra / dht / IPartitioner . java <nl> index fdc7b9d . . 27469d5 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / IPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / IPartitioner . java <nl> @ @ - 76 , 11 + 76 , 9 @ @ public interface IPartitioner < T extends Token > <nl> public T getToken ( String key ) ; <nl> <nl> / * * <nl> - * @ return the default Token to represent this node if none was saved . <nl> - * Uses the one given in the InitialToken configuration directive , <nl> - * or picks one automatically if that was not given . <nl> + * @ return a randomly generated token <nl> * / <nl> - public T getDefaultToken ( ) ; <nl> + public T getRandomToken ( ) ; <nl> <nl> public Token . TokenFactory getTokenFactory ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> index 5ccaf6e . . 6e7bcfe 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java <nl> @ @ - 43 , 12 + 43 , 12 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > <nl> <nl> public DecoratedKey < StringToken > decorateKey ( String key ) <nl> { <nl> - return new DecoratedKey < StringToken > ( null , key ) ; <nl> + return new DecoratedKey < StringToken > ( new StringToken ( key ) , key ) ; <nl> } <nl> <nl> public DecoratedKey < StringToken > convertFromDiskFormat ( String key ) <nl> { <nl> - return new DecoratedKey < StringToken > ( null , key ) ; <nl> + return new DecoratedKey < StringToken > ( new StringToken ( key ) , key ) ; <nl> } <nl> <nl> public String convertToDiskFormat ( DecoratedKey < StringToken > key ) <nl> @ @ - 164 , 13 + 164 , 8 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > <nl> return MINIMUM ; <nl> } <nl> <nl> - public StringToken getDefaultToken ( ) <nl> + public StringToken getRandomToken ( ) <nl> { <nl> - String initialToken = DatabaseDescriptor . getInitialToken ( ) ; <nl> - if ( initialToken ! = null ) <nl> - return new StringToken ( initialToken ) ; <nl> - <nl> - / / generate random token <nl> String chars = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 " ; <nl> Random r = new Random ( ) ; <nl> StringBuilder buffer = new StringBuilder ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> index d90fb18 . . 9bd1b24 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java <nl> @ @ - 104 , 13 + 104 , 8 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > <nl> return MINIMUM ; <nl> } <nl> <nl> - public BigIntegerToken getDefaultToken ( ) <nl> + public BigIntegerToken getRandomToken ( ) <nl> { <nl> - String initialToken = DatabaseDescriptor . getInitialToken ( ) ; <nl> - if ( initialToken ! = null ) <nl> - return new BigIntegerToken ( new BigInteger ( initialToken ) ) ; <nl> - <nl> - / / generate random token <nl> String guid = GuidGenerator . guid ( ) ; <nl> BigInteger token = FBUtilities . hash ( guid ) ; <nl> if ( token . signum ( ) = = - 1 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index b9cf8ed . . 11036d4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 844 , 10 + 844 , 22 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> tokens . add ( range . left ( ) . toString ( ) ) ; <nl> <nl> List < DecoratedKey > decoratedKeys = SSTableReader . getIndexedDecoratedKeys ( ) ; <nl> - for ( int i = 1 ; i < splits ; i + + ) <nl> + if ( decoratedKeys . size ( ) < splits ) <nl> { <nl> - int index = i * ( decoratedKeys . size ( ) / splits ) ; <nl> - tokens . add ( decoratedKeys . get ( index ) . token . toString ( ) ) ; <nl> + / / not enough keys to generate good splits - - generate random ones instead <nl> + / / ( since this only happens when we don ' t have many keys , it doesn ' t really matter that the splits are poor ) <nl> + for ( int i = 1 ; i < splits ; i + + ) <nl> + { <nl> + tokens . add ( partitioner _ . getRandomToken ( ) . toString ( ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + for ( int i = 1 ; i < splits ; i + + ) <nl> + { <nl> + int index = i * ( decoratedKeys . size ( ) / splits ) ; <nl> + tokens . add ( decoratedKeys . get ( index ) . token . toString ( ) ) ; <nl> + } <nl> } <nl> <nl> tokens . add ( range . right ( ) . toString ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java <nl> index ad6c5d5 . . 5c7be6a 100644 <nl> - - - a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java <nl> + + + b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class BootStrapperTest { <nl> <nl> generateFakeEndpoints ( numOldNodes ) ; <nl> <nl> - Token myToken = StorageService . getPartitioner ( ) . getDefaultToken ( ) ; <nl> + Token myToken = StorageService . getPartitioner ( ) . getRandomToken ( ) ; <nl> InetAddress myEndpoint = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; <nl> <nl> TokenMetadata tmd = ss . getTokenMetadata ( ) ; <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class BootStrapperTest { <nl> for ( int i = 1 ; i < = numOldNodes ; i + + ) <nl> { <nl> / / leave . 1 for myEndpoint <nl> - tmd . update ( p . getDefaultToken ( ) , InetAddress . getByName ( " 127 . 0 . 0 . " + ( i + 1 ) ) ) ; <nl> + tmd . update ( p . getRandomToken ( ) , InetAddress . getByName ( " 127 . 0 . 0 . " + ( i + 1 ) ) ) ; <nl> } <nl> } <nl> } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 26bc68b . . 8a0e169 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Fix RandomReplicationAwareTokenAllocatorTest . testExistingCluster ( CASSANDRA - 12812 ) 
 * Upgrade commons - codec to 1 . 9 ( CASSANDRA - 12790 ) 
 * Make the fanout size for LeveledCompactionStrategy to be configurable ( CASSANDRA - 11550 ) 
 * Add duration data type ( CASSANDRA - 11873 ) 
 diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 index ee3b862 . . f6090e0 100644 
 - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 @ @ - 93 , 7 + 93 , 7 @ @ public class RandomPartitioner implements IPartitioner 
 
 public BigIntegerToken getRandomToken ( Random random ) 
 { 
 - BigInteger token = FBUtilities . hashToBigInteger ( GuidGenerator . guidAsBytes ( random , 0 ) ) ; 
 + BigInteger token = FBUtilities . hashToBigInteger ( GuidGenerator . guidAsBytes ( random , " host / 127 . 0 . 0 . 1 " , 0 ) ) ; 
 if ( token . signum ( ) = = - 1 ) 
 token = token . multiply ( BigInteger . valueOf ( - 1L ) ) ; 
 return new BigIntegerToken ( token ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / GuidGenerator . java b / src / java / org / apache / cassandra / utils / GuidGenerator . java 
 index c5ed7a7 . . 2209f6a 100644 
 - - - a / src / java / org / apache / cassandra / utils / GuidGenerator . java 
 + + + b / src / java / org / apache / cassandra / utils / GuidGenerator . java 
 @ @ - 76 , 12 + 76 , 11 @ @ public class GuidGenerator 
 return convertToStandardFormat ( sb . toString ( ) ) ; 
 } 
 
 - public static ByteBuffer guidAsBytes ( Random random , long time ) 
 + public static ByteBuffer guidAsBytes ( Random random , String hostId , long time ) 
 { 
 StringBuilder sbValueBeforeMD5 = new StringBuilder ( ) ; 
 - long rand = 0 ; 
 - rand = random . nextLong ( ) ; 
 - sbValueBeforeMD5 . append ( s _ id ) 
 + long rand = random . nextLong ( ) ; 
 + sbValueBeforeMD5 . append ( hostId ) 
 . append ( " : " ) 
 . append ( Long . toString ( time ) ) 
 . append ( " : " ) 
 @ @ - 93 , 7 + 92 , 7 @ @ public class GuidGenerator 
 
 public static ByteBuffer guidAsBytes ( ) 
 { 
 - return guidAsBytes ( myRand , System . currentTimeMillis ( ) ) ; 
 + return guidAsBytes ( myRand , s _ id , System . currentTimeMillis ( ) ) ; 
 } 
 
 / *

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / SystemTable . java b / src / java / org / apache / cassandra / db / SystemTable . java 
 index a2b294d . . b767bbd 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemTable . java 
 + + + b / src / java / org / apache / cassandra / db / SystemTable . java 
 @ @ - 28 , 11 + 28 , 12 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . utils . BasicUtilities ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . db . filter . IdentityQueryFilter ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 import java . net . InetAddress ; 
 
 public class SystemTable 
 @ @ - 121 , 7 + 122 , 13 @ @ public class SystemTable 
 IPartitioner p = StorageService . getPartitioner ( ) ; 
 if ( cf = = null ) 
 { 
 - Token token = p . getDefaultToken ( ) ; 
 + Token token ; 
 + String initialToken = DatabaseDescriptor . getInitialToken ( ) ; 
 + if ( initialToken = = null ) 
 + token = p . getRandomToken ( ) ; 
 + else 
 + token = p . getToken ( initialToken ) ; 
 + 
 logger . info ( " Saved Token not found . Using " + token ) ; 
 / / seconds - since - epoch isn ' t a foolproof new generation 
 / / ( where foolproof is " guaranteed to be larger than the last one seen at this ip address " ) , 
 diff - - git a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 index 3a11457 . . abe9071 100644 
 - - - a / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / CollatingOrderPreservingPartitioner . java 
 @ @ - 147 , 14 + 147 , 8 @ @ public class CollatingOrderPreservingPartitioner implements IPartitioner < BytesTo 
 return MINIMUM ; 
 } 
 
 - public BytesToken getDefaultToken ( ) 
 + public BytesToken getRandomToken ( ) 
 { 
 - String initialToken = DatabaseDescriptor . getInitialToken ( ) ; 
 - if ( initialToken ! = null ) 
 - / / assume that the user specified the intial Token as a String key 
 - return getToken ( initialToken ) ; 
 - 
 - / / generate random token 
 Random r = new Random ( ) ; 
 byte [ ] buffer = new byte [ 16 ] ; 
 r . nextBytes ( buffer ) ; 
 diff - - git a / src / java / org / apache / cassandra / dht / IPartitioner . java b / src / java / org / apache / cassandra / dht / IPartitioner . java 
 index fdc7b9d . . 27469d5 100644 
 - - - a / src / java / org / apache / cassandra / dht / IPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / IPartitioner . java 
 @ @ - 76 , 11 + 76 , 9 @ @ public interface IPartitioner < T extends Token > 
 public T getToken ( String key ) ; 
 
 / * * 
 - * @ return the default Token to represent this node if none was saved . 
 - * Uses the one given in the InitialToken configuration directive , 
 - * or picks one automatically if that was not given . 
 + * @ return a randomly generated token 
 * / 
 - public T getDefaultToken ( ) ; 
 + public T getRandomToken ( ) ; 
 
 public Token . TokenFactory getTokenFactory ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 index 5ccaf6e . . 6e7bcfe 100644 
 - - - a / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / OrderPreservingPartitioner . java 
 @ @ - 43 , 12 + 43 , 12 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > 
 
 public DecoratedKey < StringToken > decorateKey ( String key ) 
 { 
 - return new DecoratedKey < StringToken > ( null , key ) ; 
 + return new DecoratedKey < StringToken > ( new StringToken ( key ) , key ) ; 
 } 
 
 public DecoratedKey < StringToken > convertFromDiskFormat ( String key ) 
 { 
 - return new DecoratedKey < StringToken > ( null , key ) ; 
 + return new DecoratedKey < StringToken > ( new StringToken ( key ) , key ) ; 
 } 
 
 public String convertToDiskFormat ( DecoratedKey < StringToken > key ) 
 @ @ - 164 , 13 + 164 , 8 @ @ public class OrderPreservingPartitioner implements IPartitioner < StringToken > 
 return MINIMUM ; 
 } 
 
 - public StringToken getDefaultToken ( ) 
 + public StringToken getRandomToken ( ) 
 { 
 - String initialToken = DatabaseDescriptor . getInitialToken ( ) ; 
 - if ( initialToken ! = null ) 
 - return new StringToken ( initialToken ) ; 
 - 
 - / / generate random token 
 String chars = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 " ; 
 Random r = new Random ( ) ; 
 StringBuilder buffer = new StringBuilder ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / dht / RandomPartitioner . java b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 index d90fb18 . . 9bd1b24 100644 
 - - - a / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 + + + b / src / java / org / apache / cassandra / dht / RandomPartitioner . java 
 @ @ - 104 , 13 + 104 , 8 @ @ public class RandomPartitioner implements IPartitioner < BigIntegerToken > 
 return MINIMUM ; 
 } 
 
 - public BigIntegerToken getDefaultToken ( ) 
 + public BigIntegerToken getRandomToken ( ) 
 { 
 - String initialToken = DatabaseDescriptor . getInitialToken ( ) ; 
 - if ( initialToken ! = null ) 
 - return new BigIntegerToken ( new BigInteger ( initialToken ) ) ; 
 - 
 - / / generate random token 
 String guid = GuidGenerator . guid ( ) ; 
 BigInteger token = FBUtilities . hash ( guid ) ; 
 if ( token . signum ( ) = = - 1 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index b9cf8ed . . 11036d4 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 844 , 10 + 844 , 22 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 tokens . add ( range . left ( ) . toString ( ) ) ; 
 
 List < DecoratedKey > decoratedKeys = SSTableReader . getIndexedDecoratedKeys ( ) ; 
 - for ( int i = 1 ; i < splits ; i + + ) 
 + if ( decoratedKeys . size ( ) < splits ) 
 { 
 - int index = i * ( decoratedKeys . size ( ) / splits ) ; 
 - tokens . add ( decoratedKeys . get ( index ) . token . toString ( ) ) ; 
 + / / not enough keys to generate good splits - - generate random ones instead 
 + / / ( since this only happens when we don ' t have many keys , it doesn ' t really matter that the splits are poor ) 
 + for ( int i = 1 ; i < splits ; i + + ) 
 + { 
 + tokens . add ( partitioner _ . getRandomToken ( ) . toString ( ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + for ( int i = 1 ; i < splits ; i + + ) 
 + { 
 + int index = i * ( decoratedKeys . size ( ) / splits ) ; 
 + tokens . add ( decoratedKeys . get ( index ) . token . toString ( ) ) ; 
 + } 
 } 
 
 tokens . add ( range . right ( ) . toString ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java 
 index ad6c5d5 . . 5c7be6a 100644 
 - - - a / test / unit / org / apache / cassandra / dht / BootStrapperTest . java 
 + + + b / test / unit / org / apache / cassandra / dht / BootStrapperTest . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class BootStrapperTest { 
 
 generateFakeEndpoints ( numOldNodes ) ; 
 
 - Token myToken = StorageService . getPartitioner ( ) . getDefaultToken ( ) ; 
 + Token myToken = StorageService . getPartitioner ( ) . getRandomToken ( ) ; 
 InetAddress myEndpoint = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; 
 
 TokenMetadata tmd = ss . getTokenMetadata ( ) ; 
 @ @ - 94 , 7 + 94 , 7 @ @ public class BootStrapperTest { 
 for ( int i = 1 ; i < = numOldNodes ; i + + ) 
 { 
 / / leave . 1 for myEndpoint 
 - tmd . update ( p . getDefaultToken ( ) , InetAddress . getByName ( " 127 . 0 . 0 . " + ( i + 1 ) ) ) ; 
 + tmd . update ( p . getRandomToken ( ) , InetAddress . getByName ( " 127 . 0 . 0 . " + ( i + 1 ) ) ) ; 
 } 
 } 
 } 
 \ No newline at end of file
