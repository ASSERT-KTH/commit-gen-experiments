BLEU SCORE: 0.037954847898457066

TEST MSG: Limit major sstable operations to their canonical representation
GENERATED MSG: Pick sstables to validate as late as possible with inc repairs

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5cf621d . . 270c130 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 5 <nl> + * Limit major sstable operations to their canonical representation ( CASSANDRA - 8669 ) <nl> * cqlsh : Add tests for INSERT and UPDATE tab completion ( CASSANDRA - 9125 ) <nl> * cqlsh : quote column names when needed in COPY FROM inserts ( CASSANDRA - 9080 ) <nl> * Add generate - idea - files target to build . xml ( CASSANDRA - 9123 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 430259e . . f329a2b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 2226 , 14 + 2226 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) <nl> { <nl> final JSONArray filesJSONArr = new JSONArray ( ) ; <nl> - try ( RefViewFragment currentView = cfs . selectAndReference ( ALL _ SSTABLES ) ) <nl> + try ( RefViewFragment currentView = cfs . selectAndReference ( CANONICAL _ SSTABLES ) ) <nl> { <nl> for ( SSTableReader ssTable : currentView . sstables ) <nl> { <nl> - if ( ssTable . openReason = = SSTableReader . OpenReason . EARLY | | ( predicate ! = null & & ! predicate . apply ( ssTable ) ) ) <nl> - { <nl> + if ( predicate ! = null & & ! predicate . apply ( ssTable ) ) <nl> continue ; <nl> - } <nl> <nl> File snapshotDirectory = Directories . getSnapshotDirectory ( ssTable . descriptor , snapshotName ) ; <nl> ssTable . createLinks ( snapshotDirectory . getPath ( ) ) ; / / hard links <nl> @ @ - 2445 , 7 + 2443 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public Iterable < DecoratedKey > keySamples ( Range < Token > range ) <nl> { <nl> - try ( RefViewFragment view = selectAndReference ( ALL _ SSTABLES ) ) <nl> + try ( RefViewFragment view = selectAndReference ( CANONICAL _ SSTABLES ) ) <nl> { <nl> Iterable < DecoratedKey > [ ] samples = new Iterable [ view . sstables . size ( ) ] ; <nl> int i = 0 ; <nl> @ @ - 2459 , 7 + 2457 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public long estimatedKeysForRange ( Range < Token > range ) <nl> { <nl> - try ( RefViewFragment view = selectAndReference ( ALL _ SSTABLES ) ) <nl> + try ( RefViewFragment view = selectAndReference ( CANONICAL _ SSTABLES ) ) <nl> { <nl> long count = 0 ; <nl> for ( SSTableReader sstable : view . sstables ) <nl> @ @ - 2929 , 11 + 2927 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> fileIndexGenerator . set ( 0 ) ; <nl> } <nl> <nl> - public static final Function < DataTracker . View , List < SSTableReader > > ALL _ SSTABLES = new Function < DataTracker . View , List < SSTableReader > > ( ) <nl> + / / returns the " canonical " version of any current sstable , i . e . if an sstable is being replaced and is only partially <nl> + / / visible to reads , this sstable will be returned as its original entirety , and its replacement will not be returned <nl> + / / ( even if it completely replaces it ) <nl> + public static final Function < DataTracker . View , List < SSTableReader > > CANONICAL _ SSTABLES = new Function < DataTracker . View , List < SSTableReader > > ( ) <nl> { <nl> public List < SSTableReader > apply ( DataTracker . View view ) <nl> { <nl> - return new ArrayList < > ( view . sstables ) ; <nl> + List < SSTableReader > sstables = new ArrayList < > ( ) ; <nl> + sstables . addAll ( view . compacting ) ; <nl> + for ( SSTableReader sstable : view . sstables ) <nl> + if ( ! view . compacting . contains ( sstable ) & & sstable . openReason ! = SSTableReader . OpenReason . EARLY ) <nl> + sstables . add ( sstable ) ; <nl> + return sstables ; <nl> } <nl> } ; <nl> <nl> @ @ - 2942 , 7 + 2948 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> public List < SSTableReader > apply ( DataTracker . View view ) <nl> { <nl> List < SSTableReader > sstables = new ArrayList < > ( ) ; <nl> - for ( SSTableReader sstable : view . sstables ) <nl> + for ( SSTableReader sstable : CANONICAL _ SSTABLES . apply ( view ) ) <nl> { <nl> if ( ! sstable . isRepaired ( ) ) <nl> sstables . add ( sstable ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index b9c4553 . . a33e533 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 954 , 7 + 954 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / / we don ' t mark validating sstables as compacting in DataTracker , so we have to mark them referenced <nl> / / instead so they won ' t be cleaned up if they do get compacted during the validation <nl> if ( validator . desc . parentSessionId = = null | | ActiveRepairService . instance . getParentRepairSession ( validator . desc . parentSessionId ) = = null ) <nl> - sstables = cfs . selectAndReference ( ColumnFamilyStore . ALL _ SSTABLES ) . refs ; <nl> + sstables = cfs . selectAndReference ( ColumnFamilyStore . CANONICAL _ SSTABLES ) . refs ; <nl> else <nl> { <nl> ColumnFamilyStore . RefViewFragment refView = cfs . selectAndReference ( ColumnFamilyStore . UNREPAIRED _ SSTABLES ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index be100f4 . . 3081016 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 203 , 7 + 203 , 7 @ @ public abstract class SecondaryIndex <nl> logger . info ( String . format ( " Submitting index build of % s for data in % s " , <nl> getIndexName ( ) , StringUtils . join ( baseCfs . getSSTables ( ) , " , " ) ) ) ; <nl> <nl> - try ( Refs < SSTableReader > sstables = baseCfs . selectAndReference ( ColumnFamilyStore . ALL _ SSTABLES ) . refs ) <nl> + try ( Refs < SSTableReader > sstables = baseCfs . selectAndReference ( ColumnFamilyStore . CANONICAL _ SSTABLES ) . refs ) <nl> { <nl> SecondaryIndexBuilder builder = new SecondaryIndexBuilder ( baseCfs , <nl> Collections . singleton ( getIndexName ( ) ) ,
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5cf621d . . 270c130 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 5 
 + * Limit major sstable operations to their canonical representation ( CASSANDRA - 8669 ) 
 * cqlsh : Add tests for INSERT and UPDATE tab completion ( CASSANDRA - 9125 ) 
 * cqlsh : quote column names when needed in COPY FROM inserts ( CASSANDRA - 9080 ) 
 * Add generate - idea - files target to build . xml ( CASSANDRA - 9123 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 430259e . . f329a2b 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 2226 , 14 + 2226 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 for ( ColumnFamilyStore cfs : concatWithIndexes ( ) ) 
 { 
 final JSONArray filesJSONArr = new JSONArray ( ) ; 
 - try ( RefViewFragment currentView = cfs . selectAndReference ( ALL _ SSTABLES ) ) 
 + try ( RefViewFragment currentView = cfs . selectAndReference ( CANONICAL _ SSTABLES ) ) 
 { 
 for ( SSTableReader ssTable : currentView . sstables ) 
 { 
 - if ( ssTable . openReason = = SSTableReader . OpenReason . EARLY | | ( predicate ! = null & & ! predicate . apply ( ssTable ) ) ) 
 - { 
 + if ( predicate ! = null & & ! predicate . apply ( ssTable ) ) 
 continue ; 
 - } 
 
 File snapshotDirectory = Directories . getSnapshotDirectory ( ssTable . descriptor , snapshotName ) ; 
 ssTable . createLinks ( snapshotDirectory . getPath ( ) ) ; / / hard links 
 @ @ - 2445 , 7 + 2443 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public Iterable < DecoratedKey > keySamples ( Range < Token > range ) 
 { 
 - try ( RefViewFragment view = selectAndReference ( ALL _ SSTABLES ) ) 
 + try ( RefViewFragment view = selectAndReference ( CANONICAL _ SSTABLES ) ) 
 { 
 Iterable < DecoratedKey > [ ] samples = new Iterable [ view . sstables . size ( ) ] ; 
 int i = 0 ; 
 @ @ - 2459 , 7 + 2457 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public long estimatedKeysForRange ( Range < Token > range ) 
 { 
 - try ( RefViewFragment view = selectAndReference ( ALL _ SSTABLES ) ) 
 + try ( RefViewFragment view = selectAndReference ( CANONICAL _ SSTABLES ) ) 
 { 
 long count = 0 ; 
 for ( SSTableReader sstable : view . sstables ) 
 @ @ - 2929 , 11 + 2927 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 fileIndexGenerator . set ( 0 ) ; 
 } 
 
 - public static final Function < DataTracker . View , List < SSTableReader > > ALL _ SSTABLES = new Function < DataTracker . View , List < SSTableReader > > ( ) 
 + / / returns the " canonical " version of any current sstable , i . e . if an sstable is being replaced and is only partially 
 + / / visible to reads , this sstable will be returned as its original entirety , and its replacement will not be returned 
 + / / ( even if it completely replaces it ) 
 + public static final Function < DataTracker . View , List < SSTableReader > > CANONICAL _ SSTABLES = new Function < DataTracker . View , List < SSTableReader > > ( ) 
 { 
 public List < SSTableReader > apply ( DataTracker . View view ) 
 { 
 - return new ArrayList < > ( view . sstables ) ; 
 + List < SSTableReader > sstables = new ArrayList < > ( ) ; 
 + sstables . addAll ( view . compacting ) ; 
 + for ( SSTableReader sstable : view . sstables ) 
 + if ( ! view . compacting . contains ( sstable ) & & sstable . openReason ! = SSTableReader . OpenReason . EARLY ) 
 + sstables . add ( sstable ) ; 
 + return sstables ; 
 } 
 } ; 
 
 @ @ - 2942 , 7 + 2948 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 public List < SSTableReader > apply ( DataTracker . View view ) 
 { 
 List < SSTableReader > sstables = new ArrayList < > ( ) ; 
 - for ( SSTableReader sstable : view . sstables ) 
 + for ( SSTableReader sstable : CANONICAL _ SSTABLES . apply ( view ) ) 
 { 
 if ( ! sstable . isRepaired ( ) ) 
 sstables . add ( sstable ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index b9c4553 . . a33e533 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 954 , 7 + 954 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / / we don ' t mark validating sstables as compacting in DataTracker , so we have to mark them referenced 
 / / instead so they won ' t be cleaned up if they do get compacted during the validation 
 if ( validator . desc . parentSessionId = = null | | ActiveRepairService . instance . getParentRepairSession ( validator . desc . parentSessionId ) = = null ) 
 - sstables = cfs . selectAndReference ( ColumnFamilyStore . ALL _ SSTABLES ) . refs ; 
 + sstables = cfs . selectAndReference ( ColumnFamilyStore . CANONICAL _ SSTABLES ) . refs ; 
 else 
 { 
 ColumnFamilyStore . RefViewFragment refView = cfs . selectAndReference ( ColumnFamilyStore . UNREPAIRED _ SSTABLES ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index be100f4 . . 3081016 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 203 , 7 + 203 , 7 @ @ public abstract class SecondaryIndex 
 logger . info ( String . format ( " Submitting index build of % s for data in % s " , 
 getIndexName ( ) , StringUtils . join ( baseCfs . getSSTables ( ) , " , " ) ) ) ; 
 
 - try ( Refs < SSTableReader > sstables = baseCfs . selectAndReference ( ColumnFamilyStore . ALL _ SSTABLES ) . refs ) 
 + try ( Refs < SSTableReader > sstables = baseCfs . selectAndReference ( ColumnFamilyStore . CANONICAL _ SSTABLES ) . refs ) 
 { 
 SecondaryIndexBuilder builder = new SecondaryIndexBuilder ( baseCfs , 
 Collections . singleton ( getIndexName ( ) ) ,

NEAREST DIFF:
ELIMINATEDSENTENCE
