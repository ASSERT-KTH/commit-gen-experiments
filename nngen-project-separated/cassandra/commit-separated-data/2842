BLEU SCORE: 0.028398387225677897

TEST MSG: RowIndexEntry . Serializer . skip is a static method , call it as such
GENERATED MSG: Fix JMX bulkload call

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> index 3dc0ded . . 34f9b98 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> @ @ - 139 , 7 + 139 , 7 @ @ public class SSTableScanner implements ICompactionScanner <nl> } <nl> else <nl> { <nl> - sstable . metadata . comparator . rowIndexEntrySerializer ( ) . skip ( ifile ) ; <nl> + RowIndexEntry . Serializer . skip ( ifile ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 884ee1e . . da076f8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 40 , 6 + 40 , 12 @ @ <nl> * add ant - optional as dependence for the debian package ( CASSANDRA - 2164 ) <nl> * add option to specify limit for get _ slice in the CLI ( CASSANDRA - 2646 ) <nl> * decrease HH page size ( CASSANDRA - 2832 ) <nl> + * reset cli keyspace after dropping the current one ( CASSANDRA - 2763 ) <nl> + * add KeyRange option to Hadoop inputformat ( CASSANDRA - 1125 ) <nl> + * fix protocol versioning ( CASSANDRA - 2818 , 2860 ) <nl> + * support spaces in path to log4j configuration ( CASSANDRA - 2383 ) <nl> + * avoid including inferred types in CF update ( CASSANDRA - 2809 ) <nl> + * fix JMX bulkload call ( CASSANDRA - 2908 ) <nl> <nl> <nl> 0 . 8 . 1 <nl> @ @ - 232 , 6 + 238 , 7 @ @ <nl> * add a server - wide cap on measured memtable memory usage and aggressively <nl> flush to keep under that threshold ( CASSANDRA - 2006 ) <nl> * add unified UUIDType ( CASSANDRA - 2233 ) <nl> + * add off - heap row cache support ( CASSANDRA - 1969 ) <nl> <nl> <nl> 0 . 7 . 5 <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 625f79a . . 1901ed2 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 80 , 13 + 80 , 16 @ @ saved _ caches _ directory : / var / lib / cassandra / saved _ caches <nl> # commitlog _ sync may be either " periodic " or " batch . " <nl> # When in batch mode , Cassandra won ' t ack writes until the commit log <nl> # has been fsynced to disk . It will wait up to <nl> - # CommitLogSyncBatchWindowInMS milliseconds for other writes , before <nl> + # commitlog _ sync _ batch _ window _ in _ ms milliseconds for other writes , before <nl> # performing the sync . <nl> - commitlog _ sync : periodic <nl> - <nl> + # <nl> + # commitlog _ sync : batch <nl> + # commitlog _ sync _ batch _ window _ in _ ms : 50 <nl> + # <nl> # the other option is " periodic " where writes may be acked immediately <nl> # and the CommitLog is simply synced every commitlog _ sync _ period _ in _ ms <nl> # milliseconds . <nl> + commitlog _ sync : periodic <nl> commitlog _ sync _ period _ in _ ms : 10000 <nl> <nl> # any class that implements the SeedProvider interface and has a constructor that takes a Map < String , String > of <nl> diff - - git a / examples / client _ only / conf / cassandra . yaml b / examples / client _ only / conf / cassandra . yaml <nl> index 97e3853 . . 2d92794 100644 <nl> - - - a / examples / client _ only / conf / cassandra . yaml <nl> + + + b / examples / client _ only / conf / cassandra . yaml <nl> @ @ - 77 , 9 + 77 , 6 @ @ commitlog _ directory : / var / lib / cassandra / commitlog <nl> # saved caches <nl> saved _ caches _ directory : / var / lib / cassandra / saved _ caches <nl> <nl> - # Size to allow commitlog to grow to before creating a new segment <nl> - commitlog _ rotation _ threshold _ in _ mb : 128 <nl> - <nl> # commitlog _ sync may be either " periodic " or " batch . " <nl> # When in batch mode , Cassandra won ' t ack writes until the commit log <nl> # has been fsynced to disk . It will wait up to <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 7ef940a . . 878bf74 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 350 , 7 + 350 , 6 @ @ public class CliClient <nl> <nl> Tree columnFamilySpec = statement . getChild ( 0 ) ; <nl> <nl> - String key = CliCompiler . getKey ( columnFamilySpec ) ; <nl> String columnFamily = CliCompiler . getColumnFamily ( columnFamilySpec , keyspacesMap . get ( keySpace ) . cf _ defs ) ; <nl> int columnSpecCnt = CliCompiler . numColumnSpecifiers ( columnFamilySpec ) ; <nl> <nl> @ @ - 358 , 14 + 357 , 19 @ @ public class CliClient <nl> <nl> if ( columnSpecCnt ! = 0 ) <nl> { <nl> - byte [ ] superColumn = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , columnFamily ) ; <nl> + Tree columnTree = columnFamilySpec . getChild ( 2 ) ; <nl> + <nl> + byte [ ] superColumn = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( columnTree , null , null ) . array ( ) <nl> + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , columnFamily ) ; <nl> + <nl> colParent = new ColumnParent ( columnFamily ) . setSuper _ column ( superColumn ) ; <nl> } <nl> <nl> SliceRange range = new SliceRange ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , false , Integer . MAX _ VALUE ) ; <nl> SlicePredicate predicate = new SlicePredicate ( ) . setColumn _ names ( null ) . setSlice _ range ( range ) ; <nl> <nl> - int count = thriftClient . get _ count ( ByteBufferUtil . bytes ( key ) , colParent , predicate , consistencyLevel ) ; <nl> + int count = thriftClient . get _ count ( getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) , colParent , predicate , consistencyLevel ) ; <nl> sessionState . out . printf ( " % d columns % n " , count ) ; <nl> } <nl> <nl> @ @ - 377 , 13 + 381 , 14 @ @ public class CliClient <nl> <nl> Tree columnFamilySpec = statement . getChild ( 0 ) ; <nl> <nl> - String key = CliCompiler . getKey ( columnFamilySpec ) ; <nl> String columnFamily = CliCompiler . getColumnFamily ( columnFamilySpec , keyspacesMap . get ( keySpace ) . cf _ defs ) ; <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + ByteBuffer key = getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) ; <nl> int columnSpecCnt = CliCompiler . numColumnSpecifiers ( columnFamilySpec ) ; <nl> <nl> byte [ ] superColumnName = null ; <nl> byte [ ] columnName = null ; <nl> - CfDef cfDef = getCfDef ( columnFamily ) ; <nl> boolean isSuper = cfDef . column _ type . equals ( " Super " ) ; <nl> <nl> if ( ( columnSpecCnt < 0 ) | | ( columnSpecCnt > 2 ) ) <nl> @ @ - 391 , 20 + 396 , 42 @ @ public class CliClient <nl> sessionState . out . println ( " Invalid row , super column , or column specification . " ) ; <nl> return ; <nl> } <nl> - <nl> + <nl> + Tree columnTree = ( columnSpecCnt > = 1 ) <nl> + ? columnFamilySpec . getChild ( 2 ) <nl> + : null ; <nl> + <nl> + Tree subColumnTree = ( columnSpecCnt = = 2 ) <nl> + ? columnFamilySpec . getChild ( 3 ) <nl> + : null ; <nl> + <nl> if ( columnSpecCnt = = 1 ) <nl> { <nl> - / / table . cf [ ' key ' ] [ ' column ' ] <nl> + assert columnTree ! = null ; <nl> + <nl> + byte [ ] columnNameBytes = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( columnTree , null , null ) . array ( ) <nl> + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + <nl> + <nl> if ( isSuper ) <nl> - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + superColumnName = columnNameBytes ; <nl> else <nl> - columnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + columnName = columnNameBytes ; <nl> } <nl> else if ( columnSpecCnt = = 2 ) <nl> { <nl> + assert columnTree ! = null ; <nl> + assert subColumnTree ! = null ; <nl> + <nl> / / table . cf [ ' key ' ] [ ' column ' ] [ ' column ' ] <nl> - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> - columnName = subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; <nl> + superColumnName = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( columnTree , null , null ) . array ( ) <nl> + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; <nl> + <nl> + columnName = ( subColumnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) <nl> + ? convertValueByFunction ( subColumnTree , null , null ) . array ( ) <nl> + : subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; <nl> } <nl> <nl> ColumnPath path = new ColumnPath ( columnFamily ) ; <nl> @ @ - 416 , 12 + 443 , 11 @ @ public class CliClient <nl> <nl> if ( isCounterCF ( cfDef ) ) <nl> { <nl> - thriftClient . remove _ counter ( ByteBufferUtil . bytes ( key ) , path , consistencyLevel ) ; <nl> + thriftClient . remove _ counter ( key , path , consistencyLevel ) ; <nl> } <nl> else <nl> { <nl> - thriftClient . remove ( ByteBufferUtil . bytes ( key ) , path , <nl> - FBUtilities . timestampMicros ( ) , consistencyLevel ) ; <nl> + thriftClient . remove ( key , path , FBUtilities . timestampMicros ( ) , consistencyLevel ) ; <nl> } <nl> sessionState . out . println ( String . format ( " % s removed . " , ( columnSpecCnt = = 0 ) ? " row " : " column " ) ) ; <nl> } <nl> @ @ - 1050 , 11 + 1076 , 15 @ @ public class CliClient <nl> return ; <nl> <nl> String cfName = CliCompiler . getColumnFamily ( statement , keyspacesMap . get ( keySpace ) . cf _ defs ) ; <nl> - / / first child is a column family name <nl> - CfDef cfDef = getCfDef ( cfName ) ; <nl> <nl> try <nl> { <nl> + / / request correct cfDef from the server <nl> + CfDef cfDef = getCfDef ( thriftClient . describe _ keyspace ( this . keySpace ) , cfName ) ; <nl> + <nl> + if ( cfDef = = null ) <nl> + throw new RuntimeException ( " Column Family " + cfName + " was not found in the current keyspace . " ) ; <nl> + <nl> String mySchemaVersion = thriftClient . system _ update _ column _ family ( updateCfDefAttributes ( statement , cfDef ) ) ; <nl> sessionState . out . println ( mySchemaVersion ) ; <nl> validateSchemaIsSettled ( mySchemaVersion ) ; <nl> @ @ - 1202 , 7 + 1232 , 7 @ @ public class CliClient <nl> cfDef . setKey _ cache _ save _ period _ in _ seconds ( Integer . parseInt ( mValue ) ) ; <nl> break ; <nl> case DEFAULT _ VALIDATION _ CLASS : <nl> - cfDef . setDefault _ validation _ class ( mValue ) ; <nl> + cfDef . setDefault _ validation _ class ( CliUtils . unescapeSQLString ( mValue ) ) ; <nl> break ; <nl> case MIN _ COMPACTION _ THRESHOLD : <nl> cfDef . setMin _ compaction _ threshold ( Integer . parseInt ( mValue ) ) ; <nl> @ @ - 1252 , 6 + 1282 , 9 @ @ public class CliClient <nl> String version = thriftClient . system _ drop _ keyspace ( keyspaceName ) ; <nl> sessionState . out . println ( version ) ; <nl> validateSchemaIsSettled ( version ) ; <nl> + <nl> + if ( keyspaceName . equals ( keySpace ) ) / / we just deleted the keyspace we were authenticated too <nl> + keySpace = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 1898 , 7 + 1931 , 18 @ @ public class CliClient <nl> { <nl> return getCfDef ( this . keySpace , columnFamilyName ) ; <nl> } <nl> - <nl> + <nl> + private CfDef getCfDef ( KsDef keyspace , String columnFamilyName ) <nl> + { <nl> + for ( CfDef cfDef : keyspace . cf _ defs ) <nl> + { <nl> + if ( cfDef . name . equals ( columnFamilyName ) ) <nl> + return cfDef ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> / * * <nl> * Used to parse meta tree and compile meta attributes into List < ColumnDef > <nl> * @ param cfDef - column family definition <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index a64bf87 . . 5a9e231 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cli ; <nl> <nl> import java . util . List ; <nl> <nl> - / * * <nl> - * @ author Pavel A . Yaskevich <nl> - * / <nl> public class CliUserHelp <nl> { <nl> public String banner ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 01de9d2 . . 3bd7287 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 101 , 7 + 101 , 7 @ @ public class DatabaseDescriptor <nl> try <nl> { <nl> url = new URL ( configUrl ) ; <nl> - url . openStream ( ) ; / / catches well - formed but bogus URLs <nl> + url . openStream ( ) . close ( ) ; / / catches well - formed but bogus URLs <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / TruncateResponse . java b / src / java / org / apache / cassandra / db / TruncateResponse . java <nl> index 8929f36 . . 3c1c507 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TruncateResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / TruncateResponse . java <nl> @ @ - 31 , 8 + 31 , 6 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> / * * <nl> * This message is sent back the truncate operation and basically specifies if <nl> * the truncate succeeded . <nl> - * <nl> - * @ author rantav @ gmail . com <nl> * / <nl> public class TruncateResponse <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / Truncation . java b / src / java / org / apache / cassandra / db / Truncation . java <nl> index 70b05e4 . . fb2b10d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Truncation . java <nl> + + + b / src / java / org / apache / cassandra / db / Truncation . java <nl> @ @ - 31 , 9 + 31 , 6 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * A truncate operation descriptor <nl> - * <nl> - * @ author rantav @ gmail . com <nl> - * <nl> * / <nl> public class Truncation implements MessageProducer <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> index c7d5501 . . b724af6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ public class CompactionController <nl> <nl> public final boolean isMajor ; <nl> public final int gcBefore ; <nl> + private int throttleResolution ; <nl> <nl> public CompactionController ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int gcBefore , boolean forceDeserialize ) <nl> { <nl> @ @ - 55 , 15 + 56 , 26 @ @ public class CompactionController <nl> this . gcBefore = gcBefore ; <nl> this . forceDeserialize = forceDeserialize ; <nl> isMajor = cfs . isCompleteSSTables ( this . sstables ) ; <nl> + / / how many rows we expect to compact in 100ms <nl> + long rowSize = cfs . getMeanRowSize ( ) ; <nl> + int rowsPerSecond = rowSize > 0 <nl> + ? ( int ) ( DatabaseDescriptor . getCompactionThroughputMbPerSec ( ) * 1024 * 1024 / rowSize ) <nl> + : 1000 ; <nl> + throttleResolution = rowsPerSecond / 10 ; <nl> + if ( throttleResolution < = 0 ) <nl> + throttleResolution = 1 ; <nl> + } <nl> + <nl> + public int getThrottleResolution ( ) <nl> + { <nl> + return throttleResolution ; <nl> } <nl> <nl> - / * * @ return the keyspace name * / <nl> public String getKeyspace ( ) <nl> { <nl> return cfs . table . name ; <nl> } <nl> <nl> - / * * @ return the column family name * / <nl> public String getColumnFamily ( ) <nl> { <nl> return cfs . columnFamily ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> index ff6075f . . 55a52af 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> @ @ - 121 , 9 + 121 , 7 @ @ implements CloseableIterator < AbstractCompactedRow > , CompactionInfo . Holder <nl> int newTarget = totalBytesPerMS / <nl> Math . max ( 1 , CompactionManager . instance . getActiveCompactions ( ) ) ; <nl> if ( newTarget ! = targetBytesPerMS ) <nl> - logger . info ( String . format ( " % s now compacting at % d bytes / ms . " , <nl> - this , <nl> - newTarget ) ) ; <nl> + logger . debug ( " { } now compacting at { } bytes / ms . " , this , newTarget ) ; <nl> targetBytesPerMS = newTarget ; <nl> <nl> / / the excess bytes that were compacted in this period <nl> @ @ - 136 , 7 + 134 , 14 @ @ implements CloseableIterator < AbstractCompactedRow > , CompactionInfo . Holder <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( String . format ( " Compacted % d bytes in % d ms : throttling for % d ms " , <nl> bytesSinceLast , msSinceLast , timeToDelay ) ) ; <nl> - try { Thread . sleep ( timeToDelay ) ; } catch ( InterruptedException e ) { throw new AssertionError ( e ) ; } <nl> + try <nl> + { <nl> + Thread . sleep ( timeToDelay ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> } <nl> bytesAtLastDelay = bytesRead ; <nl> timeAtLastDelay = System . currentTimeMillis ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index dbb3636 . . a0bec4f 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 194 , 6 + 194 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> versions . put ( address , version ) ; <nl> } <nl> <nl> + public void resetVersion ( InetAddress endpoint ) <nl> + { <nl> + versions . remove ( endpoint ) ; <nl> + } <nl> + <nl> public Integer getVersion ( InetAddress address ) <nl> { <nl> Integer v = versions . get ( address ) ; <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java <nl> index 6415878 . . 51c8fca 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java <nl> @ @ - 35 , 8 + 35 , 11 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . IColumn ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . thrift . Cassandra ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> + import org . apache . cassandra . thrift . KeyRange ; <nl> import org . apache . cassandra . thrift . TokenRange ; <nl> import org . apache . cassandra . thrift . TBinaryProtocol ; <nl> import org . apache . hadoop . conf . Configuration ; <nl> @ @ - 102 , 10 + 105 , 44 @ @ public class ColumnFamilyInputFormat extends InputFormat < ByteBuffer , SortedMap < B <nl> try <nl> { <nl> List < Future < List < InputSplit > > > splitfutures = new ArrayList < Future < List < InputSplit > > > ( ) ; <nl> + KeyRange jobKeyRange = ConfigHelper . getInputKeyRange ( conf ) ; <nl> + IPartitioner partitioner = null ; <nl> + Range jobRange = null ; <nl> + if ( jobKeyRange ! = null ) <nl> + { <nl> + partitioner = ConfigHelper . getPartitioner ( context . getConfiguration ( ) ) ; <nl> + assert partitioner . preservesOrder ( ) : " ConfigHelper . setInputKeyRange ( . . ) can only be used with a order preserving paritioner " ; <nl> + assert jobKeyRange . start _ key = = null : " only start _ token supported " ; <nl> + assert jobKeyRange . end _ key = = null : " only end _ token supported " ; <nl> + jobRange = new Range ( partitioner . getTokenFactory ( ) . fromString ( jobKeyRange . start _ token ) , <nl> + partitioner . getTokenFactory ( ) . fromString ( jobKeyRange . end _ token ) , <nl> + partitioner ) ; <nl> + } <nl> + <nl> for ( TokenRange range : masterRangeNodes ) <nl> { <nl> + if ( jobRange = = null ) <nl> + { <nl> / / for each range , pick a live owner and ask it to compute bite - sized splits <nl> splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + Range dhtRange = new Range ( partitioner . getTokenFactory ( ) . fromString ( range . start _ token ) , <nl> + partitioner . getTokenFactory ( ) . fromString ( range . end _ token ) , <nl> + partitioner ) ; <nl> + <nl> + if ( dhtRange . intersects ( jobRange ) ) <nl> + { <nl> + Set < Range > intersections = dhtRange . intersectionWith ( jobRange ) ; <nl> + assert intersections . size ( ) = = 1 : " wrapping ranges not yet supported " ; <nl> + Range intersection = intersections . iterator ( ) . next ( ) ; <nl> + range . start _ token = partitioner . getTokenFactory ( ) . toString ( intersection . left ) ; <nl> + range . end _ token = partitioner . getTokenFactory ( ) . toString ( intersection . right ) ; <nl> + / / for each range , pick a live owner and ask it to compute bite - sized splits <nl> + splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / / wait until we have all the results back <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> index 433c6ef . . 3cd19ef 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> @ @ - 53 , 7 + 53 , 6 @ @ import org . apache . thrift . transport . TSocket ; <nl> * directly to a responsible endpoint . <nl> * < / p > <nl> * <nl> - * @ author Karthick Sankarachary <nl> * @ see ColumnFamilyOutputFormat <nl> * @ see OutputFormat <nl> * <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> index 0478ac7 . . 8345fb7 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package org . apache . cassandra . hadoop ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . thrift . KeyRange ; <nl> import org . apache . cassandra . thrift . SlicePredicate ; <nl> import org . apache . cassandra . thrift . TBinaryProtocol ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> @ @ - 42 , 6 + 43 , 7 @ @ public class ConfigHelper <nl> private static final String INPUT _ COLUMNFAMILY _ CONFIG = " cassandra . input . columnfamily " ; <nl> private static final String OUTPUT _ COLUMNFAMILY _ CONFIG = " cassandra . output . columnfamily " ; <nl> private static final String INPUT _ PREDICATE _ CONFIG = " cassandra . input . predicate " ; <nl> + private static final String INPUT _ KEYRANGE _ CONFIG = " cassandra . input . keyRange " ; <nl> private static final String OUTPUT _ PREDICATE _ CONFIG = " cassandra . output . predicate " ; <nl> private static final String INPUT _ SPLIT _ SIZE _ CONFIG = " cassandra . input . split . size " ; <nl> private static final int DEFAULT _ SPLIT _ SIZE = 64 * 1024 ; <nl> @ @ - 195 , 6 + 197 , 53 @ @ public class ConfigHelper <nl> return predicate ; <nl> } <nl> <nl> + / * * <nl> + * Set the KeyRange to limit the rows . <nl> + * @ param conf Job configuration you are about to run <nl> + * / <nl> + public static void setInputRange ( Configuration conf , String startToken , String endToken ) <nl> + { <nl> + KeyRange range = new KeyRange ( ) . setStart _ token ( startToken ) . setEnd _ token ( endToken ) ; <nl> + conf . set ( INPUT _ KEYRANGE _ CONFIG , keyRangeToString ( range ) ) ; <nl> + } <nl> + <nl> + / * * may be null if unset * / <nl> + public static KeyRange getInputKeyRange ( Configuration conf ) <nl> + { <nl> + String str = conf . get ( INPUT _ KEYRANGE _ CONFIG ) ; <nl> + return null ! = str ? keyRangeFromString ( str ) : null ; <nl> + } <nl> + <nl> + private static String keyRangeToString ( KeyRange keyRange ) <nl> + { <nl> + assert keyRange ! = null ; <nl> + TSerializer serializer = new TSerializer ( new TBinaryProtocol . Factory ( ) ) ; <nl> + try <nl> + { <nl> + return FBUtilities . bytesToHex ( serializer . serialize ( keyRange ) ) ; <nl> + } <nl> + catch ( TException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private static KeyRange keyRangeFromString ( String st ) <nl> + { <nl> + assert st ! = null ; <nl> + TDeserializer deserializer = new TDeserializer ( new TBinaryProtocol . Factory ( ) ) ; <nl> + KeyRange keyRange = new KeyRange ( ) ; <nl> + try <nl> + { <nl> + deserializer . deserialize ( keyRange , FBUtilities . hexToBytes ( st ) ) ; <nl> + } <nl> + catch ( TException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + return keyRange ; <nl> + } <nl> + <nl> public static String getInputKeyspace ( Configuration conf ) <nl> { <nl> return conf . get ( INPUT _ KEYSPACE _ CONFIG ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> index 6297f8f . . ea0a0cf 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> @ @ - 101 , 7 + 101 , 7 @ @ public class SSTableLoader <nl> <nl> public LoaderFuture stream ( Set < InetAddress > toIgnore ) throws IOException <nl> { <nl> - client . init ( ) ; <nl> + client . init ( keyspace ) ; <nl> <nl> Collection < SSTableReader > sstables = openSSTables ( ) ; <nl> if ( sstables . isEmpty ( ) ) <nl> @ @ - 234 , 7 + 234 , 7 @ @ public class SSTableLoader <nl> * This method is guaranted to be called before any other method of a <nl> * client . <nl> * / <nl> - public abstract void init ( ) ; <nl> + public abstract void init ( String keyspace ) ; <nl> <nl> / * * <nl> * Stop the client . <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index 4e45043 . . 11eda6f 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 87 , 9 + 87 , 8 @ @ public abstract class AbstractReplicationStrategy <nl> * we return a List to avoid an extra allocation when sorting by proximity later <nl> * @ param searchToken the token the natural endpoints are requested for <nl> * @ return a copy of the natural endpoints for the given token <nl> - * @ throws IllegalStateException if the number of requested replicas is greater than the number of known endpoints <nl> * / <nl> - public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) throws IllegalStateException <nl> + public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) <nl> { <nl> Token keyToken = TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , searchToken ) ; <nl> ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; <nl> @ @ - 99 , 10 + 98 , 6 @ @ public abstract class AbstractReplicationStrategy <nl> keyToken = TokenMetadata . firstToken ( tokenMetadataClone . sortedTokens ( ) , searchToken ) ; <nl> endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tokenMetadataClone ) ) ; <nl> cacheEndpoint ( keyToken , endpoints ) ; <nl> - / / calculateNaturalEndpoints should have checked this already , this is a safety <nl> - assert getReplicationFactor ( ) < = endpoints . size ( ) : String . format ( " endpoints % s generated for RF of % s " , <nl> - Arrays . toString ( endpoints . toArray ( ) ) , <nl> - getReplicationFactor ( ) ) ; <nl> } <nl> <nl> return new ArrayList < InetAddress > ( endpoints ) ; <nl> @ @ - 115 , 9 + 110 , 8 @ @ public abstract class AbstractReplicationStrategy <nl> * <nl> * @ param searchToken the token the natural endpoints are requested for <nl> * @ return a copy of the natural endpoints for the given token <nl> - * @ throws IllegalStateException if the number of requested replicas is greater than the number of known endpoints <nl> * / <nl> - public abstract List < InetAddress > calculateNaturalEndpoints ( Token searchToken , TokenMetadata tokenMetadata ) throws IllegalStateException ; <nl> + public abstract List < InetAddress > calculateNaturalEndpoints ( Token searchToken , TokenMetadata tokenMetadata ) ; <nl> <nl> public IWriteResponseHandler getWriteResponseHandler ( Collection < InetAddress > writeEndpoints , <nl> Multimap < InetAddress , InetAddress > hintedEndpoints , <nl> diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> index 317631a . . 0537ffb 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> @ @ - 120 , 9 + 120 , 6 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy <nl> dcEndpoints . add ( endpoint ) ; <nl> } <nl> <nl> - if ( dcEndpoints . size ( ) < dcReplicas ) <nl> - throw new IllegalStateException ( String . format ( " datacenter ( % s ) has no more endpoints , ( % s ) replicas still needed " , <nl> - dcName , dcReplicas - dcEndpoints . size ( ) ) ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " { } endpoints in datacenter { } for token { } " , <nl> new Object [ ] { StringUtils . join ( dcEndpoints , " , " ) , dcName , searchToken } ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java <nl> index 558d659 . . d8f32c8 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java <nl> @ @ - 96 , 9 + 96 , 6 @ @ public class OldNetworkTopologyStrategy extends AbstractReplicationStrategy <nl> if ( ! endpoints . contains ( metadata . getEndpoint ( t ) ) ) <nl> endpoints . add ( metadata . getEndpoint ( t ) ) ; <nl> } <nl> - <nl> - if ( endpoints . size ( ) < replicas ) <nl> - throw new IllegalStateException ( String . format ( " replication factor ( % s ) exceeds number of endpoints ( % s ) " , replicas , endpoints . size ( ) ) ) ; <nl> } <nl> <nl> return endpoints ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / SimpleStrategy . java b / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> index 09935df . . 024e9d4 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> @ @ - 56 , 10 + 56 , 6 @ @ public class SimpleStrategy extends AbstractReplicationStrategy <nl> { <nl> endpoints . add ( metadata . getEndpoint ( iter . next ( ) ) ) ; <nl> } <nl> - <nl> - if ( endpoints . size ( ) < replicas ) <nl> - throw new IllegalStateException ( String . format ( " replication factor ( % s ) exceeds number of endpoints ( % s ) " , replicas , endpoints . size ( ) ) ) ; <nl> - <nl> return endpoints ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index fadd1b2 . . 828dac0 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . concurrent . BlockingQueue ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 138 , 6 + 139 , 9 @ @ public class OutboundTcpConnection extends Thread <nl> output = null ; <nl> socket = null ; <nl> } <nl> + <nl> + / / when we see the node again , try to connect at the most recent protocol we know about <nl> + Gossiper . instance . resetVersion ( endpoint ) ; <nl> } <nl> <nl> private ByteBuffer take ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> index 93c664a . . 7ad7ba5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java <nl> @ @ - 73 , 12 + 73 , 30 @ @ public abstract class AbstractCassandraDaemon implements CassandraDaemon <nl> } <nl> catch ( MalformedURLException ex ) <nl> { <nl> - / / load from the classpath . <nl> + / / then try loading from the classpath . <nl> configLocation = AbstractCassandraDaemon . class . getClassLoader ( ) . getResource ( config ) ; <nl> - if ( configLocation = = null ) <nl> - throw new RuntimeException ( " Couldn ' t figure out log4j configuration . " ) ; <nl> } <nl> - PropertyConfigurator . configureAndWatch ( configLocation . getFile ( ) , 10000 ) ; <nl> + <nl> + if ( configLocation = = null ) <nl> + throw new RuntimeException ( " Couldn ' t figure out log4j configuration : " + config ) ; <nl> + <nl> + / / Now convert URL to a filename <nl> + String configFileName = null ; <nl> + try <nl> + { <nl> + / / first try URL . getFile ( ) which works for opaque URLs ( file : foo ) and paths without spaces <nl> + configFileName = configLocation . getFile ( ) ; <nl> + File configFile = new File ( configFileName ) ; <nl> + / / then try alternative approach which works for all hierarchical URLs with or without spaces <nl> + if ( ! configFile . exists ( ) ) <nl> + configFileName = new File ( configLocation . toURI ( ) ) . getCanonicalPath ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( " Couldn ' t convert log4j configuration location to a valid file " , e ) ; <nl> + } <nl> + <nl> + PropertyConfigurator . configureAndWatch ( configFileName , 10000 ) ; <nl> org . apache . log4j . Logger . getLogger ( AbstractCassandraDaemon . class ) . info ( " Logging initialized " ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> index 6ccf3e4 . . 53bcb16 100644 <nl> - - - a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> + + + b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java <nl> @ @ - 45 , 8 + 45 , 6 @ @ import org . apache . thrift . transport . TTransportException ; <nl> cassandra . start ( ) ; <nl> <nl> * < / pre > <nl> - * @ author Ran Tavory ( rantav @ gmail . com ) <nl> - * <nl> * / <nl> public class EmbeddedCassandraService <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 1370d1c . . 8f6e19b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1296 , 6 + 1296 , 26 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> return stringify ( Gossiper . instance . getUnreachableMembers ( ) ) ; <nl> } <nl> <nl> + public String [ ] getAllDataFileLocations ( ) <nl> + { <nl> + return DatabaseDescriptor . getAllDataFileLocations ( ) ; <nl> + } <nl> + <nl> + public String [ ] getAllDataFileLocationsForTable ( String table ) <nl> + { <nl> + return DatabaseDescriptor . getAllDataFileLocationsForTable ( table ) ; <nl> + } <nl> + <nl> + public String getCommitLogLocation ( ) <nl> + { <nl> + return DatabaseDescriptor . getCommitLogLocation ( ) ; <nl> + } <nl> + <nl> + public String getSavedCachesLocation ( ) <nl> + { <nl> + return DatabaseDescriptor . getSavedCachesLocation ( ) ; <nl> + } <nl> + <nl> private List < String > stringify ( Iterable < InetAddress > endpoints ) <nl> { <nl> List < String > stringEndpoints = new ArrayList < String > ( ) ; <nl> @ @ - 2448 , 7 + 2468 , 15 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> <nl> SSTableLoader . Client client = new SSTableLoader . Client ( ) <nl> { <nl> - public void init ( ) { } <nl> + public void init ( String keyspace ) <nl> + { <nl> + for ( Map . Entry < Range , List < InetAddress > > entry : StorageService . instance . getRangeToAddressMap ( keyspace ) . entrySet ( ) ) <nl> + { <nl> + Range range = entry . getKey ( ) ; <nl> + for ( InetAddress endpoint : entry . getValue ( ) ) <nl> + addRangeForEndpoint ( range , endpoint ) ; <nl> + } <nl> + } <nl> <nl> public boolean validateColumnFamily ( String keyspace , String cfName ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index c3da511 . . 5451eb1 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 86 , 6 + 86 , 31 @ @ public interface StorageServiceMBean <nl> public String getReleaseVersion ( ) ; <nl> <nl> / * * <nl> + * Get the list of all data file locations from conf <nl> + * @ return String array of all locations <nl> + * / <nl> + public String [ ] getAllDataFileLocations ( ) ; <nl> + <nl> + / * * <nl> + * Get the list of data file locations for a given keyspace <nl> + * @ param keyspace the keyspace to get locatiosn for . <nl> + * @ return String array of all locations <nl> + * / <nl> + public String [ ] getAllDataFileLocationsForTable ( String table ) ; <nl> + <nl> + / * * <nl> + * Get location of the commit log <nl> + * @ return a string path <nl> + * / <nl> + public String getCommitLogLocation ( ) ; <nl> + <nl> + / * * <nl> + * Get location of the saved caches dir <nl> + * @ return a string path <nl> + * / <nl> + public String getSavedCachesLocation ( ) ; <nl> + <nl> + / * * <nl> * Retrieve a map of range to end points that describe the ring topology <nl> * of a Cassandra cluster . <nl> * <nl> diff - - git a / src / java / org / apache / cassandra / service / WriteResponseHandler . java b / src / java / org / apache / cassandra / service / WriteResponseHandler . java <nl> index ff6fb34 . . 435ce6c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / WriteResponseHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / WriteResponseHandler . java <nl> @ @ - 85 , 9 + 85 , 9 @ @ public class WriteResponseHandler extends AbstractWriteResponseHandler <nl> case THREE : <nl> return 3 ; <nl> case QUORUM : <nl> - return ( writeEndpoints . size ( ) / 2 ) + 1 ; <nl> + return ( Table . open ( table ) . getReplicationStrategy ( ) . getReplicationFactor ( ) / 2 ) + 1 ; <nl> case ALL : <nl> - return writeEndpoints . size ( ) ; <nl> + return Table . open ( table ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ; <nl> default : <nl> throw new UnsupportedOperationException ( " invalid consistency level : " + consistencyLevel . toString ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 4baf848 . . e597936 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 960 , 6 + 960 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> CFMetaData oldCfm = DatabaseDescriptor . getCFMetaData ( CFMetaData . getId ( cf _ def . keyspace , cf _ def . name ) ) ; <nl> if ( oldCfm = = null ) <nl> throw new InvalidRequestException ( " Could not find column family definition to modify . " ) ; <nl> + ThriftValidation . validateCfDef ( cf _ def , oldCfm ) ; <nl> validateSchemaAgreement ( ) ; <nl> <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> index 45b7722 . . 36b7a6a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 57 , 7 + 58 , 7 @ @ public class BulkLoader <nl> LoaderOptions options = LoaderOptions . parseArgs ( args ) ; <nl> try <nl> { <nl> - SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options . directory . getName ( ) , options ) , options ) ; <nl> + SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options ) , options ) ; <nl> SSTableLoader . LoaderFuture future = loader . stream ( options . ignores ) ; <nl> <nl> if ( options . noProgress ) <nl> @ @ - 164 , 18 + 165 , 16 @ @ public class BulkLoader <nl> <nl> static class ExternalClient extends SSTableLoader . Client <nl> { <nl> - private final String keyspace ; <nl> private final Map < String , Set < String > > knownCfs = new HashMap < String , Set < String > > ( ) ; <nl> private final SSTableLoader . OutputHandler outputHandler ; <nl> <nl> - public ExternalClient ( String keyspace , SSTableLoader . OutputHandler outputHandler ) <nl> + public ExternalClient ( SSTableLoader . OutputHandler outputHandler ) <nl> { <nl> super ( ) ; <nl> - this . keyspace = keyspace ; <nl> this . outputHandler = outputHandler ; <nl> } <nl> <nl> - public void init ( ) <nl> + public void init ( String keyspace ) <nl> { <nl> outputHandler . output ( String . format ( " Starting client ( and waiting % d seconds for gossip ) . . . " , StorageService . RING _ DELAY / 1000 ) ) ; <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 85a86c7 . . 35792ba 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 720 , 6 + 720 , 15 @ @ public class NodeCmd <nl> e . printStackTrace ( ) ; <nl> System . exit ( 3 ) ; <nl> } <nl> + <nl> + private static void complainNonzeroArgs ( String [ ] args , NodeCommand cmd ) <nl> + { <nl> + if ( args . length > 0 ) { <nl> + System . err . println ( " Too many arguments for command ' " + cmd . toString ( ) + " ' . " ) ; <nl> + printUsage ( ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + } <nl> <nl> private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , NodeProbe probe ) throws InterruptedException , IOException <nl> { <nl> diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> index da15b77 . . 9476920 100644 <nl> - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> @ @ - 433 , 7 + 433 , 7 @ @ commands : <nl> store the whole values of its rows , so it is extremely space - intensive . <nl> It ' s best to only use the row cache if you have hot rows or static rows . <nl> <nl> - - keys _ cache _ save _ period : Duration in seconds after which Cassandra should <nl> + - key _ cache _ save _ period : Duration in seconds after which Cassandra should <nl> safe the keys cache . Caches are saved to saved _ caches _ directory as <nl> specified in conf / Cassandra . yaml . Default is 14400 or 4 hours . <nl> <nl> @ @ - 674 , 7 + 674 , 7 @ @ commands : <nl> store the whole values of its rows , so it is extremely space - intensive . <nl> It ' s best to only use the row cache if you have hot rows or static rows . <nl> <nl> - - keys _ cache _ save _ period : Duration in seconds after which Cassandra should <nl> + - key _ cache _ save _ period : Duration in seconds after which Cassandra should <nl> safe the keys cache . Caches are saved to saved _ caches _ directory as <nl> specified in conf / Cassandra . yaml . Default is 14400 or 4 hours . <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 20836c5 . . d630e0f 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 54 , 6 + 54 , 8 @ @ public class CliTest extends CleanupHelper <nl> " get CF1 where world2 = long ( 15 ) ; " , <nl> " get cF1 where world2 = long ( 15 ) ; " , <nl> " get Cf1 where world2 = long ( 15 ) ; " , <nl> + " del CF1 [ utf8 ( ' hello ' ) ] [ utf8 ( ' world ' ) ] ; " , <nl> + " del CF1 [ hello ] [ world2 ] ; " , <nl> " set CF1 [ ' hello ' ] [ time _ spent _ uuid ] = timeuuid ( a8098c1a - f86e - 11da - bd1a - 00112444be1e ) ; " , <nl> " create column family CF2 with comparator = IntegerType ; " , <nl> " assume CF2 keys as utf8 ; " , <nl> @ @ - 132 , 6 + 134 , 10 @ @ public class CliTest extends CleanupHelper <nl> " set sCf1 [ ' hello ' ] [ 1 ] [ 9999 ] = 938 ; " , <nl> " set sCf1 [ ' hello ' ] [ 1 ] [ 9999 ] = 938 with ttl = 30 ; " , <nl> " set sCf1 [ ' hello ' ] [ 1 ] [ 9999 ] = 938 with ttl = 560 ; " , <nl> + " count sCf1 [ hello ] ; " , <nl> + " count sCf1 [ utf8 ( ' hello ' ) ] ; " , <nl> + " count sCf1 [ utf8 ( ' hello ' ) ] [ integer ( 1 ) ] ; " , <nl> + " count sCF1 [ hello ] [ 1 ] ; " , <nl> " list sCf1 ; " , <nl> " del SCF1 [ ' hello ' ] [ 1 ] [ 9999 ] ; " , <nl> " assume sCf1 comparator as utf8 ; " , <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> index 1c27f51 . . abeb57c 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> @ @ - 36 , 9 + 36 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * Test for the truncate operation . <nl> - * <nl> - * @ author Ran Tavory ( rantav @ gmail . com ) <nl> - * <nl> * / <nl> public class RecoveryManagerTruncateTest extends CleanupHelper <nl> {

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 index 3dc0ded . . 34f9b98 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 @ @ - 139 , 7 + 139 , 7 @ @ public class SSTableScanner implements ICompactionScanner 
 } 
 else 
 { 
 - sstable . metadata . comparator . rowIndexEntrySerializer ( ) . skip ( ifile ) ; 
 + RowIndexEntry . Serializer . skip ( ifile ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 884ee1e . . da076f8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 40 , 6 + 40 , 12 @ @ 
 * add ant - optional as dependence for the debian package ( CASSANDRA - 2164 ) 
 * add option to specify limit for get _ slice in the CLI ( CASSANDRA - 2646 ) 
 * decrease HH page size ( CASSANDRA - 2832 ) 
 + * reset cli keyspace after dropping the current one ( CASSANDRA - 2763 ) 
 + * add KeyRange option to Hadoop inputformat ( CASSANDRA - 1125 ) 
 + * fix protocol versioning ( CASSANDRA - 2818 , 2860 ) 
 + * support spaces in path to log4j configuration ( CASSANDRA - 2383 ) 
 + * avoid including inferred types in CF update ( CASSANDRA - 2809 ) 
 + * fix JMX bulkload call ( CASSANDRA - 2908 ) 
 
 
 0 . 8 . 1 
 @ @ - 232 , 6 + 238 , 7 @ @ 
 * add a server - wide cap on measured memtable memory usage and aggressively 
 flush to keep under that threshold ( CASSANDRA - 2006 ) 
 * add unified UUIDType ( CASSANDRA - 2233 ) 
 + * add off - heap row cache support ( CASSANDRA - 1969 ) 
 
 
 0 . 7 . 5 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 625f79a . . 1901ed2 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 80 , 13 + 80 , 16 @ @ saved _ caches _ directory : / var / lib / cassandra / saved _ caches 
 # commitlog _ sync may be either " periodic " or " batch . " 
 # When in batch mode , Cassandra won ' t ack writes until the commit log 
 # has been fsynced to disk . It will wait up to 
 - # CommitLogSyncBatchWindowInMS milliseconds for other writes , before 
 + # commitlog _ sync _ batch _ window _ in _ ms milliseconds for other writes , before 
 # performing the sync . 
 - commitlog _ sync : periodic 
 - 
 + # 
 + # commitlog _ sync : batch 
 + # commitlog _ sync _ batch _ window _ in _ ms : 50 
 + # 
 # the other option is " periodic " where writes may be acked immediately 
 # and the CommitLog is simply synced every commitlog _ sync _ period _ in _ ms 
 # milliseconds . 
 + commitlog _ sync : periodic 
 commitlog _ sync _ period _ in _ ms : 10000 
 
 # any class that implements the SeedProvider interface and has a constructor that takes a Map < String , String > of 
 diff - - git a / examples / client _ only / conf / cassandra . yaml b / examples / client _ only / conf / cassandra . yaml 
 index 97e3853 . . 2d92794 100644 
 - - - a / examples / client _ only / conf / cassandra . yaml 
 + + + b / examples / client _ only / conf / cassandra . yaml 
 @ @ - 77 , 9 + 77 , 6 @ @ commitlog _ directory : / var / lib / cassandra / commitlog 
 # saved caches 
 saved _ caches _ directory : / var / lib / cassandra / saved _ caches 
 
 - # Size to allow commitlog to grow to before creating a new segment 
 - commitlog _ rotation _ threshold _ in _ mb : 128 
 - 
 # commitlog _ sync may be either " periodic " or " batch . " 
 # When in batch mode , Cassandra won ' t ack writes until the commit log 
 # has been fsynced to disk . It will wait up to 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 7ef940a . . 878bf74 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 350 , 7 + 350 , 6 @ @ public class CliClient 
 
 Tree columnFamilySpec = statement . getChild ( 0 ) ; 
 
 - String key = CliCompiler . getKey ( columnFamilySpec ) ; 
 String columnFamily = CliCompiler . getColumnFamily ( columnFamilySpec , keyspacesMap . get ( keySpace ) . cf _ defs ) ; 
 int columnSpecCnt = CliCompiler . numColumnSpecifiers ( columnFamilySpec ) ; 
 
 @ @ - 358 , 14 + 357 , 19 @ @ public class CliClient 
 
 if ( columnSpecCnt ! = 0 ) 
 { 
 - byte [ ] superColumn = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , columnFamily ) ; 
 + Tree columnTree = columnFamilySpec . getChild ( 2 ) ; 
 + 
 + byte [ ] superColumn = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( columnTree , null , null ) . array ( ) 
 + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , columnFamily ) ; 
 + 
 colParent = new ColumnParent ( columnFamily ) . setSuper _ column ( superColumn ) ; 
 } 
 
 SliceRange range = new SliceRange ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , false , Integer . MAX _ VALUE ) ; 
 SlicePredicate predicate = new SlicePredicate ( ) . setColumn _ names ( null ) . setSlice _ range ( range ) ; 
 
 - int count = thriftClient . get _ count ( ByteBufferUtil . bytes ( key ) , colParent , predicate , consistencyLevel ) ; 
 + int count = thriftClient . get _ count ( getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) , colParent , predicate , consistencyLevel ) ; 
 sessionState . out . printf ( " % d columns % n " , count ) ; 
 } 
 
 @ @ - 377 , 13 + 381 , 14 @ @ public class CliClient 
 
 Tree columnFamilySpec = statement . getChild ( 0 ) ; 
 
 - String key = CliCompiler . getKey ( columnFamilySpec ) ; 
 String columnFamily = CliCompiler . getColumnFamily ( columnFamilySpec , keyspacesMap . get ( keySpace ) . cf _ defs ) ; 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + ByteBuffer key = getKeyAsBytes ( columnFamily , columnFamilySpec . getChild ( 1 ) ) ; 
 int columnSpecCnt = CliCompiler . numColumnSpecifiers ( columnFamilySpec ) ; 
 
 byte [ ] superColumnName = null ; 
 byte [ ] columnName = null ; 
 - CfDef cfDef = getCfDef ( columnFamily ) ; 
 boolean isSuper = cfDef . column _ type . equals ( " Super " ) ; 
 
 if ( ( columnSpecCnt < 0 ) | | ( columnSpecCnt > 2 ) ) 
 @ @ - 391 , 20 + 396 , 42 @ @ public class CliClient 
 sessionState . out . println ( " Invalid row , super column , or column specification . " ) ; 
 return ; 
 } 
 - 
 + 
 + Tree columnTree = ( columnSpecCnt > = 1 ) 
 + ? columnFamilySpec . getChild ( 2 ) 
 + : null ; 
 + 
 + Tree subColumnTree = ( columnSpecCnt = = 2 ) 
 + ? columnFamilySpec . getChild ( 3 ) 
 + : null ; 
 + 
 if ( columnSpecCnt = = 1 ) 
 { 
 - / / table . cf [ ' key ' ] [ ' column ' ] 
 + assert columnTree ! = null ; 
 + 
 + byte [ ] columnNameBytes = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( columnTree , null , null ) . array ( ) 
 + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + 
 + 
 if ( isSuper ) 
 - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + superColumnName = columnNameBytes ; 
 else 
 - columnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + columnName = columnNameBytes ; 
 } 
 else if ( columnSpecCnt = = 2 ) 
 { 
 + assert columnTree ! = null ; 
 + assert subColumnTree ! = null ; 
 + 
 / / table . cf [ ' key ' ] [ ' column ' ] [ ' column ' ] 
 - superColumnName = columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 - columnName = subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; 
 + superColumnName = ( columnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( columnTree , null , null ) . array ( ) 
 + : columnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 0 ) , cfDef ) ; 
 + 
 + columnName = ( subColumnTree . getType ( ) = = CliParser . FUNCTION _ CALL ) 
 + ? convertValueByFunction ( subColumnTree , null , null ) . array ( ) 
 + : subColumnNameAsByteArray ( CliCompiler . getColumn ( columnFamilySpec , 1 ) , cfDef ) ; 
 } 
 
 ColumnPath path = new ColumnPath ( columnFamily ) ; 
 @ @ - 416 , 12 + 443 , 11 @ @ public class CliClient 
 
 if ( isCounterCF ( cfDef ) ) 
 { 
 - thriftClient . remove _ counter ( ByteBufferUtil . bytes ( key ) , path , consistencyLevel ) ; 
 + thriftClient . remove _ counter ( key , path , consistencyLevel ) ; 
 } 
 else 
 { 
 - thriftClient . remove ( ByteBufferUtil . bytes ( key ) , path , 
 - FBUtilities . timestampMicros ( ) , consistencyLevel ) ; 
 + thriftClient . remove ( key , path , FBUtilities . timestampMicros ( ) , consistencyLevel ) ; 
 } 
 sessionState . out . println ( String . format ( " % s removed . " , ( columnSpecCnt = = 0 ) ? " row " : " column " ) ) ; 
 } 
 @ @ - 1050 , 11 + 1076 , 15 @ @ public class CliClient 
 return ; 
 
 String cfName = CliCompiler . getColumnFamily ( statement , keyspacesMap . get ( keySpace ) . cf _ defs ) ; 
 - / / first child is a column family name 
 - CfDef cfDef = getCfDef ( cfName ) ; 
 
 try 
 { 
 + / / request correct cfDef from the server 
 + CfDef cfDef = getCfDef ( thriftClient . describe _ keyspace ( this . keySpace ) , cfName ) ; 
 + 
 + if ( cfDef = = null ) 
 + throw new RuntimeException ( " Column Family " + cfName + " was not found in the current keyspace . " ) ; 
 + 
 String mySchemaVersion = thriftClient . system _ update _ column _ family ( updateCfDefAttributes ( statement , cfDef ) ) ; 
 sessionState . out . println ( mySchemaVersion ) ; 
 validateSchemaIsSettled ( mySchemaVersion ) ; 
 @ @ - 1202 , 7 + 1232 , 7 @ @ public class CliClient 
 cfDef . setKey _ cache _ save _ period _ in _ seconds ( Integer . parseInt ( mValue ) ) ; 
 break ; 
 case DEFAULT _ VALIDATION _ CLASS : 
 - cfDef . setDefault _ validation _ class ( mValue ) ; 
 + cfDef . setDefault _ validation _ class ( CliUtils . unescapeSQLString ( mValue ) ) ; 
 break ; 
 case MIN _ COMPACTION _ THRESHOLD : 
 cfDef . setMin _ compaction _ threshold ( Integer . parseInt ( mValue ) ) ; 
 @ @ - 1252 , 6 + 1282 , 9 @ @ public class CliClient 
 String version = thriftClient . system _ drop _ keyspace ( keyspaceName ) ; 
 sessionState . out . println ( version ) ; 
 validateSchemaIsSettled ( version ) ; 
 + 
 + if ( keyspaceName . equals ( keySpace ) ) / / we just deleted the keyspace we were authenticated too 
 + keySpace = null ; 
 } 
 
 / * * 
 @ @ - 1898 , 7 + 1931 , 18 @ @ public class CliClient 
 { 
 return getCfDef ( this . keySpace , columnFamilyName ) ; 
 } 
 - 
 + 
 + private CfDef getCfDef ( KsDef keyspace , String columnFamilyName ) 
 + { 
 + for ( CfDef cfDef : keyspace . cf _ defs ) 
 + { 
 + if ( cfDef . name . equals ( columnFamilyName ) ) 
 + return cfDef ; 
 + } 
 + 
 + return null ; 
 + } 
 + 
 / * * 
 * Used to parse meta tree and compile meta attributes into List < ColumnDef > 
 * @ param cfDef - column family definition 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index a64bf87 . . 5a9e231 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cli ; 
 
 import java . util . List ; 
 
 - / * * 
 - * @ author Pavel A . Yaskevich 
 - * / 
 public class CliUserHelp 
 { 
 public String banner ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 01de9d2 . . 3bd7287 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 101 , 7 + 101 , 7 @ @ public class DatabaseDescriptor 
 try 
 { 
 url = new URL ( configUrl ) ; 
 - url . openStream ( ) ; / / catches well - formed but bogus URLs 
 + url . openStream ( ) . close ( ) ; / / catches well - formed but bogus URLs 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / TruncateResponse . java b / src / java / org / apache / cassandra / db / TruncateResponse . java 
 index 8929f36 . . 3c1c507 100644 
 - - - a / src / java / org / apache / cassandra / db / TruncateResponse . java 
 + + + b / src / java / org / apache / cassandra / db / TruncateResponse . java 
 @ @ - 31 , 8 + 31 , 6 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 / * * 
 * This message is sent back the truncate operation and basically specifies if 
 * the truncate succeeded . 
 - * 
 - * @ author rantav @ gmail . com 
 * / 
 public class TruncateResponse 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / Truncation . java b / src / java / org / apache / cassandra / db / Truncation . java 
 index 70b05e4 . . fb2b10d 100644 
 - - - a / src / java / org / apache / cassandra / db / Truncation . java 
 + + + b / src / java / org / apache / cassandra / db / Truncation . java 
 @ @ - 31 , 9 + 31 , 6 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * A truncate operation descriptor 
 - * 
 - * @ author rantav @ gmail . com 
 - * 
 * / 
 public class Truncation implements MessageProducer 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 index c7d5501 . . b724af6 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 @ @ - 46 , 6 + 46 , 7 @ @ public class CompactionController 
 
 public final boolean isMajor ; 
 public final int gcBefore ; 
 + private int throttleResolution ; 
 
 public CompactionController ( ColumnFamilyStore cfs , Collection < SSTableReader > sstables , int gcBefore , boolean forceDeserialize ) 
 { 
 @ @ - 55 , 15 + 56 , 26 @ @ public class CompactionController 
 this . gcBefore = gcBefore ; 
 this . forceDeserialize = forceDeserialize ; 
 isMajor = cfs . isCompleteSSTables ( this . sstables ) ; 
 + / / how many rows we expect to compact in 100ms 
 + long rowSize = cfs . getMeanRowSize ( ) ; 
 + int rowsPerSecond = rowSize > 0 
 + ? ( int ) ( DatabaseDescriptor . getCompactionThroughputMbPerSec ( ) * 1024 * 1024 / rowSize ) 
 + : 1000 ; 
 + throttleResolution = rowsPerSecond / 10 ; 
 + if ( throttleResolution < = 0 ) 
 + throttleResolution = 1 ; 
 + } 
 + 
 + public int getThrottleResolution ( ) 
 + { 
 + return throttleResolution ; 
 } 
 
 - / * * @ return the keyspace name * / 
 public String getKeyspace ( ) 
 { 
 return cfs . table . name ; 
 } 
 
 - / * * @ return the column family name * / 
 public String getColumnFamily ( ) 
 { 
 return cfs . columnFamily ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 index ff6075f . . 55a52af 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 @ @ - 121 , 9 + 121 , 7 @ @ implements CloseableIterator < AbstractCompactedRow > , CompactionInfo . Holder 
 int newTarget = totalBytesPerMS / 
 Math . max ( 1 , CompactionManager . instance . getActiveCompactions ( ) ) ; 
 if ( newTarget ! = targetBytesPerMS ) 
 - logger . info ( String . format ( " % s now compacting at % d bytes / ms . " , 
 - this , 
 - newTarget ) ) ; 
 + logger . debug ( " { } now compacting at { } bytes / ms . " , this , newTarget ) ; 
 targetBytesPerMS = newTarget ; 
 
 / / the excess bytes that were compacted in this period 
 @ @ - 136 , 7 + 134 , 14 @ @ implements CloseableIterator < AbstractCompactedRow > , CompactionInfo . Holder 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( String . format ( " Compacted % d bytes in % d ms : throttling for % d ms " , 
 bytesSinceLast , msSinceLast , timeToDelay ) ) ; 
 - try { Thread . sleep ( timeToDelay ) ; } catch ( InterruptedException e ) { throw new AssertionError ( e ) ; } 
 + try 
 + { 
 + Thread . sleep ( timeToDelay ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 } 
 bytesAtLastDelay = bytesRead ; 
 timeAtLastDelay = System . currentTimeMillis ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index dbb3636 . . a0bec4f 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 194 , 6 + 194 , 11 @ @ public class Gossiper implements IFailureDetectionEventListener 
 versions . put ( address , version ) ; 
 } 
 
 + public void resetVersion ( InetAddress endpoint ) 
 + { 
 + versions . remove ( endpoint ) ; 
 + } 
 + 
 public Integer getVersion ( InetAddress address ) 
 { 
 Integer v = versions . get ( address ) ; 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java 
 index 6415878 . . 51c8fca 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java 
 @ @ - 35 , 8 + 35 , 11 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . IColumn ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . thrift . Cassandra ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 + import org . apache . cassandra . thrift . KeyRange ; 
 import org . apache . cassandra . thrift . TokenRange ; 
 import org . apache . cassandra . thrift . TBinaryProtocol ; 
 import org . apache . hadoop . conf . Configuration ; 
 @ @ - 102 , 10 + 105 , 44 @ @ public class ColumnFamilyInputFormat extends InputFormat < ByteBuffer , SortedMap < B 
 try 
 { 
 List < Future < List < InputSplit > > > splitfutures = new ArrayList < Future < List < InputSplit > > > ( ) ; 
 + KeyRange jobKeyRange = ConfigHelper . getInputKeyRange ( conf ) ; 
 + IPartitioner partitioner = null ; 
 + Range jobRange = null ; 
 + if ( jobKeyRange ! = null ) 
 + { 
 + partitioner = ConfigHelper . getPartitioner ( context . getConfiguration ( ) ) ; 
 + assert partitioner . preservesOrder ( ) : " ConfigHelper . setInputKeyRange ( . . ) can only be used with a order preserving paritioner " ; 
 + assert jobKeyRange . start _ key = = null : " only start _ token supported " ; 
 + assert jobKeyRange . end _ key = = null : " only end _ token supported " ; 
 + jobRange = new Range ( partitioner . getTokenFactory ( ) . fromString ( jobKeyRange . start _ token ) , 
 + partitioner . getTokenFactory ( ) . fromString ( jobKeyRange . end _ token ) , 
 + partitioner ) ; 
 + } 
 + 
 for ( TokenRange range : masterRangeNodes ) 
 { 
 + if ( jobRange = = null ) 
 + { 
 / / for each range , pick a live owner and ask it to compute bite - sized splits 
 splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; 
 + } 
 + else 
 + { 
 + Range dhtRange = new Range ( partitioner . getTokenFactory ( ) . fromString ( range . start _ token ) , 
 + partitioner . getTokenFactory ( ) . fromString ( range . end _ token ) , 
 + partitioner ) ; 
 + 
 + if ( dhtRange . intersects ( jobRange ) ) 
 + { 
 + Set < Range > intersections = dhtRange . intersectionWith ( jobRange ) ; 
 + assert intersections . size ( ) = = 1 : " wrapping ranges not yet supported " ; 
 + Range intersection = intersections . iterator ( ) . next ( ) ; 
 + range . start _ token = partitioner . getTokenFactory ( ) . toString ( intersection . left ) ; 
 + range . end _ token = partitioner . getTokenFactory ( ) . toString ( intersection . right ) ; 
 + / / for each range , pick a live owner and ask it to compute bite - sized splits 
 + splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; 
 + } 
 + } 
 } 
 
 / / wait until we have all the results back 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 index 433c6ef . . 3cd19ef 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 @ @ - 53 , 7 + 53 , 6 @ @ import org . apache . thrift . transport . TSocket ; 
 * directly to a responsible endpoint . 
 * < / p > 
 * 
 - * @ author Karthick Sankarachary 
 * @ see ColumnFamilyOutputFormat 
 * @ see OutputFormat 
 * 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 index 0478ac7 . . 8345fb7 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package org . apache . cassandra . hadoop ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . thrift . KeyRange ; 
 import org . apache . cassandra . thrift . SlicePredicate ; 
 import org . apache . cassandra . thrift . TBinaryProtocol ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 @ @ - 42 , 6 + 43 , 7 @ @ public class ConfigHelper 
 private static final String INPUT _ COLUMNFAMILY _ CONFIG = " cassandra . input . columnfamily " ; 
 private static final String OUTPUT _ COLUMNFAMILY _ CONFIG = " cassandra . output . columnfamily " ; 
 private static final String INPUT _ PREDICATE _ CONFIG = " cassandra . input . predicate " ; 
 + private static final String INPUT _ KEYRANGE _ CONFIG = " cassandra . input . keyRange " ; 
 private static final String OUTPUT _ PREDICATE _ CONFIG = " cassandra . output . predicate " ; 
 private static final String INPUT _ SPLIT _ SIZE _ CONFIG = " cassandra . input . split . size " ; 
 private static final int DEFAULT _ SPLIT _ SIZE = 64 * 1024 ; 
 @ @ - 195 , 6 + 197 , 53 @ @ public class ConfigHelper 
 return predicate ; 
 } 
 
 + / * * 
 + * Set the KeyRange to limit the rows . 
 + * @ param conf Job configuration you are about to run 
 + * / 
 + public static void setInputRange ( Configuration conf , String startToken , String endToken ) 
 + { 
 + KeyRange range = new KeyRange ( ) . setStart _ token ( startToken ) . setEnd _ token ( endToken ) ; 
 + conf . set ( INPUT _ KEYRANGE _ CONFIG , keyRangeToString ( range ) ) ; 
 + } 
 + 
 + / * * may be null if unset * / 
 + public static KeyRange getInputKeyRange ( Configuration conf ) 
 + { 
 + String str = conf . get ( INPUT _ KEYRANGE _ CONFIG ) ; 
 + return null ! = str ? keyRangeFromString ( str ) : null ; 
 + } 
 + 
 + private static String keyRangeToString ( KeyRange keyRange ) 
 + { 
 + assert keyRange ! = null ; 
 + TSerializer serializer = new TSerializer ( new TBinaryProtocol . Factory ( ) ) ; 
 + try 
 + { 
 + return FBUtilities . bytesToHex ( serializer . serialize ( keyRange ) ) ; 
 + } 
 + catch ( TException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private static KeyRange keyRangeFromString ( String st ) 
 + { 
 + assert st ! = null ; 
 + TDeserializer deserializer = new TDeserializer ( new TBinaryProtocol . Factory ( ) ) ; 
 + KeyRange keyRange = new KeyRange ( ) ; 
 + try 
 + { 
 + deserializer . deserialize ( keyRange , FBUtilities . hexToBytes ( st ) ) ; 
 + } 
 + catch ( TException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + return keyRange ; 
 + } 
 + 
 public static String getInputKeyspace ( Configuration conf ) 
 { 
 return conf . get ( INPUT _ KEYSPACE _ CONFIG ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 index 6297f8f . . ea0a0cf 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 @ @ - 101 , 7 + 101 , 7 @ @ public class SSTableLoader 
 
 public LoaderFuture stream ( Set < InetAddress > toIgnore ) throws IOException 
 { 
 - client . init ( ) ; 
 + client . init ( keyspace ) ; 
 
 Collection < SSTableReader > sstables = openSSTables ( ) ; 
 if ( sstables . isEmpty ( ) ) 
 @ @ - 234 , 7 + 234 , 7 @ @ public class SSTableLoader 
 * This method is guaranted to be called before any other method of a 
 * client . 
 * / 
 - public abstract void init ( ) ; 
 + public abstract void init ( String keyspace ) ; 
 
 / * * 
 * Stop the client . 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index 4e45043 . . 11eda6f 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 87 , 9 + 87 , 8 @ @ public abstract class AbstractReplicationStrategy 
 * we return a List to avoid an extra allocation when sorting by proximity later 
 * @ param searchToken the token the natural endpoints are requested for 
 * @ return a copy of the natural endpoints for the given token 
 - * @ throws IllegalStateException if the number of requested replicas is greater than the number of known endpoints 
 * / 
 - public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) throws IllegalStateException 
 + public ArrayList < InetAddress > getNaturalEndpoints ( Token searchToken ) 
 { 
 Token keyToken = TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , searchToken ) ; 
 ArrayList < InetAddress > endpoints = getCachedEndpoints ( keyToken ) ; 
 @ @ - 99 , 10 + 98 , 6 @ @ public abstract class AbstractReplicationStrategy 
 keyToken = TokenMetadata . firstToken ( tokenMetadataClone . sortedTokens ( ) , searchToken ) ; 
 endpoints = new ArrayList < InetAddress > ( calculateNaturalEndpoints ( searchToken , tokenMetadataClone ) ) ; 
 cacheEndpoint ( keyToken , endpoints ) ; 
 - / / calculateNaturalEndpoints should have checked this already , this is a safety 
 - assert getReplicationFactor ( ) < = endpoints . size ( ) : String . format ( " endpoints % s generated for RF of % s " , 
 - Arrays . toString ( endpoints . toArray ( ) ) , 
 - getReplicationFactor ( ) ) ; 
 } 
 
 return new ArrayList < InetAddress > ( endpoints ) ; 
 @ @ - 115 , 9 + 110 , 8 @ @ public abstract class AbstractReplicationStrategy 
 * 
 * @ param searchToken the token the natural endpoints are requested for 
 * @ return a copy of the natural endpoints for the given token 
 - * @ throws IllegalStateException if the number of requested replicas is greater than the number of known endpoints 
 * / 
 - public abstract List < InetAddress > calculateNaturalEndpoints ( Token searchToken , TokenMetadata tokenMetadata ) throws IllegalStateException ; 
 + public abstract List < InetAddress > calculateNaturalEndpoints ( Token searchToken , TokenMetadata tokenMetadata ) ; 
 
 public IWriteResponseHandler getWriteResponseHandler ( Collection < InetAddress > writeEndpoints , 
 Multimap < InetAddress , InetAddress > hintedEndpoints , 
 diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 index 317631a . . 0537ffb 100644 
 - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 @ @ - 120 , 9 + 120 , 6 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy 
 dcEndpoints . add ( endpoint ) ; 
 } 
 
 - if ( dcEndpoints . size ( ) < dcReplicas ) 
 - throw new IllegalStateException ( String . format ( " datacenter ( % s ) has no more endpoints , ( % s ) replicas still needed " , 
 - dcName , dcReplicas - dcEndpoints . size ( ) ) ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " { } endpoints in datacenter { } for token { } " , 
 new Object [ ] { StringUtils . join ( dcEndpoints , " , " ) , dcName , searchToken } ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java 
 index 558d659 . . d8f32c8 100644 
 - - - a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java 
 @ @ - 96 , 9 + 96 , 6 @ @ public class OldNetworkTopologyStrategy extends AbstractReplicationStrategy 
 if ( ! endpoints . contains ( metadata . getEndpoint ( t ) ) ) 
 endpoints . add ( metadata . getEndpoint ( t ) ) ; 
 } 
 - 
 - if ( endpoints . size ( ) < replicas ) 
 - throw new IllegalStateException ( String . format ( " replication factor ( % s ) exceeds number of endpoints ( % s ) " , replicas , endpoints . size ( ) ) ) ; 
 } 
 
 return endpoints ; 
 diff - - git a / src / java / org / apache / cassandra / locator / SimpleStrategy . java b / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 index 09935df . . 024e9d4 100644 
 - - - a / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 @ @ - 56 , 10 + 56 , 6 @ @ public class SimpleStrategy extends AbstractReplicationStrategy 
 { 
 endpoints . add ( metadata . getEndpoint ( iter . next ( ) ) ) ; 
 } 
 - 
 - if ( endpoints . size ( ) < replicas ) 
 - throw new IllegalStateException ( String . format ( " replication factor ( % s ) exceeds number of endpoints ( % s ) " , replicas , endpoints . size ( ) ) ) ; 
 - 
 return endpoints ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index fadd1b2 . . 828dac0 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . concurrent . BlockingQueue ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 
 + import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 138 , 6 + 139 , 9 @ @ public class OutboundTcpConnection extends Thread 
 output = null ; 
 socket = null ; 
 } 
 + 
 + / / when we see the node again , try to connect at the most recent protocol we know about 
 + Gossiper . instance . resetVersion ( endpoint ) ; 
 } 
 
 private ByteBuffer take ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 index 93c664a . . 7ad7ba5 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractCassandraDaemon . java 
 @ @ - 73 , 12 + 73 , 30 @ @ public abstract class AbstractCassandraDaemon implements CassandraDaemon 
 } 
 catch ( MalformedURLException ex ) 
 { 
 - / / load from the classpath . 
 + / / then try loading from the classpath . 
 configLocation = AbstractCassandraDaemon . class . getClassLoader ( ) . getResource ( config ) ; 
 - if ( configLocation = = null ) 
 - throw new RuntimeException ( " Couldn ' t figure out log4j configuration . " ) ; 
 } 
 - PropertyConfigurator . configureAndWatch ( configLocation . getFile ( ) , 10000 ) ; 
 + 
 + if ( configLocation = = null ) 
 + throw new RuntimeException ( " Couldn ' t figure out log4j configuration : " + config ) ; 
 + 
 + / / Now convert URL to a filename 
 + String configFileName = null ; 
 + try 
 + { 
 + / / first try URL . getFile ( ) which works for opaque URLs ( file : foo ) and paths without spaces 
 + configFileName = configLocation . getFile ( ) ; 
 + File configFile = new File ( configFileName ) ; 
 + / / then try alternative approach which works for all hierarchical URLs with or without spaces 
 + if ( ! configFile . exists ( ) ) 
 + configFileName = new File ( configLocation . toURI ( ) ) . getCanonicalPath ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( " Couldn ' t convert log4j configuration location to a valid file " , e ) ; 
 + } 
 + 
 + PropertyConfigurator . configureAndWatch ( configFileName , 10000 ) ; 
 org . apache . log4j . Logger . getLogger ( AbstractCassandraDaemon . class ) . info ( " Logging initialized " ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 index 6ccf3e4 . . 53bcb16 100644 
 - - - a / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 + + + b / src / java / org / apache / cassandra / service / EmbeddedCassandraService . java 
 @ @ - 45 , 8 + 45 , 6 @ @ import org . apache . thrift . transport . TTransportException ; 
 cassandra . start ( ) ; 
 
 * < / pre > 
 - * @ author Ran Tavory ( rantav @ gmail . com ) 
 - * 
 * / 
 public class EmbeddedCassandraService 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 1370d1c . . 8f6e19b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1296 , 6 + 1296 , 26 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 return stringify ( Gossiper . instance . getUnreachableMembers ( ) ) ; 
 } 
 
 + public String [ ] getAllDataFileLocations ( ) 
 + { 
 + return DatabaseDescriptor . getAllDataFileLocations ( ) ; 
 + } 
 + 
 + public String [ ] getAllDataFileLocationsForTable ( String table ) 
 + { 
 + return DatabaseDescriptor . getAllDataFileLocationsForTable ( table ) ; 
 + } 
 + 
 + public String getCommitLogLocation ( ) 
 + { 
 + return DatabaseDescriptor . getCommitLogLocation ( ) ; 
 + } 
 + 
 + public String getSavedCachesLocation ( ) 
 + { 
 + return DatabaseDescriptor . getSavedCachesLocation ( ) ; 
 + } 
 + 
 private List < String > stringify ( Iterable < InetAddress > endpoints ) 
 { 
 List < String > stringEndpoints = new ArrayList < String > ( ) ; 
 @ @ - 2448 , 7 + 2468 , 15 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 
 SSTableLoader . Client client = new SSTableLoader . Client ( ) 
 { 
 - public void init ( ) { } 
 + public void init ( String keyspace ) 
 + { 
 + for ( Map . Entry < Range , List < InetAddress > > entry : StorageService . instance . getRangeToAddressMap ( keyspace ) . entrySet ( ) ) 
 + { 
 + Range range = entry . getKey ( ) ; 
 + for ( InetAddress endpoint : entry . getValue ( ) ) 
 + addRangeForEndpoint ( range , endpoint ) ; 
 + } 
 + } 
 
 public boolean validateColumnFamily ( String keyspace , String cfName ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index c3da511 . . 5451eb1 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 86 , 6 + 86 , 31 @ @ public interface StorageServiceMBean 
 public String getReleaseVersion ( ) ; 
 
 / * * 
 + * Get the list of all data file locations from conf 
 + * @ return String array of all locations 
 + * / 
 + public String [ ] getAllDataFileLocations ( ) ; 
 + 
 + / * * 
 + * Get the list of data file locations for a given keyspace 
 + * @ param keyspace the keyspace to get locatiosn for . 
 + * @ return String array of all locations 
 + * / 
 + public String [ ] getAllDataFileLocationsForTable ( String table ) ; 
 + 
 + / * * 
 + * Get location of the commit log 
 + * @ return a string path 
 + * / 
 + public String getCommitLogLocation ( ) ; 
 + 
 + / * * 
 + * Get location of the saved caches dir 
 + * @ return a string path 
 + * / 
 + public String getSavedCachesLocation ( ) ; 
 + 
 + / * * 
 * Retrieve a map of range to end points that describe the ring topology 
 * of a Cassandra cluster . 
 * 
 diff - - git a / src / java / org / apache / cassandra / service / WriteResponseHandler . java b / src / java / org / apache / cassandra / service / WriteResponseHandler . java 
 index ff6fb34 . . 435ce6c 100644 
 - - - a / src / java / org / apache / cassandra / service / WriteResponseHandler . java 
 + + + b / src / java / org / apache / cassandra / service / WriteResponseHandler . java 
 @ @ - 85 , 9 + 85 , 9 @ @ public class WriteResponseHandler extends AbstractWriteResponseHandler 
 case THREE : 
 return 3 ; 
 case QUORUM : 
 - return ( writeEndpoints . size ( ) / 2 ) + 1 ; 
 + return ( Table . open ( table ) . getReplicationStrategy ( ) . getReplicationFactor ( ) / 2 ) + 1 ; 
 case ALL : 
 - return writeEndpoints . size ( ) ; 
 + return Table . open ( table ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ; 
 default : 
 throw new UnsupportedOperationException ( " invalid consistency level : " + consistencyLevel . toString ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 4baf848 . . e597936 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 960 , 6 + 960 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 CFMetaData oldCfm = DatabaseDescriptor . getCFMetaData ( CFMetaData . getId ( cf _ def . keyspace , cf _ def . name ) ) ; 
 if ( oldCfm = = null ) 
 throw new InvalidRequestException ( " Could not find column family definition to modify . " ) ; 
 + ThriftValidation . validateCfDef ( cf _ def , oldCfm ) ; 
 validateSchemaAgreement ( ) ; 
 
 try 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 index 45b7722 . . 36b7a6a 100644 
 - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 57 , 7 + 58 , 7 @ @ public class BulkLoader 
 LoaderOptions options = LoaderOptions . parseArgs ( args ) ; 
 try 
 { 
 - SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options . directory . getName ( ) , options ) , options ) ; 
 + SSTableLoader loader = new SSTableLoader ( options . directory , new ExternalClient ( options ) , options ) ; 
 SSTableLoader . LoaderFuture future = loader . stream ( options . ignores ) ; 
 
 if ( options . noProgress ) 
 @ @ - 164 , 18 + 165 , 16 @ @ public class BulkLoader 
 
 static class ExternalClient extends SSTableLoader . Client 
 { 
 - private final String keyspace ; 
 private final Map < String , Set < String > > knownCfs = new HashMap < String , Set < String > > ( ) ; 
 private final SSTableLoader . OutputHandler outputHandler ; 
 
 - public ExternalClient ( String keyspace , SSTableLoader . OutputHandler outputHandler ) 
 + public ExternalClient ( SSTableLoader . OutputHandler outputHandler ) 
 { 
 super ( ) ; 
 - this . keyspace = keyspace ; 
 this . outputHandler = outputHandler ; 
 } 
 
 - public void init ( ) 
 + public void init ( String keyspace ) 
 { 
 outputHandler . output ( String . format ( " Starting client ( and waiting % d seconds for gossip ) . . . " , StorageService . RING _ DELAY / 1000 ) ) ; 
 try 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 85a86c7 . . 35792ba 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 720 , 6 + 720 , 15 @ @ public class NodeCmd 
 e . printStackTrace ( ) ; 
 System . exit ( 3 ) ; 
 } 
 + 
 + private static void complainNonzeroArgs ( String [ ] args , NodeCommand cmd ) 
 + { 
 + if ( args . length > 0 ) { 
 + System . err . println ( " Too many arguments for command ' " + cmd . toString ( ) + " ' . " ) ; 
 + printUsage ( ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + } 
 
 private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , NodeProbe probe ) throws InterruptedException , IOException 
 { 
 diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 index da15b77 . . 9476920 100644 
 - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 @ @ - 433 , 7 + 433 , 7 @ @ commands : 
 store the whole values of its rows , so it is extremely space - intensive . 
 It ' s best to only use the row cache if you have hot rows or static rows . 
 
 - - keys _ cache _ save _ period : Duration in seconds after which Cassandra should 
 + - key _ cache _ save _ period : Duration in seconds after which Cassandra should 
 safe the keys cache . Caches are saved to saved _ caches _ directory as 
 specified in conf / Cassandra . yaml . Default is 14400 or 4 hours . 
 
 @ @ - 674 , 7 + 674 , 7 @ @ commands : 
 store the whole values of its rows , so it is extremely space - intensive . 
 It ' s best to only use the row cache if you have hot rows or static rows . 
 
 - - keys _ cache _ save _ period : Duration in seconds after which Cassandra should 
 + - key _ cache _ save _ period : Duration in seconds after which Cassandra should 
 safe the keys cache . Caches are saved to saved _ caches _ directory as 
 specified in conf / Cassandra . yaml . Default is 14400 or 4 hours . 
 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 20836c5 . . d630e0f 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 54 , 6 + 54 , 8 @ @ public class CliTest extends CleanupHelper 
 " get CF1 where world2 = long ( 15 ) ; " , 
 " get cF1 where world2 = long ( 15 ) ; " , 
 " get Cf1 where world2 = long ( 15 ) ; " , 
 + " del CF1 [ utf8 ( ' hello ' ) ] [ utf8 ( ' world ' ) ] ; " , 
 + " del CF1 [ hello ] [ world2 ] ; " , 
 " set CF1 [ ' hello ' ] [ time _ spent _ uuid ] = timeuuid ( a8098c1a - f86e - 11da - bd1a - 00112444be1e ) ; " , 
 " create column family CF2 with comparator = IntegerType ; " , 
 " assume CF2 keys as utf8 ; " , 
 @ @ - 132 , 6 + 134 , 10 @ @ public class CliTest extends CleanupHelper 
 " set sCf1 [ ' hello ' ] [ 1 ] [ 9999 ] = 938 ; " , 
 " set sCf1 [ ' hello ' ] [ 1 ] [ 9999 ] = 938 with ttl = 30 ; " , 
 " set sCf1 [ ' hello ' ] [ 1 ] [ 9999 ] = 938 with ttl = 560 ; " , 
 + " count sCf1 [ hello ] ; " , 
 + " count sCf1 [ utf8 ( ' hello ' ) ] ; " , 
 + " count sCf1 [ utf8 ( ' hello ' ) ] [ integer ( 1 ) ] ; " , 
 + " count sCF1 [ hello ] [ 1 ] ; " , 
 " list sCf1 ; " , 
 " del SCF1 [ ' hello ' ] [ 1 ] [ 9999 ] ; " , 
 " assume sCf1 comparator as utf8 ; " , 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 index 1c27f51 . . abeb57c 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 @ @ - 36 , 9 + 36 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * Test for the truncate operation . 
 - * 
 - * @ author Ran Tavory ( rantav @ gmail . com ) 
 - * 
 * / 
 public class RecoveryManagerTruncateTest extends CleanupHelper 
 {
