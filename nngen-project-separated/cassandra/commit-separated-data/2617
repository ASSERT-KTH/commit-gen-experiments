BLEU SCORE: 0.02383853510228548

TEST MSG: status output is confused when hostname resolution is enabled
GENERATED MSG: nodetool no longer shows node joining

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index ba7144f . . 6c02877 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 304 , 7 + 304 , 7 @ @ public class NodeCmd <nl> <nl> for ( HostStat stat : hoststats ) <nl> { <nl> - tokens . addAll ( endpointsToTokens . get ( stat . ip ) ) ; <nl> + tokens . addAll ( endpointsToTokens . get ( stat . endpoint . getHostAddress ( ) ) ) ; <nl> lastToken = tokens . get ( tokens . size ( ) - 1 ) ; <nl> if ( stat . owns ! = null ) <nl> totalReplicas + = stat . owns ; <nl> @ @ - 322 , 7 + 322 , 7 @ @ public class NodeCmd <nl> <nl> for ( HostStat stat : hoststats ) <nl> { <nl> - String endpoint = stat . ip ; <nl> + String endpoint = stat . endpoint . getHostAddress ( ) ; <nl> String rack ; <nl> try <nl> { <nl> @ @ - 411 , 7 + 411 , 7 @ @ public class NodeCmd <nl> return format ; <nl> } <nl> <nl> - private void printNode ( String endpoint , Float owns , List < String > tokens , boolean hasEffectiveOwns , boolean isTokenPerNode ) throws UnknownHostException <nl> + private void printNode ( String endpoint , Float owns , List < HostStat > tokens , boolean hasEffectiveOwns , boolean isTokenPerNode ) throws UnknownHostException <nl> { <nl> String status , state , load , strOwns , hostID , rack , fmt ; <nl> fmt = getFormat ( hasEffectiveOwns , isTokenPerNode ) ; <nl> @ @ - 428 , 13 + 428 , 14 @ @ public class NodeCmd <nl> hostID = hostIDMap . get ( endpoint ) ; <nl> rack = epSnitchInfo . getRack ( endpoint ) ; <nl> <nl> + String endpointDns = tokens . get ( 0 ) . ipOrDns ( ) ; <nl> if ( isTokenPerNode ) <nl> { <nl> - outs . printf ( fmt , status , state , endpoint , load , strOwns , hostID , tokens . get ( 0 ) , rack ) ; <nl> + outs . printf ( fmt , status , state , endpointDns , load , strOwns , hostID , tokens . get ( 0 ) . token , rack ) ; <nl> } <nl> else <nl> { <nl> - outs . printf ( fmt , status , state , endpoint , load , tokens . size ( ) , strOwns , hostID , rack ) ; <nl> + outs . printf ( fmt , status , state , endpointDns , load , tokens . size ( ) , strOwns , hostID , rack ) ; <nl> } <nl> } <nl> <nl> @ @ - 494 , 16 + 495 , 16 @ @ public class NodeCmd <nl> printStatusLegend ( ) ; <nl> printNodesHeader ( hasEffectiveOwns , isTokenPerNode ) ; <nl> <nl> - ArrayListMultimap < String , String > hostToTokens = ArrayListMultimap . create ( ) ; <nl> + ArrayListMultimap < InetAddress , HostStat > hostToTokens = ArrayListMultimap . create ( ) ; <nl> for ( HostStat stat : dc . getValue ( ) ) <nl> - hostToTokens . put ( stat . ipOrDns ( ) , stat . token ) ; <nl> + hostToTokens . put ( stat . endpoint , stat ) ; <nl> <nl> / / Nodes <nl> - for ( String endpoint : hostToTokens . keySet ( ) ) <nl> + for ( InetAddress endpoint : hostToTokens . keySet ( ) ) <nl> { <nl> - Float owns = ownerships . get ( InetAddress . getByName ( endpoint ) ) ; <nl> - List < String > tokens = hostToTokens . get ( endpoint ) ; <nl> - printNode ( endpoint , owns , tokens , hasEffectiveOwns , isTokenPerNode ) ; <nl> + Float owns = ownerships . get ( endpoint ) ; <nl> + List < HostStat > tokens = hostToTokens . get ( endpoint ) ; <nl> + printNode ( endpoint . getHostAddress ( ) , owns , tokens , hasEffectiveOwns , isTokenPerNode ) ; <nl> } <nl> } <nl> } <nl> @ @ - 553 , 22 + 554 , 22 @ @ public class NodeCmd <nl> } <nl> <nl> static class HostStat { <nl> - public final String ip ; <nl> - public final String dns ; <nl> + public final InetAddress endpoint ; <nl> + public final boolean resolveIp ; <nl> public final Float owns ; <nl> public final String token ; <nl> <nl> - public HostStat ( String token , InetAddress endPoint , boolean resolveIp , Float owns ) <nl> + public HostStat ( String token , InetAddress endpoint , boolean resolveIp , Float owns ) <nl> { <nl> this . token = token ; <nl> - this . ip = endPoint . getHostAddress ( ) ; <nl> - this . dns = resolveIp ? endPoint . getHostName ( ) : null ; <nl> + this . endpoint = endpoint ; <nl> + this . resolveIp = resolveIp ; <nl> this . owns = owns ; <nl> } <nl> <nl> public String ipOrDns ( ) <nl> { <nl> - return ( dns ! = null ) ? dns : ip ; <nl> + return ( resolveIp ) ? endpoint . getHostName ( ) : endpoint . getHostAddress ( ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index ba7144f . . 6c02877 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 304 , 7 + 304 , 7 @ @ public class NodeCmd 
 
 for ( HostStat stat : hoststats ) 
 { 
 - tokens . addAll ( endpointsToTokens . get ( stat . ip ) ) ; 
 + tokens . addAll ( endpointsToTokens . get ( stat . endpoint . getHostAddress ( ) ) ) ; 
 lastToken = tokens . get ( tokens . size ( ) - 1 ) ; 
 if ( stat . owns ! = null ) 
 totalReplicas + = stat . owns ; 
 @ @ - 322 , 7 + 322 , 7 @ @ public class NodeCmd 
 
 for ( HostStat stat : hoststats ) 
 { 
 - String endpoint = stat . ip ; 
 + String endpoint = stat . endpoint . getHostAddress ( ) ; 
 String rack ; 
 try 
 { 
 @ @ - 411 , 7 + 411 , 7 @ @ public class NodeCmd 
 return format ; 
 } 
 
 - private void printNode ( String endpoint , Float owns , List < String > tokens , boolean hasEffectiveOwns , boolean isTokenPerNode ) throws UnknownHostException 
 + private void printNode ( String endpoint , Float owns , List < HostStat > tokens , boolean hasEffectiveOwns , boolean isTokenPerNode ) throws UnknownHostException 
 { 
 String status , state , load , strOwns , hostID , rack , fmt ; 
 fmt = getFormat ( hasEffectiveOwns , isTokenPerNode ) ; 
 @ @ - 428 , 13 + 428 , 14 @ @ public class NodeCmd 
 hostID = hostIDMap . get ( endpoint ) ; 
 rack = epSnitchInfo . getRack ( endpoint ) ; 
 
 + String endpointDns = tokens . get ( 0 ) . ipOrDns ( ) ; 
 if ( isTokenPerNode ) 
 { 
 - outs . printf ( fmt , status , state , endpoint , load , strOwns , hostID , tokens . get ( 0 ) , rack ) ; 
 + outs . printf ( fmt , status , state , endpointDns , load , strOwns , hostID , tokens . get ( 0 ) . token , rack ) ; 
 } 
 else 
 { 
 - outs . printf ( fmt , status , state , endpoint , load , tokens . size ( ) , strOwns , hostID , rack ) ; 
 + outs . printf ( fmt , status , state , endpointDns , load , tokens . size ( ) , strOwns , hostID , rack ) ; 
 } 
 } 
 
 @ @ - 494 , 16 + 495 , 16 @ @ public class NodeCmd 
 printStatusLegend ( ) ; 
 printNodesHeader ( hasEffectiveOwns , isTokenPerNode ) ; 
 
 - ArrayListMultimap < String , String > hostToTokens = ArrayListMultimap . create ( ) ; 
 + ArrayListMultimap < InetAddress , HostStat > hostToTokens = ArrayListMultimap . create ( ) ; 
 for ( HostStat stat : dc . getValue ( ) ) 
 - hostToTokens . put ( stat . ipOrDns ( ) , stat . token ) ; 
 + hostToTokens . put ( stat . endpoint , stat ) ; 
 
 / / Nodes 
 - for ( String endpoint : hostToTokens . keySet ( ) ) 
 + for ( InetAddress endpoint : hostToTokens . keySet ( ) ) 
 { 
 - Float owns = ownerships . get ( InetAddress . getByName ( endpoint ) ) ; 
 - List < String > tokens = hostToTokens . get ( endpoint ) ; 
 - printNode ( endpoint , owns , tokens , hasEffectiveOwns , isTokenPerNode ) ; 
 + Float owns = ownerships . get ( endpoint ) ; 
 + List < HostStat > tokens = hostToTokens . get ( endpoint ) ; 
 + printNode ( endpoint . getHostAddress ( ) , owns , tokens , hasEffectiveOwns , isTokenPerNode ) ; 
 } 
 } 
 } 
 @ @ - 553 , 22 + 554 , 22 @ @ public class NodeCmd 
 } 
 
 static class HostStat { 
 - public final String ip ; 
 - public final String dns ; 
 + public final InetAddress endpoint ; 
 + public final boolean resolveIp ; 
 public final Float owns ; 
 public final String token ; 
 
 - public HostStat ( String token , InetAddress endPoint , boolean resolveIp , Float owns ) 
 + public HostStat ( String token , InetAddress endpoint , boolean resolveIp , Float owns ) 
 { 
 this . token = token ; 
 - this . ip = endPoint . getHostAddress ( ) ; 
 - this . dns = resolveIp ? endPoint . getHostName ( ) : null ; 
 + this . endpoint = endpoint ; 
 + this . resolveIp = resolveIp ; 
 this . owns = owns ; 
 } 
 
 public String ipOrDns ( ) 
 { 
 - return ( dns ! = null ) ? dns : ip ; 
 + return ( resolveIp ) ? endpoint . getHostName ( ) : endpoint . getHostAddress ( ) ; 
 } 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
