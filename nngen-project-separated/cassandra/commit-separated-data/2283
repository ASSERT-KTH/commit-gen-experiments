BLEU SCORE: 0.010783469846969963

TEST MSG: merge from 2 . 1
GENERATED MSG: Revert " Fail to start if commit log replay encounters an exception "

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 47c5ce1 . . 119e005 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> * Pig support for hadoop CqlInputFormat ( CASSANDRA - 6454 ) <nl> * Add duration mode to cassandra - stress ( CASSANDRA - 7468 ) <nl> * Add listen _ interface and rpc _ interface options ( CASSANDRA - 7417 ) <nl> - * Fail to start if commit log replay detects a problem ( CASSANDRA - 7125 ) <nl> * Improve schema merge performance ( CASSANDRA - 7444 ) <nl> * Adjust MT depth based on # of partition validating ( CASSANDRA - 5263 ) <nl> * Optimise NativeCell comparisons ( CASSANDRA - 6755 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index d9678aa . . 6d77966 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 131 , 20 + 131 , 9 @ @ public class CommitLog implements CommitLogMBean <nl> * / <nl> public int recover ( File . . . clogs ) throws IOException <nl> { <nl> - try <nl> - { <nl> - CommitLogReplayer recovery = new CommitLogReplayer ( ) ; <nl> - recovery . recover ( clogs ) ; <nl> - return recovery . blockForWrites ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - if ( e instanceof UnknownColumnFamilyException ) <nl> - logger . error ( " Commit log replay failed due to replaying a mutation for a missing table . This error can be ignored by providing - Dcassandra . commitlog . stop _ on _ missing _ tables = false on the command line " ) ; <nl> - if ( e instanceof MalformedCommitLogException ) <nl> - logger . error ( " Commit log replay failed due to a non - fatal exception . This error can be ignored by providing - Dcassandra . commitlog . stop _ on _ errors = false on the command line " ) ; <nl> - throw e ; <nl> - } <nl> + CommitLogReplayer recovery = new CommitLogReplayer ( ) ; <nl> + recovery . recover ( clogs ) ; <nl> + return recovery . blockForWrites ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> index 3f1b7b5 . . e50a585 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java <nl> @ @ - 28 , 8 + 28 , 6 @ @ import java . nio . ByteBuffer ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> - <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . PureJavaCrc32 ; <nl> @ @ - 49 , 11 + 47 , 10 @ @ public class CommitLogDescriptor <nl> * Increment this number if there is a changes in the commit log disc layout or MessagingVersion changes . <nl> * Note : make sure to handle { @ link # getMessagingVersion ( ) } <nl> * / <nl> - @ VisibleForTesting <nl> public static final int current _ version = VERSION _ 21 ; <nl> <nl> / / [ version , id , checksum ] <nl> - public static final int HEADER _ SIZE = 4 + 8 + 4 ; <nl> + static final int HEADER _ SIZE = 4 + 8 + 4 ; <nl> <nl> final int version ; <nl> public final long id ; <nl> @ @ - 69 , 8 + 66 , 7 @ @ public class CommitLogDescriptor <nl> this ( current _ version , id ) ; <nl> } <nl> <nl> - @ VisibleForTesting <nl> - public static void writeHeader ( ByteBuffer out , CommitLogDescriptor descriptor ) <nl> + static void writeHeader ( ByteBuffer out , CommitLogDescriptor descriptor ) <nl> { <nl> out . putInt ( 0 , descriptor . version ) ; <nl> out . putLong ( 4 , descriptor . id ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> index 10d13b2 . . 1012829 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . * ; <nl> import java . util . concurrent . Future ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Iterables ; <nl> @ @ - 49 , 8 + 48 , 6 @ @ public class CommitLogReplayer <nl> private static final Logger logger = LoggerFactory . getLogger ( CommitLogReplayer . class ) ; <nl> private static final int MAX _ OUTSTANDING _ REPLAY _ COUNT = 1024 ; <nl> private static final int LEGACY _ END _ OF _ SEGMENT _ MARKER = 0 ; <nl> - private static boolean IGNORE _ ERRORS = System . getProperty ( " cassandra . commitlog . stop _ on _ errors " , " true " ) . equals ( " false " ) ; <nl> - private static boolean IGNORE _ MISSING _ TABLES = IGNORE _ ERRORS | | System . getProperty ( " cassandra . commitlog . stop _ on _ missing _ tables " , " true " ) . equals ( " false " ) ; <nl> <nl> private final Set < Keyspace > keyspacesRecovered ; <nl> private final List < Future < ? > > futures ; <nl> @ @ - 63 , 16 + 60 , 16 @ @ public class CommitLogReplayer <nl> <nl> public CommitLogReplayer ( ) <nl> { <nl> - this . keyspacesRecovered = new NonBlockingHashSet < > ( ) ; <nl> - this . futures = new ArrayList < > ( ) ; <nl> + this . keyspacesRecovered = new NonBlockingHashSet < Keyspace > ( ) ; <nl> + this . futures = new ArrayList < Future < ? > > ( ) ; <nl> this . buffer = new byte [ 4096 ] ; <nl> - this . invalidMutations = new HashMap < > ( ) ; <nl> + this . invalidMutations = new HashMap < UUID , AtomicInteger > ( ) ; <nl> / / count the number of replayed mutation . We don ' t really care about atomicity , but we need it to be a reference . <nl> this . replayedCount = new AtomicInteger ( ) ; <nl> this . checksum = new PureJavaCrc32 ( ) ; <nl> <nl> / / compute per - CF and global replay positions <nl> - cfPositions = new HashMap < > ( ) ; <nl> + cfPositions = new HashMap < UUID , ReplayPosition > ( ) ; <nl> Ordering < ReplayPosition > replayPositionOrdering = Ordering . from ( ReplayPosition . comparator ) ; <nl> for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> { <nl> @ @ - 120 , 12 + 117 , 7 @ @ public class CommitLogReplayer <nl> if ( offset > reader . length ( ) - CommitLogSegment . SYNC _ MARKER _ SIZE ) <nl> { <nl> if ( offset ! = reader . length ( ) & & offset ! = Integer . MAX _ VALUE ) <nl> - { <nl> - String message = String . format ( " Encountered bad header at position % d of Commit log % s ; not enough room for a header " , offset , reader . getPath ( ) ) ; <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new MalformedCommitLogException ( message ) ; <nl> - logger . warn ( message ) ; <nl> - } <nl> + logger . warn ( " Encountered bad header at position { } of Commit log { } ; not enough room for a header " , offset , reader . getPath ( ) ) ; <nl> / / cannot possibly be a header here . if we ' re = = length ( ) , assume it ' s a correctly written final segment <nl> return - 1 ; <nl> } <nl> @ @ - 144 , 19 + 136 , 13 @ @ public class CommitLogReplayer <nl> { <nl> if ( end ! = 0 | | filecrc ! = 0 ) <nl> { <nl> - String message = String . format ( " Encountered bad header at position % d of Commit log % s , with invalid CRC . The end of segment marker should be zero . " , offset , reader . getPath ( ) ) ; <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new MalformedCommitLogException ( message ) ; <nl> - logger . warn ( message ) ; <nl> + logger . warn ( " Encountered bad header at position { } of commit log { } , with invalid CRC . The end of segment marker should be zero . " , offset , reader . getPath ( ) ) ; <nl> } <nl> return - 1 ; <nl> } <nl> else if ( end < offset | | end > reader . length ( ) ) <nl> { <nl> - String message = String . format ( " Encountered bad header at position % d of Commit log % s , with bad position but valid CRC . " , offset , reader . getPath ( ) ) ; <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new MalformedCommitLogException ( message ) ; <nl> - logger . warn ( message ) ; <nl> + logger . warn ( " Encountered bad header at position { } of commit log { } , with bad position but valid CRC " , offset , reader . getPath ( ) ) ; <nl> return - 1 ; <nl> } <nl> return end ; <nl> @ @ - 285 , 9 + 271 , 8 @ @ public class CommitLogReplayer <nl> / * read the logs populate Mutation and apply * / <nl> while ( reader . getPosition ( ) < end & & ! reader . isEOF ( ) ) <nl> { <nl> - long mutationStart = reader . getFilePointer ( ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Reading mutation at { } " , mutationStart ) ; <nl> + logger . debug ( " Reading mutation at { } " , reader . getFilePointer ( ) ) ; <nl> <nl> long claimedCRC32 ; <nl> int serializedSize ; <nl> @ @ - 297 , 7 + 282 , 7 @ @ public class CommitLogReplayer <nl> serializedSize = reader . readInt ( ) ; <nl> if ( serializedSize = = LEGACY _ END _ OF _ SEGMENT _ MARKER ) <nl> { <nl> - logger . debug ( " Encountered end of segment marker at { } " , mutationStart ) ; <nl> + logger . debug ( " Encountered end of segment marker at { } " , reader . getFilePointer ( ) ) ; <nl> break main ; <nl> } <nl> <nl> @ @ - 306 , 11 + 291 , 7 @ @ public class CommitLogReplayer <nl> / / 2 - byte length from writeUTF / writeWithShortLength ) and 4 bytes for column count . <nl> / / This prevents CRC by being fooled by special - case garbage in the file ; see CASSANDRA - 2128 <nl> if ( serializedSize < 10 ) <nl> - { <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new MalformedCommitLogException ( " Too small mutation encountered at position " + mutationStart ) ; <nl> break main ; <nl> - } <nl> <nl> long claimedSizeChecksum ; <nl> if ( desc . version < CommitLogDescriptor . VERSION _ 21 ) <nl> @ @ - 324 , 11 + 305 , 7 @ @ public class CommitLogReplayer <nl> checksum . updateInt ( serializedSize ) ; <nl> <nl> if ( checksum . getValue ( ) ! = claimedSizeChecksum ) <nl> - { <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new IOException ( " Invalid size checksum for mutation at position " + mutationStart + " of " + file ) ; <nl> break main ; / / entry wasn ' t synced correctly / fully . that ' s <nl> - } <nl> / / ok . <nl> <nl> if ( serializedSize > buffer . length ) <nl> @ @ - 341 , 17 + 318 , 12 @ @ public class CommitLogReplayer <nl> } <nl> catch ( EOFException eof ) <nl> { <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new MalformedCommitLogException ( " Encountered end - of - file unexpectedly " , eof ) ; <nl> - <nl> break main ; / / last CL entry didn ' t get completely written . that ' s ok . <nl> } <nl> <nl> checksum . update ( buffer , 0 , serializedSize ) ; <nl> if ( claimedCRC32 ! = checksum . getValue ( ) ) <nl> { <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new IOException ( " Invalid checksum for mutation at position " + mutationStart + " of " + file ) ; <nl> / / this entry must not have been fsynced . probably the rest is bad too , <nl> / / but just in case there is no harm in trying them ( since we still read on an entry boundary ) <nl> continue ; <nl> @ @ - 372 , 9 + 344 , 6 @ @ public class CommitLogReplayer <nl> } <nl> catch ( UnknownColumnFamilyException ex ) <nl> { <nl> - if ( ! IGNORE _ MISSING _ TABLES ) <nl> - throw ex ; <nl> - <nl> if ( ex . cfId = = null ) <nl> continue ; <nl> AtomicInteger i = invalidMutations . get ( ex . cfId ) ; <nl> @ @ - 389 , 14 + 358 , 16 @ @ public class CommitLogReplayer <nl> } <nl> catch ( Throwable t ) <nl> { <nl> - if ( ! IGNORE _ ERRORS ) <nl> - throw new MalformedCommitLogException ( " Encountered bad mutation " , t ) ; <nl> - <nl> File f = File . createTempFile ( " mutation " , " dat " ) ; <nl> - try ( DataOutputStream out = new DataOutputStream ( new FileOutputStream ( f ) ) ) <nl> + DataOutputStream out = new DataOutputStream ( new FileOutputStream ( f ) ) ; <nl> + try <nl> { <nl> out . write ( buffer , 0 , serializedSize ) ; <nl> } <nl> + finally <nl> + { <nl> + out . close ( ) ; <nl> + } <nl> String st = String . format ( " Unexpected error deserializing mutation ; saved to % s and ignored . This may be caused by replaying a mutation against a table with the same name but incompatible schema . Exception follows : " , <nl> f . getAbsolutePath ( ) ) ; <nl> logger . error ( st , t ) ; <nl> @ @ - 412 , 11 + 383 , 7 @ @ public class CommitLogReplayer <nl> public void runMayThrow ( ) throws IOException <nl> { <nl> if ( Schema . instance . getKSMetaData ( mutation . getKeyspaceName ( ) ) = = null ) <nl> - { <nl> - if ( ! IGNORE _ MISSING _ TABLES ) <nl> - throw new UnknownColumnFamilyException ( " Keyspace for this table is missing " , mutation . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ) ; <nl> return ; <nl> - } <nl> if ( pointInTimeExceeded ( mutation ) ) <nl> return ; <nl> <nl> @ @ - 431 , 12 + 398 , 7 @ @ public class CommitLogReplayer <nl> for ( ColumnFamily columnFamily : replayFilter . filter ( mutation ) ) <nl> { <nl> if ( Schema . instance . getCF ( columnFamily . id ( ) ) = = null ) <nl> - { <nl> - if ( ! IGNORE _ MISSING _ TABLES ) <nl> - throw new UnknownColumnFamilyException ( " Missing table with cfid = " + columnFamily . id ( ) , <nl> - mutation . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ) ; <nl> continue ; / / dropped <nl> - } <nl> <nl> ReplayPosition rp = cfPositions . get ( columnFamily . id ( ) ) ; <nl> <nl> @ @ - 453 , 7 + 415 , 7 @ @ public class CommitLogReplayer <nl> if ( newMutation ! = null ) <nl> { <nl> assert ! newMutation . isEmpty ( ) ; <nl> - keyspace . apply ( newMutation , false ) ; <nl> + Keyspace . open ( newMutation . getKeyspaceName ( ) ) . apply ( newMutation , false ) ; <nl> keyspacesRecovered . add ( keyspace ) ; <nl> } <nl> } <nl> @ @ - 491 , 10 + 453 , 4 @ @ public class CommitLogReplayer <nl> } <nl> return false ; <nl> } <nl> - <nl> - @ VisibleForTesting <nl> - public static void setIgnoreErrors ( boolean ignore ) <nl> - { <nl> - IGNORE _ ERRORS = IGNORE _ MISSING _ TABLES = ignore ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / MalformedCommitLogException . java b / src / java / org / apache / cassandra / db / commitlog / MalformedCommitLogException . java <nl> deleted file mode 100644 <nl> index 84a5cb0 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / MalformedCommitLogException . java <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db . commitlog ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - / / represents a non - fatal commit log replay exception ( i . e . can be skipped with - Dcassandra . commitlog . ignoreerrors = true ) <nl> - public class MalformedCommitLogException extends IOException <nl> - { <nl> - public MalformedCommitLogException ( String message ) <nl> - { <nl> - super ( message ) ; <nl> - } <nl> - public MalformedCommitLogException ( String message , Throwable cause ) <nl> - { <nl> - super ( message , cause ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 07c6cc4 . . fbee7ce 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 47 , 8 + 47 , 6 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> - import org . apache . cassandra . db . UnknownColumnFamilyException ; <nl> - import org . apache . cassandra . db . commitlog . MalformedCommitLogException ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> index 762d2d0 . . f8cb8c8 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> @ @ - 38 , 15 + 38 , 12 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . CommitLogDescriptor ; <nl> - import org . apache . cassandra . db . commitlog . CommitLogReplayer ; <nl> import org . apache . cassandra . db . commitlog . CommitLogSegment ; <nl> - import org . apache . cassandra . db . commitlog . MalformedCommitLogException ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . utils . PureJavaCrc32 ; <nl> <nl> import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> <nl> @ @ - 71 , 32 + 68 , 34 @ @ public class CommitLogTest <nl> @ Test <nl> public void testRecoveryWithEmptyLog ( ) throws Exception <nl> { <nl> - testMalformed ( badLogFile ( new byte [ 0 ] ) ) ; <nl> + CommitLog . instance . recover ( new File [ ] { tmpFile ( ) } ) ; <nl> } <nl> <nl> @ Test <nl> public void testRecoveryWithShortLog ( ) throws Exception <nl> { <nl> / / force EOF while reading log <nl> - testMalformed ( badLogFile ( 100 , 10 ) ) ; <nl> + testRecoveryWithBadSizeArgument ( 100 , 10 ) ; <nl> } <nl> <nl> @ Test <nl> public void testRecoveryWithShortSize ( ) throws Exception <nl> { <nl> - testMalformed ( new byte [ 2 ] ) ; <nl> + testRecovery ( new byte [ 2 ] ) ; <nl> } <nl> <nl> @ Test <nl> public void testRecoveryWithShortCheckSum ( ) throws Exception <nl> { <nl> - testMalformed ( new byte [ 6 ] ) ; <nl> + testRecovery ( new byte [ 6 ] ) ; <nl> } <nl> <nl> @ Test <nl> public void testRecoveryWithGarbageLog ( ) throws Exception <nl> { <nl> - testMalformed ( garbage ( 100 ) ) ; <nl> + byte [ ] garbage = new byte [ 100 ] ; <nl> + ( new java . util . Random ( ) ) . nextBytes ( garbage ) ; <nl> + testRecovery ( garbage ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 104 , 30 + 103 , 21 @ @ public class CommitLogTest <nl> { <nl> Checksum checksum = new CRC32 ( ) ; <nl> checksum . update ( 100 ) ; <nl> - testMalformed ( badLogFile ( 100 , checksum . getValue ( ) , new byte [ 100 ] ) ) ; <nl> - testMalformed ( badLogFile ( 100 , checksum . getValue ( ) , garbage ( 100 ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testRecoveryWithBadSize ( ) throws Exception <nl> - { <nl> - Checksum checksum = new CRC32 ( ) ; <nl> - checksum . update ( 100 ) ; <nl> - testMalformed ( badLogFile ( 120 , checksum . getValue ( ) , garbage ( 100 ) ) ) ; <nl> + testRecoveryWithBadSizeArgument ( 100 , 100 , ~ checksum . getValue ( ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testRecoveryWithZeroSegmentSizeArgument ( ) throws Exception <nl> { <nl> / / many different combinations of 4 bytes ( garbage ) will be read as zero by readInt ( ) <nl> - testMalformed ( badLogFile ( 0 , - 1L , 10 ) ) ; / / zero size , but no EOF <nl> + testRecoveryWithBadSizeArgument ( 0 , 10 ) ; / / zero size , but no EOF <nl> } <nl> <nl> @ Test <nl> public void testRecoveryWithNegativeSizeArgument ( ) throws Exception <nl> { <nl> / / garbage from a partial / bad flush could be read as a negative size even if there is no EOF <nl> - testMalformed ( badLogFile ( - 10 , 10 ) ) ; / / zero size , but no EOF <nl> + testRecoveryWithBadSizeArgument ( - 10 , 10 ) ; / / negative size , but no EOF <nl> } <nl> <nl> @ Test <nl> @ @ - 204 , 8 + 194 , 8 @ @ public class CommitLogTest <nl> <nl> private static int getMaxRecordDataSize ( String keyspace , ByteBuffer key , String table , CellName column ) <nl> { <nl> - Mutation rm = new Mutation ( keyspace , key ) ; <nl> - rm . add ( table , column , ByteBuffer . allocate ( 0 ) , 0 ) ; <nl> + Mutation rm = new Mutation ( " Keyspace1 " , bytes ( " k " ) ) ; <nl> + rm . add ( " Standard1 " , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( 0 ) , 0 ) ; <nl> <nl> int max = ( DatabaseDescriptor . getCommitLogSegmentSize ( ) / 2 ) ; <nl> max - = CommitLogSegment . ENTRY _ OVERHEAD _ SIZE ; / / log entry overhead <nl> @ @ - 245 , 73 + 235 , 22 @ @ public class CommitLogTest <nl> } <nl> } <nl> <nl> - / / construct log file with correct chunk checksum for the provided size / position <nl> - protected File badLogFile ( int markerSize , int realSize ) throws Exception <nl> - { <nl> - return badLogFile ( markerSize , garbage ( realSize ) ) ; <nl> - } <nl> - <nl> - protected File badLogFile ( int markerSize , byte [ ] data ) throws Exception <nl> - { <nl> - File logFile = tmpFile ( ) ; <nl> - CommitLogDescriptor descriptor = CommitLogDescriptor . fromFileName ( logFile . getName ( ) ) ; <nl> - PureJavaCrc32 crc = new PureJavaCrc32 ( ) ; <nl> - crc . updateInt ( ( int ) ( descriptor . id & 0xFFFFFFFFL ) ) ; <nl> - crc . updateInt ( ( int ) ( descriptor . id > > > 32 ) ) ; <nl> - crc . updateInt ( CommitLogDescriptor . HEADER _ SIZE ) ; <nl> - return badLogFile ( markerSize , crc . getCrc ( ) , data , logFile ) ; <nl> - } <nl> - <nl> - protected byte [ ] garbage ( int size ) <nl> - { <nl> - byte [ ] garbage = new byte [ size ] ; <nl> - ( new java . util . Random ( ) ) . nextBytes ( garbage ) ; <nl> - return garbage ; <nl> - } <nl> - <nl> - protected File badLogFile ( int markerSize , long checksum , int realSize ) throws Exception <nl> - { <nl> - return badLogFile ( markerSize , checksum , realSize , tmpFile ( ) ) ; <nl> - } <nl> - <nl> - protected File badLogFile ( int markerSize , long checksum , int realSize , File logFile ) throws Exception <nl> - { <nl> - return badLogFile ( markerSize , checksum , new byte [ realSize ] , logFile ) ; <nl> - } <nl> - <nl> - protected File badLogFile ( int markerSize , long checksum , byte [ ] chunk ) throws Exception <nl> + protected void testRecoveryWithBadSizeArgument ( int size , int dataSize ) throws Exception <nl> { <nl> - return badLogFile ( markerSize , checksum , chunk , tmpFile ( ) ) ; <nl> + Checksum checksum = new CRC32 ( ) ; <nl> + checksum . update ( size ) ; <nl> + testRecoveryWithBadSizeArgument ( size , dataSize , checksum . getValue ( ) ) ; <nl> } <nl> <nl> - protected File badLogFile ( int markerSize , long checksum , byte [ ] chunk , File logFile ) throws Exception <nl> + protected void testRecoveryWithBadSizeArgument ( int size , int dataSize , long checksum ) throws Exception <nl> { <nl> ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; <nl> DataOutputStream dout = new DataOutputStream ( out ) ; <nl> - ByteBuffer buffer = ByteBuffer . allocate ( CommitLogDescriptor . HEADER _ SIZE ) ; <nl> - CommitLogDescriptor . writeHeader ( buffer , CommitLogDescriptor . fromFileName ( logFile . getName ( ) ) ) ; <nl> - out . write ( buffer . array ( ) ) ; <nl> - dout . writeInt ( markerSize ) ; <nl> + dout . writeInt ( size ) ; <nl> dout . writeLong ( checksum ) ; <nl> - dout . write ( chunk ) ; <nl> + dout . write ( new byte [ dataSize ] ) ; <nl> dout . close ( ) ; <nl> - try ( OutputStream lout = new FileOutputStream ( logFile ) ) <nl> - { <nl> - lout . write ( out . toByteArray ( ) ) ; <nl> - lout . close ( ) ; <nl> - } <nl> - return logFile ; <nl> - } <nl> - <nl> - protected File badLogFile ( byte [ ] contents ) throws Exception <nl> - { <nl> - File logFile = tmpFile ( ) ; <nl> - try ( OutputStream lout = new FileOutputStream ( logFile ) ) <nl> - { <nl> - lout . write ( contents ) ; <nl> - lout . close ( ) ; <nl> - } <nl> - return logFile ; <nl> + testRecovery ( out . toByteArray ( ) ) ; <nl> } <nl> <nl> protected File tmpFile ( ) throws IOException <nl> @ @ - 322 , 29 + 261 , 17 @ @ public class CommitLogTest <nl> return logFile ; <nl> } <nl> <nl> - private void testMalformed ( byte [ ] contents ) throws Exception <nl> - { <nl> - testMalformed ( badLogFile ( contents ) ) ; <nl> - testMalformed ( badLogFile ( contents . length , contents ) ) ; <nl> - } <nl> - <nl> - private void testMalformed ( File logFile ) throws Exception <nl> + protected void testRecovery ( byte [ ] logData ) throws Exception <nl> { <nl> - CommitLogReplayer . setIgnoreErrors ( true ) ; <nl> - CommitLog . instance . recover ( new File [ ] { logFile } ) ; <nl> - CommitLogReplayer . setIgnoreErrors ( false ) ; <nl> - try <nl> - { <nl> - CommitLog . instance . recover ( new File [ ] { logFile } ) ; <nl> - Assert . assertFalse ( true ) ; <nl> - } <nl> - catch ( Throwable t ) <nl> + File logFile = tmpFile ( ) ; <nl> + try ( OutputStream lout = new FileOutputStream ( logFile ) ) <nl> { <nl> - if ( ! ( t instanceof MalformedCommitLogException ) ) <nl> - throw t ; <nl> + lout . write ( logData ) ; <nl> + / / statics make it annoying to test things correctly <nl> + CommitLog . instance . recover ( new File [ ] { logFile } ) ; / / CASSANDRA - 1119 / CASSANDRA - 1179 throw on failure * / <nl> } <nl> } <nl> - <nl> + <nl> @ Test <nl> public void testVersions ( ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 47c5ce1 . . 119e005 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 * Pig support for hadoop CqlInputFormat ( CASSANDRA - 6454 ) 
 * Add duration mode to cassandra - stress ( CASSANDRA - 7468 ) 
 * Add listen _ interface and rpc _ interface options ( CASSANDRA - 7417 ) 
 - * Fail to start if commit log replay detects a problem ( CASSANDRA - 7125 ) 
 * Improve schema merge performance ( CASSANDRA - 7444 ) 
 * Adjust MT depth based on # of partition validating ( CASSANDRA - 5263 ) 
 * Optimise NativeCell comparisons ( CASSANDRA - 6755 ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index d9678aa . . 6d77966 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 131 , 20 + 131 , 9 @ @ public class CommitLog implements CommitLogMBean 
 * / 
 public int recover ( File . . . clogs ) throws IOException 
 { 
 - try 
 - { 
 - CommitLogReplayer recovery = new CommitLogReplayer ( ) ; 
 - recovery . recover ( clogs ) ; 
 - return recovery . blockForWrites ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - if ( e instanceof UnknownColumnFamilyException ) 
 - logger . error ( " Commit log replay failed due to replaying a mutation for a missing table . This error can be ignored by providing - Dcassandra . commitlog . stop _ on _ missing _ tables = false on the command line " ) ; 
 - if ( e instanceof MalformedCommitLogException ) 
 - logger . error ( " Commit log replay failed due to a non - fatal exception . This error can be ignored by providing - Dcassandra . commitlog . stop _ on _ errors = false on the command line " ) ; 
 - throw e ; 
 - } 
 + CommitLogReplayer recovery = new CommitLogReplayer ( ) ; 
 + recovery . recover ( clogs ) ; 
 + return recovery . blockForWrites ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 index 3f1b7b5 . . e50a585 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogDescriptor . java 
 @ @ - 28 , 8 + 28 , 6 @ @ import java . nio . ByteBuffer ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 - 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . PureJavaCrc32 ; 
 @ @ - 49 , 11 + 47 , 10 @ @ public class CommitLogDescriptor 
 * Increment this number if there is a changes in the commit log disc layout or MessagingVersion changes . 
 * Note : make sure to handle { @ link # getMessagingVersion ( ) } 
 * / 
 - @ VisibleForTesting 
 public static final int current _ version = VERSION _ 21 ; 
 
 / / [ version , id , checksum ] 
 - public static final int HEADER _ SIZE = 4 + 8 + 4 ; 
 + static final int HEADER _ SIZE = 4 + 8 + 4 ; 
 
 final int version ; 
 public final long id ; 
 @ @ - 69 , 8 + 66 , 7 @ @ public class CommitLogDescriptor 
 this ( current _ version , id ) ; 
 } 
 
 - @ VisibleForTesting 
 - public static void writeHeader ( ByteBuffer out , CommitLogDescriptor descriptor ) 
 + static void writeHeader ( ByteBuffer out , CommitLogDescriptor descriptor ) 
 { 
 out . putInt ( 0 , descriptor . version ) ; 
 out . putLong ( 4 , descriptor . id ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 index 10d13b2 . . 1012829 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . * ; 
 import java . util . concurrent . Future ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Iterables ; 
 @ @ - 49 , 8 + 48 , 6 @ @ public class CommitLogReplayer 
 private static final Logger logger = LoggerFactory . getLogger ( CommitLogReplayer . class ) ; 
 private static final int MAX _ OUTSTANDING _ REPLAY _ COUNT = 1024 ; 
 private static final int LEGACY _ END _ OF _ SEGMENT _ MARKER = 0 ; 
 - private static boolean IGNORE _ ERRORS = System . getProperty ( " cassandra . commitlog . stop _ on _ errors " , " true " ) . equals ( " false " ) ; 
 - private static boolean IGNORE _ MISSING _ TABLES = IGNORE _ ERRORS | | System . getProperty ( " cassandra . commitlog . stop _ on _ missing _ tables " , " true " ) . equals ( " false " ) ; 
 
 private final Set < Keyspace > keyspacesRecovered ; 
 private final List < Future < ? > > futures ; 
 @ @ - 63 , 16 + 60 , 16 @ @ public class CommitLogReplayer 
 
 public CommitLogReplayer ( ) 
 { 
 - this . keyspacesRecovered = new NonBlockingHashSet < > ( ) ; 
 - this . futures = new ArrayList < > ( ) ; 
 + this . keyspacesRecovered = new NonBlockingHashSet < Keyspace > ( ) ; 
 + this . futures = new ArrayList < Future < ? > > ( ) ; 
 this . buffer = new byte [ 4096 ] ; 
 - this . invalidMutations = new HashMap < > ( ) ; 
 + this . invalidMutations = new HashMap < UUID , AtomicInteger > ( ) ; 
 / / count the number of replayed mutation . We don ' t really care about atomicity , but we need it to be a reference . 
 this . replayedCount = new AtomicInteger ( ) ; 
 this . checksum = new PureJavaCrc32 ( ) ; 
 
 / / compute per - CF and global replay positions 
 - cfPositions = new HashMap < > ( ) ; 
 + cfPositions = new HashMap < UUID , ReplayPosition > ( ) ; 
 Ordering < ReplayPosition > replayPositionOrdering = Ordering . from ( ReplayPosition . comparator ) ; 
 for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 { 
 @ @ - 120 , 12 + 117 , 7 @ @ public class CommitLogReplayer 
 if ( offset > reader . length ( ) - CommitLogSegment . SYNC _ MARKER _ SIZE ) 
 { 
 if ( offset ! = reader . length ( ) & & offset ! = Integer . MAX _ VALUE ) 
 - { 
 - String message = String . format ( " Encountered bad header at position % d of Commit log % s ; not enough room for a header " , offset , reader . getPath ( ) ) ; 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new MalformedCommitLogException ( message ) ; 
 - logger . warn ( message ) ; 
 - } 
 + logger . warn ( " Encountered bad header at position { } of Commit log { } ; not enough room for a header " , offset , reader . getPath ( ) ) ; 
 / / cannot possibly be a header here . if we ' re = = length ( ) , assume it ' s a correctly written final segment 
 return - 1 ; 
 } 
 @ @ - 144 , 19 + 136 , 13 @ @ public class CommitLogReplayer 
 { 
 if ( end ! = 0 | | filecrc ! = 0 ) 
 { 
 - String message = String . format ( " Encountered bad header at position % d of Commit log % s , with invalid CRC . The end of segment marker should be zero . " , offset , reader . getPath ( ) ) ; 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new MalformedCommitLogException ( message ) ; 
 - logger . warn ( message ) ; 
 + logger . warn ( " Encountered bad header at position { } of commit log { } , with invalid CRC . The end of segment marker should be zero . " , offset , reader . getPath ( ) ) ; 
 } 
 return - 1 ; 
 } 
 else if ( end < offset | | end > reader . length ( ) ) 
 { 
 - String message = String . format ( " Encountered bad header at position % d of Commit log % s , with bad position but valid CRC . " , offset , reader . getPath ( ) ) ; 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new MalformedCommitLogException ( message ) ; 
 - logger . warn ( message ) ; 
 + logger . warn ( " Encountered bad header at position { } of commit log { } , with bad position but valid CRC " , offset , reader . getPath ( ) ) ; 
 return - 1 ; 
 } 
 return end ; 
 @ @ - 285 , 9 + 271 , 8 @ @ public class CommitLogReplayer 
 / * read the logs populate Mutation and apply * / 
 while ( reader . getPosition ( ) < end & & ! reader . isEOF ( ) ) 
 { 
 - long mutationStart = reader . getFilePointer ( ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Reading mutation at { } " , mutationStart ) ; 
 + logger . debug ( " Reading mutation at { } " , reader . getFilePointer ( ) ) ; 
 
 long claimedCRC32 ; 
 int serializedSize ; 
 @ @ - 297 , 7 + 282 , 7 @ @ public class CommitLogReplayer 
 serializedSize = reader . readInt ( ) ; 
 if ( serializedSize = = LEGACY _ END _ OF _ SEGMENT _ MARKER ) 
 { 
 - logger . debug ( " Encountered end of segment marker at { } " , mutationStart ) ; 
 + logger . debug ( " Encountered end of segment marker at { } " , reader . getFilePointer ( ) ) ; 
 break main ; 
 } 
 
 @ @ - 306 , 11 + 291 , 7 @ @ public class CommitLogReplayer 
 / / 2 - byte length from writeUTF / writeWithShortLength ) and 4 bytes for column count . 
 / / This prevents CRC by being fooled by special - case garbage in the file ; see CASSANDRA - 2128 
 if ( serializedSize < 10 ) 
 - { 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new MalformedCommitLogException ( " Too small mutation encountered at position " + mutationStart ) ; 
 break main ; 
 - } 
 
 long claimedSizeChecksum ; 
 if ( desc . version < CommitLogDescriptor . VERSION _ 21 ) 
 @ @ - 324 , 11 + 305 , 7 @ @ public class CommitLogReplayer 
 checksum . updateInt ( serializedSize ) ; 
 
 if ( checksum . getValue ( ) ! = claimedSizeChecksum ) 
 - { 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new IOException ( " Invalid size checksum for mutation at position " + mutationStart + " of " + file ) ; 
 break main ; / / entry wasn ' t synced correctly / fully . that ' s 
 - } 
 / / ok . 
 
 if ( serializedSize > buffer . length ) 
 @ @ - 341 , 17 + 318 , 12 @ @ public class CommitLogReplayer 
 } 
 catch ( EOFException eof ) 
 { 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new MalformedCommitLogException ( " Encountered end - of - file unexpectedly " , eof ) ; 
 - 
 break main ; / / last CL entry didn ' t get completely written . that ' s ok . 
 } 
 
 checksum . update ( buffer , 0 , serializedSize ) ; 
 if ( claimedCRC32 ! = checksum . getValue ( ) ) 
 { 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new IOException ( " Invalid checksum for mutation at position " + mutationStart + " of " + file ) ; 
 / / this entry must not have been fsynced . probably the rest is bad too , 
 / / but just in case there is no harm in trying them ( since we still read on an entry boundary ) 
 continue ; 
 @ @ - 372 , 9 + 344 , 6 @ @ public class CommitLogReplayer 
 } 
 catch ( UnknownColumnFamilyException ex ) 
 { 
 - if ( ! IGNORE _ MISSING _ TABLES ) 
 - throw ex ; 
 - 
 if ( ex . cfId = = null ) 
 continue ; 
 AtomicInteger i = invalidMutations . get ( ex . cfId ) ; 
 @ @ - 389 , 14 + 358 , 16 @ @ public class CommitLogReplayer 
 } 
 catch ( Throwable t ) 
 { 
 - if ( ! IGNORE _ ERRORS ) 
 - throw new MalformedCommitLogException ( " Encountered bad mutation " , t ) ; 
 - 
 File f = File . createTempFile ( " mutation " , " dat " ) ; 
 - try ( DataOutputStream out = new DataOutputStream ( new FileOutputStream ( f ) ) ) 
 + DataOutputStream out = new DataOutputStream ( new FileOutputStream ( f ) ) ; 
 + try 
 { 
 out . write ( buffer , 0 , serializedSize ) ; 
 } 
 + finally 
 + { 
 + out . close ( ) ; 
 + } 
 String st = String . format ( " Unexpected error deserializing mutation ; saved to % s and ignored . This may be caused by replaying a mutation against a table with the same name but incompatible schema . Exception follows : " , 
 f . getAbsolutePath ( ) ) ; 
 logger . error ( st , t ) ; 
 @ @ - 412 , 11 + 383 , 7 @ @ public class CommitLogReplayer 
 public void runMayThrow ( ) throws IOException 
 { 
 if ( Schema . instance . getKSMetaData ( mutation . getKeyspaceName ( ) ) = = null ) 
 - { 
 - if ( ! IGNORE _ MISSING _ TABLES ) 
 - throw new UnknownColumnFamilyException ( " Keyspace for this table is missing " , mutation . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ) ; 
 return ; 
 - } 
 if ( pointInTimeExceeded ( mutation ) ) 
 return ; 
 
 @ @ - 431 , 12 + 398 , 7 @ @ public class CommitLogReplayer 
 for ( ColumnFamily columnFamily : replayFilter . filter ( mutation ) ) 
 { 
 if ( Schema . instance . getCF ( columnFamily . id ( ) ) = = null ) 
 - { 
 - if ( ! IGNORE _ MISSING _ TABLES ) 
 - throw new UnknownColumnFamilyException ( " Missing table with cfid = " + columnFamily . id ( ) , 
 - mutation . getColumnFamilyIds ( ) . iterator ( ) . next ( ) ) ; 
 continue ; / / dropped 
 - } 
 
 ReplayPosition rp = cfPositions . get ( columnFamily . id ( ) ) ; 
 
 @ @ - 453 , 7 + 415 , 7 @ @ public class CommitLogReplayer 
 if ( newMutation ! = null ) 
 { 
 assert ! newMutation . isEmpty ( ) ; 
 - keyspace . apply ( newMutation , false ) ; 
 + Keyspace . open ( newMutation . getKeyspaceName ( ) ) . apply ( newMutation , false ) ; 
 keyspacesRecovered . add ( keyspace ) ; 
 } 
 } 
 @ @ - 491 , 10 + 453 , 4 @ @ public class CommitLogReplayer 
 } 
 return false ; 
 } 
 - 
 - @ VisibleForTesting 
 - public static void setIgnoreErrors ( boolean ignore ) 
 - { 
 - IGNORE _ ERRORS = IGNORE _ MISSING _ TABLES = ignore ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / MalformedCommitLogException . java b / src / java / org / apache / cassandra / db / commitlog / MalformedCommitLogException . java 
 deleted file mode 100644 
 index 84a5cb0 . . 0000000 
 - - - a / src / java / org / apache / cassandra / db / commitlog / MalformedCommitLogException . java 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - package org . apache . cassandra . db . commitlog ; 
 - 
 - import java . io . IOException ; 
 - 
 - / / represents a non - fatal commit log replay exception ( i . e . can be skipped with - Dcassandra . commitlog . ignoreerrors = true ) 
 - public class MalformedCommitLogException extends IOException 
 - { 
 - public MalformedCommitLogException ( String message ) 
 - { 
 - super ( message ) ; 
 - } 
 - public MalformedCommitLogException ( String message , Throwable cause ) 
 - { 
 - super ( message , cause ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 07c6cc4 . . fbee7ce 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 47 , 8 + 47 , 6 @ @ import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 - import org . apache . cassandra . db . UnknownColumnFamilyException ; 
 - import org . apache . cassandra . db . commitlog . MalformedCommitLogException ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 index 762d2d0 . . f8cb8c8 100644 
 - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 @ @ - 38 , 15 + 38 , 12 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . CommitLogDescriptor ; 
 - import org . apache . cassandra . db . commitlog . CommitLogReplayer ; 
 import org . apache . cassandra . db . commitlog . CommitLogSegment ; 
 - import org . apache . cassandra . db . commitlog . MalformedCommitLogException ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . utils . PureJavaCrc32 ; 
 
 import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 
 @ @ - 71 , 32 + 68 , 34 @ @ public class CommitLogTest 
 @ Test 
 public void testRecoveryWithEmptyLog ( ) throws Exception 
 { 
 - testMalformed ( badLogFile ( new byte [ 0 ] ) ) ; 
 + CommitLog . instance . recover ( new File [ ] { tmpFile ( ) } ) ; 
 } 
 
 @ Test 
 public void testRecoveryWithShortLog ( ) throws Exception 
 { 
 / / force EOF while reading log 
 - testMalformed ( badLogFile ( 100 , 10 ) ) ; 
 + testRecoveryWithBadSizeArgument ( 100 , 10 ) ; 
 } 
 
 @ Test 
 public void testRecoveryWithShortSize ( ) throws Exception 
 { 
 - testMalformed ( new byte [ 2 ] ) ; 
 + testRecovery ( new byte [ 2 ] ) ; 
 } 
 
 @ Test 
 public void testRecoveryWithShortCheckSum ( ) throws Exception 
 { 
 - testMalformed ( new byte [ 6 ] ) ; 
 + testRecovery ( new byte [ 6 ] ) ; 
 } 
 
 @ Test 
 public void testRecoveryWithGarbageLog ( ) throws Exception 
 { 
 - testMalformed ( garbage ( 100 ) ) ; 
 + byte [ ] garbage = new byte [ 100 ] ; 
 + ( new java . util . Random ( ) ) . nextBytes ( garbage ) ; 
 + testRecovery ( garbage ) ; 
 } 
 
 @ Test 
 @ @ - 104 , 30 + 103 , 21 @ @ public class CommitLogTest 
 { 
 Checksum checksum = new CRC32 ( ) ; 
 checksum . update ( 100 ) ; 
 - testMalformed ( badLogFile ( 100 , checksum . getValue ( ) , new byte [ 100 ] ) ) ; 
 - testMalformed ( badLogFile ( 100 , checksum . getValue ( ) , garbage ( 100 ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testRecoveryWithBadSize ( ) throws Exception 
 - { 
 - Checksum checksum = new CRC32 ( ) ; 
 - checksum . update ( 100 ) ; 
 - testMalformed ( badLogFile ( 120 , checksum . getValue ( ) , garbage ( 100 ) ) ) ; 
 + testRecoveryWithBadSizeArgument ( 100 , 100 , ~ checksum . getValue ( ) ) ; 
 } 
 
 @ Test 
 public void testRecoveryWithZeroSegmentSizeArgument ( ) throws Exception 
 { 
 / / many different combinations of 4 bytes ( garbage ) will be read as zero by readInt ( ) 
 - testMalformed ( badLogFile ( 0 , - 1L , 10 ) ) ; / / zero size , but no EOF 
 + testRecoveryWithBadSizeArgument ( 0 , 10 ) ; / / zero size , but no EOF 
 } 
 
 @ Test 
 public void testRecoveryWithNegativeSizeArgument ( ) throws Exception 
 { 
 / / garbage from a partial / bad flush could be read as a negative size even if there is no EOF 
 - testMalformed ( badLogFile ( - 10 , 10 ) ) ; / / zero size , but no EOF 
 + testRecoveryWithBadSizeArgument ( - 10 , 10 ) ; / / negative size , but no EOF 
 } 
 
 @ Test 
 @ @ - 204 , 8 + 194 , 8 @ @ public class CommitLogTest 
 
 private static int getMaxRecordDataSize ( String keyspace , ByteBuffer key , String table , CellName column ) 
 { 
 - Mutation rm = new Mutation ( keyspace , key ) ; 
 - rm . add ( table , column , ByteBuffer . allocate ( 0 ) , 0 ) ; 
 + Mutation rm = new Mutation ( " Keyspace1 " , bytes ( " k " ) ) ; 
 + rm . add ( " Standard1 " , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( 0 ) , 0 ) ; 
 
 int max = ( DatabaseDescriptor . getCommitLogSegmentSize ( ) / 2 ) ; 
 max - = CommitLogSegment . ENTRY _ OVERHEAD _ SIZE ; / / log entry overhead 
 @ @ - 245 , 73 + 235 , 22 @ @ public class CommitLogTest 
 } 
 } 
 
 - / / construct log file with correct chunk checksum for the provided size / position 
 - protected File badLogFile ( int markerSize , int realSize ) throws Exception 
 - { 
 - return badLogFile ( markerSize , garbage ( realSize ) ) ; 
 - } 
 - 
 - protected File badLogFile ( int markerSize , byte [ ] data ) throws Exception 
 - { 
 - File logFile = tmpFile ( ) ; 
 - CommitLogDescriptor descriptor = CommitLogDescriptor . fromFileName ( logFile . getName ( ) ) ; 
 - PureJavaCrc32 crc = new PureJavaCrc32 ( ) ; 
 - crc . updateInt ( ( int ) ( descriptor . id & 0xFFFFFFFFL ) ) ; 
 - crc . updateInt ( ( int ) ( descriptor . id > > > 32 ) ) ; 
 - crc . updateInt ( CommitLogDescriptor . HEADER _ SIZE ) ; 
 - return badLogFile ( markerSize , crc . getCrc ( ) , data , logFile ) ; 
 - } 
 - 
 - protected byte [ ] garbage ( int size ) 
 - { 
 - byte [ ] garbage = new byte [ size ] ; 
 - ( new java . util . Random ( ) ) . nextBytes ( garbage ) ; 
 - return garbage ; 
 - } 
 - 
 - protected File badLogFile ( int markerSize , long checksum , int realSize ) throws Exception 
 - { 
 - return badLogFile ( markerSize , checksum , realSize , tmpFile ( ) ) ; 
 - } 
 - 
 - protected File badLogFile ( int markerSize , long checksum , int realSize , File logFile ) throws Exception 
 - { 
 - return badLogFile ( markerSize , checksum , new byte [ realSize ] , logFile ) ; 
 - } 
 - 
 - protected File badLogFile ( int markerSize , long checksum , byte [ ] chunk ) throws Exception 
 + protected void testRecoveryWithBadSizeArgument ( int size , int dataSize ) throws Exception 
 { 
 - return badLogFile ( markerSize , checksum , chunk , tmpFile ( ) ) ; 
 + Checksum checksum = new CRC32 ( ) ; 
 + checksum . update ( size ) ; 
 + testRecoveryWithBadSizeArgument ( size , dataSize , checksum . getValue ( ) ) ; 
 } 
 
 - protected File badLogFile ( int markerSize , long checksum , byte [ ] chunk , File logFile ) throws Exception 
 + protected void testRecoveryWithBadSizeArgument ( int size , int dataSize , long checksum ) throws Exception 
 { 
 ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; 
 DataOutputStream dout = new DataOutputStream ( out ) ; 
 - ByteBuffer buffer = ByteBuffer . allocate ( CommitLogDescriptor . HEADER _ SIZE ) ; 
 - CommitLogDescriptor . writeHeader ( buffer , CommitLogDescriptor . fromFileName ( logFile . getName ( ) ) ) ; 
 - out . write ( buffer . array ( ) ) ; 
 - dout . writeInt ( markerSize ) ; 
 + dout . writeInt ( size ) ; 
 dout . writeLong ( checksum ) ; 
 - dout . write ( chunk ) ; 
 + dout . write ( new byte [ dataSize ] ) ; 
 dout . close ( ) ; 
 - try ( OutputStream lout = new FileOutputStream ( logFile ) ) 
 - { 
 - lout . write ( out . toByteArray ( ) ) ; 
 - lout . close ( ) ; 
 - } 
 - return logFile ; 
 - } 
 - 
 - protected File badLogFile ( byte [ ] contents ) throws Exception 
 - { 
 - File logFile = tmpFile ( ) ; 
 - try ( OutputStream lout = new FileOutputStream ( logFile ) ) 
 - { 
 - lout . write ( contents ) ; 
 - lout . close ( ) ; 
 - } 
 - return logFile ; 
 + testRecovery ( out . toByteArray ( ) ) ; 
 } 
 
 protected File tmpFile ( ) throws IOException 
 @ @ - 322 , 29 + 261 , 17 @ @ public class CommitLogTest 
 return logFile ; 
 } 
 
 - private void testMalformed ( byte [ ] contents ) throws Exception 
 - { 
 - testMalformed ( badLogFile ( contents ) ) ; 
 - testMalformed ( badLogFile ( contents . length , contents ) ) ; 
 - } 
 - 
 - private void testMalformed ( File logFile ) throws Exception 
 + protected void testRecovery ( byte [ ] logData ) throws Exception 
 { 
 - CommitLogReplayer . setIgnoreErrors ( true ) ; 
 - CommitLog . instance . recover ( new File [ ] { logFile } ) ; 
 - CommitLogReplayer . setIgnoreErrors ( false ) ; 
 - try 
 - { 
 - CommitLog . instance . recover ( new File [ ] { logFile } ) ; 
 - Assert . assertFalse ( true ) ; 
 - } 
 - catch ( Throwable t ) 
 + File logFile = tmpFile ( ) ; 
 + try ( OutputStream lout = new FileOutputStream ( logFile ) ) 
 { 
 - if ( ! ( t instanceof MalformedCommitLogException ) ) 
 - throw t ; 
 + lout . write ( logData ) ; 
 + / / statics make it annoying to test things correctly 
 + CommitLog . instance . recover ( new File [ ] { logFile } ) ; / / CASSANDRA - 1119 / CASSANDRA - 1179 throw on failure * / 
 } 
 } 
 - 
 + 
 @ Test 
 public void testVersions ( ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
