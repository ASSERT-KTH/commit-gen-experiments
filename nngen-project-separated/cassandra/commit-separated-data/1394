BLEU SCORE: 0.09287528999566796

TEST MSG: Extracted commit log failure policy tests from CommitLogTest to CommitLogFailurePolicyTest
GENERATED MSG: Ensure commit log stop policy is enforced at startup

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java b / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java <nl> index 7dabd5f . . cca6503 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package org . apache . cassandra . db ; <nl> <nl> + import java . io . File ; <nl> + <nl> import org . junit . Assert ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> @ @ - 26 , 8 + 28 , 10 @ @ import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> + import org . apache . cassandra . db . commitlog . CommitLogSegmentManager ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . service . CassandraDaemon ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . KillerForTests ; <nl> @ @ - 45 , 6 + 49 , 10 @ @ public class CommitLogFailurePolicyTest <nl> @ Test <nl> public void testCommitFailurePolicy _ stop ( ) throws ConfigurationException <nl> { <nl> + CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> + daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy <nl> + StorageService . instance . registerDaemon ( daemon ) ; <nl> + <nl> / / Need storage service active so stop policy can shutdown gossip <nl> StorageService . instance . initServer ( ) ; <nl> Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; <nl> @ @ - 65 , 6 + 73 , 10 @ @ public class CommitLogFailurePolicyTest <nl> @ Test <nl> public void testCommitFailurePolicy _ die ( ) <nl> { <nl> + CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> + daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy <nl> + StorageService . instance . registerDaemon ( daemon ) ; <nl> + <nl> KillerForTests killerForTests = new KillerForTests ( ) ; <nl> JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> @ @ - 73 , 11 + 85 , 111 @ @ public class CommitLogFailurePolicyTest <nl> DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . die ) ; <nl> CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; <nl> Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> + Assert . assertFalse ( killerForTests . wasKilledQuietly ( ) ) ; / / only killed quietly on startup failure <nl> + } <nl> + finally <nl> + { <nl> + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> + JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testCommitFailurePolicy _ mustDieIfNotStartedUp ( ) <nl> + { <nl> + / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) <nl> + CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> + StorageService . instance . registerDaemon ( daemon ) ; <nl> + <nl> + KillerForTests killerForTests = new KillerForTests ( ) ; <nl> + JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> + try <nl> + { <nl> + / / even though policy is ignore , JVM must die because Daemon has not finished initializing <nl> + DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; <nl> + CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; <nl> + Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> + Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure <nl> + } <nl> + finally <nl> + { <nl> + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> + JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testCommitLogFailureBeforeInitialization _ mustKillJVM ( ) throws Exception <nl> + { <nl> + / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) <nl> + CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> + StorageService . instance . registerDaemon ( daemon ) ; <nl> + <nl> + / / let ' s make the commit log directory non - writable <nl> + File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; <nl> + commitLogDir . setWritable ( false ) ; <nl> + <nl> + KillerForTests killerForTests = new KillerForTests ( ) ; <nl> + JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> + try <nl> + { <nl> + DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; <nl> + <nl> + / / now let ' s create a commit log segment manager and wait for it to fail <nl> + new CommitLogSegmentManager ( CommitLog . instance ) ; <nl> + <nl> + / / busy wait since commitlogsegmentmanager spawns another thread <nl> + int retries = 0 ; <nl> + while ( ! killerForTests . wasKilled ( ) & & retries + + < 5 ) <nl> + Thread . sleep ( 10 ) ; <nl> + <nl> + / / since failure was before CassandraDaemon startup , the JVM must be killed <nl> + Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> + Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure <nl> + } <nl> + finally <nl> + { <nl> + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> + JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> + commitLogDir . setWritable ( true ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testCommitLogFailureAfterInitialization _ mustRespectFailurePolicy ( ) throws Exception <nl> + { <nl> + / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) <nl> + CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> + daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy <nl> + StorageService . instance . registerDaemon ( daemon ) ; <nl> + <nl> + / / let ' s make the commit log directory non - writable <nl> + File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; <nl> + commitLogDir . setWritable ( false ) ; <nl> + <nl> + KillerForTests killerForTests = new KillerForTests ( ) ; <nl> + JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> + try <nl> + { <nl> + DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; <nl> + <nl> + / / now let ' s create a commit log segment manager and wait for it to fail <nl> + new CommitLogSegmentManager ( CommitLog . instance ) ; <nl> + <nl> + / / wait commit log segment manager thread to execute <nl> + Thread . sleep ( 50 ) ; <nl> + <nl> + / / error policy is set to IGNORE , so JVM must not be killed if error ocurs after startup <nl> + Assert . assertFalse ( killerForTests . wasKilled ( ) ) ; <nl> } <nl> finally <nl> { <nl> DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> + commitLogDir . setWritable ( true ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> index 536f0cb . . 2764da4 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> @ @ - 319 , 153 + 319 , 6 @ @ public class CommitLogTest <nl> } <nl> <nl> @ Test <nl> - public void testCommitFailurePolicy _ stop ( ) throws ConfigurationException <nl> - { <nl> - CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> - daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy <nl> - StorageService . instance . registerDaemon ( daemon ) ; <nl> - <nl> - / / Need storage service active so stop policy can shutdown gossip <nl> - StorageService . instance . initServer ( ) ; <nl> - Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; <nl> - <nl> - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> - try <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . stop ) ; <nl> - CommitLog . handleCommitError ( " Test stop error " , new Throwable ( ) ) ; <nl> - Assert . assertFalse ( Gossiper . instance . isEnabled ( ) ) ; <nl> - } <nl> - finally <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testCommitFailurePolicy _ die ( ) <nl> - { <nl> - CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> - daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy <nl> - StorageService . instance . registerDaemon ( daemon ) ; <nl> - <nl> - KillerForTests killerForTests = new KillerForTests ( ) ; <nl> - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> - try <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . die ) ; <nl> - CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; <nl> - Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> - Assert . assertFalse ( killerForTests . wasKilledQuietly ( ) ) ; / / only killed quietly on startup failure <nl> - } <nl> - finally <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> - JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testCommitFailurePolicy _ mustDieIfNotStartedUp ( ) <nl> - { <nl> - / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) <nl> - CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> - StorageService . instance . registerDaemon ( daemon ) ; <nl> - <nl> - KillerForTests killerForTests = new KillerForTests ( ) ; <nl> - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> - try <nl> - { <nl> - / / even though policy is ignore , JVM must die because Daemon has not finished initializing <nl> - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; <nl> - CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; <nl> - Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> - Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure <nl> - } <nl> - finally <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> - JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testCommitLogFailureBeforeInitialization _ mustKillJVM ( ) throws Exception <nl> - { <nl> - / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) <nl> - CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> - StorageService . instance . registerDaemon ( daemon ) ; <nl> - <nl> - / / let ' s make the commit log directory non - writable <nl> - File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; <nl> - commitLogDir . setWritable ( false ) ; <nl> - <nl> - KillerForTests killerForTests = new KillerForTests ( ) ; <nl> - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> - try <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; <nl> - <nl> - / / now let ' s create a commit log segment manager and wait for it to fail <nl> - new CommitLogSegmentManager ( CommitLog . instance ) ; <nl> - <nl> - / / busy wait since commitlogsegmentmanager spawns another thread <nl> - int retries = 0 ; <nl> - while ( ! killerForTests . wasKilled ( ) & & retries + + < 5 ) <nl> - Thread . sleep ( 10 ) ; <nl> - <nl> - / / since failure was before CassandraDaemon startup , the JVM must be killed <nl> - Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> - Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure <nl> - } <nl> - finally <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> - JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> - commitLogDir . setWritable ( true ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testCommitLogFailureAfterInitialization _ mustRespectFailurePolicy ( ) throws Exception <nl> - { <nl> - / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) <nl> - CassandraDaemon daemon = new CassandraDaemon ( ) ; <nl> - daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy <nl> - StorageService . instance . registerDaemon ( daemon ) ; <nl> - <nl> - / / let ' s make the commit log directory non - writable <nl> - File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; <nl> - commitLogDir . setWritable ( false ) ; <nl> - <nl> - KillerForTests killerForTests = new KillerForTests ( ) ; <nl> - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; <nl> - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> - try <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; <nl> - <nl> - / / now let ' s create a commit log segment manager and wait for it to fail <nl> - new CommitLogSegmentManager ( CommitLog . instance ) ; <nl> - <nl> - / / wait commit log segment manager thread to execute <nl> - Thread . sleep ( 50 ) ; <nl> - <nl> - / / error policy is set to IGNORE , so JVM must not be killed if error ocurs after startup <nl> - Assert . assertFalse ( killerForTests . wasKilled ( ) ) ; <nl> - } <nl> - finally <nl> - { <nl> - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> - JVMStabilityInspector . replaceKiller ( originalKiller ) ; <nl> - commitLogDir . setWritable ( true ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> public void testTruncateWithoutSnapshot ( ) throws ExecutionException , InterruptedException , IOException <nl> { <nl> CommitLog . instance . resetUnsafe ( true ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java b / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java 
 index 7dabd5f . . cca6503 100644 
 - - - a / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CommitLogFailurePolicyTest . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package org . apache . cassandra . db ; 
 
 + import java . io . File ; 
 + 
 import org . junit . Assert ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 @ @ - 26 , 8 + 28 , 10 @ @ import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 + import org . apache . cassandra . db . commitlog . CommitLogSegmentManager ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . service . CassandraDaemon ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . KillerForTests ; 
 @ @ - 45 , 6 + 49 , 10 @ @ public class CommitLogFailurePolicyTest 
 @ Test 
 public void testCommitFailurePolicy _ stop ( ) throws ConfigurationException 
 { 
 + CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 + daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy 
 + StorageService . instance . registerDaemon ( daemon ) ; 
 + 
 / / Need storage service active so stop policy can shutdown gossip 
 StorageService . instance . initServer ( ) ; 
 Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; 
 @ @ - 65 , 6 + 73 , 10 @ @ public class CommitLogFailurePolicyTest 
 @ Test 
 public void testCommitFailurePolicy _ die ( ) 
 { 
 + CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 + daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy 
 + StorageService . instance . registerDaemon ( daemon ) ; 
 + 
 KillerForTests killerForTests = new KillerForTests ( ) ; 
 JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 @ @ - 73 , 11 + 85 , 111 @ @ public class CommitLogFailurePolicyTest 
 DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . die ) ; 
 CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; 
 Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; 
 + Assert . assertFalse ( killerForTests . wasKilledQuietly ( ) ) ; / / only killed quietly on startup failure 
 + } 
 + finally 
 + { 
 + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 + JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testCommitFailurePolicy _ mustDieIfNotStartedUp ( ) 
 + { 
 + / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) 
 + CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 + StorageService . instance . registerDaemon ( daemon ) ; 
 + 
 + KillerForTests killerForTests = new KillerForTests ( ) ; 
 + JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 + try 
 + { 
 + / / even though policy is ignore , JVM must die because Daemon has not finished initializing 
 + DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; 
 + CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; 
 + Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; 
 + Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure 
 + } 
 + finally 
 + { 
 + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 + JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testCommitLogFailureBeforeInitialization _ mustKillJVM ( ) throws Exception 
 + { 
 + / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) 
 + CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 + StorageService . instance . registerDaemon ( daemon ) ; 
 + 
 + / / let ' s make the commit log directory non - writable 
 + File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; 
 + commitLogDir . setWritable ( false ) ; 
 + 
 + KillerForTests killerForTests = new KillerForTests ( ) ; 
 + JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 + try 
 + { 
 + DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; 
 + 
 + / / now let ' s create a commit log segment manager and wait for it to fail 
 + new CommitLogSegmentManager ( CommitLog . instance ) ; 
 + 
 + / / busy wait since commitlogsegmentmanager spawns another thread 
 + int retries = 0 ; 
 + while ( ! killerForTests . wasKilled ( ) & & retries + + < 5 ) 
 + Thread . sleep ( 10 ) ; 
 + 
 + / / since failure was before CassandraDaemon startup , the JVM must be killed 
 + Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; 
 + Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure 
 + } 
 + finally 
 + { 
 + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 + JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 + commitLogDir . setWritable ( true ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testCommitLogFailureAfterInitialization _ mustRespectFailurePolicy ( ) throws Exception 
 + { 
 + / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) 
 + CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 + daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy 
 + StorageService . instance . registerDaemon ( daemon ) ; 
 + 
 + / / let ' s make the commit log directory non - writable 
 + File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; 
 + commitLogDir . setWritable ( false ) ; 
 + 
 + KillerForTests killerForTests = new KillerForTests ( ) ; 
 + JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 + try 
 + { 
 + DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; 
 + 
 + / / now let ' s create a commit log segment manager and wait for it to fail 
 + new CommitLogSegmentManager ( CommitLog . instance ) ; 
 + 
 + / / wait commit log segment manager thread to execute 
 + Thread . sleep ( 50 ) ; 
 + 
 + / / error policy is set to IGNORE , so JVM must not be killed if error ocurs after startup 
 + Assert . assertFalse ( killerForTests . wasKilled ( ) ) ; 
 } 
 finally 
 { 
 DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 + commitLogDir . setWritable ( true ) ; 
 } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 index 536f0cb . . 2764da4 100644 
 - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 @ @ - 319 , 153 + 319 , 6 @ @ public class CommitLogTest 
 } 
 
 @ Test 
 - public void testCommitFailurePolicy _ stop ( ) throws ConfigurationException 
 - { 
 - CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 - daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy 
 - StorageService . instance . registerDaemon ( daemon ) ; 
 - 
 - / / Need storage service active so stop policy can shutdown gossip 
 - StorageService . instance . initServer ( ) ; 
 - Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; 
 - 
 - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 - try 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . stop ) ; 
 - CommitLog . handleCommitError ( " Test stop error " , new Throwable ( ) ) ; 
 - Assert . assertFalse ( Gossiper . instance . isEnabled ( ) ) ; 
 - } 
 - finally 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testCommitFailurePolicy _ die ( ) 
 - { 
 - CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 - daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy 
 - StorageService . instance . registerDaemon ( daemon ) ; 
 - 
 - KillerForTests killerForTests = new KillerForTests ( ) ; 
 - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 - try 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . die ) ; 
 - CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; 
 - Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; 
 - Assert . assertFalse ( killerForTests . wasKilledQuietly ( ) ) ; / / only killed quietly on startup failure 
 - } 
 - finally 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 - JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testCommitFailurePolicy _ mustDieIfNotStartedUp ( ) 
 - { 
 - / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) 
 - CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 - StorageService . instance . registerDaemon ( daemon ) ; 
 - 
 - KillerForTests killerForTests = new KillerForTests ( ) ; 
 - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 - try 
 - { 
 - / / even though policy is ignore , JVM must die because Daemon has not finished initializing 
 - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; 
 - CommitLog . handleCommitError ( " Testing die policy " , new Throwable ( ) ) ; 
 - Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; 
 - Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure 
 - } 
 - finally 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 - JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testCommitLogFailureBeforeInitialization _ mustKillJVM ( ) throws Exception 
 - { 
 - / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) 
 - CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 - StorageService . instance . registerDaemon ( daemon ) ; 
 - 
 - / / let ' s make the commit log directory non - writable 
 - File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; 
 - commitLogDir . setWritable ( false ) ; 
 - 
 - KillerForTests killerForTests = new KillerForTests ( ) ; 
 - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 - try 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; 
 - 
 - / / now let ' s create a commit log segment manager and wait for it to fail 
 - new CommitLogSegmentManager ( CommitLog . instance ) ; 
 - 
 - / / busy wait since commitlogsegmentmanager spawns another thread 
 - int retries = 0 ; 
 - while ( ! killerForTests . wasKilled ( ) & & retries + + < 5 ) 
 - Thread . sleep ( 10 ) ; 
 - 
 - / / since failure was before CassandraDaemon startup , the JVM must be killed 
 - Assert . assertTrue ( killerForTests . wasKilled ( ) ) ; 
 - Assert . assertTrue ( killerForTests . wasKilledQuietly ( ) ) ; / / killed quietly due to startup failure 
 - } 
 - finally 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 - JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 - commitLogDir . setWritable ( true ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testCommitLogFailureAfterInitialization _ mustRespectFailurePolicy ( ) throws Exception 
 - { 
 - / / startup was not completed successfuly ( since method completeSetup ( ) was not called ) 
 - CassandraDaemon daemon = new CassandraDaemon ( ) ; 
 - daemon . completeSetup ( ) ; / / startup must be completed , otherwise commit log failure must kill JVM regardless of failure policy 
 - StorageService . instance . registerDaemon ( daemon ) ; 
 - 
 - / / let ' s make the commit log directory non - writable 
 - File commitLogDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; 
 - commitLogDir . setWritable ( false ) ; 
 - 
 - KillerForTests killerForTests = new KillerForTests ( ) ; 
 - JVMStabilityInspector . Killer originalKiller = JVMStabilityInspector . replaceKiller ( killerForTests ) ; 
 - Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 - try 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . ignore ) ; 
 - 
 - / / now let ' s create a commit log segment manager and wait for it to fail 
 - new CommitLogSegmentManager ( CommitLog . instance ) ; 
 - 
 - / / wait commit log segment manager thread to execute 
 - Thread . sleep ( 50 ) ; 
 - 
 - / / error policy is set to IGNORE , so JVM must not be killed if error ocurs after startup 
 - Assert . assertFalse ( killerForTests . wasKilled ( ) ) ; 
 - } 
 - finally 
 - { 
 - DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 - JVMStabilityInspector . replaceKiller ( originalKiller ) ; 
 - commitLogDir . setWritable ( true ) ; 
 - } 
 - } 
 - 
 - @ Test 
 public void testTruncateWithoutSnapshot ( ) throws ExecutionException , InterruptedException , IOException 
 { 
 CommitLog . instance . resetUnsafe ( true ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
