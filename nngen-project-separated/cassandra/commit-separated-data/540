BLEU SCORE: 0.015542791893293221

TEST MSG: don ' t declare throwing exceptions that aren ' t
GENERATED MSG: CompactionManager is now responsible for checking for new candidates post - task execution

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 3ad7b38 . . baa82bc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 364 , 7 + 364 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> <nl> @ Override <nl> - public void execute ( LifecycleTransaction input ) throws IOException <nl> + public void execute ( LifecycleTransaction input ) <nl> { <nl> scrubOne ( cfs , input , skipCorrupted , checkData ) ; <nl> } <nl> @ @ - 953 , 7 + 953 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> <nl> - private void scrubOne ( ColumnFamilyStore cfs , LifecycleTransaction modifier , boolean skipCorrupted , boolean checkData ) throws IOException <nl> + private void scrubOne ( ColumnFamilyStore cfs , LifecycleTransaction modifier , boolean skipCorrupted , boolean checkData ) <nl> { <nl> CompactionInfo . Holder scrubInfo = null ; <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 98f367c . . 92cb4c6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 28 , 6 + 28 , 7 @ @ <nl> * avoid locking on update when no indexes are involved ( CASSANDRA - 3386 ) <nl> * fix assertionError during repair with ordered partitioners ( CASSANDRA - 3369 ) <nl> * correctly serialize key _ validation _ class for avro ( CASSANDRA - 3391 ) <nl> + * don ' t expire counter tombstone after streaming ( CASSANDRA - 3394 ) <nl> <nl> <nl> 0 . 8 . 7 <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 6a181ae . . 244d59a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 491 , 7 + 491 , 7 @ @ public class SSTableWriter extends SSTable <nl> long rows = 0L ; <nl> DecoratedKey key ; <nl> <nl> - CompactionController controller = new CompactionController ( cfs , Collections . < SSTableReader > emptyList ( ) , Integer . MAX _ VALUE , true ) ; <nl> + CompactionController controller = new CompactionController ( cfs , Collections . < SSTableReader > emptyList ( ) , Integer . MIN _ VALUE , true ) ; <nl> while ( ! dfile . isEOF ( ) ) <nl> { <nl> / / read key <nl> @ @ - 502 , 6 + 502 , 9 @ @ public class SSTableWriter extends SSTable <nl> SSTableIdentityIterator iter = new SSTableIdentityIterator ( cfs . metadata , dfile , key , dfile . getFilePointer ( ) , dataSize , true ) ; <nl> <nl> AbstractCompactedRow row = controller . getCompactedRow ( iter ) ; <nl> + / / We don ' t remove any tombstone , so we can ' t have an empty row here <nl> + assert ! row . isEmpty ( ) ; <nl> + <nl> updateCache ( key , dataSize , row ) ; <nl> <nl> rowSizes . add ( dataSize ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 3ad7b38 . . baa82bc 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 364 , 7 + 364 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 
 @ Override 
 - public void execute ( LifecycleTransaction input ) throws IOException 
 + public void execute ( LifecycleTransaction input ) 
 { 
 scrubOne ( cfs , input , skipCorrupted , checkData ) ; 
 } 
 @ @ - 953 , 7 + 953 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 
 - private void scrubOne ( ColumnFamilyStore cfs , LifecycleTransaction modifier , boolean skipCorrupted , boolean checkData ) throws IOException 
 + private void scrubOne ( ColumnFamilyStore cfs , LifecycleTransaction modifier , boolean skipCorrupted , boolean checkData ) 
 { 
 CompactionInfo . Holder scrubInfo = null ; 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 98f367c . . 92cb4c6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 28 , 6 + 28 , 7 @ @ 
 * avoid locking on update when no indexes are involved ( CASSANDRA - 3386 ) 
 * fix assertionError during repair with ordered partitioners ( CASSANDRA - 3369 ) 
 * correctly serialize key _ validation _ class for avro ( CASSANDRA - 3391 ) 
 + * don ' t expire counter tombstone after streaming ( CASSANDRA - 3394 ) 
 
 
 0 . 8 . 7 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 6a181ae . . 244d59a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 491 , 7 + 491 , 7 @ @ public class SSTableWriter extends SSTable 
 long rows = 0L ; 
 DecoratedKey key ; 
 
 - CompactionController controller = new CompactionController ( cfs , Collections . < SSTableReader > emptyList ( ) , Integer . MAX _ VALUE , true ) ; 
 + CompactionController controller = new CompactionController ( cfs , Collections . < SSTableReader > emptyList ( ) , Integer . MIN _ VALUE , true ) ; 
 while ( ! dfile . isEOF ( ) ) 
 { 
 / / read key 
 @ @ - 502 , 6 + 502 , 9 @ @ public class SSTableWriter extends SSTable 
 SSTableIdentityIterator iter = new SSTableIdentityIterator ( cfs . metadata , dfile , key , dfile . getFilePointer ( ) , dataSize , true ) ; 
 
 AbstractCompactedRow row = controller . getCompactedRow ( iter ) ; 
 + / / We don ' t remove any tombstone , so we can ' t have an empty row here 
 + assert ! row . isEmpty ( ) ; 
 + 
 updateCache ( key , dataSize , row ) ; 
 
 rowSizes . add ( dataSize ) ;
