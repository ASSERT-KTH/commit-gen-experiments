BLEU SCORE: 0.03283637368030199

TEST MSG: Clean up I * Sink testing hooks
GENERATED MSG: Add IRequestSink interface

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / IMessageSink . java b / src / java / org / apache / cassandra / net / IMessageSink . java <nl> new file mode 100644 <nl> index 0000000 . . 5150901 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / net / IMessageSink . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + import java . net . InetAddress ; <nl> + <nl> + public interface IMessageSink <nl> + { <nl> + / * * <nl> + * Allow or drop an outgoing message <nl> + * <nl> + * @ return true if the message is allowed , false if it should be dropped <nl> + * / <nl> + boolean allowOutgoingMessage ( MessageOut message , int id , InetAddress to ) ; <nl> + <nl> + / * * <nl> + * Allow or drop an incoming message <nl> + * <nl> + * @ return true if the message is allowed , false if it should be dropped <nl> + * / <nl> + boolean allowIncomingMessage ( MessageIn message , int id ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 1f952a3 . . fb699e4 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . nio . channels . ClosedChannelException ; <nl> import java . nio . channels . ServerSocketChannel ; <nl> import java . util . * ; <nl> import java . util . concurrent . ConcurrentMap ; <nl> + import java . util . concurrent . CopyOnWriteArraySet ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> @ @ - 60 , 7 + 61 , 6 @ @ import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . ILatencySubscriber ; <nl> import org . apache . cassandra . metrics . ConnectionMetrics ; <nl> import org . apache . cassandra . metrics . DroppedMessageMetrics ; <nl> - import org . apache . cassandra . sink . SinkManager ; <nl> import org . apache . cassandra . repair . messages . RepairMessage ; <nl> import org . apache . cassandra . security . SSLFactory ; <nl> import org . apache . cassandra . service . * ; <nl> @ @ - 308 , 10 + 308 , 24 @ @ public final class MessagingService implements MessagingServiceMBean <nl> / / protocol versions of the other nodes in the cluster <nl> private final ConcurrentMap < InetAddress , Integer > versions = new NonBlockingHashMap < InetAddress , Integer > ( ) ; <nl> <nl> + / / message sinks are a testing hook <nl> + private final Set < IMessageSink > messageSinks = new CopyOnWriteArraySet < > ( ) ; <nl> + <nl> + public void addMessageSink ( IMessageSink sink ) <nl> + { <nl> + messageSinks . add ( sink ) ; <nl> + } <nl> + <nl> + public void clearMessageSinks ( ) <nl> + { <nl> + messageSinks . clear ( ) ; <nl> + } <nl> + <nl> private static class MSHandle <nl> { <nl> public static final MessagingService instance = new MessagingService ( ) ; <nl> } <nl> + <nl> public static MessagingService instance ( ) <nl> { <nl> return MSHandle . instance ; <nl> @ @ - 672 , 17 + 686 , 15 @ @ public final class MessagingService implements MessagingServiceMBean <nl> logger . trace ( " Message - to - self { } going over MessagingService " , message ) ; <nl> <nl> / / message sinks are a testing hook <nl> - MessageOut processedMessage = SinkManager . processOutboundMessage ( message , id , to ) ; <nl> - if ( processedMessage = = null ) <nl> - { <nl> - return ; <nl> - } <nl> + for ( IMessageSink ms : messageSinks ) <nl> + if ( ! ms . allowOutgoingMessage ( message , id , to ) ) <nl> + return ; <nl> <nl> / / get pooled connection ( really , connection queue ) <nl> - OutboundTcpConnection connection = getConnection ( to , processedMessage ) ; <nl> + OutboundTcpConnection connection = getConnection ( to , message ) ; <nl> <nl> / / write it <nl> - connection . enqueue ( processedMessage , id ) ; <nl> + connection . enqueue ( message , id ) ; <nl> } <nl> <nl> public < T > AsyncOneResponse < T > sendRR ( MessageOut message , InetAddress to ) <nl> @ @ - 732 , 13 + 744 , 10 @ @ public final class MessagingService implements MessagingServiceMBean <nl> if ( state ! = null ) <nl> state . trace ( " Message received from { } " , message . from ) ; <nl> <nl> - Verb verb = message . verb ; <nl> - message = SinkManager . processInboundMessage ( message , id ) ; <nl> - if ( message = = null ) <nl> - { <nl> - incrementRejectedMessages ( verb ) ; <nl> - return ; <nl> - } <nl> + / / message sinks are a testing hook <nl> + for ( IMessageSink ms : messageSinks ) <nl> + if ( ! ms . allowIncomingMessage ( message , id ) ) <nl> + return ; <nl> <nl> Runnable runnable = new MessageDeliveryTask ( message , id , timestamp ) ; <nl> TracingAwareExecutorService stage = StageManager . getStage ( message . getMessageType ( ) ) ; <nl> @ @ - 855 , 27 + 864 , 12 @ @ public final class MessagingService implements MessagingServiceMBean <nl> return versions . containsKey ( endpoint ) ; <nl> } <nl> <nl> - <nl> public void incrementDroppedMessages ( Verb verb ) <nl> { <nl> assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; <nl> droppedMessages . get ( verb ) . dropped . mark ( ) ; <nl> } <nl> <nl> - / * * <nl> - * Same as incrementDroppedMessages ( ) , but allows non - droppable verbs . Called for IMessageSink - caused message drops . <nl> - * / <nl> - private void incrementRejectedMessages ( Verb verb ) <nl> - { <nl> - DroppedMessageMetrics metrics = droppedMessages . get ( verb ) ; <nl> - if ( metrics = = null ) <nl> - { <nl> - metrics = new DroppedMessageMetrics ( verb ) ; <nl> - droppedMessages . put ( verb , metrics ) ; <nl> - } <nl> - metrics . dropped . mark ( ) ; <nl> - } <nl> - <nl> private void logDroppedMessages ( ) <nl> { <nl> boolean logTpstats = false ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index d667b1e . . 45c4c4d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 60 , 7 + 60 , 6 @ @ import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . metrics . * ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . service . paxos . * ; <nl> - import org . apache . cassandra . sink . SinkManager ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . triggers . TriggerExecutor ; <nl> import org . apache . cassandra . utils . * ; <nl> @ @ - 1054 , 19 + 1053 , 15 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> public void runMayThrow ( ) <nl> { <nl> - IMutation processed = SinkManager . processWriteRequest ( mutation ) ; <nl> - if ( processed ! = null ) <nl> + try <nl> { <nl> - try <nl> - { <nl> - ( ( Mutation ) processed ) . apply ( ) ; <nl> - responseHandler . response ( null ) ; <nl> - } <nl> - catch ( Exception ex ) <nl> - { <nl> - logger . error ( " Failed to apply mutation locally : { } " , ex . getMessage ( ) ) ; <nl> - responseHandler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> - } <nl> + mutation . apply ( ) ; <nl> + responseHandler . response ( null ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + logger . error ( " Failed to apply mutation locally : { } " , ex . getMessage ( ) ) ; <nl> + responseHandler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> } <nl> } <nl> } ) ; <nl> @ @ - 1177 , 18 + 1172 , 13 @ @ public class StorageProxy implements StorageProxyMBean <nl> @ Override <nl> public void runMayThrow ( ) throws OverloadedException , WriteTimeoutException <nl> { <nl> - IMutation processed = SinkManager . processWriteRequest ( mutation ) ; <nl> - if ( processed = = null ) <nl> - return ; <nl> - <nl> - assert processed instanceof CounterMutation ; <nl> - CounterMutation cm = ( CounterMutation ) processed ; <nl> + assert mutation instanceof CounterMutation ; <nl> <nl> - Mutation result = cm . apply ( ) ; <nl> + Mutation result = ( ( CounterMutation ) mutation ) . apply ( ) ; <nl> responseHandler . response ( null ) ; <nl> <nl> Set < InetAddress > remotes = Sets . difference ( ImmutableSet . copyOf ( targets ) , <nl> - ImmutableSet . of ( FBUtilities . getBroadcastAddress ( ) ) ) ; <nl> + ImmutableSet . of ( FBUtilities . getBroadcastAddress ( ) ) ) ; <nl> if ( ! remotes . isEmpty ( ) ) <nl> sendToHintedEndpoints ( result , remotes , responseHandler , localDataCenter ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / sink / IMessageSink . java b / src / java / org / apache / cassandra / sink / IMessageSink . java <nl> deleted file mode 100644 <nl> index 996e7ff . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / sink / IMessageSink . java <nl> + + + / dev / null <nl> @ @ - 1 , 42 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . sink ; <nl> - <nl> - import java . net . InetAddress ; <nl> - <nl> - import org . apache . cassandra . net . MessageIn ; <nl> - import org . apache . cassandra . net . MessageOut ; <nl> - <nl> - public interface IMessageSink <nl> - { <nl> - / * * <nl> - * Transform or drop an outgoing message <nl> - * <nl> - * @ return null if the message is dropped , or the transformed message to send , which may be just <nl> - * the original message <nl> - * / <nl> - MessageOut handleMessage ( MessageOut message , int id , InetAddress to ) ; <nl> - <nl> - / * * <nl> - * Transform or drop an incoming message <nl> - * <nl> - * @ return null if the message is dropped , or the transformed message to receive , which may be just <nl> - * the original message <nl> - * / <nl> - MessageIn handleMessage ( MessageIn message , int id , InetAddress to ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / sink / IRequestSink . java b / src / java / org / apache / cassandra / sink / IRequestSink . java <nl> deleted file mode 100644 <nl> index 2873e46 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / sink / IRequestSink . java <nl> + + + / dev / null <nl> @ @ - 1 , 32 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . sink ; <nl> - <nl> - import org . apache . cassandra . db . IMutation ; <nl> - <nl> - public interface IRequestSink <nl> - { <nl> - / * * <nl> - * Transform or drop a write request ( represented by a Mutation ) . <nl> - * <nl> - * @ param mutation the Mutation to be applied locally . <nl> - * @ return null if the mutation is to be dropped , or the transformed mutation to apply , which may be just <nl> - * the original mutation . <nl> - * / <nl> - IMutation handleWriteRequest ( IMutation mutation ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / sink / SinkManager . java b / src / java / org / apache / cassandra / sink / SinkManager . java <nl> deleted file mode 100644 <nl> index 303c107 . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / sink / SinkManager . java <nl> + + + / dev / null <nl> @ @ - 1 , 104 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . sink ; <nl> - <nl> - import java . net . InetAddress ; <nl> - import java . util . Set ; <nl> - import java . util . concurrent . CopyOnWriteArraySet ; <nl> - <nl> - import org . apache . cassandra . db . IMutation ; <nl> - import org . apache . cassandra . net . MessageIn ; <nl> - import org . apache . cassandra . net . MessageOut ; <nl> - <nl> - / * * <nl> - * a class used only for testing to avoid sending / receiving data from a junit test . <nl> - * needs to be in the source tree as MessagingService calls it directly . <nl> - * / <nl> - public class SinkManager <nl> - { <nl> - private static final Set < IMessageSink > messageSinks = new CopyOnWriteArraySet < > ( ) ; <nl> - private static final Set < IRequestSink > requestSinks = new CopyOnWriteArraySet < > ( ) ; <nl> - <nl> - public static void add ( IMessageSink ms ) <nl> - { <nl> - messageSinks . add ( ms ) ; <nl> - } <nl> - <nl> - public static void add ( IRequestSink rs ) <nl> - { <nl> - requestSinks . add ( rs ) ; <nl> - } <nl> - <nl> - public static void remove ( IMessageSink ms ) <nl> - { <nl> - messageSinks . remove ( ms ) ; <nl> - } <nl> - <nl> - public static void remove ( IRequestSink rs ) <nl> - { <nl> - requestSinks . remove ( rs ) ; <nl> - } <nl> - <nl> - public static void clear ( ) <nl> - { <nl> - messageSinks . clear ( ) ; <nl> - requestSinks . clear ( ) ; <nl> - } <nl> - <nl> - public static MessageOut processOutboundMessage ( MessageOut message , int id , InetAddress to ) <nl> - { <nl> - if ( messageSinks . isEmpty ( ) ) <nl> - return message ; <nl> - <nl> - for ( IMessageSink ms : messageSinks ) <nl> - { <nl> - message = ms . handleMessage ( message , id , to ) ; <nl> - if ( message = = null ) <nl> - return null ; <nl> - } <nl> - return message ; <nl> - } <nl> - <nl> - public static MessageIn processInboundMessage ( MessageIn message , int id ) <nl> - { <nl> - if ( messageSinks . isEmpty ( ) ) <nl> - return message ; <nl> - <nl> - for ( IMessageSink ms : messageSinks ) <nl> - { <nl> - message = ms . handleMessage ( message , id , null ) ; <nl> - if ( message = = null ) <nl> - return null ; <nl> - } <nl> - return message ; <nl> - } <nl> - <nl> - public static IMutation processWriteRequest ( IMutation mutation ) <nl> - { <nl> - if ( requestSinks . isEmpty ( ) ) <nl> - return mutation ; <nl> - <nl> - for ( IRequestSink rs : requestSinks ) <nl> - { <nl> - mutation = rs . handleWriteRequest ( mutation ) ; <nl> - if ( mutation = = null ) <nl> - return null ; <nl> - } <nl> - return mutation ; <nl> - } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / repair / ValidatorTest . java b / test / unit / org / apache / cassandra / repair / ValidatorTest . java <nl> index 615167c . . a9f18f5 100644 <nl> - - - a / test / unit / org / apache / cassandra / repair / ValidatorTest . java <nl> + + + b / test / unit / org / apache / cassandra / repair / ValidatorTest . java <nl> @ @ - 43 , 8 + 43 , 7 @ @ import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . sink . IMessageSink ; <nl> - import org . apache . cassandra . sink . SinkManager ; <nl> + import org . apache . cassandra . net . IMessageSink ; <nl> import org . apache . cassandra . repair . messages . RepairMessage ; <nl> import org . apache . cassandra . repair . messages . ValidationComplete ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 73 , 7 + 72 , 7 @ @ public class ValidatorTest <nl> @ After <nl> public void tearDown ( ) <nl> { <nl> - SinkManager . clear ( ) ; <nl> + MessagingService . instance ( ) . clearMessageSinks ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 83 , 10 + 82 , 10 @ @ public class ValidatorTest <nl> final RepairJobDesc desc = new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , keyspace , columnFamily , range ) ; <nl> <nl> final SimpleCondition lock = new SimpleCondition ( ) ; <nl> - SinkManager . add ( new IMessageSink ( ) <nl> + MessagingService . instance ( ) . addMessageSink ( new IMessageSink ( ) <nl> { <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public MessageOut handleMessage ( MessageOut message , int id , InetAddress to ) <nl> + public boolean allowOutgoingMessage ( MessageOut message , int id , InetAddress to ) <nl> { <nl> try <nl> { <nl> @ @ - 95 , 20 + 94 , 20 @ @ public class ValidatorTest <nl> RepairMessage m = ( RepairMessage ) message . payload ; <nl> assertEquals ( RepairMessage . Type . VALIDATION _ COMPLETE , m . messageType ) ; <nl> assertEquals ( desc , m . desc ) ; <nl> - assertTrue ( ( ( ValidationComplete ) m ) . success ) ; <nl> - assertNotNull ( ( ( ValidationComplete ) m ) . tree ) ; <nl> + assertTrue ( ( ( ValidationComplete ) m ) . success ) ; <nl> + assertNotNull ( ( ( ValidationComplete ) m ) . tree ) ; <nl> } <nl> } <nl> finally <nl> { <nl> lock . signalAll ( ) ; <nl> } <nl> - return null ; <nl> + return false ; <nl> } <nl> <nl> - public MessageIn handleMessage ( MessageIn message , int id , InetAddress to ) <nl> + public boolean allowIncomingMessage ( MessageIn message , int id ) <nl> { <nl> - return null ; <nl> + return false ; <nl> } <nl> } ) ; <nl> <nl> @ @ - 165 , 10 + 164 , 10 @ @ public class ValidatorTest <nl> final RepairJobDesc desc = new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , keyspace , columnFamily , range ) ; <nl> <nl> final SimpleCondition lock = new SimpleCondition ( ) ; <nl> - SinkManager . add ( new IMessageSink ( ) <nl> + MessagingService . instance ( ) . addMessageSink ( new IMessageSink ( ) <nl> { <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public MessageOut handleMessage ( MessageOut message , int id , InetAddress to ) <nl> + public boolean allowOutgoingMessage ( MessageOut message , int id , InetAddress to ) <nl> { <nl> try <nl> { <nl> @ @ - 178 , 19 + 177 , 19 @ @ public class ValidatorTest <nl> assertEquals ( RepairMessage . Type . VALIDATION _ COMPLETE , m . messageType ) ; <nl> assertEquals ( desc , m . desc ) ; <nl> assertFalse ( ( ( ValidationComplete ) m ) . success ) ; <nl> - assertNull ( ( ( ValidationComplete ) m ) . tree ) ; <nl> + assertNull ( ( ( ValidationComplete ) m ) . tree ) ; <nl> } <nl> } <nl> finally <nl> { <nl> lock . signalAll ( ) ; <nl> } <nl> - return null ; <nl> + return false ; <nl> } <nl> <nl> - public MessageIn handleMessage ( MessageIn message , int id , InetAddress to ) <nl> + public boolean allowIncomingMessage ( MessageIn message , int id ) <nl> { <nl> - return null ; <nl> + return false ; <nl> } <nl> } ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / service / RemoveTest . java b / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> index e5e4620 . . 6d7cac8 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> @ @ - 39 , 7 + 39 , 6 @ @ import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> - import org . apache . cassandra . sink . SinkManager ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 90 , 7 + 89 , 7 @ @ public class RemoveTest <nl> @ After <nl> public void tearDown ( ) <nl> { <nl> - SinkManager . clear ( ) ; <nl> + MessagingService . instance ( ) . clearMessageSinks ( ) ; <nl> MessagingService . instance ( ) . clearCallbacksUnsafe ( ) ; <nl> MessagingService . instance ( ) . shutdown ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1052901 . . 7e6ba95 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * Fix modifying column _ metadata from thrift ( CASSANDRA - 6182 ) <nl> * cqlsh : fix LIST USERS output ( CASSANDRA - 6242 ) <nl> * Add IRequestSink interface ( CASSANDRA - 6248 ) <nl> + * Update memtable size while flushing ( CASSANDRA - 6249 ) <nl> <nl> <nl> 2 . 0 . 2 <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 4031ebc . . 7b5642a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 319 , 6 + 319 , 14 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry <nl> return ObjectSizes . measureDeep ( this ) ; <nl> } <nl> <nl> + public long dataSize ( ) <nl> + { <nl> + long size = 0 ; <nl> + for ( Column column : this ) <nl> + size + = column . dataSize ( ) ; <nl> + return size ; <nl> + } <nl> + <nl> public long maxTimestamp ( ) <nl> { <nl> long maxTimestamp = deletionInfo ( ) . maxTimestamp ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 597ca53 . . 4346224 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 884 , 11 + 884 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return removeDeletedCF ( cf , gcBefore ) ; <nl> } <nl> <nl> - private static void removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore , SecondaryIndexManager . Updater indexer ) <nl> + private static long removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore , SecondaryIndexManager . Updater indexer ) <nl> { <nl> Iterator < Column > iter = cf . iterator ( ) ; <nl> DeletionInfo . InOrderTester tester = cf . inOrderDeletionTester ( ) ; <nl> boolean hasDroppedColumns = ! cf . metadata . getDroppedColumns ( ) . isEmpty ( ) ; <nl> + long removedBytes = 0 ; <nl> while ( iter . hasNext ( ) ) <nl> { <nl> Column c = iter . next ( ) ; <nl> @ @ - 900 , 13 + 901 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> iter . remove ( ) ; <nl> indexer . remove ( c ) ; <nl> + removedBytes + = c . dataSize ( ) ; <nl> } <nl> } <nl> + return removedBytes ; <nl> } <nl> <nl> - public static void removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore ) <nl> + public static long removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore ) <nl> { <nl> - removeDeletedColumnsOnly ( cf , gcBefore , SecondaryIndexManager . nullUpdater ) ; <nl> + return removeDeletedColumnsOnly ( cf , gcBefore , SecondaryIndexManager . nullUpdater ) ; <nl> } <nl> <nl> / / returns true if <nl> @ @ - 1094 , 6 + 1097 , 17 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return getMemtableDataSize ( ) + indexManager . getTotalLiveSize ( ) ; <nl> } <nl> <nl> + / * * <nl> + * @ return the live size of all the memtables ( the current active one and pending flush ) . <nl> + * / <nl> + public long getAllMemtablesLiveSize ( ) <nl> + { <nl> + long size = 0 ; <nl> + for ( Memtable mt : getDataTracker ( ) . getAllMemtables ( ) ) <nl> + size + = mt . getLiveSize ( ) ; <nl> + return size ; <nl> + } <nl> + <nl> public int getMemtableSwitchCount ( ) <nl> { <nl> return ( int ) metric . memtableSwitchCount . count ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java <nl> index 365d607 . . 1c25f44 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DataTracker . java <nl> + + + b / src / java / org / apache / cassandra / db / DataTracker . java <nl> @ @ - 62 , 6 + 62 , 15 @ @ public class DataTracker <nl> return view . get ( ) . memtablesPendingFlush ; <nl> } <nl> <nl> + / * * <nl> + * @ return the active memtable and all the memtables that are pending flush . <nl> + * / <nl> + public Iterable < Memtable > getAllMemtables ( ) <nl> + { <nl> + View snapshot = view . get ( ) ; <nl> + return Iterables . concat ( snapshot . memtablesPendingFlush , Collections . singleton ( snapshot . memtable ) ) ; <nl> + } <nl> + <nl> public Set < SSTableReader > getSSTables ( ) <nl> { <nl> return view . get ( ) . sstables ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 9a8f810 . . 12d36bf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 233 , 6 + 233 , 7 @ @ public class Memtable <nl> private Iterator < Map . Entry < RowPosition , AtomicSortedColumns > > iter = stopAt . isMinimum ( cfs . partitioner ) <nl> ? rows . tailMap ( startWith ) . entrySet ( ) . iterator ( ) <nl> : rows . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; <nl> + private Map . Entry < RowPosition , AtomicSortedColumns > currentEntry ; <nl> <nl> public boolean hasNext ( ) <nl> { <nl> @ @ - 242 , 6 + 243 , 8 @ @ public class Memtable <nl> public Map . Entry < DecoratedKey , AtomicSortedColumns > next ( ) <nl> { <nl> Map . Entry < RowPosition , AtomicSortedColumns > entry = iter . next ( ) ; <nl> + / / Store the reference to the current entry so that remove ( ) can update the current size . <nl> + currentEntry = entry ; <nl> / / Actual stored key should be true DecoratedKey <nl> assert entry . getKey ( ) instanceof DecoratedKey ; <nl> / / Object cast is required since otherwise we can ' t turn RowPosition into DecoratedKey <nl> @ @ - 251 , 6 + 254 , 8 @ @ public class Memtable <nl> public void remove ( ) <nl> { <nl> iter . remove ( ) ; <nl> + currentSize . addAndGet ( - currentEntry . getValue ( ) . dataSize ( ) ) ; <nl> + currentEntry = null ; <nl> } <nl> } ; <nl> } <nl> @ @ - 355 , 7 + 360 , 7 @ @ public class Memtable <nl> / / the table has secondary indexes , or else the stale entries wouldn ' t be cleaned up during compaction , <nl> / / and will only be dropped during 2i query read - repair , if at all . <nl> if ( ! cfs . indexManager . hasIndexes ( ) ) <nl> - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; <nl> + currentSize . addAndGet ( - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ) ; <nl> } <nl> writer . append ( ( DecoratedKey ) entry . getKey ( ) , cf ) ; <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / IMessageSink . java b / src / java / org / apache / cassandra / net / IMessageSink . java 
 new file mode 100644 
 index 0000000 . . 5150901 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / net / IMessageSink . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + import java . net . InetAddress ; 
 + 
 + public interface IMessageSink 
 + { 
 + / * * 
 + * Allow or drop an outgoing message 
 + * 
 + * @ return true if the message is allowed , false if it should be dropped 
 + * / 
 + boolean allowOutgoingMessage ( MessageOut message , int id , InetAddress to ) ; 
 + 
 + / * * 
 + * Allow or drop an incoming message 
 + * 
 + * @ return true if the message is allowed , false if it should be dropped 
 + * / 
 + boolean allowIncomingMessage ( MessageIn message , int id ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 1f952a3 . . fb699e4 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . nio . channels . ClosedChannelException ; 
 import java . nio . channels . ServerSocketChannel ; 
 import java . util . * ; 
 import java . util . concurrent . ConcurrentMap ; 
 + import java . util . concurrent . CopyOnWriteArraySet ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 @ @ - 60 , 7 + 61 , 6 @ @ import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . ILatencySubscriber ; 
 import org . apache . cassandra . metrics . ConnectionMetrics ; 
 import org . apache . cassandra . metrics . DroppedMessageMetrics ; 
 - import org . apache . cassandra . sink . SinkManager ; 
 import org . apache . cassandra . repair . messages . RepairMessage ; 
 import org . apache . cassandra . security . SSLFactory ; 
 import org . apache . cassandra . service . * ; 
 @ @ - 308 , 10 + 308 , 24 @ @ public final class MessagingService implements MessagingServiceMBean 
 / / protocol versions of the other nodes in the cluster 
 private final ConcurrentMap < InetAddress , Integer > versions = new NonBlockingHashMap < InetAddress , Integer > ( ) ; 
 
 + / / message sinks are a testing hook 
 + private final Set < IMessageSink > messageSinks = new CopyOnWriteArraySet < > ( ) ; 
 + 
 + public void addMessageSink ( IMessageSink sink ) 
 + { 
 + messageSinks . add ( sink ) ; 
 + } 
 + 
 + public void clearMessageSinks ( ) 
 + { 
 + messageSinks . clear ( ) ; 
 + } 
 + 
 private static class MSHandle 
 { 
 public static final MessagingService instance = new MessagingService ( ) ; 
 } 
 + 
 public static MessagingService instance ( ) 
 { 
 return MSHandle . instance ; 
 @ @ - 672 , 17 + 686 , 15 @ @ public final class MessagingService implements MessagingServiceMBean 
 logger . trace ( " Message - to - self { } going over MessagingService " , message ) ; 
 
 / / message sinks are a testing hook 
 - MessageOut processedMessage = SinkManager . processOutboundMessage ( message , id , to ) ; 
 - if ( processedMessage = = null ) 
 - { 
 - return ; 
 - } 
 + for ( IMessageSink ms : messageSinks ) 
 + if ( ! ms . allowOutgoingMessage ( message , id , to ) ) 
 + return ; 
 
 / / get pooled connection ( really , connection queue ) 
 - OutboundTcpConnection connection = getConnection ( to , processedMessage ) ; 
 + OutboundTcpConnection connection = getConnection ( to , message ) ; 
 
 / / write it 
 - connection . enqueue ( processedMessage , id ) ; 
 + connection . enqueue ( message , id ) ; 
 } 
 
 public < T > AsyncOneResponse < T > sendRR ( MessageOut message , InetAddress to ) 
 @ @ - 732 , 13 + 744 , 10 @ @ public final class MessagingService implements MessagingServiceMBean 
 if ( state ! = null ) 
 state . trace ( " Message received from { } " , message . from ) ; 
 
 - Verb verb = message . verb ; 
 - message = SinkManager . processInboundMessage ( message , id ) ; 
 - if ( message = = null ) 
 - { 
 - incrementRejectedMessages ( verb ) ; 
 - return ; 
 - } 
 + / / message sinks are a testing hook 
 + for ( IMessageSink ms : messageSinks ) 
 + if ( ! ms . allowIncomingMessage ( message , id ) ) 
 + return ; 
 
 Runnable runnable = new MessageDeliveryTask ( message , id , timestamp ) ; 
 TracingAwareExecutorService stage = StageManager . getStage ( message . getMessageType ( ) ) ; 
 @ @ - 855 , 27 + 864 , 12 @ @ public final class MessagingService implements MessagingServiceMBean 
 return versions . containsKey ( endpoint ) ; 
 } 
 
 - 
 public void incrementDroppedMessages ( Verb verb ) 
 { 
 assert DROPPABLE _ VERBS . contains ( verb ) : " Verb " + verb + " should not legally be dropped " ; 
 droppedMessages . get ( verb ) . dropped . mark ( ) ; 
 } 
 
 - / * * 
 - * Same as incrementDroppedMessages ( ) , but allows non - droppable verbs . Called for IMessageSink - caused message drops . 
 - * / 
 - private void incrementRejectedMessages ( Verb verb ) 
 - { 
 - DroppedMessageMetrics metrics = droppedMessages . get ( verb ) ; 
 - if ( metrics = = null ) 
 - { 
 - metrics = new DroppedMessageMetrics ( verb ) ; 
 - droppedMessages . put ( verb , metrics ) ; 
 - } 
 - metrics . dropped . mark ( ) ; 
 - } 
 - 
 private void logDroppedMessages ( ) 
 { 
 boolean logTpstats = false ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index d667b1e . . 45c4c4d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 60 , 7 + 60 , 6 @ @ import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . metrics . * ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . service . paxos . * ; 
 - import org . apache . cassandra . sink . SinkManager ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . triggers . TriggerExecutor ; 
 import org . apache . cassandra . utils . * ; 
 @ @ - 1054 , 19 + 1053 , 15 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 public void runMayThrow ( ) 
 { 
 - IMutation processed = SinkManager . processWriteRequest ( mutation ) ; 
 - if ( processed ! = null ) 
 + try 
 { 
 - try 
 - { 
 - ( ( Mutation ) processed ) . apply ( ) ; 
 - responseHandler . response ( null ) ; 
 - } 
 - catch ( Exception ex ) 
 - { 
 - logger . error ( " Failed to apply mutation locally : { } " , ex . getMessage ( ) ) ; 
 - responseHandler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; 
 - } 
 + mutation . apply ( ) ; 
 + responseHandler . response ( null ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + logger . error ( " Failed to apply mutation locally : { } " , ex . getMessage ( ) ) ; 
 + responseHandler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; 
 } 
 } 
 } ) ; 
 @ @ - 1177 , 18 + 1172 , 13 @ @ public class StorageProxy implements StorageProxyMBean 
 @ Override 
 public void runMayThrow ( ) throws OverloadedException , WriteTimeoutException 
 { 
 - IMutation processed = SinkManager . processWriteRequest ( mutation ) ; 
 - if ( processed = = null ) 
 - return ; 
 - 
 - assert processed instanceof CounterMutation ; 
 - CounterMutation cm = ( CounterMutation ) processed ; 
 + assert mutation instanceof CounterMutation ; 
 
 - Mutation result = cm . apply ( ) ; 
 + Mutation result = ( ( CounterMutation ) mutation ) . apply ( ) ; 
 responseHandler . response ( null ) ; 
 
 Set < InetAddress > remotes = Sets . difference ( ImmutableSet . copyOf ( targets ) , 
 - ImmutableSet . of ( FBUtilities . getBroadcastAddress ( ) ) ) ; 
 + ImmutableSet . of ( FBUtilities . getBroadcastAddress ( ) ) ) ; 
 if ( ! remotes . isEmpty ( ) ) 
 sendToHintedEndpoints ( result , remotes , responseHandler , localDataCenter ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / sink / IMessageSink . java b / src / java / org / apache / cassandra / sink / IMessageSink . java 
 deleted file mode 100644 
 index 996e7ff . . 0000000 
 - - - a / src / java / org / apache / cassandra / sink / IMessageSink . java 
 + + + / dev / null 
 @ @ - 1 , 42 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . sink ; 
 - 
 - import java . net . InetAddress ; 
 - 
 - import org . apache . cassandra . net . MessageIn ; 
 - import org . apache . cassandra . net . MessageOut ; 
 - 
 - public interface IMessageSink 
 - { 
 - / * * 
 - * Transform or drop an outgoing message 
 - * 
 - * @ return null if the message is dropped , or the transformed message to send , which may be just 
 - * the original message 
 - * / 
 - MessageOut handleMessage ( MessageOut message , int id , InetAddress to ) ; 
 - 
 - / * * 
 - * Transform or drop an incoming message 
 - * 
 - * @ return null if the message is dropped , or the transformed message to receive , which may be just 
 - * the original message 
 - * / 
 - MessageIn handleMessage ( MessageIn message , int id , InetAddress to ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / sink / IRequestSink . java b / src / java / org / apache / cassandra / sink / IRequestSink . java 
 deleted file mode 100644 
 index 2873e46 . . 0000000 
 - - - a / src / java / org / apache / cassandra / sink / IRequestSink . java 
 + + + / dev / null 
 @ @ - 1 , 32 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . sink ; 
 - 
 - import org . apache . cassandra . db . IMutation ; 
 - 
 - public interface IRequestSink 
 - { 
 - / * * 
 - * Transform or drop a write request ( represented by a Mutation ) . 
 - * 
 - * @ param mutation the Mutation to be applied locally . 
 - * @ return null if the mutation is to be dropped , or the transformed mutation to apply , which may be just 
 - * the original mutation . 
 - * / 
 - IMutation handleWriteRequest ( IMutation mutation ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / sink / SinkManager . java b / src / java / org / apache / cassandra / sink / SinkManager . java 
 deleted file mode 100644 
 index 303c107 . . 0000000 
 - - - a / src / java / org / apache / cassandra / sink / SinkManager . java 
 + + + / dev / null 
 @ @ - 1 , 104 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . sink ; 
 - 
 - import java . net . InetAddress ; 
 - import java . util . Set ; 
 - import java . util . concurrent . CopyOnWriteArraySet ; 
 - 
 - import org . apache . cassandra . db . IMutation ; 
 - import org . apache . cassandra . net . MessageIn ; 
 - import org . apache . cassandra . net . MessageOut ; 
 - 
 - / * * 
 - * a class used only for testing to avoid sending / receiving data from a junit test . 
 - * needs to be in the source tree as MessagingService calls it directly . 
 - * / 
 - public class SinkManager 
 - { 
 - private static final Set < IMessageSink > messageSinks = new CopyOnWriteArraySet < > ( ) ; 
 - private static final Set < IRequestSink > requestSinks = new CopyOnWriteArraySet < > ( ) ; 
 - 
 - public static void add ( IMessageSink ms ) 
 - { 
 - messageSinks . add ( ms ) ; 
 - } 
 - 
 - public static void add ( IRequestSink rs ) 
 - { 
 - requestSinks . add ( rs ) ; 
 - } 
 - 
 - public static void remove ( IMessageSink ms ) 
 - { 
 - messageSinks . remove ( ms ) ; 
 - } 
 - 
 - public static void remove ( IRequestSink rs ) 
 - { 
 - requestSinks . remove ( rs ) ; 
 - } 
 - 
 - public static void clear ( ) 
 - { 
 - messageSinks . clear ( ) ; 
 - requestSinks . clear ( ) ; 
 - } 
 - 
 - public static MessageOut processOutboundMessage ( MessageOut message , int id , InetAddress to ) 
 - { 
 - if ( messageSinks . isEmpty ( ) ) 
 - return message ; 
 - 
 - for ( IMessageSink ms : messageSinks ) 
 - { 
 - message = ms . handleMessage ( message , id , to ) ; 
 - if ( message = = null ) 
 - return null ; 
 - } 
 - return message ; 
 - } 
 - 
 - public static MessageIn processInboundMessage ( MessageIn message , int id ) 
 - { 
 - if ( messageSinks . isEmpty ( ) ) 
 - return message ; 
 - 
 - for ( IMessageSink ms : messageSinks ) 
 - { 
 - message = ms . handleMessage ( message , id , null ) ; 
 - if ( message = = null ) 
 - return null ; 
 - } 
 - return message ; 
 - } 
 - 
 - public static IMutation processWriteRequest ( IMutation mutation ) 
 - { 
 - if ( requestSinks . isEmpty ( ) ) 
 - return mutation ; 
 - 
 - for ( IRequestSink rs : requestSinks ) 
 - { 
 - mutation = rs . handleWriteRequest ( mutation ) ; 
 - if ( mutation = = null ) 
 - return null ; 
 - } 
 - return mutation ; 
 - } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / repair / ValidatorTest . java b / test / unit / org / apache / cassandra / repair / ValidatorTest . java 
 index 615167c . . a9f18f5 100644 
 - - - a / test / unit / org / apache / cassandra / repair / ValidatorTest . java 
 + + + b / test / unit / org / apache / cassandra / repair / ValidatorTest . java 
 @ @ - 43 , 8 + 43 , 7 @ @ import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . sink . IMessageSink ; 
 - import org . apache . cassandra . sink . SinkManager ; 
 + import org . apache . cassandra . net . IMessageSink ; 
 import org . apache . cassandra . repair . messages . RepairMessage ; 
 import org . apache . cassandra . repair . messages . ValidationComplete ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 73 , 7 + 72 , 7 @ @ public class ValidatorTest 
 @ After 
 public void tearDown ( ) 
 { 
 - SinkManager . clear ( ) ; 
 + MessagingService . instance ( ) . clearMessageSinks ( ) ; 
 } 
 
 @ Test 
 @ @ - 83 , 10 + 82 , 10 @ @ public class ValidatorTest 
 final RepairJobDesc desc = new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , keyspace , columnFamily , range ) ; 
 
 final SimpleCondition lock = new SimpleCondition ( ) ; 
 - SinkManager . add ( new IMessageSink ( ) 
 + MessagingService . instance ( ) . addMessageSink ( new IMessageSink ( ) 
 { 
 @ SuppressWarnings ( " unchecked " ) 
 - public MessageOut handleMessage ( MessageOut message , int id , InetAddress to ) 
 + public boolean allowOutgoingMessage ( MessageOut message , int id , InetAddress to ) 
 { 
 try 
 { 
 @ @ - 95 , 20 + 94 , 20 @ @ public class ValidatorTest 
 RepairMessage m = ( RepairMessage ) message . payload ; 
 assertEquals ( RepairMessage . Type . VALIDATION _ COMPLETE , m . messageType ) ; 
 assertEquals ( desc , m . desc ) ; 
 - assertTrue ( ( ( ValidationComplete ) m ) . success ) ; 
 - assertNotNull ( ( ( ValidationComplete ) m ) . tree ) ; 
 + assertTrue ( ( ( ValidationComplete ) m ) . success ) ; 
 + assertNotNull ( ( ( ValidationComplete ) m ) . tree ) ; 
 } 
 } 
 finally 
 { 
 lock . signalAll ( ) ; 
 } 
 - return null ; 
 + return false ; 
 } 
 
 - public MessageIn handleMessage ( MessageIn message , int id , InetAddress to ) 
 + public boolean allowIncomingMessage ( MessageIn message , int id ) 
 { 
 - return null ; 
 + return false ; 
 } 
 } ) ; 
 
 @ @ - 165 , 10 + 164 , 10 @ @ public class ValidatorTest 
 final RepairJobDesc desc = new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , keyspace , columnFamily , range ) ; 
 
 final SimpleCondition lock = new SimpleCondition ( ) ; 
 - SinkManager . add ( new IMessageSink ( ) 
 + MessagingService . instance ( ) . addMessageSink ( new IMessageSink ( ) 
 { 
 @ SuppressWarnings ( " unchecked " ) 
 - public MessageOut handleMessage ( MessageOut message , int id , InetAddress to ) 
 + public boolean allowOutgoingMessage ( MessageOut message , int id , InetAddress to ) 
 { 
 try 
 { 
 @ @ - 178 , 19 + 177 , 19 @ @ public class ValidatorTest 
 assertEquals ( RepairMessage . Type . VALIDATION _ COMPLETE , m . messageType ) ; 
 assertEquals ( desc , m . desc ) ; 
 assertFalse ( ( ( ValidationComplete ) m ) . success ) ; 
 - assertNull ( ( ( ValidationComplete ) m ) . tree ) ; 
 + assertNull ( ( ( ValidationComplete ) m ) . tree ) ; 
 } 
 } 
 finally 
 { 
 lock . signalAll ( ) ; 
 } 
 - return null ; 
 + return false ; 
 } 
 
 - public MessageIn handleMessage ( MessageIn message , int id , InetAddress to ) 
 + public boolean allowIncomingMessage ( MessageIn message , int id ) 
 { 
 - return null ; 
 + return false ; 
 } 
 } ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / service / RemoveTest . java b / test / unit / org / apache / cassandra / service / RemoveTest . java 
 index e5e4620 . . 6d7cac8 100644 
 - - - a / test / unit / org / apache / cassandra / service / RemoveTest . java 
 + + + b / test / unit / org / apache / cassandra / service / RemoveTest . java 
 @ @ - 39 , 7 + 39 , 6 @ @ import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 - import org . apache . cassandra . sink . SinkManager ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 90 , 7 + 89 , 7 @ @ public class RemoveTest 
 @ After 
 public void tearDown ( ) 
 { 
 - SinkManager . clear ( ) ; 
 + MessagingService . instance ( ) . clearMessageSinks ( ) ; 
 MessagingService . instance ( ) . clearCallbacksUnsafe ( ) ; 
 MessagingService . instance ( ) . shutdown ( ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1052901 . . 7e6ba95 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * Fix modifying column _ metadata from thrift ( CASSANDRA - 6182 ) 
 * cqlsh : fix LIST USERS output ( CASSANDRA - 6242 ) 
 * Add IRequestSink interface ( CASSANDRA - 6248 ) 
 + * Update memtable size while flushing ( CASSANDRA - 6249 ) 
 
 
 2 . 0 . 2 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 4031ebc . . 7b5642a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 319 , 6 + 319 , 14 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry 
 return ObjectSizes . measureDeep ( this ) ; 
 } 
 
 + public long dataSize ( ) 
 + { 
 + long size = 0 ; 
 + for ( Column column : this ) 
 + size + = column . dataSize ( ) ; 
 + return size ; 
 + } 
 + 
 public long maxTimestamp ( ) 
 { 
 long maxTimestamp = deletionInfo ( ) . maxTimestamp ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 597ca53 . . 4346224 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 884 , 11 + 884 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return removeDeletedCF ( cf , gcBefore ) ; 
 } 
 
 - private static void removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore , SecondaryIndexManager . Updater indexer ) 
 + private static long removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore , SecondaryIndexManager . Updater indexer ) 
 { 
 Iterator < Column > iter = cf . iterator ( ) ; 
 DeletionInfo . InOrderTester tester = cf . inOrderDeletionTester ( ) ; 
 boolean hasDroppedColumns = ! cf . metadata . getDroppedColumns ( ) . isEmpty ( ) ; 
 + long removedBytes = 0 ; 
 while ( iter . hasNext ( ) ) 
 { 
 Column c = iter . next ( ) ; 
 @ @ - 900 , 13 + 901 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 iter . remove ( ) ; 
 indexer . remove ( c ) ; 
 + removedBytes + = c . dataSize ( ) ; 
 } 
 } 
 + return removedBytes ; 
 } 
 
 - public static void removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore ) 
 + public static long removeDeletedColumnsOnly ( ColumnFamily cf , int gcBefore ) 
 { 
 - removeDeletedColumnsOnly ( cf , gcBefore , SecondaryIndexManager . nullUpdater ) ; 
 + return removeDeletedColumnsOnly ( cf , gcBefore , SecondaryIndexManager . nullUpdater ) ; 
 } 
 
 / / returns true if 
 @ @ - 1094 , 6 + 1097 , 17 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return getMemtableDataSize ( ) + indexManager . getTotalLiveSize ( ) ; 
 } 
 
 + / * * 
 + * @ return the live size of all the memtables ( the current active one and pending flush ) . 
 + * / 
 + public long getAllMemtablesLiveSize ( ) 
 + { 
 + long size = 0 ; 
 + for ( Memtable mt : getDataTracker ( ) . getAllMemtables ( ) ) 
 + size + = mt . getLiveSize ( ) ; 
 + return size ; 
 + } 
 + 
 public int getMemtableSwitchCount ( ) 
 { 
 return ( int ) metric . memtableSwitchCount . count ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / DataTracker . java b / src / java / org / apache / cassandra / db / DataTracker . java 
 index 365d607 . . 1c25f44 100644 
 - - - a / src / java / org / apache / cassandra / db / DataTracker . java 
 + + + b / src / java / org / apache / cassandra / db / DataTracker . java 
 @ @ - 62 , 6 + 62 , 15 @ @ public class DataTracker 
 return view . get ( ) . memtablesPendingFlush ; 
 } 
 
 + / * * 
 + * @ return the active memtable and all the memtables that are pending flush . 
 + * / 
 + public Iterable < Memtable > getAllMemtables ( ) 
 + { 
 + View snapshot = view . get ( ) ; 
 + return Iterables . concat ( snapshot . memtablesPendingFlush , Collections . singleton ( snapshot . memtable ) ) ; 
 + } 
 + 
 public Set < SSTableReader > getSSTables ( ) 
 { 
 return view . get ( ) . sstables ; 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 9a8f810 . . 12d36bf 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 233 , 6 + 233 , 7 @ @ public class Memtable 
 private Iterator < Map . Entry < RowPosition , AtomicSortedColumns > > iter = stopAt . isMinimum ( cfs . partitioner ) 
 ? rows . tailMap ( startWith ) . entrySet ( ) . iterator ( ) 
 : rows . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; 
 + private Map . Entry < RowPosition , AtomicSortedColumns > currentEntry ; 
 
 public boolean hasNext ( ) 
 { 
 @ @ - 242 , 6 + 243 , 8 @ @ public class Memtable 
 public Map . Entry < DecoratedKey , AtomicSortedColumns > next ( ) 
 { 
 Map . Entry < RowPosition , AtomicSortedColumns > entry = iter . next ( ) ; 
 + / / Store the reference to the current entry so that remove ( ) can update the current size . 
 + currentEntry = entry ; 
 / / Actual stored key should be true DecoratedKey 
 assert entry . getKey ( ) instanceof DecoratedKey ; 
 / / Object cast is required since otherwise we can ' t turn RowPosition into DecoratedKey 
 @ @ - 251 , 6 + 254 , 8 @ @ public class Memtable 
 public void remove ( ) 
 { 
 iter . remove ( ) ; 
 + currentSize . addAndGet ( - currentEntry . getValue ( ) . dataSize ( ) ) ; 
 + currentEntry = null ; 
 } 
 } ; 
 } 
 @ @ - 355 , 7 + 360 , 7 @ @ public class Memtable 
 / / the table has secondary indexes , or else the stale entries wouldn ' t be cleaned up during compaction , 
 / / and will only be dropped during 2i query read - repair , if at all . 
 if ( ! cfs . indexManager . hasIndexes ( ) ) 
 - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ; 
 + currentSize . addAndGet ( - ColumnFamilyStore . removeDeletedColumnsOnly ( cf , Integer . MIN _ VALUE ) ) ; 
 } 
 writer . append ( ( DecoratedKey ) entry . getKey ( ) , cf ) ; 
 }
