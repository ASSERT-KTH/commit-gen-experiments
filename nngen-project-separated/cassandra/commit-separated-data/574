BLEU SCORE: 0.07986788803078405

TEST MSG: AnticompactionRequestSerializer serializedSize is incorrect
GENERATED MSG: range query support

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index bcd0b5c . . e613d7c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 11 <nl> + * AnticompactionRequestSerializer serializedSize is incorrect ( CASSANDRA - 12934 ) <nl> * Prevent reloading of logback . xml from UDF sandbox ( CASSANDRA - 12535 ) <nl> Merged from 2 . 2 : <nl> * Avoid blocking gossip during pending range calculation ( CASSANDRA - 12281 ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java <nl> index 3e47374 . . a29cc87 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> import java . util . UUID ; <nl> <nl> import org . apache . cassandra . dht . Range ; <nl> @ @ - 46 , 6 + 47 , 23 @ @ public class AnticompactionRequest extends RepairMessage <nl> this . successfulRanges = ranges ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof AnticompactionRequest ) ) <nl> + return false ; <nl> + AnticompactionRequest other = ( AnticompactionRequest ) o ; <nl> + return messageType = = other . messageType & & <nl> + parentRepairSession . equals ( other . parentRepairSession ) & & <nl> + successfulRanges . equals ( other . successfulRanges ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType , parentRepairSession , successfulRanges ) ; <nl> + } <nl> + <nl> public static class AnticompactionRequestSerializer implements MessageSerializer < AnticompactionRequest > <nl> { <nl> public void serialize ( AnticompactionRequest message , DataOutputPlus out , int version ) throws IOException <nl> @ @ - 72 , 6 + 90 , 7 @ @ public class AnticompactionRequest extends RepairMessage <nl> public long serializedSize ( AnticompactionRequest message , int version ) <nl> { <nl> long size = UUIDSerializer . serializer . serializedSize ( message . parentRepairSession , version ) ; <nl> + size + = Integer . BYTES ; / / count of items in successfulRanges <nl> for ( Range < Token > r : message . successfulRanges ) <nl> size + = Range . tokenSerializer . serializedSize ( r , version ) ; <nl> return size ; <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java b / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java <nl> index 43a8f02 . . 69d147a 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . repair . messages ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Objects ; <nl> import java . util . UUID ; <nl> <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> @ @ - 40 , 6 + 41 , 22 @ @ public class CleanupMessage extends RepairMessage <nl> this . parentRepairSession = parentRepairSession ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof CleanupMessage ) ) <nl> + return false ; <nl> + CleanupMessage other = ( CleanupMessage ) o ; <nl> + return messageType = = other . messageType & & <nl> + parentRepairSession . equals ( other . parentRepairSession ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType , parentRepairSession ) ; <nl> + } <nl> + <nl> public static class CleanupMessageSerializer implements MessageSerializer < CleanupMessage > <nl> { <nl> public void serialize ( CleanupMessage message , DataOutputPlus out , int version ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> index 8909f1b . . b3efeae 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> import java . util . UUID ; <nl> <nl> import org . apache . cassandra . db . TypeSizes ; <nl> @ @ - 54 , 6 + 55 , 27 @ @ public class PrepareMessage extends RepairMessage <nl> this . isGlobal = isGlobal ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof PrepareMessage ) ) <nl> + return false ; <nl> + PrepareMessage other = ( PrepareMessage ) o ; <nl> + return messageType = = other . messageType & & <nl> + parentRepairSession . equals ( other . parentRepairSession ) & & <nl> + isIncremental = = other . isIncremental & & <nl> + isGlobal = = other . isGlobal & & <nl> + timestamp = = other . timestamp & & <nl> + cfIds . equals ( other . cfIds ) & & <nl> + ranges . equals ( other . ranges ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType , parentRepairSession , isGlobal , isIncremental , timestamp , cfIds , ranges ) ; <nl> + } <nl> + <nl> public static class PrepareMessageSerializer implements MessageSerializer < PrepareMessage > <nl> { <nl> public void serialize ( PrepareMessage message , DataOutputPlus out , int version ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java <nl> index 1b15126 . . d4737d3 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . repair . messages ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Objects ; <nl> <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> import org . apache . cassandra . io . util . DataOutputPlus ; <nl> @ @ - 32 , 6 + 33 , 21 @ @ public class SnapshotMessage extends RepairMessage <nl> super ( Type . SNAPSHOT , desc ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof SnapshotMessage ) ) <nl> + return false ; <nl> + SnapshotMessage other = ( SnapshotMessage ) o ; <nl> + return messageType = = other . messageType ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType ) ; <nl> + } <nl> + <nl> public static class SnapshotMessageSerializer implements MessageSerializer < SnapshotMessage > <nl> { <nl> public void serialize ( SnapshotMessage message , DataOutputPlus out , int version ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / SyncComplete . java b / src / java / org / apache / cassandra / repair / messages / SyncComplete . java <nl> index 35cf5d4 . . 178e710 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / SyncComplete . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / SyncComplete . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . repair . messages ; <nl> <nl> import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> + import java . util . Objects ; <nl> <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> @ @ - 53 , 6 + 54 , 24 @ @ public class SyncComplete extends RepairMessage <nl> this . success = success ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof SyncComplete ) ) <nl> + return false ; <nl> + SyncComplete other = ( SyncComplete ) o ; <nl> + return messageType = = other . messageType & & <nl> + desc . equals ( other . desc ) & & <nl> + success = = other . success & & <nl> + nodes . equals ( other . nodes ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType , desc , success , nodes ) ; <nl> + } <nl> + <nl> private static class SyncCompleteSerializer implements MessageSerializer < SyncComplete > <nl> { <nl> public void serialize ( SyncComplete message , DataOutputPlus out , int version ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / SyncRequest . java b / src / java / org / apache / cassandra / repair / messages / SyncRequest . java <nl> index 2c9799e . . f79f482 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / SyncRequest . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / SyncRequest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> @ @ - 57 , 6 + 58 , 26 @ @ public class SyncRequest extends RepairMessage <nl> this . ranges = ranges ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof SyncRequest ) ) <nl> + return false ; <nl> + SyncRequest req = ( SyncRequest ) o ; <nl> + return messageType = = req . messageType & & <nl> + desc . equals ( req . desc ) & & <nl> + initiator . equals ( req . initiator ) & & <nl> + src . equals ( req . src ) & & <nl> + dst . equals ( req . dst ) & & <nl> + ranges . equals ( ranges ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType , desc , initiator , src , dst , ranges ) ; <nl> + } <nl> + <nl> public static class SyncRequestSerializer implements MessageSerializer < SyncRequest > <nl> { <nl> public void serialize ( SyncRequest message , DataOutputPlus out , int version ) throws IOException <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java b / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java <nl> index 90be8e5 . . 704bffb 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . repair . messages ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Objects ; <nl> <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . util . DataInputPlus ; <nl> @ @ - 55 , 6 + 56 , 23 @ @ public class ValidationComplete extends RepairMessage <nl> return trees ! = null ; <nl> } <nl> <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof ValidationComplete ) ) <nl> + return false ; <nl> + <nl> + ValidationComplete other = ( ValidationComplete ) o ; <nl> + return messageType = = other . messageType & & <nl> + desc . equals ( other . desc ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( messageType , desc ) ; <nl> + } <nl> + <nl> private static class ValidationCompleteSerializer implements MessageSerializer < ValidationComplete > <nl> { <nl> public void serialize ( ValidationComplete message , DataOutputPlus out , int version ) throws IOException <nl> diff - - git a / test / unit / org / apache / cassandra / repair / messages / RepairMessageSerializationsTest . java b / test / unit / org / apache / cassandra / repair / messages / RepairMessageSerializationsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5dbed3f <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / repair / messages / RepairMessageSerializationsTest . java <nl> @ @ - 0 , 0 + 1 , 187 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . repair . messages ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . net . InetAddress ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . junit . AfterClass ; <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> + import org . apache . cassandra . dht . Murmur3Partitioner . LongToken ; <nl> + import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . io . IVersionedSerializer ; <nl> + import org . apache . cassandra . io . util . DataInputBuffer ; <nl> + import org . apache . cassandra . io . util . DataInputPlus ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> + import org . apache . cassandra . io . util . DataOutputPlus ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . repair . NodePair ; <nl> + import org . apache . cassandra . repair . RepairJobDesc ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . MerkleTrees ; <nl> + <nl> + public class RepairMessageSerializationsTest <nl> + { <nl> + private static final int PROTOCOL _ VERSION = MessagingService . current _ version ; <nl> + private static final int GC _ BEFORE = 1000000 ; <nl> + <nl> + private static IPartitioner originalPartitioner ; <nl> + <nl> + @ BeforeClass <nl> + public static void before ( ) <nl> + { <nl> + originalPartitioner = StorageService . instance . setPartitionerUnsafe ( Murmur3Partitioner . instance ) ; <nl> + } <nl> + <nl> + @ AfterClass <nl> + public static void after ( ) <nl> + { <nl> + DatabaseDescriptor . setPartitionerUnsafe ( originalPartitioner ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void validationRequestMessage ( ) throws IOException <nl> + { <nl> + RepairJobDesc jobDesc = buildRepairJobDesc ( ) ; <nl> + ValidationRequest msg = new ValidationRequest ( jobDesc , GC _ BEFORE ) ; <nl> + ValidationRequest deserialized = serializeRoundTrip ( msg , ValidationRequest . serializer ) ; <nl> + Assert . assertEquals ( jobDesc , deserialized . desc ) ; <nl> + } <nl> + <nl> + private RepairJobDesc buildRepairJobDesc ( ) <nl> + { <nl> + List < Range < Token > > tokenRanges = buildTokenRanges ( ) ; <nl> + return new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , " serializationsTestKeyspace " , " repairMessages " , tokenRanges ) ; <nl> + } <nl> + <nl> + private List < Range < Token > > buildTokenRanges ( ) <nl> + { <nl> + List < Range < Token > > tokenRanges = new ArrayList < > ( 4 ) ; <nl> + tokenRanges . add ( new Range < > ( new LongToken ( 1000 ) , new LongToken ( 1001 ) ) ) ; <nl> + tokenRanges . add ( new Range < > ( new LongToken ( 2000 ) , new LongToken ( 2001 ) ) ) ; <nl> + tokenRanges . add ( new Range < > ( new LongToken ( 3000 ) , new LongToken ( 3001 ) ) ) ; <nl> + tokenRanges . add ( new Range < > ( new LongToken ( 4000 ) , new LongToken ( 4001 ) ) ) ; <nl> + return tokenRanges ; <nl> + } <nl> + <nl> + private < T extends RepairMessage > T serializeRoundTrip ( T msg , IVersionedSerializer < T > serializer ) throws IOException <nl> + { <nl> + long size = serializer . serializedSize ( msg , PROTOCOL _ VERSION ) ; <nl> + <nl> + ByteBuffer buf = ByteBuffer . allocate ( ( int ) size ) ; <nl> + DataOutputPlus out = new DataOutputBufferFixed ( buf ) ; <nl> + serializer . serialize ( msg , out , PROTOCOL _ VERSION ) ; <nl> + Assert . assertEquals ( size , buf . position ( ) ) ; <nl> + <nl> + buf . flip ( ) ; <nl> + DataInputPlus in = new DataInputBuffer ( buf , false ) ; <nl> + T deserialized = serializer . deserialize ( in , PROTOCOL _ VERSION ) ; <nl> + Assert . assertEquals ( msg , deserialized ) ; <nl> + Assert . assertEquals ( msg . hashCode ( ) , deserialized . hashCode ( ) ) ; <nl> + return deserialized ; <nl> + } <nl> + <nl> + @ Test <nl> + public void validationCompleteMessage _ NoMerkleTree ( ) throws IOException <nl> + { <nl> + ValidationComplete deserialized = validationCompleteMessage ( null ) ; <nl> + Assert . assertNull ( deserialized . trees ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void validationCompleteMessage _ WithMerkleTree ( ) throws IOException <nl> + { <nl> + MerkleTrees trees = new MerkleTrees ( Murmur3Partitioner . instance ) ; <nl> + trees . addMerkleTree ( 256 , new Range < > ( new LongToken ( 1000 ) , new LongToken ( 1001 ) ) ) ; <nl> + ValidationComplete deserialized = validationCompleteMessage ( trees ) ; <nl> + <nl> + / / a simple check to make sure we got some merkle trees back . <nl> + Assert . assertEquals ( trees . size ( ) , deserialized . trees . size ( ) ) ; <nl> + } <nl> + <nl> + private ValidationComplete validationCompleteMessage ( MerkleTrees trees ) throws IOException <nl> + { <nl> + RepairJobDesc jobDesc = buildRepairJobDesc ( ) ; <nl> + ValidationComplete msg = trees = = null ? <nl> + new ValidationComplete ( jobDesc ) : <nl> + new ValidationComplete ( jobDesc , trees ) ; <nl> + ValidationComplete deserialized = serializeRoundTrip ( msg , ValidationComplete . serializer ) ; <nl> + return deserialized ; <nl> + } <nl> + <nl> + @ Test <nl> + public void syncRequestMessage ( ) throws IOException <nl> + { <nl> + InetAddress initiator = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; <nl> + InetAddress src = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; <nl> + InetAddress dst = InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ; <nl> + <nl> + SyncRequest msg = new SyncRequest ( buildRepairJobDesc ( ) , initiator , src , dst , buildTokenRanges ( ) ) ; <nl> + serializeRoundTrip ( msg , SyncRequest . serializer ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void syncCompleteMessage ( ) throws IOException <nl> + { <nl> + InetAddress src = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; <nl> + InetAddress dst = InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ; <nl> + SyncComplete msg = new SyncComplete ( buildRepairJobDesc ( ) , new NodePair ( src , dst ) , true ) ; <nl> + serializeRoundTrip ( msg , SyncComplete . serializer ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void antiCompactionRequestMessage ( ) throws IOException <nl> + { <nl> + AnticompactionRequest msg = new AnticompactionRequest ( UUID . randomUUID ( ) , buildTokenRanges ( ) ) ; <nl> + serializeRoundTrip ( msg , AnticompactionRequest . serializer ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void prepareMessage ( ) throws IOException <nl> + { <nl> + PrepareMessage msg = new PrepareMessage ( UUID . randomUUID ( ) , new ArrayList < UUID > ( ) { { add ( UUID . randomUUID ( ) ) ; } } , <nl> + buildTokenRanges ( ) , true , 100000L , false ) ; <nl> + serializeRoundTrip ( msg , PrepareMessage . serializer ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void snapshotMessage ( ) throws IOException <nl> + { <nl> + SnapshotMessage msg = new SnapshotMessage ( buildRepairJobDesc ( ) ) ; <nl> + serializeRoundTrip ( msg , SnapshotMessage . serializer ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void cleanupMessage ( ) throws IOException <nl> + { <nl> + CleanupMessage msg = new CleanupMessage ( UUID . randomUUID ( ) ) ; <nl> + serializeRoundTrip ( msg , CleanupMessage . serializer ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 683009c . . 73cf3a6 100644 <nl> - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 18 , 21 + 18 , 24 @ @ <nl> <nl> package org . apache . cassandra . config ; <nl> <nl> - import java . util . * ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . io . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . SystemTable ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . TypeInfo ; <nl> - import org . apache . cassandra . db . DBManager ; <nl> - import org . apache . cassandra . db . SystemTable ; <nl> - import org . apache . cassandra . db . Table . TableMetadata ; <nl> import org . apache . cassandra . utils . FileUtils ; <nl> import org . apache . cassandra . utils . XMLUtils ; <nl> import org . w3c . dom . Node ; <nl> import org . w3c . dom . NodeList ; <nl> - import org . apache . cassandra . io . * ; <nl> <nl> <nl> / * * <nl> @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor <nl> / * Read the table related stuff from config * / <nl> NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; <nl> int size = tables . getLength ( ) ; <nl> + if ( size = = 0 ) { <nl> + throw new UnsupportedOperationException ( " A Table must be configured " ) ; <nl> + } <nl> for ( int i = 0 ; i < size ; + + i ) <nl> { <nl> Node table = tables . item ( i ) ; <nl> @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor <nl> { <nl> return tableToCFMetaDataMap _ ; <nl> } <nl> + <nl> + public static String getTableName ( ) <nl> + { <nl> + return tables _ . get ( 0 ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java <nl> index 51ac744 . . a2ac3a2 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily <nl> return columns _ . getSortedColumns ( ) ; <nl> } <nl> <nl> - Map < String , IColumn > getColumns ( ) <nl> + public Map < String , IColumn > getColumns ( ) <nl> { <nl> return columns _ . getColumns ( ) ; <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index be7c245 . . 28bb3f7 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore <nl> { <nl> memtable _ . get ( ) . flushOnRecovery ( ) ; <nl> } <nl> + <nl> + public Object getMemtable ( ) <nl> + { <nl> + return memtable _ . get ( ) ; <nl> + } <nl> + <nl> + public Set < String > getSSTableFilenames ( ) <nl> + { <nl> + return Collections . unmodifiableSet ( ssTables _ ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java <nl> index 2bdad37 . . 567b829 100644 <nl> - - - a / src / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / org / apache / cassandra / db / Memtable . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; <nl> import org . apache . cassandra . io . SSTable ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . DestructivePQIterator ; <nl> <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > <nl> columnFamilies _ . clear ( ) ; <nl> } <nl> <nl> + public Iterator < String > sortedKeyIterator ( ) <nl> + { <nl> + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java <nl> index 997bbd3 . . 54242d1 100644 <nl> - - - a / src / org / apache / cassandra / db / MemtableManager . java <nl> + + + b / src / org / apache / cassandra / db / MemtableManager . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager <nl> private static Lock lock _ = new ReentrantLock ( ) ; <nl> private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; <nl> private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; <nl> - static MemtableManager instance ( ) <nl> + public static MemtableManager instance ( ) <nl> { <nl> if ( instance _ = = null ) <nl> { <nl> @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager <nl> 	 } <nl> } <nl> <nl> - <nl> - <nl> + public List < Memtable > getUnflushedMemtables ( String cfName ) <nl> + { <nl> + rwLock _ . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + List < Memtable > memtables = history _ . get ( cfName ) ; <nl> + if ( memtables ! = null ) <nl> + { <nl> + return new ArrayList < Memtable > ( memtables ) ; <nl> + } <nl> + return Arrays . asList ( new Memtable [ 0 ] ) ; <nl> + } <nl> + finally <nl> + { <nl> + rwLock _ . readLock ( ) . unlock ( ) ; <nl> + } <nl> + } <nl> <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java <nl> index 9c84b42 . . f1b260a 100644 <nl> - - - a / src / org / apache / cassandra / db / Table . java <nl> + + + b / src / org / apache / cassandra / db / Table . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class Table <nl> * is basically the column family name and the ID associated with <nl> * this column family . We use this ID in the Commit Log header to <nl> * determine when a log file that has been rolled can be deleted . <nl> - * / <nl> + * / <nl> public static class TableMetadata <nl> { <nl> / * Name of the column family * / <nl> @ @ - 454 , 7 + 454 , 7 @ @ public class Table <nl> return columnFamilyStores _ ; <nl> } <nl> <nl> - ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> { <nl> return columnFamilyStores _ . get ( cfName ) ; <nl> } <nl> @ @ - 875 , 4 + 875 , 17 @ @ public class Table <nl> long timeTaken = System . currentTimeMillis ( ) - start ; <nl> dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; <nl> } <nl> + <nl> + public Set < String > getApplicationColumnFamilies ( ) <nl> + { <nl> + Set < String > set = new HashSet < String > ( ) ; <nl> + for ( String cfName : getColumnFamilies ( ) ) <nl> + { <nl> + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) <nl> + { <nl> + set . add ( cfName ) ; <nl> + } <nl> + } <nl> + return set ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java <nl> index 93b62e7 . . c2d5f66 100644 <nl> - - - a / src / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements <nl> return result ; <nl> } <nl> <nl> + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException <nl> + { <nl> + logger _ . debug ( " get _ range " ) ; <nl> + <nl> + / / send request <nl> + Message message ; <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + try <nl> + { <nl> + dob . writeUTF ( startkey ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " unable to write startkey " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , <nl> + StorageService . readStage _ , <nl> + StorageService . rangeVerbHandler _ , <nl> + messageBody ) ; <nl> + EndPoint endPoint ; <nl> + try <nl> + { <nl> + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; <nl> + } <nl> + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; <nl> + <nl> + / / read response <nl> + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , <nl> + / / since they have to handle multiple requests anyway ? ) <nl> + byte [ ] responseBody ; <nl> + try <nl> + { <nl> + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; <nl> + } <nl> + catch ( TimeoutException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> + bufIn . reset ( responseBody , responseBody . length ) ; <nl> + <nl> + / / turn into List <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + while ( bufIn . getPosition ( ) < responseBody . length ) <nl> + { <nl> + try <nl> + { <nl> + keys . add ( bufIn . readUTF ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " bad utf " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + return keys ; <nl> + } <nl> + <nl> / * <nl> * This method is used to ensure that all keys <nl> * prior to the specified key , as dtermined by <nl> diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 3587907 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 152 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Comparator ; <nl> + import java . util . Arrays ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . collections . IteratorUtils ; <nl> + import org . apache . commons . collections . Predicate ; <nl> + <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . db . IdentityFilter ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . FileStruct ; <nl> + import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . Memtable ; <nl> + import org . apache . cassandra . db . MemtableManager ; <nl> + import org . apache . cassandra . io . SequenceFile ; <nl> + import org . apache . cassandra . io . DataInputBuffer ; <nl> + import org . apache . cassandra . io . DataOutputBuffer ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> + public class RangeVerbHandler implements IVerbHandler <nl> + { <nl> + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) <nl> + { <nl> + public int compare ( String o1 , String o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + public void doVerb ( Message message ) <nl> + { <nl> + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; <nl> + final String startkey ; <nl> + if ( bytes . length = = 0 ) <nl> + { <nl> + startkey = " " ; <nl> + } <nl> + else <nl> + { <nl> + DataInputBuffer dib = new DataInputBuffer ( ) ; <nl> + dib . reset ( bytes , bytes . length ) ; <nl> + try <nl> + { <nl> + startkey = dib . readUTF ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; <nl> + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + <nl> + / / memtable keys : current and historical <nl> + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( <nl> + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , <nl> + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; <nl> + while ( it . hasNext ( ) ) <nl> + { <nl> + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) <nl> + { <nl> + public boolean evaluate ( Object key ) <nl> + { <nl> + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + <nl> + / / sstables <nl> + for ( String filename : cfs . getSSTableFilenames ( ) ) <nl> + { <nl> + try <nl> + { <nl> + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; <nl> + fs . seekTo ( startkey ) ; <nl> + iterators . add ( fs . iterator ( ) ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + String last = null , current = null ; <nl> + <nl> + while ( keys . size ( ) < 1000 ) <nl> + { <nl> + if ( ! iter . hasNext ( ) ) <nl> + { <nl> + break ; <nl> + } <nl> + current = iter . next ( ) ; <nl> + if ( ! current . equals ( last ) ) <nl> + { <nl> + last = current ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + try <nl> + { <nl> + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; <nl> + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) <nl> + { <nl> + keys . add ( current ) ; <nl> + break ; <nl> + } <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + for ( String key : keys ) <nl> + { <nl> + try <nl> + { <nl> + dob . writeUTF ( key ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; <nl> + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index 409cd5f . . 95de5c6 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; <nl> public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; <nl> public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; <nl> + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; <nl> <nl> public static enum ConsistencyLevel <nl> { <nl> diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed96f8 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> + <nl> + public class DestructivePQIterator < T > implements Iterator < T > { <nl> + private PriorityQueue < T > pq ; <nl> + <nl> + public DestructivePQIterator ( PriorityQueue < T > pq ) { <nl> + this . pq = pq ; <nl> + } <nl> + <nl> + public boolean hasNext ( ) { <nl> + return pq . size ( ) > 0 ; <nl> + } <nl> + <nl> + public T next ( ) { <nl> + return pq . poll ( ) ; <nl> + } <nl> + <nl> + public void remove ( ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> index 07c7dfe . . 762bbb5 100644 <nl> - - - a / test / org / apache / cassandra / service / CassandraServerTest . java <nl> + + + b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> + import com . facebook . thrift . TException ; <nl> + <nl> public class CassandraServerTest extends ServerTest { <nl> / * <nl> + TODO fix resetting server so this works <nl> + @ Test <nl> + public void test _ get _ range _ empty ( ) throws IOException , TException { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + server . start ( ) ; <nl> + <nl> + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; <nl> + } <nl> + * / <nl> + <nl> + / * <nl> + @ Test <nl> + public void test _ get _ range ( ) throws IOException , TException , CassandraException <nl> + { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + try <nl> + { <nl> + server . start ( ) ; <nl> + } <nl> + catch ( Throwable throwable ) <nl> + { <nl> + throw new RuntimeException ( throwable ) ; <nl> + } <nl> + <nl> + / / TODO insert some data <nl> + try { <nl> + String last = null ; <nl> + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { <nl> + if ( last ! = null ) { <nl> + assert last . compareTo ( key ) < 0 ; <nl> + } <nl> + last = key ; <nl> + } <nl> + } finally { <nl> + server . shutdown ( ) ; <nl> + } <nl> + } <nl> + * / <nl> + <nl> + / * <nl> @ Test <nl> public void test _ get _ column ( ) throws Throwable { <nl> CassandraServer server = new CassandraServer ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index bcd0b5c . . e613d7c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 11 
 + * AnticompactionRequestSerializer serializedSize is incorrect ( CASSANDRA - 12934 ) 
 * Prevent reloading of logback . xml from UDF sandbox ( CASSANDRA - 12535 ) 
 Merged from 2 . 2 : 
 * Avoid blocking gossip during pending range calculation ( CASSANDRA - 12281 ) 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java 
 index 3e47374 . . a29cc87 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / AnticompactionRequest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 import java . util . UUID ; 
 
 import org . apache . cassandra . dht . Range ; 
 @ @ - 46 , 6 + 47 , 23 @ @ public class AnticompactionRequest extends RepairMessage 
 this . successfulRanges = ranges ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof AnticompactionRequest ) ) 
 + return false ; 
 + AnticompactionRequest other = ( AnticompactionRequest ) o ; 
 + return messageType = = other . messageType & & 
 + parentRepairSession . equals ( other . parentRepairSession ) & & 
 + successfulRanges . equals ( other . successfulRanges ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType , parentRepairSession , successfulRanges ) ; 
 + } 
 + 
 public static class AnticompactionRequestSerializer implements MessageSerializer < AnticompactionRequest > 
 { 
 public void serialize ( AnticompactionRequest message , DataOutputPlus out , int version ) throws IOException 
 @ @ - 72 , 6 + 90 , 7 @ @ public class AnticompactionRequest extends RepairMessage 
 public long serializedSize ( AnticompactionRequest message , int version ) 
 { 
 long size = UUIDSerializer . serializer . serializedSize ( message . parentRepairSession , version ) ; 
 + size + = Integer . BYTES ; / / count of items in successfulRanges 
 for ( Range < Token > r : message . successfulRanges ) 
 size + = Range . tokenSerializer . serializedSize ( r , version ) ; 
 return size ; 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java b / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java 
 index 43a8f02 . . 69d147a 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / CleanupMessage . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . repair . messages ; 
 
 import java . io . IOException ; 
 + import java . util . Objects ; 
 import java . util . UUID ; 
 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 @ @ - 40 , 6 + 41 , 22 @ @ public class CleanupMessage extends RepairMessage 
 this . parentRepairSession = parentRepairSession ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof CleanupMessage ) ) 
 + return false ; 
 + CleanupMessage other = ( CleanupMessage ) o ; 
 + return messageType = = other . messageType & & 
 + parentRepairSession . equals ( other . parentRepairSession ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType , parentRepairSession ) ; 
 + } 
 + 
 public static class CleanupMessageSerializer implements MessageSerializer < CleanupMessage > 
 { 
 public void serialize ( CleanupMessage message , DataOutputPlus out , int version ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 index 8909f1b . . b3efeae 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . IOException ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 import java . util . UUID ; 
 
 import org . apache . cassandra . db . TypeSizes ; 
 @ @ - 54 , 6 + 55 , 27 @ @ public class PrepareMessage extends RepairMessage 
 this . isGlobal = isGlobal ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof PrepareMessage ) ) 
 + return false ; 
 + PrepareMessage other = ( PrepareMessage ) o ; 
 + return messageType = = other . messageType & & 
 + parentRepairSession . equals ( other . parentRepairSession ) & & 
 + isIncremental = = other . isIncremental & & 
 + isGlobal = = other . isGlobal & & 
 + timestamp = = other . timestamp & & 
 + cfIds . equals ( other . cfIds ) & & 
 + ranges . equals ( other . ranges ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType , parentRepairSession , isGlobal , isIncremental , timestamp , cfIds , ranges ) ; 
 + } 
 + 
 public static class PrepareMessageSerializer implements MessageSerializer < PrepareMessage > 
 { 
 public void serialize ( PrepareMessage message , DataOutputPlus out , int version ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java 
 index 1b15126 . . d4737d3 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / SnapshotMessage . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . repair . messages ; 
 
 import java . io . IOException ; 
 + import java . util . Objects ; 
 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 import org . apache . cassandra . io . util . DataOutputPlus ; 
 @ @ - 32 , 6 + 33 , 21 @ @ public class SnapshotMessage extends RepairMessage 
 super ( Type . SNAPSHOT , desc ) ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof SnapshotMessage ) ) 
 + return false ; 
 + SnapshotMessage other = ( SnapshotMessage ) o ; 
 + return messageType = = other . messageType ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType ) ; 
 + } 
 + 
 public static class SnapshotMessageSerializer implements MessageSerializer < SnapshotMessage > 
 { 
 public void serialize ( SnapshotMessage message , DataOutputPlus out , int version ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / SyncComplete . java b / src / java / org / apache / cassandra / repair / messages / SyncComplete . java 
 index 35cf5d4 . . 178e710 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / SyncComplete . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / SyncComplete . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . repair . messages ; 
 
 import java . io . IOException ; 
 import java . net . InetAddress ; 
 + import java . util . Objects ; 
 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 @ @ - 53 , 6 + 54 , 24 @ @ public class SyncComplete extends RepairMessage 
 this . success = success ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof SyncComplete ) ) 
 + return false ; 
 + SyncComplete other = ( SyncComplete ) o ; 
 + return messageType = = other . messageType & & 
 + desc . equals ( other . desc ) & & 
 + success = = other . success & & 
 + nodes . equals ( other . nodes ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType , desc , success , nodes ) ; 
 + } 
 + 
 private static class SyncCompleteSerializer implements MessageSerializer < SyncComplete > 
 { 
 public void serialize ( SyncComplete message , DataOutputPlus out , int version ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / SyncRequest . java b / src / java / org / apache / cassandra / repair / messages / SyncRequest . java 
 index 2c9799e . . f79f482 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / SyncRequest . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / SyncRequest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 @ @ - 57 , 6 + 58 , 26 @ @ public class SyncRequest extends RepairMessage 
 this . ranges = ranges ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof SyncRequest ) ) 
 + return false ; 
 + SyncRequest req = ( SyncRequest ) o ; 
 + return messageType = = req . messageType & & 
 + desc . equals ( req . desc ) & & 
 + initiator . equals ( req . initiator ) & & 
 + src . equals ( req . src ) & & 
 + dst . equals ( req . dst ) & & 
 + ranges . equals ( ranges ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType , desc , initiator , src , dst , ranges ) ; 
 + } 
 + 
 public static class SyncRequestSerializer implements MessageSerializer < SyncRequest > 
 { 
 public void serialize ( SyncRequest message , DataOutputPlus out , int version ) throws IOException 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java b / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java 
 index 90be8e5 . . 704bffb 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / ValidationComplete . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . repair . messages ; 
 
 import java . io . IOException ; 
 + import java . util . Objects ; 
 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . util . DataInputPlus ; 
 @ @ - 55 , 6 + 56 , 23 @ @ public class ValidationComplete extends RepairMessage 
 return trees ! = null ; 
 } 
 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof ValidationComplete ) ) 
 + return false ; 
 + 
 + ValidationComplete other = ( ValidationComplete ) o ; 
 + return messageType = = other . messageType & & 
 + desc . equals ( other . desc ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( messageType , desc ) ; 
 + } 
 + 
 private static class ValidationCompleteSerializer implements MessageSerializer < ValidationComplete > 
 { 
 public void serialize ( ValidationComplete message , DataOutputPlus out , int version ) throws IOException 
 diff - - git a / test / unit / org / apache / cassandra / repair / messages / RepairMessageSerializationsTest . java b / test / unit / org / apache / cassandra / repair / messages / RepairMessageSerializationsTest . java 
 new file mode 100644 
 index 0000000 . . 5dbed3f 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / repair / messages / RepairMessageSerializationsTest . java 
 @ @ - 0 , 0 + 1 , 187 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . repair . messages ; 
 + 
 + import java . io . IOException ; 
 + import java . net . InetAddress ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . UUID ; 
 + 
 + import org . junit . AfterClass ; 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . Murmur3Partitioner ; 
 + import org . apache . cassandra . dht . Murmur3Partitioner . LongToken ; 
 + import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . io . IVersionedSerializer ; 
 + import org . apache . cassandra . io . util . DataInputBuffer ; 
 + import org . apache . cassandra . io . util . DataInputPlus ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 + import org . apache . cassandra . io . util . DataOutputPlus ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . repair . NodePair ; 
 + import org . apache . cassandra . repair . RepairJobDesc ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . MerkleTrees ; 
 + 
 + public class RepairMessageSerializationsTest 
 + { 
 + private static final int PROTOCOL _ VERSION = MessagingService . current _ version ; 
 + private static final int GC _ BEFORE = 1000000 ; 
 + 
 + private static IPartitioner originalPartitioner ; 
 + 
 + @ BeforeClass 
 + public static void before ( ) 
 + { 
 + originalPartitioner = StorageService . instance . setPartitionerUnsafe ( Murmur3Partitioner . instance ) ; 
 + } 
 + 
 + @ AfterClass 
 + public static void after ( ) 
 + { 
 + DatabaseDescriptor . setPartitionerUnsafe ( originalPartitioner ) ; 
 + } 
 + 
 + @ Test 
 + public void validationRequestMessage ( ) throws IOException 
 + { 
 + RepairJobDesc jobDesc = buildRepairJobDesc ( ) ; 
 + ValidationRequest msg = new ValidationRequest ( jobDesc , GC _ BEFORE ) ; 
 + ValidationRequest deserialized = serializeRoundTrip ( msg , ValidationRequest . serializer ) ; 
 + Assert . assertEquals ( jobDesc , deserialized . desc ) ; 
 + } 
 + 
 + private RepairJobDesc buildRepairJobDesc ( ) 
 + { 
 + List < Range < Token > > tokenRanges = buildTokenRanges ( ) ; 
 + return new RepairJobDesc ( UUID . randomUUID ( ) , UUID . randomUUID ( ) , " serializationsTestKeyspace " , " repairMessages " , tokenRanges ) ; 
 + } 
 + 
 + private List < Range < Token > > buildTokenRanges ( ) 
 + { 
 + List < Range < Token > > tokenRanges = new ArrayList < > ( 4 ) ; 
 + tokenRanges . add ( new Range < > ( new LongToken ( 1000 ) , new LongToken ( 1001 ) ) ) ; 
 + tokenRanges . add ( new Range < > ( new LongToken ( 2000 ) , new LongToken ( 2001 ) ) ) ; 
 + tokenRanges . add ( new Range < > ( new LongToken ( 3000 ) , new LongToken ( 3001 ) ) ) ; 
 + tokenRanges . add ( new Range < > ( new LongToken ( 4000 ) , new LongToken ( 4001 ) ) ) ; 
 + return tokenRanges ; 
 + } 
 + 
 + private < T extends RepairMessage > T serializeRoundTrip ( T msg , IVersionedSerializer < T > serializer ) throws IOException 
 + { 
 + long size = serializer . serializedSize ( msg , PROTOCOL _ VERSION ) ; 
 + 
 + ByteBuffer buf = ByteBuffer . allocate ( ( int ) size ) ; 
 + DataOutputPlus out = new DataOutputBufferFixed ( buf ) ; 
 + serializer . serialize ( msg , out , PROTOCOL _ VERSION ) ; 
 + Assert . assertEquals ( size , buf . position ( ) ) ; 
 + 
 + buf . flip ( ) ; 
 + DataInputPlus in = new DataInputBuffer ( buf , false ) ; 
 + T deserialized = serializer . deserialize ( in , PROTOCOL _ VERSION ) ; 
 + Assert . assertEquals ( msg , deserialized ) ; 
 + Assert . assertEquals ( msg . hashCode ( ) , deserialized . hashCode ( ) ) ; 
 + return deserialized ; 
 + } 
 + 
 + @ Test 
 + public void validationCompleteMessage _ NoMerkleTree ( ) throws IOException 
 + { 
 + ValidationComplete deserialized = validationCompleteMessage ( null ) ; 
 + Assert . assertNull ( deserialized . trees ) ; 
 + } 
 + 
 + @ Test 
 + public void validationCompleteMessage _ WithMerkleTree ( ) throws IOException 
 + { 
 + MerkleTrees trees = new MerkleTrees ( Murmur3Partitioner . instance ) ; 
 + trees . addMerkleTree ( 256 , new Range < > ( new LongToken ( 1000 ) , new LongToken ( 1001 ) ) ) ; 
 + ValidationComplete deserialized = validationCompleteMessage ( trees ) ; 
 + 
 + / / a simple check to make sure we got some merkle trees back . 
 + Assert . assertEquals ( trees . size ( ) , deserialized . trees . size ( ) ) ; 
 + } 
 + 
 + private ValidationComplete validationCompleteMessage ( MerkleTrees trees ) throws IOException 
 + { 
 + RepairJobDesc jobDesc = buildRepairJobDesc ( ) ; 
 + ValidationComplete msg = trees = = null ? 
 + new ValidationComplete ( jobDesc ) : 
 + new ValidationComplete ( jobDesc , trees ) ; 
 + ValidationComplete deserialized = serializeRoundTrip ( msg , ValidationComplete . serializer ) ; 
 + return deserialized ; 
 + } 
 + 
 + @ Test 
 + public void syncRequestMessage ( ) throws IOException 
 + { 
 + InetAddress initiator = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; 
 + InetAddress src = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; 
 + InetAddress dst = InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ; 
 + 
 + SyncRequest msg = new SyncRequest ( buildRepairJobDesc ( ) , initiator , src , dst , buildTokenRanges ( ) ) ; 
 + serializeRoundTrip ( msg , SyncRequest . serializer ) ; 
 + } 
 + 
 + @ Test 
 + public void syncCompleteMessage ( ) throws IOException 
 + { 
 + InetAddress src = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; 
 + InetAddress dst = InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ; 
 + SyncComplete msg = new SyncComplete ( buildRepairJobDesc ( ) , new NodePair ( src , dst ) , true ) ; 
 + serializeRoundTrip ( msg , SyncComplete . serializer ) ; 
 + } 
 + 
 + @ Test 
 + public void antiCompactionRequestMessage ( ) throws IOException 
 + { 
 + AnticompactionRequest msg = new AnticompactionRequest ( UUID . randomUUID ( ) , buildTokenRanges ( ) ) ; 
 + serializeRoundTrip ( msg , AnticompactionRequest . serializer ) ; 
 + } 
 + 
 + @ Test 
 + public void prepareMessage ( ) throws IOException 
 + { 
 + PrepareMessage msg = new PrepareMessage ( UUID . randomUUID ( ) , new ArrayList < UUID > ( ) { { add ( UUID . randomUUID ( ) ) ; } } , 
 + buildTokenRanges ( ) , true , 100000L , false ) ; 
 + serializeRoundTrip ( msg , PrepareMessage . serializer ) ; 
 + } 
 + 
 + @ Test 
 + public void snapshotMessage ( ) throws IOException 
 + { 
 + SnapshotMessage msg = new SnapshotMessage ( buildRepairJobDesc ( ) ) ; 
 + serializeRoundTrip ( msg , SnapshotMessage . serializer ) ; 
 + } 
 + 
 + @ Test 
 + public void cleanupMessage ( ) throws IOException 
 + { 
 + CleanupMessage msg = new CleanupMessage ( UUID . randomUUID ( ) ) ; 
 + serializeRoundTrip ( msg , CleanupMessage . serializer ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 683009c . . 73cf3a6 100644 
 - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 18 , 21 + 18 , 24 @ @ 
 
 package org . apache . cassandra . config ; 
 
 - import java . util . * ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 - import java . io . * ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . SystemTable ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . TypeInfo ; 
 - import org . apache . cassandra . db . DBManager ; 
 - import org . apache . cassandra . db . SystemTable ; 
 - import org . apache . cassandra . db . Table . TableMetadata ; 
 import org . apache . cassandra . utils . FileUtils ; 
 import org . apache . cassandra . utils . XMLUtils ; 
 import org . w3c . dom . Node ; 
 import org . w3c . dom . NodeList ; 
 - import org . apache . cassandra . io . * ; 
 
 
 / * * 
 @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor 
 / * Read the table related stuff from config * / 
 NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; 
 int size = tables . getLength ( ) ; 
 + if ( size = = 0 ) { 
 + throw new UnsupportedOperationException ( " A Table must be configured " ) ; 
 + } 
 for ( int i = 0 ; i < size ; + + i ) 
 { 
 Node table = tables . item ( i ) ; 
 @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor 
 { 
 return tableToCFMetaDataMap _ ; 
 } 
 + 
 + public static String getTableName ( ) 
 + { 
 + return tables _ . get ( 0 ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java 
 index 51ac744 . . a2ac3a2 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily 
 return columns _ . getSortedColumns ( ) ; 
 } 
 
 - Map < String , IColumn > getColumns ( ) 
 + public Map < String , IColumn > getColumns ( ) 
 { 
 return columns _ . getColumns ( ) ; 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 index be7c245 . . 28bb3f7 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore 
 { 
 memtable _ . get ( ) . flushOnRecovery ( ) ; 
 } 
 + 
 + public Object getMemtable ( ) 
 + { 
 + return memtable _ . get ( ) ; 
 + } 
 + 
 + public Set < String > getSSTableFilenames ( ) 
 + { 
 + return Collections . unmodifiableSet ( ssTables _ ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java 
 index 2bdad37 . . 567b829 100644 
 - - - a / src / org / apache / cassandra / db / Memtable . java 
 + + + b / src / org / apache / cassandra / db / Memtable . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; 
 import org . apache . cassandra . io . SSTable ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . DestructivePQIterator ; 
 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > 
 columnFamilies _ . clear ( ) ; 
 } 
 
 + public Iterator < String > sortedKeyIterator ( ) 
 + { 
 + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java 
 index 997bbd3 . . 54242d1 100644 
 - - - a / src / org / apache / cassandra / db / MemtableManager . java 
 + + + b / src / org / apache / cassandra / db / MemtableManager . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager 
 private static Lock lock _ = new ReentrantLock ( ) ; 
 private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; 
 private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; 
 - static MemtableManager instance ( ) 
 + public static MemtableManager instance ( ) 
 { 
 if ( instance _ = = null ) 
 { 
 @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager 
 	 } 
 } 
 
 - 
 - 
 + public List < Memtable > getUnflushedMemtables ( String cfName ) 
 + { 
 + rwLock _ . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + List < Memtable > memtables = history _ . get ( cfName ) ; 
 + if ( memtables ! = null ) 
 + { 
 + return new ArrayList < Memtable > ( memtables ) ; 
 + } 
 + return Arrays . asList ( new Memtable [ 0 ] ) ; 
 + } 
 + finally 
 + { 
 + rwLock _ . readLock ( ) . unlock ( ) ; 
 + } 
 + } 
 
 } 
 diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java 
 index 9c84b42 . . f1b260a 100644 
 - - - a / src / org / apache / cassandra / db / Table . java 
 + + + b / src / org / apache / cassandra / db / Table . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class Table 
 * is basically the column family name and the ID associated with 
 * this column family . We use this ID in the Commit Log header to 
 * determine when a log file that has been rolled can be deleted . 
 - * / 
 + * / 
 public static class TableMetadata 
 { 
 / * Name of the column family * / 
 @ @ - 454 , 7 + 454 , 7 @ @ public class Table 
 return columnFamilyStores _ ; 
 } 
 
 - ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 { 
 return columnFamilyStores _ . get ( cfName ) ; 
 } 
 @ @ - 875 , 4 + 875 , 17 @ @ public class Table 
 long timeTaken = System . currentTimeMillis ( ) - start ; 
 dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; 
 } 
 + 
 + public Set < String > getApplicationColumnFamilies ( ) 
 + { 
 + Set < String > set = new HashSet < String > ( ) ; 
 + for ( String cfName : getColumnFamilies ( ) ) 
 + { 
 + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) 
 + { 
 + set . add ( cfName ) ; 
 + } 
 + } 
 + return set ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java 
 index 93b62e7 . . c2d5f66 100644 
 - - - a / src / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements 
 return result ; 
 } 
 
 + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException 
 + { 
 + logger _ . debug ( " get _ range " ) ; 
 + 
 + / / send request 
 + Message message ; 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + try 
 + { 
 + dob . writeUTF ( startkey ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " unable to write startkey " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , 
 + StorageService . readStage _ , 
 + StorageService . rangeVerbHandler _ , 
 + messageBody ) ; 
 + EndPoint endPoint ; 
 + try 
 + { 
 + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; 
 + } 
 + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; 
 + 
 + / / read response 
 + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , 
 + / / since they have to handle multiple requests anyway ? ) 
 + byte [ ] responseBody ; 
 + try 
 + { 
 + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; 
 + } 
 + catch ( TimeoutException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 + bufIn . reset ( responseBody , responseBody . length ) ; 
 + 
 + / / turn into List 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + while ( bufIn . getPosition ( ) < responseBody . length ) 
 + { 
 + try 
 + { 
 + keys . add ( bufIn . readUTF ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " bad utf " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + return keys ; 
 + } 
 + 
 / * 
 * This method is used to ensure that all keys 
 * prior to the specified key , as dtermined by 
 diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 3587907 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 @ @ - 0 , 0 + 1 , 152 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Comparator ; 
 + import java . util . Arrays ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . collections . IteratorUtils ; 
 + import org . apache . commons . collections . Predicate ; 
 + 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . db . IdentityFilter ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . FileStruct ; 
 + import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . Memtable ; 
 + import org . apache . cassandra . db . MemtableManager ; 
 + import org . apache . cassandra . io . SequenceFile ; 
 + import org . apache . cassandra . io . DataInputBuffer ; 
 + import org . apache . cassandra . io . DataOutputBuffer ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 + public class RangeVerbHandler implements IVerbHandler 
 + { 
 + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) 
 + { 
 + public int compare ( String o1 , String o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } ; 
 + 
 + public void doVerb ( Message message ) 
 + { 
 + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; 
 + final String startkey ; 
 + if ( bytes . length = = 0 ) 
 + { 
 + startkey = " " ; 
 + } 
 + else 
 + { 
 + DataInputBuffer dib = new DataInputBuffer ( ) ; 
 + dib . reset ( bytes , bytes . length ) ; 
 + try 
 + { 
 + startkey = dib . readUTF ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; 
 + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + 
 + / / memtable keys : current and historical 
 + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( 
 + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , 
 + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; 
 + while ( it . hasNext ( ) ) 
 + { 
 + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) 
 + { 
 + public boolean evaluate ( Object key ) 
 + { 
 + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + / / sstables 
 + for ( String filename : cfs . getSSTableFilenames ( ) ) 
 + { 
 + try 
 + { 
 + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; 
 + fs . seekTo ( startkey ) ; 
 + iterators . add ( fs . iterator ( ) ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + String last = null , current = null ; 
 + 
 + while ( keys . size ( ) < 1000 ) 
 + { 
 + if ( ! iter . hasNext ( ) ) 
 + { 
 + break ; 
 + } 
 + current = iter . next ( ) ; 
 + if ( ! current . equals ( last ) ) 
 + { 
 + last = current ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + try 
 + { 
 + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; 
 + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) 
 + { 
 + keys . add ( current ) ; 
 + break ; 
 + } 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + for ( String key : keys ) 
 + { 
 + try 
 + { 
 + dob . writeUTF ( key ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; 
 + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index 409cd5f . . 95de5c6 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; 
 public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; 
 public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; 
 + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; 
 
 public static enum ConsistencyLevel 
 { 
 diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 new file mode 100644 
 index 0000000 . . 0ed96f8 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 + 
 + public class DestructivePQIterator < T > implements Iterator < T > { 
 + private PriorityQueue < T > pq ; 
 + 
 + public DestructivePQIterator ( PriorityQueue < T > pq ) { 
 + this . pq = pq ; 
 + } 
 + 
 + public boolean hasNext ( ) { 
 + return pq . size ( ) > 0 ; 
 + } 
 + 
 + public T next ( ) { 
 + return pq . poll ( ) ; 
 + } 
 + 
 + public void remove ( ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + } 
 + 
 diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java 
 index 07c7dfe . . 762bbb5 100644 
 - - - a / test / org / apache / cassandra / service / CassandraServerTest . java 
 + + + b / test / org / apache / cassandra / service / CassandraServerTest . java 
 @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; 
 import java . io . IOException ; 
 import java . util . * ; 
 
 + import com . facebook . thrift . TException ; 
 + 
 public class CassandraServerTest extends ServerTest { 
 / * 
 + TODO fix resetting server so this works 
 + @ Test 
 + public void test _ get _ range _ empty ( ) throws IOException , TException { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + server . start ( ) ; 
 + 
 + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; 
 + } 
 + * / 
 + 
 + / * 
 + @ Test 
 + public void test _ get _ range ( ) throws IOException , TException , CassandraException 
 + { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + try 
 + { 
 + server . start ( ) ; 
 + } 
 + catch ( Throwable throwable ) 
 + { 
 + throw new RuntimeException ( throwable ) ; 
 + } 
 + 
 + / / TODO insert some data 
 + try { 
 + String last = null ; 
 + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { 
 + if ( last ! = null ) { 
 + assert last . compareTo ( key ) < 0 ; 
 + } 
 + last = key ; 
 + } 
 + } finally { 
 + server . shutdown ( ) ; 
 + } 
 + } 
 + * / 
 + 
 + / * 
 @ Test 
 public void test _ get _ column ( ) throws Throwable { 
 CassandraServer server = new CassandraServer ( ) ;
