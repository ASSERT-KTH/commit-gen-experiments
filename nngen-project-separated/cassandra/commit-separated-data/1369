BLEU SCORE: 0.041961149062965476

TEST MSG: Make ROLE based statements backwards compatible with USER based syntax
GENERATED MSG: Update CQL docs with auth and DCL info

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 06b524d . . fc56d72 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 1 <nl> + * Support string literals as Role names for compatibility ( CASSANDRA - 10135 ) <nl> * Allow count ( * ) and count ( 1 ) to be use as normal aggregation ( CASSANDRA - 10114 ) <nl> * An NPE is thrown if the column name is unknown for an IN relation ( CASSANDRA - 10043 ) <nl> * Apply commit _ failure _ policy to more errors on startup ( CASSANDRA - 9749 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 3d2aba5 . . 17cef8b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 1162 , 6 + 1162 , 7 @ @ idxName [ IndexName name ] <nl> <nl> roleName [ RoleName name ] <nl> : t = IDENT { $ name . setName ( $ t . text , false ) ; } <nl> + | s = STRING _ LITERAL { $ name . setName ( $ s . text , false ) ; } <nl> | t = QUOTED _ NAME { $ name . setName ( $ t . text , true ) ; } <nl> | k = unreserved _ keyword { $ name . setName ( k , false ) ; } <nl> | QMARK { addRecognitionError ( " Bind variables cannot be used for role names " ) ; } <nl> @ @ - 1486 , 6 + 1487 , 7 @ @ tuple _ type returns [ CQL3Type . Raw t ] <nl> username <nl> : IDENT <nl> | STRING _ LITERAL <nl> + | QUOTED _ NAME { addRecognitionError ( " Quoted strings are are not supported for user names and USER is deprecated , please use ROLE " ) ; } <nl> ; <nl> <nl> / / Basically the same as cident , but we need to exlude existing CQL3 types <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java <nl> index 9dfa47b . . 0cb1de2 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import org . apache . cassandra . cql3 . CQLTester ; <nl> <nl> public class RoleSyntaxTest extends CQLTester <nl> { <nl> + private final String NO _ QUOTED _ USERNAME = " Quoted strings are are not supported for user names " + <nl> + " and USER is deprecated , please use ROLE " ; <nl> @ Test <nl> public void standardOptionsSyntaxTest ( ) throws Throwable <nl> { <nl> @ @ - 40 , 7 + 42 , 7 @ @ public class RoleSyntaxTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void customOptionsSyntaxTestl ( ) throws Throwable <nl> + public void customOptionsSyntaxTest ( ) throws Throwable <nl> { <nl> assertValidSyntax ( " CREATE ROLE r WITH OPTIONS = { ' a ' : ' b ' , ' b ' : 1 } " ) ; <nl> assertInvalidSyntax ( " CREATE ROLE r WITH OPTIONS = ' term ' " ) ; <nl> @ @ - 50 , 4 + 52 , 110 @ @ public class RoleSyntaxTest extends CQLTester <nl> assertInvalidSyntax ( " ALTER ROLE r WITH OPTIONS = ' term ' " ) ; <nl> assertInvalidSyntax ( " ALTER ROLE r WITH OPTIONS = 99 " ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void createSyntaxTest ( ) throws Throwable <nl> + { <nl> + assertValidSyntax ( " CREATE ROLE r1 " ) ; <nl> + assertValidSyntax ( " CREATE ROLE ' r1 ' " ) ; <nl> + assertValidSyntax ( " CREATE ROLE \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " CREATE ROLE $ $ r1 $ $ " ) ; <nl> + assertValidSyntax ( " CREATE ROLE $ $ r1 ' x $ x ' $ $ " ) ; <nl> + assertValidSyntax ( " CREATE USER u1 " ) ; <nl> + assertValidSyntax ( " CREATE USER ' u1 ' " ) ; <nl> + assertValidSyntax ( " CREATE USER $ $ u1 $ $ " ) ; <nl> + assertValidSyntax ( " CREATE USER $ $ u1 ' x $ x ' $ $ " ) ; <nl> + / / user names may not be quoted names <nl> + assertInvalidSyntax ( " CREATE USER \ " u1 \ " " , NO _ QUOTED _ USERNAME ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void dropSyntaxTest ( ) throws Throwable <nl> + { <nl> + assertValidSyntax ( " DROP ROLE r1 " ) ; <nl> + assertValidSyntax ( " DROP ROLE ' r1 ' " ) ; <nl> + assertValidSyntax ( " DROP ROLE \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " DROP ROLE $ $ r1 $ $ " ) ; <nl> + assertValidSyntax ( " DROP ROLE $ $ r1 ' x $ x ' $ $ " ) ; <nl> + assertValidSyntax ( " DROP USER u1 " ) ; <nl> + assertValidSyntax ( " DROP USER ' u1 ' " ) ; <nl> + assertValidSyntax ( " DROP USER $ $ u1 $ $ " ) ; <nl> + assertValidSyntax ( " DROP USER $ $ u1 ' x $ x ' $ $ " ) ; <nl> + / / user names may not be quoted names <nl> + assertInvalidSyntax ( " DROP USER \ " u1 \ " " , NO _ QUOTED _ USERNAME ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void alterSyntaxTest ( ) throws Throwable <nl> + { <nl> + assertValidSyntax ( " ALTER ROLE r1 WITH PASSWORD = ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER ROLE ' r1 ' WITH PASSWORD = ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER ROLE \ " r1 \ " WITH PASSWORD = ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER ROLE $ $ r1 $ $ WITH PASSWORD = ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER ROLE $ $ r1 ' x $ x ' $ $ WITH PASSWORD = ' password ' " ) ; <nl> + / / ALTER has slightly different form for USER ( no = ) <nl> + assertValidSyntax ( " ALTER USER u1 WITH PASSWORD ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER USER ' u1 ' WITH PASSWORD ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER USER $ $ u1 $ $ WITH PASSWORD ' password ' " ) ; <nl> + assertValidSyntax ( " ALTER USER $ $ u1 ' x $ x ' $ $ WITH PASSWORD ' password ' " ) ; <nl> + / / user names may not be quoted names <nl> + assertInvalidSyntax ( " ALTER USER \ " u1 \ " WITH PASSWORD ' password ' " , NO _ QUOTED _ USERNAME ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void grantRevokePermissionsSyntaxTest ( ) throws Throwable <nl> + { <nl> + / / grant / revoke on RoleResource <nl> + assertValidSyntax ( " GRANT ALTER ON ROLE r1 TO r2 " ) ; <nl> + assertValidSyntax ( " GRANT ALTER ON ROLE ' r1 ' TO \ " r2 \ " " ) ; <nl> + assertValidSyntax ( " GRANT ALTER ON ROLE \ " r1 \ " TO ' r2 ' " ) ; <nl> + assertValidSyntax ( " GRANT ALTER ON ROLE $ $ r1 $ $ TO $ $ r ' 2 ' $ $ " ) ; <nl> + assertValidSyntax ( " REVOKE ALTER ON ROLE r1 FROM r2 " ) ; <nl> + assertValidSyntax ( " REVOKE ALTER ON ROLE ' r1 ' FROM \ " r2 \ " " ) ; <nl> + assertValidSyntax ( " REVOKE ALTER ON ROLE \ " r1 \ " FROM ' r2 ' " ) ; <nl> + assertValidSyntax ( " REVOKE ALTER ON ROLE $ $ r1 $ $ FROM $ $ r ' 2 ' $ $ " ) ; <nl> + <nl> + / / grant / revoke on DataResource <nl> + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO r1 " ) ; <nl> + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO ' r1 ' " ) ; <nl> + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO $ $ r ' 1 ' $ $ " ) ; <nl> + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM r1 " ) ; <nl> + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM ' r1 ' " ) ; <nl> + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM $ $ r ' 1 ' $ $ " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void listPermissionsSyntaxTest ( ) throws Throwable <nl> + { <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF r1 " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF ' r1 ' " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF $ $ r ' 1 ' $ $ " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE ' r1 ' OF r2 " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE \ " r1 \ " OF r2 " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE $ $ r ' 1 ' $ $ OF r2 " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE ' r1 ' OF ' r2 ' " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE \ " r1 \ " OF \ " r2 \ " " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE $ $ r1 $ $ OF $ $ r ' 2 ' $ $ " ) ; <nl> + <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF r1 " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF ' r1 ' " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF $ $ r ' 1 ' $ $ " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS OF r1 " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS OF ' r1 ' " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS OF \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " LIST ALL PERMISSIONS OF $ $ r ' 1 ' $ $ " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void listRolesSyntaxTest ( ) throws Throwable <nl> + { <nl> + assertValidSyntax ( " LIST ROLES OF r1 " ) ; <nl> + assertValidSyntax ( " LIST ROLES OF ' r1 ' " ) ; <nl> + assertValidSyntax ( " LIST ROLES OF \ " r1 \ " " ) ; <nl> + assertValidSyntax ( " LIST ROLES OF $ $ r ' 1 ' $ $ " ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 06b524d . . fc56d72 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 1 
 + * Support string literals as Role names for compatibility ( CASSANDRA - 10135 ) 
 * Allow count ( * ) and count ( 1 ) to be use as normal aggregation ( CASSANDRA - 10114 ) 
 * An NPE is thrown if the column name is unknown for an IN relation ( CASSANDRA - 10043 ) 
 * Apply commit _ failure _ policy to more errors on startup ( CASSANDRA - 9749 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 3d2aba5 . . 17cef8b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 1162 , 6 + 1162 , 7 @ @ idxName [ IndexName name ] 
 
 roleName [ RoleName name ] 
 : t = IDENT { $ name . setName ( $ t . text , false ) ; } 
 + | s = STRING _ LITERAL { $ name . setName ( $ s . text , false ) ; } 
 | t = QUOTED _ NAME { $ name . setName ( $ t . text , true ) ; } 
 | k = unreserved _ keyword { $ name . setName ( k , false ) ; } 
 | QMARK { addRecognitionError ( " Bind variables cannot be used for role names " ) ; } 
 @ @ - 1486 , 6 + 1487 , 7 @ @ tuple _ type returns [ CQL3Type . Raw t ] 
 username 
 : IDENT 
 | STRING _ LITERAL 
 + | QUOTED _ NAME { addRecognitionError ( " Quoted strings are are not supported for user names and USER is deprecated , please use ROLE " ) ; } 
 ; 
 
 / / Basically the same as cident , but we need to exlude existing CQL3 types 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java 
 index 9dfa47b . . 0cb1de2 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / miscellaneous / RoleSyntaxTest . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import org . apache . cassandra . cql3 . CQLTester ; 
 
 public class RoleSyntaxTest extends CQLTester 
 { 
 + private final String NO _ QUOTED _ USERNAME = " Quoted strings are are not supported for user names " + 
 + " and USER is deprecated , please use ROLE " ; 
 @ Test 
 public void standardOptionsSyntaxTest ( ) throws Throwable 
 { 
 @ @ - 40 , 7 + 42 , 7 @ @ public class RoleSyntaxTest extends CQLTester 
 } 
 
 @ Test 
 - public void customOptionsSyntaxTestl ( ) throws Throwable 
 + public void customOptionsSyntaxTest ( ) throws Throwable 
 { 
 assertValidSyntax ( " CREATE ROLE r WITH OPTIONS = { ' a ' : ' b ' , ' b ' : 1 } " ) ; 
 assertInvalidSyntax ( " CREATE ROLE r WITH OPTIONS = ' term ' " ) ; 
 @ @ - 50 , 4 + 52 , 110 @ @ public class RoleSyntaxTest extends CQLTester 
 assertInvalidSyntax ( " ALTER ROLE r WITH OPTIONS = ' term ' " ) ; 
 assertInvalidSyntax ( " ALTER ROLE r WITH OPTIONS = 99 " ) ; 
 } 
 + 
 + @ Test 
 + public void createSyntaxTest ( ) throws Throwable 
 + { 
 + assertValidSyntax ( " CREATE ROLE r1 " ) ; 
 + assertValidSyntax ( " CREATE ROLE ' r1 ' " ) ; 
 + assertValidSyntax ( " CREATE ROLE \ " r1 \ " " ) ; 
 + assertValidSyntax ( " CREATE ROLE $ $ r1 $ $ " ) ; 
 + assertValidSyntax ( " CREATE ROLE $ $ r1 ' x $ x ' $ $ " ) ; 
 + assertValidSyntax ( " CREATE USER u1 " ) ; 
 + assertValidSyntax ( " CREATE USER ' u1 ' " ) ; 
 + assertValidSyntax ( " CREATE USER $ $ u1 $ $ " ) ; 
 + assertValidSyntax ( " CREATE USER $ $ u1 ' x $ x ' $ $ " ) ; 
 + / / user names may not be quoted names 
 + assertInvalidSyntax ( " CREATE USER \ " u1 \ " " , NO _ QUOTED _ USERNAME ) ; 
 + } 
 + 
 + @ Test 
 + public void dropSyntaxTest ( ) throws Throwable 
 + { 
 + assertValidSyntax ( " DROP ROLE r1 " ) ; 
 + assertValidSyntax ( " DROP ROLE ' r1 ' " ) ; 
 + assertValidSyntax ( " DROP ROLE \ " r1 \ " " ) ; 
 + assertValidSyntax ( " DROP ROLE $ $ r1 $ $ " ) ; 
 + assertValidSyntax ( " DROP ROLE $ $ r1 ' x $ x ' $ $ " ) ; 
 + assertValidSyntax ( " DROP USER u1 " ) ; 
 + assertValidSyntax ( " DROP USER ' u1 ' " ) ; 
 + assertValidSyntax ( " DROP USER $ $ u1 $ $ " ) ; 
 + assertValidSyntax ( " DROP USER $ $ u1 ' x $ x ' $ $ " ) ; 
 + / / user names may not be quoted names 
 + assertInvalidSyntax ( " DROP USER \ " u1 \ " " , NO _ QUOTED _ USERNAME ) ; 
 + } 
 + 
 + @ Test 
 + public void alterSyntaxTest ( ) throws Throwable 
 + { 
 + assertValidSyntax ( " ALTER ROLE r1 WITH PASSWORD = ' password ' " ) ; 
 + assertValidSyntax ( " ALTER ROLE ' r1 ' WITH PASSWORD = ' password ' " ) ; 
 + assertValidSyntax ( " ALTER ROLE \ " r1 \ " WITH PASSWORD = ' password ' " ) ; 
 + assertValidSyntax ( " ALTER ROLE $ $ r1 $ $ WITH PASSWORD = ' password ' " ) ; 
 + assertValidSyntax ( " ALTER ROLE $ $ r1 ' x $ x ' $ $ WITH PASSWORD = ' password ' " ) ; 
 + / / ALTER has slightly different form for USER ( no = ) 
 + assertValidSyntax ( " ALTER USER u1 WITH PASSWORD ' password ' " ) ; 
 + assertValidSyntax ( " ALTER USER ' u1 ' WITH PASSWORD ' password ' " ) ; 
 + assertValidSyntax ( " ALTER USER $ $ u1 $ $ WITH PASSWORD ' password ' " ) ; 
 + assertValidSyntax ( " ALTER USER $ $ u1 ' x $ x ' $ $ WITH PASSWORD ' password ' " ) ; 
 + / / user names may not be quoted names 
 + assertInvalidSyntax ( " ALTER USER \ " u1 \ " WITH PASSWORD ' password ' " , NO _ QUOTED _ USERNAME ) ; 
 + } 
 + 
 + @ Test 
 + public void grantRevokePermissionsSyntaxTest ( ) throws Throwable 
 + { 
 + / / grant / revoke on RoleResource 
 + assertValidSyntax ( " GRANT ALTER ON ROLE r1 TO r2 " ) ; 
 + assertValidSyntax ( " GRANT ALTER ON ROLE ' r1 ' TO \ " r2 \ " " ) ; 
 + assertValidSyntax ( " GRANT ALTER ON ROLE \ " r1 \ " TO ' r2 ' " ) ; 
 + assertValidSyntax ( " GRANT ALTER ON ROLE $ $ r1 $ $ TO $ $ r ' 2 ' $ $ " ) ; 
 + assertValidSyntax ( " REVOKE ALTER ON ROLE r1 FROM r2 " ) ; 
 + assertValidSyntax ( " REVOKE ALTER ON ROLE ' r1 ' FROM \ " r2 \ " " ) ; 
 + assertValidSyntax ( " REVOKE ALTER ON ROLE \ " r1 \ " FROM ' r2 ' " ) ; 
 + assertValidSyntax ( " REVOKE ALTER ON ROLE $ $ r1 $ $ FROM $ $ r ' 2 ' $ $ " ) ; 
 + 
 + / / grant / revoke on DataResource 
 + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO r1 " ) ; 
 + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO ' r1 ' " ) ; 
 + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO \ " r1 \ " " ) ; 
 + assertValidSyntax ( " GRANT SELECT ON KEYSPACE ks TO $ $ r ' 1 ' $ $ " ) ; 
 + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM r1 " ) ; 
 + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM ' r1 ' " ) ; 
 + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM \ " r1 \ " " ) ; 
 + assertValidSyntax ( " REVOKE SELECT ON KEYSPACE ks FROM $ $ r ' 1 ' $ $ " ) ; 
 + } 
 + 
 + @ Test 
 + public void listPermissionsSyntaxTest ( ) throws Throwable 
 + { 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF r1 " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF ' r1 ' " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF \ " r1 \ " " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL ROLES OF $ $ r ' 1 ' $ $ " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE ' r1 ' OF r2 " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE \ " r1 \ " OF r2 " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE $ $ r ' 1 ' $ $ OF r2 " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE ' r1 ' OF ' r2 ' " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE \ " r1 \ " OF \ " r2 \ " " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ROLE $ $ r1 $ $ OF $ $ r ' 2 ' $ $ " ) ; 
 + 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF r1 " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF ' r1 ' " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF \ " r1 \ " " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS ON ALL KEYSPACES OF $ $ r ' 1 ' $ $ " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS OF r1 " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS OF ' r1 ' " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS OF \ " r1 \ " " ) ; 
 + assertValidSyntax ( " LIST ALL PERMISSIONS OF $ $ r ' 1 ' $ $ " ) ; 
 + } 
 + 
 + @ Test 
 + public void listRolesSyntaxTest ( ) throws Throwable 
 + { 
 + assertValidSyntax ( " LIST ROLES OF r1 " ) ; 
 + assertValidSyntax ( " LIST ROLES OF ' r1 ' " ) ; 
 + assertValidSyntax ( " LIST ROLES OF \ " r1 \ " " ) ; 
 + assertValidSyntax ( " LIST ROLES OF $ $ r ' 1 ' $ $ " ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
