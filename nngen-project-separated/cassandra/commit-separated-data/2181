BLEU SCORE: 0.03089055318156698

TEST MSG: Don ' t send schema change msg for no - op DDL stmts
GENERATED MSG: Re - enable unknown options in compaction / replication strategy

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 71cfca0 . . 9aeeb29 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 10 <nl> + * Don ' t send schema change responses and events for no - op DDL <nl> + statements ( CASSANDRA - 7600 ) <nl> * ( Hadoop ) fix cluster initialisation for a split fetching ( CASSANDRA - 7774 ) <nl> * Configure system . paxos with LeveledCompactionStrategy ( CASSANDRA - 7753 ) <nl> * Fix ALTER clustering column type from DateType to TimestampType when <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> index 39d1cde . . 4f6d1f2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class AlterKeyspaceStatement extends SchemaAlteringStatement <nl> } <nl> } <nl> <nl> - public void announceMigration ( ) throws RequestValidationException <nl> + public boolean announceMigration ( ) throws RequestValidationException <nl> { <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( name ) ; <nl> / / In the ( very ) unlikely case the keyspace was dropped since validate ( ) <nl> @ @ - 87 , 6 + 87 , 7 @ @ public class AlterKeyspaceStatement extends SchemaAlteringStatement <nl> throw new InvalidRequestException ( " Unknown keyspace " + name ) ; <nl> <nl> MigrationManager . announceKeyspaceUpdate ( attrs . asKSMetadataUpdate ( ksm ) ) ; <nl> + return true ; <nl> } <nl> <nl> public ResultMessage . SchemaChange . Change changeType ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 136c430 . . dfcd601 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 76 , 7 + 76 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> / / validated in announceMigration ( ) <nl> } <nl> <nl> - public void announceMigration ( ) throws RequestValidationException <nl> + public boolean announceMigration ( ) throws RequestValidationException <nl> { <nl> CFMetaData meta = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> CFMetaData cfm = meta . clone ( ) ; <nl> @ @ - 266 , 6 + 266 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> } <nl> <nl> MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; <nl> + return true ; <nl> } <nl> <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> index 376fa4a . . 8b40978 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> @ @ - 103 , 14 + 103 , 14 @ @ public class CreateIndexStatement extends SchemaAlteringStatement <nl> throw new InvalidRequestException ( String . format ( " Cannot add secondary index to already primarily indexed column % s " , columnName ) ) ; <nl> } <nl> <nl> - public void announceMigration ( ) throws RequestValidationException <nl> + public boolean announceMigration ( ) throws RequestValidationException <nl> { <nl> logger . debug ( " Updating column { } definition for index { } " , columnName , indexName ) ; <nl> CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; <nl> ColumnDefinition cd = cfm . getColumnDefinition ( columnName . key ) ; <nl> <nl> if ( cd . getIndexType ( ) ! = null & & ifNotExists ) <nl> - return ; <nl> + return false ; <nl> <nl> if ( properties . isCustom ) <nl> cd . setIndexType ( IndexType . CUSTOM , properties . getOptions ( ) ) ; <nl> @ @ - 122 , 6 + 122 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement <nl> cd . setIndexName ( indexName ) ; <nl> cfm . addDefaultIndexNames ( ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; <nl> + return true ; <nl> } <nl> <nl> public ResultMessage . SchemaChange . Change changeType ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> index 2ed1d91 . . 7a8473a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> @ @ - 97 , 16 + 97 , 18 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement <nl> attrs . getReplicationOptions ( ) ) ; <nl> } <nl> <nl> - public void announceMigration ( ) throws RequestValidationException <nl> + public boolean announceMigration ( ) throws RequestValidationException <nl> { <nl> try <nl> { <nl> MigrationManager . announceNewKeyspace ( attrs . asKSMetadata ( name ) ) ; <nl> + return true ; <nl> } <nl> catch ( AlreadyExistsException e ) <nl> { <nl> - if ( ! ifNotExists ) <nl> - throw e ; <nl> + if ( ifNotExists ) <nl> + return false ; <nl> + throw e ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> index 08ad069 . . b7f43d3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> @ @ - 114 , 16 + 114 , 18 @ @ public class CreateTableStatement extends SchemaAlteringStatement <nl> return columnDefs ; <nl> } <nl> <nl> - public void announceMigration ( ) throws RequestValidationException <nl> + public boolean announceMigration ( ) throws RequestValidationException <nl> { <nl> try <nl> { <nl> - MigrationManager . announceNewColumnFamily ( getCFMetaData ( ) ) ; <nl> + MigrationManager . announceNewColumnFamily ( getCFMetaData ( ) ) ; <nl> + return true ; <nl> } <nl> catch ( AlreadyExistsException e ) <nl> { <nl> - if ( ! ifNotExists ) <nl> - throw e ; <nl> + if ( ifNotExists ) <nl> + return false ; <nl> + throw e ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> index 760d870 . . 70b3acb 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> @ @ - 65 , 12 + 65 , 13 @ @ public class CreateTriggerStatement extends SchemaAlteringStatement <nl> } <nl> } <nl> <nl> - public void announceMigration ( ) throws ConfigurationException <nl> + public boolean announceMigration ( ) throws ConfigurationException <nl> { <nl> CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; <nl> cfm . addTriggerDefinition ( TriggerDefinition . create ( triggerName , triggerClass ) ) ; <nl> logger . info ( " Adding trigger with name { } and class { } " , triggerName , triggerClass ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; <nl> + return true ; <nl> } <nl> <nl> public ResultMessage . SchemaChange . Change changeType ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> index c62ad47 . . ac5262e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> @ @ - 60 , 14 + 60 , 15 @ @ public class DropIndexStatement extends SchemaAlteringStatement <nl> return ResultMessage . SchemaChange . Change . UPDATED ; <nl> } <nl> <nl> - public void announceMigration ( ) throws InvalidRequestException , ConfigurationException <nl> + public boolean announceMigration ( ) throws InvalidRequestException , ConfigurationException <nl> { <nl> CFMetaData cfm = findIndexedCF ( ) ; <nl> if ( cfm = = null ) <nl> - return ; <nl> + return false ; <nl> <nl> CFMetaData updatedCfm = updateCFMetadata ( cfm ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( updatedCfm , false ) ; <nl> + return true ; <nl> } <nl> <nl> private CFMetaData updateCFMetadata ( CFMetaData cfm ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java <nl> index 30fd964 . . 7582af0 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java <nl> @ @ - 55 , 16 + 55 , 18 @ @ public class DropKeyspaceStatement extends SchemaAlteringStatement <nl> return keyspace ; <nl> } <nl> <nl> - public void announceMigration ( ) throws ConfigurationException <nl> + public boolean announceMigration ( ) throws ConfigurationException <nl> { <nl> try <nl> { <nl> MigrationManager . announceKeyspaceDrop ( keyspace ) ; <nl> + return true ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> - if ( ! ifExists ) <nl> - throw e ; <nl> + if ( ifExists ) <nl> + return false ; <nl> + throw e ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java <nl> index d27261c . . 65a3f14 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java <nl> @ @ - 54 , 16 + 54 , 18 @ @ public class DropTableStatement extends SchemaAlteringStatement <nl> / / validated in announceMigration ( ) <nl> } <nl> <nl> - public void announceMigration ( ) throws ConfigurationException <nl> + public boolean announceMigration ( ) throws ConfigurationException <nl> { <nl> try <nl> { <nl> MigrationManager . announceColumnFamilyDrop ( keyspace ( ) , columnFamily ( ) ) ; <nl> + return true ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> - if ( ! ifExists ) <nl> - throw e ; <nl> + if ( ifExists ) <nl> + return false ; <nl> + throw e ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> index ce17047 . . f0bd637 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> @ @ - 53 , 13 + 53 , 14 @ @ public class DropTriggerStatement extends SchemaAlteringStatement <nl> ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> } <nl> <nl> - public void announceMigration ( ) throws ConfigurationException <nl> + public boolean announceMigration ( ) throws ConfigurationException <nl> { <nl> CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; <nl> if ( ! cfm . removeTrigger ( triggerName ) ) <nl> throw new ConfigurationException ( String . format ( " Trigger % s was not found " , triggerName ) ) ; <nl> logger . info ( " Dropping trigger with name { } " , triggerName ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; <nl> + return true ; <nl> } <nl> <nl> public ResultMessage . SchemaChange . Change changeType ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> index 94df854 . . 845d8cc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> @ @ - 64 , 11 + 64 , 22 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL <nl> <nl> public abstract ResultMessage . SchemaChange . Change changeType ( ) ; <nl> <nl> - public abstract void announceMigration ( ) throws RequestValidationException ; <nl> + / * * <nl> + * Announces the migration to other nodes in the cluster . <nl> + * @ return true if the execution of this statement resulted in a schema change , false otherwise ( when IF NOT EXISTS <nl> + * is used , for example ) <nl> + * @ throws RequestValidationException <nl> + * / <nl> + public abstract boolean announceMigration ( ) throws RequestValidationException ; <nl> <nl> public ResultMessage execute ( QueryState state , QueryOptions options ) throws RequestValidationException <nl> { <nl> - announceMigration ( ) ; <nl> + / / If an IF [ NOT ] EXISTS clause was used , this may not result in an actual schema change . To avoid doing <nl> + / / extra work in the drivers to handle schema changes , we return an empty message in this case . ( CASSANDRA - 7600 ) <nl> + boolean didChangeSchema = announceMigration ( ) ; <nl> + if ( ! didChangeSchema ) <nl> + return new ResultMessage . Void ( ) ; <nl> + <nl> String tableName = cfName = = null | | columnFamily ( ) = = null ? " " : columnFamily ( ) ; <nl> return new ResultMessage . SchemaChange ( changeType ( ) , keyspace ( ) , tableName ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f4e854b . . d53a1e3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 14 , 6 + 14 , 7 @ @ <nl> * cli : Warn about missing CQL3 tables in schema descriptions ( CASSANDRA - 5309 ) <nl> * Re - enable unknown option in replication / compaction strategies option for <nl> backward compatibility ( CASSANDRA - 4795 ) <nl> + * Add binary protocol support to stress ( CASSANDRA - 4993 ) <nl> Merged from 1 . 1 : <nl> * nodetool : ability to repair specific range ( CASSANDRA - 5280 ) <nl> * Fix possible assertion triggered in SliceFromReadCommand ( CASSANDRA - 5284 ) <nl> diff - - git a / bin / cassandra b / bin / cassandra <nl> index 5403257 . . 25498aa 100755 <nl> - - - a / bin / cassandra <nl> + + + b / bin / cassandra <nl> @ @ - 129 , 7 + 129 , 7 @ @ launch _ service ( ) <nl> if [ " x $ pidpath " ! = " x " ] ; then <nl> cassandra _ parms = " $ cassandra _ parms - Dcassandra - pidfile = $ pidpath " <nl> fi <nl> - <nl> + <nl> # The cassandra - foreground option will tell CassandraDaemon not <nl> # to close stdout / stderr , but it ' s up to us not to background . <nl> if [ " x $ foreground " ! = " x " ] ; then <nl> diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> index f2963bd . . 7979570 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> @ @ - 93 , 6 + 93 , 11 @ @ public class SimpleClient <nl> this . encryptionOptions = encryptionOptions ; <nl> } <nl> <nl> + public SimpleClient ( String host , int port ) <nl> + { <nl> + this ( host , port , new ClientEncryptionOptions ( ) ) ; <nl> + } <nl> + <nl> public void connect ( boolean useCompression ) throws IOException <nl> { <nl> establishConnection ( ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> index 804e4e8 . . d16ee78 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . commons . cli . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> import org . apache . cassandra . thrift . * ; <nl> import org . apache . commons . lang . StringUtils ; <nl> <nl> @ @ - 95 , 6 + 96 , 7 @ @ public class Session implements Serializable <nl> availableOptions . addOption ( " l " , " replication - factor " , true , " Replication Factor to use when creating needed column families , default : 1 " ) ; <nl> availableOptions . addOption ( " L " , " enable - cql " , false , " Perform queries using CQL2 ( Cassandra Query Language v 2 . 0 . 0 ) " ) ; <nl> availableOptions . addOption ( " L3 " , " enable - cql3 " , false , " Perform queries using CQL3 ( Cassandra Query Language v 3 . 0 . 0 ) " ) ; <nl> + availableOptions . addOption ( " b " , " enable - native - protocol " , false , " Use the binary native protocol ( only work along with - L3 ) " ) ; <nl> availableOptions . addOption ( " P " , " use - prepared - statements " , false , " Perform queries using prepared statements ( only applicable to CQL ) . " ) ; <nl> availableOptions . addOption ( " e " , " consistency - level " , true , " Consistency Level to use ( ONE , QUORUM , LOCAL _ QUORUM , EACH _ QUORUM , ALL , ANY ) , default : ONE " ) ; <nl> availableOptions . addOption ( " x " , " create - index " , true , " Type of index to create on needed column families ( KEYS ) " ) ; <nl> @ @ - 138 , 6 + 140 , 7 @ @ public class Session implements Serializable <nl> private boolean enable _ cql = false ; <nl> private boolean use _ prepared = false ; <nl> private boolean trace = false ; <nl> + public boolean use _ native _ protocol = false ; <nl> <nl> private final String outFileName ; <nl> <nl> @ @ - 300 , 6 + 303 , 12 @ @ public class Session implements Serializable <nl> cqlVersion = " 3 . 0 . 0 " ; <nl> } <nl> <nl> + if ( cmd . hasOption ( " b " ) ) <nl> + { <nl> + if ( ! ( enable _ cql & & cqlVersion . startsWith ( " 3 " ) ) ) <nl> + throw new IllegalArgumentException ( " Cannot use binary protocol without - L3 " ) ; <nl> + use _ native _ protocol = true ; <nl> + } <nl> <nl> if ( cmd . hasOption ( " P " ) ) <nl> { <nl> @ @ - 691 , 6 + 700 , 7 @ @ public class Session implements Serializable <nl> { <nl> return getClient ( true ) ; <nl> } <nl> + <nl> / * * <nl> * Thrift client connection <nl> * @ param setKeyspace - should we set keyspace for client or not <nl> @ @ - 730 , 6 + 740 , 22 @ @ public class Session implements Serializable <nl> return client ; <nl> } <nl> <nl> + public SimpleClient getNativeClient ( ) <nl> + { <nl> + try <nl> + { <nl> + String currentNode = nodes [ Stress . randomizer . nextInt ( nodes . length ) ] ; <nl> + SimpleClient client = new SimpleClient ( currentNode , 9042 ) ; <nl> + client . connect ( false ) ; <nl> + client . execute ( " USE \ " Keyspace1 \ " ; " , org . apache . cassandra . db . ConsistencyLevel . ONE ) ; <nl> + return client ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> public static InetAddress getLocalAddress ( ) <nl> { <nl> if ( localInetAddress = = null ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> index 27675d1 . . 60e8cbd 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import com . yammer . metrics . stats . Snapshot ; <nl> import org . apache . cassandra . stress . operations . * ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> <nl> public class StressAction extends Thread <nl> { <nl> @ @ - 218 , 29 + 219 , 60 @ @ public class StressAction extends Thread <nl> <nl> public void run ( ) <nl> { <nl> - CassandraClient connection = client . getClient ( ) ; <nl> - <nl> - for ( int i = 0 ; i < items ; i + + ) <nl> + if ( client . use _ native _ protocol ) <nl> { <nl> - if ( stop ) <nl> - break ; <nl> + SimpleClient connection = client . getNativeClient ( ) ; <nl> <nl> - try <nl> + for ( int i = 0 ; i < items ; i + + ) <nl> { <nl> - operations . take ( ) . run ( connection ) ; / / running job <nl> + if ( stop ) <nl> + break ; <nl> + <nl> + try <nl> + { <nl> + operations . take ( ) . run ( connection ) ; / / running job <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + if ( output = = null ) <nl> + { <nl> + System . err . println ( e . getMessage ( ) ) ; <nl> + returnCode = StressAction . FAILURE ; <nl> + System . exit ( - 1 ) ; <nl> + } <nl> + <nl> + output . println ( e . getMessage ( ) ) ; <nl> + returnCode = StressAction . FAILURE ; <nl> + break ; <nl> + } <nl> } <nl> - catch ( Exception e ) <nl> + } <nl> + else <nl> + { <nl> + CassandraClient connection = client . getClient ( ) ; <nl> + <nl> + for ( int i = 0 ; i < items ; i + + ) <nl> { <nl> - if ( output = = null ) <nl> + if ( stop ) <nl> + break ; <nl> + <nl> + try <nl> { <nl> - System . err . println ( e . getMessage ( ) ) ; <nl> + operations . take ( ) . run ( connection ) ; / / running job <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + if ( output = = null ) <nl> + { <nl> + System . err . println ( e . getMessage ( ) ) ; <nl> + returnCode = StressAction . FAILURE ; <nl> + System . exit ( - 1 ) ; <nl> + } <nl> + <nl> + output . println ( e . getMessage ( ) ) ; <nl> returnCode = StressAction . FAILURE ; <nl> - System . exit ( - 1 ) ; <nl> + break ; <nl> } <nl> - <nl> - output . println ( e . getMessage ( ) ) ; <nl> - returnCode = StressAction . FAILURE ; <nl> - break ; <nl> } <nl> } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CQLOperation . java b / tools / stress / src / org / apache / cassandra / stress / operations / CQLOperation . java <nl> new file mode 100644 <nl> index 0000000 . . 54737a4 <nl> - - - / dev / null <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CQLOperation . java <nl> @ @ - 0 , 0 + 1 , 96 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . stress . operations ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . io . IOException ; <nl> + import java . util . List ; <nl> + <nl> + import org . apache . cassandra . stress . Session ; <nl> + import org . apache . cassandra . stress . util . CassandraClient ; <nl> + import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> + import org . apache . cassandra . thrift . Compression ; <nl> + import org . apache . cassandra . thrift . CqlResult ; <nl> + import org . apache . cassandra . thrift . ThriftConversion ; <nl> + <nl> + public abstract class CQLOperation extends Operation <nl> + { <nl> + public CQLOperation ( Session client , int idx ) <nl> + { <nl> + super ( client , idx ) ; <nl> + } <nl> + <nl> + protected abstract void run ( CQLQueryExecutor executor ) throws IOException ; <nl> + <nl> + protected abstract boolean validateThriftResult ( CqlResult result ) ; <nl> + <nl> + protected abstract boolean validateNativeResult ( ResultMessage result ) ; <nl> + <nl> + public void run ( final CassandraClient client ) throws IOException <nl> + { <nl> + run ( new CQLQueryExecutor ( ) <nl> + { <nl> + public boolean execute ( String cqlQuery , List < String > queryParams ) throws Exception <nl> + { <nl> + CqlResult result = null ; <nl> + if ( session . usePreparedStatements ( ) ) <nl> + { <nl> + Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> + if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> + result = client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) , session . getConsistencyLevel ( ) ) ; <nl> + else <nl> + result = client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) ) ; <nl> + } <nl> + else <nl> + { <nl> + String formattedQuery = formatCqlQuery ( cqlQuery , queryParams ) ; <nl> + if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> + result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> + else <nl> + result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> + } <nl> + return validateThriftResult ( result ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + public void run ( final SimpleClient client ) throws IOException <nl> + { <nl> + run ( new CQLQueryExecutor ( ) <nl> + { <nl> + public boolean execute ( String cqlQuery , List < String > queryParams ) throws Exception <nl> + { <nl> + ResultMessage result = null ; <nl> + if ( session . usePreparedStatements ( ) ) <nl> + { <nl> + byte [ ] stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> + result = client . executePrepared ( stmntId , queryParamsAsByteBuffer ( queryParams ) , ThriftConversion . fromThrift ( session . getConsistencyLevel ( ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + String formattedQuery = formatCqlQuery ( cqlQuery , queryParams ) ; <nl> + result = client . execute ( formattedQuery , ThriftConversion . fromThrift ( session . getConsistencyLevel ( ) ) ) ; <nl> + } <nl> + return validateNativeResult ( result ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java <nl> index b0633ea . . 31e8371 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java <nl> @ @ - 24 , 16 + 24 , 19 @ @ package org . apache . cassandra . stress . operations ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Collections ; <nl> + import java . util . List ; <nl> <nl> import com . yammer . metrics . core . TimerContext ; <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> + import org . apache . cassandra . thrift . CqlResult ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - public class CqlCounterAdder extends Operation <nl> + public class CqlCounterAdder extends CQLOperation <nl> { <nl> private static String cqlQuery = null ; <nl> <nl> @ @ - 42 , 7 + 45 , 7 @ @ public class CqlCounterAdder extends Operation <nl> super ( client , idx ) ; <nl> } <nl> <nl> - public void run ( CassandraClient client ) throws IOException <nl> + protected void run ( CQLQueryExecutor executor ) throws IOException <nl> { <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; <nl> @ @ - 70 , 7 + 73 , 7 @ @ public class CqlCounterAdder extends Operation <nl> } <nl> <nl> String key = String . format ( " % 0 " + session . getTotalKeysLength ( ) + " d " , index ) ; <nl> - String formattedQuery = null ; <nl> + List < String > queryParams = Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; <nl> <nl> TimerContext context = session . latency . time ( ) ; <nl> <nl> @ @ - 84 , 25 + 87 , 7 @ @ public class CqlCounterAdder extends Operation <nl> <nl> try <nl> { <nl> - if ( session . usePreparedStatements ( ) ) <nl> - { <nl> - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - client . execute _ prepared _ cql3 _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - client . execute _ prepared _ cql _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( formattedQuery = = null ) <nl> - formattedQuery = formatCqlQuery ( cqlQuery , Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> - } <nl> - <nl> - success = true ; <nl> + success = executor . execute ( cqlQuery , queryParams ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 124 , 4 + 109 , 14 @ @ public class CqlCounterAdder extends Operation <nl> session . keys . getAndIncrement ( ) ; <nl> context . stop ( ) ; <nl> } <nl> + <nl> + protected boolean validateThriftResult ( CqlResult result ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + protected boolean validateNativeResult ( ResultMessage result ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java <nl> index 7feee5b . . a4d037a 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java <nl> @ @ - 24 , 18 + 24 , 20 @ @ package org . apache . cassandra . stress . operations ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Collections ; <nl> + import java . util . List ; <nl> <nl> import com . yammer . metrics . core . TimerContext ; <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> import org . apache . cassandra . thrift . CqlResult ; <nl> import org . apache . cassandra . thrift . CqlResultType ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - public class CqlCounterGetter extends Operation <nl> + public class CqlCounterGetter extends CQLOperation <nl> { <nl> private static String cqlQuery = null ; <nl> <nl> @ @ - 44 , 7 + 46 , 7 @ @ public class CqlCounterGetter extends Operation <nl> super ( client , idx ) ; <nl> } <nl> <nl> - public void run ( CassandraClient client ) throws IOException <nl> + protected void run ( CQLQueryExecutor executor ) throws IOException <nl> { <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; <nl> @ @ - 69 , 7 + 71 , 7 @ @ public class CqlCounterGetter extends Operation <nl> } <nl> <nl> byte [ ] key = generateKey ( ) ; <nl> - String formattedQuery = null ; <nl> + List < String > queryParams = Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; <nl> <nl> TimerContext context = session . latency . time ( ) ; <nl> <nl> @ @ - 83 , 30 + 85 , 7 @ @ public class CqlCounterGetter extends Operation <nl> <nl> try <nl> { <nl> - CqlResult result = null ; <nl> - <nl> - if ( session . usePreparedStatements ( ) ) <nl> - { <nl> - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - result = client . execute _ prepared _ cql3 _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key ) ) , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - result = client . execute _ prepared _ cql _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key ) ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( formattedQuery = = null ) <nl> - formattedQuery = formatCqlQuery ( cqlQuery , Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ) ; <nl> - <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> - } <nl> - <nl> - assert result . type . equals ( CqlResultType . ROWS ) : " expected ROWS result type " ; <nl> - assert result . rows . size ( ) = = 0 : " expected exactly one row " ; <nl> - success = ( result . rows . get ( 0 ) . columns . size ( ) ! = 0 ) ; <nl> + success = executor . execute ( cqlQuery , queryParams ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 128 , 4 + 107 , 14 @ @ public class CqlCounterGetter extends Operation <nl> session . keys . getAndIncrement ( ) ; <nl> context . stop ( ) ; <nl> } <nl> + <nl> + protected boolean validateThriftResult ( CqlResult result ) <nl> + { <nl> + return result . rows . get ( 0 ) . columns . size ( ) ! = 0 ; <nl> + } <nl> + <nl> + protected boolean validateNativeResult ( ResultMessage result ) <nl> + { <nl> + return result instanceof ResultMessage . Rows & & ( ( ResultMessage . Rows ) result ) . result . size ( ) ! = 0 ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java <nl> index b1fa85e . . bf416cc 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java <nl> @ @ - 27 , 26 + 27 , 31 @ @ import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> import com . yammer . metrics . core . TimerContext ; <nl> + import org . apache . cassandra . cql3 . ResultSet ; <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> import org . apache . cassandra . thrift . CqlResult ; <nl> import org . apache . cassandra . thrift . CqlRow ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - public class CqlIndexedRangeSlicer extends Operation <nl> + public class CqlIndexedRangeSlicer extends CQLOperation <nl> { <nl> private static List < ByteBuffer > values = null ; <nl> private static String cqlQuery = null ; <nl> <nl> + private int lastQueryResultSize ; <nl> + private int lastMaxKey ; <nl> + <nl> public CqlIndexedRangeSlicer ( Session client , int idx ) <nl> { <nl> super ( client , idx ) ; <nl> } <nl> <nl> - public void run ( CassandraClient client ) throws IOException <nl> + protected void run ( CQLQueryExecutor executor ) throws IOException <nl> { <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; <nl> @ @ - 56 , 8 + 61 , 14 @ @ public class CqlIndexedRangeSlicer extends Operation <nl> <nl> if ( cqlQuery = = null ) <nl> { <nl> - StringBuilder query = new StringBuilder ( " SELECT FIRST " ) . append ( session . getColumnsPerKey ( ) ) <nl> - . append ( " ' ' . . ' ' FROM Standard1 " ) ; <nl> + StringBuilder query = new StringBuilder ( " SELECT " ) ; <nl> + <nl> + if ( session . cqlVersion . startsWith ( " 2 " ) ) <nl> + query . append ( session . getColumnsPerKey ( ) ) . append ( " ' ' . . ' ' " ) ; <nl> + else <nl> + query . append ( " * " ) ; <nl> + <nl> + query . append ( " FROM Standard1 " ) ; <nl> <nl> if ( session . cqlVersion . startsWith ( " 2 " ) ) <nl> query . append ( " USING CONSISTENCY " ) . append ( session . getConsistencyLevel ( ) ) ; <nl> @ @ - 79 , 7 + 90 , 6 @ @ public class CqlIndexedRangeSlicer extends Operation <nl> <nl> boolean success = false ; <nl> String exceptionMessage = null ; <nl> - CqlResult results = null ; <nl> String formattedQuery = null ; <nl> List < String > queryParms = Collections . singletonList ( getUnQuotedCqlBlob ( startOffset , session . cqlVersion . startsWith ( " 3 " ) ) ) ; <nl> <nl> @ @ - 90 , 25 + 100 , 7 @ @ public class CqlIndexedRangeSlicer extends Operation <nl> <nl> try <nl> { <nl> - if ( session . usePreparedStatements ( ) ) <nl> - { <nl> - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - results = client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - results = client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( formattedQuery = = null ) <nl> - formattedQuery = formatCqlQuery ( cqlQuery , queryParms ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - results = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - results = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> - } <nl> - <nl> - success = ( results . rows . size ( ) ! = 0 ) ; <nl> + success = executor . execute ( cqlQuery , queryParms ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 126 , 13 + 118 , 13 @ @ public class CqlIndexedRangeSlicer extends Operation <nl> ( exceptionMessage = = null ) ? " " : " ( " + exceptionMessage + " ) " ) ) ; <nl> } <nl> <nl> - received + = results . rows . size ( ) ; <nl> + received + = lastQueryResultSize ; <nl> <nl> / / convert max key found back to an integer , and increment it <nl> - startOffset = String . format ( format , ( 1 + getMaxKey ( results . rows ) ) ) ; <nl> + startOffset = String . format ( format , ( 1 + lastMaxKey ) ) ; <nl> <nl> session . operations . getAndIncrement ( ) ; <nl> - session . keys . getAndAdd ( results . rows . size ( ) ) ; <nl> + session . keys . getAndAdd ( lastQueryResultSize ) ; <nl> context . stop ( ) ; <nl> } <nl> } <nl> @ @ - 155 , 4 + 147 , 33 @ @ public class CqlIndexedRangeSlicer extends Operation <nl> <nl> return maxKey ; <nl> } <nl> + <nl> + private int getMaxKey ( ResultSet rs ) <nl> + { <nl> + int maxKey = ByteBufferUtil . toInt ( rs . rows . get ( 0 ) . get ( 0 ) ) ; <nl> + <nl> + for ( List < ByteBuffer > row : rs . rows ) <nl> + { <nl> + int currentKey = ByteBufferUtil . toInt ( row . get ( 0 ) ) ; <nl> + if ( currentKey > maxKey ) <nl> + maxKey = currentKey ; <nl> + } <nl> + <nl> + return maxKey ; <nl> + } <nl> + <nl> + protected boolean validateThriftResult ( CqlResult result ) <nl> + { <nl> + lastQueryResultSize = result . rows . size ( ) ; <nl> + lastMaxKey = getMaxKey ( result . rows ) ; <nl> + return lastQueryResultSize ! = 0 ; <nl> + } <nl> + <nl> + protected boolean validateNativeResult ( ResultMessage result ) <nl> + { <nl> + assert result instanceof ResultMessage . Rows ; <nl> + lastQueryResultSize = ( ( ResultMessage . Rows ) result ) . result . size ( ) ; <nl> + lastMaxKey = getMaxKey ( ( ( ResultMessage . Rows ) result ) . result ) ; <nl> + return lastQueryResultSize ! = 0 ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java <nl> index ed03f1f . . 3572c36 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java <nl> @ @ - 31 , 10 + 31 , 13 @ @ import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> + import org . apache . cassandra . thrift . CqlResult ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> - public class CqlInserter extends Operation <nl> + public class CqlInserter extends CQLOperation <nl> { <nl> private static List < ByteBuffer > values ; <nl> private static String cqlQuery = null ; <nl> @ @ - 44 , 7 + 47 , 7 @ @ public class CqlInserter extends Operation <nl> super ( client , idx ) ; <nl> } <nl> <nl> - public void run ( CassandraClient client ) throws IOException <nl> + protected void run ( CQLQueryExecutor executor ) throws IOException <nl> { <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; <nl> @ @ - 95 , 8 + 98 , 6 @ @ public class CqlInserter extends Operation <nl> String key = String . format ( " % 0 " + session . getTotalKeysLength ( ) + " d " , index ) ; <nl> queryParms . add ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; <nl> <nl> - String formattedQuery = null ; <nl> - <nl> TimerContext context = session . latency . time ( ) ; <nl> <nl> boolean success = false ; <nl> @ @ - 109 , 25 + 110 , 7 @ @ public class CqlInserter extends Operation <nl> <nl> try <nl> { <nl> - if ( session . usePreparedStatements ( ) ) <nl> - { <nl> - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( formattedQuery = = null ) <nl> - formattedQuery = formatCqlQuery ( cqlQuery , queryParms ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> - } <nl> - <nl> - success = true ; <nl> + success = executor . execute ( cqlQuery , queryParms ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 150 , 4 + 133 , 14 @ @ public class CqlInserter extends Operation <nl> session . keys . getAndIncrement ( ) ; <nl> context . stop ( ) ; <nl> } <nl> + <nl> + protected boolean validateThriftResult ( CqlResult result ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + protected boolean validateNativeResult ( ResultMessage result ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java <nl> index e9b1f47 . . ec645d4 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> <nl> public class CqlMultiGetter extends Operation <nl> { <nl> @ @ - 38 , 4 + 39 , 9 @ @ public class CqlMultiGetter extends Operation <nl> { <nl> throw new RuntimeException ( " Multiget is not implemented for CQL " ) ; <nl> } <nl> + <nl> + public void run ( SimpleClient client ) throws IOException <nl> + { <nl> + throw new RuntimeException ( " Multiget is not implemented for CQL " ) ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java <nl> index acf0602 . . c01767b 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ package org . apache . cassandra . stress . operations ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . Collections ; <nl> + import java . util . List ; <nl> <nl> import com . yammer . metrics . core . TimerContext ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 32 , 19 + 33 , 22 @ @ import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> import org . apache . cassandra . thrift . CqlResult ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> <nl> - public class CqlRangeSlicer extends Operation <nl> + public class CqlRangeSlicer extends CQLOperation <nl> { <nl> private static String cqlQuery = null ; <nl> + private int lastRowCount ; <nl> <nl> public CqlRangeSlicer ( Session client , int idx ) <nl> { <nl> super ( client , idx ) ; <nl> } <nl> <nl> - public void run ( CassandraClient client ) throws IOException <nl> + protected void run ( CQLQueryExecutor executor ) throws IOException <nl> { <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; <nl> @ @ - 61 , 13 + 65 , 12 @ @ public class CqlRangeSlicer extends Operation <nl> } <nl> <nl> String key = String . format ( " % 0 " + session . getTotalKeysLength ( ) + " d " , index ) ; <nl> - String formattedQuery = null ; <nl> + List < String > queryParams = Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; <nl> <nl> TimerContext context = session . latency . time ( ) ; <nl> <nl> boolean success = false ; <nl> String exceptionMessage = null ; <nl> - int rowCount = 0 ; <nl> <nl> for ( int t = 0 ; t < session . getRetryTimes ( ) ; t + + ) <nl> { <nl> @ @ - 76 , 28 + 79 , 7 @ @ public class CqlRangeSlicer extends Operation <nl> <nl> try <nl> { <nl> - CqlResult result = null ; <nl> - <nl> - if ( session . usePreparedStatements ( ) ) <nl> - { <nl> - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - result = client . execute _ prepared _ cql3 _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - result = client . execute _ prepared _ cql _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( formattedQuery = = null ) <nl> - formattedQuery = formatCqlQuery ( cqlQuery , Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> - } <nl> - <nl> - rowCount = result . rows . size ( ) ; <nl> - success = ( rowCount ! = 0 ) ; <nl> + success = executor . execute ( cqlQuery , queryParams ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 117 , 7 + 99 , 20 @ @ public class CqlRangeSlicer extends Operation <nl> } <nl> <nl> session . operations . getAndIncrement ( ) ; <nl> - session . keys . getAndAdd ( rowCount ) ; <nl> + session . keys . getAndAdd ( lastRowCount ) ; <nl> context . stop ( ) ; <nl> } <nl> + <nl> + protected boolean validateThriftResult ( CqlResult result ) <nl> + { <nl> + lastRowCount = result . rows . size ( ) ; <nl> + return lastRowCount ! = 0 ; <nl> + } <nl> + <nl> + protected boolean validateNativeResult ( ResultMessage result ) <nl> + { <nl> + assert result instanceof ResultMessage . Rows ; <nl> + lastRowCount = ( ( ResultMessage . Rows ) result ) . result . size ( ) ; <nl> + return lastRowCount ! = 0 ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java <nl> index 58d77dd . . 70273c1 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java <nl> @ @ - 31 , 10 + 31 , 13 @ @ import org . apache . cassandra . db . ColumnFamilyType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . util . CassandraClient ; <nl> import org . apache . cassandra . stress . util . Operation ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> + import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> import org . apache . cassandra . thrift . CqlResult ; <nl> + import org . apache . cassandra . thrift . ThriftConversion ; <nl> <nl> - public class CqlReader extends Operation <nl> + public class CqlReader extends CQLOperation <nl> { <nl> private static String cqlQuery = null ; <nl> <nl> @ @ - 43 , 7 + 46 , 7 @ @ public class CqlReader extends Operation <nl> super ( client , idx ) ; <nl> } <nl> <nl> - public void run ( CassandraClient client ) throws IOException <nl> + protected void run ( CQLQueryExecutor executor ) throws IOException <nl> { <nl> if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) <nl> throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; <nl> @ @ - 85 , 8 + 88 , 6 @ @ public class CqlReader extends Operation <nl> byte [ ] key = generateKey ( ) ; <nl> queryParams . add ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; <nl> <nl> - String formattedQuery = null ; <nl> - <nl> TimerContext context = session . latency . time ( ) ; <nl> <nl> boolean success = false ; <nl> @ @ - 99 , 31 + 100 , 10 @ @ public class CqlReader extends Operation <nl> <nl> try <nl> { <nl> - CqlResult result = null ; <nl> - <nl> - if ( session . usePreparedStatements ( ) ) <nl> - { <nl> - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - result = client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - result = client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( formattedQuery = = null ) <nl> - formattedQuery = formatCqlQuery ( cqlQuery , queryParams ) ; <nl> - if ( session . cqlVersion . startsWith ( " 3 " ) ) <nl> - result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; <nl> - else <nl> - result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; <nl> - } <nl> - <nl> - success = ( result . rows . get ( 0 ) . columns . size ( ) ! = 0 ) ; <nl> + success = executor . execute ( cqlQuery , queryParams ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - <nl> exceptionMessage = getExceptionMessage ( e ) ; <nl> success = false ; <nl> } <nl> @ @ - 143 , 4 + 123 , 14 @ @ public class CqlReader extends Operation <nl> session . keys . getAndIncrement ( ) ; <nl> context . stop ( ) ; <nl> } <nl> + <nl> + protected boolean validateThriftResult ( CqlResult result ) <nl> + { <nl> + return result . rows . get ( 0 ) . columns . size ( ) ! = 0 ; <nl> + } <nl> + <nl> + protected boolean validateNativeResult ( ResultMessage result ) <nl> + { <nl> + return result instanceof ResultMessage . Rows & & ( ( ResultMessage . Rows ) result ) . result . size ( ) ! = 0 ; <nl> + } <nl> } <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java <nl> index d1cfc22 . . f7924da 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . security . MessageDigest ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Random ; <nl> + import java . util . Map ; <nl> + import java . util . HashMap ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . Lists ; <nl> @ @ - 33 , 6 + 35 , 7 @ @ import com . google . common . collect . Lists ; <nl> import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> import org . apache . cassandra . stress . Session ; <nl> import org . apache . cassandra . stress . Stress ; <nl> + import org . apache . cassandra . transport . SimpleClient ; <nl> import org . apache . cassandra . thrift . Compression ; <nl> import org . apache . cassandra . thrift . CqlPreparedResult ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> @ @ - 67 , 6 + 70 , 8 @ @ public abstract class Operation <nl> * / <nl> public abstract void run ( CassandraClient client ) throws IOException ; <nl> <nl> + public void run ( SimpleClient client ) throws IOException { } <nl> + <nl> / / Utility methods <nl> <nl> protected List < ByteBuffer > generateValues ( ) <nl> @ @ - 287 , 12 + 292 , 14 @ @ public abstract class Operation <nl> return result . toString ( ) ; <nl> } <nl> <nl> - protected static Integer getPreparedStatement ( CassandraClient client , String cqlQuery ) throws Exception <nl> + protected Integer getPreparedStatement ( CassandraClient client , String cqlQuery ) throws Exception <nl> { <nl> Integer statementId = client . preparedStatements . get ( cqlQuery . hashCode ( ) ) ; <nl> if ( statementId = = null ) <nl> { <nl> - CqlPreparedResult response = client . prepare _ cql _ query ( ByteBufferUtil . bytes ( cqlQuery ) , Compression . NONE ) ; <nl> + CqlPreparedResult response = session . cqlVersion . startsWith ( " 3 " ) <nl> + ? client . prepare _ cql3 _ query ( ByteBufferUtil . bytes ( cqlQuery ) , Compression . NONE ) <nl> + : client . prepare _ cql _ query ( ByteBufferUtil . bytes ( cqlQuery ) , Compression . NONE ) ; <nl> statementId = response . itemId ; <nl> client . preparedStatements . put ( cqlQuery . hashCode ( ) , statementId ) ; <nl> } <nl> @ @ - 300 , 10 + 307 , 28 @ @ public abstract class Operation <nl> return statementId ; <nl> } <nl> <nl> + private static final Map < Integer , byte [ ] > preparedStatementsNative = new HashMap < Integer , byte [ ] > ( ) ; <nl> + <nl> + protected static byte [ ] getPreparedStatement ( SimpleClient client , String cqlQuery ) throws Exception <nl> + { <nl> + byte [ ] statementId = preparedStatementsNative . get ( cqlQuery . hashCode ( ) ) ; <nl> + if ( statementId = = null ) <nl> + { <nl> + statementId = client . prepare ( cqlQuery ) . statementId . bytes ; <nl> + preparedStatementsNative . put ( cqlQuery . hashCode ( ) , statementId ) ; <nl> + } <nl> + return statementId ; <nl> + } <nl> + <nl> protected String wrapInQuotesIfRequired ( String string ) <nl> { <nl> return session . cqlVersion . startsWith ( " 3 " ) <nl> ? " \ " " + string + " \ " " <nl> : string ; <nl> } <nl> + <nl> + public interface CQLQueryExecutor <nl> + { <nl> + public boolean execute ( String query , List < String > queryParameters ) throws Exception ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 71cfca0 . . 9aeeb29 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 10 
 + * Don ' t send schema change responses and events for no - op DDL 
 + statements ( CASSANDRA - 7600 ) 
 * ( Hadoop ) fix cluster initialisation for a split fetching ( CASSANDRA - 7774 ) 
 * Configure system . paxos with LeveledCompactionStrategy ( CASSANDRA - 7753 ) 
 * Fix ALTER clustering column type from DateType to TimestampType when 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 index 39d1cde . . 4f6d1f2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public class AlterKeyspaceStatement extends SchemaAlteringStatement 
 } 
 } 
 
 - public void announceMigration ( ) throws RequestValidationException 
 + public boolean announceMigration ( ) throws RequestValidationException 
 { 
 KSMetaData ksm = Schema . instance . getKSMetaData ( name ) ; 
 / / In the ( very ) unlikely case the keyspace was dropped since validate ( ) 
 @ @ - 87 , 6 + 87 , 7 @ @ public class AlterKeyspaceStatement extends SchemaAlteringStatement 
 throw new InvalidRequestException ( " Unknown keyspace " + name ) ; 
 
 MigrationManager . announceKeyspaceUpdate ( attrs . asKSMetadataUpdate ( ksm ) ) ; 
 + return true ; 
 } 
 
 public ResultMessage . SchemaChange . Change changeType ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 136c430 . . dfcd601 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 76 , 7 + 76 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 / / validated in announceMigration ( ) 
 } 
 
 - public void announceMigration ( ) throws RequestValidationException 
 + public boolean announceMigration ( ) throws RequestValidationException 
 { 
 CFMetaData meta = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 CFMetaData cfm = meta . clone ( ) ; 
 @ @ - 266 , 6 + 266 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 } 
 
 MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; 
 + return true ; 
 } 
 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 index 376fa4a . . 8b40978 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 @ @ - 103 , 14 + 103 , 14 @ @ public class CreateIndexStatement extends SchemaAlteringStatement 
 throw new InvalidRequestException ( String . format ( " Cannot add secondary index to already primarily indexed column % s " , columnName ) ) ; 
 } 
 
 - public void announceMigration ( ) throws RequestValidationException 
 + public boolean announceMigration ( ) throws RequestValidationException 
 { 
 logger . debug ( " Updating column { } definition for index { } " , columnName , indexName ) ; 
 CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; 
 ColumnDefinition cd = cfm . getColumnDefinition ( columnName . key ) ; 
 
 if ( cd . getIndexType ( ) ! = null & & ifNotExists ) 
 - return ; 
 + return false ; 
 
 if ( properties . isCustom ) 
 cd . setIndexType ( IndexType . CUSTOM , properties . getOptions ( ) ) ; 
 @ @ - 122 , 6 + 122 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement 
 cd . setIndexName ( indexName ) ; 
 cfm . addDefaultIndexNames ( ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; 
 + return true ; 
 } 
 
 public ResultMessage . SchemaChange . Change changeType ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 index 2ed1d91 . . 7a8473a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 @ @ - 97 , 16 + 97 , 18 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement 
 attrs . getReplicationOptions ( ) ) ; 
 } 
 
 - public void announceMigration ( ) throws RequestValidationException 
 + public boolean announceMigration ( ) throws RequestValidationException 
 { 
 try 
 { 
 MigrationManager . announceNewKeyspace ( attrs . asKSMetadata ( name ) ) ; 
 + return true ; 
 } 
 catch ( AlreadyExistsException e ) 
 { 
 - if ( ! ifNotExists ) 
 - throw e ; 
 + if ( ifNotExists ) 
 + return false ; 
 + throw e ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 index 08ad069 . . b7f43d3 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 @ @ - 114 , 16 + 114 , 18 @ @ public class CreateTableStatement extends SchemaAlteringStatement 
 return columnDefs ; 
 } 
 
 - public void announceMigration ( ) throws RequestValidationException 
 + public boolean announceMigration ( ) throws RequestValidationException 
 { 
 try 
 { 
 - MigrationManager . announceNewColumnFamily ( getCFMetaData ( ) ) ; 
 + MigrationManager . announceNewColumnFamily ( getCFMetaData ( ) ) ; 
 + return true ; 
 } 
 catch ( AlreadyExistsException e ) 
 { 
 - if ( ! ifNotExists ) 
 - throw e ; 
 + if ( ifNotExists ) 
 + return false ; 
 + throw e ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 index 760d870 . . 70b3acb 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 @ @ - 65 , 12 + 65 , 13 @ @ public class CreateTriggerStatement extends SchemaAlteringStatement 
 } 
 } 
 
 - public void announceMigration ( ) throws ConfigurationException 
 + public boolean announceMigration ( ) throws ConfigurationException 
 { 
 CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; 
 cfm . addTriggerDefinition ( TriggerDefinition . create ( triggerName , triggerClass ) ) ; 
 logger . info ( " Adding trigger with name { } and class { } " , triggerName , triggerClass ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; 
 + return true ; 
 } 
 
 public ResultMessage . SchemaChange . Change changeType ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 index c62ad47 . . ac5262e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 @ @ - 60 , 14 + 60 , 15 @ @ public class DropIndexStatement extends SchemaAlteringStatement 
 return ResultMessage . SchemaChange . Change . UPDATED ; 
 } 
 
 - public void announceMigration ( ) throws InvalidRequestException , ConfigurationException 
 + public boolean announceMigration ( ) throws InvalidRequestException , ConfigurationException 
 { 
 CFMetaData cfm = findIndexedCF ( ) ; 
 if ( cfm = = null ) 
 - return ; 
 + return false ; 
 
 CFMetaData updatedCfm = updateCFMetadata ( cfm ) ; 
 MigrationManager . announceColumnFamilyUpdate ( updatedCfm , false ) ; 
 + return true ; 
 } 
 
 private CFMetaData updateCFMetadata ( CFMetaData cfm ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java 
 index 30fd964 . . 7582af0 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropKeyspaceStatement . java 
 @ @ - 55 , 16 + 55 , 18 @ @ public class DropKeyspaceStatement extends SchemaAlteringStatement 
 return keyspace ; 
 } 
 
 - public void announceMigration ( ) throws ConfigurationException 
 + public boolean announceMigration ( ) throws ConfigurationException 
 { 
 try 
 { 
 MigrationManager . announceKeyspaceDrop ( keyspace ) ; 
 + return true ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 - if ( ! ifExists ) 
 - throw e ; 
 + if ( ifExists ) 
 + return false ; 
 + throw e ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java 
 index d27261c . . 65a3f14 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTableStatement . java 
 @ @ - 54 , 16 + 54 , 18 @ @ public class DropTableStatement extends SchemaAlteringStatement 
 / / validated in announceMigration ( ) 
 } 
 
 - public void announceMigration ( ) throws ConfigurationException 
 + public boolean announceMigration ( ) throws ConfigurationException 
 { 
 try 
 { 
 MigrationManager . announceColumnFamilyDrop ( keyspace ( ) , columnFamily ( ) ) ; 
 + return true ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 - if ( ! ifExists ) 
 - throw e ; 
 + if ( ifExists ) 
 + return false ; 
 + throw e ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 index ce17047 . . f0bd637 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 @ @ - 53 , 13 + 53 , 14 @ @ public class DropTriggerStatement extends SchemaAlteringStatement 
 ThriftValidation . validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 } 
 
 - public void announceMigration ( ) throws ConfigurationException 
 + public boolean announceMigration ( ) throws ConfigurationException 
 { 
 CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; 
 if ( ! cfm . removeTrigger ( triggerName ) ) 
 throw new ConfigurationException ( String . format ( " Trigger % s was not found " , triggerName ) ) ; 
 logger . info ( " Dropping trigger with name { } " , triggerName ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; 
 + return true ; 
 } 
 
 public ResultMessage . SchemaChange . Change changeType ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 index 94df854 . . 845d8cc 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 @ @ - 64 , 11 + 64 , 22 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL 
 
 public abstract ResultMessage . SchemaChange . Change changeType ( ) ; 
 
 - public abstract void announceMigration ( ) throws RequestValidationException ; 
 + / * * 
 + * Announces the migration to other nodes in the cluster . 
 + * @ return true if the execution of this statement resulted in a schema change , false otherwise ( when IF NOT EXISTS 
 + * is used , for example ) 
 + * @ throws RequestValidationException 
 + * / 
 + public abstract boolean announceMigration ( ) throws RequestValidationException ; 
 
 public ResultMessage execute ( QueryState state , QueryOptions options ) throws RequestValidationException 
 { 
 - announceMigration ( ) ; 
 + / / If an IF [ NOT ] EXISTS clause was used , this may not result in an actual schema change . To avoid doing 
 + / / extra work in the drivers to handle schema changes , we return an empty message in this case . ( CASSANDRA - 7600 ) 
 + boolean didChangeSchema = announceMigration ( ) ; 
 + if ( ! didChangeSchema ) 
 + return new ResultMessage . Void ( ) ; 
 + 
 String tableName = cfName = = null | | columnFamily ( ) = = null ? " " : columnFamily ( ) ; 
 return new ResultMessage . SchemaChange ( changeType ( ) , keyspace ( ) , tableName ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f4e854b . . d53a1e3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 14 , 6 + 14 , 7 @ @ 
 * cli : Warn about missing CQL3 tables in schema descriptions ( CASSANDRA - 5309 ) 
 * Re - enable unknown option in replication / compaction strategies option for 
 backward compatibility ( CASSANDRA - 4795 ) 
 + * Add binary protocol support to stress ( CASSANDRA - 4993 ) 
 Merged from 1 . 1 : 
 * nodetool : ability to repair specific range ( CASSANDRA - 5280 ) 
 * Fix possible assertion triggered in SliceFromReadCommand ( CASSANDRA - 5284 ) 
 diff - - git a / bin / cassandra b / bin / cassandra 
 index 5403257 . . 25498aa 100755 
 - - - a / bin / cassandra 
 + + + b / bin / cassandra 
 @ @ - 129 , 7 + 129 , 7 @ @ launch _ service ( ) 
 if [ " x $ pidpath " ! = " x " ] ; then 
 cassandra _ parms = " $ cassandra _ parms - Dcassandra - pidfile = $ pidpath " 
 fi 
 - 
 + 
 # The cassandra - foreground option will tell CassandraDaemon not 
 # to close stdout / stderr , but it ' s up to us not to background . 
 if [ " x $ foreground " ! = " x " ] ; then 
 diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 index f2963bd . . 7979570 100644 
 - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java 
 + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 @ @ - 93 , 6 + 93 , 11 @ @ public class SimpleClient 
 this . encryptionOptions = encryptionOptions ; 
 } 
 
 + public SimpleClient ( String host , int port ) 
 + { 
 + this ( host , port , new ClientEncryptionOptions ( ) ) ; 
 + } 
 + 
 public void connect ( boolean useCompression ) throws IOException 
 { 
 establishConnection ( ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / Session . java b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 index 804e4e8 . . d16ee78 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Session . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Session . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . commons . cli . * ; 
 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 import org . apache . cassandra . thrift . * ; 
 import org . apache . commons . lang . StringUtils ; 
 
 @ @ - 95 , 6 + 96 , 7 @ @ public class Session implements Serializable 
 availableOptions . addOption ( " l " , " replication - factor " , true , " Replication Factor to use when creating needed column families , default : 1 " ) ; 
 availableOptions . addOption ( " L " , " enable - cql " , false , " Perform queries using CQL2 ( Cassandra Query Language v 2 . 0 . 0 ) " ) ; 
 availableOptions . addOption ( " L3 " , " enable - cql3 " , false , " Perform queries using CQL3 ( Cassandra Query Language v 3 . 0 . 0 ) " ) ; 
 + availableOptions . addOption ( " b " , " enable - native - protocol " , false , " Use the binary native protocol ( only work along with - L3 ) " ) ; 
 availableOptions . addOption ( " P " , " use - prepared - statements " , false , " Perform queries using prepared statements ( only applicable to CQL ) . " ) ; 
 availableOptions . addOption ( " e " , " consistency - level " , true , " Consistency Level to use ( ONE , QUORUM , LOCAL _ QUORUM , EACH _ QUORUM , ALL , ANY ) , default : ONE " ) ; 
 availableOptions . addOption ( " x " , " create - index " , true , " Type of index to create on needed column families ( KEYS ) " ) ; 
 @ @ - 138 , 6 + 140 , 7 @ @ public class Session implements Serializable 
 private boolean enable _ cql = false ; 
 private boolean use _ prepared = false ; 
 private boolean trace = false ; 
 + public boolean use _ native _ protocol = false ; 
 
 private final String outFileName ; 
 
 @ @ - 300 , 6 + 303 , 12 @ @ public class Session implements Serializable 
 cqlVersion = " 3 . 0 . 0 " ; 
 } 
 
 + if ( cmd . hasOption ( " b " ) ) 
 + { 
 + if ( ! ( enable _ cql & & cqlVersion . startsWith ( " 3 " ) ) ) 
 + throw new IllegalArgumentException ( " Cannot use binary protocol without - L3 " ) ; 
 + use _ native _ protocol = true ; 
 + } 
 
 if ( cmd . hasOption ( " P " ) ) 
 { 
 @ @ - 691 , 6 + 700 , 7 @ @ public class Session implements Serializable 
 { 
 return getClient ( true ) ; 
 } 
 + 
 / * * 
 * Thrift client connection 
 * @ param setKeyspace - should we set keyspace for client or not 
 @ @ - 730 , 6 + 740 , 22 @ @ public class Session implements Serializable 
 return client ; 
 } 
 
 + public SimpleClient getNativeClient ( ) 
 + { 
 + try 
 + { 
 + String currentNode = nodes [ Stress . randomizer . nextInt ( nodes . length ) ] ; 
 + SimpleClient client = new SimpleClient ( currentNode , 9042 ) ; 
 + client . connect ( false ) ; 
 + client . execute ( " USE \ " Keyspace1 \ " ; " , org . apache . cassandra . db . ConsistencyLevel . ONE ) ; 
 + return client ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 public static InetAddress getLocalAddress ( ) 
 { 
 if ( localInetAddress = = null ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 index 27675d1 . . 60e8cbd 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import com . yammer . metrics . stats . Snapshot ; 
 import org . apache . cassandra . stress . operations . * ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 
 public class StressAction extends Thread 
 { 
 @ @ - 218 , 29 + 219 , 60 @ @ public class StressAction extends Thread 
 
 public void run ( ) 
 { 
 - CassandraClient connection = client . getClient ( ) ; 
 - 
 - for ( int i = 0 ; i < items ; i + + ) 
 + if ( client . use _ native _ protocol ) 
 { 
 - if ( stop ) 
 - break ; 
 + SimpleClient connection = client . getNativeClient ( ) ; 
 
 - try 
 + for ( int i = 0 ; i < items ; i + + ) 
 { 
 - operations . take ( ) . run ( connection ) ; / / running job 
 + if ( stop ) 
 + break ; 
 + 
 + try 
 + { 
 + operations . take ( ) . run ( connection ) ; / / running job 
 + } 
 + catch ( Exception e ) 
 + { 
 + if ( output = = null ) 
 + { 
 + System . err . println ( e . getMessage ( ) ) ; 
 + returnCode = StressAction . FAILURE ; 
 + System . exit ( - 1 ) ; 
 + } 
 + 
 + output . println ( e . getMessage ( ) ) ; 
 + returnCode = StressAction . FAILURE ; 
 + break ; 
 + } 
 } 
 - catch ( Exception e ) 
 + } 
 + else 
 + { 
 + CassandraClient connection = client . getClient ( ) ; 
 + 
 + for ( int i = 0 ; i < items ; i + + ) 
 { 
 - if ( output = = null ) 
 + if ( stop ) 
 + break ; 
 + 
 + try 
 { 
 - System . err . println ( e . getMessage ( ) ) ; 
 + operations . take ( ) . run ( connection ) ; / / running job 
 + } 
 + catch ( Exception e ) 
 + { 
 + if ( output = = null ) 
 + { 
 + System . err . println ( e . getMessage ( ) ) ; 
 + returnCode = StressAction . FAILURE ; 
 + System . exit ( - 1 ) ; 
 + } 
 + 
 + output . println ( e . getMessage ( ) ) ; 
 returnCode = StressAction . FAILURE ; 
 - System . exit ( - 1 ) ; 
 + break ; 
 } 
 - 
 - output . println ( e . getMessage ( ) ) ; 
 - returnCode = StressAction . FAILURE ; 
 - break ; 
 } 
 } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CQLOperation . java b / tools / stress / src / org / apache / cassandra / stress / operations / CQLOperation . java 
 new file mode 100644 
 index 0000000 . . 54737a4 
 - - - / dev / null 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CQLOperation . java 
 @ @ - 0 , 0 + 1 , 96 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . stress . operations ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + 
 + import org . apache . cassandra . stress . Session ; 
 + import org . apache . cassandra . stress . util . CassandraClient ; 
 + import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 + import org . apache . cassandra . thrift . Compression ; 
 + import org . apache . cassandra . thrift . CqlResult ; 
 + import org . apache . cassandra . thrift . ThriftConversion ; 
 + 
 + public abstract class CQLOperation extends Operation 
 + { 
 + public CQLOperation ( Session client , int idx ) 
 + { 
 + super ( client , idx ) ; 
 + } 
 + 
 + protected abstract void run ( CQLQueryExecutor executor ) throws IOException ; 
 + 
 + protected abstract boolean validateThriftResult ( CqlResult result ) ; 
 + 
 + protected abstract boolean validateNativeResult ( ResultMessage result ) ; 
 + 
 + public void run ( final CassandraClient client ) throws IOException 
 + { 
 + run ( new CQLQueryExecutor ( ) 
 + { 
 + public boolean execute ( String cqlQuery , List < String > queryParams ) throws Exception 
 + { 
 + CqlResult result = null ; 
 + if ( session . usePreparedStatements ( ) ) 
 + { 
 + Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 + if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 + result = client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) , session . getConsistencyLevel ( ) ) ; 
 + else 
 + result = client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) ) ; 
 + } 
 + else 
 + { 
 + String formattedQuery = formatCqlQuery ( cqlQuery , queryParams ) ; 
 + if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 + result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 + else 
 + result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 + } 
 + return validateThriftResult ( result ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public void run ( final SimpleClient client ) throws IOException 
 + { 
 + run ( new CQLQueryExecutor ( ) 
 + { 
 + public boolean execute ( String cqlQuery , List < String > queryParams ) throws Exception 
 + { 
 + ResultMessage result = null ; 
 + if ( session . usePreparedStatements ( ) ) 
 + { 
 + byte [ ] stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 + result = client . executePrepared ( stmntId , queryParamsAsByteBuffer ( queryParams ) , ThriftConversion . fromThrift ( session . getConsistencyLevel ( ) ) ) ; 
 + } 
 + else 
 + { 
 + String formattedQuery = formatCqlQuery ( cqlQuery , queryParams ) ; 
 + result = client . execute ( formattedQuery , ThriftConversion . fromThrift ( session . getConsistencyLevel ( ) ) ) ; 
 + } 
 + return validateNativeResult ( result ) ; 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java 
 index b0633ea . . 31e8371 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterAdder . java 
 @ @ - 24 , 16 + 24 , 19 @ @ package org . apache . cassandra . stress . operations ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . Collections ; 
 + import java . util . List ; 
 
 import com . yammer . metrics . core . TimerContext ; 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . thrift . Compression ; 
 + import org . apache . cassandra . thrift . CqlResult ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - public class CqlCounterAdder extends Operation 
 + public class CqlCounterAdder extends CQLOperation 
 { 
 private static String cqlQuery = null ; 
 
 @ @ - 42 , 7 + 45 , 7 @ @ public class CqlCounterAdder extends Operation 
 super ( client , idx ) ; 
 } 
 
 - public void run ( CassandraClient client ) throws IOException 
 + protected void run ( CQLQueryExecutor executor ) throws IOException 
 { 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; 
 @ @ - 70 , 7 + 73 , 7 @ @ public class CqlCounterAdder extends Operation 
 } 
 
 String key = String . format ( " % 0 " + session . getTotalKeysLength ( ) + " d " , index ) ; 
 - String formattedQuery = null ; 
 + List < String > queryParams = Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; 
 
 TimerContext context = session . latency . time ( ) ; 
 
 @ @ - 84 , 25 + 87 , 7 @ @ public class CqlCounterAdder extends Operation 
 
 try 
 { 
 - if ( session . usePreparedStatements ( ) ) 
 - { 
 - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - client . execute _ prepared _ cql3 _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) , session . getConsistencyLevel ( ) ) ; 
 - else 
 - client . execute _ prepared _ cql _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) ) ; 
 - } 
 - else 
 - { 
 - if ( formattedQuery = = null ) 
 - formattedQuery = formatCqlQuery ( cqlQuery , Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 - else 
 - client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 - } 
 - 
 - success = true ; 
 + success = executor . execute ( cqlQuery , queryParams ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 124 , 4 + 109 , 14 @ @ public class CqlCounterAdder extends Operation 
 session . keys . getAndIncrement ( ) ; 
 context . stop ( ) ; 
 } 
 + 
 + protected boolean validateThriftResult ( CqlResult result ) 
 + { 
 + return true ; 
 + } 
 + 
 + protected boolean validateNativeResult ( ResultMessage result ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java 
 index 7feee5b . . a4d037a 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlCounterGetter . java 
 @ @ - 24 , 18 + 24 , 20 @ @ package org . apache . cassandra . stress . operations ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . Collections ; 
 + import java . util . List ; 
 
 import com . yammer . metrics . core . TimerContext ; 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . thrift . Compression ; 
 import org . apache . cassandra . thrift . CqlResult ; 
 import org . apache . cassandra . thrift . CqlResultType ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - public class CqlCounterGetter extends Operation 
 + public class CqlCounterGetter extends CQLOperation 
 { 
 private static String cqlQuery = null ; 
 
 @ @ - 44 , 7 + 46 , 7 @ @ public class CqlCounterGetter extends Operation 
 super ( client , idx ) ; 
 } 
 
 - public void run ( CassandraClient client ) throws IOException 
 + protected void run ( CQLQueryExecutor executor ) throws IOException 
 { 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; 
 @ @ - 69 , 7 + 71 , 7 @ @ public class CqlCounterGetter extends Operation 
 } 
 
 byte [ ] key = generateKey ( ) ; 
 - String formattedQuery = null ; 
 + List < String > queryParams = Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; 
 
 TimerContext context = session . latency . time ( ) ; 
 
 @ @ - 83 , 30 + 85 , 7 @ @ public class CqlCounterGetter extends Operation 
 
 try 
 { 
 - CqlResult result = null ; 
 - 
 - if ( session . usePreparedStatements ( ) ) 
 - { 
 - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - result = client . execute _ prepared _ cql3 _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key ) ) , session . getConsistencyLevel ( ) ) ; 
 - else 
 - result = client . execute _ prepared _ cql _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key ) ) ) ; 
 - } 
 - else 
 - { 
 - if ( formattedQuery = = null ) 
 - formattedQuery = formatCqlQuery ( cqlQuery , Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ) ; 
 - 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 - else 
 - result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 - } 
 - 
 - assert result . type . equals ( CqlResultType . ROWS ) : " expected ROWS result type " ; 
 - assert result . rows . size ( ) = = 0 : " expected exactly one row " ; 
 - success = ( result . rows . get ( 0 ) . columns . size ( ) ! = 0 ) ; 
 + success = executor . execute ( cqlQuery , queryParams ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 128 , 4 + 107 , 14 @ @ public class CqlCounterGetter extends Operation 
 session . keys . getAndIncrement ( ) ; 
 context . stop ( ) ; 
 } 
 + 
 + protected boolean validateThriftResult ( CqlResult result ) 
 + { 
 + return result . rows . get ( 0 ) . columns . size ( ) ! = 0 ; 
 + } 
 + 
 + protected boolean validateNativeResult ( ResultMessage result ) 
 + { 
 + return result instanceof ResultMessage . Rows & & ( ( ResultMessage . Rows ) result ) . result . size ( ) ! = 0 ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java 
 index b1fa85e . . bf416cc 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlIndexedRangeSlicer . java 
 @ @ - 27 , 26 + 27 , 31 @ @ import java . util . Collections ; 
 import java . util . List ; 
 
 import com . yammer . metrics . core . TimerContext ; 
 + import org . apache . cassandra . cql3 . ResultSet ; 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . thrift . Compression ; 
 import org . apache . cassandra . thrift . CqlResult ; 
 import org . apache . cassandra . thrift . CqlRow ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - public class CqlIndexedRangeSlicer extends Operation 
 + public class CqlIndexedRangeSlicer extends CQLOperation 
 { 
 private static List < ByteBuffer > values = null ; 
 private static String cqlQuery = null ; 
 
 + private int lastQueryResultSize ; 
 + private int lastMaxKey ; 
 + 
 public CqlIndexedRangeSlicer ( Session client , int idx ) 
 { 
 super ( client , idx ) ; 
 } 
 
 - public void run ( CassandraClient client ) throws IOException 
 + protected void run ( CQLQueryExecutor executor ) throws IOException 
 { 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; 
 @ @ - 56 , 8 + 61 , 14 @ @ public class CqlIndexedRangeSlicer extends Operation 
 
 if ( cqlQuery = = null ) 
 { 
 - StringBuilder query = new StringBuilder ( " SELECT FIRST " ) . append ( session . getColumnsPerKey ( ) ) 
 - . append ( " ' ' . . ' ' FROM Standard1 " ) ; 
 + StringBuilder query = new StringBuilder ( " SELECT " ) ; 
 + 
 + if ( session . cqlVersion . startsWith ( " 2 " ) ) 
 + query . append ( session . getColumnsPerKey ( ) ) . append ( " ' ' . . ' ' " ) ; 
 + else 
 + query . append ( " * " ) ; 
 + 
 + query . append ( " FROM Standard1 " ) ; 
 
 if ( session . cqlVersion . startsWith ( " 2 " ) ) 
 query . append ( " USING CONSISTENCY " ) . append ( session . getConsistencyLevel ( ) ) ; 
 @ @ - 79 , 7 + 90 , 6 @ @ public class CqlIndexedRangeSlicer extends Operation 
 
 boolean success = false ; 
 String exceptionMessage = null ; 
 - CqlResult results = null ; 
 String formattedQuery = null ; 
 List < String > queryParms = Collections . singletonList ( getUnQuotedCqlBlob ( startOffset , session . cqlVersion . startsWith ( " 3 " ) ) ) ; 
 
 @ @ - 90 , 25 + 100 , 7 @ @ public class CqlIndexedRangeSlicer extends Operation 
 
 try 
 { 
 - if ( session . usePreparedStatements ( ) ) 
 - { 
 - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - results = client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) , session . getConsistencyLevel ( ) ) ; 
 - else 
 - results = client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) ) ; 
 - } 
 - else 
 - { 
 - if ( formattedQuery = = null ) 
 - formattedQuery = formatCqlQuery ( cqlQuery , queryParms ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - results = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 - else 
 - results = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 - } 
 - 
 - success = ( results . rows . size ( ) ! = 0 ) ; 
 + success = executor . execute ( cqlQuery , queryParms ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 126 , 13 + 118 , 13 @ @ public class CqlIndexedRangeSlicer extends Operation 
 ( exceptionMessage = = null ) ? " " : " ( " + exceptionMessage + " ) " ) ) ; 
 } 
 
 - received + = results . rows . size ( ) ; 
 + received + = lastQueryResultSize ; 
 
 / / convert max key found back to an integer , and increment it 
 - startOffset = String . format ( format , ( 1 + getMaxKey ( results . rows ) ) ) ; 
 + startOffset = String . format ( format , ( 1 + lastMaxKey ) ) ; 
 
 session . operations . getAndIncrement ( ) ; 
 - session . keys . getAndAdd ( results . rows . size ( ) ) ; 
 + session . keys . getAndAdd ( lastQueryResultSize ) ; 
 context . stop ( ) ; 
 } 
 } 
 @ @ - 155 , 4 + 147 , 33 @ @ public class CqlIndexedRangeSlicer extends Operation 
 
 return maxKey ; 
 } 
 + 
 + private int getMaxKey ( ResultSet rs ) 
 + { 
 + int maxKey = ByteBufferUtil . toInt ( rs . rows . get ( 0 ) . get ( 0 ) ) ; 
 + 
 + for ( List < ByteBuffer > row : rs . rows ) 
 + { 
 + int currentKey = ByteBufferUtil . toInt ( row . get ( 0 ) ) ; 
 + if ( currentKey > maxKey ) 
 + maxKey = currentKey ; 
 + } 
 + 
 + return maxKey ; 
 + } 
 + 
 + protected boolean validateThriftResult ( CqlResult result ) 
 + { 
 + lastQueryResultSize = result . rows . size ( ) ; 
 + lastMaxKey = getMaxKey ( result . rows ) ; 
 + return lastQueryResultSize ! = 0 ; 
 + } 
 + 
 + protected boolean validateNativeResult ( ResultMessage result ) 
 + { 
 + assert result instanceof ResultMessage . Rows ; 
 + lastQueryResultSize = ( ( ResultMessage . Rows ) result ) . result . size ( ) ; 
 + lastMaxKey = getMaxKey ( ( ( ResultMessage . Rows ) result ) . result ) ; 
 + return lastQueryResultSize ! = 0 ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java 
 index ed03f1f . . 3572c36 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlInserter . java 
 @ @ - 31 , 10 + 31 , 13 @ @ import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . thrift . Compression ; 
 + import org . apache . cassandra . thrift . CqlResult ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 - public class CqlInserter extends Operation 
 + public class CqlInserter extends CQLOperation 
 { 
 private static List < ByteBuffer > values ; 
 private static String cqlQuery = null ; 
 @ @ - 44 , 7 + 47 , 7 @ @ public class CqlInserter extends Operation 
 super ( client , idx ) ; 
 } 
 
 - public void run ( CassandraClient client ) throws IOException 
 + protected void run ( CQLQueryExecutor executor ) throws IOException 
 { 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; 
 @ @ - 95 , 8 + 98 , 6 @ @ public class CqlInserter extends Operation 
 String key = String . format ( " % 0 " + session . getTotalKeysLength ( ) + " d " , index ) ; 
 queryParms . add ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; 
 
 - String formattedQuery = null ; 
 - 
 TimerContext context = session . latency . time ( ) ; 
 
 boolean success = false ; 
 @ @ - 109 , 25 + 110 , 7 @ @ public class CqlInserter extends Operation 
 
 try 
 { 
 - if ( session . usePreparedStatements ( ) ) 
 - { 
 - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) , session . getConsistencyLevel ( ) ) ; 
 - else 
 - client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParms ) ) ; 
 - } 
 - else 
 - { 
 - if ( formattedQuery = = null ) 
 - formattedQuery = formatCqlQuery ( cqlQuery , queryParms ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 - else 
 - client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 - } 
 - 
 - success = true ; 
 + success = executor . execute ( cqlQuery , queryParms ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 150 , 4 + 133 , 14 @ @ public class CqlInserter extends Operation 
 session . keys . getAndIncrement ( ) ; 
 context . stop ( ) ; 
 } 
 + 
 + protected boolean validateThriftResult ( CqlResult result ) 
 + { 
 + return true ; 
 + } 
 + 
 + protected boolean validateNativeResult ( ResultMessage result ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java 
 index e9b1f47 . . ec645d4 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlMultiGetter . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 
 public class CqlMultiGetter extends Operation 
 { 
 @ @ - 38 , 4 + 39 , 9 @ @ public class CqlMultiGetter extends Operation 
 { 
 throw new RuntimeException ( " Multiget is not implemented for CQL " ) ; 
 } 
 + 
 + public void run ( SimpleClient client ) throws IOException 
 + { 
 + throw new RuntimeException ( " Multiget is not implemented for CQL " ) ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java 
 index acf0602 . . c01767b 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlRangeSlicer . java 
 @ @ - 24 , 6 + 24 , 7 @ @ package org . apache . cassandra . stress . operations ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . Collections ; 
 + import java . util . List ; 
 
 import com . yammer . metrics . core . TimerContext ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 32 , 19 + 33 , 22 @ @ import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . thrift . Compression ; 
 import org . apache . cassandra . thrift . CqlResult ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 
 - public class CqlRangeSlicer extends Operation 
 + public class CqlRangeSlicer extends CQLOperation 
 { 
 private static String cqlQuery = null ; 
 + private int lastRowCount ; 
 
 public CqlRangeSlicer ( Session client , int idx ) 
 { 
 super ( client , idx ) ; 
 } 
 
 - public void run ( CassandraClient client ) throws IOException 
 + protected void run ( CQLQueryExecutor executor ) throws IOException 
 { 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; 
 @ @ - 61 , 13 + 65 , 12 @ @ public class CqlRangeSlicer extends Operation 
 } 
 
 String key = String . format ( " % 0 " + session . getTotalKeysLength ( ) + " d " , index ) ; 
 - String formattedQuery = null ; 
 + List < String > queryParams = Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; 
 
 TimerContext context = session . latency . time ( ) ; 
 
 boolean success = false ; 
 String exceptionMessage = null ; 
 - int rowCount = 0 ; 
 
 for ( int t = 0 ; t < session . getRetryTimes ( ) ; t + + ) 
 { 
 @ @ - 76 , 28 + 79 , 7 @ @ public class CqlRangeSlicer extends Operation 
 
 try 
 { 
 - CqlResult result = null ; 
 - 
 - if ( session . usePreparedStatements ( ) ) 
 - { 
 - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - result = client . execute _ prepared _ cql3 _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) , session . getConsistencyLevel ( ) ) ; 
 - else 
 - result = client . execute _ prepared _ cql _ query ( stmntId , Collections . singletonList ( ByteBuffer . wrap ( key . getBytes ( ) ) ) ) ; 
 - } 
 - else 
 - { 
 - if ( formattedQuery = = null ) 
 - formattedQuery = formatCqlQuery ( cqlQuery , Collections . singletonList ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 - else 
 - result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 - } 
 - 
 - rowCount = result . rows . size ( ) ; 
 - success = ( rowCount ! = 0 ) ; 
 + success = executor . execute ( cqlQuery , queryParams ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 117 , 7 + 99 , 20 @ @ public class CqlRangeSlicer extends Operation 
 } 
 
 session . operations . getAndIncrement ( ) ; 
 - session . keys . getAndAdd ( rowCount ) ; 
 + session . keys . getAndAdd ( lastRowCount ) ; 
 context . stop ( ) ; 
 } 
 + 
 + protected boolean validateThriftResult ( CqlResult result ) 
 + { 
 + lastRowCount = result . rows . size ( ) ; 
 + return lastRowCount ! = 0 ; 
 + } 
 + 
 + protected boolean validateNativeResult ( ResultMessage result ) 
 + { 
 + assert result instanceof ResultMessage . Rows ; 
 + lastRowCount = ( ( ResultMessage . Rows ) result ) . result . size ( ) ; 
 + return lastRowCount ! = 0 ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java 
 index 58d77dd . . 70273c1 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / CqlReader . java 
 @ @ - 31 , 10 + 31 , 13 @ @ import org . apache . cassandra . db . ColumnFamilyType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . util . CassandraClient ; 
 import org . apache . cassandra . stress . util . Operation ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 + import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . thrift . Compression ; 
 import org . apache . cassandra . thrift . CqlResult ; 
 + import org . apache . cassandra . thrift . ThriftConversion ; 
 
 - public class CqlReader extends Operation 
 + public class CqlReader extends CQLOperation 
 { 
 private static String cqlQuery = null ; 
 
 @ @ - 43 , 7 + 46 , 7 @ @ public class CqlReader extends Operation 
 super ( client , idx ) ; 
 } 
 
 - public void run ( CassandraClient client ) throws IOException 
 + protected void run ( CQLQueryExecutor executor ) throws IOException 
 { 
 if ( session . getColumnFamilyType ( ) = = ColumnFamilyType . Super ) 
 throw new RuntimeException ( " Super columns are not implemented for CQL " ) ; 
 @ @ - 85 , 8 + 88 , 6 @ @ public class CqlReader extends Operation 
 byte [ ] key = generateKey ( ) ; 
 queryParams . add ( getUnQuotedCqlBlob ( key , session . cqlVersion . startsWith ( " 3 " ) ) ) ; 
 
 - String formattedQuery = null ; 
 - 
 TimerContext context = session . latency . time ( ) ; 
 
 boolean success = false ; 
 @ @ - 99 , 31 + 100 , 10 @ @ public class CqlReader extends Operation 
 
 try 
 { 
 - CqlResult result = null ; 
 - 
 - if ( session . usePreparedStatements ( ) ) 
 - { 
 - Integer stmntId = getPreparedStatement ( client , cqlQuery ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - result = client . execute _ prepared _ cql3 _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) , session . getConsistencyLevel ( ) ) ; 
 - else 
 - result = client . execute _ prepared _ cql _ query ( stmntId , queryParamsAsByteBuffer ( queryParams ) ) ; 
 - } 
 - else 
 - { 
 - if ( formattedQuery = = null ) 
 - formattedQuery = formatCqlQuery ( cqlQuery , queryParams ) ; 
 - if ( session . cqlVersion . startsWith ( " 3 " ) ) 
 - result = client . execute _ cql3 _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE , session . getConsistencyLevel ( ) ) ; 
 - else 
 - result = client . execute _ cql _ query ( ByteBuffer . wrap ( formattedQuery . getBytes ( ) ) , Compression . NONE ) ; 
 - } 
 - 
 - success = ( result . rows . get ( 0 ) . columns . size ( ) ! = 0 ) ; 
 + success = executor . execute ( cqlQuery , queryParams ) ; 
 } 
 catch ( Exception e ) 
 { 
 - 
 exceptionMessage = getExceptionMessage ( e ) ; 
 success = false ; 
 } 
 @ @ - 143 , 4 + 123 , 14 @ @ public class CqlReader extends Operation 
 session . keys . getAndIncrement ( ) ; 
 context . stop ( ) ; 
 } 
 + 
 + protected boolean validateThriftResult ( CqlResult result ) 
 + { 
 + return result . rows . get ( 0 ) . columns . size ( ) ! = 0 ; 
 + } 
 + 
 + protected boolean validateNativeResult ( ResultMessage result ) 
 + { 
 + return result instanceof ResultMessage . Rows & & ( ( ResultMessage . Rows ) result ) . result . size ( ) ! = 0 ; 
 + } 
 } 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java 
 index d1cfc22 . . f7924da 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / Operation . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / Operation . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . security . MessageDigest ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Random ; 
 + import java . util . Map ; 
 + import java . util . HashMap ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . collect . Lists ; 
 @ @ - 33 , 6 + 35 , 7 @ @ import com . google . common . collect . Lists ; 
 import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 import org . apache . cassandra . stress . Session ; 
 import org . apache . cassandra . stress . Stress ; 
 + import org . apache . cassandra . transport . SimpleClient ; 
 import org . apache . cassandra . thrift . Compression ; 
 import org . apache . cassandra . thrift . CqlPreparedResult ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 @ @ - 67 , 6 + 70 , 8 @ @ public abstract class Operation 
 * / 
 public abstract void run ( CassandraClient client ) throws IOException ; 
 
 + public void run ( SimpleClient client ) throws IOException { } 
 + 
 / / Utility methods 
 
 protected List < ByteBuffer > generateValues ( ) 
 @ @ - 287 , 12 + 292 , 14 @ @ public abstract class Operation 
 return result . toString ( ) ; 
 } 
 
 - protected static Integer getPreparedStatement ( CassandraClient client , String cqlQuery ) throws Exception 
 + protected Integer getPreparedStatement ( CassandraClient client , String cqlQuery ) throws Exception 
 { 
 Integer statementId = client . preparedStatements . get ( cqlQuery . hashCode ( ) ) ; 
 if ( statementId = = null ) 
 { 
 - CqlPreparedResult response = client . prepare _ cql _ query ( ByteBufferUtil . bytes ( cqlQuery ) , Compression . NONE ) ; 
 + CqlPreparedResult response = session . cqlVersion . startsWith ( " 3 " ) 
 + ? client . prepare _ cql3 _ query ( ByteBufferUtil . bytes ( cqlQuery ) , Compression . NONE ) 
 + : client . prepare _ cql _ query ( ByteBufferUtil . bytes ( cqlQuery ) , Compression . NONE ) ; 
 statementId = response . itemId ; 
 client . preparedStatements . put ( cqlQuery . hashCode ( ) , statementId ) ; 
 } 
 @ @ - 300 , 10 + 307 , 28 @ @ public abstract class Operation 
 return statementId ; 
 } 
 
 + private static final Map < Integer , byte [ ] > preparedStatementsNative = new HashMap < Integer , byte [ ] > ( ) ; 
 + 
 + protected static byte [ ] getPreparedStatement ( SimpleClient client , String cqlQuery ) throws Exception 
 + { 
 + byte [ ] statementId = preparedStatementsNative . get ( cqlQuery . hashCode ( ) ) ; 
 + if ( statementId = = null ) 
 + { 
 + statementId = client . prepare ( cqlQuery ) . statementId . bytes ; 
 + preparedStatementsNative . put ( cqlQuery . hashCode ( ) , statementId ) ; 
 + } 
 + return statementId ; 
 + } 
 + 
 protected String wrapInQuotesIfRequired ( String string ) 
 { 
 return session . cqlVersion . startsWith ( " 3 " ) 
 ? " \ " " + string + " \ " " 
 : string ; 
 } 
 + 
 + public interface CQLQueryExecutor 
 + { 
 + public boolean execute ( String query , List < String > queryParameters ) throws Exception ; 
 + } 
 }
