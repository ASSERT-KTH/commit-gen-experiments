BLEU SCORE: 0.016087046643979717

TEST MSG: Uncomment CollectionsTest unit test cases
GENERATED MSG: Fix CONTAINS ( KEY ) filtering on frozen collection clustering cols

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java <nl> index 2380c38 . . 3d41ad6 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java <nl> @ @ - 21 , 29 + 21 , 29 @ @ import org . junit . Test ; <nl> <nl> public class CollectionsTest extends CQLTester <nl> { <nl> - / / @ Test <nl> - / / public void testMapBulkRemoval ( ) throws Throwable <nl> - / / { <nl> - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , text > ) " ) ; <nl> + @ Test <nl> + public void testMapBulkRemoval ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , text > ) " ) ; <nl> <nl> - / / execute ( " INSERT INTO % s ( k , m ) VALUES ( ? , ? ) " , 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) ; <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( ? , ? ) " , 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT * FROM % s " ) , <nl> - / / row ( 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET m = m - ? WHERE k = ? " , set ( " k2 " ) , 0 ) ; <nl> + execute ( " UPDATE % s SET m = m - ? WHERE k = ? " , set ( " k2 " ) , 0 ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT * FROM % s " ) , <nl> - / / row ( 0 , map ( " k1 " , " v1 " , " k3 " , " v3 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 0 , map ( " k1 " , " v1 " , " k3 " , " v3 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET m = m + ? , m = m - ? WHERE k = ? " , map ( " k4 " , " v4 " ) , set ( " k3 " ) , 0 ) ; <nl> + execute ( " UPDATE % s SET m = m + ? , m = m - ? WHERE k = ? " , map ( " k4 " , " v4 " ) , set ( " k3 " ) , 0 ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT * FROM % s " ) , <nl> - / / row ( 0 , map ( " k1 " , " v1 " , " k4 " , " v4 " ) ) <nl> - / / ) ; <nl> - / / } <nl> + assertRows ( execute ( " SELECT * FROM % s " ) , <nl> + row ( 0 , map ( " k1 " , " v1 " , " k4 " , " v4 " ) ) <nl> + ) ; <nl> + } <nl> <nl> @ Test <nl> public void testInvalidCollectionsMix ( ) throws Throwable <nl> @ @ - 71 , 146 + 71 , 146 @ @ public class CollectionsTest extends CQLTester <nl> assertInvalid ( " UPDATE % s SET m = m - ? WHERE k = 0 " , map ( " a " , " b " , " c " , " d " ) ) ; <nl> } <nl> <nl> - / / @ Test <nl> - / / public void testSets ( ) throws Throwable <nl> - / / { <nl> - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s set < text > ) " ) ; <nl> + @ Test <nl> + public void testSets ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s set < text > ) " ) ; <nl> <nl> - / / execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) ; <nl> + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> - / / row ( set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> + row ( set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " DELETE s [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; <nl> + execute ( " DELETE s [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> - / / row ( set ( " v2 " , " v3 " , " v4 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> + row ( set ( " v2 " , " v3 " , " v4 " ) ) <nl> + ) ; <nl> <nl> - / / / / Full overwrite <nl> - / / execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> - / / row ( set ( " v5 " , " v6 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> + row ( set ( " v5 " , " v6 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET s = s + ? WHERE k = 0 " , set ( " v7 " ) ) ; <nl> + execute ( " UPDATE % s SET s = s + ? WHERE k = 0 " , set ( " v7 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> - / / row ( set ( " v5 " , " v6 " , " v7 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> + row ( set ( " v5 " , " v6 " , " v7 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET s = s - ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; <nl> + execute ( " UPDATE % s SET s = s - ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> - / / row ( set ( " v7 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> + row ( set ( " v7 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " DELETE s FROM % s WHERE k = 0 " ) ; <nl> + execute ( " DELETE s FROM % s WHERE k = 0 " ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> - / / row ( ( Object ) null ) <nl> - / / ) ; <nl> - / / } <nl> + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , <nl> + row ( ( Object ) null ) <nl> + ) ; <nl> + } <nl> <nl> - / / @ Test <nl> - / / public void testMaps ( ) throws Throwable <nl> - / / { <nl> - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , int > ) " ) ; <nl> + @ Test <nl> + public void testMaps ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , int > ) " ) ; <nl> <nl> - / / execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( " v1 " , 1 , " v2 " , 2 ) ) ; <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( " v1 " , 1 , " v2 " , 2 ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> - / / row ( map ( " v1 " , 1 , " v2 " , 2 ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " v1 " , 1 , " v2 " , 2 ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET m [ ? ] = ? , m [ ? ] = ? WHERE k = 0 " , " v3 " , 3 , " v4 " , 4 ) ; <nl> + execute ( " UPDATE % s SET m [ ? ] = ? , m [ ? ] = ? WHERE k = 0 " , " v3 " , 3 , " v4 " , 4 ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> - / / row ( map ( " v1 " , 1 , " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " v1 " , 1 , " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) <nl> + ) ; <nl> <nl> - / / execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; <nl> + execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> - / / row ( map ( " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) <nl> + ) ; <nl> <nl> - / / / / Full overwrite <nl> - / / execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " v6 " , 6 , " v5 " , 5 ) ) ; <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " v6 " , 6 , " v5 " , 5 ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> - / / row ( map ( " v5 " , 5 , " v6 " , 6 ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " v5 " , 5 , " v6 " , 6 ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( " v7 " , 7 ) ) ; <nl> + execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( " v7 " , 7 ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> - / / row ( map ( " v5 " , 5 , " v6 " , 6 , " v7 " , 7 ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( map ( " v5 " , 5 , " v6 " , 6 , " v7 " , 7 ) ) <nl> + ) ; <nl> <nl> - / / / / The empty map is parsed as an empty set ( because we don ' t have enough info at parsing <nl> - / / / / time when we see a { } ) and special cased later . This test checks this work properly <nl> - / / execute ( " UPDATE % s SET m = { } WHERE k = 0 " ) ; <nl> + / / The empty map is parsed as an empty set ( because we don ' t have enough info at parsing <nl> + / / time when we see a { } ) and special cased later . This test checks this work properly <nl> + execute ( " UPDATE % s SET m = { } WHERE k = 0 " ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> - / / row ( ( Object ) null ) <nl> - / / ) ; <nl> - / / } <nl> + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , <nl> + row ( ( Object ) null ) <nl> + ) ; <nl> + } <nl> <nl> - / / @ Test <nl> - / / public void testLists ( ) throws Throwable <nl> - / / { <nl> - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l list < text > ) " ) ; <nl> + @ Test <nl> + public void testLists ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l list < text > ) " ) ; <nl> <nl> - / / execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( " v1 " , " v2 " , " v3 " ) ) ; <nl> + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( " v1 " , " v2 " , " v3 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v1 " , " v2 " , " v3 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v1 " , " v2 " , " v3 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " DELETE l [ ? ] FROM % s WHERE k = 0 " , 1 ) ; <nl> + execute ( " DELETE l [ ? ] FROM % s WHERE k = 0 " , 1 ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v1 " , " v3 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v1 " , " v3 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET l [ ? ] = ? WHERE k = 0 " , 1 , " v4 " ) ; <nl> + execute ( " UPDATE % s SET l [ ? ] = ? WHERE k = 0 " , 1 , " v4 " ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v1 " , " v4 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v1 " , " v4 " ) ) <nl> + ) ; <nl> <nl> - / / / / Full overwrite <nl> - / / execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v6 " , " v5 " ) ) ; <nl> + / / Full overwrite <nl> + execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v6 " , " v5 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v6 " , " v5 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v6 " , " v5 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET l = l + ? WHERE k = 0 " , list ( " v7 " , " v8 " ) ) ; <nl> + execute ( " UPDATE % s SET l = l + ? WHERE k = 0 " , list ( " v7 " , " v8 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v6 " , " v5 " , " v7 " , " v8 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v6 " , " v5 " , " v7 " , " v8 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET l = ? + l WHERE k = 0 " , list ( " v9 " ) ) ; <nl> + execute ( " UPDATE % s SET l = ? + l WHERE k = 0 " , list ( " v9 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v9 " , " v6 " , " v5 " , " v7 " , " v8 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v9 " , " v6 " , " v5 " , " v7 " , " v8 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " UPDATE % s SET l = l - ? WHERE k = 0 " , list ( " v5 " , " v8 " ) ) ; <nl> + execute ( " UPDATE % s SET l = l - ? WHERE k = 0 " , list ( " v5 " , " v8 " ) ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( list ( " v9 " , " v6 " , " v7 " ) ) <nl> - / / ) ; <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( list ( " v9 " , " v6 " , " v7 " ) ) <nl> + ) ; <nl> <nl> - / / execute ( " DELETE l FROM % s WHERE k = 0 " ) ; <nl> + execute ( " DELETE l FROM % s WHERE k = 0 " ) ; <nl> <nl> - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> - / / row ( ( Object ) null ) <nl> - / / ) ; <nl> - / / } <nl> + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , <nl> + row ( ( Object ) null ) <nl> + ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java b / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java 
 index 2380c38 . . 3d41ad6 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CollectionsTest . java 
 @ @ - 21 , 29 + 21 , 29 @ @ import org . junit . Test ; 
 
 public class CollectionsTest extends CQLTester 
 { 
 - / / @ Test 
 - / / public void testMapBulkRemoval ( ) throws Throwable 
 - / / { 
 - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , text > ) " ) ; 
 + @ Test 
 + public void testMapBulkRemoval ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , text > ) " ) ; 
 
 - / / execute ( " INSERT INTO % s ( k , m ) VALUES ( ? , ? ) " , 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) ; 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( ? , ? ) " , 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT * FROM % s " ) , 
 - / / row ( 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 0 , map ( " k1 " , " v1 " , " k2 " , " v2 " , " k3 " , " v3 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET m = m - ? WHERE k = ? " , set ( " k2 " ) , 0 ) ; 
 + execute ( " UPDATE % s SET m = m - ? WHERE k = ? " , set ( " k2 " ) , 0 ) ; 
 
 - / / assertRows ( execute ( " SELECT * FROM % s " ) , 
 - / / row ( 0 , map ( " k1 " , " v1 " , " k3 " , " v3 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 0 , map ( " k1 " , " v1 " , " k3 " , " v3 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET m = m + ? , m = m - ? WHERE k = ? " , map ( " k4 " , " v4 " ) , set ( " k3 " ) , 0 ) ; 
 + execute ( " UPDATE % s SET m = m + ? , m = m - ? WHERE k = ? " , map ( " k4 " , " v4 " ) , set ( " k3 " ) , 0 ) ; 
 
 - / / assertRows ( execute ( " SELECT * FROM % s " ) , 
 - / / row ( 0 , map ( " k1 " , " v1 " , " k4 " , " v4 " ) ) 
 - / / ) ; 
 - / / } 
 + assertRows ( execute ( " SELECT * FROM % s " ) , 
 + row ( 0 , map ( " k1 " , " v1 " , " k4 " , " v4 " ) ) 
 + ) ; 
 + } 
 
 @ Test 
 public void testInvalidCollectionsMix ( ) throws Throwable 
 @ @ - 71 , 146 + 71 , 146 @ @ public class CollectionsTest extends CQLTester 
 assertInvalid ( " UPDATE % s SET m = m - ? WHERE k = 0 " , map ( " a " , " b " , " c " , " d " ) ) ; 
 } 
 
 - / / @ Test 
 - / / public void testSets ( ) throws Throwable 
 - / / { 
 - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s set < text > ) " ) ; 
 + @ Test 
 + public void testSets ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , s set < text > ) " ) ; 
 
 - / / execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) ; 
 + execute ( " INSERT INTO % s ( k , s ) VALUES ( 0 , ? ) " , set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 - / / row ( set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 + row ( set ( " v1 " , " v2 " , " v3 " , " v4 " ) ) 
 + ) ; 
 
 - / / execute ( " DELETE s [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; 
 + execute ( " DELETE s [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; 
 
 - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 - / / row ( set ( " v2 " , " v3 " , " v4 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 + row ( set ( " v2 " , " v3 " , " v4 " ) ) 
 + ) ; 
 
 - / / / / Full overwrite 
 - / / execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET s = ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 - / / row ( set ( " v5 " , " v6 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 + row ( set ( " v5 " , " v6 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET s = s + ? WHERE k = 0 " , set ( " v7 " ) ) ; 
 + execute ( " UPDATE % s SET s = s + ? WHERE k = 0 " , set ( " v7 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 - / / row ( set ( " v5 " , " v6 " , " v7 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 + row ( set ( " v5 " , " v6 " , " v7 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET s = s - ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; 
 + execute ( " UPDATE % s SET s = s - ? WHERE k = 0 " , set ( " v6 " , " v5 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 - / / row ( set ( " v7 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 + row ( set ( " v7 " ) ) 
 + ) ; 
 
 - / / execute ( " DELETE s FROM % s WHERE k = 0 " ) ; 
 + execute ( " DELETE s FROM % s WHERE k = 0 " ) ; 
 
 - / / assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 - / / row ( ( Object ) null ) 
 - / / ) ; 
 - / / } 
 + assertRows ( execute ( " SELECT s FROM % s WHERE k = 0 " ) , 
 + row ( ( Object ) null ) 
 + ) ; 
 + } 
 
 - / / @ Test 
 - / / public void testMaps ( ) throws Throwable 
 - / / { 
 - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , int > ) " ) ; 
 + @ Test 
 + public void testMaps ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , m map < text , int > ) " ) ; 
 
 - / / execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( " v1 " , 1 , " v2 " , 2 ) ) ; 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , ? ) " , map ( " v1 " , 1 , " v2 " , 2 ) ) ; 
 
 - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 - / / row ( map ( " v1 " , 1 , " v2 " , 2 ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " v1 " , 1 , " v2 " , 2 ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET m [ ? ] = ? , m [ ? ] = ? WHERE k = 0 " , " v3 " , 3 , " v4 " , 4 ) ; 
 + execute ( " UPDATE % s SET m [ ? ] = ? , m [ ? ] = ? WHERE k = 0 " , " v3 " , 3 , " v4 " , 4 ) ; 
 
 - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 - / / row ( map ( " v1 " , 1 , " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " v1 " , 1 , " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) 
 + ) ; 
 
 - / / execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; 
 + execute ( " DELETE m [ ? ] FROM % s WHERE k = 0 " , " v1 " ) ; 
 
 - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 - / / row ( map ( " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " v2 " , 2 , " v3 " , 3 , " v4 " , 4 ) ) 
 + ) ; 
 
 - / / / / Full overwrite 
 - / / execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " v6 " , 6 , " v5 " , 5 ) ) ; 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET m = ? WHERE k = 0 " , map ( " v6 " , 6 , " v5 " , 5 ) ) ; 
 
 - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 - / / row ( map ( " v5 " , 5 , " v6 " , 6 ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " v5 " , 5 , " v6 " , 6 ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( " v7 " , 7 ) ) ; 
 + execute ( " UPDATE % s SET m = m + ? WHERE k = 0 " , map ( " v7 " , 7 ) ) ; 
 
 - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 - / / row ( map ( " v5 " , 5 , " v6 " , 6 , " v7 " , 7 ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( map ( " v5 " , 5 , " v6 " , 6 , " v7 " , 7 ) ) 
 + ) ; 
 
 - / / / / The empty map is parsed as an empty set ( because we don ' t have enough info at parsing 
 - / / / / time when we see a { } ) and special cased later . This test checks this work properly 
 - / / execute ( " UPDATE % s SET m = { } WHERE k = 0 " ) ; 
 + / / The empty map is parsed as an empty set ( because we don ' t have enough info at parsing 
 + / / time when we see a { } ) and special cased later . This test checks this work properly 
 + execute ( " UPDATE % s SET m = { } WHERE k = 0 " ) ; 
 
 - / / assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 - / / row ( ( Object ) null ) 
 - / / ) ; 
 - / / } 
 + assertRows ( execute ( " SELECT m FROM % s WHERE k = 0 " ) , 
 + row ( ( Object ) null ) 
 + ) ; 
 + } 
 
 - / / @ Test 
 - / / public void testLists ( ) throws Throwable 
 - / / { 
 - / / createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l list < text > ) " ) ; 
 + @ Test 
 + public void testLists ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , l list < text > ) " ) ; 
 
 - / / execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( " v1 " , " v2 " , " v3 " ) ) ; 
 + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , ? ) " , list ( " v1 " , " v2 " , " v3 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v1 " , " v2 " , " v3 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v1 " , " v2 " , " v3 " ) ) 
 + ) ; 
 
 - / / execute ( " DELETE l [ ? ] FROM % s WHERE k = 0 " , 1 ) ; 
 + execute ( " DELETE l [ ? ] FROM % s WHERE k = 0 " , 1 ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v1 " , " v3 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v1 " , " v3 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET l [ ? ] = ? WHERE k = 0 " , 1 , " v4 " ) ; 
 + execute ( " UPDATE % s SET l [ ? ] = ? WHERE k = 0 " , 1 , " v4 " ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v1 " , " v4 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v1 " , " v4 " ) ) 
 + ) ; 
 
 - / / / / Full overwrite 
 - / / execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v6 " , " v5 " ) ) ; 
 + / / Full overwrite 
 + execute ( " UPDATE % s SET l = ? WHERE k = 0 " , list ( " v6 " , " v5 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v6 " , " v5 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v6 " , " v5 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET l = l + ? WHERE k = 0 " , list ( " v7 " , " v8 " ) ) ; 
 + execute ( " UPDATE % s SET l = l + ? WHERE k = 0 " , list ( " v7 " , " v8 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v6 " , " v5 " , " v7 " , " v8 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v6 " , " v5 " , " v7 " , " v8 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET l = ? + l WHERE k = 0 " , list ( " v9 " ) ) ; 
 + execute ( " UPDATE % s SET l = ? + l WHERE k = 0 " , list ( " v9 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v9 " , " v6 " , " v5 " , " v7 " , " v8 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v9 " , " v6 " , " v5 " , " v7 " , " v8 " ) ) 
 + ) ; 
 
 - / / execute ( " UPDATE % s SET l = l - ? WHERE k = 0 " , list ( " v5 " , " v8 " ) ) ; 
 + execute ( " UPDATE % s SET l = l - ? WHERE k = 0 " , list ( " v5 " , " v8 " ) ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( list ( " v9 " , " v6 " , " v7 " ) ) 
 - / / ) ; 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( list ( " v9 " , " v6 " , " v7 " ) ) 
 + ) ; 
 
 - / / execute ( " DELETE l FROM % s WHERE k = 0 " ) ; 
 + execute ( " DELETE l FROM % s WHERE k = 0 " ) ; 
 
 - / / assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 - / / row ( ( Object ) null ) 
 - / / ) ; 
 - / / } 
 + assertRows ( execute ( " SELECT l FROM % s WHERE k = 0 " ) , 
 + row ( ( Object ) null ) 
 + ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
