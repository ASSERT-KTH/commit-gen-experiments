BLEU SCORE: 0.013139808552042212

TEST MSG: comment out NativeCellTest , since we don ' t support it in 3 . 0
GENERATED MSG: start over w / tests

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / NativeCellTest . java b / test / unit / org / apache / cassandra / db / NativeCellTest . java <nl> index 70b7b87 . . b804412 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / NativeCellTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / NativeCellTest . java <nl> @ @ - 1 , 280 + 1 , 271 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import java . io . ByteArrayInputStream ; <nl> - import java . io . DataInputStream ; <nl> - import java . io . IOException ; <nl> - import java . nio . ByteBuffer ; <nl> - import java . security . MessageDigest ; <nl> - import java . security . NoSuchAlgorithmException ; <nl> - import java . util . Arrays ; <nl> - import java . util . Random ; <nl> - import java . util . concurrent . ThreadLocalRandom ; <nl> - <nl> - import org . junit . Assert ; <nl> - import org . junit . Test ; <nl> - <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . ColumnDefinition ; <nl> - import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> - import org . apache . cassandra . db . composites . CellName ; <nl> - import org . apache . cassandra . db . composites . CellNameType ; <nl> - import org . apache . cassandra . db . composites . CompoundDenseCellNameType ; <nl> - import org . apache . cassandra . db . composites . CompoundSparseCellNameType ; <nl> - import org . apache . cassandra . db . composites . SimpleDenseCellNameType ; <nl> - import org . apache . cassandra . db . composites . SimpleSparseCellNameType ; <nl> - import org . apache . cassandra . db . context . CounterContext ; <nl> - import org . apache . cassandra . db . marshal . AbstractType ; <nl> - import org . apache . cassandra . db . marshal . UTF8Type ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> - import org . apache . cassandra . utils . concurrent . OpOrder ; <nl> - import org . apache . cassandra . utils . memory . NativeAllocator ; <nl> - import org . apache . cassandra . utils . memory . NativePool ; <nl> - <nl> - import static org . apache . cassandra . db . composites . CellNames . compositeDense ; <nl> - import static org . apache . cassandra . db . composites . CellNames . compositeSparse ; <nl> - import static org . apache . cassandra . db . composites . CellNames . simpleDense ; <nl> - import static org . apache . cassandra . db . composites . CellNames . simpleSparse ; <nl> - import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> - <nl> - public class NativeCellTest <nl> - { <nl> - <nl> - private static final NativeAllocator nativeAllocator = new NativePool ( Integer . MAX _ VALUE , Integer . MAX _ VALUE , 1f , null ) . newAllocator ( ) ; <nl> - private static final OpOrder . Group group = new OpOrder ( ) . start ( ) ; <nl> - <nl> - static class Name <nl> - { <nl> - final CellName name ; <nl> - final CellNameType type ; <nl> - Name ( CellName name , CellNameType type ) <nl> - { <nl> - this . name = name ; <nl> - this . type = type ; <nl> - } <nl> - } <nl> - <nl> - static ByteBuffer [ ] bytess ( String . . . strings ) <nl> - { <nl> - ByteBuffer [ ] r = new ByteBuffer [ strings . length ] ; <nl> - for ( int i = 0 ; i < r . length ; i + + ) <nl> - r [ i ] = bytes ( strings [ i ] ) ; <nl> - return r ; <nl> - } <nl> - <nl> - final static Name [ ] TESTS = new Name [ ] <nl> - { <nl> - new Name ( simpleDense ( bytes ( " a " ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , <nl> - new Name ( simpleSparse ( new ColumnIdentifier ( " a " , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , <nl> - new Name ( compositeDense ( bytes ( " a " ) , bytes ( " b " ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> - new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> - new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> - new Name ( simpleDense ( huge ( ' a ' , 40000 ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , <nl> - new Name ( simpleSparse ( new ColumnIdentifier ( hugestr ( ' a ' , 40000 ) , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , <nl> - new Name ( compositeDense ( huge ( ' a ' , 20000 ) , huge ( ' b ' , 20000 ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> - new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> - new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) <nl> - } ; <nl> - <nl> - private static ByteBuffer huge ( char ch , int count ) <nl> - { <nl> - return bytes ( hugestr ( ch , count ) ) ; <nl> - } <nl> - <nl> - private static ByteBuffer [ ] huges ( int count , char . . . chs ) <nl> - { <nl> - ByteBuffer [ ] r = new ByteBuffer [ chs . length ] ; <nl> - for ( int i = 0 ; i < chs . length ; i + + ) <nl> - r [ i ] = huge ( chs [ i ] , count / chs . length ) ; <nl> - return r ; <nl> - } <nl> - <nl> - private static String hugestr ( char ch , int count ) <nl> - { <nl> - ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; <nl> - byte [ ] bytes = new byte [ count ] ; <nl> - random . nextBytes ( bytes ) ; <nl> - bytes [ 0 ] = ( byte ) ch ; <nl> - for ( int i = 0 ; i < bytes . length ; i + + ) <nl> - bytes [ i ] & = 0x7f ; <nl> - return new String ( bytes ) ; <nl> - } <nl> - <nl> - private static final CFMetaData metadata = new CFMetaData ( " " , " " , ColumnFamilyType . Standard , null ) ; <nl> - static <nl> - { <nl> - try <nl> - { <nl> - metadata . addColumnDefinition ( new ColumnDefinition ( null , null , new ColumnIdentifier ( " a " , true ) , UTF8Type . instance , null , null , null , null , null ) ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - throw new AssertionError ( ) ; <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testCells ( ) throws IOException <nl> - { <nl> - Random rand = ThreadLocalRandom . current ( ) ; <nl> - for ( Name test : TESTS ) <nl> - { <nl> - byte [ ] bytes = new byte [ 16 ] ; <nl> - rand . nextBytes ( bytes ) ; <nl> - <nl> - / / test regular Cell <nl> - Cell buf , nat ; <nl> - buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - test ( test , buf , nat ) ; <nl> - <nl> - / / test DeletedCell <nl> - buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - test ( test , buf , nat ) ; <nl> - <nl> - / / test ExpiringCell <nl> - buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - test ( test , buf , nat ) ; <nl> - <nl> - / / test CounterCell <nl> - buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - test ( test , buf , nat ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - @ Test <nl> - public void testComparator ( ) <nl> - { <nl> - <nl> - Random rand = ThreadLocalRandom . current ( ) ; <nl> - for ( Name test : TESTS ) <nl> - { <nl> - byte [ ] bytes = new byte [ 7 ] ; <nl> - byte [ ] bytes2 = new byte [ 7 ] ; <nl> - rand . nextBytes ( bytes ) ; <nl> - rand . nextBytes ( bytes2 ) ; <nl> - <nl> - / / test regular Cell <nl> - Cell buf , nat , buf2 , nat2 ; <nl> - buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - buf2 = new BufferCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) ) ; <nl> - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> - <nl> - int val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> - <nl> - <nl> - / / test DeletedCell <nl> - buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - buf2 = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; <nl> - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> - <nl> - val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> - <nl> - <nl> - <nl> - / / test ExpiringCell <nl> - buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - buf2 = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> - <nl> - val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> - <nl> - <nl> - / / test CounterCell <nl> - buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - buf2 = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> - <nl> - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> - <nl> - val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> - <nl> - } <nl> - } <nl> - <nl> - static void test ( Name test , Cell buf , Cell nat ) throws IOException <nl> - { <nl> - Assert . assertTrue ( buf . equals ( nat ) ) ; <nl> - Assert . assertTrue ( nat . equals ( buf ) ) ; <nl> - Assert . assertTrue ( buf . equals ( buf ) ) ; <nl> - Assert . assertTrue ( nat . equals ( nat ) ) ; <nl> - <nl> - try <nl> - { <nl> - MessageDigest d1 = MessageDigest . getInstance ( " MD5 " ) ; <nl> - MessageDigest d2 = MessageDigest . getInstance ( " MD5 " ) ; <nl> - buf . updateDigest ( d1 ) ; <nl> - nat . updateDigest ( d2 ) ; <nl> - Assert . assertArrayEquals ( d1 . digest ( ) , d2 . digest ( ) ) ; <nl> - } <nl> - catch ( NoSuchAlgorithmException e ) <nl> - { <nl> - throw new IllegalStateException ( e ) ; <nl> - } <nl> - <nl> - byte [ ] serialized ; <nl> - try ( DataOutputBuffer bufOut = new DataOutputBuffer ( ) ) <nl> - { <nl> - test . type . columnSerializer ( ) . serialize ( nat , bufOut ) ; <nl> - serialized = bufOut . getData ( ) ; <nl> - } <nl> - <nl> - ByteArrayInputStream bufIn = new ByteArrayInputStream ( serialized , 0 , serialized . length ) ; <nl> - Cell deserialized = test . type . columnSerializer ( ) . deserialize ( new DataInputStream ( bufIn ) ) ; <nl> - Assert . assertTrue ( buf . equals ( deserialized ) ) ; <nl> - <nl> - } <nl> - <nl> - <nl> - <nl> - } <nl> + / / / * <nl> + / / * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + / / * or more contributor license agreements . See the NOTICE file <nl> + / / * distributed with this work for additional information <nl> + / / * regarding copyright ownership . The ASF licenses this file <nl> + / / * to you under the Apache License , Version 2 . 0 ( the <nl> + / / * " License " ) ; you may not use this file except in compliance <nl> + / / * with the License . You may obtain a copy of the License at <nl> + / / * <nl> + / / * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + / / * <nl> + / / * Unless required by applicable law or agreed to in writing , software <nl> + / / * distributed under the License is distributed on an " AS IS " BASIS , <nl> + / / * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + / / * See the License for the specific language governing permissions and <nl> + / / * limitations under the License . <nl> + / / * / <nl> + / / package org . apache . cassandra . db ; <nl> + / / <nl> + / / import java . io . ByteArrayInputStream ; <nl> + / / import java . io . DataInputStream ; <nl> + / / import java . io . IOException ; <nl> + / / import java . nio . ByteBuffer ; <nl> + / / import java . security . MessageDigest ; <nl> + / / import java . security . NoSuchAlgorithmException ; <nl> + / / import java . util . Arrays ; <nl> + / / import java . util . Random ; <nl> + / / import java . util . concurrent . ThreadLocalRandom ; <nl> + / / <nl> + / / import org . junit . Assert ; <nl> + / / import org . junit . Test ; <nl> + / / <nl> + / / import org . apache . cassandra . config . CFMetaData ; <nl> + / / import org . apache . cassandra . config . ColumnDefinition ; <nl> + / / import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> + / / import org . apache . cassandra . db . context . CounterContext ; <nl> + / / import org . apache . cassandra . db . marshal . AbstractType ; <nl> + / / import org . apache . cassandra . db . marshal . UTF8Type ; <nl> + / / import org . apache . cassandra . db . rows . Cell ; <nl> + / / import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + / / import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> + / / import org . apache . cassandra . utils . concurrent . OpOrder ; <nl> + / / import org . apache . cassandra . utils . memory . NativeAllocator ; <nl> + / / import org . apache . cassandra . utils . memory . NativePool ; <nl> + / / <nl> + / / import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> + / / <nl> + / / public class NativeCellTest <nl> + / / { <nl> + / / <nl> + / / private static final NativeAllocator nativeAllocator = new NativePool ( Integer . MAX _ VALUE , Integer . MAX _ VALUE , 1f , null ) . newAllocator ( ) ; <nl> + / / private static final OpOrder . Group group = new OpOrder ( ) . start ( ) ; <nl> + / / <nl> + / / static class Name <nl> + / / { <nl> + / / final CellName name ; <nl> + / / final CellNameType type ; <nl> + / / Name ( CellName name , CellNameType type ) <nl> + / / { <nl> + / / this . name = name ; <nl> + / / this . type = type ; <nl> + / / } <nl> + / / } <nl> + / / <nl> + / / static ByteBuffer [ ] bytess ( String . . . strings ) <nl> + / / { <nl> + / / ByteBuffer [ ] r = new ByteBuffer [ strings . length ] ; <nl> + / / for ( int i = 0 ; i < r . length ; i + + ) <nl> + / / r [ i ] = bytes ( strings [ i ] ) ; <nl> + / / return r ; <nl> + / / } <nl> + / / <nl> + / / final static Name [ ] TESTS = new Name [ ] <nl> + / / { <nl> + / / new Name ( simpleDense ( bytes ( " a " ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , <nl> + / / new Name ( simpleSparse ( new ColumnIdentifier ( " a " , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , <nl> + / / new Name ( compositeDense ( bytes ( " a " ) , bytes ( " b " ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> + / / new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> + / / new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> + / / new Name ( simpleDense ( huge ( ' a ' , 40000 ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , <nl> + / / new Name ( simpleSparse ( new ColumnIdentifier ( hugestr ( ' a ' , 40000 ) , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , <nl> + / / new Name ( compositeDense ( huge ( ' a ' , 20000 ) , huge ( ' b ' , 20000 ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> + / / new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , <nl> + / / new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) <nl> + / / } ; <nl> + / / <nl> + / / private static ByteBuffer huge ( char ch , int count ) <nl> + / / { <nl> + / / return bytes ( hugestr ( ch , count ) ) ; <nl> + / / } <nl> + / / <nl> + / / private static ByteBuffer [ ] huges ( int count , char . . . chs ) <nl> + / / { <nl> + / / ByteBuffer [ ] r = new ByteBuffer [ chs . length ] ; <nl> + / / for ( int i = 0 ; i < chs . length ; i + + ) <nl> + / / r [ i ] = huge ( chs [ i ] , count / chs . length ) ; <nl> + / / return r ; <nl> + / / } <nl> + / / <nl> + / / private static String hugestr ( char ch , int count ) <nl> + / / { <nl> + / / ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; <nl> + / / byte [ ] bytes = new byte [ count ] ; <nl> + / / random . nextBytes ( bytes ) ; <nl> + / / bytes [ 0 ] = ( byte ) ch ; <nl> + / / for ( int i = 0 ; i < bytes . length ; i + + ) <nl> + / / bytes [ i ] & = 0x7f ; <nl> + / / return new String ( bytes ) ; <nl> + / / } <nl> + / / <nl> + / / private static final CFMetaData metadata = new CFMetaData ( " " , " " , ColumnFamilyType . Standard , null ) ; <nl> + / / static <nl> + / / { <nl> + / / try <nl> + / / { <nl> + / / metadata . addColumnDefinition ( new ColumnDefinition ( null , null , new ColumnIdentifier ( " a " , true ) , UTF8Type . instance , null , null , null , null , null ) ) ; <nl> + / / } <nl> + / / catch ( ConfigurationException e ) <nl> + / / { <nl> + / / throw new AssertionError ( ) ; <nl> + / / } <nl> + / / } <nl> + / / <nl> + / / @ Test <nl> + / / public void testCells ( ) throws IOException <nl> + / / { <nl> + / / Random rand = ThreadLocalRandom . current ( ) ; <nl> + / / for ( Name test : TESTS ) <nl> + / / { <nl> + / / byte [ ] bytes = new byte [ 16 ] ; <nl> + / / rand . nextBytes ( bytes ) ; <nl> + / / <nl> + / / / / test regular Cell <nl> + / / Cell buf , nat ; <nl> + / / buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / test ( test , buf , nat ) ; <nl> + / / <nl> + / / / / test DeletedCell <nl> + / / buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / test ( test , buf , nat ) ; <nl> + / / <nl> + / / / / test ExpiringCell <nl> + / / buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / test ( test , buf , nat ) ; <nl> + / / <nl> + / / / / test CounterCell <nl> + / / buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / test ( test , buf , nat ) ; <nl> + / / } <nl> + / / } <nl> + / / <nl> + / / <nl> + / / @ Test <nl> + / / public void testComparator ( ) <nl> + / / { <nl> + / / <nl> + / / Random rand = ThreadLocalRandom . current ( ) ; <nl> + / / for ( Name test : TESTS ) <nl> + / / { <nl> + / / byte [ ] bytes = new byte [ 7 ] ; <nl> + / / byte [ ] bytes2 = new byte [ 7 ] ; <nl> + / / rand . nextBytes ( bytes ) ; <nl> + / / rand . nextBytes ( bytes2 ) ; <nl> + / / <nl> + / / / / test regular Cell <nl> + / / Cell buf , nat , buf2 , nat2 ; <nl> + / / buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / buf2 = new BufferCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) ) ; <nl> + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> + / / <nl> + / / int val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / <nl> + / / <nl> + / / / / test DeletedCell <nl> + / / buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / buf2 = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; <nl> + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> + / / <nl> + / / val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / <nl> + / / <nl> + / / <nl> + / / / / test ExpiringCell <nl> + / / buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / buf2 = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> + / / <nl> + / / val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / <nl> + / / <nl> + / / / / test CounterCell <nl> + / / buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / buf2 = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; <nl> + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; <nl> + / / <nl> + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; <nl> + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; <nl> + / / <nl> + / / val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; <nl> + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; <nl> + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; <nl> + / / <nl> + / / } <nl> + / / } <nl> + / / <nl> + / / static void test ( Name test , Cell buf , Cell nat ) throws IOException <nl> + / / { <nl> + / / Assert . assertTrue ( buf . equals ( nat ) ) ; <nl> + / / Assert . assertTrue ( nat . equals ( buf ) ) ; <nl> + / / Assert . assertTrue ( buf . equals ( buf ) ) ; <nl> + / / Assert . assertTrue ( nat . equals ( nat ) ) ; <nl> + / / <nl> + / / try <nl> + / / { <nl> + / / MessageDigest d1 = MessageDigest . getInstance ( " MD5 " ) ; <nl> + / / MessageDigest d2 = MessageDigest . getInstance ( " MD5 " ) ; <nl> + / / buf . updateDigest ( d1 ) ; <nl> + / / nat . updateDigest ( d2 ) ; <nl> + / / Assert . assertArrayEquals ( d1 . digest ( ) , d2 . digest ( ) ) ; <nl> + / / } <nl> + / / catch ( NoSuchAlgorithmException e ) <nl> + / / { <nl> + / / throw new IllegalStateException ( e ) ; <nl> + / / } <nl> + / / <nl> + / / byte [ ] serialized ; <nl> + / / try ( DataOutputBuffer bufOut = new DataOutputBuffer ( ) ) <nl> + / / { <nl> + / / test . type . columnSerializer ( ) . serialize ( nat , bufOut ) ; <nl> + / / serialized = bufOut . getData ( ) ; <nl> + / / } <nl> + / / <nl> + / / ByteArrayInputStream bufIn = new ByteArrayInputStream ( serialized , 0 , serialized . length ) ; <nl> + / / Cell deserialized = test . type . columnSerializer ( ) . deserialize ( new DataInputStream ( bufIn ) ) ; <nl> + / / Assert . assertTrue ( buf . equals ( deserialized ) ) ; <nl> + / / <nl> + / / } <nl> + / / <nl> + / / <nl> + / / <nl> + / / }
NEAREST DIFF (one line): diff - - git a / test / org / apache / cassandra / ServerTest . java b / test / org / apache / cassandra / ServerTest . java <nl> deleted file mode 100644 <nl> index 59db562 . . 0000000 <nl> - - - a / test / org / apache / cassandra / ServerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 22 + 0 , 0 @ @ <nl> - package org . apache . cassandra ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - import org . testng . annotations . BeforeMethod ; <nl> - <nl> - import java . io . File ; <nl> - <nl> - @ Test ( groups = { " serial " } ) <nl> - public class ServerTest { <nl> - / / TODO clean up static structures too ( e . g . memtables ) <nl> - @ BeforeMethod <nl> - public void cleanup ( ) { <nl> - / / for convenience , this assumes that you haven ' t changed the test config away from storing everything <nl> - / / under / var / cassandra . <nl> - for ( String dirname : new String [ ] { " bootstrap " , " commitlog " , " data " , " staging " , " system " } ) { <nl> - File dir = new File ( " / var / cassandra " , dirname ) ; <nl> - for ( File f : dir . listFiles ( ) ) { <nl> - f . delete ( ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / ColumnComparatorFactoryTest . java b / test / org / apache / cassandra / db / ColumnComparatorFactoryTest . java <nl> deleted file mode 100644 <nl> index 7665265 . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / ColumnComparatorFactoryTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 25 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . util . Comparator ; <nl> - <nl> - public class ColumnComparatorFactoryTest { <nl> - public Comparator < IColumn > nameComparator ; <nl> - <nl> - @ Test <nl> - public void testLT ( ) { <nl> - IColumn col1 = new Column ( " Column - 8 " ) ; <nl> - IColumn col2 = new Column ( " Column - 9 " ) ; <nl> - nameComparator = ColumnComparatorFactory . getComparator ( ColumnComparatorFactory . ComparatorType . NAME ) ; <nl> - assert nameComparator . compare ( col1 , col2 ) < 0 ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testGT ( ) { <nl> - IColumn col1 = new Column ( " Column - 9 " ) ; <nl> - IColumn col2 = new Column ( " Column - 10 " ) ; <nl> - / / tricky - - remember we ' re comparing _ lexically _ <nl> - assert nameComparator . compare ( col1 , col2 ) > 0 ; <nl> - 	 } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> deleted file mode 100644 <nl> index a2882cb . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 114 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . apache . cassandra . ServerTest ; <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Collection ; <nl> - import java . util . List ; <nl> - import java . util . Random ; <nl> - <nl> - public class ColumnFamilyStoreTest extends ServerTest { <nl> - @ Test <nl> - public void testMain ( ) throws IOException , ColumnFamilyNotDefinedException { <nl> - Table table = Table . open ( " Table1 " ) ; <nl> - Random random = new Random ( ) ; <nl> - byte [ ] bytes1 = new byte [ 1024 ] ; <nl> - byte [ ] bytes2 = new byte [ 1024 ] ; <nl> - random . nextBytes ( bytes1 ) ; <nl> - random . nextBytes ( bytes2 ) ; <nl> - <nl> - for ( int i = 800 ; i < 1000 ; + + i ) <nl> - { <nl> - String key = Integer . toString ( i ) ; <nl> - RowMutation rm ; <nl> - for ( int j = 0 ; j < 8 ; + + j ) <nl> - { <nl> - byte [ ] bytes = j % 2 = = 0 ? bytes1 : bytes2 ; <nl> - rm = new RowMutation ( " Table1 " , key ) ; <nl> - rm . add ( " Standard1 : " + " Column - " + j , bytes , j ) ; <nl> - rm . apply ( ) ; <nl> - <nl> - for ( int k = 0 ; k < 8 ; + + k ) <nl> - { <nl> - bytes = ( j + k ) % 2 = = 0 ? bytes1 : bytes2 ; <nl> - rm = new RowMutation ( " Table1 " , key ) ; <nl> - rm . add ( " Super1 : " + " SuperColumn - " + j + " : Column - " + k , bytes , k ) ; <nl> - rm . apply ( ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - for ( int i = 800 ; i < 1000 ; + + i ) <nl> - { <nl> - String key = Integer . toString ( i ) ; <nl> - / / TODO actually test results <nl> - ColumnFamily cf = table . get ( key , " Super1 : SuperColumn - 1 " ) ; <nl> - assert cf ! = null ; <nl> - Collection < IColumn > superColumns = cf . getAllColumns ( ) ; <nl> - for ( IColumn superColumn : superColumns ) <nl> - { <nl> - Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; <nl> - for ( IColumn subColumn : subColumns ) <nl> - { <nl> - / / System . out . println ( subColumn ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Test <nl> - public void testRemove ( ) throws IOException , ColumnFamilyNotDefinedException { <nl> - Table table = Table . open ( " Table1 " ) ; <nl> - ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard1 " ) ; <nl> - RowMutation rm ; <nl> - <nl> - / / add data <nl> - rm = new RowMutation ( " Table1 " , " key1 " ) ; <nl> - rm . add ( " Standard1 : Column1 " , " asdf " . getBytes ( ) , 0 ) ; <nl> - rm . apply ( ) ; <nl> - store . forceFlush ( ) ; <nl> - <nl> - / / remove <nl> - rm = new RowMutation ( " Table1 " , " key1 " ) ; <nl> - ColumnFamily cf = new ColumnFamily ( " Standard1 " ) ; <nl> - cf . delete ( 1 ) ; <nl> - rm . add ( cf ) ; <nl> - rm . apply ( ) ; <nl> - <nl> - ColumnFamily retrieved = store . getColumnFamily ( " key1 " , " Standard1 " , new IdentityFilter ( ) ) ; <nl> - assert retrieved . getColumnCount ( ) = = 0 ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testRemoveSuperColumn ( ) throws IOException , ColumnFamilyNotDefinedException { <nl> - Table table = Table . open ( " Table1 " ) ; <nl> - ColumnFamilyStore store = table . getColumnFamilyStore ( " Super1 " ) ; <nl> - RowMutation rm ; <nl> - <nl> - / / add data <nl> - rm = new RowMutation ( " Table1 " , " key1 " ) ; <nl> - rm . add ( " Super1 : SC1 : Column1 " , " asdf " . getBytes ( ) , 0 ) ; <nl> - rm . apply ( ) ; <nl> - store . forceFlush ( ) ; <nl> - <nl> - / / remove <nl> - rm = new RowMutation ( " Table1 " , " key1 " ) ; <nl> - ColumnFamily cf = new ColumnFamily ( " Super1 " ) ; <nl> - SuperColumn sc = new SuperColumn ( " SC1 " ) ; <nl> - sc . markForDeleteAt ( 1 ) ; <nl> - cf . addColumn ( sc ) ; <nl> - rm . add ( cf ) ; <nl> - rm . apply ( ) ; <nl> - <nl> - List < ColumnFamily > families = store . getColumnFamilies ( " key1 " , " Super1 " , new IdentityFilter ( ) ) ; <nl> - assert families . get ( 0 ) . getAllColumns ( ) . first ( ) . getMarkedForDeleteAt ( ) = = 1 ; / / delete marker , just added <nl> - assert ! families . get ( 1 ) . getAllColumns ( ) . first ( ) . isMarkedForDelete ( ) ; / / flushed old version <nl> - ColumnFamily resolved = ColumnFamilyStore . resolve ( families ) ; <nl> - assert resolved . getAllColumns ( ) . first ( ) . getMarkedForDeleteAt ( ) = = 1 ; <nl> - Collection < IColumn > subColumns = resolved . getAllColumns ( ) . first ( ) . getSubColumns ( ) ; <nl> - assert subColumns . size ( ) = = 1 ; <nl> - assert subColumns . iterator ( ) . next ( ) . timestamp ( ) = = 0 ; <nl> - assert ColumnFamilyStore . removeDeleted ( resolved ) . getColumnCount ( ) = = 0 ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / ColumnFamilyTest . java b / test / org / apache / cassandra / db / ColumnFamilyTest . java <nl> deleted file mode 100644 <nl> index 3256e64 . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / ColumnFamilyTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 67 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . apache . cassandra . io . DataInputBuffer ; <nl> - import org . apache . cassandra . io . DataOutputBuffer ; <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . Arrays ; <nl> - import java . util . HashSet ; <nl> - import java . util . Random ; <nl> - import java . util . TreeMap ; <nl> - <nl> - public class ColumnFamilyTest <nl> - { <nl> - / / TODO test SuperColumns <nl> - <nl> - @ Test <nl> - public void testSingleColumn ( ) throws IOException { <nl> - Random random = new Random ( ) ; <nl> - byte [ ] bytes = new byte [ 1024 ] ; <nl> - random . nextBytes ( bytes ) ; <nl> - ColumnFamily cf ; <nl> - <nl> - cf = new ColumnFamily ( " Standard1 " , " Standard " ) ; <nl> - cf . addColumn ( " C " , bytes , 1 ) ; <nl> - DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; <nl> - ColumnFamily . serializer ( ) . serialize ( cf , bufOut ) ; <nl> - <nl> - DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> - bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; <nl> - cf = ColumnFamily . serializer ( ) . deserialize ( bufIn ) ; <nl> - assert cf ! = null ; <nl> - assert cf . name ( ) . equals ( " Standard1 " ) ; <nl> - assert cf . getAllColumns ( ) . size ( ) = = 1 ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testManyColumns ( ) throws IOException { <nl> - ColumnFamily cf ; <nl> - <nl> - TreeMap < String , byte [ ] > map = new TreeMap < String , byte [ ] > ( ) ; <nl> - for ( int i = 100 ; i < 1000 ; + + i ) <nl> - { <nl> - map . put ( Integer . toString ( i ) , ( " Avinash Lakshman is a good man : " + i ) . getBytes ( ) ) ; <nl> - } <nl> - <nl> - / / write <nl> - cf = new ColumnFamily ( " Standard1 " , " Standard " ) ; <nl> - DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; <nl> - for ( String cName : map . navigableKeySet ( ) ) <nl> - { <nl> - cf . addColumn ( cName , map . get ( cName ) , 314 ) ; <nl> - } <nl> - ColumnFamily . serializer ( ) . serialize ( cf , bufOut ) ; <nl> - <nl> - / / verify <nl> - DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> - bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; <nl> - cf = ColumnFamily . serializer ( ) . deserialize ( bufIn ) ; <nl> - for ( String cName : map . navigableKeySet ( ) ) <nl> - { <nl> - assert Arrays . equals ( cf . getColumn ( cName ) . value ( ) , map . get ( cName ) ) ; <nl> - <nl> - } <nl> - assert new HashSet < String > ( cf . getColumns ( ) . keySet ( ) ) . equals ( map . keySet ( ) ) ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / CommitLogTest . java b / test / org / apache / cassandra / db / CommitLogTest . java <nl> deleted file mode 100644 <nl> index 38da560 . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / CommitLogTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 45 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . util . Set ; <nl> - import java . util . Map ; <nl> - import java . util . Arrays ; <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . io . DataInputBuffer ; <nl> - import org . apache . cassandra . ServerTest ; <nl> - <nl> - public class CommitLogTest extends ServerTest { <nl> - @ Test <nl> - public void testMain ( ) throws IOException { <nl> - / / TODO this is useless , since it assumes we have a working set of commit logs to parse <nl> - / * <nl> - File logDir = new File ( DatabaseDescriptor . getLogFileLocation ( ) ) ; <nl> - File [ ] files = logDir . listFiles ( ) ; <nl> - Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; <nl> - <nl> - byte [ ] bytes = new byte [ CommitLogHeader . size ( Integer . parseInt ( args [ 0 ] ) ) ] ; <nl> - for ( File file : files ) <nl> - { <nl> - CommitLog clog = new CommitLog ( file ) ; <nl> - clog . readCommitLogHeader ( file . getAbsolutePath ( ) , bytes ) ; <nl> - DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> - bufIn . reset ( bytes , 0 , bytes . length ) ; <nl> - CommitLogHeader clHeader = CommitLogHeader . serializer ( ) . deserialize ( bufIn ) ; <nl> - <nl> - StringBuilder sb = new StringBuilder ( " " ) ; <nl> - for ( byte b : bytes ) <nl> - { <nl> - sb . append ( b ) ; <nl> - sb . append ( " " ) ; <nl> - } <nl> - <nl> - System . out . println ( " FILE : " + file ) ; <nl> - System . out . println ( clHeader . toString ( ) ) ; <nl> - } <nl> - * / <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / DBManagerTest . java b / test / org / apache / cassandra / db / DBManagerTest . java <nl> deleted file mode 100644 <nl> index dc3b96a . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / DBManagerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - import org . apache . cassandra . ServerTest ; <nl> - <nl> - public class DBManagerTest extends ServerTest { <nl> - @ Test <nl> - public void testMain ( ) throws Throwable { <nl> - / / TODO clean up old detritus <nl> - DBManager . instance ( ) . start ( ) ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / RecoveryManagerTest . java b / test / org / apache / cassandra / db / RecoveryManagerTest . java <nl> deleted file mode 100644 <nl> index b442bc0 . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / RecoveryManagerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - import org . apache . cassandra . ServerTest ; <nl> - <nl> - public class RecoveryManagerTest extends ServerTest { <nl> - @ Test <nl> - public void testDoRecovery ( ) throws IOException { <nl> - / / TODO nothing to recover <nl> - RecoveryManager rm = RecoveryManager . instance ( ) ; <nl> - rm . doRecovery ( ) ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / SystemTableTest . java b / test / org / apache / cassandra / db / SystemTableTest . java <nl> deleted file mode 100644 <nl> index 7572bbc . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / SystemTableTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 14 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . apache . cassandra . ServerTest ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - public class SystemTableTest extends ServerTest { <nl> - @ Test <nl> - public void testMain ( ) throws IOException { <nl> - SystemTable . openSystemTable ( SystemTable . cfName _ ) . updateToken ( StorageService . token ( " 503545744 : 0 " ) ) ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / db / TableTest . java b / test / org / apache / cassandra / db / TableTest . java <nl> deleted file mode 100644 <nl> index 41f58f1 . . 0000000 <nl> - - - a / test / org / apache / cassandra / db / TableTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package org . apache . cassandra . db ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - <nl> - import org . apache . cassandra . service . StorageService ; <nl> - <nl> - public class TableTest { <nl> - @ Test <nl> - public void testOpen ( ) throws Throwable { <nl> - Table table = Table . open ( " Mailbox " ) ; <nl> - Row row = table . get ( " 35300190 : 1 " ) ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / dht / RangeTest . java b / test / org / apache / cassandra / dht / RangeTest . java <nl> deleted file mode 100644 <nl> index 203ee5b . . 0000000 <nl> - - - a / test / org / apache / cassandra / dht / RangeTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 18 + 0 , 0 @ @ <nl> - package org . apache . cassandra . dht ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - <nl> - public class RangeTest { <nl> - @ Test <nl> - public void testRange ( ) { <nl> - Range left = new Range ( new BigIntegerToken ( " 0 " ) , new BigIntegerToken ( " 100 " ) ) ; <nl> - assert left . contains ( new BigIntegerToken ( " 10 " ) ) ; <nl> - assert ! left . contains ( new BigIntegerToken ( " - 1 " ) ) ; <nl> - assert ! left . contains ( new BigIntegerToken ( " 101 " ) ) ; <nl> - <nl> - Range right = new Range ( new BigIntegerToken ( " 100 " ) , new BigIntegerToken ( " 0 " ) ) ; <nl> - assert right . contains ( new BigIntegerToken ( " 200 " ) ) ; <nl> - assert right . contains ( new BigIntegerToken ( " - 10 " ) ) ; <nl> - assert ! right . contains ( new BigIntegerToken ( " 1 " ) ) ; <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / io / DataInputBufferTest . java b / test / org / apache / cassandra / io / DataInputBufferTest . java <nl> deleted file mode 100644 <nl> index b6bb7a6 . . 0000000 <nl> - - - a / test / org / apache / cassandra / io / DataInputBufferTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - package org . apache . cassandra . io ; <nl> - <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . util . Random ; <nl> - import java . io . IOException ; <nl> - <nl> - public class DataInputBufferTest { <nl> - @ Test <nl> - public void testRandom ( ) throws IOException { <nl> - Random random = new Random ( ) ; <nl> - byte [ ] bytes = new byte [ 1024 * 1024 ] ; <nl> - random . nextBytes ( bytes ) ; <nl> - <nl> - DataInputBuffer . FastByteArrayInputStream bis = new DataInputBuffer . FastByteArrayInputStream ( bytes ) ; <nl> - int read = 0 ; <nl> - int n = 0 ; <nl> - while ( true ) <nl> - { <nl> - read = bis . read ( ) ; <nl> - if ( read = = - 1 ) <nl> - break ; <nl> - assert read = = ( ( int ) bytes [ n + + ] & 0xFF ) ; <nl> - } <nl> - assert n = = bytes . length ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testSmall ( ) throws IOException { <nl> - DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; <nl> - bufOut . writeUTF ( " Avinash " ) ; <nl> - bufOut . writeInt ( 41 * 1024 * 1024 ) ; <nl> - DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> - bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; <nl> - assert bufIn . readUTF ( ) . equals ( " Avinash " ) ; <nl> - assert bufIn . readInt ( ) = = 41 * 1024 * 1024 ; <nl> - } <nl> - <nl> - } <nl> diff - - git a / test / org / apache / cassandra / io / SSTableTest . java b / test / org / apache / cassandra / io / SSTableTest . java <nl> deleted file mode 100644 <nl> index dd5b161 . . 0000000 <nl> - - - a / test / org / apache / cassandra / io / SSTableTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 78 + 0 , 0 @ @ <nl> - package org . apache . cassandra . io ; <nl> - <nl> - import org . apache . cassandra . ServerTest ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . cassandra . db . FileStruct ; <nl> - import org . apache . cassandra . utils . BloomFilter ; <nl> - import org . apache . commons . collections . CollectionUtils ; <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - import java . util . * ; <nl> - <nl> - public class SSTableTest extends ServerTest { <nl> - / * <nl> - @ Test <nl> - public void testSingleWrite ( ) throws IOException { <nl> - File f = File . createTempFile ( " sstable " , " " ) ; <nl> - SSTable ssTable ; <nl> - <nl> - / / write test data <nl> - ssTable = new SSTable ( f . getParent ( ) , f . getName ( ) ) ; <nl> - BloomFilter bf = new BloomFilter ( 1000 , 8 ) ; <nl> - Random random = new Random ( ) ; <nl> - byte [ ] bytes = new byte [ 1024 ] ; <nl> - random . nextBytes ( bytes ) ; <nl> - <nl> - String key = Integer . toString ( 1 ) ; <nl> - ssTable . append ( key , bytes ) ; <nl> - bf . fill ( key ) ; <nl> - ssTable . close ( bf ) ; <nl> - <nl> - / / TODO this is broken because SST / SequenceFile now assume that only CFs are written <nl> - <nl> - / / verify <nl> - ssTable = new SSTable ( f . getPath ( ) + " - Data . db " ) ; <nl> - DataInputBuffer bufIn = ssTable . next ( key , " Test : C " ) ; <nl> - byte [ ] bytes2 = new byte [ 1024 ] ; <nl> - bufIn . readFully ( bytes2 ) ; <nl> - assert Arrays . equals ( bytes2 , bytes ) ; <nl> - } <nl> - <nl> - / / @ Test <nl> - public void testManyWrites ( ) throws IOException { <nl> - File f = File . createTempFile ( " sstable " , " " ) ; <nl> - SSTable ssTable ; <nl> - <nl> - TreeMap < String , byte [ ] > map = new TreeMap < String , byte [ ] > ( ) ; <nl> - for ( int i = 100 ; i < 1000 ; + + i ) <nl> - { <nl> - map . put ( Integer . toString ( i ) , ( " Avinash Lakshman is a good man : " + i ) . getBytes ( ) ) ; <nl> - } <nl> - <nl> - / / write <nl> - ssTable = new SSTable ( f . getParent ( ) , f . getName ( ) ) ; <nl> - BloomFilter bf = new BloomFilter ( 1000 , 8 ) ; <nl> - for ( String key : map . navigableKeySet ( ) ) <nl> - { <nl> - ssTable . append ( key , map . get ( key ) ) ; <nl> - } <nl> - ssTable . close ( bf ) ; <nl> - <nl> - / / TODO this is broken because SST / SequenceFile now assume that only CFs are written <nl> - <nl> - / / verify <nl> - List < String > keys = new ArrayList ( map . keySet ( ) ) ; <nl> - Collections . shuffle ( keys ) ; <nl> - ssTable = new SSTable ( f . getPath ( ) + " - Data . db " ) ; <nl> - for ( String key : keys ) <nl> - { <nl> - DataInputBuffer bufIn = ssTable . next ( key , " Test : C " ) ; <nl> - byte [ ] bytes2 = new byte [ map . get ( key ) . length ] ; <nl> - bufIn . readFully ( bytes2 ) ; <nl> - assert Arrays . equals ( bytes2 , map . get ( key ) ) ; <nl> - } <nl> - } <nl> - * / <nl> - } <nl> diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> deleted file mode 100644 <nl> index 762bbb5 . . 0000000 <nl> - - - a / test / org / apache / cassandra / service / CassandraServerTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 88 + 0 , 0 @ @ <nl> - package org . apache . cassandra . service ; <nl> - <nl> - import org . apache . cassandra . ServerTest ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . commons . collections . CollectionUtils ; <nl> - import org . apache . commons . collections . IteratorUtils ; <nl> - import org . testng . annotations . Test ; <nl> - <nl> - import java . io . IOException ; <nl> - import java . util . * ; <nl> - <nl> - import com . facebook . thrift . TException ; <nl> - <nl> - public class CassandraServerTest extends ServerTest { <nl> - / * <nl> - TODO fix resetting server so this works <nl> - @ Test <nl> - public void test _ get _ range _ empty ( ) throws IOException , TException { <nl> - CassandraServer server = new CassandraServer ( ) ; <nl> - server . start ( ) ; <nl> - <nl> - assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; <nl> - } <nl> - * / <nl> - <nl> - / * <nl> - @ Test <nl> - public void test _ get _ range ( ) throws IOException , TException , CassandraException <nl> - { <nl> - CassandraServer server = new CassandraServer ( ) ; <nl> - try <nl> - { <nl> - server . start ( ) ; <nl> - } <nl> - catch ( Throwable throwable ) <nl> - { <nl> - throw new RuntimeException ( throwable ) ; <nl> - } <nl> - <nl> - / / TODO insert some data <nl> - try { <nl> - String last = null ; <nl> - for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { <nl> - if ( last ! = null ) { <nl> - assert last . compareTo ( key ) < 0 ; <nl> - } <nl> - last = key ; <nl> - } <nl> - } finally { <nl> - server . shutdown ( ) ; <nl> - } <nl> - } <nl> - * / <nl> - <nl> - / * <nl> - @ Test <nl> - public void test _ get _ column ( ) throws Throwable { <nl> - CassandraServer server = new CassandraServer ( ) ; <nl> - server . start ( ) ; <nl> - <nl> - try { <nl> - column _ t c1 = new column _ t ( " c1 " , " 0 " , 0L ) ; <nl> - column _ t c2 = new column _ t ( " c2 " , " 0 " , 0L ) ; <nl> - List < column _ t > columns = new ArrayList < column _ t > ( ) ; <nl> - columns . add ( c1 ) ; <nl> - columns . add ( c2 ) ; <nl> - Map < String , List < column _ t > > cfmap = new HashMap < String , List < column _ t > > ( ) ; <nl> - cfmap . put ( " Standard1 " , columns ) ; <nl> - cfmap . put ( " Standard2 " , columns ) ; <nl> - <nl> - batch _ mutation _ t m = new batch _ mutation _ t ( " Table1 " , " key1 " , cfmap ) ; <nl> - server . batch _ insert ( m , 1 ) ; <nl> - <nl> - column _ t column ; <nl> - column = server . get _ column ( " Table1 " , " key1 " , " Standard1 : c2 " ) ; <nl> - assert column . value . equals ( " 0 " ) ; <nl> - <nl> - column = server . get _ column ( " Table1 " , " key1 " , " Standard2 : c2 " ) ; <nl> - assert column . value . equals ( " 0 " ) ; <nl> - <nl> - ArrayList < column _ t > column _ ts = server . get _ slice _ strong ( " Table1 " , " key1 " , " Standard1 " , - 1 , - 1 ) ; <nl> - assert column _ ts . size ( ) = = 2 ; <nl> - } finally { <nl> - server . shutdown ( ) ; <nl> - } <nl> - } <nl> - * / <nl> - } <nl> diff - - git a / test / org / apache / cassandra / utils / KeyGenerator . java b / test / org / apache / cassandra / utils / KeyGenerator . java <nl> deleted file mode 100644 <nl> index 99ddef0 . . 0000000 <nl> - - - a / test / org / apache / cassandra / utils / KeyGenerator . java <nl> + + + / dev / null <nl> @ @ - 1 , 148 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . io . * ; <nl> - import java . util . Random ; <nl> - <nl> - public class KeyGenerator { <nl> - private static String randomKey ( Random r ) { <nl> - StringBuffer buffer = new StringBuffer ( ) ; <nl> - for ( int j = 0 ; j < 16 ; j + + ) { <nl> - buffer . append ( ( char ) r . nextInt ( ) ) ; <nl> - } <nl> - return buffer . toString ( ) ; <nl> - } <nl> - <nl> - static class RandomStringGenerator implements ResetableIterator < String > { <nl> - int i , n , seed ; <nl> - Random random ; <nl> - <nl> - RandomStringGenerator ( int seed , int n ) { <nl> - i = 0 ; <nl> - this . seed = seed ; <nl> - this . n = n ; <nl> - reset ( ) ; <nl> - } <nl> - <nl> - public int size ( ) { <nl> - return n ; <nl> - } <nl> - <nl> - public void reset ( ) { <nl> - random = new Random ( seed ) ; <nl> - } <nl> - <nl> - public boolean hasNext ( ) { <nl> - return i < n ; <nl> - } <nl> - <nl> - public String next ( ) { <nl> - i + + ; <nl> - return randomKey ( random ) ; <nl> - } <nl> - <nl> - public void remove ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - } <nl> - <nl> - static class IntGenerator implements ResetableIterator < String > { <nl> - private int i , start , n ; <nl> - <nl> - IntGenerator ( int n ) { <nl> - this ( 0 , n ) ; <nl> - } <nl> - <nl> - IntGenerator ( int start , int n ) { <nl> - this . start = start ; <nl> - this . n = n ; <nl> - reset ( ) ; <nl> - } <nl> - <nl> - public int size ( ) { <nl> - return n - start ; <nl> - } <nl> - <nl> - public void reset ( ) { <nl> - i = start ; <nl> - } <nl> - <nl> - public boolean hasNext ( ) { <nl> - return i < n ; <nl> - } <nl> - <nl> - public String next ( ) { <nl> - return Integer . toString ( i + + ) ; <nl> - } <nl> - <nl> - public void remove ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - } <nl> - <nl> - static class WordGenerator implements ResetableIterator < String > { <nl> - static int WORDS ; <nl> - <nl> - static { <nl> - try { <nl> - BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; <nl> - while ( br . ready ( ) ) { <nl> - br . readLine ( ) ; <nl> - WORDS + + ; <nl> - } <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - BufferedReader reader ; <nl> - private int modulo ; <nl> - private int skip ; <nl> - String next ; <nl> - <nl> - WordGenerator ( int skip , int modulo ) { <nl> - this . skip = skip ; <nl> - this . modulo = modulo ; <nl> - reset ( ) ; <nl> - } <nl> - <nl> - public int size ( ) { <nl> - return ( 1 + WORDS - skip ) / modulo ; <nl> - } <nl> - <nl> - public void reset ( ) { <nl> - try { <nl> - reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; <nl> - } catch ( FileNotFoundException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - for ( int i = 0 ; i < skip ; i + + ) { <nl> - try { <nl> - reader . readLine ( ) ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - next ( ) ; <nl> - } <nl> - <nl> - public boolean hasNext ( ) { <nl> - return next ! = null ; <nl> - } <nl> - <nl> - public String next ( ) { <nl> - try { <nl> - String s = next ; <nl> - for ( int i = 0 ; i < modulo ; i + + ) { <nl> - next = reader . readLine ( ) ; <nl> - } <nl> - return s ; <nl> - } catch ( IOException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - <nl> - public void remove ( ) { <nl> - throw new UnsupportedOperationException ( ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / test / org / apache / cassandra / utils / ResetableIterator . java b / test / org / apache / cassandra / utils / ResetableIterator . java <nl> deleted file mode 100644 <nl> index a2f1caf . . 0000000 <nl> - - - a / test / org / apache / cassandra / utils / ResetableIterator . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . Iterator ; <nl> - <nl> - public interface ResetableIterator < T > extends Iterator < T > { <nl> - public void reset ( ) ; <nl> - <nl> - int size ( ) ; <nl> - } <nl> diff - - git a / test / testng . xml b / test / testng . xml <nl> deleted file mode 100644 <nl> index d91aeb4 . . 0000000 <nl> - - - a / test / testng . xml <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - < ! DOCTYPE suite SYSTEM " http : / / testng . org / testng - 1 . 0 . dtd " >

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / NativeCellTest . java b / test / unit / org / apache / cassandra / db / NativeCellTest . java 
 index 70b7b87 . . b804412 100644 
 - - - a / test / unit / org / apache / cassandra / db / NativeCellTest . java 
 + + + b / test / unit / org / apache / cassandra / db / NativeCellTest . java 
 @ @ - 1 , 280 + 1 , 271 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . db ; 
 - 
 - import java . io . ByteArrayInputStream ; 
 - import java . io . DataInputStream ; 
 - import java . io . IOException ; 
 - import java . nio . ByteBuffer ; 
 - import java . security . MessageDigest ; 
 - import java . security . NoSuchAlgorithmException ; 
 - import java . util . Arrays ; 
 - import java . util . Random ; 
 - import java . util . concurrent . ThreadLocalRandom ; 
 - 
 - import org . junit . Assert ; 
 - import org . junit . Test ; 
 - 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . ColumnDefinition ; 
 - import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 - import org . apache . cassandra . db . composites . CellName ; 
 - import org . apache . cassandra . db . composites . CellNameType ; 
 - import org . apache . cassandra . db . composites . CompoundDenseCellNameType ; 
 - import org . apache . cassandra . db . composites . CompoundSparseCellNameType ; 
 - import org . apache . cassandra . db . composites . SimpleDenseCellNameType ; 
 - import org . apache . cassandra . db . composites . SimpleSparseCellNameType ; 
 - import org . apache . cassandra . db . context . CounterContext ; 
 - import org . apache . cassandra . db . marshal . AbstractType ; 
 - import org . apache . cassandra . db . marshal . UTF8Type ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . io . util . DataOutputBuffer ; 
 - import org . apache . cassandra . utils . concurrent . OpOrder ; 
 - import org . apache . cassandra . utils . memory . NativeAllocator ; 
 - import org . apache . cassandra . utils . memory . NativePool ; 
 - 
 - import static org . apache . cassandra . db . composites . CellNames . compositeDense ; 
 - import static org . apache . cassandra . db . composites . CellNames . compositeSparse ; 
 - import static org . apache . cassandra . db . composites . CellNames . simpleDense ; 
 - import static org . apache . cassandra . db . composites . CellNames . simpleSparse ; 
 - import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 - 
 - public class NativeCellTest 
 - { 
 - 
 - private static final NativeAllocator nativeAllocator = new NativePool ( Integer . MAX _ VALUE , Integer . MAX _ VALUE , 1f , null ) . newAllocator ( ) ; 
 - private static final OpOrder . Group group = new OpOrder ( ) . start ( ) ; 
 - 
 - static class Name 
 - { 
 - final CellName name ; 
 - final CellNameType type ; 
 - Name ( CellName name , CellNameType type ) 
 - { 
 - this . name = name ; 
 - this . type = type ; 
 - } 
 - } 
 - 
 - static ByteBuffer [ ] bytess ( String . . . strings ) 
 - { 
 - ByteBuffer [ ] r = new ByteBuffer [ strings . length ] ; 
 - for ( int i = 0 ; i < r . length ; i + + ) 
 - r [ i ] = bytes ( strings [ i ] ) ; 
 - return r ; 
 - } 
 - 
 - final static Name [ ] TESTS = new Name [ ] 
 - { 
 - new Name ( simpleDense ( bytes ( " a " ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , 
 - new Name ( simpleSparse ( new ColumnIdentifier ( " a " , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , 
 - new Name ( compositeDense ( bytes ( " a " ) , bytes ( " b " ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 - new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 - new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 - new Name ( simpleDense ( huge ( ' a ' , 40000 ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , 
 - new Name ( simpleSparse ( new ColumnIdentifier ( hugestr ( ' a ' , 40000 ) , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , 
 - new Name ( compositeDense ( huge ( ' a ' , 20000 ) , huge ( ' b ' , 20000 ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 - new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 - new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) 
 - } ; 
 - 
 - private static ByteBuffer huge ( char ch , int count ) 
 - { 
 - return bytes ( hugestr ( ch , count ) ) ; 
 - } 
 - 
 - private static ByteBuffer [ ] huges ( int count , char . . . chs ) 
 - { 
 - ByteBuffer [ ] r = new ByteBuffer [ chs . length ] ; 
 - for ( int i = 0 ; i < chs . length ; i + + ) 
 - r [ i ] = huge ( chs [ i ] , count / chs . length ) ; 
 - return r ; 
 - } 
 - 
 - private static String hugestr ( char ch , int count ) 
 - { 
 - ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; 
 - byte [ ] bytes = new byte [ count ] ; 
 - random . nextBytes ( bytes ) ; 
 - bytes [ 0 ] = ( byte ) ch ; 
 - for ( int i = 0 ; i < bytes . length ; i + + ) 
 - bytes [ i ] & = 0x7f ; 
 - return new String ( bytes ) ; 
 - } 
 - 
 - private static final CFMetaData metadata = new CFMetaData ( " " , " " , ColumnFamilyType . Standard , null ) ; 
 - static 
 - { 
 - try 
 - { 
 - metadata . addColumnDefinition ( new ColumnDefinition ( null , null , new ColumnIdentifier ( " a " , true ) , UTF8Type . instance , null , null , null , null , null ) ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - throw new AssertionError ( ) ; 
 - } 
 - } 
 - 
 - @ Test 
 - public void testCells ( ) throws IOException 
 - { 
 - Random rand = ThreadLocalRandom . current ( ) ; 
 - for ( Name test : TESTS ) 
 - { 
 - byte [ ] bytes = new byte [ 16 ] ; 
 - rand . nextBytes ( bytes ) ; 
 - 
 - / / test regular Cell 
 - Cell buf , nat ; 
 - buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - test ( test , buf , nat ) ; 
 - 
 - / / test DeletedCell 
 - buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - test ( test , buf , nat ) ; 
 - 
 - / / test ExpiringCell 
 - buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - test ( test , buf , nat ) ; 
 - 
 - / / test CounterCell 
 - buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - test ( test , buf , nat ) ; 
 - } 
 - } 
 - 
 - 
 - @ Test 
 - public void testComparator ( ) 
 - { 
 - 
 - Random rand = ThreadLocalRandom . current ( ) ; 
 - for ( Name test : TESTS ) 
 - { 
 - byte [ ] bytes = new byte [ 7 ] ; 
 - byte [ ] bytes2 = new byte [ 7 ] ; 
 - rand . nextBytes ( bytes ) ; 
 - rand . nextBytes ( bytes2 ) ; 
 - 
 - / / test regular Cell 
 - Cell buf , nat , buf2 , nat2 ; 
 - buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - buf2 = new BufferCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) ) ; 
 - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 - 
 - int val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 - 
 - 
 - / / test DeletedCell 
 - buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - buf2 = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; 
 - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 - 
 - val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 - 
 - 
 - 
 - / / test ExpiringCell 
 - buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - buf2 = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 - 
 - val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 - 
 - 
 - / / test CounterCell 
 - buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 - nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - buf2 = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 - nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 - 
 - assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 - assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 - 
 - val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 - assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 - assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 - assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 - 
 - } 
 - } 
 - 
 - static void test ( Name test , Cell buf , Cell nat ) throws IOException 
 - { 
 - Assert . assertTrue ( buf . equals ( nat ) ) ; 
 - Assert . assertTrue ( nat . equals ( buf ) ) ; 
 - Assert . assertTrue ( buf . equals ( buf ) ) ; 
 - Assert . assertTrue ( nat . equals ( nat ) ) ; 
 - 
 - try 
 - { 
 - MessageDigest d1 = MessageDigest . getInstance ( " MD5 " ) ; 
 - MessageDigest d2 = MessageDigest . getInstance ( " MD5 " ) ; 
 - buf . updateDigest ( d1 ) ; 
 - nat . updateDigest ( d2 ) ; 
 - Assert . assertArrayEquals ( d1 . digest ( ) , d2 . digest ( ) ) ; 
 - } 
 - catch ( NoSuchAlgorithmException e ) 
 - { 
 - throw new IllegalStateException ( e ) ; 
 - } 
 - 
 - byte [ ] serialized ; 
 - try ( DataOutputBuffer bufOut = new DataOutputBuffer ( ) ) 
 - { 
 - test . type . columnSerializer ( ) . serialize ( nat , bufOut ) ; 
 - serialized = bufOut . getData ( ) ; 
 - } 
 - 
 - ByteArrayInputStream bufIn = new ByteArrayInputStream ( serialized , 0 , serialized . length ) ; 
 - Cell deserialized = test . type . columnSerializer ( ) . deserialize ( new DataInputStream ( bufIn ) ) ; 
 - Assert . assertTrue ( buf . equals ( deserialized ) ) ; 
 - 
 - } 
 - 
 - 
 - 
 - } 
 + / / / * 
 + / / * Licensed to the Apache Software Foundation ( ASF ) under one 
 + / / * or more contributor license agreements . See the NOTICE file 
 + / / * distributed with this work for additional information 
 + / / * regarding copyright ownership . The ASF licenses this file 
 + / / * to you under the Apache License , Version 2 . 0 ( the 
 + / / * " License " ) ; you may not use this file except in compliance 
 + / / * with the License . You may obtain a copy of the License at 
 + / / * 
 + / / * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + / / * 
 + / / * Unless required by applicable law or agreed to in writing , software 
 + / / * distributed under the License is distributed on an " AS IS " BASIS , 
 + / / * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + / / * See the License for the specific language governing permissions and 
 + / / * limitations under the License . 
 + / / * / 
 + / / package org . apache . cassandra . db ; 
 + / / 
 + / / import java . io . ByteArrayInputStream ; 
 + / / import java . io . DataInputStream ; 
 + / / import java . io . IOException ; 
 + / / import java . nio . ByteBuffer ; 
 + / / import java . security . MessageDigest ; 
 + / / import java . security . NoSuchAlgorithmException ; 
 + / / import java . util . Arrays ; 
 + / / import java . util . Random ; 
 + / / import java . util . concurrent . ThreadLocalRandom ; 
 + / / 
 + / / import org . junit . Assert ; 
 + / / import org . junit . Test ; 
 + / / 
 + / / import org . apache . cassandra . config . CFMetaData ; 
 + / / import org . apache . cassandra . config . ColumnDefinition ; 
 + / / import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 + / / import org . apache . cassandra . db . context . CounterContext ; 
 + / / import org . apache . cassandra . db . marshal . AbstractType ; 
 + / / import org . apache . cassandra . db . marshal . UTF8Type ; 
 + / / import org . apache . cassandra . db . rows . Cell ; 
 + / / import org . apache . cassandra . exceptions . ConfigurationException ; 
 + / / import org . apache . cassandra . io . util . DataOutputBuffer ; 
 + / / import org . apache . cassandra . utils . concurrent . OpOrder ; 
 + / / import org . apache . cassandra . utils . memory . NativeAllocator ; 
 + / / import org . apache . cassandra . utils . memory . NativePool ; 
 + / / 
 + / / import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 + / / 
 + / / public class NativeCellTest 
 + / / { 
 + / / 
 + / / private static final NativeAllocator nativeAllocator = new NativePool ( Integer . MAX _ VALUE , Integer . MAX _ VALUE , 1f , null ) . newAllocator ( ) ; 
 + / / private static final OpOrder . Group group = new OpOrder ( ) . start ( ) ; 
 + / / 
 + / / static class Name 
 + / / { 
 + / / final CellName name ; 
 + / / final CellNameType type ; 
 + / / Name ( CellName name , CellNameType type ) 
 + / / { 
 + / / this . name = name ; 
 + / / this . type = type ; 
 + / / } 
 + / / } 
 + / / 
 + / / static ByteBuffer [ ] bytess ( String . . . strings ) 
 + / / { 
 + / / ByteBuffer [ ] r = new ByteBuffer [ strings . length ] ; 
 + / / for ( int i = 0 ; i < r . length ; i + + ) 
 + / / r [ i ] = bytes ( strings [ i ] ) ; 
 + / / return r ; 
 + / / } 
 + / / 
 + / / final static Name [ ] TESTS = new Name [ ] 
 + / / { 
 + / / new Name ( simpleDense ( bytes ( " a " ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , 
 + / / new Name ( simpleSparse ( new ColumnIdentifier ( " a " , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , 
 + / / new Name ( compositeDense ( bytes ( " a " ) , bytes ( " b " ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 + / / new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 + / / new Name ( compositeSparse ( bytess ( " b " , " c " ) , new ColumnIdentifier ( " a " , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 + / / new Name ( simpleDense ( huge ( ' a ' , 40000 ) ) , new SimpleDenseCellNameType ( UTF8Type . instance ) ) , 
 + / / new Name ( simpleSparse ( new ColumnIdentifier ( hugestr ( ' a ' , 40000 ) , true ) ) , new SimpleSparseCellNameType ( UTF8Type . instance ) ) , 
 + / / new Name ( compositeDense ( huge ( ' a ' , 20000 ) , huge ( ' b ' , 20000 ) ) , new CompoundDenseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 + / / new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , false ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) , 
 + / / new Name ( compositeSparse ( huges ( 40000 , ' b ' , ' c ' ) , new ColumnIdentifier ( hugestr ( ' a ' , 10000 ) , true ) , true ) , new CompoundSparseCellNameType ( Arrays . < AbstractType < ? > > asList ( UTF8Type . instance , UTF8Type . instance ) ) ) 
 + / / } ; 
 + / / 
 + / / private static ByteBuffer huge ( char ch , int count ) 
 + / / { 
 + / / return bytes ( hugestr ( ch , count ) ) ; 
 + / / } 
 + / / 
 + / / private static ByteBuffer [ ] huges ( int count , char . . . chs ) 
 + / / { 
 + / / ByteBuffer [ ] r = new ByteBuffer [ chs . length ] ; 
 + / / for ( int i = 0 ; i < chs . length ; i + + ) 
 + / / r [ i ] = huge ( chs [ i ] , count / chs . length ) ; 
 + / / return r ; 
 + / / } 
 + / / 
 + / / private static String hugestr ( char ch , int count ) 
 + / / { 
 + / / ThreadLocalRandom random = ThreadLocalRandom . current ( ) ; 
 + / / byte [ ] bytes = new byte [ count ] ; 
 + / / random . nextBytes ( bytes ) ; 
 + / / bytes [ 0 ] = ( byte ) ch ; 
 + / / for ( int i = 0 ; i < bytes . length ; i + + ) 
 + / / bytes [ i ] & = 0x7f ; 
 + / / return new String ( bytes ) ; 
 + / / } 
 + / / 
 + / / private static final CFMetaData metadata = new CFMetaData ( " " , " " , ColumnFamilyType . Standard , null ) ; 
 + / / static 
 + / / { 
 + / / try 
 + / / { 
 + / / metadata . addColumnDefinition ( new ColumnDefinition ( null , null , new ColumnIdentifier ( " a " , true ) , UTF8Type . instance , null , null , null , null , null ) ) ; 
 + / / } 
 + / / catch ( ConfigurationException e ) 
 + / / { 
 + / / throw new AssertionError ( ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / @ Test 
 + / / public void testCells ( ) throws IOException 
 + / / { 
 + / / Random rand = ThreadLocalRandom . current ( ) ; 
 + / / for ( Name test : TESTS ) 
 + / / { 
 + / / byte [ ] bytes = new byte [ 16 ] ; 
 + / / rand . nextBytes ( bytes ) ; 
 + / / 
 + / / / / test regular Cell 
 + / / Cell buf , nat ; 
 + / / buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / test ( test , buf , nat ) ; 
 + / / 
 + / / / / test DeletedCell 
 + / / buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / test ( test , buf , nat ) ; 
 + / / 
 + / / / / test ExpiringCell 
 + / / buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / test ( test , buf , nat ) ; 
 + / / 
 + / / / / test CounterCell 
 + / / buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / test ( test , buf , nat ) ; 
 + / / } 
 + / / } 
 + / / 
 + / / 
 + / / @ Test 
 + / / public void testComparator ( ) 
 + / / { 
 + / / 
 + / / Random rand = ThreadLocalRandom . current ( ) ; 
 + / / for ( Name test : TESTS ) 
 + / / { 
 + / / byte [ ] bytes = new byte [ 7 ] ; 
 + / / byte [ ] bytes2 = new byte [ 7 ] ; 
 + / / rand . nextBytes ( bytes ) ; 
 + / / rand . nextBytes ( bytes2 ) ; 
 + / / 
 + / / / / test regular Cell 
 + / / Cell buf , nat , buf2 , nat2 ; 
 + / / buf = new BufferCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / buf2 = new BufferCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) ) ; 
 + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 + / / 
 + / / int val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / 
 + / / 
 + / / / / test DeletedCell 
 + / / buf = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / buf2 = new BufferDeletedCell ( test . name , rand . nextInt ( 100000 ) , rand . nextLong ( ) ) ; 
 + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 + / / 
 + / / val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / 
 + / / 
 + / / 
 + / / / / test ExpiringCell 
 + / / buf = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / buf2 = new BufferExpiringCell ( test . name , ByteBuffer . wrap ( bytes2 ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 + / / 
 + / / val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / 
 + / / 
 + / / / / test CounterCell 
 + / / buf = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 + / / nat = buf . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / buf2 = new BufferCounterCell ( test . name , CounterContext . instance ( ) . createLocal ( rand . nextLong ( ) ) , rand . nextLong ( ) , rand . nextInt ( 100000 ) ) ; 
 + / / nat2 = buf2 . localCopy ( metadata , nativeAllocator , group ) ; 
 + / / 
 + / / assert test . type . compare ( buf . name ( ) , nat . name ( ) ) = = 0 ; 
 + / / assert test . type . compare ( buf2 . name ( ) , nat2 . name ( ) ) = = 0 ; 
 + / / 
 + / / val = test . type . compare ( buf . name ( ) , buf2 . name ( ) ) ; 
 + / / assert test . type . compare ( nat . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( nat . name ( ) , buf2 . name ( ) ) = = val ; 
 + / / assert test . type . compare ( buf . name ( ) , nat2 . name ( ) ) = = val ; 
 + / / 
 + / / } 
 + / / } 
 + / / 
 + / / static void test ( Name test , Cell buf , Cell nat ) throws IOException 
 + / / { 
 + / / Assert . assertTrue ( buf . equals ( nat ) ) ; 
 + / / Assert . assertTrue ( nat . equals ( buf ) ) ; 
 + / / Assert . assertTrue ( buf . equals ( buf ) ) ; 
 + / / Assert . assertTrue ( nat . equals ( nat ) ) ; 
 + / / 
 + / / try 
 + / / { 
 + / / MessageDigest d1 = MessageDigest . getInstance ( " MD5 " ) ; 
 + / / MessageDigest d2 = MessageDigest . getInstance ( " MD5 " ) ; 
 + / / buf . updateDigest ( d1 ) ; 
 + / / nat . updateDigest ( d2 ) ; 
 + / / Assert . assertArrayEquals ( d1 . digest ( ) , d2 . digest ( ) ) ; 
 + / / } 
 + / / catch ( NoSuchAlgorithmException e ) 
 + / / { 
 + / / throw new IllegalStateException ( e ) ; 
 + / / } 
 + / / 
 + / / byte [ ] serialized ; 
 + / / try ( DataOutputBuffer bufOut = new DataOutputBuffer ( ) ) 
 + / / { 
 + / / test . type . columnSerializer ( ) . serialize ( nat , bufOut ) ; 
 + / / serialized = bufOut . getData ( ) ; 
 + / / } 
 + / / 
 + / / ByteArrayInputStream bufIn = new ByteArrayInputStream ( serialized , 0 , serialized . length ) ; 
 + / / Cell deserialized = test . type . columnSerializer ( ) . deserialize ( new DataInputStream ( bufIn ) ) ; 
 + / / Assert . assertTrue ( buf . equals ( deserialized ) ) ; 
 + / / 
 + / / } 
 + / / 
 + / / 
 + / / 
 + / / }

NEAREST DIFF:
diff - - git a / test / org / apache / cassandra / ServerTest . java b / test / org / apache / cassandra / ServerTest . java 
 deleted file mode 100644 
 index 59db562 . . 0000000 
 - - - a / test / org / apache / cassandra / ServerTest . java 
 + + + / dev / null 
 @ @ - 1 , 22 + 0 , 0 @ @ 
 - package org . apache . cassandra ; 
 - 
 - import org . testng . annotations . Test ; 
 - import org . testng . annotations . BeforeMethod ; 
 - 
 - import java . io . File ; 
 - 
 - @ Test ( groups = { " serial " } ) 
 - public class ServerTest { 
 - / / TODO clean up static structures too ( e . g . memtables ) 
 - @ BeforeMethod 
 - public void cleanup ( ) { 
 - / / for convenience , this assumes that you haven ' t changed the test config away from storing everything 
 - / / under / var / cassandra . 
 - for ( String dirname : new String [ ] { " bootstrap " , " commitlog " , " data " , " staging " , " system " } ) { 
 - File dir = new File ( " / var / cassandra " , dirname ) ; 
 - for ( File f : dir . listFiles ( ) ) { 
 - f . delete ( ) ; 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / ColumnComparatorFactoryTest . java b / test / org / apache / cassandra / db / ColumnComparatorFactoryTest . java 
 deleted file mode 100644 
 index 7665265 . . 0000000 
 - - - a / test / org / apache / cassandra / db / ColumnComparatorFactoryTest . java 
 + + + / dev / null 
 @ @ - 1 , 25 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . testng . annotations . Test ; 
 - 
 - import java . util . Comparator ; 
 - 
 - public class ColumnComparatorFactoryTest { 
 - public Comparator < IColumn > nameComparator ; 
 - 
 - @ Test 
 - public void testLT ( ) { 
 - IColumn col1 = new Column ( " Column - 8 " ) ; 
 - IColumn col2 = new Column ( " Column - 9 " ) ; 
 - nameComparator = ColumnComparatorFactory . getComparator ( ColumnComparatorFactory . ComparatorType . NAME ) ; 
 - assert nameComparator . compare ( col1 , col2 ) < 0 ; 
 - } 
 - 
 - @ Test 
 - public void testGT ( ) { 
 - IColumn col1 = new Column ( " Column - 9 " ) ; 
 - IColumn col2 = new Column ( " Column - 10 " ) ; 
 - / / tricky - - remember we ' re comparing _ lexically _ 
 - assert nameComparator . compare ( col1 , col2 ) > 0 ; 
 - 	 } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 deleted file mode 100644 
 index a2882cb . . 0000000 
 - - - a / test / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 + + + / dev / null 
 @ @ - 1 , 114 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . apache . cassandra . ServerTest ; 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . IOException ; 
 - import java . util . Collection ; 
 - import java . util . List ; 
 - import java . util . Random ; 
 - 
 - public class ColumnFamilyStoreTest extends ServerTest { 
 - @ Test 
 - public void testMain ( ) throws IOException , ColumnFamilyNotDefinedException { 
 - Table table = Table . open ( " Table1 " ) ; 
 - Random random = new Random ( ) ; 
 - byte [ ] bytes1 = new byte [ 1024 ] ; 
 - byte [ ] bytes2 = new byte [ 1024 ] ; 
 - random . nextBytes ( bytes1 ) ; 
 - random . nextBytes ( bytes2 ) ; 
 - 
 - for ( int i = 800 ; i < 1000 ; + + i ) 
 - { 
 - String key = Integer . toString ( i ) ; 
 - RowMutation rm ; 
 - for ( int j = 0 ; j < 8 ; + + j ) 
 - { 
 - byte [ ] bytes = j % 2 = = 0 ? bytes1 : bytes2 ; 
 - rm = new RowMutation ( " Table1 " , key ) ; 
 - rm . add ( " Standard1 : " + " Column - " + j , bytes , j ) ; 
 - rm . apply ( ) ; 
 - 
 - for ( int k = 0 ; k < 8 ; + + k ) 
 - { 
 - bytes = ( j + k ) % 2 = = 0 ? bytes1 : bytes2 ; 
 - rm = new RowMutation ( " Table1 " , key ) ; 
 - rm . add ( " Super1 : " + " SuperColumn - " + j + " : Column - " + k , bytes , k ) ; 
 - rm . apply ( ) ; 
 - } 
 - } 
 - } 
 - 
 - for ( int i = 800 ; i < 1000 ; + + i ) 
 - { 
 - String key = Integer . toString ( i ) ; 
 - / / TODO actually test results 
 - ColumnFamily cf = table . get ( key , " Super1 : SuperColumn - 1 " ) ; 
 - assert cf ! = null ; 
 - Collection < IColumn > superColumns = cf . getAllColumns ( ) ; 
 - for ( IColumn superColumn : superColumns ) 
 - { 
 - Collection < IColumn > subColumns = superColumn . getSubColumns ( ) ; 
 - for ( IColumn subColumn : subColumns ) 
 - { 
 - / / System . out . println ( subColumn ) ; 
 - } 
 - } 
 - } 
 - } 
 - 
 - @ Test 
 - public void testRemove ( ) throws IOException , ColumnFamilyNotDefinedException { 
 - Table table = Table . open ( " Table1 " ) ; 
 - ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard1 " ) ; 
 - RowMutation rm ; 
 - 
 - / / add data 
 - rm = new RowMutation ( " Table1 " , " key1 " ) ; 
 - rm . add ( " Standard1 : Column1 " , " asdf " . getBytes ( ) , 0 ) ; 
 - rm . apply ( ) ; 
 - store . forceFlush ( ) ; 
 - 
 - / / remove 
 - rm = new RowMutation ( " Table1 " , " key1 " ) ; 
 - ColumnFamily cf = new ColumnFamily ( " Standard1 " ) ; 
 - cf . delete ( 1 ) ; 
 - rm . add ( cf ) ; 
 - rm . apply ( ) ; 
 - 
 - ColumnFamily retrieved = store . getColumnFamily ( " key1 " , " Standard1 " , new IdentityFilter ( ) ) ; 
 - assert retrieved . getColumnCount ( ) = = 0 ; 
 - } 
 - 
 - @ Test 
 - public void testRemoveSuperColumn ( ) throws IOException , ColumnFamilyNotDefinedException { 
 - Table table = Table . open ( " Table1 " ) ; 
 - ColumnFamilyStore store = table . getColumnFamilyStore ( " Super1 " ) ; 
 - RowMutation rm ; 
 - 
 - / / add data 
 - rm = new RowMutation ( " Table1 " , " key1 " ) ; 
 - rm . add ( " Super1 : SC1 : Column1 " , " asdf " . getBytes ( ) , 0 ) ; 
 - rm . apply ( ) ; 
 - store . forceFlush ( ) ; 
 - 
 - / / remove 
 - rm = new RowMutation ( " Table1 " , " key1 " ) ; 
 - ColumnFamily cf = new ColumnFamily ( " Super1 " ) ; 
 - SuperColumn sc = new SuperColumn ( " SC1 " ) ; 
 - sc . markForDeleteAt ( 1 ) ; 
 - cf . addColumn ( sc ) ; 
 - rm . add ( cf ) ; 
 - rm . apply ( ) ; 
 - 
 - List < ColumnFamily > families = store . getColumnFamilies ( " key1 " , " Super1 " , new IdentityFilter ( ) ) ; 
 - assert families . get ( 0 ) . getAllColumns ( ) . first ( ) . getMarkedForDeleteAt ( ) = = 1 ; / / delete marker , just added 
 - assert ! families . get ( 1 ) . getAllColumns ( ) . first ( ) . isMarkedForDelete ( ) ; / / flushed old version 
 - ColumnFamily resolved = ColumnFamilyStore . resolve ( families ) ; 
 - assert resolved . getAllColumns ( ) . first ( ) . getMarkedForDeleteAt ( ) = = 1 ; 
 - Collection < IColumn > subColumns = resolved . getAllColumns ( ) . first ( ) . getSubColumns ( ) ; 
 - assert subColumns . size ( ) = = 1 ; 
 - assert subColumns . iterator ( ) . next ( ) . timestamp ( ) = = 0 ; 
 - assert ColumnFamilyStore . removeDeleted ( resolved ) . getColumnCount ( ) = = 0 ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / ColumnFamilyTest . java b / test / org / apache / cassandra / db / ColumnFamilyTest . java 
 deleted file mode 100644 
 index 3256e64 . . 0000000 
 - - - a / test / org / apache / cassandra / db / ColumnFamilyTest . java 
 + + + / dev / null 
 @ @ - 1 , 67 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . apache . cassandra . io . DataInputBuffer ; 
 - import org . apache . cassandra . io . DataOutputBuffer ; 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . IOException ; 
 - import java . util . Arrays ; 
 - import java . util . HashSet ; 
 - import java . util . Random ; 
 - import java . util . TreeMap ; 
 - 
 - public class ColumnFamilyTest 
 - { 
 - / / TODO test SuperColumns 
 - 
 - @ Test 
 - public void testSingleColumn ( ) throws IOException { 
 - Random random = new Random ( ) ; 
 - byte [ ] bytes = new byte [ 1024 ] ; 
 - random . nextBytes ( bytes ) ; 
 - ColumnFamily cf ; 
 - 
 - cf = new ColumnFamily ( " Standard1 " , " Standard " ) ; 
 - cf . addColumn ( " C " , bytes , 1 ) ; 
 - DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; 
 - ColumnFamily . serializer ( ) . serialize ( cf , bufOut ) ; 
 - 
 - DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 - bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; 
 - cf = ColumnFamily . serializer ( ) . deserialize ( bufIn ) ; 
 - assert cf ! = null ; 
 - assert cf . name ( ) . equals ( " Standard1 " ) ; 
 - assert cf . getAllColumns ( ) . size ( ) = = 1 ; 
 - } 
 - 
 - @ Test 
 - public void testManyColumns ( ) throws IOException { 
 - ColumnFamily cf ; 
 - 
 - TreeMap < String , byte [ ] > map = new TreeMap < String , byte [ ] > ( ) ; 
 - for ( int i = 100 ; i < 1000 ; + + i ) 
 - { 
 - map . put ( Integer . toString ( i ) , ( " Avinash Lakshman is a good man : " + i ) . getBytes ( ) ) ; 
 - } 
 - 
 - / / write 
 - cf = new ColumnFamily ( " Standard1 " , " Standard " ) ; 
 - DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; 
 - for ( String cName : map . navigableKeySet ( ) ) 
 - { 
 - cf . addColumn ( cName , map . get ( cName ) , 314 ) ; 
 - } 
 - ColumnFamily . serializer ( ) . serialize ( cf , bufOut ) ; 
 - 
 - / / verify 
 - DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 - bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; 
 - cf = ColumnFamily . serializer ( ) . deserialize ( bufIn ) ; 
 - for ( String cName : map . navigableKeySet ( ) ) 
 - { 
 - assert Arrays . equals ( cf . getColumn ( cName ) . value ( ) , map . get ( cName ) ) ; 
 - 
 - } 
 - assert new HashSet < String > ( cf . getColumns ( ) . keySet ( ) ) . equals ( map . keySet ( ) ) ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / CommitLogTest . java b / test / org / apache / cassandra / db / CommitLogTest . java 
 deleted file mode 100644 
 index 38da560 . . 0000000 
 - - - a / test / org / apache / cassandra / db / CommitLogTest . java 
 + + + / dev / null 
 @ @ - 1 , 45 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . testng . annotations . Test ; 
 - 
 - import java . util . Set ; 
 - import java . util . Map ; 
 - import java . util . Arrays ; 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . io . DataInputBuffer ; 
 - import org . apache . cassandra . ServerTest ; 
 - 
 - public class CommitLogTest extends ServerTest { 
 - @ Test 
 - public void testMain ( ) throws IOException { 
 - / / TODO this is useless , since it assumes we have a working set of commit logs to parse 
 - / * 
 - File logDir = new File ( DatabaseDescriptor . getLogFileLocation ( ) ) ; 
 - File [ ] files = logDir . listFiles ( ) ; 
 - Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; 
 - 
 - byte [ ] bytes = new byte [ CommitLogHeader . size ( Integer . parseInt ( args [ 0 ] ) ) ] ; 
 - for ( File file : files ) 
 - { 
 - CommitLog clog = new CommitLog ( file ) ; 
 - clog . readCommitLogHeader ( file . getAbsolutePath ( ) , bytes ) ; 
 - DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 - bufIn . reset ( bytes , 0 , bytes . length ) ; 
 - CommitLogHeader clHeader = CommitLogHeader . serializer ( ) . deserialize ( bufIn ) ; 
 - 
 - StringBuilder sb = new StringBuilder ( " " ) ; 
 - for ( byte b : bytes ) 
 - { 
 - sb . append ( b ) ; 
 - sb . append ( " " ) ; 
 - } 
 - 
 - System . out . println ( " FILE : " + file ) ; 
 - System . out . println ( clHeader . toString ( ) ) ; 
 - } 
 - * / 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / DBManagerTest . java b / test / org / apache / cassandra / db / DBManagerTest . java 
 deleted file mode 100644 
 index dc3b96a . . 0000000 
 - - - a / test / org / apache / cassandra / db / DBManagerTest . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . testng . annotations . Test ; 
 - import org . apache . cassandra . ServerTest ; 
 - 
 - public class DBManagerTest extends ServerTest { 
 - @ Test 
 - public void testMain ( ) throws Throwable { 
 - / / TODO clean up old detritus 
 - DBManager . instance ( ) . start ( ) ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / RecoveryManagerTest . java b / test / org / apache / cassandra / db / RecoveryManagerTest . java 
 deleted file mode 100644 
 index b442bc0 . . 0000000 
 - - - a / test / org / apache / cassandra / db / RecoveryManagerTest . java 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . IOException ; 
 - 
 - import org . apache . cassandra . ServerTest ; 
 - 
 - public class RecoveryManagerTest extends ServerTest { 
 - @ Test 
 - public void testDoRecovery ( ) throws IOException { 
 - / / TODO nothing to recover 
 - RecoveryManager rm = RecoveryManager . instance ( ) ; 
 - rm . doRecovery ( ) ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / SystemTableTest . java b / test / org / apache / cassandra / db / SystemTableTest . java 
 deleted file mode 100644 
 index 7572bbc . . 0000000 
 - - - a / test / org / apache / cassandra / db / SystemTableTest . java 
 + + + / dev / null 
 @ @ - 1 , 14 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . apache . cassandra . ServerTest ; 
 - import org . apache . cassandra . service . StorageService ; 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . IOException ; 
 - 
 - public class SystemTableTest extends ServerTest { 
 - @ Test 
 - public void testMain ( ) throws IOException { 
 - SystemTable . openSystemTable ( SystemTable . cfName _ ) . updateToken ( StorageService . token ( " 503545744 : 0 " ) ) ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / db / TableTest . java b / test / org / apache / cassandra / db / TableTest . java 
 deleted file mode 100644 
 index 41f58f1 . . 0000000 
 - - - a / test / org / apache / cassandra / db / TableTest . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package org . apache . cassandra . db ; 
 - 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . IOException ; 
 - 
 - import org . apache . cassandra . service . StorageService ; 
 - 
 - public class TableTest { 
 - @ Test 
 - public void testOpen ( ) throws Throwable { 
 - Table table = Table . open ( " Mailbox " ) ; 
 - Row row = table . get ( " 35300190 : 1 " ) ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / dht / RangeTest . java b / test / org / apache / cassandra / dht / RangeTest . java 
 deleted file mode 100644 
 index 203ee5b . . 0000000 
 - - - a / test / org / apache / cassandra / dht / RangeTest . java 
 + + + / dev / null 
 @ @ - 1 , 18 + 0 , 0 @ @ 
 - package org . apache . cassandra . dht ; 
 - 
 - import org . testng . annotations . Test ; 
 - 
 - public class RangeTest { 
 - @ Test 
 - public void testRange ( ) { 
 - Range left = new Range ( new BigIntegerToken ( " 0 " ) , new BigIntegerToken ( " 100 " ) ) ; 
 - assert left . contains ( new BigIntegerToken ( " 10 " ) ) ; 
 - assert ! left . contains ( new BigIntegerToken ( " - 1 " ) ) ; 
 - assert ! left . contains ( new BigIntegerToken ( " 101 " ) ) ; 
 - 
 - Range right = new Range ( new BigIntegerToken ( " 100 " ) , new BigIntegerToken ( " 0 " ) ) ; 
 - assert right . contains ( new BigIntegerToken ( " 200 " ) ) ; 
 - assert right . contains ( new BigIntegerToken ( " - 10 " ) ) ; 
 - assert ! right . contains ( new BigIntegerToken ( " 1 " ) ) ; 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / io / DataInputBufferTest . java b / test / org / apache / cassandra / io / DataInputBufferTest . java 
 deleted file mode 100644 
 index b6bb7a6 . . 0000000 
 - - - a / test / org / apache / cassandra / io / DataInputBufferTest . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - package org . apache . cassandra . io ; 
 - 
 - import org . testng . annotations . Test ; 
 - 
 - import java . util . Random ; 
 - import java . io . IOException ; 
 - 
 - public class DataInputBufferTest { 
 - @ Test 
 - public void testRandom ( ) throws IOException { 
 - Random random = new Random ( ) ; 
 - byte [ ] bytes = new byte [ 1024 * 1024 ] ; 
 - random . nextBytes ( bytes ) ; 
 - 
 - DataInputBuffer . FastByteArrayInputStream bis = new DataInputBuffer . FastByteArrayInputStream ( bytes ) ; 
 - int read = 0 ; 
 - int n = 0 ; 
 - while ( true ) 
 - { 
 - read = bis . read ( ) ; 
 - if ( read = = - 1 ) 
 - break ; 
 - assert read = = ( ( int ) bytes [ n + + ] & 0xFF ) ; 
 - } 
 - assert n = = bytes . length ; 
 - } 
 - 
 - @ Test 
 - public void testSmall ( ) throws IOException { 
 - DataOutputBuffer bufOut = new DataOutputBuffer ( ) ; 
 - bufOut . writeUTF ( " Avinash " ) ; 
 - bufOut . writeInt ( 41 * 1024 * 1024 ) ; 
 - DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 - bufIn . reset ( bufOut . getData ( ) , bufOut . getLength ( ) ) ; 
 - assert bufIn . readUTF ( ) . equals ( " Avinash " ) ; 
 - assert bufIn . readInt ( ) = = 41 * 1024 * 1024 ; 
 - } 
 - 
 - } 
 diff - - git a / test / org / apache / cassandra / io / SSTableTest . java b / test / org / apache / cassandra / io / SSTableTest . java 
 deleted file mode 100644 
 index dd5b161 . . 0000000 
 - - - a / test / org / apache / cassandra / io / SSTableTest . java 
 + + + / dev / null 
 @ @ - 1 , 78 + 0 , 0 @ @ 
 - package org . apache . cassandra . io ; 
 - 
 - import org . apache . cassandra . ServerTest ; 
 - import org . apache . cassandra . service . StorageService ; 
 - import org . apache . cassandra . db . FileStruct ; 
 - import org . apache . cassandra . utils . BloomFilter ; 
 - import org . apache . commons . collections . CollectionUtils ; 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - import java . util . * ; 
 - 
 - public class SSTableTest extends ServerTest { 
 - / * 
 - @ Test 
 - public void testSingleWrite ( ) throws IOException { 
 - File f = File . createTempFile ( " sstable " , " " ) ; 
 - SSTable ssTable ; 
 - 
 - / / write test data 
 - ssTable = new SSTable ( f . getParent ( ) , f . getName ( ) ) ; 
 - BloomFilter bf = new BloomFilter ( 1000 , 8 ) ; 
 - Random random = new Random ( ) ; 
 - byte [ ] bytes = new byte [ 1024 ] ; 
 - random . nextBytes ( bytes ) ; 
 - 
 - String key = Integer . toString ( 1 ) ; 
 - ssTable . append ( key , bytes ) ; 
 - bf . fill ( key ) ; 
 - ssTable . close ( bf ) ; 
 - 
 - / / TODO this is broken because SST / SequenceFile now assume that only CFs are written 
 - 
 - / / verify 
 - ssTable = new SSTable ( f . getPath ( ) + " - Data . db " ) ; 
 - DataInputBuffer bufIn = ssTable . next ( key , " Test : C " ) ; 
 - byte [ ] bytes2 = new byte [ 1024 ] ; 
 - bufIn . readFully ( bytes2 ) ; 
 - assert Arrays . equals ( bytes2 , bytes ) ; 
 - } 
 - 
 - / / @ Test 
 - public void testManyWrites ( ) throws IOException { 
 - File f = File . createTempFile ( " sstable " , " " ) ; 
 - SSTable ssTable ; 
 - 
 - TreeMap < String , byte [ ] > map = new TreeMap < String , byte [ ] > ( ) ; 
 - for ( int i = 100 ; i < 1000 ; + + i ) 
 - { 
 - map . put ( Integer . toString ( i ) , ( " Avinash Lakshman is a good man : " + i ) . getBytes ( ) ) ; 
 - } 
 - 
 - / / write 
 - ssTable = new SSTable ( f . getParent ( ) , f . getName ( ) ) ; 
 - BloomFilter bf = new BloomFilter ( 1000 , 8 ) ; 
 - for ( String key : map . navigableKeySet ( ) ) 
 - { 
 - ssTable . append ( key , map . get ( key ) ) ; 
 - } 
 - ssTable . close ( bf ) ; 
 - 
 - / / TODO this is broken because SST / SequenceFile now assume that only CFs are written 
 - 
 - / / verify 
 - List < String > keys = new ArrayList ( map . keySet ( ) ) ; 
 - Collections . shuffle ( keys ) ; 
 - ssTable = new SSTable ( f . getPath ( ) + " - Data . db " ) ; 
 - for ( String key : keys ) 
 - { 
 - DataInputBuffer bufIn = ssTable . next ( key , " Test : C " ) ; 
 - byte [ ] bytes2 = new byte [ map . get ( key ) . length ] ; 
 - bufIn . readFully ( bytes2 ) ; 
 - assert Arrays . equals ( bytes2 , map . get ( key ) ) ; 
 - } 
 - } 
 - * / 
 - } 
 diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java 
 deleted file mode 100644 
 index 762bbb5 . . 0000000 
 - - - a / test / org / apache / cassandra / service / CassandraServerTest . java 
 + + + / dev / null 
 @ @ - 1 , 88 + 0 , 0 @ @ 
 - package org . apache . cassandra . service ; 
 - 
 - import org . apache . cassandra . ServerTest ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . commons . collections . CollectionUtils ; 
 - import org . apache . commons . collections . IteratorUtils ; 
 - import org . testng . annotations . Test ; 
 - 
 - import java . io . IOException ; 
 - import java . util . * ; 
 - 
 - import com . facebook . thrift . TException ; 
 - 
 - public class CassandraServerTest extends ServerTest { 
 - / * 
 - TODO fix resetting server so this works 
 - @ Test 
 - public void test _ get _ range _ empty ( ) throws IOException , TException { 
 - CassandraServer server = new CassandraServer ( ) ; 
 - server . start ( ) ; 
 - 
 - assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; 
 - } 
 - * / 
 - 
 - / * 
 - @ Test 
 - public void test _ get _ range ( ) throws IOException , TException , CassandraException 
 - { 
 - CassandraServer server = new CassandraServer ( ) ; 
 - try 
 - { 
 - server . start ( ) ; 
 - } 
 - catch ( Throwable throwable ) 
 - { 
 - throw new RuntimeException ( throwable ) ; 
 - } 
 - 
 - / / TODO insert some data 
 - try { 
 - String last = null ; 
 - for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { 
 - if ( last ! = null ) { 
 - assert last . compareTo ( key ) < 0 ; 
 - } 
 - last = key ; 
 - } 
 - } finally { 
 - server . shutdown ( ) ; 
 - } 
 - } 
 - * / 
 - 
 - / * 
 - @ Test 
 - public void test _ get _ column ( ) throws Throwable { 
 - CassandraServer server = new CassandraServer ( ) ; 
 - server . start ( ) ; 
 - 
 - try { 
 - column _ t c1 = new column _ t ( " c1 " , " 0 " , 0L ) ; 
 - column _ t c2 = new column _ t ( " c2 " , " 0 " , 0L ) ; 
 - List < column _ t > columns = new ArrayList < column _ t > ( ) ; 
 - columns . add ( c1 ) ; 
 - columns . add ( c2 ) ; 
 - Map < String , List < column _ t > > cfmap = new HashMap < String , List < column _ t > > ( ) ; 
 - cfmap . put ( " Standard1 " , columns ) ; 
 - cfmap . put ( " Standard2 " , columns ) ; 
 - 
 - batch _ mutation _ t m = new batch _ mutation _ t ( " Table1 " , " key1 " , cfmap ) ; 
 - server . batch _ insert ( m , 1 ) ; 
 - 
 - column _ t column ; 
 - column = server . get _ column ( " Table1 " , " key1 " , " Standard1 : c2 " ) ; 
 - assert column . value . equals ( " 0 " ) ; 
 - 
 - column = server . get _ column ( " Table1 " , " key1 " , " Standard2 : c2 " ) ; 
 - assert column . value . equals ( " 0 " ) ; 
 - 
 - ArrayList < column _ t > column _ ts = server . get _ slice _ strong ( " Table1 " , " key1 " , " Standard1 " , - 1 , - 1 ) ; 
 - assert column _ ts . size ( ) = = 2 ; 
 - } finally { 
 - server . shutdown ( ) ; 
 - } 
 - } 
 - * / 
 - } 
 diff - - git a / test / org / apache / cassandra / utils / KeyGenerator . java b / test / org / apache / cassandra / utils / KeyGenerator . java 
 deleted file mode 100644 
 index 99ddef0 . . 0000000 
 - - - a / test / org / apache / cassandra / utils / KeyGenerator . java 
 + + + / dev / null 
 @ @ - 1 , 148 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . io . * ; 
 - import java . util . Random ; 
 - 
 - public class KeyGenerator { 
 - private static String randomKey ( Random r ) { 
 - StringBuffer buffer = new StringBuffer ( ) ; 
 - for ( int j = 0 ; j < 16 ; j + + ) { 
 - buffer . append ( ( char ) r . nextInt ( ) ) ; 
 - } 
 - return buffer . toString ( ) ; 
 - } 
 - 
 - static class RandomStringGenerator implements ResetableIterator < String > { 
 - int i , n , seed ; 
 - Random random ; 
 - 
 - RandomStringGenerator ( int seed , int n ) { 
 - i = 0 ; 
 - this . seed = seed ; 
 - this . n = n ; 
 - reset ( ) ; 
 - } 
 - 
 - public int size ( ) { 
 - return n ; 
 - } 
 - 
 - public void reset ( ) { 
 - random = new Random ( seed ) ; 
 - } 
 - 
 - public boolean hasNext ( ) { 
 - return i < n ; 
 - } 
 - 
 - public String next ( ) { 
 - i + + ; 
 - return randomKey ( random ) ; 
 - } 
 - 
 - public void remove ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - } 
 - 
 - static class IntGenerator implements ResetableIterator < String > { 
 - private int i , start , n ; 
 - 
 - IntGenerator ( int n ) { 
 - this ( 0 , n ) ; 
 - } 
 - 
 - IntGenerator ( int start , int n ) { 
 - this . start = start ; 
 - this . n = n ; 
 - reset ( ) ; 
 - } 
 - 
 - public int size ( ) { 
 - return n - start ; 
 - } 
 - 
 - public void reset ( ) { 
 - i = start ; 
 - } 
 - 
 - public boolean hasNext ( ) { 
 - return i < n ; 
 - } 
 - 
 - public String next ( ) { 
 - return Integer . toString ( i + + ) ; 
 - } 
 - 
 - public void remove ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - } 
 - 
 - static class WordGenerator implements ResetableIterator < String > { 
 - static int WORDS ; 
 - 
 - static { 
 - try { 
 - BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; 
 - while ( br . ready ( ) ) { 
 - br . readLine ( ) ; 
 - WORDS + + ; 
 - } 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - BufferedReader reader ; 
 - private int modulo ; 
 - private int skip ; 
 - String next ; 
 - 
 - WordGenerator ( int skip , int modulo ) { 
 - this . skip = skip ; 
 - this . modulo = modulo ; 
 - reset ( ) ; 
 - } 
 - 
 - public int size ( ) { 
 - return ( 1 + WORDS - skip ) / modulo ; 
 - } 
 - 
 - public void reset ( ) { 
 - try { 
 - reader = new BufferedReader ( new InputStreamReader ( new FileInputStream ( " / usr / share / dict / words " ) ) ) ; 
 - } catch ( FileNotFoundException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - for ( int i = 0 ; i < skip ; i + + ) { 
 - try { 
 - reader . readLine ( ) ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - next ( ) ; 
 - } 
 - 
 - public boolean hasNext ( ) { 
 - return next ! = null ; 
 - } 
 - 
 - public String next ( ) { 
 - try { 
 - String s = next ; 
 - for ( int i = 0 ; i < modulo ; i + + ) { 
 - next = reader . readLine ( ) ; 
 - } 
 - return s ; 
 - } catch ( IOException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - 
 - public void remove ( ) { 
 - throw new UnsupportedOperationException ( ) ; 
 - } 
 - } 
 - } 
 diff - - git a / test / org / apache / cassandra / utils / ResetableIterator . java b / test / org / apache / cassandra / utils / ResetableIterator . java 
 deleted file mode 100644 
 index a2f1caf . . 0000000 
 - - - a / test / org / apache / cassandra / utils / ResetableIterator . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . Iterator ; 
 - 
 - public interface ResetableIterator < T > extends Iterator < T > { 
 - public void reset ( ) ; 
 - 
 - int size ( ) ; 
 - } 
 diff - - git a / test / testng . xml b / test / testng . xml 
 deleted file mode 100644 
 index d91aeb4 . . 0000000 
 - - - a / test / testng . xml 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - < ! DOCTYPE suite SYSTEM " http : / / testng . org / testng - 1 . 0 . dtd " >
