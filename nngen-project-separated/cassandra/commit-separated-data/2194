BLEU SCORE: 0.16186478197091597

TEST MSG: partial backport 3569
GENERATED MSG: Support pluggable internode authentication

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6b610d7 . . 4b1becc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 48 , 7 + 48 , 7 @ @ <nl> * Add inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec ( CASSANDRA - 6596 ) <nl> * Add option to disable STCS in L0 ( CASSANDRA - 6621 ) <nl> * Fix error when doing reversed queries with static columns ( CASSANDRA - 7490 ) <nl> - * Backport CASSANDRA - 6747 ( CASSANDRA - 7560 ) <nl> + * Backport CASSNADRA - 3569 / CASSANDRA - 6747 ( CASSANDRA - 7560 ) <nl> * Track max / min timestamps for range tombstones ( CASSANDRA - 7647 ) <nl> * Fix NPE when listing saved caches dir ( CASSANDRA - 7632 ) <nl> * Fix sstableloader unable to connect encrypted node ( CASSANDRA - 7585 ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / IRepairJobEventListener . java b / src / java / org / apache / cassandra / repair / IRepairJobEventListener . java <nl> new file mode 100644 <nl> index 0000000 . . 778c09d <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / repair / IRepairJobEventListener . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . repair ; <nl> + <nl> + / * * <nl> + * Implemented by the RepairSession to accept callbacks from sequential snapshot creation failure . <nl> + * / <nl> + <nl> + public interface IRepairJobEventListener <nl> + { <nl> + / * * <nl> + * Signal that there was a failure during the snapshot creation process . <nl> + * <nl> + * / <nl> + public void failedSnapshot ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairJob . java b / src / java / org / apache / cassandra / repair / RepairJob . java <nl> index 13fe511 . . 931f95a 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairJob . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairJob . java <nl> @ @ - 58 , 11 + 58 , 20 @ @ public class RepairJob <nl> / * Count down as sync completes * / <nl> private AtomicInteger waitForSync ; <nl> <nl> + private final IRepairJobEventListener listener ; <nl> + <nl> / * * <nl> * Create repair job to run on specific columnfamily <nl> * / <nl> - public RepairJob ( UUID sessionId , String keyspace , String columnFamily , Range < Token > range , boolean isSequential , ListeningExecutorService taskExecutor ) <nl> + public RepairJob ( IRepairJobEventListener listener , <nl> + UUID sessionId , <nl> + String keyspace , <nl> + String columnFamily , <nl> + Range < Token > range , <nl> + boolean isSequential , <nl> + ListeningExecutorService taskExecutor ) <nl> { <nl> + this . listener = listener ; <nl> this . desc = new RepairJobDesc ( sessionId , keyspace , columnFamily , range ) ; <nl> this . isSequential = isSequential ; <nl> this . taskExecutor = taskExecutor ; <nl> @ @ - 113 , 8 + 122 , 8 @ @ public class RepairJob <nl> <nl> public void onFailure ( Throwable throwable ) <nl> { <nl> - / / TODO need to propagate error to RepairSession <nl> - logger . error ( " Error while snapshot " , throwable ) ; <nl> + logger . error ( " Error occurred during snapshot phase " , throwable ) ; <nl> + listener . failedSnapshot ( ) ; <nl> failed = true ; <nl> } <nl> } , taskExecutor ) ; <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> index 942049b . . c9a9671 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairSession . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairSession . java <nl> @ @ - 73 , 7 + 73 , 9 @ @ import org . apache . cassandra . utils . * ; <nl> * Similarly , if a job is sequential , it will handle one Differencer at a time , but will handle <nl> * all of them in parallel otherwise . <nl> * / <nl> - public class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener <nl> + public class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , <nl> + IFailureDetectionEventListener , <nl> + IRepairJobEventListener <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( RepairSession . class ) ; <nl> <nl> @ @ - 268 , 7 + 270 , 7 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan <nl> / / Create and queue a RepairJob for each column family <nl> for ( String cfname : cfnames ) <nl> { <nl> - RepairJob job = new RepairJob ( id , keyspace , cfname , range , isSequential , taskExecutor ) ; <nl> + RepairJob job = new RepairJob ( this , id , keyspace , cfname , range , isSequential , taskExecutor ) ; <nl> jobs . offer ( job ) ; <nl> } <nl> <nl> @ @ - 316 , 6 + 318 , 12 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan <nl> completed . signalAll ( ) ; <nl> } <nl> <nl> + public void failedSnapshot ( ) <nl> + { <nl> + exception = new IOException ( " Failed during snapshot creation . " ) ; <nl> + forceShutdown ( ) ; <nl> + } <nl> + <nl> void failedNode ( InetAddress remote ) <nl> { <nl> String errorMsg = String . format ( " Endpoint % s died " , remote ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 4f3e1e1 . . ed82e32 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 145 , 6 + 145 , 7 @ @ public class NodeCmd <nl> SETTRACEPROBABILITY , <nl> SNAPSHOT , <nl> STATUS , <nl> + STATUSBINARY , <nl> STATUSTHRIFT , <nl> STOP , <nl> TPSTATS , <nl> @ @ - 912 , 6 + 913 , 11 @ @ public class NodeCmd <nl> } <nl> } <nl> <nl> + private void printIsNativeTransportRunning ( PrintStream outs ) <nl> + { <nl> + outs . println ( probe . isNativeTransportRunning ( ) ? " running " : " not running " ) ; <nl> + } <nl> + <nl> private void printIsThriftServerRunning ( PrintStream outs ) <nl> { <nl> outs . println ( probe . isThriftServerRunning ( ) ? " running " : " not running " ) ; <nl> @ @ - 1052 , 6 + 1058 , 7 @ @ public class NodeCmd <nl> case COMPACTIONSTATS : nodeCmd . printCompactionStats ( System . out ) ; break ; <nl> case DISABLEBINARY : probe . stopNativeTransport ( ) ; break ; <nl> case ENABLEBINARY : probe . startNativeTransport ( ) ; break ; <nl> + case STATUSBINARY : nodeCmd . printIsNativeTransportRunning ( System . out ) ; break ; <nl> case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; <nl> case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; <nl> case DISABLEHANDOFF : probe . disableHintedHandoff ( ) ; break ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 43d99d2 . . e6eca7b 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 710 , 6 + 710 , 11 @ @ public class NodeProbe <nl> ssProxy . startNativeTransport ( ) ; <nl> } <nl> <nl> + public boolean isNativeTransportRunning ( ) <nl> + { <nl> + return ssProxy . isNativeTransportRunning ( ) ; <nl> + } <nl> + <nl> public void stopGossiping ( ) <nl> { <nl> ssProxy . stopGossiping ( ) ; <nl> diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> index 6551b07 . . f3cd88e 100644 <nl> - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> @ @ - 55 , 6 + 55 , 9 @ @ commands : <nl> - name : enablebinary <nl> help : | <nl> Reenable native transport ( binary protocol ) <nl> + - name : statusbinary <nl> + help : | <nl> + Status of native transport ( binary protocol ) <nl> - name : disablehandoff <nl> help : | <nl> Disable the future hints storing on the current node

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6b610d7 . . 4b1becc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 48 , 7 + 48 , 7 @ @ 
 * Add inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec ( CASSANDRA - 6596 ) 
 * Add option to disable STCS in L0 ( CASSANDRA - 6621 ) 
 * Fix error when doing reversed queries with static columns ( CASSANDRA - 7490 ) 
 - * Backport CASSANDRA - 6747 ( CASSANDRA - 7560 ) 
 + * Backport CASSNADRA - 3569 / CASSANDRA - 6747 ( CASSANDRA - 7560 ) 
 * Track max / min timestamps for range tombstones ( CASSANDRA - 7647 ) 
 * Fix NPE when listing saved caches dir ( CASSANDRA - 7632 ) 
 * Fix sstableloader unable to connect encrypted node ( CASSANDRA - 7585 ) 
 diff - - git a / src / java / org / apache / cassandra / repair / IRepairJobEventListener . java b / src / java / org / apache / cassandra / repair / IRepairJobEventListener . java 
 new file mode 100644 
 index 0000000 . . 778c09d 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / repair / IRepairJobEventListener . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . repair ; 
 + 
 + / * * 
 + * Implemented by the RepairSession to accept callbacks from sequential snapshot creation failure . 
 + * / 
 + 
 + public interface IRepairJobEventListener 
 + { 
 + / * * 
 + * Signal that there was a failure during the snapshot creation process . 
 + * 
 + * / 
 + public void failedSnapshot ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairJob . java b / src / java / org / apache / cassandra / repair / RepairJob . java 
 index 13fe511 . . 931f95a 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairJob . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairJob . java 
 @ @ - 58 , 11 + 58 , 20 @ @ public class RepairJob 
 / * Count down as sync completes * / 
 private AtomicInteger waitForSync ; 
 
 + private final IRepairJobEventListener listener ; 
 + 
 / * * 
 * Create repair job to run on specific columnfamily 
 * / 
 - public RepairJob ( UUID sessionId , String keyspace , String columnFamily , Range < Token > range , boolean isSequential , ListeningExecutorService taskExecutor ) 
 + public RepairJob ( IRepairJobEventListener listener , 
 + UUID sessionId , 
 + String keyspace , 
 + String columnFamily , 
 + Range < Token > range , 
 + boolean isSequential , 
 + ListeningExecutorService taskExecutor ) 
 { 
 + this . listener = listener ; 
 this . desc = new RepairJobDesc ( sessionId , keyspace , columnFamily , range ) ; 
 this . isSequential = isSequential ; 
 this . taskExecutor = taskExecutor ; 
 @ @ - 113 , 8 + 122 , 8 @ @ public class RepairJob 
 
 public void onFailure ( Throwable throwable ) 
 { 
 - / / TODO need to propagate error to RepairSession 
 - logger . error ( " Error while snapshot " , throwable ) ; 
 + logger . error ( " Error occurred during snapshot phase " , throwable ) ; 
 + listener . failedSnapshot ( ) ; 
 failed = true ; 
 } 
 } , taskExecutor ) ; 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairSession . java b / src / java / org / apache / cassandra / repair / RepairSession . java 
 index 942049b . . c9a9671 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairSession . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairSession . java 
 @ @ - 73 , 7 + 73 , 9 @ @ import org . apache . cassandra . utils . * ; 
 * Similarly , if a job is sequential , it will handle one Differencer at a time , but will handle 
 * all of them in parallel otherwise . 
 * / 
 - public class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , IFailureDetectionEventListener 
 + public class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber , 
 + IFailureDetectionEventListener , 
 + IRepairJobEventListener 
 { 
 private static Logger logger = LoggerFactory . getLogger ( RepairSession . class ) ; 
 
 @ @ - 268 , 7 + 270 , 7 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan 
 / / Create and queue a RepairJob for each column family 
 for ( String cfname : cfnames ) 
 { 
 - RepairJob job = new RepairJob ( id , keyspace , cfname , range , isSequential , taskExecutor ) ; 
 + RepairJob job = new RepairJob ( this , id , keyspace , cfname , range , isSequential , taskExecutor ) ; 
 jobs . offer ( job ) ; 
 } 
 
 @ @ - 316 , 6 + 318 , 12 @ @ public class RepairSession extends WrappedRunnable implements IEndpointStateChan 
 completed . signalAll ( ) ; 
 } 
 
 + public void failedSnapshot ( ) 
 + { 
 + exception = new IOException ( " Failed during snapshot creation . " ) ; 
 + forceShutdown ( ) ; 
 + } 
 + 
 void failedNode ( InetAddress remote ) 
 { 
 String errorMsg = String . format ( " Endpoint % s died " , remote ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 4f3e1e1 . . ed82e32 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 145 , 6 + 145 , 7 @ @ public class NodeCmd 
 SETTRACEPROBABILITY , 
 SNAPSHOT , 
 STATUS , 
 + STATUSBINARY , 
 STATUSTHRIFT , 
 STOP , 
 TPSTATS , 
 @ @ - 912 , 6 + 913 , 11 @ @ public class NodeCmd 
 } 
 } 
 
 + private void printIsNativeTransportRunning ( PrintStream outs ) 
 + { 
 + outs . println ( probe . isNativeTransportRunning ( ) ? " running " : " not running " ) ; 
 + } 
 + 
 private void printIsThriftServerRunning ( PrintStream outs ) 
 { 
 outs . println ( probe . isThriftServerRunning ( ) ? " running " : " not running " ) ; 
 @ @ - 1052 , 6 + 1058 , 7 @ @ public class NodeCmd 
 case COMPACTIONSTATS : nodeCmd . printCompactionStats ( System . out ) ; break ; 
 case DISABLEBINARY : probe . stopNativeTransport ( ) ; break ; 
 case ENABLEBINARY : probe . startNativeTransport ( ) ; break ; 
 + case STATUSBINARY : nodeCmd . printIsNativeTransportRunning ( System . out ) ; break ; 
 case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; 
 case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; 
 case DISABLEHANDOFF : probe . disableHintedHandoff ( ) ; break ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 43d99d2 . . e6eca7b 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 710 , 6 + 710 , 11 @ @ public class NodeProbe 
 ssProxy . startNativeTransport ( ) ; 
 } 
 
 + public boolean isNativeTransportRunning ( ) 
 + { 
 + return ssProxy . isNativeTransportRunning ( ) ; 
 + } 
 + 
 public void stopGossiping ( ) 
 { 
 ssProxy . stopGossiping ( ) ; 
 diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 index 6551b07 . . f3cd88e 100644 
 - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 @ @ - 55 , 6 + 55 , 9 @ @ commands : 
 - name : enablebinary 
 help : | 
 Reenable native transport ( binary protocol ) 
 + - name : statusbinary 
 + help : | 
 + Status of native transport ( binary protocol ) 
 - name : disablehandoff 
 help : | 
 Disable the future hints storing on the current node
