BLEU SCORE: 0.018543295278285157

TEST MSG: Fix split and scrub tool sstable cleanup
GENERATED MSG: replace compactionlock use in schema migration by checking CFS . isInvalidD

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index 379d3de . . 4279f6e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 180 , 7 + 180 , 7 @ @ public abstract class AbstractCompactionStrategy <nl> <nl> public AbstractCompactionTask getCompactionTask ( LifecycleTransaction txn , final int gcBefore , long maxSSTableBytes ) <nl> { <nl> - return new CompactionTask ( cfs , txn , gcBefore , false ) ; <nl> + return new CompactionTask ( cfs , txn , gcBefore ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 7897a1a . . 0bd6aae 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 52 , 14 + 52 , 21 @ @ public class CompactionTask extends AbstractCompactionTask <nl> protected static final Logger logger = LoggerFactory . getLogger ( CompactionTask . class ) ; <nl> protected final int gcBefore ; <nl> private final boolean offline ; <nl> + private final boolean keepOriginals ; <nl> protected static long totalBytesCompacted = 0 ; <nl> private CompactionExecutorStatsCollector collector ; <nl> <nl> - public CompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean offline ) <nl> + public CompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore ) <nl> + { <nl> + this ( cfs , txn , gcBefore , false , false ) ; <nl> + } <nl> + <nl> + public CompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean offline , boolean keepOriginals ) <nl> { <nl> super ( cfs , txn ) ; <nl> this . gcBefore = gcBefore ; <nl> this . offline = offline ; <nl> + this . keepOriginals = keepOriginals ; <nl> } <nl> <nl> public static synchronized long addToTotalBytesCompacted ( long bytesCompacted ) <nl> @ @ - 224 , 7 + 231 , 7 @ @ public class CompactionTask extends AbstractCompactionTask <nl> LifecycleTransaction transaction , <nl> Set < SSTableReader > nonExpiredSSTables ) <nl> { <nl> - return new DefaultCompactionWriter ( cfs , transaction , nonExpiredSSTables , offline ) ; <nl> + return new DefaultCompactionWriter ( cfs , transaction , nonExpiredSSTables , offline , keepOriginals ) ; <nl> } <nl> <nl> public static String updateCompactionHistory ( String keyspaceName , String columnFamilyName , long [ ] mergedRowCounts , long startSize , long endSize ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java <nl> index 8fa3b8f . . 1d1faf5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> LifecycleTransaction modifier = cfs . getTracker ( ) . tryModify ( latestBucket , OperationType . COMPACTION ) ; <nl> if ( modifier ! = null ) <nl> - return new CompactionTask ( cfs , modifier , gcBefore , false ) ; <nl> + return new CompactionTask ( cfs , modifier , gcBefore ) ; <nl> } <nl> } <nl> <nl> @ @ - 372 , 7 + 372 , 7 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy <nl> if ( modifier = = null ) <nl> return null ; <nl> <nl> - return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , modifier , gcBefore , false ) ) ; <nl> + return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , modifier , gcBefore ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 388 , 7 + 388 , 7 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy <nl> return null ; <nl> } <nl> <nl> - return new CompactionTask ( cfs , modifier , gcBefore , false ) . setUserDefined ( true ) ; <nl> + return new CompactionTask ( cfs , modifier , gcBefore ) . setUserDefined ( true ) ; <nl> } <nl> <nl> public int getEstimatedRemainingTasks ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> index d3d56ac . . 11d113d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ public class LeveledCompactionTask extends CompactionTask <nl> <nl> public LeveledCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int level , int gcBefore , long maxSSTableBytes , boolean majorCompaction ) <nl> { <nl> - super ( cfs , txn , gcBefore , false ) ; <nl> + super ( cfs , txn , gcBefore ) ; <nl> this . level = level ; <nl> this . maxSSTableBytes = maxSSTableBytes ; <nl> this . majorCompaction = majorCompaction ; <nl> @ @ - 46 , 8 + 46 , 8 @ @ public class LeveledCompactionTask extends CompactionTask <nl> Set < SSTableReader > nonExpiredSSTables ) <nl> { <nl> if ( majorCompaction ) <nl> - return new MajorLeveledCompactionWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , false ) ; <nl> - return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , getLevel ( ) , false ) ; <nl> + return new MajorLeveledCompactionWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , false , false ) ; <nl> + return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , getLevel ( ) , false , false ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java <nl> index 8f382ea . . 1944364 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class SSTableSplitter { <nl> <nl> public SplittingCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction transaction , int sstableSizeInMB ) <nl> { <nl> - super ( cfs , transaction , CompactionManager . NO _ GC , true ) ; <nl> + super ( cfs , transaction , CompactionManager . NO _ GC , true , false ) ; <nl> this . sstableSizeInMB = sstableSizeInMB ; <nl> <nl> if ( sstableSizeInMB < = 0 ) <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class SSTableSplitter { <nl> LifecycleTransaction txn , <nl> Set < SSTableReader > nonExpiredSSTables ) <nl> { <nl> - return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , sstableSizeInMB * 1024L * 1024L , 0 , true ) ; <nl> + return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , sstableSizeInMB * 1024L * 1024L , 0 , true , false ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index 891fac8 . . f9e9e71 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 60 , 9 + 60 , 6 @ @ public class Scrubber implements Closeable <nl> <nl> private final boolean isOffline ; <nl> <nl> - private SSTableReader newSstable ; <nl> - private SSTableReader newInOrderSstable ; <nl> - <nl> private int goodRows ; <nl> private int badRows ; <nl> private int emptyRows ; <nl> @ @ - 152 , 9 + 149 , 10 @ @ public class Scrubber implements Closeable <nl> <nl> public void scrub ( ) <nl> { <nl> + List < SSTableReader > finished = new ArrayList < > ( ) ; <nl> + boolean completed = false ; <nl> outputHandler . output ( String . format ( " Scrubbing % s ( % s bytes ) " , sstable , dataFile . length ( ) ) ) ; <nl> - int nowInSec = FBUtilities . nowInSeconds ( ) ; <nl> - try ( SSTableRewriter writer = new SSTableRewriter ( cfs , transaction , sstable . maxDataAge , isOffline ) . keepOriginals ( isOffline ) ) <nl> + try ( SSTableRewriter writer = new SSTableRewriter ( cfs , transaction , sstable . maxDataAge , isOffline ) ) <nl> { <nl> nextIndexKey = indexAvailable ( ) ? ByteBufferUtil . readWithShortLength ( indexFile ) : null ; <nl> if ( indexAvailable ( ) ) <nl> @ @ - 296 , 6 + 294 , 7 @ @ public class Scrubber implements Closeable <nl> { <nl> / / out of order rows , but no bad rows found - we can keep our repairedAt time <nl> long repairedAt = badRows > 0 ? ActiveRepairService . UNREPAIRED _ SSTABLE : sstable . getSSTableMetadata ( ) . repairedAt ; <nl> + SSTableReader newInOrderSstable ; <nl> try ( SSTableWriter inOrderWriter = CompactionManager . createWriter ( cfs , destination , expectedBloomFilterSize , repairedAt , sstable , transaction ) ) <nl> { <nl> for ( Partition partition : outOfOrder ) <nl> @ @ - 303 , 20 + 302 , 25 @ @ public class Scrubber implements Closeable <nl> newInOrderSstable = inOrderWriter . finish ( - 1 , sstable . maxDataAge , true ) ; <nl> } <nl> transaction . update ( newInOrderSstable , false ) ; <nl> + finished . add ( newInOrderSstable ) ; <nl> outputHandler . warn ( String . format ( " % d out of order rows found while scrubbing % s ; Those have been written ( in order ) to a new sstable ( % s ) " , outOfOrder . size ( ) , sstable , newInOrderSstable ) ) ; <nl> } <nl> <nl> / / finish obsoletes the old sstable <nl> - List < SSTableReader > finished = writer . setRepairedAt ( badRows > 0 ? ActiveRepairService . UNREPAIRED _ SSTABLE : sstable . getSSTableMetadata ( ) . repairedAt ) . finish ( ) ; <nl> - if ( ! finished . isEmpty ( ) ) <nl> - newSstable = finished . get ( 0 ) ; <nl> + finished . addAll ( writer . setRepairedAt ( badRows > 0 ? ActiveRepairService . UNREPAIRED _ SSTABLE : sstable . getSSTableMetadata ( ) . repairedAt ) . finish ( ) ) ; <nl> + completed = true ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> throw Throwables . propagate ( e ) ; <nl> } <nl> + finally <nl> + { <nl> + if ( transaction . isOffline ( ) ) <nl> + finished . forEach ( sstable - > sstable . selfRef ( ) . release ( ) ) ; <nl> + } <nl> <nl> - if ( newSstable = = null ) <nl> + if ( completed ) <nl> { <nl> if ( badRows > 0 ) <nl> outputHandler . warn ( " No valid rows found while scrubbing " + sstable + " ; it is marked for deletion now . If you want to attempt manual recovery , you can find a copy in the pre - scrub snapshot " ) ; <nl> @ @ - 384 , 16 + 388 , 6 @ @ public class Scrubber implements Closeable <nl> outOfOrder . add ( ArrayBackedPartition . create ( iterator ) ) ; <nl> } <nl> <nl> - public SSTableReader getNewSSTable ( ) <nl> - { <nl> - return newSstable ; <nl> - } <nl> - <nl> - public SSTableReader getNewInOrderSSTable ( ) <nl> - { <nl> - return newInOrderSstable ; <nl> - } <nl> - <nl> private void throwIfFatal ( Throwable th ) <nl> { <nl> if ( th instanceof Error & & ! ( th instanceof AssertionError | | th instanceof IOError ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> index 09d40c8 . . 2353aa3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java <nl> @ @ - 184 , 7 + 184 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> LifecycleTransaction transaction = cfs . getTracker ( ) . tryModify ( hottestBucket , OperationType . COMPACTION ) ; <nl> if ( transaction ! = null ) <nl> - return new CompactionTask ( cfs , transaction , gcBefore , false ) ; <nl> + return new CompactionTask ( cfs , transaction , gcBefore ) ; <nl> } <nl> } <nl> <nl> @ @ - 198 , 8 + 198 , 8 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> if ( txn = = null ) <nl> return null ; <nl> if ( splitOutput ) <nl> - return Arrays . < AbstractCompactionTask > asList ( new SplittingCompactionTask ( cfs , txn , gcBefore , false ) ) ; <nl> - return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , txn , gcBefore , false ) ) ; <nl> + return Arrays . < AbstractCompactionTask > asList ( new SplittingCompactionTask ( cfs , txn , gcBefore ) ) ; <nl> + return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , txn , gcBefore ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " resource " ) <nl> @ @ - 214 , 7 + 214 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> return null ; <nl> } <nl> <nl> - return new CompactionTask ( cfs , transaction , gcBefore , false ) . setUserDefined ( true ) ; <nl> + return new CompactionTask ( cfs , transaction , gcBefore ) . setUserDefined ( true ) ; <nl> } <nl> <nl> public int getEstimatedRemainingTasks ( ) <nl> @ @ - 335 , 9 + 335 , 9 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> private static class SplittingCompactionTask extends CompactionTask <nl> { <nl> - public SplittingCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean offline ) <nl> + public SplittingCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore ) <nl> { <nl> - super ( cfs , txn , gcBefore , offline ) ; <nl> + super ( cfs , txn , gcBefore ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java <nl> index f8c73d3 . . 50e5a96 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java <nl> @ @ - 48 , 8 + 48 , 16 @ @ public abstract class CompactionAwareWriter extends Transactional . AbstractTransa <nl> <nl> public CompactionAwareWriter ( ColumnFamilyStore cfs , <nl> LifecycleTransaction txn , <nl> + Set < SSTableReader > nonExpiredSSTables ) <nl> + { <nl> + this ( cfs , txn , nonExpiredSSTables , false , false ) ; <nl> + } <nl> + <nl> + public CompactionAwareWriter ( ColumnFamilyStore cfs , <nl> + LifecycleTransaction txn , <nl> Set < SSTableReader > nonExpiredSSTables , <nl> - boolean offline ) <nl> + boolean offline , <nl> + boolean keepOriginals ) <nl> { <nl> this . cfs = cfs ; <nl> this . nonExpiredSSTables = nonExpiredSSTables ; <nl> @ @ - 57 , 7 + 65 , 7 @ @ public abstract class CompactionAwareWriter extends Transactional . AbstractTransa <nl> this . maxAge = CompactionTask . getMaxDataAge ( nonExpiredSSTables ) ; <nl> this . minRepairedAt = CompactionTask . getMinRepairedAt ( nonExpiredSSTables ) ; <nl> this . txn = txn ; <nl> - this . sstableWriter = new SSTableRewriter ( cfs , txn , maxAge , offline ) . keepOriginals ( offline ) ; <nl> + this . sstableWriter = new SSTableRewriter ( cfs , txn , maxAge , offline ) . keepOriginals ( keepOriginals ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java <nl> index 53dad55 . . eb55d20 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java <nl> @ @ - 40 , 10 + 40 , 15 @ @ public class DefaultCompactionWriter extends CompactionAwareWriter <nl> { <nl> protected static final Logger logger = LoggerFactory . getLogger ( DefaultCompactionWriter . class ) ; <nl> <nl> + public DefaultCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables ) <nl> + { <nl> + this ( cfs , txn , nonExpiredSSTables , false , false ) ; <nl> + } <nl> + <nl> @ SuppressWarnings ( " resource " ) <nl> - public DefaultCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , boolean offline ) <nl> + public DefaultCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , boolean offline , boolean keepOriginals ) <nl> { <nl> - super ( cfs , txn , nonExpiredSSTables , offline ) ; <nl> + super ( cfs , txn , nonExpiredSSTables , offline , keepOriginals ) ; <nl> logger . debug ( " Expected bloom filter size : { } " , estimatedTotalKeys ) ; <nl> long expectedWriteSize = cfs . getExpectedCompactedFileSize ( nonExpiredSSTables , txn . opType ( ) ) ; <nl> File sstableDirectory = cfs . directories . getLocationForDisk ( getWriteDirectory ( expectedWriteSize ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java <nl> index a44ea7e . . a826809 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java <nl> @ @ - 47 , 10 + 47 , 23 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter <nl> private int sstablesWritten = 0 ; <nl> private final boolean skipAncestors ; <nl> <nl> + public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , <nl> + LifecycleTransaction txn , <nl> + Set < SSTableReader > nonExpiredSSTables , <nl> + long maxSSTableSize ) <nl> + { <nl> + this ( cfs , txn , nonExpiredSSTables , maxSSTableSize , false , false ) ; <nl> + } <nl> + <nl> @ SuppressWarnings ( " resource " ) <nl> - public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , long maxSSTableSize , boolean offline ) <nl> + public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , <nl> + LifecycleTransaction txn , <nl> + Set < SSTableReader > nonExpiredSSTables , <nl> + long maxSSTableSize , <nl> + boolean offline , <nl> + boolean keepOriginals ) <nl> { <nl> - super ( cfs , txn , nonExpiredSSTables , offline ) ; <nl> + super ( cfs , txn , nonExpiredSSTables , offline , keepOriginals ) ; <nl> this . maxSSTableSize = maxSSTableSize ; <nl> this . allSSTables = txn . originals ( ) ; <nl> expectedWriteSize = Math . min ( maxSSTableSize , cfs . getExpectedCompactedFileSize ( nonExpiredSSTables , txn . opType ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java <nl> index 3942b1e . . 241af0d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java <nl> @ @ - 39 , 10 + 39 , 25 @ @ public class MaxSSTableSizeWriter extends CompactionAwareWriter <nl> private final long estimatedSSTables ; <nl> private final Set < SSTableReader > allSSTables ; <nl> <nl> + public MaxSSTableSizeWriter ( ColumnFamilyStore cfs , <nl> + LifecycleTransaction txn , <nl> + Set < SSTableReader > nonExpiredSSTables , <nl> + long maxSSTableSize , <nl> + int level ) <nl> + { <nl> + this ( cfs , txn , nonExpiredSSTables , maxSSTableSize , level , false , false ) ; <nl> + } <nl> + <nl> @ SuppressWarnings ( " resource " ) <nl> - public MaxSSTableSizeWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , long maxSSTableSize , int level , boolean offline ) <nl> + public MaxSSTableSizeWriter ( ColumnFamilyStore cfs , <nl> + LifecycleTransaction txn , <nl> + Set < SSTableReader > nonExpiredSSTables , <nl> + long maxSSTableSize , <nl> + int level , <nl> + boolean offline , <nl> + boolean keepOriginals ) <nl> { <nl> - super ( cfs , txn , nonExpiredSSTables , offline ) ; <nl> + super ( cfs , txn , nonExpiredSSTables , offline , keepOriginals ) ; <nl> this . allSSTables = txn . originals ( ) ; <nl> this . level = level ; <nl> this . maxSSTableSize = maxSSTableSize ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java <nl> index 5d8670d . . 65924fa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class SplittingSizeTieredCompactionWriter extends CompactionAwareWriter <nl> @ SuppressWarnings ( " resource " ) <nl> public SplittingSizeTieredCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , long smallestSSTable ) <nl> { <nl> - super ( cfs , txn , nonExpiredSSTables , false ) ; <nl> + super ( cfs , txn , nonExpiredSSTables , false , false ) ; <nl> this . allSSTables = txn . originals ( ) ; <nl> totalSize = cfs . getExpectedCompactedFileSize ( nonExpiredSSTables , txn . opType ( ) ) ; <nl> double [ ] potentialRatios = new double [ 20 ] ; <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java <nl> index ab6c72a . . 80e7831 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java <nl> @ @ - 592 , 7 + 592 , 7 @ @ public class TransactionLogs extends Transactional . AbstractTransactional impleme <nl> return ; <nl> } <nl> <nl> - if ( tracker ! = null & & ! wasNew ) <nl> + if ( tracker ! = null & & tracker . cfstore ! = null & & ! wasNew ) <nl> tracker . cfstore . metric . totalDiskSpaceUsed . dec ( sizeOnDisk ) ; <nl> <nl> / / release the referent to the parent so that the all transaction files can be released <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java <nl> index 8514dcc . . 42bffb1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java <nl> @ @ - 60 , 18 + 60 , 18 @ @ public class SSTableTxnWriter extends Transactional . AbstractTransactional implem <nl> <nl> protected Throwable doCommit ( Throwable accumulate ) <nl> { <nl> - return txn . commit ( writer . commit ( accumulate ) ) ; <nl> + return writer . commit ( txn . commit ( accumulate ) ) ; <nl> } <nl> <nl> protected Throwable doAbort ( Throwable accumulate ) <nl> { <nl> - return txn . abort ( writer . abort ( accumulate ) ) ; <nl> + return writer . abort ( txn . abort ( accumulate ) ) ; <nl> } <nl> <nl> protected void doPrepare ( ) <nl> { <nl> - writer . prepareToCommit ( ) ; <nl> txn . prepareToCommit ( ) ; <nl> + writer . prepareToCommit ( ) ; <nl> } <nl> <nl> public SSTableReader finish ( boolean openResult ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> index 5a0c43f . . e53038d 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> @ @ - 153 , 18 + 153 , 13 @ @ public class StandaloneSplitter <nl> try ( LifecycleTransaction transaction = LifecycleTransaction . offline ( OperationType . UNKNOWN , sstable ) ) <nl> { <nl> new SSTableSplitter ( cfs , transaction , options . sizeInMB ) . split ( ) ; <nl> - <nl> - / / Remove the sstable ( it ' s been copied by split and snapshotted ) <nl> - transaction . obsoleteOriginals ( ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> System . err . println ( String . format ( " Error splitting % s : % s " , sstable , e . getMessage ( ) ) ) ; <nl> if ( options . debug ) <nl> e . printStackTrace ( System . err ) ; <nl> - } <nl> - finally <nl> - { <nl> + <nl> sstable . selfRef ( ) . release ( ) ; <nl> } <nl> } <nl> diff - - git a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java <nl> index 20faa98 . . 7db978e 100644 <nl> - - - a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java <nl> + + + b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class LongCompactionsTest <nl> try ( LifecycleTransaction txn = store . getTracker ( ) . tryModify ( sstables , OperationType . COMPACTION ) ) <nl> { <nl> assert txn ! = null : " Cannot markCompacting all sstables " ; <nl> - new CompactionTask ( store , txn , gcBefore , false ) . execute ( null ) ; <nl> + new CompactionTask ( store , txn , gcBefore ) . execute ( null ) ; <nl> } <nl> System . out . println ( String . format ( " % s : sstables = % d rowsper = % d colsper = % d : % d ms " , <nl> this . getClass ( ) . getName ( ) , <nl> diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> index 07bd22a . . cc4038d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . db . compaction . Scrubber ; <nl> import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> + import org . apache . cassandra . db . lifecycle . TransactionLogs ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . db . marshal . UUIDType ; <nl> import org . apache . cassandra . db . partitions . Partition ; <nl> @ @ - 142 , 7 + 143 , 7 @ @ public class ScrubTest <nl> <nl> / / with skipCorrupted = = false , the scrub is expected to fail <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( Arrays . asList ( sstable ) , OperationType . SCRUB ) ; <nl> - Scrubber scrubber = new Scrubber ( cfs , txn , false , false , true ) ; ) <nl> + Scrubber scrubber = new Scrubber ( cfs , txn , false , false , true ) ) <nl> { <nl> scrubber . scrub ( ) ; <nl> fail ( " Expected a CorruptSSTableException to be thrown " ) ; <nl> @ @ - 152 , 7 + 153 , 7 @ @ public class ScrubTest <nl> / / with skipCorrupted = = true , the corrupt rows will be skipped <nl> Scrubber . ScrubResult scrubResult ; <nl> try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( Arrays . asList ( sstable ) , OperationType . SCRUB ) ; <nl> - Scrubber scrubber = new Scrubber ( cfs , txn , true , false , true ) ; ) <nl> + Scrubber scrubber = new Scrubber ( cfs , txn , true , false , true ) ) <nl> { <nl> scrubResult = scrubber . scrubWithResult ( ) ; <nl> } <nl> @ @ - 370 , 9 + 371 , 9 @ @ public class ScrubTest <nl> { <nl> scrubber . scrub ( ) ; <nl> } <nl> + TransactionLogs . waitForDeletions ( ) ; <nl> cfs . loadNewSSTables ( ) ; <nl> assertOrderedAll ( cfs , 7 ) ; <nl> - sstable . selfRef ( ) . release ( ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java <nl> index 19c56e8 . . 6a57327 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class CompactionAwareWriterTest extends CQLTester <nl> populate ( rowCount ) ; <nl> LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( cfs . getLiveSSTables ( ) , OperationType . COMPACTION ) ; <nl> long beforeSize = txn . originals ( ) . iterator ( ) . next ( ) . onDiskLength ( ) ; <nl> - CompactionAwareWriter writer = new DefaultCompactionWriter ( cfs , txn , txn . originals ( ) , false ) ; <nl> + CompactionAwareWriter writer = new DefaultCompactionWriter ( cfs , txn , txn . originals ( ) ) ; <nl> int rows = compact ( cfs , txn , writer ) ; <nl> assertEquals ( 1 , cfs . getLiveSSTables ( ) . size ( ) ) ; <nl> assertEquals ( rowCount , rows ) ; <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class CompactionAwareWriterTest extends CQLTester <nl> LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( cfs . getLiveSSTables ( ) , OperationType . COMPACTION ) ; <nl> long beforeSize = txn . originals ( ) . iterator ( ) . next ( ) . onDiskLength ( ) ; <nl> int sstableSize = ( int ) beforeSize / 10 ; <nl> - CompactionAwareWriter writer = new MaxSSTableSizeWriter ( cfs , txn , txn . originals ( ) , sstableSize , 0 , false ) ; <nl> + CompactionAwareWriter writer = new MaxSSTableSizeWriter ( cfs , txn , txn . originals ( ) , sstableSize , 0 ) ; <nl> int rows = compact ( cfs , txn , writer ) ; <nl> assertEquals ( 10 , cfs . getLiveSSTables ( ) . size ( ) ) ; <nl> assertEquals ( rowCount , rows ) ; <nl> @ @ - 150 , 7 + 150 , 7 @ @ public class CompactionAwareWriterTest extends CQLTester <nl> LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( cfs . getLiveSSTables ( ) , OperationType . COMPACTION ) ; <nl> long beforeSize = txn . originals ( ) . iterator ( ) . next ( ) . onDiskLength ( ) ; <nl> int sstableSize = ( int ) beforeSize / targetSSTableCount ; <nl> - CompactionAwareWriter writer = new MajorLeveledCompactionWriter ( cfs , txn , txn . originals ( ) , sstableSize , false ) ; <nl> + CompactionAwareWriter writer = new MajorLeveledCompactionWriter ( cfs , txn , txn . originals ( ) , sstableSize ) ; <nl> int rows = compact ( cfs , txn , writer ) ; <nl> assertEquals ( targetSSTableCount , cfs . getLiveSSTables ( ) . size ( ) ) ; <nl> int [ ] levelCounts = new int [ 5 ] ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java <nl> index 357298e . . 856ef7c 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java <nl> @ @ - 62 , 17 + 62 , 17 @ @ public class BigTableWriterTest extends AbstractTransactionalTest <nl> final Descriptor descriptor ; <nl> final SSTableTxnWriter writer ; <nl> <nl> - private TestableBTW ( ) throws IOException <nl> + private TestableBTW ( ) <nl> { <nl> this ( cfs . getSSTablePath ( cfs . directories . getDirectoryForNewSSTables ( ) ) ) ; <nl> } <nl> <nl> - private TestableBTW ( String file ) throws IOException <nl> + private TestableBTW ( String file ) <nl> { <nl> this ( file , SSTableTxnWriter . create ( file , 0 , 0 , new SerializationHeader ( cfs . metadata , cfs . metadata . partitionColumns ( ) , EncodingStats . NO _ STATS ) ) ) ; <nl> } <nl> <nl> - private TestableBTW ( String file , SSTableTxnWriter sw ) throws IOException <nl> + private TestableBTW ( String file , SSTableTxnWriter sw ) <nl> { <nl> super ( sw ) ; <nl> this . file = new File ( file ) ; <nl> @ @ - 111 , 11 + 111 , 18 @ @ public class BigTableWriterTest extends AbstractTransactionalTest <nl> assertPrepared ( ) ; <nl> } <nl> <nl> + @ Override <nl> + protected boolean commitCanThrow ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> private void assertExists ( Component . . . components ) <nl> { <nl> for ( Component component : components ) <nl> Assert . assertTrue ( new File ( descriptor . filenameFor ( component ) ) . exists ( ) ) ; <nl> } <nl> + <nl> private void assertNotExists ( Component . . . components ) <nl> { <nl> for ( Component component : components ) <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java <nl> index fd22941 . . f8b8fa7 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java <nl> @ @ - 670 , 8 + 670 , 6 @ @ public class SSTableRewriterTest extends SchemaLoader <nl> splitter . split ( ) ; <nl> <nl> assertFileCounts ( s . descriptor . directory . list ( ) ) ; <nl> - <nl> - s . selfRef ( ) . release ( ) ; <nl> TransactionLogs . waitForDeletions ( ) ; <nl> <nl> for ( File f : s . descriptor . directory . listFiles ( ) )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dc86de1 . . 7512c9d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> * cleanup usage of StorageService . setMode ( ) ( CASANDRA - 3388 ) <nl> * Add timing information to cassandra - cli GET / SET / LIST queries ( CASSANDRA - 3326 ) <nl> * Cache for CompressionMetadata objects ( CASSANDRA - 3427 ) <nl> + * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) <nl> + <nl> <nl> 1 . 0 . 1 <nl> * acquire references during index build to prevent delete problems <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index c21b363 . . 1c3c0ed 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 165 , 6 + 165 , 7 @ @ JVM _ OPTS = " $ JVM _ OPTS - XX : + UseCMSInitiatingOccupancyOnly " <nl> # GC logging options - - uncomment to enable <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDetails " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCTimeStamps " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintHeapAtGC " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintTenuringDistribution " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 196e15e . . b648656 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class TokenMetadata <nl> / / Finally , note that recording the tokens of joining nodes in bootstrapTokens also <nl> / / means we can detect and reject the addition of multiple nodes at the same token <nl> / / before one becomes part of the ring . <nl> - private BiMap < Token , InetAddress > bootstrapTokens = HashBiMap . create ( ) ; <nl> + private BiMap < Token , InetAddress > bootstrapTokens = Maps . synchronizedBiMap ( HashBiMap . < Token , InetAddress > create ( ) ) ; <nl> / / ( don ' t need to record Token here since it ' s still part of tokenToEndpointMap until it ' s done leaving ) <nl> private Set < InetAddress > leavingEndpoints = new HashSet < InetAddress > ( ) ; <nl> / / this is a cache of the calculation from { tokenToEndpointMap , bootstrapTokens , leavingEndpoints }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index 379d3de . . 4279f6e 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 180 , 7 + 180 , 7 @ @ public abstract class AbstractCompactionStrategy 
 
 public AbstractCompactionTask getCompactionTask ( LifecycleTransaction txn , final int gcBefore , long maxSSTableBytes ) 
 { 
 - return new CompactionTask ( cfs , txn , gcBefore , false ) ; 
 + return new CompactionTask ( cfs , txn , gcBefore ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 7897a1a . . 0bd6aae 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 52 , 14 + 52 , 21 @ @ public class CompactionTask extends AbstractCompactionTask 
 protected static final Logger logger = LoggerFactory . getLogger ( CompactionTask . class ) ; 
 protected final int gcBefore ; 
 private final boolean offline ; 
 + private final boolean keepOriginals ; 
 protected static long totalBytesCompacted = 0 ; 
 private CompactionExecutorStatsCollector collector ; 
 
 - public CompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean offline ) 
 + public CompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore ) 
 + { 
 + this ( cfs , txn , gcBefore , false , false ) ; 
 + } 
 + 
 + public CompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean offline , boolean keepOriginals ) 
 { 
 super ( cfs , txn ) ; 
 this . gcBefore = gcBefore ; 
 this . offline = offline ; 
 + this . keepOriginals = keepOriginals ; 
 } 
 
 public static synchronized long addToTotalBytesCompacted ( long bytesCompacted ) 
 @ @ - 224 , 7 + 231 , 7 @ @ public class CompactionTask extends AbstractCompactionTask 
 LifecycleTransaction transaction , 
 Set < SSTableReader > nonExpiredSSTables ) 
 { 
 - return new DefaultCompactionWriter ( cfs , transaction , nonExpiredSSTables , offline ) ; 
 + return new DefaultCompactionWriter ( cfs , transaction , nonExpiredSSTables , offline , keepOriginals ) ; 
 } 
 
 public static String updateCompactionHistory ( String keyspaceName , String columnFamilyName , long [ ] mergedRowCounts , long startSize , long endSize ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java 
 index 8fa3b8f . . 1d1faf5 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / DateTieredCompactionStrategy . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy 
 
 LifecycleTransaction modifier = cfs . getTracker ( ) . tryModify ( latestBucket , OperationType . COMPACTION ) ; 
 if ( modifier ! = null ) 
 - return new CompactionTask ( cfs , modifier , gcBefore , false ) ; 
 + return new CompactionTask ( cfs , modifier , gcBefore ) ; 
 } 
 } 
 
 @ @ - 372 , 7 + 372 , 7 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy 
 if ( modifier = = null ) 
 return null ; 
 
 - return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , modifier , gcBefore , false ) ) ; 
 + return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , modifier , gcBefore ) ) ; 
 } 
 
 @ Override 
 @ @ - 388 , 7 + 388 , 7 @ @ public class DateTieredCompactionStrategy extends AbstractCompactionStrategy 
 return null ; 
 } 
 
 - return new CompactionTask ( cfs , modifier , gcBefore , false ) . setUserDefined ( true ) ; 
 + return new CompactionTask ( cfs , modifier , gcBefore ) . setUserDefined ( true ) ; 
 } 
 
 public int getEstimatedRemainingTasks ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 index d3d56ac . . 11d113d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 @ @ - 34 , 7 + 34 , 7 @ @ public class LeveledCompactionTask extends CompactionTask 
 
 public LeveledCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int level , int gcBefore , long maxSSTableBytes , boolean majorCompaction ) 
 { 
 - super ( cfs , txn , gcBefore , false ) ; 
 + super ( cfs , txn , gcBefore ) ; 
 this . level = level ; 
 this . maxSSTableBytes = maxSSTableBytes ; 
 this . majorCompaction = majorCompaction ; 
 @ @ - 46 , 8 + 46 , 8 @ @ public class LeveledCompactionTask extends CompactionTask 
 Set < SSTableReader > nonExpiredSSTables ) 
 { 
 if ( majorCompaction ) 
 - return new MajorLeveledCompactionWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , false ) ; 
 - return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , getLevel ( ) , false ) ; 
 + return new MajorLeveledCompactionWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , false , false ) ; 
 + return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , maxSSTableBytes , getLevel ( ) , false , false ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java 
 index 8f382ea . . 1944364 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class SSTableSplitter { 
 
 public SplittingCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction transaction , int sstableSizeInMB ) 
 { 
 - super ( cfs , transaction , CompactionManager . NO _ GC , true ) ; 
 + super ( cfs , transaction , CompactionManager . NO _ GC , true , false ) ; 
 this . sstableSizeInMB = sstableSizeInMB ; 
 
 if ( sstableSizeInMB < = 0 ) 
 @ @ - 78 , 7 + 78 , 7 @ @ public class SSTableSplitter { 
 LifecycleTransaction txn , 
 Set < SSTableReader > nonExpiredSSTables ) 
 { 
 - return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , sstableSizeInMB * 1024L * 1024L , 0 , true ) ; 
 + return new MaxSSTableSizeWriter ( cfs , txn , nonExpiredSSTables , sstableSizeInMB * 1024L * 1024L , 0 , true , false ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index 891fac8 . . f9e9e71 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 60 , 9 + 60 , 6 @ @ public class Scrubber implements Closeable 
 
 private final boolean isOffline ; 
 
 - private SSTableReader newSstable ; 
 - private SSTableReader newInOrderSstable ; 
 - 
 private int goodRows ; 
 private int badRows ; 
 private int emptyRows ; 
 @ @ - 152 , 9 + 149 , 10 @ @ public class Scrubber implements Closeable 
 
 public void scrub ( ) 
 { 
 + List < SSTableReader > finished = new ArrayList < > ( ) ; 
 + boolean completed = false ; 
 outputHandler . output ( String . format ( " Scrubbing % s ( % s bytes ) " , sstable , dataFile . length ( ) ) ) ; 
 - int nowInSec = FBUtilities . nowInSeconds ( ) ; 
 - try ( SSTableRewriter writer = new SSTableRewriter ( cfs , transaction , sstable . maxDataAge , isOffline ) . keepOriginals ( isOffline ) ) 
 + try ( SSTableRewriter writer = new SSTableRewriter ( cfs , transaction , sstable . maxDataAge , isOffline ) ) 
 { 
 nextIndexKey = indexAvailable ( ) ? ByteBufferUtil . readWithShortLength ( indexFile ) : null ; 
 if ( indexAvailable ( ) ) 
 @ @ - 296 , 6 + 294 , 7 @ @ public class Scrubber implements Closeable 
 { 
 / / out of order rows , but no bad rows found - we can keep our repairedAt time 
 long repairedAt = badRows > 0 ? ActiveRepairService . UNREPAIRED _ SSTABLE : sstable . getSSTableMetadata ( ) . repairedAt ; 
 + SSTableReader newInOrderSstable ; 
 try ( SSTableWriter inOrderWriter = CompactionManager . createWriter ( cfs , destination , expectedBloomFilterSize , repairedAt , sstable , transaction ) ) 
 { 
 for ( Partition partition : outOfOrder ) 
 @ @ - 303 , 20 + 302 , 25 @ @ public class Scrubber implements Closeable 
 newInOrderSstable = inOrderWriter . finish ( - 1 , sstable . maxDataAge , true ) ; 
 } 
 transaction . update ( newInOrderSstable , false ) ; 
 + finished . add ( newInOrderSstable ) ; 
 outputHandler . warn ( String . format ( " % d out of order rows found while scrubbing % s ; Those have been written ( in order ) to a new sstable ( % s ) " , outOfOrder . size ( ) , sstable , newInOrderSstable ) ) ; 
 } 
 
 / / finish obsoletes the old sstable 
 - List < SSTableReader > finished = writer . setRepairedAt ( badRows > 0 ? ActiveRepairService . UNREPAIRED _ SSTABLE : sstable . getSSTableMetadata ( ) . repairedAt ) . finish ( ) ; 
 - if ( ! finished . isEmpty ( ) ) 
 - newSstable = finished . get ( 0 ) ; 
 + finished . addAll ( writer . setRepairedAt ( badRows > 0 ? ActiveRepairService . UNREPAIRED _ SSTABLE : sstable . getSSTableMetadata ( ) . repairedAt ) . finish ( ) ) ; 
 + completed = true ; 
 } 
 catch ( IOException e ) 
 { 
 throw Throwables . propagate ( e ) ; 
 } 
 + finally 
 + { 
 + if ( transaction . isOffline ( ) ) 
 + finished . forEach ( sstable - > sstable . selfRef ( ) . release ( ) ) ; 
 + } 
 
 - if ( newSstable = = null ) 
 + if ( completed ) 
 { 
 if ( badRows > 0 ) 
 outputHandler . warn ( " No valid rows found while scrubbing " + sstable + " ; it is marked for deletion now . If you want to attempt manual recovery , you can find a copy in the pre - scrub snapshot " ) ; 
 @ @ - 384 , 16 + 388 , 6 @ @ public class Scrubber implements Closeable 
 outOfOrder . add ( ArrayBackedPartition . create ( iterator ) ) ; 
 } 
 
 - public SSTableReader getNewSSTable ( ) 
 - { 
 - return newSstable ; 
 - } 
 - 
 - public SSTableReader getNewInOrderSSTable ( ) 
 - { 
 - return newInOrderSstable ; 
 - } 
 - 
 private void throwIfFatal ( Throwable th ) 
 { 
 if ( th instanceof Error & & ! ( th instanceof AssertionError | | th instanceof IOError ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 index 09d40c8 . . 2353aa3 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SizeTieredCompactionStrategy . java 
 @ @ - 184 , 7 + 184 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 
 LifecycleTransaction transaction = cfs . getTracker ( ) . tryModify ( hottestBucket , OperationType . COMPACTION ) ; 
 if ( transaction ! = null ) 
 - return new CompactionTask ( cfs , transaction , gcBefore , false ) ; 
 + return new CompactionTask ( cfs , transaction , gcBefore ) ; 
 } 
 } 
 
 @ @ - 198 , 8 + 198 , 8 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 if ( txn = = null ) 
 return null ; 
 if ( splitOutput ) 
 - return Arrays . < AbstractCompactionTask > asList ( new SplittingCompactionTask ( cfs , txn , gcBefore , false ) ) ; 
 - return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , txn , gcBefore , false ) ) ; 
 + return Arrays . < AbstractCompactionTask > asList ( new SplittingCompactionTask ( cfs , txn , gcBefore ) ) ; 
 + return Arrays . < AbstractCompactionTask > asList ( new CompactionTask ( cfs , txn , gcBefore ) ) ; 
 } 
 
 @ SuppressWarnings ( " resource " ) 
 @ @ - 214 , 7 + 214 , 7 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 return null ; 
 } 
 
 - return new CompactionTask ( cfs , transaction , gcBefore , false ) . setUserDefined ( true ) ; 
 + return new CompactionTask ( cfs , transaction , gcBefore ) . setUserDefined ( true ) ; 
 } 
 
 public int getEstimatedRemainingTasks ( ) 
 @ @ - 335 , 9 + 335 , 9 @ @ public class SizeTieredCompactionStrategy extends AbstractCompactionStrategy 
 
 private static class SplittingCompactionTask extends CompactionTask 
 { 
 - public SplittingCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean offline ) 
 + public SplittingCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore ) 
 { 
 - super ( cfs , txn , gcBefore , offline ) ; 
 + super ( cfs , txn , gcBefore ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java 
 index f8c73d3 . . 50e5a96 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / CompactionAwareWriter . java 
 @ @ - 48 , 8 + 48 , 16 @ @ public abstract class CompactionAwareWriter extends Transactional . AbstractTransa 
 
 public CompactionAwareWriter ( ColumnFamilyStore cfs , 
 LifecycleTransaction txn , 
 + Set < SSTableReader > nonExpiredSSTables ) 
 + { 
 + this ( cfs , txn , nonExpiredSSTables , false , false ) ; 
 + } 
 + 
 + public CompactionAwareWriter ( ColumnFamilyStore cfs , 
 + LifecycleTransaction txn , 
 Set < SSTableReader > nonExpiredSSTables , 
 - boolean offline ) 
 + boolean offline , 
 + boolean keepOriginals ) 
 { 
 this . cfs = cfs ; 
 this . nonExpiredSSTables = nonExpiredSSTables ; 
 @ @ - 57 , 7 + 65 , 7 @ @ public abstract class CompactionAwareWriter extends Transactional . AbstractTransa 
 this . maxAge = CompactionTask . getMaxDataAge ( nonExpiredSSTables ) ; 
 this . minRepairedAt = CompactionTask . getMinRepairedAt ( nonExpiredSSTables ) ; 
 this . txn = txn ; 
 - this . sstableWriter = new SSTableRewriter ( cfs , txn , maxAge , offline ) . keepOriginals ( offline ) ; 
 + this . sstableWriter = new SSTableRewriter ( cfs , txn , maxAge , offline ) . keepOriginals ( keepOriginals ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java 
 index 53dad55 . . eb55d20 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / DefaultCompactionWriter . java 
 @ @ - 40 , 10 + 40 , 15 @ @ public class DefaultCompactionWriter extends CompactionAwareWriter 
 { 
 protected static final Logger logger = LoggerFactory . getLogger ( DefaultCompactionWriter . class ) ; 
 
 + public DefaultCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables ) 
 + { 
 + this ( cfs , txn , nonExpiredSSTables , false , false ) ; 
 + } 
 + 
 @ SuppressWarnings ( " resource " ) 
 - public DefaultCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , boolean offline ) 
 + public DefaultCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , boolean offline , boolean keepOriginals ) 
 { 
 - super ( cfs , txn , nonExpiredSSTables , offline ) ; 
 + super ( cfs , txn , nonExpiredSSTables , offline , keepOriginals ) ; 
 logger . debug ( " Expected bloom filter size : { } " , estimatedTotalKeys ) ; 
 long expectedWriteSize = cfs . getExpectedCompactedFileSize ( nonExpiredSSTables , txn . opType ( ) ) ; 
 File sstableDirectory = cfs . directories . getLocationForDisk ( getWriteDirectory ( expectedWriteSize ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java 
 index a44ea7e . . a826809 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / MajorLeveledCompactionWriter . java 
 @ @ - 47 , 10 + 47 , 23 @ @ public class MajorLeveledCompactionWriter extends CompactionAwareWriter 
 private int sstablesWritten = 0 ; 
 private final boolean skipAncestors ; 
 
 + public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , 
 + LifecycleTransaction txn , 
 + Set < SSTableReader > nonExpiredSSTables , 
 + long maxSSTableSize ) 
 + { 
 + this ( cfs , txn , nonExpiredSSTables , maxSSTableSize , false , false ) ; 
 + } 
 + 
 @ SuppressWarnings ( " resource " ) 
 - public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , long maxSSTableSize , boolean offline ) 
 + public MajorLeveledCompactionWriter ( ColumnFamilyStore cfs , 
 + LifecycleTransaction txn , 
 + Set < SSTableReader > nonExpiredSSTables , 
 + long maxSSTableSize , 
 + boolean offline , 
 + boolean keepOriginals ) 
 { 
 - super ( cfs , txn , nonExpiredSSTables , offline ) ; 
 + super ( cfs , txn , nonExpiredSSTables , offline , keepOriginals ) ; 
 this . maxSSTableSize = maxSSTableSize ; 
 this . allSSTables = txn . originals ( ) ; 
 expectedWriteSize = Math . min ( maxSSTableSize , cfs . getExpectedCompactedFileSize ( nonExpiredSSTables , txn . opType ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java 
 index 3942b1e . . 241af0d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / MaxSSTableSizeWriter . java 
 @ @ - 39 , 10 + 39 , 25 @ @ public class MaxSSTableSizeWriter extends CompactionAwareWriter 
 private final long estimatedSSTables ; 
 private final Set < SSTableReader > allSSTables ; 
 
 + public MaxSSTableSizeWriter ( ColumnFamilyStore cfs , 
 + LifecycleTransaction txn , 
 + Set < SSTableReader > nonExpiredSSTables , 
 + long maxSSTableSize , 
 + int level ) 
 + { 
 + this ( cfs , txn , nonExpiredSSTables , maxSSTableSize , level , false , false ) ; 
 + } 
 + 
 @ SuppressWarnings ( " resource " ) 
 - public MaxSSTableSizeWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , long maxSSTableSize , int level , boolean offline ) 
 + public MaxSSTableSizeWriter ( ColumnFamilyStore cfs , 
 + LifecycleTransaction txn , 
 + Set < SSTableReader > nonExpiredSSTables , 
 + long maxSSTableSize , 
 + int level , 
 + boolean offline , 
 + boolean keepOriginals ) 
 { 
 - super ( cfs , txn , nonExpiredSSTables , offline ) ; 
 + super ( cfs , txn , nonExpiredSSTables , offline , keepOriginals ) ; 
 this . allSSTables = txn . originals ( ) ; 
 this . level = level ; 
 this . maxSSTableSize = maxSSTableSize ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java b / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java 
 index 5d8670d . . 65924fa 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / writers / SplittingSizeTieredCompactionWriter . java 
 @ @ - 59 , 7 + 59 , 7 @ @ public class SplittingSizeTieredCompactionWriter extends CompactionAwareWriter 
 @ SuppressWarnings ( " resource " ) 
 public SplittingSizeTieredCompactionWriter ( ColumnFamilyStore cfs , LifecycleTransaction txn , Set < SSTableReader > nonExpiredSSTables , long smallestSSTable ) 
 { 
 - super ( cfs , txn , nonExpiredSSTables , false ) ; 
 + super ( cfs , txn , nonExpiredSSTables , false , false ) ; 
 this . allSSTables = txn . originals ( ) ; 
 totalSize = cfs . getExpectedCompactedFileSize ( nonExpiredSSTables , txn . opType ( ) ) ; 
 double [ ] potentialRatios = new double [ 20 ] ; 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java 
 index ab6c72a . . 80e7831 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java 
 @ @ - 592 , 7 + 592 , 7 @ @ public class TransactionLogs extends Transactional . AbstractTransactional impleme 
 return ; 
 } 
 
 - if ( tracker ! = null & & ! wasNew ) 
 + if ( tracker ! = null & & tracker . cfstore ! = null & & ! wasNew ) 
 tracker . cfstore . metric . totalDiskSpaceUsed . dec ( sizeOnDisk ) ; 
 
 / / release the referent to the parent so that the all transaction files can be released 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java 
 index 8514dcc . . 42bffb1 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTxnWriter . java 
 @ @ - 60 , 18 + 60 , 18 @ @ public class SSTableTxnWriter extends Transactional . AbstractTransactional implem 
 
 protected Throwable doCommit ( Throwable accumulate ) 
 { 
 - return txn . commit ( writer . commit ( accumulate ) ) ; 
 + return writer . commit ( txn . commit ( accumulate ) ) ; 
 } 
 
 protected Throwable doAbort ( Throwable accumulate ) 
 { 
 - return txn . abort ( writer . abort ( accumulate ) ) ; 
 + return writer . abort ( txn . abort ( accumulate ) ) ; 
 } 
 
 protected void doPrepare ( ) 
 { 
 - writer . prepareToCommit ( ) ; 
 txn . prepareToCommit ( ) ; 
 + writer . prepareToCommit ( ) ; 
 } 
 
 public SSTableReader finish ( boolean openResult ) 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 index 5a0c43f . . e53038d 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 @ @ - 153 , 18 + 153 , 13 @ @ public class StandaloneSplitter 
 try ( LifecycleTransaction transaction = LifecycleTransaction . offline ( OperationType . UNKNOWN , sstable ) ) 
 { 
 new SSTableSplitter ( cfs , transaction , options . sizeInMB ) . split ( ) ; 
 - 
 - / / Remove the sstable ( it ' s been copied by split and snapshotted ) 
 - transaction . obsoleteOriginals ( ) ; 
 } 
 catch ( Exception e ) 
 { 
 System . err . println ( String . format ( " Error splitting % s : % s " , sstable , e . getMessage ( ) ) ) ; 
 if ( options . debug ) 
 e . printStackTrace ( System . err ) ; 
 - } 
 - finally 
 - { 
 + 
 sstable . selfRef ( ) . release ( ) ; 
 } 
 } 
 diff - - git a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java 
 index 20faa98 . . 7db978e 100644 
 - - - a / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java 
 + + + b / test / long / org / apache / cassandra / db / compaction / LongCompactionsTest . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public class LongCompactionsTest 
 try ( LifecycleTransaction txn = store . getTracker ( ) . tryModify ( sstables , OperationType . COMPACTION ) ) 
 { 
 assert txn ! = null : " Cannot markCompacting all sstables " ; 
 - new CompactionTask ( store , txn , gcBefore , false ) . execute ( null ) ; 
 + new CompactionTask ( store , txn , gcBefore ) . execute ( null ) ; 
 } 
 System . out . println ( String . format ( " % s : sstables = % d rowsper = % d colsper = % d : % d ms " , 
 this . getClass ( ) . getName ( ) , 
 diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 index 07bd22a . . cc4038d 100644 
 - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . db . compaction . Scrubber ; 
 import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 + import org . apache . cassandra . db . lifecycle . TransactionLogs ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . db . marshal . UUIDType ; 
 import org . apache . cassandra . db . partitions . Partition ; 
 @ @ - 142 , 7 + 143 , 7 @ @ public class ScrubTest 
 
 / / with skipCorrupted = = false , the scrub is expected to fail 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( Arrays . asList ( sstable ) , OperationType . SCRUB ) ; 
 - Scrubber scrubber = new Scrubber ( cfs , txn , false , false , true ) ; ) 
 + Scrubber scrubber = new Scrubber ( cfs , txn , false , false , true ) ) 
 { 
 scrubber . scrub ( ) ; 
 fail ( " Expected a CorruptSSTableException to be thrown " ) ; 
 @ @ - 152 , 7 + 153 , 7 @ @ public class ScrubTest 
 / / with skipCorrupted = = true , the corrupt rows will be skipped 
 Scrubber . ScrubResult scrubResult ; 
 try ( LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( Arrays . asList ( sstable ) , OperationType . SCRUB ) ; 
 - Scrubber scrubber = new Scrubber ( cfs , txn , true , false , true ) ; ) 
 + Scrubber scrubber = new Scrubber ( cfs , txn , true , false , true ) ) 
 { 
 scrubResult = scrubber . scrubWithResult ( ) ; 
 } 
 @ @ - 370 , 9 + 371 , 9 @ @ public class ScrubTest 
 { 
 scrubber . scrub ( ) ; 
 } 
 + TransactionLogs . waitForDeletions ( ) ; 
 cfs . loadNewSSTables ( ) ; 
 assertOrderedAll ( cfs , 7 ) ; 
 - sstable . selfRef ( ) . release ( ) ; 
 } 
 finally 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java 
 index 19c56e8 . . 6a57327 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionAwareWriterTest . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class CompactionAwareWriterTest extends CQLTester 
 populate ( rowCount ) ; 
 LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( cfs . getLiveSSTables ( ) , OperationType . COMPACTION ) ; 
 long beforeSize = txn . originals ( ) . iterator ( ) . next ( ) . onDiskLength ( ) ; 
 - CompactionAwareWriter writer = new DefaultCompactionWriter ( cfs , txn , txn . originals ( ) , false ) ; 
 + CompactionAwareWriter writer = new DefaultCompactionWriter ( cfs , txn , txn . originals ( ) ) ; 
 int rows = compact ( cfs , txn , writer ) ; 
 assertEquals ( 1 , cfs . getLiveSSTables ( ) . size ( ) ) ; 
 assertEquals ( rowCount , rows ) ; 
 @ @ - 97 , 7 + 97 , 7 @ @ public class CompactionAwareWriterTest extends CQLTester 
 LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( cfs . getLiveSSTables ( ) , OperationType . COMPACTION ) ; 
 long beforeSize = txn . originals ( ) . iterator ( ) . next ( ) . onDiskLength ( ) ; 
 int sstableSize = ( int ) beforeSize / 10 ; 
 - CompactionAwareWriter writer = new MaxSSTableSizeWriter ( cfs , txn , txn . originals ( ) , sstableSize , 0 , false ) ; 
 + CompactionAwareWriter writer = new MaxSSTableSizeWriter ( cfs , txn , txn . originals ( ) , sstableSize , 0 ) ; 
 int rows = compact ( cfs , txn , writer ) ; 
 assertEquals ( 10 , cfs . getLiveSSTables ( ) . size ( ) ) ; 
 assertEquals ( rowCount , rows ) ; 
 @ @ - 150 , 7 + 150 , 7 @ @ public class CompactionAwareWriterTest extends CQLTester 
 LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( cfs . getLiveSSTables ( ) , OperationType . COMPACTION ) ; 
 long beforeSize = txn . originals ( ) . iterator ( ) . next ( ) . onDiskLength ( ) ; 
 int sstableSize = ( int ) beforeSize / targetSSTableCount ; 
 - CompactionAwareWriter writer = new MajorLeveledCompactionWriter ( cfs , txn , txn . originals ( ) , sstableSize , false ) ; 
 + CompactionAwareWriter writer = new MajorLeveledCompactionWriter ( cfs , txn , txn . originals ( ) , sstableSize ) ; 
 int rows = compact ( cfs , txn , writer ) ; 
 assertEquals ( targetSSTableCount , cfs . getLiveSSTables ( ) . size ( ) ) ; 
 int [ ] levelCounts = new int [ 5 ] ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java 
 index 357298e . . 856ef7c 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / BigTableWriterTest . java 
 @ @ - 62 , 17 + 62 , 17 @ @ public class BigTableWriterTest extends AbstractTransactionalTest 
 final Descriptor descriptor ; 
 final SSTableTxnWriter writer ; 
 
 - private TestableBTW ( ) throws IOException 
 + private TestableBTW ( ) 
 { 
 this ( cfs . getSSTablePath ( cfs . directories . getDirectoryForNewSSTables ( ) ) ) ; 
 } 
 
 - private TestableBTW ( String file ) throws IOException 
 + private TestableBTW ( String file ) 
 { 
 this ( file , SSTableTxnWriter . create ( file , 0 , 0 , new SerializationHeader ( cfs . metadata , cfs . metadata . partitionColumns ( ) , EncodingStats . NO _ STATS ) ) ) ; 
 } 
 
 - private TestableBTW ( String file , SSTableTxnWriter sw ) throws IOException 
 + private TestableBTW ( String file , SSTableTxnWriter sw ) 
 { 
 super ( sw ) ; 
 this . file = new File ( file ) ; 
 @ @ - 111 , 11 + 111 , 18 @ @ public class BigTableWriterTest extends AbstractTransactionalTest 
 assertPrepared ( ) ; 
 } 
 
 + @ Override 
 + protected boolean commitCanThrow ( ) 
 + { 
 + return true ; 
 + } 
 + 
 private void assertExists ( Component . . . components ) 
 { 
 for ( Component component : components ) 
 Assert . assertTrue ( new File ( descriptor . filenameFor ( component ) ) . exists ( ) ) ; 
 } 
 + 
 private void assertNotExists ( Component . . . components ) 
 { 
 for ( Component component : components ) 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java 
 index fd22941 . . f8b8fa7 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableRewriterTest . java 
 @ @ - 670 , 8 + 670 , 6 @ @ public class SSTableRewriterTest extends SchemaLoader 
 splitter . split ( ) ; 
 
 assertFileCounts ( s . descriptor . directory . list ( ) ) ; 
 - 
 - s . selfRef ( ) . release ( ) ; 
 TransactionLogs . waitForDeletions ( ) ; 
 
 for ( File f : s . descriptor . directory . listFiles ( ) )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dc86de1 . . 7512c9d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 * cleanup usage of StorageService . setMode ( ) ( CASANDRA - 3388 ) 
 * Add timing information to cassandra - cli GET / SET / LIST queries ( CASSANDRA - 3326 ) 
 * Cache for CompressionMetadata objects ( CASSANDRA - 3427 ) 
 + * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) 
 + 
 
 1 . 0 . 1 
 * acquire references during index build to prevent delete problems 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index c21b363 . . 1c3c0ed 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 165 , 6 + 165 , 7 @ @ JVM _ OPTS = " $ JVM _ OPTS - XX : + UseCMSInitiatingOccupancyOnly " 
 # GC logging options - - uncomment to enable 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDetails " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCTimeStamps " 
 + # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintHeapAtGC " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintTenuringDistribution " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 196e15e . . b648656 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class TokenMetadata 
 / / Finally , note that recording the tokens of joining nodes in bootstrapTokens also 
 / / means we can detect and reject the addition of multiple nodes at the same token 
 / / before one becomes part of the ring . 
 - private BiMap < Token , InetAddress > bootstrapTokens = HashBiMap . create ( ) ; 
 + private BiMap < Token , InetAddress > bootstrapTokens = Maps . synchronizedBiMap ( HashBiMap . < Token , InetAddress > create ( ) ) ; 
 / / ( don ' t need to record Token here since it ' s still part of tokenToEndpointMap until it ' s done leaving ) 
 private Set < InetAddress > leavingEndpoints = new HashSet < InetAddress > ( ) ; 
 / / this is a cache of the calculation from { tokenToEndpointMap , bootstrapTokens , leavingEndpoints }
