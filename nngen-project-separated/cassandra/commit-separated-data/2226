BLEU SCORE: 0.028398387225677897

TEST MSG: Fix more of test / system / test _ thrift _ server . py
GENERATED MSG: Support range tombstones in thrift

TEST DIFF (one line): diff - - git a / test / system / test _ thrift _ server . py b / test / system / test _ thrift _ server . py <nl> index 7655958 . . 1594356 100644 <nl> - - - a / test / system / test _ thrift _ server . py <nl> + + + b / test / system / test _ thrift _ server . py <nl> @ @ - 24 , 7 + 24 , 6 @ @ from . import thrift _ client as client <nl> <nl> from thrift . Thrift import TApplicationException <nl> from ttypes import * <nl> - from constants import VERSION <nl> <nl> <nl> def _ i64 ( n ) : <nl> @ @ - 1236 , 8 + 1235 , 6 @ @ class TestMutations ( ThriftTester ) : <nl> assert cf0 . comparator _ type = = " org . apache . cassandra . db . marshal . BytesType " <nl> <nl> def test _ describe ( self ) : <nl> - server _ version = client . describe _ version ( ) <nl> - assert server _ version = = VERSION , ( server _ version , VERSION ) <nl> assert client . describe _ cluster _ name ( ) = = ' Test Cluster ' <nl> <nl> def test _ describe _ ring ( self ) : <nl> @ @ - 1685 , 13 + 1682 , 13 @ @ class TestMutations ( ThriftTester ) : <nl> _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> <nl> # insert again and this time delete the whole row , check that it is gone <nl> - client . add ( ' key1 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> + client . add ( ' key2 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> assert rv2 . counter _ column . value = = d1 <nl> - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) <nl> + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> <nl> def test _ incr _ super _ remove ( self ) : <nl> _ set _ keyspace ( ' Keyspace1 ' ) <nl> @ @ - 1710 , 13 + 1707 , 13 @ @ class TestMutations ( ThriftTester ) : <nl> _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) <nl> <nl> # insert again and this time delete the whole row , check that it is gone <nl> - client . add ( ' key1 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> + client . add ( ' key2 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> assert rv2 . counter _ column . value = = d1 <nl> - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) <nl> + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) <nl> + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) <nl> <nl> def test _ incr _ decr _ standard _ remove ( self ) : <nl> _ set _ keyspace ( ' Keyspace1 ' ) <nl> @ @ - 1735 , 13 + 1732 , 13 @ @ class TestMutations ( ThriftTester ) : <nl> _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> <nl> # insert again and this time delete the whole row , check that it is gone <nl> - client . add ( ' key1 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> + client . add ( ' key2 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> assert rv2 . counter _ column . value = = d1 <nl> - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) <nl> + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> <nl> def test _ incr _ decr _ super _ remove ( self ) : <nl> _ set _ keyspace ( ' Keyspace1 ' ) <nl> @ @ - 1760 , 13 + 1757 , 13 @ @ class TestMutations ( ThriftTester ) : <nl> _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) <nl> <nl> # insert again and this time delete the whole row , check that it is gone <nl> - client . add ( ' key1 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> + client . add ( ' key2 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> assert rv2 . counter _ column . value = = d1 <nl> - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) <nl> + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) <nl> + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) <nl> <nl> def test _ incr _ decr _ standard _ batch _ add ( self ) : <nl> _ set _ keyspace ( ' Keyspace1 ' ) <nl> @ @ - 1809 , 21 + 1806 , 21 @ @ class TestMutations ( ThriftTester ) : <nl> _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> <nl> # insert again and this time delete the whole row , check that it is gone <nl> - update _ map = { ' key1 ' : { ' Counter1 ' : [ <nl> + update _ map = { ' key2 ' : { ' Counter1 ' : [ <nl> Mutation ( column _ or _ supercolumn = ColumnOrSuperColumn ( counter _ column = CounterColumn ( ' c1 ' , d1 ) ) ) , <nl> Mutation ( column _ or _ supercolumn = ColumnOrSuperColumn ( counter _ column = CounterColumn ( ' c1 ' , d2 ) ) ) , <nl> ] } } <nl> client . batch _ mutate ( update _ map , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) <nl> assert rv2 . counter _ column . value = = d1 + d2 <nl> <nl> - update _ map = { ' key1 ' : { ' Counter1 ' : [ <nl> + update _ map = { ' key2 ' : { ' Counter1 ' : [ <nl> Mutation ( deletion = Deletion ( ) ) , <nl> ] } } <nl> client . batch _ mutate ( update _ map , ConsistencyLevel . ONE ) <nl> time . sleep ( 5 ) <nl> - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) <nl> <nl> def test _ incr _ decr _ standard _ slice ( self ) : <nl> _ set _ keyspace ( ' Keyspace1 ' )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java b / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java <nl> index 22750be . . dc5dad0 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . ByteBuffer ; <nl> <nl> public class TimeUUIDSerializer extends UUIDSerializer <nl> { <nl> + public static final TimeUUIDSerializer instance = new TimeUUIDSerializer ( ) ; <nl> + <nl> @ Override <nl> public void validate ( ByteBuffer bytes ) throws MarshalException <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java <nl> index afb3913 . . 1039fb6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java <nl> @ @ - 145 , 7 + 145 , 7 @ @ public class CompositeTypeTest extends SchemaLoader <nl> } <nl> catch ( MarshalException e ) <nl> { <nl> - assert e . toString ( ) . contains ( " TimeUUID should be 16 or 0 bytes " ) ; <nl> + assert e . toString ( ) . contains ( " should be 16 or 0 bytes " ) ; <nl> } <nl> <nl> key = createCompositeKey ( " test1 " , UUID . randomUUID ( ) , 42 , false ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java <nl> index e959b5f . . f8e2fb6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java <nl> @ @ - 144 , 7 + 144 , 7 @ @ public class DynamicCompositeTypeTest extends SchemaLoader <nl> } <nl> catch ( MarshalException e ) <nl> { <nl> - assert e . toString ( ) . contains ( " TimeUUID should be 16 or 0 bytes " ) ; <nl> + assert e . toString ( ) . contains ( " should be 16 or 0 bytes " ) ; <nl> } <nl> <nl> key = createDynamicCompositeKey ( " test1 " , UUID . randomUUID ( ) , 42 , false ) ;

TEST DIFF:
diff - - git a / test / system / test _ thrift _ server . py b / test / system / test _ thrift _ server . py 
 index 7655958 . . 1594356 100644 
 - - - a / test / system / test _ thrift _ server . py 
 + + + b / test / system / test _ thrift _ server . py 
 @ @ - 24 , 7 + 24 , 6 @ @ from . import thrift _ client as client 
 
 from thrift . Thrift import TApplicationException 
 from ttypes import * 
 - from constants import VERSION 
 
 
 def _ i64 ( n ) : 
 @ @ - 1236 , 8 + 1235 , 6 @ @ class TestMutations ( ThriftTester ) : 
 assert cf0 . comparator _ type = = " org . apache . cassandra . db . marshal . BytesType " 
 
 def test _ describe ( self ) : 
 - server _ version = client . describe _ version ( ) 
 - assert server _ version = = VERSION , ( server _ version , VERSION ) 
 assert client . describe _ cluster _ name ( ) = = ' Test Cluster ' 
 
 def test _ describe _ ring ( self ) : 
 @ @ - 1685 , 13 + 1682 , 13 @ @ class TestMutations ( ThriftTester ) : 
 _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 
 # insert again and this time delete the whole row , check that it is gone 
 - client . add ( ' key1 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 + client . add ( ' key2 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 assert rv2 . counter _ column . value = = d1 
 - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) 
 + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 
 def test _ incr _ super _ remove ( self ) : 
 _ set _ keyspace ( ' Keyspace1 ' ) 
 @ @ - 1710 , 13 + 1707 , 13 @ @ class TestMutations ( ThriftTester ) : 
 _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) 
 
 # insert again and this time delete the whole row , check that it is gone 
 - client . add ( ' key1 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 + client . add ( ' key2 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 assert rv2 . counter _ column . value = = d1 
 - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) 
 + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) 
 + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) 
 
 def test _ incr _ decr _ standard _ remove ( self ) : 
 _ set _ keyspace ( ' Keyspace1 ' ) 
 @ @ - 1735 , 13 + 1732 , 13 @ @ class TestMutations ( ThriftTester ) : 
 _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 
 # insert again and this time delete the whole row , check that it is gone 
 - client . add ( ' key1 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 + client . add ( ' key2 ' , ColumnParent ( column _ family = ' Counter1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 assert rv2 . counter _ column . value = = d1 
 - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) 
 + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 
 def test _ incr _ decr _ super _ remove ( self ) : 
 _ set _ keyspace ( ' Keyspace1 ' ) 
 @ @ - 1760 , 13 + 1757 , 13 @ @ class TestMutations ( ThriftTester ) : 
 _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) 
 
 # insert again and this time delete the whole row , check that it is gone 
 - client . add ( ' key1 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 + client . add ( ' key2 ' , ColumnParent ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , CounterColumn ( ' c1 ' , d1 ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 assert rv2 . counter _ column . value = = d1 
 - client . remove _ counter ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) 
 + client . remove _ counter ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' ) , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) 
 + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' SuperCounter1 ' , super _ column = ' sc1 ' , column = ' c1 ' ) ) 
 
 def test _ incr _ decr _ standard _ batch _ add ( self ) : 
 _ set _ keyspace ( ' Keyspace1 ' ) 
 @ @ - 1809 , 21 + 1806 , 21 @ @ class TestMutations ( ThriftTester ) : 
 _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 
 # insert again and this time delete the whole row , check that it is gone 
 - update _ map = { ' key1 ' : { ' Counter1 ' : [ 
 + update _ map = { ' key2 ' : { ' Counter1 ' : [ 
 Mutation ( column _ or _ supercolumn = ColumnOrSuperColumn ( counter _ column = CounterColumn ( ' c1 ' , d1 ) ) ) , 
 Mutation ( column _ or _ supercolumn = ColumnOrSuperColumn ( counter _ column = CounterColumn ( ' c1 ' , d2 ) ) ) , 
 ] } } 
 client . batch _ mutate ( update _ map , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - rv2 = client . get ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 + rv2 = client . get ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) , ConsistencyLevel . ONE ) 
 assert rv2 . counter _ column . value = = d1 + d2 
 
 - update _ map = { ' key1 ' : { ' Counter1 ' : [ 
 + update _ map = { ' key2 ' : { ' Counter1 ' : [ 
 Mutation ( deletion = Deletion ( ) ) , 
 ] } } 
 client . batch _ mutate ( update _ map , ConsistencyLevel . ONE ) 
 time . sleep ( 5 ) 
 - _ assert _ no _ columnpath ( ' key1 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 + _ assert _ no _ columnpath ( ' key2 ' , ColumnPath ( column _ family = ' Counter1 ' , column = ' c1 ' ) ) 
 
 def test _ incr _ decr _ standard _ slice ( self ) : 
 _ set _ keyspace ( ' Keyspace1 ' )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java b / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java 
 index 22750be . . dc5dad0 100644 
 - - - a / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / TimeUUIDSerializer . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . ByteBuffer ; 
 
 public class TimeUUIDSerializer extends UUIDSerializer 
 { 
 + public static final TimeUUIDSerializer instance = new TimeUUIDSerializer ( ) ; 
 + 
 @ Override 
 public void validate ( ByteBuffer bytes ) throws MarshalException 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java 
 index afb3913 . . 1039fb6 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / CompositeTypeTest . java 
 @ @ - 145 , 7 + 145 , 7 @ @ public class CompositeTypeTest extends SchemaLoader 
 } 
 catch ( MarshalException e ) 
 { 
 - assert e . toString ( ) . contains ( " TimeUUID should be 16 or 0 bytes " ) ; 
 + assert e . toString ( ) . contains ( " should be 16 or 0 bytes " ) ; 
 } 
 
 key = createCompositeKey ( " test1 " , UUID . randomUUID ( ) , 42 , false ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java 
 index e959b5f . . f8e2fb6 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / DynamicCompositeTypeTest . java 
 @ @ - 144 , 7 + 144 , 7 @ @ public class DynamicCompositeTypeTest extends SchemaLoader 
 } 
 catch ( MarshalException e ) 
 { 
 - assert e . toString ( ) . contains ( " TimeUUID should be 16 or 0 bytes " ) ; 
 + assert e . toString ( ) . contains ( " should be 16 or 0 bytes " ) ; 
 } 
 
 key = createDynamicCompositeKey ( " test1 " , UUID . randomUUID ( ) , 42 , false ) ;
