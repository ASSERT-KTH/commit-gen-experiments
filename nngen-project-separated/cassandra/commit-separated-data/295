BLEU SCORE: 0.03515208856700363

TEST MSG: Allow to change logging levels based on components
GENERATED MSG: apply disk _ failure _ policy to bad disks on initial directory creation

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 845fced . . 3fd8ab0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Allow changing log levels via nodetool for related classes ( CASSANDRA - 12696 ) <nl> * Add stress profile yaml with LWT ( CASSANDRA - 7960 ) <nl> * Reduce memory copies and object creations when acting on ByteBufs ( CASSANDRA - 13789 ) <nl> * simplify mx4j configuration ( Cassandra - 13578 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java b / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java <nl> index 94e4e3b . . 8d9ad90 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java <nl> @ @ - 22 , 22 + 22 , 82 @ @ import io . airlift . airline . Arguments ; <nl> import io . airlift . airline . Command ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> + import com . google . common . collect . Lists ; <nl> + <nl> import org . apache . cassandra . tools . NodeProbe ; <nl> import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> <nl> - @ Command ( name = " setlogginglevel " , description = " Set the log level threshold for a given class . If both class and level are empty / null , it will reset to the initial configuration " ) <nl> + @ Command ( name = " setlogginglevel " , description = " Set the log level threshold for a given component or class . Will reset to the initial configuration if called with no parameters . " ) <nl> public class SetLoggingLevel extends NodeToolCmd <nl> { <nl> - @ Arguments ( usage = " < class > < level > " , description = " The class to change the level for and the log level threshold to set ( can be empty ) " ) <nl> + @ Arguments ( usage = " < component | class > < level > " , description = " The component or class to change the level for and the log level threshold to set . Will reset to initial level if omitted . " <nl> + + " Available components : bootstrap , compaction , repair , streaming , cql , ring " ) <nl> private List < String > args = new ArrayList < > ( ) ; <nl> <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> - String classQualifier = args . size ( ) > = 1 ? args . get ( 0 ) : EMPTY ; <nl> + String target = args . size ( ) > = 1 ? args . get ( 0 ) : EMPTY ; <nl> String level = args . size ( ) = = 2 ? args . get ( 1 ) : EMPTY ; <nl> - probe . setLoggingLevel ( classQualifier , level ) ; <nl> + <nl> + List < String > classQualifiers = Collections . singletonList ( target ) ; <nl> + if ( target . equals ( " bootstrap " ) ) <nl> + { <nl> + classQualifiers = Lists . newArrayList ( <nl> + " org . apache . cassandra . gms " , <nl> + " org . apache . cassandra . hints " , <nl> + " org . apache . cassandra . schema " , <nl> + " org . apache . cassandra . service . StorageService " , <nl> + " org . apache . cassandra . db . SystemKeyspace " , <nl> + " org . apache . cassandra . batchlog . BatchlogManager " , <nl> + " org . apache . cassandra . net . MessagingService " ) ; <nl> + } <nl> + else if ( target . equals ( " repair " ) ) <nl> + { <nl> + classQualifiers = Lists . newArrayList ( <nl> + " org . apache . cassandra . repair " , <nl> + " org . apache . cassandra . db . compaction . CompactionManager " , <nl> + " org . apache . cassandra . service . SnapshotVerbHandler " ) ; <nl> + } <nl> + else if ( target . equals ( " streaming " ) ) <nl> + { <nl> + classQualifiers = Lists . newArrayList ( <nl> + " org . apache . cassandra . streaming " , <nl> + " org . apache . cassandra . dht . RangeStreamer " ) ; <nl> + } <nl> + else if ( target . equals ( " compaction " ) ) <nl> + { <nl> + classQualifiers = Lists . newArrayList ( <nl> + " org . apache . cassandra . db . compaction " , <nl> + " org . apache . cassandra . db . ColumnFamilyStore " , <nl> + " org . apache . cassandra . io . sstable . IndexSummaryRedistribution " ) ; <nl> + } <nl> + else if ( target . equals ( " cql " ) ) <nl> + { <nl> + classQualifiers = Lists . newArrayList ( <nl> + " org . apache . cassandra . cql3 " , <nl> + " org . apache . cassandra . auth " , <nl> + " org . apache . cassandra . batchlog " , <nl> + " org . apache . cassandra . net . ResponseVerbHandler " , <nl> + " org . apache . cassandra . service . AbstractReadExecutor " , <nl> + " org . apache . cassandra . service . AbstractWriteResponseHandler " , <nl> + " org . apache . cassandra . service . paxos " , <nl> + " org . apache . cassandra . service . ReadCallback " , <nl> + " org . apache . cassandra . service . ResponseResolver " ) ; <nl> + } <nl> + else if ( target . equals ( " ring " ) ) <nl> + { <nl> + classQualifiers = Lists . newArrayList ( <nl> + " org . apache . cassandra . gms " , <nl> + " org . apache . cassandra . service . PendingRangeCalculatorService " , <nl> + " org . apache . cassandra . service . LoadBroadcaster " , <nl> + " org . apache . cassandra . transport . Server " ) ; <nl> + } <nl> + <nl> + for ( String classQualifier : classQualifiers ) <nl> + probe . setLoggingLevel ( classQualifier , level ) ; <nl> } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 43fe188 . . e6b1b95 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 1 . 8 <nl> + * fix temporarily missing schema after upgrade from pre - 1 . 1 . 5 ( CASSANDRA - 5061 ) <nl> * reduce log spam from invalid counter shards ( CASSANDRA - 5026 ) <nl> * Improve schema propagation performance ( CASSANDRA - 5025 ) <nl> * Fall back to old describe _ splits if d _ s _ ex is not available ( CASSANDRA - 4803 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index 4d6b574 . . d564eaf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 244 , 6 + 244 , 19 @ @ public class DefsTable <nl> <nl> mutation . apply ( ) ; <nl> } <nl> + / / flush immediately because we read schema before replaying the commitlog <nl> + try <nl> + { <nl> + cfs . forceBlockingFlush ( ) ; <nl> + } <nl> + catch ( ExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( " Could not flush after fixing schema timestamps " , e ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> } <nl> <nl> private static boolean invalidSchemaRow ( Row row )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 845fced . . 3fd8ab0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Allow changing log levels via nodetool for related classes ( CASSANDRA - 12696 ) 
 * Add stress profile yaml with LWT ( CASSANDRA - 7960 ) 
 * Reduce memory copies and object creations when acting on ByteBufs ( CASSANDRA - 13789 ) 
 * simplify mx4j configuration ( Cassandra - 13578 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java b / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java 
 index 94e4e3b . . 8d9ad90 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / SetLoggingLevel . java 
 @ @ - 22 , 22 + 22 , 82 @ @ import io . airlift . airline . Arguments ; 
 import io . airlift . airline . Command ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 
 + import com . google . common . collect . Lists ; 
 + 
 import org . apache . cassandra . tools . NodeProbe ; 
 import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 
 - @ Command ( name = " setlogginglevel " , description = " Set the log level threshold for a given class . If both class and level are empty / null , it will reset to the initial configuration " ) 
 + @ Command ( name = " setlogginglevel " , description = " Set the log level threshold for a given component or class . Will reset to the initial configuration if called with no parameters . " ) 
 public class SetLoggingLevel extends NodeToolCmd 
 { 
 - @ Arguments ( usage = " < class > < level > " , description = " The class to change the level for and the log level threshold to set ( can be empty ) " ) 
 + @ Arguments ( usage = " < component | class > < level > " , description = " The component or class to change the level for and the log level threshold to set . Will reset to initial level if omitted . " 
 + + " Available components : bootstrap , compaction , repair , streaming , cql , ring " ) 
 private List < String > args = new ArrayList < > ( ) ; 
 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 - String classQualifier = args . size ( ) > = 1 ? args . get ( 0 ) : EMPTY ; 
 + String target = args . size ( ) > = 1 ? args . get ( 0 ) : EMPTY ; 
 String level = args . size ( ) = = 2 ? args . get ( 1 ) : EMPTY ; 
 - probe . setLoggingLevel ( classQualifier , level ) ; 
 + 
 + List < String > classQualifiers = Collections . singletonList ( target ) ; 
 + if ( target . equals ( " bootstrap " ) ) 
 + { 
 + classQualifiers = Lists . newArrayList ( 
 + " org . apache . cassandra . gms " , 
 + " org . apache . cassandra . hints " , 
 + " org . apache . cassandra . schema " , 
 + " org . apache . cassandra . service . StorageService " , 
 + " org . apache . cassandra . db . SystemKeyspace " , 
 + " org . apache . cassandra . batchlog . BatchlogManager " , 
 + " org . apache . cassandra . net . MessagingService " ) ; 
 + } 
 + else if ( target . equals ( " repair " ) ) 
 + { 
 + classQualifiers = Lists . newArrayList ( 
 + " org . apache . cassandra . repair " , 
 + " org . apache . cassandra . db . compaction . CompactionManager " , 
 + " org . apache . cassandra . service . SnapshotVerbHandler " ) ; 
 + } 
 + else if ( target . equals ( " streaming " ) ) 
 + { 
 + classQualifiers = Lists . newArrayList ( 
 + " org . apache . cassandra . streaming " , 
 + " org . apache . cassandra . dht . RangeStreamer " ) ; 
 + } 
 + else if ( target . equals ( " compaction " ) ) 
 + { 
 + classQualifiers = Lists . newArrayList ( 
 + " org . apache . cassandra . db . compaction " , 
 + " org . apache . cassandra . db . ColumnFamilyStore " , 
 + " org . apache . cassandra . io . sstable . IndexSummaryRedistribution " ) ; 
 + } 
 + else if ( target . equals ( " cql " ) ) 
 + { 
 + classQualifiers = Lists . newArrayList ( 
 + " org . apache . cassandra . cql3 " , 
 + " org . apache . cassandra . auth " , 
 + " org . apache . cassandra . batchlog " , 
 + " org . apache . cassandra . net . ResponseVerbHandler " , 
 + " org . apache . cassandra . service . AbstractReadExecutor " , 
 + " org . apache . cassandra . service . AbstractWriteResponseHandler " , 
 + " org . apache . cassandra . service . paxos " , 
 + " org . apache . cassandra . service . ReadCallback " , 
 + " org . apache . cassandra . service . ResponseResolver " ) ; 
 + } 
 + else if ( target . equals ( " ring " ) ) 
 + { 
 + classQualifiers = Lists . newArrayList ( 
 + " org . apache . cassandra . gms " , 
 + " org . apache . cassandra . service . PendingRangeCalculatorService " , 
 + " org . apache . cassandra . service . LoadBroadcaster " , 
 + " org . apache . cassandra . transport . Server " ) ; 
 + } 
 + 
 + for ( String classQualifier : classQualifiers ) 
 + probe . setLoggingLevel ( classQualifier , level ) ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 43fe188 . . e6b1b95 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 1 . 8 
 + * fix temporarily missing schema after upgrade from pre - 1 . 1 . 5 ( CASSANDRA - 5061 ) 
 * reduce log spam from invalid counter shards ( CASSANDRA - 5026 ) 
 * Improve schema propagation performance ( CASSANDRA - 5025 ) 
 * Fall back to old describe _ splits if d _ s _ ex is not available ( CASSANDRA - 4803 ) 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index 4d6b574 . . d564eaf 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 244 , 6 + 244 , 19 @ @ public class DefsTable 
 
 mutation . apply ( ) ; 
 } 
 + / / flush immediately because we read schema before replaying the commitlog 
 + try 
 + { 
 + cfs . forceBlockingFlush ( ) ; 
 + } 
 + catch ( ExecutionException e ) 
 + { 
 + throw new RuntimeException ( " Could not flush after fixing schema timestamps " , e ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 } 
 
 private static boolean invalidSchemaRow ( Row row )
