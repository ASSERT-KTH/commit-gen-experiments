BLEU SCORE: 0.020980574531482755

TEST MSG: Remove ability to change num _ tokens once set .
GENERATED MSG: migration support for virtual nodes

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 8a1b3dc . . 97ae908 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 821 , 49 + 821 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> else <nl> { <nl> - / / if we were already bootstrapped with 1 token but num _ tokens is set higher in the config , <nl> - / / then we need to migrate to multi - token <nl> - if ( bootstrapTokens . size ( ) = = 1 & & DatabaseDescriptor . getNumTokens ( ) > 1 ) <nl> - { <nl> - / / wait for ring info <nl> - logger . info ( " Sleeping for ring delay ( " + delay + " ms ) " ) ; <nl> - Uninterruptibles . sleepUninterruptibly ( delay , TimeUnit . MILLISECONDS ) ; <nl> - logger . info ( " Calculating new tokens " ) ; <nl> - / / calculate num _ tokens tokens evenly spaced in the range ( left , right ] <nl> - Token right = bootstrapTokens . iterator ( ) . next ( ) ; <nl> - TokenMetadata clone = tokenMetadata . cloneOnlyTokenMap ( ) ; <nl> - clone . updateNormalToken ( right , FBUtilities . getBroadcastAddress ( ) ) ; <nl> - Token left = clone . getPredecessor ( right ) ; <nl> - <nl> - / / get ( num _ tokens - 1 ) tokens spaced evenly , and the last token will be our current token ( right ) <nl> - for ( int tok = 1 ; tok < DatabaseDescriptor . getNumTokens ( ) ; + + tok ) <nl> - { <nl> - Token l = left ; <nl> - Token r = right ; <nl> - / / iteratively calculate the location of the token using midpoint <nl> - / / num iterations is number of bits in IEE754 mantissa ( including implicit leading 1 ) <nl> - / / we stop early for terminating fractions <nl> - / / TODO : alternatively we could add an interpolate ( ) method to IPartitioner <nl> - double frac = ( double ) tok / ( double ) DatabaseDescriptor . getNumTokens ( ) ; <nl> - Token midpoint = getPartitioner ( ) . midpoint ( l , r ) ; <nl> - for ( int i = 0 ; i < 53 ; + + i ) <nl> - { <nl> - frac * = 2 ; <nl> - if ( frac = = 1 . 0 ) / * not a bug * / <nl> - break ; <nl> - else if ( frac > 1 . 0 ) <nl> - { <nl> - l = midpoint ; <nl> - frac - = 1 . 0 ; <nl> - } <nl> - else <nl> - r = midpoint ; <nl> - midpoint = getPartitioner ( ) . midpoint ( l , r ) ; <nl> - } <nl> - bootstrapTokens . add ( midpoint ) ; <nl> - } <nl> - logger . info ( " Split previous range ( " + left + " , " + right + " ] into " + bootstrapTokens ) ; <nl> - } <nl> + if ( bootstrapTokens . size ( ) ! = DatabaseDescriptor . getNumTokens ( ) ) <nl> + throw new ConfigurationException ( " Cannot change the number of tokens from " + bootstrapTokens . size ( ) + " to " + DatabaseDescriptor . getNumTokens ( ) ) ; <nl> else <nl> logger . info ( " Using saved tokens " + bootstrapTokens ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 67b5410 . . b2a9faf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 14 , 6 + 14 , 7 @ @ <nl> * change nanoTime ( ) to currentTimeInMillis ( ) in schema related code ( CASSANDRA - 4432 ) <nl> * add a token generation tool ( CASSANDRA - 3709 ) <nl> * Fix LCS bug with sstable containing only 1 row ( CASSANDRA - 4411 ) <nl> + * fix " Can ' t Modify Index Name " problem on CF update ( CASSANDRA - 4439 ) <nl> Merged from 1 . 0 : <nl> * allow dropping columns shadowed by not - yet - expired supercolumn or row <nl> tombstones in PrecompactedRow ( CASSANDRA - 4396 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index c6411af . . 5b3f227 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 862 , 6 + 862 , 28 @ @ public final class CFMetaData <nl> * / <nl> public void addDefaultIndexNames ( ) throws ConfigurationException <nl> { <nl> + / / if this is ColumnFamily update we need to add previously defined index names to the existing columns first <nl> + Integer cfId = Schema . instance . getId ( ksName , cfName ) ; <nl> + if ( cfId ! = null ) <nl> + { <nl> + CFMetaData cfm = Schema . instance . getCFMetaData ( cfId ) ; <nl> + <nl> + for ( Map . Entry < ByteBuffer , ColumnDefinition > entry : column _ metadata . entrySet ( ) ) <nl> + { <nl> + ColumnDefinition newDef = entry . getValue ( ) ; <nl> + <nl> + if ( ! cfm . column _ metadata . containsKey ( entry . getKey ( ) ) | | newDef . getIndexType ( ) = = null ) <nl> + continue ; <nl> + <nl> + String oldIndexName = cfm . column _ metadata . get ( entry . getKey ( ) ) . getIndexName ( ) ; <nl> + <nl> + if ( newDef . getIndexName ( ) ! = null & & ! oldIndexName . equals ( newDef . getIndexName ( ) ) ) <nl> + throw new ConfigurationException ( " Can ' t modify index name : was ' " + oldIndexName + " ' changed to ' " + newDef . getIndexName ( ) + " ' . " ) ; <nl> + <nl> + newDef . setIndexName ( oldIndexName ) ; <nl> + } <nl> + } <nl> + <nl> Set < String > existingNames = existingIndexNames ( null ) ; <nl> for ( ColumnDefinition column : column _ metadata . values ( ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 756dc7f . . c13cf01 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 39 , 6 + 39 , 14 @ @ public class CliTest extends SchemaLoader <nl> / / please add new statements here so they could be auto - runned by this test . <nl> private String [ ] statements = { <nl> " use TestKeySpace ; " , <nl> + " create column family SecondaryIndicesWithoutIdxName " + <nl> + " with comparator = UTF8Type " + <nl> + " and default _ validation _ class = UTF8Type " + <nl> + " and column _ metadata = [ { column _ name : profileId , validation _ class : UTF8Type , index _ type : KEYS } ] ; " , <nl> + " update column family SecondaryIndicesWithoutIdxName " + <nl> + " with column _ metadata = " + <nl> + " [ { column _ name : profileId , validation _ class : UTF8Type , index _ type : KEYS } , " + <nl> + " { column _ name : postedDate , validation _ class : LongType } ] ; " , <nl> " create column family 123 with comparator = UTF8Type and column _ metadata = [ { column _ name : world , validation _ class : IntegerType , index _ type : 0 , index _ name : IdxName } , " + <nl> " { column _ name : world2 , validation _ class : LongType , index _ type : KEYS , index _ name : LongIdxName } , " + <nl> " { column _ name : 617070 , validation _ class : UTF8Type , index _ type : KEYS } , " +

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 8a1b3dc . . 97ae908 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 821 , 49 + 821 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 else 
 { 
 - / / if we were already bootstrapped with 1 token but num _ tokens is set higher in the config , 
 - / / then we need to migrate to multi - token 
 - if ( bootstrapTokens . size ( ) = = 1 & & DatabaseDescriptor . getNumTokens ( ) > 1 ) 
 - { 
 - / / wait for ring info 
 - logger . info ( " Sleeping for ring delay ( " + delay + " ms ) " ) ; 
 - Uninterruptibles . sleepUninterruptibly ( delay , TimeUnit . MILLISECONDS ) ; 
 - logger . info ( " Calculating new tokens " ) ; 
 - / / calculate num _ tokens tokens evenly spaced in the range ( left , right ] 
 - Token right = bootstrapTokens . iterator ( ) . next ( ) ; 
 - TokenMetadata clone = tokenMetadata . cloneOnlyTokenMap ( ) ; 
 - clone . updateNormalToken ( right , FBUtilities . getBroadcastAddress ( ) ) ; 
 - Token left = clone . getPredecessor ( right ) ; 
 - 
 - / / get ( num _ tokens - 1 ) tokens spaced evenly , and the last token will be our current token ( right ) 
 - for ( int tok = 1 ; tok < DatabaseDescriptor . getNumTokens ( ) ; + + tok ) 
 - { 
 - Token l = left ; 
 - Token r = right ; 
 - / / iteratively calculate the location of the token using midpoint 
 - / / num iterations is number of bits in IEE754 mantissa ( including implicit leading 1 ) 
 - / / we stop early for terminating fractions 
 - / / TODO : alternatively we could add an interpolate ( ) method to IPartitioner 
 - double frac = ( double ) tok / ( double ) DatabaseDescriptor . getNumTokens ( ) ; 
 - Token midpoint = getPartitioner ( ) . midpoint ( l , r ) ; 
 - for ( int i = 0 ; i < 53 ; + + i ) 
 - { 
 - frac * = 2 ; 
 - if ( frac = = 1 . 0 ) / * not a bug * / 
 - break ; 
 - else if ( frac > 1 . 0 ) 
 - { 
 - l = midpoint ; 
 - frac - = 1 . 0 ; 
 - } 
 - else 
 - r = midpoint ; 
 - midpoint = getPartitioner ( ) . midpoint ( l , r ) ; 
 - } 
 - bootstrapTokens . add ( midpoint ) ; 
 - } 
 - logger . info ( " Split previous range ( " + left + " , " + right + " ] into " + bootstrapTokens ) ; 
 - } 
 + if ( bootstrapTokens . size ( ) ! = DatabaseDescriptor . getNumTokens ( ) ) 
 + throw new ConfigurationException ( " Cannot change the number of tokens from " + bootstrapTokens . size ( ) + " to " + DatabaseDescriptor . getNumTokens ( ) ) ; 
 else 
 logger . info ( " Using saved tokens " + bootstrapTokens ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 67b5410 . . b2a9faf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 14 , 6 + 14 , 7 @ @ 
 * change nanoTime ( ) to currentTimeInMillis ( ) in schema related code ( CASSANDRA - 4432 ) 
 * add a token generation tool ( CASSANDRA - 3709 ) 
 * Fix LCS bug with sstable containing only 1 row ( CASSANDRA - 4411 ) 
 + * fix " Can ' t Modify Index Name " problem on CF update ( CASSANDRA - 4439 ) 
 Merged from 1 . 0 : 
 * allow dropping columns shadowed by not - yet - expired supercolumn or row 
 tombstones in PrecompactedRow ( CASSANDRA - 4396 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index c6411af . . 5b3f227 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 862 , 6 + 862 , 28 @ @ public final class CFMetaData 
 * / 
 public void addDefaultIndexNames ( ) throws ConfigurationException 
 { 
 + / / if this is ColumnFamily update we need to add previously defined index names to the existing columns first 
 + Integer cfId = Schema . instance . getId ( ksName , cfName ) ; 
 + if ( cfId ! = null ) 
 + { 
 + CFMetaData cfm = Schema . instance . getCFMetaData ( cfId ) ; 
 + 
 + for ( Map . Entry < ByteBuffer , ColumnDefinition > entry : column _ metadata . entrySet ( ) ) 
 + { 
 + ColumnDefinition newDef = entry . getValue ( ) ; 
 + 
 + if ( ! cfm . column _ metadata . containsKey ( entry . getKey ( ) ) | | newDef . getIndexType ( ) = = null ) 
 + continue ; 
 + 
 + String oldIndexName = cfm . column _ metadata . get ( entry . getKey ( ) ) . getIndexName ( ) ; 
 + 
 + if ( newDef . getIndexName ( ) ! = null & & ! oldIndexName . equals ( newDef . getIndexName ( ) ) ) 
 + throw new ConfigurationException ( " Can ' t modify index name : was ' " + oldIndexName + " ' changed to ' " + newDef . getIndexName ( ) + " ' . " ) ; 
 + 
 + newDef . setIndexName ( oldIndexName ) ; 
 + } 
 + } 
 + 
 Set < String > existingNames = existingIndexNames ( null ) ; 
 for ( ColumnDefinition column : column _ metadata . values ( ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 756dc7f . . c13cf01 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 39 , 6 + 39 , 14 @ @ public class CliTest extends SchemaLoader 
 / / please add new statements here so they could be auto - runned by this test . 
 private String [ ] statements = { 
 " use TestKeySpace ; " , 
 + " create column family SecondaryIndicesWithoutIdxName " + 
 + " with comparator = UTF8Type " + 
 + " and default _ validation _ class = UTF8Type " + 
 + " and column _ metadata = [ { column _ name : profileId , validation _ class : UTF8Type , index _ type : KEYS } ] ; " , 
 + " update column family SecondaryIndicesWithoutIdxName " + 
 + " with column _ metadata = " + 
 + " [ { column _ name : profileId , validation _ class : UTF8Type , index _ type : KEYS } , " + 
 + " { column _ name : postedDate , validation _ class : LongType } ] ; " , 
 " create column family 123 with comparator = UTF8Type and column _ metadata = [ { column _ name : world , validation _ class : IntegerType , index _ type : 0 , index _ name : IdxName } , " + 
 " { column _ name : world2 , validation _ class : LongType , index _ type : KEYS , index _ name : LongIdxName } , " + 
 " { column _ name : 617070 , validation _ class : UTF8Type , index _ type : KEYS } , " +
