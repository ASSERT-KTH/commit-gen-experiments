BLEU SCORE: 0.021116374942992202

TEST MSG: Backport ImmediateFlusher to cassandra - 3 . 0 and cassandra - 3 . 11
GENERATED MSG: Fixes to make BinaryMemtable useful . Highlights are configurable threads for [ binary ] memtable flushing and flushAndShutdown JMX / nodeprobe directive .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d3d7158 . . e349674 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> * Fix corrupted static collection deletions in 3 . 0 < - > 2 . { 1 , 2 } messages ( CASSANDRA - 14568 ) <nl> * Handle failures in parallelAllSSTableOperation ( cleanup / upgradesstables / etc ) ( CASSANDRA - 14657 ) <nl> * Improve TokenMetaData cache populating performance avoid long locking ( CASSANDRA - 14660 ) <nl> + * Backport : Flush netty client messages immediately ( not by default ) ( CASSANDRA - 13651 ) <nl> * Fix static column order for SELECT * wildcard queries ( CASSANDRA - 14638 ) <nl> * sstableloader should use discovered broadcast address to connect intra - cluster ( CASSANDRA - 14522 ) <nl> * Fix reading columns with non - UTF names from schema ( CASSANDRA - 14468 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index ef7b034 . . 2e6f363 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 1003 , 3 + 1003 , 8 @ @ windows _ timer _ interval : 1 <nl> # An interval of 0 disables any wait time , which is the behavior of former Cassandra versions . <nl> # <nl> # otc _ backlog _ expiration _ interval _ ms : 200 <nl> + <nl> + # Define use of legacy delayed flusher for replies to TCP connections . This will increase latency , but might be beneficial for <nl> + # legacy use - cases where only a single connection is used for each Cassandra node . Default is false . <nl> + # native _ transport _ flush _ in _ batches _ legacy : false <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 64d41bb . . 6d56c74 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 149 , 6 + 149 , 7 @ @ public class Config <nl> public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; <nl> public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> public volatile Long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; <nl> + public boolean native _ transport _ flush _ in _ batches _ legacy = false ; <nl> <nl> @ Deprecated <nl> public Integer thrift _ max _ message _ length _ in _ mb = 16 ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index efc71ef . . 0fd785a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1499 , 6 + 1499 , 11 @ @ public class DatabaseDescriptor <nl> conf . native _ transport _ max _ concurrent _ connections _ per _ ip = native _ transport _ max _ concurrent _ connections _ per _ ip ; <nl> } <nl> <nl> + public static boolean useNativeTransportLegacyFlusher ( ) <nl> + { <nl> + return conf . native _ transport _ flush _ in _ batches _ legacy ; <nl> + } <nl> + <nl> public static double getCommitLogSyncBatchWindow ( ) <nl> { <nl> return conf . commitlog _ sync _ batch _ window _ in _ ms ; <nl> @ @ - 2077 , 5 + 2082 , 4 @ @ public class DatabaseDescriptor <nl> { <nl> return conf . gc _ warn _ threshold _ in _ ms ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java <nl> index 91ece5c . . 0851b19 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Message . java <nl> + + + b / src / java / org / apache / cassandra / transport / Message . java <nl> @ @ - 420 , 26 + 420 , 38 @ @ public abstract class Message <nl> } <nl> } <nl> <nl> - private static final class Flusher implements Runnable <nl> + private static abstract class Flusher implements Runnable <nl> { <nl> final EventLoop eventLoop ; <nl> final ConcurrentLinkedQueue < FlushItem > queued = new ConcurrentLinkedQueue < > ( ) ; <nl> - final AtomicBoolean running = new AtomicBoolean ( false ) ; <nl> + final AtomicBoolean scheduled = new AtomicBoolean ( false ) ; <nl> final HashSet < ChannelHandlerContext > channels = new HashSet < > ( ) ; <nl> final List < FlushItem > flushed = new ArrayList < > ( ) ; <nl> - int runsSinceFlush = 0 ; <nl> - int runsWithNoWork = 0 ; <nl> - private Flusher ( EventLoop eventLoop ) <nl> - { <nl> - this . eventLoop = eventLoop ; <nl> - } <nl> + <nl> void start ( ) <nl> { <nl> - if ( ! running . get ( ) & & running . compareAndSet ( false , true ) ) <nl> + if ( ! scheduled . get ( ) & & scheduled . compareAndSet ( false , true ) ) <nl> { <nl> this . eventLoop . execute ( this ) ; <nl> } <nl> } <nl> + <nl> + public Flusher ( EventLoop eventLoop ) <nl> + { <nl> + this . eventLoop = eventLoop ; <nl> + } <nl> + } <nl> + <nl> + private static final class LegacyFlusher extends Flusher <nl> + { <nl> + int runsSinceFlush = 0 ; <nl> + int runsWithNoWork = 0 ; <nl> + <nl> + private LegacyFlusher ( EventLoop eventLoop ) <nl> + { <nl> + super ( eventLoop ) ; <nl> + } <nl> + <nl> public void run ( ) <nl> { <nl> <nl> @ @ - 476 , 8 + 488 , 8 @ @ public abstract class Message <nl> / / either reschedule or cancel <nl> if ( + + runsWithNoWork > 5 ) <nl> { <nl> - running . set ( false ) ; <nl> - if ( queued . isEmpty ( ) | | ! running . compareAndSet ( false , true ) ) <nl> + scheduled . set ( false ) ; <nl> + if ( queued . isEmpty ( ) | | ! scheduled . compareAndSet ( false , true ) ) <nl> return ; <nl> } <nl> } <nl> @ @ - 486 , 11 + 498 , 48 @ @ public abstract class Message <nl> } <nl> } <nl> <nl> + private static final class ImmediateFlusher extends Flusher <nl> + { <nl> + private ImmediateFlusher ( EventLoop eventLoop ) <nl> + { <nl> + super ( eventLoop ) ; <nl> + } <nl> + <nl> + public void run ( ) <nl> + { <nl> + boolean doneWork = false ; <nl> + FlushItem flush ; <nl> + scheduled . set ( false ) ; <nl> + <nl> + while ( null ! = ( flush = queued . poll ( ) ) ) <nl> + { <nl> + channels . add ( flush . ctx ) ; <nl> + flush . ctx . write ( flush . response , flush . ctx . voidPromise ( ) ) ; <nl> + flushed . add ( flush ) ; <nl> + doneWork = true ; <nl> + } <nl> + <nl> + if ( doneWork ) <nl> + { <nl> + for ( ChannelHandlerContext channel : channels ) <nl> + channel . flush ( ) ; <nl> + for ( FlushItem item : flushed ) <nl> + item . sourceFrame . release ( ) ; <nl> + <nl> + channels . clear ( ) ; <nl> + flushed . clear ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> private static final ConcurrentMap < EventLoop , Flusher > flusherLookup = new ConcurrentHashMap < > ( ) ; <nl> <nl> - public Dispatcher ( ) <nl> + private final boolean useLegacyFlusher ; <nl> + <nl> + public Dispatcher ( boolean useLegacyFlusher ) <nl> { <nl> super ( false ) ; <nl> + this . useLegacyFlusher = useLegacyFlusher ; <nl> } <nl> <nl> @ Override <nl> @ @ - 538 , 7 + 587 , 8 @ @ public abstract class Message <nl> Flusher flusher = flusherLookup . get ( loop ) ; <nl> if ( flusher = = null ) <nl> { <nl> - Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = new Flusher ( loop ) ) ; <nl> + Flusher created = useLegacyFlusher ? new LegacyFlusher ( loop ) : new ImmediateFlusher ( loop ) ; <nl> + Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = created ) ; <nl> if ( alt ! = null ) <nl> flusher = alt ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 7df194d . . 8c781db 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 295 , 7 + 295 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> private static final Frame . Compressor frameCompressor = new Frame . Compressor ( ) ; <nl> private static final Frame . Encoder frameEncoder = new Frame . Encoder ( ) ; <nl> private static final Message . ExceptionHandler exceptionHandler = new Message . ExceptionHandler ( ) ; <nl> - private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( ) ; <nl> + private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( DatabaseDescriptor . useNativeTransportLegacyFlusher ( ) ) ; <nl> private static final ConnectionLimitHandler connectionLimitHandler = new ConnectionLimitHandler ( ) ; <nl> <nl> private final Server server ;
NEAREST DIFF (one line): diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml <nl> index 8aaeeb6 . . 25d2901 100644 <nl> - - - a / conf / storage - conf . xml <nl> + + + b / conf / storage - conf . xml <nl> @ @ - 308 , 4 + 308 , 19 @ @ <nl> ~ ten days . <nl> - - > <nl> < GCGraceSeconds > 864000 < / GCGraceSeconds > <nl> + <nl> + < ! - - <nl> + ~ Number of threads to run when flushing memtables to disk . Set this to <nl> + ~ the number of disks you physically have in your machine allocated for DataDirectory * 2 . <nl> + ~ If you are planning to use the Binary Memtable , its recommended to increase the max threads <nl> + ~ to maintain a higher quality of service while under load when normal memtables are flushing to disk . <nl> + - - > <nl> + < FlushMinThreads > 1 < / FlushMinThreads > <nl> + < FlushMaxThreads > 1 < / FlushMaxThreads > <nl> + <nl> + < ! - - <nl> + ~ The threshold size in megabytes the binary memtable must grow to , before it ' s submitted for flushing to disk . <nl> + - - > <nl> + < BinaryMemtableSizeInMB > 256 < / BinaryMemtableSizeInMB > <nl> + <nl> < / Storage > <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 9016676 . . e86b134 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 74 , 6 + 74 , 9 @ @ public class DatabaseDescriptor <nl> private static int slicedReadBufferSizeInKB _ = 64 ; <nl> private static List < String > tables _ = new ArrayList < String > ( ) ; <nl> private static Set < String > applicationColumnFamilies _ = new HashSet < String > ( ) ; <nl> + private static int flushMinThreads _ = 1 ; <nl> + private static int flushMaxThreads _ = 1 ; <nl> + private static int bmtThreshold _ = 256 ; <nl> <nl> / / Default descriptive names for introspection . The user can override <nl> / / these choices in the config file . These are not case sensitive . <nl> @ @ - 271 , 6 + 274 , 24 @ @ public class DatabaseDescriptor <nl> slicedReadBufferSizeInKB _ = Integer . parseInt ( rawSlicedBuffer ) ; <nl> } <nl> <nl> + String rawflushMinThreads = xmlUtils . getNodeValue ( " / Storage / FlushMinThreads " ) ; <nl> + if ( rawflushMinThreads ! = null ) <nl> + { <nl> + flushMinThreads _ = Integer . parseInt ( rawflushMinThreads ) ; <nl> + } <nl> + <nl> + String rawflushMaxThreads = xmlUtils . getNodeValue ( " / Storage / FlushMaxThreads " ) ; <nl> + if ( rawflushMaxThreads ! = null ) <nl> + { <nl> + flushMaxThreads _ = Integer . parseInt ( rawflushMaxThreads ) ; <nl> + } <nl> + <nl> + String bmtThreshold = xmlUtils . getNodeValue ( " / Storage / BinaryMemtableSizeInMB " ) ; <nl> + if ( bmtThreshold ! = null ) <nl> + { <nl> + bmtThreshold _ = Integer . parseInt ( bmtThreshold ) ; <nl> + } <nl> + <nl> / * TCP port on which the storage system listens * / <nl> String port = xmlUtils . getNodeValue ( " / Storage / StoragePort " ) ; <nl> if ( port ! = null ) <nl> @ @ - 999 , 4 + 1020 , 19 @ @ public class DatabaseDescriptor <nl> { <nl> return slicedReadBufferSizeInKB _ ; <nl> } <nl> + <nl> + public static int getFlushMinThreads ( ) <nl> + { <nl> + return flushMinThreads _ ; <nl> + } <nl> + <nl> + public static int getFlushMaxThreads ( ) <nl> + { <nl> + return flushMaxThreads _ ; <nl> + } <nl> + <nl> + public static int getBMTThreshold ( ) <nl> + { <nl> + return bmtThreshold _ ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> index 2cd439a . . 4530e8b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> @ @ - 34 , 11 + 34 , 13 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> import org . apache . log4j . Logger ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> + import java . util . * ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> <nl> public class BinaryMemtable <nl> { <nl> private static Logger logger _ = Logger . getLogger ( Memtable . class ) ; <nl> - private int threshold _ = 512 * 1024 * 1024 ; <nl> + private int threshold _ = DatabaseDescriptor . getBMTThreshold ( ) * 1024 * 1024 ; <nl> private AtomicInteger currentSize _ = new AtomicInteger ( 0 ) ; <nl> <nl> / * Table and ColumnFamily name are used to determine the ColumnFamilyStore * / <nl> @ @ - 138 , 10 + 140 , 31 @ @ public class BinaryMemtable <nl> * Use the SSTable to write the contents of the TreeMap <nl> * to disk . <nl> * / <nl> + <nl> + String path ; <nl> + SSTableWriter writer ; <nl> ColumnFamilyStore cfStore = Table . open ( table _ ) . getColumnFamilyStore ( cfName _ ) ; <nl> List < String > keys = new ArrayList < String > ( columnFamilies _ . keySet ( ) ) ; <nl> - SSTableWriter writer = new SSTableWriter ( cfStore . getTempSSTablePath ( ) , keys . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> - Collections . sort ( keys ) ; <nl> + / * <nl> + Adding a lock here so data directories are evenly used . By default currentIndex <nl> + is incremented , not an AtomicInteger . Let ' s fix this ! <nl> + * / <nl> + lock _ . lock ( ) ; <nl> + try <nl> + { <nl> + path = cfStore . getTempSSTablePath ( ) ; <nl> + writer = new SSTableWriter ( path , keys . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock _ . unlock ( ) ; <nl> + } <nl> + <nl> + final IPartitioner partitioner = StorageService . getPartitioner ( ) ; <nl> + final Comparator < String > dc = partitioner . getDecoratedKeyComparator ( ) ; <nl> + Collections . sort ( keys , dc ) ; <nl> + <nl> + <nl> / * Use this BloomFilter to decide if a key exists in a SSTable * / <nl> for ( String key : keys ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index b08cf6b . . af6e247 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . * ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . ThreadFactoryImpl ; <nl> import org . apache . cassandra . db . filter . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> <nl> @ @ - 55 , 8 + 56 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> private static final int BUFSIZE = 128 * 1024 * 1024 ; <nl> <nl> private static NonBlockingHashMap < String , Set < Memtable > > memtablesPendingFlush = new NonBlockingHashMap < String , Set < Memtable > > ( ) ; <nl> - private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - FLUSHER - POOL " ) ; <nl> - <nl> + private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( DatabaseDescriptor . getFlushMinThreads ( ) , DatabaseDescriptor . getFlushMaxThreads ( ) , Integer . MAX _ VALUE , TimeUnit . SECONDS , new LinkedBlockingQueue < Runnable > ( ) , new ThreadFactoryImpl ( " MEMTABLE - FLUSHER - POOL " ) ) ; <nl> + <nl> private final String table _ ; <nl> public final String columnFamily _ ; <nl> private final boolean isSuper _ ; <nl> @ @ - 457 , 7 + 458 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> assert oldMemtable . isFlushed ( ) | | oldMemtable . isClean ( ) ; <nl> } <nl> <nl> - void forceFlushBinary ( ) <nl> + public void forceFlushBinary ( ) <nl> { <nl> submitFlush ( binaryMemtable _ . get ( ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 54389e5 . . 04b28fb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 642 , 11 + 642 , 11 @ @ public class Table <nl> for ( ColumnFamily columnFamily : row . getColumnFamilies ( ) ) <nl> { <nl> Collection < IColumn > columns = columnFamily . getSortedColumns ( ) ; <nl> - for ( IColumn column : columns ) <nl> + for ( IColumn column : columns ) <nl> { <nl> - ColumnFamilyStore cfStore = columnFamilyStores _ . get ( column . name ( ) ) ; <nl> + ColumnFamilyStore cfStore = columnFamilyStores _ . get ( new String ( column . name ( ) , " UTF - 8 " ) ) ; <nl> cfStore . applyBinary ( key , column . value ( ) ) ; <nl> - 	 } <nl> + } <nl> } <nl> row . clear ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 954324b . . 21f97d2 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 478 , 14 + 478 , 26 @ @ public class MessagingService implements IMessagingService <nl> { <nl> isStreaming _ . set ( bVal ) ; <nl> } <nl> + public static void flushAndshutdown ( ) <nl> + { <nl> + / / safely shutdown and send all writes <nl> + for ( Map . Entry < String , TcpConnectionManager > entry : poolTable _ . entrySet ( ) ) <nl> + { <nl> + for ( TcpConnection connection : entry . getValue ( ) . getConnections ( ) ) <nl> + { <nl> + connection . doPendingWrites ( ) ; <nl> + } <nl> + } <nl> + shutdown ( ) ; <nl> + } <nl> <nl> public static void shutdown ( ) <nl> { <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> - synchronized ( MessagingService . class ) <nl> - { <nl> - / * Stop listening on any socket * / <nl> - for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> + synchronized ( MessagingService . class ) <nl> + { <nl> + / * Stop listening on any socket * / <nl> + for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> try <nl> @ @ - 495 , 26 + 507 , 25 @ @ public class MessagingService implements IMessagingService <nl> catch ( IOException e ) { } <nl> } <nl> listenSockets _ . clear ( ) ; <nl> - <nl> - / * Shutdown the threads in the EventQueue ' s * / <nl> - messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> + <nl> + / * Shutdown the threads in the EventQueue ' s * / <nl> + messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageSerializerExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> streamExecutor _ . shutdownNow ( ) ; <nl> - <nl> + <nl> / * shut down the cachetables * / <nl> taskCompletionMap _ . shutdown ( ) ; <nl> - callbackMap _ . shutdown ( ) ; <nl> - <nl> + callbackMap _ . shutdown ( ) ; <nl> + <nl> / * Interrupt the selector manager thread * / <nl> SelectorManager . getSelectorManager ( ) . interrupt ( ) ; <nl> - <nl> - poolTable _ . clear ( ) ; <nl> - verbHandlers _ . clear ( ) ; <nl> + <nl> + poolTable _ . clear ( ) ; <nl> + verbHandlers _ . clear ( ) ; <nl> bShutdown _ = true ; <nl> } <nl> - if ( logger _ . isDebugEnabled ( ) ) <nl> - logger _ . debug ( " Shutdown invocation complete . " ) ; <nl> + logger _ . info ( " Shutdown invocation complete . " ) ; <nl> } <nl> <nl> public static void receive ( Message message ) <nl> diff - - git a / src / java / org / apache / cassandra / net / TcpConnection . java b / src / java / org / apache / cassandra / net / TcpConnection . java <nl> index 5039833 . . 08afda8 100644 <nl> - - - a / src / java / org / apache / cassandra / net / TcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / TcpConnection . java <nl> @ @ - 387 , 7 + 387 , 7 @ @ public class TcpConnection extends SelectionKeyHandler implements Comparable <nl> resumeStreaming ( ) ; <nl> } <nl> <nl> - void doPendingWrites ( ) <nl> + public void doPendingWrites ( ) <nl> { <nl> synchronized ( this ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / TcpConnectionManager . java b / src / java / org / apache / cassandra / net / TcpConnectionManager . java <nl> index e29eb9d . . b8fa909 100644 <nl> - - - a / src / java / org / apache / cassandra / net / TcpConnectionManager . java <nl> + + + b / src / java / org / apache / cassandra / net / TcpConnectionManager . java <nl> @ @ - 211 , 4 + 211 , 8 @ @ class TcpConnectionManager <nl> { <nl> return allConnections _ . contains ( connection ) ; <nl> } <nl> + List < TcpConnection > getConnections ( ) <nl> + { <nl> + return allConnections _ ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 62cc110 . . 0e2dd24 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 778 , 6 + 778 , 24 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> logger _ . debug ( " Cleared out all snapshot directories " ) ; <nl> } <nl> <nl> + public void forceTableFlushBinary ( String tableName ) throws IOException <nl> + { <nl> + if ( DatabaseDescriptor . getTable ( tableName ) = = null ) <nl> + { <nl> + throw new IOException ( " Table " + tableName + " does not exist " ) ; <nl> + } <nl> + <nl> + Table table = Table . open ( tableName ) ; <nl> + Set < String > columnFamilies = table . getColumnFamilies ( ) ; <nl> + for ( String columnFamily : columnFamilies ) <nl> + { <nl> + ColumnFamilyStore cfStore = table . getColumnFamilyStore ( columnFamily ) ; <nl> + logger _ . debug ( " Forcing flush on keyspace " + tableName + " on CF " + columnFamily ) ; <nl> + cfStore . forceFlushBinary ( ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> / * End of MBean interface methods * / <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 2e21ecb . . 046fb26 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 84 , 4 + 84 , 11 @ @ public interface StorageServiceMBean <nl> * Remove all the existing snapshots . <nl> * / <nl> public void clearSnapshot ( ) throws IOException ; <nl> + <nl> + / * * <nl> + * Flush all binary memtables for a table <nl> + * @ param tableName <nl> + * @ throws IOException <nl> + * / <nl> + public void forceTableFlushBinary ( String tableName ) throws IOException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index f0df925 . . b6d846f 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 257 , 7 + 257 , 16 @ @ public class NodeProbe <nl> { <nl> ssProxy . forceTableCompaction ( ) ; <nl> } <nl> - <nl> + <nl> + / * * <nl> + * Trigger a binary flush on CFs of a table . <nl> + * / <nl> + public void forceTableFlushBinary ( String tableName ) throws IOException <nl> + { <nl> + ssProxy . forceTableFlushBinary ( tableName ) ; <nl> + } <nl> + <nl> + <nl> / * * <nl> * Write a textual representation of the Cassandra ring . <nl> * <nl> @ @ - 517 , 7 + 526 , 7 @ @ public class NodeProbe <nl> { <nl> HelpFormatter hf = new HelpFormatter ( ) ; <nl> String header = String . format ( <nl> - " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , bootstrap , tpstats " ) ; <nl> + " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , bootstrap , tpstats , flush _ binary " ) ; <nl> String usage = String . format ( " java % s - host < arg > < command > % n " , NodeProbe . class . getName ( ) ) ; <nl> hf . printHelp ( usage , " " , options , header ) ; <nl> } <nl> @ @ - 609 , 6 + 618 , 16 @ @ public class NodeProbe <nl> { <nl> probe . printThreadPoolStats ( System . out ) ; <nl> } <nl> + else if ( cmdName . equals ( " flush _ binary " ) ) <nl> + { <nl> + if ( probe . getArgs ( ) . length < 2 ) <nl> + { <nl> + System . err . println ( " Missing keyspace argument . " ) ; <nl> + NodeProbe . printUsage ( ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + probe . forceTableFlushBinary ( probe . getArgs ( ) [ 1 ] ) ; <nl> + } <nl> else <nl> { <nl> System . err . println ( " Unrecognized command : " + cmdName + " . " ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d3d7158 . . e349674 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 * Fix corrupted static collection deletions in 3 . 0 < - > 2 . { 1 , 2 } messages ( CASSANDRA - 14568 ) 
 * Handle failures in parallelAllSSTableOperation ( cleanup / upgradesstables / etc ) ( CASSANDRA - 14657 ) 
 * Improve TokenMetaData cache populating performance avoid long locking ( CASSANDRA - 14660 ) 
 + * Backport : Flush netty client messages immediately ( not by default ) ( CASSANDRA - 13651 ) 
 * Fix static column order for SELECT * wildcard queries ( CASSANDRA - 14638 ) 
 * sstableloader should use discovered broadcast address to connect intra - cluster ( CASSANDRA - 14522 ) 
 * Fix reading columns with non - UTF names from schema ( CASSANDRA - 14468 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index ef7b034 . . 2e6f363 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 1003 , 3 + 1003 , 8 @ @ windows _ timer _ interval : 1 
 # An interval of 0 disables any wait time , which is the behavior of former Cassandra versions . 
 # 
 # otc _ backlog _ expiration _ interval _ ms : 200 
 + 
 + # Define use of legacy delayed flusher for replies to TCP connections . This will increase latency , but might be beneficial for 
 + # legacy use - cases where only a single connection is used for each Cassandra node . Default is false . 
 + # native _ transport _ flush _ in _ batches _ legacy : false 
 + 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 64d41bb . . 6d56c74 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 149 , 6 + 149 , 7 @ @ public class Config 
 public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; 
 public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; 
 public volatile Long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; 
 + public boolean native _ transport _ flush _ in _ batches _ legacy = false ; 
 
 @ Deprecated 
 public Integer thrift _ max _ message _ length _ in _ mb = 16 ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index efc71ef . . 0fd785a 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1499 , 6 + 1499 , 11 @ @ public class DatabaseDescriptor 
 conf . native _ transport _ max _ concurrent _ connections _ per _ ip = native _ transport _ max _ concurrent _ connections _ per _ ip ; 
 } 
 
 + public static boolean useNativeTransportLegacyFlusher ( ) 
 + { 
 + return conf . native _ transport _ flush _ in _ batches _ legacy ; 
 + } 
 + 
 public static double getCommitLogSyncBatchWindow ( ) 
 { 
 return conf . commitlog _ sync _ batch _ window _ in _ ms ; 
 @ @ - 2077 , 5 + 2082 , 4 @ @ public class DatabaseDescriptor 
 { 
 return conf . gc _ warn _ threshold _ in _ ms ; 
 } 
 - 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java 
 index 91ece5c . . 0851b19 100644 
 - - - a / src / java / org / apache / cassandra / transport / Message . java 
 + + + b / src / java / org / apache / cassandra / transport / Message . java 
 @ @ - 420 , 26 + 420 , 38 @ @ public abstract class Message 
 } 
 } 
 
 - private static final class Flusher implements Runnable 
 + private static abstract class Flusher implements Runnable 
 { 
 final EventLoop eventLoop ; 
 final ConcurrentLinkedQueue < FlushItem > queued = new ConcurrentLinkedQueue < > ( ) ; 
 - final AtomicBoolean running = new AtomicBoolean ( false ) ; 
 + final AtomicBoolean scheduled = new AtomicBoolean ( false ) ; 
 final HashSet < ChannelHandlerContext > channels = new HashSet < > ( ) ; 
 final List < FlushItem > flushed = new ArrayList < > ( ) ; 
 - int runsSinceFlush = 0 ; 
 - int runsWithNoWork = 0 ; 
 - private Flusher ( EventLoop eventLoop ) 
 - { 
 - this . eventLoop = eventLoop ; 
 - } 
 + 
 void start ( ) 
 { 
 - if ( ! running . get ( ) & & running . compareAndSet ( false , true ) ) 
 + if ( ! scheduled . get ( ) & & scheduled . compareAndSet ( false , true ) ) 
 { 
 this . eventLoop . execute ( this ) ; 
 } 
 } 
 + 
 + public Flusher ( EventLoop eventLoop ) 
 + { 
 + this . eventLoop = eventLoop ; 
 + } 
 + } 
 + 
 + private static final class LegacyFlusher extends Flusher 
 + { 
 + int runsSinceFlush = 0 ; 
 + int runsWithNoWork = 0 ; 
 + 
 + private LegacyFlusher ( EventLoop eventLoop ) 
 + { 
 + super ( eventLoop ) ; 
 + } 
 + 
 public void run ( ) 
 { 
 
 @ @ - 476 , 8 + 488 , 8 @ @ public abstract class Message 
 / / either reschedule or cancel 
 if ( + + runsWithNoWork > 5 ) 
 { 
 - running . set ( false ) ; 
 - if ( queued . isEmpty ( ) | | ! running . compareAndSet ( false , true ) ) 
 + scheduled . set ( false ) ; 
 + if ( queued . isEmpty ( ) | | ! scheduled . compareAndSet ( false , true ) ) 
 return ; 
 } 
 } 
 @ @ - 486 , 11 + 498 , 48 @ @ public abstract class Message 
 } 
 } 
 
 + private static final class ImmediateFlusher extends Flusher 
 + { 
 + private ImmediateFlusher ( EventLoop eventLoop ) 
 + { 
 + super ( eventLoop ) ; 
 + } 
 + 
 + public void run ( ) 
 + { 
 + boolean doneWork = false ; 
 + FlushItem flush ; 
 + scheduled . set ( false ) ; 
 + 
 + while ( null ! = ( flush = queued . poll ( ) ) ) 
 + { 
 + channels . add ( flush . ctx ) ; 
 + flush . ctx . write ( flush . response , flush . ctx . voidPromise ( ) ) ; 
 + flushed . add ( flush ) ; 
 + doneWork = true ; 
 + } 
 + 
 + if ( doneWork ) 
 + { 
 + for ( ChannelHandlerContext channel : channels ) 
 + channel . flush ( ) ; 
 + for ( FlushItem item : flushed ) 
 + item . sourceFrame . release ( ) ; 
 + 
 + channels . clear ( ) ; 
 + flushed . clear ( ) ; 
 + } 
 + } 
 + } 
 + 
 private static final ConcurrentMap < EventLoop , Flusher > flusherLookup = new ConcurrentHashMap < > ( ) ; 
 
 - public Dispatcher ( ) 
 + private final boolean useLegacyFlusher ; 
 + 
 + public Dispatcher ( boolean useLegacyFlusher ) 
 { 
 super ( false ) ; 
 + this . useLegacyFlusher = useLegacyFlusher ; 
 } 
 
 @ Override 
 @ @ - 538 , 7 + 587 , 8 @ @ public abstract class Message 
 Flusher flusher = flusherLookup . get ( loop ) ; 
 if ( flusher = = null ) 
 { 
 - Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = new Flusher ( loop ) ) ; 
 + Flusher created = useLegacyFlusher ? new LegacyFlusher ( loop ) : new ImmediateFlusher ( loop ) ; 
 + Flusher alt = flusherLookup . putIfAbsent ( loop , flusher = created ) ; 
 if ( alt ! = null ) 
 flusher = alt ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 7df194d . . 8c781db 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 295 , 7 + 295 , 7 @ @ public class Server implements CassandraDaemon . Server 
 private static final Frame . Compressor frameCompressor = new Frame . Compressor ( ) ; 
 private static final Frame . Encoder frameEncoder = new Frame . Encoder ( ) ; 
 private static final Message . ExceptionHandler exceptionHandler = new Message . ExceptionHandler ( ) ; 
 - private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( ) ; 
 + private static final Message . Dispatcher dispatcher = new Message . Dispatcher ( DatabaseDescriptor . useNativeTransportLegacyFlusher ( ) ) ; 
 private static final ConnectionLimitHandler connectionLimitHandler = new ConnectionLimitHandler ( ) ; 
 
 private final Server server ;

NEAREST DIFF:
diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml 
 index 8aaeeb6 . . 25d2901 100644 
 - - - a / conf / storage - conf . xml 
 + + + b / conf / storage - conf . xml 
 @ @ - 308 , 4 + 308 , 19 @ @ 
 ~ ten days . 
 - - > 
 < GCGraceSeconds > 864000 < / GCGraceSeconds > 
 + 
 + < ! - - 
 + ~ Number of threads to run when flushing memtables to disk . Set this to 
 + ~ the number of disks you physically have in your machine allocated for DataDirectory * 2 . 
 + ~ If you are planning to use the Binary Memtable , its recommended to increase the max threads 
 + ~ to maintain a higher quality of service while under load when normal memtables are flushing to disk . 
 + - - > 
 + < FlushMinThreads > 1 < / FlushMinThreads > 
 + < FlushMaxThreads > 1 < / FlushMaxThreads > 
 + 
 + < ! - - 
 + ~ The threshold size in megabytes the binary memtable must grow to , before it ' s submitted for flushing to disk . 
 + - - > 
 + < BinaryMemtableSizeInMB > 256 < / BinaryMemtableSizeInMB > 
 + 
 < / Storage > 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 9016676 . . e86b134 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 74 , 6 + 74 , 9 @ @ public class DatabaseDescriptor 
 private static int slicedReadBufferSizeInKB _ = 64 ; 
 private static List < String > tables _ = new ArrayList < String > ( ) ; 
 private static Set < String > applicationColumnFamilies _ = new HashSet < String > ( ) ; 
 + private static int flushMinThreads _ = 1 ; 
 + private static int flushMaxThreads _ = 1 ; 
 + private static int bmtThreshold _ = 256 ; 
 
 / / Default descriptive names for introspection . The user can override 
 / / these choices in the config file . These are not case sensitive . 
 @ @ - 271 , 6 + 274 , 24 @ @ public class DatabaseDescriptor 
 slicedReadBufferSizeInKB _ = Integer . parseInt ( rawSlicedBuffer ) ; 
 } 
 
 + String rawflushMinThreads = xmlUtils . getNodeValue ( " / Storage / FlushMinThreads " ) ; 
 + if ( rawflushMinThreads ! = null ) 
 + { 
 + flushMinThreads _ = Integer . parseInt ( rawflushMinThreads ) ; 
 + } 
 + 
 + String rawflushMaxThreads = xmlUtils . getNodeValue ( " / Storage / FlushMaxThreads " ) ; 
 + if ( rawflushMaxThreads ! = null ) 
 + { 
 + flushMaxThreads _ = Integer . parseInt ( rawflushMaxThreads ) ; 
 + } 
 + 
 + String bmtThreshold = xmlUtils . getNodeValue ( " / Storage / BinaryMemtableSizeInMB " ) ; 
 + if ( bmtThreshold ! = null ) 
 + { 
 + bmtThreshold _ = Integer . parseInt ( bmtThreshold ) ; 
 + } 
 + 
 / * TCP port on which the storage system listens * / 
 String port = xmlUtils . getNodeValue ( " / Storage / StoragePort " ) ; 
 if ( port ! = null ) 
 @ @ - 999 , 4 + 1020 , 19 @ @ public class DatabaseDescriptor 
 { 
 return slicedReadBufferSizeInKB _ ; 
 } 
 + 
 + public static int getFlushMinThreads ( ) 
 + { 
 + return flushMinThreads _ ; 
 + } 
 + 
 + public static int getFlushMaxThreads ( ) 
 + { 
 + return flushMaxThreads _ ; 
 + } 
 + 
 + public static int getBMTThreshold ( ) 
 + { 
 + return bmtThreshold _ ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 index 2cd439a . . 4530e8b 100644 
 - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 @ @ - 34 , 11 + 34 , 13 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 import org . apache . log4j . Logger ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 + import java . util . * ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 
 public class BinaryMemtable 
 { 
 private static Logger logger _ = Logger . getLogger ( Memtable . class ) ; 
 - private int threshold _ = 512 * 1024 * 1024 ; 
 + private int threshold _ = DatabaseDescriptor . getBMTThreshold ( ) * 1024 * 1024 ; 
 private AtomicInteger currentSize _ = new AtomicInteger ( 0 ) ; 
 
 / * Table and ColumnFamily name are used to determine the ColumnFamilyStore * / 
 @ @ - 138 , 10 + 140 , 31 @ @ public class BinaryMemtable 
 * Use the SSTable to write the contents of the TreeMap 
 * to disk . 
 * / 
 + 
 + String path ; 
 + SSTableWriter writer ; 
 ColumnFamilyStore cfStore = Table . open ( table _ ) . getColumnFamilyStore ( cfName _ ) ; 
 List < String > keys = new ArrayList < String > ( columnFamilies _ . keySet ( ) ) ; 
 - SSTableWriter writer = new SSTableWriter ( cfStore . getTempSSTablePath ( ) , keys . size ( ) , StorageService . getPartitioner ( ) ) ; 
 - Collections . sort ( keys ) ; 
 + / * 
 + Adding a lock here so data directories are evenly used . By default currentIndex 
 + is incremented , not an AtomicInteger . Let ' s fix this ! 
 + * / 
 + lock _ . lock ( ) ; 
 + try 
 + { 
 + path = cfStore . getTempSSTablePath ( ) ; 
 + writer = new SSTableWriter ( path , keys . size ( ) , StorageService . getPartitioner ( ) ) ; 
 + } 
 + finally 
 + { 
 + lock _ . unlock ( ) ; 
 + } 
 + 
 + final IPartitioner partitioner = StorageService . getPartitioner ( ) ; 
 + final Comparator < String > dc = partitioner . getDecoratedKeyComparator ( ) ; 
 + Collections . sort ( keys , dc ) ; 
 + 
 + 
 / * Use this BloomFilter to decide if a key exists in a SSTable * / 
 for ( String key : keys ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index b08cf6b . . af6e247 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . * ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . ThreadFactoryImpl ; 
 import org . apache . cassandra . db . filter . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 
 @ @ - 55 , 8 + 56 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 private static final int BUFSIZE = 128 * 1024 * 1024 ; 
 
 private static NonBlockingHashMap < String , Set < Memtable > > memtablesPendingFlush = new NonBlockingHashMap < String , Set < Memtable > > ( ) ; 
 - private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( " MEMTABLE - FLUSHER - POOL " ) ; 
 - 
 + private static ExecutorService flusher _ = new DebuggableThreadPoolExecutor ( DatabaseDescriptor . getFlushMinThreads ( ) , DatabaseDescriptor . getFlushMaxThreads ( ) , Integer . MAX _ VALUE , TimeUnit . SECONDS , new LinkedBlockingQueue < Runnable > ( ) , new ThreadFactoryImpl ( " MEMTABLE - FLUSHER - POOL " ) ) ; 
 + 
 private final String table _ ; 
 public final String columnFamily _ ; 
 private final boolean isSuper _ ; 
 @ @ - 457 , 7 + 458 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 assert oldMemtable . isFlushed ( ) | | oldMemtable . isClean ( ) ; 
 } 
 
 - void forceFlushBinary ( ) 
 + public void forceFlushBinary ( ) 
 { 
 submitFlush ( binaryMemtable _ . get ( ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 54389e5 . . 04b28fb 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 642 , 11 + 642 , 11 @ @ public class Table 
 for ( ColumnFamily columnFamily : row . getColumnFamilies ( ) ) 
 { 
 Collection < IColumn > columns = columnFamily . getSortedColumns ( ) ; 
 - for ( IColumn column : columns ) 
 + for ( IColumn column : columns ) 
 { 
 - ColumnFamilyStore cfStore = columnFamilyStores _ . get ( column . name ( ) ) ; 
 + ColumnFamilyStore cfStore = columnFamilyStores _ . get ( new String ( column . name ( ) , " UTF - 8 " ) ) ; 
 cfStore . applyBinary ( key , column . value ( ) ) ; 
 - 	 } 
 + } 
 } 
 row . clear ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 954324b . . 21f97d2 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 478 , 14 + 478 , 26 @ @ public class MessagingService implements IMessagingService 
 { 
 isStreaming _ . set ( bVal ) ; 
 } 
 + public static void flushAndshutdown ( ) 
 + { 
 + / / safely shutdown and send all writes 
 + for ( Map . Entry < String , TcpConnectionManager > entry : poolTable _ . entrySet ( ) ) 
 + { 
 + for ( TcpConnection connection : entry . getValue ( ) . getConnections ( ) ) 
 + { 
 + connection . doPendingWrites ( ) ; 
 + } 
 + } 
 + shutdown ( ) ; 
 + } 
 
 public static void shutdown ( ) 
 { 
 logger _ . info ( " Shutting down . . . " ) ; 
 - synchronized ( MessagingService . class ) 
 - { 
 - / * Stop listening on any socket * / 
 - for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 + synchronized ( MessagingService . class ) 
 + { 
 + / * Stop listening on any socket * / 
 + for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 try 
 @ @ - 495 , 26 + 507 , 25 @ @ public class MessagingService implements IMessagingService 
 catch ( IOException e ) { } 
 } 
 listenSockets _ . clear ( ) ; 
 - 
 - / * Shutdown the threads in the EventQueue ' s * / 
 - messageDeserializationExecutor _ . shutdownNow ( ) ; 
 + 
 + / * Shutdown the threads in the EventQueue ' s * / 
 + messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageSerializerExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 streamExecutor _ . shutdownNow ( ) ; 
 - 
 + 
 / * shut down the cachetables * / 
 taskCompletionMap _ . shutdown ( ) ; 
 - callbackMap _ . shutdown ( ) ; 
 - 
 + callbackMap _ . shutdown ( ) ; 
 + 
 / * Interrupt the selector manager thread * / 
 SelectorManager . getSelectorManager ( ) . interrupt ( ) ; 
 - 
 - poolTable _ . clear ( ) ; 
 - verbHandlers _ . clear ( ) ; 
 + 
 + poolTable _ . clear ( ) ; 
 + verbHandlers _ . clear ( ) ; 
 bShutdown _ = true ; 
 } 
 - if ( logger _ . isDebugEnabled ( ) ) 
 - logger _ . debug ( " Shutdown invocation complete . " ) ; 
 + logger _ . info ( " Shutdown invocation complete . " ) ; 
 } 
 
 public static void receive ( Message message ) 
 diff - - git a / src / java / org / apache / cassandra / net / TcpConnection . java b / src / java / org / apache / cassandra / net / TcpConnection . java 
 index 5039833 . . 08afda8 100644 
 - - - a / src / java / org / apache / cassandra / net / TcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / TcpConnection . java 
 @ @ - 387 , 7 + 387 , 7 @ @ public class TcpConnection extends SelectionKeyHandler implements Comparable 
 resumeStreaming ( ) ; 
 } 
 
 - void doPendingWrites ( ) 
 + public void doPendingWrites ( ) 
 { 
 synchronized ( this ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / TcpConnectionManager . java b / src / java / org / apache / cassandra / net / TcpConnectionManager . java 
 index e29eb9d . . b8fa909 100644 
 - - - a / src / java / org / apache / cassandra / net / TcpConnectionManager . java 
 + + + b / src / java / org / apache / cassandra / net / TcpConnectionManager . java 
 @ @ - 211 , 4 + 211 , 8 @ @ class TcpConnectionManager 
 { 
 return allConnections _ . contains ( connection ) ; 
 } 
 + List < TcpConnection > getConnections ( ) 
 + { 
 + return allConnections _ ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 62cc110 . . 0e2dd24 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 778 , 6 + 778 , 24 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 logger _ . debug ( " Cleared out all snapshot directories " ) ; 
 } 
 
 + public void forceTableFlushBinary ( String tableName ) throws IOException 
 + { 
 + if ( DatabaseDescriptor . getTable ( tableName ) = = null ) 
 + { 
 + throw new IOException ( " Table " + tableName + " does not exist " ) ; 
 + } 
 + 
 + Table table = Table . open ( tableName ) ; 
 + Set < String > columnFamilies = table . getColumnFamilies ( ) ; 
 + for ( String columnFamily : columnFamilies ) 
 + { 
 + ColumnFamilyStore cfStore = table . getColumnFamilyStore ( columnFamily ) ; 
 + logger _ . debug ( " Forcing flush on keyspace " + tableName + " on CF " + columnFamily ) ; 
 + cfStore . forceFlushBinary ( ) ; 
 + } 
 + } 
 + 
 + 
 / * End of MBean interface methods * / 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 2e21ecb . . 046fb26 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 84 , 4 + 84 , 11 @ @ public interface StorageServiceMBean 
 * Remove all the existing snapshots . 
 * / 
 public void clearSnapshot ( ) throws IOException ; 
 + 
 + / * * 
 + * Flush all binary memtables for a table 
 + * @ param tableName 
 + * @ throws IOException 
 + * / 
 + public void forceTableFlushBinary ( String tableName ) throws IOException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index f0df925 . . b6d846f 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 257 , 7 + 257 , 16 @ @ public class NodeProbe 
 { 
 ssProxy . forceTableCompaction ( ) ; 
 } 
 - 
 + 
 + / * * 
 + * Trigger a binary flush on CFs of a table . 
 + * / 
 + public void forceTableFlushBinary ( String tableName ) throws IOException 
 + { 
 + ssProxy . forceTableFlushBinary ( tableName ) ; 
 + } 
 + 
 + 
 / * * 
 * Write a textual representation of the Cassandra ring . 
 * 
 @ @ - 517 , 7 + 526 , 7 @ @ public class NodeProbe 
 { 
 HelpFormatter hf = new HelpFormatter ( ) ; 
 String header = String . format ( 
 - " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , bootstrap , tpstats " ) ; 
 + " % nAvailable commands : ring , cluster , info , cleanup , compact , cfstats , snapshot [ name ] , clearsnapshot , bootstrap , tpstats , flush _ binary " ) ; 
 String usage = String . format ( " java % s - host < arg > < command > % n " , NodeProbe . class . getName ( ) ) ; 
 hf . printHelp ( usage , " " , options , header ) ; 
 } 
 @ @ - 609 , 6 + 618 , 16 @ @ public class NodeProbe 
 { 
 probe . printThreadPoolStats ( System . out ) ; 
 } 
 + else if ( cmdName . equals ( " flush _ binary " ) ) 
 + { 
 + if ( probe . getArgs ( ) . length < 2 ) 
 + { 
 + System . err . println ( " Missing keyspace argument . " ) ; 
 + NodeProbe . printUsage ( ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + probe . forceTableFlushBinary ( probe . getArgs ( ) [ 1 ] ) ; 
 + } 
 else 
 { 
 System . err . println ( " Unrecognized command : " + cmdName + " . " ) ;
