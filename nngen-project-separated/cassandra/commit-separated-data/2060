BLEU SCORE: 0.017177441586169604

TEST MSG: Fix handling of EXECUTE with skip _ metadata = false
GENERATED MSG: Workaround for netty issue causing corrupted data to come off the wire

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / ResultSet . java b / src / java / org / apache / cassandra / cql3 / ResultSet . java <nl> index 3928060 . . e463b29 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ResultSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ResultSet . java <nl> @ @ - 266 , 7 + 266 , 7 @ @ public class ResultSet <nl> <nl> public Metadata copy ( ) <nl> { <nl> - return new Metadata ( flags , names , columnCount , pagingState ) ; <nl> + return new Metadata ( EnumSet . copyOf ( flags ) , names , columnCount , pagingState ) ; <nl> } <nl> <nl> / / The maximum number of values that the ResultSet can hold . This can be bigger than columnCount due to CASSANDRA - 4911 <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / PreparedStatementCleanupTest . java b / test / unit / org / apache / cassandra / cql3 / PreparedStatementCleanupTest . java <nl> deleted file mode 100644 <nl> index 3e725e9 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / PreparedStatementCleanupTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 86 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cql3 ; <nl> - <nl> - import com . datastax . driver . core . Cluster ; <nl> - import com . datastax . driver . core . PreparedStatement ; <nl> - import com . datastax . driver . core . Session ; <nl> - import org . apache . cassandra . SchemaLoader ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . service . EmbeddedCassandraService ; <nl> - import org . junit . AfterClass ; <nl> - import org . junit . BeforeClass ; <nl> - import org . junit . Test ; <nl> - <nl> - public class PreparedStatementCleanupTest extends SchemaLoader <nl> - { <nl> - private static Cluster cluster ; <nl> - private static Session session ; <nl> - <nl> - private static final String KEYSPACE = " prepared _ stmt _ cleanup " ; <nl> - private static final String createKsStatement = " CREATE KEYSPACE " + KEYSPACE + <nl> - " WITH REPLICATION = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } ; " ; <nl> - private static final String dropKsStatement = " DROP KEYSPACE IF EXISTS " + KEYSPACE ; <nl> - <nl> - @ BeforeClass <nl> - public static void setup ( ) throws Exception <nl> - { <nl> - Schema . instance . clear ( ) ; <nl> - <nl> - EmbeddedCassandraService cassandra = new EmbeddedCassandraService ( ) ; <nl> - cassandra . start ( ) ; <nl> - <nl> - / / Currently the native server start method return before the server is fully binded to the socket , so we need <nl> - / / to wait slightly before trying to connect to it . We should fix this but in the meantime using a sleep . <nl> - Thread . sleep ( 500 ) ; <nl> - <nl> - 	 	 cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) <nl> - . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) <nl> - . build ( ) ; <nl> - session = cluster . connect ( ) ; <nl> - <nl> - session . execute ( dropKsStatement ) ; <nl> - session . execute ( createKsStatement ) ; <nl> - 	 } <nl> - <nl> - @ AfterClass <nl> - public static void tearDown ( ) throws Exception <nl> - { <nl> - cluster . close ( ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInvalidatePreparedStatementsOnDrop ( ) <nl> - { <nl> - String createTableStatement = " CREATE TABLE IF NOT EXISTS " + KEYSPACE + " . qp _ cleanup ( id int PRIMARY KEY , cid int , val text ) ; " ; <nl> - String dropTableStatement = " DROP TABLE IF EXISTS " + KEYSPACE + " . qp _ cleanup ; " ; <nl> - <nl> - session . execute ( createTableStatement ) ; <nl> - PreparedStatement prepared = session . prepare ( " INSERT INTO " + KEYSPACE + " . qp _ cleanup ( id , cid , val ) VALUES ( ? , ? , ? ) " ) ; <nl> - session . execute ( dropTableStatement ) ; <nl> - session . execute ( createTableStatement ) ; <nl> - session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; <nl> - <nl> - session . execute ( dropKsStatement ) ; <nl> - session . execute ( createKsStatement ) ; <nl> - session . execute ( createTableStatement ) ; <nl> - session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; <nl> - session . execute ( dropKsStatement ) ; <nl> - 	 } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / PreparedStatementsTest . java b / test / unit / org / apache / cassandra / cql3 / PreparedStatementsTest . java <nl> new file mode 100644 <nl> index 0000000 . . f65ec18 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / PreparedStatementsTest . java <nl> @ @ - 0 , 0 + 1 , 122 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import org . junit . AfterClass ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . datastax . driver . core . Cluster ; <nl> + import com . datastax . driver . core . PreparedStatement ; <nl> + import com . datastax . driver . core . Session ; <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . Schema ; <nl> + import org . apache . cassandra . service . EmbeddedCassandraService ; <nl> + <nl> + import static junit . framework . Assert . assertEquals ; <nl> + <nl> + public class PreparedStatementsTest extends SchemaLoader <nl> + { <nl> + private static Cluster cluster ; <nl> + private static Session session ; <nl> + <nl> + private static final String KEYSPACE = " prepared _ stmt _ cleanup " ; <nl> + private static final String createKsStatement = " CREATE KEYSPACE " + KEYSPACE + <nl> + " WITH REPLICATION = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } ; " ; <nl> + private static final String dropKsStatement = " DROP KEYSPACE IF EXISTS " + KEYSPACE ; <nl> + <nl> + @ BeforeClass <nl> + public static void setup ( ) throws Exception <nl> + { <nl> + Schema . instance . clear ( ) ; <nl> + <nl> + EmbeddedCassandraService cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . start ( ) ; <nl> + <nl> + / / Currently the native server start method return before the server is fully binded to the socket , so we need <nl> + / / to wait slightly before trying to connect to it . We should fix this but in the meantime using a sleep . <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + 	 	 cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) <nl> + . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) <nl> + . build ( ) ; <nl> + session = cluster . connect ( ) ; <nl> + <nl> + session . execute ( dropKsStatement ) ; <nl> + session . execute ( createKsStatement ) ; <nl> + 	 } <nl> + <nl> + @ AfterClass <nl> + public static void tearDown ( ) throws Exception <nl> + { <nl> + cluster . close ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInvalidatePreparedStatementsOnDrop ( ) <nl> + { <nl> + String createTableStatement = " CREATE TABLE IF NOT EXISTS " + KEYSPACE + " . qp _ cleanup ( id int PRIMARY KEY , cid int , val text ) ; " ; <nl> + String dropTableStatement = " DROP TABLE IF EXISTS " + KEYSPACE + " . qp _ cleanup ; " ; <nl> + <nl> + session . execute ( createTableStatement ) ; <nl> + PreparedStatement prepared = session . prepare ( " INSERT INTO " + KEYSPACE + " . qp _ cleanup ( id , cid , val ) VALUES ( ? , ? , ? ) " ) ; <nl> + session . execute ( dropTableStatement ) ; <nl> + session . execute ( createTableStatement ) ; <nl> + session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; <nl> + <nl> + session . execute ( dropKsStatement ) ; <nl> + session . execute ( createKsStatement ) ; <nl> + session . execute ( createTableStatement ) ; <nl> + session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; <nl> + session . execute ( dropKsStatement ) ; <nl> + <nl> + / / FIXME : where is invalidation actually tested ? <nl> + 	 } <nl> + <nl> + @ Test <nl> + public void testStatementRePreparationOnReconnect ( ) <nl> + { <nl> + session . execute ( dropKsStatement ) ; <nl> + session . execute ( createKsStatement ) ; <nl> + <nl> + session . execute ( " CREATE TABLE IF NOT EXISTS " + KEYSPACE + " . qp _ test ( id int PRIMARY KEY , cid int , val text ) ; " ) ; <nl> + <nl> + String insertCQL = " INSERT INTO " + KEYSPACE + " . qp _ test ( id , cid , val ) VALUES ( ? , ? , ? ) " ; <nl> + String selectCQL = " Select * from " + KEYSPACE + " . qp _ test where id = ? " ; <nl> + <nl> + PreparedStatement preparedInsert = session . prepare ( insertCQL ) ; <nl> + PreparedStatement preparedSelect = session . prepare ( selectCQL ) ; <nl> + <nl> + session . execute ( preparedInsert . bind ( 1 , 1 , " value " ) ) ; <nl> + assertEquals ( 1 , session . execute ( preparedSelect . bind ( 1 ) ) . all ( ) . size ( ) ) ; <nl> + <nl> + cluster . close ( ) ; <nl> + <nl> + cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) <nl> + . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) <nl> + . build ( ) ; <nl> + session = cluster . connect ( ) ; <nl> + <nl> + preparedInsert = session . prepare ( insertCQL ) ; <nl> + preparedSelect = session . prepare ( selectCQL ) ; <nl> + session . execute ( preparedInsert . bind ( 1 , 1 , " value " ) ) ; <nl> + <nl> + assertEquals ( 1 , session . execute ( preparedSelect . bind ( 1 ) ) . all ( ) . size ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / ResultSet . java b / src / java / org / apache / cassandra / cql3 / ResultSet . java 
 index 3928060 . . e463b29 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ResultSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ResultSet . java 
 @ @ - 266 , 7 + 266 , 7 @ @ public class ResultSet 
 
 public Metadata copy ( ) 
 { 
 - return new Metadata ( flags , names , columnCount , pagingState ) ; 
 + return new Metadata ( EnumSet . copyOf ( flags ) , names , columnCount , pagingState ) ; 
 } 
 
 / / The maximum number of values that the ResultSet can hold . This can be bigger than columnCount due to CASSANDRA - 4911 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / PreparedStatementCleanupTest . java b / test / unit / org / apache / cassandra / cql3 / PreparedStatementCleanupTest . java 
 deleted file mode 100644 
 index 3e725e9 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / cql3 / PreparedStatementCleanupTest . java 
 + + + / dev / null 
 @ @ - 1 , 86 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cql3 ; 
 - 
 - import com . datastax . driver . core . Cluster ; 
 - import com . datastax . driver . core . PreparedStatement ; 
 - import com . datastax . driver . core . Session ; 
 - import org . apache . cassandra . SchemaLoader ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . service . EmbeddedCassandraService ; 
 - import org . junit . AfterClass ; 
 - import org . junit . BeforeClass ; 
 - import org . junit . Test ; 
 - 
 - public class PreparedStatementCleanupTest extends SchemaLoader 
 - { 
 - private static Cluster cluster ; 
 - private static Session session ; 
 - 
 - private static final String KEYSPACE = " prepared _ stmt _ cleanup " ; 
 - private static final String createKsStatement = " CREATE KEYSPACE " + KEYSPACE + 
 - " WITH REPLICATION = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } ; " ; 
 - private static final String dropKsStatement = " DROP KEYSPACE IF EXISTS " + KEYSPACE ; 
 - 
 - @ BeforeClass 
 - public static void setup ( ) throws Exception 
 - { 
 - Schema . instance . clear ( ) ; 
 - 
 - EmbeddedCassandraService cassandra = new EmbeddedCassandraService ( ) ; 
 - cassandra . start ( ) ; 
 - 
 - / / Currently the native server start method return before the server is fully binded to the socket , so we need 
 - / / to wait slightly before trying to connect to it . We should fix this but in the meantime using a sleep . 
 - Thread . sleep ( 500 ) ; 
 - 
 - 	 	 cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) 
 - . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) 
 - . build ( ) ; 
 - session = cluster . connect ( ) ; 
 - 
 - session . execute ( dropKsStatement ) ; 
 - session . execute ( createKsStatement ) ; 
 - 	 } 
 - 
 - @ AfterClass 
 - public static void tearDown ( ) throws Exception 
 - { 
 - cluster . close ( ) ; 
 - } 
 - 
 - @ Test 
 - public void testInvalidatePreparedStatementsOnDrop ( ) 
 - { 
 - String createTableStatement = " CREATE TABLE IF NOT EXISTS " + KEYSPACE + " . qp _ cleanup ( id int PRIMARY KEY , cid int , val text ) ; " ; 
 - String dropTableStatement = " DROP TABLE IF EXISTS " + KEYSPACE + " . qp _ cleanup ; " ; 
 - 
 - session . execute ( createTableStatement ) ; 
 - PreparedStatement prepared = session . prepare ( " INSERT INTO " + KEYSPACE + " . qp _ cleanup ( id , cid , val ) VALUES ( ? , ? , ? ) " ) ; 
 - session . execute ( dropTableStatement ) ; 
 - session . execute ( createTableStatement ) ; 
 - session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; 
 - 
 - session . execute ( dropKsStatement ) ; 
 - session . execute ( createKsStatement ) ; 
 - session . execute ( createTableStatement ) ; 
 - session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; 
 - session . execute ( dropKsStatement ) ; 
 - 	 } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / PreparedStatementsTest . java b / test / unit / org / apache / cassandra / cql3 / PreparedStatementsTest . java 
 new file mode 100644 
 index 0000000 . . f65ec18 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / PreparedStatementsTest . java 
 @ @ - 0 , 0 + 1 , 122 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import org . junit . AfterClass ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import com . datastax . driver . core . Cluster ; 
 + import com . datastax . driver . core . PreparedStatement ; 
 + import com . datastax . driver . core . Session ; 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . Schema ; 
 + import org . apache . cassandra . service . EmbeddedCassandraService ; 
 + 
 + import static junit . framework . Assert . assertEquals ; 
 + 
 + public class PreparedStatementsTest extends SchemaLoader 
 + { 
 + private static Cluster cluster ; 
 + private static Session session ; 
 + 
 + private static final String KEYSPACE = " prepared _ stmt _ cleanup " ; 
 + private static final String createKsStatement = " CREATE KEYSPACE " + KEYSPACE + 
 + " WITH REPLICATION = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } ; " ; 
 + private static final String dropKsStatement = " DROP KEYSPACE IF EXISTS " + KEYSPACE ; 
 + 
 + @ BeforeClass 
 + public static void setup ( ) throws Exception 
 + { 
 + Schema . instance . clear ( ) ; 
 + 
 + EmbeddedCassandraService cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . start ( ) ; 
 + 
 + / / Currently the native server start method return before the server is fully binded to the socket , so we need 
 + / / to wait slightly before trying to connect to it . We should fix this but in the meantime using a sleep . 
 + Thread . sleep ( 500 ) ; 
 + 
 + 	 	 cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) 
 + . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) 
 + . build ( ) ; 
 + session = cluster . connect ( ) ; 
 + 
 + session . execute ( dropKsStatement ) ; 
 + session . execute ( createKsStatement ) ; 
 + 	 } 
 + 
 + @ AfterClass 
 + public static void tearDown ( ) throws Exception 
 + { 
 + cluster . close ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testInvalidatePreparedStatementsOnDrop ( ) 
 + { 
 + String createTableStatement = " CREATE TABLE IF NOT EXISTS " + KEYSPACE + " . qp _ cleanup ( id int PRIMARY KEY , cid int , val text ) ; " ; 
 + String dropTableStatement = " DROP TABLE IF EXISTS " + KEYSPACE + " . qp _ cleanup ; " ; 
 + 
 + session . execute ( createTableStatement ) ; 
 + PreparedStatement prepared = session . prepare ( " INSERT INTO " + KEYSPACE + " . qp _ cleanup ( id , cid , val ) VALUES ( ? , ? , ? ) " ) ; 
 + session . execute ( dropTableStatement ) ; 
 + session . execute ( createTableStatement ) ; 
 + session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; 
 + 
 + session . execute ( dropKsStatement ) ; 
 + session . execute ( createKsStatement ) ; 
 + session . execute ( createTableStatement ) ; 
 + session . execute ( prepared . bind ( 1 , 1 , " value " ) ) ; 
 + session . execute ( dropKsStatement ) ; 
 + 
 + / / FIXME : where is invalidation actually tested ? 
 + 	 } 
 + 
 + @ Test 
 + public void testStatementRePreparationOnReconnect ( ) 
 + { 
 + session . execute ( dropKsStatement ) ; 
 + session . execute ( createKsStatement ) ; 
 + 
 + session . execute ( " CREATE TABLE IF NOT EXISTS " + KEYSPACE + " . qp _ test ( id int PRIMARY KEY , cid int , val text ) ; " ) ; 
 + 
 + String insertCQL = " INSERT INTO " + KEYSPACE + " . qp _ test ( id , cid , val ) VALUES ( ? , ? , ? ) " ; 
 + String selectCQL = " Select * from " + KEYSPACE + " . qp _ test where id = ? " ; 
 + 
 + PreparedStatement preparedInsert = session . prepare ( insertCQL ) ; 
 + PreparedStatement preparedSelect = session . prepare ( selectCQL ) ; 
 + 
 + session . execute ( preparedInsert . bind ( 1 , 1 , " value " ) ) ; 
 + assertEquals ( 1 , session . execute ( preparedSelect . bind ( 1 ) ) . all ( ) . size ( ) ) ; 
 + 
 + cluster . close ( ) ; 
 + 
 + cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) 
 + . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) 
 + . build ( ) ; 
 + session = cluster . connect ( ) ; 
 + 
 + preparedInsert = session . prepare ( insertCQL ) ; 
 + preparedSelect = session . prepare ( selectCQL ) ; 
 + session . execute ( preparedInsert . bind ( 1 , 1 , " value " ) ) ; 
 + 
 + assertEquals ( 1 , session . execute ( preparedSelect . bind ( 1 ) ) . all ( ) . size ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
