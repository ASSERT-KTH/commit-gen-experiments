BLEU SCORE: 0.07986788803078405

TEST MSG: fix merge of 7519
GENERATED MSG: fixup

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java b / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java <nl> index efc90bc . . 9e1a5e8 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ package org . apache . cassandra . stress . operations ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> import org . apache . commons . math3 . distribution . EnumeratedDistribution ; <nl> import org . apache . commons . math3 . util . Pair ; <nl> @ @ - 36 , 9 + 37 , 9 @ @ import org . apache . cassandra . stress . util . Timer ; <nl> public abstract class SampledOpDistributionFactory < T > implements OpDistributionFactory <nl> { <nl> <nl> - final List < Pair < T , Double > > ratios ; <nl> + final Map < T , Double > ratios ; <nl> final DistributionFactory clustering ; <nl> - protected SampledOpDistributionFactory ( List < Pair < T , Double > > ratios , DistributionFactory clustering ) <nl> + protected SampledOpDistributionFactory ( Map < T , Double > ratios , DistributionFactory clustering ) <nl> { <nl> this . ratios = ratios ; <nl> this . clustering = clustering ; <nl> @ @ - 51 , 34 + 52 , 34 @ @ public abstract class SampledOpDistributionFactory < T > implements OpDistributionF <nl> { <nl> PartitionGenerator generator = newGenerator ( ) ; <nl> List < Pair < Operation , Double > > operations = new ArrayList < > ( ) ; <nl> - for ( Pair < T , Double > ratio : ratios ) <nl> - operations . add ( new Pair < > ( get ( timer , generator , ratio . getFirst ( ) ) , ratio . getSecond ( ) ) ) ; <nl> + for ( Map . Entry < T , Double > ratio : ratios . entrySet ( ) ) <nl> + operations . add ( new Pair < > ( get ( timer , generator , ratio . getKey ( ) ) , ratio . getValue ( ) ) ) ; <nl> return new SampledOpDistribution ( new EnumeratedDistribution < > ( operations ) , clustering . get ( ) ) ; <nl> } <nl> <nl> public String desc ( ) <nl> { <nl> List < T > keys = new ArrayList < > ( ) ; <nl> - for ( Pair < T , Double > p : ratios ) <nl> - keys . add ( p . getFirst ( ) ) ; <nl> + for ( Map . Entry < T , Double > ratio : ratios . entrySet ( ) ) <nl> + keys . add ( ratio . getKey ( ) ) ; <nl> return keys . toString ( ) ; <nl> } <nl> <nl> public Iterable < OpDistributionFactory > each ( ) <nl> { <nl> List < OpDistributionFactory > out = new ArrayList < > ( ) ; <nl> - for ( final Pair < T , Double > ratio : ratios ) <nl> + for ( final Map . Entry < T , Double > ratio : ratios . entrySet ( ) ) <nl> { <nl> out . add ( new OpDistributionFactory ( ) <nl> { <nl> public OpDistribution get ( Timer timer ) <nl> { <nl> - return new FixedOpDistribution ( SampledOpDistributionFactory . this . get ( timer , newGenerator ( ) , ratio . getFirst ( ) ) ) ; <nl> + return new FixedOpDistribution ( SampledOpDistributionFactory . this . get ( timer , newGenerator ( ) , ratio . getKey ( ) ) ) ; <nl> } <nl> <nl> public String desc ( ) <nl> { <nl> - return ratio . getFirst ( ) . toString ( ) ; <nl> + return ratio . getKey ( ) . toString ( ) ; <nl> } <nl> <nl> public Iterable < OpDistributionFactory > each ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java b / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java 
 index efc90bc . . 9e1a5e8 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / operations / SampledOpDistributionFactory . java 
 @ @ - 24 , 6 + 24 , 7 @ @ package org . apache . cassandra . stress . operations ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . List ; 
 + import java . util . Map ; 
 
 import org . apache . commons . math3 . distribution . EnumeratedDistribution ; 
 import org . apache . commons . math3 . util . Pair ; 
 @ @ - 36 , 9 + 37 , 9 @ @ import org . apache . cassandra . stress . util . Timer ; 
 public abstract class SampledOpDistributionFactory < T > implements OpDistributionFactory 
 { 
 
 - final List < Pair < T , Double > > ratios ; 
 + final Map < T , Double > ratios ; 
 final DistributionFactory clustering ; 
 - protected SampledOpDistributionFactory ( List < Pair < T , Double > > ratios , DistributionFactory clustering ) 
 + protected SampledOpDistributionFactory ( Map < T , Double > ratios , DistributionFactory clustering ) 
 { 
 this . ratios = ratios ; 
 this . clustering = clustering ; 
 @ @ - 51 , 34 + 52 , 34 @ @ public abstract class SampledOpDistributionFactory < T > implements OpDistributionF 
 { 
 PartitionGenerator generator = newGenerator ( ) ; 
 List < Pair < Operation , Double > > operations = new ArrayList < > ( ) ; 
 - for ( Pair < T , Double > ratio : ratios ) 
 - operations . add ( new Pair < > ( get ( timer , generator , ratio . getFirst ( ) ) , ratio . getSecond ( ) ) ) ; 
 + for ( Map . Entry < T , Double > ratio : ratios . entrySet ( ) ) 
 + operations . add ( new Pair < > ( get ( timer , generator , ratio . getKey ( ) ) , ratio . getValue ( ) ) ) ; 
 return new SampledOpDistribution ( new EnumeratedDistribution < > ( operations ) , clustering . get ( ) ) ; 
 } 
 
 public String desc ( ) 
 { 
 List < T > keys = new ArrayList < > ( ) ; 
 - for ( Pair < T , Double > p : ratios ) 
 - keys . add ( p . getFirst ( ) ) ; 
 + for ( Map . Entry < T , Double > ratio : ratios . entrySet ( ) ) 
 + keys . add ( ratio . getKey ( ) ) ; 
 return keys . toString ( ) ; 
 } 
 
 public Iterable < OpDistributionFactory > each ( ) 
 { 
 List < OpDistributionFactory > out = new ArrayList < > ( ) ; 
 - for ( final Pair < T , Double > ratio : ratios ) 
 + for ( final Map . Entry < T , Double > ratio : ratios . entrySet ( ) ) 
 { 
 out . add ( new OpDistributionFactory ( ) 
 { 
 public OpDistribution get ( Timer timer ) 
 { 
 - return new FixedOpDistribution ( SampledOpDistributionFactory . this . get ( timer , newGenerator ( ) , ratio . getFirst ( ) ) ) ; 
 + return new FixedOpDistribution ( SampledOpDistributionFactory . this . get ( timer , newGenerator ( ) , ratio . getKey ( ) ) ) ; 
 } 
 
 public String desc ( ) 
 { 
 - return ratio . getFirst ( ) . toString ( ) ; 
 + return ratio . getKey ( ) . toString ( ) ; 
 } 
 
 public Iterable < OpDistributionFactory > each ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
