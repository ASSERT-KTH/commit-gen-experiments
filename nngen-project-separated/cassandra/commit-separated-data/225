BLEU SCORE: 0.05341087579952926

TEST MSG: Fix trivial log format error
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2017aff . . acd4996 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Fix trivial log format error ( CASSANDRA - 14015 ) <nl> * Allow sstabledump to do a json object per partition ( CASSANDRA - 13848 ) <nl> * Add option to optimise merkle tree comparison across replicas ( CASSANDRA - 3200 ) <nl> * Remove unused and deprecated methods from AbstractCompactionStrategy ( CASSANDRA - 14081 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index c57b37a . . cc4d078 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 348 , 7 + 348 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> Throwable fail = Throwables . close ( null , transactions ) ; <nl> if ( fail ! = null ) <nl> - logger . error ( " Failed to cleanup lifecycle transactions { } " , fail ) ; <nl> + logger . error ( " Failed to cleanup lifecycle transactions " , fail ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index c6eeecf . . 6fa7e87 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 203 , 15 + 203 , 13 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> { <nl> / / ByteBufferUtil . string failed . <nl> / / Log it here and we ' ll further throw an exception below since comparator = = null <nl> - logger . error ( " Failed with [ { } ] when decoding the byte buffer in ByteBufferUtil . string ( ) " , <nl> - ce ) ; <nl> + logger . error ( " Failed when decoding the byte buffer in ByteBufferUtil . string ( ) " , ce ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> / / parse failed . <nl> / / Log it here and we ' ll further throw an exception below since comparator = = null <nl> - logger . error ( " Failed to parse value string \ " { } \ " with exception : [ { } ] " , <nl> - valueStr , e ) ; <nl> + logger . error ( " Failed to parse value string \ " { } \ " with exception : " , valueStr , e ) ; <nl> } <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index aa5d0cc . . be0cf0f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 525 , 7 + 525 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> catch ( Exception ex ) <nl> { <nl> - logger . error ( " Failed paxos prepare locally : { } " , ex ) ; <nl> + logger . error ( " Failed paxos prepare locally " , ex ) ; <nl> } <nl> } <nl> } ) ; <nl> @ @ - 563 , 7 + 563 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> catch ( Exception ex ) <nl> { <nl> - logger . error ( " Failed paxos propose locally : { } " , ex ) ; <nl> + logger . error ( " Failed paxos propose locally " , ex ) ; <nl> } <nl> } <nl> } ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2017aff . . acd4996 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Fix trivial log format error ( CASSANDRA - 14015 ) 
 * Allow sstabledump to do a json object per partition ( CASSANDRA - 13848 ) 
 * Add option to optimise merkle tree comparison across replicas ( CASSANDRA - 3200 ) 
 * Remove unused and deprecated methods from AbstractCompactionStrategy ( CASSANDRA - 14081 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index c57b37a . . cc4d078 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 348 , 7 + 348 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 Throwable fail = Throwables . close ( null , transactions ) ; 
 if ( fail ! = null ) 
 - logger . error ( " Failed to cleanup lifecycle transactions { } " , fail ) ; 
 + logger . error ( " Failed to cleanup lifecycle transactions " , fail ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index c6eeecf . . 6fa7e87 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 203 , 15 + 203 , 13 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 { 
 / / ByteBufferUtil . string failed . 
 / / Log it here and we ' ll further throw an exception below since comparator = = null 
 - logger . error ( " Failed with [ { } ] when decoding the byte buffer in ByteBufferUtil . string ( ) " , 
 - ce ) ; 
 + logger . error ( " Failed when decoding the byte buffer in ByteBufferUtil . string ( ) " , ce ) ; 
 } 
 catch ( Exception e ) 
 { 
 / / parse failed . 
 / / Log it here and we ' ll further throw an exception below since comparator = = null 
 - logger . error ( " Failed to parse value string \ " { } \ " with exception : [ { } ] " , 
 - valueStr , e ) ; 
 + logger . error ( " Failed to parse value string \ " { } \ " with exception : " , valueStr , e ) ; 
 } 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index aa5d0cc . . be0cf0f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 525 , 7 + 525 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 catch ( Exception ex ) 
 { 
 - logger . error ( " Failed paxos prepare locally : { } " , ex ) ; 
 + logger . error ( " Failed paxos prepare locally " , ex ) ; 
 } 
 } 
 } ) ; 
 @ @ - 563 , 7 + 563 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 catch ( Exception ex ) 
 { 
 - logger . error ( " Failed paxos propose locally : { } " , ex ) ; 
 + logger . error ( " Failed paxos propose locally " , ex ) ; 
 } 
 } 
 } ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
