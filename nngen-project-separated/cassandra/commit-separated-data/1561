BLEU SCORE: 0.018977423949228533

TEST MSG: Lifecycle unit tests fail when run in parallel
GENERATED MSG: Fix " Unable to create hard link " SSTableReaderTest error messages

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / MockSchema . java b / test / unit / org / apache / cassandra / MockSchema . java <nl> index 94313cd . . c71c98b 100644 <nl> - - - a / test / unit / org / apache / cassandra / MockSchema . java <nl> + + + b / test / unit / org / apache / cassandra / MockSchema . java <nl> @ @ - 21 , 7 + 21 , 6 @ @ package org . apache . cassandra ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . RandomAccessFile ; <nl> - import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> @ @ - 88 , 7 + 87 , 11 @ @ public class MockSchema <nl> <nl> public static SSTableReader sstable ( int generation , int size , boolean keepRef , ColumnFamilyStore cfs ) <nl> { <nl> - Descriptor descriptor = new Descriptor ( temp ( " mockcfdir " ) . getParentFile ( ) , ks . getName ( ) , cfs . getColumnFamilyName ( ) , generation , Descriptor . Type . FINAL ) ; <nl> + Descriptor descriptor = new Descriptor ( cfs . directories . getDirectoryForNewSSTables ( ) , <nl> + cfs . keyspace . getName ( ) , <nl> + cfs . getColumnFamilyName ( ) , <nl> + generation , <nl> + Descriptor . Type . FINAL ) ; <nl> Set < Component > components = ImmutableSet . of ( Component . DATA , Component . PRIMARY _ INDEX , Component . FILTER , Component . TOC ) ; <nl> for ( Component component : components ) <nl> { <nl> @ @ - 100 , 7 + 103 , 6 @ @ public class MockSchema <nl> catch ( IOException e ) <nl> { <nl> } <nl> - file . deleteOnExit ( ) ; <nl> } <nl> if ( size > 0 ) <nl> { <nl> @ @ - 132 , 13 + 134 , 16 @ @ public class MockSchema <nl> public static ColumnFamilyStore newCFS ( ) <nl> { <nl> String cfname = " mockcf " + ( id . incrementAndGet ( ) ) ; <nl> - CFMetaData metadata = newCFMetaData ( cfname ) ; <nl> + CFMetaData metadata = newCFMetaData ( ks . getName ( ) , cfname ) ; <nl> return new ColumnFamilyStore ( ks , cfname , Murmur3Partitioner . instance , 0 , metadata , new Directories ( metadata ) , false , false ) ; <nl> } <nl> <nl> - private static CFMetaData newCFMetaData ( String cfname ) <nl> + private static CFMetaData newCFMetaData ( String ksname , String cfname ) <nl> { <nl> - CFMetaData metadata = new CFMetaData ( " mockks " , cfname , ColumnFamilyType . Standard , new SimpleSparseCellNameType ( UTF8Type . instance ) ) ; <nl> + CFMetaData metadata = new CFMetaData ( ksname , <nl> + cfname , <nl> + ColumnFamilyType . Standard , <nl> + new SimpleSparseCellNameType ( UTF8Type . instance ) ) ; <nl> metadata . caching ( CachingOptions . NONE ) ; <nl> return metadata ; <nl> } <nl> @ @ - 169 , 7 + 174 , 7 @ @ public class MockSchema <nl> { <nl> File dir = new File ( dirName ) ; <nl> if ( ! dir . exists ( ) ) <nl> - throw new RuntimeException ( " No such directory : " + dir . getAbsolutePath ( ) ) ; <nl> + continue ; <nl> String [ ] children = dir . list ( ) ; <nl> for ( String child : children ) <nl> FileUtils . deleteRecursive ( new File ( dir , child ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java b / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java <nl> index 24d2bda . . 5d37059 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Lists ; <nl> <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import junit . framework . Assert ; <nl> @ @ - 39 , 6 + 40 , 12 @ @ import org . apache . cassandra . utils . concurrent . Refs ; <nl> public class HelpersTest <nl> { <nl> <nl> + @ BeforeClass <nl> + public static void setUp ( ) <nl> + { <nl> + MockSchema . cleanup ( ) ; <nl> + } <nl> + <nl> static Set < Integer > a = set ( 1 , 2 , 3 ) ; <nl> static Set < Integer > b = set ( 4 , 5 , 6 ) ; <nl> static Set < Integer > c = set ( 7 , 8 , 9 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java b / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java <nl> index 2c6c830 . . aaa9999 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . List ; <nl> <nl> import org . junit . After ; <nl> import org . junit . Before ; <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import junit . framework . Assert ; <nl> @ @ - 53 , 6 + 54 , 12 @ @ public class LifecycleTransactionTest extends AbstractTransactionalTest <nl> { <nl> private boolean incrementalBackups ; <nl> <nl> + @ BeforeClass <nl> + public static void setUp ( ) <nl> + { <nl> + MockSchema . cleanup ( ) ; <nl> + } <nl> + <nl> @ Before <nl> public void disableIncrementalBackup ( ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java b / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java <nl> index aa99fbd . . 4c8006a 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import com . google . common . base . Function ; <nl> import com . google . common . base . Predicates ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Iterables ; <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import junit . framework . Assert ; <nl> @ @ - 43 , 6 + 44 , 11 @ @ import static org . apache . cassandra . db . lifecycle . Helpers . emptySet ; <nl> <nl> public class ViewTest <nl> { <nl> + @ BeforeClass <nl> + public static void setUp ( ) <nl> + { <nl> + MockSchema . cleanup ( ) ; <nl> + } <nl> <nl> @ Test <nl> public void testSSTablesInBounds ( )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java <nl> index 573ec8f . . bd2bdbc 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java <nl> @ @ - 148 , 7 + 148 , 12 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > <nl> if ( colType = = ColType . COUNTER ) <nl> writer . addCounterColumn ( column . name , column . value . getLong ( ) ) ; <nl> else <nl> - writer . addColumn ( column . name , column . value , column . timestamp ) ; <nl> + { <nl> + if ( 0 = = column . ttl ) <nl> + writer . addColumn ( column . name , column . value , column . timestamp ) ; <nl> + else <nl> + writer . addExpiringColumn ( column . name , column . value , column . timestamp , column . ttl , System . currentTimeMillis ( ) + ( column . ttl * 1000 ) ) ; <nl> + } <nl> } <nl> } <nl> else <nl> @ @ - 156 , 11 + 161 , 15 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > <nl> if ( colType = = ColType . COUNTER ) <nl> writer . addCounterColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value . getLong ( ) ) ; <nl> else <nl> - writer . addColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value , mut . getColumn _ or _ supercolumn ( ) . column . timestamp ) ; <nl> + 	 { <nl> + if ( 0 = = mut . getColumn _ or _ supercolumn ( ) . column . ttl ) <nl> + 	 writer . addColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value , mut . getColumn _ or _ supercolumn ( ) . column . timestamp ) ; <nl> + else <nl> + writer . addExpiringColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value , mut . getColumn _ or _ supercolumn ( ) . column . timestamp , mut . getColumn _ or _ supercolumn ( ) . column . ttl , System . currentTimeMillis ( ) + ( mut . getColumn _ or _ supercolumn ( ) . column . ttl * 1000 ) ) ; <nl> + 	 } <nl> } <nl> } <nl> } <nl> - <nl> @ Override <nl> public void close ( TaskAttemptContext context ) throws IOException , InterruptedException <nl> {

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / MockSchema . java b / test / unit / org / apache / cassandra / MockSchema . java 
 index 94313cd . . c71c98b 100644 
 - - - a / test / unit / org / apache / cassandra / MockSchema . java 
 + + + b / test / unit / org / apache / cassandra / MockSchema . java 
 @ @ - 21 , 7 + 21 , 6 @ @ package org . apache . cassandra ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . RandomAccessFile ; 
 - import java . util . List ; 
 import java . util . Set ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 @ @ - 88 , 7 + 87 , 11 @ @ public class MockSchema 
 
 public static SSTableReader sstable ( int generation , int size , boolean keepRef , ColumnFamilyStore cfs ) 
 { 
 - Descriptor descriptor = new Descriptor ( temp ( " mockcfdir " ) . getParentFile ( ) , ks . getName ( ) , cfs . getColumnFamilyName ( ) , generation , Descriptor . Type . FINAL ) ; 
 + Descriptor descriptor = new Descriptor ( cfs . directories . getDirectoryForNewSSTables ( ) , 
 + cfs . keyspace . getName ( ) , 
 + cfs . getColumnFamilyName ( ) , 
 + generation , 
 + Descriptor . Type . FINAL ) ; 
 Set < Component > components = ImmutableSet . of ( Component . DATA , Component . PRIMARY _ INDEX , Component . FILTER , Component . TOC ) ; 
 for ( Component component : components ) 
 { 
 @ @ - 100 , 7 + 103 , 6 @ @ public class MockSchema 
 catch ( IOException e ) 
 { 
 } 
 - file . deleteOnExit ( ) ; 
 } 
 if ( size > 0 ) 
 { 
 @ @ - 132 , 13 + 134 , 16 @ @ public class MockSchema 
 public static ColumnFamilyStore newCFS ( ) 
 { 
 String cfname = " mockcf " + ( id . incrementAndGet ( ) ) ; 
 - CFMetaData metadata = newCFMetaData ( cfname ) ; 
 + CFMetaData metadata = newCFMetaData ( ks . getName ( ) , cfname ) ; 
 return new ColumnFamilyStore ( ks , cfname , Murmur3Partitioner . instance , 0 , metadata , new Directories ( metadata ) , false , false ) ; 
 } 
 
 - private static CFMetaData newCFMetaData ( String cfname ) 
 + private static CFMetaData newCFMetaData ( String ksname , String cfname ) 
 { 
 - CFMetaData metadata = new CFMetaData ( " mockks " , cfname , ColumnFamilyType . Standard , new SimpleSparseCellNameType ( UTF8Type . instance ) ) ; 
 + CFMetaData metadata = new CFMetaData ( ksname , 
 + cfname , 
 + ColumnFamilyType . Standard , 
 + new SimpleSparseCellNameType ( UTF8Type . instance ) ) ; 
 metadata . caching ( CachingOptions . NONE ) ; 
 return metadata ; 
 } 
 @ @ - 169 , 7 + 174 , 7 @ @ public class MockSchema 
 { 
 File dir = new File ( dirName ) ; 
 if ( ! dir . exists ( ) ) 
 - throw new RuntimeException ( " No such directory : " + dir . getAbsolutePath ( ) ) ; 
 + continue ; 
 String [ ] children = dir . list ( ) ; 
 for ( String child : children ) 
 FileUtils . deleteRecursive ( new File ( dir , child ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java b / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java 
 index 24d2bda . . 5d37059 100644 
 - - - a / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java 
 + + + b / test / unit / org / apache / cassandra / db / lifecycle / HelpersTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . Lists ; 
 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import junit . framework . Assert ; 
 @ @ - 39 , 6 + 40 , 12 @ @ import org . apache . cassandra . utils . concurrent . Refs ; 
 public class HelpersTest 
 { 
 
 + @ BeforeClass 
 + public static void setUp ( ) 
 + { 
 + MockSchema . cleanup ( ) ; 
 + } 
 + 
 static Set < Integer > a = set ( 1 , 2 , 3 ) ; 
 static Set < Integer > b = set ( 4 , 5 , 6 ) ; 
 static Set < Integer > c = set ( 7 , 8 , 9 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java b / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java 
 index 2c6c830 . . aaa9999 100644 
 - - - a / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java 
 + + + b / test / unit / org / apache / cassandra / db / lifecycle / LifecycleTransactionTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . List ; 
 
 import org . junit . After ; 
 import org . junit . Before ; 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import junit . framework . Assert ; 
 @ @ - 53 , 6 + 54 , 12 @ @ public class LifecycleTransactionTest extends AbstractTransactionalTest 
 { 
 private boolean incrementalBackups ; 
 
 + @ BeforeClass 
 + public static void setUp ( ) 
 + { 
 + MockSchema . cleanup ( ) ; 
 + } 
 + 
 @ Before 
 public void disableIncrementalBackup ( ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java b / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java 
 index aa99fbd . . 4c8006a 100644 
 - - - a / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java 
 + + + b / test / unit / org / apache / cassandra / db / lifecycle / ViewTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import com . google . common . base . Function ; 
 import com . google . common . base . Predicates ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Iterables ; 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import junit . framework . Assert ; 
 @ @ - 43 , 6 + 44 , 11 @ @ import static org . apache . cassandra . db . lifecycle . Helpers . emptySet ; 
 
 public class ViewTest 
 { 
 + @ BeforeClass 
 + public static void setUp ( ) 
 + { 
 + MockSchema . cleanup ( ) ; 
 + } 
 
 @ Test 
 public void testSSTablesInBounds ( )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java 
 index 573ec8f . . bd2bdbc 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java 
 @ @ - 148 , 7 + 148 , 12 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > 
 if ( colType = = ColType . COUNTER ) 
 writer . addCounterColumn ( column . name , column . value . getLong ( ) ) ; 
 else 
 - writer . addColumn ( column . name , column . value , column . timestamp ) ; 
 + { 
 + if ( 0 = = column . ttl ) 
 + writer . addColumn ( column . name , column . value , column . timestamp ) ; 
 + else 
 + writer . addExpiringColumn ( column . name , column . value , column . timestamp , column . ttl , System . currentTimeMillis ( ) + ( column . ttl * 1000 ) ) ; 
 + } 
 } 
 } 
 else 
 @ @ - 156 , 11 + 161 , 15 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > 
 if ( colType = = ColType . COUNTER ) 
 writer . addCounterColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value . getLong ( ) ) ; 
 else 
 - writer . addColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value , mut . getColumn _ or _ supercolumn ( ) . column . timestamp ) ; 
 + 	 { 
 + if ( 0 = = mut . getColumn _ or _ supercolumn ( ) . column . ttl ) 
 + 	 writer . addColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value , mut . getColumn _ or _ supercolumn ( ) . column . timestamp ) ; 
 + else 
 + writer . addExpiringColumn ( mut . getColumn _ or _ supercolumn ( ) . column . name , mut . getColumn _ or _ supercolumn ( ) . column . value , mut . getColumn _ or _ supercolumn ( ) . column . timestamp , mut . getColumn _ or _ supercolumn ( ) . column . ttl , System . currentTimeMillis ( ) + ( mut . getColumn _ or _ supercolumn ( ) . column . ttl * 1000 ) ) ; 
 + 	 } 
 } 
 } 
 } 
 - 
 @ Override 
 public void close ( TaskAttemptContext context ) throws IOException , InterruptedException 
 {
