BLEU SCORE: 0.01811080099375393

TEST MSG: use long math for long results
GENERATED MSG: don ' t change manifest level for cleanup , scrub , and upgradesstables under LCS

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java <nl> index 4c5bb89 . . 62ea922 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public class DataGenStringRepeats extends DataGen <nl> <nl> private byte [ ] getData ( long index , int column , ByteBuffer seed ) <nl> { <nl> - final long key = ( column * repeatFrequency ) + ( ( seed = = null ? index : Math . abs ( seed . hashCode ( ) ) ) % repeatFrequency ) ; <nl> + final long key = ( ( long ) column * repeatFrequency ) + ( ( seed = = null ? index : Math . abs ( seed . hashCode ( ) ) ) % repeatFrequency ) ; <nl> byte [ ] r = cache . get ( key ) ; <nl> if ( r ! = null ) <nl> return r ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 76bb8cb . . 4584383 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 22 , 6 + 22 , 8 @ @ Merged from 1 . 0 : <nl> * ( cqlsh ) ignore missing CfDef opts ( CASSANDRA - 3933 ) <nl> * ( cqlsh ) look for cqlshlib relative to realpath ( CASSANDRA - 3767 ) <nl> * Fix short read protection ( CASSANDRA - 3934 ) <nl> + * don ' t change manifest level for cleanup , scrub , and upgradesstables <nl> + operations under LeveledCompactionStrategy ( CASSANDRA - 3989 ) <nl> * always compact away deleted hints immediately after handoff ( CASSANDRA - 3955 ) <nl> * delete hints from dropped ColumnFamilies on handoff instead of <nl> erroring out ( CASSANDRA - 3975 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> index 4c63180 . . a546cbc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java <nl> @ @ - 61 , 7 + 61 , 6 @ @ public class LeveledManifest <nl> private final List < SSTableReader > [ ] generations ; <nl> private final RowPosition [ ] lastCompactedKeys ; <nl> private final int maxSSTableSizeInMB ; <nl> - private int levelCount ; <nl> <nl> private LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB ) <nl> { <nl> @ @ - 175 , 7 + 174 , 13 @ @ public class LeveledManifest <nl> if ( ! added . iterator ( ) . hasNext ( ) ) <nl> return ; <nl> <nl> - int newLevel = minimumLevel = = maximumLevel ? maximumLevel + 1 : maximumLevel ; <nl> + / / avoid increasing the level if we had a single source sstable involved . This prevents <nl> + / / cleanup , scrub , and upgradesstables from blowing through the level cap . <nl> + / / See CASSANDRA - 3989 <nl> + int newLevel = Iterables . size ( removed ) = = 1 <nl> + ? maximumLevel <nl> + : minimumLevel = = maximumLevel ? maximumLevel + 1 : maximumLevel ; <nl> + <nl> newLevel = skipLevels ( newLevel , added ) ; <nl> assert newLevel > 0 ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> @ @ - 295 , 6 + 300 , 7 @ @ public class LeveledManifest <nl> <nl> private void add ( SSTableReader sstable , int level ) <nl> { <nl> + assert level < generations . length : " Invalid level " + level + " out of " + ( generations . length - 1 ) ; <nl> generations [ level ] . add ( sstable ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java 
 index 4c5bb89 . . 62ea922 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / generatedata / DataGenStringRepeats . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public class DataGenStringRepeats extends DataGen 
 
 private byte [ ] getData ( long index , int column , ByteBuffer seed ) 
 { 
 - final long key = ( column * repeatFrequency ) + ( ( seed = = null ? index : Math . abs ( seed . hashCode ( ) ) ) % repeatFrequency ) ; 
 + final long key = ( ( long ) column * repeatFrequency ) + ( ( seed = = null ? index : Math . abs ( seed . hashCode ( ) ) ) % repeatFrequency ) ; 
 byte [ ] r = cache . get ( key ) ; 
 if ( r ! = null ) 
 return r ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 76bb8cb . . 4584383 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 22 , 6 + 22 , 8 @ @ Merged from 1 . 0 : 
 * ( cqlsh ) ignore missing CfDef opts ( CASSANDRA - 3933 ) 
 * ( cqlsh ) look for cqlshlib relative to realpath ( CASSANDRA - 3767 ) 
 * Fix short read protection ( CASSANDRA - 3934 ) 
 + * don ' t change manifest level for cleanup , scrub , and upgradesstables 
 + operations under LeveledCompactionStrategy ( CASSANDRA - 3989 ) 
 * always compact away deleted hints immediately after handoff ( CASSANDRA - 3955 ) 
 * delete hints from dropped ColumnFamilies on handoff instead of 
 erroring out ( CASSANDRA - 3975 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 index 4c63180 . . a546cbc 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledManifest . java 
 @ @ - 61 , 7 + 61 , 6 @ @ public class LeveledManifest 
 private final List < SSTableReader > [ ] generations ; 
 private final RowPosition [ ] lastCompactedKeys ; 
 private final int maxSSTableSizeInMB ; 
 - private int levelCount ; 
 
 private LeveledManifest ( ColumnFamilyStore cfs , int maxSSTableSizeInMB ) 
 { 
 @ @ - 175 , 7 + 174 , 13 @ @ public class LeveledManifest 
 if ( ! added . iterator ( ) . hasNext ( ) ) 
 return ; 
 
 - int newLevel = minimumLevel = = maximumLevel ? maximumLevel + 1 : maximumLevel ; 
 + / / avoid increasing the level if we had a single source sstable involved . This prevents 
 + / / cleanup , scrub , and upgradesstables from blowing through the level cap . 
 + / / See CASSANDRA - 3989 
 + int newLevel = Iterables . size ( removed ) = = 1 
 + ? maximumLevel 
 + : minimumLevel = = maximumLevel ? maximumLevel + 1 : maximumLevel ; 
 + 
 newLevel = skipLevels ( newLevel , added ) ; 
 assert newLevel > 0 ; 
 if ( logger . isDebugEnabled ( ) ) 
 @ @ - 295 , 6 + 300 , 7 @ @ public class LeveledManifest 
 
 private void add ( SSTableReader sstable , int level ) 
 { 
 + assert level < generations . length : " Invalid level " + level + " out of " + ( generations . length - 1 ) ; 
 generations [ level ] . add ( sstable ) ; 
 } 

