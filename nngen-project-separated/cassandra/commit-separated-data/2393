BLEU SCORE: 0.040583489434387374

TEST MSG: Display generation / heartbeat in gossipinfo
GENERATED MSG: remove silly throws decl

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index f5c500c . . ac54414 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 141 , 6 + 141 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> <nl> private void appendEndpointState ( StringBuilder sb , EndpointState endpointState ) <nl> { <nl> + sb . append ( " generation : " ) . append ( endpointState . getHeartBeatState ( ) . getGeneration ( ) ) . append ( " \ n " ) ; <nl> + sb . append ( " heartbeat : " ) . append ( endpointState . getHeartBeatState ( ) . getHeartBeatVersion ( ) ) . append ( " \ n " ) ; <nl> for ( Map . Entry < ApplicationState , VersionedValue > state : endpointState . applicationState . entrySet ( ) ) <nl> { <nl> if ( state . getKey ( ) = = ApplicationState . TOKENS )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index fa4df36 . . b08f967 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> ( CASSANDRA - 5692 ) <nl> * Fix skipping range tombstones with reverse queries ( CASSANDRA - 5712 ) <nl> * Expire entries out of ThriftSessionManager ( CASSANRDA - 5719 ) <nl> + * Don ' t keep ancestor information in memory ( CASSANDRA - 5342 ) <nl> <nl> 1 . 2 . 6 <nl> * Fix tracing when operation completes before all responses arrive <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java <nl> index 865c2ea . . de51ea9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . io . sstable ; <nl> import java . io . * ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . StreamingHistogram ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 55 , 7 + 56 , 6 @ @ public class SSTableMetadata <nl> public final long maxTimestamp ; <nl> public final double compressionRatio ; <nl> public final String partitioner ; <nl> - public final Set < Integer > ancestors ; <nl> public final StreamingHistogram estimatedTombstoneDropTime ; <nl> <nl> private SSTableMetadata ( ) <nl> @ @ - 67 , 7 + 67 , 6 @ @ public class SSTableMetadata <nl> Long . MAX _ VALUE , <nl> NO _ COMPRESSION _ RATIO , <nl> null , <nl> - Collections . < Integer > emptySet ( ) , <nl> defaultTombstoneDropTimeHistogram ( ) ) ; <nl> } <nl> <nl> @ @ - 78 , 7 + 77 , 6 @ @ public class SSTableMetadata <nl> long maxTimestamp , <nl> double cr , <nl> String partitioner , <nl> - Set < Integer > ancestors , <nl> StreamingHistogram estimatedTombstoneDropTime ) <nl> { <nl> this . estimatedRowSize = rowSizes ; <nl> @ @ - 88 , 7 + 86 , 6 @ @ public class SSTableMetadata <nl> this . maxTimestamp = maxTimestamp ; <nl> this . compressionRatio = cr ; <nl> this . partitioner = partitioner ; <nl> - this . ancestors = ancestors ; <nl> this . estimatedTombstoneDropTime = estimatedTombstoneDropTime ; <nl> } <nl> <nl> @ @ - 193 , 7 + 190 , 6 @ @ public class SSTableMetadata <nl> maxTimestamp , <nl> compressionRatio , <nl> partitioner , <nl> - ancestors , <nl> estimatedTombstoneDropTime ) ; <nl> } <nl> <nl> @ @ - 242 , 7 + 238 , 7 @ @ public class SSTableMetadata <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( SSTableMetadataSerializer . class ) ; <nl> <nl> - public void serialize ( SSTableMetadata sstableStats , DataOutput dos ) throws IOException <nl> + public void serialize ( SSTableMetadata sstableStats , Set < Integer > ancestors , DataOutput dos ) throws IOException <nl> { <nl> assert sstableStats . partitioner ! = null ; <nl> <nl> @ @ - 253 , 20 + 249 , 31 @ @ public class SSTableMetadata <nl> dos . writeLong ( sstableStats . maxTimestamp ) ; <nl> dos . writeDouble ( sstableStats . compressionRatio ) ; <nl> dos . writeUTF ( sstableStats . partitioner ) ; <nl> - dos . writeInt ( sstableStats . ancestors . size ( ) ) ; <nl> - for ( Integer g : sstableStats . ancestors ) <nl> + dos . writeInt ( ancestors . size ( ) ) ; <nl> + for ( Integer g : ancestors ) <nl> dos . writeInt ( g ) ; <nl> StreamingHistogram . serializer . serialize ( sstableStats . estimatedTombstoneDropTime , dos ) ; <nl> } <nl> <nl> - public SSTableMetadata deserialize ( Descriptor descriptor ) throws IOException <nl> + / * * <nl> + * deserializes the metadata <nl> + * <nl> + * returns a pair containing the part of the metadata meant to be kept - in memory and the part <nl> + * that should not . <nl> + * <nl> + * @ param descriptor the descriptor <nl> + * @ return a pair containing data that needs to be in memory and data that is potentially big and is not needed <nl> + * in memory <nl> + * @ throws IOException <nl> + * / <nl> + public Pair < SSTableMetadata , Set < Integer > > deserialize ( Descriptor descriptor ) throws IOException <nl> { <nl> logger . debug ( " Load metadata for { } " , descriptor ) ; <nl> File statsFile = new File ( descriptor . filenameFor ( SSTable . COMPONENT _ STATS ) ) ; <nl> if ( ! statsFile . exists ( ) ) <nl> { <nl> logger . debug ( " No sstable stats for { } " , descriptor ) ; <nl> - return new SSTableMetadata ( ) ; <nl> + return Pair . create ( new SSTableMetadata ( ) , Collections . < Integer > emptySet ( ) ) ; <nl> } <nl> <nl> DataInputStream dis = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( statsFile ) ) ) ; <nl> @ @ - 280 , 7 + 287 , 7 @ @ public class SSTableMetadata <nl> } <nl> } <nl> <nl> - public SSTableMetadata deserialize ( DataInputStream dis , Descriptor desc ) throws IOException <nl> + public Pair < SSTableMetadata , Set < Integer > > deserialize ( DataInputStream dis , Descriptor desc ) throws IOException <nl> { <nl> EstimatedHistogram rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> EstimatedHistogram columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> @ @ - 308 , 7 + 315 , 15 @ @ public class SSTableMetadata <nl> StreamingHistogram tombstoneHistogram = desc . version . tracksTombstones <nl> ? StreamingHistogram . serializer . deserialize ( dis ) <nl> : defaultTombstoneDropTimeHistogram ( ) ; <nl> - return new SSTableMetadata ( rowSizes , columnCounts , replayPosition , minTimestamp , maxTimestamp , compressionRatio , partitioner , ancestors , tombstoneHistogram ) ; <nl> + return Pair . create ( new SSTableMetadata ( rowSizes , <nl> + columnCounts , <nl> + replayPosition , <nl> + minTimestamp , <nl> + maxTimestamp , <nl> + compressionRatio , <nl> + partitioner , <nl> + tombstoneHistogram ) , <nl> + ancestors ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index ea9c451 . . ab58c11 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 168 , 7 + 168 , 7 @ @ public class SSTableReader extends SSTable <nl> long start = System . currentTimeMillis ( ) ; <nl> logger . info ( " Opening { } ( { } bytes ) " , descriptor , new File ( descriptor . filenameFor ( COMPONENT _ DATA ) ) . length ( ) ) ; <nl> <nl> - SSTableMetadata sstableMetadata = SSTableMetadata . serializer . deserialize ( descriptor ) ; <nl> + SSTableMetadata sstableMetadata = SSTableMetadata . serializer . deserialize ( descriptor ) . left ; <nl> <nl> / / Check if sstable is created using same partitioner . <nl> / / Partitioner can be null , which indicates older version of sstable or no stats available . <nl> @ @ - 1116 , 7 + 1116 , 15 @ @ public class SSTableReader extends SSTable <nl> <nl> public Set < Integer > getAncestors ( ) <nl> { <nl> - return sstableMetadata . ancestors ; <nl> + try <nl> + { <nl> + return SSTableMetadata . serializer . deserialize ( descriptor ) . right ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + SSTableReader . logOpenException ( descriptor , e ) ; <nl> + return Collections . emptySet ( ) ; <nl> + } <nl> } <nl> <nl> public RandomAccessReader openDataReader ( RateLimiter limiter ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 51aeaa6 . . 54e154c 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 328 , 7 + 328 , 7 @ @ public class SSTableWriter extends SSTable <nl> dataFile . close ( ) ; <nl> / / write sstable statistics <nl> SSTableMetadata sstableMetadata = sstableMetadataCollector . finalizeMetadata ( partitioner . getClass ( ) . getCanonicalName ( ) ) ; <nl> - writeMetadata ( descriptor , sstableMetadata ) ; <nl> + writeMetadata ( descriptor , sstableMetadata , sstableMetadataCollector . ancestors ) ; <nl> maybeWriteDigest ( ) ; <nl> <nl> / / save the table of components <nl> @ @ - 381 , 12 + 381 , 12 @ @ public class SSTableWriter extends SSTable <nl> out . close ( ) ; <nl> } <nl> <nl> - private static void writeMetadata ( Descriptor desc , SSTableMetadata sstableMetadata ) <nl> + private static void writeMetadata ( Descriptor desc , SSTableMetadata sstableMetadata , Set < Integer > ancestors ) <nl> { <nl> SequentialWriter out = SequentialWriter . open ( new File ( desc . filenameFor ( SSTable . COMPONENT _ STATS ) ) , true ) ; <nl> try <nl> { <nl> - SSTableMetadata . serializer . serialize ( sstableMetadata , out . stream ) ; <nl> + SSTableMetadata . serializer . serialize ( sstableMetadata , ancestors , out . stream ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> index c1f0332 . . 55f2769 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class SSTableMetadataViewer <nl> for ( String fname : args ) <nl> { <nl> Descriptor descriptor = Descriptor . fromFilename ( fname ) ; <nl> - SSTableMetadata metadata = SSTableMetadata . serializer . deserialize ( descriptor ) ; <nl> + SSTableMetadata metadata = SSTableMetadata . serializer . deserialize ( descriptor ) . left ; <nl> <nl> out . printf ( " SSTable : % s % n " , descriptor ) ; <nl> out . printf ( " Partitioner : % s % n " , metadata . partitioner ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java <nl> index ab96f89 . . 3e8ef42 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java <nl> @ @ - 24 , 12 + 24 , 16 @ @ import java . io . DataOutputStream ; <nl> import java . io . DataInputStream ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashSet ; <nl> + import java . util . Set ; <nl> <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> import org . apache . cassandra . utils . EstimatedHistogram ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> <nl> public class SSTableMetadataSerializerTest <nl> { <nl> @ @ - 56 , 13 + 60 , 15 @ @ public class SSTableMetadataSerializerTest <nl> <nl> ByteArrayOutputStream byteOutput = new ByteArrayOutputStream ( ) ; <nl> DataOutputStream dos = new DataOutputStream ( byteOutput ) ; <nl> - <nl> - SSTableMetadata . serializer . serialize ( originalMetadata , dos ) ; <nl> + Set < Integer > ancestors = new HashSet < Integer > ( ) ; <nl> + ancestors . addAll ( Arrays . asList ( 1 , 2 , 3 , 4 ) ) ; <nl> + SSTableMetadata . serializer . serialize ( originalMetadata , ancestors , dos ) ; <nl> <nl> ByteArrayInputStream byteInput = new ByteArrayInputStream ( byteOutput . toByteArray ( ) ) ; <nl> DataInputStream dis = new DataInputStream ( byteInput ) ; <nl> Descriptor desc = new Descriptor ( Descriptor . Version . CURRENT , new File ( " . " ) , " " , " " , 0 , false ) ; <nl> - SSTableMetadata stats = SSTableMetadata . serializer . deserialize ( dis , desc ) ; <nl> + Pair < SSTableMetadata , Set < Integer > > statsPair = SSTableMetadata . serializer . deserialize ( dis , desc ) ; <nl> + SSTableMetadata stats = statsPair . left ; <nl> <nl> assert stats . estimatedRowSize . equals ( originalMetadata . estimatedRowSize ) ; <nl> assert stats . estimatedRowSize . equals ( rowSizes ) ; <nl> @ @ - 75 , 5 + 81 , 6 @ @ public class SSTableMetadataSerializerTest <nl> assert stats . minTimestamp = = originalMetadata . minTimestamp ; <nl> assert stats . maxTimestamp = = originalMetadata . maxTimestamp ; <nl> assert RandomPartitioner . class . getCanonicalName ( ) . equals ( stats . partitioner ) ; <nl> + assert ancestors . equals ( statsPair . right ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index f5c500c . . ac54414 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 141 , 6 + 141 , 8 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 
 private void appendEndpointState ( StringBuilder sb , EndpointState endpointState ) 
 { 
 + sb . append ( " generation : " ) . append ( endpointState . getHeartBeatState ( ) . getGeneration ( ) ) . append ( " \ n " ) ; 
 + sb . append ( " heartbeat : " ) . append ( endpointState . getHeartBeatState ( ) . getHeartBeatVersion ( ) ) . append ( " \ n " ) ; 
 for ( Map . Entry < ApplicationState , VersionedValue > state : endpointState . applicationState . entrySet ( ) ) 
 { 
 if ( state . getKey ( ) = = ApplicationState . TOKENS )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index fa4df36 . . b08f967 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 ( CASSANDRA - 5692 ) 
 * Fix skipping range tombstones with reverse queries ( CASSANDRA - 5712 ) 
 * Expire entries out of ThriftSessionManager ( CASSANRDA - 5719 ) 
 + * Don ' t keep ancestor information in memory ( CASSANDRA - 5342 ) 
 
 1 . 2 . 6 
 * Fix tracing when operation completes before all responses arrive 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java 
 index 865c2ea . . de51ea9 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableMetadata . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . io . sstable ; 
 import java . io . * ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . StreamingHistogram ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 55 , 7 + 56 , 6 @ @ public class SSTableMetadata 
 public final long maxTimestamp ; 
 public final double compressionRatio ; 
 public final String partitioner ; 
 - public final Set < Integer > ancestors ; 
 public final StreamingHistogram estimatedTombstoneDropTime ; 
 
 private SSTableMetadata ( ) 
 @ @ - 67 , 7 + 67 , 6 @ @ public class SSTableMetadata 
 Long . MAX _ VALUE , 
 NO _ COMPRESSION _ RATIO , 
 null , 
 - Collections . < Integer > emptySet ( ) , 
 defaultTombstoneDropTimeHistogram ( ) ) ; 
 } 
 
 @ @ - 78 , 7 + 77 , 6 @ @ public class SSTableMetadata 
 long maxTimestamp , 
 double cr , 
 String partitioner , 
 - Set < Integer > ancestors , 
 StreamingHistogram estimatedTombstoneDropTime ) 
 { 
 this . estimatedRowSize = rowSizes ; 
 @ @ - 88 , 7 + 86 , 6 @ @ public class SSTableMetadata 
 this . maxTimestamp = maxTimestamp ; 
 this . compressionRatio = cr ; 
 this . partitioner = partitioner ; 
 - this . ancestors = ancestors ; 
 this . estimatedTombstoneDropTime = estimatedTombstoneDropTime ; 
 } 
 
 @ @ - 193 , 7 + 190 , 6 @ @ public class SSTableMetadata 
 maxTimestamp , 
 compressionRatio , 
 partitioner , 
 - ancestors , 
 estimatedTombstoneDropTime ) ; 
 } 
 
 @ @ - 242 , 7 + 238 , 7 @ @ public class SSTableMetadata 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( SSTableMetadataSerializer . class ) ; 
 
 - public void serialize ( SSTableMetadata sstableStats , DataOutput dos ) throws IOException 
 + public void serialize ( SSTableMetadata sstableStats , Set < Integer > ancestors , DataOutput dos ) throws IOException 
 { 
 assert sstableStats . partitioner ! = null ; 
 
 @ @ - 253 , 20 + 249 , 31 @ @ public class SSTableMetadata 
 dos . writeLong ( sstableStats . maxTimestamp ) ; 
 dos . writeDouble ( sstableStats . compressionRatio ) ; 
 dos . writeUTF ( sstableStats . partitioner ) ; 
 - dos . writeInt ( sstableStats . ancestors . size ( ) ) ; 
 - for ( Integer g : sstableStats . ancestors ) 
 + dos . writeInt ( ancestors . size ( ) ) ; 
 + for ( Integer g : ancestors ) 
 dos . writeInt ( g ) ; 
 StreamingHistogram . serializer . serialize ( sstableStats . estimatedTombstoneDropTime , dos ) ; 
 } 
 
 - public SSTableMetadata deserialize ( Descriptor descriptor ) throws IOException 
 + / * * 
 + * deserializes the metadata 
 + * 
 + * returns a pair containing the part of the metadata meant to be kept - in memory and the part 
 + * that should not . 
 + * 
 + * @ param descriptor the descriptor 
 + * @ return a pair containing data that needs to be in memory and data that is potentially big and is not needed 
 + * in memory 
 + * @ throws IOException 
 + * / 
 + public Pair < SSTableMetadata , Set < Integer > > deserialize ( Descriptor descriptor ) throws IOException 
 { 
 logger . debug ( " Load metadata for { } " , descriptor ) ; 
 File statsFile = new File ( descriptor . filenameFor ( SSTable . COMPONENT _ STATS ) ) ; 
 if ( ! statsFile . exists ( ) ) 
 { 
 logger . debug ( " No sstable stats for { } " , descriptor ) ; 
 - return new SSTableMetadata ( ) ; 
 + return Pair . create ( new SSTableMetadata ( ) , Collections . < Integer > emptySet ( ) ) ; 
 } 
 
 DataInputStream dis = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( statsFile ) ) ) ; 
 @ @ - 280 , 7 + 287 , 7 @ @ public class SSTableMetadata 
 } 
 } 
 
 - public SSTableMetadata deserialize ( DataInputStream dis , Descriptor desc ) throws IOException 
 + public Pair < SSTableMetadata , Set < Integer > > deserialize ( DataInputStream dis , Descriptor desc ) throws IOException 
 { 
 EstimatedHistogram rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 EstimatedHistogram columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 @ @ - 308 , 7 + 315 , 15 @ @ public class SSTableMetadata 
 StreamingHistogram tombstoneHistogram = desc . version . tracksTombstones 
 ? StreamingHistogram . serializer . deserialize ( dis ) 
 : defaultTombstoneDropTimeHistogram ( ) ; 
 - return new SSTableMetadata ( rowSizes , columnCounts , replayPosition , minTimestamp , maxTimestamp , compressionRatio , partitioner , ancestors , tombstoneHistogram ) ; 
 + return Pair . create ( new SSTableMetadata ( rowSizes , 
 + columnCounts , 
 + replayPosition , 
 + minTimestamp , 
 + maxTimestamp , 
 + compressionRatio , 
 + partitioner , 
 + tombstoneHistogram ) , 
 + ancestors ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index ea9c451 . . ab58c11 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 168 , 7 + 168 , 7 @ @ public class SSTableReader extends SSTable 
 long start = System . currentTimeMillis ( ) ; 
 logger . info ( " Opening { } ( { } bytes ) " , descriptor , new File ( descriptor . filenameFor ( COMPONENT _ DATA ) ) . length ( ) ) ; 
 
 - SSTableMetadata sstableMetadata = SSTableMetadata . serializer . deserialize ( descriptor ) ; 
 + SSTableMetadata sstableMetadata = SSTableMetadata . serializer . deserialize ( descriptor ) . left ; 
 
 / / Check if sstable is created using same partitioner . 
 / / Partitioner can be null , which indicates older version of sstable or no stats available . 
 @ @ - 1116 , 7 + 1116 , 15 @ @ public class SSTableReader extends SSTable 
 
 public Set < Integer > getAncestors ( ) 
 { 
 - return sstableMetadata . ancestors ; 
 + try 
 + { 
 + return SSTableMetadata . serializer . deserialize ( descriptor ) . right ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + SSTableReader . logOpenException ( descriptor , e ) ; 
 + return Collections . emptySet ( ) ; 
 + } 
 } 
 
 public RandomAccessReader openDataReader ( RateLimiter limiter ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 51aeaa6 . . 54e154c 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 328 , 7 + 328 , 7 @ @ public class SSTableWriter extends SSTable 
 dataFile . close ( ) ; 
 / / write sstable statistics 
 SSTableMetadata sstableMetadata = sstableMetadataCollector . finalizeMetadata ( partitioner . getClass ( ) . getCanonicalName ( ) ) ; 
 - writeMetadata ( descriptor , sstableMetadata ) ; 
 + writeMetadata ( descriptor , sstableMetadata , sstableMetadataCollector . ancestors ) ; 
 maybeWriteDigest ( ) ; 
 
 / / save the table of components 
 @ @ - 381 , 12 + 381 , 12 @ @ public class SSTableWriter extends SSTable 
 out . close ( ) ; 
 } 
 
 - private static void writeMetadata ( Descriptor desc , SSTableMetadata sstableMetadata ) 
 + private static void writeMetadata ( Descriptor desc , SSTableMetadata sstableMetadata , Set < Integer > ancestors ) 
 { 
 SequentialWriter out = SequentialWriter . open ( new File ( desc . filenameFor ( SSTable . COMPONENT _ STATS ) ) , true ) ; 
 try 
 { 
 - SSTableMetadata . serializer . serialize ( sstableMetadata , out . stream ) ; 
 + SSTableMetadata . serializer . serialize ( sstableMetadata , ancestors , out . stream ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 index c1f0332 . . 55f2769 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class SSTableMetadataViewer 
 for ( String fname : args ) 
 { 
 Descriptor descriptor = Descriptor . fromFilename ( fname ) ; 
 - SSTableMetadata metadata = SSTableMetadata . serializer . deserialize ( descriptor ) ; 
 + SSTableMetadata metadata = SSTableMetadata . serializer . deserialize ( descriptor ) . left ; 
 
 out . printf ( " SSTable : % s % n " , descriptor ) ; 
 out . printf ( " Partitioner : % s % n " , metadata . partitioner ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java 
 index ab96f89 . . 3e8ef42 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableMetadataSerializerTest . java 
 @ @ - 24 , 12 + 24 , 16 @ @ import java . io . DataOutputStream ; 
 import java . io . DataInputStream ; 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . HashSet ; 
 + import java . util . Set ; 
 
 import org . junit . Test ; 
 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 import org . apache . cassandra . utils . EstimatedHistogram ; 
 + import org . apache . cassandra . utils . Pair ; 
 
 public class SSTableMetadataSerializerTest 
 { 
 @ @ - 56 , 13 + 60 , 15 @ @ public class SSTableMetadataSerializerTest 
 
 ByteArrayOutputStream byteOutput = new ByteArrayOutputStream ( ) ; 
 DataOutputStream dos = new DataOutputStream ( byteOutput ) ; 
 - 
 - SSTableMetadata . serializer . serialize ( originalMetadata , dos ) ; 
 + Set < Integer > ancestors = new HashSet < Integer > ( ) ; 
 + ancestors . addAll ( Arrays . asList ( 1 , 2 , 3 , 4 ) ) ; 
 + SSTableMetadata . serializer . serialize ( originalMetadata , ancestors , dos ) ; 
 
 ByteArrayInputStream byteInput = new ByteArrayInputStream ( byteOutput . toByteArray ( ) ) ; 
 DataInputStream dis = new DataInputStream ( byteInput ) ; 
 Descriptor desc = new Descriptor ( Descriptor . Version . CURRENT , new File ( " . " ) , " " , " " , 0 , false ) ; 
 - SSTableMetadata stats = SSTableMetadata . serializer . deserialize ( dis , desc ) ; 
 + Pair < SSTableMetadata , Set < Integer > > statsPair = SSTableMetadata . serializer . deserialize ( dis , desc ) ; 
 + SSTableMetadata stats = statsPair . left ; 
 
 assert stats . estimatedRowSize . equals ( originalMetadata . estimatedRowSize ) ; 
 assert stats . estimatedRowSize . equals ( rowSizes ) ; 
 @ @ - 75 , 5 + 81 , 6 @ @ public class SSTableMetadataSerializerTest 
 assert stats . minTimestamp = = originalMetadata . minTimestamp ; 
 assert stats . maxTimestamp = = originalMetadata . maxTimestamp ; 
 assert RandomPartitioner . class . getCanonicalName ( ) . equals ( stats . partitioner ) ; 
 + assert ancestors . equals ( statsPair . right ) ; 
 } 
 }
