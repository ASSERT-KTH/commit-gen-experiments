BLEU SCORE: 0.1371269342812163

TEST MSG: fix String . format to match markers and parameters
GENERATED MSG: fix String . format format specifier char for float value ( d - > f )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java <nl> index bcbdab6 . . 07df606 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java <nl> @ @ - 114 , 12 + 114 , 12 @ @ public final class TimeWindowCompactionStrategyOptions <nl> int sstableWindowSize = optionValue = = null ? DEFAULT _ COMPACTION _ WINDOW _ SIZE : Integer . parseInt ( optionValue ) ; <nl> if ( sstableWindowSize < 1 ) <nl> { <nl> - throw new ConfigurationException ( String . format ( " % s must be greater than 1 " , DEFAULT _ COMPACTION _ WINDOW _ SIZE , sstableWindowSize ) ) ; <nl> + throw new ConfigurationException ( String . format ( " % d must be greater than 1 for % s " , sstableWindowSize , COMPACTION _ WINDOW _ SIZE _ KEY ) ) ; <nl> } <nl> } <nl> catch ( NumberFormatException e ) <nl> { <nl> - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , DEFAULT _ COMPACTION _ WINDOW _ SIZE ) , e ) ; <nl> + throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , COMPACTION _ WINDOW _ SIZE _ KEY ) , e ) ; <nl> } <nl> <nl> optionValue = options . get ( EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 61bcf60 . . 1ad77b1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * fix saved key cache not loading at startup ( CASSANDRA - 5166 ) <nl> * fix ConcurrentModificationException in getBootstrapSource ( CASSANDRA - 5170 ) <nl> * fix sstable maxtimestamp for row deletes and pre - 1 . 1 . 1 sstables ( CASSANDRA - 5153 ) <nl> + * fix start key / end token validation for wide row iteration ( CASSANDRA - 5168 ) <nl> <nl> <nl> 1 . 1 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index bc64018 . . 4f40938 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 511 , 7 + 511 , 7 @ @ public class ThriftValidation <nl> { <nl> / / start _ token / end _ token can wrap , but key / token should not <nl> RowPosition stop = p . getTokenFactory ( ) . fromString ( range . end _ token ) . maxKeyBound ( p ) ; <nl> - if ( RowPosition . forKey ( range . start _ key , p ) . compareTo ( stop ) > 0 ) <nl> + if ( RowPosition . forKey ( range . start _ key , p ) . compareTo ( stop ) > 0 & & ! stop . isMinimum ( ) ) <nl> throw new InvalidRequestException ( " Start key ' s token sorts after end token " ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java 
 index bcbdab6 . . 07df606 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java 
 @ @ - 114 , 12 + 114 , 12 @ @ public final class TimeWindowCompactionStrategyOptions 
 int sstableWindowSize = optionValue = = null ? DEFAULT _ COMPACTION _ WINDOW _ SIZE : Integer . parseInt ( optionValue ) ; 
 if ( sstableWindowSize < 1 ) 
 { 
 - throw new ConfigurationException ( String . format ( " % s must be greater than 1 " , DEFAULT _ COMPACTION _ WINDOW _ SIZE , sstableWindowSize ) ) ; 
 + throw new ConfigurationException ( String . format ( " % d must be greater than 1 for % s " , sstableWindowSize , COMPACTION _ WINDOW _ SIZE _ KEY ) ) ; 
 } 
 } 
 catch ( NumberFormatException e ) 
 { 
 - throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , DEFAULT _ COMPACTION _ WINDOW _ SIZE ) , e ) ; 
 + throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , COMPACTION _ WINDOW _ SIZE _ KEY ) , e ) ; 
 } 
 
 optionValue = options . get ( EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 61bcf60 . . 1ad77b1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * fix saved key cache not loading at startup ( CASSANDRA - 5166 ) 
 * fix ConcurrentModificationException in getBootstrapSource ( CASSANDRA - 5170 ) 
 * fix sstable maxtimestamp for row deletes and pre - 1 . 1 . 1 sstables ( CASSANDRA - 5153 ) 
 + * fix start key / end token validation for wide row iteration ( CASSANDRA - 5168 ) 
 
 
 1 . 1 . 9 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index bc64018 . . 4f40938 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 511 , 7 + 511 , 7 @ @ public class ThriftValidation 
 { 
 / / start _ token / end _ token can wrap , but key / token should not 
 RowPosition stop = p . getTokenFactory ( ) . fromString ( range . end _ token ) . maxKeyBound ( p ) ; 
 - if ( RowPosition . forKey ( range . start _ key , p ) . compareTo ( stop ) > 0 ) 
 + if ( RowPosition . forKey ( range . start _ key , p ) . compareTo ( stop ) > 0 & & ! stop . isMinimum ( ) ) 
 throw new InvalidRequestException ( " Start key ' s token sorts after end token " ) ; 
 } 

