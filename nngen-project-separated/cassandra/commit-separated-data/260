BLEU SCORE: 0.05341087579952926

TEST MSG: Expose recent histograms in JmxHistograms
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 635c2f4 . . e006db3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Expose recent histograms in JmxHistograms ( CASSANDRA - 13642 ) <nl> * Fix buffer length comparison when decompressing in netty - based streaming ( CASSANDRA - 13899 ) <nl> * Properly close StreamCompressionInputStream to release any ByteBuf ( CASSANDRA - 13906 ) <nl> * Add SERIAL and LOCAL _ SERIAL support for cassandra - stress ( CASSANDRA - 13925 ) <nl> diff - - git a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java <nl> index e1a5703 . . 97a932b 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java <nl> + + + b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java <nl> @ @ - 23 , 6 + 23 , 8 @ @ import java . util . Locale ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import com . codahale . metrics . * ; <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> import javax . management . * ; <nl> <nl> / * * <nl> @ @ - 273 , 11 + 275 , 14 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> double get999thPercentile ( ) ; <nl> <nl> long [ ] values ( ) ; <nl> + <nl> + long [ ] getRecentValues ( ) ; <nl> } <nl> <nl> private static class JmxHistogram extends AbstractBean implements JmxHistogramMBean <nl> { <nl> private final Histogram metric ; <nl> + private long [ ] last = null ; <nl> <nl> private JmxHistogram ( Histogram metric , ObjectName objectName ) <nl> { <nl> @ @ - 356 , 6 + 361 , 15 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> { <nl> return metric . getSnapshot ( ) . getValues ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public long [ ] getRecentValues ( ) <nl> + { <nl> + long [ ] now = metric . getSnapshot ( ) . getValues ( ) ; <nl> + long [ ] delta = delta ( now , last ) ; <nl> + last = now ; <nl> + return delta ; <nl> + } <nl> } <nl> <nl> public interface JmxCounterMBean extends MetricMBean <nl> @ @ - 476 , 6 + 490 , 8 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> <nl> long [ ] values ( ) ; <nl> <nl> + long [ ] getRecentValues ( ) ; <nl> + <nl> String getDurationUnit ( ) ; <nl> } <nl> <nl> @ @ - 484 , 6 + 500 , 7 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> private final Timer metric ; <nl> private final double durationFactor ; <nl> private final String durationUnit ; <nl> + private long [ ] last = null ; <nl> <nl> private JmxTimer ( Timer metric , <nl> ObjectName objectName , <nl> @ @ - 563 , 6 + 580 , 15 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> } <nl> <nl> @ Override <nl> + public long [ ] getRecentValues ( ) <nl> + { <nl> + long [ ] now = metric . getSnapshot ( ) . getValues ( ) ; <nl> + long [ ] delta = delta ( now , last ) ; <nl> + last = now ; <nl> + return delta ; <nl> + } <nl> + <nl> + @ Override <nl> public String getDurationUnit ( ) <nl> { <nl> return durationUnit ; <nl> @ @ - 570 , 6 + 596 , 28 @ @ public class CassandraMetricsRegistry extends MetricRegistry <nl> } <nl> <nl> / * * <nl> + * Used to determine the changes in a histogram since the last time checked . <nl> + * <nl> + * @ param now The current histogram <nl> + * @ param last The previous value of the histogram <nl> + * @ return the difference between < i > now < / > and < i > last < / i > <nl> + * / <nl> + @ VisibleForTesting <nl> + static long [ ] delta ( long [ ] now , long [ ] last ) <nl> + { <nl> + long [ ] delta = new long [ now . length ] ; <nl> + if ( last = = null ) <nl> + { <nl> + last = new long [ now . length ] ; <nl> + } <nl> + for ( int i = 0 ; i < now . length ; i + + ) <nl> + { <nl> + delta [ i ] = now [ i ] - ( i < last . length ? last [ i ] : 0 ) ; <nl> + } <nl> + return delta ; <nl> + } <nl> + <nl> + / * * <nl> * A value class encapsulating a metric ' s owning class and name . <nl> * / <nl> public static class MetricName implements Comparable < MetricName > <nl> diff - - git a / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java <nl> index 4a9b874 . . cd9866c 100644 <nl> - - - a / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java <nl> + + + b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java <nl> @ @ - 20 , 17 + 20 , 17 @ @ <nl> * / <nl> package org . apache . cassandra . metrics ; <nl> <nl> + import static org . junit . Assert . * ; <nl> + <nl> import java . lang . management . ManagementFactory ; <nl> import java . util . Collection ; <nl> <nl> + import org . apache . cassandra . metrics . CassandraMetricsRegistry . MetricName ; <nl> import org . junit . Test ; <nl> <nl> import com . codahale . metrics . jvm . BufferPoolMetricSet ; <nl> import com . codahale . metrics . jvm . GarbageCollectorMetricSet ; <nl> import com . codahale . metrics . jvm . MemoryUsageGaugeSet ; <nl> - import org . apache . cassandra . metrics . CassandraMetricsRegistry . MetricName ; <nl> - <nl> - import static org . junit . Assert . * ; <nl> <nl> <nl> public class CassandraMetricsRegistryTest <nl> @ @ - 86 , 4 + 86 , 25 @ @ public class CassandraMetricsRegistryTest <nl> } <nl> } <nl> <nl> - } <nl> \ No newline at end of file <nl> + @ Test <nl> + public void testDeltaBaseCase ( ) <nl> + { <nl> + long [ ] last = new long [ 10 ] ; <nl> + long [ ] now = new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; <nl> + / / difference between all zeros and a value should be the value <nl> + assertArrayEquals ( now , CassandraMetricsRegistry . delta ( now , last ) ) ; <nl> + / / the difference between itself should be all 0s <nl> + assertArrayEquals ( last , CassandraMetricsRegistry . delta ( now , now ) ) ; <nl> + / / verifying each value is calculated <nl> + assertArrayEquals ( new long [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } , <nl> + CassandraMetricsRegistry . delta ( new long [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } , now ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDeltaHistogramSizeChange ( ) <nl> + { <nl> + long [ ] count = new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ; <nl> + assertArrayEquals ( count , CassandraMetricsRegistry . delta ( count , new long [ 3 ] ) ) ; <nl> + assertArrayEquals ( new long [ 6 ] , CassandraMetricsRegistry . delta ( count , new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 635c2f4 . . e006db3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Expose recent histograms in JmxHistograms ( CASSANDRA - 13642 ) 
 * Fix buffer length comparison when decompressing in netty - based streaming ( CASSANDRA - 13899 ) 
 * Properly close StreamCompressionInputStream to release any ByteBuf ( CASSANDRA - 13906 ) 
 * Add SERIAL and LOCAL _ SERIAL support for cassandra - stress ( CASSANDRA - 13925 ) 
 diff - - git a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java 
 index e1a5703 . . 97a932b 100644 
 - - - a / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java 
 + + + b / src / java / org / apache / cassandra / metrics / CassandraMetricsRegistry . java 
 @ @ - 23 , 6 + 23 , 8 @ @ import java . util . Locale ; 
 import java . util . concurrent . TimeUnit ; 
 
 import com . codahale . metrics . * ; 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 import javax . management . * ; 
 
 / * * 
 @ @ - 273 , 11 + 275 , 14 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 double get999thPercentile ( ) ; 
 
 long [ ] values ( ) ; 
 + 
 + long [ ] getRecentValues ( ) ; 
 } 
 
 private static class JmxHistogram extends AbstractBean implements JmxHistogramMBean 
 { 
 private final Histogram metric ; 
 + private long [ ] last = null ; 
 
 private JmxHistogram ( Histogram metric , ObjectName objectName ) 
 { 
 @ @ - 356 , 6 + 361 , 15 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 { 
 return metric . getSnapshot ( ) . getValues ( ) ; 
 } 
 + 
 + @ Override 
 + public long [ ] getRecentValues ( ) 
 + { 
 + long [ ] now = metric . getSnapshot ( ) . getValues ( ) ; 
 + long [ ] delta = delta ( now , last ) ; 
 + last = now ; 
 + return delta ; 
 + } 
 } 
 
 public interface JmxCounterMBean extends MetricMBean 
 @ @ - 476 , 6 + 490 , 8 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 
 long [ ] values ( ) ; 
 
 + long [ ] getRecentValues ( ) ; 
 + 
 String getDurationUnit ( ) ; 
 } 
 
 @ @ - 484 , 6 + 500 , 7 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 private final Timer metric ; 
 private final double durationFactor ; 
 private final String durationUnit ; 
 + private long [ ] last = null ; 
 
 private JmxTimer ( Timer metric , 
 ObjectName objectName , 
 @ @ - 563 , 6 + 580 , 15 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 } 
 
 @ Override 
 + public long [ ] getRecentValues ( ) 
 + { 
 + long [ ] now = metric . getSnapshot ( ) . getValues ( ) ; 
 + long [ ] delta = delta ( now , last ) ; 
 + last = now ; 
 + return delta ; 
 + } 
 + 
 + @ Override 
 public String getDurationUnit ( ) 
 { 
 return durationUnit ; 
 @ @ - 570 , 6 + 596 , 28 @ @ public class CassandraMetricsRegistry extends MetricRegistry 
 } 
 
 / * * 
 + * Used to determine the changes in a histogram since the last time checked . 
 + * 
 + * @ param now The current histogram 
 + * @ param last The previous value of the histogram 
 + * @ return the difference between < i > now < / > and < i > last < / i > 
 + * / 
 + @ VisibleForTesting 
 + static long [ ] delta ( long [ ] now , long [ ] last ) 
 + { 
 + long [ ] delta = new long [ now . length ] ; 
 + if ( last = = null ) 
 + { 
 + last = new long [ now . length ] ; 
 + } 
 + for ( int i = 0 ; i < now . length ; i + + ) 
 + { 
 + delta [ i ] = now [ i ] - ( i < last . length ? last [ i ] : 0 ) ; 
 + } 
 + return delta ; 
 + } 
 + 
 + / * * 
 * A value class encapsulating a metric ' s owning class and name . 
 * / 
 public static class MetricName implements Comparable < MetricName > 
 diff - - git a / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java 
 index 4a9b874 . . cd9866c 100644 
 - - - a / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java 
 + + + b / test / unit / org / apache / cassandra / metrics / CassandraMetricsRegistryTest . java 
 @ @ - 20 , 17 + 20 , 17 @ @ 
 * / 
 package org . apache . cassandra . metrics ; 
 
 + import static org . junit . Assert . * ; 
 + 
 import java . lang . management . ManagementFactory ; 
 import java . util . Collection ; 
 
 + import org . apache . cassandra . metrics . CassandraMetricsRegistry . MetricName ; 
 import org . junit . Test ; 
 
 import com . codahale . metrics . jvm . BufferPoolMetricSet ; 
 import com . codahale . metrics . jvm . GarbageCollectorMetricSet ; 
 import com . codahale . metrics . jvm . MemoryUsageGaugeSet ; 
 - import org . apache . cassandra . metrics . CassandraMetricsRegistry . MetricName ; 
 - 
 - import static org . junit . Assert . * ; 
 
 
 public class CassandraMetricsRegistryTest 
 @ @ - 86 , 4 + 86 , 25 @ @ public class CassandraMetricsRegistryTest 
 } 
 } 
 
 - } 
 \ No newline at end of file 
 + @ Test 
 + public void testDeltaBaseCase ( ) 
 + { 
 + long [ ] last = new long [ 10 ] ; 
 + long [ ] now = new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; 
 + / / difference between all zeros and a value should be the value 
 + assertArrayEquals ( now , CassandraMetricsRegistry . delta ( now , last ) ) ; 
 + / / the difference between itself should be all 0s 
 + assertArrayEquals ( last , CassandraMetricsRegistry . delta ( now , now ) ) ; 
 + / / verifying each value is calculated 
 + assertArrayEquals ( new long [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 } , 
 + CassandraMetricsRegistry . delta ( new long [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 } , now ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDeltaHistogramSizeChange ( ) 
 + { 
 + long [ ] count = new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ; 
 + assertArrayEquals ( count , CassandraMetricsRegistry . delta ( count , new long [ 3 ] ) ) ; 
 + assertArrayEquals ( new long [ 6 ] , CassandraMetricsRegistry . delta ( count , new long [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
