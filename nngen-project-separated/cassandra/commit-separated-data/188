BLEU SCORE: 0.028398387225677897

TEST MSG: CVE - 2017 - 5929 Security vulnerability and redefine default log rotation policy .
GENERATED MSG: Prevent reloading of logback . xml from UDF sandbox

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e932b40 . . dd56770 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * CVE - 2017 - 5929 Security vulnerability and redefine default log rotation policy ( CASSANDRA - 14183 ) <nl> * Use JVM default SSL validation algorithm instead of custom default ( CASSANDRA - 13259 ) <nl> * Better document in code InetAddressAndPort usage post 7544 , incorporate port into UUIDGen node ( CASSANDRA - 14226 ) <nl> * Fix sstablemetadata date string for minLocalDeletionTime ( CASSANDRA - 14132 ) <nl> diff - - git a / build . xml b / build . xml <nl> index bc9f0a7 . . 4b6ae70 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 383 , 8 + 383 , 8 @ @ <nl> < dependency groupId = " org . slf4j " artifactId = " slf4j - api " version = " 1 . 7 . 25 " / > <nl> < dependency groupId = " org . slf4j " artifactId = " log4j - over - slf4j " version = " 1 . 7 . 25 " / > <nl> < dependency groupId = " org . slf4j " artifactId = " jcl - over - slf4j " version = " 1 . 7 . 25 " / > <nl> - < dependency groupId = " ch . qos . logback " artifactId = " logback - core " version = " 1 . 1 . 3 " / > <nl> - < dependency groupId = " ch . qos . logback " artifactId = " logback - classic " version = " 1 . 1 . 3 " / > <nl> + < dependency groupId = " ch . qos . logback " artifactId = " logback - core " version = " 1 . 2 . 3 " / > <nl> + < dependency groupId = " ch . qos . logback " artifactId = " logback - classic " version = " 1 . 2 . 3 " / > <nl> < dependency groupId = " org . codehaus . jackson " artifactId = " jackson - core - asl " version = " 1 . 9 . 2 " / > <nl> < dependency groupId = " org . codehaus . jackson " artifactId = " jackson - mapper - asl " version = " 1 . 9 . 2 " / > <nl> < dependency groupId = " com . googlecode . json - simple " artifactId = " json - simple " version = " 1 . 1 " / > <nl> diff - - git a / conf / logback . xml b / conf / logback . xml <nl> index a22f131 . . b2c5b10 100644 <nl> - - - a / conf / logback . xml <nl> + + + b / conf / logback . xml <nl> @ @ - 22 , 7 + 22 , 7 @ @ In order to disable debug . log , comment - out the ASYNCDEBUGLOG <nl> appender reference in the root level section below . <nl> - - > <nl> <nl> - < configuration scan = " true " > <nl> + < configuration scan = " true " scanPeriod = " 60 seconds " > <nl> < jmxConfigurator / > <nl> <nl> < ! - - No shutdown hook ; we run it ourselves in StorageService after shutdown - - > <nl> @ @ - 34 , 14 + 34 , 14 @ @ appender reference in the root level section below . <nl> < level > INFO < / level > <nl> < / filter > <nl> < file > $ { cassandra . logdir } / system . log < / file > <nl> - < rollingPolicy class = " ch . qos . logback . core . rolling . FixedWindowRollingPolicy " > <nl> - < fileNamePattern > $ { cassandra . logdir } / system . log . % i . zip < / fileNamePattern > <nl> - < minIndex > 1 < / minIndex > <nl> - < maxIndex > 20 < / maxIndex > <nl> + < rollingPolicy class = " ch . qos . logback . core . rolling . SizeAndTimeBasedRollingPolicy " > <nl> + < ! - - rollover daily - - > <nl> + < fileNamePattern > $ { cassandra . logdir } / system . log . % d { yyyy - MM - dd } . % i . zip < / fileNamePattern > <nl> + < ! - - each file should be at most 50MB , keep 7 days worth of history , but at most 5GB - - > <nl> + < maxFileSize > 50MB < / maxFileSize > <nl> + < maxHistory > 7 < / maxHistory > <nl> + < totalSizeCap > 5GB < / totalSizeCap > <nl> < / rollingPolicy > <nl> - < triggeringPolicy class = " ch . qos . logback . core . rolling . SizeBasedTriggeringPolicy " > <nl> - < maxFileSize > 20MB < / maxFileSize > <nl> - < / triggeringPolicy > <nl> < encoder > <nl> < pattern > % - 5level [ % thread ] % date { ISO8601 } % F : % L - % msg % n < / pattern > <nl> < / encoder > <nl> @ @ - 51 , 14 + 51 , 14 @ @ appender reference in the root level section below . <nl> <nl> < appender name = " DEBUGLOG " class = " ch . qos . logback . core . rolling . RollingFileAppender " > <nl> < file > $ { cassandra . logdir } / debug . log < / file > <nl> - < rollingPolicy class = " ch . qos . logback . core . rolling . FixedWindowRollingPolicy " > <nl> - < fileNamePattern > $ { cassandra . logdir } / debug . log . % i . zip < / fileNamePattern > <nl> - < minIndex > 1 < / minIndex > <nl> - < maxIndex > 20 < / maxIndex > <nl> + < rollingPolicy class = " ch . qos . logback . core . rolling . SizeAndTimeBasedRollingPolicy " > <nl> + < ! - - rollover daily - - > <nl> + < fileNamePattern > $ { cassandra . logdir } / debug . log . % d { yyyy - MM - dd } . % i . zip < / fileNamePattern > <nl> + < ! - - each file should be at most 50MB , keep 7 days worth of history , but at most 5GB - - > <nl> + < maxFileSize > 50MB < / maxFileSize > <nl> + < maxHistory > 7 < / maxHistory > <nl> + < totalSizeCap > 5GB < / totalSizeCap > <nl> < / rollingPolicy > <nl> - < triggeringPolicy class = " ch . qos . logback . core . rolling . SizeBasedTriggeringPolicy " > <nl> - < maxFileSize > 20MB < / maxFileSize > <nl> - < / triggeringPolicy > <nl> < encoder > <nl> < pattern > % - 5level [ % thread ] % date { ISO8601 } % F : % L - % msg % n < / pattern > <nl> < / encoder > <nl> diff - - git a / lib / logback - classic - 1 . 1 . 3 . jar b / lib / logback - classic - 1 . 1 . 3 . jar <nl> deleted file mode 100644 <nl> index 2aa10a5 . . 0000000 <nl> Binary files a / lib / logback - classic - 1 . 1 . 3 . jar and / dev / null differ <nl> diff - - git a / lib / logback - classic - 1 . 2 . 3 . jar b / lib / logback - classic - 1 . 2 . 3 . jar <nl> new file mode 100644 <nl> index 0000000 . . bed00c0 <nl> Binary files / dev / null and b / lib / logback - classic - 1 . 2 . 3 . jar differ <nl> diff - - git a / lib / logback - core - 1 . 1 . 3 . jar b / lib / logback - core - 1 . 1 . 3 . jar <nl> deleted file mode 100644 <nl> index 996b722 . . 0000000 <nl> Binary files a / lib / logback - core - 1 . 1 . 3 . jar and / dev / null differ <nl> diff - - git a / lib / logback - core - 1 . 2 . 3 . jar b / lib / logback - core - 1 . 2 . 3 . jar <nl> new file mode 100644 <nl> index 0000000 . . 487b395 <nl> Binary files / dev / null and b / lib / logback - core - 1 . 2 . 3 . jar differ <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java b / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java <nl> index 9c5b95b . . 0a424b2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java <nl> @ @ - 88 , 6 + 88 , 8 @ @ public final class ThreadAwareSecurityManager extends SecurityManager <nl> / / To work around this , a custom ReconfigureOnChangeFilter is installed , that simply <nl> / / prevents this configuration file check and possible reload of the configration , <nl> / / while executing sandboxed UDF code . <nl> + / / <nl> + / / NOTE : this is obsolte with logback versions ( at least since 1 . 2 . 3 ) <nl> Logger l = LoggerFactory . getLogger ( ThreadAwareSecurityManager . class ) ; <nl> ch . qos . logback . classic . Logger logbackLogger = ( ch . qos . logback . classic . Logger ) l ; <nl> LoggerContext ctx = logbackLogger . getLoggerContext ( ) ; <nl> @ @ - 110 , 6 + 112 , 9 @ @ public final class ThreadAwareSecurityManager extends SecurityManager <nl> / * * <nl> * The purpose of this class is to prevent logback from checking for config file change , <nl> * if the current thread is executing a sandboxed thread to avoid { @ link AccessControlException } s . <nl> + * <nl> + * This is obsolete with logback versions that replaced { @ link ReconfigureOnChangeFilter } <nl> + * with { @ link ch . qos . logback . classic . joran . ReconfigureOnChangeTask } ( at least logback since 1 . 2 . 3 ) . <nl> * / <nl> private static class SMAwareReconfigureOnChangeFilter extends ReconfigureOnChangeFilter <nl> { <nl> diff - - git a / test / conf / logback - test . xml b / test / conf / logback - test . xml <nl> index 48f93bc . . 4092050 100644 <nl> - - - a / test / conf / logback - test . xml <nl> + + + b / test / conf / logback - test . xml <nl> @ @ - 17 , 7 + 17 , 7 @ @ <nl> under the License . <nl> - - > <nl> <nl> - < configuration debug = " false " scan = " true " > <nl> + < configuration debug = " false " scan = " true " scanPeriod = " 60 seconds " > <nl> < ! - - Shutdown hook ensures that async appender flushes - - > <nl> < shutdownHook class = " ch . qos . logback . core . hook . DelayingShutdownHook " / > <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java <nl> index 589afd5 . . dd45f72 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java <nl> @ @ - 218 , 10 + 218 , 10 @ @ public class DatabaseDescriptorRefTest <nl> method . invoke ( null ) ; <nl> <nl> if ( " clientInitialization " . equals ( methodName ) & & <nl> - threadCount + 1 = = threads . getThreadCount ( ) ) <nl> + threadCount + 2 = = threads . getThreadCount ( ) ) <nl> { <nl> - / / ignore the " AsyncAppender - Worker - ASYNC " thread <nl> - threadCount + + ; <nl> + / / ignore the " AsyncAppender - Worker - ASYNC " and " logback - 1 " threads <nl> + threadCount = threadCount + 2 ; <nl> } <nl> <nl> if ( threadCount ! = threads . getThreadCount ( ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index dea3803 . . f2f6614 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import ch . qos . logback . classic . LoggerContext ; <nl> + import ch . qos . logback . classic . joran . ReconfigureOnChangeTask ; <nl> import ch . qos . logback . classic . spi . TurboFilterList ; <nl> import ch . qos . logback . classic . turbo . ReconfigureOnChangeFilter ; <nl> import ch . qos . logback . classic . turbo . TurboFilter ; <nl> @ @ - 58 , 6 + 59 , 7 @ @ import org . apache . cassandra . transport . Event ; <nl> import org . apache . cassandra . transport . ProtocolVersion ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> <nl> + import static ch . qos . logback . core . CoreConstants . RECONFIGURE _ ON _ CHANGE _ TASK ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotNull ; <nl> import static org . junit . Assert . assertNull ; <nl> @ @ - 1849 , 6 + 1851 , 16 @ @ public class AggregationTest extends CQLTester <nl> break ; <nl> } <nl> } <nl> + <nl> + ReconfigureOnChangeTask roct = ( ReconfigureOnChangeTask ) ctx . getObject ( RECONFIGURE _ ON _ CHANGE _ TASK ) ; <nl> + if ( roct ! = null ) <nl> + { <nl> + / / New functionality in logback - they replaced ReconfigureOnChangeFilter ( which runs in the logging code ) <nl> + / / with an async ReconfigureOnChangeTask - i . e . in a thread that does not become sandboxed . <nl> + / / Let the test run anyway , just we cannot reconfigure it ( and it is pointless to reconfigure ) . <nl> + return ; <nl> + } <nl> + <nl> assertTrue ( " ReconfigureOnChangeFilter not in logback ' s turbo - filter list - do that by adding scan = \ " true \ " to logback - test . xml ' s configuration element " , done ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e932b40 . . dd56770 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * CVE - 2017 - 5929 Security vulnerability and redefine default log rotation policy ( CASSANDRA - 14183 ) 
 * Use JVM default SSL validation algorithm instead of custom default ( CASSANDRA - 13259 ) 
 * Better document in code InetAddressAndPort usage post 7544 , incorporate port into UUIDGen node ( CASSANDRA - 14226 ) 
 * Fix sstablemetadata date string for minLocalDeletionTime ( CASSANDRA - 14132 ) 
 diff - - git a / build . xml b / build . xml 
 index bc9f0a7 . . 4b6ae70 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 383 , 8 + 383 , 8 @ @ 
 < dependency groupId = " org . slf4j " artifactId = " slf4j - api " version = " 1 . 7 . 25 " / > 
 < dependency groupId = " org . slf4j " artifactId = " log4j - over - slf4j " version = " 1 . 7 . 25 " / > 
 < dependency groupId = " org . slf4j " artifactId = " jcl - over - slf4j " version = " 1 . 7 . 25 " / > 
 - < dependency groupId = " ch . qos . logback " artifactId = " logback - core " version = " 1 . 1 . 3 " / > 
 - < dependency groupId = " ch . qos . logback " artifactId = " logback - classic " version = " 1 . 1 . 3 " / > 
 + < dependency groupId = " ch . qos . logback " artifactId = " logback - core " version = " 1 . 2 . 3 " / > 
 + < dependency groupId = " ch . qos . logback " artifactId = " logback - classic " version = " 1 . 2 . 3 " / > 
 < dependency groupId = " org . codehaus . jackson " artifactId = " jackson - core - asl " version = " 1 . 9 . 2 " / > 
 < dependency groupId = " org . codehaus . jackson " artifactId = " jackson - mapper - asl " version = " 1 . 9 . 2 " / > 
 < dependency groupId = " com . googlecode . json - simple " artifactId = " json - simple " version = " 1 . 1 " / > 
 diff - - git a / conf / logback . xml b / conf / logback . xml 
 index a22f131 . . b2c5b10 100644 
 - - - a / conf / logback . xml 
 + + + b / conf / logback . xml 
 @ @ - 22 , 7 + 22 , 7 @ @ In order to disable debug . log , comment - out the ASYNCDEBUGLOG 
 appender reference in the root level section below . 
 - - > 
 
 - < configuration scan = " true " > 
 + < configuration scan = " true " scanPeriod = " 60 seconds " > 
 < jmxConfigurator / > 
 
 < ! - - No shutdown hook ; we run it ourselves in StorageService after shutdown - - > 
 @ @ - 34 , 14 + 34 , 14 @ @ appender reference in the root level section below . 
 < level > INFO < / level > 
 < / filter > 
 < file > $ { cassandra . logdir } / system . log < / file > 
 - < rollingPolicy class = " ch . qos . logback . core . rolling . FixedWindowRollingPolicy " > 
 - < fileNamePattern > $ { cassandra . logdir } / system . log . % i . zip < / fileNamePattern > 
 - < minIndex > 1 < / minIndex > 
 - < maxIndex > 20 < / maxIndex > 
 + < rollingPolicy class = " ch . qos . logback . core . rolling . SizeAndTimeBasedRollingPolicy " > 
 + < ! - - rollover daily - - > 
 + < fileNamePattern > $ { cassandra . logdir } / system . log . % d { yyyy - MM - dd } . % i . zip < / fileNamePattern > 
 + < ! - - each file should be at most 50MB , keep 7 days worth of history , but at most 5GB - - > 
 + < maxFileSize > 50MB < / maxFileSize > 
 + < maxHistory > 7 < / maxHistory > 
 + < totalSizeCap > 5GB < / totalSizeCap > 
 < / rollingPolicy > 
 - < triggeringPolicy class = " ch . qos . logback . core . rolling . SizeBasedTriggeringPolicy " > 
 - < maxFileSize > 20MB < / maxFileSize > 
 - < / triggeringPolicy > 
 < encoder > 
 < pattern > % - 5level [ % thread ] % date { ISO8601 } % F : % L - % msg % n < / pattern > 
 < / encoder > 
 @ @ - 51 , 14 + 51 , 14 @ @ appender reference in the root level section below . 
 
 < appender name = " DEBUGLOG " class = " ch . qos . logback . core . rolling . RollingFileAppender " > 
 < file > $ { cassandra . logdir } / debug . log < / file > 
 - < rollingPolicy class = " ch . qos . logback . core . rolling . FixedWindowRollingPolicy " > 
 - < fileNamePattern > $ { cassandra . logdir } / debug . log . % i . zip < / fileNamePattern > 
 - < minIndex > 1 < / minIndex > 
 - < maxIndex > 20 < / maxIndex > 
 + < rollingPolicy class = " ch . qos . logback . core . rolling . SizeAndTimeBasedRollingPolicy " > 
 + < ! - - rollover daily - - > 
 + < fileNamePattern > $ { cassandra . logdir } / debug . log . % d { yyyy - MM - dd } . % i . zip < / fileNamePattern > 
 + < ! - - each file should be at most 50MB , keep 7 days worth of history , but at most 5GB - - > 
 + < maxFileSize > 50MB < / maxFileSize > 
 + < maxHistory > 7 < / maxHistory > 
 + < totalSizeCap > 5GB < / totalSizeCap > 
 < / rollingPolicy > 
 - < triggeringPolicy class = " ch . qos . logback . core . rolling . SizeBasedTriggeringPolicy " > 
 - < maxFileSize > 20MB < / maxFileSize > 
 - < / triggeringPolicy > 
 < encoder > 
 < pattern > % - 5level [ % thread ] % date { ISO8601 } % F : % L - % msg % n < / pattern > 
 < / encoder > 
 diff - - git a / lib / logback - classic - 1 . 1 . 3 . jar b / lib / logback - classic - 1 . 1 . 3 . jar 
 deleted file mode 100644 
 index 2aa10a5 . . 0000000 
 Binary files a / lib / logback - classic - 1 . 1 . 3 . jar and / dev / null differ 
 diff - - git a / lib / logback - classic - 1 . 2 . 3 . jar b / lib / logback - classic - 1 . 2 . 3 . jar 
 new file mode 100644 
 index 0000000 . . bed00c0 
 Binary files / dev / null and b / lib / logback - classic - 1 . 2 . 3 . jar differ 
 diff - - git a / lib / logback - core - 1 . 1 . 3 . jar b / lib / logback - core - 1 . 1 . 3 . jar 
 deleted file mode 100644 
 index 996b722 . . 0000000 
 Binary files a / lib / logback - core - 1 . 1 . 3 . jar and / dev / null differ 
 diff - - git a / lib / logback - core - 1 . 2 . 3 . jar b / lib / logback - core - 1 . 2 . 3 . jar 
 new file mode 100644 
 index 0000000 . . 487b395 
 Binary files / dev / null and b / lib / logback - core - 1 . 2 . 3 . jar differ 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java b / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java 
 index 9c5b95b . . 0a424b2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / ThreadAwareSecurityManager . java 
 @ @ - 88 , 6 + 88 , 8 @ @ public final class ThreadAwareSecurityManager extends SecurityManager 
 / / To work around this , a custom ReconfigureOnChangeFilter is installed , that simply 
 / / prevents this configuration file check and possible reload of the configration , 
 / / while executing sandboxed UDF code . 
 + / / 
 + / / NOTE : this is obsolte with logback versions ( at least since 1 . 2 . 3 ) 
 Logger l = LoggerFactory . getLogger ( ThreadAwareSecurityManager . class ) ; 
 ch . qos . logback . classic . Logger logbackLogger = ( ch . qos . logback . classic . Logger ) l ; 
 LoggerContext ctx = logbackLogger . getLoggerContext ( ) ; 
 @ @ - 110 , 6 + 112 , 9 @ @ public final class ThreadAwareSecurityManager extends SecurityManager 
 / * * 
 * The purpose of this class is to prevent logback from checking for config file change , 
 * if the current thread is executing a sandboxed thread to avoid { @ link AccessControlException } s . 
 + * 
 + * This is obsolete with logback versions that replaced { @ link ReconfigureOnChangeFilter } 
 + * with { @ link ch . qos . logback . classic . joran . ReconfigureOnChangeTask } ( at least logback since 1 . 2 . 3 ) . 
 * / 
 private static class SMAwareReconfigureOnChangeFilter extends ReconfigureOnChangeFilter 
 { 
 diff - - git a / test / conf / logback - test . xml b / test / conf / logback - test . xml 
 index 48f93bc . . 4092050 100644 
 - - - a / test / conf / logback - test . xml 
 + + + b / test / conf / logback - test . xml 
 @ @ - 17 , 7 + 17 , 7 @ @ 
 under the License . 
 - - > 
 
 - < configuration debug = " false " scan = " true " > 
 + < configuration debug = " false " scan = " true " scanPeriod = " 60 seconds " > 
 < ! - - Shutdown hook ensures that async appender flushes - - > 
 < shutdownHook class = " ch . qos . logback . core . hook . DelayingShutdownHook " / > 
 
 diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java 
 index 589afd5 . . dd45f72 100644 
 - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorRefTest . java 
 @ @ - 218 , 10 + 218 , 10 @ @ public class DatabaseDescriptorRefTest 
 method . invoke ( null ) ; 
 
 if ( " clientInitialization " . equals ( methodName ) & & 
 - threadCount + 1 = = threads . getThreadCount ( ) ) 
 + threadCount + 2 = = threads . getThreadCount ( ) ) 
 { 
 - / / ignore the " AsyncAppender - Worker - ASYNC " thread 
 - threadCount + + ; 
 + / / ignore the " AsyncAppender - Worker - ASYNC " and " logback - 1 " threads 
 + threadCount = threadCount + 2 ; 
 } 
 
 if ( threadCount ! = threads . getThreadCount ( ) ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index dea3803 . . f2f6614 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import ch . qos . logback . classic . LoggerContext ; 
 + import ch . qos . logback . classic . joran . ReconfigureOnChangeTask ; 
 import ch . qos . logback . classic . spi . TurboFilterList ; 
 import ch . qos . logback . classic . turbo . ReconfigureOnChangeFilter ; 
 import ch . qos . logback . classic . turbo . TurboFilter ; 
 @ @ - 58 , 6 + 59 , 7 @ @ import org . apache . cassandra . transport . Event ; 
 import org . apache . cassandra . transport . ProtocolVersion ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 
 + import static ch . qos . logback . core . CoreConstants . RECONFIGURE _ ON _ CHANGE _ TASK ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotNull ; 
 import static org . junit . Assert . assertNull ; 
 @ @ - 1849 , 6 + 1851 , 16 @ @ public class AggregationTest extends CQLTester 
 break ; 
 } 
 } 
 + 
 + ReconfigureOnChangeTask roct = ( ReconfigureOnChangeTask ) ctx . getObject ( RECONFIGURE _ ON _ CHANGE _ TASK ) ; 
 + if ( roct ! = null ) 
 + { 
 + / / New functionality in logback - they replaced ReconfigureOnChangeFilter ( which runs in the logging code ) 
 + / / with an async ReconfigureOnChangeTask - i . e . in a thread that does not become sandboxed . 
 + / / Let the test run anyway , just we cannot reconfigure it ( and it is pointless to reconfigure ) . 
 + return ; 
 + } 
 + 
 assertTrue ( " ReconfigureOnChangeFilter not in logback ' s turbo - filter list - do that by adding scan = \ " true \ " to logback - test . xml ' s configuration element " , done ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
