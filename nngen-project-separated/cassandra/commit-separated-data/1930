BLEU SCORE: 0.05522397783539471

TEST MSG: Remove C * specific class from JMX API
GENERATED MSG: Add nodetool options to repair specific ranges .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 3daa66f . . 8085d7b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2414 , 18 + 2414 , 22 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairAsync ( final String keyspace , final boolean isSequential , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) <nl> { <nl> - return forceRepairAsync ( keyspace , isSequential ? RepairParallelism . SEQUENTIAL : RepairParallelism . PARALLEL , dataCenters , hosts , primaryRange , columnFamilies ) ; <nl> + return forceRepairAsync ( keyspace , isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , dataCenters , hosts , primaryRange , columnFamilies ) ; <nl> } <nl> <nl> - public int forceRepairAsync ( final String keyspace , final RepairParallelism parallelismDegree , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) <nl> + public int forceRepairAsync ( final String keyspace , final int parallelismDegree , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) <nl> { <nl> + if ( parallelismDegree < 0 | | parallelismDegree > RepairParallelism . values ( ) . length - 1 ) <nl> + { <nl> + throw new IllegalArgumentException ( " Invalid parallelism degree specified : " + parallelismDegree ) ; <nl> + } <nl> / / when repairing only primary range , dataCenter nor hosts can be set <nl> if ( primaryRange & & ( dataCenters ! = null | | hosts ! = null ) ) <nl> { <nl> throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; <nl> } <nl> final Collection < Range < Token > > ranges = primaryRange ? getLocalPrimaryRanges ( keyspace ) : getLocalRanges ( keyspace ) ; <nl> - return forceRepairAsync ( keyspace , parallelismDegree , dataCenters , hosts , ranges , columnFamilies ) ; <nl> + return forceRepairAsync ( keyspace , RepairParallelism . values ( ) [ parallelismDegree ] , dataCenters , hosts , ranges , columnFamilies ) ; <nl> } <nl> <nl> public int forceRepairAsync ( final String keyspace , final RepairParallelism parallelismDegree , final Collection < String > dataCenters , final Collection < String > hosts , final Collection < Range < Token > > ranges , final String . . . columnFamilies ) <nl> @ @ - 2469 , 22 + 2473 , 27 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) <nl> { <nl> - return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential ? RepairParallelism . SEQUENTIAL : RepairParallelism . PARALLEL , dataCenters , hosts , columnFamilies ) ; <nl> + return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , dataCenters , hosts , columnFamilies ) ; <nl> } <nl> <nl> - public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) <nl> + public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , int parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) <nl> { <nl> + if ( parallelismDegree < 0 | | parallelismDegree > RepairParallelism . values ( ) . length - 1 ) <nl> + { <nl> + throw new IllegalArgumentException ( " Invalid parallelism degree specified : " + parallelismDegree ) ; <nl> + } <nl> Collection < Range < Token > > repairingRange = createRepairRangeFrom ( beginToken , endToken ) ; <nl> <nl> logger . info ( " starting user - requested repair of range { } for keyspace { } and column families { } " , <nl> repairingRange , keyspaceName , columnFamilies ) ; <nl> <nl> - if ( ! FBUtilities . isUnix ( ) & & parallelismDegree ! = RepairParallelism . PARALLEL ) <nl> + RepairParallelism parallelism = RepairParallelism . values ( ) [ parallelismDegree ] ; <nl> + if ( ! FBUtilities . isUnix ( ) & & parallelism ! = RepairParallelism . PARALLEL ) <nl> { <nl> logger . warn ( " Snapshot - based repair is not yet supported on Windows . Reverting to parallel repair . " ) ; <nl> - parallelismDegree = RepairParallelism . PARALLEL ; <nl> + parallelism = RepairParallelism . PARALLEL ; <nl> } <nl> - return forceRepairAsync ( keyspaceName , parallelismDegree , dataCenters , hosts , repairingRange , columnFamilies ) ; <nl> + return forceRepairAsync ( keyspaceName , parallelism , dataCenters , hosts , repairingRange , columnFamilies ) ; <nl> } <nl> <nl> public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 0ea08a2 . . 10d17fd 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 17 , 8 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> - import org . apache . cassandra . repair . RepairParallelism ; <nl> - <nl> import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> @ @ - 268 , 9 + 266 , 10 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> * type : " repair " <nl> * userObject : int array of length 2 , [ 0 ] = command number , [ 1 ] = ordinal of AntiEntropyService . Status <nl> * <nl> + * @ param parallelismDegree 0 : sequential , 1 : parallel , 2 : DC parallel <nl> * @ return Repair command number , or 0 if nothing to repair <nl> * / <nl> - public int forceRepairAsync ( String keyspace , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , boolean primaryRange , String . . . columnFamilies ) ; <nl> + public int forceRepairAsync ( String keyspace , int parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , boolean primaryRange , String . . . columnFamilies ) ; <nl> <nl> / * * <nl> * Same as forceRepairAsync , but handles a specified range <nl> @ @ - 279 , 8 + 278 , 10 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> <nl> / * * <nl> * Same as forceRepairAsync , but handles a specified range <nl> + * <nl> + * @ param parallelismDegree 0 : sequential , 1 : parallel , 2 : DC parallel <nl> * / <nl> - public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) ; <nl> + public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , int parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) ; <nl> <nl> / * * <nl> * Invoke repair asynchronously . <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 3736659 . . 6b28f18 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 1077 , 14 + 1077 , 14 @ @ class RepairRunner implements NotificationListener <nl> <nl> public boolean repairAndWait ( StorageServiceMBean ssProxy , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , boolean primaryRangeOnly ) throws Exception <nl> { <nl> - cmd = ssProxy . forceRepairAsync ( keyspace , parallelismDegree , dataCenters , hosts , primaryRangeOnly , columnFamilies ) ; <nl> + cmd = ssProxy . forceRepairAsync ( keyspace , parallelismDegree . ordinal ( ) , dataCenters , hosts , primaryRangeOnly , columnFamilies ) ; <nl> waitForRepair ( ) ; <nl> return success ; <nl> } <nl> <nl> public boolean repairRangeAndWait ( StorageServiceMBean ssProxy , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , String startToken , String endToken ) throws Exception <nl> { <nl> - cmd = ssProxy . forceRepairRangeAsync ( startToken , endToken , keyspace , parallelismDegree , dataCenters , hosts , columnFamilies ) ; <nl> + cmd = ssProxy . forceRepairRangeAsync ( startToken , endToken , keyspace , parallelismDegree . ordinal ( ) , dataCenters , hosts , columnFamilies ) ; <nl> waitForRepair ( ) ; <nl> return success ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java <nl> index ae6cf67 . . d55566c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class DropUserStatement extends AuthenticationStatement <nl> state . ensureNotAnonymous ( ) ; <nl> <nl> if ( ! Auth . isExistingUser ( username ) ) <nl> - throw new InvalidRequestException ( String . format ( " User % s doesn ' t exists " , username ) ) ; <nl> + throw new InvalidRequestException ( String . format ( " User % s doesn ' t exist " , username ) ) ; <nl> <nl> AuthenticatedUser user = state . getUser ( ) ; <nl> if ( user ! = null & & user . getName ( ) . equals ( username ) )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 3daa66f . . 8085d7b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2414 , 18 + 2414 , 22 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairAsync ( final String keyspace , final boolean isSequential , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) 
 { 
 - return forceRepairAsync ( keyspace , isSequential ? RepairParallelism . SEQUENTIAL : RepairParallelism . PARALLEL , dataCenters , hosts , primaryRange , columnFamilies ) ; 
 + return forceRepairAsync ( keyspace , isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , dataCenters , hosts , primaryRange , columnFamilies ) ; 
 } 
 
 - public int forceRepairAsync ( final String keyspace , final RepairParallelism parallelismDegree , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) 
 + public int forceRepairAsync ( final String keyspace , final int parallelismDegree , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) 
 { 
 + if ( parallelismDegree < 0 | | parallelismDegree > RepairParallelism . values ( ) . length - 1 ) 
 + { 
 + throw new IllegalArgumentException ( " Invalid parallelism degree specified : " + parallelismDegree ) ; 
 + } 
 / / when repairing only primary range , dataCenter nor hosts can be set 
 if ( primaryRange & & ( dataCenters ! = null | | hosts ! = null ) ) 
 { 
 throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; 
 } 
 final Collection < Range < Token > > ranges = primaryRange ? getLocalPrimaryRanges ( keyspace ) : getLocalRanges ( keyspace ) ; 
 - return forceRepairAsync ( keyspace , parallelismDegree , dataCenters , hosts , ranges , columnFamilies ) ; 
 + return forceRepairAsync ( keyspace , RepairParallelism . values ( ) [ parallelismDegree ] , dataCenters , hosts , ranges , columnFamilies ) ; 
 } 
 
 public int forceRepairAsync ( final String keyspace , final RepairParallelism parallelismDegree , final Collection < String > dataCenters , final Collection < String > hosts , final Collection < Range < Token > > ranges , final String . . . columnFamilies ) 
 @ @ - 2469 , 22 + 2473 , 27 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) 
 { 
 - return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential ? RepairParallelism . SEQUENTIAL : RepairParallelism . PARALLEL , dataCenters , hosts , columnFamilies ) ; 
 + return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential ? RepairParallelism . SEQUENTIAL . ordinal ( ) : RepairParallelism . PARALLEL . ordinal ( ) , dataCenters , hosts , columnFamilies ) ; 
 } 
 
 - public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) 
 + public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , int parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) 
 { 
 + if ( parallelismDegree < 0 | | parallelismDegree > RepairParallelism . values ( ) . length - 1 ) 
 + { 
 + throw new IllegalArgumentException ( " Invalid parallelism degree specified : " + parallelismDegree ) ; 
 + } 
 Collection < Range < Token > > repairingRange = createRepairRangeFrom ( beginToken , endToken ) ; 
 
 logger . info ( " starting user - requested repair of range { } for keyspace { } and column families { } " , 
 repairingRange , keyspaceName , columnFamilies ) ; 
 
 - if ( ! FBUtilities . isUnix ( ) & & parallelismDegree ! = RepairParallelism . PARALLEL ) 
 + RepairParallelism parallelism = RepairParallelism . values ( ) [ parallelismDegree ] ; 
 + if ( ! FBUtilities . isUnix ( ) & & parallelism ! = RepairParallelism . PARALLEL ) 
 { 
 logger . warn ( " Snapshot - based repair is not yet supported on Windows . Reverting to parallel repair . " ) ; 
 - parallelismDegree = RepairParallelism . PARALLEL ; 
 + parallelism = RepairParallelism . PARALLEL ; 
 } 
 - return forceRepairAsync ( keyspaceName , parallelismDegree , dataCenters , hosts , repairingRange , columnFamilies ) ; 
 + return forceRepairAsync ( keyspaceName , parallelism , dataCenters , hosts , repairingRange , columnFamilies ) ; 
 } 
 
 public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 0ea08a2 . . 10d17fd 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 17 , 8 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 - import org . apache . cassandra . repair . RepairParallelism ; 
 - 
 import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 @ @ - 268 , 9 + 266 , 10 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 * type : " repair " 
 * userObject : int array of length 2 , [ 0 ] = command number , [ 1 ] = ordinal of AntiEntropyService . Status 
 * 
 + * @ param parallelismDegree 0 : sequential , 1 : parallel , 2 : DC parallel 
 * @ return Repair command number , or 0 if nothing to repair 
 * / 
 - public int forceRepairAsync ( String keyspace , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , boolean primaryRange , String . . . columnFamilies ) ; 
 + public int forceRepairAsync ( String keyspace , int parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , boolean primaryRange , String . . . columnFamilies ) ; 
 
 / * * 
 * Same as forceRepairAsync , but handles a specified range 
 @ @ - 279 , 8 + 278 , 10 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 
 / * * 
 * Same as forceRepairAsync , but handles a specified range 
 + * 
 + * @ param parallelismDegree 0 : sequential , 1 : parallel , 2 : DC parallel 
 * / 
 - public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) ; 
 + public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , int parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) ; 
 
 / * * 
 * Invoke repair asynchronously . 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 3736659 . . 6b28f18 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 1077 , 14 + 1077 , 14 @ @ class RepairRunner implements NotificationListener 
 
 public boolean repairAndWait ( StorageServiceMBean ssProxy , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , boolean primaryRangeOnly ) throws Exception 
 { 
 - cmd = ssProxy . forceRepairAsync ( keyspace , parallelismDegree , dataCenters , hosts , primaryRangeOnly , columnFamilies ) ; 
 + cmd = ssProxy . forceRepairAsync ( keyspace , parallelismDegree . ordinal ( ) , dataCenters , hosts , primaryRangeOnly , columnFamilies ) ; 
 waitForRepair ( ) ; 
 return success ; 
 } 
 
 public boolean repairRangeAndWait ( StorageServiceMBean ssProxy , RepairParallelism parallelismDegree , Collection < String > dataCenters , final Collection < String > hosts , String startToken , String endToken ) throws Exception 
 { 
 - cmd = ssProxy . forceRepairRangeAsync ( startToken , endToken , keyspace , parallelismDegree , dataCenters , hosts , columnFamilies ) ; 
 + cmd = ssProxy . forceRepairRangeAsync ( startToken , endToken , keyspace , parallelismDegree . ordinal ( ) , dataCenters , hosts , columnFamilies ) ; 
 waitForRepair ( ) ; 
 return success ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java 
 index ae6cf67 . . d55566c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class DropUserStatement extends AuthenticationStatement 
 state . ensureNotAnonymous ( ) ; 
 
 if ( ! Auth . isExistingUser ( username ) ) 
 - throw new InvalidRequestException ( String . format ( " User % s doesn ' t exists " , username ) ) ; 
 + throw new InvalidRequestException ( String . format ( " User % s doesn ' t exist " , username ) ) ; 
 
 AuthenticatedUser user = state . getUser ( ) ; 
 if ( user ! = null & & user . getName ( ) . equals ( username ) )
