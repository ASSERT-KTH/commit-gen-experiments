BLEU SCORE: 0.03283637368030199

TEST MSG: Avoid creating empty compaction tasks after truncate
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a053130 . . b39fe03 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Avoid creating empty compaction tasks after truncate ( CASSANDRA - 14780 ) <nl> * Fail incremental repair prepare phase if it encounters sstables from un - finalized sessions ( CASSANDRA - 14763 ) <nl> * Add a check for receiving digest response from transient node ( CASSANDRA - 14750 ) <nl> * Fail query on transient replica if coordinator only expects full data ( CASSANDRA - 14704 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java <nl> index 6763abf . . 1aa156f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java <nl> @ @ - 136 , 7 + 136 , 7 @ @ class PendingRepairManager <nl> return getOrCreate ( sstable . getSSTableMetadata ( ) . pendingRepair ) ; <nl> } <nl> <nl> - private synchronized void removeSession ( UUID sessionID ) <nl> + private synchronized void removeSessionIfEmpty ( UUID sessionID ) <nl> { <nl> if ( ! strategies . containsKey ( sessionID ) | | ! strategies . get ( sessionID ) . getSSTables ( ) . isEmpty ( ) ) <nl> return ; <nl> @ @ - 147 , 8 + 147 , 11 @ @ class PendingRepairManager <nl> <nl> synchronized void removeSSTable ( SSTableReader sstable ) <nl> { <nl> - for ( AbstractCompactionStrategy strategy : strategies . values ( ) ) <nl> - strategy . removeSSTable ( sstable ) ; <nl> + for ( Map . Entry < UUID , AbstractCompactionStrategy > entry : strategies . entrySet ( ) ) <nl> + { <nl> + entry . getValue ( ) . removeSSTable ( sstable ) ; <nl> + removeSessionIfEmpty ( entry . getKey ( ) ) ; <nl> + } <nl> } <nl> <nl> <nl> @ @ - 207 , 6 + 210 , 8 @ @ class PendingRepairManager <nl> strategy . replaceSSTables ( groupRemoved , groupAdded ) ; <nl> else <nl> strategy . addSSTables ( groupAdded ) ; <nl> + <nl> + removeSessionIfEmpty ( entry . getKey ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 464 , 7 + 469 , 7 @ @ class PendingRepairManager <nl> } <nl> if ( completed ) <nl> { <nl> - removeSession ( sessionID ) ; <nl> + removeSessionIfEmpty ( sessionID ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java <nl> index d83e063 . . 4e645fd 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import com . google . common . collect . Lists ; <nl> import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> + import org . apache . cassandra . db . lifecycle . SSTableSet ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . repair . consistent . LocalSessionAccessor ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> @ @ - 300 , 4 + 301 , 18 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest <nl> prm . addSSTable ( sstable ) ; <nl> Assert . assertTrue ( prm . hasDataForSession ( repairID ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void noEmptyCompactionTask ( ) <nl> + { <nl> + PendingRepairManager prm = csm . getPendingRepairManagers ( ) . get ( 0 ) ; <nl> + SSTableReader sstable = makeSSTable ( false ) ; <nl> + UUID id = UUID . randomUUID ( ) ; <nl> + mutateRepaired ( sstable , id , false ) ; <nl> + prm . getOrCreate ( sstable ) ; <nl> + cfs . truncateBlocking ( ) ; <nl> + Assert . assertFalse ( cfs . getSSTables ( SSTableSet . LIVE ) . iterator ( ) . hasNext ( ) ) ; <nl> + Assert . assertNull ( cfs . getCompactionStrategyManager ( ) . getNextBackgroundTask ( 0 ) ) ; <nl> + <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a053130 . . b39fe03 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Avoid creating empty compaction tasks after truncate ( CASSANDRA - 14780 ) 
 * Fail incremental repair prepare phase if it encounters sstables from un - finalized sessions ( CASSANDRA - 14763 ) 
 * Add a check for receiving digest response from transient node ( CASSANDRA - 14750 ) 
 * Fail query on transient replica if coordinator only expects full data ( CASSANDRA - 14704 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java 
 index 6763abf . . 1aa156f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / PendingRepairManager . java 
 @ @ - 136 , 7 + 136 , 7 @ @ class PendingRepairManager 
 return getOrCreate ( sstable . getSSTableMetadata ( ) . pendingRepair ) ; 
 } 
 
 - private synchronized void removeSession ( UUID sessionID ) 
 + private synchronized void removeSessionIfEmpty ( UUID sessionID ) 
 { 
 if ( ! strategies . containsKey ( sessionID ) | | ! strategies . get ( sessionID ) . getSSTables ( ) . isEmpty ( ) ) 
 return ; 
 @ @ - 147 , 8 + 147 , 11 @ @ class PendingRepairManager 
 
 synchronized void removeSSTable ( SSTableReader sstable ) 
 { 
 - for ( AbstractCompactionStrategy strategy : strategies . values ( ) ) 
 - strategy . removeSSTable ( sstable ) ; 
 + for ( Map . Entry < UUID , AbstractCompactionStrategy > entry : strategies . entrySet ( ) ) 
 + { 
 + entry . getValue ( ) . removeSSTable ( sstable ) ; 
 + removeSessionIfEmpty ( entry . getKey ( ) ) ; 
 + } 
 } 
 
 
 @ @ - 207 , 6 + 210 , 8 @ @ class PendingRepairManager 
 strategy . replaceSSTables ( groupRemoved , groupAdded ) ; 
 else 
 strategy . addSSTables ( groupAdded ) ; 
 + 
 + removeSessionIfEmpty ( entry . getKey ( ) ) ; 
 } 
 } 
 
 @ @ - 464 , 7 + 469 , 7 @ @ class PendingRepairManager 
 } 
 if ( completed ) 
 { 
 - removeSession ( sessionID ) ; 
 + removeSessionIfEmpty ( sessionID ) ; 
 } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java 
 index d83e063 . . 4e645fd 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / PendingRepairManagerTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import com . google . common . collect . Lists ; 
 import org . junit . Assert ; 
 import org . junit . Test ; 
 
 + import org . apache . cassandra . db . lifecycle . SSTableSet ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . repair . consistent . LocalSessionAccessor ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 @ @ - 300 , 4 + 301 , 18 @ @ public class PendingRepairManagerTest extends AbstractPendingRepairTest 
 prm . addSSTable ( sstable ) ; 
 Assert . assertTrue ( prm . hasDataForSession ( repairID ) ) ; 
 } 
 + 
 + @ Test 
 + public void noEmptyCompactionTask ( ) 
 + { 
 + PendingRepairManager prm = csm . getPendingRepairManagers ( ) . get ( 0 ) ; 
 + SSTableReader sstable = makeSSTable ( false ) ; 
 + UUID id = UUID . randomUUID ( ) ; 
 + mutateRepaired ( sstable , id , false ) ; 
 + prm . getOrCreate ( sstable ) ; 
 + cfs . truncateBlocking ( ) ; 
 + Assert . assertFalse ( cfs . getSSTables ( SSTableSet . LIVE ) . iterator ( ) . hasNext ( ) ) ; 
 + Assert . assertNull ( cfs . getCompactionStrategyManager ( ) . getNextBackgroundTask ( 0 ) ) ; 
 + 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
