BLEU SCORE: 0.019648763141608138

TEST MSG: fix default timestamp format offsets
GENERATED MSG: JdbcDate . getString ( ) is not thread - safe

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> index a5884a6 . . ab81fcc 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> @ @ - 29 , 6 + 29 , 9 @ @ import org . apache . commons . lang3 . time . DateUtils ; <nl> <nl> public class TimestampSerializer implements TypeSerializer < Date > <nl> { <nl> + <nl> + / / NOTE : This list is used below and if you change the order <nl> + / / you need to update the default format and json formats in the code below . <nl> private static final String [ ] dateStringPatterns = new String [ ] { <nl> " yyyy - MM - dd HH : mm " , <nl> " yyyy - MM - dd HH : mm : ss " , <nl> @ @ - 82 , 7 + 85 , 7 @ @ public class TimestampSerializer implements TypeSerializer < Date > <nl> " yyyy - MM - ddXXX " <nl> } ; <nl> <nl> - private static final String DEFAULT _ FORMAT = dateStringPatterns [ 3 ] ; <nl> + private static final String DEFAULT _ FORMAT = dateStringPatterns [ 6 ] ; <nl> private static final Pattern timestampPattern = Pattern . compile ( " ^ - ? \ \ d + $ " ) ; <nl> <nl> private static final ThreadLocal < SimpleDateFormat > FORMATTER = new ThreadLocal < SimpleDateFormat > ( ) <nl> @ @ - 93 , 7 + 96 , 7 @ @ public class TimestampSerializer implements TypeSerializer < Date > <nl> } <nl> } ; <nl> <nl> - public static final SimpleDateFormat TO _ JSON _ FORMAT = new SimpleDateFormat ( dateStringPatterns [ 8 ] ) ; <nl> + public static final SimpleDateFormat TO _ JSON _ FORMAT = new SimpleDateFormat ( dateStringPatterns [ 15 ] ) ; <nl> <nl> public static final TimestampSerializer instance = new TimestampSerializer ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java b / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java <nl> index c98b1d9 . . 9d7c0ee 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java <nl> @ @ - 20 , 7 + 20 , 12 @ @ public class ClientUtilsTest <nl> JdbcAscii . instance . compose ( JdbcAscii . instance . decompose ( " string " ) ) ; <nl> JdbcBoolean . instance . compose ( JdbcBoolean . instance . decompose ( true ) ) ; <nl> JdbcBytes . instance . compose ( JdbcBytes . instance . decompose ( ByteBuffer . wrap ( " string " . getBytes ( ) ) ) ) ; <nl> - JdbcDate . instance . compose ( JdbcDate . instance . decompose ( new Date ( System . currentTimeMillis ( ) ) ) ) ; <nl> + <nl> + Date date = new Date ( System . currentTimeMillis ( ) ) ; <nl> + ByteBuffer dateBB = JdbcDate . instance . decompose ( date ) ; <nl> + JdbcDate . instance . compose ( dateBB ) ; <nl> + assert ( JdbcDate . instance . toString ( date ) . equals ( JdbcDate . instance . getString ( dateBB ) ) ) ; <nl> + <nl> JdbcDecimal . instance . compose ( JdbcDecimal . instance . decompose ( new BigDecimal ( 1 ) ) ) ; <nl> JdbcDouble . instance . compose ( JdbcDouble . instance . decompose ( new Double ( 1 . 0d ) ) ) ; <nl> JdbcFloat . instance . compose ( JdbcFloat . instance . decompose ( new Float ( 1 . 0f ) ) ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 index a5884a6 . . ab81fcc 100644 
 - - - a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 @ @ - 29 , 6 + 29 , 9 @ @ import org . apache . commons . lang3 . time . DateUtils ; 
 
 public class TimestampSerializer implements TypeSerializer < Date > 
 { 
 + 
 + / / NOTE : This list is used below and if you change the order 
 + / / you need to update the default format and json formats in the code below . 
 private static final String [ ] dateStringPatterns = new String [ ] { 
 " yyyy - MM - dd HH : mm " , 
 " yyyy - MM - dd HH : mm : ss " , 
 @ @ - 82 , 7 + 85 , 7 @ @ public class TimestampSerializer implements TypeSerializer < Date > 
 " yyyy - MM - ddXXX " 
 } ; 
 
 - private static final String DEFAULT _ FORMAT = dateStringPatterns [ 3 ] ; 
 + private static final String DEFAULT _ FORMAT = dateStringPatterns [ 6 ] ; 
 private static final Pattern timestampPattern = Pattern . compile ( " ^ - ? \ \ d + $ " ) ; 
 
 private static final ThreadLocal < SimpleDateFormat > FORMATTER = new ThreadLocal < SimpleDateFormat > ( ) 
 @ @ - 93 , 7 + 96 , 7 @ @ public class TimestampSerializer implements TypeSerializer < Date > 
 } 
 } ; 
 
 - public static final SimpleDateFormat TO _ JSON _ FORMAT = new SimpleDateFormat ( dateStringPatterns [ 8 ] ) ; 
 + public static final SimpleDateFormat TO _ JSON _ FORMAT = new SimpleDateFormat ( dateStringPatterns [ 15 ] ) ; 
 
 public static final TimestampSerializer instance = new TimestampSerializer ( ) ; 


NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java b / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java 
 index c98b1d9 . . 9d7c0ee 100644 
 - - - a / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql / jdbc / ClientUtilsTest . java 
 @ @ - 20 , 7 + 20 , 12 @ @ public class ClientUtilsTest 
 JdbcAscii . instance . compose ( JdbcAscii . instance . decompose ( " string " ) ) ; 
 JdbcBoolean . instance . compose ( JdbcBoolean . instance . decompose ( true ) ) ; 
 JdbcBytes . instance . compose ( JdbcBytes . instance . decompose ( ByteBuffer . wrap ( " string " . getBytes ( ) ) ) ) ; 
 - JdbcDate . instance . compose ( JdbcDate . instance . decompose ( new Date ( System . currentTimeMillis ( ) ) ) ) ; 
 + 
 + Date date = new Date ( System . currentTimeMillis ( ) ) ; 
 + ByteBuffer dateBB = JdbcDate . instance . decompose ( date ) ; 
 + JdbcDate . instance . compose ( dateBB ) ; 
 + assert ( JdbcDate . instance . toString ( date ) . equals ( JdbcDate . instance . getString ( dateBB ) ) ) ; 
 + 
 JdbcDecimal . instance . compose ( JdbcDecimal . instance . decompose ( new BigDecimal ( 1 ) ) ) ; 
 JdbcDouble . instance . compose ( JdbcDouble . instance . decompose ( new Double ( 1 . 0d ) ) ) ; 
 JdbcFloat . instance . compose ( JdbcFloat . instance . decompose ( new Float ( 1 . 0f ) ) ) ;
