BLEU SCORE: 0.02383853510228548

TEST MSG: Warn when a read collection has > 64k elements
GENERATED MSG: more fixes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c80a00a . . 8e6cffa 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 8 , 6 + 8 , 7 @ @ <nl> * Throw IRE if a prepared has more markers than supported ( CASSANDRA - 5598 ) <nl> * Expose Thread metrics for the native protocol server ( CASSANDRA - 6234 ) <nl> * Change snapshot response message verb ( CASSANDRA - 6415 ) <nl> + * Warn when collection read has > 65K elements ( CASSANDRA - 5428 ) <nl> <nl> <nl> 1 . 2 . 12 <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CollectionType . java b / src / java / org / apache / cassandra / db / marshal / CollectionType . java <nl> index ad2ea67 . . a34a2b7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CollectionType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CollectionType . java <nl> @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . cql3 . CQL3Type ; <nl> import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 33 , 6 + 36 , 10 @ @ import org . apache . cassandra . utils . Pair ; <nl> * / <nl> public abstract class CollectionType < T > extends AbstractType < T > <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( CollectionType . class ) ; <nl> + <nl> + public static final int MAX _ ELEMENTS = 65535 ; <nl> + <nl> public enum Kind <nl> { <nl> MAP , SET , LIST <nl> @ @ - 105 , 6 + 112 , 16 @ @ public abstract class CollectionType < T > extends AbstractType < T > <nl> return ( ByteBuffer ) result . flip ( ) ; <nl> } <nl> <nl> + protected List < Pair < ByteBuffer , IColumn > > enforceLimit ( List < Pair < ByteBuffer , IColumn > > columns ) <nl> + { <nl> + if ( columns . size ( ) < = MAX _ ELEMENTS ) <nl> + return columns ; <nl> + <nl> + logger . error ( " Detected collection with { } elements , more than the { } limit . Only the first { } elements will be returned to the client . " <nl> + + " Please see http : / / cassandra . apache . org / doc / cql3 / CQL . html # collections for more details . " , columns . size ( ) , MAX _ ELEMENTS , MAX _ ELEMENTS ) ; <nl> + return columns . subList ( 0 , MAX _ ELEMENTS ) ; <nl> + } <nl> + <nl> public static ByteBuffer pack ( List < ByteBuffer > buffers , int elements ) <nl> { <nl> int size = 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ListType . java b / src / java / org / apache / cassandra / db / marshal / ListType . java <nl> index b6613ae . . b219af1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ListType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ListType . java <nl> @ @ - 120 , 6 + 120 , 8 @ @ public class ListType < T > extends CollectionType < List < T > > <nl> <nl> public ByteBuffer serialize ( List < Pair < ByteBuffer , IColumn > > columns ) <nl> { <nl> + columns = enforceLimit ( columns ) ; <nl> + <nl> List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( columns . size ( ) ) ; <nl> int size = 0 ; <nl> for ( Pair < ByteBuffer , IColumn > p : columns ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / MapType . java b / src / java / org / apache / cassandra / db / marshal / MapType . java <nl> index 19310df . . 750851e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / MapType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / MapType . java <nl> @ @ - 137 , 6 + 137 , 8 @ @ public class MapType < K , V > extends CollectionType < Map < K , V > > <nl> * / <nl> public ByteBuffer serialize ( List < Pair < ByteBuffer , IColumn > > columns ) <nl> { <nl> + columns = enforceLimit ( columns ) ; <nl> + <nl> List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( 2 * columns . size ( ) ) ; <nl> int size = 0 ; <nl> for ( Pair < ByteBuffer , IColumn > p : columns ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / SetType . java b / src / java / org / apache / cassandra / db / marshal / SetType . java <nl> index 73f25e0 . . a1ba74d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / SetType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / SetType . java <nl> @ @ - 120 , 6 + 120 , 8 @ @ public class SetType < T > extends CollectionType < Set < T > > <nl> <nl> public ByteBuffer serialize ( List < Pair < ByteBuffer , IColumn > > columns ) <nl> { <nl> + columns = enforceLimit ( columns ) ; <nl> + <nl> List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( columns . size ( ) ) ; <nl> int size = 0 ; <nl> for ( Pair < ByteBuffer , IColumn > p : columns )
NEAREST DIFF (one line): diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> index 2398f01 . . f40f2c2 100644 <nl> - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml <nl> @ @ - 139 , 6 + 139 , 9 @ @ commands : <nl> - name : upgradesstables [ keyspace ] [ cfnames ] <nl> help : | <nl> Scrub ( rebuild sstables for ) one or more column families <nl> + - name : setcompactionthreshold < keyspace > < cfname > <nl> + help : | <nl> + Set min and max compaction thresholds for a given column family <nl> - name : getcompactionthreshold < keyspace > < cfname > <nl> help : | <nl> Print min and max compaction thresholds for a given column family

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c80a00a . . 8e6cffa 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 8 , 6 + 8 , 7 @ @ 
 * Throw IRE if a prepared has more markers than supported ( CASSANDRA - 5598 ) 
 * Expose Thread metrics for the native protocol server ( CASSANDRA - 6234 ) 
 * Change snapshot response message verb ( CASSANDRA - 6415 ) 
 + * Warn when collection read has > 65K elements ( CASSANDRA - 5428 ) 
 
 
 1 . 2 . 12 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CollectionType . java b / src / java / org / apache / cassandra / db / marshal / CollectionType . java 
 index ad2ea67 . . a34a2b7 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CollectionType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CollectionType . java 
 @ @ - 20 , 6 + 20 , 9 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . cql3 . CQL3Type ; 
 import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 33 , 6 + 36 , 10 @ @ import org . apache . cassandra . utils . Pair ; 
 * / 
 public abstract class CollectionType < T > extends AbstractType < T > 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( CollectionType . class ) ; 
 + 
 + public static final int MAX _ ELEMENTS = 65535 ; 
 + 
 public enum Kind 
 { 
 MAP , SET , LIST 
 @ @ - 105 , 6 + 112 , 16 @ @ public abstract class CollectionType < T > extends AbstractType < T > 
 return ( ByteBuffer ) result . flip ( ) ; 
 } 
 
 + protected List < Pair < ByteBuffer , IColumn > > enforceLimit ( List < Pair < ByteBuffer , IColumn > > columns ) 
 + { 
 + if ( columns . size ( ) < = MAX _ ELEMENTS ) 
 + return columns ; 
 + 
 + logger . error ( " Detected collection with { } elements , more than the { } limit . Only the first { } elements will be returned to the client . " 
 + + " Please see http : / / cassandra . apache . org / doc / cql3 / CQL . html # collections for more details . " , columns . size ( ) , MAX _ ELEMENTS , MAX _ ELEMENTS ) ; 
 + return columns . subList ( 0 , MAX _ ELEMENTS ) ; 
 + } 
 + 
 public static ByteBuffer pack ( List < ByteBuffer > buffers , int elements ) 
 { 
 int size = 0 ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ListType . java b / src / java / org / apache / cassandra / db / marshal / ListType . java 
 index b6613ae . . b219af1 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ListType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ListType . java 
 @ @ - 120 , 6 + 120 , 8 @ @ public class ListType < T > extends CollectionType < List < T > > 
 
 public ByteBuffer serialize ( List < Pair < ByteBuffer , IColumn > > columns ) 
 { 
 + columns = enforceLimit ( columns ) ; 
 + 
 List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( columns . size ( ) ) ; 
 int size = 0 ; 
 for ( Pair < ByteBuffer , IColumn > p : columns ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / MapType . java b / src / java / org / apache / cassandra / db / marshal / MapType . java 
 index 19310df . . 750851e 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / MapType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / MapType . java 
 @ @ - 137 , 6 + 137 , 8 @ @ public class MapType < K , V > extends CollectionType < Map < K , V > > 
 * / 
 public ByteBuffer serialize ( List < Pair < ByteBuffer , IColumn > > columns ) 
 { 
 + columns = enforceLimit ( columns ) ; 
 + 
 List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( 2 * columns . size ( ) ) ; 
 int size = 0 ; 
 for ( Pair < ByteBuffer , IColumn > p : columns ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / SetType . java b / src / java / org / apache / cassandra / db / marshal / SetType . java 
 index 73f25e0 . . a1ba74d 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / SetType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / SetType . java 
 @ @ - 120 , 6 + 120 , 8 @ @ public class SetType < T > extends CollectionType < Set < T > > 
 
 public ByteBuffer serialize ( List < Pair < ByteBuffer , IColumn > > columns ) 
 { 
 + columns = enforceLimit ( columns ) ; 
 + 
 List < ByteBuffer > bbs = new ArrayList < ByteBuffer > ( columns . size ( ) ) ; 
 int size = 0 ; 
 for ( Pair < ByteBuffer , IColumn > p : columns )

NEAREST DIFF:
diff - - git a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 index 2398f01 . . f40f2c2 100644 
 - - - a / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / tools / NodeToolHelp . yaml 
 @ @ - 139 , 6 + 139 , 9 @ @ commands : 
 - name : upgradesstables [ keyspace ] [ cfnames ] 
 help : | 
 Scrub ( rebuild sstables for ) one or more column families 
 + - name : setcompactionthreshold < keyspace > < cfname > 
 + help : | 
 + Set min and max compaction thresholds for a given column family 
 - name : getcompactionthreshold < keyspace > < cfname > 
 help : | 
 Print min and max compaction thresholds for a given column family
