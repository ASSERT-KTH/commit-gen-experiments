BLEU SCORE: 0.043008477182523305

TEST MSG: Add option to not validate atoms during scrub
GENERATED MSG: Improve nodetool cleanup / scrub / upgradesstables failure handling .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a9d04d6 . . cf124b4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * Clone SliceQueryFilter in AbstractReadCommand implementations ( CASSANDRA - 8940 ) <nl> * Push correct protocol notification for DROP INDEX ( CASSANDRA - 9310 ) <nl> * token - generator - generated tokens too long ( CASSANDRA - 9300 ) <nl> + * Add option not to validate atoms during scrub ( CASSANDRA - 9406 ) <nl> <nl> <nl> 2 . 0 . 15 : <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 5ea1287 . . eec4044 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1122 , 12 + 1122 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> CompactionManager . instance . performCleanup ( ColumnFamilyStore . this , renewer ) ; <nl> } <nl> <nl> - public void scrub ( boolean disableSnapshot , boolean skipCorrupted ) throws ExecutionException , InterruptedException <nl> + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData ) throws ExecutionException , InterruptedException <nl> { <nl> / / skip snapshot creation during scrub , SEE JIRA 5891 <nl> if ( ! disableSnapshot ) <nl> snapshotWithoutFlush ( " pre - scrub - " + System . currentTimeMillis ( ) ) ; <nl> - CompactionManager . instance . performScrub ( ColumnFamilyStore . this , skipCorrupted ) ; <nl> + CompactionManager . instance . performScrub ( ColumnFamilyStore . this , skipCorrupted , checkData ) ; <nl> } <nl> <nl> public void sstablesRewrite ( boolean excludeCurrentVersion ) throws ExecutionException , InterruptedException <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 0978ae6 . . 207b90d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 234 , 13 + 234 , 13 @ @ public class CompactionManager implements CompactionManagerMBean <nl> executor . submit ( runnable ) . get ( ) ; <nl> } <nl> <nl> - public void performScrub ( ColumnFamilyStore cfStore , final boolean skipCorrupted ) throws InterruptedException , ExecutionException <nl> + public void performScrub ( ColumnFamilyStore cfStore , final boolean skipCorrupted , final boolean checkData ) throws InterruptedException , ExecutionException <nl> { <nl> performAllSSTableOperation ( cfStore , new AllSSTablesOperation ( ) <nl> { <nl> public void perform ( ColumnFamilyStore store , Iterable < SSTableReader > sstables ) throws IOException <nl> { <nl> - doScrub ( store , sstables , skipCorrupted ) ; <nl> + doScrub ( store , sstables , skipCorrupted , checkData ) ; <nl> } <nl> } ) ; <nl> } <nl> @ @ - 432 , 16 + 432 , 16 @ @ public class CompactionManager implements CompactionManagerMBean <nl> * <nl> * @ throws IOException <nl> * / <nl> - private void doScrub ( ColumnFamilyStore cfs , Iterable < SSTableReader > sstables , boolean skipCorrupted ) throws IOException <nl> + private void doScrub ( ColumnFamilyStore cfs , Iterable < SSTableReader > sstables , boolean skipCorrupted , boolean checkData ) throws IOException <nl> { <nl> assert ! cfs . isIndex ( ) ; <nl> for ( final SSTableReader sstable : sstables ) <nl> - scrubOne ( cfs , sstable , skipCorrupted ) ; <nl> + scrubOne ( cfs , sstable , skipCorrupted , checkData ) ; <nl> } <nl> <nl> - private void scrubOne ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted ) throws IOException <nl> + private void scrubOne ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , boolean checkData ) throws IOException <nl> { <nl> - Scrubber scrubber = new Scrubber ( cfs , sstable , skipCorrupted ) ; <nl> + Scrubber scrubber = new Scrubber ( cfs , sstable , skipCorrupted , checkData ) ; <nl> <nl> CompactionInfo . Holder scrubInfo = scrubber . getScrubInfo ( ) ; <nl> metrics . beginCompaction ( scrubInfo ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index f04df27 . . e5bcd25 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ public class Scrubber implements Closeable <nl> public final SSTableReader sstable ; <nl> public final File destination ; <nl> public final boolean skipCorrupted ; <nl> + public final boolean validateColumns ; <nl> <nl> private final CompactionController controller ; <nl> private final boolean isCommutative ; <nl> @ @ - 70 , 17 + 71 , 18 @ @ public class Scrubber implements Closeable <nl> } ; <nl> private final SortedSet < Row > outOfOrderRows = new TreeSet < > ( rowComparator ) ; <nl> <nl> - public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted ) throws IOException <nl> + public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , boolean checkData ) throws IOException <nl> { <nl> - this ( cfs , sstable , skipCorrupted , new OutputHandler . LogOutput ( ) , false ) ; <nl> + this ( cfs , sstable , skipCorrupted , checkData , new OutputHandler . LogOutput ( ) , false ) ; <nl> } <nl> <nl> - public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , OutputHandler outputHandler , boolean isOffline ) throws IOException <nl> + public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , boolean checkData , OutputHandler outputHandler , boolean isOffline ) throws IOException <nl> { <nl> this . cfs = cfs ; <nl> this . sstable = sstable ; <nl> this . outputHandler = outputHandler ; <nl> this . skipCorrupted = skipCorrupted ; <nl> + this . validateColumns = checkData ; <nl> <nl> List < SSTableReader > toScrub = Collections . singletonList ( sstable ) ; <nl> <nl> @ @ - 202 , 7 + 204 , 7 @ @ public class Scrubber implements Closeable <nl> if ( dataSize ! = dataSizeFromIndex ) <nl> outputHandler . warn ( String . format ( " Data file row size % d differs from index file row size % d " , dataSize , dataSizeFromIndex ) ) ; <nl> <nl> - SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , true ) ; <nl> + SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , validateColumns ) ; <nl> if ( prevKey ! = null & & prevKey . compareTo ( key ) > 0 ) <nl> { <nl> saveOutOfOrderRow ( prevKey , key , atoms ) ; <nl> @ @ - 233 , 7 + 235 , 7 @ @ public class Scrubber implements Closeable <nl> { <nl> dataFile . seek ( dataStartFromIndex ) ; <nl> <nl> - SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , true ) ; <nl> + SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , validateColumns ) ; <nl> if ( prevKey ! = null & & prevKey . compareTo ( key ) > 0 ) <nl> { <nl> saveOutOfOrderRow ( prevKey , key , atoms ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 077413f . . 62b0c75 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2188 , 8 + 2188 , 13 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public void scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> + scrub ( disableSnapshot , skipCorrupted , true , keyspaceName , columnFamilies ) ; <nl> + } <nl> + <nl> + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> for ( ColumnFamilyStore cfStore : getValidColumnFamilies ( false , false , keyspaceName , columnFamilies ) ) <nl> - cfStore . scrub ( disableSnapshot , skipCorrupted ) ; <nl> + cfStore . scrub ( disableSnapshot , skipCorrupted , checkData ) ; <nl> } <nl> <nl> public void upgradeSSTables ( String keyspaceName , boolean excludeCurrentVersion , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 10d17fd . . 57780a3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 231 , 7 + 231 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> * <nl> * Scrubbed CFs will be snapshotted first , if disableSnapshot is false <nl> * / <nl> + @ Deprecated <nl> public void scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException ; <nl> + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException ; <nl> <nl> / * * <nl> * Rewrite all sstables to the latest version . <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index bc5410f . . b006d69 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class NodeCmd <nl> private static final Pair < String , String > CFSTATS _ IGNORE _ OPT = Pair . create ( " i " , " ignore " ) ; <nl> private static final Pair < String , String > RESOLVE _ IP = Pair . create ( " r " , " resolve - ip " ) ; <nl> private static final Pair < String , String > SCRUB _ SKIP _ CORRUPTED _ OPT = Pair . create ( " s " , " skip - corrupted " ) ; <nl> + private static final Pair < String , String > SCRUB _ NO _ VALIDATE = Pair . create ( " nv " , " no - validate " ) ; <nl> private static final Pair < String , String > COMPACT _ OPT = Pair . create ( " c " , " compact " ) ; <nl> <nl> private static final String DEFAULT _ HOST = " 127 . 0 . 0 . 1 " ; <nl> @ @ - 114 , 6 + 115 , 7 @ @ public class NodeCmd <nl> options . addOption ( CFSTATS _ IGNORE _ OPT , false , " ignore the supplied list of keyspace . columnfamiles in statistics " ) ; <nl> options . addOption ( RESOLVE _ IP , false , " show node domain names instead of IPs " ) ; <nl> options . addOption ( SCRUB _ SKIP _ CORRUPTED _ OPT , false , " when scrubbing counter tables , skip corrupted rows " ) ; <nl> + options . addOption ( SCRUB _ NO _ VALIDATE , false , " when scrubbing do not validate columns using column validator " ) ; <nl> options . addOption ( COMPACT _ OPT , false , " print histograms in a more compact format " ) ; <nl> } <nl> <nl> @ @ - 1788 , 7 + 1790 , 8 @ @ public class NodeCmd <nl> case SCRUB : <nl> boolean disableSnapshot = cmd . hasOption ( NO _ SNAPSHOT . left ) ; <nl> boolean skipCorrupted = cmd . hasOption ( SCRUB _ SKIP _ CORRUPTED _ OPT . left ) ; <nl> - try { probe . scrub ( disableSnapshot , skipCorrupted , keyspace , columnFamilies ) ; } <nl> + boolean checkData = ! cmd . hasOption ( SCRUB _ NO _ VALIDATE . left ) ; <nl> + try { probe . scrub ( disableSnapshot , skipCorrupted , checkData , keyspace , columnFamilies ) ; } <nl> catch ( ExecutionException ee ) { err ( ee , " Error occurred while scrubbing keyspace " + keyspace ) ; } <nl> break ; <nl> case UPGRADESSTABLES : <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index d66d12d . . e8e087f 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 191 , 9 + 191 , 9 @ @ public class NodeProbe <nl> ssProxy . forceKeyspaceCleanup ( keyspaceName , columnFamilies ) ; <nl> } <nl> <nl> - public void scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException <nl> + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> - ssProxy . scrub ( disableSnapshot , skipCorrupted , keyspaceName , columnFamilies ) ; <nl> + ssProxy . scrub ( disableSnapshot , skipCorrupted , checkData , keyspaceName , columnFamilies ) ; <nl> } <nl> <nl> public void upgradeSSTables ( String keyspaceName , boolean excludeCurrentVersion , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException <nl> diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> index 81dfdc3 . . 26768f3 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ public class StandaloneScrubber <nl> private static final String HELP _ OPTION = " help " ; <nl> private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; <nl> private static final String SKIP _ CORRUPTED _ OPTION = " skip - corrupted " ; <nl> + private static final String NO _ VALIDATE _ OPTION = " no - validate " ; <nl> <nl> public static void main ( String args [ ] ) <nl> { <nl> @ @ - 120 , 7 + 121 , 7 @ @ public class StandaloneScrubber <nl> { <nl> try <nl> { <nl> - Scrubber scrubber = new Scrubber ( cfs , sstable , options . skipCorrupted , handler , true ) ; <nl> + Scrubber scrubber = new Scrubber ( cfs , sstable , options . skipCorrupted , ! options . noValidate , handler , true ) ; <nl> try <nl> { <nl> scrubber . scrub ( ) ; <nl> @ @ - 185 , 6 + 186 , 7 @ @ public class StandaloneScrubber <nl> public boolean verbose ; <nl> public boolean manifestCheckOnly ; <nl> public boolean skipCorrupted ; <nl> + public boolean noValidate ; <nl> <nl> private Options ( String keyspaceName , String cfName ) <nl> { <nl> @ @ - 224 , 6 + 226 , 7 @ @ public class StandaloneScrubber <nl> opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; <nl> opts . manifestCheckOnly = cmd . hasOption ( MANIFEST _ CHECK _ OPTION ) ; <nl> opts . skipCorrupted = cmd . hasOption ( SKIP _ CORRUPTED _ OPTION ) ; <nl> + opts . noValidate = cmd . hasOption ( NO _ VALIDATE _ OPTION ) ; <nl> <nl> return opts ; <nl> } <nl> @ @ - 249 , 6 + 252 , 7 @ @ public class StandaloneScrubber <nl> options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> options . addOption ( " m " , MANIFEST _ CHECK _ OPTION , " only check and repair the leveled manifest , without actually scrubbing the sstables " ) ; <nl> options . addOption ( " s " , SKIP _ CORRUPTED _ OPTION , " skip corrupt rows in counter tables " ) ; <nl> + options . addOption ( " n " , NO _ VALIDATE _ OPTION , " do not validate columns using column validator " ) ; <nl> return options ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> index 08237a4 . . 94c7e34 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> @ @ - 31 , 6 + 31 , 9 @ @ import java . util . concurrent . ExecutionException ; <nl> <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> + import org . apache . cassandra . db . marshal . CompositeType ; <nl> + import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . exceptions . RequestExecutionException ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> @ @ - 89 , 7 + 92 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; <nl> assertEquals ( 1 , rows . size ( ) ) ; <nl> <nl> - CompactionManager . instance . performScrub ( cfs , false ) ; <nl> + CompactionManager . instance . performScrub ( cfs , false , true ) ; <nl> <nl> / / check data is still there <nl> rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; <nl> @ @ - 120 , 7 + 123 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> overrideWithGarbage ( sstable , ByteBufferUtil . bytes ( " 0 " ) , ByteBufferUtil . bytes ( " 1 " ) ) ; <nl> <nl> / / with skipCorrupted = = false , the scrub is expected to fail <nl> - Scrubber scrubber = new Scrubber ( cfs , sstable , false ) ; <nl> + Scrubber scrubber = new Scrubber ( cfs , sstable , false , true ) ; <nl> try <nl> { <nl> scrubber . scrub ( ) ; <nl> @ @ - 130 , 7 + 133 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> <nl> / / with skipCorrupted = = true , the corrupt row will be skipped <nl> Scrubber . ScrubResult scrubResult ; <nl> - scrubber = new Scrubber ( cfs , sstable , true ) ; <nl> + scrubber = new Scrubber ( cfs , sstable , true , true ) ; <nl> scrubResult = scrubber . scrubWithResult ( ) ; <nl> scrubber . close ( ) ; <nl> cfs . replaceCompactedSSTables ( Collections . singletonList ( sstable ) , Collections . singletonList ( scrubber . getNewSSTable ( ) ) , OperationType . SCRUB ) ; <nl> @ @ - 178 , 7 + 181 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> overrideWithGarbage ( sstable , ByteBufferUtil . bytes ( " 0 " ) , ByteBufferUtil . bytes ( " 1 " ) ) ; <nl> <nl> / / with skipCorrupted = = false , the scrub is expected to fail <nl> - Scrubber scrubber = new Scrubber ( cfs , sstable , false ) ; <nl> + Scrubber scrubber = new Scrubber ( cfs , sstable , false , true ) ; <nl> try <nl> { <nl> scrubber . scrub ( ) ; <nl> @ @ - 187 , 7 + 190 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> catch ( IOError err ) { } <nl> <nl> / / with skipCorrupted = = true , the corrupt row will be skipped <nl> - scrubber = new Scrubber ( cfs , sstable , true ) ; <nl> + scrubber = new Scrubber ( cfs , sstable , true , true ) ; <nl> scrubber . scrub ( ) ; <nl> scrubber . close ( ) ; <nl> cfs . replaceCompactedSSTables ( Collections . singletonList ( sstable ) , Collections . singletonList ( scrubber . getNewSSTable ( ) ) , OperationType . SCRUB ) ; <nl> @ @ - 219 , 7 + 222 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> SSTableReader sstable = cfs . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> overrideWithGarbage ( sstable , 0 , 2 ) ; <nl> <nl> - CompactionManager . instance . performScrub ( cfs , false ) ; <nl> + CompactionManager . instance . performScrub ( cfs , false , true ) ; <nl> <nl> / / check data is still there <nl> rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; <nl> @ @ - 240 , 7 + 243 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> rm . applyUnsafe ( ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> <nl> - CompactionManager . instance . performScrub ( cfs , false ) ; <nl> + CompactionManager . instance . performScrub ( cfs , false , true ) ; <nl> assert cfs . getSSTables ( ) . isEmpty ( ) ; <nl> } <nl> <nl> @ @ - 259 , 7 + 262 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; <nl> assertEquals ( 10 , rows . size ( ) ) ; <nl> <nl> - CompactionManager . instance . performScrub ( cfs , false ) ; <nl> + CompactionManager . instance . performScrub ( cfs , false , true ) ; <nl> <nl> / / check data is still there <nl> rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; <nl> @ @ - 321 , 7 + 324 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> components . add ( Component . TOC ) ; <nl> SSTableReader sstable = SSTableReader . openNoValidation ( desc , components , metadata ) ; <nl> <nl> - Scrubber scrubber = new Scrubber ( cfs , sstable , false ) ; <nl> + Scrubber scrubber = new Scrubber ( cfs , sstable , false , true ) ; <nl> scrubber . scrub ( ) ; <nl> <nl> cfs . loadNewSSTables ( ) ; <nl> @ @ - 419 , 7 + 422 , 17 @ @ public class ScrubTest extends SchemaLoader <nl> <nl> QueryProcessor . processInternal ( " INSERT INTO \ " Keyspace1 \ " . test _ compact _ static _ columns ( a , b , c , d ) VALUES ( 123 , c3db07e8 - b602 - 11e3 - bc6b - e0b9a54a6d93 , true , ' foobar ' ) " ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> - CompactionManager . instance . performScrub ( cfs , false ) ; <nl> + CompactionManager . instance . performScrub ( cfs , false , true ) ; <nl> + <nl> + QueryProcessor . process ( " CREATE TABLE \ " Keyspace1 \ " . test _ scrub _ validation ( a text primary key , b int ) " , ConsistencyLevel . ONE ) ; <nl> + ColumnFamilyStore cfs2 = keyspace . getColumnFamilyStore ( " test _ scrub _ validation " ) ; <nl> + RowMutation mutation = new RowMutation ( " Keyspace1 " , UTF8Type . instance . decompose ( " key " ) ) ; <nl> + CompositeType ct = ( CompositeType ) cfs2 . getComparator ( ) ; <nl> + mutation . add ( " test _ scrub _ validation " , ct . decompose ( " b " ) , LongType . instance . decompose ( 1L ) , System . currentTimeMillis ( ) ) ; <nl> + mutation . apply ( ) ; <nl> + cfs2 . forceBlockingFlush ( ) ; <nl> + <nl> + CompactionManager . instance . performScrub ( cfs2 , false , false ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 436 , 7 + 449 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> RowMutation rm = new RowMutation ( " Keyspace1 " , ByteBufferUtil . bytes ( UUIDGen . getTimeUUID ( ) ) , cf ) ; <nl> rm . applyUnsafe ( ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> - CompactionManager . instance . performScrub ( cfs , false ) ; <nl> + CompactionManager . instance . performScrub ( cfs , false , true ) ; <nl> <nl> assertEquals ( 1 , cfs . getSSTables ( ) . size ( ) ) ; <nl> } <nl> @ @ - 457 , 7 + 470 , 7 @ @ public class ScrubTest extends SchemaLoader <nl> QueryProcessor . processInternal ( " INSERT INTO \ " Keyspace1 \ " . test _ compact _ dynamic _ columns ( a , b , c ) VALUES ( 0 , ' b ' , ' bar ' ) " ) ; <nl> QueryProcessor . processInternal ( " INSERT INTO \ " Keyspace1 \ " . test _ compact _ dynamic _ columns ( a , b , c ) VALUES ( 0 , ' c ' , ' boo ' ) " ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> - CompactionManager . instance . performScrub ( cfs , true ) ; <nl> + CompactionManager . instance . performScrub ( cfs , true , true ) ; <nl> <nl> / / Scrub is silent , but it will remove broken records . So reading everything back to make sure nothing to " scrubbed away " <nl> UntypedResultSet rs = QueryProcessor . processInternal ( " SELECT * FROM \ " Keyspace1 \ " . test _ compact _ dynamic _ columns " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a9d04d6 . . cf124b4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * Clone SliceQueryFilter in AbstractReadCommand implementations ( CASSANDRA - 8940 ) 
 * Push correct protocol notification for DROP INDEX ( CASSANDRA - 9310 ) 
 * token - generator - generated tokens too long ( CASSANDRA - 9300 ) 
 + * Add option not to validate atoms during scrub ( CASSANDRA - 9406 ) 
 
 
 2 . 0 . 15 : 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 5ea1287 . . eec4044 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1122 , 12 + 1122 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 CompactionManager . instance . performCleanup ( ColumnFamilyStore . this , renewer ) ; 
 } 
 
 - public void scrub ( boolean disableSnapshot , boolean skipCorrupted ) throws ExecutionException , InterruptedException 
 + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData ) throws ExecutionException , InterruptedException 
 { 
 / / skip snapshot creation during scrub , SEE JIRA 5891 
 if ( ! disableSnapshot ) 
 snapshotWithoutFlush ( " pre - scrub - " + System . currentTimeMillis ( ) ) ; 
 - CompactionManager . instance . performScrub ( ColumnFamilyStore . this , skipCorrupted ) ; 
 + CompactionManager . instance . performScrub ( ColumnFamilyStore . this , skipCorrupted , checkData ) ; 
 } 
 
 public void sstablesRewrite ( boolean excludeCurrentVersion ) throws ExecutionException , InterruptedException 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 0978ae6 . . 207b90d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 234 , 13 + 234 , 13 @ @ public class CompactionManager implements CompactionManagerMBean 
 executor . submit ( runnable ) . get ( ) ; 
 } 
 
 - public void performScrub ( ColumnFamilyStore cfStore , final boolean skipCorrupted ) throws InterruptedException , ExecutionException 
 + public void performScrub ( ColumnFamilyStore cfStore , final boolean skipCorrupted , final boolean checkData ) throws InterruptedException , ExecutionException 
 { 
 performAllSSTableOperation ( cfStore , new AllSSTablesOperation ( ) 
 { 
 public void perform ( ColumnFamilyStore store , Iterable < SSTableReader > sstables ) throws IOException 
 { 
 - doScrub ( store , sstables , skipCorrupted ) ; 
 + doScrub ( store , sstables , skipCorrupted , checkData ) ; 
 } 
 } ) ; 
 } 
 @ @ - 432 , 16 + 432 , 16 @ @ public class CompactionManager implements CompactionManagerMBean 
 * 
 * @ throws IOException 
 * / 
 - private void doScrub ( ColumnFamilyStore cfs , Iterable < SSTableReader > sstables , boolean skipCorrupted ) throws IOException 
 + private void doScrub ( ColumnFamilyStore cfs , Iterable < SSTableReader > sstables , boolean skipCorrupted , boolean checkData ) throws IOException 
 { 
 assert ! cfs . isIndex ( ) ; 
 for ( final SSTableReader sstable : sstables ) 
 - scrubOne ( cfs , sstable , skipCorrupted ) ; 
 + scrubOne ( cfs , sstable , skipCorrupted , checkData ) ; 
 } 
 
 - private void scrubOne ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted ) throws IOException 
 + private void scrubOne ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , boolean checkData ) throws IOException 
 { 
 - Scrubber scrubber = new Scrubber ( cfs , sstable , skipCorrupted ) ; 
 + Scrubber scrubber = new Scrubber ( cfs , sstable , skipCorrupted , checkData ) ; 
 
 CompactionInfo . Holder scrubInfo = scrubber . getScrubInfo ( ) ; 
 metrics . beginCompaction ( scrubInfo ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index f04df27 . . e5bcd25 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 37 , 6 + 37 , 7 @ @ public class Scrubber implements Closeable 
 public final SSTableReader sstable ; 
 public final File destination ; 
 public final boolean skipCorrupted ; 
 + public final boolean validateColumns ; 
 
 private final CompactionController controller ; 
 private final boolean isCommutative ; 
 @ @ - 70 , 17 + 71 , 18 @ @ public class Scrubber implements Closeable 
 } ; 
 private final SortedSet < Row > outOfOrderRows = new TreeSet < > ( rowComparator ) ; 
 
 - public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted ) throws IOException 
 + public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , boolean checkData ) throws IOException 
 { 
 - this ( cfs , sstable , skipCorrupted , new OutputHandler . LogOutput ( ) , false ) ; 
 + this ( cfs , sstable , skipCorrupted , checkData , new OutputHandler . LogOutput ( ) , false ) ; 
 } 
 
 - public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , OutputHandler outputHandler , boolean isOffline ) throws IOException 
 + public Scrubber ( ColumnFamilyStore cfs , SSTableReader sstable , boolean skipCorrupted , boolean checkData , OutputHandler outputHandler , boolean isOffline ) throws IOException 
 { 
 this . cfs = cfs ; 
 this . sstable = sstable ; 
 this . outputHandler = outputHandler ; 
 this . skipCorrupted = skipCorrupted ; 
 + this . validateColumns = checkData ; 
 
 List < SSTableReader > toScrub = Collections . singletonList ( sstable ) ; 
 
 @ @ - 202 , 7 + 204 , 7 @ @ public class Scrubber implements Closeable 
 if ( dataSize ! = dataSizeFromIndex ) 
 outputHandler . warn ( String . format ( " Data file row size % d differs from index file row size % d " , dataSize , dataSizeFromIndex ) ) ; 
 
 - SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , true ) ; 
 + SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , validateColumns ) ; 
 if ( prevKey ! = null & & prevKey . compareTo ( key ) > 0 ) 
 { 
 saveOutOfOrderRow ( prevKey , key , atoms ) ; 
 @ @ - 233 , 7 + 235 , 7 @ @ public class Scrubber implements Closeable 
 { 
 dataFile . seek ( dataStartFromIndex ) ; 
 
 - SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , true ) ; 
 + SSTableIdentityIterator atoms = new SSTableIdentityIterator ( sstable , dataFile , key , dataSize , validateColumns ) ; 
 if ( prevKey ! = null & & prevKey . compareTo ( key ) > 0 ) 
 { 
 saveOutOfOrderRow ( prevKey , key , atoms ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 077413f . . 62b0c75 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2188 , 8 + 2188 , 13 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public void scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException 
 { 
 + scrub ( disableSnapshot , skipCorrupted , true , keyspaceName , columnFamilies ) ; 
 + } 
 + 
 + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException 
 + { 
 for ( ColumnFamilyStore cfStore : getValidColumnFamilies ( false , false , keyspaceName , columnFamilies ) ) 
 - cfStore . scrub ( disableSnapshot , skipCorrupted ) ; 
 + cfStore . scrub ( disableSnapshot , skipCorrupted , checkData ) ; 
 } 
 
 public void upgradeSSTables ( String keyspaceName , boolean excludeCurrentVersion , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 10d17fd . . 57780a3 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 231 , 7 + 231 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 * 
 * Scrubbed CFs will be snapshotted first , if disableSnapshot is false 
 * / 
 + @ Deprecated 
 public void scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException ; 
 + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException ; 
 
 / * * 
 * Rewrite all sstables to the latest version . 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index bc5410f . . b006d69 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class NodeCmd 
 private static final Pair < String , String > CFSTATS _ IGNORE _ OPT = Pair . create ( " i " , " ignore " ) ; 
 private static final Pair < String , String > RESOLVE _ IP = Pair . create ( " r " , " resolve - ip " ) ; 
 private static final Pair < String , String > SCRUB _ SKIP _ CORRUPTED _ OPT = Pair . create ( " s " , " skip - corrupted " ) ; 
 + private static final Pair < String , String > SCRUB _ NO _ VALIDATE = Pair . create ( " nv " , " no - validate " ) ; 
 private static final Pair < String , String > COMPACT _ OPT = Pair . create ( " c " , " compact " ) ; 
 
 private static final String DEFAULT _ HOST = " 127 . 0 . 0 . 1 " ; 
 @ @ - 114 , 6 + 115 , 7 @ @ public class NodeCmd 
 options . addOption ( CFSTATS _ IGNORE _ OPT , false , " ignore the supplied list of keyspace . columnfamiles in statistics " ) ; 
 options . addOption ( RESOLVE _ IP , false , " show node domain names instead of IPs " ) ; 
 options . addOption ( SCRUB _ SKIP _ CORRUPTED _ OPT , false , " when scrubbing counter tables , skip corrupted rows " ) ; 
 + options . addOption ( SCRUB _ NO _ VALIDATE , false , " when scrubbing do not validate columns using column validator " ) ; 
 options . addOption ( COMPACT _ OPT , false , " print histograms in a more compact format " ) ; 
 } 
 
 @ @ - 1788 , 7 + 1790 , 8 @ @ public class NodeCmd 
 case SCRUB : 
 boolean disableSnapshot = cmd . hasOption ( NO _ SNAPSHOT . left ) ; 
 boolean skipCorrupted = cmd . hasOption ( SCRUB _ SKIP _ CORRUPTED _ OPT . left ) ; 
 - try { probe . scrub ( disableSnapshot , skipCorrupted , keyspace , columnFamilies ) ; } 
 + boolean checkData = ! cmd . hasOption ( SCRUB _ NO _ VALIDATE . left ) ; 
 + try { probe . scrub ( disableSnapshot , skipCorrupted , checkData , keyspace , columnFamilies ) ; } 
 catch ( ExecutionException ee ) { err ( ee , " Error occurred while scrubbing keyspace " + keyspace ) ; } 
 break ; 
 case UPGRADESSTABLES : 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index d66d12d . . e8e087f 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 191 , 9 + 191 , 9 @ @ public class NodeProbe 
 ssProxy . forceKeyspaceCleanup ( keyspaceName , columnFamilies ) ; 
 } 
 
 - public void scrub ( boolean disableSnapshot , boolean skipCorrupted , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException 
 + public void scrub ( boolean disableSnapshot , boolean skipCorrupted , boolean checkData , String keyspaceName , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException 
 { 
 - ssProxy . scrub ( disableSnapshot , skipCorrupted , keyspaceName , columnFamilies ) ; 
 + ssProxy . scrub ( disableSnapshot , skipCorrupted , checkData , keyspaceName , columnFamilies ) ; 
 } 
 
 public void upgradeSSTables ( String keyspaceName , boolean excludeCurrentVersion , String . . . columnFamilies ) throws IOException , ExecutionException , InterruptedException 
 diff - - git a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 index 81dfdc3 . . 26768f3 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneScrubber . java 
 @ @ - 50 , 6 + 50 , 7 @ @ public class StandaloneScrubber 
 private static final String HELP _ OPTION = " help " ; 
 private static final String MANIFEST _ CHECK _ OPTION = " manifest - check " ; 
 private static final String SKIP _ CORRUPTED _ OPTION = " skip - corrupted " ; 
 + private static final String NO _ VALIDATE _ OPTION = " no - validate " ; 
 
 public static void main ( String args [ ] ) 
 { 
 @ @ - 120 , 7 + 121 , 7 @ @ public class StandaloneScrubber 
 { 
 try 
 { 
 - Scrubber scrubber = new Scrubber ( cfs , sstable , options . skipCorrupted , handler , true ) ; 
 + Scrubber scrubber = new Scrubber ( cfs , sstable , options . skipCorrupted , ! options . noValidate , handler , true ) ; 
 try 
 { 
 scrubber . scrub ( ) ; 
 @ @ - 185 , 6 + 186 , 7 @ @ public class StandaloneScrubber 
 public boolean verbose ; 
 public boolean manifestCheckOnly ; 
 public boolean skipCorrupted ; 
 + public boolean noValidate ; 
 
 private Options ( String keyspaceName , String cfName ) 
 { 
 @ @ - 224 , 6 + 226 , 7 @ @ public class StandaloneScrubber 
 opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; 
 opts . manifestCheckOnly = cmd . hasOption ( MANIFEST _ CHECK _ OPTION ) ; 
 opts . skipCorrupted = cmd . hasOption ( SKIP _ CORRUPTED _ OPTION ) ; 
 + opts . noValidate = cmd . hasOption ( NO _ VALIDATE _ OPTION ) ; 
 
 return opts ; 
 } 
 @ @ - 249 , 6 + 252 , 7 @ @ public class StandaloneScrubber 
 options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 options . addOption ( " m " , MANIFEST _ CHECK _ OPTION , " only check and repair the leveled manifest , without actually scrubbing the sstables " ) ; 
 options . addOption ( " s " , SKIP _ CORRUPTED _ OPTION , " skip corrupt rows in counter tables " ) ; 
 + options . addOption ( " n " , NO _ VALIDATE _ OPTION , " do not validate columns using column validator " ) ; 
 return options ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 index 08237a4 . . 94c7e34 100644 
 - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 @ @ - 31 , 6 + 31 , 9 @ @ import java . util . concurrent . ExecutionException ; 
 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 + import org . apache . cassandra . db . marshal . CompositeType ; 
 + import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . exceptions . RequestExecutionException ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 @ @ - 89 , 7 + 92 , 7 @ @ public class ScrubTest extends SchemaLoader 
 rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; 
 assertEquals ( 1 , rows . size ( ) ) ; 
 
 - CompactionManager . instance . performScrub ( cfs , false ) ; 
 + CompactionManager . instance . performScrub ( cfs , false , true ) ; 
 
 / / check data is still there 
 rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; 
 @ @ - 120 , 7 + 123 , 7 @ @ public class ScrubTest extends SchemaLoader 
 overrideWithGarbage ( sstable , ByteBufferUtil . bytes ( " 0 " ) , ByteBufferUtil . bytes ( " 1 " ) ) ; 
 
 / / with skipCorrupted = = false , the scrub is expected to fail 
 - Scrubber scrubber = new Scrubber ( cfs , sstable , false ) ; 
 + Scrubber scrubber = new Scrubber ( cfs , sstable , false , true ) ; 
 try 
 { 
 scrubber . scrub ( ) ; 
 @ @ - 130 , 7 + 133 , 7 @ @ public class ScrubTest extends SchemaLoader 
 
 / / with skipCorrupted = = true , the corrupt row will be skipped 
 Scrubber . ScrubResult scrubResult ; 
 - scrubber = new Scrubber ( cfs , sstable , true ) ; 
 + scrubber = new Scrubber ( cfs , sstable , true , true ) ; 
 scrubResult = scrubber . scrubWithResult ( ) ; 
 scrubber . close ( ) ; 
 cfs . replaceCompactedSSTables ( Collections . singletonList ( sstable ) , Collections . singletonList ( scrubber . getNewSSTable ( ) ) , OperationType . SCRUB ) ; 
 @ @ - 178 , 7 + 181 , 7 @ @ public class ScrubTest extends SchemaLoader 
 overrideWithGarbage ( sstable , ByteBufferUtil . bytes ( " 0 " ) , ByteBufferUtil . bytes ( " 1 " ) ) ; 
 
 / / with skipCorrupted = = false , the scrub is expected to fail 
 - Scrubber scrubber = new Scrubber ( cfs , sstable , false ) ; 
 + Scrubber scrubber = new Scrubber ( cfs , sstable , false , true ) ; 
 try 
 { 
 scrubber . scrub ( ) ; 
 @ @ - 187 , 7 + 190 , 7 @ @ public class ScrubTest extends SchemaLoader 
 catch ( IOError err ) { } 
 
 / / with skipCorrupted = = true , the corrupt row will be skipped 
 - scrubber = new Scrubber ( cfs , sstable , true ) ; 
 + scrubber = new Scrubber ( cfs , sstable , true , true ) ; 
 scrubber . scrub ( ) ; 
 scrubber . close ( ) ; 
 cfs . replaceCompactedSSTables ( Collections . singletonList ( sstable ) , Collections . singletonList ( scrubber . getNewSSTable ( ) ) , OperationType . SCRUB ) ; 
 @ @ - 219 , 7 + 222 , 7 @ @ public class ScrubTest extends SchemaLoader 
 SSTableReader sstable = cfs . getSSTables ( ) . iterator ( ) . next ( ) ; 
 overrideWithGarbage ( sstable , 0 , 2 ) ; 
 
 - CompactionManager . instance . performScrub ( cfs , false ) ; 
 + CompactionManager . instance . performScrub ( cfs , false , true ) ; 
 
 / / check data is still there 
 rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; 
 @ @ - 240 , 7 + 243 , 7 @ @ public class ScrubTest extends SchemaLoader 
 rm . applyUnsafe ( ) ; 
 cfs . forceBlockingFlush ( ) ; 
 
 - CompactionManager . instance . performScrub ( cfs , false ) ; 
 + CompactionManager . instance . performScrub ( cfs , false , true ) ; 
 assert cfs . getSSTables ( ) . isEmpty ( ) ; 
 } 
 
 @ @ - 259 , 7 + 262 , 7 @ @ public class ScrubTest extends SchemaLoader 
 rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; 
 assertEquals ( 10 , rows . size ( ) ) ; 
 
 - CompactionManager . instance . performScrub ( cfs , false ) ; 
 + CompactionManager . instance . performScrub ( cfs , false , true ) ; 
 
 / / check data is still there 
 rows = cfs . getRangeSlice ( Util . range ( " " , " " ) , null , new IdentityQueryFilter ( ) , 1000 ) ; 
 @ @ - 321 , 7 + 324 , 7 @ @ public class ScrubTest extends SchemaLoader 
 components . add ( Component . TOC ) ; 
 SSTableReader sstable = SSTableReader . openNoValidation ( desc , components , metadata ) ; 
 
 - Scrubber scrubber = new Scrubber ( cfs , sstable , false ) ; 
 + Scrubber scrubber = new Scrubber ( cfs , sstable , false , true ) ; 
 scrubber . scrub ( ) ; 
 
 cfs . loadNewSSTables ( ) ; 
 @ @ - 419 , 7 + 422 , 17 @ @ public class ScrubTest extends SchemaLoader 
 
 QueryProcessor . processInternal ( " INSERT INTO \ " Keyspace1 \ " . test _ compact _ static _ columns ( a , b , c , d ) VALUES ( 123 , c3db07e8 - b602 - 11e3 - bc6b - e0b9a54a6d93 , true , ' foobar ' ) " ) ; 
 cfs . forceBlockingFlush ( ) ; 
 - CompactionManager . instance . performScrub ( cfs , false ) ; 
 + CompactionManager . instance . performScrub ( cfs , false , true ) ; 
 + 
 + QueryProcessor . process ( " CREATE TABLE \ " Keyspace1 \ " . test _ scrub _ validation ( a text primary key , b int ) " , ConsistencyLevel . ONE ) ; 
 + ColumnFamilyStore cfs2 = keyspace . getColumnFamilyStore ( " test _ scrub _ validation " ) ; 
 + RowMutation mutation = new RowMutation ( " Keyspace1 " , UTF8Type . instance . decompose ( " key " ) ) ; 
 + CompositeType ct = ( CompositeType ) cfs2 . getComparator ( ) ; 
 + mutation . add ( " test _ scrub _ validation " , ct . decompose ( " b " ) , LongType . instance . decompose ( 1L ) , System . currentTimeMillis ( ) ) ; 
 + mutation . apply ( ) ; 
 + cfs2 . forceBlockingFlush ( ) ; 
 + 
 + CompactionManager . instance . performScrub ( cfs2 , false , false ) ; 
 } 
 
 / * * 
 @ @ - 436 , 7 + 449 , 7 @ @ public class ScrubTest extends SchemaLoader 
 RowMutation rm = new RowMutation ( " Keyspace1 " , ByteBufferUtil . bytes ( UUIDGen . getTimeUUID ( ) ) , cf ) ; 
 rm . applyUnsafe ( ) ; 
 cfs . forceBlockingFlush ( ) ; 
 - CompactionManager . instance . performScrub ( cfs , false ) ; 
 + CompactionManager . instance . performScrub ( cfs , false , true ) ; 
 
 assertEquals ( 1 , cfs . getSSTables ( ) . size ( ) ) ; 
 } 
 @ @ - 457 , 7 + 470 , 7 @ @ public class ScrubTest extends SchemaLoader 
 QueryProcessor . processInternal ( " INSERT INTO \ " Keyspace1 \ " . test _ compact _ dynamic _ columns ( a , b , c ) VALUES ( 0 , ' b ' , ' bar ' ) " ) ; 
 QueryProcessor . processInternal ( " INSERT INTO \ " Keyspace1 \ " . test _ compact _ dynamic _ columns ( a , b , c ) VALUES ( 0 , ' c ' , ' boo ' ) " ) ; 
 cfs . forceBlockingFlush ( ) ; 
 - CompactionManager . instance . performScrub ( cfs , true ) ; 
 + CompactionManager . instance . performScrub ( cfs , true , true ) ; 
 
 / / Scrub is silent , but it will remove broken records . So reading everything back to make sure nothing to " scrubbed away " 
 UntypedResultSet rs = QueryProcessor . processInternal ( " SELECT * FROM \ " Keyspace1 \ " . test _ compact _ dynamic _ columns " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
