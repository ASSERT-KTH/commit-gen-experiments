BLEU SCORE: 0.005437122993503428

TEST MSG: ( cqlsh ) Fix DESCRIBE for NTS keyspaces
GENERATED MSG: upgrade thrift jar to 0 . 6 . 0 . patch by gdusbabek , reviewed by tjake . CASSANDRA - 2412

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 342eb00 . . 7e04bcb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - rc6 <nl> + * ( cqlsh ) Fix DESCRIBE for NTS keyspaces ( CASSANDRA - 7729 ) <nl> * Remove netty buffer ref - counting ( CASSANDRA - 7735 ) <nl> * Pass mutated cf to index updater for use by PRSI ( CASSANDRA - 7742 ) <nl> * Include stress yaml example in release and deb ( CASSANDRA - 7717 ) <nl> diff - - git a / lib / cassandra - driver - internal - only - 2 . 1 . 0 . post . zip b / lib / cassandra - driver - internal - only - 2 . 1 . 0 . post . zip <nl> new file mode 100644 <nl> index 0000000 . . 68c4171 <nl> Binary files / dev / null and b / lib / cassandra - driver - internal - only - 2 . 1 . 0 . post . zip differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 2 . 1 . 0c1 . post . zip b / lib / cassandra - driver - internal - only - 2 . 1 . 0c1 . post . zip <nl> deleted file mode 100644 <nl> index e66a12a . . 0000000 <nl> Binary files a / lib / cassandra - driver - internal - only - 2 . 1 . 0c1 . post . zip and / dev / null differ
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index a6d64d8 . . 34587e3 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 814 , 7 + 814 , 7 @ @ public final class CFMetaData <nl> for ( org . apache . cassandra . thrift . ColumnDef cdef : def . getColumn _ metadata ( ) ) <nl> { <nl> org . apache . cassandra . db . migration . avro . ColumnDef tdef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; <nl> - tdef . name = ByteBufferUtil . clone ( cdef . BufferForName ( ) ) ; <nl> + tdef . name = ByteBufferUtil . clone ( cdef . bufferForName ( ) ) ; <nl> tdef . validation _ class = cdef . getValidation _ class ( ) ; <nl> tdef . index _ name = cdef . getIndex _ name ( ) ; <nl> tdef . index _ type = cdef . getIndex _ type ( ) = = null ? null : org . apache . cassandra . db . migration . avro . IndexType . valueOf ( cdef . getIndex _ type ( ) . name ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> index c122992 . . 2fac127 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> import java . util . concurrent . ExecutorService ; <nl> <nl> + import org . apache . thrift . server . TThreadPoolServer ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 132 , 21 + 133 , 19 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan <nl> } <nl> <nl> / / ThreadPool Server <nl> - CustomTThreadPoolServer . Options options = new CustomTThreadPoolServer . Options ( ) ; <nl> - options . minWorkerThreads = DatabaseDescriptor . getRpcMinThreads ( ) ; <nl> - options . maxWorkerThreads = DatabaseDescriptor . getRpcMaxThreads ( ) ; <nl> + TThreadPoolServer . Args args = new TThreadPoolServer . Args ( tServerSocket ) <nl> + . minWorkerThreads ( DatabaseDescriptor . getRpcMinThreads ( ) ) <nl> + . maxWorkerThreads ( DatabaseDescriptor . getRpcMaxThreads ( ) ) <nl> + . inputTransportFactory ( inTransportFactory ) <nl> + . outputTransportFactory ( outTransportFactory ) <nl> + . inputProtocolFactory ( tProtocolFactory ) <nl> + . outputProtocolFactory ( tProtocolFactory ) <nl> + . processor ( processor ) ; <nl> <nl> ExecutorService executorService = new CleaningThreadPool ( cassandraServer . clientState , <nl> - options . minWorkerThreads , <nl> - options . maxWorkerThreads ) ; <nl> - serverEngine = new CustomTThreadPoolServer ( new TProcessorFactory ( processor ) , <nl> - tServerSocket , <nl> - inTransportFactory , <nl> - outTransportFactory , <nl> - tProtocolFactory , <nl> - tProtocolFactory , <nl> - options , <nl> - executorService ) ; <nl> + args . minWorkerThreads , <nl> + args . maxWorkerThreads ) ; <nl> + serverEngine = new CustomTThreadPoolServer ( args , executorService ) ; <nl> } <nl> <nl> public void run ( ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> index 118c785 . . 1e69103 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> + import org . apache . thrift . server . TThreadPoolServer ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 55 , 38 + 56 , 18 @ @ public class CustomTThreadPoolServer extends TServer <nl> private volatile boolean stopped _ ; <nl> <nl> / / Server options <nl> - private Options options _ ; <nl> + private TThreadPoolServer . Args args ; <nl> <nl> / / Track and Limit the number of connected clients <nl> private final AtomicInteger activeClients = new AtomicInteger ( 0 ) ; <nl> <nl> - / / Customizable server options <nl> - public static class Options <nl> - { <nl> - public int minWorkerThreads = 5 ; <nl> - public int maxWorkerThreads = Integer . MAX _ VALUE ; <nl> - public int stopTimeoutVal = 60 ; <nl> - public TimeUnit stopTimeoutUnit = TimeUnit . SECONDS ; <nl> - } <nl> - <nl> - <nl> - public CustomTThreadPoolServer ( TProcessorFactory tProcessorFactory , <nl> - TServerSocket tServerSocket , <nl> - TTransportFactory inTransportFactory , <nl> - TTransportFactory outTransportFactory , <nl> - TProtocolFactory tProtocolFactory , <nl> - TProtocolFactory tProtocolFactory2 , <nl> - Options options , <nl> - ExecutorService executorService ) <nl> - { <nl> - <nl> - super ( tProcessorFactory , tServerSocket , inTransportFactory , outTransportFactory , <nl> - tProtocolFactory , tProtocolFactory2 ) ; <nl> - options _ = options ; <nl> + <nl> + public CustomTThreadPoolServer ( TThreadPoolServer . Args args , ExecutorService executorService ) { <nl> + super ( args ) ; <nl> executorService _ = executorService ; <nl> + this . args = args ; <nl> } <nl> - <nl> - <nl> + <nl> public void serve ( ) <nl> { <nl> try <nl> @ @ - 103 , 7 + 84 , 7 @ @ public class CustomTThreadPoolServer extends TServer <nl> while ( ! stopped _ ) <nl> { <nl> / / block until we are under max clients <nl> - while ( activeClients . get ( ) > = options _ . maxWorkerThreads ) <nl> + while ( activeClients . get ( ) > = args . maxWorkerThreads ) <nl> { <nl> try <nl> { <nl> @ @ - 132 , 8 + 113 , 8 @ @ public class CustomTThreadPoolServer extends TServer <nl> } <nl> } <nl> <nl> - if ( activeClients . get ( ) > = options _ . maxWorkerThreads ) <nl> - LOGGER . warn ( " Maximum number of clients " + options _ . maxWorkerThreads + " reached " ) ; <nl> + if ( activeClients . get ( ) > = args . maxWorkerThreads ) <nl> + LOGGER . warn ( " Maximum number of clients " + args . maxWorkerThreads + " reached " ) ; <nl> } <nl> <nl> executorService _ . shutdown ( ) ; <nl> @ @ - 142 , 7 + 123 , 7 @ @ public class CustomTThreadPoolServer extends TServer <nl> / / exception . If we don ' t do this , then we ' ll shut down prematurely . We want <nl> / / to let the executorService clear it ' s task queue , closing client sockets <nl> / / appropriately . <nl> - long timeoutMS = options _ . stopTimeoutUnit . toMillis ( options _ . stopTimeoutVal ) ; <nl> + long timeoutMS = args . stopTimeoutUnit . toMillis ( args . stopTimeoutVal ) ; <nl> long now = System . currentTimeMillis ( ) ; <nl> while ( timeoutMS > = 0 ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 342eb00 . . 7e04bcb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - rc6 
 + * ( cqlsh ) Fix DESCRIBE for NTS keyspaces ( CASSANDRA - 7729 ) 
 * Remove netty buffer ref - counting ( CASSANDRA - 7735 ) 
 * Pass mutated cf to index updater for use by PRSI ( CASSANDRA - 7742 ) 
 * Include stress yaml example in release and deb ( CASSANDRA - 7717 ) 
 diff - - git a / lib / cassandra - driver - internal - only - 2 . 1 . 0 . post . zip b / lib / cassandra - driver - internal - only - 2 . 1 . 0 . post . zip 
 new file mode 100644 
 index 0000000 . . 68c4171 
 Binary files / dev / null and b / lib / cassandra - driver - internal - only - 2 . 1 . 0 . post . zip differ 
 diff - - git a / lib / cassandra - driver - internal - only - 2 . 1 . 0c1 . post . zip b / lib / cassandra - driver - internal - only - 2 . 1 . 0c1 . post . zip 
 deleted file mode 100644 
 index e66a12a . . 0000000 
 Binary files a / lib / cassandra - driver - internal - only - 2 . 1 . 0c1 . post . zip and / dev / null differ

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index a6d64d8 . . 34587e3 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 814 , 7 + 814 , 7 @ @ public final class CFMetaData 
 for ( org . apache . cassandra . thrift . ColumnDef cdef : def . getColumn _ metadata ( ) ) 
 { 
 org . apache . cassandra . db . migration . avro . ColumnDef tdef = new org . apache . cassandra . db . migration . avro . ColumnDef ( ) ; 
 - tdef . name = ByteBufferUtil . clone ( cdef . BufferForName ( ) ) ; 
 + tdef . name = ByteBufferUtil . clone ( cdef . bufferForName ( ) ) ; 
 tdef . validation _ class = cdef . getValidation _ class ( ) ; 
 tdef . index _ name = cdef . getIndex _ name ( ) ; 
 tdef . index _ type = cdef . getIndex _ type ( ) = = null ? null : org . apache . cassandra . db . migration . avro . IndexType . valueOf ( cdef . getIndex _ type ( ) . name ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 index c122992 . . 2fac127 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraDaemon . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 import java . util . concurrent . ExecutorService ; 
 
 + import org . apache . thrift . server . TThreadPoolServer ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 132 , 21 + 133 , 19 @ @ public class CassandraDaemon extends org . apache . cassandra . service . AbstractCassan 
 } 
 
 / / ThreadPool Server 
 - CustomTThreadPoolServer . Options options = new CustomTThreadPoolServer . Options ( ) ; 
 - options . minWorkerThreads = DatabaseDescriptor . getRpcMinThreads ( ) ; 
 - options . maxWorkerThreads = DatabaseDescriptor . getRpcMaxThreads ( ) ; 
 + TThreadPoolServer . Args args = new TThreadPoolServer . Args ( tServerSocket ) 
 + . minWorkerThreads ( DatabaseDescriptor . getRpcMinThreads ( ) ) 
 + . maxWorkerThreads ( DatabaseDescriptor . getRpcMaxThreads ( ) ) 
 + . inputTransportFactory ( inTransportFactory ) 
 + . outputTransportFactory ( outTransportFactory ) 
 + . inputProtocolFactory ( tProtocolFactory ) 
 + . outputProtocolFactory ( tProtocolFactory ) 
 + . processor ( processor ) ; 
 
 ExecutorService executorService = new CleaningThreadPool ( cassandraServer . clientState , 
 - options . minWorkerThreads , 
 - options . maxWorkerThreads ) ; 
 - serverEngine = new CustomTThreadPoolServer ( new TProcessorFactory ( processor ) , 
 - tServerSocket , 
 - inTransportFactory , 
 - outTransportFactory , 
 - tProtocolFactory , 
 - tProtocolFactory , 
 - options , 
 - executorService ) ; 
 + args . minWorkerThreads , 
 + args . maxWorkerThreads ) ; 
 + serverEngine = new CustomTThreadPoolServer ( args , executorService ) ; 
 } 
 
 public void run ( ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 index 118c785 . . 1e69103 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 + import org . apache . thrift . server . TThreadPoolServer ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 55 , 38 + 56 , 18 @ @ public class CustomTThreadPoolServer extends TServer 
 private volatile boolean stopped _ ; 
 
 / / Server options 
 - private Options options _ ; 
 + private TThreadPoolServer . Args args ; 
 
 / / Track and Limit the number of connected clients 
 private final AtomicInteger activeClients = new AtomicInteger ( 0 ) ; 
 
 - / / Customizable server options 
 - public static class Options 
 - { 
 - public int minWorkerThreads = 5 ; 
 - public int maxWorkerThreads = Integer . MAX _ VALUE ; 
 - public int stopTimeoutVal = 60 ; 
 - public TimeUnit stopTimeoutUnit = TimeUnit . SECONDS ; 
 - } 
 - 
 - 
 - public CustomTThreadPoolServer ( TProcessorFactory tProcessorFactory , 
 - TServerSocket tServerSocket , 
 - TTransportFactory inTransportFactory , 
 - TTransportFactory outTransportFactory , 
 - TProtocolFactory tProtocolFactory , 
 - TProtocolFactory tProtocolFactory2 , 
 - Options options , 
 - ExecutorService executorService ) 
 - { 
 - 
 - super ( tProcessorFactory , tServerSocket , inTransportFactory , outTransportFactory , 
 - tProtocolFactory , tProtocolFactory2 ) ; 
 - options _ = options ; 
 + 
 + public CustomTThreadPoolServer ( TThreadPoolServer . Args args , ExecutorService executorService ) { 
 + super ( args ) ; 
 executorService _ = executorService ; 
 + this . args = args ; 
 } 
 - 
 - 
 + 
 public void serve ( ) 
 { 
 try 
 @ @ - 103 , 7 + 84 , 7 @ @ public class CustomTThreadPoolServer extends TServer 
 while ( ! stopped _ ) 
 { 
 / / block until we are under max clients 
 - while ( activeClients . get ( ) > = options _ . maxWorkerThreads ) 
 + while ( activeClients . get ( ) > = args . maxWorkerThreads ) 
 { 
 try 
 { 
 @ @ - 132 , 8 + 113 , 8 @ @ public class CustomTThreadPoolServer extends TServer 
 } 
 } 
 
 - if ( activeClients . get ( ) > = options _ . maxWorkerThreads ) 
 - LOGGER . warn ( " Maximum number of clients " + options _ . maxWorkerThreads + " reached " ) ; 
 + if ( activeClients . get ( ) > = args . maxWorkerThreads ) 
 + LOGGER . warn ( " Maximum number of clients " + args . maxWorkerThreads + " reached " ) ; 
 } 
 
 executorService _ . shutdown ( ) ; 
 @ @ - 142 , 7 + 123 , 7 @ @ public class CustomTThreadPoolServer extends TServer 
 / / exception . If we don ' t do this , then we ' ll shut down prematurely . We want 
 / / to let the executorService clear it ' s task queue , closing client sockets 
 / / appropriately . 
 - long timeoutMS = options _ . stopTimeoutUnit . toMillis ( options _ . stopTimeoutVal ) ; 
 + long timeoutMS = args . stopTimeoutUnit . toMillis ( args . stopTimeoutVal ) ; 
 long now = System . currentTimeMillis ( ) ; 
 while ( timeoutMS > = 0 ) 
 {
