BLEU SCORE: 0.014929831413909562

TEST MSG: Allow counter mutations in UNLOGGED batches
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b0d8e49 . . 4f68cf7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 - rc2 <nl> + * Allow counter mutations in UNLOGGED batches ( CASSANDRA - 7351 ) <nl> * Modify reconcile logic to always pick a tombstone over a counter cell <nl> ( CASSANDRA - 7346 ) <nl> * Avoid incremental compaction on Windows ( CASSANDRA - 7365 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 287a700 . . 86362f7 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 418 , 6 + 418 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> { <nl> ClientState clientState = queryState . getClientState ( ) ; <nl> batch . checkAccess ( clientState ) ; <nl> + batch . validate ( ) ; <nl> batch . validate ( clientState ) ; <nl> return batch . execute ( queryState , options ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> index 3cec81b . . b7d69cc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java <nl> @ @ - 95 , 7 + 95 , 8 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> statement . checkAccess ( state ) ; <nl> } <nl> <nl> - public void validate ( ClientState state ) throws InvalidRequestException <nl> + / / Validates a prepared batch statement without validating its nested statements . <nl> + public void validate ( ) throws InvalidRequestException <nl> { <nl> if ( attrs . isTimeToLiveSet ( ) ) <nl> throw new InvalidRequestException ( " Global TTL on the BATCH statement is not supported . " ) ; <nl> @ @ - 109 , 15 + 110 , 54 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> throw new InvalidRequestException ( " Cannot provide custom timestamp for counter BATCH " ) ; <nl> } <nl> <nl> + boolean hasCounters = false ; <nl> + boolean hasNonCounters = false ; <nl> + <nl> for ( ModificationStatement statement : statements ) <nl> { <nl> + if ( timestampSet & & statement . isCounter ( ) ) <nl> + throw new InvalidRequestException ( " Cannot provide custom timestamp for a BATCH containing counters " ) ; <nl> + <nl> if ( timestampSet & & statement . isTimestampSet ( ) ) <nl> throw new InvalidRequestException ( " Timestamp must be set either on BATCH or individual statements " ) ; <nl> <nl> - statement . validate ( state ) ; <nl> + if ( type = = Type . COUNTER & & ! statement . isCounter ( ) ) <nl> + throw new InvalidRequestException ( " Cannot include non - counter statement in a counter batch " ) ; <nl> + <nl> + if ( type = = Type . LOGGED & & statement . isCounter ( ) ) <nl> + throw new InvalidRequestException ( " Cannot include a counter statement in a logged batch " ) ; <nl> + <nl> + if ( statement . isCounter ( ) ) <nl> + hasCounters = true ; <nl> + else <nl> + hasNonCounters = true ; <nl> + } <nl> + <nl> + if ( hasCounters & & hasNonCounters ) <nl> + throw new InvalidRequestException ( " Counter and non - counter mutations cannot exist in the same batch " ) ; <nl> + <nl> + if ( hasConditions ) <nl> + { <nl> + String ksName = null ; <nl> + String cfName = null ; <nl> + for ( ModificationStatement stmt : statements ) <nl> + { <nl> + if ( ksName ! = null & & ( ! stmt . keyspace ( ) . equals ( ksName ) | | ! stmt . columnFamily ( ) . equals ( cfName ) ) ) <nl> + throw new InvalidRequestException ( " Batch with conditions cannot span multiple tables " ) ; <nl> + ksName = stmt . keyspace ( ) ; <nl> + cfName = stmt . columnFamily ( ) ; <nl> + } <nl> } <nl> } <nl> <nl> + / / The batch itself will be validated in either Parsed # prepare ( ) - for regular CQL3 batches , <nl> + / / or in QueryProcessor . processBatch ( ) - for native protocol batches . <nl> + public void validate ( ClientState state ) throws InvalidRequestException <nl> + { <nl> + for ( ModificationStatement statement : statements ) <nl> + statement . validate ( state ) ; <nl> + } <nl> + <nl> public List < ModificationStatement > getStatements ( ) <nl> { <nl> return statements ; <nl> @ @ - 180 , 12 + 220 , 12 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> { <nl> mut = new Mutation ( ksName , key ) ; <nl> mut . setSourceFrame ( sourceFrame ) ; <nl> - mutation = type = = Type . COUNTER ? new CounterMutation ( mut , options . getConsistency ( ) ) : mut ; <nl> + mutation = statement . cfm . isCounter ( ) ? new CounterMutation ( mut , options . getConsistency ( ) ) : mut ; <nl> ksMap . put ( key , mutation ) ; <nl> } <nl> else <nl> { <nl> - mut = type = = Type . COUNTER ? ( ( CounterMutation ) mutation ) . getMutation ( ) : ( Mutation ) mutation ; <nl> + mut = statement . cfm . isCounter ( ) ? ( ( CounterMutation ) mutation ) . getMutation ( ) : ( Mutation ) mutation ; <nl> } <nl> <nl> statement . addUpdateForKey ( mut . addOrGet ( statement . cfm ) , key , clusteringPrefix , params ) ; <nl> @ @ - 356 , 40 + 396 , 25 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache <nl> { <nl> VariableSpecifications boundNames = getBoundVariables ( ) ; <nl> <nl> - List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( parsedStatements . size ( ) ) ; <nl> + List < ModificationStatement > statements = new ArrayList < > ( parsedStatements . size ( ) ) ; <nl> boolean hasConditions = false ; <nl> + <nl> for ( ModificationStatement . Parsed parsed : parsedStatements ) <nl> { <nl> ModificationStatement stmt = parsed . prepare ( boundNames ) ; <nl> if ( stmt . hasConditions ( ) ) <nl> hasConditions = true ; <nl> <nl> - if ( stmt . isCounter ( ) & & type ! = Type . COUNTER ) <nl> - throw new InvalidRequestException ( " Counter mutations are only allowed in COUNTER batches " ) ; <nl> - <nl> - if ( ! stmt . isCounter ( ) & & type = = Type . COUNTER ) <nl> - throw new InvalidRequestException ( " Only counter mutations are allowed in COUNTER batches " ) ; <nl> - <nl> statements . add ( stmt ) ; <nl> } <nl> <nl> - if ( hasConditions ) <nl> - { <nl> - String ksName = null ; <nl> - String cfName = null ; <nl> - for ( ModificationStatement stmt : statements ) <nl> - { <nl> - if ( ksName ! = null & & ( ! stmt . keyspace ( ) . equals ( ksName ) | | ! stmt . columnFamily ( ) . equals ( cfName ) ) ) <nl> - throw new InvalidRequestException ( " Batch with conditions cannot span multiple tables " ) ; <nl> - ksName = stmt . keyspace ( ) ; <nl> - cfName = stmt . columnFamily ( ) ; <nl> - } <nl> - } <nl> - <nl> Attributes prepAttrs = attrs . prepare ( " [ batch ] " , " [ batch ] " ) ; <nl> prepAttrs . collectMarkerSpecification ( boundNames ) ; <nl> <nl> - return new ParsedStatement . Prepared ( new BatchStatement ( boundNames . size ( ) , type , statements , prepAttrs , hasConditions ) , boundNames ) ; <nl> + BatchStatement batchStatement = new BatchStatement ( boundNames . size ( ) , type , statements , prepAttrs , hasConditions ) ; <nl> + batchStatement . validate ( ) ; <nl> + <nl> + return new ParsedStatement . Prepared ( batchStatement , boundNames ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> index e2cb8a1 . . c199a62 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java <nl> @ @ - 209 , 16 + 209 , 7 @ @ public class BatchMessage extends Message . Request <nl> <nl> ModificationStatement mst = ( ModificationStatement ) statement ; <nl> hasConditions | = mst . hasConditions ( ) ; <nl> - if ( mst . isCounter ( ) ) <nl> - { <nl> - if ( type ! = BatchStatement . Type . COUNTER ) <nl> - throw new InvalidRequestException ( " Cannot include counter statement in a non - counter batch " ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( type = = BatchStatement . Type . COUNTER ) <nl> - throw new InvalidRequestException ( " Cannot include non - counter statement in a counter batch " ) ; <nl> - } <nl> + <nl> statements . add ( mst ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / BatchTests . java b / test / unit / org / apache / cassandra / cql3 / BatchTests . java <nl> new file mode 100644 <nl> index 0000000 . . 27d407e <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / BatchTests . java <nl> @ @ - 0 , 0 + 1 , 145 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import com . datastax . driver . core . BatchStatement ; <nl> + import com . datastax . driver . core . Cluster ; <nl> + import com . datastax . driver . core . PreparedStatement ; <nl> + import com . datastax . driver . core . Session ; <nl> + import com . datastax . driver . core . exceptions . InvalidQueryException ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . service . EmbeddedCassandraService ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + public class BatchTests <nl> + { <nl> + private static EmbeddedCassandraService cassandra ; <nl> + <nl> + private static Cluster cluster ; <nl> + private static Session session ; <nl> + <nl> + <nl> + private static PreparedStatement counter ; <nl> + private static PreparedStatement noncounter ; <nl> + <nl> + @ BeforeClass ( ) <nl> + public static void setup ( ) throws ConfigurationException , IOException <nl> + { <nl> + cassandra = new EmbeddedCassandraService ( ) ; <nl> + cassandra . start ( ) ; <nl> + <nl> + cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; <nl> + session = cluster . connect ( ) ; <nl> + <nl> + session . execute ( " drop keyspace if exists junit ; " ) ; <nl> + session . execute ( " create keyspace junit WITH REPLICATION = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } ; " ) ; <nl> + session . execute ( " CREATE TABLE junit . noncounter ( \ n " + <nl> + " id int PRIMARY KEY , \ n " + <nl> + " val text \ n " + <nl> + " ) ; " ) ; <nl> + session . execute ( " CREATE TABLE junit . counter ( \ n " + <nl> + " id int PRIMARY KEY , \ n " + <nl> + " val counter , \ n " + <nl> + " ) ; " ) ; <nl> + <nl> + <nl> + noncounter = session . prepare ( " insert into junit . noncounter ( id , val ) values ( ? , ? ) " ) ; <nl> + counter = session . prepare ( " update junit . counter set val = val + ? where id = ? " ) ; <nl> + } <nl> + <nl> + @ Test ( expected = InvalidQueryException . class ) <nl> + public void testMixedInCounterBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . COUNTER , true , true ) ; <nl> + } <nl> + <nl> + @ Test ( expected = InvalidQueryException . class ) <nl> + public void testMixedInLoggedBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . LOGGED , true , true ) ; <nl> + } <nl> + <nl> + @ Test ( expected = InvalidQueryException . class ) <nl> + public void testMixedInUnLoggedBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . UNLOGGED , true , true ) ; <nl> + } <nl> + <nl> + @ Test ( expected = InvalidQueryException . class ) <nl> + public void testNonCounterInCounterBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . COUNTER , false , true ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonCounterInLoggedBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . LOGGED , false , true ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNonCounterInUnLoggedBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . UNLOGGED , false , true ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCounterInCounterBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . COUNTER , true , false ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testCounterInUnLoggedBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . UNLOGGED , true , false ) ; <nl> + } <nl> + <nl> + <nl> + @ Test ( expected = InvalidQueryException . class ) <nl> + public void testCounterInLoggedBatch ( ) <nl> + { <nl> + sendBatch ( BatchStatement . Type . LOGGED , true , false ) ; <nl> + } <nl> + <nl> + <nl> + <nl> + public void sendBatch ( BatchStatement . Type type , boolean addCounter , boolean addNonCounter ) <nl> + { <nl> + <nl> + assert addCounter | | addNonCounter ; <nl> + BatchStatement b = new BatchStatement ( type ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + if ( addNonCounter ) <nl> + b . add ( noncounter . bind ( i , " foo " ) ) ; <nl> + <nl> + if ( addCounter ) <nl> + b . add ( counter . bind ( ( long ) i , i ) ) ; <nl> + } <nl> + <nl> + session . execute ( b ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> index 3395dcc . . d2dbc79 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java <nl> @ @ - 1 , 3 + 1 , 20 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> package org . apache . cassandra . cql3 ; <nl> <nl> <nl> @ @ - 16 , 9 + 33 , 8 @ @ import org . junit . Test ; <nl> <nl> import java . io . IOException ; <nl> <nl> - public class DeleteTest extends SchemaLoader <nl> + public class DeleteTest <nl> { <nl> - <nl> private static EmbeddedCassandraService cassandra ; <nl> <nl> private static Cluster cluster ; <nl> @ @ - 35 , 8 + 51 , 6 @ @ public class DeleteTest extends SchemaLoader <nl> @ BeforeClass ( ) <nl> public static void setup ( ) throws ConfigurationException , IOException <nl> { <nl> - <nl> - Schema . instance . clear ( ) ; / / Schema are now written on disk and will be reloaded <nl> cassandra = new EmbeddedCassandraService ( ) ; <nl> cassandra . start ( ) ; <nl> <nl> @ @ - 80 , 11 + 94 , 6 @ @ public class DeleteTest extends SchemaLoader <nl> " val text , \ n " + <nl> " PRIMARY KEY ( ( id ) , cid ) \ n " + <nl> " ) ; " ) ; <nl> - try { <nl> - Thread . sleep ( 2000L ) ; <nl> - } catch ( InterruptedException e ) { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> <nl> pstmtI = session . prepare ( " insert into junit . tpc _ inherit _ b ( id , cid , inh _ b , val ) values ( ? , ? , ? , ? ) " ) ; <nl> pstmtU = session . prepare ( " update junit . tpc _ inherit _ b set inh _ b = ? , val = ? where id = ? and cid = ? " ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b0d8e49 . . 4f68cf7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 - rc2 
 + * Allow counter mutations in UNLOGGED batches ( CASSANDRA - 7351 ) 
 * Modify reconcile logic to always pick a tombstone over a counter cell 
 ( CASSANDRA - 7346 ) 
 * Avoid incremental compaction on Windows ( CASSANDRA - 7365 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 287a700 . . 86362f7 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 418 , 6 + 418 , 7 @ @ public class QueryProcessor implements QueryHandler 
 { 
 ClientState clientState = queryState . getClientState ( ) ; 
 batch . checkAccess ( clientState ) ; 
 + batch . validate ( ) ; 
 batch . validate ( clientState ) ; 
 return batch . execute ( queryState , options ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 index 3cec81b . . b7d69cc 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / BatchStatement . java 
 @ @ - 95 , 7 + 95 , 8 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 statement . checkAccess ( state ) ; 
 } 
 
 - public void validate ( ClientState state ) throws InvalidRequestException 
 + / / Validates a prepared batch statement without validating its nested statements . 
 + public void validate ( ) throws InvalidRequestException 
 { 
 if ( attrs . isTimeToLiveSet ( ) ) 
 throw new InvalidRequestException ( " Global TTL on the BATCH statement is not supported . " ) ; 
 @ @ - 109 , 15 + 110 , 54 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 throw new InvalidRequestException ( " Cannot provide custom timestamp for counter BATCH " ) ; 
 } 
 
 + boolean hasCounters = false ; 
 + boolean hasNonCounters = false ; 
 + 
 for ( ModificationStatement statement : statements ) 
 { 
 + if ( timestampSet & & statement . isCounter ( ) ) 
 + throw new InvalidRequestException ( " Cannot provide custom timestamp for a BATCH containing counters " ) ; 
 + 
 if ( timestampSet & & statement . isTimestampSet ( ) ) 
 throw new InvalidRequestException ( " Timestamp must be set either on BATCH or individual statements " ) ; 
 
 - statement . validate ( state ) ; 
 + if ( type = = Type . COUNTER & & ! statement . isCounter ( ) ) 
 + throw new InvalidRequestException ( " Cannot include non - counter statement in a counter batch " ) ; 
 + 
 + if ( type = = Type . LOGGED & & statement . isCounter ( ) ) 
 + throw new InvalidRequestException ( " Cannot include a counter statement in a logged batch " ) ; 
 + 
 + if ( statement . isCounter ( ) ) 
 + hasCounters = true ; 
 + else 
 + hasNonCounters = true ; 
 + } 
 + 
 + if ( hasCounters & & hasNonCounters ) 
 + throw new InvalidRequestException ( " Counter and non - counter mutations cannot exist in the same batch " ) ; 
 + 
 + if ( hasConditions ) 
 + { 
 + String ksName = null ; 
 + String cfName = null ; 
 + for ( ModificationStatement stmt : statements ) 
 + { 
 + if ( ksName ! = null & & ( ! stmt . keyspace ( ) . equals ( ksName ) | | ! stmt . columnFamily ( ) . equals ( cfName ) ) ) 
 + throw new InvalidRequestException ( " Batch with conditions cannot span multiple tables " ) ; 
 + ksName = stmt . keyspace ( ) ; 
 + cfName = stmt . columnFamily ( ) ; 
 + } 
 } 
 } 
 
 + / / The batch itself will be validated in either Parsed # prepare ( ) - for regular CQL3 batches , 
 + / / or in QueryProcessor . processBatch ( ) - for native protocol batches . 
 + public void validate ( ClientState state ) throws InvalidRequestException 
 + { 
 + for ( ModificationStatement statement : statements ) 
 + statement . validate ( state ) ; 
 + } 
 + 
 public List < ModificationStatement > getStatements ( ) 
 { 
 return statements ; 
 @ @ - 180 , 12 + 220 , 12 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 { 
 mut = new Mutation ( ksName , key ) ; 
 mut . setSourceFrame ( sourceFrame ) ; 
 - mutation = type = = Type . COUNTER ? new CounterMutation ( mut , options . getConsistency ( ) ) : mut ; 
 + mutation = statement . cfm . isCounter ( ) ? new CounterMutation ( mut , options . getConsistency ( ) ) : mut ; 
 ksMap . put ( key , mutation ) ; 
 } 
 else 
 { 
 - mut = type = = Type . COUNTER ? ( ( CounterMutation ) mutation ) . getMutation ( ) : ( Mutation ) mutation ; 
 + mut = statement . cfm . isCounter ( ) ? ( ( CounterMutation ) mutation ) . getMutation ( ) : ( Mutation ) mutation ; 
 } 
 
 statement . addUpdateForKey ( mut . addOrGet ( statement . cfm ) , key , clusteringPrefix , params ) ; 
 @ @ - 356 , 40 + 396 , 25 @ @ public class BatchStatement implements CQLStatement , MeasurableForPreparedCache 
 { 
 VariableSpecifications boundNames = getBoundVariables ( ) ; 
 
 - List < ModificationStatement > statements = new ArrayList < ModificationStatement > ( parsedStatements . size ( ) ) ; 
 + List < ModificationStatement > statements = new ArrayList < > ( parsedStatements . size ( ) ) ; 
 boolean hasConditions = false ; 
 + 
 for ( ModificationStatement . Parsed parsed : parsedStatements ) 
 { 
 ModificationStatement stmt = parsed . prepare ( boundNames ) ; 
 if ( stmt . hasConditions ( ) ) 
 hasConditions = true ; 
 
 - if ( stmt . isCounter ( ) & & type ! = Type . COUNTER ) 
 - throw new InvalidRequestException ( " Counter mutations are only allowed in COUNTER batches " ) ; 
 - 
 - if ( ! stmt . isCounter ( ) & & type = = Type . COUNTER ) 
 - throw new InvalidRequestException ( " Only counter mutations are allowed in COUNTER batches " ) ; 
 - 
 statements . add ( stmt ) ; 
 } 
 
 - if ( hasConditions ) 
 - { 
 - String ksName = null ; 
 - String cfName = null ; 
 - for ( ModificationStatement stmt : statements ) 
 - { 
 - if ( ksName ! = null & & ( ! stmt . keyspace ( ) . equals ( ksName ) | | ! stmt . columnFamily ( ) . equals ( cfName ) ) ) 
 - throw new InvalidRequestException ( " Batch with conditions cannot span multiple tables " ) ; 
 - ksName = stmt . keyspace ( ) ; 
 - cfName = stmt . columnFamily ( ) ; 
 - } 
 - } 
 - 
 Attributes prepAttrs = attrs . prepare ( " [ batch ] " , " [ batch ] " ) ; 
 prepAttrs . collectMarkerSpecification ( boundNames ) ; 
 
 - return new ParsedStatement . Prepared ( new BatchStatement ( boundNames . size ( ) , type , statements , prepAttrs , hasConditions ) , boundNames ) ; 
 + BatchStatement batchStatement = new BatchStatement ( boundNames . size ( ) , type , statements , prepAttrs , hasConditions ) ; 
 + batchStatement . validate ( ) ; 
 + 
 + return new ParsedStatement . Prepared ( batchStatement , boundNames ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 index e2cb8a1 . . c199a62 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / BatchMessage . java 
 @ @ - 209 , 16 + 209 , 7 @ @ public class BatchMessage extends Message . Request 
 
 ModificationStatement mst = ( ModificationStatement ) statement ; 
 hasConditions | = mst . hasConditions ( ) ; 
 - if ( mst . isCounter ( ) ) 
 - { 
 - if ( type ! = BatchStatement . Type . COUNTER ) 
 - throw new InvalidRequestException ( " Cannot include counter statement in a non - counter batch " ) ; 
 - } 
 - else 
 - { 
 - if ( type = = BatchStatement . Type . COUNTER ) 
 - throw new InvalidRequestException ( " Cannot include non - counter statement in a counter batch " ) ; 
 - } 
 + 
 statements . add ( mst ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / BatchTests . java b / test / unit / org / apache / cassandra / cql3 / BatchTests . java 
 new file mode 100644 
 index 0000000 . . 27d407e 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / BatchTests . java 
 @ @ - 0 , 0 + 1 , 145 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import com . datastax . driver . core . BatchStatement ; 
 + import com . datastax . driver . core . Cluster ; 
 + import com . datastax . driver . core . PreparedStatement ; 
 + import com . datastax . driver . core . Session ; 
 + import com . datastax . driver . core . exceptions . InvalidQueryException ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . service . EmbeddedCassandraService ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import java . io . IOException ; 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + public class BatchTests 
 + { 
 + private static EmbeddedCassandraService cassandra ; 
 + 
 + private static Cluster cluster ; 
 + private static Session session ; 
 + 
 + 
 + private static PreparedStatement counter ; 
 + private static PreparedStatement noncounter ; 
 + 
 + @ BeforeClass ( ) 
 + public static void setup ( ) throws ConfigurationException , IOException 
 + { 
 + cassandra = new EmbeddedCassandraService ( ) ; 
 + cassandra . start ( ) ; 
 + 
 + cluster = Cluster . builder ( ) . addContactPoint ( " 127 . 0 . 0 . 1 " ) . withPort ( DatabaseDescriptor . getNativeTransportPort ( ) ) . build ( ) ; 
 + session = cluster . connect ( ) ; 
 + 
 + session . execute ( " drop keyspace if exists junit ; " ) ; 
 + session . execute ( " create keyspace junit WITH REPLICATION = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : 1 } ; " ) ; 
 + session . execute ( " CREATE TABLE junit . noncounter ( \ n " + 
 + " id int PRIMARY KEY , \ n " + 
 + " val text \ n " + 
 + " ) ; " ) ; 
 + session . execute ( " CREATE TABLE junit . counter ( \ n " + 
 + " id int PRIMARY KEY , \ n " + 
 + " val counter , \ n " + 
 + " ) ; " ) ; 
 + 
 + 
 + noncounter = session . prepare ( " insert into junit . noncounter ( id , val ) values ( ? , ? ) " ) ; 
 + counter = session . prepare ( " update junit . counter set val = val + ? where id = ? " ) ; 
 + } 
 + 
 + @ Test ( expected = InvalidQueryException . class ) 
 + public void testMixedInCounterBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . COUNTER , true , true ) ; 
 + } 
 + 
 + @ Test ( expected = InvalidQueryException . class ) 
 + public void testMixedInLoggedBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . LOGGED , true , true ) ; 
 + } 
 + 
 + @ Test ( expected = InvalidQueryException . class ) 
 + public void testMixedInUnLoggedBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . UNLOGGED , true , true ) ; 
 + } 
 + 
 + @ Test ( expected = InvalidQueryException . class ) 
 + public void testNonCounterInCounterBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . COUNTER , false , true ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonCounterInLoggedBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . LOGGED , false , true ) ; 
 + } 
 + 
 + @ Test 
 + public void testNonCounterInUnLoggedBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . UNLOGGED , false , true ) ; 
 + } 
 + 
 + @ Test 
 + public void testCounterInCounterBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . COUNTER , true , false ) ; 
 + } 
 + 
 + @ Test 
 + public void testCounterInUnLoggedBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . UNLOGGED , true , false ) ; 
 + } 
 + 
 + 
 + @ Test ( expected = InvalidQueryException . class ) 
 + public void testCounterInLoggedBatch ( ) 
 + { 
 + sendBatch ( BatchStatement . Type . LOGGED , true , false ) ; 
 + } 
 + 
 + 
 + 
 + public void sendBatch ( BatchStatement . Type type , boolean addCounter , boolean addNonCounter ) 
 + { 
 + 
 + assert addCounter | | addNonCounter ; 
 + BatchStatement b = new BatchStatement ( type ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + if ( addNonCounter ) 
 + b . add ( noncounter . bind ( i , " foo " ) ) ; 
 + 
 + if ( addCounter ) 
 + b . add ( counter . bind ( ( long ) i , i ) ) ; 
 + } 
 + 
 + session . execute ( b ) ; 
 + } 
 + 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 index 3395dcc . . d2dbc79 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / DeleteTest . java 
 @ @ - 1 , 3 + 1 , 20 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 package org . apache . cassandra . cql3 ; 
 
 
 @ @ - 16 , 9 + 33 , 8 @ @ import org . junit . Test ; 
 
 import java . io . IOException ; 
 
 - public class DeleteTest extends SchemaLoader 
 + public class DeleteTest 
 { 
 - 
 private static EmbeddedCassandraService cassandra ; 
 
 private static Cluster cluster ; 
 @ @ - 35 , 8 + 51 , 6 @ @ public class DeleteTest extends SchemaLoader 
 @ BeforeClass ( ) 
 public static void setup ( ) throws ConfigurationException , IOException 
 { 
 - 
 - Schema . instance . clear ( ) ; / / Schema are now written on disk and will be reloaded 
 cassandra = new EmbeddedCassandraService ( ) ; 
 cassandra . start ( ) ; 
 
 @ @ - 80 , 11 + 94 , 6 @ @ public class DeleteTest extends SchemaLoader 
 " val text , \ n " + 
 " PRIMARY KEY ( ( id ) , cid ) \ n " + 
 " ) ; " ) ; 
 - try { 
 - Thread . sleep ( 2000L ) ; 
 - } catch ( InterruptedException e ) { 
 - throw new RuntimeException ( e ) ; 
 - } 
 
 pstmtI = session . prepare ( " insert into junit . tpc _ inherit _ b ( id , cid , inh _ b , val ) values ( ? , ? , ? , ? ) " ) ; 
 pstmtU = session . prepare ( " update junit . tpc _ inherit _ b set inh _ b = ? , val = ? where id = ? and cid = ? " ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
