BLEU SCORE: 0.05522397783539471

TEST MSG: Fix regression of lagging commitlog flush log message
GENERATED MSG: optimize commitlog checksumming with PureJavaCrc32

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 16fe6d1 . . dfdfbfd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 17 <nl> + * Fix regression of lagging commitlog flush log message ( CASSANDRA - 14451 ) <nl> * Add Missing dependencies in pom - all ( CASSANDRA - 14422 ) <nl> * Cleanup StartupClusterConnectivityChecker and PING Verb ( CASSANDRA - 14447 ) <nl> * Fix deprecated repair error notifications from 3 . x clusters to legacy JMX clients ( CASSANDRA - 13121 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> index 1cee55d . . 0845bd5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java <nl> @ @ - 29 , 6 + 29 , 8 @ @ import java . util . concurrent . Semaphore ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> public abstract class AbstractCommitLogService <nl> { <nl> / * * <nl> @ @ - 165 , 13 + 167 , 15 @ @ public abstract class AbstractCommitLogService <nl> <nl> / / sync and signal <nl> long pollStarted = clock . currentTimeMillis ( ) ; <nl> - if ( lastSyncedAt + syncIntervalMillis < = pollStarted | | shutdown | | syncRequested ) <nl> + boolean flushToDisk = lastSyncedAt + syncIntervalMillis < = pollStarted | | shutdown | | syncRequested ; <nl> + if ( flushToDisk ) <nl> { <nl> / / in this branch , we want to flush the commit log to disk <nl> syncRequested = false ; <nl> commitLog . sync ( shutdown , true ) ; <nl> lastSyncedAt = pollStarted ; <nl> syncComplete . signalAll ( ) ; <nl> + syncCount + + ; <nl> } <nl> else <nl> { <nl> @ @ - 179 , 41 + 183 , 15 @ @ public abstract class AbstractCommitLogService <nl> commitLog . sync ( false , false ) ; <nl> } <nl> <nl> - / / sleep any time we have left before the next one is due <nl> long now = clock . currentTimeMillis ( ) ; <nl> - long sleep = pollStarted + markerIntervalMillis - now ; <nl> - if ( sleep < 0 ) <nl> - { <nl> - / / if we have lagged noticeably , update our lag counter <nl> - if ( firstLagAt = = 0 ) <nl> - { <nl> - firstLagAt = now ; <nl> - totalSyncDuration = syncExceededIntervalBy = syncCount = lagCount = 0 ; <nl> - } <nl> - syncExceededIntervalBy - = sleep ; <nl> - lagCount + + ; <nl> - } <nl> - syncCount + + ; <nl> - totalSyncDuration + = now - pollStarted ; <nl> - <nl> - if ( firstLagAt > 0 ) <nl> - { <nl> - / / Only reset the lag tracking if it actually logged this time <nl> - boolean logged = NoSpamLogger . log ( <nl> - logger , <nl> - NoSpamLogger . Level . WARN , <nl> - 5 , <nl> - TimeUnit . MINUTES , <nl> - " Out of { } commit log syncs over the past { } s with average duration of { } ms , { } have exceeded the configured commit interval by an average of { } ms " , <nl> - syncCount , ( now - firstLagAt ) / 1000 , String . format ( " % . 2f " , ( double ) totalSyncDuration / syncCount ) , lagCount , String . format ( " % . 2f " , ( double ) syncExceededIntervalBy / lagCount ) ) ; <nl> - if ( logged ) <nl> - firstLagAt = 0 ; <nl> - } <nl> + if ( flushToDisk ) <nl> + maybeLogFlushLag ( pollStarted , now ) ; <nl> <nl> if ( ! run ) <nl> return false ; <nl> <nl> / / if we have lagged this round , we probably have work to do already so we don ' t sleep <nl> + long sleep = pollStarted + markerIntervalMillis - now ; <nl> if ( sleep < 0 ) <nl> return true ; <nl> <nl> @ @ - 244 , 6 + 222 , 53 @ @ public abstract class AbstractCommitLogService <nl> } <nl> return true ; <nl> } <nl> + <nl> + / * * <nl> + * Add a log entry whenever the time to flush the commit log to disk exceeds { @ link # syncIntervalMillis } . <nl> + * / <nl> + @ VisibleForTesting <nl> + boolean maybeLogFlushLag ( long pollStarted , long now ) <nl> + { <nl> + long flushDuration = now - pollStarted ; <nl> + totalSyncDuration + = flushDuration ; <nl> + <nl> + / / this is the timestamp by which we should have completed the flush <nl> + long maxFlushTimestamp = pollStarted + syncIntervalMillis ; <nl> + if ( maxFlushTimestamp > now ) <nl> + return false ; <nl> + <nl> + / / if we have lagged noticeably , update our lag counter <nl> + if ( firstLagAt = = 0 ) <nl> + { <nl> + firstLagAt = now ; <nl> + syncExceededIntervalBy = lagCount = 0 ; <nl> + syncCount = 1 ; <nl> + totalSyncDuration = flushDuration ; <nl> + } <nl> + syncExceededIntervalBy + = now - maxFlushTimestamp ; <nl> + lagCount + + ; <nl> + <nl> + if ( firstLagAt > 0 ) <nl> + { <nl> + / / Only reset the lag tracking if it actually logged this time <nl> + boolean logged = NoSpamLogger . log ( <nl> + logger , <nl> + NoSpamLogger . Level . WARN , <nl> + 5 , <nl> + TimeUnit . MINUTES , <nl> + " Out of { } commit log syncs over the past { } s with average duration of { } ms , { } have exceeded the configured commit interval by an average of { } ms " , <nl> + syncCount , ( now - firstLagAt ) / 1000 , String . format ( " % . 2f " , ( double ) totalSyncDuration / syncCount ) , lagCount , String . format ( " % . 2f " , ( double ) syncExceededIntervalBy / lagCount ) ) ; <nl> + if ( logged ) <nl> + firstLagAt = 0 ; <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> + @ VisibleForTesting <nl> + long getTotalSyncDuration ( ) <nl> + { <nl> + return totalSyncDuration ; <nl> + } <nl> } <nl> <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java b / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java <nl> index 5a46e5f . . 6f51eaf 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . junit . Test ; <nl> <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . commitlog . AbstractCommitLogService . SyncRunnable ; <nl> import org . apache . cassandra . utils . Clock ; <nl> import org . apache . cassandra . utils . FreeRunningClock ; <nl> <nl> @ @ - 117 , 7 + 118 , 7 @ @ public class AbstractCommitLogServiceTest <nl> long syncTimeMillis = AbstractCommitLogService . DEFAULT _ MARKER _ INTERVAL _ MILLIS * 2 ; <nl> FreeRunningClock clock = new FreeRunningClock ( ) ; <nl> FakeCommitLogService commitLogService = new FakeCommitLogService ( syncTimeMillis ) ; <nl> - AbstractCommitLogService . SyncRunnable syncRunnable = commitLogService . new SyncRunnable ( clock ) ; <nl> + SyncRunnable syncRunnable = commitLogService . new SyncRunnable ( clock ) ; <nl> FakeCommitLog commitLog = ( FakeCommitLog ) commitLogService . commitLog ; <nl> <nl> / / at time 0 <nl> @ @ - 173 , 4 + 174 , 50 @ @ public class AbstractCommitLogServiceTest <nl> markCount . incrementAndGet ( ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void maybeLogFlushLag _ MustLog ( ) <nl> + { <nl> + long syncTimeMillis = 10 ; <nl> + SyncRunnable syncRunnable = new FakeCommitLogService ( syncTimeMillis ) . new SyncRunnable ( new FreeRunningClock ( ) ) ; <nl> + long pollStarted = 1 ; <nl> + long now = pollStarted + ( syncTimeMillis * 2 ) ; <nl> + Assert . assertTrue ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; <nl> + Assert . assertEquals ( now - pollStarted , syncRunnable . getTotalSyncDuration ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void maybeLogFlushLag _ NoLog ( ) <nl> + { <nl> + long syncTimeMillis = 10 ; <nl> + SyncRunnable syncRunnable = new FakeCommitLogService ( syncTimeMillis ) . new SyncRunnable ( new FreeRunningClock ( ) ) ; <nl> + long pollStarted = 1 ; <nl> + long now = pollStarted + ( syncTimeMillis - 1 ) ; <nl> + Assert . assertFalse ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; <nl> + Assert . assertEquals ( now - pollStarted , syncRunnable . getTotalSyncDuration ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Mostly tests that { @ link SyncRunnable # totalSyncDuration } is handled correctly <nl> + * / <nl> + @ Test <nl> + public void maybeLogFlushLag _ MultipleOperations ( ) <nl> + { <nl> + long syncTimeMillis = 10 ; <nl> + SyncRunnable syncRunnable = new FakeCommitLogService ( syncTimeMillis ) . new SyncRunnable ( new FreeRunningClock ( ) ) ; <nl> + <nl> + long pollStarted = 1 ; <nl> + long now = pollStarted + ( syncTimeMillis - 1 ) ; <nl> + <nl> + int runCount = 12 ; <nl> + for ( int i = 1 ; i < = runCount ; i + + ) <nl> + { <nl> + Assert . assertFalse ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; <nl> + Assert . assertEquals ( i * ( now - pollStarted ) , syncRunnable . getTotalSyncDuration ( ) ) ; <nl> + } <nl> + <nl> + now = pollStarted + ( syncTimeMillis * 2 ) ; <nl> + Assert . assertTrue ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; <nl> + Assert . assertEquals ( now - pollStarted , syncRunnable . getTotalSyncDuration ( ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index fc401b8 . . cc3c18e 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 14 , 6 + 14 , 8 @ @ by version X , but the inverse is not necessarily the case . ) <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> + - Compression is enabled by default on newly created ColumnFamilies <nl> + ( and unchanged for ColumnFamilies created prior to upgrading ) . <nl> - The KsDef . replication _ factor field ( deprecated since 0 . 8 ) has <nl> been removed . Older clients will need to be updated to be able <nl> to continue to created and update keyspaces . <nl> @ @ - 59 , 6 + 61 , 7 @ @ Features <nl> - Hadoop : a new BulkOutputFormat is included which will directly write <nl> SSTables locally and then stream them into the cluster . <nl> - Hadoop : KeyRange . filter is now supported with ColumnFamilyInputFormat <nl> + - Hadoop wide row mode added to ColumnFamilyInputFormat <nl> - The bulk loader is not longer a fat client ; it can be run from an <nl> existing machine in a cluster . <nl> - A new write survey mode has been added , similar to bootstrap ( enabled via <nl> @ @ - 69 , 6 + 72 , 7 @ @ Features <nl> threshold . <nl> - Off - heap caches no longer require JNA . <nl> - Streaming is now multithreaded . <nl> + - Compactions may now be aborted via JMX or nodetool . <nl> <nl> <nl> 1 . 0 . 8

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 16fe6d1 . . dfdfbfd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 17 
 + * Fix regression of lagging commitlog flush log message ( CASSANDRA - 14451 ) 
 * Add Missing dependencies in pom - all ( CASSANDRA - 14422 ) 
 * Cleanup StartupClusterConnectivityChecker and PING Verb ( CASSANDRA - 14447 ) 
 * Fix deprecated repair error notifications from 3 . x clusters to legacy JMX clients ( CASSANDRA - 13121 ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 index 1cee55d . . 0845bd5 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogService . java 
 @ @ - 29 , 6 + 29 , 8 @ @ import java . util . concurrent . Semaphore ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 public abstract class AbstractCommitLogService 
 { 
 / * * 
 @ @ - 165 , 13 + 167 , 15 @ @ public abstract class AbstractCommitLogService 
 
 / / sync and signal 
 long pollStarted = clock . currentTimeMillis ( ) ; 
 - if ( lastSyncedAt + syncIntervalMillis < = pollStarted | | shutdown | | syncRequested ) 
 + boolean flushToDisk = lastSyncedAt + syncIntervalMillis < = pollStarted | | shutdown | | syncRequested ; 
 + if ( flushToDisk ) 
 { 
 / / in this branch , we want to flush the commit log to disk 
 syncRequested = false ; 
 commitLog . sync ( shutdown , true ) ; 
 lastSyncedAt = pollStarted ; 
 syncComplete . signalAll ( ) ; 
 + syncCount + + ; 
 } 
 else 
 { 
 @ @ - 179 , 41 + 183 , 15 @ @ public abstract class AbstractCommitLogService 
 commitLog . sync ( false , false ) ; 
 } 
 
 - / / sleep any time we have left before the next one is due 
 long now = clock . currentTimeMillis ( ) ; 
 - long sleep = pollStarted + markerIntervalMillis - now ; 
 - if ( sleep < 0 ) 
 - { 
 - / / if we have lagged noticeably , update our lag counter 
 - if ( firstLagAt = = 0 ) 
 - { 
 - firstLagAt = now ; 
 - totalSyncDuration = syncExceededIntervalBy = syncCount = lagCount = 0 ; 
 - } 
 - syncExceededIntervalBy - = sleep ; 
 - lagCount + + ; 
 - } 
 - syncCount + + ; 
 - totalSyncDuration + = now - pollStarted ; 
 - 
 - if ( firstLagAt > 0 ) 
 - { 
 - / / Only reset the lag tracking if it actually logged this time 
 - boolean logged = NoSpamLogger . log ( 
 - logger , 
 - NoSpamLogger . Level . WARN , 
 - 5 , 
 - TimeUnit . MINUTES , 
 - " Out of { } commit log syncs over the past { } s with average duration of { } ms , { } have exceeded the configured commit interval by an average of { } ms " , 
 - syncCount , ( now - firstLagAt ) / 1000 , String . format ( " % . 2f " , ( double ) totalSyncDuration / syncCount ) , lagCount , String . format ( " % . 2f " , ( double ) syncExceededIntervalBy / lagCount ) ) ; 
 - if ( logged ) 
 - firstLagAt = 0 ; 
 - } 
 + if ( flushToDisk ) 
 + maybeLogFlushLag ( pollStarted , now ) ; 
 
 if ( ! run ) 
 return false ; 
 
 / / if we have lagged this round , we probably have work to do already so we don ' t sleep 
 + long sleep = pollStarted + markerIntervalMillis - now ; 
 if ( sleep < 0 ) 
 return true ; 
 
 @ @ - 244 , 6 + 222 , 53 @ @ public abstract class AbstractCommitLogService 
 } 
 return true ; 
 } 
 + 
 + / * * 
 + * Add a log entry whenever the time to flush the commit log to disk exceeds { @ link # syncIntervalMillis } . 
 + * / 
 + @ VisibleForTesting 
 + boolean maybeLogFlushLag ( long pollStarted , long now ) 
 + { 
 + long flushDuration = now - pollStarted ; 
 + totalSyncDuration + = flushDuration ; 
 + 
 + / / this is the timestamp by which we should have completed the flush 
 + long maxFlushTimestamp = pollStarted + syncIntervalMillis ; 
 + if ( maxFlushTimestamp > now ) 
 + return false ; 
 + 
 + / / if we have lagged noticeably , update our lag counter 
 + if ( firstLagAt = = 0 ) 
 + { 
 + firstLagAt = now ; 
 + syncExceededIntervalBy = lagCount = 0 ; 
 + syncCount = 1 ; 
 + totalSyncDuration = flushDuration ; 
 + } 
 + syncExceededIntervalBy + = now - maxFlushTimestamp ; 
 + lagCount + + ; 
 + 
 + if ( firstLagAt > 0 ) 
 + { 
 + / / Only reset the lag tracking if it actually logged this time 
 + boolean logged = NoSpamLogger . log ( 
 + logger , 
 + NoSpamLogger . Level . WARN , 
 + 5 , 
 + TimeUnit . MINUTES , 
 + " Out of { } commit log syncs over the past { } s with average duration of { } ms , { } have exceeded the configured commit interval by an average of { } ms " , 
 + syncCount , ( now - firstLagAt ) / 1000 , String . format ( " % . 2f " , ( double ) totalSyncDuration / syncCount ) , lagCount , String . format ( " % . 2f " , ( double ) syncExceededIntervalBy / lagCount ) ) ; 
 + if ( logged ) 
 + firstLagAt = 0 ; 
 + } 
 + return true ; 
 + } 
 + 
 + @ VisibleForTesting 
 + long getTotalSyncDuration ( ) 
 + { 
 + return totalSyncDuration ; 
 + } 
 } 
 
 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java b / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java 
 index 5a46e5f . . 6f51eaf 100644 
 - - - a / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / AbstractCommitLogServiceTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . junit . Test ; 
 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . commitlog . AbstractCommitLogService . SyncRunnable ; 
 import org . apache . cassandra . utils . Clock ; 
 import org . apache . cassandra . utils . FreeRunningClock ; 
 
 @ @ - 117 , 7 + 118 , 7 @ @ public class AbstractCommitLogServiceTest 
 long syncTimeMillis = AbstractCommitLogService . DEFAULT _ MARKER _ INTERVAL _ MILLIS * 2 ; 
 FreeRunningClock clock = new FreeRunningClock ( ) ; 
 FakeCommitLogService commitLogService = new FakeCommitLogService ( syncTimeMillis ) ; 
 - AbstractCommitLogService . SyncRunnable syncRunnable = commitLogService . new SyncRunnable ( clock ) ; 
 + SyncRunnable syncRunnable = commitLogService . new SyncRunnable ( clock ) ; 
 FakeCommitLog commitLog = ( FakeCommitLog ) commitLogService . commitLog ; 
 
 / / at time 0 
 @ @ - 173 , 4 + 174 , 50 @ @ public class AbstractCommitLogServiceTest 
 markCount . incrementAndGet ( ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void maybeLogFlushLag _ MustLog ( ) 
 + { 
 + long syncTimeMillis = 10 ; 
 + SyncRunnable syncRunnable = new FakeCommitLogService ( syncTimeMillis ) . new SyncRunnable ( new FreeRunningClock ( ) ) ; 
 + long pollStarted = 1 ; 
 + long now = pollStarted + ( syncTimeMillis * 2 ) ; 
 + Assert . assertTrue ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; 
 + Assert . assertEquals ( now - pollStarted , syncRunnable . getTotalSyncDuration ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void maybeLogFlushLag _ NoLog ( ) 
 + { 
 + long syncTimeMillis = 10 ; 
 + SyncRunnable syncRunnable = new FakeCommitLogService ( syncTimeMillis ) . new SyncRunnable ( new FreeRunningClock ( ) ) ; 
 + long pollStarted = 1 ; 
 + long now = pollStarted + ( syncTimeMillis - 1 ) ; 
 + Assert . assertFalse ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; 
 + Assert . assertEquals ( now - pollStarted , syncRunnable . getTotalSyncDuration ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Mostly tests that { @ link SyncRunnable # totalSyncDuration } is handled correctly 
 + * / 
 + @ Test 
 + public void maybeLogFlushLag _ MultipleOperations ( ) 
 + { 
 + long syncTimeMillis = 10 ; 
 + SyncRunnable syncRunnable = new FakeCommitLogService ( syncTimeMillis ) . new SyncRunnable ( new FreeRunningClock ( ) ) ; 
 + 
 + long pollStarted = 1 ; 
 + long now = pollStarted + ( syncTimeMillis - 1 ) ; 
 + 
 + int runCount = 12 ; 
 + for ( int i = 1 ; i < = runCount ; i + + ) 
 + { 
 + Assert . assertFalse ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; 
 + Assert . assertEquals ( i * ( now - pollStarted ) , syncRunnable . getTotalSyncDuration ( ) ) ; 
 + } 
 + 
 + now = pollStarted + ( syncTimeMillis * 2 ) ; 
 + Assert . assertTrue ( syncRunnable . maybeLogFlushLag ( pollStarted , now ) ) ; 
 + Assert . assertEquals ( now - pollStarted , syncRunnable . getTotalSyncDuration ( ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index fc401b8 . . cc3c18e 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 14 , 6 + 14 , 8 @ @ by version X , but the inverse is not necessarily the case . ) 
 
 Upgrading 
 - - - - - - - - - 
 + - Compression is enabled by default on newly created ColumnFamilies 
 + ( and unchanged for ColumnFamilies created prior to upgrading ) . 
 - The KsDef . replication _ factor field ( deprecated since 0 . 8 ) has 
 been removed . Older clients will need to be updated to be able 
 to continue to created and update keyspaces . 
 @ @ - 59 , 6 + 61 , 7 @ @ Features 
 - Hadoop : a new BulkOutputFormat is included which will directly write 
 SSTables locally and then stream them into the cluster . 
 - Hadoop : KeyRange . filter is now supported with ColumnFamilyInputFormat 
 + - Hadoop wide row mode added to ColumnFamilyInputFormat 
 - The bulk loader is not longer a fat client ; it can be run from an 
 existing machine in a cluster . 
 - A new write survey mode has been added , similar to bootstrap ( enabled via 
 @ @ - 69 , 6 + 72 , 7 @ @ Features 
 threshold . 
 - Off - heap caches no longer require JNA . 
 - Streaming is now multithreaded . 
 + - Compactions may now be aborted via JMX or nodetool . 
 
 
 1 . 0 . 8
