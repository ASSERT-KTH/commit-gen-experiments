BLEU SCORE: 0.027611988917697356

TEST MSG: Bind JMX to localhost unless explicitly configured otherwise
GENERATED MSG: merge from 1 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 954fa3f . . 50c7967 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 6 @ @ <nl> + 2 . 1 . 4 <nl> + * If no JMX flags are set start a localhost only JMX service <nl> + <nl> 2 . 1 . 3 <nl> * Fix HSHA / offheap _ objects corruption ( CASSANDRA - 8719 ) <nl> * Upgrade libthrift to 0 . 9 . 2 ( CASSANDRA - 8685 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 602770c . . 076885c 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 13 , 6 + 13 , 12 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + 2 . 1 . 4 <nl> + = = = = = <nl> + <nl> + The default JMX config now listens to localhost only . You must enable <nl> + the other JMX flags in cassandra - env . sh manually . <nl> + <nl> 2 . 1 . 3 <nl> = = = = = <nl> <nl> diff - - git a / bin / cassandra . bat b / bin / cassandra . bat <nl> index 99b291a . . fefd3fc 100644 <nl> - - - a / bin / cassandra . bat <nl> + + + b / bin / cassandra . bat <nl> @ @ - 65 , 10 + 65 , 13 @ @ set JAVA _ OPTS = - ea ^ <nl> - XX : MaxTenuringThreshold = 1 ^ <nl> - XX : CMSInitiatingOccupancyFraction = 75 ^ <nl> - XX : + UseCMSInitiatingOccupancyOnly ^ <nl> - - Dcom . sun . management . jmxremote . port = 7199 ^ <nl> - - Dcom . sun . management . jmxremote . ssl = false ^ <nl> - - Dcom . sun . management . jmxremote . authenticate = false ^ <nl> - - Dlogback . configurationFile = logback . xml <nl> + - Dlogback . configurationFile = logback . xml ^ <nl> + - Dcassandra . jmx . local . port = 7199 <nl> + REM * * * * JMX REMOTE ACCESS SETTINGS SEE : https : / / wiki . apache . org / cassandra / JmxSecurity * * * <nl> + REM - Dcom . sun . management . jmxremote . port = 7199 ^ <nl> + REM - Dcom . sun . management . jmxremote . ssl = false ^ <nl> + REM - Dcom . sun . management . jmxremote . authenticate = true ^ <nl> + REM - Dcom . sun . management . jmxremote . password . file = C : \ jmxremote . password <nl> <nl> REM * * * * * CLASSPATH library setting * * * * * <nl> REM Ensure that any user defined CLASSPATH variables are not used on startup <nl> diff - - git a / build . xml b / build . xml <nl> index eaef534 . . cf401e4 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 25 , 7 + 25 , 7 @ @ <nl> < property name = " debuglevel " value = " source , lines , vars " / > <nl> <nl> < ! - - default version and SCM information - - > <nl> - < property name = " base . version " value = " 2 . 1 . 3 " / > <nl> + < property name = " base . version " value = " 2 . 1 . 4 " / > <nl> < property name = " scm . connection " value = " scm : git : / / git . apache . org / cassandra . git " / > <nl> < property name = " scm . developerConnection " value = " scm : git : / / git . apache . org / cassandra . git " / > <nl> < property name = " scm . url " value = " http : / / git - wip - us . apache . org / repos / asf ? p = cassandra . git ; a = tree " / > <nl> @ @ - 1113 , 6 + 1113 , 7 @ @ <nl> < jvmarg value = " - Xss256k " / > <nl> < jvmarg value = " - Dcassandra . memtable _ row _ overhead _ computation _ step = 100 " / > <nl> < jvmarg value = " - Dcassandra . test . use _ prepared = $ { cassandra . test . use _ prepared } " / > <nl> + 	 < jvmarg value = " - Dcassandra . jmx . local . port = 7199 " / > <nl> 	 < jvmarg value = " - Dcassandra . test . offsetseed = @ { poffset } " / > <nl> 	 < optjvmargs / > <nl> < classpath > <nl> diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index 9c6b6f4 . . 7a71a13 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 400 , 10 + 400 , 17 @ @ Function SetCassandraEnvironment <nl> # https : / / blogs . oracle . com / jmxetc / entry / troubleshooting _ connection _ problems _ in _ jconsole <nl> # for more on configuring JMX through firewalls , etc . ( Short version : <nl> # get it working with no firewall first . ) <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " <nl> - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = false " <nl> + # <nl> + # Due to potential security exploits , Cassandra ships with JMX accessible <nl> + # * only * from localhost . To enable remote JMX connections , uncomment lines below <nl> + # with authentication and ssl enabled . See https : / / wiki . apache . org / cassandra / JmxSecurity <nl> + # <nl> + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " <nl> + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " <nl> + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = true " <nl> # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = C : / jmxremote . password " <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcassandra . jmx . local . port = $ JMX _ PORT - XX : + DisableExplicitGC " <nl> + <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS $ JVM _ EXTRA _ OPTS " <nl> <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dlog4j . configuration = log4j - server . properties " <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index 3f4c21b . . 58022e6 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 270 , 6 + 270 , 22 @ @ JVM _ OPTS = " $ JVM _ OPTS - Djava . net . preferIPv4Stack = true " <nl> # https : / / blogs . oracle . com / jmxetc / entry / troubleshooting _ connection _ problems _ in _ jconsole <nl> # for more on configuring JMX through firewalls , etc . ( Short version : <nl> # get it working with no firewall first . ) <nl> + # <nl> + # Cassandra ships with JMX accessible * only * from localhost . <nl> + # To enable remote JMX connections , uncomment lines below <nl> + # with authentication and / or ssl enabled . See https : / / wiki . apache . org / cassandra / JmxSecurity <nl> + # <nl> + LOCAL _ JMX = yes <nl> + <nl> + if [ " $ LOCAL _ JMX " = " yes " ] ; then <nl> + JVM _ OPTS = " $ JVM _ OPTS - Dcassandra . jmx . local . port = $ JMX _ PORT - XX : + DisableExplicitGC " <nl> + else <nl> + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " <nl> + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . rmi . port = $ JMX _ PORT " <nl> + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " <nl> + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = true " <nl> + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = / etc / cassandra / jmxremote . password " <nl> + fi <nl> <nl> # To use mx4j , an HTML interface for JMX , add mx4j - tools . jar to the lib / <nl> # directory . <nl> @ @ - 279 , 11 + 295 , 6 @ @ JVM _ OPTS = " $ JVM _ OPTS - Djava . net . preferIPv4Stack = true " <nl> # MX4J _ ADDRESS = " - Dmx4jaddress = 127 . 0 . 0 . 1 " <nl> # MX4J _ PORT = " - Dmx4jport = 8081 " <nl> <nl> - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " <nl> - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . rmi . port = $ JMX _ PORT " <nl> - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " <nl> - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = false " <nl> - # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = / etc / cassandra / jmxremote . password " <nl> JVM _ OPTS = " $ JVM _ OPTS $ MX4J _ ADDRESS " <nl> JVM _ OPTS = " $ JVM _ OPTS $ MX4J _ PORT " <nl> JVM _ OPTS = " $ JVM _ OPTS $ JVM _ EXTRA _ OPTS " <nl> diff - - git a / debian / changelog b / debian / changelog <nl> index 339da0c . . 8075460 100644 <nl> - - - a / debian / changelog <nl> + + + b / debian / changelog <nl> @ @ - 1 , 3 + 1 , 9 @ @ <nl> + cassandra ( 2 . 1 . 4 ) unstable ; urgency = medium <nl> + <nl> + * New release <nl> + <nl> + - - Jake Luciani < jake @ apache . org > Fri , 27 Mar 2015 13 : 48 : 25 - 0400 <nl> + <nl> cassandra ( 2 . 1 . 3 ) unstable ; urgency = medium <nl> <nl> * New release <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 50c8295 . . 3e398bf 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 23 , 14 + 23 , 16 @ @ import java . lang . management . ManagementFactory ; <nl> import java . lang . management . MemoryPoolMXBean ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> - import java . util . Arrays ; <nl> - import java . util . Date ; <nl> - import java . util . Map ; <nl> - import java . util . UUID ; <nl> - import java . util . concurrent . TimeUnit ; <nl> + import java . rmi . registry . LocateRegistry ; <nl> + import java . rmi . server . RMIServerSocketFactory ; <nl> + import java . util . * ; <nl> + import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> import javax . management . StandardMBean ; <nl> + import javax . management . remote . JMXConnectorServer ; <nl> + import javax . management . remote . JMXServiceURL ; <nl> + import javax . management . remote . rmi . RMIConnectorServer ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> @ @ - 66 , 9 + 68 , 61 @ @ import org . apache . cassandra . utils . * ; <nl> public class CassandraDaemon <nl> { <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . db : type = NativeAccess " ; <nl> + public static JMXConnectorServer jmxServer = null ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; <nl> <nl> + private static void maybeInitJmx ( ) <nl> + { <nl> + String jmxPort = System . getProperty ( " com . sun . management . jmxremote . port " ) ; <nl> + <nl> + if ( jmxPort = = null ) <nl> + { <nl> + logger . warn ( " JMX is not enabled to receive remote connections . Please see cassandra - env . sh for more info . " ) ; <nl> + <nl> + jmxPort = System . getProperty ( " cassandra . jmx . local . port " ) ; <nl> + <nl> + if ( jmxPort = = null ) <nl> + { <nl> + logger . error ( " cassandra . jmx . local . port missing from cassandra - env . sh , unable to start local JMX service . " + jmxPort ) ; <nl> + } <nl> + else <nl> + { <nl> + System . setProperty ( " java . rmi . server . hostname " , " 127 . 0 . 0 . 1 " ) ; <nl> + <nl> + try <nl> + { <nl> + RMIServerSocketFactory serverFactory = new RMIServerSocketFactoryImpl ( ) ; <nl> + LocateRegistry . createRegistry ( Integer . valueOf ( jmxPort ) , null , serverFactory ) ; <nl> + <nl> + StringBuffer url = new StringBuffer ( ) ; <nl> + url . append ( " service : jmx : " ) ; <nl> + url . append ( " rmi : / / localhost / jndi / " ) ; <nl> + url . append ( " rmi : / / localhost : " ) . append ( jmxPort ) . append ( " / jmxrmi " ) ; <nl> + <nl> + Map env = new HashMap ( ) ; <nl> + env . put ( RMIConnectorServer . RMI _ SERVER _ SOCKET _ FACTORY _ ATTRIBUTE , serverFactory ) ; <nl> + <nl> + jmxServer = new RMIConnectorServer ( <nl> + new JMXServiceURL ( url . toString ( ) ) , <nl> + env , <nl> + ManagementFactory . getPlatformMBeanServer ( ) <nl> + ) ; <nl> + <nl> + jmxServer . start ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger . error ( " Error starting local jmx server : " , e ) ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + logger . info ( " JMX is enabled to receive remote connections on port : " + jmxPort ) ; <nl> + } <nl> + } <nl> + <nl> private static final CassandraDaemon instance = new CassandraDaemon ( ) ; <nl> <nl> / * * <nl> @ @ - 159 , 6 + 213 , 8 @ @ public class CassandraDaemon <nl> <nl> CLibrary . tryMlockall ( ) ; <nl> <nl> + maybeInitJmx ( ) ; <nl> + <nl> Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) <nl> { <nl> public void uncaughtException ( Thread t , Throwable e ) <nl> @ @ - 432 , 6 + 488 , 18 @ @ public class CassandraDaemon <nl> / / We rely on the shutdown hook to drain the node <nl> if ( FBUtilities . isWindows ( ) ) <nl> System . exit ( 0 ) ; <nl> + <nl> + if ( jmxServer ! = null ) <nl> + { <nl> + try <nl> + { <nl> + jmxServer . stop ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger . error ( " Error shutting down local JMX server : " , e ) ; <nl> + } <nl> + } <nl> } <nl> <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / RMIServerSocketFactoryImpl . java b / src / java / org / apache / cassandra / utils / RMIServerSocketFactoryImpl . java <nl> new file mode 100644 <nl> index 0000000 . . 75331ab <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / RMIServerSocketFactoryImpl . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . net . * ; <nl> + import java . rmi . server . RMIServerSocketFactory ; <nl> + import javax . net . ServerSocketFactory ; <nl> + <nl> + <nl> + public class RMIServerSocketFactoryImpl implements RMIServerSocketFactory <nl> + { <nl> + <nl> + public ServerSocket createServerSocket ( final int pPort ) throws IOException { <nl> + return ServerSocketFactory . getDefault ( ) . createServerSocket ( pPort , 0 , InetAddress . getLoopbackAddress ( ) ) ; <nl> + } <nl> + <nl> + public boolean equals ( Object obj ) <nl> + { <nl> + if ( obj = = null ) <nl> + { <nl> + return false ; <nl> + } <nl> + if ( obj = = this ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + return obj . getClass ( ) . equals ( getClass ( ) ) ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return RMIServerSocketFactoryImpl . class . hashCode ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index a83fbab . . e2dc046 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> { <nl> Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; <nl> InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; <nl> - scheduleHintDelivery ( target ) ; <nl> + / / token may have since been removed ( in which case we have just read back a tombstone ) <nl> + if ( target ! = null ) <nl> + scheduleHintDelivery ( target ) ; <nl> } <nl> <nl> if ( logger _ . isDebugEnabled ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 954fa3f . . 50c7967 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 6 @ @ 
 + 2 . 1 . 4 
 + * If no JMX flags are set start a localhost only JMX service 
 + 
 2 . 1 . 3 
 * Fix HSHA / offheap _ objects corruption ( CASSANDRA - 8719 ) 
 * Upgrade libthrift to 0 . 9 . 2 ( CASSANDRA - 8685 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 602770c . . 076885c 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 13 , 6 + 13 , 12 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 2 . 1 . 4 
 + = = = = = 
 + 
 + The default JMX config now listens to localhost only . You must enable 
 + the other JMX flags in cassandra - env . sh manually . 
 + 
 2 . 1 . 3 
 = = = = = 
 
 diff - - git a / bin / cassandra . bat b / bin / cassandra . bat 
 index 99b291a . . fefd3fc 100644 
 - - - a / bin / cassandra . bat 
 + + + b / bin / cassandra . bat 
 @ @ - 65 , 10 + 65 , 13 @ @ set JAVA _ OPTS = - ea ^ 
 - XX : MaxTenuringThreshold = 1 ^ 
 - XX : CMSInitiatingOccupancyFraction = 75 ^ 
 - XX : + UseCMSInitiatingOccupancyOnly ^ 
 - - Dcom . sun . management . jmxremote . port = 7199 ^ 
 - - Dcom . sun . management . jmxremote . ssl = false ^ 
 - - Dcom . sun . management . jmxremote . authenticate = false ^ 
 - - Dlogback . configurationFile = logback . xml 
 + - Dlogback . configurationFile = logback . xml ^ 
 + - Dcassandra . jmx . local . port = 7199 
 + REM * * * * JMX REMOTE ACCESS SETTINGS SEE : https : / / wiki . apache . org / cassandra / JmxSecurity * * * 
 + REM - Dcom . sun . management . jmxremote . port = 7199 ^ 
 + REM - Dcom . sun . management . jmxremote . ssl = false ^ 
 + REM - Dcom . sun . management . jmxremote . authenticate = true ^ 
 + REM - Dcom . sun . management . jmxremote . password . file = C : \ jmxremote . password 
 
 REM * * * * * CLASSPATH library setting * * * * * 
 REM Ensure that any user defined CLASSPATH variables are not used on startup 
 diff - - git a / build . xml b / build . xml 
 index eaef534 . . cf401e4 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 25 , 7 + 25 , 7 @ @ 
 < property name = " debuglevel " value = " source , lines , vars " / > 
 
 < ! - - default version and SCM information - - > 
 - < property name = " base . version " value = " 2 . 1 . 3 " / > 
 + < property name = " base . version " value = " 2 . 1 . 4 " / > 
 < property name = " scm . connection " value = " scm : git : / / git . apache . org / cassandra . git " / > 
 < property name = " scm . developerConnection " value = " scm : git : / / git . apache . org / cassandra . git " / > 
 < property name = " scm . url " value = " http : / / git - wip - us . apache . org / repos / asf ? p = cassandra . git ; a = tree " / > 
 @ @ - 1113 , 6 + 1113 , 7 @ @ 
 < jvmarg value = " - Xss256k " / > 
 < jvmarg value = " - Dcassandra . memtable _ row _ overhead _ computation _ step = 100 " / > 
 < jvmarg value = " - Dcassandra . test . use _ prepared = $ { cassandra . test . use _ prepared } " / > 
 + 	 < jvmarg value = " - Dcassandra . jmx . local . port = 7199 " / > 
 	 < jvmarg value = " - Dcassandra . test . offsetseed = @ { poffset } " / > 
 	 < optjvmargs / > 
 < classpath > 
 diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index 9c6b6f4 . . 7a71a13 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 400 , 10 + 400 , 17 @ @ Function SetCassandraEnvironment 
 # https : / / blogs . oracle . com / jmxetc / entry / troubleshooting _ connection _ problems _ in _ jconsole 
 # for more on configuring JMX through firewalls , etc . ( Short version : 
 # get it working with no firewall first . ) 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " 
 - $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = false " 
 + # 
 + # Due to potential security exploits , Cassandra ships with JMX accessible 
 + # * only * from localhost . To enable remote JMX connections , uncomment lines below 
 + # with authentication and ssl enabled . See https : / / wiki . apache . org / cassandra / JmxSecurity 
 + # 
 + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " 
 + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " 
 + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = true " 
 # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = C : / jmxremote . password " 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcassandra . jmx . local . port = $ JMX _ PORT - XX : + DisableExplicitGC " 
 + 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS $ JVM _ EXTRA _ OPTS " 
 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dlog4j . configuration = log4j - server . properties " 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index 3f4c21b . . 58022e6 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 270 , 6 + 270 , 22 @ @ JVM _ OPTS = " $ JVM _ OPTS - Djava . net . preferIPv4Stack = true " 
 # https : / / blogs . oracle . com / jmxetc / entry / troubleshooting _ connection _ problems _ in _ jconsole 
 # for more on configuring JMX through firewalls , etc . ( Short version : 
 # get it working with no firewall first . ) 
 + # 
 + # Cassandra ships with JMX accessible * only * from localhost . 
 + # To enable remote JMX connections , uncomment lines below 
 + # with authentication and / or ssl enabled . See https : / / wiki . apache . org / cassandra / JmxSecurity 
 + # 
 + LOCAL _ JMX = yes 
 + 
 + if [ " $ LOCAL _ JMX " = " yes " ] ; then 
 + JVM _ OPTS = " $ JVM _ OPTS - Dcassandra . jmx . local . port = $ JMX _ PORT - XX : + DisableExplicitGC " 
 + else 
 + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " 
 + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . rmi . port = $ JMX _ PORT " 
 + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " 
 + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = true " 
 + JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = / etc / cassandra / jmxremote . password " 
 + fi 
 
 # To use mx4j , an HTML interface for JMX , add mx4j - tools . jar to the lib / 
 # directory . 
 @ @ - 279 , 11 + 295 , 6 @ @ JVM _ OPTS = " $ JVM _ OPTS - Djava . net . preferIPv4Stack = true " 
 # MX4J _ ADDRESS = " - Dmx4jaddress = 127 . 0 . 0 . 1 " 
 # MX4J _ PORT = " - Dmx4jport = 8081 " 
 
 - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . port = $ JMX _ PORT " 
 - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . rmi . port = $ JMX _ PORT " 
 - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " 
 - JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = false " 
 - # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = / etc / cassandra / jmxremote . password " 
 JVM _ OPTS = " $ JVM _ OPTS $ MX4J _ ADDRESS " 
 JVM _ OPTS = " $ JVM _ OPTS $ MX4J _ PORT " 
 JVM _ OPTS = " $ JVM _ OPTS $ JVM _ EXTRA _ OPTS " 
 diff - - git a / debian / changelog b / debian / changelog 
 index 339da0c . . 8075460 100644 
 - - - a / debian / changelog 
 + + + b / debian / changelog 
 @ @ - 1 , 3 + 1 , 9 @ @ 
 + cassandra ( 2 . 1 . 4 ) unstable ; urgency = medium 
 + 
 + * New release 
 + 
 + - - Jake Luciani < jake @ apache . org > Fri , 27 Mar 2015 13 : 48 : 25 - 0400 
 + 
 cassandra ( 2 . 1 . 3 ) unstable ; urgency = medium 
 
 * New release 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 50c8295 . . 3e398bf 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 23 , 14 + 23 , 16 @ @ import java . lang . management . ManagementFactory ; 
 import java . lang . management . MemoryPoolMXBean ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 - import java . util . Arrays ; 
 - import java . util . Date ; 
 - import java . util . Map ; 
 - import java . util . UUID ; 
 - import java . util . concurrent . TimeUnit ; 
 + import java . rmi . registry . LocateRegistry ; 
 + import java . rmi . server . RMIServerSocketFactory ; 
 + import java . util . * ; 
 + import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 import javax . management . StandardMBean ; 
 + import javax . management . remote . JMXConnectorServer ; 
 + import javax . management . remote . JMXServiceURL ; 
 + import javax . management . remote . rmi . RMIConnectorServer ; 
 
 import com . google . common . collect . Iterables ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 @ @ - 66 , 9 + 68 , 61 @ @ import org . apache . cassandra . utils . * ; 
 public class CassandraDaemon 
 { 
 public static final String MBEAN _ NAME = " org . apache . cassandra . db : type = NativeAccess " ; 
 + public static JMXConnectorServer jmxServer = null ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( CassandraDaemon . class ) ; 
 
 + private static void maybeInitJmx ( ) 
 + { 
 + String jmxPort = System . getProperty ( " com . sun . management . jmxremote . port " ) ; 
 + 
 + if ( jmxPort = = null ) 
 + { 
 + logger . warn ( " JMX is not enabled to receive remote connections . Please see cassandra - env . sh for more info . " ) ; 
 + 
 + jmxPort = System . getProperty ( " cassandra . jmx . local . port " ) ; 
 + 
 + if ( jmxPort = = null ) 
 + { 
 + logger . error ( " cassandra . jmx . local . port missing from cassandra - env . sh , unable to start local JMX service . " + jmxPort ) ; 
 + } 
 + else 
 + { 
 + System . setProperty ( " java . rmi . server . hostname " , " 127 . 0 . 0 . 1 " ) ; 
 + 
 + try 
 + { 
 + RMIServerSocketFactory serverFactory = new RMIServerSocketFactoryImpl ( ) ; 
 + LocateRegistry . createRegistry ( Integer . valueOf ( jmxPort ) , null , serverFactory ) ; 
 + 
 + StringBuffer url = new StringBuffer ( ) ; 
 + url . append ( " service : jmx : " ) ; 
 + url . append ( " rmi : / / localhost / jndi / " ) ; 
 + url . append ( " rmi : / / localhost : " ) . append ( jmxPort ) . append ( " / jmxrmi " ) ; 
 + 
 + Map env = new HashMap ( ) ; 
 + env . put ( RMIConnectorServer . RMI _ SERVER _ SOCKET _ FACTORY _ ATTRIBUTE , serverFactory ) ; 
 + 
 + jmxServer = new RMIConnectorServer ( 
 + new JMXServiceURL ( url . toString ( ) ) , 
 + env , 
 + ManagementFactory . getPlatformMBeanServer ( ) 
 + ) ; 
 + 
 + jmxServer . start ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger . error ( " Error starting local jmx server : " , e ) ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + logger . info ( " JMX is enabled to receive remote connections on port : " + jmxPort ) ; 
 + } 
 + } 
 + 
 private static final CassandraDaemon instance = new CassandraDaemon ( ) ; 
 
 / * * 
 @ @ - 159 , 6 + 213 , 8 @ @ public class CassandraDaemon 
 
 CLibrary . tryMlockall ( ) ; 
 
 + maybeInitJmx ( ) ; 
 + 
 Thread . setDefaultUncaughtExceptionHandler ( new Thread . UncaughtExceptionHandler ( ) 
 { 
 public void uncaughtException ( Thread t , Throwable e ) 
 @ @ - 432 , 6 + 488 , 18 @ @ public class CassandraDaemon 
 / / We rely on the shutdown hook to drain the node 
 if ( FBUtilities . isWindows ( ) ) 
 System . exit ( 0 ) ; 
 + 
 + if ( jmxServer ! = null ) 
 + { 
 + try 
 + { 
 + jmxServer . stop ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger . error ( " Error shutting down local JMX server : " , e ) ; 
 + } 
 + } 
 } 
 
 
 diff - - git a / src / java / org / apache / cassandra / utils / RMIServerSocketFactoryImpl . java b / src / java / org / apache / cassandra / utils / RMIServerSocketFactoryImpl . java 
 new file mode 100644 
 index 0000000 . . 75331ab 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / RMIServerSocketFactoryImpl . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . io . IOException ; 
 + import java . net . * ; 
 + import java . rmi . server . RMIServerSocketFactory ; 
 + import javax . net . ServerSocketFactory ; 
 + 
 + 
 + public class RMIServerSocketFactoryImpl implements RMIServerSocketFactory 
 + { 
 + 
 + public ServerSocket createServerSocket ( final int pPort ) throws IOException { 
 + return ServerSocketFactory . getDefault ( ) . createServerSocket ( pPort , 0 , InetAddress . getLoopbackAddress ( ) ) ; 
 + } 
 + 
 + public boolean equals ( Object obj ) 
 + { 
 + if ( obj = = null ) 
 + { 
 + return false ; 
 + } 
 + if ( obj = = this ) 
 + { 
 + return true ; 
 + } 
 + 
 + return obj . getClass ( ) . equals ( getClass ( ) ) ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return RMIServerSocketFactoryImpl . class . hashCode ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index a83fbab . . e2dc046 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 391 , 7 + 391 , 9 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 { 
 Token < ? > token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromByteArray ( row . key . key ) ; 
 InetAddress target = StorageService . instance . getTokenMetadata ( ) . getEndpoint ( token ) ; 
 - scheduleHintDelivery ( target ) ; 
 + / / token may have since been removed ( in which case we have just read back a tombstone ) 
 + if ( target ! = null ) 
 + scheduleHintDelivery ( target ) ; 
 } 
 
 if ( logger _ . isDebugEnabled ( ) )
