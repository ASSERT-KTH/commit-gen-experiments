BLEU SCORE: 0.04372912656590315

TEST MSG: Sort compactionhistory output by timestamp
GENERATED MSG: Save compaction history to system keyspace

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4149d91 . . 991d42a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 2 <nl> + * Sort compactionhistory output by timestamp ( CASSANDRA - 10464 ) <nl> * More efficient BTree removal ( CASSANDRA - 9991 ) <nl> * Make tablehistograms accept the same syntax as tablestats ( CASSANDRA - 10149 ) <nl> * Group pending compactions based on table ( CASSANDRA - 10718 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java b / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java <nl> index cbb054a . . 1348d05 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java <nl> @ @ - 17 , 17 + 17 , 22 @ @ <nl> * / <nl> package org . apache . cassandra . tools . nodetool ; <nl> <nl> - import static com . google . common . collect . Iterables . toArray ; <nl> - import io . airlift . command . Command ; <nl> - <nl> + import java . time . Instant ; <nl> + import java . time . LocalDateTime ; <nl> + import java . time . ZoneId ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> - <nl> import javax . management . openmbean . TabularData ; <nl> <nl> + import io . airlift . command . Command ; <nl> + <nl> import org . apache . cassandra . tools . NodeProbe ; <nl> import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> <nl> + import static com . google . common . collect . Iterables . toArray ; <nl> + <nl> @ Command ( name = " compactionhistory " , description = " Print history of compaction " ) <nl> public class CompactionHistory extends NodeToolCmd <nl> { <nl> @ @ - 48 , 10 + 53 , 69 @ @ public class CompactionHistory extends NodeToolCmd <nl> System . out . printf ( format , toArray ( indexNames , Object . class ) ) ; <nl> <nl> Set < ? > values = tabularData . keySet ( ) ; <nl> + List < CompactionHistoryRow > chr = new ArrayList < > ( ) ; <nl> for ( Object eachValue : values ) <nl> { <nl> List < ? > value = ( List < ? > ) eachValue ; <nl> - System . out . printf ( format , toArray ( value , Object . class ) ) ; <nl> + CompactionHistoryRow chc = new CompactionHistoryRow ( ( String ) value . get ( 0 ) , <nl> + ( String ) value . get ( 1 ) , <nl> + ( String ) value . get ( 2 ) , <nl> + ( Long ) value . get ( 3 ) , <nl> + ( Long ) value . get ( 4 ) , <nl> + ( Long ) value . get ( 5 ) , <nl> + ( String ) value . get ( 6 ) ) ; <nl> + chr . add ( chc ) ; <nl> } <nl> + Collections . sort ( chr ) ; <nl> + for ( CompactionHistoryRow eachChc : chr ) <nl> + { <nl> + System . out . printf ( format , eachChc . getAllAsArray ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Allows the Compaction History output to be ordered by ' compactedAt ' - that is the <nl> + * time at which compaction finished . <nl> + * / <nl> + class CompactionHistoryRow implements Comparable < CompactionHistoryRow > <nl> + { <nl> + private final String id ; <nl> + private final String ksName ; <nl> + private final String cfName ; <nl> + private final long compactedAt ; <nl> + private final long bytesIn ; <nl> + private final long bytesOut ; <nl> + private final String rowMerged ; <nl> + <nl> + CompactionHistoryRow ( String id , String ksName , String cfName , long compactedAt , long bytesIn , long bytesOut , String rowMerged ) <nl> + { <nl> + this . id = id ; <nl> + this . ksName = ksName ; <nl> + this . cfName = cfName ; <nl> + this . compactedAt = compactedAt ; <nl> + this . bytesIn = bytesIn ; <nl> + this . bytesOut = bytesOut ; <nl> + this . rowMerged = rowMerged ; <nl> + } <nl> + <nl> + public int compareTo ( CompactionHistoryRow chc ) <nl> + { <nl> + return Long . signum ( chc . compactedAt - this . compactedAt ) ; <nl> + } <nl> + <nl> + public Object [ ] getAllAsArray ( ) <nl> + { <nl> + Object [ ] obj = new Object [ 7 ] ; <nl> + obj [ 0 ] = this . id ; <nl> + obj [ 1 ] = this . ksName ; <nl> + obj [ 2 ] = this . cfName ; <nl> + Instant instant = Instant . ofEpochMilli ( this . compactedAt ) ; <nl> + LocalDateTime ldt = LocalDateTime . ofInstant ( instant , ZoneId . systemDefault ( ) ) ; <nl> + obj [ 3 ] = ldt . toString ( ) ; <nl> + obj [ 4 ] = this . bytesIn ; <nl> + obj [ 5 ] = this . bytesOut ; <nl> + obj [ 6 ] = this . rowMerged ; <nl> + return obj ; <nl> } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 1776361 . . ff8a2c7 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 563 , 14 + 563 , 16 @ @ public final class MessagingService implements MessagingServiceMBean <nl> return idGen . incrementAndGet ( ) ; <nl> } <nl> <nl> - / * <nl> - * @ see # sendRR ( Message message , InetAddress to , IAsyncCallback cb , long timeout ) <nl> - * / <nl> public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb ) <nl> { <nl> return sendRR ( message , to , cb , message . getTimeout ( ) ) ; <nl> } <nl> <nl> + public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb , long timeout ) <nl> + { <nl> + return sendRR ( message , to , cb , timeout , null ) ; <nl> + } <nl> + <nl> / * * <nl> * Send a message to a given endpoint . This method specifies a callback <nl> * which is invoked with the actual response . <nl> @ @ - 584 , 11 + 586 , 14 @ @ public final class MessagingService implements MessagingServiceMBean <nl> * suggest that a timeout occurred to the invoker of the send ( ) . <nl> * suggest that a timeout occurred to the invoker of the send ( ) . <nl> * @ param timeout the timeout used for expiration <nl> + * @ param consistencyLevel the consistency level , for mutations ; must be null otherwise <nl> * @ return an reference to message id used to match with the result <nl> * / <nl> - public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb , long timeout ) <nl> + public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb , long timeout , ConsistencyLevel consistencyLevel ) <nl> { <nl> - int id = addCallback ( cb , message , to , timeout ) ; <nl> + int id = consistencyLevel = = null <nl> + ? addCallback ( cb , message , to , timeout ) <nl> + : addCallback ( cb , message , to , timeout , consistencyLevel ) ; <nl> sendOneWay ( message , id , to ) ; <nl> return id ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 157079f . . 102d8b5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 681 , 7 + 681 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> MessageOut < RowMutation > message = rm . createMessage ( ) ; <nl> for ( InetAddress target : endpoints ) <nl> - MessagingService . instance ( ) . sendRR ( message , target , handler ) ; <nl> + MessagingService . instance ( ) . sendRR ( message , target , handler , message . getTimeout ( ) , ConsistencyLevel . ONE ) ; <nl> } <nl> } <nl> <nl> @ @ - 866 , 7 + 866 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / ( 1 . 1 knows how to forward old - style String message IDs ; updated to int in 2 . 0 ) <nl> if ( localDataCenter . equals ( dc ) ) <nl> { <nl> - MessagingService . instance ( ) . sendRR ( message , destination , responseHandler ) ; <nl> + MessagingService . instance ( ) . sendRR ( message , destination , responseHandler , message . getTimeout ( ) , consistency _ level ) ; <nl> } <nl> else <nl> { <nl> @ @ - 982 , 8 + 982 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> message = message . withParameter ( RowMutation . FORWARD _ TO , out . getData ( ) ) ; <nl> / / send the combined message + forward headers <nl> - int id = MessagingService . instance ( ) . addCallback ( handler , message , target , message . getTimeout ( ) , handler . consistencyLevel ) ; <nl> - MessagingService . instance ( ) . sendOneWay ( message , id , target ) ; <nl> + int id = MessagingService . instance ( ) . sendRR ( message , target , handler , message . getTimeout ( ) , handler . consistencyLevel ) ; <nl> logger . trace ( " Sending message to { } @ { } " , id , target ) ; <nl> } <nl> catch ( IOException e ) <nl> @ @ - 1044 , 8 + 1043 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> Tracing . trace ( " Enqueuing counter update to { } " , endpoint ) ; <nl> MessageOut < CounterMutation > message = cm . makeMutationMessage ( ) ; <nl> - int id = MessagingService . instance ( ) . addCallback ( responseHandler , message , endpoint , message . getTimeout ( ) , cm . consistency ( ) ) ; <nl> - MessagingService . instance ( ) . sendOneWay ( message , id , endpoint ) ; <nl> + MessagingService . instance ( ) . sendRR ( message , endpoint , responseHandler , message . getTimeout ( ) , cm . consistency ( ) ) ; <nl> return responseHandler ; <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4149d91 . . 991d42a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 2 
 + * Sort compactionhistory output by timestamp ( CASSANDRA - 10464 ) 
 * More efficient BTree removal ( CASSANDRA - 9991 ) 
 * Make tablehistograms accept the same syntax as tablestats ( CASSANDRA - 10149 ) 
 * Group pending compactions based on table ( CASSANDRA - 10718 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java b / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java 
 index cbb054a . . 1348d05 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / CompactionHistory . java 
 @ @ - 17 , 17 + 17 , 22 @ @ 
 * / 
 package org . apache . cassandra . tools . nodetool ; 
 
 - import static com . google . common . collect . Iterables . toArray ; 
 - import io . airlift . command . Command ; 
 - 
 + import java . time . Instant ; 
 + import java . time . LocalDateTime ; 
 + import java . time . ZoneId ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Set ; 
 - 
 import javax . management . openmbean . TabularData ; 
 
 + import io . airlift . command . Command ; 
 + 
 import org . apache . cassandra . tools . NodeProbe ; 
 import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 
 + import static com . google . common . collect . Iterables . toArray ; 
 + 
 @ Command ( name = " compactionhistory " , description = " Print history of compaction " ) 
 public class CompactionHistory extends NodeToolCmd 
 { 
 @ @ - 48 , 10 + 53 , 69 @ @ public class CompactionHistory extends NodeToolCmd 
 System . out . printf ( format , toArray ( indexNames , Object . class ) ) ; 
 
 Set < ? > values = tabularData . keySet ( ) ; 
 + List < CompactionHistoryRow > chr = new ArrayList < > ( ) ; 
 for ( Object eachValue : values ) 
 { 
 List < ? > value = ( List < ? > ) eachValue ; 
 - System . out . printf ( format , toArray ( value , Object . class ) ) ; 
 + CompactionHistoryRow chc = new CompactionHistoryRow ( ( String ) value . get ( 0 ) , 
 + ( String ) value . get ( 1 ) , 
 + ( String ) value . get ( 2 ) , 
 + ( Long ) value . get ( 3 ) , 
 + ( Long ) value . get ( 4 ) , 
 + ( Long ) value . get ( 5 ) , 
 + ( String ) value . get ( 6 ) ) ; 
 + chr . add ( chc ) ; 
 } 
 + Collections . sort ( chr ) ; 
 + for ( CompactionHistoryRow eachChc : chr ) 
 + { 
 + System . out . printf ( format , eachChc . getAllAsArray ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Allows the Compaction History output to be ordered by ' compactedAt ' - that is the 
 + * time at which compaction finished . 
 + * / 
 + class CompactionHistoryRow implements Comparable < CompactionHistoryRow > 
 + { 
 + private final String id ; 
 + private final String ksName ; 
 + private final String cfName ; 
 + private final long compactedAt ; 
 + private final long bytesIn ; 
 + private final long bytesOut ; 
 + private final String rowMerged ; 
 + 
 + CompactionHistoryRow ( String id , String ksName , String cfName , long compactedAt , long bytesIn , long bytesOut , String rowMerged ) 
 + { 
 + this . id = id ; 
 + this . ksName = ksName ; 
 + this . cfName = cfName ; 
 + this . compactedAt = compactedAt ; 
 + this . bytesIn = bytesIn ; 
 + this . bytesOut = bytesOut ; 
 + this . rowMerged = rowMerged ; 
 + } 
 + 
 + public int compareTo ( CompactionHistoryRow chc ) 
 + { 
 + return Long . signum ( chc . compactedAt - this . compactedAt ) ; 
 + } 
 + 
 + public Object [ ] getAllAsArray ( ) 
 + { 
 + Object [ ] obj = new Object [ 7 ] ; 
 + obj [ 0 ] = this . id ; 
 + obj [ 1 ] = this . ksName ; 
 + obj [ 2 ] = this . cfName ; 
 + Instant instant = Instant . ofEpochMilli ( this . compactedAt ) ; 
 + LocalDateTime ldt = LocalDateTime . ofInstant ( instant , ZoneId . systemDefault ( ) ) ; 
 + obj [ 3 ] = ldt . toString ( ) ; 
 + obj [ 4 ] = this . bytesIn ; 
 + obj [ 5 ] = this . bytesOut ; 
 + obj [ 6 ] = this . rowMerged ; 
 + return obj ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 1776361 . . ff8a2c7 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 563 , 14 + 563 , 16 @ @ public final class MessagingService implements MessagingServiceMBean 
 return idGen . incrementAndGet ( ) ; 
 } 
 
 - / * 
 - * @ see # sendRR ( Message message , InetAddress to , IAsyncCallback cb , long timeout ) 
 - * / 
 public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb ) 
 { 
 return sendRR ( message , to , cb , message . getTimeout ( ) ) ; 
 } 
 
 + public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb , long timeout ) 
 + { 
 + return sendRR ( message , to , cb , timeout , null ) ; 
 + } 
 + 
 / * * 
 * Send a message to a given endpoint . This method specifies a callback 
 * which is invoked with the actual response . 
 @ @ - 584 , 11 + 586 , 14 @ @ public final class MessagingService implements MessagingServiceMBean 
 * suggest that a timeout occurred to the invoker of the send ( ) . 
 * suggest that a timeout occurred to the invoker of the send ( ) . 
 * @ param timeout the timeout used for expiration 
 + * @ param consistencyLevel the consistency level , for mutations ; must be null otherwise 
 * @ return an reference to message id used to match with the result 
 * / 
 - public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb , long timeout ) 
 + public int sendRR ( MessageOut message , InetAddress to , IAsyncCallback cb , long timeout , ConsistencyLevel consistencyLevel ) 
 { 
 - int id = addCallback ( cb , message , to , timeout ) ; 
 + int id = consistencyLevel = = null 
 + ? addCallback ( cb , message , to , timeout ) 
 + : addCallback ( cb , message , to , timeout , consistencyLevel ) ; 
 sendOneWay ( message , id , to ) ; 
 return id ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 157079f . . 102d8b5 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 681 , 7 + 681 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 MessageOut < RowMutation > message = rm . createMessage ( ) ; 
 for ( InetAddress target : endpoints ) 
 - MessagingService . instance ( ) . sendRR ( message , target , handler ) ; 
 + MessagingService . instance ( ) . sendRR ( message , target , handler , message . getTimeout ( ) , ConsistencyLevel . ONE ) ; 
 } 
 } 
 
 @ @ - 866 , 7 + 866 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 / / ( 1 . 1 knows how to forward old - style String message IDs ; updated to int in 2 . 0 ) 
 if ( localDataCenter . equals ( dc ) ) 
 { 
 - MessagingService . instance ( ) . sendRR ( message , destination , responseHandler ) ; 
 + MessagingService . instance ( ) . sendRR ( message , destination , responseHandler , message . getTimeout ( ) , consistency _ level ) ; 
 } 
 else 
 { 
 @ @ - 982 , 8 + 982 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 message = message . withParameter ( RowMutation . FORWARD _ TO , out . getData ( ) ) ; 
 / / send the combined message + forward headers 
 - int id = MessagingService . instance ( ) . addCallback ( handler , message , target , message . getTimeout ( ) , handler . consistencyLevel ) ; 
 - MessagingService . instance ( ) . sendOneWay ( message , id , target ) ; 
 + int id = MessagingService . instance ( ) . sendRR ( message , target , handler , message . getTimeout ( ) , handler . consistencyLevel ) ; 
 logger . trace ( " Sending message to { } @ { } " , id , target ) ; 
 } 
 catch ( IOException e ) 
 @ @ - 1044 , 8 + 1043 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 Tracing . trace ( " Enqueuing counter update to { } " , endpoint ) ; 
 MessageOut < CounterMutation > message = cm . makeMutationMessage ( ) ; 
 - int id = MessagingService . instance ( ) . addCallback ( responseHandler , message , endpoint , message . getTimeout ( ) , cm . consistency ( ) ) ; 
 - MessagingService . instance ( ) . sendOneWay ( message , id , endpoint ) ; 
 + MessagingService . instance ( ) . sendRR ( message , endpoint , responseHandler , message . getTimeout ( ) , cm . consistency ( ) ) ; 
 return responseHandler ; 
 } 
 }
