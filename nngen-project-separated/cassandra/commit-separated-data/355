BLEU SCORE: 0.02133165846478451

TEST MSG: Allow different NUMACTL _ ARGS to be passed in
GENERATED MSG: test for NUMA policy support as well as numactl presence

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c5179e7 . . 52b0027 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Allow different NUMACTL _ ARGS to be passed in ( CASSANDRA - 13557 ) <nl> * Allow native function calls in CQLSSTableWriter ( CASSANDRA - 12606 ) <nl> * Fix secondary index queries on COMPACT tables ( CASSANDRA - 13627 ) <nl> * Nodetool listsnapshots output is missing a newline , if there are no snapshots ( CASSANDRA - 13568 ) <nl> diff - - git a / bin / cassandra b / bin / cassandra <nl> index 2dd0fe1 . . ae48ba4 100755 <nl> - - - a / bin / cassandra <nl> + + + b / bin / cassandra <nl> @ @ - 107 , 7 + 107 , 7 @ @ fi <nl> # avoid disk I / O . Even for the purpose of CPU efficiency , we don ' t <nl> # really have CPU < - > data affinity anyway . Also , empirically test that numactl <nl> # works before trying to use it ( CASSANDRA - 3245 ) . <nl> - NUMACTL _ ARGS = " - - interleave = all " <nl> + NUMACTL _ ARGS = $ { NUMACTL _ ARGS : - " - - interleave = all " } <nl> if which numactl > / dev / null 2 > / dev / null & & numactl $ NUMACTL _ ARGS ls / > / dev / null 2 > / dev / null <nl> then <nl> NUMACTL = " numactl $ NUMACTL _ ARGS "
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> index 12ac2aa . . f923ea2 100644 <nl> - - - a / src / java / org / apache / cassandra / security / SSLFactory . java <nl> + + + b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> - import java . net . SocketAddress ; <nl> import java . security . KeyStore ; <nl> <nl> import javax . net . ssl . KeyManagerFactory ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ import javax . net . ssl . SSLSocket ; <nl> import javax . net . ssl . TrustManagerFactory ; <nl> <nl> import org . apache . cassandra . config . EncryptionOptions ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> / * * <nl> * A Factory for providing and setting up Client and Server SSL wrapped <nl> @ @ - 46 , 7 + 46 , 6 @ @ public final class SSLFactory <nl> private static final String ALGORITHM = " SunX509 " ; <nl> private static final String STORE _ TYPE = " JKS " ; <nl> <nl> - <nl> public static SSLServerSocket getServerSocket ( EncryptionOptions options , InetAddress address , int port ) throws IOException <nl> { <nl> SSLContext ctx = createSSLContext ( options ) ; <nl> @ @ - 75 , 14 + 74 , 16 @ @ public final class SSLFactory <nl> return socket ; <nl> } <nl> <nl> - private static SSLContext createSSLContext ( EncryptionOptions options ) throws IOException { <nl> + private static SSLContext createSSLContext ( EncryptionOptions options ) throws IOException <nl> + { <nl> FileInputStream tsf = new FileInputStream ( options . truststore ) ; <nl> FileInputStream ksf = new FileInputStream ( options . keystore ) ; <nl> SSLContext ctx ; <nl> - try { <nl> + try <nl> + { <nl> ctx = SSLContext . getInstance ( PROTOCOL ) ; <nl> - TrustManagerFactory tmf = null ; <nl> - KeyManagerFactory kmf = null ; <nl> + TrustManagerFactory tmf ; <nl> + KeyManagerFactory kmf ; <nl> <nl> tmf = TrustManagerFactory . getInstance ( ALGORITHM ) ; <nl> KeyStore ts = KeyStore . getInstance ( STORE _ TYPE ) ; <nl> @ @ - 96 , 11 + 97 , 15 @ @ public final class SSLFactory <nl> <nl> ctx . init ( kmf . getKeyManagers ( ) , tmf . getTrustManagers ( ) , null ) ; <nl> <nl> - } catch ( Exception e ) { <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> throw new IOException ( " Error creating the initializing the SSL Context " , e ) ; <nl> - } finally { <nl> - tsf . close ( ) ; <nl> - ksf . close ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( tsf ) ; <nl> + FileUtils . closeQuietly ( ksf ) ; <nl> } <nl> return ctx ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c5179e7 . . 52b0027 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Allow different NUMACTL _ ARGS to be passed in ( CASSANDRA - 13557 ) 
 * Allow native function calls in CQLSSTableWriter ( CASSANDRA - 12606 ) 
 * Fix secondary index queries on COMPACT tables ( CASSANDRA - 13627 ) 
 * Nodetool listsnapshots output is missing a newline , if there are no snapshots ( CASSANDRA - 13568 ) 
 diff - - git a / bin / cassandra b / bin / cassandra 
 index 2dd0fe1 . . ae48ba4 100755 
 - - - a / bin / cassandra 
 + + + b / bin / cassandra 
 @ @ - 107 , 7 + 107 , 7 @ @ fi 
 # avoid disk I / O . Even for the purpose of CPU efficiency , we don ' t 
 # really have CPU < - > data affinity anyway . Also , empirically test that numactl 
 # works before trying to use it ( CASSANDRA - 3245 ) . 
 - NUMACTL _ ARGS = " - - interleave = all " 
 + NUMACTL _ ARGS = $ { NUMACTL _ ARGS : - " - - interleave = all " } 
 if which numactl > / dev / null 2 > / dev / null & & numactl $ NUMACTL _ ARGS ls / > / dev / null 2 > / dev / null 
 then 
 NUMACTL = " numactl $ NUMACTL _ ARGS "

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java 
 index 12ac2aa . . f923ea2 100644 
 - - - a / src / java / org / apache / cassandra / security / SSLFactory . java 
 + + + b / src / java / org / apache / cassandra / security / SSLFactory . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 - import java . net . SocketAddress ; 
 import java . security . KeyStore ; 
 
 import javax . net . ssl . KeyManagerFactory ; 
 @ @ - 35 , 6 + 34 , 7 @ @ import javax . net . ssl . SSLSocket ; 
 import javax . net . ssl . TrustManagerFactory ; 
 
 import org . apache . cassandra . config . EncryptionOptions ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 
 / * * 
 * A Factory for providing and setting up Client and Server SSL wrapped 
 @ @ - 46 , 7 + 46 , 6 @ @ public final class SSLFactory 
 private static final String ALGORITHM = " SunX509 " ; 
 private static final String STORE _ TYPE = " JKS " ; 
 
 - 
 public static SSLServerSocket getServerSocket ( EncryptionOptions options , InetAddress address , int port ) throws IOException 
 { 
 SSLContext ctx = createSSLContext ( options ) ; 
 @ @ - 75 , 14 + 74 , 16 @ @ public final class SSLFactory 
 return socket ; 
 } 
 
 - private static SSLContext createSSLContext ( EncryptionOptions options ) throws IOException { 
 + private static SSLContext createSSLContext ( EncryptionOptions options ) throws IOException 
 + { 
 FileInputStream tsf = new FileInputStream ( options . truststore ) ; 
 FileInputStream ksf = new FileInputStream ( options . keystore ) ; 
 SSLContext ctx ; 
 - try { 
 + try 
 + { 
 ctx = SSLContext . getInstance ( PROTOCOL ) ; 
 - TrustManagerFactory tmf = null ; 
 - KeyManagerFactory kmf = null ; 
 + TrustManagerFactory tmf ; 
 + KeyManagerFactory kmf ; 
 
 tmf = TrustManagerFactory . getInstance ( ALGORITHM ) ; 
 KeyStore ts = KeyStore . getInstance ( STORE _ TYPE ) ; 
 @ @ - 96 , 11 + 97 , 15 @ @ public final class SSLFactory 
 
 ctx . init ( kmf . getKeyManagers ( ) , tmf . getTrustManagers ( ) , null ) ; 
 
 - } catch ( Exception e ) { 
 + } 
 + catch ( Exception e ) 
 + { 
 throw new IOException ( " Error creating the initializing the SSL Context " , e ) ; 
 - } finally { 
 - tsf . close ( ) ; 
 - ksf . close ( ) ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( tsf ) ; 
 + FileUtils . closeQuietly ( ksf ) ; 
 } 
 return ctx ; 
 }
