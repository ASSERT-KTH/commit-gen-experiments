BLEU SCORE: 0.021476912089159066

TEST MSG: Add missing follow on fix for 7816 only applied to cassandra - 2 . 1 branch in 763130bdbde2f4cec2e8973bcd5203caf51cc89f
GENERATED MSG: Fix duplicate up / down messages sent to native clients

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / EndpointState . java b / src / java / org / apache / cassandra / gms / EndpointState . java <nl> index 518e575 . . 3df9155 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / EndpointState . java <nl> + + + b / src / java / org / apache / cassandra / gms / EndpointState . java <nl> @ @ - 46 , 14 + 46 , 12 @ @ public class EndpointState <nl> / * fields below do not get serialized * / <nl> private volatile long updateTimestamp ; <nl> private volatile boolean isAlive ; <nl> - private volatile boolean hasPendingEcho ; <nl> <nl> EndpointState ( HeartBeatState initialHbState ) <nl> { <nl> hbState = initialHbState ; <nl> updateTimestamp = System . nanoTime ( ) ; <nl> isAlive = true ; <nl> - hasPendingEcho = false ; <nl> } <nl> <nl> HeartBeatState getHeartBeatState ( ) <nl> @ @ - 115 , 16 + 113 , 6 @ @ public class EndpointState <nl> isAlive = false ; <nl> } <nl> <nl> - public boolean hasPendingEcho ( ) <nl> - { <nl> - return hasPendingEcho ; <nl> - } <nl> - <nl> - public void markPendingEcho ( boolean val ) <nl> - { <nl> - hasPendingEcho = val ; <nl> - } <nl> - <nl> public String toString ( ) <nl> { <nl> return " EndpointState : HeartBeatState = " + hbState + " , AppStateMap = " + applicationState ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 97dc506 . . 962a358 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 877 , 12 + 877 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return ; <nl> } <nl> <nl> - if ( localState . hasPendingEcho ( ) ) <nl> - { <nl> - logger . debug ( " { } has already a pending echo , skipping it " , localState ) ; <nl> - return ; <nl> - } <nl> - <nl> localState . markDead ( ) ; <nl> <nl> MessageOut < EchoMessage > echoMessage = new MessageOut < EchoMessage > ( MessagingService . Verb . ECHO , new EchoMessage ( ) , EchoMessage . serializer ) ; <nl> @ @ - 896 , 19 + 890 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> <nl> public void response ( MessageIn msg ) <nl> { <nl> - localState . markPendingEcho ( false ) ; <nl> realMarkAlive ( addr , localState ) ; <nl> } <nl> } ; <nl> <nl> - localState . markPendingEcho ( true ) ; <nl> MessagingService . instance ( ) . sendRR ( echoMessage , addr , echoHandler ) ; <nl> } <nl> <nl> private void realMarkAlive ( final InetAddress addr , final EndpointState localState ) <nl> { <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " marking as alive { } " , addr ) ; <nl> + logger . trace ( " marking as alive { } " , addr ) ; <nl> localState . markAlive ( ) ; <nl> localState . updateTimestamp ( ) ; / / prevents doStatusCheck from racing us and evicting if it was down > aVeryLongTime <nl> liveEndpoints . add ( addr ) ; <nl> @ @ - 919 , 7 + 911 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> for ( IEndpointStateChangeSubscriber subscriber : subscribers ) <nl> subscriber . onAlive ( addr , localState ) ; <nl> if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Notified " + subscribers ) ; <nl> + logger . trace ( " Notified " + subscribers ) ; <nl> } <nl> <nl> private void markDead ( InetAddress addr , EndpointState localState ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 30b8a9d . . d5a5d0c 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 22 , 7 + 22 , 9 @ @ import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . EnumMap ; <nl> + import java . util . Map ; <nl> import java . util . concurrent . Callable ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import javax . net . ssl . SSLContext ; <nl> @ @ - 318 , 6 + 320 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> private static class EventNotifier implements IEndpointLifecycleSubscriber , IMigrationListener <nl> { <nl> private final Server server ; <nl> + private final Map < InetAddress , Event . StatusChange . Status > lastStatusChange = new ConcurrentHashMap < > ( ) ; <nl> private static final InetAddress bindAll ; <nl> static { <nl> try <nl> @ @ - 370 , 12 + 373 , 16 @ @ public class Server implements CassandraDaemon . Server <nl> <nl> public void onUp ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . UP ) ; <nl> + if ( prev = = null | | prev ! = Event . StatusChange . Status . UP ) <nl> + server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onDown ( InetAddress endpoint ) <nl> { <nl> - server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> + Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . DOWN ) ; <nl> + if ( prev = = null | | prev ! = Event . StatusChange . Status . DOWN ) <nl> + server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; <nl> } <nl> <nl> public void onCreateKeyspace ( String ksName )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / EndpointState . java b / src / java / org / apache / cassandra / gms / EndpointState . java 
 index 518e575 . . 3df9155 100644 
 - - - a / src / java / org / apache / cassandra / gms / EndpointState . java 
 + + + b / src / java / org / apache / cassandra / gms / EndpointState . java 
 @ @ - 46 , 14 + 46 , 12 @ @ public class EndpointState 
 / * fields below do not get serialized * / 
 private volatile long updateTimestamp ; 
 private volatile boolean isAlive ; 
 - private volatile boolean hasPendingEcho ; 
 
 EndpointState ( HeartBeatState initialHbState ) 
 { 
 hbState = initialHbState ; 
 updateTimestamp = System . nanoTime ( ) ; 
 isAlive = true ; 
 - hasPendingEcho = false ; 
 } 
 
 HeartBeatState getHeartBeatState ( ) 
 @ @ - 115 , 16 + 113 , 6 @ @ public class EndpointState 
 isAlive = false ; 
 } 
 
 - public boolean hasPendingEcho ( ) 
 - { 
 - return hasPendingEcho ; 
 - } 
 - 
 - public void markPendingEcho ( boolean val ) 
 - { 
 - hasPendingEcho = val ; 
 - } 
 - 
 public String toString ( ) 
 { 
 return " EndpointState : HeartBeatState = " + hbState + " , AppStateMap = " + applicationState ; 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 97dc506 . . 962a358 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 877 , 12 + 877 , 6 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return ; 
 } 
 
 - if ( localState . hasPendingEcho ( ) ) 
 - { 
 - logger . debug ( " { } has already a pending echo , skipping it " , localState ) ; 
 - return ; 
 - } 
 - 
 localState . markDead ( ) ; 
 
 MessageOut < EchoMessage > echoMessage = new MessageOut < EchoMessage > ( MessagingService . Verb . ECHO , new EchoMessage ( ) , EchoMessage . serializer ) ; 
 @ @ - 896 , 19 + 890 , 17 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 
 public void response ( MessageIn msg ) 
 { 
 - localState . markPendingEcho ( false ) ; 
 realMarkAlive ( addr , localState ) ; 
 } 
 } ; 
 
 - localState . markPendingEcho ( true ) ; 
 MessagingService . instance ( ) . sendRR ( echoMessage , addr , echoHandler ) ; 
 } 
 
 private void realMarkAlive ( final InetAddress addr , final EndpointState localState ) 
 { 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " marking as alive { } " , addr ) ; 
 + logger . trace ( " marking as alive { } " , addr ) ; 
 localState . markAlive ( ) ; 
 localState . updateTimestamp ( ) ; / / prevents doStatusCheck from racing us and evicting if it was down > aVeryLongTime 
 liveEndpoints . add ( addr ) ; 
 @ @ - 919 , 7 + 911 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 for ( IEndpointStateChangeSubscriber subscriber : subscribers ) 
 subscriber . onAlive ( addr , localState ) ; 
 if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Notified " + subscribers ) ; 
 + logger . trace ( " Notified " + subscribers ) ; 
 } 
 
 private void markDead ( InetAddress addr , EndpointState localState ) 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 30b8a9d . . d5a5d0c 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 22 , 7 + 22 , 9 @ @ import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . EnumMap ; 
 + import java . util . Map ; 
 import java . util . concurrent . Callable ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import javax . net . ssl . SSLContext ; 
 @ @ - 318 , 6 + 320 , 7 @ @ public class Server implements CassandraDaemon . Server 
 private static class EventNotifier implements IEndpointLifecycleSubscriber , IMigrationListener 
 { 
 private final Server server ; 
 + private final Map < InetAddress , Event . StatusChange . Status > lastStatusChange = new ConcurrentHashMap < > ( ) ; 
 private static final InetAddress bindAll ; 
 static { 
 try 
 @ @ - 370 , 12 + 373 , 16 @ @ public class Server implements CassandraDaemon . Server 
 
 public void onUp ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . UP ) ; 
 + if ( prev = = null | | prev ! = Event . StatusChange . Status . UP ) 
 + server . connectionTracker . send ( Event . StatusChange . nodeUp ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onDown ( InetAddress endpoint ) 
 { 
 - server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 + Event . StatusChange . Status prev = lastStatusChange . put ( endpoint , Event . StatusChange . Status . DOWN ) ; 
 + if ( prev = = null | | prev ! = Event . StatusChange . Status . DOWN ) 
 + server . connectionTracker . send ( Event . StatusChange . nodeDown ( getRpcAddress ( endpoint ) , server . socket . getPort ( ) ) ) ; 
 } 
 
 public void onCreateKeyspace ( String ksName )

NEAREST DIFF:
ELIMINATEDSENTENCE
