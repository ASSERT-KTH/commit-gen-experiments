BLEU SCORE: 0.027611988917697356

TEST MSG: Compressed commit log should measure compressed space used
GENERATED MSG: merge from 0 . 7

TEST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 2178907 . . ea22e01 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 355 , 7 + 355 , 7 @ @ concurrent _ counter _ writes : 32 <nl> # offheap _ objects : native memory , eliminating nio buffer heap overhead <nl> memtable _ allocation _ type : heap _ buffers <nl> <nl> - # Total uncompressed size of the commit log . <nl> + # Total space to use for commit logs on disk . <nl> # <nl> # If space gets above this value , Cassandra will flush every dirty CF <nl> # in the oldest segment and remove it . So a small total commitlog space <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index a81145d . . b3f944d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import com . google . common . annotations . VisibleForTesting ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . commons . lang3 . StringUtils ; <nl> <nl> import com . github . tjake . ICRC32 ; <nl> @ @ - 366 , 6 + 367 , 30 @ @ public class CommitLog implements CommitLogMBean <nl> return new ArrayList < > ( archiver . archivePending . keySet ( ) ) ; <nl> } <nl> <nl> + @ Override <nl> + public long getActiveContentSize ( ) <nl> + { <nl> + long size = 0 ; <nl> + for ( CommitLogSegment segment : allocator . getActiveSegments ( ) ) <nl> + size + = segment . contentSize ( ) ; <nl> + return size ; <nl> + } <nl> + <nl> + @ Override <nl> + public long getActiveOnDiskSize ( ) <nl> + { <nl> + return allocator . onDiskSize ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Map < String , Double > getActiveSegmentCompressionRatios ( ) <nl> + { <nl> + Map < String , Double > segmentRatios = new TreeMap < > ( ) ; <nl> + for ( CommitLogSegment segment : allocator . getActiveSegments ( ) ) <nl> + segmentRatios . put ( segment . getName ( ) , 1 . 0 * segment . onDiskSize ( ) / segment . contentSize ( ) ) ; <nl> + return segmentRatios ; <nl> + } <nl> + <nl> / * * <nl> * Shuts down the threads used by the commit log , blocking until completion . <nl> * / <nl> @ @ - 445 , 5 + 470 , 4 @ @ public class CommitLog implements CommitLogMBean <nl> throw new AssertionError ( DatabaseDescriptor . getCommitFailurePolicy ( ) ) ; <nl> } <nl> } <nl> - <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java <nl> index ecb1980 . . 3b20bbc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . commitlog ; <nl> <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> public interface CommitLogMBean <nl> { <nl> @ @ - 63 , 9 + 64 , 24 @ @ public interface CommitLogMBean <nl> * @ return file names ( not full paths ) of active commit log segments ( segments containing unflushed data ) <nl> * / <nl> public List < String > getActiveSegmentNames ( ) ; <nl> - <nl> + <nl> / * * <nl> * @ return Files which are pending for archival attempt . Does NOT include failed archive attempts . <nl> * / <nl> public List < String > getArchivingSegmentNames ( ) ; <nl> + <nl> + / * * <nl> + * @ return The size of the mutations in all active commit log segments ( uncompressed ) . <nl> + * / <nl> + public long getActiveContentSize ( ) ; <nl> + <nl> + / * * <nl> + * @ return The space taken on disk by the commit log ( compressed ) . <nl> + * / <nl> + public long getActiveOnDiskSize ( ) ; <nl> + <nl> + / * * <nl> + * @ return A map between active log segments and the compression ratio achieved for each . <nl> + * / <nl> + public Map < String , Double > getActiveSegmentCompressionRatios ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> index ee160c3 . . d748006 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> @ @ - 113 , 6 + 113 , 7 @ @ public abstract class CommitLogSegment <nl> <nl> ByteBuffer buffer ; <nl> <nl> + final CommitLog commitLog ; <nl> public final CommitLogDescriptor descriptor ; <nl> <nl> static CommitLogSegment createSegment ( CommitLog commitLog ) <nl> @ @ - 132 , 6 + 133 , 7 @ @ public abstract class CommitLogSegment <nl> * / <nl> CommitLogSegment ( CommitLog commitLog ) <nl> { <nl> + this . commitLog = commitLog ; <nl> id = getNextId ( ) ; <nl> descriptor = new CommitLogDescriptor ( id , commitLog . compressorClass ) ; <nl> logFile = new File ( commitLog . location , descriptor . fileName ( ) ) ; <nl> @ @ - 305 , 9 + 307 , 12 @ @ public abstract class CommitLogSegment <nl> / * * <nl> * Completely discards a segment file by deleting it . ( Potentially blocking operation ) <nl> * / <nl> - void delete ( ) <nl> + void discard ( boolean deleteFile ) <nl> { <nl> - FileUtils . deleteWithConfirm ( logFile ) ; <nl> + close ( ) ; <nl> + if ( deleteFile ) <nl> + FileUtils . deleteWithConfirm ( logFile ) ; <nl> + commitLog . allocator . addSize ( - onDiskSize ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 525 , 6 + 530 , 13 @ @ public abstract class CommitLogSegment <nl> return sb . toString ( ) ; <nl> } <nl> <nl> + abstract public long onDiskSize ( ) ; <nl> + <nl> + public long contentSize ( ) <nl> + { <nl> + return lastSyncedOffset ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> index 5301e1b . . 3f00e97 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> @ @ - 119 , 7 + 119 , 6 @ @ public class CommitLogSegmentManager <nl> if ( availableSegments . isEmpty ( ) & & ( activeSegments . isEmpty ( ) | | createReserveSegments ) ) <nl> { <nl> logger . debug ( " No segments in reserve ; creating a fresh one " ) ; <nl> - size . addAndGet ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; <nl> / / TODO : some error handling in case we fail to create a new segment <nl> availableSegments . add ( CommitLogSegment . createSegment ( commitLog ) ) ; <nl> hasAvailableSegments . signalAll ( ) ; <nl> @ @ - 368 , 27 + 367 , 41 @ @ public class CommitLogSegmentManager <nl> private void discardSegment ( final CommitLogSegment segment , final boolean deleteFile ) <nl> { <nl> logger . debug ( " Segment { } is no longer active and will be deleted { } " , segment , deleteFile ? " now " : " by the archive script " ) ; <nl> - size . addAndGet ( - DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; <nl> <nl> segmentManagementTasks . add ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> - segment . close ( ) ; <nl> - if ( deleteFile ) <nl> - segment . delete ( ) ; <nl> + segment . discard ( deleteFile ) ; <nl> } <nl> } ) ; <nl> } <nl> <nl> / * * <nl> + * Adjust the tracked on - disk size . Called by individual segments to reflect writes , allocations and discards . <nl> + * @ param addedSize <nl> + * / <nl> + void addSize ( long addedSize ) <nl> + { <nl> + size . addAndGet ( addedSize ) ; <nl> + } <nl> + <nl> + / * * <nl> * @ return the space ( in bytes ) used by all segment files . <nl> * / <nl> - public long bytesUsed ( ) <nl> + public long onDiskSize ( ) <nl> { <nl> return size . get ( ) ; <nl> } <nl> <nl> + private long unusedCapacity ( ) <nl> + { <nl> + long total = DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 ; <nl> + long currentSize = size . get ( ) ; <nl> + logger . debug ( " Total active commitlog segment space used is { } out of { } " , currentSize , total ) ; <nl> + return total - currentSize ; <nl> + } <nl> + <nl> / * * <nl> * @ param name the filename to check <nl> * @ return true if file is managed by this manager . <nl> @ @ - 401 , 14 + 414 , 6 @ @ public class CommitLogSegmentManager <nl> return false ; <nl> } <nl> <nl> - private long unusedCapacity ( ) <nl> - { <nl> - long total = DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 ; <nl> - long currentSize = size . get ( ) ; <nl> - logger . debug ( " Total active commitlog segment space used is { } out of { } " , currentSize , total ) ; <nl> - return total - currentSize ; <nl> - } <nl> - <nl> / * * <nl> * Throws a flag that enables the behavior of keeping at least one spare segment <nl> * available at all times . <nl> @ @ - 468 , 8 + 473 , 7 @ @ public class CommitLogSegmentManager <nl> logger . debug ( " CLSM closing and clearing existing commit log segments . . . " ) ; <nl> createReserveSegments = false ; <nl> <nl> - while ( ! segmentManagementTasks . isEmpty ( ) ) <nl> - Thread . yield ( ) ; <nl> + awaitManagementTasksCompletion ( ) ; <nl> <nl> shutdown ( ) ; <nl> try <nl> @ @ - 498 , 15 + 502 , 22 @ @ public class CommitLogSegmentManager <nl> logger . debug ( " CLSM done with closing and clearing existing commit log segments . " ) ; <nl> } <nl> <nl> - private static void closeAndDeleteSegmentUnsafe ( CommitLogSegment segment , boolean delete ) <nl> + / / Used by tests only . <nl> + void awaitManagementTasksCompletion ( ) <nl> { <nl> - segment . close ( ) ; <nl> - if ( ! delete ) <nl> - return ; <nl> + while ( ! segmentManagementTasks . isEmpty ( ) ) <nl> + Thread . yield ( ) ; <nl> + / / The last management task is not yet complete . Wait a while for it . <nl> + Uninterruptibles . sleepUninterruptibly ( 100 , TimeUnit . MILLISECONDS ) ; <nl> + / / TODO : If this functionality is required by anything other than tests , signalling must be used to ensure <nl> + / / waiting completes correctly . <nl> + } <nl> <nl> + private static void closeAndDeleteSegmentUnsafe ( CommitLogSegment segment , boolean delete ) <nl> + { <nl> try <nl> { <nl> - segment . delete ( ) ; <nl> + segment . discard ( delete ) ; <nl> } <nl> catch ( AssertionError ignored ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java <nl> index c8101e4 . . 8c62536 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java <nl> @ @ - 53 , 6 + 53 , 8 @ @ public class CompressedSegment extends CommitLogSegment <nl> static final int COMPRESSED _ MARKER _ SIZE = SYNC _ MARKER _ SIZE + 4 ; <nl> final ICompressor compressor ; <nl> <nl> + volatile long lastWrittenPos = 0 ; <nl> + <nl> / * * <nl> * Constructs a new segment file . <nl> * / <nl> @ @ - 63 , 6 + 65 , 7 @ @ public class CompressedSegment extends CommitLogSegment <nl> try <nl> { <nl> channel . write ( ( ByteBuffer ) buffer . duplicate ( ) . flip ( ) ) ; <nl> + commitLog . allocator . addSize ( lastWrittenPos = buffer . position ( ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 120 , 7 + 123 , 10 @ @ public class CompressedSegment extends CommitLogSegment <nl> / / Only one thread can be here at a given time . <nl> / / Protected by synchronization on CommitLogSegment . sync ( ) . <nl> writeSyncMarker ( compressedBuffer , 0 , ( int ) channel . position ( ) , ( int ) channel . position ( ) + compressedBuffer . remaining ( ) ) ; <nl> + commitLog . allocator . addSize ( compressedBuffer . limit ( ) ) ; <nl> channel . write ( compressedBuffer ) ; <nl> + assert channel . position ( ) - lastWrittenPos = = compressedBuffer . limit ( ) ; <nl> + lastWrittenPos = channel . position ( ) ; <nl> SyncUtil . force ( channel , true ) ; <nl> } <nl> catch ( Exception e ) <nl> @ @ - 144 , 4 + 150 , 10 @ @ public class CompressedSegment extends CommitLogSegment <nl> { <nl> bufferPool . clear ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public long onDiskSize ( ) <nl> + { <nl> + return lastWrittenPos ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java <nl> index 7e74ec6 . . e240a91 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ public class MemoryMappedSegment extends CommitLogSegment <nl> { <nl> throw new FSWriteError ( e , logFile ) ; <nl> } <nl> + commitLog . allocator . addSize ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; <nl> <nl> return channel . map ( FileChannel . MapMode . READ _ WRITE , 0 , DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; <nl> } <nl> @ @ - 102 , 6 + 103 , 12 @ @ public class MemoryMappedSegment extends CommitLogSegment <nl> } <nl> <nl> @ Override <nl> + public long onDiskSize ( ) <nl> + { <nl> + return DatabaseDescriptor . getCommitLogSegmentSize ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> protected void internalClose ( ) <nl> { <nl> if ( FileUtils . isCleanerAvailable ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java b / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java <nl> index 7a9f6e5 . . 1da6ed0 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java <nl> + + + b / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class CommitLogMetrics <nl> { <nl> public Long getValue ( ) <nl> { <nl> - return allocator . bytesUsed ( ) ; <nl> + return allocator . onDiskSize ( ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> index 7f9df9e . . ba8896f 100644 <nl> - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> @ @ - 29 , 7 + 29 , 9 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . StandardCharsets ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . ScheduledExecutorService ; <nl> @ @ - 41 , 9 + 43 , 9 @ @ import junit . framework . Assert ; <nl> <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> <nl> + import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> - <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . Config . CommitLogSync ; <nl> @ @ - 138 , 7 + 140 , 11 @ @ public class CommitLogStressTest <nl> <nl> SchemaLoader . loadSchema ( ) ; <nl> SchemaLoader . schemaDefinition ( " " ) ; / / leave def . blank to maintain old behaviour <nl> - <nl> + } <nl> + <nl> + @ Before <nl> + public void cleanDir ( ) <nl> + { <nl> File dir = new File ( location ) ; <nl> if ( dir . isDirectory ( ) ) <nl> { <nl> @ @ - 201 , 7 + 207 , 7 @ @ public class CommitLogStressTest <nl> } <nl> <nl> public void testLog ( CommitLog commitLog ) throws IOException , InterruptedException { <nl> - System . out . format ( " \ nTesting commit log size % dmb , compressor % s , sync % s % s % s \ n " , <nl> + System . out . format ( " \ nTesting commit log size % . 0fmb , compressor % s , sync % s % s % s \ n " , <nl> mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , <nl> commitLog . compressor ! = null ? commitLog . compressor . getClass ( ) . getSimpleName ( ) : " none " , <nl> commitLog . executor . getClass ( ) . getSimpleName ( ) , <nl> @ @ - 223 , 13 + 229 , 16 @ @ public class CommitLogStressTest <nl> for ( CommitlogExecutor t : threads ) <nl> { <nl> t . join ( ) ; <nl> - CommitLog . instance . discardCompletedSegments ( Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) . cfId , t . rp ) ; <nl> if ( t . rp . compareTo ( discardedPos ) > 0 ) <nl> discardedPos = t . rp ; <nl> } <nl> + verifySizes ( commitLog ) ; <nl> + <nl> + commitLog . discardCompletedSegments ( Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) . cfId , discardedPos ) ; <nl> threads . clear ( ) ; <nl> System . out . format ( " Discarded at % s \ n " , discardedPos ) ; <nl> - <nl> + verifySizes ( commitLog ) ; <nl> + <nl> scheduled = startThreads ( commitLog , threads ) ; <nl> } <nl> <nl> @ @ - 246 , 6 + 255 , 7 @ @ public class CommitLogStressTest <nl> hash + = t . hash ; <nl> cells + = t . cells ; <nl> } <nl> + verifySizes ( commitLog ) ; <nl> <nl> commitLog . shutdownBlocking ( ) ; <nl> <nl> @ @ - 267 , 7 + 277 , 39 @ @ public class CommitLogStressTest <nl> } <nl> } <nl> <nl> - public ScheduledExecutorService startThreads ( CommitLog commitLog , final List < CommitlogExecutor > threads ) <nl> + private void verifySizes ( CommitLog commitLog ) <nl> + { <nl> + / / Complete anything that ' s still left to write . <nl> + commitLog . executor . requestExtraSync ( ) . awaitUninterruptibly ( ) ; <nl> + / / One await ( ) does not suffice as we may be signalled when an ongoing sync finished . Request another <nl> + / / ( which shouldn ' t write anything ) to make sure the first we triggered completes . <nl> + / / FIXME : The executor should give us a chance to await completion of the sync we requested . <nl> + commitLog . executor . requestExtraSync ( ) . awaitUninterruptibly ( ) ; <nl> + / / Wait for any pending deletes or segment allocations to complete . <nl> + commitLog . allocator . awaitManagementTasksCompletion ( ) ; <nl> + <nl> + long combinedSize = 0 ; <nl> + for ( File f : new File ( commitLog . location ) . listFiles ( ) ) <nl> + combinedSize + = f . length ( ) ; <nl> + Assert . assertEquals ( combinedSize , commitLog . getActiveOnDiskSize ( ) ) ; <nl> + <nl> + List < String > logFileNames = commitLog . getActiveSegmentNames ( ) ; <nl> + Map < String , Double > ratios = commitLog . getActiveSegmentCompressionRatios ( ) ; <nl> + Collection < CommitLogSegment > segments = commitLog . allocator . getActiveSegments ( ) ; <nl> + <nl> + for ( CommitLogSegment segment : segments ) <nl> + { <nl> + Assert . assertTrue ( logFileNames . remove ( segment . getName ( ) ) ) ; <nl> + Double ratio = ratios . remove ( segment . getName ( ) ) ; <nl> + <nl> + Assert . assertEquals ( segment . logFile . length ( ) , segment . onDiskSize ( ) ) ; <nl> + Assert . assertEquals ( segment . onDiskSize ( ) * 1 . 0 / segment . contentSize ( ) , ratio , 0 . 01 ) ; <nl> + } <nl> + Assert . assertTrue ( logFileNames . isEmpty ( ) ) ; <nl> + Assert . assertTrue ( ratios . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + public ScheduledExecutorService startThreads ( final CommitLog commitLog , final List < CommitlogExecutor > threads ) <nl> { <nl> stop = false ; <nl> for ( int ii = 0 ; ii < NUM _ THREADS ; ii + + ) { <nl> @ @ - 282 , 9 + 324 , 9 @ @ public class CommitLogStressTest <nl> <nl> public void run ( ) { <nl> Runtime runtime = Runtime . getRuntime ( ) ; <nl> - long maxMemory = mb ( runtime . maxMemory ( ) ) ; <nl> - long allocatedMemory = mb ( runtime . totalMemory ( ) ) ; <nl> - long freeMemory = mb ( runtime . freeMemory ( ) ) ; <nl> + long maxMemory = runtime . maxMemory ( ) ; <nl> + long allocatedMemory = runtime . totalMemory ( ) ; <nl> + long freeMemory = runtime . freeMemory ( ) ; <nl> long temp = 0 ; <nl> long sz = 0 ; <nl> for ( CommitlogExecutor cle : threads ) { <nl> @ @ - 293 , 9 + 335 , 11 @ @ public class CommitLogStressTest <nl> } <nl> double time = ( System . currentTimeMillis ( ) - start ) / 1000 . 0 ; <nl> double avg = ( temp / time ) ; <nl> - System . out . println ( String . format ( " second % d mem max % dmb allocated % dmb free % dmb mutations % d since start % d avg % . 3f transfer % . 3fmb " , <nl> + System . out . println ( <nl> + String . format ( " second % d mem max % . 0fmb allocated % . 0fmb free % . 0fmb mutations % d since start % d avg % . 3f content % . 1fmb ondisk % . 1fmb transfer % . 3fmb " , <nl> ( ( System . currentTimeMillis ( ) - start ) / 1000 ) , <nl> - maxMemory , allocatedMemory , freeMemory , ( temp - lastUpdate ) , lastUpdate , avg , mb ( sz / time ) ) ) ; <nl> + mb ( maxMemory ) , mb ( allocatedMemory ) , mb ( freeMemory ) , ( temp - lastUpdate ) , lastUpdate , avg , <nl> + mb ( commitLog . getActiveContentSize ( ) ) , mb ( commitLog . getActiveOnDiskSize ( ) ) , mb ( sz / time ) ) ) ; <nl> lastUpdate = temp ; <nl> } <nl> } ; <nl> @ @ - 304 , 8 + 348 , 8 @ @ public class CommitLogStressTest <nl> return scheduled ; <nl> } <nl> <nl> - private static long mb ( long maxMemory ) { <nl> - return maxMemory / ( 1024 * 1024 ) ; <nl> + private static double mb ( long maxMemory ) { <nl> + return maxMemory / ( 1024 . 0 * 1024 ) ; <nl> } <nl> <nl> private static double mb ( double maxMemory ) {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eec904a . . 982454c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 59 , 6 + 59 , 8 @ @ <nl> the old ones ( CASSANDRA - 1644 ) <nl> * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) <nl> * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM <nl> + * cli truncate support ( CASSANDRA - 1653 ) <nl> + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g <nl> index e59c608 . . a9229ee 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / Cli . g <nl> + + + b / src / java / org / apache / cassandra / cli / Cli . g <nl> @ @ - 55 , 6 + 55 , 7 @ @ tokens { <nl> NODE _ UPDATE _ KEYSPACE ; <nl> NODE _ UPDATE _ COLUMN _ FAMILY ; <nl> NODE _ LIST ; <nl> + NODE _ TRUNCATE ; <nl> <nl> / / Internal Nodes . <nl> NODE _ COLUMN _ ACCESS ; <nl> @ @ - 123 , 6 + 124 , 7 @ @ statement <nl> | setStatement <nl> | showStatement <nl> | listStatement <nl> + | truncateStatement <nl> | - > ^ ( NODE _ NO _ OP ) <nl> ; <nl> <nl> @ @ - 174 , 6 + 176 , 8 @ @ helpStatement <nl> - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) <nl> | K _ HELP K _ LIST <nl> - > ^ ( NODE _ HELP NODE _ LIST ) <nl> + | K _ HELP K _ TRUNCATE <nl> + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) <nl> | K _ HELP <nl> - > ^ ( NODE _ HELP ) <nl> | ' ? ' <nl> @ @ - 231 , 6 + 235 , 11 @ @ listStatement <nl> - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) <nl> ; <nl> <nl> + truncateStatement <nl> + : K _ TRUNCATE columnFamily <nl> + - > ^ ( NODE _ TRUNCATE columnFamily ) <nl> + ; <nl> + <nl> showClusterName <nl> : K _ SHOW K _ CLUSTER K _ NAME <nl> - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) <nl> @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; <nl> K _ UPDATE : ' UPDATE ' ; <nl> K _ LIST : ' LIST ' ; <nl> K _ LIMIT : ' LIMIT ' ; <nl> + K _ TRUNCATE : ' TRUNCATE ' ; <nl> <nl> / / private syntactic rules <nl> fragment <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index b6ace98 . . b63105a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp <nl> case CliParser . NODE _ LIST : <nl> executeList ( tree ) ; <nl> break ; <nl> + case CliParser . NODE _ TRUNCATE : <nl> + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; <nl> + break ; <nl> case CliParser . NODE _ NO _ OP : <nl> / / comment lines come here ; they are treated as no ops . <nl> break ; <nl> @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp <nl> printSliceList ( columnFamilyDef , keySlices ) ; <nl> } <nl> <nl> + / / TRUNCATE < columnFamily > <nl> + private void executeTruncate ( String columnFamily ) <nl> + { <nl> + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) <nl> + return ; <nl> + <nl> + / / getting CfDef , it will fail if there is no such column family in current keySpace . <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + try <nl> + { <nl> + thriftClient . truncate ( cfDef . getName ( ) ) ; <nl> + sessionState . out . println ( columnFamily + " truncated . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( e . getWhy ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / / SHOW API VERSION <nl> private void executeShowVersion ( ) throws TException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> index f541fe5 . . b033d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor <nl> " help set " , <nl> " help del " , <nl> " help count " , <nl> + " help list " , <nl> + " help truncate " <nl> } ; <nl> private static String [ ] keyspaceCommands = { <nl> " get " , <nl> " set " , <nl> " count " , <nl> - " del " <nl> + " del " , <nl> + " list " , <nl> + " truncate " <nl> } ; <nl> <nl> public CliCompleter ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index 7c512e2 . . db6a779 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { <nl> state . out . println ( " list Users [ j : ] limit 40 " ) ; <nl> break ; <nl> <nl> + case CliParser . NODE _ TRUNCATE : <nl> + state . out . println ( " truncate < column _ family > " ) ; <nl> + state . out . println ( " Truncate specified column family . \ n " ) ; <nl> + state . out . println ( " example : " ) ; <nl> + state . out . println ( " truncate Category " ) ; <nl> + break ; <nl> + <nl> default : <nl> state . out . println ( " ? " ) ; <nl> break ; <nl> @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { <nl> state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; <nl> - state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; <nl> + state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : ] " ) ; <nl> state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 24a3de0 . . eddcafd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase <nl> " list CF3 [ h : ] " , <nl> " list CF3 limit 10 " , <nl> " list CF3 [ h : g ] limit 10 " , <nl> + " truncate CF1 " , <nl> " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , <nl> " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " <nl> } ; <nl> @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase <nl> assertTrue ( result . startsWith ( " = > ( column = " ) ) ; <nl> } <nl> } <nl> + else if ( statement . startsWith ( " truncate " ) ) <nl> + { <nl> + assertTrue ( result . contains ( " truncated . " ) ) ; <nl> + } <nl> <nl> outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time <nl> errStream . reset ( ) ; / / no errors to the end user .

TEST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 2178907 . . ea22e01 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 355 , 7 + 355 , 7 @ @ concurrent _ counter _ writes : 32 
 # offheap _ objects : native memory , eliminating nio buffer heap overhead 
 memtable _ allocation _ type : heap _ buffers 
 
 - # Total uncompressed size of the commit log . 
 + # Total space to use for commit logs on disk . 
 # 
 # If space gets above this value , Cassandra will flush every dirty CF 
 # in the oldest segment and remove it . So a small total commitlog space 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index a81145d . . b3f944d 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import com . google . common . annotations . VisibleForTesting ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . commons . lang3 . StringUtils ; 
 
 import com . github . tjake . ICRC32 ; 
 @ @ - 366 , 6 + 367 , 30 @ @ public class CommitLog implements CommitLogMBean 
 return new ArrayList < > ( archiver . archivePending . keySet ( ) ) ; 
 } 
 
 + @ Override 
 + public long getActiveContentSize ( ) 
 + { 
 + long size = 0 ; 
 + for ( CommitLogSegment segment : allocator . getActiveSegments ( ) ) 
 + size + = segment . contentSize ( ) ; 
 + return size ; 
 + } 
 + 
 + @ Override 
 + public long getActiveOnDiskSize ( ) 
 + { 
 + return allocator . onDiskSize ( ) ; 
 + } 
 + 
 + @ Override 
 + public Map < String , Double > getActiveSegmentCompressionRatios ( ) 
 + { 
 + Map < String , Double > segmentRatios = new TreeMap < > ( ) ; 
 + for ( CommitLogSegment segment : allocator . getActiveSegments ( ) ) 
 + segmentRatios . put ( segment . getName ( ) , 1 . 0 * segment . onDiskSize ( ) / segment . contentSize ( ) ) ; 
 + return segmentRatios ; 
 + } 
 + 
 / * * 
 * Shuts down the threads used by the commit log , blocking until completion . 
 * / 
 @ @ - 445 , 5 + 470 , 4 @ @ public class CommitLog implements CommitLogMBean 
 throw new AssertionError ( DatabaseDescriptor . getCommitFailurePolicy ( ) ) ; 
 } 
 } 
 - 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java 
 index ecb1980 . . 3b20bbc 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogMBean . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . commitlog ; 
 
 import java . io . IOException ; 
 import java . util . List ; 
 + import java . util . Map ; 
 
 public interface CommitLogMBean 
 { 
 @ @ - 63 , 9 + 64 , 24 @ @ public interface CommitLogMBean 
 * @ return file names ( not full paths ) of active commit log segments ( segments containing unflushed data ) 
 * / 
 public List < String > getActiveSegmentNames ( ) ; 
 - 
 + 
 / * * 
 * @ return Files which are pending for archival attempt . Does NOT include failed archive attempts . 
 * / 
 public List < String > getArchivingSegmentNames ( ) ; 
 + 
 + / * * 
 + * @ return The size of the mutations in all active commit log segments ( uncompressed ) . 
 + * / 
 + public long getActiveContentSize ( ) ; 
 + 
 + / * * 
 + * @ return The space taken on disk by the commit log ( compressed ) . 
 + * / 
 + public long getActiveOnDiskSize ( ) ; 
 + 
 + / * * 
 + * @ return A map between active log segments and the compression ratio achieved for each . 
 + * / 
 + public Map < String , Double > getActiveSegmentCompressionRatios ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 index ee160c3 . . d748006 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 @ @ - 113 , 6 + 113 , 7 @ @ public abstract class CommitLogSegment 
 
 ByteBuffer buffer ; 
 
 + final CommitLog commitLog ; 
 public final CommitLogDescriptor descriptor ; 
 
 static CommitLogSegment createSegment ( CommitLog commitLog ) 
 @ @ - 132 , 6 + 133 , 7 @ @ public abstract class CommitLogSegment 
 * / 
 CommitLogSegment ( CommitLog commitLog ) 
 { 
 + this . commitLog = commitLog ; 
 id = getNextId ( ) ; 
 descriptor = new CommitLogDescriptor ( id , commitLog . compressorClass ) ; 
 logFile = new File ( commitLog . location , descriptor . fileName ( ) ) ; 
 @ @ - 305 , 9 + 307 , 12 @ @ public abstract class CommitLogSegment 
 / * * 
 * Completely discards a segment file by deleting it . ( Potentially blocking operation ) 
 * / 
 - void delete ( ) 
 + void discard ( boolean deleteFile ) 
 { 
 - FileUtils . deleteWithConfirm ( logFile ) ; 
 + close ( ) ; 
 + if ( deleteFile ) 
 + FileUtils . deleteWithConfirm ( logFile ) ; 
 + commitLog . allocator . addSize ( - onDiskSize ( ) ) ; 
 } 
 
 / * * 
 @ @ - 525 , 6 + 530 , 13 @ @ public abstract class CommitLogSegment 
 return sb . toString ( ) ; 
 } 
 
 + abstract public long onDiskSize ( ) ; 
 + 
 + public long contentSize ( ) 
 + { 
 + return lastSyncedOffset ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 index 5301e1b . . 3f00e97 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 @ @ - 119 , 7 + 119 , 6 @ @ public class CommitLogSegmentManager 
 if ( availableSegments . isEmpty ( ) & & ( activeSegments . isEmpty ( ) | | createReserveSegments ) ) 
 { 
 logger . debug ( " No segments in reserve ; creating a fresh one " ) ; 
 - size . addAndGet ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; 
 / / TODO : some error handling in case we fail to create a new segment 
 availableSegments . add ( CommitLogSegment . createSegment ( commitLog ) ) ; 
 hasAvailableSegments . signalAll ( ) ; 
 @ @ - 368 , 27 + 367 , 41 @ @ public class CommitLogSegmentManager 
 private void discardSegment ( final CommitLogSegment segment , final boolean deleteFile ) 
 { 
 logger . debug ( " Segment { } is no longer active and will be deleted { } " , segment , deleteFile ? " now " : " by the archive script " ) ; 
 - size . addAndGet ( - DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; 
 
 segmentManagementTasks . add ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 - segment . close ( ) ; 
 - if ( deleteFile ) 
 - segment . delete ( ) ; 
 + segment . discard ( deleteFile ) ; 
 } 
 } ) ; 
 } 
 
 / * * 
 + * Adjust the tracked on - disk size . Called by individual segments to reflect writes , allocations and discards . 
 + * @ param addedSize 
 + * / 
 + void addSize ( long addedSize ) 
 + { 
 + size . addAndGet ( addedSize ) ; 
 + } 
 + 
 + / * * 
 * @ return the space ( in bytes ) used by all segment files . 
 * / 
 - public long bytesUsed ( ) 
 + public long onDiskSize ( ) 
 { 
 return size . get ( ) ; 
 } 
 
 + private long unusedCapacity ( ) 
 + { 
 + long total = DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 ; 
 + long currentSize = size . get ( ) ; 
 + logger . debug ( " Total active commitlog segment space used is { } out of { } " , currentSize , total ) ; 
 + return total - currentSize ; 
 + } 
 + 
 / * * 
 * @ param name the filename to check 
 * @ return true if file is managed by this manager . 
 @ @ - 401 , 14 + 414 , 6 @ @ public class CommitLogSegmentManager 
 return false ; 
 } 
 
 - private long unusedCapacity ( ) 
 - { 
 - long total = DatabaseDescriptor . getTotalCommitlogSpaceInMB ( ) * 1024 * 1024 ; 
 - long currentSize = size . get ( ) ; 
 - logger . debug ( " Total active commitlog segment space used is { } out of { } " , currentSize , total ) ; 
 - return total - currentSize ; 
 - } 
 - 
 / * * 
 * Throws a flag that enables the behavior of keeping at least one spare segment 
 * available at all times . 
 @ @ - 468 , 8 + 473 , 7 @ @ public class CommitLogSegmentManager 
 logger . debug ( " CLSM closing and clearing existing commit log segments . . . " ) ; 
 createReserveSegments = false ; 
 
 - while ( ! segmentManagementTasks . isEmpty ( ) ) 
 - Thread . yield ( ) ; 
 + awaitManagementTasksCompletion ( ) ; 
 
 shutdown ( ) ; 
 try 
 @ @ - 498 , 15 + 502 , 22 @ @ public class CommitLogSegmentManager 
 logger . debug ( " CLSM done with closing and clearing existing commit log segments . " ) ; 
 } 
 
 - private static void closeAndDeleteSegmentUnsafe ( CommitLogSegment segment , boolean delete ) 
 + / / Used by tests only . 
 + void awaitManagementTasksCompletion ( ) 
 { 
 - segment . close ( ) ; 
 - if ( ! delete ) 
 - return ; 
 + while ( ! segmentManagementTasks . isEmpty ( ) ) 
 + Thread . yield ( ) ; 
 + / / The last management task is not yet complete . Wait a while for it . 
 + Uninterruptibles . sleepUninterruptibly ( 100 , TimeUnit . MILLISECONDS ) ; 
 + / / TODO : If this functionality is required by anything other than tests , signalling must be used to ensure 
 + / / waiting completes correctly . 
 + } 
 
 + private static void closeAndDeleteSegmentUnsafe ( CommitLogSegment segment , boolean delete ) 
 + { 
 try 
 { 
 - segment . delete ( ) ; 
 + segment . discard ( delete ) ; 
 } 
 catch ( AssertionError ignored ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java 
 index c8101e4 . . 8c62536 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java 
 @ @ - 53 , 6 + 53 , 8 @ @ public class CompressedSegment extends CommitLogSegment 
 static final int COMPRESSED _ MARKER _ SIZE = SYNC _ MARKER _ SIZE + 4 ; 
 final ICompressor compressor ; 
 
 + volatile long lastWrittenPos = 0 ; 
 + 
 / * * 
 * Constructs a new segment file . 
 * / 
 @ @ - 63 , 6 + 65 , 7 @ @ public class CompressedSegment extends CommitLogSegment 
 try 
 { 
 channel . write ( ( ByteBuffer ) buffer . duplicate ( ) . flip ( ) ) ; 
 + commitLog . allocator . addSize ( lastWrittenPos = buffer . position ( ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 120 , 7 + 123 , 10 @ @ public class CompressedSegment extends CommitLogSegment 
 / / Only one thread can be here at a given time . 
 / / Protected by synchronization on CommitLogSegment . sync ( ) . 
 writeSyncMarker ( compressedBuffer , 0 , ( int ) channel . position ( ) , ( int ) channel . position ( ) + compressedBuffer . remaining ( ) ) ; 
 + commitLog . allocator . addSize ( compressedBuffer . limit ( ) ) ; 
 channel . write ( compressedBuffer ) ; 
 + assert channel . position ( ) - lastWrittenPos = = compressedBuffer . limit ( ) ; 
 + lastWrittenPos = channel . position ( ) ; 
 SyncUtil . force ( channel , true ) ; 
 } 
 catch ( Exception e ) 
 @ @ - 144 , 4 + 150 , 10 @ @ public class CompressedSegment extends CommitLogSegment 
 { 
 bufferPool . clear ( ) ; 
 } 
 + 
 + @ Override 
 + public long onDiskSize ( ) 
 + { 
 + return lastWrittenPos ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java 
 index 7e74ec6 . . e240a91 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / MemoryMappedSegment . java 
 @ @ - 67 , 6 + 67 , 7 @ @ public class MemoryMappedSegment extends CommitLogSegment 
 { 
 throw new FSWriteError ( e , logFile ) ; 
 } 
 + commitLog . allocator . addSize ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; 
 
 return channel . map ( FileChannel . MapMode . READ _ WRITE , 0 , DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; 
 } 
 @ @ - 102 , 6 + 103 , 12 @ @ public class MemoryMappedSegment extends CommitLogSegment 
 } 
 
 @ Override 
 + public long onDiskSize ( ) 
 + { 
 + return DatabaseDescriptor . getCommitLogSegmentSize ( ) ; 
 + } 
 + 
 + @ Override 
 protected void internalClose ( ) 
 { 
 if ( FileUtils . isCleanerAvailable ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java b / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java 
 index 7a9f6e5 . . 1da6ed0 100644 
 - - - a / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java 
 + + + b / src / java / org / apache / cassandra / metrics / CommitLogMetrics . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class CommitLogMetrics 
 { 
 public Long getValue ( ) 
 { 
 - return allocator . bytesUsed ( ) ; 
 + return allocator . onDiskSize ( ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 index 7f9df9e . . ba8896f 100644 
 - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 @ @ - 29 , 7 + 29 , 9 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . StandardCharsets ; 
 import java . util . ArrayList ; 
 + import java . util . Collection ; 
 import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . ScheduledExecutorService ; 
 @ @ - 41 , 9 + 43 , 9 @ @ import junit . framework . Assert ; 
 
 import com . google . common . util . concurrent . RateLimiter ; 
 
 + import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 - 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . Config . CommitLogSync ; 
 @ @ - 138 , 7 + 140 , 11 @ @ public class CommitLogStressTest 
 
 SchemaLoader . loadSchema ( ) ; 
 SchemaLoader . schemaDefinition ( " " ) ; / / leave def . blank to maintain old behaviour 
 - 
 + } 
 + 
 + @ Before 
 + public void cleanDir ( ) 
 + { 
 File dir = new File ( location ) ; 
 if ( dir . isDirectory ( ) ) 
 { 
 @ @ - 201 , 7 + 207 , 7 @ @ public class CommitLogStressTest 
 } 
 
 public void testLog ( CommitLog commitLog ) throws IOException , InterruptedException { 
 - System . out . format ( " \ nTesting commit log size % dmb , compressor % s , sync % s % s % s \ n " , 
 + System . out . format ( " \ nTesting commit log size % . 0fmb , compressor % s , sync % s % s % s \ n " , 
 mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , 
 commitLog . compressor ! = null ? commitLog . compressor . getClass ( ) . getSimpleName ( ) : " none " , 
 commitLog . executor . getClass ( ) . getSimpleName ( ) , 
 @ @ - 223 , 13 + 229 , 16 @ @ public class CommitLogStressTest 
 for ( CommitlogExecutor t : threads ) 
 { 
 t . join ( ) ; 
 - CommitLog . instance . discardCompletedSegments ( Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) . cfId , t . rp ) ; 
 if ( t . rp . compareTo ( discardedPos ) > 0 ) 
 discardedPos = t . rp ; 
 } 
 + verifySizes ( commitLog ) ; 
 + 
 + commitLog . discardCompletedSegments ( Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) . cfId , discardedPos ) ; 
 threads . clear ( ) ; 
 System . out . format ( " Discarded at % s \ n " , discardedPos ) ; 
 - 
 + verifySizes ( commitLog ) ; 
 + 
 scheduled = startThreads ( commitLog , threads ) ; 
 } 
 
 @ @ - 246 , 6 + 255 , 7 @ @ public class CommitLogStressTest 
 hash + = t . hash ; 
 cells + = t . cells ; 
 } 
 + verifySizes ( commitLog ) ; 
 
 commitLog . shutdownBlocking ( ) ; 
 
 @ @ - 267 , 7 + 277 , 39 @ @ public class CommitLogStressTest 
 } 
 } 
 
 - public ScheduledExecutorService startThreads ( CommitLog commitLog , final List < CommitlogExecutor > threads ) 
 + private void verifySizes ( CommitLog commitLog ) 
 + { 
 + / / Complete anything that ' s still left to write . 
 + commitLog . executor . requestExtraSync ( ) . awaitUninterruptibly ( ) ; 
 + / / One await ( ) does not suffice as we may be signalled when an ongoing sync finished . Request another 
 + / / ( which shouldn ' t write anything ) to make sure the first we triggered completes . 
 + / / FIXME : The executor should give us a chance to await completion of the sync we requested . 
 + commitLog . executor . requestExtraSync ( ) . awaitUninterruptibly ( ) ; 
 + / / Wait for any pending deletes or segment allocations to complete . 
 + commitLog . allocator . awaitManagementTasksCompletion ( ) ; 
 + 
 + long combinedSize = 0 ; 
 + for ( File f : new File ( commitLog . location ) . listFiles ( ) ) 
 + combinedSize + = f . length ( ) ; 
 + Assert . assertEquals ( combinedSize , commitLog . getActiveOnDiskSize ( ) ) ; 
 + 
 + List < String > logFileNames = commitLog . getActiveSegmentNames ( ) ; 
 + Map < String , Double > ratios = commitLog . getActiveSegmentCompressionRatios ( ) ; 
 + Collection < CommitLogSegment > segments = commitLog . allocator . getActiveSegments ( ) ; 
 + 
 + for ( CommitLogSegment segment : segments ) 
 + { 
 + Assert . assertTrue ( logFileNames . remove ( segment . getName ( ) ) ) ; 
 + Double ratio = ratios . remove ( segment . getName ( ) ) ; 
 + 
 + Assert . assertEquals ( segment . logFile . length ( ) , segment . onDiskSize ( ) ) ; 
 + Assert . assertEquals ( segment . onDiskSize ( ) * 1 . 0 / segment . contentSize ( ) , ratio , 0 . 01 ) ; 
 + } 
 + Assert . assertTrue ( logFileNames . isEmpty ( ) ) ; 
 + Assert . assertTrue ( ratios . isEmpty ( ) ) ; 
 + } 
 + 
 + public ScheduledExecutorService startThreads ( final CommitLog commitLog , final List < CommitlogExecutor > threads ) 
 { 
 stop = false ; 
 for ( int ii = 0 ; ii < NUM _ THREADS ; ii + + ) { 
 @ @ - 282 , 9 + 324 , 9 @ @ public class CommitLogStressTest 
 
 public void run ( ) { 
 Runtime runtime = Runtime . getRuntime ( ) ; 
 - long maxMemory = mb ( runtime . maxMemory ( ) ) ; 
 - long allocatedMemory = mb ( runtime . totalMemory ( ) ) ; 
 - long freeMemory = mb ( runtime . freeMemory ( ) ) ; 
 + long maxMemory = runtime . maxMemory ( ) ; 
 + long allocatedMemory = runtime . totalMemory ( ) ; 
 + long freeMemory = runtime . freeMemory ( ) ; 
 long temp = 0 ; 
 long sz = 0 ; 
 for ( CommitlogExecutor cle : threads ) { 
 @ @ - 293 , 9 + 335 , 11 @ @ public class CommitLogStressTest 
 } 
 double time = ( System . currentTimeMillis ( ) - start ) / 1000 . 0 ; 
 double avg = ( temp / time ) ; 
 - System . out . println ( String . format ( " second % d mem max % dmb allocated % dmb free % dmb mutations % d since start % d avg % . 3f transfer % . 3fmb " , 
 + System . out . println ( 
 + String . format ( " second % d mem max % . 0fmb allocated % . 0fmb free % . 0fmb mutations % d since start % d avg % . 3f content % . 1fmb ondisk % . 1fmb transfer % . 3fmb " , 
 ( ( System . currentTimeMillis ( ) - start ) / 1000 ) , 
 - maxMemory , allocatedMemory , freeMemory , ( temp - lastUpdate ) , lastUpdate , avg , mb ( sz / time ) ) ) ; 
 + mb ( maxMemory ) , mb ( allocatedMemory ) , mb ( freeMemory ) , ( temp - lastUpdate ) , lastUpdate , avg , 
 + mb ( commitLog . getActiveContentSize ( ) ) , mb ( commitLog . getActiveOnDiskSize ( ) ) , mb ( sz / time ) ) ) ; 
 lastUpdate = temp ; 
 } 
 } ; 
 @ @ - 304 , 8 + 348 , 8 @ @ public class CommitLogStressTest 
 return scheduled ; 
 } 
 
 - private static long mb ( long maxMemory ) { 
 - return maxMemory / ( 1024 * 1024 ) ; 
 + private static double mb ( long maxMemory ) { 
 + return maxMemory / ( 1024 . 0 * 1024 ) ; 
 } 
 
 private static double mb ( double maxMemory ) {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eec904a . . 982454c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 59 , 6 + 59 , 8 @ @ 
 the old ones ( CASSANDRA - 1644 ) 
 * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) 
 * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM 
 + * cli truncate support ( CASSANDRA - 1653 ) 
 + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g 
 index e59c608 . . a9229ee 100644 
 - - - a / src / java / org / apache / cassandra / cli / Cli . g 
 + + + b / src / java / org / apache / cassandra / cli / Cli . g 
 @ @ - 55 , 6 + 55 , 7 @ @ tokens { 
 NODE _ UPDATE _ KEYSPACE ; 
 NODE _ UPDATE _ COLUMN _ FAMILY ; 
 NODE _ LIST ; 
 + NODE _ TRUNCATE ; 
 
 / / Internal Nodes . 
 NODE _ COLUMN _ ACCESS ; 
 @ @ - 123 , 6 + 124 , 7 @ @ statement 
 | setStatement 
 | showStatement 
 | listStatement 
 + | truncateStatement 
 | - > ^ ( NODE _ NO _ OP ) 
 ; 
 
 @ @ - 174 , 6 + 176 , 8 @ @ helpStatement 
 - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) 
 | K _ HELP K _ LIST 
 - > ^ ( NODE _ HELP NODE _ LIST ) 
 + | K _ HELP K _ TRUNCATE 
 + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) 
 | K _ HELP 
 - > ^ ( NODE _ HELP ) 
 | ' ? ' 
 @ @ - 231 , 6 + 235 , 11 @ @ listStatement 
 - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) 
 ; 
 
 + truncateStatement 
 + : K _ TRUNCATE columnFamily 
 + - > ^ ( NODE _ TRUNCATE columnFamily ) 
 + ; 
 + 
 showClusterName 
 : K _ SHOW K _ CLUSTER K _ NAME 
 - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) 
 @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; 
 K _ UPDATE : ' UPDATE ' ; 
 K _ LIST : ' LIST ' ; 
 K _ LIMIT : ' LIMIT ' ; 
 + K _ TRUNCATE : ' TRUNCATE ' ; 
 
 / / private syntactic rules 
 fragment 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index b6ace98 . . b63105a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp 
 case CliParser . NODE _ LIST : 
 executeList ( tree ) ; 
 break ; 
 + case CliParser . NODE _ TRUNCATE : 
 + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; 
 + break ; 
 case CliParser . NODE _ NO _ OP : 
 / / comment lines come here ; they are treated as no ops . 
 break ; 
 @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp 
 printSliceList ( columnFamilyDef , keySlices ) ; 
 } 
 
 + / / TRUNCATE < columnFamily > 
 + private void executeTruncate ( String columnFamily ) 
 + { 
 + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) 
 + return ; 
 + 
 + / / getting CfDef , it will fail if there is no such column family in current keySpace . 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + try 
 + { 
 + thriftClient . truncate ( cfDef . getName ( ) ) ; 
 + sessionState . out . println ( columnFamily + " truncated . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( e . getWhy ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / / SHOW API VERSION 
 private void executeShowVersion ( ) throws TException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 index f541fe5 . . b033d8f 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java 
 + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor 
 " help set " , 
 " help del " , 
 " help count " , 
 + " help list " , 
 + " help truncate " 
 } ; 
 private static String [ ] keyspaceCommands = { 
 " get " , 
 " set " , 
 " count " , 
 - " del " 
 + " del " , 
 + " list " , 
 + " truncate " 
 } ; 
 
 public CliCompleter ( ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index 7c512e2 . . db6a779 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { 
 state . out . println ( " list Users [ j : ] limit 40 " ) ; 
 break ; 
 
 + case CliParser . NODE _ TRUNCATE : 
 + state . out . println ( " truncate < column _ family > " ) ; 
 + state . out . println ( " Truncate specified column family . \ n " ) ; 
 + state . out . println ( " example : " ) ; 
 + state . out . println ( " truncate Category " ) ; 
 + break ; 
 + 
 default : 
 state . out . println ( " ? " ) ; 
 break ; 
 @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { 
 state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; 
 - state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; 
 + state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : ] " ) ; 
 state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 24a3de0 . . eddcafd 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase 
 " list CF3 [ h : ] " , 
 " list CF3 limit 10 " , 
 " list CF3 [ h : g ] limit 10 " , 
 + " truncate CF1 " , 
 " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , 
 " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " 
 } ; 
 @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase 
 assertTrue ( result . startsWith ( " = > ( column = " ) ) ; 
 } 
 } 
 + else if ( statement . startsWith ( " truncate " ) ) 
 + { 
 + assertTrue ( result . contains ( " truncated . " ) ) ; 
 + } 
 
 outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time 
 errStream . reset ( ) ; / / no errors to the end user .
