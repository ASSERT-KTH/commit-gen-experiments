BLEU SCORE: 0.040583489434387374

TEST MSG: Ensure unique timestamp locally for paxos
GENERATED MSG: fix CAS contention timeout

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6a137a3 . . 2a69292 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 17 <nl> + * Avoid ballot clash in Paxos ( CASSANDRA - 9649 ) <nl> * Improve trace messages for RR ( CASSANDRA - 9479 ) <nl> * Fix suboptimal secondary index selection when restricted <nl> clustering column is also indexed ( CASSANDRA - 9631 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index aef59cf . . dff4a3b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 346 , 10 + 346 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> int contentions = 0 ; <nl> while ( System . nanoTime ( ) - start < timeout ) <nl> { <nl> - long ballotMillis = summary = = null <nl> - ? System . currentTimeMillis ( ) <nl> - : Math . max ( System . currentTimeMillis ( ) , 1 + UUIDGen . unixTimestamp ( summary . mostRecentInProgressCommit . ballot ) ) ; <nl> - UUID ballot = UUIDGen . getTimeUUID ( ballotMillis ) ; <nl> + UUID ballot = UUIDGen . getTimeUUID ( ) ; <nl> <nl> / / prepare <nl> Tracing . trace ( " Preparing { } " , ballot ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 960a8c2 . . 25c0217 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 10 , 6 + 10 , 8 @ @ <nl> ( CASSANDRA - 5752 ) <nl> * add " all time blocked " to StatusLogger output ( CASSANDRA - 5825 ) <nl> * Future - proof inter - major - version schema migrations ( CASSANDRA - 5845 ) <nl> + * ( Hadoop ) add CqlPagingRecordReader support for ReversedType in Thrift table <nl> + ( CASSANDRA - 5718 ) <nl> <nl> <nl> 1 . 2 . 8 <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> index c6eb46d . . d1a089f 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . ReversedType ; <nl> import org . apache . cassandra . db . marshal . TypeParser ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> @ @ - 493 , 7 + 494 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> private Pair < Integer , String > whereClause ( List < BoundColumn > column , int position ) <nl> { <nl> if ( position = = column . size ( ) - 1 | | column . get ( position + 1 ) . value = = null ) <nl> - return Pair . create ( position + 2 , String . format ( " AND % s > ? " , quote ( column . get ( position ) . name ) ) ) ; <nl> + return Pair . create ( position + 2 , String . format ( " AND % s % s ? " , quote ( column . get ( position ) . name ) , column . get ( position ) . reversed ? " < " : " > " ) ) ; <nl> <nl> Pair < Integer , String > clause = whereClause ( column , position + 1 ) ; <nl> return Pair . create ( clause . left , String . format ( " AND % s = ? % s " , quote ( column . get ( position ) . name ) , clause . right ) ) ; <nl> @ @ - 688 , 6 + 689 , 20 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> clusterColumns . add ( new BoundColumn ( key ) ) ; <nl> <nl> parseKeyValidators ( ByteBufferUtil . string ( ByteBuffer . wrap ( cqlRow . columns . get ( 2 ) . getValue ( ) ) ) ) ; <nl> + <nl> + Column rawComparator = cqlRow . columns . get ( 3 ) ; <nl> + String comparator = ByteBufferUtil . string ( ByteBuffer . wrap ( rawComparator . getValue ( ) ) ) ; <nl> + logger . debug ( " comparator : { } " , comparator ) ; <nl> + AbstractType comparatorValidator = parseType ( comparator ) ; <nl> + if ( comparatorValidator instanceof CompositeType ) <nl> + { <nl> + for ( int i = 0 ; i < clusterColumns . size ( ) ; i + + ) <nl> + clusterColumns . get ( i ) . reversed = ( ( ( CompositeType ) comparatorValidator ) . types . get ( i ) instanceof ReversedType ) ; <nl> + } <nl> + else if ( comparatorValidator instanceof ReversedType ) <nl> + { <nl> + clusterColumns . get ( 0 ) . reversed = true ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 778 , 6 + 793 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , <nl> final String name ; <nl> ByteBuffer value ; <nl> AbstractType < ? > validator ; <nl> + boolean reversed = false ; <nl> <nl> public BoundColumn ( String name ) <nl> {

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6a137a3 . . 2a69292 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 17 
 + * Avoid ballot clash in Paxos ( CASSANDRA - 9649 ) 
 * Improve trace messages for RR ( CASSANDRA - 9479 ) 
 * Fix suboptimal secondary index selection when restricted 
 clustering column is also indexed ( CASSANDRA - 9631 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index aef59cf . . dff4a3b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 346 , 10 + 346 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 int contentions = 0 ; 
 while ( System . nanoTime ( ) - start < timeout ) 
 { 
 - long ballotMillis = summary = = null 
 - ? System . currentTimeMillis ( ) 
 - : Math . max ( System . currentTimeMillis ( ) , 1 + UUIDGen . unixTimestamp ( summary . mostRecentInProgressCommit . ballot ) ) ; 
 - UUID ballot = UUIDGen . getTimeUUID ( ballotMillis ) ; 
 + UUID ballot = UUIDGen . getTimeUUID ( ) ; 
 
 / / prepare 
 Tracing . trace ( " Preparing { } " , ballot ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 960a8c2 . . 25c0217 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 10 , 6 + 10 , 8 @ @ 
 ( CASSANDRA - 5752 ) 
 * add " all time blocked " to StatusLogger output ( CASSANDRA - 5825 ) 
 * Future - proof inter - major - version schema migrations ( CASSANDRA - 5845 ) 
 + * ( Hadoop ) add CqlPagingRecordReader support for ReversedType in Thrift table 
 + ( CASSANDRA - 5718 ) 
 
 
 1 . 2 . 8 
 diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 index c6eb46d . . d1a089f 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlPagingRecordReader . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . ReversedType ; 
 import org . apache . cassandra . db . marshal . TypeParser ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 @ @ - 493 , 7 + 494 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 private Pair < Integer , String > whereClause ( List < BoundColumn > column , int position ) 
 { 
 if ( position = = column . size ( ) - 1 | | column . get ( position + 1 ) . value = = null ) 
 - return Pair . create ( position + 2 , String . format ( " AND % s > ? " , quote ( column . get ( position ) . name ) ) ) ; 
 + return Pair . create ( position + 2 , String . format ( " AND % s % s ? " , quote ( column . get ( position ) . name ) , column . get ( position ) . reversed ? " < " : " > " ) ) ; 
 
 Pair < Integer , String > clause = whereClause ( column , position + 1 ) ; 
 return Pair . create ( clause . left , String . format ( " AND % s = ? % s " , quote ( column . get ( position ) . name ) , clause . right ) ) ; 
 @ @ - 688 , 6 + 689 , 20 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 clusterColumns . add ( new BoundColumn ( key ) ) ; 
 
 parseKeyValidators ( ByteBufferUtil . string ( ByteBuffer . wrap ( cqlRow . columns . get ( 2 ) . getValue ( ) ) ) ) ; 
 + 
 + Column rawComparator = cqlRow . columns . get ( 3 ) ; 
 + String comparator = ByteBufferUtil . string ( ByteBuffer . wrap ( rawComparator . getValue ( ) ) ) ; 
 + logger . debug ( " comparator : { } " , comparator ) ; 
 + AbstractType comparatorValidator = parseType ( comparator ) ; 
 + if ( comparatorValidator instanceof CompositeType ) 
 + { 
 + for ( int i = 0 ; i < clusterColumns . size ( ) ; i + + ) 
 + clusterColumns . get ( i ) . reversed = ( ( ( CompositeType ) comparatorValidator ) . types . get ( i ) instanceof ReversedType ) ; 
 + } 
 + else if ( comparatorValidator instanceof ReversedType ) 
 + { 
 + clusterColumns . get ( 0 ) . reversed = true ; 
 + } 
 } 
 
 / * * 
 @ @ - 778 , 6 + 793 , 7 @ @ public class CqlPagingRecordReader extends RecordReader < Map < String , ByteBuffer > , 
 final String name ; 
 ByteBuffer value ; 
 AbstractType < ? > validator ; 
 + boolean reversed = false ; 
 
 public BoundColumn ( String name ) 
 {
