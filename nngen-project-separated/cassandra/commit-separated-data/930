BLEU SCORE: 1.0

TEST MSG: Fix potential assertion error during compaction on trunk
GENERATED MSG: Fix potential assertion error during compaction on trunk

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 20c866a . . 58d8ae8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 5 <nl> + * Correctly fix potential assertion error during compaction ( CASSANDRA - 11353 ) <nl> * Avoid index segment stitching in RAM which lead to OOM on big SSTable files ( CASSANDRA - 11383 ) <nl> * Fix clustering and row filters for LIKE queries on clustering columns ( CASSANDRA - 11397 ) <nl> Merged from 3 . 0 : <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index 3d044f2 . . 387e062 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 554 , 7 + 554 , 7 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery <nl> { <nl> public WithoutPurgeableTombstones ( ) <nl> { <nl> - super ( isForThrift , cfs . gcBefore ( nowInSec ( ) ) , oldestUnrepairedTombstone ( ) , cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; <nl> + super ( isForThrift , nowInSec ( ) , cfs . gcBefore ( nowInSec ( ) ) , oldestUnrepairedTombstone ( ) , cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; <nl> } <nl> <nl> protected long getMaxPurgeableTimestamp ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> index 8a3b24b . . d39da2a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> ? EmptyIterators . unfilteredPartition ( controller . cfs . metadata , false ) <nl> : UnfilteredPartitionIterators . merge ( scanners , nowInSec , listener ( ) ) ; <nl> boolean isForThrift = merged . isForThrift ( ) ; / / to stop capture of iterator in Purger , which is confusing for debug <nl> - this . compacted = Transformation . apply ( merged , new Purger ( isForThrift , controller ) ) ; <nl> + this . compacted = Transformation . apply ( merged , new Purger ( isForThrift , controller , nowInSec ) ) ; <nl> } <nl> <nl> public boolean isForThrift ( ) <nl> @ @ - 264 , 9 + 264 , 9 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> <nl> private long compactedUnfiltered ; <nl> <nl> - private Purger ( boolean isForThrift , CompactionController controller ) <nl> + private Purger ( boolean isForThrift , CompactionController controller , int nowInSec ) <nl> { <nl> - super ( isForThrift , controller . gcBefore , controller . compactingRepaired ( ) ? Integer . MIN _ VALUE : Integer . MAX _ VALUE , controller . cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; <nl> + super ( isForThrift , nowInSec , controller . gcBefore , controller . compactingRepaired ( ) ? Integer . MIN _ VALUE : Integer . MAX _ VALUE , controller . cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; <nl> this . controller = controller ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java b / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java <nl> index b7b01d6 . . 492bab1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java <nl> @ @ - 25 , 13 + 25 , 13 @ @ public abstract class PurgeFunction extends Transformation < UnfilteredRowIterator <nl> { <nl> private final boolean isForThrift ; <nl> private final DeletionPurger purger ; <nl> - private final int gcBefore ; <nl> + private final int nowInSec ; <nl> private boolean isReverseOrder ; <nl> <nl> - public PurgeFunction ( boolean isForThrift , int gcBefore , int oldestUnrepairedTombstone , boolean onlyPurgeRepairedTombstones ) <nl> + public PurgeFunction ( boolean isForThrift , int nowInSec , int gcBefore , int oldestUnrepairedTombstone , boolean onlyPurgeRepairedTombstones ) <nl> { <nl> this . isForThrift = isForThrift ; <nl> - this . gcBefore = gcBefore ; <nl> + this . nowInSec = nowInSec ; <nl> this . purger = ( timestamp , localDeletionTime ) - > <nl> ! ( onlyPurgeRepairedTombstones & & localDeletionTime > = oldestUnrepairedTombstone ) <nl> & & localDeletionTime < gcBefore <nl> @ @ - 79 , 13 + 79 , 13 @ @ public abstract class PurgeFunction extends Transformation < UnfilteredRowIterator <nl> public Row applyToStatic ( Row row ) <nl> { <nl> updateProgress ( ) ; <nl> - return row . purge ( purger , gcBefore ) ; <nl> + return row . purge ( purger , nowInSec ) ; <nl> } <nl> <nl> public Row applyToRow ( Row row ) <nl> { <nl> updateProgress ( ) ; <nl> - return row . purge ( purger , gcBefore ) ; <nl> + return row . purge ( purger , nowInSec ) ; <nl> } <nl> <nl> public RangeTombstoneMarker applyToMarker ( RangeTombstoneMarker marker ) <nl> @ @ - 117 , 4 + 117 , 4 @ @ public abstract class PurgeFunction extends Transformation < UnfilteredRowIterator <nl> return purger . shouldPurge ( ( ( RangeTombstoneBoundMarker ) marker ) . deletionTime ( ) ) ? null : marker ; <nl> } <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / AbstractCell . java b / src / java / org / apache / cassandra / db / rows / AbstractCell . java <nl> index 1ea9713 . . 061b7f0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / AbstractCell . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / AbstractCell . java <nl> @ @ - 91 , 7 + 91 , 7 @ @ public abstract class AbstractCell extends Cell <nl> / / Note that as long as the expiring column and the tombstone put together live longer than GC grace seconds , <nl> / / we ' ll fulfil our responsibility to repair . See discussion at <nl> / / http : / / cassandra - user - incubator - apache - org . 3065146 . n2 . nabble . com / repair - compaction - and - tombstone - rows - td7583481 . html <nl> - return BufferCell . tombstone ( column , timestamp ( ) , localDeletionTime ( ) - ttl ( ) ) ; <nl> + return BufferCell . tombstone ( column , timestamp ( ) , localDeletionTime ( ) - ttl ( ) , path ( ) ) ; <nl> } <nl> } <nl> return this ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java b / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java <nl> index 8a06bd4 . . b264553 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java <nl> @ @ - 18 , 32 + 18 , 33 @ @ <nl> * / <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . db . lifecycle . SSTableSet ; <nl> - import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> - import org . apache . cassandra . db . marshal . AsciiType ; <nl> - import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> - import org . junit . BeforeClass ; <nl> + import java . io . IOException ; <nl> + import java . util . Collections ; <nl> + import java . util . Set ; <nl> + <nl> import com . google . common . collect . Multimap ; <nl> import com . google . common . collect . Sets ; <nl> + import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> <nl> import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . rows . BTreeRow ; <nl> import org . apache . cassandra . db . filter . ColumnFilter ; <nl> + import org . apache . cassandra . db . lifecycle . SSTableSet ; <nl> + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . sstable . ISSTableScanner ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> import org . apache . cassandra . tools . SSTableExpiredBlockers ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> - import java . io . IOException ; <nl> - import java . util . Collections ; <nl> - import java . util . Set ; <nl> - <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> @ @ - 67 , 6 + 68 , 7 @ @ public class TTLExpiryTest <nl> . addRegularColumn ( " col2 " , AsciiType . instance ) <nl> . addRegularColumn ( " col3 " , AsciiType . instance ) <nl> . addRegularColumn ( " col7 " , AsciiType . instance ) <nl> + . addRegularColumn ( " col8 " , MapType . getInstance ( AsciiType . instance , AsciiType . instance , true ) ) <nl> . addRegularColumn ( " shadow " , AsciiType . instance ) <nl> . build ( ) . gcGraceSeconds ( 0 ) ) ; <nl> } <nl> @ @ - 141 , 9 + 143 , 23 @ @ public class TTLExpiryTest <nl> @ Test <nl> public void testSimpleExpire ( ) throws InterruptedException <nl> { <nl> + testSimpleExpire ( false ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBug10944 ( ) throws InterruptedException <nl> + { <nl> + / / Reproduction for CASSANDRA - 10944 ( at the time of the bug ) <nl> + testSimpleExpire ( true ) ; <nl> + } <nl> + <nl> + public void testSimpleExpire ( boolean force10944Bug ) throws InterruptedException <nl> + { <nl> ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( " Standard1 " ) ; <nl> + cfs . truncateBlocking ( ) ; <nl> cfs . disableAutoCompaction ( ) ; <nl> - cfs . metadata . gcGraceSeconds ( 0 ) ; <nl> + / / To reproduce # 10944 , we need our gcBefore to be equal to the locaDeletionTime . A gcGrace of 1 will ( almost always ) give us that . <nl> + cfs . metadata . gcGraceSeconds ( force10944Bug ? 1 : 0 ) ; <nl> long timestamp = System . currentTimeMillis ( ) ; <nl> String key = " ttl " ; <nl> new RowUpdateBuilder ( cfs . metadata , timestamp , 1 , key ) <nl> @ @ - 156 , 12 + 172 , 16 @ @ public class TTLExpiryTest <nl> <nl> new RowUpdateBuilder ( cfs . metadata , timestamp , 1 , key ) <nl> . add ( " col2 " , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) <nl> + . addMapEntry ( " col8 " , " bar " , " foo " ) <nl> + . delete ( " col1 " ) <nl> . build ( ) <nl> . applyUnsafe ( ) ; <nl> <nl> <nl> cfs . forceBlockingFlush ( ) ; <nl> - new RowUpdateBuilder ( cfs . metadata , timestamp , 1 , key ) <nl> + / / To reproduce # 10944 , we need to avoid the optimization that get rid of full sstable because everything <nl> + / / is known to be gcAble , so keep some data non - expiring in that case . <nl> + new RowUpdateBuilder ( cfs . metadata , timestamp , force10944Bug ? 0 : 1 , key ) <nl> . add ( " col3 " , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) <nl> . build ( ) <nl> . applyUnsafe ( ) ; <nl> @ @ - 178 , 13 + 198 , 14 @ @ public class TTLExpiryTest <nl> Thread . sleep ( 2000 ) ; / / wait for ttl to expire <nl> assertEquals ( 4 , cfs . getLiveSSTables ( ) . size ( ) ) ; <nl> cfs . enableAutoCompaction ( true ) ; <nl> - assertEquals ( 0 , cfs . getLiveSSTables ( ) . size ( ) ) ; <nl> + assertEquals ( force10944Bug ? 1 : 0 , cfs . getLiveSSTables ( ) . size ( ) ) ; <nl> } <nl> <nl> @ Test <nl> public void testNoExpire ( ) throws InterruptedException , IOException <nl> { <nl> ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( " Standard1 " ) ; <nl> + cfs . truncateBlocking ( ) ; <nl> cfs . disableAutoCompaction ( ) ; <nl> cfs . metadata . gcGraceSeconds ( 0 ) ; <nl> long timestamp = System . currentTimeMillis ( ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 20c866a . . 58d8ae8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 5 
 + * Correctly fix potential assertion error during compaction ( CASSANDRA - 11353 ) 
 * Avoid index segment stitching in RAM which lead to OOM on big SSTable files ( CASSANDRA - 11383 ) 
 * Fix clustering and row filters for LIKE queries on clustering columns ( CASSANDRA - 11397 ) 
 Merged from 3 . 0 : 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index 3d044f2 . . 387e062 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 554 , 7 + 554 , 7 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery 
 { 
 public WithoutPurgeableTombstones ( ) 
 { 
 - super ( isForThrift , cfs . gcBefore ( nowInSec ( ) ) , oldestUnrepairedTombstone ( ) , cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; 
 + super ( isForThrift , nowInSec ( ) , cfs . gcBefore ( nowInSec ( ) ) , oldestUnrepairedTombstone ( ) , cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; 
 } 
 
 protected long getMaxPurgeableTimestamp ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 index 8a3b24b . . d39da2a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 @ @ - 103 , 7 + 103 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 ? EmptyIterators . unfilteredPartition ( controller . cfs . metadata , false ) 
 : UnfilteredPartitionIterators . merge ( scanners , nowInSec , listener ( ) ) ; 
 boolean isForThrift = merged . isForThrift ( ) ; / / to stop capture of iterator in Purger , which is confusing for debug 
 - this . compacted = Transformation . apply ( merged , new Purger ( isForThrift , controller ) ) ; 
 + this . compacted = Transformation . apply ( merged , new Purger ( isForThrift , controller , nowInSec ) ) ; 
 } 
 
 public boolean isForThrift ( ) 
 @ @ - 264 , 9 + 264 , 9 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 
 private long compactedUnfiltered ; 
 
 - private Purger ( boolean isForThrift , CompactionController controller ) 
 + private Purger ( boolean isForThrift , CompactionController controller , int nowInSec ) 
 { 
 - super ( isForThrift , controller . gcBefore , controller . compactingRepaired ( ) ? Integer . MIN _ VALUE : Integer . MAX _ VALUE , controller . cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; 
 + super ( isForThrift , nowInSec , controller . gcBefore , controller . compactingRepaired ( ) ? Integer . MIN _ VALUE : Integer . MAX _ VALUE , controller . cfs . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) ) ; 
 this . controller = controller ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java b / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java 
 index b7b01d6 . . 492bab1 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / PurgeFunction . java 
 @ @ - 25 , 13 + 25 , 13 @ @ public abstract class PurgeFunction extends Transformation < UnfilteredRowIterator 
 { 
 private final boolean isForThrift ; 
 private final DeletionPurger purger ; 
 - private final int gcBefore ; 
 + private final int nowInSec ; 
 private boolean isReverseOrder ; 
 
 - public PurgeFunction ( boolean isForThrift , int gcBefore , int oldestUnrepairedTombstone , boolean onlyPurgeRepairedTombstones ) 
 + public PurgeFunction ( boolean isForThrift , int nowInSec , int gcBefore , int oldestUnrepairedTombstone , boolean onlyPurgeRepairedTombstones ) 
 { 
 this . isForThrift = isForThrift ; 
 - this . gcBefore = gcBefore ; 
 + this . nowInSec = nowInSec ; 
 this . purger = ( timestamp , localDeletionTime ) - > 
 ! ( onlyPurgeRepairedTombstones & & localDeletionTime > = oldestUnrepairedTombstone ) 
 & & localDeletionTime < gcBefore 
 @ @ - 79 , 13 + 79 , 13 @ @ public abstract class PurgeFunction extends Transformation < UnfilteredRowIterator 
 public Row applyToStatic ( Row row ) 
 { 
 updateProgress ( ) ; 
 - return row . purge ( purger , gcBefore ) ; 
 + return row . purge ( purger , nowInSec ) ; 
 } 
 
 public Row applyToRow ( Row row ) 
 { 
 updateProgress ( ) ; 
 - return row . purge ( purger , gcBefore ) ; 
 + return row . purge ( purger , nowInSec ) ; 
 } 
 
 public RangeTombstoneMarker applyToMarker ( RangeTombstoneMarker marker ) 
 @ @ - 117 , 4 + 117 , 4 @ @ public abstract class PurgeFunction extends Transformation < UnfilteredRowIterator 
 return purger . shouldPurge ( ( ( RangeTombstoneBoundMarker ) marker ) . deletionTime ( ) ) ? null : marker ; 
 } 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / rows / AbstractCell . java b / src / java / org / apache / cassandra / db / rows / AbstractCell . java 
 index 1ea9713 . . 061b7f0 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / AbstractCell . java 
 + + + b / src / java / org / apache / cassandra / db / rows / AbstractCell . java 
 @ @ - 91 , 7 + 91 , 7 @ @ public abstract class AbstractCell extends Cell 
 / / Note that as long as the expiring column and the tombstone put together live longer than GC grace seconds , 
 / / we ' ll fulfil our responsibility to repair . See discussion at 
 / / http : / / cassandra - user - incubator - apache - org . 3065146 . n2 . nabble . com / repair - compaction - and - tombstone - rows - td7583481 . html 
 - return BufferCell . tombstone ( column , timestamp ( ) , localDeletionTime ( ) - ttl ( ) ) ; 
 + return BufferCell . tombstone ( column , timestamp ( ) , localDeletionTime ( ) - ttl ( ) , path ( ) ) ; 
 } 
 } 
 return this ; 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java b / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java 
 index 8a06bd4 . . b264553 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / TTLExpiryTest . java 
 @ @ - 18 , 32 + 18 , 33 @ @ 
 * / 
 package org . apache . cassandra . db . compaction ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . db . lifecycle . SSTableSet ; 
 - import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 - import org . apache . cassandra . db . marshal . AsciiType ; 
 - import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 - import org . junit . BeforeClass ; 
 + import java . io . IOException ; 
 + import java . util . Collections ; 
 + import java . util . Set ; 
 + 
 import com . google . common . collect . Multimap ; 
 import com . google . common . collect . Sets ; 
 + import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 
 import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . rows . BTreeRow ; 
 import org . apache . cassandra . db . filter . ColumnFilter ; 
 + import org . apache . cassandra . db . lifecycle . SSTableSet ; 
 + import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 + import org . apache . cassandra . db . marshal . * ; 
 + import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . sstable . ISSTableScanner ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 import org . apache . cassandra . tools . SSTableExpiredBlockers ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 - import java . io . IOException ; 
 - import java . util . Collections ; 
 - import java . util . Set ; 
 - 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 
 @ @ - 67 , 6 + 68 , 7 @ @ public class TTLExpiryTest 
 . addRegularColumn ( " col2 " , AsciiType . instance ) 
 . addRegularColumn ( " col3 " , AsciiType . instance ) 
 . addRegularColumn ( " col7 " , AsciiType . instance ) 
 + . addRegularColumn ( " col8 " , MapType . getInstance ( AsciiType . instance , AsciiType . instance , true ) ) 
 . addRegularColumn ( " shadow " , AsciiType . instance ) 
 . build ( ) . gcGraceSeconds ( 0 ) ) ; 
 } 
 @ @ - 141 , 9 + 143 , 23 @ @ public class TTLExpiryTest 
 @ Test 
 public void testSimpleExpire ( ) throws InterruptedException 
 { 
 + testSimpleExpire ( false ) ; 
 + } 
 + 
 + @ Test 
 + public void testBug10944 ( ) throws InterruptedException 
 + { 
 + / / Reproduction for CASSANDRA - 10944 ( at the time of the bug ) 
 + testSimpleExpire ( true ) ; 
 + } 
 + 
 + public void testSimpleExpire ( boolean force10944Bug ) throws InterruptedException 
 + { 
 ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( " Standard1 " ) ; 
 + cfs . truncateBlocking ( ) ; 
 cfs . disableAutoCompaction ( ) ; 
 - cfs . metadata . gcGraceSeconds ( 0 ) ; 
 + / / To reproduce # 10944 , we need our gcBefore to be equal to the locaDeletionTime . A gcGrace of 1 will ( almost always ) give us that . 
 + cfs . metadata . gcGraceSeconds ( force10944Bug ? 1 : 0 ) ; 
 long timestamp = System . currentTimeMillis ( ) ; 
 String key = " ttl " ; 
 new RowUpdateBuilder ( cfs . metadata , timestamp , 1 , key ) 
 @ @ - 156 , 12 + 172 , 16 @ @ public class TTLExpiryTest 
 
 new RowUpdateBuilder ( cfs . metadata , timestamp , 1 , key ) 
 . add ( " col2 " , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) 
 + . addMapEntry ( " col8 " , " bar " , " foo " ) 
 + . delete ( " col1 " ) 
 . build ( ) 
 . applyUnsafe ( ) ; 
 
 
 cfs . forceBlockingFlush ( ) ; 
 - new RowUpdateBuilder ( cfs . metadata , timestamp , 1 , key ) 
 + / / To reproduce # 10944 , we need to avoid the optimization that get rid of full sstable because everything 
 + / / is known to be gcAble , so keep some data non - expiring in that case . 
 + new RowUpdateBuilder ( cfs . metadata , timestamp , force10944Bug ? 0 : 1 , key ) 
 . add ( " col3 " , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) 
 . build ( ) 
 . applyUnsafe ( ) ; 
 @ @ - 178 , 13 + 198 , 14 @ @ public class TTLExpiryTest 
 Thread . sleep ( 2000 ) ; / / wait for ttl to expire 
 assertEquals ( 4 , cfs . getLiveSSTables ( ) . size ( ) ) ; 
 cfs . enableAutoCompaction ( true ) ; 
 - assertEquals ( 0 , cfs . getLiveSSTables ( ) . size ( ) ) ; 
 + assertEquals ( force10944Bug ? 1 : 0 , cfs . getLiveSSTables ( ) . size ( ) ) ; 
 } 
 
 @ Test 
 public void testNoExpire ( ) throws InterruptedException , IOException 
 { 
 ColumnFamilyStore cfs = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( " Standard1 " ) ; 
 + cfs . truncateBlocking ( ) ; 
 cfs . disableAutoCompaction ( ) ; 
 cfs . metadata . gcGraceSeconds ( 0 ) ; 
 long timestamp = System . currentTimeMillis ( ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
