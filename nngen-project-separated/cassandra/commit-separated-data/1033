BLEU SCORE: 0.034089919964838566

TEST MSG: Hadoop integration is incompatible with Cassandra Driver 3 . 0 . 0
GENERATED MSG: Integrate pre - release Java Driver 2 . 2 - rc1 , custom build

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6e313c3 . . 21ae788 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 3 . 0 . 4 <nl> + * Hadoop integration is incompatible with Cassandra Driver 3 . 0 . 0 ( CASSANDRA - 11001 ) <nl> + <nl> + <nl> 3 . 0 . 3 <nl> * Remove double initialization of newly added tables ( CASSANDRA - 11027 ) <nl> * Filter keys searcher results by target range ( CASSANDRA - 11104 ) <nl> diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - beta1 - bb1bce4 - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - beta1 - bb1bce4 - SNAPSHOT - shaded . jar <nl> deleted file mode 100644 <nl> index b8f002f . . 0000000 <nl> Binary files a / lib / cassandra - driver - core - 3 . 0 . 0 - beta1 - bb1bce4 - SNAPSHOT - shaded . jar and / dev / null differ <nl> diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - shaded . jar <nl> new file mode 100644 <nl> index 0000000 . . 86093a9 <nl> Binary files / dev / null and b / lib / cassandra - driver - core - 3 . 0 . 0 - shaded . jar differ <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> index d7700c4 . . cc62c84 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public final class UDHelper <nl> { <nl> try <nl> { <nl> - Class < ? > cls = Class . forName ( " com . datastax . driver . core . CassandraTypeParser " ) ; <nl> + Class < ? > cls = Class . forName ( " com . datastax . driver . core . DataTypeClassNameParser " ) ; <nl> Method m = cls . getDeclaredMethod ( " parseOne " , String . class , ProtocolVersion . class , CodecRegistry . class ) ; <nl> m . setAccessible ( true ) ; <nl> methodParseOne = MethodHandles . lookup ( ) . unreflect ( m ) ; <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java <nl> index 5d5d392 . . 4e731e7 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> import com . datastax . driver . core . AuthProvider ; <nl> import com . datastax . driver . core . Cluster ; <nl> import com . datastax . driver . core . HostDistance ; <nl> + import com . datastax . driver . core . JdkSSLOptions ; <nl> import com . datastax . driver . core . PlainTextAuthProvider ; <nl> import com . datastax . driver . core . ProtocolVersion ; <nl> import com . datastax . driver . core . policies . LoadBalancingPolicy ; <nl> @ @ - 445 , 7 + 446 , 7 @ @ public class CqlConfigHelper <nl> if ( maxConnections . isPresent ( ) ) <nl> poolingOptions . setMaxConnectionsPerHost ( hostDistance , maxConnections . get ( ) ) ; <nl> if ( maxSimultaneousRequests . isPresent ( ) ) <nl> - poolingOptions . setMaxSimultaneousRequestsPerConnectionThreshold ( hostDistance , maxSimultaneousRequests . get ( ) ) ; <nl> + poolingOptions . setNewConnectionThreshold ( hostDistance , maxSimultaneousRequests . get ( ) ) ; <nl> } <nl> <nl> return poolingOptions ; <nl> @ @ - 545 , 10 + 546 , 13 @ @ public class CqlConfigHelper <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> - String [ ] css = SSLOptions . DEFAULT _ SSL _ CIPHER _ SUITES ; <nl> + String [ ] css = null ; <nl> if ( cipherSuites . isPresent ( ) ) <nl> css = cipherSuites . get ( ) . split ( " , " ) ; <nl> - return Optional . of ( new SSLOptions ( context , css ) ) ; <nl> + return Optional . of ( JdkSSLOptions . builder ( ) <nl> + . withSSLContext ( context ) <nl> + . withCipherSuites ( css ) <nl> + . build ( ) ) ; <nl> } <nl> return Optional . absent ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> index 3e32f66 . . 2dc915d 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import com . google . common . collect . Multimap ; <nl> import org . apache . commons . cli . * ; <nl> <nl> import com . datastax . driver . core . AuthProvider ; <nl> + import com . datastax . driver . core . JdkSSLOptions ; <nl> import com . datastax . driver . core . PlainTextAuthProvider ; <nl> import com . datastax . driver . core . SSLOptions ; <nl> import javax . net . ssl . SSLContext ; <nl> @ @ - 272 , 7 + 273 , 10 @ @ public class BulkLoader <nl> throw new RuntimeException ( " Could not create SSL Context . " , e ) ; <nl> } <nl> <nl> - return new SSLOptions ( sslContext , clientEncryptionOptions . cipher _ suites ) ; <nl> + return JdkSSLOptions . builder ( ) <nl> + . withSSLContext ( sslContext ) <nl> + . withCipherSuites ( clientEncryptionOptions . cipher _ suites ) <nl> + . build ( ) ; <nl> } <nl> <nl> static class ExternalClient extends NativeSSTableLoaderClient <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java b / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java <nl> index a947593 . . afca512 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java <nl> @ @ - 3 , 6 + 3 , 7 @ @ package org . apache . cassandra . cql3 ; <nl> import org . junit . Test ; <nl> <nl> import com . datastax . driver . core . Session ; <nl> + import com . datastax . driver . core . SimpleStatement ; <nl> import com . datastax . driver . core . Statement ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 77 , 7 + 78 , 7 @ @ public class IndexQueryPagingTest extends CQLTester <nl> / / that all rows are returned , so we know that paging <nl> / / of the results was involved . <nl> Session session = sessionNet ( ) ; <nl> - Statement stmt = session . newSimpleStatement ( String . format ( cql , KEYSPACE + " . " + currentTable ( ) ) ) ; <nl> + Statement stmt = new SimpleStatement ( String . format ( cql , KEYSPACE + ' . ' + currentTable ( ) ) ) ; <nl> stmt . setFetchSize ( rowCount - 1 ) ; <nl> assertEquals ( rowCount , session . execute ( stmt ) . all ( ) . size ( ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> index 6d54e36 . . cc0e806 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java <nl> @ @ - 2043 , 10 + 2043 , 10 @ @ public class UFTest extends CQLTester <nl> " LANGUAGE java \ n " + <nl> " AS ' return values . toString ( ) ; ' ; " ) ; <nl> <nl> - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 0 " ) , row ( 0 , " ( null , null ) " ) ) ; <nl> - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 1 " ) , row ( 1 , " ( 1 , 2 ) " ) ) ; <nl> - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 2 " ) , row ( 2 , " ( 4 , 5 ) " ) ) ; <nl> - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 3 " ) , row ( 3 , " ( 7 , 8 ) " ) ) ; <nl> + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 0 " ) , row ( 0 , " ( NULL , NULL ) " ) ) ; <nl> + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 1 " ) , row ( 1 , " ( 1 , 2 ) " ) ) ; <nl> + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 2 " ) , row ( 2 , " ( 4 , 5 ) " ) ) ; <nl> + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 3 " ) , row ( 3 , " ( 7 , 8 ) " ) ) ; <nl> <nl> functionName = createFunction ( KEYSPACE , <nl> " tuple < int , int > " , <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> index 7d5f38c . . bbf1008 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class JavaDriverClient <nl> this . authProvider = settings . mode . authProvider ; <nl> this . encryptionOptions = encryptionOptions ; <nl> if ( settings . node . isWhiteList ) <nl> - whitelist = new WhiteListPolicy ( new DCAwareRoundRobinPolicy ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; <nl> + whitelist = new WhiteListPolicy ( DCAwareRoundRobinPolicy . builder ( ) . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; <nl> else <nl> whitelist = null ; <nl> connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; <nl> @ @ - 124 , 7 + 124 , 9 @ @ public class JavaDriverClient <nl> { <nl> SSLContext sslContext ; <nl> sslContext = SSLFactory . createSSLContext ( encryptionOptions , true ) ; <nl> - SSLOptions sslOptions = new SSLOptions ( sslContext , encryptionOptions . cipher _ suites ) ; <nl> + SSLOptions sslOptions = JdkSSLOptions . builder ( ) <nl> + . withSSLContext ( sslContext ) <nl> + . withCipherSuites ( encryptionOptions . cipher _ suites ) . build ( ) ; <nl> clusterBuilder . withSSL ( sslOptions ) ; <nl> } <nl> <nl> @ @ - 165 , 7 + 167 , 7 @ @ public class JavaDriverClient <nl> <nl> public ResultSet execute ( String query , org . apache . cassandra . db . ConsistencyLevel consistency ) <nl> { <nl> - SimpleStatement stmt = getSession ( ) . newSimpleStatement ( query ) ; <nl> + SimpleStatement stmt = new SimpleStatement ( query ) ; <nl> stmt . setConsistencyLevel ( from ( consistency ) ) ; <nl> return getSession ( ) . execute ( stmt ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6e313c3 . . 21ae788 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 3 . 0 . 4 
 + * Hadoop integration is incompatible with Cassandra Driver 3 . 0 . 0 ( CASSANDRA - 11001 ) 
 + 
 + 
 3 . 0 . 3 
 * Remove double initialization of newly added tables ( CASSANDRA - 11027 ) 
 * Filter keys searcher results by target range ( CASSANDRA - 11104 ) 
 diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - beta1 - bb1bce4 - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - beta1 - bb1bce4 - SNAPSHOT - shaded . jar 
 deleted file mode 100644 
 index b8f002f . . 0000000 
 Binary files a / lib / cassandra - driver - core - 3 . 0 . 0 - beta1 - bb1bce4 - SNAPSHOT - shaded . jar and / dev / null differ 
 diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - shaded . jar 
 new file mode 100644 
 index 0000000 . . 86093a9 
 Binary files / dev / null and b / lib / cassandra - driver - core - 3 . 0 . 0 - shaded . jar differ 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 index d7700c4 . . cc62c84 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UDHelper . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public final class UDHelper 
 { 
 try 
 { 
 - Class < ? > cls = Class . forName ( " com . datastax . driver . core . CassandraTypeParser " ) ; 
 + Class < ? > cls = Class . forName ( " com . datastax . driver . core . DataTypeClassNameParser " ) ; 
 Method m = cls . getDeclaredMethod ( " parseOne " , String . class , ProtocolVersion . class , CodecRegistry . class ) ; 
 m . setAccessible ( true ) ; 
 methodParseOne = MethodHandles . lookup ( ) . unreflect ( m ) ; 
 diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java 
 index 5d5d392 . . 4e731e7 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlConfigHelper . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; 
 import com . datastax . driver . core . AuthProvider ; 
 import com . datastax . driver . core . Cluster ; 
 import com . datastax . driver . core . HostDistance ; 
 + import com . datastax . driver . core . JdkSSLOptions ; 
 import com . datastax . driver . core . PlainTextAuthProvider ; 
 import com . datastax . driver . core . ProtocolVersion ; 
 import com . datastax . driver . core . policies . LoadBalancingPolicy ; 
 @ @ - 445 , 7 + 446 , 7 @ @ public class CqlConfigHelper 
 if ( maxConnections . isPresent ( ) ) 
 poolingOptions . setMaxConnectionsPerHost ( hostDistance , maxConnections . get ( ) ) ; 
 if ( maxSimultaneousRequests . isPresent ( ) ) 
 - poolingOptions . setMaxSimultaneousRequestsPerConnectionThreshold ( hostDistance , maxSimultaneousRequests . get ( ) ) ; 
 + poolingOptions . setNewConnectionThreshold ( hostDistance , maxSimultaneousRequests . get ( ) ) ; 
 } 
 
 return poolingOptions ; 
 @ @ - 545 , 10 + 546 , 13 @ @ public class CqlConfigHelper 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 - String [ ] css = SSLOptions . DEFAULT _ SSL _ CIPHER _ SUITES ; 
 + String [ ] css = null ; 
 if ( cipherSuites . isPresent ( ) ) 
 css = cipherSuites . get ( ) . split ( " , " ) ; 
 - return Optional . of ( new SSLOptions ( context , css ) ) ; 
 + return Optional . of ( JdkSSLOptions . builder ( ) 
 + . withSSLContext ( context ) 
 + . withCipherSuites ( css ) 
 + . build ( ) ) ; 
 } 
 return Optional . absent ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 index 3e32f66 . . 2dc915d 100644 
 - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import com . google . common . collect . Multimap ; 
 import org . apache . commons . cli . * ; 
 
 import com . datastax . driver . core . AuthProvider ; 
 + import com . datastax . driver . core . JdkSSLOptions ; 
 import com . datastax . driver . core . PlainTextAuthProvider ; 
 import com . datastax . driver . core . SSLOptions ; 
 import javax . net . ssl . SSLContext ; 
 @ @ - 272 , 7 + 273 , 10 @ @ public class BulkLoader 
 throw new RuntimeException ( " Could not create SSL Context . " , e ) ; 
 } 
 
 - return new SSLOptions ( sslContext , clientEncryptionOptions . cipher _ suites ) ; 
 + return JdkSSLOptions . builder ( ) 
 + . withSSLContext ( sslContext ) 
 + . withCipherSuites ( clientEncryptionOptions . cipher _ suites ) 
 + . build ( ) ; 
 } 
 
 static class ExternalClient extends NativeSSTableLoaderClient 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java b / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java 
 index a947593 . . afca512 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / IndexQueryPagingTest . java 
 @ @ - 3 , 6 + 3 , 7 @ @ package org . apache . cassandra . cql3 ; 
 import org . junit . Test ; 
 
 import com . datastax . driver . core . Session ; 
 + import com . datastax . driver . core . SimpleStatement ; 
 import com . datastax . driver . core . Statement ; 
 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 77 , 7 + 78 , 7 @ @ public class IndexQueryPagingTest extends CQLTester 
 / / that all rows are returned , so we know that paging 
 / / of the results was involved . 
 Session session = sessionNet ( ) ; 
 - Statement stmt = session . newSimpleStatement ( String . format ( cql , KEYSPACE + " . " + currentTable ( ) ) ) ; 
 + Statement stmt = new SimpleStatement ( String . format ( cql , KEYSPACE + ' . ' + currentTable ( ) ) ) ; 
 stmt . setFetchSize ( rowCount - 1 ) ; 
 assertEquals ( rowCount , session . execute ( stmt ) . all ( ) . size ( ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 index 6d54e36 . . cc0e806 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / UFTest . java 
 @ @ - 2043 , 10 + 2043 , 10 @ @ public class UFTest extends CQLTester 
 " LANGUAGE java \ n " + 
 " AS ' return values . toString ( ) ; ' ; " ) ; 
 
 - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 0 " ) , row ( 0 , " ( null , null ) " ) ) ; 
 - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 1 " ) , row ( 1 , " ( 1 , 2 ) " ) ) ; 
 - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 2 " ) , row ( 2 , " ( 4 , 5 ) " ) ) ; 
 - assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 3 " ) , row ( 3 , " ( 7 , 8 ) " ) ) ; 
 + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 0 " ) , row ( 0 , " ( NULL , NULL ) " ) ) ; 
 + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 1 " ) , row ( 1 , " ( 1 , 2 ) " ) ) ; 
 + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 2 " ) , row ( 2 , " ( 4 , 5 ) " ) ) ; 
 + assertRows ( execute ( " SELECT a , " + functionName + " ( b ) FROM % s WHERE a = 3 " ) , row ( 3 , " ( 7 , 8 ) " ) ) ; 
 
 functionName = createFunction ( KEYSPACE , 
 " tuple < int , int > " , 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 index 7d5f38c . . bbf1008 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / JavaDriverClient . java 
 @ @ - 68 , 7 + 68 , 7 @ @ public class JavaDriverClient 
 this . authProvider = settings . mode . authProvider ; 
 this . encryptionOptions = encryptionOptions ; 
 if ( settings . node . isWhiteList ) 
 - whitelist = new WhiteListPolicy ( new DCAwareRoundRobinPolicy ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; 
 + whitelist = new WhiteListPolicy ( DCAwareRoundRobinPolicy . builder ( ) . build ( ) , settings . node . resolveAll ( settings . port . nativePort ) ) ; 
 else 
 whitelist = null ; 
 connectionsPerHost = settings . mode . connectionsPerHost = = null ? 8 : settings . mode . connectionsPerHost ; 
 @ @ - 124 , 7 + 124 , 9 @ @ public class JavaDriverClient 
 { 
 SSLContext sslContext ; 
 sslContext = SSLFactory . createSSLContext ( encryptionOptions , true ) ; 
 - SSLOptions sslOptions = new SSLOptions ( sslContext , encryptionOptions . cipher _ suites ) ; 
 + SSLOptions sslOptions = JdkSSLOptions . builder ( ) 
 + . withSSLContext ( sslContext ) 
 + . withCipherSuites ( encryptionOptions . cipher _ suites ) . build ( ) ; 
 clusterBuilder . withSSL ( sslOptions ) ; 
 } 
 
 @ @ - 165 , 7 + 167 , 7 @ @ public class JavaDriverClient 
 
 public ResultSet execute ( String query , org . apache . cassandra . db . ConsistencyLevel consistency ) 
 { 
 - SimpleStatement stmt = getSession ( ) . newSimpleStatement ( query ) ; 
 + SimpleStatement stmt = new SimpleStatement ( query ) ; 
 stmt . setConsistencyLevel ( from ( consistency ) ) ; 
 return getSession ( ) . execute ( stmt ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
