BLEU SCORE: 0.024615130620079664

TEST MSG: Fix paging bug with deleted columns
GENERATED MSG: add back droppable tombstones metadata to 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index bfcb6a4 . . f3a854c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 22 , 6 + 22 , 7 @ @ <nl> * Add static columns to CQL3 ( CASSANDRA - 6561 ) <nl> * Optimize single partition batch statements ( CASSANDRA - 6737 ) <nl> * Disallow post - query re - ordering when paging ( CASSANDRA - 6722 ) <nl> + * Fix potential paging bug with deleted columns ( CASSANDRA - 6748 ) <nl> Merged from 1 . 2 : <nl> * Catch memtable flush exceptions during shutdown ( CASSANDRA - 6735 ) <nl> * Fix broken streams when replacing with same IP ( CASSANDRA - 6622 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> index 297a85f . . 1b4bdbd 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> @ @ - 332 , 13 + 332 , 13 @ @ abstract class AbstractQueryPager implements QueryPager <nl> return Math . min ( liveCount , toDiscard ) ; <nl> } <nl> <nl> - protected static ByteBuffer firstName ( ColumnFamily cf ) <nl> + protected static Column firstColumn ( ColumnFamily cf ) <nl> { <nl> - return cf . iterator ( ) . next ( ) . name ( ) ; <nl> + return cf . iterator ( ) . next ( ) ; <nl> } <nl> <nl> - protected static ByteBuffer lastName ( ColumnFamily cf ) <nl> + protected static Column lastColumn ( ColumnFamily cf ) <nl> { <nl> - return cf . getReverseSortedColumns ( ) . iterator ( ) . next ( ) . name ( ) ; <nl> + return cf . getReverseSortedColumns ( ) . iterator ( ) . next ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> index 1f4ba78 . . 0df1d25 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java <nl> @ @ - 89 , 15 + 89 , 20 @ @ public class RangeSliceQueryPager extends AbstractQueryPager <nl> <nl> protected boolean containsPreviousLast ( Row first ) <nl> { <nl> - return lastReturnedKey ! = null <nl> - & & lastReturnedKey . equals ( first . key ) <nl> - & & lastReturnedName . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; <nl> + if ( lastReturnedKey = = null | | ! lastReturnedKey . equals ( first . key ) ) <nl> + return false ; <nl> + <nl> + / / Same as SliceQueryPager , we ignore a deleted column <nl> + Column firstColumn = isReversed ( ) ? lastColumn ( first . cf ) : firstColumn ( first . cf ) ; <nl> + return ! first . cf . deletionInfo ( ) . isDeleted ( firstColumn ) <nl> + & & firstColumn . isLive ( timestamp ( ) ) <nl> + & & lastReturnedName . equals ( firstColumn . name ( ) ) ; <nl> } <nl> <nl> protected boolean recordLast ( Row last ) <nl> { <nl> lastReturnedKey = last . key ; <nl> - lastReturnedName = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; <nl> + lastReturnedName = ( isReversed ( ) ? firstColumn ( last . cf ) : lastColumn ( last . cf ) ) . name ( ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> index cd0c069 . . c94f7f6 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java <nl> @ @ - 81 , 12 + 81 , 21 @ @ public class SliceQueryPager extends AbstractQueryPager implements SinglePartiti <nl> <nl> protected boolean containsPreviousLast ( Row first ) <nl> { <nl> - return lastReturned ! = null & & lastReturned . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; <nl> + if ( lastReturned = = null ) <nl> + return false ; <nl> + <nl> + Column firstColumn = isReversed ( ) ? lastColumn ( first . cf ) : firstColumn ( first . cf ) ; <nl> + / / Note : we only return true if the column is the lastReturned * and * it is live . If it is deleted , it is ignored by the <nl> + / / rest of the paging code ( it hasn ' t been counted as live in particular ) and we want to act as if it wasn ' t there . <nl> + return ! first . cf . deletionInfo ( ) . isDeleted ( firstColumn ) <nl> + & & firstColumn . isLive ( timestamp ( ) ) <nl> + & & lastReturned . equals ( firstColumn . name ( ) ) ; <nl> } <nl> <nl> protected boolean recordLast ( Row last ) <nl> { <nl> - lastReturned = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; <nl> + Column lastColumn = isReversed ( ) ? firstColumn ( last . cf ) : lastColumn ( last . cf ) ; <nl> + lastReturned = lastColumn . name ( ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index 58cc52f . . d554a8c 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 300 , 7 + 300 , 14 @ @ public class SchemaLoader <nl> + " k int PRIMARY KEY , " <nl> + " v1 text , " <nl> + " v2 int " <nl> - + " ) " , ks _ cql ) ) ) ; <nl> + + " ) " , ks _ cql ) , <nl> + <nl> + CFMetaData . compile ( " CREATE TABLE table2 ( " <nl> + + " k text , " <nl> + + " c text , " <nl> + + " v text , " <nl> + + " PRIMARY KEY ( k , c ) ) " , ks _ cql ) <nl> + ) ) ; <nl> <nl> <nl> if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . test . compression " , " false " ) ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / service / QueryPagerTest . java b / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> index f395cf4 . . 0645433 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / QueryPagerTest . java <nl> @ @ - 31 , 11 + 31 , 13 @ @ import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . service . pager . * ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> import static org . junit . Assert . * ; <nl> + import static org . apache . cassandra . cql3 . QueryProcessor . processInternal ; <nl> import static org . apache . cassandra . Util . range ; <nl> import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> <nl> @ @ - 143 , 14 + 145 , 25 @ @ public class QueryPagerTest extends SchemaLoader <nl> <nl> private static void assertRow ( Row r , String key , String . . . names ) <nl> { <nl> + ByteBuffer [ ] bbs = new ByteBuffer [ names . length ] ; <nl> + for ( int i = 0 ; i < names . length ; i + + ) <nl> + bbs [ i ] = bytes ( names [ i ] ) ; <nl> + assertRow ( r , key , bbs ) ; <nl> + } <nl> + <nl> + private static void assertRow ( Row r , String key , ByteBuffer . . . names ) <nl> + { <nl> assertEquals ( key , string ( r . key . key ) ) ; <nl> assertNotNull ( r . cf ) ; <nl> - assertEquals ( toString ( r . cf ) , names . length , r . cf . getColumnCount ( ) ) ; <nl> int i = 0 ; <nl> for ( Column c : r . cf ) <nl> { <nl> - String expected = names [ i + + ] ; <nl> - assertEquals ( " column " + i + " doesn ' t match : " + toString ( r . cf ) , expected , string ( c . name ( ) ) ) ; <nl> + / / Ignore deleted cells if we have them <nl> + if ( ! c . isLive ( 0 ) ) <nl> + continue ; <nl> + <nl> + ByteBuffer expected = names [ i + + ] ; <nl> + assertEquals ( " column " + i + " doesn ' t match : " + toString ( r . cf ) , expected , c . name ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 310 , 4 + 323 , 29 @ @ public class QueryPagerTest extends SchemaLoader <nl> <nl> assertTrue ( pager . isExhausted ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void SliceQueryWithTombstoneTest ( ) throws Exception <nl> + { <nl> + / / Testing for the bug of # 6748 <nl> + String keyspace = " cql _ keyspace " ; <nl> + String table = " table2 " ; <nl> + ColumnFamilyStore cfs = Keyspace . open ( keyspace ) . getColumnFamilyStore ( table ) ; <nl> + CompositeType ct = ( CompositeType ) cfs . metadata . comparator ; <nl> + <nl> + / / Insert rows but with a tombstone as last cell <nl> + for ( int i = 0 ; i < 5 ; i + + ) <nl> + processInternal ( String . format ( " INSERT INTO % s . % s ( k , c , v ) VALUES ( ' k % d ' , ' c % d ' , null ) " , keyspace , table , 0 , i ) ) ; <nl> + <nl> + SliceQueryFilter filter = new SliceQueryFilter ( ColumnSlice . ALL _ COLUMNS _ ARRAY , false , 100 ) ; <nl> + QueryPager pager = QueryPagers . localPager ( new SliceFromReadCommand ( keyspace , bytes ( " k0 " ) , table , 0 , filter ) ) ; <nl> + <nl> + for ( int i = 0 ; i < 5 ; i + + ) <nl> + { <nl> + List < Row > page = pager . fetchPage ( 1 ) ; <nl> + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; <nl> + / / The only live cell we should have each time is the row marker <nl> + assertRow ( page . get ( 0 ) , " k0 " , ct . decompose ( " c " + i , " " ) ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> index eab1548 . . d319037 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) <nl> { <nl> - AbstractType < ? > comparator = getNextComparator ( i , bb1 , bb2 ) ; <nl> + AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; <nl> <nl> ByteBuffer value1 = getWithShortLength ( bb1 ) ; <nl> ByteBuffer value2 = getWithShortLength ( bb2 ) ; <nl> @ @ - 117 , 7 + 117 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - getNextComparator ( i + + , bb ) ; <nl> + getComparator ( i + + , bb ) ; <nl> l . add ( getWithShortLength ( bb ) ) ; <nl> bb . get ( ) ; / / skip end - of - component <nl> } <nl> @ @ - 135 , 7 + 135 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> if ( bb . remaining ( ) ! = bytes . remaining ( ) ) <nl> sb . append ( " : " ) ; <nl> <nl> - AbstractType < ? > comparator = getAndAppendNextComparator ( i , bb , sb ) ; <nl> + AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; <nl> ByteBuffer value = getWithShortLength ( bb ) ; <nl> <nl> sb . append ( comparator . getString ( value ) ) ; <nl> @ @ - 172 , 7 + 172 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - AbstractType comparator = getNextComparator ( i , bb ) ; <nl> + AbstractType comparator = getComparator ( i , bb ) ; <nl> ByteBuffer value = getWithShortLength ( bb ) ; <nl> <nl> list . add ( new CompositeComponent ( comparator , value ) ) ; <nl> @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> break ; <nl> } <nl> <nl> - ParsedComparator p = parseNextComparator ( i , part ) ; <nl> + ParsedComparator p = parseComparator ( i , part ) ; <nl> AbstractType < ? > type = p . getAbstractType ( ) ; <nl> part = p . getRemainingPart ( ) ; <nl> <nl> @ @ - 240 , 7 + 240 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> int i = 0 ; <nl> while ( bb . remaining ( ) > 0 ) <nl> { <nl> - AbstractType < ? > comparator = validateNextComparator ( i , bb ) ; <nl> + AbstractType < ? > comparator = validateComparator ( i , bb ) ; <nl> <nl> if ( bb . remaining ( ) < 2 ) <nl> throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; <nl> @ @ - 271 , 11 + 271 , 32 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > <nl> return value ; <nl> } <nl> <nl> - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) ; <nl> - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; <nl> - abstract protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; <nl> - abstract protected ParsedComparator parseNextComparator ( int i , String part ) ; <nl> - abstract protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException ; <nl> + / * * <nl> + * @ return the comparator for the given component . static CompositeType will consult <nl> + * @ param i ; DynamicCompositeType will read the type information from @ param bb <nl> + * / <nl> + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) ; <nl> + <nl> + / * * <nl> + * Adds DynamicCompositeType type information from @ param bb1 to @ param bb2 . <nl> + * @ param i is ignored . <nl> + * / <nl> + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; <nl> + <nl> + / * * <nl> + * Adds type information from @ param bb to @ param sb . @ param i is ignored . <nl> + * / <nl> + abstract protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; <nl> + <nl> + / * * <nl> + * Like getComparator , but validates that @ param i does not exceed the defined range <nl> + * / <nl> + abstract protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException ; <nl> + <nl> + / * * <nl> + * Used by fromString <nl> + * / <nl> + abstract protected ParsedComparator parseComparator ( int i , String part ) ; <nl> <nl> protected static interface ParsedComparator <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> index 2e32725 . . 1b59ae9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java <nl> @ @ - 80 , 27 + 80 , 27 @ @ public class CompositeType extends AbstractCompositeType <nl> this . types = types ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> { <nl> return types . get ( i ) ; <nl> } <nl> <nl> - protected ParsedComparator parseNextComparator ( int i , String part ) <nl> + protected ParsedComparator parseComparator ( int i , String part ) <nl> { <nl> return new StaticParsedComparator ( types . get ( i ) , part ) ; <nl> } <nl> <nl> - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> { <nl> if ( i > = types . size ( ) ) <nl> throw new MarshalException ( " Too many bytes for comparator " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 89116f2 . . e3f4839 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 102 , 12 + 102 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> } <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) <nl> { <nl> return getComparator ( bb ) ; <nl> } <nl> <nl> - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) <nl> { <nl> AbstractType < ? > comp1 = getComparator ( bb1 ) ; <nl> AbstractType < ? > comp2 = getComparator ( bb2 ) ; <nl> @ @ - 135 , 7 + 135 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> return comp1 ; <nl> } <nl> <nl> - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) <nl> { <nl> try <nl> { <nl> @ @ - 162 , 12 + 162 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> } <nl> } <nl> <nl> - protected ParsedComparator parseNextComparator ( int i , String part ) <nl> + protected ParsedComparator parseComparator ( int i , String part ) <nl> { <nl> return new DynamicParsedComparator ( part ) ; <nl> } <nl> <nl> - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException <nl> { <nl> AbstractType < ? > comparator = null ; <nl> if ( bb . remaining ( ) < 2 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index bfcb6a4 . . f3a854c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 22 , 6 + 22 , 7 @ @ 
 * Add static columns to CQL3 ( CASSANDRA - 6561 ) 
 * Optimize single partition batch statements ( CASSANDRA - 6737 ) 
 * Disallow post - query re - ordering when paging ( CASSANDRA - 6722 ) 
 + * Fix potential paging bug with deleted columns ( CASSANDRA - 6748 ) 
 Merged from 1 . 2 : 
 * Catch memtable flush exceptions during shutdown ( CASSANDRA - 6735 ) 
 * Fix broken streams when replacing with same IP ( CASSANDRA - 6622 ) 
 diff - - git a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 index 297a85f . . 1b4bdbd 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 @ @ - 332 , 13 + 332 , 13 @ @ abstract class AbstractQueryPager implements QueryPager 
 return Math . min ( liveCount , toDiscard ) ; 
 } 
 
 - protected static ByteBuffer firstName ( ColumnFamily cf ) 
 + protected static Column firstColumn ( ColumnFamily cf ) 
 { 
 - return cf . iterator ( ) . next ( ) . name ( ) ; 
 + return cf . iterator ( ) . next ( ) ; 
 } 
 
 - protected static ByteBuffer lastName ( ColumnFamily cf ) 
 + protected static Column lastColumn ( ColumnFamily cf ) 
 { 
 - return cf . getReverseSortedColumns ( ) . iterator ( ) . next ( ) . name ( ) ; 
 + return cf . getReverseSortedColumns ( ) . iterator ( ) . next ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 index 1f4ba78 . . 0df1d25 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / RangeSliceQueryPager . java 
 @ @ - 89 , 15 + 89 , 20 @ @ public class RangeSliceQueryPager extends AbstractQueryPager 
 
 protected boolean containsPreviousLast ( Row first ) 
 { 
 - return lastReturnedKey ! = null 
 - & & lastReturnedKey . equals ( first . key ) 
 - & & lastReturnedName . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; 
 + if ( lastReturnedKey = = null | | ! lastReturnedKey . equals ( first . key ) ) 
 + return false ; 
 + 
 + / / Same as SliceQueryPager , we ignore a deleted column 
 + Column firstColumn = isReversed ( ) ? lastColumn ( first . cf ) : firstColumn ( first . cf ) ; 
 + return ! first . cf . deletionInfo ( ) . isDeleted ( firstColumn ) 
 + & & firstColumn . isLive ( timestamp ( ) ) 
 + & & lastReturnedName . equals ( firstColumn . name ( ) ) ; 
 } 
 
 protected boolean recordLast ( Row last ) 
 { 
 lastReturnedKey = last . key ; 
 - lastReturnedName = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; 
 + lastReturnedName = ( isReversed ( ) ? firstColumn ( last . cf ) : lastColumn ( last . cf ) ) . name ( ) ; 
 return true ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 index cd0c069 . . c94f7f6 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / SliceQueryPager . java 
 @ @ - 81 , 12 + 81 , 21 @ @ public class SliceQueryPager extends AbstractQueryPager implements SinglePartiti 
 
 protected boolean containsPreviousLast ( Row first ) 
 { 
 - return lastReturned ! = null & & lastReturned . equals ( isReversed ( ) ? lastName ( first . cf ) : firstName ( first . cf ) ) ; 
 + if ( lastReturned = = null ) 
 + return false ; 
 + 
 + Column firstColumn = isReversed ( ) ? lastColumn ( first . cf ) : firstColumn ( first . cf ) ; 
 + / / Note : we only return true if the column is the lastReturned * and * it is live . If it is deleted , it is ignored by the 
 + / / rest of the paging code ( it hasn ' t been counted as live in particular ) and we want to act as if it wasn ' t there . 
 + return ! first . cf . deletionInfo ( ) . isDeleted ( firstColumn ) 
 + & & firstColumn . isLive ( timestamp ( ) ) 
 + & & lastReturned . equals ( firstColumn . name ( ) ) ; 
 } 
 
 protected boolean recordLast ( Row last ) 
 { 
 - lastReturned = isReversed ( ) ? firstName ( last . cf ) : lastName ( last . cf ) ; 
 + Column lastColumn = isReversed ( ) ? firstColumn ( last . cf ) : lastColumn ( last . cf ) ; 
 + lastReturned = lastColumn . name ( ) ; 
 return true ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index 58cc52f . . d554a8c 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 300 , 7 + 300 , 14 @ @ public class SchemaLoader 
 + " k int PRIMARY KEY , " 
 + " v1 text , " 
 + " v2 int " 
 - + " ) " , ks _ cql ) ) ) ; 
 + + " ) " , ks _ cql ) , 
 + 
 + CFMetaData . compile ( " CREATE TABLE table2 ( " 
 + + " k text , " 
 + + " c text , " 
 + + " v text , " 
 + + " PRIMARY KEY ( k , c ) ) " , ks _ cql ) 
 + ) ) ; 
 
 
 if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . test . compression " , " false " ) ) ) 
 diff - - git a / test / unit / org / apache / cassandra / service / QueryPagerTest . java b / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 index f395cf4 . . 0645433 100644 
 - - - a / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 + + + b / test / unit / org / apache / cassandra / service / QueryPagerTest . java 
 @ @ - 31 , 11 + 31 , 13 @ @ import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . service . pager . * ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 import static org . junit . Assert . * ; 
 + import static org . apache . cassandra . cql3 . QueryProcessor . processInternal ; 
 import static org . apache . cassandra . Util . range ; 
 import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 
 @ @ - 143 , 14 + 145 , 25 @ @ public class QueryPagerTest extends SchemaLoader 
 
 private static void assertRow ( Row r , String key , String . . . names ) 
 { 
 + ByteBuffer [ ] bbs = new ByteBuffer [ names . length ] ; 
 + for ( int i = 0 ; i < names . length ; i + + ) 
 + bbs [ i ] = bytes ( names [ i ] ) ; 
 + assertRow ( r , key , bbs ) ; 
 + } 
 + 
 + private static void assertRow ( Row r , String key , ByteBuffer . . . names ) 
 + { 
 assertEquals ( key , string ( r . key . key ) ) ; 
 assertNotNull ( r . cf ) ; 
 - assertEquals ( toString ( r . cf ) , names . length , r . cf . getColumnCount ( ) ) ; 
 int i = 0 ; 
 for ( Column c : r . cf ) 
 { 
 - String expected = names [ i + + ] ; 
 - assertEquals ( " column " + i + " doesn ' t match : " + toString ( r . cf ) , expected , string ( c . name ( ) ) ) ; 
 + / / Ignore deleted cells if we have them 
 + if ( ! c . isLive ( 0 ) ) 
 + continue ; 
 + 
 + ByteBuffer expected = names [ i + + ] ; 
 + assertEquals ( " column " + i + " doesn ' t match : " + toString ( r . cf ) , expected , c . name ( ) ) ; 
 } 
 } 
 
 @ @ - 310 , 4 + 323 , 29 @ @ public class QueryPagerTest extends SchemaLoader 
 
 assertTrue ( pager . isExhausted ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void SliceQueryWithTombstoneTest ( ) throws Exception 
 + { 
 + / / Testing for the bug of # 6748 
 + String keyspace = " cql _ keyspace " ; 
 + String table = " table2 " ; 
 + ColumnFamilyStore cfs = Keyspace . open ( keyspace ) . getColumnFamilyStore ( table ) ; 
 + CompositeType ct = ( CompositeType ) cfs . metadata . comparator ; 
 + 
 + / / Insert rows but with a tombstone as last cell 
 + for ( int i = 0 ; i < 5 ; i + + ) 
 + processInternal ( String . format ( " INSERT INTO % s . % s ( k , c , v ) VALUES ( ' k % d ' , ' c % d ' , null ) " , keyspace , table , 0 , i ) ) ; 
 + 
 + SliceQueryFilter filter = new SliceQueryFilter ( ColumnSlice . ALL _ COLUMNS _ ARRAY , false , 100 ) ; 
 + QueryPager pager = QueryPagers . localPager ( new SliceFromReadCommand ( keyspace , bytes ( " k0 " ) , table , 0 , filter ) ) ; 
 + 
 + for ( int i = 0 ; i < 5 ; i + + ) 
 + { 
 + List < Row > page = pager . fetchPage ( 1 ) ; 
 + assertEquals ( toString ( page ) , 1 , page . size ( ) ) ; 
 + / / The only live cell we should have each time is the row marker 
 + assertRow ( page . get ( 0 ) , " k0 " , ct . decompose ( " c " + i , " " ) ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 index eab1548 . . d319037 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractCompositeType . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 while ( bb1 . remaining ( ) > 0 & & bb2 . remaining ( ) > 0 ) 
 { 
 - AbstractType < ? > comparator = getNextComparator ( i , bb1 , bb2 ) ; 
 + AbstractType < ? > comparator = getComparator ( i , bb1 , bb2 ) ; 
 
 ByteBuffer value1 = getWithShortLength ( bb1 ) ; 
 ByteBuffer value2 = getWithShortLength ( bb2 ) ; 
 @ @ - 117 , 7 + 117 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - getNextComparator ( i + + , bb ) ; 
 + getComparator ( i + + , bb ) ; 
 l . add ( getWithShortLength ( bb ) ) ; 
 bb . get ( ) ; / / skip end - of - component 
 } 
 @ @ - 135 , 7 + 135 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 if ( bb . remaining ( ) ! = bytes . remaining ( ) ) 
 sb . append ( " : " ) ; 
 
 - AbstractType < ? > comparator = getAndAppendNextComparator ( i , bb , sb ) ; 
 + AbstractType < ? > comparator = getAndAppendComparator ( i , bb , sb ) ; 
 ByteBuffer value = getWithShortLength ( bb ) ; 
 
 sb . append ( comparator . getString ( value ) ) ; 
 @ @ - 172 , 7 + 172 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - AbstractType comparator = getNextComparator ( i , bb ) ; 
 + AbstractType comparator = getComparator ( i , bb ) ; 
 ByteBuffer value = getWithShortLength ( bb ) ; 
 
 list . add ( new CompositeComponent ( comparator , value ) ) ; 
 @ @ - 205 , 7 + 205 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 break ; 
 } 
 
 - ParsedComparator p = parseNextComparator ( i , part ) ; 
 + ParsedComparator p = parseComparator ( i , part ) ; 
 AbstractType < ? > type = p . getAbstractType ( ) ; 
 part = p . getRemainingPart ( ) ; 
 
 @ @ - 240 , 7 + 240 , 7 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 int i = 0 ; 
 while ( bb . remaining ( ) > 0 ) 
 { 
 - AbstractType < ? > comparator = validateNextComparator ( i , bb ) ; 
 + AbstractType < ? > comparator = validateComparator ( i , bb ) ; 
 
 if ( bb . remaining ( ) < 2 ) 
 throw new MarshalException ( " Not enough bytes to read value size of component " + i ) ; 
 @ @ - 271 , 11 + 271 , 32 @ @ public abstract class AbstractCompositeType extends AbstractType < ByteBuffer > 
 return value ; 
 } 
 
 - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) ; 
 - abstract protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; 
 - abstract protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; 
 - abstract protected ParsedComparator parseNextComparator ( int i , String part ) ; 
 - abstract protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException ; 
 + / * * 
 + * @ return the comparator for the given component . static CompositeType will consult 
 + * @ param i ; DynamicCompositeType will read the type information from @ param bb 
 + * / 
 + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) ; 
 + 
 + / * * 
 + * Adds DynamicCompositeType type information from @ param bb1 to @ param bb2 . 
 + * @ param i is ignored . 
 + * / 
 + abstract protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) ; 
 + 
 + / * * 
 + * Adds type information from @ param bb to @ param sb . @ param i is ignored . 
 + * / 
 + abstract protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) ; 
 + 
 + / * * 
 + * Like getComparator , but validates that @ param i does not exceed the defined range 
 + * / 
 + abstract protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException ; 
 + 
 + / * * 
 + * Used by fromString 
 + * / 
 + abstract protected ParsedComparator parseComparator ( int i , String part ) ; 
 
 protected static interface ParsedComparator 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / CompositeType . java b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 index 2e32725 . . 1b59ae9 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / CompositeType . java 
 @ @ - 80 , 27 + 80 , 27 @ @ public class CompositeType extends AbstractCompositeType 
 this . types = types ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 { 
 return types . get ( i ) ; 
 } 
 
 - protected ParsedComparator parseNextComparator ( int i , String part ) 
 + protected ParsedComparator parseComparator ( int i , String part ) 
 { 
 return new StaticParsedComparator ( types . get ( i ) , part ) ; 
 } 
 
 - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException 
 + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException 
 { 
 if ( i > = types . size ( ) ) 
 throw new MarshalException ( " Too many bytes for comparator " ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 89116f2 . . e3f4839 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 102 , 12 + 102 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 } 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb ) 
 { 
 return getComparator ( bb ) ; 
 } 
 
 - protected AbstractType < ? > getNextComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 + protected AbstractType < ? > getComparator ( int i , ByteBuffer bb1 , ByteBuffer bb2 ) 
 { 
 AbstractType < ? > comp1 = getComparator ( bb1 ) ; 
 AbstractType < ? > comp2 = getComparator ( bb2 ) ; 
 @ @ - 135 , 7 + 135 , 7 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 return comp1 ; 
 } 
 
 - protected AbstractType < ? > getAndAppendNextComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 + protected AbstractType < ? > getAndAppendComparator ( int i , ByteBuffer bb , StringBuilder sb ) 
 { 
 try 
 { 
 @ @ - 162 , 12 + 162 , 12 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 } 
 } 
 
 - protected ParsedComparator parseNextComparator ( int i , String part ) 
 + protected ParsedComparator parseComparator ( int i , String part ) 
 { 
 return new DynamicParsedComparator ( part ) ; 
 } 
 
 - protected AbstractType < ? > validateNextComparator ( int i , ByteBuffer bb ) throws MarshalException 
 + protected AbstractType < ? > validateComparator ( int i , ByteBuffer bb ) throws MarshalException 
 { 
 AbstractType < ? > comparator = null ; 
 if ( bb . remaining ( ) < 2 )
