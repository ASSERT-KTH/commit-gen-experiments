BLEU SCORE: 0.07654112967106118

TEST MSG: Allow invalidating permissions and cache time
GENERATED MSG: Allow permissions cache to be set via JMX

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cd29e9d . . 04861f0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 4 <nl> + * Allow invalidating permissions and cache time ( CASSANDRA - 8722 ) <nl> * Log warning when queries that will require ALLOW FILTERING in Cassandra 3 . 0 <nl> are executed ( CASSANDRA - 8418 ) <nl> * Fix cassandra - stress so it respects the CL passed in user mode ( CASSANDRA - 8948 ) <nl> @ @ - 40 , 7 + 41 , 6 @ @ <nl> * Fix Adler32 digest for compressed sstables ( CASSANDRA - 8778 ) <nl> * Add nodetool statushandoff / statusbackup ( CASSANDRA - 8912 ) <nl> Merged from 2 . 0 : <nl> - 2 . 0 . 14 : <nl> * Fix duplicate up / down messages sent to native clients ( CASSANDRA - 7816 ) <nl> * Expose commit log archive status via JMX ( CASSANDRA - 8734 ) <nl> * Provide better exceptions for invalid replication strategy parameters <nl> diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java <nl> index 05e5061 . . dac2af8 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Auth . java <nl> + + + b / src / java / org / apache / cassandra / auth / Auth . java <nl> @ @ - 57 , 10 + 57 , 7 @ @ public class Auth <nl> public static final String USERS _ CF = " users " ; <nl> <nl> / / User - level permissions cache . <nl> - private static final PermissionsCache permissionsCache = new PermissionsCache ( DatabaseDescriptor . getPermissionsValidity ( ) , <nl> - DatabaseDescriptor . getPermissionsUpdateInterval ( ) , <nl> - DatabaseDescriptor . getPermissionsCacheMaxEntries ( ) , <nl> - DatabaseDescriptor . getAuthorizer ( ) ) ; <nl> + private static final PermissionsCache permissionsCache = new PermissionsCache ( DatabaseDescriptor . getAuthorizer ( ) ) ; <nl> <nl> private static final String USERS _ CF _ SCHEMA = String . format ( " CREATE TABLE % s . % s ( " <nl> + " name text , " <nl> diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCache . java b / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> index 9e0dfa9 . . bc96d82 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> + + + b / src / java / org / apache / cassandra / auth / PermissionsCache . java <nl> @ @ - 17 , 9 + 17 , 11 @ @ <nl> * / <nl> package org . apache . cassandra . auth ; <nl> <nl> + import java . lang . management . ManagementFactory ; <nl> import java . util . Set ; <nl> import java . util . concurrent . * ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import com . google . common . cache . CacheBuilder ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> @ @ - 31 , 19 + 33 , 33 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> - public class PermissionsCache <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + public class PermissionsCache implements PermissionsCacheMBean <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( PermissionsCache . class ) ; <nl> <nl> + private final String MBEAN _ NAME = " org . apache . cassandra . auth : type = PermissionsCache " ; <nl> + <nl> private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor ( " PermissionsCacheRefresh " , <nl> Thread . NORM _ PRIORITY ) ; <nl> private final IAuthorizer authorizer ; <nl> - private final LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > cache ; <nl> + private volatile LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > cache ; <nl> <nl> - public PermissionsCache ( int validityPeriod , int updateInterval , int maxEntries , IAuthorizer authorizer ) <nl> + public PermissionsCache ( IAuthorizer authorizer ) <nl> { <nl> this . authorizer = authorizer ; <nl> - this . cache = initCache ( validityPeriod , updateInterval , maxEntries ) ; <nl> + this . cache = initCache ( null ) ; <nl> + try <nl> + { <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> <nl> public Set < Permission > getPermissions ( AuthenticatedUser user , IResource resource ) <nl> @ @ - 61 , 20 + 77 , 46 @ @ public class PermissionsCache <nl> } <nl> } <nl> <nl> - private LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initCache ( int validityPeriod , <nl> - int updateInterval , <nl> - int maxEntries ) <nl> + public void invalidate ( ) <nl> + { <nl> + cache = initCache ( null ) ; <nl> + } <nl> + <nl> + public void setValidity ( int validityPeriod ) <nl> + { <nl> + DatabaseDescriptor . setPermissionsValidity ( validityPeriod ) ; <nl> + cache = initCache ( cache ) ; <nl> + } <nl> + <nl> + public int getValidity ( ) <nl> + { <nl> + return DatabaseDescriptor . getPermissionsValidity ( ) ; <nl> + } <nl> + <nl> + public void setUpdateInterval ( int updateInterval ) <nl> + { <nl> + DatabaseDescriptor . setPermissionsUpdateInterval ( updateInterval ) ; <nl> + cache = initCache ( cache ) ; <nl> + } <nl> + <nl> + public int getUpdateInterval ( ) <nl> + { <nl> + return DatabaseDescriptor . getPermissionsUpdateInterval ( ) ; <nl> + } <nl> + <nl> + private LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initCache ( <nl> + LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > existing ) <nl> { <nl> if ( authorizer instanceof AllowAllAuthorizer ) <nl> return null ; <nl> <nl> - if ( validityPeriod < = 0 ) <nl> + if ( DatabaseDescriptor . getPermissionsValidity ( ) < = 0 ) <nl> return null ; <nl> <nl> - return CacheBuilder . newBuilder ( ) <nl> - . refreshAfterWrite ( updateInterval , TimeUnit . MILLISECONDS ) <nl> - . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) <nl> - . maximumSize ( maxEntries ) <nl> + LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > newcache = CacheBuilder . newBuilder ( ) <nl> + . refreshAfterWrite ( DatabaseDescriptor . getPermissionsUpdateInterval ( ) , TimeUnit . MILLISECONDS ) <nl> + . expireAfterWrite ( DatabaseDescriptor . getPermissionsValidity ( ) , TimeUnit . MILLISECONDS ) <nl> + . maximumSize ( DatabaseDescriptor . getPermissionsCacheMaxEntries ( ) ) <nl> . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) <nl> { <nl> public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) <nl> @ @ - 104 , 5 + 146 , 8 @ @ public class PermissionsCache <nl> return task ; <nl> } <nl> } ) ; <nl> + if ( existing ! = null ) <nl> + newcache . putAll ( existing . asMap ( ) ) ; <nl> + return newcache ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java b / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java <nl> new file mode 100644 <nl> index 0000000 . . d07c98f <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . auth ; <nl> + <nl> + public interface PermissionsCacheMBean <nl> + { <nl> + public void invalidate ( ) ; <nl> + <nl> + public void setValidity ( int validityPeriod ) ; <nl> + <nl> + public int getValidity ( ) ; <nl> + <nl> + public void setUpdateInterval ( int updateInterval ) ; <nl> + <nl> + public int getUpdateInterval ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index c683d7b . . ccd4467 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 42 , 9 + 42 , 9 @ @ public class Config <nl> public String cluster _ name = " Test Cluster " ; <nl> public String authenticator ; <nl> public String authorizer ; <nl> - public int permissions _ validity _ in _ ms = 2000 ; <nl> + public volatile int permissions _ validity _ in _ ms = 2000 ; <nl> public int permissions _ cache _ max _ entries = 1000 ; <nl> - public int permissions _ update _ interval _ in _ ms = - 1 ; <nl> + public volatile int permissions _ update _ interval _ in _ ms = - 1 ; <nl> <nl> / * Hashing strategy Random or OPHF * / <nl> public String partitioner ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 924ab3c . . 4426f20 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 714 , 6 + 714 , 11 @ @ public class DatabaseDescriptor <nl> return conf . permissions _ validity _ in _ ms ; <nl> } <nl> <nl> + public static void setPermissionsValidity ( int timeout ) <nl> + { <nl> + conf . permissions _ validity _ in _ ms = timeout ; <nl> + } <nl> + <nl> public static int getPermissionsCacheMaxEntries ( ) <nl> { <nl> return conf . permissions _ cache _ max _ entries ; <nl> @ @ - 726 , 6 + 731 , 11 @ @ public class DatabaseDescriptor <nl> : conf . permissions _ update _ interval _ in _ ms ; <nl> } <nl> <nl> + public static void setPermissionsUpdateInterval ( int updateInterval ) <nl> + { <nl> + conf . permissions _ update _ interval _ in _ ms = updateInterval ; <nl> + } <nl> + <nl> public static int getThriftFramedTransportSize ( ) <nl> { <nl> return conf . thrift _ framed _ transport _ size _ in _ mb * 1024 * 1024 ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cd29e9d . . 04861f0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 4 
 + * Allow invalidating permissions and cache time ( CASSANDRA - 8722 ) 
 * Log warning when queries that will require ALLOW FILTERING in Cassandra 3 . 0 
 are executed ( CASSANDRA - 8418 ) 
 * Fix cassandra - stress so it respects the CL passed in user mode ( CASSANDRA - 8948 ) 
 @ @ - 40 , 7 + 41 , 6 @ @ 
 * Fix Adler32 digest for compressed sstables ( CASSANDRA - 8778 ) 
 * Add nodetool statushandoff / statusbackup ( CASSANDRA - 8912 ) 
 Merged from 2 . 0 : 
 - 2 . 0 . 14 : 
 * Fix duplicate up / down messages sent to native clients ( CASSANDRA - 7816 ) 
 * Expose commit log archive status via JMX ( CASSANDRA - 8734 ) 
 * Provide better exceptions for invalid replication strategy parameters 
 diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java 
 index 05e5061 . . dac2af8 100644 
 - - - a / src / java / org / apache / cassandra / auth / Auth . java 
 + + + b / src / java / org / apache / cassandra / auth / Auth . java 
 @ @ - 57 , 10 + 57 , 7 @ @ public class Auth 
 public static final String USERS _ CF = " users " ; 
 
 / / User - level permissions cache . 
 - private static final PermissionsCache permissionsCache = new PermissionsCache ( DatabaseDescriptor . getPermissionsValidity ( ) , 
 - DatabaseDescriptor . getPermissionsUpdateInterval ( ) , 
 - DatabaseDescriptor . getPermissionsCacheMaxEntries ( ) , 
 - DatabaseDescriptor . getAuthorizer ( ) ) ; 
 + private static final PermissionsCache permissionsCache = new PermissionsCache ( DatabaseDescriptor . getAuthorizer ( ) ) ; 
 
 private static final String USERS _ CF _ SCHEMA = String . format ( " CREATE TABLE % s . % s ( " 
 + " name text , " 
 diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCache . java b / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 index 9e0dfa9 . . bc96d82 100644 
 - - - a / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 + + + b / src / java / org / apache / cassandra / auth / PermissionsCache . java 
 @ @ - 17 , 9 + 17 , 11 @ @ 
 * / 
 package org . apache . cassandra . auth ; 
 
 + import java . lang . management . ManagementFactory ; 
 import java . util . Set ; 
 import java . util . concurrent . * ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import com . google . common . cache . CacheBuilder ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 @ @ - 31 , 19 + 33 , 33 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 import org . apache . cassandra . utils . Pair ; 
 
 - public class PermissionsCache 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + public class PermissionsCache implements PermissionsCacheMBean 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( PermissionsCache . class ) ; 
 
 + private final String MBEAN _ NAME = " org . apache . cassandra . auth : type = PermissionsCache " ; 
 + 
 private final ThreadPoolExecutor cacheRefreshExecutor = new DebuggableThreadPoolExecutor ( " PermissionsCacheRefresh " , 
 Thread . NORM _ PRIORITY ) ; 
 private final IAuthorizer authorizer ; 
 - private final LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > cache ; 
 + private volatile LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > cache ; 
 
 - public PermissionsCache ( int validityPeriod , int updateInterval , int maxEntries , IAuthorizer authorizer ) 
 + public PermissionsCache ( IAuthorizer authorizer ) 
 { 
 this . authorizer = authorizer ; 
 - this . cache = initCache ( validityPeriod , updateInterval , maxEntries ) ; 
 + this . cache = initCache ( null ) ; 
 + try 
 + { 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbs . registerMBean ( this , new ObjectName ( MBEAN _ NAME ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 
 public Set < Permission > getPermissions ( AuthenticatedUser user , IResource resource ) 
 @ @ - 61 , 20 + 77 , 46 @ @ public class PermissionsCache 
 } 
 } 
 
 - private LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initCache ( int validityPeriod , 
 - int updateInterval , 
 - int maxEntries ) 
 + public void invalidate ( ) 
 + { 
 + cache = initCache ( null ) ; 
 + } 
 + 
 + public void setValidity ( int validityPeriod ) 
 + { 
 + DatabaseDescriptor . setPermissionsValidity ( validityPeriod ) ; 
 + cache = initCache ( cache ) ; 
 + } 
 + 
 + public int getValidity ( ) 
 + { 
 + return DatabaseDescriptor . getPermissionsValidity ( ) ; 
 + } 
 + 
 + public void setUpdateInterval ( int updateInterval ) 
 + { 
 + DatabaseDescriptor . setPermissionsUpdateInterval ( updateInterval ) ; 
 + cache = initCache ( cache ) ; 
 + } 
 + 
 + public int getUpdateInterval ( ) 
 + { 
 + return DatabaseDescriptor . getPermissionsUpdateInterval ( ) ; 
 + } 
 + 
 + private LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > initCache ( 
 + LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > existing ) 
 { 
 if ( authorizer instanceof AllowAllAuthorizer ) 
 return null ; 
 
 - if ( validityPeriod < = 0 ) 
 + if ( DatabaseDescriptor . getPermissionsValidity ( ) < = 0 ) 
 return null ; 
 
 - return CacheBuilder . newBuilder ( ) 
 - . refreshAfterWrite ( updateInterval , TimeUnit . MILLISECONDS ) 
 - . expireAfterWrite ( validityPeriod , TimeUnit . MILLISECONDS ) 
 - . maximumSize ( maxEntries ) 
 + LoadingCache < Pair < AuthenticatedUser , IResource > , Set < Permission > > newcache = CacheBuilder . newBuilder ( ) 
 + . refreshAfterWrite ( DatabaseDescriptor . getPermissionsUpdateInterval ( ) , TimeUnit . MILLISECONDS ) 
 + . expireAfterWrite ( DatabaseDescriptor . getPermissionsValidity ( ) , TimeUnit . MILLISECONDS ) 
 + . maximumSize ( DatabaseDescriptor . getPermissionsCacheMaxEntries ( ) ) 
 . build ( new CacheLoader < Pair < AuthenticatedUser , IResource > , Set < Permission > > ( ) 
 { 
 public Set < Permission > load ( Pair < AuthenticatedUser , IResource > userResource ) 
 @ @ - 104 , 5 + 146 , 8 @ @ public class PermissionsCache 
 return task ; 
 } 
 } ) ; 
 + if ( existing ! = null ) 
 + newcache . putAll ( existing . asMap ( ) ) ; 
 + return newcache ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java b / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java 
 new file mode 100644 
 index 0000000 . . d07c98f 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / auth / PermissionsCacheMBean . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . auth ; 
 + 
 + public interface PermissionsCacheMBean 
 + { 
 + public void invalidate ( ) ; 
 + 
 + public void setValidity ( int validityPeriod ) ; 
 + 
 + public int getValidity ( ) ; 
 + 
 + public void setUpdateInterval ( int updateInterval ) ; 
 + 
 + public int getUpdateInterval ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index c683d7b . . ccd4467 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 42 , 9 + 42 , 9 @ @ public class Config 
 public String cluster _ name = " Test Cluster " ; 
 public String authenticator ; 
 public String authorizer ; 
 - public int permissions _ validity _ in _ ms = 2000 ; 
 + public volatile int permissions _ validity _ in _ ms = 2000 ; 
 public int permissions _ cache _ max _ entries = 1000 ; 
 - public int permissions _ update _ interval _ in _ ms = - 1 ; 
 + public volatile int permissions _ update _ interval _ in _ ms = - 1 ; 
 
 / * Hashing strategy Random or OPHF * / 
 public String partitioner ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 924ab3c . . 4426f20 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 714 , 6 + 714 , 11 @ @ public class DatabaseDescriptor 
 return conf . permissions _ validity _ in _ ms ; 
 } 
 
 + public static void setPermissionsValidity ( int timeout ) 
 + { 
 + conf . permissions _ validity _ in _ ms = timeout ; 
 + } 
 + 
 public static int getPermissionsCacheMaxEntries ( ) 
 { 
 return conf . permissions _ cache _ max _ entries ; 
 @ @ - 726 , 6 + 731 , 11 @ @ public class DatabaseDescriptor 
 : conf . permissions _ update _ interval _ in _ ms ; 
 } 
 
 + public static void setPermissionsUpdateInterval ( int updateInterval ) 
 + { 
 + conf . permissions _ update _ interval _ in _ ms = updateInterval ; 
 + } 
 + 
 public static int getThriftFramedTransportSize ( ) 
 { 
 return conf . thrift _ framed _ transport _ size _ in _ mb * 1024 * 1024 ;

NEAREST DIFF:
ELIMINATEDSENTENCE
