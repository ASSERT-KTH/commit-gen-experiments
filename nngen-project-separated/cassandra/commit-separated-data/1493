BLEU SCORE: 0.024617934274488044

TEST MSG: sum ( ) and avg ( ) functions missing for smallint and tinyint types
GENERATED MSG: clean up more ad - hoc timing message and move to mbeans . add TimedStatsDeque to

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 15796c4 . . 03458b2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 0 - rc3 <nl> + * sum ( ) and avg ( ) functions missing for smallint and tinyint types ( CASSANDRA - 9671 ) <nl> * Revert CASSANDRA - 9542 ( allow native functions in UDA ) ( CASSANDRA - 9771 ) <nl> Merged from 2 . 1 : <nl> * Fix clientutil jar and tests ( CASSANDRA - 9760 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> index 865dfbf . . 1b22da6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java <nl> @ @ - 23 , 12 + 23 , 14 @ @ import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> + import org . apache . cassandra . db . marshal . ByteType ; <nl> import org . apache . cassandra . db . marshal . DecimalType ; <nl> import org . apache . cassandra . db . marshal . DoubleType ; <nl> import org . apache . cassandra . db . marshal . FloatType ; <nl> import org . apache . cassandra . db . marshal . Int32Type ; <nl> import org . apache . cassandra . db . marshal . IntegerType ; <nl> import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . ShortType ; <nl> <nl> / * * <nl> * Factory methods for aggregate functions . <nl> @ @ - 228 , 6 + 230 , 162 @ @ public abstract class AggregateFcts <nl> / * * <nl> * The SUM function for int32 values . <nl> * / <nl> + public static final AggregateFunction sumFunctionForByte = <nl> + new NativeAggregateFunction ( " sum " , ByteType . instance , ByteType . instance ) <nl> + { <nl> + public Aggregate newAggregate ( ) <nl> + { <nl> + return new Aggregate ( ) <nl> + { <nl> + private byte sum ; <nl> + <nl> + public void reset ( ) <nl> + { <nl> + sum = 0 ; <nl> + } <nl> + <nl> + public ByteBuffer compute ( int protocolVersion ) <nl> + { <nl> + return ( ( ByteType ) returnType ( ) ) . decompose ( sum ) ; <nl> + } <nl> + <nl> + public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> + { <nl> + ByteBuffer value = values . get ( 0 ) ; <nl> + <nl> + if ( value = = null ) <nl> + return ; <nl> + <nl> + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; <nl> + sum + = number . byteValue ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * AVG function for int32 values . <nl> + * / <nl> + public static final AggregateFunction avgFunctionForByte = <nl> + new NativeAggregateFunction ( " avg " , ByteType . instance , ByteType . instance ) <nl> + { <nl> + public Aggregate newAggregate ( ) <nl> + { <nl> + return new Aggregate ( ) <nl> + { <nl> + private byte sum ; <nl> + <nl> + private int count ; <nl> + <nl> + public void reset ( ) <nl> + { <nl> + count = 0 ; <nl> + sum = 0 ; <nl> + } <nl> + <nl> + public ByteBuffer compute ( int protocolVersion ) <nl> + { <nl> + int avg = count = = 0 ? 0 : sum / count ; <nl> + <nl> + return ( ( ByteType ) returnType ( ) ) . decompose ( ( byte ) avg ) ; <nl> + } <nl> + <nl> + public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> + { <nl> + ByteBuffer value = values . get ( 0 ) ; <nl> + <nl> + if ( value = = null ) <nl> + return ; <nl> + <nl> + count + + ; <nl> + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; <nl> + sum + = number . byteValue ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * The SUM function for int32 values . <nl> + * / <nl> + public static final AggregateFunction sumFunctionForShort = <nl> + new NativeAggregateFunction ( " sum " , ShortType . instance , ShortType . instance ) <nl> + { <nl> + public Aggregate newAggregate ( ) <nl> + { <nl> + return new Aggregate ( ) <nl> + { <nl> + private short sum ; <nl> + <nl> + public void reset ( ) <nl> + { <nl> + sum = 0 ; <nl> + } <nl> + <nl> + public ByteBuffer compute ( int protocolVersion ) <nl> + { <nl> + return ( ( ShortType ) returnType ( ) ) . decompose ( sum ) ; <nl> + } <nl> + <nl> + public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> + { <nl> + ByteBuffer value = values . get ( 0 ) ; <nl> + <nl> + if ( value = = null ) <nl> + return ; <nl> + <nl> + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; <nl> + sum + = number . shortValue ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * AVG function for int32 values . <nl> + * / <nl> + public static final AggregateFunction avgFunctionForShort = <nl> + new NativeAggregateFunction ( " avg " , ShortType . instance , ShortType . instance ) <nl> + { <nl> + public Aggregate newAggregate ( ) <nl> + { <nl> + return new Aggregate ( ) <nl> + { <nl> + private short sum ; <nl> + <nl> + private int count ; <nl> + <nl> + public void reset ( ) <nl> + { <nl> + count = 0 ; <nl> + sum = 0 ; <nl> + } <nl> + <nl> + public ByteBuffer compute ( int protocolVersion ) <nl> + { <nl> + int avg = count = = 0 ? 0 : sum / count ; <nl> + <nl> + return ( ( ShortType ) returnType ( ) ) . decompose ( ( short ) avg ) ; <nl> + } <nl> + <nl> + public void addInput ( int protocolVersion , List < ByteBuffer > values ) <nl> + { <nl> + ByteBuffer value = values . get ( 0 ) ; <nl> + <nl> + if ( value = = null ) <nl> + return ; <nl> + <nl> + count + + ; <nl> + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; <nl> + sum + = number . shortValue ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * The SUM function for int32 values . <nl> + * / <nl> public static final AggregateFunction sumFunctionForInt32 = <nl> new NativeAggregateFunction ( " sum " , Int32Type . instance , Int32Type . instance ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> index 85f2817 . . e31fc9f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> @ @ - 83 , 12 + 83 , 16 @ @ public abstract class Functions <nl> declare ( AggregateFcts . makeMinFunction ( type . getType ( ) ) ) ; <nl> } <nl> } <nl> + declare ( AggregateFcts . sumFunctionForByte ) ; <nl> + declare ( AggregateFcts . sumFunctionForShort ) ; <nl> declare ( AggregateFcts . sumFunctionForInt32 ) ; <nl> declare ( AggregateFcts . sumFunctionForLong ) ; <nl> declare ( AggregateFcts . sumFunctionForFloat ) ; <nl> declare ( AggregateFcts . sumFunctionForDouble ) ; <nl> declare ( AggregateFcts . sumFunctionForDecimal ) ; <nl> declare ( AggregateFcts . sumFunctionForVarint ) ; <nl> + declare ( AggregateFcts . avgFunctionForByte ) ; <nl> + declare ( AggregateFcts . avgFunctionForShort ) ; <nl> declare ( AggregateFcts . avgFunctionForInt32 ) ; <nl> declare ( AggregateFcts . avgFunctionForLong ) ; <nl> declare ( AggregateFcts . avgFunctionForFloat ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index 7455dbc . . 62461b8 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 42 , 27 + 42 , 46 @ @ public class AggregationTest extends CQLTester <nl> @ Test <nl> public void testFunctions ( ) throws Throwable <nl> { <nl> - createTable ( " CREATE TABLE % s ( a int , b int , c double , d decimal , primary key ( a , b ) ) " ) ; <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c double , d decimal , e smallint , f tinyint , primary key ( a , b ) ) " ) ; <nl> <nl> / / Test with empty table <nl> assertColumnNames ( execute ( " SELECT COUNT ( * ) FROM % s " ) , " count " ) ; <nl> assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 0L ) ) ; <nl> - assertColumnNames ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , <nl> - " system . max ( b ) " , " system . min ( b ) " , " system . sum ( b ) " , " system . avg ( b ) " , " system . max ( c ) " , " system . sum ( c ) " , " system . avg ( c ) " , " system . sum ( d ) " , " system . avg ( d ) " ) ; <nl> - assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , <nl> - row ( null , null , 0 , 0 , null , 0 . 0 , 0 . 0 , new BigDecimal ( " 0 " ) , new BigDecimal ( " 0 " ) ) ) ; <nl> - <nl> - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 1 , 11 . 5 , 11 . 5 ) " ) ; <nl> - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 2 , 9 . 5 , 1 . 5 ) " ) ; <nl> - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 3 , 9 . 0 , 2 . 0 ) " ) ; <nl> - <nl> - assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , <nl> - row ( 3 , 1 , 6 , 2 , 11 . 5 , 30 . 0 , 10 . 0 , new BigDecimal ( " 15 . 0 " ) , new BigDecimal ( " 5 . 0 " ) ) ) ; <nl> + assertColumnNames ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , " + <nl> + " max ( c ) , sum ( c ) , avg ( c ) , " + <nl> + " sum ( d ) , avg ( d ) , " + <nl> + " max ( e ) , min ( e ) , sum ( e ) , avg ( e ) , " + <nl> + " max ( f ) , min ( f ) , sum ( f ) , avg ( f ) FROM % s " ) , <nl> + " system . max ( b ) " , " system . min ( b ) " , " system . sum ( b ) " , " system . avg ( b ) " , <nl> + " system . max ( c ) " , " system . sum ( c ) " , " system . avg ( c ) " , <nl> + " system . sum ( d ) " , " system . avg ( d ) " , <nl> + " system . max ( e ) " , " system . min ( e ) " , " system . sum ( e ) " , " system . avg ( e ) " , <nl> + " system . max ( f ) " , " system . min ( f ) " , " system . sum ( f ) " , " system . avg ( f ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , " + <nl> + " max ( c ) , sum ( c ) , avg ( c ) , " + <nl> + " sum ( d ) , avg ( d ) , " + <nl> + " max ( e ) , min ( e ) , sum ( e ) , avg ( e ) , " + <nl> + " max ( f ) , min ( f ) , sum ( f ) , avg ( f ) FROM % s " ) , <nl> + row ( null , null , 0 , 0 , null , 0 . 0 , 0 . 0 , new BigDecimal ( " 0 " ) , new BigDecimal ( " 0 " ) , <nl> + null , null , ( short ) 0 , ( short ) 0 , <nl> + null , null , ( byte ) 0 , ( byte ) 0 ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 11 . 5 , 11 . 5 , 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 2 , 9 . 5 , 1 . 5 , 2 , 2 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 3 , 9 . 0 , 2 . 0 , 3 , 3 ) " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) , " + <nl> + " max ( e ) , min ( e ) , sum ( e ) , avg ( e ) , " + <nl> + " max ( f ) , min ( f ) , sum ( f ) , avg ( f ) " + <nl> + " FROM % s " ) , <nl> + row ( 3 , 1 , 6 , 2 , 11 . 5 , 30 . 0 , 10 . 0 , new BigDecimal ( " 15 . 0 " ) , new BigDecimal ( " 5 . 0 " ) , <nl> + ( short ) 3 , ( short ) 1 , ( short ) 6 , ( short ) 2 , <nl> + ( byte ) 3 , ( byte ) 1 , ( byte ) 6 , ( byte ) 2 ) ) ; <nl> <nl> execute ( " INSERT INTO % s ( a , b , d ) VALUES ( 1 , 5 , 1 . 0 ) " ) ; <nl> assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 4L ) ) ; <nl> assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 4L ) ) ; <nl> - assertRows ( execute ( " SELECT COUNT ( b ) , count ( c ) FROM % s " ) , row ( 4L , 3L ) ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( b ) , count ( c ) , count ( e ) , count ( f ) FROM % s " ) , row ( 4L , 3L , 3L , 3L ) ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 920edbc . . d26b83a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 54 , 6 + 54 , 7 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . FileUtils ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . TimedStatsDeque ; <nl> <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> @ @ - 88 , 6 + 89 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / * Flag indicates if a compaction is in process * / <nl> private AtomicBoolean isCompacting _ = new AtomicBoolean ( false ) ; <nl> <nl> + private TimedStatsDeque readStats _ = new TimedStatsDeque ( 60000 ) ; <nl> + private TimedStatsDeque diskReadStats _ = new TimedStatsDeque ( 60000 ) ; <nl> + <nl> ColumnFamilyStore ( String table , String columnFamily , boolean isSuper , int indexValue ) throws IOException <nl> { <nl> table _ = table ; <nl> @ @ - 482 , 15 + 486 , 20 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter ) throws IOException <nl> { <nl> + long start = System . currentTimeMillis ( ) ; <nl> List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; <nl> - return resolveAndRemoveDeleted ( columnFamilies ) ; <nl> + ColumnFamily cf = resolveAndRemoveDeleted ( columnFamilies ) ; <nl> + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> + return cf ; <nl> } <nl> <nl> public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter , int gcBefore ) throws IOException <nl> { <nl> + long start = System . currentTimeMillis ( ) ; <nl> List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; <nl> - ColumnFamily cf = ColumnFamily . resolve ( columnFamilies ) ; <nl> - return removeDeleted ( cf , gcBefore ) ; <nl> + ColumnFamily cf = removeDeleted ( ColumnFamily . resolve ( columnFamilies ) , gcBefore ) ; <nl> + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> + return cf ; <nl> } <nl> <nl> / * * <nl> @ @ - 513 , 7 + 522 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> long start = System . currentTimeMillis ( ) ; <nl> getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; <nl> - logger _ . debug ( " DISK TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> } <nl> return columnFamilies ; <nl> } <nl> @ @ - 1457 , 4 + 1466 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> return Collections . unmodifiableSet ( ssTables _ ) ; <nl> } <nl> + <nl> + public int getReadCount ( ) <nl> + { <nl> + return readStats _ . size ( ) ; <nl> + } <nl> + <nl> + public int getReadDiskHits ( ) <nl> + { <nl> + return diskReadStats _ . size ( ) ; <nl> + } <nl> + <nl> + public double getReadLatency ( ) <nl> + { <nl> + return readStats _ . mean ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 94e91c3 . . b39ec502 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 53 , 4 + 53 , 19 @ @ public interface ColumnFamilyStoreMBean <nl> * Triggers an immediate memtable flush . <nl> * / <nl> public void forceFlush ( ) ; <nl> + <nl> + / * * <nl> + * @ return the number of read operations on this column family in the last minute <nl> + * / <nl> + public int getReadCount ( ) ; <nl> + <nl> + / * * <nl> + * @ return the number of read operations on this column family that hit the disk in the last minute <nl> + * / <nl> + public int getReadDiskHits ( ) ; <nl> + <nl> + / * * <nl> + * @ return average latency per read operation in the last minute <nl> + * / <nl> + public double getReadLatency ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> index 1c09767 . . f551d69 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> @ @ - 75 , 10 + 75 , 7 @ @ public class ReadVerbHandler implements IVerbHandler <nl> ReadCommand readCommand = ReadCommand . serializer ( ) . deserialize ( readCtx . bufIn _ ) ; <nl> Table table = Table . open ( readCommand . table ) ; <nl> Row row = null ; <nl> - long start = System . currentTimeMillis ( ) ; <nl> row = readCommand . getRow ( table ) ; <nl> - logger _ . info ( " getRow ( ) TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> - start = System . currentTimeMillis ( ) ; <nl> ReadResponse readResponse = null ; <nl> if ( readCommand . isDigestQuery ( ) ) <nl> { <nl> @ @ - 92 , 28 + 89 , 24 @ @ public class ReadVerbHandler implements IVerbHandler <nl> / * serialize the ReadResponseMessage . * / <nl> readCtx . bufOut _ . reset ( ) ; <nl> <nl> - start = System . currentTimeMillis ( ) ; <nl> ReadResponse . serializer ( ) . serialize ( readResponse , readCtx . bufOut _ ) ; <nl> - logger _ . info ( " serialize TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> <nl> byte [ ] bytes = new byte [ readCtx . bufOut _ . getLength ( ) ] ; <nl> - start = System . currentTimeMillis ( ) ; <nl> System . arraycopy ( readCtx . bufOut _ . getData ( ) , 0 , bytes , 0 , bytes . length ) ; <nl> - logger _ . info ( " copy TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> <nl> - Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; <nl> + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; <nl> + logger _ . debug ( " Read key " + readCommand . key + " ; sending response to " + message . getFrom ( ) ) ; <nl> MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; <nl> - logger _ . info ( " ReadVerbHandler TIME 2 : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> - <nl> + <nl> / * Do read repair if header of the message says so * / <nl> if ( message . getHeader ( ReadCommand . DO _ REPAIR ) ! = null ) <nl> { <nl> doReadRepair ( row , readCommand ) ; <nl> } <nl> } <nl> - catch ( IOException ex ) <nl> + catch ( IOException ex ) <nl> { <nl> - logger _ . info ( LogUtil . throwableToString ( ex ) ) ; <nl> + throw new RuntimeException ( ex ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index cb54bba . . 01b3d05 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . BoundedStatsDeque ; <nl> import org . apache . log4j . Logger ; <nl> <nl> / * * <nl> @ @ - 236 , 22 + 237 , 17 @ @ class ArrivalWindow <nl> { <nl> private static Logger logger _ = Logger . getLogger ( ArrivalWindow . class ) ; <nl> private double tLast _ = 0L ; <nl> - private Deque < Double > arrivalIntervals _ ; <nl> + private BoundedStatsDeque arrivalIntervals _ ; <nl> private int size _ ; <nl> <nl> ArrivalWindow ( int size ) <nl> { <nl> size _ = size ; <nl> - arrivalIntervals _ = new ArrayDeque < Double > ( size ) ; <nl> + arrivalIntervals _ = new BoundedStatsDeque ( size ) ; <nl> } <nl> <nl> synchronized void add ( double value ) <nl> { <nl> - if ( arrivalIntervals _ . size ( ) = = size _ ) <nl> - { <nl> - arrivalIntervals _ . remove ( ) ; <nl> - } <nl> - <nl> double interArrivalTime ; <nl> if ( tLast _ > 0L ) <nl> { <nl> @ @ - 267 , 41 + 263 , 27 @ @ class ArrivalWindow <nl> <nl> synchronized double sum ( ) <nl> { <nl> - double sum = 0d ; <nl> - for ( Double interval : arrivalIntervals _ ) <nl> - { <nl> - sum + = interval ; <nl> - } <nl> - return sum ; <nl> + return arrivalIntervals _ . sum ( ) ; <nl> } <nl> <nl> synchronized double sumOfDeviations ( ) <nl> { <nl> - double sumOfDeviations = 0d ; <nl> - double mean = mean ( ) ; <nl> - <nl> - for ( Double interval : arrivalIntervals _ ) <nl> - { <nl> - double v = interval - mean ; <nl> - sumOfDeviations + = v * v ; <nl> - } <nl> - <nl> - return sumOfDeviations ; <nl> + return arrivalIntervals _ . sumOfDeviations ( ) ; <nl> } <nl> <nl> synchronized double mean ( ) <nl> { <nl> - return sum ( ) / arrivalIntervals _ . size ( ) ; <nl> + return arrivalIntervals _ . mean ( ) ; <nl> } <nl> <nl> synchronized double variance ( ) <nl> - { <nl> - return sumOfDeviations ( ) / ( arrivalIntervals _ . size ( ) ) ; <nl> + { <nl> + return arrivalIntervals _ . variance ( ) ; <nl> } <nl> <nl> - double deviation ( ) <nl> - { <nl> - return Math . sqrt ( variance ( ) ) ; <nl> + double stdev ( ) <nl> + { <nl> + return arrivalIntervals _ . stdev ( ) ; <nl> } <nl> <nl> void clear ( ) <nl> @ @ - 311 , 13 + 293 , 9 @ @ class ArrivalWindow <nl> <nl> double p ( double t ) <nl> { <nl> - / / Stat stat = new Stat ( ) ; <nl> - double mean = mean ( ) ; <nl> - double deviation = deviation ( ) ; <nl> - / * Exponential CDF = 1 - e ^ - lambda * x * / <nl> + double mean = mean ( ) ; <nl> double exponent = ( - 1 ) * ( t ) / mean ; <nl> return 1 - ( 1 - Math . pow ( Math . E , exponent ) ) ; <nl> - / / return stat . gaussianCDF ( mean , deviation , t , Double . POSITIVE _ INFINITY ) ; <nl> } <nl> <nl> double phi ( long tnow ) <nl> @ @ - 335 , 7 + 313 , 7 @ @ class ArrivalWindow <nl> <nl> public String toString ( ) <nl> { <nl> - return StringUtils . join ( arrivalIntervals _ , " " ) ; <nl> + return StringUtils . join ( arrivalIntervals _ . iterator ( ) , " " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> index 45fcc70 . . b76ad64 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> @ @ - 39 , 18 + 39 , 11 @ @ public class MessageDeliveryTask implements Runnable <nl> <nl> public void run ( ) <nl> { <nl> - try <nl> - { <nl> - String verb = message _ . getVerb ( ) ; <nl> - IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; <nl> - if ( verbHandler ! = null ) <nl> - { <nl> - verbHandler . doVerb ( message _ ) ; <nl> - } <nl> - } <nl> - catch ( Throwable th ) <nl> + String verb = message _ . getVerb ( ) ; <nl> + IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; <nl> + if ( verbHandler ! = null ) <nl> { <nl> - logger _ . warn ( LogUtil . throwableToString ( th ) ) ; <nl> + verbHandler . doVerb ( message _ ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index c0b546d . . 00cb7f3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . net . IAsyncResult ; <nl> import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . utils . TimedStatsDeque ; <nl> import org . apache . log4j . Logger ; <nl> <nl> import javax . management . MBeanServer ; <nl> @ @ - 48 , 12 + 49 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static Logger logger = Logger . getLogger ( StorageProxy . class ) ; <nl> <nl> / / mbean stuff <nl> - private static volatile long readLatency ; <nl> - private static volatile int readOperations ; <nl> - private static volatile long rangeLatency ; <nl> - private static volatile int rangeOperations ; <nl> - private static volatile long writeLatency ; <nl> - private static volatile int writeOperations ; <nl> + private static TimedStatsDeque readStats = new TimedStatsDeque ( 60000 ) ; <nl> + private static TimedStatsDeque rangeStats = new TimedStatsDeque ( 60000 ) ; <nl> + private static TimedStatsDeque writeStats = new TimedStatsDeque ( 60000 ) ; <nl> private StorageProxy ( ) { } <nl> static <nl> { <nl> @ @ - 119 , 7 + 117 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> 	 	 	 Map < EndPoint , EndPoint > endpointMap = StorageService . instance ( ) . getNStorageEndPointMap ( rm . key ( ) ) ; <nl> 	 	 	 / / TODO : throw a thrift exception if we do not have N nodes <nl> 	 	 	 Map < EndPoint , Message > messageMap = createWriteMessages ( rm , endpointMap ) ; <nl> - logger . debug ( " insert writing to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; <nl> + logger . debug ( " insert writing key " + rm . key ( ) + " to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; <nl> 	 	 	 for ( Map . Entry < EndPoint , Message > entry : messageMap . entrySet ( ) ) <nl> 	 	 	 { <nl> 	 	 	 	 MessagingService . getMessagingInstance ( ) . sendOneWay ( entry . getValue ( ) , entry . getKey ( ) ) ; <nl> @ @ - 131 , 12 + 129 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( writeOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - writeOperations = 1 ; <nl> - writeLatency = 0 ; <nl> - } <nl> - writeLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> @ @ - 154 , 12 + 147 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> try <nl> { <nl> - IResponseResolver < Boolean > writeResponseResolver = new WriteResponseResolver ( ) ; <nl> QuorumResponseHandler < Boolean > quorumResponseHandler = new QuorumResponseHandler < Boolean > ( <nl> DatabaseDescriptor . getReplicationFactor ( ) , <nl> - writeResponseResolver ) ; <nl> + new WriteResponseResolver ( ) ) ; <nl> EndPoint [ ] endpoints = StorageService . instance ( ) . getNStorageEndPoint ( rm . key ( ) ) ; <nl> - logger . debug ( " insertBlocking writing to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; <nl> + logger . debug ( " insertBlocking writing key " + rm . key ( ) + " to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; <nl> / / TODO : throw a thrift exception if we do not have N nodes <nl> <nl> MessagingService . getMessagingInstance ( ) . sendRR ( message , endpoints , quorumResponseHandler ) ; <nl> @ @ - 173 , 12 + 165 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( writeOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - writeOperations = 1 ; <nl> - writeLatency = 0 ; <nl> - } <nl> - writeLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> @ @ - 346 , 12 + 333 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( readOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - readOperations = 1 ; <nl> - readLatency = 0 ; <nl> - } <nl> - readLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> @ @ - 385 , 12 + 367 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> row = strongRead ( command ) ; <nl> } <nl> <nl> - if ( readOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - readOperations = 1 ; <nl> - readLatency = 0 ; <nl> - } <nl> - readLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> <nl> return row ; <nl> } <nl> @ @ - 702 , 42 + 679 , 37 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( rangeOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - rangeOperations = 1 ; <nl> - rangeLatency = 0 ; <nl> - } <nl> - rangeLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + rangeStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> public double getReadLatency ( ) <nl> { <nl> - return ( ( double ) readLatency ) / readOperations ; <nl> + return readStats . mean ( ) ; <nl> } <nl> <nl> public double getRangeLatency ( ) <nl> { <nl> - return ( ( double ) rangeLatency ) / rangeOperations ; <nl> + return rangeStats . mean ( ) ; <nl> } <nl> <nl> public double getWriteLatency ( ) <nl> { <nl> - return ( ( double ) writeLatency ) / writeOperations ; <nl> + return writeStats . mean ( ) ; <nl> } <nl> <nl> public int getReadOperations ( ) <nl> { <nl> - return readOperations ; <nl> + return readStats . size ( ) ; <nl> } <nl> <nl> public int getRangeOperations ( ) <nl> { <nl> - return rangeOperations ; <nl> + return rangeStats . size ( ) ; <nl> } <nl> <nl> public int getWriteOperations ( ) <nl> { <nl> - return writeOperations ; <nl> + return writeStats . size ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java <nl> new file mode 100644 <nl> index 0000000 . . 16521c0 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . ArrayDeque ; <nl> + <nl> + public abstract class AbstractStatsDeque implements Iterable < Double > <nl> + { <nl> + public abstract Iterator < Double > iterator ( ) ; <nl> + public abstract int size ( ) ; <nl> + public abstract void add ( double o ) ; <nl> + public abstract void clear ( ) ; <nl> + <nl> + / / <nl> + / / statistical methods <nl> + / / <nl> + <nl> + public double sum ( ) <nl> + { <nl> + double sum = 0d ; <nl> + for ( Double interval : this ) <nl> + { <nl> + sum + = interval ; <nl> + } <nl> + return sum ; <nl> + } <nl> + <nl> + public double sumOfDeviations ( ) <nl> + { <nl> + double sumOfDeviations = 0d ; <nl> + double mean = mean ( ) ; <nl> + <nl> + for ( Double interval : this ) <nl> + { <nl> + double v = interval - mean ; <nl> + sumOfDeviations + = v * v ; <nl> + } <nl> + <nl> + return sumOfDeviations ; <nl> + } <nl> + <nl> + public double mean ( ) <nl> + { <nl> + return sum ( ) / size ( ) ; <nl> + } <nl> + <nl> + public double variance ( ) <nl> + { <nl> + return sumOfDeviations ( ) / size ( ) ; <nl> + } <nl> + <nl> + public double stdev ( ) <nl> + { <nl> + return Math . sqrt ( variance ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> new file mode 100644 <nl> index 0000000 . . 80f8af1 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . ArrayDeque ; <nl> + import java . util . Iterator ; <nl> + <nl> + public class BoundedStatsDeque extends AbstractStatsDeque <nl> + { <nl> + private final int size ; <nl> + protected final ArrayDeque < Double > deque ; <nl> + <nl> + public BoundedStatsDeque ( int size ) <nl> + { <nl> + this . size = size ; <nl> + deque = new ArrayDeque < Double > ( size ) ; <nl> + } <nl> + <nl> + public Iterator < Double > iterator ( ) <nl> + { <nl> + return deque . iterator ( ) ; <nl> + } <nl> + <nl> + public int size ( ) <nl> + { <nl> + return deque . size ( ) ; <nl> + } <nl> + <nl> + public void clear ( ) <nl> + { <nl> + deque . clear ( ) ; <nl> + } <nl> + <nl> + public void add ( double o ) <nl> + { <nl> + if ( size = = deque . size ( ) ) <nl> + { <nl> + deque . remove ( ) ; <nl> + } <nl> + deque . add ( o ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / TimedStatsDeque . java b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java <nl> new file mode 100644 <nl> index 0000000 . . 914c459 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . ArrayDeque ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + public class TimedStatsDeque extends AbstractStatsDeque <nl> + { <nl> + private final ArrayDeque < Tuple > deque ; <nl> + private final long period ; <nl> + <nl> + public TimedStatsDeque ( long period ) <nl> + { <nl> + this . period = period ; <nl> + deque = new ArrayDeque < Tuple > ( ) ; <nl> + } <nl> + <nl> + private void purge ( ) <nl> + { <nl> + long now = System . currentTimeMillis ( ) ; <nl> + while ( ! deque . isEmpty ( ) & & deque . peek ( ) . timestamp < now - period ) <nl> + { <nl> + deque . remove ( ) ; <nl> + } <nl> + } <nl> + <nl> + public Iterator < Double > iterator ( ) <nl> + { <nl> + purge ( ) ; <nl> + / / I expect this method to be called relatively infrequently so inefficiency is ok . <nl> + List < Double > L = new ArrayList < Double > ( deque . size ( ) ) ; <nl> + for ( Tuple t : deque ) <nl> + { <nl> + L . add ( t . value ) ; <nl> + } <nl> + return L . iterator ( ) ; <nl> + } <nl> + <nl> + public int size ( ) <nl> + { <nl> + purge ( ) ; <nl> + return deque . size ( ) ; <nl> + } <nl> + <nl> + public void add ( double o ) <nl> + { <nl> + purge ( ) ; <nl> + deque . add ( new Tuple ( o , System . currentTimeMillis ( ) ) ) ; <nl> + } <nl> + <nl> + public void clear ( ) <nl> + { <nl> + deque . clear ( ) ; <nl> + } <nl> + } <nl> + <nl> + class Tuple <nl> + { <nl> + public final double value ; <nl> + public final long timestamp ; <nl> + <nl> + public Tuple ( double value , long timestamp ) <nl> + { <nl> + this . value = value ; <nl> + this . timestamp = timestamp ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 15796c4 . . 03458b2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 0 - rc3 
 + * sum ( ) and avg ( ) functions missing for smallint and tinyint types ( CASSANDRA - 9671 ) 
 * Revert CASSANDRA - 9542 ( allow native functions in UDA ) ( CASSANDRA - 9771 ) 
 Merged from 2 . 1 : 
 * Fix clientutil jar and tests ( CASSANDRA - 9760 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 index 865dfbf . . 1b22da6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / AggregateFcts . java 
 @ @ - 23 , 12 + 23 , 14 @ @ import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 + import org . apache . cassandra . db . marshal . ByteType ; 
 import org . apache . cassandra . db . marshal . DecimalType ; 
 import org . apache . cassandra . db . marshal . DoubleType ; 
 import org . apache . cassandra . db . marshal . FloatType ; 
 import org . apache . cassandra . db . marshal . Int32Type ; 
 import org . apache . cassandra . db . marshal . IntegerType ; 
 import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . ShortType ; 
 
 / * * 
 * Factory methods for aggregate functions . 
 @ @ - 228 , 6 + 230 , 162 @ @ public abstract class AggregateFcts 
 / * * 
 * The SUM function for int32 values . 
 * / 
 + public static final AggregateFunction sumFunctionForByte = 
 + new NativeAggregateFunction ( " sum " , ByteType . instance , ByteType . instance ) 
 + { 
 + public Aggregate newAggregate ( ) 
 + { 
 + return new Aggregate ( ) 
 + { 
 + private byte sum ; 
 + 
 + public void reset ( ) 
 + { 
 + sum = 0 ; 
 + } 
 + 
 + public ByteBuffer compute ( int protocolVersion ) 
 + { 
 + return ( ( ByteType ) returnType ( ) ) . decompose ( sum ) ; 
 + } 
 + 
 + public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 + { 
 + ByteBuffer value = values . get ( 0 ) ; 
 + 
 + if ( value = = null ) 
 + return ; 
 + 
 + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; 
 + sum + = number . byteValue ( ) ; 
 + } 
 + } ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * AVG function for int32 values . 
 + * / 
 + public static final AggregateFunction avgFunctionForByte = 
 + new NativeAggregateFunction ( " avg " , ByteType . instance , ByteType . instance ) 
 + { 
 + public Aggregate newAggregate ( ) 
 + { 
 + return new Aggregate ( ) 
 + { 
 + private byte sum ; 
 + 
 + private int count ; 
 + 
 + public void reset ( ) 
 + { 
 + count = 0 ; 
 + sum = 0 ; 
 + } 
 + 
 + public ByteBuffer compute ( int protocolVersion ) 
 + { 
 + int avg = count = = 0 ? 0 : sum / count ; 
 + 
 + return ( ( ByteType ) returnType ( ) ) . decompose ( ( byte ) avg ) ; 
 + } 
 + 
 + public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 + { 
 + ByteBuffer value = values . get ( 0 ) ; 
 + 
 + if ( value = = null ) 
 + return ; 
 + 
 + count + + ; 
 + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; 
 + sum + = number . byteValue ( ) ; 
 + } 
 + } ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * The SUM function for int32 values . 
 + * / 
 + public static final AggregateFunction sumFunctionForShort = 
 + new NativeAggregateFunction ( " sum " , ShortType . instance , ShortType . instance ) 
 + { 
 + public Aggregate newAggregate ( ) 
 + { 
 + return new Aggregate ( ) 
 + { 
 + private short sum ; 
 + 
 + public void reset ( ) 
 + { 
 + sum = 0 ; 
 + } 
 + 
 + public ByteBuffer compute ( int protocolVersion ) 
 + { 
 + return ( ( ShortType ) returnType ( ) ) . decompose ( sum ) ; 
 + } 
 + 
 + public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 + { 
 + ByteBuffer value = values . get ( 0 ) ; 
 + 
 + if ( value = = null ) 
 + return ; 
 + 
 + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; 
 + sum + = number . shortValue ( ) ; 
 + } 
 + } ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * AVG function for int32 values . 
 + * / 
 + public static final AggregateFunction avgFunctionForShort = 
 + new NativeAggregateFunction ( " avg " , ShortType . instance , ShortType . instance ) 
 + { 
 + public Aggregate newAggregate ( ) 
 + { 
 + return new Aggregate ( ) 
 + { 
 + private short sum ; 
 + 
 + private int count ; 
 + 
 + public void reset ( ) 
 + { 
 + count = 0 ; 
 + sum = 0 ; 
 + } 
 + 
 + public ByteBuffer compute ( int protocolVersion ) 
 + { 
 + int avg = count = = 0 ? 0 : sum / count ; 
 + 
 + return ( ( ShortType ) returnType ( ) ) . decompose ( ( short ) avg ) ; 
 + } 
 + 
 + public void addInput ( int protocolVersion , List < ByteBuffer > values ) 
 + { 
 + ByteBuffer value = values . get ( 0 ) ; 
 + 
 + if ( value = = null ) 
 + return ; 
 + 
 + count + + ; 
 + Number number = ( ( Number ) argTypes ( ) . get ( 0 ) . compose ( value ) ) ; 
 + sum + = number . shortValue ( ) ; 
 + } 
 + } ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * The SUM function for int32 values . 
 + * / 
 public static final AggregateFunction sumFunctionForInt32 = 
 new NativeAggregateFunction ( " sum " , Int32Type . instance , Int32Type . instance ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 index 85f2817 . . e31fc9f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 @ @ - 83 , 12 + 83 , 16 @ @ public abstract class Functions 
 declare ( AggregateFcts . makeMinFunction ( type . getType ( ) ) ) ; 
 } 
 } 
 + declare ( AggregateFcts . sumFunctionForByte ) ; 
 + declare ( AggregateFcts . sumFunctionForShort ) ; 
 declare ( AggregateFcts . sumFunctionForInt32 ) ; 
 declare ( AggregateFcts . sumFunctionForLong ) ; 
 declare ( AggregateFcts . sumFunctionForFloat ) ; 
 declare ( AggregateFcts . sumFunctionForDouble ) ; 
 declare ( AggregateFcts . sumFunctionForDecimal ) ; 
 declare ( AggregateFcts . sumFunctionForVarint ) ; 
 + declare ( AggregateFcts . avgFunctionForByte ) ; 
 + declare ( AggregateFcts . avgFunctionForShort ) ; 
 declare ( AggregateFcts . avgFunctionForInt32 ) ; 
 declare ( AggregateFcts . avgFunctionForLong ) ; 
 declare ( AggregateFcts . avgFunctionForFloat ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index 7455dbc . . 62461b8 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 42 , 27 + 42 , 46 @ @ public class AggregationTest extends CQLTester 
 @ Test 
 public void testFunctions ( ) throws Throwable 
 { 
 - createTable ( " CREATE TABLE % s ( a int , b int , c double , d decimal , primary key ( a , b ) ) " ) ; 
 + createTable ( " CREATE TABLE % s ( a int , b int , c double , d decimal , e smallint , f tinyint , primary key ( a , b ) ) " ) ; 
 
 / / Test with empty table 
 assertColumnNames ( execute ( " SELECT COUNT ( * ) FROM % s " ) , " count " ) ; 
 assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 0L ) ) ; 
 - assertColumnNames ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , 
 - " system . max ( b ) " , " system . min ( b ) " , " system . sum ( b ) " , " system . avg ( b ) " , " system . max ( c ) " , " system . sum ( c ) " , " system . avg ( c ) " , " system . sum ( d ) " , " system . avg ( d ) " ) ; 
 - assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , 
 - row ( null , null , 0 , 0 , null , 0 . 0 , 0 . 0 , new BigDecimal ( " 0 " ) , new BigDecimal ( " 0 " ) ) ) ; 
 - 
 - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 1 , 11 . 5 , 11 . 5 ) " ) ; 
 - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 2 , 9 . 5 , 1 . 5 ) " ) ; 
 - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 3 , 9 . 0 , 2 . 0 ) " ) ; 
 - 
 - assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , 
 - row ( 3 , 1 , 6 , 2 , 11 . 5 , 30 . 0 , 10 . 0 , new BigDecimal ( " 15 . 0 " ) , new BigDecimal ( " 5 . 0 " ) ) ) ; 
 + assertColumnNames ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , " + 
 + " max ( c ) , sum ( c ) , avg ( c ) , " + 
 + " sum ( d ) , avg ( d ) , " + 
 + " max ( e ) , min ( e ) , sum ( e ) , avg ( e ) , " + 
 + " max ( f ) , min ( f ) , sum ( f ) , avg ( f ) FROM % s " ) , 
 + " system . max ( b ) " , " system . min ( b ) " , " system . sum ( b ) " , " system . avg ( b ) " , 
 + " system . max ( c ) " , " system . sum ( c ) " , " system . avg ( c ) " , 
 + " system . sum ( d ) " , " system . avg ( d ) " , 
 + " system . max ( e ) " , " system . min ( e ) " , " system . sum ( e ) " , " system . avg ( e ) " , 
 + " system . max ( f ) " , " system . min ( f ) " , " system . sum ( f ) " , " system . avg ( f ) " ) ; 
 + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , " + 
 + " max ( c ) , sum ( c ) , avg ( c ) , " + 
 + " sum ( d ) , avg ( d ) , " + 
 + " max ( e ) , min ( e ) , sum ( e ) , avg ( e ) , " + 
 + " max ( f ) , min ( f ) , sum ( f ) , avg ( f ) FROM % s " ) , 
 + row ( null , null , 0 , 0 , null , 0 . 0 , 0 . 0 , new BigDecimal ( " 0 " ) , new BigDecimal ( " 0 " ) , 
 + null , null , ( short ) 0 , ( short ) 0 , 
 + null , null , ( byte ) 0 , ( byte ) 0 ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 1 , 11 . 5 , 11 . 5 , 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 2 , 9 . 5 , 1 . 5 , 2 , 2 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c , d , e , f ) VALUES ( 1 , 3 , 9 . 0 , 2 . 0 , 3 , 3 ) " ) ; 
 + 
 + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) , " + 
 + " max ( e ) , min ( e ) , sum ( e ) , avg ( e ) , " + 
 + " max ( f ) , min ( f ) , sum ( f ) , avg ( f ) " + 
 + " FROM % s " ) , 
 + row ( 3 , 1 , 6 , 2 , 11 . 5 , 30 . 0 , 10 . 0 , new BigDecimal ( " 15 . 0 " ) , new BigDecimal ( " 5 . 0 " ) , 
 + ( short ) 3 , ( short ) 1 , ( short ) 6 , ( short ) 2 , 
 + ( byte ) 3 , ( byte ) 1 , ( byte ) 6 , ( byte ) 2 ) ) ; 
 
 execute ( " INSERT INTO % s ( a , b , d ) VALUES ( 1 , 5 , 1 . 0 ) " ) ; 
 assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 4L ) ) ; 
 assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 4L ) ) ; 
 - assertRows ( execute ( " SELECT COUNT ( b ) , count ( c ) FROM % s " ) , row ( 4L , 3L ) ) ; 
 + assertRows ( execute ( " SELECT COUNT ( b ) , count ( c ) , count ( e ) , count ( f ) FROM % s " ) , row ( 4L , 3L , 3L , 3L ) ) ; 
 } 
 
 @ Test

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 920edbc . . d26b83a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 54 , 6 + 54 , 7 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . FileUtils ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . TimedStatsDeque ; 
 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 @ @ - 88 , 6 + 89 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / * Flag indicates if a compaction is in process * / 
 private AtomicBoolean isCompacting _ = new AtomicBoolean ( false ) ; 
 
 + private TimedStatsDeque readStats _ = new TimedStatsDeque ( 60000 ) ; 
 + private TimedStatsDeque diskReadStats _ = new TimedStatsDeque ( 60000 ) ; 
 + 
 ColumnFamilyStore ( String table , String columnFamily , boolean isSuper , int indexValue ) throws IOException 
 { 
 table _ = table ; 
 @ @ - 482 , 15 + 486 , 20 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter ) throws IOException 
 { 
 + long start = System . currentTimeMillis ( ) ; 
 List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; 
 - return resolveAndRemoveDeleted ( columnFamilies ) ; 
 + ColumnFamily cf = resolveAndRemoveDeleted ( columnFamilies ) ; 
 + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 + return cf ; 
 } 
 
 public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter , int gcBefore ) throws IOException 
 { 
 + long start = System . currentTimeMillis ( ) ; 
 List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; 
 - ColumnFamily cf = ColumnFamily . resolve ( columnFamilies ) ; 
 - return removeDeleted ( cf , gcBefore ) ; 
 + ColumnFamily cf = removeDeleted ( ColumnFamily . resolve ( columnFamilies ) , gcBefore ) ; 
 + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 + return cf ; 
 } 
 
 / * * 
 @ @ - 513 , 7 + 522 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 long start = System . currentTimeMillis ( ) ; 
 getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; 
 - logger _ . debug ( " DISK TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 } 
 return columnFamilies ; 
 } 
 @ @ - 1457 , 4 + 1466 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 return Collections . unmodifiableSet ( ssTables _ ) ; 
 } 
 + 
 + public int getReadCount ( ) 
 + { 
 + return readStats _ . size ( ) ; 
 + } 
 + 
 + public int getReadDiskHits ( ) 
 + { 
 + return diskReadStats _ . size ( ) ; 
 + } 
 + 
 + public double getReadLatency ( ) 
 + { 
 + return readStats _ . mean ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 94e91c3 . . b39ec502 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 53 , 4 + 53 , 19 @ @ public interface ColumnFamilyStoreMBean 
 * Triggers an immediate memtable flush . 
 * / 
 public void forceFlush ( ) ; 
 + 
 + / * * 
 + * @ return the number of read operations on this column family in the last minute 
 + * / 
 + public int getReadCount ( ) ; 
 + 
 + / * * 
 + * @ return the number of read operations on this column family that hit the disk in the last minute 
 + * / 
 + public int getReadDiskHits ( ) ; 
 + 
 + / * * 
 + * @ return average latency per read operation in the last minute 
 + * / 
 + public double getReadLatency ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 index 1c09767 . . f551d69 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 @ @ - 75 , 10 + 75 , 7 @ @ public class ReadVerbHandler implements IVerbHandler 
 ReadCommand readCommand = ReadCommand . serializer ( ) . deserialize ( readCtx . bufIn _ ) ; 
 Table table = Table . open ( readCommand . table ) ; 
 Row row = null ; 
 - long start = System . currentTimeMillis ( ) ; 
 row = readCommand . getRow ( table ) ; 
 - logger _ . info ( " getRow ( ) TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 - start = System . currentTimeMillis ( ) ; 
 ReadResponse readResponse = null ; 
 if ( readCommand . isDigestQuery ( ) ) 
 { 
 @ @ - 92 , 28 + 89 , 24 @ @ public class ReadVerbHandler implements IVerbHandler 
 / * serialize the ReadResponseMessage . * / 
 readCtx . bufOut _ . reset ( ) ; 
 
 - start = System . currentTimeMillis ( ) ; 
 ReadResponse . serializer ( ) . serialize ( readResponse , readCtx . bufOut _ ) ; 
 - logger _ . info ( " serialize TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 
 byte [ ] bytes = new byte [ readCtx . bufOut _ . getLength ( ) ] ; 
 - start = System . currentTimeMillis ( ) ; 
 System . arraycopy ( readCtx . bufOut _ . getData ( ) , 0 , bytes , 0 , bytes . length ) ; 
 - logger _ . info ( " copy TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 
 - Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; 
 + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; 
 + logger _ . debug ( " Read key " + readCommand . key + " ; sending response to " + message . getFrom ( ) ) ; 
 MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; 
 - logger _ . info ( " ReadVerbHandler TIME 2 : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 - 
 + 
 / * Do read repair if header of the message says so * / 
 if ( message . getHeader ( ReadCommand . DO _ REPAIR ) ! = null ) 
 { 
 doReadRepair ( row , readCommand ) ; 
 } 
 } 
 - catch ( IOException ex ) 
 + catch ( IOException ex ) 
 { 
 - logger _ . info ( LogUtil . throwableToString ( ex ) ) ; 
 + throw new RuntimeException ( ex ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index cb54bba . . 01b3d05 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . BoundedStatsDeque ; 
 import org . apache . log4j . Logger ; 
 
 / * * 
 @ @ - 236 , 22 + 237 , 17 @ @ class ArrivalWindow 
 { 
 private static Logger logger _ = Logger . getLogger ( ArrivalWindow . class ) ; 
 private double tLast _ = 0L ; 
 - private Deque < Double > arrivalIntervals _ ; 
 + private BoundedStatsDeque arrivalIntervals _ ; 
 private int size _ ; 
 
 ArrivalWindow ( int size ) 
 { 
 size _ = size ; 
 - arrivalIntervals _ = new ArrayDeque < Double > ( size ) ; 
 + arrivalIntervals _ = new BoundedStatsDeque ( size ) ; 
 } 
 
 synchronized void add ( double value ) 
 { 
 - if ( arrivalIntervals _ . size ( ) = = size _ ) 
 - { 
 - arrivalIntervals _ . remove ( ) ; 
 - } 
 - 
 double interArrivalTime ; 
 if ( tLast _ > 0L ) 
 { 
 @ @ - 267 , 41 + 263 , 27 @ @ class ArrivalWindow 
 
 synchronized double sum ( ) 
 { 
 - double sum = 0d ; 
 - for ( Double interval : arrivalIntervals _ ) 
 - { 
 - sum + = interval ; 
 - } 
 - return sum ; 
 + return arrivalIntervals _ . sum ( ) ; 
 } 
 
 synchronized double sumOfDeviations ( ) 
 { 
 - double sumOfDeviations = 0d ; 
 - double mean = mean ( ) ; 
 - 
 - for ( Double interval : arrivalIntervals _ ) 
 - { 
 - double v = interval - mean ; 
 - sumOfDeviations + = v * v ; 
 - } 
 - 
 - return sumOfDeviations ; 
 + return arrivalIntervals _ . sumOfDeviations ( ) ; 
 } 
 
 synchronized double mean ( ) 
 { 
 - return sum ( ) / arrivalIntervals _ . size ( ) ; 
 + return arrivalIntervals _ . mean ( ) ; 
 } 
 
 synchronized double variance ( ) 
 - { 
 - return sumOfDeviations ( ) / ( arrivalIntervals _ . size ( ) ) ; 
 + { 
 + return arrivalIntervals _ . variance ( ) ; 
 } 
 
 - double deviation ( ) 
 - { 
 - return Math . sqrt ( variance ( ) ) ; 
 + double stdev ( ) 
 + { 
 + return arrivalIntervals _ . stdev ( ) ; 
 } 
 
 void clear ( ) 
 @ @ - 311 , 13 + 293 , 9 @ @ class ArrivalWindow 
 
 double p ( double t ) 
 { 
 - / / Stat stat = new Stat ( ) ; 
 - double mean = mean ( ) ; 
 - double deviation = deviation ( ) ; 
 - / * Exponential CDF = 1 - e ^ - lambda * x * / 
 + double mean = mean ( ) ; 
 double exponent = ( - 1 ) * ( t ) / mean ; 
 return 1 - ( 1 - Math . pow ( Math . E , exponent ) ) ; 
 - / / return stat . gaussianCDF ( mean , deviation , t , Double . POSITIVE _ INFINITY ) ; 
 } 
 
 double phi ( long tnow ) 
 @ @ - 335 , 7 + 313 , 7 @ @ class ArrivalWindow 
 
 public String toString ( ) 
 { 
 - return StringUtils . join ( arrivalIntervals _ , " " ) ; 
 + return StringUtils . join ( arrivalIntervals _ . iterator ( ) , " " ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 index 45fcc70 . . b76ad64 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 @ @ - 39 , 18 + 39 , 11 @ @ public class MessageDeliveryTask implements Runnable 
 
 public void run ( ) 
 { 
 - try 
 - { 
 - String verb = message _ . getVerb ( ) ; 
 - IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; 
 - if ( verbHandler ! = null ) 
 - { 
 - verbHandler . doVerb ( message _ ) ; 
 - } 
 - } 
 - catch ( Throwable th ) 
 + String verb = message _ . getVerb ( ) ; 
 + IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; 
 + if ( verbHandler ! = null ) 
 { 
 - logger _ . warn ( LogUtil . throwableToString ( th ) ) ; 
 + verbHandler . doVerb ( message _ ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index c0b546d . . 00cb7f3 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . net . IAsyncResult ; 
 import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . utils . TimedStatsDeque ; 
 import org . apache . log4j . Logger ; 
 
 import javax . management . MBeanServer ; 
 @ @ - 48 , 12 + 49 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 private static Logger logger = Logger . getLogger ( StorageProxy . class ) ; 
 
 / / mbean stuff 
 - private static volatile long readLatency ; 
 - private static volatile int readOperations ; 
 - private static volatile long rangeLatency ; 
 - private static volatile int rangeOperations ; 
 - private static volatile long writeLatency ; 
 - private static volatile int writeOperations ; 
 + private static TimedStatsDeque readStats = new TimedStatsDeque ( 60000 ) ; 
 + private static TimedStatsDeque rangeStats = new TimedStatsDeque ( 60000 ) ; 
 + private static TimedStatsDeque writeStats = new TimedStatsDeque ( 60000 ) ; 
 private StorageProxy ( ) { } 
 static 
 { 
 @ @ - 119 , 7 + 117 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 	 	 	 Map < EndPoint , EndPoint > endpointMap = StorageService . instance ( ) . getNStorageEndPointMap ( rm . key ( ) ) ; 
 	 	 	 / / TODO : throw a thrift exception if we do not have N nodes 
 	 	 	 Map < EndPoint , Message > messageMap = createWriteMessages ( rm , endpointMap ) ; 
 - logger . debug ( " insert writing to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; 
 + logger . debug ( " insert writing key " + rm . key ( ) + " to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; 
 	 	 	 for ( Map . Entry < EndPoint , Message > entry : messageMap . entrySet ( ) ) 
 	 	 	 { 
 	 	 	 	 MessagingService . getMessagingInstance ( ) . sendOneWay ( entry . getValue ( ) , entry . getKey ( ) ) ; 
 @ @ - 131 , 12 + 129 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( writeOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - writeOperations = 1 ; 
 - writeLatency = 0 ; 
 - } 
 - writeLatency + = System . currentTimeMillis ( ) - startTime ; 
 + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 @ @ - 154 , 12 + 147 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 try 
 { 
 - IResponseResolver < Boolean > writeResponseResolver = new WriteResponseResolver ( ) ; 
 QuorumResponseHandler < Boolean > quorumResponseHandler = new QuorumResponseHandler < Boolean > ( 
 DatabaseDescriptor . getReplicationFactor ( ) , 
 - writeResponseResolver ) ; 
 + new WriteResponseResolver ( ) ) ; 
 EndPoint [ ] endpoints = StorageService . instance ( ) . getNStorageEndPoint ( rm . key ( ) ) ; 
 - logger . debug ( " insertBlocking writing to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; 
 + logger . debug ( " insertBlocking writing key " + rm . key ( ) + " to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; 
 / / TODO : throw a thrift exception if we do not have N nodes 
 
 MessagingService . getMessagingInstance ( ) . sendRR ( message , endpoints , quorumResponseHandler ) ; 
 @ @ - 173 , 12 + 165 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( writeOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - writeOperations = 1 ; 
 - writeLatency = 0 ; 
 - } 
 - writeLatency + = System . currentTimeMillis ( ) - startTime ; 
 + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 @ @ - 346 , 12 + 333 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( readOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - readOperations = 1 ; 
 - readLatency = 0 ; 
 - } 
 - readLatency + = System . currentTimeMillis ( ) - startTime ; 
 + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 @ @ - 385 , 12 + 367 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 row = strongRead ( command ) ; 
 } 
 
 - if ( readOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - readOperations = 1 ; 
 - readLatency = 0 ; 
 - } 
 - readLatency + = System . currentTimeMillis ( ) - startTime ; 
 + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 
 return row ; 
 } 
 @ @ - 702 , 42 + 679 , 37 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( rangeOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - rangeOperations = 1 ; 
 - rangeLatency = 0 ; 
 - } 
 - rangeLatency + = System . currentTimeMillis ( ) - startTime ; 
 + rangeStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 public double getReadLatency ( ) 
 { 
 - return ( ( double ) readLatency ) / readOperations ; 
 + return readStats . mean ( ) ; 
 } 
 
 public double getRangeLatency ( ) 
 { 
 - return ( ( double ) rangeLatency ) / rangeOperations ; 
 + return rangeStats . mean ( ) ; 
 } 
 
 public double getWriteLatency ( ) 
 { 
 - return ( ( double ) writeLatency ) / writeOperations ; 
 + return writeStats . mean ( ) ; 
 } 
 
 public int getReadOperations ( ) 
 { 
 - return readOperations ; 
 + return readStats . size ( ) ; 
 } 
 
 public int getRangeOperations ( ) 
 { 
 - return rangeOperations ; 
 + return rangeStats . size ( ) ; 
 } 
 
 public int getWriteOperations ( ) 
 { 
 - return writeOperations ; 
 + return writeStats . size ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java 
 new file mode 100644 
 index 0000000 . . 16521c0 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . ArrayDeque ; 
 + 
 + public abstract class AbstractStatsDeque implements Iterable < Double > 
 + { 
 + public abstract Iterator < Double > iterator ( ) ; 
 + public abstract int size ( ) ; 
 + public abstract void add ( double o ) ; 
 + public abstract void clear ( ) ; 
 + 
 + / / 
 + / / statistical methods 
 + / / 
 + 
 + public double sum ( ) 
 + { 
 + double sum = 0d ; 
 + for ( Double interval : this ) 
 + { 
 + sum + = interval ; 
 + } 
 + return sum ; 
 + } 
 + 
 + public double sumOfDeviations ( ) 
 + { 
 + double sumOfDeviations = 0d ; 
 + double mean = mean ( ) ; 
 + 
 + for ( Double interval : this ) 
 + { 
 + double v = interval - mean ; 
 + sumOfDeviations + = v * v ; 
 + } 
 + 
 + return sumOfDeviations ; 
 + } 
 + 
 + public double mean ( ) 
 + { 
 + return sum ( ) / size ( ) ; 
 + } 
 + 
 + public double variance ( ) 
 + { 
 + return sumOfDeviations ( ) / size ( ) ; 
 + } 
 + 
 + public double stdev ( ) 
 + { 
 + return Math . sqrt ( variance ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 new file mode 100644 
 index 0000000 . . 80f8af1 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . ArrayDeque ; 
 + import java . util . Iterator ; 
 + 
 + public class BoundedStatsDeque extends AbstractStatsDeque 
 + { 
 + private final int size ; 
 + protected final ArrayDeque < Double > deque ; 
 + 
 + public BoundedStatsDeque ( int size ) 
 + { 
 + this . size = size ; 
 + deque = new ArrayDeque < Double > ( size ) ; 
 + } 
 + 
 + public Iterator < Double > iterator ( ) 
 + { 
 + return deque . iterator ( ) ; 
 + } 
 + 
 + public int size ( ) 
 + { 
 + return deque . size ( ) ; 
 + } 
 + 
 + public void clear ( ) 
 + { 
 + deque . clear ( ) ; 
 + } 
 + 
 + public void add ( double o ) 
 + { 
 + if ( size = = deque . size ( ) ) 
 + { 
 + deque . remove ( ) ; 
 + } 
 + deque . add ( o ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / TimedStatsDeque . java b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java 
 new file mode 100644 
 index 0000000 . . 914c459 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . ArrayDeque ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + public class TimedStatsDeque extends AbstractStatsDeque 
 + { 
 + private final ArrayDeque < Tuple > deque ; 
 + private final long period ; 
 + 
 + public TimedStatsDeque ( long period ) 
 + { 
 + this . period = period ; 
 + deque = new ArrayDeque < Tuple > ( ) ; 
 + } 
 + 
 + private void purge ( ) 
 + { 
 + long now = System . currentTimeMillis ( ) ; 
 + while ( ! deque . isEmpty ( ) & & deque . peek ( ) . timestamp < now - period ) 
 + { 
 + deque . remove ( ) ; 
 + } 
 + } 
 + 
 + public Iterator < Double > iterator ( ) 
 + { 
 + purge ( ) ; 
 + / / I expect this method to be called relatively infrequently so inefficiency is ok . 
 + List < Double > L = new ArrayList < Double > ( deque . size ( ) ) ; 
 + for ( Tuple t : deque ) 
 + { 
 + L . add ( t . value ) ; 
 + } 
 + return L . iterator ( ) ; 
 + } 
 + 
 + public int size ( ) 
 + { 
 + purge ( ) ; 
 + return deque . size ( ) ; 
 + } 
 + 
 + public void add ( double o ) 
 + { 
 + purge ( ) ; 
 + deque . add ( new Tuple ( o , System . currentTimeMillis ( ) ) ) ; 
 + } 
 + 
 + public void clear ( ) 
 + { 
 + deque . clear ( ) ; 
 + } 
 + } 
 + 
 + class Tuple 
 + { 
 + public final double value ; 
 + public final long timestamp ; 
 + 
 + public Tuple ( double value , long timestamp ) 
 + { 
 + this . value = value ; 
 + this . timestamp = timestamp ; 
 + } 
 + } 
 \ No newline at end of file
