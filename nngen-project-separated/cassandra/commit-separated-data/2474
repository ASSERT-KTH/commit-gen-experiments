BLEU SCORE: 0.02383853510228548

TEST MSG: Fix repair hang when given CF does not exist
GENERATED MSG: Expose 2I to the rest of nodetool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e307843 . . 58c6277 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 8 , 6 + 8 , 7 @ @ <nl> * Cleanup and optimize collation and slice iterators ( CASSANDRA - 7107 ) <nl> * Upgrade NBHM lib ( CASSANDRA - 7128 ) <nl> * Optimize netty server ( CASSANDRA - 6861 ) <nl> + * Fix repair hang when given CF does not exist ( CASSANDRA - 7189 ) <nl> Merged from 2 . 0 : <nl> * Correctly delete scheduled range xfers ( CASSANDRA - 7143 ) <nl> * Make batchlog replica selection rack - aware ( CASSANDRA - 6551 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index f1e853a . . 68257bb 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2444 , 6 + 2444 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> * @ param autoAddIndexes Automatically add secondary indexes if a CF has them <nl> * @ param keyspaceName keyspace <nl> * @ param cfNames CFs <nl> + * @ throws java . lang . IllegalArgumentException when given CF name does not exist <nl> * / <nl> public Iterable < ColumnFamilyStore > getValidColumnFamilies ( boolean allowIndexes , boolean autoAddIndexes , String keyspaceName , String . . . cfNames ) throws IOException <nl> { <nl> @ @ - 2490 , 12 + 2491 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> <nl> ColumnFamilyStore cfStore = keyspace . getColumnFamilyStore ( baseCfName ) ; <nl> - if ( cfStore = = null ) <nl> - { <nl> - / / this means there was a cf passed in that is not recognized in the keyspace . report it and continue . <nl> - logger . warn ( String . format ( " Invalid column family specified : % s . Proceeding with others . " , baseCfName ) ) ; <nl> - continue ; <nl> - } <nl> if ( idxName ! = null ) <nl> { <nl> Collection < SecondaryIndex > indexes = cfStore . indexManager . getIndexesByNames ( new HashSet < > ( Arrays . asList ( cfName ) ) ) ; <nl> @ @ - 2673 , 14 + 2668 , 22 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> catch ( IllegalArgumentException e ) <nl> { <nl> logger . error ( " Repair failed : " , e ) ; <nl> - sendNotification ( " repair " , message , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; <nl> + sendNotification ( " repair " , e . getMessage ( ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; <nl> return ; <nl> } <nl> } <nl> <nl> + / / Validate columnfamilies <nl> List < ColumnFamilyStore > columnFamilyStores = new ArrayList < > ( ) ; <nl> - for ( ColumnFamilyStore cfs : getValidColumnFamilies ( false , false , keyspace , columnFamilies ) ) <nl> - columnFamilyStores . add ( cfs ) ; <nl> + try <nl> + { <nl> + Iterables . addAll ( columnFamilyStores , getValidColumnFamilies ( false , false , keyspace , columnFamilies ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + sendNotification ( " repair " , e . getMessage ( ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; <nl> + return ; <nl> + } <nl> <nl> UUID parentSession = null ; <nl> if ( ! fullRepair ) <nl> @ @ - 2699 , 7 + 2702 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> List < RepairFuture > futures = new ArrayList < > ( ranges . size ( ) ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> - RepairFuture future = forceKeyspaceRepair ( parentSession , range , keyspace , isSequential , rangeToNeighbors . get ( range ) , columnFamilies ) ; <nl> + RepairFuture future = ActiveRepairService . instance . submitRepairSession ( parentSession , range , keyspace , isSequential , rangeToNeighbors . get ( range ) , columnFamilies ) ; <nl> if ( future = = null ) <nl> continue ; <nl> futures . add ( future ) ; <nl> @ @ - 2745 , 29 + 2748 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } , null ) ; <nl> } <nl> <nl> - <nl> - public RepairFuture forceKeyspaceRepair ( UUID parentRepairSession , <nl> - Range < Token > range , <nl> - String keyspaceName , <nl> - boolean isSequential , <nl> - Set < InetAddress > endpoints , <nl> - String . . . columnFamilies ) throws IOException <nl> - { <nl> - ArrayList < String > names = new ArrayList < > ( ) ; <nl> - for ( ColumnFamilyStore cfStore : getValidColumnFamilies ( false , false , keyspaceName , columnFamilies ) ) <nl> - { <nl> - names . add ( cfStore . name ) ; <nl> - } <nl> - <nl> - if ( names . isEmpty ( ) ) <nl> - { <nl> - logger . info ( " No column family to repair for keyspace { } " , keyspaceName ) ; <nl> - return null ; <nl> - } <nl> - <nl> - return ActiveRepairService . instance . submitRepairSession ( parentRepairSession , range , keyspaceName , isSequential , endpoints , names . toArray ( new String [ names . size ( ) ] ) ) ; <nl> - } <nl> - <nl> public void forceTerminateAllRepairSessions ( ) { <nl> ActiveRepairService . instance . terminateSessions ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / examples / hadoop _ word _ count / src / WordCount . java b / examples / hadoop _ word _ count / src / WordCount . java <nl> index a0ad913 . . 398a7cb 100644 <nl> - - - a / examples / hadoop _ word _ count / src / WordCount . java <nl> + + + b / examples / hadoop _ word _ count / src / WordCount . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import org . apache . cassandra . hadoop . ColumnFamilyOutputFormat ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . db . IColumn ; <nl> + import org . apache . cassandra . db . Column ; <nl> import org . apache . cassandra . hadoop . ColumnFamilyInputFormat ; <nl> import org . apache . cassandra . hadoop . ConfigHelper ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class WordCount extends Configured implements Tool <nl> System . exit ( 0 ) ; <nl> } <nl> <nl> - public static class TokenizerMapper extends Mapper < ByteBuffer , SortedMap < ByteBuffer , IColumn > , Text , IntWritable > <nl> + public static class TokenizerMapper extends Mapper < ByteBuffer , SortedMap < ByteBuffer , Column > , Text , IntWritable > <nl> { <nl> private final static IntWritable one = new IntWritable ( 1 ) ; <nl> private Text word = new Text ( ) ; <nl> @ @ - 81 , 9 + 81 , 9 @ @ public class WordCount extends Configured implements Tool <nl> { <nl> } <nl> <nl> - public void map ( ByteBuffer key , SortedMap < ByteBuffer , IColumn > columns , Context context ) throws IOException , InterruptedException <nl> + public void map ( ByteBuffer key , SortedMap < ByteBuffer , Column > columns , Context context ) throws IOException , InterruptedException <nl> { <nl> - for ( IColumn column : columns . values ( ) ) <nl> + for ( Column column : columns . values ( ) ) <nl> { <nl> String name = ByteBufferUtil . string ( column . name ( ) ) ; <nl> String value = null ; <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class WordCount extends Configured implements Tool <nl> <nl> private static Mutation getMutation ( Text word , int sum ) <nl> { <nl> - Column c = new Column ( ) ; <nl> + org . apache . cassandra . thrift . Column c = new org . apache . cassandra . thrift . Column ( ) ; <nl> c . setName ( Arrays . copyOf ( word . getBytes ( ) , word . getLength ( ) ) ) ; <nl> c . setValue ( ByteBufferUtil . bytes ( sum ) ) ; <nl> c . setTimestamp ( System . currentTimeMillis ( ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e307843 . . 58c6277 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 8 , 6 + 8 , 7 @ @ 
 * Cleanup and optimize collation and slice iterators ( CASSANDRA - 7107 ) 
 * Upgrade NBHM lib ( CASSANDRA - 7128 ) 
 * Optimize netty server ( CASSANDRA - 6861 ) 
 + * Fix repair hang when given CF does not exist ( CASSANDRA - 7189 ) 
 Merged from 2 . 0 : 
 * Correctly delete scheduled range xfers ( CASSANDRA - 7143 ) 
 * Make batchlog replica selection rack - aware ( CASSANDRA - 6551 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index f1e853a . . 68257bb 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2444 , 6 + 2444 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 * @ param autoAddIndexes Automatically add secondary indexes if a CF has them 
 * @ param keyspaceName keyspace 
 * @ param cfNames CFs 
 + * @ throws java . lang . IllegalArgumentException when given CF name does not exist 
 * / 
 public Iterable < ColumnFamilyStore > getValidColumnFamilies ( boolean allowIndexes , boolean autoAddIndexes , String keyspaceName , String . . . cfNames ) throws IOException 
 { 
 @ @ - 2490 , 12 + 2491 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 
 ColumnFamilyStore cfStore = keyspace . getColumnFamilyStore ( baseCfName ) ; 
 - if ( cfStore = = null ) 
 - { 
 - / / this means there was a cf passed in that is not recognized in the keyspace . report it and continue . 
 - logger . warn ( String . format ( " Invalid column family specified : % s . Proceeding with others . " , baseCfName ) ) ; 
 - continue ; 
 - } 
 if ( idxName ! = null ) 
 { 
 Collection < SecondaryIndex > indexes = cfStore . indexManager . getIndexesByNames ( new HashSet < > ( Arrays . asList ( cfName ) ) ) ; 
 @ @ - 2673 , 14 + 2668 , 22 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 catch ( IllegalArgumentException e ) 
 { 
 logger . error ( " Repair failed : " , e ) ; 
 - sendNotification ( " repair " , message , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; 
 + sendNotification ( " repair " , e . getMessage ( ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; 
 return ; 
 } 
 } 
 
 + / / Validate columnfamilies 
 List < ColumnFamilyStore > columnFamilyStores = new ArrayList < > ( ) ; 
 - for ( ColumnFamilyStore cfs : getValidColumnFamilies ( false , false , keyspace , columnFamilies ) ) 
 - columnFamilyStores . add ( cfs ) ; 
 + try 
 + { 
 + Iterables . addAll ( columnFamilyStores , getValidColumnFamilies ( false , false , keyspace , columnFamilies ) ) ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + sendNotification ( " repair " , e . getMessage ( ) , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; 
 + return ; 
 + } 
 
 UUID parentSession = null ; 
 if ( ! fullRepair ) 
 @ @ - 2699 , 7 + 2702 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 List < RepairFuture > futures = new ArrayList < > ( ranges . size ( ) ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 - RepairFuture future = forceKeyspaceRepair ( parentSession , range , keyspace , isSequential , rangeToNeighbors . get ( range ) , columnFamilies ) ; 
 + RepairFuture future = ActiveRepairService . instance . submitRepairSession ( parentSession , range , keyspace , isSequential , rangeToNeighbors . get ( range ) , columnFamilies ) ; 
 if ( future = = null ) 
 continue ; 
 futures . add ( future ) ; 
 @ @ - 2745 , 29 + 2748 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } , null ) ; 
 } 
 
 - 
 - public RepairFuture forceKeyspaceRepair ( UUID parentRepairSession , 
 - Range < Token > range , 
 - String keyspaceName , 
 - boolean isSequential , 
 - Set < InetAddress > endpoints , 
 - String . . . columnFamilies ) throws IOException 
 - { 
 - ArrayList < String > names = new ArrayList < > ( ) ; 
 - for ( ColumnFamilyStore cfStore : getValidColumnFamilies ( false , false , keyspaceName , columnFamilies ) ) 
 - { 
 - names . add ( cfStore . name ) ; 
 - } 
 - 
 - if ( names . isEmpty ( ) ) 
 - { 
 - logger . info ( " No column family to repair for keyspace { } " , keyspaceName ) ; 
 - return null ; 
 - } 
 - 
 - return ActiveRepairService . instance . submitRepairSession ( parentRepairSession , range , keyspaceName , isSequential , endpoints , names . toArray ( new String [ names . size ( ) ] ) ) ; 
 - } 
 - 
 public void forceTerminateAllRepairSessions ( ) { 
 ActiveRepairService . instance . terminateSessions ( ) ; 
 }

NEAREST DIFF:
diff - - git a / examples / hadoop _ word _ count / src / WordCount . java b / examples / hadoop _ word _ count / src / WordCount . java 
 index a0ad913 . . 398a7cb 100644 
 - - - a / examples / hadoop _ word _ count / src / WordCount . java 
 + + + b / examples / hadoop _ word _ count / src / WordCount . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import org . apache . cassandra . hadoop . ColumnFamilyOutputFormat ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . db . IColumn ; 
 + import org . apache . cassandra . db . Column ; 
 import org . apache . cassandra . hadoop . ColumnFamilyInputFormat ; 
 import org . apache . cassandra . hadoop . ConfigHelper ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 70 , 7 + 70 , 7 @ @ public class WordCount extends Configured implements Tool 
 System . exit ( 0 ) ; 
 } 
 
 - public static class TokenizerMapper extends Mapper < ByteBuffer , SortedMap < ByteBuffer , IColumn > , Text , IntWritable > 
 + public static class TokenizerMapper extends Mapper < ByteBuffer , SortedMap < ByteBuffer , Column > , Text , IntWritable > 
 { 
 private final static IntWritable one = new IntWritable ( 1 ) ; 
 private Text word = new Text ( ) ; 
 @ @ - 81 , 9 + 81 , 9 @ @ public class WordCount extends Configured implements Tool 
 { 
 } 
 
 - public void map ( ByteBuffer key , SortedMap < ByteBuffer , IColumn > columns , Context context ) throws IOException , InterruptedException 
 + public void map ( ByteBuffer key , SortedMap < ByteBuffer , Column > columns , Context context ) throws IOException , InterruptedException 
 { 
 - for ( IColumn column : columns . values ( ) ) 
 + for ( Column column : columns . values ( ) ) 
 { 
 String name = ByteBufferUtil . string ( column . name ( ) ) ; 
 String value = null ; 
 @ @ - 137 , 7 + 137 , 7 @ @ public class WordCount extends Configured implements Tool 
 
 private static Mutation getMutation ( Text word , int sum ) 
 { 
 - Column c = new Column ( ) ; 
 + org . apache . cassandra . thrift . Column c = new org . apache . cassandra . thrift . Column ( ) ; 
 c . setName ( Arrays . copyOf ( word . getBytes ( ) , word . getLength ( ) ) ) ; 
 c . setValue ( ByteBufferUtil . bytes ( sum ) ) ; 
 c . setTimestamp ( System . currentTimeMillis ( ) ) ;
