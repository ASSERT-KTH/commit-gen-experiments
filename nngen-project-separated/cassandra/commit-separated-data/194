BLEU SCORE: 0.317023313852343

TEST MSG: Use the correct digest file and reload sstable metadata in nodetool verify
GENERATED MSG: Deserialize sstable metadata in nodetool verify

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4e8f2ac . . f42f3f4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 16 <nl> + * Use the correct digest file and reload sstable metadata in nodetool verify ( CASSANDRA - 14217 ) <nl> * Handle failure when mutating repaired status in Verifier ( CASSANDRA - 13933 ) <nl> * Close socket on error during connect on OutboundTcpConnection ( CASSANDRA - 9630 ) <nl> * Set encoding for javadoc generation ( CASSANDRA - 14154 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Verifier . java b / src / java / org / apache / cassandra / db / compaction / Verifier . java <nl> index 86bc377 . . 586c754 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Verifier . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Verifier . java <nl> @ @ - 259 , 6 + 259 , 8 @ @ public class Verifier implements Closeable <nl> try <nl> { <nl> sstable . descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( sstable . descriptor , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; <nl> + sstable . reloadSSTableMetadata ( ) ; <nl> + cfs . getTracker ( ) . notifySSTableRepairedStatusChanged ( Collections . singleton ( sstable ) ) ; <nl> } <nl> catch ( IOException ioe ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java <nl> index 0a89d74 . . cbf5753 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java <nl> @ @ - 110 , 7 + 110 , 7 @ @ public class DataIntegrityMetadata <nl> { <nl> this . descriptor = descriptor ; <nl> checksum = descriptor . version . uncompressedChecksumType ( ) . newInstance ( ) ; <nl> - digestReader = RandomAccessReader . open ( new File ( descriptor . filenameFor ( Component . digestFor ( descriptor . version . uncompressedChecksumType ( ) ) ) ) ) ; <nl> + digestReader = RandomAccessReader . open ( new File ( descriptor . filenameFor ( descriptor . digestComponent ) ) ) ; <nl> dataReader = RandomAccessReader . open ( new File ( descriptor . filenameFor ( Component . DATA ) ) ) ; <nl> try <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / VerifyTest . java b / test / unit / org / apache / cassandra / db / VerifyTest . java <nl> index fc87520 . . 0748270 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / VerifyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / VerifyTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . UpdateBuilder ; <nl> + import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . Verifier ; <nl> import org . apache . cassandra . db . marshal . UUIDType ; <nl> @ @ - 44 , 9 + 45 , 14 @ @ import org . junit . runner . RunWith ; <nl> <nl> import java . io . * ; <nl> import java . nio . file . Files ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . concurrent . ExecutionException ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . CheckedInputStream ; <nl> <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> @ RunWith ( OrderedJUnit4ClassRunner . class ) <nl> @ @ - 368 , 6 + 374 , 39 @ @ public class VerifyTest <nl> } <nl> } <nl> <nl> + @ Test <nl> + public void testMutateRepair ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + CompactionManager . instance . disableAutoCompaction ( ) ; <nl> + Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CORRUPT _ CF2 ) ; <nl> + <nl> + fillCF ( cfs , 2 ) ; <nl> + <nl> + SSTableReader sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> + sstable . descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( sstable . descriptor , 1 ) ; <nl> + sstable . reloadSSTableMetadata ( ) ; <nl> + cfs . getTracker ( ) . notifySSTableRepairedStatusChanged ( Collections . singleton ( sstable ) ) ; <nl> + assertTrue ( sstable . isRepaired ( ) ) ; <nl> + cfs . forceMajorCompaction ( ) ; <nl> + <nl> + sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> + Long correctChecksum ; <nl> + try ( RandomAccessFile file = new RandomAccessFile ( sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) , " rw " ) ) <nl> + { <nl> + correctChecksum = Long . parseLong ( file . readLine ( ) ) ; <nl> + } <nl> + writeChecksum ( + + correctChecksum , sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) ) ; <nl> + try ( Verifier verifier = new Verifier ( cfs , sstable , false ) ) <nl> + { <nl> + verifier . verify ( false ) ; <nl> + fail ( " should be corrupt " ) ; <nl> + } <nl> + catch ( CorruptSSTableException e ) <nl> + { } <nl> + assertFalse ( sstable . isRepaired ( ) ) ; <nl> + } <nl> + <nl> <nl> protected void fillCF ( ColumnFamilyStore cfs , int partitionsPerSSTable ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> index f4f6e85 . . ede4ab6 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . compaction . Verifier ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 186 , 6 + 187 , 23 @ @ public class LegacySSTableTest <nl> Assert . assertEquals ( 5000 , rs . size ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void verifyOldSSTables ( ) throws Exception <nl> + { <nl> + for ( String legacyVersion : legacyVersions ) <nl> + { <nl> + loadLegacyTables ( legacyVersion ) ; <nl> + ColumnFamilyStore cfs = Keyspace . open ( " legacy _ tables " ) . getColumnFamilyStore ( String . format ( " legacy _ % s _ simple " , legacyVersion ) ) ; <nl> + for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) <nl> + { <nl> + try ( Verifier verifier = new Verifier ( cfs , sstable , false ) ) <nl> + { <nl> + verifier . verify ( true ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> private void streamLegacyTables ( String legacyVersion ) throws Exception <nl> { <nl> for ( int compact = 0 ; compact < = 1 ; compact + + )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4e8f2ac . . f42f3f4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 16 
 + * Use the correct digest file and reload sstable metadata in nodetool verify ( CASSANDRA - 14217 ) 
 * Handle failure when mutating repaired status in Verifier ( CASSANDRA - 13933 ) 
 * Close socket on error during connect on OutboundTcpConnection ( CASSANDRA - 9630 ) 
 * Set encoding for javadoc generation ( CASSANDRA - 14154 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Verifier . java b / src / java / org / apache / cassandra / db / compaction / Verifier . java 
 index 86bc377 . . 586c754 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Verifier . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Verifier . java 
 @ @ - 259 , 6 + 259 , 8 @ @ public class Verifier implements Closeable 
 try 
 { 
 sstable . descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( sstable . descriptor , ActiveRepairService . UNREPAIRED _ SSTABLE ) ; 
 + sstable . reloadSSTableMetadata ( ) ; 
 + cfs . getTracker ( ) . notifySSTableRepairedStatusChanged ( Collections . singleton ( sstable ) ) ; 
 } 
 catch ( IOException ioe ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java 
 index 0a89d74 . . cbf5753 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataIntegrityMetadata . java 
 @ @ - 110 , 7 + 110 , 7 @ @ public class DataIntegrityMetadata 
 { 
 this . descriptor = descriptor ; 
 checksum = descriptor . version . uncompressedChecksumType ( ) . newInstance ( ) ; 
 - digestReader = RandomAccessReader . open ( new File ( descriptor . filenameFor ( Component . digestFor ( descriptor . version . uncompressedChecksumType ( ) ) ) ) ) ; 
 + digestReader = RandomAccessReader . open ( new File ( descriptor . filenameFor ( descriptor . digestComponent ) ) ) ; 
 dataReader = RandomAccessReader . open ( new File ( descriptor . filenameFor ( Component . DATA ) ) ) ; 
 try 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / VerifyTest . java b / test / unit / org / apache / cassandra / db / VerifyTest . java 
 index fc87520 . . 0748270 100644 
 - - - a / test / unit / org / apache / cassandra / db / VerifyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / VerifyTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . UpdateBuilder ; 
 + import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . Verifier ; 
 import org . apache . cassandra . db . marshal . UUIDType ; 
 @ @ - 44 , 9 + 45 , 14 @ @ import org . junit . runner . RunWith ; 
 
 import java . io . * ; 
 import java . nio . file . Files ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import java . util . concurrent . ExecutionException ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . CheckedInputStream ; 
 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 @ RunWith ( OrderedJUnit4ClassRunner . class ) 
 @ @ - 368 , 6 + 374 , 39 @ @ public class VerifyTest 
 } 
 } 
 
 + @ Test 
 + public void testMutateRepair ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + CompactionManager . instance . disableAutoCompaction ( ) ; 
 + Keyspace keyspace = Keyspace . open ( KEYSPACE ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CORRUPT _ CF2 ) ; 
 + 
 + fillCF ( cfs , 2 ) ; 
 + 
 + SSTableReader sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 + sstable . descriptor . getMetadataSerializer ( ) . mutateRepairedAt ( sstable . descriptor , 1 ) ; 
 + sstable . reloadSSTableMetadata ( ) ; 
 + cfs . getTracker ( ) . notifySSTableRepairedStatusChanged ( Collections . singleton ( sstable ) ) ; 
 + assertTrue ( sstable . isRepaired ( ) ) ; 
 + cfs . forceMajorCompaction ( ) ; 
 + 
 + sstable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 + Long correctChecksum ; 
 + try ( RandomAccessFile file = new RandomAccessFile ( sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) , " rw " ) ) 
 + { 
 + correctChecksum = Long . parseLong ( file . readLine ( ) ) ; 
 + } 
 + writeChecksum ( + + correctChecksum , sstable . descriptor . filenameFor ( sstable . descriptor . digestComponent ) ) ; 
 + try ( Verifier verifier = new Verifier ( cfs , sstable , false ) ) 
 + { 
 + verifier . verify ( false ) ; 
 + fail ( " should be corrupt " ) ; 
 + } 
 + catch ( CorruptSSTableException e ) 
 + { } 
 + assertFalse ( sstable . isRepaired ( ) ) ; 
 + } 
 + 
 
 protected void fillCF ( ColumnFamilyStore cfs , int partitionsPerSSTable ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 index f4f6e85 . . ede4ab6 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . compaction . Verifier ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 186 , 6 + 187 , 23 @ @ public class LegacySSTableTest 
 Assert . assertEquals ( 5000 , rs . size ( ) ) ; 
 } 
 
 + @ Test 
 + public void verifyOldSSTables ( ) throws Exception 
 + { 
 + for ( String legacyVersion : legacyVersions ) 
 + { 
 + loadLegacyTables ( legacyVersion ) ; 
 + ColumnFamilyStore cfs = Keyspace . open ( " legacy _ tables " ) . getColumnFamilyStore ( String . format ( " legacy _ % s _ simple " , legacyVersion ) ) ; 
 + for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) 
 + { 
 + try ( Verifier verifier = new Verifier ( cfs , sstable , false ) ) 
 + { 
 + verifier . verify ( true ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 private void streamLegacyTables ( String legacyVersion ) throws Exception 
 { 
 for ( int compact = 0 ; compact < = 1 ; compact + + )

NEAREST DIFF:
ELIMINATEDSENTENCE
