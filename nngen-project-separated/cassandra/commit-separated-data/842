BLEU SCORE: 0.06567274736060397

TEST MSG: Run CommitLog tests with different compression settings
GENERATED MSG: Allow skipping file syncs during tests

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c97293d . . 9752d16 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 7 <nl> + * Run CommitLog tests with different compression settings ( CASSANDRA - 9039 ) <nl> * cqlsh : fix tab completion for case - sensitive identifiers ( CASSANDRA - 11664 ) <nl> * Avoid showing estimated key as - 1 in tablestats ( CASSANDRA - 11587 ) <nl> * Fix possible race condition in CommitLog . recover ( CASSANDRA - 11743 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 9a6ba34 . . 460ecfe 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 70 , 8 + 70 , 7 @ @ public class CommitLog implements CommitLogMBean <nl> final CommitLogMetrics metrics ; <nl> final AbstractCommitLogService executor ; <nl> <nl> - final ICompressor compressor ; <nl> - public ParameterizedClass compressorClass ; <nl> + volatile Configuration configuration ; <nl> final public String location ; <nl> <nl> static private CommitLog construct ( ) <nl> @ @ - 93 , 12 + 92 , 10 @ @ public class CommitLog implements CommitLogMBean <nl> @ VisibleForTesting <nl> CommitLog ( String location , CommitLogArchiver archiver ) <nl> { <nl> - compressorClass = DatabaseDescriptor . getCommitLogCompression ( ) ; <nl> this . location = location ; <nl> - ICompressor compressor = compressorClass ! = null ? CompressionParameters . createCompressor ( compressorClass ) : null ; <nl> + this . configuration = new Configuration ( DatabaseDescriptor . getCommitLogCompression ( ) ) ; <nl> DatabaseDescriptor . createAllDirectories ( ) ; <nl> <nl> - this . compressor = compressor ; <nl> this . archiver = archiver ; <nl> metrics = new CommitLogMetrics ( ) ; <nl> <nl> @ @ - 412 , 6 + 409 , 7 @ @ public class CommitLog implements CommitLogMBean <nl> public int resetUnsafe ( boolean deleteSegments ) throws IOException <nl> { <nl> stopUnsafe ( deleteSegments ) ; <nl> + resetConfiguration ( ) ; <nl> return restartUnsafe ( ) ; <nl> } <nl> <nl> @ @ - 434 , 6 + 432 , 14 @ @ public class CommitLog implements CommitLogMBean <nl> } <nl> <nl> / * * <nl> + * FOR TESTING PURPOSES . <nl> + * / <nl> + public void resetConfiguration ( ) <nl> + { <nl> + this . configuration = new Configuration ( DatabaseDescriptor . getCommitLogCompression ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * FOR TESTING PURPOSES . See CommitLogAllocator <nl> * / <nl> public int restartUnsafe ( ) throws IOException <nl> @ @ - 488 , 4 + 494 , 59 @ @ public class CommitLog implements CommitLogMBean <nl> throw new AssertionError ( DatabaseDescriptor . getCommitFailurePolicy ( ) ) ; <nl> } <nl> } <nl> + <nl> + public static final class Configuration <nl> + { <nl> + / * * <nl> + * The compressor class . <nl> + * / <nl> + private final ParameterizedClass compressorClass ; <nl> + <nl> + / * * <nl> + * The compressor used to compress the segments . <nl> + * / <nl> + private final ICompressor compressor ; <nl> + <nl> + public Configuration ( ParameterizedClass compressorClass ) <nl> + { <nl> + this . compressorClass = compressorClass ; <nl> + this . compressor = compressorClass ! = null ? CompressionParameters . createCompressor ( compressorClass ) : null ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the segments must be compressed . <nl> + * @ return < code > true < / code > if the segments must be compressed , < code > false < / code > otherwise . <nl> + * / <nl> + public boolean useCompression ( ) <nl> + { <nl> + return compressor ! = null ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the compressor used to compress the segments . <nl> + * @ return the compressor used to compress the segments <nl> + * / <nl> + public ICompressor getCompressor ( ) <nl> + { <nl> + return compressor ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the compressor class . <nl> + * @ return the compressor class <nl> + * / <nl> + public ParameterizedClass getCompressorClass ( ) <nl> + { <nl> + return compressorClass ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the compressor name . <nl> + * @ return the compressor name . <nl> + * / <nl> + public String getCompressorName ( ) <nl> + { <nl> + return useCompression ( ) ? compressor . getClass ( ) . getSimpleName ( ) : " none " ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> index b6801d2 . . ba28f3e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> @ @ - 119 , 7 + 119 , 8 @ @ public abstract class CommitLogSegment <nl> <nl> static CommitLogSegment createSegment ( CommitLog commitLog ) <nl> { <nl> - return commitLog . compressor ! = null ? new CompressedSegment ( commitLog ) : new MemoryMappedSegment ( commitLog ) ; <nl> + return commitLog . configuration . useCompression ( ) ? new CompressedSegment ( commitLog ) <nl> + : new MemoryMappedSegment ( commitLog ) ; <nl> } <nl> <nl> static long getNextId ( ) <nl> @ @ - 136 , 7 + 137 , 7 @ @ public abstract class CommitLogSegment <nl> { <nl> this . commitLog = commitLog ; <nl> id = getNextId ( ) ; <nl> - descriptor = new CommitLogDescriptor ( id , commitLog . compressorClass ) ; <nl> + descriptor = new CommitLogDescriptor ( id , commitLog . configuration . getCompressorClass ( ) ) ; <nl> logFile = new File ( commitLog . location , descriptor . fileName ( ) ) ; <nl> <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> index 636c73b . . 8670fd7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> @ @ - 491 , 13 + 491 , 16 @ @ public class CommitLogSegmentManager <nl> throw new RuntimeException ( e ) ; <nl> } <nl> <nl> - for ( CommitLogSegment segment : activeSegments ) <nl> - closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; <nl> - activeSegments . clear ( ) ; <nl> + synchronized ( this ) <nl> + { <nl> + for ( CommitLogSegment segment : activeSegments ) <nl> + closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; <nl> + activeSegments . clear ( ) ; <nl> <nl> - for ( CommitLogSegment segment : availableSegments ) <nl> - closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; <nl> - availableSegments . clear ( ) ; <nl> + for ( CommitLogSegment segment : availableSegments ) <nl> + closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; <nl> + availableSegments . clear ( ) ; <nl> + } <nl> <nl> allocatingFrom = null ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java <nl> index 8c62536 . . 219709b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java <nl> @ @ - 61 , 7 + 61 , 7 @ @ public class CompressedSegment extends CommitLogSegment <nl> CompressedSegment ( CommitLog commitLog ) <nl> { <nl> super ( commitLog ) ; <nl> - this . compressor = commitLog . compressor ; <nl> + this . compressor = commitLog . configuration . getCompressor ( ) ; <nl> try <nl> { <nl> channel . write ( ( ByteBuffer ) buffer . duplicate ( ) . flip ( ) ) ; <nl> @ @ - 84 , 7 + 84 , 9 @ @ public class CompressedSegment extends CommitLogSegment <nl> if ( buf = = null ) <nl> { <nl> / / this . compressor is not yet set , so we must use the commitLog ' s one . <nl> - buf = commitLog . compressor . preferredBufferType ( ) . allocate ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; <nl> + buf = commitLog . configuration . getCompressor ( ) <nl> + . preferredBufferType ( ) <nl> + . allocate ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; <nl> } else <nl> buf . clear ( ) ; <nl> return buf ; <nl> diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> index f9b4156 . . 4604c49 100644 <nl> - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java <nl> @ @ - 218 , 7 + 218 , 7 @ @ public class CommitLogStressTest <nl> { <nl> System . out . format ( " \ nTesting commit log size % . 0fmb , compressor % s , sync % s % s % s \ n " , <nl> mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , <nl> - commitLog . compressor ! = null ? commitLog . compressor . getClass ( ) . getSimpleName ( ) : " none " , <nl> + commitLog . configuration . getCompressorName ( ) , <nl> commitLog . executor . getClass ( ) . getSimpleName ( ) , <nl> randomSize ? " random size " : " " , <nl> discardedRun ? " with discarded run " : " " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> index 13c3452 . . 3beb28e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> @ @ - 21 , 22 + 21 , 37 @ @ package org . apache . cassandra . db ; <nl> * / <nl> <nl> <nl> + import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + <nl> + import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + import org . junit . runners . Parameterized . Parameters ; <nl> <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import static org . apache . cassandra . Util . column ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> + import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> + import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> + @ RunWith ( Parameterized . class ) <nl> public class RecoveryManager2Test <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( RecoveryManager2Test . class ) ; <nl> @ @ - 56 , 6 + 71 , 27 @ @ public class RecoveryManager2Test <nl> SchemaLoader . standardCFMD ( KEYSPACE1 , CF _ STANDARD2 ) ) ; <nl> } <nl> <nl> + public RecoveryManager2Test ( ParameterizedClass commitLogCompression ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; <nl> + } <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws IOException <nl> + { <nl> + CommitLog . instance . resetUnsafe ( true ) ; <nl> + } <nl> + <nl> + @ Parameters ( ) <nl> + public static Collection < Object [ ] > generateData ( ) <nl> + { <nl> + return Arrays . asList ( new Object [ ] [ ] { <nl> + { null } , / / No compression <nl> + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; <nl> + } <nl> + <nl> @ Test <nl> / * test that commit logs do not replay flushed data * / <nl> public void testWithFlush ( ) throws Exception <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java <nl> index a94d94d . . 2dd7eae 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java <nl> @ @ - 23 , 22 + 23 , 34 @ @ package org . apache . cassandra . db ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> <nl> + import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + import org . junit . runners . Parameterized . Parameters ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> + import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> + import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> <nl> import static org . apache . cassandra . Util . column ; <nl> import static org . apache . cassandra . db . KeyspaceTest . assertColumns ; <nl> <nl> + @ RunWith ( Parameterized . class ) <nl> public class RecoveryManager3Test <nl> { <nl> private static final String KEYSPACE1 = " RecoveryManager3Test1 " ; <nl> @ @ - 47 , 6 + 59 , 27 @ @ public class RecoveryManager3Test <nl> private static final String KEYSPACE2 = " RecoveryManager3Test2 " ; <nl> private static final String CF _ STANDARD3 = " Standard3 " ; <nl> <nl> + public RecoveryManager3Test ( ParameterizedClass commitLogCompression ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; <nl> + } <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws IOException <nl> + { <nl> + CommitLog . instance . resetUnsafe ( true ) ; <nl> + } <nl> + <nl> + @ Parameters ( ) <nl> + public static Collection < Object [ ] > generateData ( ) <nl> + { <nl> + return Arrays . asList ( new Object [ ] [ ] { <nl> + { null } , / / No compression <nl> + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; <nl> + } <nl> + <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java <nl> index c9abe0d . . 5676b99 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java <nl> @ @ - 19 , 31 + 19 , 38 @ @ <nl> package org . apache . cassandra . db ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . Date ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> - import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> - import org . apache . cassandra . Util ; <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . KSMetaData ; <nl> - import org . apache . cassandra . db . marshal . BytesType ; <nl> - import org . apache . cassandra . db . marshal . CounterColumnType ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . junit . Assert ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + import org . junit . runners . Parameterized . Parameters ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . KSMetaData ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . CommitLogArchiver ; <nl> + import org . apache . cassandra . db . marshal . CounterColumnType ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> + import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> + import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> + import org . apache . cassandra . locator . SimpleStrategy ; <nl> <nl> + import static org . apache . cassandra . Util . cellname ; <nl> import static org . apache . cassandra . Util . column ; <nl> import static org . apache . cassandra . db . KeyspaceTest . assertColumns ; <nl> - import static org . apache . cassandra . Util . cellname ; <nl> <nl> - @ RunWith ( OrderedJUnit4ClassRunner . class ) <nl> + @ RunWith ( Parameterized . class ) <nl> public class RecoveryManagerTest <nl> { <nl> private static final String KEYSPACE1 = " RecoveryManagerTest1 " ; <nl> @ @ - 68 , 6 + 75 , 21 @ @ public class RecoveryManagerTest <nl> SchemaLoader . standardCFMD ( KEYSPACE2 , CF _ STANDARD3 ) ) ; <nl> } <nl> <nl> + public RecoveryManagerTest ( ParameterizedClass commitLogCompression ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; <nl> + } <nl> + <nl> + @ Parameters ( ) <nl> + public static Collection < Object [ ] > generateData ( ) <nl> + { <nl> + return Arrays . asList ( new Object [ ] [ ] { <nl> + { null } , / / No compression <nl> + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; <nl> + } <nl> + <nl> @ Test <nl> public void testNothingToRecover ( ) throws IOException <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> index a004105 . . 769316f 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> @ @ - 22 , 26 + 22 , 61 @ @ import static org . apache . cassandra . Util . column ; <nl> import static org . junit . Assert . * ; <nl> <nl> import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + <nl> + import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + import org . junit . runners . Parameterized . Parameters ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> + import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> + import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * Test for the truncate operation . <nl> * / <nl> + @ RunWith ( Parameterized . class ) <nl> public class RecoveryManagerTruncateTest <nl> { <nl> private static final String KEYSPACE1 = " RecoveryManagerTruncateTest " ; <nl> private static final String CF _ STANDARD1 = " Standard1 " ; <nl> private static final String CF _ STANDARD2 = " Standard2 " ; <nl> <nl> + public RecoveryManagerTruncateTest ( ParameterizedClass commitLogCompression ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; <nl> + } <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws IOException <nl> + { <nl> + CommitLog . instance . resetUnsafe ( true ) ; <nl> + } <nl> + <nl> + @ Parameters ( ) <nl> + public static Collection < Object [ ] > generateData ( ) <nl> + { <nl> + return Arrays . asList ( new Object [ ] [ ] { <nl> + { null } , / / No compression <nl> + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; <nl> + } <nl> + <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogDescriptorTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogDescriptorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 8d63959 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogDescriptorTest . java <nl> @ @ - 0 , 0 + 1 , 103 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . commitlog ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . ParameterizedClass ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . io . util . ByteBufferDataInput ; <nl> + import org . apache . cassandra . io . util . FileDataInput ; <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> + <nl> + public class CommitLogDescriptorTest <nl> + { <nl> + @ Test <nl> + public void testVersions ( ) <nl> + { <nl> + assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 1340512736956320000 . log " ) ) ; <nl> + assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 . log " ) ) ; <nl> + assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 1340512736956320000 . log " ) ) ; <nl> + assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 2 - 1340512736956320000 . log " ) ) ; <nl> + assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 - 123 . log " ) ) ; <nl> + <nl> + assertEquals ( 1340512736956320000L , CommitLogDescriptor . fromFileName ( " CommitLog - 2 - 1340512736956320000 . log " ) . id ) ; <nl> + <nl> + assertEquals ( MessagingService . current _ version , new CommitLogDescriptor ( 1340512736956320000L , null ) . getMessagingVersion ( ) ) ; <nl> + String newCLName = " CommitLog - " + CommitLogDescriptor . current _ version + " - 1340512736956320000 . log " ; <nl> + assertEquals ( MessagingService . current _ version , CommitLogDescriptor . fromFileName ( newCLName ) . getMessagingVersion ( ) ) ; <nl> + } <nl> + <nl> + private void testDescriptorPersistence ( CommitLogDescriptor desc ) throws IOException <nl> + { <nl> + ByteBuffer buf = ByteBuffer . allocate ( 1024 ) ; <nl> + CommitLogDescriptor . writeHeader ( buf , desc ) ; <nl> + long length = buf . position ( ) ; <nl> + / / Put some extra data in the stream . <nl> + buf . putDouble ( 0 . 1 ) ; <nl> + buf . flip ( ) ; <nl> + try ( FileDataInput input = new ByteBufferDataInput ( buf , " input " , 0 , 0 ) ) <nl> + { <nl> + CommitLogDescriptor read = CommitLogDescriptor . readHeader ( input ) ; <nl> + assertEquals ( " Descriptor length " , length , input . getFilePointer ( ) ) ; <nl> + assertEquals ( " Descriptors " , desc , read ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testDescriptorPersistence ( ) throws IOException <nl> + { <nl> + testDescriptorPersistence ( new CommitLogDescriptor ( 11 , null ) ) ; <nl> + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 21 , 13 , null ) ) ; <nl> + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 15 , null ) ) ; <nl> + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 17 , new ParameterizedClass ( " LZ4Compressor " , null ) ) ) ; <nl> + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 19 , <nl> + new ParameterizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDescriptorInvalidParametersSize ( ) throws IOException <nl> + { <nl> + Map < String , String > params = new HashMap < > ( ) ; <nl> + for ( int i = 0 ; i < 6000 ; + + i ) <nl> + params . put ( " key " + i , Integer . toString ( i , 16 ) ) ; <nl> + try { <nl> + CommitLogDescriptor desc = new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , <nl> + 21 , <nl> + new ParameterizedClass ( " LZ4Compressor " , params ) ) ; <nl> + ByteBuffer buf = ByteBuffer . allocate ( 1024000 ) ; <nl> + CommitLogDescriptor . writeHeader ( buf , desc ) ; <nl> + fail ( " Parameter object too long should fail on writing descriptor . " ) ; <nl> + } catch ( ConfigurationException e ) <nl> + { <nl> + / / correct path <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java <nl> index 0ad880b . . 9999b42 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java <nl> @ @ - 19 , 53 + 19 , 46 @ @ <nl> <nl> package org . apache . cassandra . db . commitlog ; <nl> <nl> - import java . io . ByteArrayOutputStream ; <nl> - import java . io . DataOutputStream ; <nl> - import java . io . File ; <nl> - import java . io . FileOutputStream ; <nl> - import java . io . IOException ; <nl> - import java . io . OutputStream ; <nl> + import java . io . * ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . HashMap ; <nl> - import java . util . Map ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . UUID ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> <nl> - import com . google . common . collect . ImmutableMap ; <nl> - <nl> import org . junit . Assert ; <nl> + import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Parameterized ; <nl> + import org . junit . runners . Parameterized . Parameters ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> import org . apache . cassandra . config . ParameterizedClass ; <nl> - import org . apache . cassandra . db . Cell ; <nl> - import org . apache . cassandra . db . ColumnFamilyStore ; <nl> - import org . apache . cassandra . db . DecoratedKey ; <nl> - import org . apache . cassandra . db . Keyspace ; <nl> - import org . apache . cassandra . db . Mutation ; <nl> - import org . apache . cassandra . db . ReadCommand ; <nl> - import org . apache . cassandra . db . Row ; <nl> - import org . apache . cassandra . db . SliceByNamesReadCommand ; <nl> + import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . commitlog . CommitLogReplayer . CommitLogReplayException ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . CellNameType ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . io . util . ByteBufferDataInput ; <nl> - import org . apache . cassandra . io . util . FileDataInput ; <nl> + import org . apache . cassandra . io . compress . DeflateCompressor ; <nl> + import org . apache . cassandra . io . compress . LZ4Compressor ; <nl> + import org . apache . cassandra . io . compress . SnappyCompressor ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . * ; <nl> <nl> import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> <nl> + @ RunWith ( Parameterized . class ) <nl> public class CommitLogTest <nl> { <nl> private static final String KEYSPACE1 = " CommitLogTest " ; <nl> @ @ - 73 , 6 + 66 , 27 @ @ public class CommitLogTest <nl> private static final String CF1 = " Standard1 " ; <nl> private static final String CF2 = " Standard2 " ; <nl> <nl> + public CommitLogTest ( ParameterizedClass commitLogCompression ) <nl> + { <nl> + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; <nl> + } <nl> + <nl> + @ Before <nl> + public void setUp ( ) throws IOException <nl> + { <nl> + CommitLog . instance . resetUnsafe ( true ) ; <nl> + } <nl> + <nl> + @ Parameters ( ) <nl> + public static Collection < Object [ ] > generateData ( ) <nl> + { <nl> + return Arrays . asList ( new Object [ ] [ ] { <nl> + { null } , / / No compression <nl> + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , <nl> + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; <nl> + } <nl> + <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> @ @ - 194 , 7 + 208 , 6 @ @ public class CommitLogTest <nl> @ Test <nl> public void testDontDeleteIfDirty ( ) throws Exception <nl> { <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> / / Roughly 32 MB mutation <nl> Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; <nl> rm . add ( CF1 , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( DatabaseDescriptor . getCommitLogSegmentSize ( ) / 4 ) , 0 ) ; <nl> @ @ - 224 , 7 + 237 , 6 @ @ public class CommitLogTest <nl> public void testDeleteIfNotDirty ( ) throws Exception <nl> { <nl> DatabaseDescriptor . getCommitLogSegmentSize ( ) ; <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> / / Roughly 32 MB mutation <nl> Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; <nl> rm . add ( CF1 , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( ( DatabaseDescriptor . getCommitLogSegmentSize ( ) / 4 ) - 1 ) , 0 ) ; <nl> @ @ - 282 , 8 + 294 , 6 @ @ public class CommitLogTest <nl> @ Test <nl> public void testEqualRecordLimit ( ) throws Exception <nl> { <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> - <nl> Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; <nl> rm . add ( CF1 , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( getMaxRecordDataSize ( ) ) , 0 ) ; <nl> CommitLog . instance . add ( rm ) ; <nl> @ @ - 292 , 7 + 302 , 6 @ @ public class CommitLogTest <nl> @ Test <nl> public void testExceedRecordLimit ( ) throws Exception <nl> { <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> try <nl> { <nl> Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; <nl> @ @ - 423 , 25 + 432 , 8 @ @ public class CommitLogTest <nl> } <nl> <nl> @ Test <nl> - public void testVersions ( ) <nl> - { <nl> - Assert . assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 1340512736956320000 . log " ) ) ; <nl> - Assert . assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 . log " ) ) ; <nl> - Assert . assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 1340512736956320000 . log " ) ) ; <nl> - Assert . assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 2 - 1340512736956320000 . log " ) ) ; <nl> - Assert . assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 - 123 . log " ) ) ; <nl> - <nl> - Assert . assertEquals ( 1340512736956320000L , CommitLogDescriptor . fromFileName ( " CommitLog - 2 - 1340512736956320000 . log " ) . id ) ; <nl> - <nl> - Assert . assertEquals ( MessagingService . current _ version , new CommitLogDescriptor ( 1340512736956320000L , null ) . getMessagingVersion ( ) ) ; <nl> - String newCLName = " CommitLog - " + CommitLogDescriptor . current _ version + " - 1340512736956320000 . log " ; <nl> - Assert . assertEquals ( MessagingService . current _ version , CommitLogDescriptor . fromFileName ( newCLName ) . getMessagingVersion ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testTruncateWithoutSnapshot ( ) throws ExecutionException , InterruptedException , IOException <nl> { <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> boolean prev = DatabaseDescriptor . isAutoSnapshot ( ) ; <nl> DatabaseDescriptor . setAutoSnapshot ( false ) ; <nl> ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( " Standard1 " ) ; <nl> @ @ - 470 , 7 + 462 , 6 @ @ public class CommitLogTest <nl> @ Test <nl> public void testTruncateWithoutSnapshotNonDurable ( ) throws IOException <nl> { <nl> - CommitLog . instance . resetUnsafe ( true ) ; <nl> boolean prevAutoSnapshot = DatabaseDescriptor . isAutoSnapshot ( ) ; <nl> DatabaseDescriptor . setAutoSnapshot ( false ) ; <nl> Keyspace notDurableKs = Keyspace . open ( KEYSPACE2 ) ; <nl> @ @ - 494 , 48 + 485 , 4 @ @ public class CommitLogTest <nl> row = command . getRow ( notDurableKs ) ; <nl> Assert . assertEquals ( null , row . cf ) ; <nl> } <nl> - <nl> - private void testDescriptorPersistence ( CommitLogDescriptor desc ) throws IOException <nl> - { <nl> - ByteBuffer buf = ByteBuffer . allocate ( 1024 ) ; <nl> - CommitLogDescriptor . writeHeader ( buf , desc ) ; <nl> - long length = buf . position ( ) ; <nl> - / / Put some extra data in the stream . <nl> - buf . putDouble ( 0 . 1 ) ; <nl> - buf . flip ( ) ; <nl> - FileDataInput input = new ByteBufferDataInput ( buf , " input " , 0 , 0 ) ; <nl> - CommitLogDescriptor read = CommitLogDescriptor . readHeader ( input ) ; <nl> - Assert . assertEquals ( " Descriptor length " , length , input . getFilePointer ( ) ) ; <nl> - Assert . assertEquals ( " Descriptors " , desc , read ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testDescriptorPersistence ( ) throws IOException <nl> - { <nl> - testDescriptorPersistence ( new CommitLogDescriptor ( 11 , null ) ) ; <nl> - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 21 , 13 , null ) ) ; <nl> - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 15 , null ) ) ; <nl> - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 17 , new ParameterizedClass ( " LZ4Compressor " , null ) ) ) ; <nl> - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 19 , <nl> - new ParameterizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testDescriptorInvalidParametersSize ( ) throws IOException <nl> - { <nl> - Map < String , String > params = new HashMap < > ( ) ; <nl> - for ( int i = 0 ; i < 6000 ; + + i ) <nl> - params . put ( " key " + i , Integer . toString ( i , 16 ) ) ; <nl> - try { <nl> - CommitLogDescriptor desc = new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , <nl> - 21 , <nl> - new ParameterizedClass ( " LZ4Compressor " , params ) ) ; <nl> - ByteBuffer buf = ByteBuffer . allocate ( 1024000 ) ; <nl> - CommitLogDescriptor . writeHeader ( buf , desc ) ; <nl> - Assert . fail ( " Parameter object too long should fail on writing descriptor . " ) ; <nl> - } catch ( ConfigurationException e ) <nl> - { <nl> - / / correct path <nl> - } <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java <nl> index 7b07c8e . . 175a8d6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java <nl> + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class CommitLogUpgradeTestMaker <nl> CommitLog commitLog = CommitLog . instance ; <nl> System . out . format ( " \ nUsing commit log size % dmb , compressor % s , sync % s % s \ n " , <nl> mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , <nl> - commitLog . compressor ! = null ? commitLog . compressor . getClass ( ) . getSimpleName ( ) : " none " , <nl> + commitLog . configuration . getCompressorName ( ) , <nl> commitLog . executor . getClass ( ) . getSimpleName ( ) , <nl> randomSize ? " random size " : " " ) ; <nl> final List < CommitlogExecutor > threads = new ArrayList < > ( ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c97293d . . 9752d16 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 7 
 + * Run CommitLog tests with different compression settings ( CASSANDRA - 9039 ) 
 * cqlsh : fix tab completion for case - sensitive identifiers ( CASSANDRA - 11664 ) 
 * Avoid showing estimated key as - 1 in tablestats ( CASSANDRA - 11587 ) 
 * Fix possible race condition in CommitLog . recover ( CASSANDRA - 11743 ) 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 9a6ba34 . . 460ecfe 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 70 , 8 + 70 , 7 @ @ public class CommitLog implements CommitLogMBean 
 final CommitLogMetrics metrics ; 
 final AbstractCommitLogService executor ; 
 
 - final ICompressor compressor ; 
 - public ParameterizedClass compressorClass ; 
 + volatile Configuration configuration ; 
 final public String location ; 
 
 static private CommitLog construct ( ) 
 @ @ - 93 , 12 + 92 , 10 @ @ public class CommitLog implements CommitLogMBean 
 @ VisibleForTesting 
 CommitLog ( String location , CommitLogArchiver archiver ) 
 { 
 - compressorClass = DatabaseDescriptor . getCommitLogCompression ( ) ; 
 this . location = location ; 
 - ICompressor compressor = compressorClass ! = null ? CompressionParameters . createCompressor ( compressorClass ) : null ; 
 + this . configuration = new Configuration ( DatabaseDescriptor . getCommitLogCompression ( ) ) ; 
 DatabaseDescriptor . createAllDirectories ( ) ; 
 
 - this . compressor = compressor ; 
 this . archiver = archiver ; 
 metrics = new CommitLogMetrics ( ) ; 
 
 @ @ - 412 , 6 + 409 , 7 @ @ public class CommitLog implements CommitLogMBean 
 public int resetUnsafe ( boolean deleteSegments ) throws IOException 
 { 
 stopUnsafe ( deleteSegments ) ; 
 + resetConfiguration ( ) ; 
 return restartUnsafe ( ) ; 
 } 
 
 @ @ - 434 , 6 + 432 , 14 @ @ public class CommitLog implements CommitLogMBean 
 } 
 
 / * * 
 + * FOR TESTING PURPOSES . 
 + * / 
 + public void resetConfiguration ( ) 
 + { 
 + this . configuration = new Configuration ( DatabaseDescriptor . getCommitLogCompression ( ) ) ; 
 + } 
 + 
 + / * * 
 * FOR TESTING PURPOSES . See CommitLogAllocator 
 * / 
 public int restartUnsafe ( ) throws IOException 
 @ @ - 488 , 4 + 494 , 59 @ @ public class CommitLog implements CommitLogMBean 
 throw new AssertionError ( DatabaseDescriptor . getCommitFailurePolicy ( ) ) ; 
 } 
 } 
 + 
 + public static final class Configuration 
 + { 
 + / * * 
 + * The compressor class . 
 + * / 
 + private final ParameterizedClass compressorClass ; 
 + 
 + / * * 
 + * The compressor used to compress the segments . 
 + * / 
 + private final ICompressor compressor ; 
 + 
 + public Configuration ( ParameterizedClass compressorClass ) 
 + { 
 + this . compressorClass = compressorClass ; 
 + this . compressor = compressorClass ! = null ? CompressionParameters . createCompressor ( compressorClass ) : null ; 
 + } 
 + 
 + / * * 
 + * Checks if the segments must be compressed . 
 + * @ return < code > true < / code > if the segments must be compressed , < code > false < / code > otherwise . 
 + * / 
 + public boolean useCompression ( ) 
 + { 
 + return compressor ! = null ; 
 + } 
 + 
 + / * * 
 + * Returns the compressor used to compress the segments . 
 + * @ return the compressor used to compress the segments 
 + * / 
 + public ICompressor getCompressor ( ) 
 + { 
 + return compressor ; 
 + } 
 + 
 + / * * 
 + * Returns the compressor class . 
 + * @ return the compressor class 
 + * / 
 + public ParameterizedClass getCompressorClass ( ) 
 + { 
 + return compressorClass ; 
 + } 
 + 
 + / * * 
 + * Returns the compressor name . 
 + * @ return the compressor name . 
 + * / 
 + public String getCompressorName ( ) 
 + { 
 + return useCompression ( ) ? compressor . getClass ( ) . getSimpleName ( ) : " none " ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 index b6801d2 . . ba28f3e 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 @ @ - 119 , 7 + 119 , 8 @ @ public abstract class CommitLogSegment 
 
 static CommitLogSegment createSegment ( CommitLog commitLog ) 
 { 
 - return commitLog . compressor ! = null ? new CompressedSegment ( commitLog ) : new MemoryMappedSegment ( commitLog ) ; 
 + return commitLog . configuration . useCompression ( ) ? new CompressedSegment ( commitLog ) 
 + : new MemoryMappedSegment ( commitLog ) ; 
 } 
 
 static long getNextId ( ) 
 @ @ - 136 , 7 + 137 , 7 @ @ public abstract class CommitLogSegment 
 { 
 this . commitLog = commitLog ; 
 id = getNextId ( ) ; 
 - descriptor = new CommitLogDescriptor ( id , commitLog . compressorClass ) ; 
 + descriptor = new CommitLogDescriptor ( id , commitLog . configuration . getCompressorClass ( ) ) ; 
 logFile = new File ( commitLog . location , descriptor . fileName ( ) ) ; 
 
 try 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 index 636c73b . . 8670fd7 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 @ @ - 491 , 13 + 491 , 16 @ @ public class CommitLogSegmentManager 
 throw new RuntimeException ( e ) ; 
 } 
 
 - for ( CommitLogSegment segment : activeSegments ) 
 - closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; 
 - activeSegments . clear ( ) ; 
 + synchronized ( this ) 
 + { 
 + for ( CommitLogSegment segment : activeSegments ) 
 + closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; 
 + activeSegments . clear ( ) ; 
 
 - for ( CommitLogSegment segment : availableSegments ) 
 - closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; 
 - availableSegments . clear ( ) ; 
 + for ( CommitLogSegment segment : availableSegments ) 
 + closeAndDeleteSegmentUnsafe ( segment , deleteSegments ) ; 
 + availableSegments . clear ( ) ; 
 + } 
 
 allocatingFrom = null ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java 
 index 8c62536 . . 219709b 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CompressedSegment . java 
 @ @ - 61 , 7 + 61 , 7 @ @ public class CompressedSegment extends CommitLogSegment 
 CompressedSegment ( CommitLog commitLog ) 
 { 
 super ( commitLog ) ; 
 - this . compressor = commitLog . compressor ; 
 + this . compressor = commitLog . configuration . getCompressor ( ) ; 
 try 
 { 
 channel . write ( ( ByteBuffer ) buffer . duplicate ( ) . flip ( ) ) ; 
 @ @ - 84 , 7 + 84 , 9 @ @ public class CompressedSegment extends CommitLogSegment 
 if ( buf = = null ) 
 { 
 / / this . compressor is not yet set , so we must use the commitLog ' s one . 
 - buf = commitLog . compressor . preferredBufferType ( ) . allocate ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; 
 + buf = commitLog . configuration . getCompressor ( ) 
 + . preferredBufferType ( ) 
 + . allocate ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) ; 
 } else 
 buf . clear ( ) ; 
 return buf ; 
 diff - - git a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 index f9b4156 . . 4604c49 100644 
 - - - a / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 + + + b / test / long / org / apache / cassandra / db / commitlog / CommitLogStressTest . java 
 @ @ - 218 , 7 + 218 , 7 @ @ public class CommitLogStressTest 
 { 
 System . out . format ( " \ nTesting commit log size % . 0fmb , compressor % s , sync % s % s % s \ n " , 
 mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , 
 - commitLog . compressor ! = null ? commitLog . compressor . getClass ( ) . getSimpleName ( ) : " none " , 
 + commitLog . configuration . getCompressorName ( ) , 
 commitLog . executor . getClass ( ) . getSimpleName ( ) , 
 randomSize ? " random size " : " " , 
 discardedRun ? " with discarded run " : " " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 index 13c3452 . . 3beb28e 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 @ @ - 21 , 22 + 21 , 37 @ @ package org . apache . cassandra . db ; 
 * / 
 
 
 + import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + 
 + import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + import org . junit . runners . Parameterized . Parameters ; 
 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import static org . apache . cassandra . Util . column ; 
 import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . io . compress . DeflateCompressor ; 
 + import org . apache . cassandra . io . compress . LZ4Compressor ; 
 + import org . apache . cassandra . io . compress . SnappyCompressor ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 + @ RunWith ( Parameterized . class ) 
 public class RecoveryManager2Test 
 { 
 private static Logger logger = LoggerFactory . getLogger ( RecoveryManager2Test . class ) ; 
 @ @ - 56 , 6 + 71 , 27 @ @ public class RecoveryManager2Test 
 SchemaLoader . standardCFMD ( KEYSPACE1 , CF _ STANDARD2 ) ) ; 
 } 
 
 + public RecoveryManager2Test ( ParameterizedClass commitLogCompression ) 
 + { 
 + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; 
 + } 
 + 
 + @ Before 
 + public void setUp ( ) throws IOException 
 + { 
 + CommitLog . instance . resetUnsafe ( true ) ; 
 + } 
 + 
 + @ Parameters ( ) 
 + public static Collection < Object [ ] > generateData ( ) 
 + { 
 + return Arrays . asList ( new Object [ ] [ ] { 
 + { null } , / / No compression 
 + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; 
 + } 
 + 
 @ Test 
 / * test that commit logs do not replay flushed data * / 
 public void testWithFlush ( ) throws Exception 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java 
 index a94d94d . . 2dd7eae 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManager3Test . java 
 @ @ - 23 , 22 + 23 , 34 @ @ package org . apache . cassandra . db ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 
 + import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + import org . junit . runners . Parameterized . Parameters ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . io . compress . DeflateCompressor ; 
 + import org . apache . cassandra . io . compress . LZ4Compressor ; 
 + import org . apache . cassandra . io . compress . SnappyCompressor ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 
 import static org . apache . cassandra . Util . column ; 
 import static org . apache . cassandra . db . KeyspaceTest . assertColumns ; 
 
 + @ RunWith ( Parameterized . class ) 
 public class RecoveryManager3Test 
 { 
 private static final String KEYSPACE1 = " RecoveryManager3Test1 " ; 
 @ @ - 47 , 6 + 59 , 27 @ @ public class RecoveryManager3Test 
 private static final String KEYSPACE2 = " RecoveryManager3Test2 " ; 
 private static final String CF _ STANDARD3 = " Standard3 " ; 
 
 + public RecoveryManager3Test ( ParameterizedClass commitLogCompression ) 
 + { 
 + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; 
 + } 
 + 
 + @ Before 
 + public void setUp ( ) throws IOException 
 + { 
 + CommitLog . instance . resetUnsafe ( true ) ; 
 + } 
 + 
 + @ Parameters ( ) 
 + public static Collection < Object [ ] > generateData ( ) 
 + { 
 + return Arrays . asList ( new Object [ ] [ ] { 
 + { null } , / / No compression 
 + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; 
 + } 
 + 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java 
 index c9abe0d . . 5676b99 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTest . java 
 @ @ - 19 , 31 + 19 , 38 @ @ 
 package org . apache . cassandra . db ; 
 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . Date ; 
 import java . util . concurrent . TimeUnit ; 
 
 - import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 - import org . apache . cassandra . Util ; 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . KSMetaData ; 
 - import org . apache . cassandra . db . marshal . BytesType ; 
 - import org . apache . cassandra . db . marshal . CounterColumnType ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . junit . Assert ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + import org . junit . runners . Parameterized . Parameters ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . KSMetaData ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . CommitLogArchiver ; 
 + import org . apache . cassandra . db . marshal . CounterColumnType ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . io . compress . DeflateCompressor ; 
 + import org . apache . cassandra . io . compress . LZ4Compressor ; 
 + import org . apache . cassandra . io . compress . SnappyCompressor ; 
 + import org . apache . cassandra . locator . SimpleStrategy ; 
 
 + import static org . apache . cassandra . Util . cellname ; 
 import static org . apache . cassandra . Util . column ; 
 import static org . apache . cassandra . db . KeyspaceTest . assertColumns ; 
 - import static org . apache . cassandra . Util . cellname ; 
 
 - @ RunWith ( OrderedJUnit4ClassRunner . class ) 
 + @ RunWith ( Parameterized . class ) 
 public class RecoveryManagerTest 
 { 
 private static final String KEYSPACE1 = " RecoveryManagerTest1 " ; 
 @ @ - 68 , 6 + 75 , 21 @ @ public class RecoveryManagerTest 
 SchemaLoader . standardCFMD ( KEYSPACE2 , CF _ STANDARD3 ) ) ; 
 } 
 
 + public RecoveryManagerTest ( ParameterizedClass commitLogCompression ) 
 + { 
 + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; 
 + } 
 + 
 + @ Parameters ( ) 
 + public static Collection < Object [ ] > generateData ( ) 
 + { 
 + return Arrays . asList ( new Object [ ] [ ] { 
 + { null } , / / No compression 
 + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; 
 + } 
 + 
 @ Test 
 public void testNothingToRecover ( ) throws IOException 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 index a004105 . . 769316f 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 @ @ - 22 , 26 + 22 , 61 @ @ import static org . apache . cassandra . Util . column ; 
 import static org . junit . Assert . * ; 
 
 import java . io . IOException ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + 
 + import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + import org . junit . runners . Parameterized . Parameters ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . io . compress . DeflateCompressor ; 
 + import org . apache . cassandra . io . compress . LZ4Compressor ; 
 + import org . apache . cassandra . io . compress . SnappyCompressor ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * Test for the truncate operation . 
 * / 
 + @ RunWith ( Parameterized . class ) 
 public class RecoveryManagerTruncateTest 
 { 
 private static final String KEYSPACE1 = " RecoveryManagerTruncateTest " ; 
 private static final String CF _ STANDARD1 = " Standard1 " ; 
 private static final String CF _ STANDARD2 = " Standard2 " ; 
 
 + public RecoveryManagerTruncateTest ( ParameterizedClass commitLogCompression ) 
 + { 
 + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; 
 + } 
 + 
 + @ Before 
 + public void setUp ( ) throws IOException 
 + { 
 + CommitLog . instance . resetUnsafe ( true ) ; 
 + } 
 + 
 + @ Parameters ( ) 
 + public static Collection < Object [ ] > generateData ( ) 
 + { 
 + return Arrays . asList ( new Object [ ] [ ] { 
 + { null } , / / No compression 
 + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; 
 + } 
 + 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogDescriptorTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogDescriptorTest . java 
 new file mode 100644 
 index 0000000 . . 8d63959 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogDescriptorTest . java 
 @ @ - 0 , 0 + 1 , 103 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . commitlog ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . ParameterizedClass ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . io . util . ByteBufferDataInput ; 
 + import org . apache . cassandra . io . util . FileDataInput ; 
 + import org . apache . cassandra . net . MessagingService ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 + 
 + public class CommitLogDescriptorTest 
 + { 
 + @ Test 
 + public void testVersions ( ) 
 + { 
 + assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 1340512736956320000 . log " ) ) ; 
 + assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 . log " ) ) ; 
 + assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 1340512736956320000 . log " ) ) ; 
 + assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 2 - 1340512736956320000 . log " ) ) ; 
 + assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 - 123 . log " ) ) ; 
 + 
 + assertEquals ( 1340512736956320000L , CommitLogDescriptor . fromFileName ( " CommitLog - 2 - 1340512736956320000 . log " ) . id ) ; 
 + 
 + assertEquals ( MessagingService . current _ version , new CommitLogDescriptor ( 1340512736956320000L , null ) . getMessagingVersion ( ) ) ; 
 + String newCLName = " CommitLog - " + CommitLogDescriptor . current _ version + " - 1340512736956320000 . log " ; 
 + assertEquals ( MessagingService . current _ version , CommitLogDescriptor . fromFileName ( newCLName ) . getMessagingVersion ( ) ) ; 
 + } 
 + 
 + private void testDescriptorPersistence ( CommitLogDescriptor desc ) throws IOException 
 + { 
 + ByteBuffer buf = ByteBuffer . allocate ( 1024 ) ; 
 + CommitLogDescriptor . writeHeader ( buf , desc ) ; 
 + long length = buf . position ( ) ; 
 + / / Put some extra data in the stream . 
 + buf . putDouble ( 0 . 1 ) ; 
 + buf . flip ( ) ; 
 + try ( FileDataInput input = new ByteBufferDataInput ( buf , " input " , 0 , 0 ) ) 
 + { 
 + CommitLogDescriptor read = CommitLogDescriptor . readHeader ( input ) ; 
 + assertEquals ( " Descriptor length " , length , input . getFilePointer ( ) ) ; 
 + assertEquals ( " Descriptors " , desc , read ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testDescriptorPersistence ( ) throws IOException 
 + { 
 + testDescriptorPersistence ( new CommitLogDescriptor ( 11 , null ) ) ; 
 + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 21 , 13 , null ) ) ; 
 + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 15 , null ) ) ; 
 + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 17 , new ParameterizedClass ( " LZ4Compressor " , null ) ) ) ; 
 + testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 19 , 
 + new ParameterizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDescriptorInvalidParametersSize ( ) throws IOException 
 + { 
 + Map < String , String > params = new HashMap < > ( ) ; 
 + for ( int i = 0 ; i < 6000 ; + + i ) 
 + params . put ( " key " + i , Integer . toString ( i , 16 ) ) ; 
 + try { 
 + CommitLogDescriptor desc = new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 
 + 21 , 
 + new ParameterizedClass ( " LZ4Compressor " , params ) ) ; 
 + ByteBuffer buf = ByteBuffer . allocate ( 1024000 ) ; 
 + CommitLogDescriptor . writeHeader ( buf , desc ) ; 
 + fail ( " Parameter object too long should fail on writing descriptor . " ) ; 
 + } catch ( ConfigurationException e ) 
 + { 
 + / / correct path 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java 
 index 0ad880b . . 9999b42 100644 
 - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogTest . java 
 @ @ - 19 , 53 + 19 , 46 @ @ 
 
 package org . apache . cassandra . db . commitlog ; 
 
 - import java . io . ByteArrayOutputStream ; 
 - import java . io . DataOutputStream ; 
 - import java . io . File ; 
 - import java . io . FileOutputStream ; 
 - import java . io . IOException ; 
 - import java . io . OutputStream ; 
 + import java . io . * ; 
 import java . nio . ByteBuffer ; 
 - import java . util . HashMap ; 
 - import java . util . Map ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . UUID ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 
 - import com . google . common . collect . ImmutableMap ; 
 - 
 import org . junit . Assert ; 
 + import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Parameterized ; 
 + import org . junit . runners . Parameterized . Parameters ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 import org . apache . cassandra . config . ParameterizedClass ; 
 - import org . apache . cassandra . db . Cell ; 
 - import org . apache . cassandra . db . ColumnFamilyStore ; 
 - import org . apache . cassandra . db . DecoratedKey ; 
 - import org . apache . cassandra . db . Keyspace ; 
 - import org . apache . cassandra . db . Mutation ; 
 - import org . apache . cassandra . db . ReadCommand ; 
 - import org . apache . cassandra . db . Row ; 
 - import org . apache . cassandra . db . SliceByNamesReadCommand ; 
 + import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . commitlog . CommitLogReplayer . CommitLogReplayException ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . CellNameType ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . io . util . ByteBufferDataInput ; 
 - import org . apache . cassandra . io . util . FileDataInput ; 
 + import org . apache . cassandra . io . compress . DeflateCompressor ; 
 + import org . apache . cassandra . io . compress . LZ4Compressor ; 
 + import org . apache . cassandra . io . compress . SnappyCompressor ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . * ; 
 
 import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 
 + @ RunWith ( Parameterized . class ) 
 public class CommitLogTest 
 { 
 private static final String KEYSPACE1 = " CommitLogTest " ; 
 @ @ - 73 , 6 + 66 , 27 @ @ public class CommitLogTest 
 private static final String CF1 = " Standard1 " ; 
 private static final String CF2 = " Standard2 " ; 
 
 + public CommitLogTest ( ParameterizedClass commitLogCompression ) 
 + { 
 + DatabaseDescriptor . setCommitLogCompression ( commitLogCompression ) ; 
 + } 
 + 
 + @ Before 
 + public void setUp ( ) throws IOException 
 + { 
 + CommitLog . instance . resetUnsafe ( true ) ; 
 + } 
 + 
 + @ Parameters ( ) 
 + public static Collection < Object [ ] > generateData ( ) 
 + { 
 + return Arrays . asList ( new Object [ ] [ ] { 
 + { null } , / / No compression 
 + { new ParameterizedClass ( LZ4Compressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( SnappyCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } , 
 + { new ParameterizedClass ( DeflateCompressor . class . getName ( ) , Collections . < String , String > emptyMap ( ) ) } } ) ; 
 + } 
 + 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 @ @ - 194 , 7 + 208 , 6 @ @ public class CommitLogTest 
 @ Test 
 public void testDontDeleteIfDirty ( ) throws Exception 
 { 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 / / Roughly 32 MB mutation 
 Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; 
 rm . add ( CF1 , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( DatabaseDescriptor . getCommitLogSegmentSize ( ) / 4 ) , 0 ) ; 
 @ @ - 224 , 7 + 237 , 6 @ @ public class CommitLogTest 
 public void testDeleteIfNotDirty ( ) throws Exception 
 { 
 DatabaseDescriptor . getCommitLogSegmentSize ( ) ; 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 / / Roughly 32 MB mutation 
 Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; 
 rm . add ( CF1 , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( ( DatabaseDescriptor . getCommitLogSegmentSize ( ) / 4 ) - 1 ) , 0 ) ; 
 @ @ - 282 , 8 + 294 , 6 @ @ public class CommitLogTest 
 @ Test 
 public void testEqualRecordLimit ( ) throws Exception 
 { 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 - 
 Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; 
 rm . add ( CF1 , Util . cellname ( " c1 " ) , ByteBuffer . allocate ( getMaxRecordDataSize ( ) ) , 0 ) ; 
 CommitLog . instance . add ( rm ) ; 
 @ @ - 292 , 7 + 302 , 6 @ @ public class CommitLogTest 
 @ Test 
 public void testExceedRecordLimit ( ) throws Exception 
 { 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 try 
 { 
 Mutation rm = new Mutation ( KEYSPACE1 , bytes ( " k " ) ) ; 
 @ @ - 423 , 25 + 432 , 8 @ @ public class CommitLogTest 
 } 
 
 @ Test 
 - public void testVersions ( ) 
 - { 
 - Assert . assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 1340512736956320000 . log " ) ) ; 
 - Assert . assertTrue ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 . log " ) ) ; 
 - Assert . assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 1340512736956320000 . log " ) ) ; 
 - Assert . assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - - 2 - 1340512736956320000 . log " ) ) ; 
 - Assert . assertFalse ( CommitLogDescriptor . isValid ( " CommitLog - 2 - 1340512736956320000 - 123 . log " ) ) ; 
 - 
 - Assert . assertEquals ( 1340512736956320000L , CommitLogDescriptor . fromFileName ( " CommitLog - 2 - 1340512736956320000 . log " ) . id ) ; 
 - 
 - Assert . assertEquals ( MessagingService . current _ version , new CommitLogDescriptor ( 1340512736956320000L , null ) . getMessagingVersion ( ) ) ; 
 - String newCLName = " CommitLog - " + CommitLogDescriptor . current _ version + " - 1340512736956320000 . log " ; 
 - Assert . assertEquals ( MessagingService . current _ version , CommitLogDescriptor . fromFileName ( newCLName ) . getMessagingVersion ( ) ) ; 
 - } 
 - 
 - @ Test 
 public void testTruncateWithoutSnapshot ( ) throws ExecutionException , InterruptedException , IOException 
 { 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 boolean prev = DatabaseDescriptor . isAutoSnapshot ( ) ; 
 DatabaseDescriptor . setAutoSnapshot ( false ) ; 
 ColumnFamilyStore cfs1 = Keyspace . open ( KEYSPACE1 ) . getColumnFamilyStore ( " Standard1 " ) ; 
 @ @ - 470 , 7 + 462 , 6 @ @ public class CommitLogTest 
 @ Test 
 public void testTruncateWithoutSnapshotNonDurable ( ) throws IOException 
 { 
 - CommitLog . instance . resetUnsafe ( true ) ; 
 boolean prevAutoSnapshot = DatabaseDescriptor . isAutoSnapshot ( ) ; 
 DatabaseDescriptor . setAutoSnapshot ( false ) ; 
 Keyspace notDurableKs = Keyspace . open ( KEYSPACE2 ) ; 
 @ @ - 494 , 48 + 485 , 4 @ @ public class CommitLogTest 
 row = command . getRow ( notDurableKs ) ; 
 Assert . assertEquals ( null , row . cf ) ; 
 } 
 - 
 - private void testDescriptorPersistence ( CommitLogDescriptor desc ) throws IOException 
 - { 
 - ByteBuffer buf = ByteBuffer . allocate ( 1024 ) ; 
 - CommitLogDescriptor . writeHeader ( buf , desc ) ; 
 - long length = buf . position ( ) ; 
 - / / Put some extra data in the stream . 
 - buf . putDouble ( 0 . 1 ) ; 
 - buf . flip ( ) ; 
 - FileDataInput input = new ByteBufferDataInput ( buf , " input " , 0 , 0 ) ; 
 - CommitLogDescriptor read = CommitLogDescriptor . readHeader ( input ) ; 
 - Assert . assertEquals ( " Descriptor length " , length , input . getFilePointer ( ) ) ; 
 - Assert . assertEquals ( " Descriptors " , desc , read ) ; 
 - } 
 - 
 - @ Test 
 - public void testDescriptorPersistence ( ) throws IOException 
 - { 
 - testDescriptorPersistence ( new CommitLogDescriptor ( 11 , null ) ) ; 
 - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 21 , 13 , null ) ) ; 
 - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 15 , null ) ) ; 
 - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 17 , new ParameterizedClass ( " LZ4Compressor " , null ) ) ) ; 
 - testDescriptorPersistence ( new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 19 , 
 - new ParameterizedClass ( " StubbyCompressor " , ImmutableMap . of ( " parameter1 " , " value1 " , " flag2 " , " 55 " , " argument3 " , " null " ) ) ) ) ; 
 - } 
 - 
 - @ Test 
 - public void testDescriptorInvalidParametersSize ( ) throws IOException 
 - { 
 - Map < String , String > params = new HashMap < > ( ) ; 
 - for ( int i = 0 ; i < 6000 ; + + i ) 
 - params . put ( " key " + i , Integer . toString ( i , 16 ) ) ; 
 - try { 
 - CommitLogDescriptor desc = new CommitLogDescriptor ( CommitLogDescriptor . VERSION _ 22 , 
 - 21 , 
 - new ParameterizedClass ( " LZ4Compressor " , params ) ) ; 
 - ByteBuffer buf = ByteBuffer . allocate ( 1024000 ) ; 
 - CommitLogDescriptor . writeHeader ( buf , desc ) ; 
 - Assert . fail ( " Parameter object too long should fail on writing descriptor . " ) ; 
 - } catch ( ConfigurationException e ) 
 - { 
 - / / correct path 
 - } 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java b / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java 
 index 7b07c8e . . 175a8d6 100644 
 - - - a / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java 
 + + + b / test / unit / org / apache / cassandra / db / commitlog / CommitLogUpgradeTestMaker . java 
 @ @ - 98 , 7 + 98 , 7 @ @ public class CommitLogUpgradeTestMaker 
 CommitLog commitLog = CommitLog . instance ; 
 System . out . format ( " \ nUsing commit log size % dmb , compressor % s , sync % s % s \ n " , 
 mb ( DatabaseDescriptor . getCommitLogSegmentSize ( ) ) , 
 - commitLog . compressor ! = null ? commitLog . compressor . getClass ( ) . getSimpleName ( ) : " none " , 
 + commitLog . configuration . getCompressorName ( ) , 
 commitLog . executor . getClass ( ) . getSimpleName ( ) , 
 randomSize ? " random size " : " " ) ; 
 final List < CommitlogExecutor > threads = new ArrayList < > ( ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
