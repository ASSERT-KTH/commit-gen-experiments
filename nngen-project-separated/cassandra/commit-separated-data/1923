BLEU SCORE: 0.05862502026550899

TEST MSG: Avoid creating dir in DirectoriesTest
GENERATED MSG: Fix test for change in CASSANDRA - 6357

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> index 8754fe0 . . c4471e5 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; <nl> import java . util . * ; <nl> import java . util . concurrent . * ; <nl> <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + <nl> import org . junit . AfterClass ; <nl> import org . junit . Assert ; <nl> import org . junit . BeforeClass ; <nl> @ @ - 34 , 6 + 36 , 7 @ @ import org . apache . cassandra . db . compaction . LeveledManifest ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> @ @ - 190 , 15 + 193 , 14 @ @ public class DirectoriesTest <nl> try <nl> { <nl> DatabaseDescriptor . setDiskFailurePolicy ( DiskFailurePolicy . best _ effort ) ; <nl> - <nl> - for ( DataDirectory dd : Directories . dataFileLocations ) <nl> + / / Fake a Directory creation failure <nl> + if ( Directories . dataFileLocations . length > 0 ) <nl> { <nl> - dd . location . setExecutable ( false ) ; <nl> - dd . location . setWritable ( false ) ; <nl> + String [ ] path = new String [ ] { KS , " bad " } ; <nl> + File dir = new File ( Directories . dataFileLocations [ 0 ] . location , StringUtils . join ( path , File . separator ) ) ; <nl> + FileUtils . handleFSError ( new FSWriteError ( new IOException ( " Unable to create directory " + dir ) , dir ) ) ; <nl> } <nl> - <nl> - Directories . create ( KS , " bad " ) ; <nl> - <nl> + <nl> for ( DataDirectory dd : Directories . dataFileLocations ) <nl> { <nl> File file = new File ( dd . location , new File ( KS , " bad " ) . getPath ( ) ) ; <nl> @ @ - 207 , 12 + 209 , 6 @ @ public class DirectoriesTest <nl> } <nl> finally <nl> { <nl> - for ( DataDirectory dd : Directories . dataFileLocations ) <nl> - { <nl> - dd . location . setExecutable ( true ) ; <nl> - dd . location . setWritable ( true ) ; <nl> - } <nl> - <nl> DatabaseDescriptor . setDiskFailurePolicy ( origPolicy ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / DirectoriesTest . java b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 index 8754fe0 . . c4471e5 100644 
 - - - a / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DirectoriesTest . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; 
 import java . util . * ; 
 import java . util . concurrent . * ; 
 
 + import org . apache . commons . lang3 . StringUtils ; 
 + 
 import org . junit . AfterClass ; 
 import org . junit . Assert ; 
 import org . junit . BeforeClass ; 
 @ @ - 34 , 6 + 36 , 7 @ @ import org . apache . cassandra . db . compaction . LeveledManifest ; 
 import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . io . FSWriteError ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 @ @ - 190 , 15 + 193 , 14 @ @ public class DirectoriesTest 
 try 
 { 
 DatabaseDescriptor . setDiskFailurePolicy ( DiskFailurePolicy . best _ effort ) ; 
 - 
 - for ( DataDirectory dd : Directories . dataFileLocations ) 
 + / / Fake a Directory creation failure 
 + if ( Directories . dataFileLocations . length > 0 ) 
 { 
 - dd . location . setExecutable ( false ) ; 
 - dd . location . setWritable ( false ) ; 
 + String [ ] path = new String [ ] { KS , " bad " } ; 
 + File dir = new File ( Directories . dataFileLocations [ 0 ] . location , StringUtils . join ( path , File . separator ) ) ; 
 + FileUtils . handleFSError ( new FSWriteError ( new IOException ( " Unable to create directory " + dir ) , dir ) ) ; 
 } 
 - 
 - Directories . create ( KS , " bad " ) ; 
 - 
 + 
 for ( DataDirectory dd : Directories . dataFileLocations ) 
 { 
 File file = new File ( dd . location , new File ( KS , " bad " ) . getPath ( ) ) ; 
 @ @ - 207 , 12 + 209 , 6 @ @ public class DirectoriesTest 
 } 
 finally 
 { 
 - for ( DataDirectory dd : Directories . dataFileLocations ) 
 - { 
 - dd . location . setExecutable ( true ) ; 
 - dd . location . setWritable ( true ) ; 
 - } 
 - 
 DatabaseDescriptor . setDiskFailurePolicy ( origPolicy ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
