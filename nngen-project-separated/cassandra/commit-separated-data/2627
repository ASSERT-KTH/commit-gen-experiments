BLEU SCORE: 0.05341087579952926

TEST MSG: merge from 2 . 0
GENERATED MSG: Add uuid ( ) function

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 159d242 . . 75f4cee 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> * Fix race condition in Batch CLE ( CASSANDRA - 6860 ) <nl> * Improve cleanup / scrub / upgradesstables failure handling ( CASSANDRA - 6774 ) <nl> Merged from 2 . 0 : <nl> + * Add uuid ( ) function ( CASSANDRA - 6473 ) <nl> * Omit tombstones from schema digests ( CASSANDRA - 6862 ) <nl> * Include correct consistencyLevel in LWT timeout ( CASSANDRA - 6884 ) <nl> * Lower chances for losing new SSTables during nodetool refresh and <nl> diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index ed0c773 . . 7f794e0 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 1006 , 6 + 1006 , 10 @ @ CREATE TABLE users ( <nl> <nl> then the @ token @ function will take a single argument of type @ text @ ( in that case , the partition key is @ userid @ ( there is no clustering columns so the partition key is the same than the primary key ) ) , and the return type will be @ bigint @ . <nl> <nl> + h3 ( # uuidFun ) . Uuid <nl> + <nl> + The @ uuid @ function takes no parameters and generates a random type 4 uuid suitable for use in INSERT or SET statements . <nl> + <nl> h3 ( # timeuuidFun ) . Timeuuid functions <nl> <nl> h4 . @ now @ <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> index 27f8b3c . . 72aac3f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ public abstract class Functions <nl> declared . put ( " maxtimeuuid " , AbstractFunction . factory ( TimeuuidFcts . maxTimeuuidFct ) ) ; <nl> declared . put ( " dateof " , AbstractFunction . factory ( TimeuuidFcts . dateOfFct ) ) ; <nl> declared . put ( " unixtimestampof " , AbstractFunction . factory ( TimeuuidFcts . unixTimestampOfFct ) ) ; <nl> + declared . put ( " uuid " , AbstractFunction . factory ( UuidFcts . uuidFct ) ) ; <nl> <nl> for ( CQL3Type type : CQL3Type . Native . values ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java <nl> new file mode 100644 <nl> index 0000000 . . 718bcbc <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . functions ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . List ; <nl> + import java . util . UUID ; <nl> + <nl> + import org . apache . cassandra . db . marshal . UUIDType ; <nl> + import org . apache . cassandra . serializers . UUIDSerializer ; <nl> + <nl> + public abstract class UuidFcts <nl> + { <nl> + public static final Function uuidFct = new AbstractFunction ( " uuid " , UUIDType . instance ) <nl> + { <nl> + public ByteBuffer execute ( List < ByteBuffer > parameters ) <nl> + { <nl> + return UUIDSerializer . instance . serialize ( UUID . randomUUID ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isPure ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + } ; <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 159d242 . . 75f4cee 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 * Fix race condition in Batch CLE ( CASSANDRA - 6860 ) 
 * Improve cleanup / scrub / upgradesstables failure handling ( CASSANDRA - 6774 ) 
 Merged from 2 . 0 : 
 + * Add uuid ( ) function ( CASSANDRA - 6473 ) 
 * Omit tombstones from schema digests ( CASSANDRA - 6862 ) 
 * Include correct consistencyLevel in LWT timeout ( CASSANDRA - 6884 ) 
 * Lower chances for losing new SSTables during nodetool refresh and 
 diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index ed0c773 . . 7f794e0 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 1006 , 6 + 1006 , 10 @ @ CREATE TABLE users ( 
 
 then the @ token @ function will take a single argument of type @ text @ ( in that case , the partition key is @ userid @ ( there is no clustering columns so the partition key is the same than the primary key ) ) , and the return type will be @ bigint @ . 
 
 + h3 ( # uuidFun ) . Uuid 
 + 
 + The @ uuid @ function takes no parameters and generates a random type 4 uuid suitable for use in INSERT or SET statements . 
 + 
 h3 ( # timeuuidFun ) . Timeuuid functions 
 
 h4 . @ now @ 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 index 27f8b3c . . 72aac3f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 @ @ - 44 , 6 + 44 , 7 @ @ public abstract class Functions 
 declared . put ( " maxtimeuuid " , AbstractFunction . factory ( TimeuuidFcts . maxTimeuuidFct ) ) ; 
 declared . put ( " dateof " , AbstractFunction . factory ( TimeuuidFcts . dateOfFct ) ) ; 
 declared . put ( " unixtimestampof " , AbstractFunction . factory ( TimeuuidFcts . unixTimestampOfFct ) ) ; 
 + declared . put ( " uuid " , AbstractFunction . factory ( UuidFcts . uuidFct ) ) ; 
 
 for ( CQL3Type type : CQL3Type . Native . values ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java 
 new file mode 100644 
 index 0000000 . . 718bcbc 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / UuidFcts . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . functions ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . List ; 
 + import java . util . UUID ; 
 + 
 + import org . apache . cassandra . db . marshal . UUIDType ; 
 + import org . apache . cassandra . serializers . UUIDSerializer ; 
 + 
 + public abstract class UuidFcts 
 + { 
 + public static final Function uuidFct = new AbstractFunction ( " uuid " , UUIDType . instance ) 
 + { 
 + public ByteBuffer execute ( List < ByteBuffer > parameters ) 
 + { 
 + return UUIDSerializer . instance . serialize ( UUID . randomUUID ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isPure ( ) 
 + { 
 + return false ; 
 + } 
 + } ; 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
