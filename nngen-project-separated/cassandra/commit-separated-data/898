BLEU SCORE: 0.010418644977434674

TEST MSG: JSON datetime formatting needs timezone ( backported from trunk )
GENERATED MSG: expand fromString parsing of TimeUUIDType . patch by eevans , reviewed by gdusbabek . CASSANDRA - 2262

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3641816 . . 91179b3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 7 <nl> + * JSON datetime formatting needs timezone ( CASSANDRA - 11137 ) <nl> * Fix is _ dense recalculation for Thrift - updated tables ( CASSANDRA - 11502 ) <nl> * Remove unnescessary file existence check during anticompaction ( CASSANDRA - 11660 ) <nl> * Add missing files to debian packages ( CASSANDRA - 11642 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index e8f4e66 . . a3ba0dd 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 13 , 6 + 13 , 14 @ @ restore snapshots created with the previous major version using the <nl> ' sstableloader ' tool . You can upgrade the file format of your snapshots <nl> using the provided ' sstableupgrade ' tool . <nl> <nl> + 2 . 2 . 7 <nl> + = = = = = <nl> + <nl> + New features <nl> + - - - - - - - - - - - - <nl> + - JSON timestamps are now in UTC and contain the timezone information , see <nl> + CASSANDRA - 11137 for more details . <nl> + <nl> 2 . 2 . 6 <nl> = = = = = <nl> <nl> diff - - git a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> index 78ee7e7 . . 77a5df9 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import java . nio . ByteBuffer ; <nl> import java . text . SimpleDateFormat ; <nl> import java . text . ParseException ; <nl> - import java . util . Date ; <nl> + import java . util . * ; <nl> import java . util . regex . Pattern ; <nl> <nl> import org . apache . commons . lang3 . time . DateUtils ; <nl> @ @ - 48 , 11 + 48 , 11 @ @ public class TimestampSerializer implements TypeSerializer < Date > <nl> " yyyy - MM - dd HH : mm : ssX " , <nl> " yyyy - MM - dd HH : mm : ssXX " , <nl> " yyyy - MM - dd HH : mm : ssXXX " , <nl> - " yyyy - MM - dd HH : mm : ss . SSS " , / / TO _ JSON _ FORMAT <nl> + " yyyy - MM - dd HH : mm : ss . SSS " , <nl> " yyyy - MM - dd HH : mm : ss . SSS z " , <nl> " yyyy - MM - dd HH : mm : ss . SSS zz " , <nl> " yyyy - MM - dd HH : mm : ss . SSS zzz " , <nl> - " yyyy - MM - dd HH : mm : ss . SSSX " , <nl> + " yyyy - MM - dd HH : mm : ss . SSSX " , / / TO _ JSON _ FORMAT <nl> " yyyy - MM - dd HH : mm : ss . SSSXX " , <nl> " yyyy - MM - dd HH : mm : ss . SSSXXX " , <nl> " yyyy - MM - dd ' T ' HH : mm " , <nl> @ @ - 96 , 11 + 96 , 14 @ @ public class TimestampSerializer implements TypeSerializer < Date > <nl> } <nl> } ; <nl> <nl> + private static final String TO _ JSON _ FORMAT = dateStringPatterns [ 19 ] ; <nl> private static final ThreadLocal < SimpleDateFormat > FORMATTER _ TO _ JSON = new ThreadLocal < SimpleDateFormat > ( ) <nl> { <nl> protected SimpleDateFormat initialValue ( ) <nl> { <nl> - return new SimpleDateFormat ( dateStringPatterns [ 15 ] ) ; <nl> + SimpleDateFormat sdf = new SimpleDateFormat ( TO _ JSON _ FORMAT ) ; <nl> + sdf . setTimeZone ( TimeZone . getTimeZone ( " UTC " ) ) ; <nl> + return sdf ; <nl> } <nl> } ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> index 2c471b0 . . 824d436 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> @ @ - 618 , 8 + 618 , 10 @ @ public class JsonTest extends CQLTester <nl> assertRows ( execute ( " SELECT k , toJson ( timeval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " 00 : 00 : 00 . 000000123 \ " " ) ) ; <nl> <nl> / / = = = = = = = = = = = = = = = = timestamp = = = = = = = = = = = = = = = = <nl> - execute ( " INSERT INTO % s ( k , timestampval ) VALUES ( ? , ? ) " , 0 , new SimpleDateFormat ( " y - M - d " ) . parse ( " 2014 - 01 - 01 " ) ) ; <nl> - assertRows ( execute ( " SELECT k , toJson ( timestampval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " 2014 - 01 - 01 00 : 00 : 00 . 000 \ " " ) ) ; <nl> + SimpleDateFormat sdf = new SimpleDateFormat ( " y - M - d " ) ; <nl> + sdf . setTimeZone ( TimeZone . getTimeZone ( " UDT " ) ) ; <nl> + execute ( " INSERT INTO % s ( k , timestampval ) VALUES ( ? , ? ) " , 0 , sdf . parse ( " 2014 - 01 - 01 " ) ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( timestampval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " 2014 - 01 - 01 00 : 00 : 00 . 000Z \ " " ) ) ; <nl> <nl> / / = = = = = = = = = = = = = = = = timeuuid = = = = = = = = = = = = = = = = <nl> execute ( " INSERT INTO % s ( k , timeuuidval ) VALUES ( ? , ? ) " , 0 , UUID . fromString ( " 6bddc89a - 5644 - 11e4 - 97fc - 56847afe9799 " ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 50cd87b . . e02ea53 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 1641 , 7 + 1641 , 14 @ @ public class CliClient extends CliUserHelp <nl> if ( comparator = = null ) / / default comparator is BytesType <nl> comparator = BytesType . instance ; <nl> <nl> - return comparator . fromString ( object ) ; <nl> + try <nl> + { <nl> + return comparator . fromString ( object ) ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + throw new RuntimeException ( e . toString ( ) ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> index 4b26572 . . 1b53563 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . * ; <nl> <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . BytesType ; <nl> + import org . apache . cassandra . db . marshal . MarshalException ; <nl> import org . apache . commons . cli . * ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 514 , 7 + 515 , 14 @ @ public class SSTableImport <nl> * / <nl> private static ByteBuffer stringAsType ( String content , AbstractType type ) <nl> { <nl> - return ( type = = BytesType . instance ) ? hexToBytes ( content ) : type . fromString ( content ) ; <nl> + try <nl> + { <nl> + return ( type = = BytesType . instance ) ? hexToBytes ( content ) : type . fromString ( content ) ; <nl> + } <nl> + catch ( MarshalException e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3641816 . . 91179b3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 7 
 + * JSON datetime formatting needs timezone ( CASSANDRA - 11137 ) 
 * Fix is _ dense recalculation for Thrift - updated tables ( CASSANDRA - 11502 ) 
 * Remove unnescessary file existence check during anticompaction ( CASSANDRA - 11660 ) 
 * Add missing files to debian packages ( CASSANDRA - 11642 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index e8f4e66 . . a3ba0dd 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 13 , 6 + 13 , 14 @ @ restore snapshots created with the previous major version using the 
 ' sstableloader ' tool . You can upgrade the file format of your snapshots 
 using the provided ' sstableupgrade ' tool . 
 
 + 2 . 2 . 7 
 + = = = = = 
 + 
 + New features 
 + - - - - - - - - - - - - 
 + - JSON timestamps are now in UTC and contain the timezone information , see 
 + CASSANDRA - 11137 for more details . 
 + 
 2 . 2 . 6 
 = = = = = 
 
 diff - - git a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 index 78ee7e7 . . 77a5df9 100644 
 - - - a / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / TimestampSerializer . java 
 @ @ - 22 , 7 + 22 , 7 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 import java . nio . ByteBuffer ; 
 import java . text . SimpleDateFormat ; 
 import java . text . ParseException ; 
 - import java . util . Date ; 
 + import java . util . * ; 
 import java . util . regex . Pattern ; 
 
 import org . apache . commons . lang3 . time . DateUtils ; 
 @ @ - 48 , 11 + 48 , 11 @ @ public class TimestampSerializer implements TypeSerializer < Date > 
 " yyyy - MM - dd HH : mm : ssX " , 
 " yyyy - MM - dd HH : mm : ssXX " , 
 " yyyy - MM - dd HH : mm : ssXXX " , 
 - " yyyy - MM - dd HH : mm : ss . SSS " , / / TO _ JSON _ FORMAT 
 + " yyyy - MM - dd HH : mm : ss . SSS " , 
 " yyyy - MM - dd HH : mm : ss . SSS z " , 
 " yyyy - MM - dd HH : mm : ss . SSS zz " , 
 " yyyy - MM - dd HH : mm : ss . SSS zzz " , 
 - " yyyy - MM - dd HH : mm : ss . SSSX " , 
 + " yyyy - MM - dd HH : mm : ss . SSSX " , / / TO _ JSON _ FORMAT 
 " yyyy - MM - dd HH : mm : ss . SSSXX " , 
 " yyyy - MM - dd HH : mm : ss . SSSXXX " , 
 " yyyy - MM - dd ' T ' HH : mm " , 
 @ @ - 96 , 11 + 96 , 14 @ @ public class TimestampSerializer implements TypeSerializer < Date > 
 } 
 } ; 
 
 + private static final String TO _ JSON _ FORMAT = dateStringPatterns [ 19 ] ; 
 private static final ThreadLocal < SimpleDateFormat > FORMATTER _ TO _ JSON = new ThreadLocal < SimpleDateFormat > ( ) 
 { 
 protected SimpleDateFormat initialValue ( ) 
 { 
 - return new SimpleDateFormat ( dateStringPatterns [ 15 ] ) ; 
 + SimpleDateFormat sdf = new SimpleDateFormat ( TO _ JSON _ FORMAT ) ; 
 + sdf . setTimeZone ( TimeZone . getTimeZone ( " UTC " ) ) ; 
 + return sdf ; 
 } 
 } ; 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 index 2c471b0 . . 824d436 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 @ @ - 618 , 8 + 618 , 10 @ @ public class JsonTest extends CQLTester 
 assertRows ( execute ( " SELECT k , toJson ( timeval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " 00 : 00 : 00 . 000000123 \ " " ) ) ; 
 
 / / = = = = = = = = = = = = = = = = timestamp = = = = = = = = = = = = = = = = 
 - execute ( " INSERT INTO % s ( k , timestampval ) VALUES ( ? , ? ) " , 0 , new SimpleDateFormat ( " y - M - d " ) . parse ( " 2014 - 01 - 01 " ) ) ; 
 - assertRows ( execute ( " SELECT k , toJson ( timestampval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " 2014 - 01 - 01 00 : 00 : 00 . 000 \ " " ) ) ; 
 + SimpleDateFormat sdf = new SimpleDateFormat ( " y - M - d " ) ; 
 + sdf . setTimeZone ( TimeZone . getTimeZone ( " UDT " ) ) ; 
 + execute ( " INSERT INTO % s ( k , timestampval ) VALUES ( ? , ? ) " , 0 , sdf . parse ( " 2014 - 01 - 01 " ) ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( timestampval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " 2014 - 01 - 01 00 : 00 : 00 . 000Z \ " " ) ) ; 
 
 / / = = = = = = = = = = = = = = = = timeuuid = = = = = = = = = = = = = = = = 
 execute ( " INSERT INTO % s ( k , timeuuidval ) VALUES ( ? , ? ) " , 0 , UUID . fromString ( " 6bddc89a - 5644 - 11e4 - 97fc - 56847afe9799 " ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 50cd87b . . e02ea53 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 1641 , 7 + 1641 , 14 @ @ public class CliClient extends CliUserHelp 
 if ( comparator = = null ) / / default comparator is BytesType 
 comparator = BytesType . instance ; 
 
 - return comparator . fromString ( object ) ; 
 + try 
 + { 
 + return comparator . fromString ( object ) ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + throw new RuntimeException ( e . toString ( ) ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 index 4b26572 . . 1b53563 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableImport . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . * ; 
 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . BytesType ; 
 + import org . apache . cassandra . db . marshal . MarshalException ; 
 import org . apache . commons . cli . * ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 514 , 7 + 515 , 14 @ @ public class SSTableImport 
 * / 
 private static ByteBuffer stringAsType ( String content , AbstractType type ) 
 { 
 - return ( type = = BytesType . instance ) ? hexToBytes ( content ) : type . fromString ( content ) ; 
 + try 
 + { 
 + return ( type = = BytesType . instance ) ? hexToBytes ( content ) : type . fromString ( content ) ; 
 + } 
 + catch ( MarshalException e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 } 
 
 }
