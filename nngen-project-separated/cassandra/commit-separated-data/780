BLEU SCORE: 0.02383853510228548

TEST MSG: combine all the architecture alignment checks into one place
GENERATED MSG: Introduce SafeMemory for CompressionMetadata . Writer

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java <nl> index 78950ce . . bd87f5e 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / Memory . java <nl> + + + b / src / java / org / apache / cassandra / io / util / Memory . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . ByteOrder ; <nl> <nl> import net . nicoulaj . compilecommand . annotations . Inline ; <nl> + <nl> + import org . apache . cassandra . utils . Architecture ; <nl> import org . apache . cassandra . utils . FastByteOperations ; <nl> import org . apache . cassandra . utils . concurrent . Ref ; <nl> import org . apache . cassandra . utils . memory . MemoryUtil ; <nl> @ @ - 51 , 17 + 53 , 9 @ @ public class Memory implements AutoCloseable <nl> private static final long BYTE _ ARRAY _ BASE _ OFFSET = unsafe . arrayBaseOffset ( byte [ ] . class ) ; <nl> <nl> private static final boolean bigEndian = ByteOrder . nativeOrder ( ) . equals ( ByteOrder . BIG _ ENDIAN ) ; <nl> - private static final boolean unaligned ; <nl> <nl> public static final ByteBuffer [ ] NO _ BYTE _ BUFFERS = new ByteBuffer [ 0 ] ; <nl> <nl> - static <nl> - { <nl> - String arch = System . getProperty ( " os . arch " ) ; <nl> - unaligned = arch . equals ( " i386 " ) | | arch . equals ( " x86 " ) <nl> - | | arch . equals ( " amd64 " ) | | arch . equals ( " x86 _ 64 " ) | | arch . equals ( " s390x " ) ; <nl> - } <nl> - <nl> protected long peer ; <nl> / / size of the memory region <nl> protected final long size ; <nl> @ @ - 113 , 7 + 107 , 7 @ @ public class Memory implements AutoCloseable <nl> public void setLong ( long offset , long l ) <nl> { <nl> checkBounds ( offset , offset + 8 ) ; <nl> - if ( unaligned ) <nl> + if ( Architecture . IS _ UNALIGNED ) <nl> { <nl> unsafe . putLong ( peer + offset , l ) ; <nl> } <nl> @ @ - 152 , 7 + 146 , 7 @ @ public class Memory implements AutoCloseable <nl> public void setInt ( long offset , int l ) <nl> { <nl> checkBounds ( offset , offset + 4 ) ; <nl> - if ( unaligned ) <nl> + if ( Architecture . IS _ UNALIGNED ) <nl> { <nl> unsafe . putInt ( peer + offset , l ) ; <nl> } <nl> @ @ - 183 , 7 + 177 , 7 @ @ public class Memory implements AutoCloseable <nl> public void setShort ( long offset , short l ) <nl> { <nl> checkBounds ( offset , offset + 2 ) ; <nl> - if ( unaligned ) <nl> + if ( Architecture . IS _ UNALIGNED ) <nl> { <nl> unsafe . putShort ( peer + offset , l ) ; <nl> } <nl> @ @ - 258 , 7 + 252 , 7 @ @ public class Memory implements AutoCloseable <nl> public long getLong ( long offset ) <nl> { <nl> checkBounds ( offset , offset + 8 ) ; <nl> - if ( unaligned ) { <nl> + if ( Architecture . IS _ UNALIGNED ) { <nl> return unsafe . getLong ( peer + offset ) ; <nl> } else { <nl> return getLongByByte ( peer + offset ) ; <nl> @ @ - 290 , 7 + 284 , 7 @ @ public class Memory implements AutoCloseable <nl> public int getInt ( long offset ) <nl> { <nl> checkBounds ( offset , offset + 4 ) ; <nl> - if ( unaligned ) { <nl> + if ( Architecture . IS _ UNALIGNED ) { <nl> return unsafe . getInt ( peer + offset ) ; <nl> } else { <nl> return getIntByByte ( peer + offset ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / Architecture . java b / src / java / org / apache / cassandra / utils / Architecture . java <nl> new file mode 100644 <nl> index 0000000 . . 3173f8e <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / Architecture . java <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . Set ; <nl> + <nl> + import com . google . common . collect . Sets ; <nl> + <nl> + public final class Architecture <nl> + { <nl> + / / Note that s390x architecture are not officially supported and adding it here is only done out of convenience <nl> + / / for those that want to run C * on this architecture at their own risk ( see # 11214 ) <nl> + private static final Set < String > UNALIGNED _ ARCH = Collections . unmodifiableSet ( Sets . newHashSet ( <nl> + " i386 " , <nl> + " x86 " , <nl> + " amd64 " , <nl> + " x86 _ 64 " , <nl> + " s390x " <nl> + ) ) ; <nl> + <nl> + public static final boolean IS _ UNALIGNED = UNALIGNED _ ARCH . contains ( System . getProperty ( " os . arch " ) ) ; <nl> + <nl> + private Architecture ( ) <nl> + { <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / FastByteOperations . java b / src / java / org / apache / cassandra / utils / FastByteOperations . java <nl> index cf8d305 . . 02c0dbb 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FastByteOperations . java <nl> + + + b / src / java / org / apache / cassandra / utils / FastByteOperations . java <nl> @ @ - 102 , 10 + 102 , 7 @ @ public class FastByteOperations <nl> * / <nl> static ByteOperations getBest ( ) <nl> { <nl> - String arch = System . getProperty ( " os . arch " ) ; <nl> - boolean unaligned = arch . equals ( " i386 " ) | | arch . equals ( " x86 " ) <nl> - | | arch . equals ( " amd64 " ) | | arch . equals ( " x86 _ 64 " ) | | arch . equals ( " s390x " ) ; <nl> - if ( ! unaligned ) <nl> + if ( ! Architecture . IS _ UNALIGNED ) <nl> return new PureJavaOperations ( ) ; <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> index 3a18964 . . 6c2e6fd 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> @ @ - 23 , 6 + 23 , 9 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . ByteOrder ; <nl> <nl> import com . sun . jna . Native ; <nl> + <nl> + import org . apache . cassandra . utils . Architecture ; <nl> + <nl> import sun . misc . Unsafe ; <nl> import sun . nio . ch . DirectBuffer ; <nl> <nl> @ @ - 44 , 17 + 47 , 10 @ @ public abstract class MemoryUtil <nl> <nl> private static final boolean BIG _ ENDIAN = ByteOrder . nativeOrder ( ) . equals ( ByteOrder . BIG _ ENDIAN ) ; <nl> <nl> - private static final boolean UNALIGNED ; <nl> - public static final boolean INVERTED _ ORDER ; <nl> + public static final boolean INVERTED _ ORDER = Architecture . IS _ UNALIGNED & & ! BIG _ ENDIAN ; <nl> <nl> static <nl> { <nl> - String arch = System . getProperty ( " os . arch " ) ; <nl> - / / Note that s390x architecture are not officially supported and adding it here is only done out of convenience <nl> - / / for those that want to run C * on this architecture at their own risk ( see # 11214 ) <nl> - UNALIGNED = arch . equals ( " i386 " ) | | arch . equals ( " x86 " ) <nl> - | | arch . equals ( " amd64 " ) | | arch . equals ( " x86 _ 64 " ) | | arch . equals ( " s390x " ) ; <nl> - INVERTED _ ORDER = UNALIGNED & & ! BIG _ ENDIAN ; <nl> try <nl> { <nl> Field field = sun . misc . Unsafe . class . getDeclaredField ( " theUnsafe " ) ; <nl> @ @ - 120 , 7 + 116 , 7 @ @ public abstract class MemoryUtil <nl> <nl> public static void setInt ( long address , int l ) <nl> { <nl> - if ( UNALIGNED ) <nl> + if ( Architecture . IS _ UNALIGNED ) <nl> unsafe . putInt ( address , l ) ; <nl> else <nl> putIntByByte ( address , l ) ; <nl> @ @ - 128 , 7 + 124 , 7 @ @ public abstract class MemoryUtil <nl> <nl> public static void setLong ( long address , long l ) <nl> { <nl> - if ( UNALIGNED ) <nl> + if ( Architecture . IS _ UNALIGNED ) <nl> unsafe . putLong ( address , l ) ; <nl> else <nl> putLongByByte ( address , l ) ; <nl> @ @ - 141 , 17 + 137 , 17 @ @ public abstract class MemoryUtil <nl> <nl> public static int getShort ( long address ) <nl> { <nl> - return ( UNALIGNED ? unsafe . getShort ( address ) : getShortByByte ( address ) ) & 0xffff ; <nl> + return ( Architecture . IS _ UNALIGNED ? unsafe . getShort ( address ) : getShortByByte ( address ) ) & 0xffff ; <nl> } <nl> <nl> public static int getInt ( long address ) <nl> { <nl> - return UNALIGNED ? unsafe . getInt ( address ) : getIntByByte ( address ) ; <nl> + return Architecture . IS _ UNALIGNED ? unsafe . getInt ( address ) : getIntByByte ( address ) ; <nl> } <nl> <nl> public static long getLong ( long address ) <nl> { <nl> - return UNALIGNED ? unsafe . getLong ( address ) : getLongByByte ( address ) ; <nl> + return Architecture . IS _ UNALIGNED ? unsafe . getLong ( address ) : getLongByByte ( address ) ; <nl> } <nl> <nl> public static ByteBuffer getByteBuffer ( long address , int length )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java 
 index 78950ce . . bd87f5e 100644 
 - - - a / src / java / org / apache / cassandra / io / util / Memory . java 
 + + + b / src / java / org / apache / cassandra / io / util / Memory . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . ByteBuffer ; 
 import java . nio . ByteOrder ; 
 
 import net . nicoulaj . compilecommand . annotations . Inline ; 
 + 
 + import org . apache . cassandra . utils . Architecture ; 
 import org . apache . cassandra . utils . FastByteOperations ; 
 import org . apache . cassandra . utils . concurrent . Ref ; 
 import org . apache . cassandra . utils . memory . MemoryUtil ; 
 @ @ - 51 , 17 + 53 , 9 @ @ public class Memory implements AutoCloseable 
 private static final long BYTE _ ARRAY _ BASE _ OFFSET = unsafe . arrayBaseOffset ( byte [ ] . class ) ; 
 
 private static final boolean bigEndian = ByteOrder . nativeOrder ( ) . equals ( ByteOrder . BIG _ ENDIAN ) ; 
 - private static final boolean unaligned ; 
 
 public static final ByteBuffer [ ] NO _ BYTE _ BUFFERS = new ByteBuffer [ 0 ] ; 
 
 - static 
 - { 
 - String arch = System . getProperty ( " os . arch " ) ; 
 - unaligned = arch . equals ( " i386 " ) | | arch . equals ( " x86 " ) 
 - | | arch . equals ( " amd64 " ) | | arch . equals ( " x86 _ 64 " ) | | arch . equals ( " s390x " ) ; 
 - } 
 - 
 protected long peer ; 
 / / size of the memory region 
 protected final long size ; 
 @ @ - 113 , 7 + 107 , 7 @ @ public class Memory implements AutoCloseable 
 public void setLong ( long offset , long l ) 
 { 
 checkBounds ( offset , offset + 8 ) ; 
 - if ( unaligned ) 
 + if ( Architecture . IS _ UNALIGNED ) 
 { 
 unsafe . putLong ( peer + offset , l ) ; 
 } 
 @ @ - 152 , 7 + 146 , 7 @ @ public class Memory implements AutoCloseable 
 public void setInt ( long offset , int l ) 
 { 
 checkBounds ( offset , offset + 4 ) ; 
 - if ( unaligned ) 
 + if ( Architecture . IS _ UNALIGNED ) 
 { 
 unsafe . putInt ( peer + offset , l ) ; 
 } 
 @ @ - 183 , 7 + 177 , 7 @ @ public class Memory implements AutoCloseable 
 public void setShort ( long offset , short l ) 
 { 
 checkBounds ( offset , offset + 2 ) ; 
 - if ( unaligned ) 
 + if ( Architecture . IS _ UNALIGNED ) 
 { 
 unsafe . putShort ( peer + offset , l ) ; 
 } 
 @ @ - 258 , 7 + 252 , 7 @ @ public class Memory implements AutoCloseable 
 public long getLong ( long offset ) 
 { 
 checkBounds ( offset , offset + 8 ) ; 
 - if ( unaligned ) { 
 + if ( Architecture . IS _ UNALIGNED ) { 
 return unsafe . getLong ( peer + offset ) ; 
 } else { 
 return getLongByByte ( peer + offset ) ; 
 @ @ - 290 , 7 + 284 , 7 @ @ public class Memory implements AutoCloseable 
 public int getInt ( long offset ) 
 { 
 checkBounds ( offset , offset + 4 ) ; 
 - if ( unaligned ) { 
 + if ( Architecture . IS _ UNALIGNED ) { 
 return unsafe . getInt ( peer + offset ) ; 
 } else { 
 return getIntByByte ( peer + offset ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / Architecture . java b / src / java / org / apache / cassandra / utils / Architecture . java 
 new file mode 100644 
 index 0000000 . . 3173f8e 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / Architecture . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Collections ; 
 + import java . util . Set ; 
 + 
 + import com . google . common . collect . Sets ; 
 + 
 + public final class Architecture 
 + { 
 + / / Note that s390x architecture are not officially supported and adding it here is only done out of convenience 
 + / / for those that want to run C * on this architecture at their own risk ( see # 11214 ) 
 + private static final Set < String > UNALIGNED _ ARCH = Collections . unmodifiableSet ( Sets . newHashSet ( 
 + " i386 " , 
 + " x86 " , 
 + " amd64 " , 
 + " x86 _ 64 " , 
 + " s390x " 
 + ) ) ; 
 + 
 + public static final boolean IS _ UNALIGNED = UNALIGNED _ ARCH . contains ( System . getProperty ( " os . arch " ) ) ; 
 + 
 + private Architecture ( ) 
 + { 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / FastByteOperations . java b / src / java / org / apache / cassandra / utils / FastByteOperations . java 
 index cf8d305 . . 02c0dbb 100644 
 - - - a / src / java / org / apache / cassandra / utils / FastByteOperations . java 
 + + + b / src / java / org / apache / cassandra / utils / FastByteOperations . java 
 @ @ - 102 , 10 + 102 , 7 @ @ public class FastByteOperations 
 * / 
 static ByteOperations getBest ( ) 
 { 
 - String arch = System . getProperty ( " os . arch " ) ; 
 - boolean unaligned = arch . equals ( " i386 " ) | | arch . equals ( " x86 " ) 
 - | | arch . equals ( " amd64 " ) | | arch . equals ( " x86 _ 64 " ) | | arch . equals ( " s390x " ) ; 
 - if ( ! unaligned ) 
 + if ( ! Architecture . IS _ UNALIGNED ) 
 return new PureJavaOperations ( ) ; 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 index 3a18964 . . 6c2e6fd 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 @ @ - 23 , 6 + 23 , 9 @ @ import java . nio . ByteBuffer ; 
 import java . nio . ByteOrder ; 
 
 import com . sun . jna . Native ; 
 + 
 + import org . apache . cassandra . utils . Architecture ; 
 + 
 import sun . misc . Unsafe ; 
 import sun . nio . ch . DirectBuffer ; 
 
 @ @ - 44 , 17 + 47 , 10 @ @ public abstract class MemoryUtil 
 
 private static final boolean BIG _ ENDIAN = ByteOrder . nativeOrder ( ) . equals ( ByteOrder . BIG _ ENDIAN ) ; 
 
 - private static final boolean UNALIGNED ; 
 - public static final boolean INVERTED _ ORDER ; 
 + public static final boolean INVERTED _ ORDER = Architecture . IS _ UNALIGNED & & ! BIG _ ENDIAN ; 
 
 static 
 { 
 - String arch = System . getProperty ( " os . arch " ) ; 
 - / / Note that s390x architecture are not officially supported and adding it here is only done out of convenience 
 - / / for those that want to run C * on this architecture at their own risk ( see # 11214 ) 
 - UNALIGNED = arch . equals ( " i386 " ) | | arch . equals ( " x86 " ) 
 - | | arch . equals ( " amd64 " ) | | arch . equals ( " x86 _ 64 " ) | | arch . equals ( " s390x " ) ; 
 - INVERTED _ ORDER = UNALIGNED & & ! BIG _ ENDIAN ; 
 try 
 { 
 Field field = sun . misc . Unsafe . class . getDeclaredField ( " theUnsafe " ) ; 
 @ @ - 120 , 7 + 116 , 7 @ @ public abstract class MemoryUtil 
 
 public static void setInt ( long address , int l ) 
 { 
 - if ( UNALIGNED ) 
 + if ( Architecture . IS _ UNALIGNED ) 
 unsafe . putInt ( address , l ) ; 
 else 
 putIntByByte ( address , l ) ; 
 @ @ - 128 , 7 + 124 , 7 @ @ public abstract class MemoryUtil 
 
 public static void setLong ( long address , long l ) 
 { 
 - if ( UNALIGNED ) 
 + if ( Architecture . IS _ UNALIGNED ) 
 unsafe . putLong ( address , l ) ; 
 else 
 putLongByByte ( address , l ) ; 
 @ @ - 141 , 17 + 137 , 17 @ @ public abstract class MemoryUtil 
 
 public static int getShort ( long address ) 
 { 
 - return ( UNALIGNED ? unsafe . getShort ( address ) : getShortByByte ( address ) ) & 0xffff ; 
 + return ( Architecture . IS _ UNALIGNED ? unsafe . getShort ( address ) : getShortByByte ( address ) ) & 0xffff ; 
 } 
 
 public static int getInt ( long address ) 
 { 
 - return UNALIGNED ? unsafe . getInt ( address ) : getIntByByte ( address ) ; 
 + return Architecture . IS _ UNALIGNED ? unsafe . getInt ( address ) : getIntByByte ( address ) ; 
 } 
 
 public static long getLong ( long address ) 
 { 
 - return UNALIGNED ? unsafe . getLong ( address ) : getLongByByte ( address ) ; 
 + return Architecture . IS _ UNALIGNED ? unsafe . getLong ( address ) : getLongByByte ( address ) ; 
 } 
 
 public static ByteBuffer getByteBuffer ( long address , int length )

NEAREST DIFF:
ELIMINATEDSENTENCE
