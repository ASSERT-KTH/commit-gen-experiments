BLEU SCORE: 0.009427179820815307

TEST MSG: Don ' t use static dataDirectories field in Directories instances
GENERATED MSG: fix symlinks to data dir not working ; patch by yukim reviewed by jbellis for CASSANDRA - 5185

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f96c31a . . 4c50980 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 7 <nl> + * Don ' t use static dataDirectories field in Directories instances ( CASSANDRA - 11647 ) <nl> Merged from 3 . 0 : <nl> * Use CFS . initialDirectories when clearing snapshots ( CASSANDRA - 11705 ) <nl> * Allow compaction strategies to disable early open ( CASSANDRA - 11754 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index 3898180 . . 7876959 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 296 , 7 + 296 , 7 @ @ public class Directories <nl> { <nl> if ( directory ! = null ) <nl> { <nl> - for ( DataDirectory dataDirectory : dataDirectories ) <nl> + for ( DataDirectory dataDirectory : paths ) <nl> { <nl> if ( directory . getAbsolutePath ( ) . startsWith ( dataDirectory . location . getAbsolutePath ( ) ) ) <nl> return dataDirectory ; <nl> @ @ - 464 , 7 + 464 , 7 @ @ public class Directories <nl> public DataDirectory [ ] getWriteableLocations ( ) <nl> { <nl> List < DataDirectory > nonBlacklistedDirs = new ArrayList < > ( ) ; <nl> - for ( DataDirectory dir : dataDirectories ) <nl> + for ( DataDirectory dir : paths ) <nl> { <nl> if ( ! BlacklistedDirectories . isUnwritable ( dir . location ) ) <nl> nonBlacklistedDirs . add ( dir ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1ad77b1 . . 1c414bc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * fix ConcurrentModificationException in getBootstrapSource ( CASSANDRA - 5170 ) <nl> * fix sstable maxtimestamp for row deletes and pre - 1 . 1 . 1 sstables ( CASSANDRA - 5153 ) <nl> * fix start key / end token validation for wide row iteration ( CASSANDRA - 5168 ) <nl> + * add ConfigHelper support for Thrift frame and max message sizes ( CASSANDRA - 5188 ) <nl> <nl> <nl> 1 . 1 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java <nl> index e01ada5 . . caea616 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java <nl> @ @ - 154 , 8 + 154 , 8 @ @ public class ColumnFamilyOutputFormat extends OutputFormat < ByteBuffer , List < Mutat <nl> throws InvalidRequestException , TException , AuthenticationException , AuthorizationException , LoginException <nl> { <nl> logger . debug ( " Creating authenticated client for CF output format " ) ; <nl> - TTransport transport = ConfigHelper . getOutputTransportFactory ( conf ) . openTransport ( socket ) ; <nl> - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport ) ; <nl> + TTransport transport = ConfigHelper . getOutputTransportFactory ( conf ) . openTransport ( socket , conf ) ; <nl> + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , ConfigHelper . getThriftMaxMessageLength ( conf ) ) ; <nl> Cassandra . Client client = new Cassandra . Client ( binaryProtocol ) ; <nl> client . set _ keyspace ( ConfigHelper . getOutputKeyspace ( conf ) ) ; <nl> if ( ConfigHelper . getOutputKeyspaceUserName ( conf ) ! = null ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> index 83e436b5 . . a40e6c5 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> @ @ - 161 , 8 + 161 , 8 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap <nl> / / create connection using thrift <nl> String location = getLocation ( ) ; <nl> socket = new TSocket ( location , ConfigHelper . getInputRpcPort ( conf ) ) ; <nl> - TTransport transport = ConfigHelper . getInputTransportFactory ( conf ) . openTransport ( socket ) ; <nl> - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport ) ; <nl> + TTransport transport = ConfigHelper . getInputTransportFactory ( conf ) . openTransport ( socket , conf ) ; <nl> + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , ConfigHelper . getThriftMaxMessageLength ( conf ) ) ; <nl> client = new Cassandra . Client ( binaryProtocol ) ; <nl> <nl> / / log in <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> index 4b49387 . . ad29903 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java <nl> @ @ - 76 , 6 + 76 , 8 @ @ public class ConfigHelper <nl> private static final String OUTPUT _ COMPRESSION _ CHUNK _ LENGTH = " cassandra . output . compression . length " ; <nl> private static final String INPUT _ TRANSPORT _ FACTORY _ CLASS = " cassandra . input . transport . factory . class " ; <nl> private static final String OUTPUT _ TRANSPORT _ FACTORY _ CLASS = " cassandra . output . transport . factory . class " ; <nl> + private static final String THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB = " cassandra . thrift . framed . size _ mb " ; <nl> + private static final String THRIFT _ MAX _ MESSAGE _ LENGTH _ IN _ MB = " cassandra . thrift . message . max _ size _ mb " ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( ConfigHelper . class ) ; <nl> <nl> @ @ - 466 , 6 + 468 , 34 @ @ public class ConfigHelper <nl> conf . set ( OUTPUT _ COMPRESSION _ CHUNK _ LENGTH , length ) ; <nl> } <nl> <nl> + public static void setThriftFramedTransportSizeInMb ( Configuration conf , int frameSizeInMB ) <nl> + { <nl> + conf . setInt ( THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB , frameSizeInMB ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param conf The configuration to use . <nl> + * @ return Value ( converts MBs to Bytes ) set by { @ link setThriftFramedTransportSizeInMb ( Configuration , int ) } or default of 15MB <nl> + * / <nl> + public static int getThriftFramedTransportSize ( Configuration conf ) <nl> + { <nl> + return conf . getInt ( THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB , 15 ) * 1024 * 1024 ; / / 15MB is default in Cassandra <nl> + } <nl> + <nl> + public static void setThriftMaxMessageLengthInMb ( Configuration conf , int maxMessageSizeInMB ) <nl> + { <nl> + conf . setInt ( THRIFT _ MAX _ MESSAGE _ LENGTH _ IN _ MB , maxMessageSizeInMB ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param conf The configuration to use . <nl> + * @ return Value ( converts MBs to Bytes ) set by { @ link setThriftMaxMessageLengthInMb ( Configuration , int ) } or default of 16MB <nl> + * / <nl> + public static int getThriftMaxMessageLength ( Configuration conf ) <nl> + { <nl> + return conf . getInt ( THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB , 16 ) * 1024 * 1024 ; / / 16MB is default in Cassandra <nl> + } <nl> + <nl> public static CompressionParameters getOutputCompressionParamaters ( Configuration conf ) <nl> { <nl> if ( getOutputCompressionClass ( conf ) = = null ) <nl> @ @ - 526 , 8 + 556 , 8 @ @ public class ConfigHelper <nl> try <nl> { <nl> TSocket socket = new TSocket ( host , port ) ; <nl> - TTransport transport = getInputTransportFactory ( conf ) . openTransport ( socket ) ; <nl> - return new Cassandra . Client ( new TBinaryProtocol ( transport ) ) ; <nl> + TTransport transport = getInputTransportFactory ( conf ) . openTransport ( socket , conf ) ; <nl> + return new Cassandra . Client ( new TBinaryProtocol ( transport , getThriftMaxMessageLength ( conf ) ) ) ; <nl> } <nl> catch ( LoginException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ITransportFactory . java b / src / java / org / apache / cassandra / thrift / ITransportFactory . java <nl> index 4940fc6 . . e3e87c2 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ITransportFactory . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ITransportFactory . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . thrift ; <nl> * <nl> * / <nl> <nl> + import org . apache . hadoop . conf . Configuration ; <nl> import org . apache . thrift . transport . TSocket ; <nl> import org . apache . thrift . transport . TTransport ; <nl> import org . apache . thrift . transport . TTransportException ; <nl> @ @ - 30 , 5 + 31 , 5 @ @ import javax . security . auth . login . LoginException ; <nl> <nl> public interface ITransportFactory <nl> { <nl> - TTransport openTransport ( TSocket socket ) throws LoginException , TTransportException ; <nl> + TTransport openTransport ( TSocket socket , Configuration conf ) throws LoginException , TTransportException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java b / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java <nl> index aef6c83 . . 3d59f72 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java <nl> @ @ - 37 , 6 + 37 , 14 @ @ public class TBinaryProtocol extends org . apache . thrift . protocol . TBinaryProtocol <nl> this ( trans , false , true ) ; <nl> } <nl> <nl> + public TBinaryProtocol ( TTransport trans , int readLength ) <nl> + { <nl> + this ( trans ) ; <nl> + <nl> + if ( readLength > 0 ) <nl> + setReadLength ( readLength ) ; <nl> + } <nl> + <nl> public TBinaryProtocol ( TTransport trans , boolean strictRead , boolean strictWrite ) <nl> { <nl> super ( trans ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java b / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java <nl> index 09ae99e . . 792618d 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java <nl> @ @ - 21 , 16 + 21 , 19 @ @ package org . apache . cassandra . thrift ; <nl> * <nl> * / <nl> <nl> + import org . apache . cassandra . hadoop . ConfigHelper ; <nl> import org . apache . thrift . transport . TFramedTransport ; <nl> import org . apache . thrift . transport . TSocket ; <nl> import org . apache . thrift . transport . TTransport ; <nl> import org . apache . thrift . transport . TTransportException ; <nl> <nl> + import org . apache . hadoop . conf . Configuration ; <nl> + <nl> public class TFramedTransportFactory implements ITransportFactory <nl> { <nl> - public TTransport openTransport ( TSocket socket ) throws TTransportException <nl> + public TTransport openTransport ( TSocket socket , Configuration conf ) throws TTransportException <nl> { <nl> - TTransport transport = new TFramedTransport ( socket ) ; <nl> + TTransport transport = new TFramedTransport ( socket , ConfigHelper . getThriftFramedTransportSize ( conf ) ) ; <nl> transport . open ( ) ; <nl> return transport ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f96c31a . . 4c50980 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 7 
 + * Don ' t use static dataDirectories field in Directories instances ( CASSANDRA - 11647 ) 
 Merged from 3 . 0 : 
 * Use CFS . initialDirectories when clearing snapshots ( CASSANDRA - 11705 ) 
 * Allow compaction strategies to disable early open ( CASSANDRA - 11754 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index 3898180 . . 7876959 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 296 , 7 + 296 , 7 @ @ public class Directories 
 { 
 if ( directory ! = null ) 
 { 
 - for ( DataDirectory dataDirectory : dataDirectories ) 
 + for ( DataDirectory dataDirectory : paths ) 
 { 
 if ( directory . getAbsolutePath ( ) . startsWith ( dataDirectory . location . getAbsolutePath ( ) ) ) 
 return dataDirectory ; 
 @ @ - 464 , 7 + 464 , 7 @ @ public class Directories 
 public DataDirectory [ ] getWriteableLocations ( ) 
 { 
 List < DataDirectory > nonBlacklistedDirs = new ArrayList < > ( ) ; 
 - for ( DataDirectory dir : dataDirectories ) 
 + for ( DataDirectory dir : paths ) 
 { 
 if ( ! BlacklistedDirectories . isUnwritable ( dir . location ) ) 
 nonBlacklistedDirs . add ( dir ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1ad77b1 . . 1c414bc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * fix ConcurrentModificationException in getBootstrapSource ( CASSANDRA - 5170 ) 
 * fix sstable maxtimestamp for row deletes and pre - 1 . 1 . 1 sstables ( CASSANDRA - 5153 ) 
 * fix start key / end token validation for wide row iteration ( CASSANDRA - 5168 ) 
 + * add ConfigHelper support for Thrift frame and max message sizes ( CASSANDRA - 5188 ) 
 
 
 1 . 1 . 9 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java 
 index e01ada5 . . caea616 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyOutputFormat . java 
 @ @ - 154 , 8 + 154 , 8 @ @ public class ColumnFamilyOutputFormat extends OutputFormat < ByteBuffer , List < Mutat 
 throws InvalidRequestException , TException , AuthenticationException , AuthorizationException , LoginException 
 { 
 logger . debug ( " Creating authenticated client for CF output format " ) ; 
 - TTransport transport = ConfigHelper . getOutputTransportFactory ( conf ) . openTransport ( socket ) ; 
 - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport ) ; 
 + TTransport transport = ConfigHelper . getOutputTransportFactory ( conf ) . openTransport ( socket , conf ) ; 
 + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , ConfigHelper . getThriftMaxMessageLength ( conf ) ) ; 
 Cassandra . Client client = new Cassandra . Client ( binaryProtocol ) ; 
 client . set _ keyspace ( ConfigHelper . getOutputKeyspace ( conf ) ) ; 
 if ( ConfigHelper . getOutputKeyspaceUserName ( conf ) ! = null ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 index 83e436b5 . . a40e6c5 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 @ @ - 161 , 8 + 161 , 8 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap 
 / / create connection using thrift 
 String location = getLocation ( ) ; 
 socket = new TSocket ( location , ConfigHelper . getInputRpcPort ( conf ) ) ; 
 - TTransport transport = ConfigHelper . getInputTransportFactory ( conf ) . openTransport ( socket ) ; 
 - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport ) ; 
 + TTransport transport = ConfigHelper . getInputTransportFactory ( conf ) . openTransport ( socket , conf ) ; 
 + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , ConfigHelper . getThriftMaxMessageLength ( conf ) ) ; 
 client = new Cassandra . Client ( binaryProtocol ) ; 
 
 / / log in 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 index 4b49387 . . ad29903 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ConfigHelper . java 
 @ @ - 76 , 6 + 76 , 8 @ @ public class ConfigHelper 
 private static final String OUTPUT _ COMPRESSION _ CHUNK _ LENGTH = " cassandra . output . compression . length " ; 
 private static final String INPUT _ TRANSPORT _ FACTORY _ CLASS = " cassandra . input . transport . factory . class " ; 
 private static final String OUTPUT _ TRANSPORT _ FACTORY _ CLASS = " cassandra . output . transport . factory . class " ; 
 + private static final String THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB = " cassandra . thrift . framed . size _ mb " ; 
 + private static final String THRIFT _ MAX _ MESSAGE _ LENGTH _ IN _ MB = " cassandra . thrift . message . max _ size _ mb " ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( ConfigHelper . class ) ; 
 
 @ @ - 466 , 6 + 468 , 34 @ @ public class ConfigHelper 
 conf . set ( OUTPUT _ COMPRESSION _ CHUNK _ LENGTH , length ) ; 
 } 
 
 + public static void setThriftFramedTransportSizeInMb ( Configuration conf , int frameSizeInMB ) 
 + { 
 + conf . setInt ( THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB , frameSizeInMB ) ; 
 + } 
 + 
 + / * * 
 + * @ param conf The configuration to use . 
 + * @ return Value ( converts MBs to Bytes ) set by { @ link setThriftFramedTransportSizeInMb ( Configuration , int ) } or default of 15MB 
 + * / 
 + public static int getThriftFramedTransportSize ( Configuration conf ) 
 + { 
 + return conf . getInt ( THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB , 15 ) * 1024 * 1024 ; / / 15MB is default in Cassandra 
 + } 
 + 
 + public static void setThriftMaxMessageLengthInMb ( Configuration conf , int maxMessageSizeInMB ) 
 + { 
 + conf . setInt ( THRIFT _ MAX _ MESSAGE _ LENGTH _ IN _ MB , maxMessageSizeInMB ) ; 
 + } 
 + 
 + / * * 
 + * @ param conf The configuration to use . 
 + * @ return Value ( converts MBs to Bytes ) set by { @ link setThriftMaxMessageLengthInMb ( Configuration , int ) } or default of 16MB 
 + * / 
 + public static int getThriftMaxMessageLength ( Configuration conf ) 
 + { 
 + return conf . getInt ( THRIFT _ FRAMED _ TRANSPORT _ SIZE _ IN _ MB , 16 ) * 1024 * 1024 ; / / 16MB is default in Cassandra 
 + } 
 + 
 public static CompressionParameters getOutputCompressionParamaters ( Configuration conf ) 
 { 
 if ( getOutputCompressionClass ( conf ) = = null ) 
 @ @ - 526 , 8 + 556 , 8 @ @ public class ConfigHelper 
 try 
 { 
 TSocket socket = new TSocket ( host , port ) ; 
 - TTransport transport = getInputTransportFactory ( conf ) . openTransport ( socket ) ; 
 - return new Cassandra . Client ( new TBinaryProtocol ( transport ) ) ; 
 + TTransport transport = getInputTransportFactory ( conf ) . openTransport ( socket , conf ) ; 
 + return new Cassandra . Client ( new TBinaryProtocol ( transport , getThriftMaxMessageLength ( conf ) ) ) ; 
 } 
 catch ( LoginException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / thrift / ITransportFactory . java b / src / java / org / apache / cassandra / thrift / ITransportFactory . java 
 index 4940fc6 . . e3e87c2 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ITransportFactory . java 
 + + + b / src / java / org / apache / cassandra / thrift / ITransportFactory . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . thrift ; 
 * 
 * / 
 
 + import org . apache . hadoop . conf . Configuration ; 
 import org . apache . thrift . transport . TSocket ; 
 import org . apache . thrift . transport . TTransport ; 
 import org . apache . thrift . transport . TTransportException ; 
 @ @ - 30 , 5 + 31 , 5 @ @ import javax . security . auth . login . LoginException ; 
 
 public interface ITransportFactory 
 { 
 - TTransport openTransport ( TSocket socket ) throws LoginException , TTransportException ; 
 + TTransport openTransport ( TSocket socket , Configuration conf ) throws LoginException , TTransportException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java b / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java 
 index aef6c83 . . 3d59f72 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java 
 + + + b / src / java / org / apache / cassandra / thrift / TBinaryProtocol . java 
 @ @ - 37 , 6 + 37 , 14 @ @ public class TBinaryProtocol extends org . apache . thrift . protocol . TBinaryProtocol 
 this ( trans , false , true ) ; 
 } 
 
 + public TBinaryProtocol ( TTransport trans , int readLength ) 
 + { 
 + this ( trans ) ; 
 + 
 + if ( readLength > 0 ) 
 + setReadLength ( readLength ) ; 
 + } 
 + 
 public TBinaryProtocol ( TTransport trans , boolean strictRead , boolean strictWrite ) 
 { 
 super ( trans ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java b / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java 
 index 09ae99e . . 792618d 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java 
 + + + b / src / java / org / apache / cassandra / thrift / TFramedTransportFactory . java 
 @ @ - 21 , 16 + 21 , 19 @ @ package org . apache . cassandra . thrift ; 
 * 
 * / 
 
 + import org . apache . cassandra . hadoop . ConfigHelper ; 
 import org . apache . thrift . transport . TFramedTransport ; 
 import org . apache . thrift . transport . TSocket ; 
 import org . apache . thrift . transport . TTransport ; 
 import org . apache . thrift . transport . TTransportException ; 
 
 + import org . apache . hadoop . conf . Configuration ; 
 + 
 public class TFramedTransportFactory implements ITransportFactory 
 { 
 - public TTransport openTransport ( TSocket socket ) throws TTransportException 
 + public TTransport openTransport ( TSocket socket , Configuration conf ) throws TTransportException 
 { 
 - TTransport transport = new TFramedTransport ( socket ) ; 
 + TTransport transport = new TFramedTransport ( socket , ConfigHelper . getThriftFramedTransportSize ( conf ) ) ; 
 transport . open ( ) ; 
 return transport ; 
 }
