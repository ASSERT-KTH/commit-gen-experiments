BLEU SCORE: 0.02786973068084291

TEST MSG: ninja fix cassandra - stress rank latencies
GENERATED MSG: Remove errant System . exit from stress so it can reuse keyspaces .

TEST DIFF (one line): diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java <nl> index ab89d07 . . f989173 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class TimingIntervals <nl> } <nl> public String rankLatencies ( float rank ) <nl> { <nl> - return str ( TimingInterval . TimingParameter . MEDIANLATENCY , rank ) ; <nl> + return str ( TimingInterval . TimingParameter . RANKLATENCY , rank ) ; <nl> } <nl> public String errorCounts ( ) <nl> {
NEAREST DIFF (one line): diff - - git a / test / distributed / org / apache / cassandra / TestBase . java b / test / distributed / org / apache / cassandra / TestBase . java <nl> index 54ca631 . . c403204 100644 <nl> - - - a / test / distributed / org / apache / cassandra / TestBase . java <nl> + + + b / test / distributed / org / apache / cassandra / TestBase . java <nl> @ @ - 84 , 12 + 84 , 11 @ @ public abstract class TestBase <nl> Cassandra . Client client = controller . createClient ( hosts . get ( 0 ) ) ; <nl> Map < String , String > stratOptions = new HashMap < String , String > ( ) ; <nl> stratOptions . put ( " replication _ factor " , " " + rf ) ; <nl> - client . system _ add _ keyspace ( <nl> - new KsDef ( <nl> - name , <nl> - " org . apache . cassandra . locator . SimpleStrategy " , <nl> - Arrays . asList ( cfdef ) ) <nl> - . setStrategy _ options ( stratOptions ) ) ; <nl> + client . system _ add _ keyspace ( new KsDef ( name , <nl> + " org . apache . cassandra . locator . SimpleStrategy " , <nl> + Arrays . asList ( cfdef ) ) <nl> + . setStrategy _ options ( stratOptions ) <nl> + . setCf _ defs ( Collections . < CfDef > emptyList ( ) ) ) ; <nl> <nl> / / poll , until KS added <nl> for ( InetAddress host : hosts )

TEST DIFF:
diff - - git a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java 
 index ab89d07 . . f989173 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / util / TimingIntervals . java 
 @ @ - 97 , 7 + 97 , 7 @ @ public class TimingIntervals 
 } 
 public String rankLatencies ( float rank ) 
 { 
 - return str ( TimingInterval . TimingParameter . MEDIANLATENCY , rank ) ; 
 + return str ( TimingInterval . TimingParameter . RANKLATENCY , rank ) ; 
 } 
 public String errorCounts ( ) 
 {

NEAREST DIFF:
diff - - git a / test / distributed / org / apache / cassandra / TestBase . java b / test / distributed / org / apache / cassandra / TestBase . java 
 index 54ca631 . . c403204 100644 
 - - - a / test / distributed / org / apache / cassandra / TestBase . java 
 + + + b / test / distributed / org / apache / cassandra / TestBase . java 
 @ @ - 84 , 12 + 84 , 11 @ @ public abstract class TestBase 
 Cassandra . Client client = controller . createClient ( hosts . get ( 0 ) ) ; 
 Map < String , String > stratOptions = new HashMap < String , String > ( ) ; 
 stratOptions . put ( " replication _ factor " , " " + rf ) ; 
 - client . system _ add _ keyspace ( 
 - new KsDef ( 
 - name , 
 - " org . apache . cassandra . locator . SimpleStrategy " , 
 - Arrays . asList ( cfdef ) ) 
 - . setStrategy _ options ( stratOptions ) ) ; 
 + client . system _ add _ keyspace ( new KsDef ( name , 
 + " org . apache . cassandra . locator . SimpleStrategy " , 
 + Arrays . asList ( cfdef ) ) 
 + . setStrategy _ options ( stratOptions ) 
 + . setCf _ defs ( Collections . < CfDef > emptyList ( ) ) ) ; 
 
 / / poll , until KS added 
 for ( InetAddress host : hosts )
