BLEU SCORE: 0.02931251013275449

TEST MSG: Fix flaky unit test indexWithFailedInitializationIsNotQueryableAfterPartialRebuild
GENERATED MSG: Give more control over building to 2i impls

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a690e17 . . 03f5de8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Fix flaky indexWithFailedInitializationIsNotQueryableAfterPartialRebuild ( CASSANDRA - 13963 ) <nl> * Introduce leaf - only iterator ( CASSANDRA - 9988 ) <nl> * Upgrade Guava to 23 . 3 and Airline to 0 . 8 ( CASSANDRA - 13997 ) <nl> * Allow only one concurrent call to StatusLogger ( CASSANDRA - 12182 ) <nl> diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> index 27a9b16 . . b60d811 100644 <nl> - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> @ @ - 276 , 6 + 276 , 19 @ @ public class SecondaryIndexManager implements IndexRegistry , INotificationConsum <nl> return queryableIndexes . contains ( index . getIndexMetadata ( ) . name ) ; <nl> } <nl> <nl> + / * * <nl> + * Checks if the specified index has any running build task . <nl> + * <nl> + * @ param indexName the index name <nl> + * @ return { @ code true } if the index is building , { @ code false } otherwise <nl> + * / <nl> + @ VisibleForTesting <nl> + public synchronized boolean isIndexBuilding ( String indexName ) <nl> + { <nl> + AtomicInteger counter = inProgressBuilds . get ( indexName ) ; <nl> + return counter ! = null & & counter . get ( ) > 0 ; <nl> + } <nl> + <nl> public synchronized void removeIndex ( String indexName ) <nl> { <nl> Index index = unregisterIndex ( indexName ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 062a4bc . . b038ce0 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ import com . datastax . driver . core . ResultSet ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> + import org . apache . cassandra . index . SecondaryIndexManager ; <nl> import org . apache . cassandra . schema . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . functions . FunctionName ; <nl> @ @ - 736 , 6 + 737 , 38 @ @ public abstract class CQLTester <nl> return indexCreated ; <nl> } <nl> <nl> + / * * <nl> + * Index creation is asynchronous , this method waits until the specified index hasn ' t any building task running . <nl> + * < p > <nl> + * This method differs from { @ link # waitForIndex ( String , String , String ) } in that it doesn ' t require the index to be <nl> + * fully nor successfully built , so it can be used to wait for failing index builds . <nl> + * <nl> + * @ param keyspace the index keyspace name <nl> + * @ param indexName the index name <nl> + * @ return { @ code true } if the index build tasks have finished in 5 seconds , { @ code false } otherwise <nl> + * / <nl> + protected boolean waitForIndexBuilds ( String keyspace , String indexName ) throws InterruptedException <nl> + { <nl> + long start = System . currentTimeMillis ( ) ; <nl> + SecondaryIndexManager indexManager = getCurrentColumnFamilyStore ( keyspace ) . indexManager ; <nl> + <nl> + while ( true ) <nl> + { <nl> + if ( ! indexManager . isIndexBuilding ( indexName ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + else if ( System . currentTimeMillis ( ) - start > 5000 ) <nl> + { <nl> + return false ; <nl> + } <nl> + else <nl> + { <nl> + Thread . sleep ( 10 ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> protected void createIndexMayThrow ( String query ) throws Throwable <nl> { <nl> String fullQuery = formatQuery ( query ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java b / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java <nl> index ac3e5b2 . . def96a4 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java <nl> @ @ - 440 , 7 + 440 , 7 @ @ public class SecondaryIndexManagerTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void indexWithfailedInitializationIsQueryableAfterFullRebuild ( ) throws Throwable <nl> + public void indexWithFailedInitializationIsQueryableAfterFullRebuild ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> <nl> @ @ - 458 , 11 + 458 , 12 @ @ public class SecondaryIndexManagerTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> - public void indexWithfailedInitializationIsNotQueryableAfterPartialRebuild ( ) throws Throwable <nl> + public void indexWithFailedInitializationIsNotQueryableAfterPartialRebuild ( ) throws Throwable <nl> { <nl> TestingIndex . shouldFailCreate = true ; <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> String indexName = createIndex ( String . format ( " CREATE CUSTOM INDEX ON % % s ( c ) USING ' % s ' " , TestingIndex . class . getName ( ) ) ) ; <nl> + assertTrue ( waitForIndexBuilds ( KEYSPACE , indexName ) ) ; <nl> TestingIndex . shouldFailCreate = false ; <nl> <nl> / / the index shouldn ' t be queryable after the failed initialization <nl> @ @ - 472 , 6 + 473 , 7 @ @ public class SecondaryIndexManagerTest extends CQLTester <nl> <nl> / / a successful partial build doesn ' t set the index as queryable <nl> cfs . indexManager . handleNotification ( new SSTableAddedNotification ( cfs . getLiveSSTables ( ) , null ) , this ) ; <nl> + assertTrue ( waitForIndexBuilds ( KEYSPACE , indexName ) ) ; <nl> assertFalse ( cfs . indexManager . isIndexQueryable ( index ) ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a690e17 . . 03f5de8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Fix flaky indexWithFailedInitializationIsNotQueryableAfterPartialRebuild ( CASSANDRA - 13963 ) 
 * Introduce leaf - only iterator ( CASSANDRA - 9988 ) 
 * Upgrade Guava to 23 . 3 and Airline to 0 . 8 ( CASSANDRA - 13997 ) 
 * Allow only one concurrent call to StatusLogger ( CASSANDRA - 12182 ) 
 diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 index 27a9b16 . . b60d811 100644 
 - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 @ @ - 276 , 6 + 276 , 19 @ @ public class SecondaryIndexManager implements IndexRegistry , INotificationConsum 
 return queryableIndexes . contains ( index . getIndexMetadata ( ) . name ) ; 
 } 
 
 + / * * 
 + * Checks if the specified index has any running build task . 
 + * 
 + * @ param indexName the index name 
 + * @ return { @ code true } if the index is building , { @ code false } otherwise 
 + * / 
 + @ VisibleForTesting 
 + public synchronized boolean isIndexBuilding ( String indexName ) 
 + { 
 + AtomicInteger counter = inProgressBuilds . get ( indexName ) ; 
 + return counter ! = null & & counter . get ( ) > 0 ; 
 + } 
 + 
 public synchronized void removeIndex ( String indexName ) 
 { 
 Index index = unregisterIndex ( indexName ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 062a4bc . . b038ce0 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import com . datastax . driver . core . ResultSet ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 + import org . apache . cassandra . index . SecondaryIndexManager ; 
 import org . apache . cassandra . schema . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . functions . FunctionName ; 
 @ @ - 736 , 6 + 737 , 38 @ @ public abstract class CQLTester 
 return indexCreated ; 
 } 
 
 + / * * 
 + * Index creation is asynchronous , this method waits until the specified index hasn ' t any building task running . 
 + * < p > 
 + * This method differs from { @ link # waitForIndex ( String , String , String ) } in that it doesn ' t require the index to be 
 + * fully nor successfully built , so it can be used to wait for failing index builds . 
 + * 
 + * @ param keyspace the index keyspace name 
 + * @ param indexName the index name 
 + * @ return { @ code true } if the index build tasks have finished in 5 seconds , { @ code false } otherwise 
 + * / 
 + protected boolean waitForIndexBuilds ( String keyspace , String indexName ) throws InterruptedException 
 + { 
 + long start = System . currentTimeMillis ( ) ; 
 + SecondaryIndexManager indexManager = getCurrentColumnFamilyStore ( keyspace ) . indexManager ; 
 + 
 + while ( true ) 
 + { 
 + if ( ! indexManager . isIndexBuilding ( indexName ) ) 
 + { 
 + return true ; 
 + } 
 + else if ( System . currentTimeMillis ( ) - start > 5000 ) 
 + { 
 + return false ; 
 + } 
 + else 
 + { 
 + Thread . sleep ( 10 ) ; 
 + } 
 + } 
 + } 
 + 
 protected void createIndexMayThrow ( String query ) throws Throwable 
 { 
 String fullQuery = formatQuery ( query ) ; 
 diff - - git a / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java b / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java 
 index ac3e5b2 . . def96a4 100644 
 - - - a / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java 
 + + + b / test / unit / org / apache / cassandra / index / SecondaryIndexManagerTest . java 
 @ @ - 440 , 7 + 440 , 7 @ @ public class SecondaryIndexManagerTest extends CQLTester 
 } 
 
 @ Test 
 - public void indexWithfailedInitializationIsQueryableAfterFullRebuild ( ) throws Throwable 
 + public void indexWithFailedInitializationIsQueryableAfterFullRebuild ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 
 @ @ - 458 , 11 + 458 , 12 @ @ public class SecondaryIndexManagerTest extends CQLTester 
 } 
 
 @ Test 
 - public void indexWithfailedInitializationIsNotQueryableAfterPartialRebuild ( ) throws Throwable 
 + public void indexWithFailedInitializationIsNotQueryableAfterPartialRebuild ( ) throws Throwable 
 { 
 TestingIndex . shouldFailCreate = true ; 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 String indexName = createIndex ( String . format ( " CREATE CUSTOM INDEX ON % % s ( c ) USING ' % s ' " , TestingIndex . class . getName ( ) ) ) ; 
 + assertTrue ( waitForIndexBuilds ( KEYSPACE , indexName ) ) ; 
 TestingIndex . shouldFailCreate = false ; 
 
 / / the index shouldn ' t be queryable after the failed initialization 
 @ @ - 472 , 6 + 473 , 7 @ @ public class SecondaryIndexManagerTest extends CQLTester 
 
 / / a successful partial build doesn ' t set the index as queryable 
 cfs . indexManager . handleNotification ( new SSTableAddedNotification ( cfs . getLiveSSTables ( ) , null ) , this ) ; 
 + assertTrue ( waitForIndexBuilds ( KEYSPACE , indexName ) ) ; 
 assertFalse ( cfs . indexManager . isIndexQueryable ( index ) ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
