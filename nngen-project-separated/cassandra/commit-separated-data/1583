BLEU SCORE: 0.07270717733704592

TEST MSG: Fix condition in RangeTombstoneList . add that breaks test
GENERATED MSG: Fix potential index out of bound error in RangeTombstoneList ( + test )

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 58f3c53 . . b9a0131 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 16 : <nl> + * Fix bad condition in RangeTombstoneList ( CASSANDRA - 9485 ) <nl> * Fix potential StackOverflow when setting CrcCheckChance over JMX ( CASSANDRA - 9488 ) <nl> * Fix null static columns in pages after the first , paged reversed <nl> queries ( CASSANDRA - 8502 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> index b49c2fc . . 165718e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java <nl> @ @ - 116 , 7 + 116 , 7 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > <nl> / * * <nl> * Adds a new range tombstone . <nl> * <nl> - * This method will be faster if the new tombstone sort after all the currently existing ones ( this is a common use case ) , <nl> + * This method will be faster if the new tombstone sort after all the currently existing ones ( this is a common use case ) , <nl> * but it doesn ' t assume it . <nl> * / <nl> public void add ( ByteBuffer start , ByteBuffer end , long markedAt , int delTime ) <nl> @ @ - 130 , 7 + 130 , 7 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > <nl> int c = comparator . compare ( ends [ size - 1 ] , start ) ; <nl> <nl> / / Fast path if we add in sorted order <nl> - if ( c < = 0 ) <nl> + if ( c < 0 ) <nl> { <nl> addInternal ( size , start , end , markedAt , delTime ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java <nl> index b0065e0 . . 2a7c90f 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java <nl> @ @ - 30 , 7 + 30 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> public class RangeTombstoneListTest <nl> { <nl> private static final Comparator < ByteBuffer > cmp = IntegerType . instance ; <nl> - private static final Random rand = new Random ( ) ; <nl> <nl> @ Test <nl> public void sortedAdditionTest ( ) <nl> @ @ - 296 , 7 + 295 , 23 @ @ public class RangeTombstoneListTest <nl> assertEquals ( 6 , l . maxMarkedAt ( ) ) ; <nl> } <nl> <nl> - private RangeTombstoneList makeRandom ( int size , int maxItSize , int maxItDistance , int maxMarkedAt ) <nl> + @ Test <nl> + public void insertSameTest ( ) <nl> + { <nl> + / / Simple test that adding the same element multiple time ends up <nl> + / / with that element only a single time ( CASSANDRA - 9485 ) <nl> + <nl> + RangeTombstoneList l = new RangeTombstoneList ( cmp , 0 ) ; <nl> + l . add ( rt ( 4 , 4 , 5 , 100 ) ) ; <nl> + l . add ( rt ( 4 , 4 , 6 , 110 ) ) ; <nl> + l . add ( rt ( 4 , 4 , 4 , 90 ) ) ; <nl> + <nl> + Iterator < RangeTombstone > iter = l . iterator ( ) ; <nl> + assertRT ( rt ( 4 , 4 , 6 , 110 ) , iter . next ( ) ) ; <nl> + assert ! iter . hasNext ( ) ; <nl> + } <nl> + <nl> + private RangeTombstoneList makeRandom ( Random rand , int size , int maxItSize , int maxItDistance , int maxMarkedAt ) <nl> { <nl> RangeTombstoneList l = new RangeTombstoneList ( cmp , size ) ; <nl> <nl> @ @ - 329 , 10 + 344 , 13 @ @ public class RangeTombstoneListTest <nl> int MAX _ IT _ DISTANCE = 10 ; <nl> int MAX _ MARKEDAT = 10 ; <nl> <nl> + long seed = System . nanoTime ( ) ; <nl> + Random rand = new Random ( seed ) ; <nl> + <nl> for ( int i = 0 ; i < TEST _ COUNT ; i + + ) <nl> { <nl> - RangeTombstoneList l1 = makeRandom ( rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; <nl> - RangeTombstoneList l2 = makeRandom ( rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; <nl> + RangeTombstoneList l1 = makeRandom ( rand , rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; <nl> + RangeTombstoneList l2 = makeRandom ( rand , rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; <nl> <nl> RangeTombstoneList l1Initial = l1 . copy ( ) ; <nl> <nl> @ @ - 346 , 7 + 364 , 7 @ @ public class RangeTombstoneListTest <nl> { <nl> System . out . println ( " Error merging : " ) ; <nl> System . out . println ( " l1 : " + toString ( l1Initial ) ) ; <nl> - System . out . println ( " l2 : " + toString ( l2 ) ) ; <nl> + System . out . println ( " Seed was : " + seed ) ; <nl> throw e ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 21f8e3a . . a0d6793 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 4 , 6 + 4 , 7 @ @ <nl> * Remove unimplemented cli option schema - mwt ( CASSANDRA - 5754 ) <nl> * Support range tombstones in thrift ( CASSANDRA - 5435 ) <nl> * Normalize table - manipulating CQL3 statements ' class names ( CASSANDRA - 5759 ) <nl> + * cqlsh : add missing table options to DESCRIBE output ( CASSANDRA - 5749 ) <nl> <nl> 2 . 0 . 0 - beta1 <nl> * Removed on - heap row cache ( CASSANDRA - 5348 ) <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index aa68984 . . 5fcca6f 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 70 , 6 + 70 , 9 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> ( ' read _ repair _ chance ' , None ) , <nl> ( ' replicate _ on _ write ' , None ) , <nl> ( ' populate _ io _ cache _ on _ flush ' , None ) , <nl> + ( ' default _ time _ to _ live ' , None ) , <nl> + ( ' speculative _ retry ' , None ) , <nl> + ( ' memtable _ flush _ period _ in _ ms ' , None ) , <nl> ) <nl> <nl> columnfamily _ layout _ map _ options = ( <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index aa92a7f . . 8aef154 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 662 , 6 + 662 , 9 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> read _ repair _ chance = 0 . 100000 AND <nl> replicate _ on _ write = ' true ' AND <nl> populate _ io _ cache _ on _ flush = ' false ' AND <nl> + default _ time _ to _ live = 0 AND <nl> + speculative _ retry = ' NONE ' AND <nl> + memtable _ flush _ period _ in _ ms = 0 AND <nl> compaction = { ' class ' : ' SizeTieredCompactionStrategy ' } AND <nl> compression = { ' sstable _ compression ' : ' LZ4Compressor ' } ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 58f3c53 . . b9a0131 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 16 : 
 + * Fix bad condition in RangeTombstoneList ( CASSANDRA - 9485 ) 
 * Fix potential StackOverflow when setting CrcCheckChance over JMX ( CASSANDRA - 9488 ) 
 * Fix null static columns in pages after the first , paged reversed 
 queries ( CASSANDRA - 8502 ) 
 diff - - git a / src / java / org / apache / cassandra / db / RangeTombstoneList . java b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 index b49c2fc . . 165718e 100644 
 - - - a / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 + + + b / src / java / org / apache / cassandra / db / RangeTombstoneList . java 
 @ @ - 116 , 7 + 116 , 7 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > 
 / * * 
 * Adds a new range tombstone . 
 * 
 - * This method will be faster if the new tombstone sort after all the currently existing ones ( this is a common use case ) , 
 + * This method will be faster if the new tombstone sort after all the currently existing ones ( this is a common use case ) , 
 * but it doesn ' t assume it . 
 * / 
 public void add ( ByteBuffer start , ByteBuffer end , long markedAt , int delTime ) 
 @ @ - 130 , 7 + 130 , 7 @ @ public class RangeTombstoneList implements Iterable < RangeTombstone > 
 int c = comparator . compare ( ends [ size - 1 ] , start ) ; 
 
 / / Fast path if we add in sorted order 
 - if ( c < = 0 ) 
 + if ( c < 0 ) 
 { 
 addInternal ( size , start , end , markedAt , delTime ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java 
 index b0065e0 . . 2a7c90f 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneListTest . java 
 @ @ - 30 , 7 + 30 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 public class RangeTombstoneListTest 
 { 
 private static final Comparator < ByteBuffer > cmp = IntegerType . instance ; 
 - private static final Random rand = new Random ( ) ; 
 
 @ Test 
 public void sortedAdditionTest ( ) 
 @ @ - 296 , 7 + 295 , 23 @ @ public class RangeTombstoneListTest 
 assertEquals ( 6 , l . maxMarkedAt ( ) ) ; 
 } 
 
 - private RangeTombstoneList makeRandom ( int size , int maxItSize , int maxItDistance , int maxMarkedAt ) 
 + @ Test 
 + public void insertSameTest ( ) 
 + { 
 + / / Simple test that adding the same element multiple time ends up 
 + / / with that element only a single time ( CASSANDRA - 9485 ) 
 + 
 + RangeTombstoneList l = new RangeTombstoneList ( cmp , 0 ) ; 
 + l . add ( rt ( 4 , 4 , 5 , 100 ) ) ; 
 + l . add ( rt ( 4 , 4 , 6 , 110 ) ) ; 
 + l . add ( rt ( 4 , 4 , 4 , 90 ) ) ; 
 + 
 + Iterator < RangeTombstone > iter = l . iterator ( ) ; 
 + assertRT ( rt ( 4 , 4 , 6 , 110 ) , iter . next ( ) ) ; 
 + assert ! iter . hasNext ( ) ; 
 + } 
 + 
 + private RangeTombstoneList makeRandom ( Random rand , int size , int maxItSize , int maxItDistance , int maxMarkedAt ) 
 { 
 RangeTombstoneList l = new RangeTombstoneList ( cmp , size ) ; 
 
 @ @ - 329 , 10 + 344 , 13 @ @ public class RangeTombstoneListTest 
 int MAX _ IT _ DISTANCE = 10 ; 
 int MAX _ MARKEDAT = 10 ; 
 
 + long seed = System . nanoTime ( ) ; 
 + Random rand = new Random ( seed ) ; 
 + 
 for ( int i = 0 ; i < TEST _ COUNT ; i + + ) 
 { 
 - RangeTombstoneList l1 = makeRandom ( rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; 
 - RangeTombstoneList l2 = makeRandom ( rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; 
 + RangeTombstoneList l1 = makeRandom ( rand , rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; 
 + RangeTombstoneList l2 = makeRandom ( rand , rand . nextInt ( MAX _ LIST _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ SIZE ) + 1 , rand . nextInt ( MAX _ IT _ DISTANCE ) + 1 , rand . nextInt ( MAX _ MARKEDAT ) + 1 ) ; 
 
 RangeTombstoneList l1Initial = l1 . copy ( ) ; 
 
 @ @ - 346 , 7 + 364 , 7 @ @ public class RangeTombstoneListTest 
 { 
 System . out . println ( " Error merging : " ) ; 
 System . out . println ( " l1 : " + toString ( l1Initial ) ) ; 
 - System . out . println ( " l2 : " + toString ( l2 ) ) ; 
 + System . out . println ( " Seed was : " + seed ) ; 
 throw e ; 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 21f8e3a . . a0d6793 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 * Remove unimplemented cli option schema - mwt ( CASSANDRA - 5754 ) 
 * Support range tombstones in thrift ( CASSANDRA - 5435 ) 
 * Normalize table - manipulating CQL3 statements ' class names ( CASSANDRA - 5759 ) 
 + * cqlsh : add missing table options to DESCRIBE output ( CASSANDRA - 5749 ) 
 
 2 . 0 . 0 - beta1 
 * Removed on - heap row cache ( CASSANDRA - 5348 ) 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index aa68984 . . 5fcca6f 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 70 , 6 + 70 , 9 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 ( ' read _ repair _ chance ' , None ) , 
 ( ' replicate _ on _ write ' , None ) , 
 ( ' populate _ io _ cache _ on _ flush ' , None ) , 
 + ( ' default _ time _ to _ live ' , None ) , 
 + ( ' speculative _ retry ' , None ) , 
 + ( ' memtable _ flush _ period _ in _ ms ' , None ) , 
 ) 
 
 columnfamily _ layout _ map _ options = ( 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index aa92a7f . . 8aef154 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 662 , 6 + 662 , 9 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 read _ repair _ chance = 0 . 100000 AND 
 replicate _ on _ write = ' true ' AND 
 populate _ io _ cache _ on _ flush = ' false ' AND 
 + default _ time _ to _ live = 0 AND 
 + speculative _ retry = ' NONE ' AND 
 + memtable _ flush _ period _ in _ ms = 0 AND 
 compaction = { ' class ' : ' SizeTieredCompactionStrategy ' } AND 
 compression = { ' sstable _ compression ' : ' LZ4Compressor ' } ; 

