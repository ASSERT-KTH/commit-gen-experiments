BLEU SCORE: 0.014199193612838947

TEST MSG: add file : / / / on Windows to - Dcassandra . config value
GENERATED MSG: Improve error message when yaml contains invalid properties

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> index 4a1280c . . e5885b1 100644 <nl> - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . yaml . snakeyaml . TypeDescription ; <nl> import org . yaml . snakeyaml . Yaml ; <nl> import org . yaml . snakeyaml . error . YAMLException ; <nl> @ @ - 45 , 6 + 46 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> private static final Logger logger = LoggerFactory . getLogger ( YamlConfigurationLoader . class ) ; <nl> <nl> private final static String DEFAULT _ CONFIGURATION = " cassandra . yaml " ; <nl> + private static final String FILE _ PREFIX = " file : / / / " ; <nl> <nl> / * * <nl> * Inspect the classpath to find storage configuration file <nl> @ @ - 53 , 7 + 55 , 15 @ @ public class YamlConfigurationLoader implements ConfigurationLoader <nl> { <nl> String configUrl = System . getProperty ( " cassandra . config " ) ; <nl> if ( configUrl = = null ) <nl> + { <nl> configUrl = DEFAULT _ CONFIGURATION ; <nl> + } <nl> + else if ( ! FBUtilities . isUnix ( ) & & ! configUrl . startsWith ( FILE _ PREFIX ) ) <nl> + { <nl> + String format = " Non - unix environment detected , % s prefix not supplied at the beginning of file path but is required . Changing path to % s " ; <nl> + configUrl = FILE _ PREFIX + configUrl ; <nl> + logger . warn ( String . format ( format , FILE _ PREFIX , configUrl ) ) ; <nl> + } <nl> <nl> URL url ; <nl> try
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 89f66a8 . . a282670 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) <nl> * Make user - defined compaction JMX blocking ( CASSANDRA - 4952 ) <nl> * Fix streaming does not transfer wrapped range ( CASSANDRA - 5948 ) <nl> + * Fix loading index summary containing empty key ( CASSANDRA - 5965 ) <nl> <nl> <nl> 1 . 2 . 9 <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> index 3213d20 . . 9870d0a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> @ @ - 121 , 7 + 121 , 8 @ @ public class IndexSummary <nl> for ( int i = 0 ; i < size ; i + + ) <nl> { <nl> positions [ i ] = in . readLong ( ) ; <nl> - keys [ i ] = ByteBufferUtil . readBytes ( in , in . readInt ( ) ) ; <nl> + int len = in . readInt ( ) ; <nl> + keys [ i ] = len = = 0 ? new byte [ 0 ] : ByteBufferUtil . readBytes ( in , len ) ; <nl> } <nl> <nl> return new IndexSummary ( partitioner , keys , positions ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index ae63bf7 . . 86f3f02 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 398 , 7 + 398 , 7 @ @ public class ByteBufferUtil <nl> <nl> public static byte [ ] readBytes ( DataInput in , int length ) throws IOException <nl> { <nl> - assert length > 0 ; <nl> + assert length > 0 : " length is not > 0 : " + length ; <nl> byte [ ] bytes = new byte [ length ] ; <nl> in . readFully ( bytes ) ; <nl> return bytes ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> new file mode 100644 <nl> index 0000000 . . 26d2226 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import com . google . common . io . ByteArrayDataInput ; <nl> + import com . google . common . io . ByteArrayDataOutput ; <nl> + import com . google . common . io . ByteStreams ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . RandomPartitioner ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + import static org . junit . Assert . assertArrayEquals ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class IndexSummaryTest <nl> + { <nl> + @ Test <nl> + public void testAddEmptyKey ( ) throws Exception <nl> + { <nl> + IPartitioner p = new RandomPartitioner ( ) ; <nl> + IndexSummaryBuilder builder = new IndexSummaryBuilder ( 1 ) ; <nl> + builder . maybeAddEntry ( p . decorateKey ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) , 0 ) ; <nl> + IndexSummary summary = builder . build ( p ) ; <nl> + assertEquals ( 1 , summary . size ( ) ) ; <nl> + assertEquals ( 0 , summary . getPosition ( 0 ) ) ; <nl> + assertArrayEquals ( new byte [ 0 ] , summary . getKey ( 0 ) ) ; <nl> + <nl> + ByteArrayDataOutput bout = ByteStreams . newDataOutput ( ) ; <nl> + IndexSummary . serializer . serialize ( summary , bout ) ; <nl> + ByteArrayDataInput bin = ByteStreams . newDataInput ( bout . toByteArray ( ) ) ; <nl> + IndexSummary loaded = IndexSummary . serializer . deserialize ( bin , p ) ; <nl> + <nl> + assertEquals ( 1 , loaded . size ( ) ) ; <nl> + assertEquals ( summary . getPosition ( 0 ) , loaded . getPosition ( 0 ) ) ; <nl> + assertArrayEquals ( summary . getKey ( 0 ) , summary . getKey ( 0 ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 index 4a1280c . . e5885b1 100644 
 - - - a / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 + + + b / src / java / org / apache / cassandra / config / YamlConfigurationLoader . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . yaml . snakeyaml . TypeDescription ; 
 import org . yaml . snakeyaml . Yaml ; 
 import org . yaml . snakeyaml . error . YAMLException ; 
 @ @ - 45 , 6 + 46 , 7 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 private static final Logger logger = LoggerFactory . getLogger ( YamlConfigurationLoader . class ) ; 
 
 private final static String DEFAULT _ CONFIGURATION = " cassandra . yaml " ; 
 + private static final String FILE _ PREFIX = " file : / / / " ; 
 
 / * * 
 * Inspect the classpath to find storage configuration file 
 @ @ - 53 , 7 + 55 , 15 @ @ public class YamlConfigurationLoader implements ConfigurationLoader 
 { 
 String configUrl = System . getProperty ( " cassandra . config " ) ; 
 if ( configUrl = = null ) 
 + { 
 configUrl = DEFAULT _ CONFIGURATION ; 
 + } 
 + else if ( ! FBUtilities . isUnix ( ) & & ! configUrl . startsWith ( FILE _ PREFIX ) ) 
 + { 
 + String format = " Non - unix environment detected , % s prefix not supplied at the beginning of file path but is required . Changing path to % s " ; 
 + configUrl = FILE _ PREFIX + configUrl ; 
 + logger . warn ( String . format ( format , FILE _ PREFIX , configUrl ) ) ; 
 + } 
 
 URL url ; 
 try

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 89f66a8 . . a282670 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 * Allow disabling SlabAllocator ( CASSANDRA - 5935 ) 
 * Make user - defined compaction JMX blocking ( CASSANDRA - 4952 ) 
 * Fix streaming does not transfer wrapped range ( CASSANDRA - 5948 ) 
 + * Fix loading index summary containing empty key ( CASSANDRA - 5965 ) 
 
 
 1 . 2 . 9 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 index 3213d20 . . 9870d0a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 @ @ - 121 , 7 + 121 , 8 @ @ public class IndexSummary 
 for ( int i = 0 ; i < size ; i + + ) 
 { 
 positions [ i ] = in . readLong ( ) ; 
 - keys [ i ] = ByteBufferUtil . readBytes ( in , in . readInt ( ) ) ; 
 + int len = in . readInt ( ) ; 
 + keys [ i ] = len = = 0 ? new byte [ 0 ] : ByteBufferUtil . readBytes ( in , len ) ; 
 } 
 
 return new IndexSummary ( partitioner , keys , positions ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index ae63bf7 . . 86f3f02 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 398 , 7 + 398 , 7 @ @ public class ByteBufferUtil 
 
 public static byte [ ] readBytes ( DataInput in , int length ) throws IOException 
 { 
 - assert length > 0 ; 
 + assert length > 0 : " length is not > 0 : " + length ; 
 byte [ ] bytes = new byte [ length ] ; 
 in . readFully ( bytes ) ; 
 return bytes ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 new file mode 100644 
 index 0000000 . . 26d2226 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import com . google . common . io . ByteArrayDataInput ; 
 + import com . google . common . io . ByteArrayDataOutput ; 
 + import com . google . common . io . ByteStreams ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . RandomPartitioner ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + import static org . junit . Assert . assertArrayEquals ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class IndexSummaryTest 
 + { 
 + @ Test 
 + public void testAddEmptyKey ( ) throws Exception 
 + { 
 + IPartitioner p = new RandomPartitioner ( ) ; 
 + IndexSummaryBuilder builder = new IndexSummaryBuilder ( 1 ) ; 
 + builder . maybeAddEntry ( p . decorateKey ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) , 0 ) ; 
 + IndexSummary summary = builder . build ( p ) ; 
 + assertEquals ( 1 , summary . size ( ) ) ; 
 + assertEquals ( 0 , summary . getPosition ( 0 ) ) ; 
 + assertArrayEquals ( new byte [ 0 ] , summary . getKey ( 0 ) ) ; 
 + 
 + ByteArrayDataOutput bout = ByteStreams . newDataOutput ( ) ; 
 + IndexSummary . serializer . serialize ( summary , bout ) ; 
 + ByteArrayDataInput bin = ByteStreams . newDataInput ( bout . toByteArray ( ) ) ; 
 + IndexSummary loaded = IndexSummary . serializer . deserialize ( bin , p ) ; 
 + 
 + assertEquals ( 1 , loaded . size ( ) ) ; 
 + assertEquals ( summary . getPosition ( 0 ) , loaded . getPosition ( 0 ) ) ; 
 + assertArrayEquals ( summary . getKey ( 0 ) , summary . getKey ( 0 ) ) ; 
 + } 
 + }
