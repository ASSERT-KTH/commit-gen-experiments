BLEU SCORE: 0.056697911109760024

TEST MSG: Fix handling of nulls and unsets in IN conditions
GENERATED MSG: Fix AssertionError when binding nested collections in DELETE

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4f769a1 . . c5e5335 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 9 <nl> + * Fix handling of nulls and unsets in IN conditions ( CASSANDRA - 12981 ) <nl> * Remove support for non - JavaScript UDFs ( CASSANDRA - 12883 ) <nl> * Fix DynamicEndpointSnitch noop in multi - datacenter situations ( CASSANDRA - 13074 ) <nl> * cqlsh copy - from : encode column names to avoid primary key parsing errors ( CASSANDRA - 12909 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> index c7b5ddb . . 3412e71 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Iterators ; <nl> <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . cql3 . Term . Terminal ; <nl> import org . apache . cassandra . cql3 . functions . Function ; <nl> import org . apache . cassandra . db . Cell ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> @ @ - 267 , 12 + 268 , 26 @ @ public class ColumnCondition <nl> assert ! ( column . type instanceof CollectionType ) & & condition . collectionElement = = null ; <nl> assert condition . operator = = Operator . IN ; <nl> if ( condition . inValues = = null ) <nl> - this . inValues = ( ( Lists . Value ) condition . value . bind ( options ) ) . getElements ( ) ; <nl> + { <nl> + Terminal terminal = condition . value . bind ( options ) ; <nl> + <nl> + if ( terminal = = null ) <nl> + throw new InvalidRequestException ( " Invalid null list in IN condition " ) ; <nl> + <nl> + if ( terminal = = Constants . UNSET _ VALUE ) <nl> + throw new InvalidRequestException ( " Invalid ' unset ' value in condition " ) ; <nl> + <nl> + this . inValues = ( ( Lists . Value ) terminal ) . getElements ( ) ; <nl> + } <nl> else <nl> { <nl> this . inValues = new ArrayList < > ( condition . inValues . size ( ) ) ; <nl> for ( Term value : condition . inValues ) <nl> - this . inValues . add ( value . bindAndGet ( options ) ) ; <nl> + { <nl> + ByteBuffer buffer = value . bindAndGet ( options ) ; <nl> + if ( buffer ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> + this . inValues . add ( value . bindAndGet ( options ) ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 378 , 12 + 393 , 22 @ @ public class ColumnCondition <nl> this . collectionElement = condition . collectionElement . bindAndGet ( options ) ; <nl> <nl> if ( condition . inValues = = null ) <nl> - this . inValues = ( ( Lists . Value ) condition . value . bind ( options ) ) . getElements ( ) ; <nl> + { <nl> + Terminal terminal = condition . value . bind ( options ) ; <nl> + if ( terminal = = Constants . UNSET _ VALUE ) <nl> + throw new InvalidRequestException ( " Invalid ' unset ' value in condition " ) ; <nl> + this . inValues = ( ( Lists . Value ) terminal ) . getElements ( ) ; <nl> + } <nl> else <nl> { <nl> this . inValues = new ArrayList < > ( condition . inValues . size ( ) ) ; <nl> for ( Term value : condition . inValues ) <nl> - this . inValues . add ( value . bindAndGet ( options ) ) ; <nl> + { <nl> + ByteBuffer buffer = value . bindAndGet ( options ) ; <nl> + / / We want to ignore unset values <nl> + if ( buffer ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> + this . inValues . add ( buffer ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 642 , 11 + 667 , 22 @ @ public class ColumnCondition <nl> / / We have a list of serialized collections that need to be deserialized for later comparisons <nl> CollectionType collectionType = ( CollectionType ) column . type ; <nl> Lists . Marker inValuesMarker = ( Lists . Marker ) condition . value ; <nl> + Terminal terminal = inValuesMarker . bind ( options ) ; <nl> + <nl> + if ( terminal = = null ) <nl> + throw new InvalidRequestException ( " Invalid null list in IN condition " ) ; <nl> + <nl> + if ( terminal = = Constants . UNSET _ VALUE ) <nl> + throw new InvalidRequestException ( " Invalid ' unset ' value in condition " ) ; <nl> + <nl> if ( column . type instanceof ListType ) <nl> { <nl> ListType deserializer = ListType . getInstance ( collectionType . valueComparator ( ) , false ) ; <nl> - for ( ByteBuffer buffer : ( ( Lists . Value ) inValuesMarker . bind ( options ) ) . elements ) <nl> + for ( ByteBuffer buffer : ( ( Lists . Value ) terminal ) . elements ) <nl> { <nl> + if ( buffer = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> + continue ; <nl> + <nl> if ( buffer = = null ) <nl> this . inValues . add ( null ) ; <nl> else <nl> @ @ - 656 , 8 + 692 , 11 @ @ public class ColumnCondition <nl> else if ( column . type instanceof MapType ) <nl> { <nl> MapType deserializer = MapType . getInstance ( collectionType . nameComparator ( ) , collectionType . valueComparator ( ) , false ) ; <nl> - for ( ByteBuffer buffer : ( ( Lists . Value ) inValuesMarker . bind ( options ) ) . elements ) <nl> + for ( ByteBuffer buffer : ( ( Lists . Value ) terminal ) . elements ) <nl> { <nl> + if ( buffer = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> + continue ; <nl> + <nl> if ( buffer = = null ) <nl> this . inValues . add ( null ) ; <nl> else <nl> @ @ - 667 , 8 + 706 , 11 @ @ public class ColumnCondition <nl> else if ( column . type instanceof SetType ) <nl> { <nl> SetType deserializer = SetType . getInstance ( collectionType . valueComparator ( ) , false ) ; <nl> - for ( ByteBuffer buffer : ( ( Lists . Value ) inValuesMarker . bind ( options ) ) . elements ) <nl> + for ( ByteBuffer buffer : ( ( Lists . Value ) terminal ) . elements ) <nl> { <nl> + if ( buffer = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> + continue ; <nl> + <nl> if ( buffer = = null ) <nl> this . inValues . add ( null ) ; <nl> else <nl> @ @ - 679 , 7 + 721 , 11 @ @ public class ColumnCondition <nl> else <nl> { <nl> for ( Term value : condition . inValues ) <nl> - this . inValues . add ( value . bind ( options ) ) ; <nl> + { <nl> + Terminal terminal = value . bind ( options ) ; <nl> + if ( terminal ! = Constants . UNSET _ VALUE ) <nl> + this . inValues . add ( terminal ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java <nl> index 4a209e6 . . 6396727 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java <nl> @ @ - 18 , 6 + 18 , 9 @ @ <nl> <nl> package org . apache . cassandra . cql3 . validation . operations ; <nl> <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . List ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> @ @ - 135 , 6 + 138 , 7 @ @ public class InsertUpdateIfConditionTest extends CQLTester <nl> assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ( ? , ? , ? ) " , 0 , 1 , 2 ) , row ( true ) ) ; <nl> assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ? " , list ( 142 , 276 ) ) , row ( false , 2 ) ) ; <nl> assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ( ) " ) , row ( false , 2 ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ( ? , ? ) " , unset ( ) , 1 ) , row ( false , 2 ) ) ; <nl> <nl> assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 < ? " , unset ( ) ) ; <nl> @ @ - 146 , 8 + 150 , 6 @ @ public class InsertUpdateIfConditionTest extends CQLTester <nl> " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 > = ? " , unset ( ) ) ; <nl> assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 ! = ? " , unset ( ) ) ; <nl> - assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> - " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 IN ( ? , ? ) " , unset ( ) , 1 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1303 , 4 + 1305 , 159 @ @ public class InsertUpdateIfConditionTest extends CQLTester <nl> assertRows ( execute ( " SELECT * FROM % s WHERE a = 7 " ) , <nl> row ( 7 , 7 , null , null , 7 ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testInMarkerWithUDTs ( ) throws Throwable <nl> + { <nl> + String typename = createType ( " CREATE TYPE % s ( a int , b text ) " ) ; <nl> + String myType = KEYSPACE + ' . ' + typename ; <nl> + <nl> + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v frozen < " + myType + " > ) " ) ; <nl> + <nl> + Object v = userType ( 0 , " abc " ) ; <nl> + execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 0 , v ) ; <nl> + <nl> + / / Does not apply <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 1 , " abc " ) , userType ( 0 , " ac " ) ) , <nl> + row ( false , v ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 1 , " abc " ) , null ) , <nl> + row ( false , v ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 1 , " abc " ) , unset ( ) ) , <nl> + row ( false , v ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , null , null ) , <nl> + row ( false , v ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , unset ( ) , unset ( ) ) , <nl> + row ( false , v ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ? " , list ( userType ( 1 , " abc " ) , userType ( 0 , " ac " ) ) ) , <nl> + row ( false , v ) ) ; <nl> + <nl> + / / Does apply <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 0 , " abc " ) , userType ( 0 , " ac " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 1 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 0 , " bc " ) , null ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 1 , b : ' ac ' } WHERE k = 0 IF v IN ( ? , ? , ? ) " , userType ( 0 , " bc " ) , unset ( ) , userType ( 1 , " bc " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' abc ' } WHERE k = 0 IF v IN ? " , list ( userType ( 1 , " ac " ) , userType ( 0 , " ac " ) ) ) , <nl> + row ( true ) ) ; <nl> + <nl> + assertInvalidMessage ( " Invalid null list in IN condition " , <nl> + " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ? " , ( List < ByteBuffer > ) null ) ; <nl> + assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> + " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ? " , unset ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInMarkerWithLists ( ) throws Throwable <nl> + { <nl> + for ( boolean frozen : new boolean [ ] { false , true } ) <nl> + { <nl> + createTable ( String . format ( " CREATE TABLE % % s ( k int PRIMARY KEY , l % s ) " , <nl> + frozen <nl> + ? " frozen < list < text > > " <nl> + : " list < text > " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , [ ' foo ' , ' bar ' , ' foobar ' ] ) " ) ; <nl> + <nl> + / / Does not apply <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " foobar " ) , list ( " bar " , " foobar " ) ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " foobar " ) , null ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " foobar " ) , unset ( ) ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , null , null ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ? " , list ( list ( " foo " , " foobar " ) , list ( " bar " , " foobar " ) ) ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ? " , 1 , list ( " foo " , " foobar " ) ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? ) " , 1 , " foo " , " foobar " ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? ) " , 1 , " foo " , null ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? ) " , 1 , " foo " , unset ( ) ) , <nl> + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; <nl> + <nl> + / / Does apply <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " bar " , " foobar " ) , list ( " bar " , " foobar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l IN ( ? , ? , ? ) " , list ( " foo " , " bar " , " foobar " ) , null , list ( " foo " , " bar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? , ? ) " , list ( " foo " , " bar " , " foobar " ) , unset ( ) , list ( " foo " , " foobar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " bar " , " foobar " ) , list ( " foo " , " bar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ? " , 1 , list ( " bar " , " foobar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? , ? ) " , 1 , " bar " , null , " foobar " ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? , ? ) " , 1 , " bar " , unset ( ) , " foobar " ) , <nl> + row ( true ) ) ; <nl> + <nl> + assertInvalidMessage ( " Invalid null list in IN condition " , <nl> + " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ? " , ( List < ByteBuffer > ) null ) ; <nl> + assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> + " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ? " , unset ( ) ) ; <nl> + assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> + " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ? " , 1 , unset ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testInMarkerWithMaps ( ) throws Throwable <nl> + { <nl> + for ( boolean frozen : new boolean [ ] { false , true } ) <nl> + { <nl> + createTable ( String . format ( " CREATE TABLE % % s ( k int PRIMARY KEY , m % s ) " , <nl> + frozen <nl> + ? " frozen < map < text , text > > " <nl> + : " map < text , text > " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , { ' foo ' : ' bar ' } ) " ) ; <nl> + <nl> + / / Does not apply <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , map ( " bar " , " foobar " ) ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , null ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , unset ( ) ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , null , null ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , list ( map ( " foo " , " foobar " ) , map ( " bar " , " foobar " ) ) ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ? " , " foo " , list ( " foo " , " foobar " ) ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? ) " , " foo " , " foo " , " foobar " ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? ) " , " foo " , " foo " , null ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? ) " , " foo " , " foo " , unset ( ) ) , <nl> + row ( false , map ( " foo " , " bar " ) ) ) ; <nl> + <nl> + / / Does apply <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , map ( " foo " , " bar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' bar ' } WHERE k = 0 IF m IN ( ? , ? , ? ) " , map ( " bar " , " foobar " ) , null , map ( " foo " , " foobar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' bar ' } WHERE k = 0 IF m IN ( ? , ? , ? ) " , map ( " bar " , " foobar " ) , unset ( ) , map ( " foo " , " bar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , list ( map ( " foo " , " bar " ) , map ( " bar " , " foobar " ) ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' bar ' } WHERE k = 0 IF m [ ? ] IN ? " , " foo " , list ( " bar " , " foobar " ) ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? , ? ) " , " foo " , " bar " , null , " foobar " ) , <nl> + row ( true ) ) ; <nl> + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? , ? ) " , " foo " , " bar " , unset ( ) , " foobar " ) , <nl> + row ( true ) ) ; <nl> + <nl> + assertInvalidMessage ( " Invalid null list in IN condition " , <nl> + " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , ( List < ByteBuffer > ) null ) ; <nl> + assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> + " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , unset ( ) ) ; <nl> + assertInvalidMessage ( " Invalid ' unset ' value in condition " , <nl> + " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ? " , " foo " , unset ( ) ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4f769a1 . . c5e5335 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 9 
 + * Fix handling of nulls and unsets in IN conditions ( CASSANDRA - 12981 ) 
 * Remove support for non - JavaScript UDFs ( CASSANDRA - 12883 ) 
 * Fix DynamicEndpointSnitch noop in multi - datacenter situations ( CASSANDRA - 13074 ) 
 * cqlsh copy - from : encode column names to avoid primary key parsing errors ( CASSANDRA - 12909 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 index c7b5ddb . . 3412e71 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Iterators ; 
 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . cql3 . Term . Terminal ; 
 import org . apache . cassandra . cql3 . functions . Function ; 
 import org . apache . cassandra . db . Cell ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 @ @ - 267 , 12 + 268 , 26 @ @ public class ColumnCondition 
 assert ! ( column . type instanceof CollectionType ) & & condition . collectionElement = = null ; 
 assert condition . operator = = Operator . IN ; 
 if ( condition . inValues = = null ) 
 - this . inValues = ( ( Lists . Value ) condition . value . bind ( options ) ) . getElements ( ) ; 
 + { 
 + Terminal terminal = condition . value . bind ( options ) ; 
 + 
 + if ( terminal = = null ) 
 + throw new InvalidRequestException ( " Invalid null list in IN condition " ) ; 
 + 
 + if ( terminal = = Constants . UNSET _ VALUE ) 
 + throw new InvalidRequestException ( " Invalid ' unset ' value in condition " ) ; 
 + 
 + this . inValues = ( ( Lists . Value ) terminal ) . getElements ( ) ; 
 + } 
 else 
 { 
 this . inValues = new ArrayList < > ( condition . inValues . size ( ) ) ; 
 for ( Term value : condition . inValues ) 
 - this . inValues . add ( value . bindAndGet ( options ) ) ; 
 + { 
 + ByteBuffer buffer = value . bindAndGet ( options ) ; 
 + if ( buffer ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 + this . inValues . add ( value . bindAndGet ( options ) ) ; 
 + } 
 } 
 } 
 
 @ @ - 378 , 12 + 393 , 22 @ @ public class ColumnCondition 
 this . collectionElement = condition . collectionElement . bindAndGet ( options ) ; 
 
 if ( condition . inValues = = null ) 
 - this . inValues = ( ( Lists . Value ) condition . value . bind ( options ) ) . getElements ( ) ; 
 + { 
 + Terminal terminal = condition . value . bind ( options ) ; 
 + if ( terminal = = Constants . UNSET _ VALUE ) 
 + throw new InvalidRequestException ( " Invalid ' unset ' value in condition " ) ; 
 + this . inValues = ( ( Lists . Value ) terminal ) . getElements ( ) ; 
 + } 
 else 
 { 
 this . inValues = new ArrayList < > ( condition . inValues . size ( ) ) ; 
 for ( Term value : condition . inValues ) 
 - this . inValues . add ( value . bindAndGet ( options ) ) ; 
 + { 
 + ByteBuffer buffer = value . bindAndGet ( options ) ; 
 + / / We want to ignore unset values 
 + if ( buffer ! = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 + this . inValues . add ( buffer ) ; 
 + } 
 } 
 } 
 
 @ @ - 642 , 11 + 667 , 22 @ @ public class ColumnCondition 
 / / We have a list of serialized collections that need to be deserialized for later comparisons 
 CollectionType collectionType = ( CollectionType ) column . type ; 
 Lists . Marker inValuesMarker = ( Lists . Marker ) condition . value ; 
 + Terminal terminal = inValuesMarker . bind ( options ) ; 
 + 
 + if ( terminal = = null ) 
 + throw new InvalidRequestException ( " Invalid null list in IN condition " ) ; 
 + 
 + if ( terminal = = Constants . UNSET _ VALUE ) 
 + throw new InvalidRequestException ( " Invalid ' unset ' value in condition " ) ; 
 + 
 if ( column . type instanceof ListType ) 
 { 
 ListType deserializer = ListType . getInstance ( collectionType . valueComparator ( ) , false ) ; 
 - for ( ByteBuffer buffer : ( ( Lists . Value ) inValuesMarker . bind ( options ) ) . elements ) 
 + for ( ByteBuffer buffer : ( ( Lists . Value ) terminal ) . elements ) 
 { 
 + if ( buffer = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 + continue ; 
 + 
 if ( buffer = = null ) 
 this . inValues . add ( null ) ; 
 else 
 @ @ - 656 , 8 + 692 , 11 @ @ public class ColumnCondition 
 else if ( column . type instanceof MapType ) 
 { 
 MapType deserializer = MapType . getInstance ( collectionType . nameComparator ( ) , collectionType . valueComparator ( ) , false ) ; 
 - for ( ByteBuffer buffer : ( ( Lists . Value ) inValuesMarker . bind ( options ) ) . elements ) 
 + for ( ByteBuffer buffer : ( ( Lists . Value ) terminal ) . elements ) 
 { 
 + if ( buffer = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 + continue ; 
 + 
 if ( buffer = = null ) 
 this . inValues . add ( null ) ; 
 else 
 @ @ - 667 , 8 + 706 , 11 @ @ public class ColumnCondition 
 else if ( column . type instanceof SetType ) 
 { 
 SetType deserializer = SetType . getInstance ( collectionType . valueComparator ( ) , false ) ; 
 - for ( ByteBuffer buffer : ( ( Lists . Value ) inValuesMarker . bind ( options ) ) . elements ) 
 + for ( ByteBuffer buffer : ( ( Lists . Value ) terminal ) . elements ) 
 { 
 + if ( buffer = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 + continue ; 
 + 
 if ( buffer = = null ) 
 this . inValues . add ( null ) ; 
 else 
 @ @ - 679 , 7 + 721 , 11 @ @ public class ColumnCondition 
 else 
 { 
 for ( Term value : condition . inValues ) 
 - this . inValues . add ( value . bind ( options ) ) ; 
 + { 
 + Terminal terminal = value . bind ( options ) ; 
 + if ( terminal ! = Constants . UNSET _ VALUE ) 
 + this . inValues . add ( terminal ) ; 
 + } 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java 
 index 4a209e6 . . 6396727 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / InsertUpdateIfConditionTest . java 
 @ @ - 18 , 6 + 18 , 9 @ @ 
 
 package org . apache . cassandra . cql3 . validation . operations ; 
 
 + import java . nio . ByteBuffer ; 
 + import java . util . List ; 
 + 
 import org . junit . Test ; 
 
 import org . apache . cassandra . cql3 . CQLTester ; 
 @ @ - 135 , 6 + 138 , 7 @ @ public class InsertUpdateIfConditionTest extends CQLTester 
 assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ( ? , ? , ? ) " , 0 , 1 , 2 ) , row ( true ) ) ; 
 assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ? " , list ( 142 , 276 ) ) , row ( false , 2 ) ) ; 
 assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ( ) " ) , row ( false , 2 ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v2 = ' bar ' WHERE k = 0 IF v1 IN ( ? , ? ) " , unset ( ) , 1 ) , row ( false , 2 ) ) ; 
 
 assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 < ? " , unset ( ) ) ; 
 @ @ - 146 , 8 + 150 , 6 @ @ public class InsertUpdateIfConditionTest extends CQLTester 
 " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 > = ? " , unset ( ) ) ; 
 assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 ! = ? " , unset ( ) ) ; 
 - assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 - " UPDATE % s SET v1 = 3 , v2 = ' bar ' WHERE k = 0 IF v1 IN ( ? , ? ) " , unset ( ) , 1 ) ; 
 } 
 
 / * * 
 @ @ - 1303 , 4 + 1305 , 159 @ @ public class InsertUpdateIfConditionTest extends CQLTester 
 assertRows ( execute ( " SELECT * FROM % s WHERE a = 7 " ) , 
 row ( 7 , 7 , null , null , 7 ) ) ; 
 } 
 + 
 + @ Test 
 + public void testInMarkerWithUDTs ( ) throws Throwable 
 + { 
 + String typename = createType ( " CREATE TYPE % s ( a int , b text ) " ) ; 
 + String myType = KEYSPACE + ' . ' + typename ; 
 + 
 + createTable ( " CREATE TABLE % s ( k int PRIMARY KEY , v frozen < " + myType + " > ) " ) ; 
 + 
 + Object v = userType ( 0 , " abc " ) ; 
 + execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 0 , v ) ; 
 + 
 + / / Does not apply 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 1 , " abc " ) , userType ( 0 , " ac " ) ) , 
 + row ( false , v ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 1 , " abc " ) , null ) , 
 + row ( false , v ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 1 , " abc " ) , unset ( ) ) , 
 + row ( false , v ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , null , null ) , 
 + row ( false , v ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , unset ( ) , unset ( ) ) , 
 + row ( false , v ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ? " , list ( userType ( 1 , " abc " ) , userType ( 0 , " ac " ) ) ) , 
 + row ( false , v ) ) ; 
 + 
 + / / Does apply 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 0 , " abc " ) , userType ( 0 , " ac " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 1 , b : ' bc ' } WHERE k = 0 IF v IN ( ? , ? ) " , userType ( 0 , " bc " ) , null ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 1 , b : ' ac ' } WHERE k = 0 IF v IN ( ? , ? , ? ) " , userType ( 0 , " bc " ) , unset ( ) , userType ( 1 , " bc " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET v = { a : 0 , b : ' abc ' } WHERE k = 0 IF v IN ? " , list ( userType ( 1 , " ac " ) , userType ( 0 , " ac " ) ) ) , 
 + row ( true ) ) ; 
 + 
 + assertInvalidMessage ( " Invalid null list in IN condition " , 
 + " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ? " , ( List < ByteBuffer > ) null ) ; 
 + assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 + " UPDATE % s SET v = { a : 0 , b : ' bc ' } WHERE k = 0 IF v IN ? " , unset ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testInMarkerWithLists ( ) throws Throwable 
 + { 
 + for ( boolean frozen : new boolean [ ] { false , true } ) 
 + { 
 + createTable ( String . format ( " CREATE TABLE % % s ( k int PRIMARY KEY , l % s ) " , 
 + frozen 
 + ? " frozen < list < text > > " 
 + : " list < text > " ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , l ) VALUES ( 0 , [ ' foo ' , ' bar ' , ' foobar ' ] ) " ) ; 
 + 
 + / / Does not apply 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " foobar " ) , list ( " bar " , " foobar " ) ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " foobar " ) , null ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " foobar " ) , unset ( ) ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , null , null ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ? " , list ( list ( " foo " , " foobar " ) , list ( " bar " , " foobar " ) ) ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ? " , 1 , list ( " foo " , " foobar " ) ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? ) " , 1 , " foo " , " foobar " ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? ) " , 1 , " foo " , null ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? ) " , 1 , " foo " , unset ( ) ) , 
 + row ( false , list ( " foo " , " bar " , " foobar " ) ) ) ; 
 + 
 + / / Does apply 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " foo " , " bar " , " foobar " ) , list ( " bar " , " foobar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l IN ( ? , ? , ? ) " , list ( " foo " , " bar " , " foobar " ) , null , list ( " foo " , " bar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ( ? , ? , ? ) " , list ( " foo " , " bar " , " foobar " ) , unset ( ) , list ( " foo " , " foobar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l IN ( ? , ? ) " , list ( " bar " , " foobar " ) , list ( " foo " , " bar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ? " , 1 , list ( " bar " , " foobar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? , ? ) " , 1 , " bar " , null , " foobar " ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET l = [ ' foo ' , ' foobar ' ] WHERE k = 0 IF l [ ? ] IN ( ? , ? , ? ) " , 1 , " bar " , unset ( ) , " foobar " ) , 
 + row ( true ) ) ; 
 + 
 + assertInvalidMessage ( " Invalid null list in IN condition " , 
 + " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ? " , ( List < ByteBuffer > ) null ) ; 
 + assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 + " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l IN ? " , unset ( ) ) ; 
 + assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 + " UPDATE % s SET l = [ ' foo ' , ' bar ' ] WHERE k = 0 IF l [ ? ] IN ? " , 1 , unset ( ) ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testInMarkerWithMaps ( ) throws Throwable 
 + { 
 + for ( boolean frozen : new boolean [ ] { false , true } ) 
 + { 
 + createTable ( String . format ( " CREATE TABLE % % s ( k int PRIMARY KEY , m % s ) " , 
 + frozen 
 + ? " frozen < map < text , text > > " 
 + : " map < text , text > " ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , m ) VALUES ( 0 , { ' foo ' : ' bar ' } ) " ) ; 
 + 
 + / / Does not apply 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , map ( " bar " , " foobar " ) ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , null ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , unset ( ) ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , null , null ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , list ( map ( " foo " , " foobar " ) , map ( " bar " , " foobar " ) ) ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ? " , " foo " , list ( " foo " , " foobar " ) ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? ) " , " foo " , " foo " , " foobar " ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? ) " , " foo " , " foo " , null ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? ) " , " foo " , " foo " , unset ( ) ) , 
 + row ( false , map ( " foo " , " bar " ) ) ) ; 
 + 
 + / / Does apply 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ( ? , ? ) " , map ( " foo " , " foobar " ) , map ( " foo " , " bar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' bar ' } WHERE k = 0 IF m IN ( ? , ? , ? ) " , map ( " bar " , " foobar " ) , null , map ( " foo " , " foobar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' bar ' } WHERE k = 0 IF m IN ( ? , ? , ? ) " , map ( " bar " , " foobar " ) , unset ( ) , map ( " foo " , " bar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , list ( map ( " foo " , " bar " ) , map ( " bar " , " foobar " ) ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' bar ' } WHERE k = 0 IF m [ ? ] IN ? " , " foo " , list ( " bar " , " foobar " ) ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? , ? ) " , " foo " , " bar " , null , " foobar " ) , 
 + row ( true ) ) ; 
 + assertRows ( execute ( " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ( ? , ? , ? ) " , " foo " , " bar " , unset ( ) , " foobar " ) , 
 + row ( true ) ) ; 
 + 
 + assertInvalidMessage ( " Invalid null list in IN condition " , 
 + " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , ( List < ByteBuffer > ) null ) ; 
 + assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 + " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m IN ? " , unset ( ) ) ; 
 + assertInvalidMessage ( " Invalid ' unset ' value in condition " , 
 + " UPDATE % s SET m = { ' foo ' : ' foobar ' } WHERE k = 0 IF m [ ? ] IN ? " , " foo " , unset ( ) ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
