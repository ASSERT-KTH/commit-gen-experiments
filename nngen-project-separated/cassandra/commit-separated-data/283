BLEU SCORE: 0.013139808552042212

TEST MSG: INSERT statement fails when Tuple type is used as clustering column with default DESC order
GENERATED MSG: Fix prepared marker for collections inside UDT

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6053117 . . 3d3903e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * INSERT statement fails when Tuple type is used as clustering column with default DESC order ( CASSANDRA - 13717 ) <nl> * Fix pending view mutations handling and cleanup batchlog when there are local and remote paired mutations ( CASSANDRA - 13069 ) <nl> * Improve config validation and documentation on overflow and NPE ( CASSANDRA - 13622 ) <nl> * Range deletes in a CAS batch are ignored ( CASSANDRA - 13655 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Tuples . java b / src / java / org / apache / cassandra / cql3 / Tuples . java <nl> index ee08efe . . c7564d3 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Tuples . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / Tuples . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ public class Tuples <nl> return new ColumnSpecification ( column . ksName , <nl> column . cfName , <nl> new ColumnIdentifier ( String . format ( " % s [ % d ] " , column . name , component ) , true ) , <nl> - ( ( TupleType ) column . type ) . type ( component ) ) ; <nl> + ( getTupleType ( column . type ) ) . type ( component ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class Tuples <nl> <nl> values . add ( value ) ; <nl> } <nl> - DelayedValue value = new DelayedValue ( ( TupleType ) receiver . type , values ) ; <nl> + DelayedValue value = new DelayedValue ( getTupleType ( receiver . type ) , values ) ; <nl> return allTerminal ? value . bind ( QueryOptions . DEFAULT ) : value ; <nl> } <nl> <nl> @ @ - 104 , 10 + 104 , 10 @ @ public class Tuples <nl> <nl> private void validateAssignableTo ( String keyspace , ColumnSpecification receiver ) throws InvalidRequestException <nl> { <nl> - if ( ! ( receiver . type instanceof TupleType ) ) <nl> + if ( ! checkIfTupleType ( receiver . type ) ) <nl> throw new InvalidRequestException ( String . format ( " Invalid tuple type literal for % s of type % s " , receiver . name , receiver . type . asCQL3Type ( ) ) ) ; <nl> <nl> - TupleType tt = ( TupleType ) receiver . type ; <nl> + TupleType tt = getTupleType ( receiver . type ) ; <nl> for ( int i = 0 ; i < elements . size ( ) ; i + + ) <nl> { <nl> if ( i > = tt . size ( ) ) <nl> @ @ - 256 , 7 + 256 , 7 @ @ public class Tuples <nl> List < ? > l = type . getSerializer ( ) . deserializeForNativeProtocol ( value , options . getProtocolVersion ( ) ) ; <nl> <nl> assert type . getElementsType ( ) instanceof TupleType ; <nl> - TupleType tupleType = ( TupleType ) type . getElementsType ( ) ; <nl> + TupleType tupleType = Tuples . getTupleType ( type . getElementsType ( ) ) ; <nl> <nl> / / type . split ( bytes ) <nl> List < List < ByteBuffer > > elements = new ArrayList < > ( l . size ( ) ) ; <nl> @ @ - 375 , 7 + 375 , 7 @ @ public class Tuples <nl> ByteBuffer value = options . getValues ( ) . get ( bindIndex ) ; <nl> if ( value = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) <nl> throw new InvalidRequestException ( String . format ( " Invalid unset value for tuple % s " , receiver . name ) ) ; <nl> - return value = = null ? null : Value . fromSerialized ( value , ( TupleType ) receiver . type ) ; <nl> + return value = = null ? null : Value . fromSerialized ( value , getTupleType ( receiver . type ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 412 , 4 + 412 , 16 @ @ public class Tuples <nl> sb . append ( ' ) ' ) ; <nl> return sb . toString ( ) ; <nl> } <nl> + <nl> + public static boolean checkIfTupleType ( AbstractType < ? > tuple ) <nl> + { <nl> + return ( tuple instanceof TupleType ) | | <nl> + ( tuple instanceof ReversedType & & ( ( ReversedType ) tuple ) . baseType instanceof TupleType ) ; <nl> + <nl> + } <nl> + <nl> + public static TupleType getTupleType ( AbstractType < ? > tuple ) <nl> + { <nl> + return ( tuple instanceof ReversedType ? ( ( TupleType ) ( ( ReversedType ) tuple ) . baseType ) : ( TupleType ) tuple ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java <nl> index cbe4a15 . . bace751 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java <nl> @ @ - 17 , 6 + 17 , 10 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . validation . entities ; <nl> <nl> + import java . text . DateFormat ; <nl> + import java . text . SimpleDateFormat ; <nl> + import java . util . Locale ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> @ @ - 211 , 4 + 215 , 14 @ @ public class TupleTypeTest extends CQLTester <nl> assertInvalidMessage ( " Not enough bytes to read 0th component " , <nl> " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testReversedTypeTuple ( ) throws Throwable <nl> + { <nl> + / / CASSANDRA - 13717 <nl> + createTable ( " CREATE TABLE % s ( id int , tdemo frozen < tuple < timestamp , varchar > > , primary key ( id , tdemo ) ) with clustering order by ( tdemo desc ) " ) ; <nl> + execute ( " INSERT INTO % s ( id , tdemo ) VALUES ( 1 , ( ' 2017 - 02 - 03 03 : 05 + 0000 ' , ' Europe ' ) ) " ) ; <nl> + DateFormat df = new SimpleDateFormat ( " yyyy - MM - dd HH : mmX " , Locale . ENGLISH ) ; <nl> + assertRows ( execute ( " SELECT tdemo FROM % s " ) , row ( tuple ( df . parse ( " 2017 - 02 - 03 03 : 05 + 0000 " ) , " Europe " ) ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6053117 . . 3d3903e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * INSERT statement fails when Tuple type is used as clustering column with default DESC order ( CASSANDRA - 13717 ) 
 * Fix pending view mutations handling and cleanup batchlog when there are local and remote paired mutations ( CASSANDRA - 13069 ) 
 * Improve config validation and documentation on overflow and NPE ( CASSANDRA - 13622 ) 
 * Range deletes in a CAS batch are ignored ( CASSANDRA - 13655 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Tuples . java b / src / java / org / apache / cassandra / cql3 / Tuples . java 
 index ee08efe . . c7564d3 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Tuples . java 
 + + + b / src / java / org / apache / cassandra / cql3 / Tuples . java 
 @ @ - 47 , 7 + 47 , 7 @ @ public class Tuples 
 return new ColumnSpecification ( column . ksName , 
 column . cfName , 
 new ColumnIdentifier ( String . format ( " % s [ % d ] " , column . name , component ) , true ) , 
 - ( ( TupleType ) column . type ) . type ( component ) ) ; 
 + ( getTupleType ( column . type ) ) . type ( component ) ) ; 
 } 
 
 / * * 
 @ @ - 77 , 7 + 77 , 7 @ @ public class Tuples 
 
 values . add ( value ) ; 
 } 
 - DelayedValue value = new DelayedValue ( ( TupleType ) receiver . type , values ) ; 
 + DelayedValue value = new DelayedValue ( getTupleType ( receiver . type ) , values ) ; 
 return allTerminal ? value . bind ( QueryOptions . DEFAULT ) : value ; 
 } 
 
 @ @ - 104 , 10 + 104 , 10 @ @ public class Tuples 
 
 private void validateAssignableTo ( String keyspace , ColumnSpecification receiver ) throws InvalidRequestException 
 { 
 - if ( ! ( receiver . type instanceof TupleType ) ) 
 + if ( ! checkIfTupleType ( receiver . type ) ) 
 throw new InvalidRequestException ( String . format ( " Invalid tuple type literal for % s of type % s " , receiver . name , receiver . type . asCQL3Type ( ) ) ) ; 
 
 - TupleType tt = ( TupleType ) receiver . type ; 
 + TupleType tt = getTupleType ( receiver . type ) ; 
 for ( int i = 0 ; i < elements . size ( ) ; i + + ) 
 { 
 if ( i > = tt . size ( ) ) 
 @ @ - 256 , 7 + 256 , 7 @ @ public class Tuples 
 List < ? > l = type . getSerializer ( ) . deserializeForNativeProtocol ( value , options . getProtocolVersion ( ) ) ; 
 
 assert type . getElementsType ( ) instanceof TupleType ; 
 - TupleType tupleType = ( TupleType ) type . getElementsType ( ) ; 
 + TupleType tupleType = Tuples . getTupleType ( type . getElementsType ( ) ) ; 
 
 / / type . split ( bytes ) 
 List < List < ByteBuffer > > elements = new ArrayList < > ( l . size ( ) ) ; 
 @ @ - 375 , 7 + 375 , 7 @ @ public class Tuples 
 ByteBuffer value = options . getValues ( ) . get ( bindIndex ) ; 
 if ( value = = ByteBufferUtil . UNSET _ BYTE _ BUFFER ) 
 throw new InvalidRequestException ( String . format ( " Invalid unset value for tuple % s " , receiver . name ) ) ; 
 - return value = = null ? null : Value . fromSerialized ( value , ( TupleType ) receiver . type ) ; 
 + return value = = null ? null : Value . fromSerialized ( value , getTupleType ( receiver . type ) ) ; 
 } 
 } 
 
 @ @ - 412 , 4 + 412 , 16 @ @ public class Tuples 
 sb . append ( ' ) ' ) ; 
 return sb . toString ( ) ; 
 } 
 + 
 + public static boolean checkIfTupleType ( AbstractType < ? > tuple ) 
 + { 
 + return ( tuple instanceof TupleType ) | | 
 + ( tuple instanceof ReversedType & & ( ( ReversedType ) tuple ) . baseType instanceof TupleType ) ; 
 + 
 + } 
 + 
 + public static TupleType getTupleType ( AbstractType < ? > tuple ) 
 + { 
 + return ( tuple instanceof ReversedType ? ( ( TupleType ) ( ( ReversedType ) tuple ) . baseType ) : ( TupleType ) tuple ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java 
 index cbe4a15 . . bace751 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / TupleTypeTest . java 
 @ @ - 17 , 6 + 17 , 10 @ @ 
 * / 
 package org . apache . cassandra . cql3 . validation . entities ; 
 
 + import java . text . DateFormat ; 
 + import java . text . SimpleDateFormat ; 
 + import java . util . Locale ; 
 + 
 import org . junit . Test ; 
 
 import org . apache . cassandra . cql3 . CQLTester ; 
 @ @ - 211 , 4 + 215 , 14 @ @ public class TupleTypeTest extends CQLTester 
 assertInvalidMessage ( " Not enough bytes to read 0th component " , 
 " INSERT INTO % s ( pk , t ) VALUES ( ? , ? ) " , 1 , Long . MAX _ VALUE ) ; 
 } 
 + 
 + @ Test 
 + public void testReversedTypeTuple ( ) throws Throwable 
 + { 
 + / / CASSANDRA - 13717 
 + createTable ( " CREATE TABLE % s ( id int , tdemo frozen < tuple < timestamp , varchar > > , primary key ( id , tdemo ) ) with clustering order by ( tdemo desc ) " ) ; 
 + execute ( " INSERT INTO % s ( id , tdemo ) VALUES ( 1 , ( ' 2017 - 02 - 03 03 : 05 + 0000 ' , ' Europe ' ) ) " ) ; 
 + DateFormat df = new SimpleDateFormat ( " yyyy - MM - dd HH : mmX " , Locale . ENGLISH ) ; 
 + assertRows ( execute ( " SELECT tdemo FROM % s " ) , row ( tuple ( df . parse ( " 2017 - 02 - 03 03 : 05 + 0000 " ) , " Europe " ) ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
