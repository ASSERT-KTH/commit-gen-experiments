BLEU SCORE: 0.044568827606990644

TEST MSG: Revert " Update cqlsh driver for new driver execution API "
GENERATED MSG: ( cqlsh ) : Support for query paging

TEST DIFF (one line): diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 17bddd3 . . 09da020 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 111 , 13 + 111 , 13 @ @ except ImportError , e : <nl> ' Error : % s \ n ' % ( sys . executable , sys . path , e ) ) <nl> <nl> from cassandra . auth import PlainTextAuthProvider <nl> - from cassandra . cluster import Cluster <nl> + from cassandra . cluster import Cluster , PagedResult <nl> from cassandra . metadata import ( ColumnMetadata , KeyspaceMetadata , <nl> TableMetadata , protect _ name , protect _ names , <nl> protect _ value ) <nl> from cassandra . policies import WhiteListRoundRobinPolicy <nl> from cassandra . protocol import QueryMessage , ResultMessage <nl> - from cassandra . query import SimpleStatement , ordered _ dict _ factory , TraceUnavailable <nl> + from cassandra . query import SimpleStatement , ordered _ dict _ factory <nl> <nl> # cqlsh should run correctly when run out of a Cassandra source tree , <nl> # out of an unpacked Cassandra tarball , and after a proper package install . <nl> @ @ - 675 , 7 + 675 , 6 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> self . session . default _ timeout = client _ timeout <nl> self . session . row _ factory = ordered _ dict _ factory <nl> - self . session . default _ consistency _ level = cassandra . ConsistencyLevel . ONE <nl> self . get _ connection _ versions ( ) <nl> <nl> self . current _ keyspace = keyspace <nl> @ @ - 1122 , 8 + 1121 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> def do _ use ( self , parsed ) : <nl> ksname = parsed . get _ binding ( ' ksname ' ) <nl> - success , _ = self . perform _ simple _ statement ( SimpleStatement ( parsed . extract _ orig ( ) ) ) <nl> - if success : <nl> + result , future = self . perform _ simple _ statement ( SimpleStatement ( parsed . extract _ orig ( ) ) ) <nl> + if result : <nl> if ksname [ 0 ] = = ' " ' and ksname [ - 1 ] = = ' " ' : <nl> self . current _ keyspace = self . cql _ unprotect _ name ( ksname ) <nl> else : <nl> @ @ - 1140 , 7 + 1139 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> def perform _ statement ( self , statement ) : <nl> stmt = SimpleStatement ( statement , consistency _ level = self . consistency _ level , serial _ consistency _ level = self . serial _ consistency _ level , fetch _ size = self . page _ size if self . use _ paging else None ) <nl> - success , future = self . perform _ simple _ statement ( stmt ) <nl> + result , future = self . perform _ simple _ statement ( stmt ) <nl> <nl> if future : <nl> if future . warnings : <nl> @ @ - 1148 , 17 + 1147 , 19 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> if self . tracing _ enabled : <nl> try : <nl> - for trace in future . get _ all _ query _ traces ( self . max _ trace _ wait ) : <nl> + trace = future . get _ query _ trace ( self . max _ trace _ wait ) <nl> + if trace : <nl> print _ trace ( self , trace ) <nl> - except TraceUnavailable : <nl> - msg = " Statement trace did not complete within % d seconds ; trace data may be incomplete . " % ( self . session . max _ trace _ wait , ) <nl> - self . writeresult ( msg , color = RED ) <nl> - for trace _ id in future . get _ query _ trace _ ids ( ) : <nl> - self . show _ session ( trace _ id ) <nl> + elif stmt . trace _ id : <nl> + self . writeresult ( " This statement trace may be incomplete " , color = RED ) <nl> + self . show _ session ( stmt . trace _ id ) <nl> + else : <nl> + msg = " Statement trace did not complete within % d seconds " % ( self . session . max _ trace _ wait ) <nl> + self . writeresult ( msg , color = RED ) <nl> except Exception , err : <nl> self . printerr ( " Unable to fetch query trace : % s " % ( str ( err ) , ) ) <nl> <nl> - return success <nl> + return result <nl> <nl> def parse _ for _ table _ meta ( self , query _ string ) : <nl> try : <nl> @ @ - 1176 , 7 + 1177 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> while True : <nl> try : <nl> future = self . session . execute _ async ( statement , trace = self . tracing _ enabled ) <nl> - result = future . result ( ) <nl> + rows = future . result ( self . session . default _ timeout ) <nl> break <nl> except cassandra . OperationTimedOut , err : <nl> self . refresh _ schema _ metadata _ best _ effort ( ) <nl> @ @ - 1191 , 36 + 1192 , 42 @ @ class Shell ( cmd . Cmd ) : <nl> return False , None <nl> <nl> if statement . query _ string [ : 6 ] . lower ( ) = = ' select ' : <nl> - self . print _ result ( result , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> + self . print _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> elif statement . query _ string . lower ( ) . startswith ( " list users " ) or statement . query _ string . lower ( ) . startswith ( " list roles " ) : <nl> - self . print _ result ( result , self . get _ table _ meta ( ' system _ auth ' , ' roles ' ) ) <nl> + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' roles ' ) ) <nl> elif statement . query _ string . lower ( ) . startswith ( " list " ) : <nl> - self . print _ result ( result , self . get _ table _ meta ( ' system _ auth ' , ' role _ permissions ' ) ) <nl> - elif result : <nl> + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' role _ permissions ' ) ) <nl> + elif rows : <nl> # CAS INSERT / UPDATE <nl> self . writeresult ( " " ) <nl> - self . print _ static _ result ( list ( result ) , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> + self . print _ static _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> self . flush _ output ( ) <nl> return True , future <nl> <nl> - def print _ result ( self , result , table _ meta ) : <nl> + def print _ result ( self , rows , table _ meta ) : <nl> self . decoding _ errors = [ ] <nl> <nl> self . writeresult ( " " ) <nl> - if result . has _ more _ pages and self . tty : <nl> + if isinstance ( rows , PagedResult ) and self . tty : <nl> num _ rows = 0 <nl> while True : <nl> - page = result . current _ rows <nl> - if page : <nl> - num _ rows + = len ( page ) <nl> - self . print _ static _ result ( page , table _ meta ) <nl> - if result . has _ more _ pages : <nl> - raw _ input ( " - - - MORE - - - " ) <nl> - result . fetch _ next _ page ( ) <nl> - else : <nl> + page = list ( rows . current _ response ) <nl> + if not page : <nl> + break <nl> + num _ rows + = len ( page ) <nl> + self . print _ static _ result ( page , table _ meta ) <nl> + if not rows . response _ future . has _ more _ pages : <nl> break <nl> + raw _ input ( " - - - MORE - - - " ) <nl> + <nl> + rows . response _ future . start _ fetching _ next _ page ( ) <nl> + result = rows . response _ future . result ( ) <nl> + if rows . response _ future . has _ more _ pages : <nl> + rows . current _ response = result . current _ response <nl> + else : <nl> + rows . current _ response = iter ( result ) <nl> else : <nl> - rows = list ( result ) <nl> + rows = list ( rows or [ ] ) <nl> num _ rows = len ( rows ) <nl> self . print _ static _ result ( rows , table _ meta ) <nl> self . writeresult ( " ( % d rows ) " % num _ rows ) <nl> @ @ - 2328 , 7 + 2335 , 7 @ @ class ImportProcess ( multiprocessing . Process ) : <nl> cqltypes = [ table _ meta . columns [ name ] . typestring for name in self . columns ] <nl> pk _ indexes = [ self . columns . index ( col . name ) for col in table _ meta . primary _ key ] <nl> query = ' INSERT INTO % s . % s ( % s ) VALUES ( % % s ) ' % ( <nl> - protect _ name ( table _ meta . keyspace _ name ) , <nl> + protect _ name ( table _ meta . keyspace . name ) , <nl> protect _ name ( table _ meta . name ) , <nl> ' , ' . join ( protect _ names ( self . columns ) ) ) <nl> <nl> diff - - git a / lib / cassandra - driver - internal - only - 2 . 7 . 2 . zip b / lib / cassandra - driver - internal - only - 2 . 7 . 2 . zip <nl> new file mode 100644 <nl> index 0000000 . . f2e75f1 <nl> Binary files / dev / null and b / lib / cassandra - driver - internal - only - 2 . 7 . 2 . zip differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 95c6008 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 95c6008 . zip <nl> deleted file mode 100644 <nl> index da7fa0d . . 0000000 <nl> Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 95c6008 . zip and / dev / null differ
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 17bddd3 . . 09da020 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 111 , 13 + 111 , 13 @ @ except ImportError , e : 
 ' Error : % s \ n ' % ( sys . executable , sys . path , e ) ) 
 
 from cassandra . auth import PlainTextAuthProvider 
 - from cassandra . cluster import Cluster 
 + from cassandra . cluster import Cluster , PagedResult 
 from cassandra . metadata import ( ColumnMetadata , KeyspaceMetadata , 
 TableMetadata , protect _ name , protect _ names , 
 protect _ value ) 
 from cassandra . policies import WhiteListRoundRobinPolicy 
 from cassandra . protocol import QueryMessage , ResultMessage 
 - from cassandra . query import SimpleStatement , ordered _ dict _ factory , TraceUnavailable 
 + from cassandra . query import SimpleStatement , ordered _ dict _ factory 
 
 # cqlsh should run correctly when run out of a Cassandra source tree , 
 # out of an unpacked Cassandra tarball , and after a proper package install . 
 @ @ - 675 , 7 + 675 , 6 @ @ class Shell ( cmd . Cmd ) : 
 
 self . session . default _ timeout = client _ timeout 
 self . session . row _ factory = ordered _ dict _ factory 
 - self . session . default _ consistency _ level = cassandra . ConsistencyLevel . ONE 
 self . get _ connection _ versions ( ) 
 
 self . current _ keyspace = keyspace 
 @ @ - 1122 , 8 + 1121 , 8 @ @ class Shell ( cmd . Cmd ) : 
 
 def do _ use ( self , parsed ) : 
 ksname = parsed . get _ binding ( ' ksname ' ) 
 - success , _ = self . perform _ simple _ statement ( SimpleStatement ( parsed . extract _ orig ( ) ) ) 
 - if success : 
 + result , future = self . perform _ simple _ statement ( SimpleStatement ( parsed . extract _ orig ( ) ) ) 
 + if result : 
 if ksname [ 0 ] = = ' " ' and ksname [ - 1 ] = = ' " ' : 
 self . current _ keyspace = self . cql _ unprotect _ name ( ksname ) 
 else : 
 @ @ - 1140 , 7 + 1139 , 7 @ @ class Shell ( cmd . Cmd ) : 
 
 def perform _ statement ( self , statement ) : 
 stmt = SimpleStatement ( statement , consistency _ level = self . consistency _ level , serial _ consistency _ level = self . serial _ consistency _ level , fetch _ size = self . page _ size if self . use _ paging else None ) 
 - success , future = self . perform _ simple _ statement ( stmt ) 
 + result , future = self . perform _ simple _ statement ( stmt ) 
 
 if future : 
 if future . warnings : 
 @ @ - 1148 , 17 + 1147 , 19 @ @ class Shell ( cmd . Cmd ) : 
 
 if self . tracing _ enabled : 
 try : 
 - for trace in future . get _ all _ query _ traces ( self . max _ trace _ wait ) : 
 + trace = future . get _ query _ trace ( self . max _ trace _ wait ) 
 + if trace : 
 print _ trace ( self , trace ) 
 - except TraceUnavailable : 
 - msg = " Statement trace did not complete within % d seconds ; trace data may be incomplete . " % ( self . session . max _ trace _ wait , ) 
 - self . writeresult ( msg , color = RED ) 
 - for trace _ id in future . get _ query _ trace _ ids ( ) : 
 - self . show _ session ( trace _ id ) 
 + elif stmt . trace _ id : 
 + self . writeresult ( " This statement trace may be incomplete " , color = RED ) 
 + self . show _ session ( stmt . trace _ id ) 
 + else : 
 + msg = " Statement trace did not complete within % d seconds " % ( self . session . max _ trace _ wait ) 
 + self . writeresult ( msg , color = RED ) 
 except Exception , err : 
 self . printerr ( " Unable to fetch query trace : % s " % ( str ( err ) , ) ) 
 
 - return success 
 + return result 
 
 def parse _ for _ table _ meta ( self , query _ string ) : 
 try : 
 @ @ - 1176 , 7 + 1177 , 7 @ @ class Shell ( cmd . Cmd ) : 
 while True : 
 try : 
 future = self . session . execute _ async ( statement , trace = self . tracing _ enabled ) 
 - result = future . result ( ) 
 + rows = future . result ( self . session . default _ timeout ) 
 break 
 except cassandra . OperationTimedOut , err : 
 self . refresh _ schema _ metadata _ best _ effort ( ) 
 @ @ - 1191 , 36 + 1192 , 42 @ @ class Shell ( cmd . Cmd ) : 
 return False , None 
 
 if statement . query _ string [ : 6 ] . lower ( ) = = ' select ' : 
 - self . print _ result ( result , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 + self . print _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 elif statement . query _ string . lower ( ) . startswith ( " list users " ) or statement . query _ string . lower ( ) . startswith ( " list roles " ) : 
 - self . print _ result ( result , self . get _ table _ meta ( ' system _ auth ' , ' roles ' ) ) 
 + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' roles ' ) ) 
 elif statement . query _ string . lower ( ) . startswith ( " list " ) : 
 - self . print _ result ( result , self . get _ table _ meta ( ' system _ auth ' , ' role _ permissions ' ) ) 
 - elif result : 
 + self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' role _ permissions ' ) ) 
 + elif rows : 
 # CAS INSERT / UPDATE 
 self . writeresult ( " " ) 
 - self . print _ static _ result ( list ( result ) , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 + self . print _ static _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 self . flush _ output ( ) 
 return True , future 
 
 - def print _ result ( self , result , table _ meta ) : 
 + def print _ result ( self , rows , table _ meta ) : 
 self . decoding _ errors = [ ] 
 
 self . writeresult ( " " ) 
 - if result . has _ more _ pages and self . tty : 
 + if isinstance ( rows , PagedResult ) and self . tty : 
 num _ rows = 0 
 while True : 
 - page = result . current _ rows 
 - if page : 
 - num _ rows + = len ( page ) 
 - self . print _ static _ result ( page , table _ meta ) 
 - if result . has _ more _ pages : 
 - raw _ input ( " - - - MORE - - - " ) 
 - result . fetch _ next _ page ( ) 
 - else : 
 + page = list ( rows . current _ response ) 
 + if not page : 
 + break 
 + num _ rows + = len ( page ) 
 + self . print _ static _ result ( page , table _ meta ) 
 + if not rows . response _ future . has _ more _ pages : 
 break 
 + raw _ input ( " - - - MORE - - - " ) 
 + 
 + rows . response _ future . start _ fetching _ next _ page ( ) 
 + result = rows . response _ future . result ( ) 
 + if rows . response _ future . has _ more _ pages : 
 + rows . current _ response = result . current _ response 
 + else : 
 + rows . current _ response = iter ( result ) 
 else : 
 - rows = list ( result ) 
 + rows = list ( rows or [ ] ) 
 num _ rows = len ( rows ) 
 self . print _ static _ result ( rows , table _ meta ) 
 self . writeresult ( " ( % d rows ) " % num _ rows ) 
 @ @ - 2328 , 7 + 2335 , 7 @ @ class ImportProcess ( multiprocessing . Process ) : 
 cqltypes = [ table _ meta . columns [ name ] . typestring for name in self . columns ] 
 pk _ indexes = [ self . columns . index ( col . name ) for col in table _ meta . primary _ key ] 
 query = ' INSERT INTO % s . % s ( % s ) VALUES ( % % s ) ' % ( 
 - protect _ name ( table _ meta . keyspace _ name ) , 
 + protect _ name ( table _ meta . keyspace . name ) , 
 protect _ name ( table _ meta . name ) , 
 ' , ' . join ( protect _ names ( self . columns ) ) ) 
 
 diff - - git a / lib / cassandra - driver - internal - only - 2 . 7 . 2 . zip b / lib / cassandra - driver - internal - only - 2 . 7 . 2 . zip 
 new file mode 100644 
 index 0000000 . . f2e75f1 
 Binary files / dev / null and b / lib / cassandra - driver - internal - only - 2 . 7 . 2 . zip differ 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 95c6008 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 95c6008 . zip 
 deleted file mode 100644 
 index da7fa0d . . 0000000 
 Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 95c6008 . zip and / dev / null differ

NEAREST DIFF:
ELIMINATEDSENTENCE
