BLEU SCORE: 0.005820564441072186

TEST MSG: Modernize system _ schema columns and triggers tables
GENERATED MSG: replace ColumnValidator code with AbstractType and clean up to avoid reflection on the request path . also use final fields in ColumnDefinition . patch by jbellis

TEST DIFF (one line): diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha2 - ae1e256 - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha2 - ae1e256 - SNAPSHOT - shaded . jar <nl> deleted file mode 100644 <nl> index f930cc6 . . 0000000 <nl> Binary files a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha2 - ae1e256 - SNAPSHOT - shaded . jar and / dev / null differ <nl> diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 55db84c - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 55db84c - SNAPSHOT - shaded . jar <nl> new file mode 100644 <nl> index 0000000 . . 385d947 <nl> Binary files / dev / null and b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 55db84c - SNAPSHOT - shaded . jar differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a1 . post0 - 807aaa6 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a1 . post0 - 807aaa6 . zip <nl> deleted file mode 100644 <nl> index 4b84830 . . 0000000 <nl> Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a1 . post0 - 807aaa6 . zip and / dev / null differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 2429ba3 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 2429ba3 . zip <nl> new file mode 100644 <nl> index 0000000 . . 435c5e1 <nl> Binary files / dev / null and b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 2429ba3 . zip differ <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index bcc65b5 . . a26b19d 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 1273 , 8 + 1273 , 8 @ @ public final class CFMetaData <nl> for ( int i = 0 ; i < partitionKeys . size ( ) ; i + + ) <nl> { <nl> Pair < ColumnIdentifier , AbstractType > p = partitionKeys . get ( i ) ; <nl> - Integer componentIndex = partitionKeys . size ( ) = = 1 ? null : i ; <nl> - partitions . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , componentIndex , ColumnDefinition . Kind . PARTITION _ KEY ) ) ; <nl> + int position = partitionKeys . size ( ) = = 1 ? ColumnDefinition . NO _ POSITION : i ; <nl> + partitions . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , position , ColumnDefinition . Kind . PARTITION _ KEY ) ) ; <nl> } <nl> <nl> for ( int i = 0 ; i < clusteringColumns . size ( ) ; i + + ) <nl> @ @ - 1283 , 17 + 1283 , 11 @ @ public final class CFMetaData <nl> clusterings . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , i , ColumnDefinition . Kind . CLUSTERING ) ) ; <nl> } <nl> <nl> - for ( int i = 0 ; i < regularColumns . size ( ) ; i + + ) <nl> - { <nl> - Pair < ColumnIdentifier , AbstractType > p = regularColumns . get ( i ) ; <nl> - builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , null , ColumnDefinition . Kind . REGULAR ) ) ; <nl> - } <nl> + for ( Pair < ColumnIdentifier , AbstractType > p : regularColumns ) <nl> + builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , ColumnDefinition . NO _ POSITION , ColumnDefinition . Kind . REGULAR ) ) ; <nl> <nl> - for ( int i = 0 ; i < staticColumns . size ( ) ; i + + ) <nl> - { <nl> - Pair < ColumnIdentifier , AbstractType > p = staticColumns . get ( i ) ; <nl> - builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , null , ColumnDefinition . Kind . STATIC ) ) ; <nl> - } <nl> + for ( Pair < ColumnIdentifier , AbstractType > p : staticColumns ) <nl> + builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , ColumnDefinition . NO _ POSITION , ColumnDefinition . Kind . STATIC ) ) ; <nl> <nl> return new CFMetaData ( keyspace , <nl> table , <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index 82f2556 . . 17276bc 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 32 , 7 + 32 , 10 @ @ import org . apache . cassandra . serializers . MarshalException ; <nl> <nl> public class ColumnDefinition extends ColumnSpecification implements Comparable < ColumnDefinition > <nl> { <nl> - public static final Comparator < Object > asymmetricColumnDataComparator = ( a , b ) - > ( ( ColumnData ) a ) . column ( ) . compareTo ( ( ColumnDefinition ) b ) ; <nl> + public static final Comparator < Object > asymmetricColumnDataComparator = <nl> + ( a , b ) - > ( ( ColumnData ) a ) . column ( ) . compareTo ( ( ColumnDefinition ) b ) ; <nl> + <nl> + public static final int NO _ POSITION = - 1 ; <nl> <nl> / * <nl> * The type of CQL3 column this definition represents . <nl> @ @ - 41 , 7 + 44 , 7 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> * static ones . <nl> * <nl> * Note that thrift only knows about definitions of type REGULAR ( and <nl> - * the ones whose componentIndex = = null ) . <nl> + * the ones whose position = = NO _ POSITION ( - 1 ) ) . <nl> * / <nl> public enum Kind <nl> { <nl> @ @ - 61 , 10 + 64 , 10 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> <nl> / * <nl> * If the column comparator is a composite type , indicates to which <nl> - * component this definition refers to . If null , the definition refers to <nl> + * component this definition refers to . If NO _ POSITION ( - 1 ) , the definition refers to <nl> * the full column name . <nl> * / <nl> - private final Integer componentIndex ; <nl> + private final int position ; <nl> <nl> private final Comparator < CellPath > cellPathComparator ; <nl> private final Comparator < Object > asymmetricCellPathComparator ; <nl> @ @ - 81 , 48 + 84 , 48 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> return ( kind . ordinal ( ) < < 28 ) | ( isComplex ? 1 < < 27 : 0 ) | position ; <nl> } <nl> <nl> - public static ColumnDefinition partitionKeyDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator , Integer componentIndex ) <nl> + public static ColumnDefinition partitionKeyDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type , int position ) <nl> { <nl> - return new ColumnDefinition ( cfm , name , validator , componentIndex , Kind . PARTITION _ KEY ) ; <nl> + return new ColumnDefinition ( cfm , name , type , position , Kind . PARTITION _ KEY ) ; <nl> } <nl> <nl> - public static ColumnDefinition partitionKeyDef ( String ksName , String cfName , String name , AbstractType < ? > validator , Integer componentIndex ) <nl> + public static ColumnDefinition partitionKeyDef ( String ksName , String cfName , String name , AbstractType < ? > type , int position ) <nl> { <nl> - return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , validator , componentIndex , Kind . PARTITION _ KEY ) ; <nl> + return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , type , position , Kind . PARTITION _ KEY ) ; <nl> } <nl> <nl> - public static ColumnDefinition clusteringKeyDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator , Integer componentIndex ) <nl> + public static ColumnDefinition clusteringDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type , int position ) <nl> { <nl> - return new ColumnDefinition ( cfm , name , validator , componentIndex , Kind . CLUSTERING ) ; <nl> + return new ColumnDefinition ( cfm , name , type , position , Kind . CLUSTERING ) ; <nl> } <nl> <nl> - public static ColumnDefinition clusteringKeyDef ( String ksName , String cfName , String name , AbstractType < ? > validator , Integer componentIndex ) <nl> + public static ColumnDefinition clusteringDef ( String ksName , String cfName , String name , AbstractType < ? > type , int position ) <nl> { <nl> - return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , validator , componentIndex , Kind . CLUSTERING ) ; <nl> + return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , type , position , Kind . CLUSTERING ) ; <nl> } <nl> <nl> - public static ColumnDefinition regularDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator ) <nl> + public static ColumnDefinition regularDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type ) <nl> { <nl> - return new ColumnDefinition ( cfm , name , validator , null , Kind . REGULAR ) ; <nl> + return new ColumnDefinition ( cfm , name , type , NO _ POSITION , Kind . REGULAR ) ; <nl> } <nl> <nl> - public static ColumnDefinition regularDef ( String ksName , String cfName , String name , AbstractType < ? > validator ) <nl> + public static ColumnDefinition regularDef ( String ksName , String cfName , String name , AbstractType < ? > type ) <nl> { <nl> - return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , validator , null , Kind . REGULAR ) ; <nl> + return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , type , NO _ POSITION , Kind . REGULAR ) ; <nl> } <nl> <nl> - public static ColumnDefinition staticDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator ) <nl> + public static ColumnDefinition staticDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type ) <nl> { <nl> - return new ColumnDefinition ( cfm , name , validator , null , Kind . STATIC ) ; <nl> + return new ColumnDefinition ( cfm , name , type , NO _ POSITION , Kind . STATIC ) ; <nl> } <nl> <nl> - public ColumnDefinition ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator , Integer componentIndex , Kind kind ) <nl> + public ColumnDefinition ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type , int position , Kind kind ) <nl> { <nl> this ( cfm . ksName , <nl> cfm . cfName , <nl> ColumnIdentifier . getInterned ( name , cfm . getColumnDefinitionNameComparator ( kind ) ) , <nl> - validator , <nl> - componentIndex , <nl> + type , <nl> + position , <nl> kind ) ; <nl> } <nl> <nl> @ @ - 130 , 29 + 133 , 30 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> public ColumnDefinition ( String ksName , <nl> String cfName , <nl> ColumnIdentifier name , <nl> - AbstractType < ? > validator , <nl> - Integer componentIndex , <nl> + AbstractType < ? > type , <nl> + int position , <nl> Kind kind ) <nl> { <nl> - super ( ksName , cfName , name , validator ) ; <nl> - assert name ! = null & & validator ! = null & & kind ! = null ; <nl> + super ( ksName , cfName , name , type ) ; <nl> + assert name ! = null & & type ! = null & & kind ! = null ; <nl> assert name . isInterned ( ) ; <nl> - assert componentIndex = = null | | kind . isPrimaryKeyKind ( ) ; / / The componentIndex really only make sense for partition and clustering columns , <nl> - / / so make sure we don ' t sneak it for something else since it ' d breaks equals ( ) <nl> + assert position = = NO _ POSITION | | kind . isPrimaryKeyKind ( ) ; / / The position really only make sense for partition and clustering columns , <nl> + / / so make sure we don ' t sneak it for something else since it ' d breaks equals ( ) <nl> this . kind = kind ; <nl> - this . componentIndex = componentIndex ; <nl> - this . cellPathComparator = makeCellPathComparator ( kind , validator ) ; <nl> + this . position = position ; <nl> + this . cellPathComparator = makeCellPathComparator ( kind , type ) ; <nl> this . cellComparator = cellPathComparator = = null ? ColumnData . comparator : ( a , b ) - > cellPathComparator . compare ( a . path ( ) , b . path ( ) ) ; <nl> this . asymmetricCellPathComparator = cellPathComparator = = null ? null : ( a , b ) - > cellPathComparator . compare ( ( ( Cell ) a ) . path ( ) , ( CellPath ) b ) ; <nl> this . comparisonOrder = comparisonOrder ( kind , isComplex ( ) , position ( ) ) ; <nl> } <nl> <nl> - private static Comparator < CellPath > makeCellPathComparator ( Kind kind , AbstractType < ? > validator ) <nl> + private static Comparator < CellPath > makeCellPathComparator ( Kind kind , AbstractType < ? > type ) <nl> { <nl> - if ( kind . isPrimaryKeyKind ( ) | | ! validator . isCollection ( ) | | ! validator . isMultiCell ( ) ) <nl> + if ( kind . isPrimaryKeyKind ( ) | | ! type . isCollection ( ) | | ! type . isMultiCell ( ) ) <nl> return null ; <nl> <nl> - final CollectionType type = ( CollectionType ) validator ; <nl> + CollectionType collection = ( CollectionType ) type ; <nl> + <nl> return new Comparator < CellPath > ( ) <nl> { <nl> public int compare ( CellPath path1 , CellPath path2 ) <nl> @ @ - 168 , 29 + 172 , 29 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> <nl> / / This will get more complicated once we have non - frozen UDT and nested collections <nl> assert path1 . size ( ) = = 1 & & path2 . size ( ) = = 1 ; <nl> - return type . nameComparator ( ) . compare ( path1 . get ( 0 ) , path2 . get ( 0 ) ) ; <nl> + return collection . nameComparator ( ) . compare ( path1 . get ( 0 ) , path2 . get ( 0 ) ) ; <nl> } <nl> } ; <nl> } <nl> <nl> public ColumnDefinition copy ( ) <nl> { <nl> - return new ColumnDefinition ( ksName , cfName , name , type , componentIndex , kind ) ; <nl> + return new ColumnDefinition ( ksName , cfName , name , type , position , kind ) ; <nl> } <nl> <nl> public ColumnDefinition withNewName ( ColumnIdentifier newName ) <nl> { <nl> - return new ColumnDefinition ( ksName , cfName , newName , type , componentIndex , kind ) ; <nl> + return new ColumnDefinition ( ksName , cfName , newName , type , position , kind ) ; <nl> } <nl> <nl> public ColumnDefinition withNewType ( AbstractType < ? > newType ) <nl> { <nl> - return new ColumnDefinition ( ksName , cfName , name , newType , componentIndex , kind ) ; <nl> + return new ColumnDefinition ( ksName , cfName , name , newType , position , kind ) ; <nl> } <nl> <nl> public boolean isOnAllComponents ( ) <nl> { <nl> - return componentIndex = = null ; <nl> + return position = = NO _ POSITION ; <nl> } <nl> <nl> public boolean isPartitionKey ( ) <nl> @ @ - 213 , 12 + 217 , 13 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> return kind = = Kind . REGULAR ; <nl> } <nl> <nl> - / / The componentIndex . This never return null however for convenience sake : <nl> - / / if componentIndex = = null , this return 0 . So caller should first check <nl> - / / isOnAllComponents ( ) to distinguish if that ' s a possibility . <nl> + / * * <nl> + * For convenience sake , if position = = NO _ POSITION , this method will return 0 . The callers should first check <nl> + * isOnAllComponents ( ) to distinguish between proper 0 position and NO _ POSITION . <nl> + * / <nl> public int position ( ) <nl> { <nl> - return componentIndex = = null ? 0 : componentIndex ; <nl> + return Math . max ( 0 , position ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 237 , 13 + 242 , 13 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> & & Objects . equal ( name , cd . name ) <nl> & & Objects . equal ( type , cd . type ) <nl> & & Objects . equal ( kind , cd . kind ) <nl> - & & Objects . equal ( componentIndex , cd . componentIndex ) ; <nl> + & & Objects . equal ( position , cd . position ) ; <nl> } <nl> <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> - return Objects . hashCode ( ksName , cfName , name , type , kind , componentIndex ) ; <nl> + return Objects . hashCode ( ksName , cfName , name , type , kind , position ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 253 , 7 + 258 , 7 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < <nl> . add ( " name " , name ) <nl> . add ( " type " , type ) <nl> . add ( " kind " , kind ) <nl> - . add ( " componentIndex " , componentIndex ) <nl> + . add ( " position " , position ) <nl> . toString ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / Columns . java b / src / java / org / apache / cassandra / db / Columns . java <nl> index 582b742 . . 442f77f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Columns . java <nl> + + + b / src / java / org / apache / cassandra / db / Columns . java <nl> @ @ - 50 , 8 + 50 , 13 @ @ public class Columns extends AbstractCollection < ColumnDefinition > implements Col <nl> { <nl> public static final Serializer serializer = new Serializer ( ) ; <nl> public static final Columns NONE = new Columns ( BTree . empty ( ) , 0 ) ; <nl> - public static final ColumnDefinition FIRST _ COMPLEX = new ColumnDefinition ( " " , " " , ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , <nl> - SetType . getInstance ( UTF8Type . instance , true ) , null , ColumnDefinition . Kind . REGULAR ) ; <nl> + public static final ColumnDefinition FIRST _ COMPLEX = <nl> + new ColumnDefinition ( " " , <nl> + " " , <nl> + ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , <nl> + SetType . getInstance ( UTF8Type . instance , true ) , <nl> + ColumnDefinition . NO _ POSITION , <nl> + ColumnDefinition . Kind . REGULAR ) ; <nl> <nl> private final Object [ ] columns ; <nl> private final int complexIdx ; / / Index of the first complex column <nl> diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> index 7c0eadf . . 1674de8 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> + + + b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java <nl> @ @ - 476 , 7 + 476 , 7 @ @ public final class LegacySchemaMigrator <nl> } <nl> else if ( isStaticCompactTable ) <nl> { <nl> - defs . add ( ColumnDefinition . clusteringKeyDef ( ksName , cfName , names . defaultClusteringName ( ) , rawComparator , null ) ) ; <nl> + defs . add ( ColumnDefinition . clusteringDef ( ksName , cfName , names . defaultClusteringName ( ) , rawComparator , ColumnDefinition . NO _ POSITION ) ) ; <nl> defs . add ( ColumnDefinition . regularDef ( ksName , cfName , names . defaultCompactValueName ( ) , defaultValidator ) ) ; <nl> } <nl> else <nl> @ @ - 572 , 7 + 572 , 7 @ @ public final class LegacySchemaMigrator <nl> if ( needsUpgrade & & isStaticCompactTable & & kind = = ColumnDefinition . Kind . REGULAR ) <nl> kind = ColumnDefinition . Kind . STATIC ; <nl> <nl> - Integer componentIndex = null ; <nl> + int componentIndex = ColumnDefinition . NO _ POSITION ; <nl> / / Note that the component _ index is not useful for non - primary key parts ( it never really in fact since there is <nl> / / no particular ordering of non - PK columns , we only used to use it as a simplification but that ' s not needed <nl> / / anymore ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index 2df4ca4 . . 55b841b 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 118 , 9 + 118 , 9 @ @ public final class SchemaKeyspace <nl> + " table _ name text , " <nl> + " column _ name text , " <nl> + " column _ name _ bytes blob , " <nl> - + " component _ index int , " <nl> + + " kind text , " <nl> + + " position int , " <nl> + " type text , " <nl> - + " validator text , " <nl> + " PRIMARY KEY ( ( keyspace _ name ) , table _ name , column _ name ) ) " ) ; <nl> <nl> private static final CFMetaData DroppedColumns = <nl> @ @ - 141 , 7 + 141 , 7 @ @ public final class SchemaKeyspace <nl> + " keyspace _ name text , " <nl> + " table _ name text , " <nl> + " trigger _ name text , " <nl> - + " trigger _ options frozen < map < text , text > > , " <nl> + + " options frozen < map < text , text > > , " <nl> + " PRIMARY KEY ( ( keyspace _ name ) , table _ name , trigger _ name ) ) " ) ; <nl> <nl> private static final CFMetaData MaterializedViews = <nl> @ @ - 1162 , 9 + 1162 , 9 @ @ public final class SchemaKeyspace <nl> RowUpdateBuilder adder = new RowUpdateBuilder ( Columns , timestamp , mutation ) . clustering ( table . cfName , column . name . toString ( ) ) ; <nl> <nl> adder . add ( " column _ name _ bytes " , column . name . bytes ) <nl> - . add ( " validator " , column . type . toString ( ) ) <nl> - . add ( " type " , column . kind . toString ( ) . toLowerCase ( ) ) <nl> - . add ( " component _ index " , column . isOnAllComponents ( ) ? null : column . position ( ) ) <nl> + . add ( " kind " , column . kind . toString ( ) . toLowerCase ( ) ) <nl> + . add ( " position " , column . isOnAllComponents ( ) ? ColumnDefinition . NO _ POSITION : column . position ( ) ) <nl> + . add ( " type " , column . type . toString ( ) ) <nl> . build ( ) ; <nl> } <nl> <nl> @ @ - 1188 , 15 + 1188 , 13 @ @ public final class SchemaKeyspace <nl> <nl> ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; <nl> <nl> - ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " type " ) . toUpperCase ( ) ) ; <nl> + ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; <nl> <nl> - Integer componentIndex = null ; <nl> - if ( row . has ( " component _ index " ) ) <nl> - componentIndex = row . getInt ( " component _ index " ) ; <nl> + int position = row . getInt ( " position " ) ; <nl> <nl> - AbstractType < ? > validator = parseType ( row . getString ( " validator " ) ) ; <nl> + AbstractType < ? > type = parseType ( row . getString ( " type " ) ) ; <nl> <nl> - return new ColumnDefinition ( keyspace , table , name , validator , componentIndex , kind ) ; <nl> + return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; <nl> } <nl> <nl> / * <nl> @ @ - 1245 , 7 + 1243 , 7 @ @ public final class SchemaKeyspace <nl> { <nl> new RowUpdateBuilder ( Triggers , timestamp , mutation ) <nl> . clustering ( table . cfName , trigger . name ) <nl> - . frozenMap ( " trigger _ options " , Collections . singletonMap ( " class " , trigger . classOption ) ) <nl> + . frozenMap ( " options " , Collections . singletonMap ( " class " , trigger . classOption ) ) <nl> . build ( ) ; <nl> } <nl> <nl> @ @ - 1271 , 7 + 1269 , 7 @ @ public final class SchemaKeyspace <nl> private static TriggerMetadata createTriggerFromTriggerRow ( UntypedResultSet . Row row ) <nl> { <nl> String name = row . getString ( " trigger _ name " ) ; <nl> - String classOption = row . getFrozenTextMap ( " trigger _ options " ) . get ( " class " ) ; <nl> + String classOption = row . getFrozenTextMap ( " options " ) . get ( " class " ) ; <nl> return new TriggerMetadata ( name , classOption ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftConversion . java b / src / java / org / apache / cassandra / thrift / ThriftConversion . java <nl> index 4c17a4b . . 86cfe42 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftConversion . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftConversion . java <nl> @ @ - 238 , 7 + 238 , 7 @ @ public class ThriftConversion <nl> / / historical reasons ) <nl> boolean hasKeyAlias = cf _ def . isSetKey _ alias ( ) & & keyValidator ! = null & & ! ( keyValidator instanceof CompositeType ) ; <nl> if ( hasKeyAlias ) <nl> - defs . add ( ColumnDefinition . partitionKeyDef ( cf _ def . keyspace , cf _ def . name , UTF8Type . instance . getString ( cf _ def . key _ alias ) , keyValidator , null ) ) ; <nl> + defs . add ( ColumnDefinition . partitionKeyDef ( cf _ def . keyspace , cf _ def . name , UTF8Type . instance . getString ( cf _ def . key _ alias ) , keyValidator , ColumnDefinition . NO _ POSITION ) ) ; <nl> <nl> / / Now add any CQL metadata that we want to copy , skipping the keyAlias if there was one <nl> for ( ColumnDefinition def : previousCQLMetadata ) <nl> @ @ - 376 , 14 + 376 , 14 @ @ public class ThriftConversion <nl> } <nl> else <nl> { <nl> - defs . add ( ColumnDefinition . partitionKeyDef ( ks , cf , names . defaultPartitionKeyName ( ) , keyValidator , null ) ) ; <nl> + defs . add ( ColumnDefinition . partitionKeyDef ( ks , cf , names . defaultPartitionKeyName ( ) , keyValidator , ColumnDefinition . NO _ POSITION ) ) ; <nl> } <nl> } <nl> <nl> if ( subComparator ! = null ) <nl> { <nl> / / SuperColumn tables : we use a special map to hold dynamic values within a given super column <nl> - defs . add ( ColumnDefinition . clusteringKeyDef ( ks , cf , names . defaultClusteringName ( ) , comparator , 0 ) ) ; <nl> + defs . add ( ColumnDefinition . clusteringDef ( ks , cf , names . defaultClusteringName ( ) , comparator , 0 ) ) ; <nl> defs . add ( ColumnDefinition . regularDef ( ks , cf , CompactTables . SUPER _ COLUMN _ MAP _ COLUMN _ STR , MapType . getInstance ( subComparator , defaultValidator , true ) ) ) ; <nl> } <nl> else <nl> @ @ - 393 , 7 + 393 , 7 @ @ public class ThriftConversion <nl> : Collections . < AbstractType < ? > > singletonList ( comparator ) ; <nl> <nl> for ( int i = 0 ; i < subTypes . size ( ) ; i + + ) <nl> - defs . add ( ColumnDefinition . clusteringKeyDef ( ks , cf , names . defaultClusteringName ( ) , subTypes . get ( i ) , i ) ) ; <nl> + defs . add ( ColumnDefinition . clusteringDef ( ks , cf , names . defaultClusteringName ( ) , subTypes . get ( i ) , i ) ) ; <nl> <nl> defs . add ( ColumnDefinition . regularDef ( ks , cf , names . defaultCompactValueName ( ) , defaultValidator ) ) ; <nl> } <nl> @ @ - 505 , 7 + 505 , 7 @ @ public class ThriftConversion <nl> cfName , <nl> ColumnIdentifier . getInterned ( ByteBufferUtil . clone ( thriftColumnDef . name ) , comparator ) , <nl> TypeParser . parse ( thriftColumnDef . validation _ class ) , <nl> - null , <nl> + ColumnDefinition . NO _ POSITION , <nl> kind ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java <nl> index f862816 . . d602076 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java <nl> + + + b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java <nl> @ @ - 149 , 15 + 149 , 9 @ @ public class NativeSSTableLoaderClient extends SSTableLoader . Client <nl> private static ColumnDefinition createDefinitionFromRow ( Row row , String keyspace , String table ) <nl> { <nl> ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; <nl> - <nl> - ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " type " ) . toUpperCase ( ) ) ; <nl> - <nl> - Integer componentIndex = null ; <nl> - if ( ! row . isNull ( " component _ index " ) ) <nl> - componentIndex = row . getInt ( " component _ index " ) ; <nl> - <nl> - AbstractType < ? > validator = TypeParser . parse ( row . getString ( " validator " ) ) ; <nl> - <nl> - return new ColumnDefinition ( keyspace , table , name , validator , componentIndex , kind ) ; <nl> + AbstractType < ? > type = TypeParser . parse ( row . getString ( " type " ) ) ; <nl> + int position = row . getInt ( " position " ) ; <nl> + ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; <nl> + return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index 8675d7f . . 175e492 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 270 , 7 + 270 , 7 @ @ public class SchemaLoader <nl> cfName , <nl> ColumnIdentifier . getInterned ( IntegerType . instance . fromString ( " 42 " ) , IntegerType . instance ) , <nl> UTF8Type . instance , <nl> - null , <nl> + ColumnDefinition . NO _ POSITION , <nl> ColumnDefinition . Kind . REGULAR ) ; <nl> } <nl> <nl> @ @ - 280 , 7 + 280 , 7 @ @ public class SchemaLoader <nl> cfName , <nl> ColumnIdentifier . getInterned ( " fortytwo " , true ) , <nl> UTF8Type . instance , <nl> - null , <nl> + ColumnDefinition . NO _ POSITION , <nl> ColumnDefinition . Kind . REGULAR ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnsTest . java b / test / unit / org / apache / cassandra / db / ColumnsTest . java <nl> index 4962cb2 . . 921209e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnsTest . java <nl> @ @ - 37 , 13 + 37 , 14 @ @ import org . apache . cassandra . db . marshal . SetType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . io . util . DataInputBuffer ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . btree . BTreeSet ; <nl> <nl> + import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; <nl> + <nl> public class ColumnsTest <nl> { <nl> <nl> - private static CFMetaData cfMetaData = MockSchema . newCFS ( ) . metadata ; <nl> + private static final CFMetaData cfMetaData = MockSchema . newCFS ( ) . metadata ; <nl> <nl> / / this tests most of our functionality , since each subset we perform <nl> / / reasonably comprehensive tests of basic functionality against <nl> @ @ - 380 , 26 + 381 , 26 @ @ public class ColumnsTest <nl> private static void addPartition ( List < String > names , List < ColumnDefinition > results ) <nl> { <nl> for ( String name : names ) <nl> - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , UTF8Type . instance , null , ColumnDefinition . Kind . PARTITION _ KEY ) ) ; <nl> + results . add ( ColumnDefinition . partitionKeyDef ( cfMetaData , bytes ( name ) , UTF8Type . instance , ColumnDefinition . NO _ POSITION ) ) ; <nl> } <nl> <nl> private static void addClustering ( List < String > names , List < ColumnDefinition > results ) <nl> { <nl> int i = 0 ; <nl> for ( String name : names ) <nl> - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , UTF8Type . instance , i + + , ColumnDefinition . Kind . CLUSTERING ) ) ; <nl> + results . add ( ColumnDefinition . clusteringDef ( cfMetaData , bytes ( name ) , UTF8Type . instance , i + + ) ) ; <nl> } <nl> <nl> private static void addRegular ( List < String > names , List < ColumnDefinition > results ) <nl> { <nl> for ( String name : names ) <nl> - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , UTF8Type . instance , null , ColumnDefinition . Kind . REGULAR ) ) ; <nl> + results . add ( ColumnDefinition . regularDef ( cfMetaData , bytes ( name ) , UTF8Type . instance ) ) ; <nl> } <nl> <nl> private static < V > void addComplex ( List < String > names , List < ColumnDefinition > results ) <nl> { <nl> for ( String name : names ) <nl> - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , SetType . getInstance ( UTF8Type . instance , true ) , null , ColumnDefinition . Kind . REGULAR ) ) ; <nl> + results . add ( ColumnDefinition . regularDef ( cfMetaData , bytes ( name ) , SetType . getInstance ( UTF8Type . instance , true ) ) ) ; <nl> } <nl> <nl> private static CFMetaData mock ( Columns columns )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 79509bb . . 4fe4692 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import org . apache . cassandra . db . clock . TimestampReconciler ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . db . migration . Migration ; <nl> import org . apache . cassandra . locator . DatacenterShardStrategy ; <nl> - import org . apache . cassandra . service . ColumnValidator ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> @ @ - 323 , 34 + 322 , 11 @ @ public final class CFMetaData <nl> return idGen . getAndIncrement ( ) ; <nl> } <nl> <nl> - public ColumnValidator getColumnValidator ( byte [ ] column ) <nl> + public AbstractType getValueValidator ( byte [ ] column ) <nl> { <nl> - ColumnValidator validator = null ; <nl> ColumnDefinition columnDefinition = column _ metadata . get ( column ) ; <nl> - <nl> - if ( columnDefinition ! = null ) <nl> - { <nl> - String className = columnDefinition . validation _ class ; <nl> - if ( className ! = null & & className . trim ( ) . length ( ) > 0 ) <nl> - { <nl> - try <nl> - { <nl> - validator = ( ColumnValidator ) Class . forName ( className ) . newInstance ( ) ; <nl> - } <nl> - catch ( ClassNotFoundException cnfe ) <nl> - { <nl> - throw new MarshalException ( " could not find validation class + " + className , cnfe ) ; <nl> - } <nl> - catch ( InstantiationException ie ) <nl> - { <nl> - throw new MarshalException ( " could not instantiate validation class " + className , ie ) ; <nl> - } <nl> - catch ( IllegalAccessException iae ) <nl> - { <nl> - throw new MarshalException ( " IllegalAccessException instantiating validation class " + className , iae ) ; <nl> - } <nl> - } <nl> - } <nl> - return validator ; <nl> + if ( columnDefinition = = null ) <nl> + return null ; <nl> + return columnDefinition . validator ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> index 0290980 . . 6a19e4d 100644 <nl> - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java <nl> @ @ - 6 , 58 + 6 , 50 @ @ import java . util . * ; <nl> import org . apache . commons . lang . builder . EqualsBuilder ; <nl> import org . apache . commons . lang . builder . HashCodeBuilder ; <nl> <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . thrift . ColumnDef ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class ColumnDefinition { <nl> - public byte [ ] name ; <nl> - public String validation _ class ; <nl> - public String index _ type ; <nl> - public String index _ name ; <nl> + public final byte [ ] name ; <nl> + public final AbstractType validator ; <nl> + public final String index _ type ; <nl> + public final String index _ name ; <nl> <nl> - public ColumnDefinition ( ) <nl> - { <nl> - this ( null , null , null , null ) ; <nl> - } <nl> - <nl> - public ColumnDefinition ( byte [ ] name , String validation _ class , String index _ type , String index _ name ) <nl> + public ColumnDefinition ( byte [ ] name , String validation _ class , String index _ type , String index _ name ) throws ConfigurationException <nl> { <nl> this . name = name ; <nl> - this . validation _ class = validation _ class ; <nl> this . index _ type = index _ type ; <nl> this . index _ name = index _ name ; <nl> + this . validator = DatabaseDescriptor . getComparator ( validation _ class ) ; <nl> } <nl> <nl> @ Override <nl> - public int hashCode ( ) <nl> + public boolean equals ( Object o ) <nl> { <nl> - return new HashCodeBuilder ( ) <nl> - . append ( name ) <nl> - . append ( validation _ class ) <nl> - . append ( index _ type ) <nl> - . append ( index _ name ) <nl> - . toHashCode ( ) ; <nl> + if ( this = = o ) <nl> + return true ; <nl> + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) <nl> + return false ; <nl> + <nl> + ColumnDefinition that = ( ColumnDefinition ) o ; <nl> + if ( index _ name ! = null ? ! index _ name . equals ( that . index _ name ) : that . index _ name ! = null ) <nl> + return false ; <nl> + if ( index _ type ! = null ? ! index _ type . equals ( that . index _ type ) : that . index _ type ! = null ) <nl> + return false ; <nl> + if ( ! Arrays . equals ( name , that . name ) ) <nl> + return false ; <nl> + return ! ( validator ! = null ? ! validator . equals ( that . validator ) : that . validator ! = null ) ; <nl> } <nl> <nl> @ Override <nl> - public boolean equals ( Object obj ) <nl> + public int hashCode ( ) <nl> { <nl> - if ( obj = = this ) <nl> - { <nl> - return true ; <nl> - } <nl> - else if ( obj = = null | | obj . getClass ( ) ! = getClass ( ) ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - ColumnDefinition rhs = ( ColumnDefinition ) obj ; <nl> - return new EqualsBuilder ( ) <nl> - . append ( name , rhs . name ) <nl> - . append ( validation _ class , rhs . validation _ class ) <nl> - . append ( index _ name , rhs . index _ name ) <nl> - . append ( index _ type , rhs . index _ type ) <nl> - . isEquals ( ) ; <nl> + int result = name ! = null ? Arrays . hashCode ( name ) : 0 ; <nl> + result = 31 * result + ( validator ! = null ? validator . hashCode ( ) : 0 ) ; <nl> + result = 31 * result + ( index _ type ! = null ? index _ type . hashCode ( ) : 0 ) ; <nl> + result = 31 * result + ( index _ name ! = null ? index _ name . hashCode ( ) : 0 ) ; <nl> + return result ; <nl> } <nl> <nl> public static byte [ ] serialize ( ColumnDefinition cd ) throws IOException <nl> @ @ - 66 , 24 + 58 , 15 @ @ public class ColumnDefinition { <nl> DataOutputStream out = new DataOutputStream ( bout ) ; <nl> out . writeInt ( cd . name . length ) ; <nl> out . write ( cd . name ) ; <nl> - <nl> - out . writeBoolean ( cd . validation _ class ! = null ) ; <nl> - if ( cd . validation _ class ! = null ) <nl> - { <nl> - out . writeUTF ( cd . validation _ class ) ; <nl> - } <nl> + out . writeUTF ( cd . validator . getClass ( ) . getName ( ) ) ; <nl> <nl> out . writeBoolean ( cd . index _ type ! = null ) ; <nl> if ( cd . index _ type ! = null ) <nl> - { <nl> out . writeUTF ( cd . index _ type ) ; <nl> - } <nl> <nl> out . writeBoolean ( cd . index _ name ! = null ) ; <nl> if ( cd . index _ name ! = null ) <nl> - { <nl> out . writeUTF ( cd . index _ name ) ; <nl> - } <nl> <nl> out . close ( ) ; <nl> return bout . toByteArray ( ) ; <nl> @ @ - 91 , 37 + 74 , 36 @ @ public class ColumnDefinition { <nl> <nl> public static ColumnDefinition deserialize ( byte [ ] bytes ) throws IOException <nl> { <nl> - ColumnDefinition cd = new ColumnDefinition ( ) ; <nl> DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; <nl> int nameSize = in . readInt ( ) ; <nl> - cd . name = new byte [ nameSize ] ; <nl> - if ( in . read ( cd . name , 0 , nameSize ) ! = nameSize ) <nl> - throw new IOException ( " short read of ColumnDefinition name " ) ; <nl> - <nl> - if ( in . readBoolean ( ) ) <nl> - cd . validation _ class = in . readUTF ( ) ; <nl> + byte [ ] name = new byte [ nameSize ] ; <nl> + in . readFully ( name ) ; <nl> + String validation _ class = in . readUTF ( ) ; <nl> <nl> + String index _ type = null ; <nl> if ( in . readBoolean ( ) ) <nl> - cd . index _ type = in . readUTF ( ) ; <nl> + index _ type = in . readUTF ( ) ; <nl> <nl> + String index _ name = null ; <nl> if ( in . readBoolean ( ) ) <nl> - cd . index _ name = in . readUTF ( ) ; <nl> + index _ name = in . readUTF ( ) ; <nl> <nl> - return cd ; <nl> + try <nl> + { <nl> + return new ColumnDefinition ( name , validation _ class , index _ type , index _ name ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> <nl> - public static ColumnDefinition fromColumnDef ( ColumnDef thriftColumnDef ) <nl> + public static ColumnDefinition fromColumnDef ( ColumnDef cd ) throws ConfigurationException <nl> { <nl> - assert thriftColumnDef ! = null ; <nl> - ColumnDefinition cd = new ColumnDefinition ( ) ; <nl> - cd . name = thriftColumnDef . name ; <nl> - cd . validation _ class = thriftColumnDef . validation _ class ; <nl> - cd . index _ type = thriftColumnDef . index _ type ; <nl> - cd . index _ name = thriftColumnDef . index _ name ; <nl> - return cd ; <nl> + return new ColumnDefinition ( cd . name , cd . validation _ class , cd . index _ type , cd . index _ name ) ; <nl> } <nl> <nl> - public static Map < byte [ ] , ColumnDefinition > fromColumnDef ( List < ColumnDef > thriftDefs ) <nl> + public static Map < byte [ ] , ColumnDefinition > fromColumnDef ( List < ColumnDef > thriftDefs ) throws ConfigurationException <nl> { <nl> if ( thriftDefs = = null ) <nl> return Collections . emptyMap ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index d381711 . . 18bcfcc 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 46 , 7 + 46 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . locator . IEndpointSnitch ; <nl> - import org . apache . cassandra . service . ColumnValidator ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> @ @ - 1081 , 8 + 1080 , 8 @ @ public class DatabaseDescriptor <nl> return conf . hinted _ handoff _ enabled ; <nl> } <nl> <nl> - public static ColumnValidator getColumnValidator ( String keyspace , String cf , byte [ ] column ) <nl> + public static AbstractType getValueValidator ( String keyspace , String cf , byte [ ] column ) <nl> { <nl> - return getCFMetaData ( keyspace , cf ) . getColumnValidator ( column ) ; <nl> + return getCFMetaData ( keyspace , cf ) . getValueValidator ( column ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> index 651fdac . . b3cf7b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java <nl> @ @ - 86 , 12 + 86 , 4 @ @ public abstract class AbstractType implements Comparator < byte [ ] > <nl> } <nl> return builder . toString ( ) ; <nl> } <nl> - <nl> - public final boolean equals ( Object obj ) <nl> - { <nl> - if ( obj = = null ) <nl> - return false ; <nl> - else <nl> - return obj . getClass ( ) . getName ( ) . equals ( getClass ( ) . getName ( ) ) ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / ColumnValidator . java b / src / java / org / apache / cassandra / service / ColumnValidator . java <nl> deleted file mode 100644 <nl> index a19f25f . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / service / ColumnValidator . java <nl> + + + / dev / null <nl> @ @ - 1 , 9 + 0 , 0 @ @ <nl> - package org . apache . cassandra . service ; <nl> - <nl> - import org . apache . cassandra . thrift . Column ; <nl> - import org . apache . cassandra . thrift . ColumnParent ; <nl> - <nl> - public interface ColumnValidator <nl> - { <nl> - public void validate ( String keyspace , ColumnParent column _ parent , Column column ) ; <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / service / ExampleColumnValidator . java b / src / java / org / apache / cassandra / service / ExampleColumnValidator . java <nl> deleted file mode 100644 <nl> index df6a93d . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / service / ExampleColumnValidator . java <nl> + + + / dev / null <nl> @ @ - 1 , 15 + 0 , 0 @ @ <nl> - package org . apache . cassandra . service ; <nl> - <nl> - import org . apache . cassandra . db . marshal . MarshalException ; <nl> - import org . apache . cassandra . thrift . Column ; <nl> - import org . apache . cassandra . thrift . ColumnParent ; <nl> - <nl> - public class ExampleColumnValidator implements ColumnValidator <nl> - { <nl> - @ Override <nl> - public void validate ( String keyspace , ColumnParent column _ parent , Column column ) <nl> - { <nl> - if ( column . value . length % 2 = = 0 ) <nl> - throw new MarshalException ( " column . value . length is even " ) ; <nl> - } <nl> - } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index 3a51b16 . . 2ae5679 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . RandomPartitioner ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . locator . DatacenterShardStrategy ; <nl> - import org . apache . cassandra . service . ColumnValidator ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 52 , 7 + 51 , 7 @ @ public class ThriftValidation <nl> if ( key . length > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> { <nl> throw new InvalidRequestException ( " Key length of " + key . length + <nl> - " is longer than maximum of " + FBUtilities . MAX _ UNSIGNED _ SHORT ) ; <nl> + " is longer than maximum of " + FBUtilities . MAX _ UNSIGNED _ SHORT ) ; <nl> } <nl> } <nl> <nl> @ @ - 148 , 7 + 147 , 7 @ @ public class ThriftValidation <nl> } <nl> <nl> private static void validateColumns ( String keyspace , String columnFamilyName , byte [ ] superColumnName , Iterable < byte [ ] > column _ names ) <nl> - throws InvalidRequestException <nl> + throws InvalidRequestException <nl> { <nl> if ( superColumnName ! = null ) <nl> { <nl> @ @ - 282 , 7 + 281 , 7 @ @ public class ThriftValidation <nl> if ( del . predicate . slice _ range ! = null ) <nl> throw new InvalidRequestException ( " Deletion does not yet support SliceRange predicates . " ) ; <nl> } <nl> - <nl> + <nl> if ( ColumnFamilyType . Standard = = DatabaseDescriptor . getColumnFamilyType ( keyspace , cfName ) & & del . super _ column ! = null ) <nl> { <nl> String msg = String . format ( " deletion of super _ column is not possible on a standard ColumnFamily ( KeySpace = % s ColumnFamily = % s Deletion = % s ) " , keyspace , cfName , del ) ; <nl> @ @ - 302 , 33 + 301 , 27 @ @ public class ThriftValidation <nl> validateColumns ( keyspace , cfName , scName , predicate . column _ names ) ; <nl> } <nl> <nl> - public static void runExternalColumnVerifier ( String keyspace , ColumnParent column _ parent , Column column ) throws InvalidRequestException <nl> + public static void validateColumn ( String keyspace , ColumnParent column _ parent , Column column ) throws InvalidRequestException <nl> { <nl> + validateTtl ( column ) ; <nl> + validateColumns ( keyspace , column _ parent , Arrays . asList ( column . name ) ) ; <nl> try <nl> { <nl> - ColumnValidator validator = null ; <nl> - validator = DatabaseDescriptor . getColumnValidator ( keyspace , column _ parent . column _ family , column . name ) ; <nl> + AbstractType validator = DatabaseDescriptor . getValueValidator ( keyspace , column _ parent . column _ family , column . name ) ; <nl> if ( validator ! = null ) <nl> - validator . validate ( keyspace , column _ parent , column ) ; <nl> + validator . validate ( column . value ) ; <nl> } <nl> catch ( MarshalException me ) <nl> { <nl> - String msg = String . format ( " [ % s ] [ % s ] [ md5 ( byte [ ] ) = % s ] = [ md5 ( byte [ ] ) = % s ] failed validation ( % s ) " , <nl> - keyspace , column _ parent . getColumn _ family ( ) , <nl> - FBUtilities . hexHash ( " MD5 " , column . name ) , <nl> - FBUtilities . hexHash ( " MD5 " , column . value ) , <nl> - me . getMessage ( ) ) ; <nl> - throw new InvalidRequestException ( msg ) ; / / why doesn ' t IRE except a caused _ by argument ? <nl> + throw new InvalidRequestException ( String . format ( " [ % s ] [ % s ] [ % s ] = [ % s ] failed validation ( % s ) " , <nl> + keyspace , <nl> + column _ parent . getColumn _ family ( ) , <nl> + FBUtilities . bytesToHex ( column . name ) , <nl> + FBUtilities . bytesToHex ( column . value ) , <nl> + me . getMessage ( ) ) ) ; <nl> } <nl> } <nl> <nl> - public static void validateColumn ( String keyspace , ColumnParent column _ parent , Column column ) throws InvalidRequestException <nl> - { <nl> - validateTtl ( column ) ; <nl> - validateColumns ( keyspace , column _ parent , Arrays . asList ( column . name ) ) ; <nl> - runExternalColumnVerifier ( keyspace , column _ parent , column ) ; <nl> - } <nl> - <nl> public static void validatePredicate ( String keyspace , ColumnParent column _ parent , SlicePredicate predicate ) <nl> throws InvalidRequestException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index c6e2512 . . 61d60aa 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 237 , 11 + 237 , 6 @ @ public class FBUtilities <nl> return hash . abs ( ) ; <nl> } <nl> <nl> - public static String hexHash ( String type , byte [ ] . . . data ) <nl> - { <nl> - return bytesToHex ( hash ( type , data ) ) ; <nl> - } <nl> - <nl> public static byte [ ] hash ( String type , byte [ ] . . . data ) <nl> { <nl> 	 byte [ ] result ; <nl> diff - - git a / test / system / test _ thrift _ server . py b / test / system / test _ thrift _ server . py <nl> index 457c94f . . 2c62936 100644 <nl> - - - a / test / system / test _ thrift _ server . py <nl> + + + b / test / system / test _ thrift _ server . py <nl> @ @ - 1093 , 41 + 1093 , 23 @ @ class TestMutations ( ThriftTester ) : <nl> def test _ column _ validators ( self ) : <nl> ks = ' Keyspace1 ' <nl> _ set _ keyspace ( ks ) <nl> - cd = ColumnDef ( ' col ' , ' org . apache . cassandra . service . ExampleColumnValidator ' , None , None ) <nl> + cd = ColumnDef ( ' col ' , ' LongType ' , None , None ) <nl> cf = CfDef ( ' Keyspace1 ' , ' ValidatorColumnFamily ' , column _ metadata = [ cd ] ) <nl> client . system _ add _ column _ family ( cf ) <nl> dks = client . describe _ keyspace ( ks ) <nl> assert ' ValidatorColumnFamily ' in dks <nl> <nl> cp = ColumnParent ( ' ValidatorColumnFamily ' ) <nl> - col0 = Column ( ' col ' , ' valuegood ' , Clock ( 0 ) ) <nl> - col1 = Column ( ' col ' , ' valuebad ' , Clock ( 0 ) ) <nl> + col0 = Column ( ' col ' , _ i64 ( 42 ) , Clock ( 0 ) ) <nl> + col1 = Column ( ' col ' , " ceci n ' est pas 64bit " , Clock ( 0 ) ) <nl> client . insert ( ' key0 ' , cp , col0 , ConsistencyLevel . ONE ) <nl> e = _ expect _ exception ( lambda : client . insert ( ' key1 ' , cp , col1 , ConsistencyLevel . ONE ) , InvalidRequestException ) <nl> assert e . why . find ( " failed validation " ) > = 0 <nl> - assert e . why . find ( " column . value . length is even " ) > = 0 <nl> - <nl> - def test _ super _ column _ validators ( self ) : <nl> - ks = ' Keyspace1 ' <nl> - _ set _ keyspace ( ks ) <nl> - cd = ColumnDef ( ' col ' , ' org . apache . cassandra . service . ExampleColumnValidator ' , None , None ) <nl> - cf = CfDef ( ' Keyspace1 ' , ' SuperValidatorColumnFamily ' , ' Super ' , column _ metadata = [ cd ] ) <nl> - client . system _ add _ column _ family ( cf ) <nl> - dks = client . describe _ keyspace ( ' Keyspace1 ' ) <nl> - assert ' SuperValidatorColumnFamily ' in dks <nl> - <nl> - cp = ColumnParent ( ' SuperValidatorColumnFamily ' , ' a subcolumn ' ) <nl> - col0 = Column ( ' col ' , ' valuegood ' , Clock ( 0 ) ) <nl> - col1 = Column ( ' col ' , ' valuebad ' , Clock ( 0 ) ) <nl> - client . insert ( ' key0 ' , cp , col0 , ConsistencyLevel . ONE ) <nl> - e = _ expect _ exception ( lambda : client . insert ( ' key1 ' , cp , col1 , ConsistencyLevel . ONE ) , InvalidRequestException ) <nl> - assert e . why . find ( " failed validation " ) > = 0 <nl> - assert e . why . find ( " column . value . length is even " ) > = 0 <nl> <nl> def test _ system _ column _ family _ operations ( self ) : <nl> _ set _ keyspace ( ' Keyspace1 ' ) <nl> # create <nl> - cd = ColumnDef ( ' ValidationColumn ' , ' randomclass ' , None , None ) <nl> + cd = ColumnDef ( ' ValidationColumn ' , ' BytesType ' , None , None ) <nl> newcf = CfDef ( ' Keyspace1 ' , ' NewColumnFamily ' , column _ metadata = [ cd ] ) <nl> client . system _ add _ column _ family ( newcf ) <nl> ks1 = client . describe _ keyspace ( ' Keyspace1 ' ) <nl> @ @ - 1150 , 7 + 1132 , 7 @ @ class TestMutations ( ThriftTester ) : <nl> _ set _ keyspace ( ' Keyspace1 ' ) <nl> <nl> # create <nl> - cd = ColumnDef ( ' ValidationColumn ' , ' randomclass ' , None , None ) <nl> + cd = ColumnDef ( ' ValidationColumn ' , ' BytesType ' , None , None ) <nl> newcf = CfDef ( ' Keyspace1 ' , ' NewSuperColumnFamily ' , ' Super ' , column _ metadata = [ cd ] ) <nl> client . system _ add _ column _ family ( newcf ) <nl> ks1 = client . describe _ keyspace ( ' Keyspace1 ' ) <nl> diff - - git a / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java b / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java <nl> index 623e30f . . 64d8e17 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java <nl> @ @ - 7 , 17 + 7 , 15 @ @ public class ColumnDefinitionTest <nl> @ Test <nl> public void testSerializeDeserialize ( ) throws Exception <nl> { <nl> - ColumnDefinition cd0 = new ColumnDefinition ( <nl> - " TestColumnDefinitionName0 " . getBytes ( " UTF8 " ) , <nl> - " org . apache . cassandra . config . RandomClass0 " , <nl> - " random index name 0 " , <nl> - " random index type 0 " ) ; <nl> + ColumnDefinition cd0 = new ColumnDefinition ( " TestColumnDefinitionName0 " . getBytes ( " UTF8 " ) , <nl> + " BytesType " , <nl> + " random index type 0 " , <nl> + " random index name 0 " ) ; <nl> <nl> - ColumnDefinition cd1 = new ColumnDefinition ( <nl> - " TestColumnDefinition1 " . getBytes ( " UTF8 " ) , <nl> - " org . apache . cassandra . config . RandomClass1 " , <nl> - null , <nl> - null ) ; <nl> + ColumnDefinition cd1 = new ColumnDefinition ( " TestColumnDefinition1 " . getBytes ( " UTF8 " ) , <nl> + " LongType " , <nl> + null , <nl> + null ) ; <nl> <nl> testSerializeDeserialize ( cd0 ) ; <nl> testSerializeDeserialize ( cd1 ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> index d620686 . . 2a4a478 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> @ @ - 169 , 43 + 169 , 6 @ @ public class DefsTest extends CleanupHelper <nl> } <nl> <nl> @ Test <nl> - public void testCanAddColumnDefinitionsInColumnMetaData ( ) throws Exception <nl> - { <nl> - String ks = " Keyspace1 " ; <nl> - String cf = " ValidatorColumnFamily " ; <nl> - KSMetaData original = DatabaseDescriptor . getTableDefinition ( ks ) ; <nl> - <nl> - Map < byte [ ] , ColumnDefinition > column _ metadata = new TreeMap < byte [ ] , ColumnDefinition > ( FBUtilities . byteArrayComparator ) ; <nl> - <nl> - ColumnDefinition cd0 = new ColumnDefinition ( ) ; <nl> - cd0 . name = " TestColumn1 " . getBytes ( " UTF8 " ) ; <nl> - cd0 . validation _ class = " random class one " ; <nl> - cd0 . index _ name = null ; <nl> - cd0 . index _ type = null ; <nl> - <nl> - ColumnDefinition cd1 = new ColumnDefinition ( ) ; <nl> - cd1 . name = " * " . getBytes ( " UTF8 " ) ; <nl> - cd1 . validation _ class = " random class two " ; <nl> - cd1 . index _ name = " some name " ; <nl> - cd1 . index _ type = " some type " ; <nl> - <nl> - column _ metadata . put ( cd0 . name , cd0 ) ; <nl> - column _ metadata . put ( cd1 . name , cd1 ) ; <nl> - <nl> - CFMetaData newCf = new CFMetaData ( original . name , cf , ColumnFamilyType . Standard , ClockType . Timestamp , UTF8Type . instance , null , new TimestampReconciler ( ) , " A New Column Family " , 0 , false , 1 . 0 , 0 , column _ metadata ) ; <nl> - assert ! DatabaseDescriptor . getTableDefinition ( ks ) . cfMetaData ( ) . containsKey ( newCf . cfName ) ; <nl> - new AddColumnFamily ( newCf ) . apply ( ) ; <nl> - <nl> - assert DatabaseDescriptor . getTableDefinition ( ks ) . cfMetaData ( ) . containsKey ( newCf . cfName ) ; <nl> - assert DatabaseDescriptor . getTableDefinition ( ks ) . cfMetaData ( ) . get ( newCf . cfName ) . equals ( newCf ) ; <nl> - <nl> - ColumnFamilyStore store = Table . open ( ks ) . getColumnFamilyStore ( cf ) ; <nl> - assert store ! = null ; <nl> - store . forceBlockingFlush ( ) ; <nl> - } <nl> - <nl> - <nl> - @ Test <nl> public void dropCf ( ) throws ConfigurationException , IOException , ExecutionException , InterruptedException <nl> { <nl> DecoratedKey dk = Util . dk ( " dropCf " ) ;

TEST DIFF:
diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha2 - ae1e256 - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha2 - ae1e256 - SNAPSHOT - shaded . jar 
 deleted file mode 100644 
 index f930cc6 . . 0000000 
 Binary files a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha2 - ae1e256 - SNAPSHOT - shaded . jar and / dev / null differ 
 diff - - git a / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 55db84c - SNAPSHOT - shaded . jar b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 55db84c - SNAPSHOT - shaded . jar 
 new file mode 100644 
 index 0000000 . . 385d947 
 Binary files / dev / null and b / lib / cassandra - driver - core - 3 . 0 . 0 - alpha3 - 55db84c - SNAPSHOT - shaded . jar differ 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a1 . post0 - 807aaa6 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a1 . post0 - 807aaa6 . zip 
 deleted file mode 100644 
 index 4b84830 . . 0000000 
 Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a1 . post0 - 807aaa6 . zip and / dev / null differ 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 2429ba3 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 2429ba3 . zip 
 new file mode 100644 
 index 0000000 . . 435c5e1 
 Binary files / dev / null and b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 2429ba3 . zip differ 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index bcc65b5 . . a26b19d 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 1273 , 8 + 1273 , 8 @ @ public final class CFMetaData 
 for ( int i = 0 ; i < partitionKeys . size ( ) ; i + + ) 
 { 
 Pair < ColumnIdentifier , AbstractType > p = partitionKeys . get ( i ) ; 
 - Integer componentIndex = partitionKeys . size ( ) = = 1 ? null : i ; 
 - partitions . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , componentIndex , ColumnDefinition . Kind . PARTITION _ KEY ) ) ; 
 + int position = partitionKeys . size ( ) = = 1 ? ColumnDefinition . NO _ POSITION : i ; 
 + partitions . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , position , ColumnDefinition . Kind . PARTITION _ KEY ) ) ; 
 } 
 
 for ( int i = 0 ; i < clusteringColumns . size ( ) ; i + + ) 
 @ @ - 1283 , 17 + 1283 , 11 @ @ public final class CFMetaData 
 clusterings . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , i , ColumnDefinition . Kind . CLUSTERING ) ) ; 
 } 
 
 - for ( int i = 0 ; i < regularColumns . size ( ) ; i + + ) 
 - { 
 - Pair < ColumnIdentifier , AbstractType > p = regularColumns . get ( i ) ; 
 - builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , null , ColumnDefinition . Kind . REGULAR ) ) ; 
 - } 
 + for ( Pair < ColumnIdentifier , AbstractType > p : regularColumns ) 
 + builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , ColumnDefinition . NO _ POSITION , ColumnDefinition . Kind . REGULAR ) ) ; 
 
 - for ( int i = 0 ; i < staticColumns . size ( ) ; i + + ) 
 - { 
 - Pair < ColumnIdentifier , AbstractType > p = staticColumns . get ( i ) ; 
 - builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , null , ColumnDefinition . Kind . STATIC ) ) ; 
 - } 
 + for ( Pair < ColumnIdentifier , AbstractType > p : staticColumns ) 
 + builder . add ( new ColumnDefinition ( keyspace , table , p . left , p . right , ColumnDefinition . NO _ POSITION , ColumnDefinition . Kind . STATIC ) ) ; 
 
 return new CFMetaData ( keyspace , 
 table , 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index 82f2556 . . 17276bc 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 32 , 7 + 32 , 10 @ @ import org . apache . cassandra . serializers . MarshalException ; 
 
 public class ColumnDefinition extends ColumnSpecification implements Comparable < ColumnDefinition > 
 { 
 - public static final Comparator < Object > asymmetricColumnDataComparator = ( a , b ) - > ( ( ColumnData ) a ) . column ( ) . compareTo ( ( ColumnDefinition ) b ) ; 
 + public static final Comparator < Object > asymmetricColumnDataComparator = 
 + ( a , b ) - > ( ( ColumnData ) a ) . column ( ) . compareTo ( ( ColumnDefinition ) b ) ; 
 + 
 + public static final int NO _ POSITION = - 1 ; 
 
 / * 
 * The type of CQL3 column this definition represents . 
 @ @ - 41 , 7 + 44 , 7 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 * static ones . 
 * 
 * Note that thrift only knows about definitions of type REGULAR ( and 
 - * the ones whose componentIndex = = null ) . 
 + * the ones whose position = = NO _ POSITION ( - 1 ) ) . 
 * / 
 public enum Kind 
 { 
 @ @ - 61 , 10 + 64 , 10 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 
 / * 
 * If the column comparator is a composite type , indicates to which 
 - * component this definition refers to . If null , the definition refers to 
 + * component this definition refers to . If NO _ POSITION ( - 1 ) , the definition refers to 
 * the full column name . 
 * / 
 - private final Integer componentIndex ; 
 + private final int position ; 
 
 private final Comparator < CellPath > cellPathComparator ; 
 private final Comparator < Object > asymmetricCellPathComparator ; 
 @ @ - 81 , 48 + 84 , 48 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 return ( kind . ordinal ( ) < < 28 ) | ( isComplex ? 1 < < 27 : 0 ) | position ; 
 } 
 
 - public static ColumnDefinition partitionKeyDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator , Integer componentIndex ) 
 + public static ColumnDefinition partitionKeyDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type , int position ) 
 { 
 - return new ColumnDefinition ( cfm , name , validator , componentIndex , Kind . PARTITION _ KEY ) ; 
 + return new ColumnDefinition ( cfm , name , type , position , Kind . PARTITION _ KEY ) ; 
 } 
 
 - public static ColumnDefinition partitionKeyDef ( String ksName , String cfName , String name , AbstractType < ? > validator , Integer componentIndex ) 
 + public static ColumnDefinition partitionKeyDef ( String ksName , String cfName , String name , AbstractType < ? > type , int position ) 
 { 
 - return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , validator , componentIndex , Kind . PARTITION _ KEY ) ; 
 + return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , type , position , Kind . PARTITION _ KEY ) ; 
 } 
 
 - public static ColumnDefinition clusteringKeyDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator , Integer componentIndex ) 
 + public static ColumnDefinition clusteringDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type , int position ) 
 { 
 - return new ColumnDefinition ( cfm , name , validator , componentIndex , Kind . CLUSTERING ) ; 
 + return new ColumnDefinition ( cfm , name , type , position , Kind . CLUSTERING ) ; 
 } 
 
 - public static ColumnDefinition clusteringKeyDef ( String ksName , String cfName , String name , AbstractType < ? > validator , Integer componentIndex ) 
 + public static ColumnDefinition clusteringDef ( String ksName , String cfName , String name , AbstractType < ? > type , int position ) 
 { 
 - return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , validator , componentIndex , Kind . CLUSTERING ) ; 
 + return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , type , position , Kind . CLUSTERING ) ; 
 } 
 
 - public static ColumnDefinition regularDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator ) 
 + public static ColumnDefinition regularDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type ) 
 { 
 - return new ColumnDefinition ( cfm , name , validator , null , Kind . REGULAR ) ; 
 + return new ColumnDefinition ( cfm , name , type , NO _ POSITION , Kind . REGULAR ) ; 
 } 
 
 - public static ColumnDefinition regularDef ( String ksName , String cfName , String name , AbstractType < ? > validator ) 
 + public static ColumnDefinition regularDef ( String ksName , String cfName , String name , AbstractType < ? > type ) 
 { 
 - return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , validator , null , Kind . REGULAR ) ; 
 + return new ColumnDefinition ( ksName , cfName , ColumnIdentifier . getInterned ( name , true ) , type , NO _ POSITION , Kind . REGULAR ) ; 
 } 
 
 - public static ColumnDefinition staticDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator ) 
 + public static ColumnDefinition staticDef ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type ) 
 { 
 - return new ColumnDefinition ( cfm , name , validator , null , Kind . STATIC ) ; 
 + return new ColumnDefinition ( cfm , name , type , NO _ POSITION , Kind . STATIC ) ; 
 } 
 
 - public ColumnDefinition ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > validator , Integer componentIndex , Kind kind ) 
 + public ColumnDefinition ( CFMetaData cfm , ByteBuffer name , AbstractType < ? > type , int position , Kind kind ) 
 { 
 this ( cfm . ksName , 
 cfm . cfName , 
 ColumnIdentifier . getInterned ( name , cfm . getColumnDefinitionNameComparator ( kind ) ) , 
 - validator , 
 - componentIndex , 
 + type , 
 + position , 
 kind ) ; 
 } 
 
 @ @ - 130 , 29 + 133 , 30 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 public ColumnDefinition ( String ksName , 
 String cfName , 
 ColumnIdentifier name , 
 - AbstractType < ? > validator , 
 - Integer componentIndex , 
 + AbstractType < ? > type , 
 + int position , 
 Kind kind ) 
 { 
 - super ( ksName , cfName , name , validator ) ; 
 - assert name ! = null & & validator ! = null & & kind ! = null ; 
 + super ( ksName , cfName , name , type ) ; 
 + assert name ! = null & & type ! = null & & kind ! = null ; 
 assert name . isInterned ( ) ; 
 - assert componentIndex = = null | | kind . isPrimaryKeyKind ( ) ; / / The componentIndex really only make sense for partition and clustering columns , 
 - / / so make sure we don ' t sneak it for something else since it ' d breaks equals ( ) 
 + assert position = = NO _ POSITION | | kind . isPrimaryKeyKind ( ) ; / / The position really only make sense for partition and clustering columns , 
 + / / so make sure we don ' t sneak it for something else since it ' d breaks equals ( ) 
 this . kind = kind ; 
 - this . componentIndex = componentIndex ; 
 - this . cellPathComparator = makeCellPathComparator ( kind , validator ) ; 
 + this . position = position ; 
 + this . cellPathComparator = makeCellPathComparator ( kind , type ) ; 
 this . cellComparator = cellPathComparator = = null ? ColumnData . comparator : ( a , b ) - > cellPathComparator . compare ( a . path ( ) , b . path ( ) ) ; 
 this . asymmetricCellPathComparator = cellPathComparator = = null ? null : ( a , b ) - > cellPathComparator . compare ( ( ( Cell ) a ) . path ( ) , ( CellPath ) b ) ; 
 this . comparisonOrder = comparisonOrder ( kind , isComplex ( ) , position ( ) ) ; 
 } 
 
 - private static Comparator < CellPath > makeCellPathComparator ( Kind kind , AbstractType < ? > validator ) 
 + private static Comparator < CellPath > makeCellPathComparator ( Kind kind , AbstractType < ? > type ) 
 { 
 - if ( kind . isPrimaryKeyKind ( ) | | ! validator . isCollection ( ) | | ! validator . isMultiCell ( ) ) 
 + if ( kind . isPrimaryKeyKind ( ) | | ! type . isCollection ( ) | | ! type . isMultiCell ( ) ) 
 return null ; 
 
 - final CollectionType type = ( CollectionType ) validator ; 
 + CollectionType collection = ( CollectionType ) type ; 
 + 
 return new Comparator < CellPath > ( ) 
 { 
 public int compare ( CellPath path1 , CellPath path2 ) 
 @ @ - 168 , 29 + 172 , 29 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 
 / / This will get more complicated once we have non - frozen UDT and nested collections 
 assert path1 . size ( ) = = 1 & & path2 . size ( ) = = 1 ; 
 - return type . nameComparator ( ) . compare ( path1 . get ( 0 ) , path2 . get ( 0 ) ) ; 
 + return collection . nameComparator ( ) . compare ( path1 . get ( 0 ) , path2 . get ( 0 ) ) ; 
 } 
 } ; 
 } 
 
 public ColumnDefinition copy ( ) 
 { 
 - return new ColumnDefinition ( ksName , cfName , name , type , componentIndex , kind ) ; 
 + return new ColumnDefinition ( ksName , cfName , name , type , position , kind ) ; 
 } 
 
 public ColumnDefinition withNewName ( ColumnIdentifier newName ) 
 { 
 - return new ColumnDefinition ( ksName , cfName , newName , type , componentIndex , kind ) ; 
 + return new ColumnDefinition ( ksName , cfName , newName , type , position , kind ) ; 
 } 
 
 public ColumnDefinition withNewType ( AbstractType < ? > newType ) 
 { 
 - return new ColumnDefinition ( ksName , cfName , name , newType , componentIndex , kind ) ; 
 + return new ColumnDefinition ( ksName , cfName , name , newType , position , kind ) ; 
 } 
 
 public boolean isOnAllComponents ( ) 
 { 
 - return componentIndex = = null ; 
 + return position = = NO _ POSITION ; 
 } 
 
 public boolean isPartitionKey ( ) 
 @ @ - 213 , 12 + 217 , 13 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 return kind = = Kind . REGULAR ; 
 } 
 
 - / / The componentIndex . This never return null however for convenience sake : 
 - / / if componentIndex = = null , this return 0 . So caller should first check 
 - / / isOnAllComponents ( ) to distinguish if that ' s a possibility . 
 + / * * 
 + * For convenience sake , if position = = NO _ POSITION , this method will return 0 . The callers should first check 
 + * isOnAllComponents ( ) to distinguish between proper 0 position and NO _ POSITION . 
 + * / 
 public int position ( ) 
 { 
 - return componentIndex = = null ? 0 : componentIndex ; 
 + return Math . max ( 0 , position ) ; 
 } 
 
 @ Override 
 @ @ - 237 , 13 + 242 , 13 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 & & Objects . equal ( name , cd . name ) 
 & & Objects . equal ( type , cd . type ) 
 & & Objects . equal ( kind , cd . kind ) 
 - & & Objects . equal ( componentIndex , cd . componentIndex ) ; 
 + & & Objects . equal ( position , cd . position ) ; 
 } 
 
 @ Override 
 public int hashCode ( ) 
 { 
 - return Objects . hashCode ( ksName , cfName , name , type , kind , componentIndex ) ; 
 + return Objects . hashCode ( ksName , cfName , name , type , kind , position ) ; 
 } 
 
 @ Override 
 @ @ - 253 , 7 + 258 , 7 @ @ public class ColumnDefinition extends ColumnSpecification implements Comparable < 
 . add ( " name " , name ) 
 . add ( " type " , type ) 
 . add ( " kind " , kind ) 
 - . add ( " componentIndex " , componentIndex ) 
 + . add ( " position " , position ) 
 . toString ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / Columns . java b / src / java / org / apache / cassandra / db / Columns . java 
 index 582b742 . . 442f77f 100644 
 - - - a / src / java / org / apache / cassandra / db / Columns . java 
 + + + b / src / java / org / apache / cassandra / db / Columns . java 
 @ @ - 50 , 8 + 50 , 13 @ @ public class Columns extends AbstractCollection < ColumnDefinition > implements Col 
 { 
 public static final Serializer serializer = new Serializer ( ) ; 
 public static final Columns NONE = new Columns ( BTree . empty ( ) , 0 ) ; 
 - public static final ColumnDefinition FIRST _ COMPLEX = new ColumnDefinition ( " " , " " , ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , 
 - SetType . getInstance ( UTF8Type . instance , true ) , null , ColumnDefinition . Kind . REGULAR ) ; 
 + public static final ColumnDefinition FIRST _ COMPLEX = 
 + new ColumnDefinition ( " " , 
 + " " , 
 + ColumnIdentifier . getInterned ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , UTF8Type . instance ) , 
 + SetType . getInstance ( UTF8Type . instance , true ) , 
 + ColumnDefinition . NO _ POSITION , 
 + ColumnDefinition . Kind . REGULAR ) ; 
 
 private final Object [ ] columns ; 
 private final int complexIdx ; / / Index of the first complex column 
 diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 index 7c0eadf . . 1674de8 100644 
 - - - a / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 + + + b / src / java / org / apache / cassandra / schema / LegacySchemaMigrator . java 
 @ @ - 476 , 7 + 476 , 7 @ @ public final class LegacySchemaMigrator 
 } 
 else if ( isStaticCompactTable ) 
 { 
 - defs . add ( ColumnDefinition . clusteringKeyDef ( ksName , cfName , names . defaultClusteringName ( ) , rawComparator , null ) ) ; 
 + defs . add ( ColumnDefinition . clusteringDef ( ksName , cfName , names . defaultClusteringName ( ) , rawComparator , ColumnDefinition . NO _ POSITION ) ) ; 
 defs . add ( ColumnDefinition . regularDef ( ksName , cfName , names . defaultCompactValueName ( ) , defaultValidator ) ) ; 
 } 
 else 
 @ @ - 572 , 7 + 572 , 7 @ @ public final class LegacySchemaMigrator 
 if ( needsUpgrade & & isStaticCompactTable & & kind = = ColumnDefinition . Kind . REGULAR ) 
 kind = ColumnDefinition . Kind . STATIC ; 
 
 - Integer componentIndex = null ; 
 + int componentIndex = ColumnDefinition . NO _ POSITION ; 
 / / Note that the component _ index is not useful for non - primary key parts ( it never really in fact since there is 
 / / no particular ordering of non - PK columns , we only used to use it as a simplification but that ' s not needed 
 / / anymore ) 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index 2df4ca4 . . 55b841b 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 118 , 9 + 118 , 9 @ @ public final class SchemaKeyspace 
 + " table _ name text , " 
 + " column _ name text , " 
 + " column _ name _ bytes blob , " 
 - + " component _ index int , " 
 + + " kind text , " 
 + + " position int , " 
 + " type text , " 
 - + " validator text , " 
 + " PRIMARY KEY ( ( keyspace _ name ) , table _ name , column _ name ) ) " ) ; 
 
 private static final CFMetaData DroppedColumns = 
 @ @ - 141 , 7 + 141 , 7 @ @ public final class SchemaKeyspace 
 + " keyspace _ name text , " 
 + " table _ name text , " 
 + " trigger _ name text , " 
 - + " trigger _ options frozen < map < text , text > > , " 
 + + " options frozen < map < text , text > > , " 
 + " PRIMARY KEY ( ( keyspace _ name ) , table _ name , trigger _ name ) ) " ) ; 
 
 private static final CFMetaData MaterializedViews = 
 @ @ - 1162 , 9 + 1162 , 9 @ @ public final class SchemaKeyspace 
 RowUpdateBuilder adder = new RowUpdateBuilder ( Columns , timestamp , mutation ) . clustering ( table . cfName , column . name . toString ( ) ) ; 
 
 adder . add ( " column _ name _ bytes " , column . name . bytes ) 
 - . add ( " validator " , column . type . toString ( ) ) 
 - . add ( " type " , column . kind . toString ( ) . toLowerCase ( ) ) 
 - . add ( " component _ index " , column . isOnAllComponents ( ) ? null : column . position ( ) ) 
 + . add ( " kind " , column . kind . toString ( ) . toLowerCase ( ) ) 
 + . add ( " position " , column . isOnAllComponents ( ) ? ColumnDefinition . NO _ POSITION : column . position ( ) ) 
 + . add ( " type " , column . type . toString ( ) ) 
 . build ( ) ; 
 } 
 
 @ @ - 1188 , 15 + 1188 , 13 @ @ public final class SchemaKeyspace 
 
 ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; 
 
 - ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " type " ) . toUpperCase ( ) ) ; 
 + ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; 
 
 - Integer componentIndex = null ; 
 - if ( row . has ( " component _ index " ) ) 
 - componentIndex = row . getInt ( " component _ index " ) ; 
 + int position = row . getInt ( " position " ) ; 
 
 - AbstractType < ? > validator = parseType ( row . getString ( " validator " ) ) ; 
 + AbstractType < ? > type = parseType ( row . getString ( " type " ) ) ; 
 
 - return new ColumnDefinition ( keyspace , table , name , validator , componentIndex , kind ) ; 
 + return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; 
 } 
 
 / * 
 @ @ - 1245 , 7 + 1243 , 7 @ @ public final class SchemaKeyspace 
 { 
 new RowUpdateBuilder ( Triggers , timestamp , mutation ) 
 . clustering ( table . cfName , trigger . name ) 
 - . frozenMap ( " trigger _ options " , Collections . singletonMap ( " class " , trigger . classOption ) ) 
 + . frozenMap ( " options " , Collections . singletonMap ( " class " , trigger . classOption ) ) 
 . build ( ) ; 
 } 
 
 @ @ - 1271 , 7 + 1269 , 7 @ @ public final class SchemaKeyspace 
 private static TriggerMetadata createTriggerFromTriggerRow ( UntypedResultSet . Row row ) 
 { 
 String name = row . getString ( " trigger _ name " ) ; 
 - String classOption = row . getFrozenTextMap ( " trigger _ options " ) . get ( " class " ) ; 
 + String classOption = row . getFrozenTextMap ( " options " ) . get ( " class " ) ; 
 return new TriggerMetadata ( name , classOption ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftConversion . java b / src / java / org / apache / cassandra / thrift / ThriftConversion . java 
 index 4c17a4b . . 86cfe42 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftConversion . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftConversion . java 
 @ @ - 238 , 7 + 238 , 7 @ @ public class ThriftConversion 
 / / historical reasons ) 
 boolean hasKeyAlias = cf _ def . isSetKey _ alias ( ) & & keyValidator ! = null & & ! ( keyValidator instanceof CompositeType ) ; 
 if ( hasKeyAlias ) 
 - defs . add ( ColumnDefinition . partitionKeyDef ( cf _ def . keyspace , cf _ def . name , UTF8Type . instance . getString ( cf _ def . key _ alias ) , keyValidator , null ) ) ; 
 + defs . add ( ColumnDefinition . partitionKeyDef ( cf _ def . keyspace , cf _ def . name , UTF8Type . instance . getString ( cf _ def . key _ alias ) , keyValidator , ColumnDefinition . NO _ POSITION ) ) ; 
 
 / / Now add any CQL metadata that we want to copy , skipping the keyAlias if there was one 
 for ( ColumnDefinition def : previousCQLMetadata ) 
 @ @ - 376 , 14 + 376 , 14 @ @ public class ThriftConversion 
 } 
 else 
 { 
 - defs . add ( ColumnDefinition . partitionKeyDef ( ks , cf , names . defaultPartitionKeyName ( ) , keyValidator , null ) ) ; 
 + defs . add ( ColumnDefinition . partitionKeyDef ( ks , cf , names . defaultPartitionKeyName ( ) , keyValidator , ColumnDefinition . NO _ POSITION ) ) ; 
 } 
 } 
 
 if ( subComparator ! = null ) 
 { 
 / / SuperColumn tables : we use a special map to hold dynamic values within a given super column 
 - defs . add ( ColumnDefinition . clusteringKeyDef ( ks , cf , names . defaultClusteringName ( ) , comparator , 0 ) ) ; 
 + defs . add ( ColumnDefinition . clusteringDef ( ks , cf , names . defaultClusteringName ( ) , comparator , 0 ) ) ; 
 defs . add ( ColumnDefinition . regularDef ( ks , cf , CompactTables . SUPER _ COLUMN _ MAP _ COLUMN _ STR , MapType . getInstance ( subComparator , defaultValidator , true ) ) ) ; 
 } 
 else 
 @ @ - 393 , 7 + 393 , 7 @ @ public class ThriftConversion 
 : Collections . < AbstractType < ? > > singletonList ( comparator ) ; 
 
 for ( int i = 0 ; i < subTypes . size ( ) ; i + + ) 
 - defs . add ( ColumnDefinition . clusteringKeyDef ( ks , cf , names . defaultClusteringName ( ) , subTypes . get ( i ) , i ) ) ; 
 + defs . add ( ColumnDefinition . clusteringDef ( ks , cf , names . defaultClusteringName ( ) , subTypes . get ( i ) , i ) ) ; 
 
 defs . add ( ColumnDefinition . regularDef ( ks , cf , names . defaultCompactValueName ( ) , defaultValidator ) ) ; 
 } 
 @ @ - 505 , 7 + 505 , 7 @ @ public class ThriftConversion 
 cfName , 
 ColumnIdentifier . getInterned ( ByteBufferUtil . clone ( thriftColumnDef . name ) , comparator ) , 
 TypeParser . parse ( thriftColumnDef . validation _ class ) , 
 - null , 
 + ColumnDefinition . NO _ POSITION , 
 kind ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java 
 index f862816 . . d602076 100644 
 - - - a / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java 
 + + + b / src / java / org / apache / cassandra / utils / NativeSSTableLoaderClient . java 
 @ @ - 149 , 15 + 149 , 9 @ @ public class NativeSSTableLoaderClient extends SSTableLoader . Client 
 private static ColumnDefinition createDefinitionFromRow ( Row row , String keyspace , String table ) 
 { 
 ColumnIdentifier name = ColumnIdentifier . getInterned ( row . getBytes ( " column _ name _ bytes " ) , row . getString ( " column _ name " ) ) ; 
 - 
 - ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " type " ) . toUpperCase ( ) ) ; 
 - 
 - Integer componentIndex = null ; 
 - if ( ! row . isNull ( " component _ index " ) ) 
 - componentIndex = row . getInt ( " component _ index " ) ; 
 - 
 - AbstractType < ? > validator = TypeParser . parse ( row . getString ( " validator " ) ) ; 
 - 
 - return new ColumnDefinition ( keyspace , table , name , validator , componentIndex , kind ) ; 
 + AbstractType < ? > type = TypeParser . parse ( row . getString ( " type " ) ) ; 
 + int position = row . getInt ( " position " ) ; 
 + ColumnDefinition . Kind kind = ColumnDefinition . Kind . valueOf ( row . getString ( " kind " ) . toUpperCase ( ) ) ; 
 + return new ColumnDefinition ( keyspace , table , name , type , position , kind ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index 8675d7f . . 175e492 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 270 , 7 + 270 , 7 @ @ public class SchemaLoader 
 cfName , 
 ColumnIdentifier . getInterned ( IntegerType . instance . fromString ( " 42 " ) , IntegerType . instance ) , 
 UTF8Type . instance , 
 - null , 
 + ColumnDefinition . NO _ POSITION , 
 ColumnDefinition . Kind . REGULAR ) ; 
 } 
 
 @ @ - 280 , 7 + 280 , 7 @ @ public class SchemaLoader 
 cfName , 
 ColumnIdentifier . getInterned ( " fortytwo " , true ) , 
 UTF8Type . instance , 
 - null , 
 + ColumnDefinition . NO _ POSITION , 
 ColumnDefinition . Kind . REGULAR ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnsTest . java b / test / unit / org / apache / cassandra / db / ColumnsTest . java 
 index 4962cb2 . . 921209e 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnsTest . java 
 @ @ - 37 , 13 + 37 , 14 @ @ import org . apache . cassandra . db . marshal . SetType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . io . util . DataInputBuffer ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . btree . BTreeSet ; 
 
 + import static org . apache . cassandra . utils . ByteBufferUtil . bytes ; 
 + 
 public class ColumnsTest 
 { 
 
 - private static CFMetaData cfMetaData = MockSchema . newCFS ( ) . metadata ; 
 + private static final CFMetaData cfMetaData = MockSchema . newCFS ( ) . metadata ; 
 
 / / this tests most of our functionality , since each subset we perform 
 / / reasonably comprehensive tests of basic functionality against 
 @ @ - 380 , 26 + 381 , 26 @ @ public class ColumnsTest 
 private static void addPartition ( List < String > names , List < ColumnDefinition > results ) 
 { 
 for ( String name : names ) 
 - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , UTF8Type . instance , null , ColumnDefinition . Kind . PARTITION _ KEY ) ) ; 
 + results . add ( ColumnDefinition . partitionKeyDef ( cfMetaData , bytes ( name ) , UTF8Type . instance , ColumnDefinition . NO _ POSITION ) ) ; 
 } 
 
 private static void addClustering ( List < String > names , List < ColumnDefinition > results ) 
 { 
 int i = 0 ; 
 for ( String name : names ) 
 - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , UTF8Type . instance , i + + , ColumnDefinition . Kind . CLUSTERING ) ) ; 
 + results . add ( ColumnDefinition . clusteringDef ( cfMetaData , bytes ( name ) , UTF8Type . instance , i + + ) ) ; 
 } 
 
 private static void addRegular ( List < String > names , List < ColumnDefinition > results ) 
 { 
 for ( String name : names ) 
 - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , UTF8Type . instance , null , ColumnDefinition . Kind . REGULAR ) ) ; 
 + results . add ( ColumnDefinition . regularDef ( cfMetaData , bytes ( name ) , UTF8Type . instance ) ) ; 
 } 
 
 private static < V > void addComplex ( List < String > names , List < ColumnDefinition > results ) 
 { 
 for ( String name : names ) 
 - results . add ( new ColumnDefinition ( cfMetaData , ByteBufferUtil . bytes ( name ) , SetType . getInstance ( UTF8Type . instance , true ) , null , ColumnDefinition . Kind . REGULAR ) ) ; 
 + results . add ( ColumnDefinition . regularDef ( cfMetaData , bytes ( name ) , SetType . getInstance ( UTF8Type . instance , true ) ) ) ; 
 } 
 
 private static CFMetaData mock ( Columns columns )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 79509bb . . 4fe4692 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import org . apache . cassandra . db . clock . TimestampReconciler ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . db . migration . Migration ; 
 import org . apache . cassandra . locator . DatacenterShardStrategy ; 
 - import org . apache . cassandra . service . ColumnValidator ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 @ @ - 323 , 34 + 322 , 11 @ @ public final class CFMetaData 
 return idGen . getAndIncrement ( ) ; 
 } 
 
 - public ColumnValidator getColumnValidator ( byte [ ] column ) 
 + public AbstractType getValueValidator ( byte [ ] column ) 
 { 
 - ColumnValidator validator = null ; 
 ColumnDefinition columnDefinition = column _ metadata . get ( column ) ; 
 - 
 - if ( columnDefinition ! = null ) 
 - { 
 - String className = columnDefinition . validation _ class ; 
 - if ( className ! = null & & className . trim ( ) . length ( ) > 0 ) 
 - { 
 - try 
 - { 
 - validator = ( ColumnValidator ) Class . forName ( className ) . newInstance ( ) ; 
 - } 
 - catch ( ClassNotFoundException cnfe ) 
 - { 
 - throw new MarshalException ( " could not find validation class + " + className , cnfe ) ; 
 - } 
 - catch ( InstantiationException ie ) 
 - { 
 - throw new MarshalException ( " could not instantiate validation class " + className , ie ) ; 
 - } 
 - catch ( IllegalAccessException iae ) 
 - { 
 - throw new MarshalException ( " IllegalAccessException instantiating validation class " + className , iae ) ; 
 - } 
 - } 
 - } 
 - return validator ; 
 + if ( columnDefinition = = null ) 
 + return null ; 
 + return columnDefinition . validator ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / ColumnDefinition . java b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 index 0290980 . . 6a19e4d 100644 
 - - - a / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 + + + b / src / java / org / apache / cassandra / config / ColumnDefinition . java 
 @ @ - 6 , 58 + 6 , 50 @ @ import java . util . * ; 
 import org . apache . commons . lang . builder . EqualsBuilder ; 
 import org . apache . commons . lang . builder . HashCodeBuilder ; 
 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . thrift . ColumnDef ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 public class ColumnDefinition { 
 - public byte [ ] name ; 
 - public String validation _ class ; 
 - public String index _ type ; 
 - public String index _ name ; 
 + public final byte [ ] name ; 
 + public final AbstractType validator ; 
 + public final String index _ type ; 
 + public final String index _ name ; 
 
 - public ColumnDefinition ( ) 
 - { 
 - this ( null , null , null , null ) ; 
 - } 
 - 
 - public ColumnDefinition ( byte [ ] name , String validation _ class , String index _ type , String index _ name ) 
 + public ColumnDefinition ( byte [ ] name , String validation _ class , String index _ type , String index _ name ) throws ConfigurationException 
 { 
 this . name = name ; 
 - this . validation _ class = validation _ class ; 
 this . index _ type = index _ type ; 
 this . index _ name = index _ name ; 
 + this . validator = DatabaseDescriptor . getComparator ( validation _ class ) ; 
 } 
 
 @ Override 
 - public int hashCode ( ) 
 + public boolean equals ( Object o ) 
 { 
 - return new HashCodeBuilder ( ) 
 - . append ( name ) 
 - . append ( validation _ class ) 
 - . append ( index _ type ) 
 - . append ( index _ name ) 
 - . toHashCode ( ) ; 
 + if ( this = = o ) 
 + return true ; 
 + if ( o = = null | | getClass ( ) ! = o . getClass ( ) ) 
 + return false ; 
 + 
 + ColumnDefinition that = ( ColumnDefinition ) o ; 
 + if ( index _ name ! = null ? ! index _ name . equals ( that . index _ name ) : that . index _ name ! = null ) 
 + return false ; 
 + if ( index _ type ! = null ? ! index _ type . equals ( that . index _ type ) : that . index _ type ! = null ) 
 + return false ; 
 + if ( ! Arrays . equals ( name , that . name ) ) 
 + return false ; 
 + return ! ( validator ! = null ? ! validator . equals ( that . validator ) : that . validator ! = null ) ; 
 } 
 
 @ Override 
 - public boolean equals ( Object obj ) 
 + public int hashCode ( ) 
 { 
 - if ( obj = = this ) 
 - { 
 - return true ; 
 - } 
 - else if ( obj = = null | | obj . getClass ( ) ! = getClass ( ) ) 
 - { 
 - return false ; 
 - } 
 - 
 - ColumnDefinition rhs = ( ColumnDefinition ) obj ; 
 - return new EqualsBuilder ( ) 
 - . append ( name , rhs . name ) 
 - . append ( validation _ class , rhs . validation _ class ) 
 - . append ( index _ name , rhs . index _ name ) 
 - . append ( index _ type , rhs . index _ type ) 
 - . isEquals ( ) ; 
 + int result = name ! = null ? Arrays . hashCode ( name ) : 0 ; 
 + result = 31 * result + ( validator ! = null ? validator . hashCode ( ) : 0 ) ; 
 + result = 31 * result + ( index _ type ! = null ? index _ type . hashCode ( ) : 0 ) ; 
 + result = 31 * result + ( index _ name ! = null ? index _ name . hashCode ( ) : 0 ) ; 
 + return result ; 
 } 
 
 public static byte [ ] serialize ( ColumnDefinition cd ) throws IOException 
 @ @ - 66 , 24 + 58 , 15 @ @ public class ColumnDefinition { 
 DataOutputStream out = new DataOutputStream ( bout ) ; 
 out . writeInt ( cd . name . length ) ; 
 out . write ( cd . name ) ; 
 - 
 - out . writeBoolean ( cd . validation _ class ! = null ) ; 
 - if ( cd . validation _ class ! = null ) 
 - { 
 - out . writeUTF ( cd . validation _ class ) ; 
 - } 
 + out . writeUTF ( cd . validator . getClass ( ) . getName ( ) ) ; 
 
 out . writeBoolean ( cd . index _ type ! = null ) ; 
 if ( cd . index _ type ! = null ) 
 - { 
 out . writeUTF ( cd . index _ type ) ; 
 - } 
 
 out . writeBoolean ( cd . index _ name ! = null ) ; 
 if ( cd . index _ name ! = null ) 
 - { 
 out . writeUTF ( cd . index _ name ) ; 
 - } 
 
 out . close ( ) ; 
 return bout . toByteArray ( ) ; 
 @ @ - 91 , 37 + 74 , 36 @ @ public class ColumnDefinition { 
 
 public static ColumnDefinition deserialize ( byte [ ] bytes ) throws IOException 
 { 
 - ColumnDefinition cd = new ColumnDefinition ( ) ; 
 DataInputStream in = new DataInputStream ( new ByteArrayInputStream ( bytes ) ) ; 
 int nameSize = in . readInt ( ) ; 
 - cd . name = new byte [ nameSize ] ; 
 - if ( in . read ( cd . name , 0 , nameSize ) ! = nameSize ) 
 - throw new IOException ( " short read of ColumnDefinition name " ) ; 
 - 
 - if ( in . readBoolean ( ) ) 
 - cd . validation _ class = in . readUTF ( ) ; 
 + byte [ ] name = new byte [ nameSize ] ; 
 + in . readFully ( name ) ; 
 + String validation _ class = in . readUTF ( ) ; 
 
 + String index _ type = null ; 
 if ( in . readBoolean ( ) ) 
 - cd . index _ type = in . readUTF ( ) ; 
 + index _ type = in . readUTF ( ) ; 
 
 + String index _ name = null ; 
 if ( in . readBoolean ( ) ) 
 - cd . index _ name = in . readUTF ( ) ; 
 + index _ name = in . readUTF ( ) ; 
 
 - return cd ; 
 + try 
 + { 
 + return new ColumnDefinition ( name , validation _ class , index _ type , index _ name ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 
 - public static ColumnDefinition fromColumnDef ( ColumnDef thriftColumnDef ) 
 + public static ColumnDefinition fromColumnDef ( ColumnDef cd ) throws ConfigurationException 
 { 
 - assert thriftColumnDef ! = null ; 
 - ColumnDefinition cd = new ColumnDefinition ( ) ; 
 - cd . name = thriftColumnDef . name ; 
 - cd . validation _ class = thriftColumnDef . validation _ class ; 
 - cd . index _ type = thriftColumnDef . index _ type ; 
 - cd . index _ name = thriftColumnDef . index _ name ; 
 - return cd ; 
 + return new ColumnDefinition ( cd . name , cd . validation _ class , cd . index _ type , cd . index _ name ) ; 
 } 
 
 - public static Map < byte [ ] , ColumnDefinition > fromColumnDef ( List < ColumnDef > thriftDefs ) 
 + public static Map < byte [ ] , ColumnDefinition > fromColumnDef ( List < ColumnDef > thriftDefs ) throws ConfigurationException 
 { 
 if ( thriftDefs = = null ) 
 return Collections . emptyMap ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index d381711 . . 18bcfcc 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 46 , 7 + 46 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . locator . IEndpointSnitch ; 
 - import org . apache . cassandra . service . ColumnValidator ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 @ @ - 1081 , 8 + 1080 , 8 @ @ public class DatabaseDescriptor 
 return conf . hinted _ handoff _ enabled ; 
 } 
 
 - public static ColumnValidator getColumnValidator ( String keyspace , String cf , byte [ ] column ) 
 + public static AbstractType getValueValidator ( String keyspace , String cf , byte [ ] column ) 
 { 
 - return getCFMetaData ( keyspace , cf ) . getColumnValidator ( column ) ; 
 + return getCFMetaData ( keyspace , cf ) . getValueValidator ( column ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AbstractType . java b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 index 651fdac . . b3cf7b1 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AbstractType . java 
 @ @ - 86 , 12 + 86 , 4 @ @ public abstract class AbstractType implements Comparator < byte [ ] > 
 } 
 return builder . toString ( ) ; 
 } 
 - 
 - public final boolean equals ( Object obj ) 
 - { 
 - if ( obj = = null ) 
 - return false ; 
 - else 
 - return obj . getClass ( ) . getName ( ) . equals ( getClass ( ) . getName ( ) ) ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / ColumnValidator . java b / src / java / org / apache / cassandra / service / ColumnValidator . java 
 deleted file mode 100644 
 index a19f25f . . 0000000 
 - - - a / src / java / org / apache / cassandra / service / ColumnValidator . java 
 + + + / dev / null 
 @ @ - 1 , 9 + 0 , 0 @ @ 
 - package org . apache . cassandra . service ; 
 - 
 - import org . apache . cassandra . thrift . Column ; 
 - import org . apache . cassandra . thrift . ColumnParent ; 
 - 
 - public interface ColumnValidator 
 - { 
 - public void validate ( String keyspace , ColumnParent column _ parent , Column column ) ; 
 - } 
 diff - - git a / src / java / org / apache / cassandra / service / ExampleColumnValidator . java b / src / java / org / apache / cassandra / service / ExampleColumnValidator . java 
 deleted file mode 100644 
 index df6a93d . . 0000000 
 - - - a / src / java / org / apache / cassandra / service / ExampleColumnValidator . java 
 + + + / dev / null 
 @ @ - 1 , 15 + 0 , 0 @ @ 
 - package org . apache . cassandra . service ; 
 - 
 - import org . apache . cassandra . db . marshal . MarshalException ; 
 - import org . apache . cassandra . thrift . Column ; 
 - import org . apache . cassandra . thrift . ColumnParent ; 
 - 
 - public class ExampleColumnValidator implements ColumnValidator 
 - { 
 - @ Override 
 - public void validate ( String keyspace , ColumnParent column _ parent , Column column ) 
 - { 
 - if ( column . value . length % 2 = = 0 ) 
 - throw new MarshalException ( " column . value . length is even " ) ; 
 - } 
 - } 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index 3a51b16 . . 2ae5679 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . RandomPartitioner ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . locator . DatacenterShardStrategy ; 
 - import org . apache . cassandra . service . ColumnValidator ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 52 , 7 + 51 , 7 @ @ public class ThriftValidation 
 if ( key . length > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 { 
 throw new InvalidRequestException ( " Key length of " + key . length + 
 - " is longer than maximum of " + FBUtilities . MAX _ UNSIGNED _ SHORT ) ; 
 + " is longer than maximum of " + FBUtilities . MAX _ UNSIGNED _ SHORT ) ; 
 } 
 } 
 
 @ @ - 148 , 7 + 147 , 7 @ @ public class ThriftValidation 
 } 
 
 private static void validateColumns ( String keyspace , String columnFamilyName , byte [ ] superColumnName , Iterable < byte [ ] > column _ names ) 
 - throws InvalidRequestException 
 + throws InvalidRequestException 
 { 
 if ( superColumnName ! = null ) 
 { 
 @ @ - 282 , 7 + 281 , 7 @ @ public class ThriftValidation 
 if ( del . predicate . slice _ range ! = null ) 
 throw new InvalidRequestException ( " Deletion does not yet support SliceRange predicates . " ) ; 
 } 
 - 
 + 
 if ( ColumnFamilyType . Standard = = DatabaseDescriptor . getColumnFamilyType ( keyspace , cfName ) & & del . super _ column ! = null ) 
 { 
 String msg = String . format ( " deletion of super _ column is not possible on a standard ColumnFamily ( KeySpace = % s ColumnFamily = % s Deletion = % s ) " , keyspace , cfName , del ) ; 
 @ @ - 302 , 33 + 301 , 27 @ @ public class ThriftValidation 
 validateColumns ( keyspace , cfName , scName , predicate . column _ names ) ; 
 } 
 
 - public static void runExternalColumnVerifier ( String keyspace , ColumnParent column _ parent , Column column ) throws InvalidRequestException 
 + public static void validateColumn ( String keyspace , ColumnParent column _ parent , Column column ) throws InvalidRequestException 
 { 
 + validateTtl ( column ) ; 
 + validateColumns ( keyspace , column _ parent , Arrays . asList ( column . name ) ) ; 
 try 
 { 
 - ColumnValidator validator = null ; 
 - validator = DatabaseDescriptor . getColumnValidator ( keyspace , column _ parent . column _ family , column . name ) ; 
 + AbstractType validator = DatabaseDescriptor . getValueValidator ( keyspace , column _ parent . column _ family , column . name ) ; 
 if ( validator ! = null ) 
 - validator . validate ( keyspace , column _ parent , column ) ; 
 + validator . validate ( column . value ) ; 
 } 
 catch ( MarshalException me ) 
 { 
 - String msg = String . format ( " [ % s ] [ % s ] [ md5 ( byte [ ] ) = % s ] = [ md5 ( byte [ ] ) = % s ] failed validation ( % s ) " , 
 - keyspace , column _ parent . getColumn _ family ( ) , 
 - FBUtilities . hexHash ( " MD5 " , column . name ) , 
 - FBUtilities . hexHash ( " MD5 " , column . value ) , 
 - me . getMessage ( ) ) ; 
 - throw new InvalidRequestException ( msg ) ; / / why doesn ' t IRE except a caused _ by argument ? 
 + throw new InvalidRequestException ( String . format ( " [ % s ] [ % s ] [ % s ] = [ % s ] failed validation ( % s ) " , 
 + keyspace , 
 + column _ parent . getColumn _ family ( ) , 
 + FBUtilities . bytesToHex ( column . name ) , 
 + FBUtilities . bytesToHex ( column . value ) , 
 + me . getMessage ( ) ) ) ; 
 } 
 } 
 
 - public static void validateColumn ( String keyspace , ColumnParent column _ parent , Column column ) throws InvalidRequestException 
 - { 
 - validateTtl ( column ) ; 
 - validateColumns ( keyspace , column _ parent , Arrays . asList ( column . name ) ) ; 
 - runExternalColumnVerifier ( keyspace , column _ parent , column ) ; 
 - } 
 - 
 public static void validatePredicate ( String keyspace , ColumnParent column _ parent , SlicePredicate predicate ) 
 throws InvalidRequestException 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index c6e2512 . . 61d60aa 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 237 , 11 + 237 , 6 @ @ public class FBUtilities 
 return hash . abs ( ) ; 
 } 
 
 - public static String hexHash ( String type , byte [ ] . . . data ) 
 - { 
 - return bytesToHex ( hash ( type , data ) ) ; 
 - } 
 - 
 public static byte [ ] hash ( String type , byte [ ] . . . data ) 
 { 
 	 byte [ ] result ; 
 diff - - git a / test / system / test _ thrift _ server . py b / test / system / test _ thrift _ server . py 
 index 457c94f . . 2c62936 100644 
 - - - a / test / system / test _ thrift _ server . py 
 + + + b / test / system / test _ thrift _ server . py 
 @ @ - 1093 , 41 + 1093 , 23 @ @ class TestMutations ( ThriftTester ) : 
 def test _ column _ validators ( self ) : 
 ks = ' Keyspace1 ' 
 _ set _ keyspace ( ks ) 
 - cd = ColumnDef ( ' col ' , ' org . apache . cassandra . service . ExampleColumnValidator ' , None , None ) 
 + cd = ColumnDef ( ' col ' , ' LongType ' , None , None ) 
 cf = CfDef ( ' Keyspace1 ' , ' ValidatorColumnFamily ' , column _ metadata = [ cd ] ) 
 client . system _ add _ column _ family ( cf ) 
 dks = client . describe _ keyspace ( ks ) 
 assert ' ValidatorColumnFamily ' in dks 
 
 cp = ColumnParent ( ' ValidatorColumnFamily ' ) 
 - col0 = Column ( ' col ' , ' valuegood ' , Clock ( 0 ) ) 
 - col1 = Column ( ' col ' , ' valuebad ' , Clock ( 0 ) ) 
 + col0 = Column ( ' col ' , _ i64 ( 42 ) , Clock ( 0 ) ) 
 + col1 = Column ( ' col ' , " ceci n ' est pas 64bit " , Clock ( 0 ) ) 
 client . insert ( ' key0 ' , cp , col0 , ConsistencyLevel . ONE ) 
 e = _ expect _ exception ( lambda : client . insert ( ' key1 ' , cp , col1 , ConsistencyLevel . ONE ) , InvalidRequestException ) 
 assert e . why . find ( " failed validation " ) > = 0 
 - assert e . why . find ( " column . value . length is even " ) > = 0 
 - 
 - def test _ super _ column _ validators ( self ) : 
 - ks = ' Keyspace1 ' 
 - _ set _ keyspace ( ks ) 
 - cd = ColumnDef ( ' col ' , ' org . apache . cassandra . service . ExampleColumnValidator ' , None , None ) 
 - cf = CfDef ( ' Keyspace1 ' , ' SuperValidatorColumnFamily ' , ' Super ' , column _ metadata = [ cd ] ) 
 - client . system _ add _ column _ family ( cf ) 
 - dks = client . describe _ keyspace ( ' Keyspace1 ' ) 
 - assert ' SuperValidatorColumnFamily ' in dks 
 - 
 - cp = ColumnParent ( ' SuperValidatorColumnFamily ' , ' a subcolumn ' ) 
 - col0 = Column ( ' col ' , ' valuegood ' , Clock ( 0 ) ) 
 - col1 = Column ( ' col ' , ' valuebad ' , Clock ( 0 ) ) 
 - client . insert ( ' key0 ' , cp , col0 , ConsistencyLevel . ONE ) 
 - e = _ expect _ exception ( lambda : client . insert ( ' key1 ' , cp , col1 , ConsistencyLevel . ONE ) , InvalidRequestException ) 
 - assert e . why . find ( " failed validation " ) > = 0 
 - assert e . why . find ( " column . value . length is even " ) > = 0 
 
 def test _ system _ column _ family _ operations ( self ) : 
 _ set _ keyspace ( ' Keyspace1 ' ) 
 # create 
 - cd = ColumnDef ( ' ValidationColumn ' , ' randomclass ' , None , None ) 
 + cd = ColumnDef ( ' ValidationColumn ' , ' BytesType ' , None , None ) 
 newcf = CfDef ( ' Keyspace1 ' , ' NewColumnFamily ' , column _ metadata = [ cd ] ) 
 client . system _ add _ column _ family ( newcf ) 
 ks1 = client . describe _ keyspace ( ' Keyspace1 ' ) 
 @ @ - 1150 , 7 + 1132 , 7 @ @ class TestMutations ( ThriftTester ) : 
 _ set _ keyspace ( ' Keyspace1 ' ) 
 
 # create 
 - cd = ColumnDef ( ' ValidationColumn ' , ' randomclass ' , None , None ) 
 + cd = ColumnDef ( ' ValidationColumn ' , ' BytesType ' , None , None ) 
 newcf = CfDef ( ' Keyspace1 ' , ' NewSuperColumnFamily ' , ' Super ' , column _ metadata = [ cd ] ) 
 client . system _ add _ column _ family ( newcf ) 
 ks1 = client . describe _ keyspace ( ' Keyspace1 ' ) 
 diff - - git a / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java b / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java 
 index 623e30f . . 64d8e17 100644 
 - - - a / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java 
 + + + b / test / unit / org / apache / cassandra / config / ColumnDefinitionTest . java 
 @ @ - 7 , 17 + 7 , 15 @ @ public class ColumnDefinitionTest 
 @ Test 
 public void testSerializeDeserialize ( ) throws Exception 
 { 
 - ColumnDefinition cd0 = new ColumnDefinition ( 
 - " TestColumnDefinitionName0 " . getBytes ( " UTF8 " ) , 
 - " org . apache . cassandra . config . RandomClass0 " , 
 - " random index name 0 " , 
 - " random index type 0 " ) ; 
 + ColumnDefinition cd0 = new ColumnDefinition ( " TestColumnDefinitionName0 " . getBytes ( " UTF8 " ) , 
 + " BytesType " , 
 + " random index type 0 " , 
 + " random index name 0 " ) ; 
 
 - ColumnDefinition cd1 = new ColumnDefinition ( 
 - " TestColumnDefinition1 " . getBytes ( " UTF8 " ) , 
 - " org . apache . cassandra . config . RandomClass1 " , 
 - null , 
 - null ) ; 
 + ColumnDefinition cd1 = new ColumnDefinition ( " TestColumnDefinition1 " . getBytes ( " UTF8 " ) , 
 + " LongType " , 
 + null , 
 + null ) ; 
 
 testSerializeDeserialize ( cd0 ) ; 
 testSerializeDeserialize ( cd1 ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java 
 index d620686 . . 2a4a478 100644 
 - - - a / test / unit / org / apache / cassandra / db / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DefsTest . java 
 @ @ - 169 , 43 + 169 , 6 @ @ public class DefsTest extends CleanupHelper 
 } 
 
 @ Test 
 - public void testCanAddColumnDefinitionsInColumnMetaData ( ) throws Exception 
 - { 
 - String ks = " Keyspace1 " ; 
 - String cf = " ValidatorColumnFamily " ; 
 - KSMetaData original = DatabaseDescriptor . getTableDefinition ( ks ) ; 
 - 
 - Map < byte [ ] , ColumnDefinition > column _ metadata = new TreeMap < byte [ ] , ColumnDefinition > ( FBUtilities . byteArrayComparator ) ; 
 - 
 - ColumnDefinition cd0 = new ColumnDefinition ( ) ; 
 - cd0 . name = " TestColumn1 " . getBytes ( " UTF8 " ) ; 
 - cd0 . validation _ class = " random class one " ; 
 - cd0 . index _ name = null ; 
 - cd0 . index _ type = null ; 
 - 
 - ColumnDefinition cd1 = new ColumnDefinition ( ) ; 
 - cd1 . name = " * " . getBytes ( " UTF8 " ) ; 
 - cd1 . validation _ class = " random class two " ; 
 - cd1 . index _ name = " some name " ; 
 - cd1 . index _ type = " some type " ; 
 - 
 - column _ metadata . put ( cd0 . name , cd0 ) ; 
 - column _ metadata . put ( cd1 . name , cd1 ) ; 
 - 
 - CFMetaData newCf = new CFMetaData ( original . name , cf , ColumnFamilyType . Standard , ClockType . Timestamp , UTF8Type . instance , null , new TimestampReconciler ( ) , " A New Column Family " , 0 , false , 1 . 0 , 0 , column _ metadata ) ; 
 - assert ! DatabaseDescriptor . getTableDefinition ( ks ) . cfMetaData ( ) . containsKey ( newCf . cfName ) ; 
 - new AddColumnFamily ( newCf ) . apply ( ) ; 
 - 
 - assert DatabaseDescriptor . getTableDefinition ( ks ) . cfMetaData ( ) . containsKey ( newCf . cfName ) ; 
 - assert DatabaseDescriptor . getTableDefinition ( ks ) . cfMetaData ( ) . get ( newCf . cfName ) . equals ( newCf ) ; 
 - 
 - ColumnFamilyStore store = Table . open ( ks ) . getColumnFamilyStore ( cf ) ; 
 - assert store ! = null ; 
 - store . forceBlockingFlush ( ) ; 
 - } 
 - 
 - 
 - @ Test 
 public void dropCf ( ) throws ConfigurationException , IOException , ExecutionException , InterruptedException 
 { 
 DecoratedKey dk = Util . dk ( " dropCf " ) ;
