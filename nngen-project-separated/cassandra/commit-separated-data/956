BLEU SCORE: 0.04767707020457096

TEST MSG: Hostname verification for node - to - node encryption
GENERATED MSG: Filter out unavailable cipher suites when using encryption .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1a548d7 . . b80fdf3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * Add require _ endpoint _ verification opt for internode encryption ( CASSANDRA - 9220 ) <nl> * Add auto import java . util for UDF code block ( CASSANDRA - 11392 ) <nl> * Add - - hex - format option to nodetool getsstables ( CASSANDRA - 11337 ) <nl> * sstablemetadata should print sstable min / max token ( CASSANDRA - 7159 ) <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index 9883533 . . 4abe96e 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 906 , 6 + 906 , 7 @ @ server _ encryption _ options : <nl> # store _ type : JKS <nl> # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> # require _ client _ auth : false <nl> + # require _ endpoint _ verification : false <nl> <nl> # enable or disable client / server encryption . <nl> client _ encryption _ options : <nl> diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> index 526e356 . . d662871 100644 <nl> - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ public abstract class EncryptionOptions <nl> public String algorithm = " SunX509 " ; <nl> public String store _ type = " JKS " ; <nl> public boolean require _ client _ auth = false ; <nl> + public boolean require _ endpoint _ verification = false ; <nl> <nl> public static class ClientEncryptionOptions extends EncryptionOptions <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> index bef4a60 . . 2e59b06 100644 <nl> - - - a / src / java / org / apache / cassandra / security / SSLFactory . java <nl> + + + b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . util . List ; <nl> <nl> import javax . net . ssl . KeyManagerFactory ; <nl> import javax . net . ssl . SSLContext ; <nl> + import javax . net . ssl . SSLParameters ; <nl> import javax . net . ssl . SSLServerSocket ; <nl> import javax . net . ssl . SSLSocket ; <nl> import javax . net . ssl . TrustManager ; <nl> @ @ - 60 , 10 + 61 , 9 @ @ public final class SSLFactory <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLServerSocket serverSocket = ( SSLServerSocket ) ctx . getServerSocketFactory ( ) . createServerSocket ( ) ; <nl> serverSocket . setReuseAddress ( true ) ; <nl> - String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - serverSocket . setEnabledCipherSuites ( suites ) ; <nl> - serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; <nl> + prepareSocket ( serverSocket , options ) ; <nl> serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; <nl> + <nl> return serverSocket ; <nl> } <nl> <nl> @ @ - 72 , 8 + 72 , 7 @ @ public final class SSLFactory <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port , localAddress , localPort ) ; <nl> - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - socket . setEnabledCipherSuites ( suites ) ; <nl> + prepareSocket ( socket , options ) ; <nl> return socket ; <nl> } <nl> <nl> @ @ - 82 , 8 + 81 , 7 @ @ public final class SSLFactory <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port ) ; <nl> - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - socket . setEnabledCipherSuites ( suites ) ; <nl> + prepareSocket ( socket , options ) ; <nl> return socket ; <nl> } <nl> <nl> @ @ - 92 , 9 + 90 , 35 @ @ public final class SSLFactory <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( ) ; <nl> + prepareSocket ( socket , options ) ; <nl> + return socket ; <nl> + } <nl> + <nl> + / * * Sets relevant socket options specified in encryption settings * / <nl> + private static void prepareSocket ( SSLServerSocket serverSocket , EncryptionOptions options ) <nl> + { <nl> + String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> + if ( options . require _ endpoint _ verification ) <nl> + { <nl> + SSLParameters sslParameters = serverSocket . getSSLParameters ( ) ; <nl> + sslParameters . setEndpointIdentificationAlgorithm ( " HTTPS " ) ; <nl> + serverSocket . setSSLParameters ( sslParameters ) ; <nl> + } <nl> + serverSocket . setEnabledCipherSuites ( suites ) ; <nl> + serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; <nl> + } <nl> + <nl> + / * * Sets relevant socket options specified in encryption settings * / <nl> + private static void prepareSocket ( SSLSocket socket , EncryptionOptions options ) <nl> + { <nl> String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> + if ( options . require _ endpoint _ verification ) <nl> + { <nl> + SSLParameters sslParameters = socket . getSSLParameters ( ) ; <nl> + sslParameters . setEndpointIdentificationAlgorithm ( " HTTPS " ) ; <nl> + socket . setSSLParameters ( sslParameters ) ; <nl> + } <nl> socket . setEnabledCipherSuites ( suites ) ; <nl> - return socket ; <nl> } <nl> <nl> @ SuppressWarnings ( " resource " )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e317097 . . 3e12c5c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 1 . 0 . 5 <nl> * add command to stop compactions ( CASSANDRA - 1740 ) <nl> * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) <nl> + * fix assertion error when forwarding to local nodes ( CASSANDRA - 3539 ) <nl> <nl> 1 . 0 . 4 <nl> * fix self - hinting of timed out read repair updates and make hinted handoff <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 3560b9e . . a8af00c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 411 , 14 + 411 , 17 @ @ public class StorageProxy implements StorageProxyMBean <nl> Iterator < InetAddress > iter = messages . getValue ( ) . iterator ( ) ; <nl> InetAddress target = iter . next ( ) ; <nl> / / Add all the other destinations of the same message as a header in the primary message . <nl> - FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; <nl> - DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> - while ( iter . hasNext ( ) ) <nl> + if ( iter . hasNext ( ) ) <nl> { <nl> - InetAddress destination = iter . next ( ) ; <nl> - dos . write ( destination . getAddress ( ) ) ; <nl> + FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; <nl> + DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> + while ( iter . hasNext ( ) ) <nl> + { <nl> + InetAddress destination = iter . next ( ) ; <nl> + dos . write ( destination . getAddress ( ) ) ; <nl> + } <nl> + message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; <nl> } <nl> - message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; <nl> / / send the combined message + forward headers <nl> MessagingService . instance ( ) . sendRR ( message , target , handler ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1a548d7 . . b80fdf3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * Add require _ endpoint _ verification opt for internode encryption ( CASSANDRA - 9220 ) 
 * Add auto import java . util for UDF code block ( CASSANDRA - 11392 ) 
 * Add - - hex - format option to nodetool getsstables ( CASSANDRA - 11337 ) 
 * sstablemetadata should print sstable min / max token ( CASSANDRA - 7159 ) 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index 9883533 . . 4abe96e 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 906 , 6 + 906 , 7 @ @ server _ encryption _ options : 
 # store _ type : JKS 
 # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ DHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ ECDHE _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 # require _ client _ auth : false 
 + # require _ endpoint _ verification : false 
 
 # enable or disable client / server encryption . 
 client _ encryption _ options : 
 diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 index 526e356 . . d662871 100644 
 - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 @ @ - 30 , 6 + 30 , 7 @ @ public abstract class EncryptionOptions 
 public String algorithm = " SunX509 " ; 
 public String store _ type = " JKS " ; 
 public boolean require _ client _ auth = false ; 
 + public boolean require _ endpoint _ verification = false ; 
 
 public static class ClientEncryptionOptions extends EncryptionOptions 
 { 
 diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java 
 index bef4a60 . . 2e59b06 100644 
 - - - a / src / java / org / apache / cassandra / security / SSLFactory . java 
 + + + b / src / java / org / apache / cassandra / security / SSLFactory . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . util . List ; 
 
 import javax . net . ssl . KeyManagerFactory ; 
 import javax . net . ssl . SSLContext ; 
 + import javax . net . ssl . SSLParameters ; 
 import javax . net . ssl . SSLServerSocket ; 
 import javax . net . ssl . SSLSocket ; 
 import javax . net . ssl . TrustManager ; 
 @ @ - 60 , 10 + 61 , 9 @ @ public final class SSLFactory 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLServerSocket serverSocket = ( SSLServerSocket ) ctx . getServerSocketFactory ( ) . createServerSocket ( ) ; 
 serverSocket . setReuseAddress ( true ) ; 
 - String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - serverSocket . setEnabledCipherSuites ( suites ) ; 
 - serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; 
 + prepareSocket ( serverSocket , options ) ; 
 serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; 
 + 
 return serverSocket ; 
 } 
 
 @ @ - 72 , 8 + 72 , 7 @ @ public final class SSLFactory 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port , localAddress , localPort ) ; 
 - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - socket . setEnabledCipherSuites ( suites ) ; 
 + prepareSocket ( socket , options ) ; 
 return socket ; 
 } 
 
 @ @ - 82 , 8 + 81 , 7 @ @ public final class SSLFactory 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port ) ; 
 - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - socket . setEnabledCipherSuites ( suites ) ; 
 + prepareSocket ( socket , options ) ; 
 return socket ; 
 } 
 
 @ @ - 92 , 9 + 90 , 35 @ @ public final class SSLFactory 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( ) ; 
 + prepareSocket ( socket , options ) ; 
 + return socket ; 
 + } 
 + 
 + / * * Sets relevant socket options specified in encryption settings * / 
 + private static void prepareSocket ( SSLServerSocket serverSocket , EncryptionOptions options ) 
 + { 
 + String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 + if ( options . require _ endpoint _ verification ) 
 + { 
 + SSLParameters sslParameters = serverSocket . getSSLParameters ( ) ; 
 + sslParameters . setEndpointIdentificationAlgorithm ( " HTTPS " ) ; 
 + serverSocket . setSSLParameters ( sslParameters ) ; 
 + } 
 + serverSocket . setEnabledCipherSuites ( suites ) ; 
 + serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; 
 + } 
 + 
 + / * * Sets relevant socket options specified in encryption settings * / 
 + private static void prepareSocket ( SSLSocket socket , EncryptionOptions options ) 
 + { 
 String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 + if ( options . require _ endpoint _ verification ) 
 + { 
 + SSLParameters sslParameters = socket . getSSLParameters ( ) ; 
 + sslParameters . setEndpointIdentificationAlgorithm ( " HTTPS " ) ; 
 + socket . setSSLParameters ( sslParameters ) ; 
 + } 
 socket . setEnabledCipherSuites ( suites ) ; 
 - return socket ; 
 } 
 
 @ SuppressWarnings ( " resource " )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e317097 . . 3e12c5c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 1 . 0 . 5 
 * add command to stop compactions ( CASSANDRA - 1740 ) 
 * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) 
 + * fix assertion error when forwarding to local nodes ( CASSANDRA - 3539 ) 
 
 1 . 0 . 4 
 * fix self - hinting of timed out read repair updates and make hinted handoff 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 3560b9e . . a8af00c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 411 , 14 + 411 , 17 @ @ public class StorageProxy implements StorageProxyMBean 
 Iterator < InetAddress > iter = messages . getValue ( ) . iterator ( ) ; 
 InetAddress target = iter . next ( ) ; 
 / / Add all the other destinations of the same message as a header in the primary message . 
 - FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; 
 - DataOutputStream dos = new DataOutputStream ( bos ) ; 
 - while ( iter . hasNext ( ) ) 
 + if ( iter . hasNext ( ) ) 
 { 
 - InetAddress destination = iter . next ( ) ; 
 - dos . write ( destination . getAddress ( ) ) ; 
 + FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; 
 + DataOutputStream dos = new DataOutputStream ( bos ) ; 
 + while ( iter . hasNext ( ) ) 
 + { 
 + InetAddress destination = iter . next ( ) ; 
 + dos . write ( destination . getAddress ( ) ) ; 
 + } 
 + message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; 
 } 
 - message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; 
 / / send the combined message + forward headers 
 MessagingService . instance ( ) . sendRR ( message , target , handler ) ; 
 }
