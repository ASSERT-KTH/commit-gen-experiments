BLEU SCORE: 0.08116697886877475

TEST MSG: ninja - fix missing test file
GENERATED MSG: update test data for SerializationsTest

TEST DIFF (one line): diff - - git a / test / data / serialization / 2 . 1 / utils . BloomFilter1000 . bin b / test / data / serialization / 2 . 1 / utils . BloomFilter1000 . bin <nl> new file mode 100644 <nl> index 0000000 . . 619679c <nl> Binary files / dev / null and b / test / data / serialization / 2 . 1 / utils . BloomFilter1000 . bin differ
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java <nl> index 16fa4be . . a48e027 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / RowMutation . java <nl> @ @ - 442 , 56 + 442 , 6 @ @ public class RowMutation implements IMutation , MessageProducer <nl> return new RowMutation ( table , key , modifications ) ; <nl> } <nl> <nl> - / * * <nl> - * Used only by o . a . c . service . MigrationManager to fix possibly broken System . nanoTime ( ) timestamps <nl> - * of the schema migrations from remote nodes <nl> - * <nl> - * @ param dis The source of the data <nl> - * @ param version The version of remote node <nl> - * <nl> - * @ return row mutation with fixed internal timestamps <nl> - * <nl> - * @ throws IOException If data could not be read <nl> - * / <nl> - public RowMutation deserializeFixingTimestamps ( DataInput dis , int version ) throws IOException <nl> - { <nl> - RowMutation mutation = deserialize ( dis , version ) ; <nl> - <nl> - long now = FBUtilities . timestampMicros ( ) ; <nl> - Map < Integer , ColumnFamily > fixedModifications = new HashMap < Integer , ColumnFamily > ( ) ; <nl> - <nl> - for ( Map . Entry < Integer , ColumnFamily > modification : mutation . modifications _ . entrySet ( ) ) <nl> - { <nl> - ColumnFamily cfOld = modification . getValue ( ) ; <nl> - ColumnFamily cf = ColumnFamily . create ( cfOld . metadata ( ) ) ; <nl> - <nl> - if ( cfOld . isMarkedForDelete ( ) ) <nl> - cf . delete ( cfOld . getLocalDeletionTime ( ) , cfOld . getMarkedForDeleteAt ( ) > now ? now : cfOld . getMarkedForDeleteAt ( ) ) ; <nl> - <nl> - for ( IColumn column : cfOld . columns ) <nl> - { <nl> - / / don ' t clone if column already has a correct timestamp <nl> - if ( column . timestamp ( ) < = now ) <nl> - { <nl> - cf . addColumn ( column ) ; <nl> - continue ; <nl> - } <nl> - <nl> - if ( column . isMarkedForDelete ( ) ) <nl> - cf . addColumn ( new DeletedColumn ( column . name ( ) , column . value ( ) , now ) ) ; <nl> - else <nl> - cf . addColumn ( new Column ( column . name ( ) , column . value ( ) , now ) ) ; <nl> - } <nl> - <nl> - if ( cf . isMarkedForDelete ( ) & & cf . isEmpty ( ) ) <nl> - continue ; <nl> - <nl> - fixedModifications . put ( modification . getKey ( ) , cf ) ; <nl> - } <nl> - <nl> - return new RowMutation ( mutation . getTable ( ) , mutation . key ( ) , fixedModifications ) ; <nl> - } <nl> - <nl> public RowMutation deserialize ( DataInput dis , int version ) throws IOException <nl> { <nl> return deserialize ( dis , version , IColumnSerializer . Flag . FROM _ REMOTE ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index 973b190 . . 53c3035 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 304 , 7 + 304 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> int count = in . readInt ( ) ; <nl> <nl> for ( int i = 0 ; i < count ; i + + ) <nl> - schema . add ( RowMutation . serializer ( ) . deserializeFixingTimestamps ( in , version ) ) ; <nl> + schema . add ( RowMutation . serializer ( ) . deserialize ( in , version ) ) ; <nl> <nl> return schema ; <nl> }

TEST DIFF:
diff - - git a / test / data / serialization / 2 . 1 / utils . BloomFilter1000 . bin b / test / data / serialization / 2 . 1 / utils . BloomFilter1000 . bin 
 new file mode 100644 
 index 0000000 . . 619679c 
 Binary files / dev / null and b / test / data / serialization / 2 . 1 / utils . BloomFilter1000 . bin differ

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java 
 index 16fa4be . . a48e027 100644 
 - - - a / src / java / org / apache / cassandra / db / RowMutation . java 
 + + + b / src / java / org / apache / cassandra / db / RowMutation . java 
 @ @ - 442 , 56 + 442 , 6 @ @ public class RowMutation implements IMutation , MessageProducer 
 return new RowMutation ( table , key , modifications ) ; 
 } 
 
 - / * * 
 - * Used only by o . a . c . service . MigrationManager to fix possibly broken System . nanoTime ( ) timestamps 
 - * of the schema migrations from remote nodes 
 - * 
 - * @ param dis The source of the data 
 - * @ param version The version of remote node 
 - * 
 - * @ return row mutation with fixed internal timestamps 
 - * 
 - * @ throws IOException If data could not be read 
 - * / 
 - public RowMutation deserializeFixingTimestamps ( DataInput dis , int version ) throws IOException 
 - { 
 - RowMutation mutation = deserialize ( dis , version ) ; 
 - 
 - long now = FBUtilities . timestampMicros ( ) ; 
 - Map < Integer , ColumnFamily > fixedModifications = new HashMap < Integer , ColumnFamily > ( ) ; 
 - 
 - for ( Map . Entry < Integer , ColumnFamily > modification : mutation . modifications _ . entrySet ( ) ) 
 - { 
 - ColumnFamily cfOld = modification . getValue ( ) ; 
 - ColumnFamily cf = ColumnFamily . create ( cfOld . metadata ( ) ) ; 
 - 
 - if ( cfOld . isMarkedForDelete ( ) ) 
 - cf . delete ( cfOld . getLocalDeletionTime ( ) , cfOld . getMarkedForDeleteAt ( ) > now ? now : cfOld . getMarkedForDeleteAt ( ) ) ; 
 - 
 - for ( IColumn column : cfOld . columns ) 
 - { 
 - / / don ' t clone if column already has a correct timestamp 
 - if ( column . timestamp ( ) < = now ) 
 - { 
 - cf . addColumn ( column ) ; 
 - continue ; 
 - } 
 - 
 - if ( column . isMarkedForDelete ( ) ) 
 - cf . addColumn ( new DeletedColumn ( column . name ( ) , column . value ( ) , now ) ) ; 
 - else 
 - cf . addColumn ( new Column ( column . name ( ) , column . value ( ) , now ) ) ; 
 - } 
 - 
 - if ( cf . isMarkedForDelete ( ) & & cf . isEmpty ( ) ) 
 - continue ; 
 - 
 - fixedModifications . put ( modification . getKey ( ) , cf ) ; 
 - } 
 - 
 - return new RowMutation ( mutation . getTable ( ) , mutation . key ( ) , fixedModifications ) ; 
 - } 
 - 
 public RowMutation deserialize ( DataInput dis , int version ) throws IOException 
 { 
 return deserialize ( dis , version , IColumnSerializer . Flag . FROM _ REMOTE ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index 973b190 . . 53c3035 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 304 , 7 + 304 , 7 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 int count = in . readInt ( ) ; 
 
 for ( int i = 0 ; i < count ; i + + ) 
 - schema . add ( RowMutation . serializer ( ) . deserializeFixingTimestamps ( in , version ) ) ; 
 + schema . add ( RowMutation . serializer ( ) . deserialize ( in , version ) ) ; 
 
 return schema ; 
 }
