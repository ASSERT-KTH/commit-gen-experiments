BLEU SCORE: 0.018738883683389617

TEST MSG: Fix IRE with ORDER BY , treating all selections as fns
GENERATED MSG: Add alias support to SELECT statement

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 809a102 . . fff6d3a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 12 : <nl> + * Fix InvalidRequestException with ORDER BY ( CASSANDRA - 8286 ) <nl> * Disable SSLv3 for POODLE ( CASSANDRA - 8265 ) <nl> * Fix millisecond timestamps in Tracing ( CASSANDRA - 8297 ) <nl> * Include keyspace name in error message when there are insufficient <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> index f284436 . . 2f3e481 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> @ @ - 109 , 6 + 109 , 11 @ @ public class ColumnIdentifier implements Selectable <nl> return new ColumnIdentifier ( cfm . comparator . fromString ( rawText ) , text ) ; <nl> } <nl> <nl> + public boolean processesSelection ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> @ Override <nl> public final int hashCode ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> index c098c92 . . 61f65c1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java <nl> @ @ - 684 , 7 + 684 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF <nl> } <nl> for ( ColumnIdentifier id : columnsWithConditions ) <nl> names . add ( cfDef . get ( id ) ) ; <nl> - selection = Selection . forColumns ( names ) ; <nl> + selection = Selection . forColumns ( new ArrayList < > ( names ) ) ; <nl> } <nl> <nl> long now = System . currentTimeMillis ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java b / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java <nl> index 0194239 . . c2d4e20 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java <nl> @ @ - 30 , 4 + 30 , 9 @ @ public class RawSelector <nl> this . selectable = selectable ; <nl> this . alias = alias ; <nl> } <nl> + <nl> + public boolean processesSelection ( ) <nl> + { <nl> + return selectable . processesSelection ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 77d94e3 . . f1d1aab 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 1957 , 10 + 1957 , 11 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> else <nl> { <nl> boolean hasColumn = false ; <nl> - for ( int i = 0 ; i < selectClause . size ( ) ; i + + ) <nl> + List < Name > selectedColumns = stmt . selection . getColumns ( ) ; <nl> + for ( int i = 0 ; i < selectedColumns . size ( ) ; i + + ) <nl> { <nl> - RawSelector selector = selectClause . get ( i ) ; <nl> - if ( name . name . equals ( selector . selectable ) ) <nl> + Name selected = selectedColumns . get ( i ) ; <nl> + if ( name . equals ( selected ) ) <nl> { <nl> stmt . orderingIndexes . put ( name , i ) ; <nl> hasColumn = true ; <nl> @ @ - 1969 , 7 + 1970 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> <nl> if ( ! hasColumn ) <nl> - throw new InvalidRequestException ( " ORDER BY could not be used on columns missing in select clause . " ) ; <nl> + throw new InvalidRequestException ( String . format ( " ORDER BY can only be performed on columns in the select clause ( got % s ) " , name . name ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / Selectable . java b / src / java / org / apache / cassandra / cql3 / statements / Selectable . java <nl> index 633bf71 . . b7e3614 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / Selectable . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / Selectable . java <nl> @ @ - 30 , 6 + 30 , 11 @ @ public interface Selectable <nl> public static interface Raw <nl> { <nl> public Selectable prepare ( CFMetaData cfm ) ; <nl> + <nl> + / * * <nl> + * Returns true if any processing is performed on the selected column . <nl> + * * / <nl> + public boolean processesSelection ( ) ; <nl> } <nl> <nl> public static class WritetimeOrTTL implements Selectable <nl> @ @ - 64 , 6 + 69 , 11 @ @ public interface Selectable <nl> { <nl> return new WritetimeOrTTL ( id . prepare ( cfm ) , isWritetime ) ; <nl> } <nl> + <nl> + public boolean processesSelection ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 109 , 6 + 119 , 11 @ @ public interface Selectable <nl> preparedArgs . add ( arg . prepare ( cfm ) ) ; <nl> return new WithFunction ( functionName , preparedArgs ) ; <nl> } <nl> + <nl> + public boolean processesSelection ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / Selection . java b / src / java / org / apache / cassandra / cql3 / statements / Selection . java <nl> index 0135a76 . . 407f7d9 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / Selection . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / Selection . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . cql3 . statements ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . util . ArrayList ; <nl> - import java . util . Collection ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . cql3 . * ; <nl> @ @ - 37 , 12 + 36 , 12 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> public abstract class Selection <nl> { <nl> - private final Collection < CFDefinition . Name > columns ; <nl> + private final List < CFDefinition . Name > columns ; <nl> private final List < ColumnSpecification > metadata ; <nl> private final boolean collectTimestamps ; <nl> private final boolean collectTTLs ; <nl> <nl> - protected Selection ( Collection < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean collectTimestamps , boolean collectTTLs ) <nl> + protected Selection ( List < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean collectTimestamps , boolean collectTTLs ) <nl> { <nl> this . columns = columns ; <nl> this . metadata = metadata ; <nl> @ @ - 69 , 16 + 68 , 16 @ @ public abstract class Selection <nl> return new SimpleSelection ( all , true ) ; <nl> } <nl> <nl> - public static Selection forColumns ( Collection < CFDefinition . Name > columns ) <nl> + public static Selection forColumns ( List < CFDefinition . Name > columns ) <nl> { <nl> return new SimpleSelection ( columns , false ) ; <nl> } <nl> <nl> - private static boolean isUsingFunction ( List < RawSelector > rawSelectors ) <nl> + private static boolean selectionsNeedProcessing ( List < RawSelector > rawSelectors ) <nl> { <nl> for ( RawSelector rawSelector : rawSelectors ) <nl> { <nl> - if ( ! ( rawSelector . selectable instanceof ColumnIdentifier ) ) <nl> + if ( rawSelector . processesSelection ( ) ) <nl> return true ; <nl> } <nl> return false ; <nl> @ @ - 174 , 9 + 173 , 9 @ @ public abstract class Selection <nl> <nl> public static Selection fromSelectors ( CFDefinition cfDef , List < RawSelector > rawSelectors ) throws InvalidRequestException <nl> { <nl> - boolean usesFunction = isUsingFunction ( rawSelectors ) ; <nl> + boolean needsProcessing = selectionsNeedProcessing ( rawSelectors ) ; <nl> <nl> - if ( usesFunction ) <nl> + if ( needsProcessing ) <nl> { <nl> List < CFDefinition . Name > names = new ArrayList < CFDefinition . Name > ( ) ; <nl> List < ColumnSpecification > metadata = new ArrayList < ColumnSpecification > ( rawSelectors . size ( ) ) ; <nl> @ @ - 193 , 7 + 192 , 7 @ @ public abstract class Selection <nl> collectTTLs | = ! ( ( WritetimeOrTTLSelector ) selector ) . isWritetime ; <nl> } <nl> } <nl> - return new SelectionWithFunctions ( names , metadata , selectors , collectTimestamps , collectTTLs ) ; <nl> + return new SelectionWithProcessing ( names , metadata , selectors , collectTimestamps , collectTTLs ) ; <nl> } <nl> else <nl> { <nl> @ @ - 201 , 10 + 200 , 11 @ @ public abstract class Selection <nl> List < ColumnSpecification > metadata = new ArrayList < ColumnSpecification > ( rawSelectors . size ( ) ) ; <nl> for ( RawSelector rawSelector : rawSelectors ) <nl> { <nl> - assert rawSelector . selectable instanceof ColumnIdentifier ; <nl> - CFDefinition . Name name = cfDef . get ( ( ColumnIdentifier ) rawSelector . selectable ) ; <nl> + assert rawSelector . selectable instanceof ColumnIdentifier . Raw ; <nl> + ColumnIdentifier id = ( ( ColumnIdentifier . Raw ) rawSelector . selectable ) . prepare ( cfDef . cfm ) ; <nl> + CFDefinition . Name name = cfDef . get ( id ) ; <nl> if ( name = = null ) <nl> - throw new InvalidRequestException ( String . format ( " Undefined name % s in selection clause " , rawSelector . selectable ) ) ; <nl> + throw new InvalidRequestException ( String . format ( " Undefined name % s in selection clause " , id ) ) ; <nl> names . add ( name ) ; <nl> metadata . add ( rawSelector . alias = = null ? name : makeAliasSpec ( cfDef , name . type , rawSelector . alias ) ) ; <nl> } <nl> @ @ - 231 , 7 + 231 , 7 @ @ public abstract class Selection <nl> / * * <nl> * @ return the list of CQL3 columns value this SelectionClause needs . <nl> * / <nl> - public Collection < CFDefinition . Name > getColumns ( ) <nl> + public List < CFDefinition . Name > getColumns ( ) <nl> { <nl> return columns ; <nl> } <nl> @ @ - 322 , 12 + 322 , 12 @ @ public abstract class Selection <nl> { <nl> private final boolean isWildcard ; <nl> <nl> - public SimpleSelection ( Collection < CFDefinition . Name > columns , boolean isWildcard ) <nl> + public SimpleSelection ( List < CFDefinition . Name > columns , boolean isWildcard ) <nl> { <nl> this ( columns , new ArrayList < ColumnSpecification > ( columns ) , isWildcard ) ; <nl> } <nl> <nl> - public SimpleSelection ( Collection < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean isWildcard ) <nl> + public SimpleSelection ( List < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean isWildcard ) <nl> { <nl> / * <nl> * In theory , even a simple selection could have multiple time the same column , so we <nl> @ @ - 350 , 6 + 350 , 27 @ @ public abstract class Selection <nl> } <nl> } <nl> <nl> + private static class SelectionWithProcessing extends Selection <nl> + { <nl> + private final List < Selector > selectors ; <nl> + <nl> + public SelectionWithProcessing ( List < CFDefinition . Name > columns , List < ColumnSpecification > metadata , List < Selector > selectors , boolean collectTimestamps , boolean collectTTLs ) <nl> + { <nl> + super ( columns , metadata , collectTimestamps , collectTTLs ) ; <nl> + this . selectors = selectors ; <nl> + } <nl> + <nl> + protected List < ByteBuffer > handleRow ( ResultSetBuilder rs ) throws InvalidRequestException <nl> + { <nl> + List < ByteBuffer > result = new ArrayList < ByteBuffer > ( ) ; <nl> + for ( Selector selector : selectors ) <nl> + { <nl> + result . add ( selector . compute ( rs ) ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + } <nl> + <nl> private interface Selector extends AssignementTestable <nl> { <nl> public ByteBuffer compute ( ResultSetBuilder rs ) throws InvalidRequestException ; <nl> @ @ - 461 , 25 + 482 , 4 @ @ public abstract class Selection <nl> return columnName ; <nl> } <nl> } <nl> - <nl> - private static class SelectionWithFunctions extends Selection <nl> - { <nl> - private final List < Selector > selectors ; <nl> - <nl> - public SelectionWithFunctions ( Collection < CFDefinition . Name > columns , List < ColumnSpecification > metadata , List < Selector > selectors , boolean collectTimestamps , boolean collectTTLs ) <nl> - { <nl> - super ( columns , metadata , collectTimestamps , collectTTLs ) ; <nl> - this . selectors = selectors ; <nl> - } <nl> - <nl> - protected List < ByteBuffer > handleRow ( ResultSetBuilder rs ) throws InvalidRequestException <nl> - { <nl> - List < ByteBuffer > result = new ArrayList < ByteBuffer > ( ) ; <nl> - for ( Selector selector : selectors ) <nl> - { <nl> - result . add ( selector . compute ( rs ) ) ; <nl> - } <nl> - return result ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectionOrderingTest . java b / test / unit / org / apache / cassandra / cql3 / SelectionOrderingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 305d91e <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / SelectionOrderingTest . java <nl> @ @ - 0 , 0 + 1 , 452 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . db . ConsistencyLevel ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> + import org . apache . cassandra . service . ClientState ; <nl> + import org . junit . AfterClass ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import java . util . Iterator ; <nl> + <nl> + import static org . apache . cassandra . cql3 . QueryProcessor . process ; <nl> + import static org . apache . cassandra . cql3 . QueryProcessor . processInternal ; <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + public class SelectionOrderingTest <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( SelectWithTokenFunctionTest . class ) ; <nl> + static ClientState clientState ; <nl> + static String keyspace = " select _ with _ ordering _ test " ; <nl> + <nl> + @ BeforeClass <nl> + public static void setUpClass ( ) throws Throwable <nl> + { <nl> + SchemaLoader . loadSchema ( ) ; <nl> + executeSchemaChange ( " CREATE KEYSPACE IF NOT EXISTS % s WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : ' 1 ' } " ) ; <nl> + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ clustering ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; <nl> + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ clustering _ desc ( a int , b int , c int , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; <nl> + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . multiple _ clustering ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; <nl> + clientState = ClientState . forInternalCalls ( ) ; <nl> + } <nl> + <nl> + @ AfterClass <nl> + public static void stopGossiper ( ) <nl> + { <nl> + Gossiper . instance . stop ( ) ; <nl> + } <nl> + <nl> + private static void executeSchemaChange ( String query ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + process ( String . format ( query , keyspace ) , ConsistencyLevel . ONE ) ; <nl> + } <nl> + catch ( RuntimeException exc ) <nl> + { <nl> + throw exc . getCause ( ) ; <nl> + } <nl> + } <nl> + <nl> + private static UntypedResultSet execute ( String query ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + return processInternal ( String . format ( query , keyspace ) ) ; <nl> + } <nl> + catch ( RuntimeException exc ) <nl> + { <nl> + if ( exc . getCause ( ) ! = null ) <nl> + throw exc . getCause ( ) ; <nl> + throw exc ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNormalSelectionOrderSingleClustering ( ) throws Throwable <nl> + { <nl> + for ( String descOption : new String [ ] { " " , " _ desc " } ) <nl> + { <nl> + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 2 , 2 ) " ) ; <nl> + <nl> + try <nl> + { <nl> + UntypedResultSet results = execute ( " SELECT * FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 2 ; i > = 0 ; i - - ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; <nl> + <nl> + / / order by the only column in the selection <nl> + results = execute ( " SELECT b FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; <nl> + <nl> + results = execute ( " SELECT b FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 2 ; i > = 0 ; i - - ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; <nl> + <nl> + / / order by a column not in the selection <nl> + results = execute ( " SELECT c FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " c " ) ) ; <nl> + <nl> + results = execute ( " SELECT c FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 2 ; i > = 0 ; i - - ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " c " ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + execute ( " DELETE FROM % s . single _ clustering " + descOption + " WHERE a = 0 " ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testFunctionSelectionOrderSingleClustering ( ) throws Throwable <nl> + { <nl> + for ( String descOption : new String [ ] { " " , " _ desc " } ) <nl> + { <nl> + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 2 , 2 ) " ) ; <nl> + <nl> + try <nl> + { <nl> + / / order by a column in the selection ( wrapped in a function ) <nl> + UntypedResultSet results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 2 ; i > = 0 ; i - - ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + / / order by a column in the selection , plus the column wrapped in a function <nl> + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + { <nl> + UntypedResultSet . Row row = rows . next ( ) ; <nl> + assertEquals ( i , row . getInt ( " b " ) ) ; <nl> + assertEquals ( i , row . getInt ( " col " ) ) ; <nl> + } <nl> + <nl> + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 2 ; i > = 0 ; i - - ) <nl> + { <nl> + UntypedResultSet . Row row = rows . next ( ) ; <nl> + assertEquals ( i , row . getInt ( " b " ) ) ; <nl> + assertEquals ( i , row . getInt ( " col " ) ) ; <nl> + } <nl> + <nl> + / / order by a column not in the selection ( wrapped in a function ) <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 0 ; i < 3 ; i + + ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 3 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + for ( int i = 2 ; i > = 0 ; i - - ) <nl> + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + execute ( " DELETE FROM % s . single _ clustering " + descOption + " WHERE a = 0 " ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testNormalSelectionOrderMultipleClustering ( ) throws Throwable <nl> + { <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 2 , 2 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 0 , 3 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 1 , 4 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 2 , 5 ) " ) ; <nl> + try <nl> + { <nl> + UntypedResultSet results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + <nl> + results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + <nl> + / / select and order by b <nl> + results = execute ( " SELECT b FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + <nl> + results = execute ( " SELECT b FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; <nl> + <nl> + / / select c , order by b <nl> + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + <nl> + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + <nl> + / / select c , order by b , c <nl> + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + <nl> + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; <nl> + <nl> + / / select d , order by b , c <nl> + results = execute ( " SELECT d FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + <nl> + results = execute ( " SELECT d FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + execute ( " DELETE FROM % s . multiple _ clustering WHERE a = 0 " ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testFunctionSelectionOrderMultipleClustering ( ) throws Throwable <nl> + { <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 0 , 0 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 1 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 2 , 2 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 0 , 3 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 1 , 4 ) " ) ; <nl> + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 2 , 5 ) " ) ; <nl> + try <nl> + { <nl> + / / select function of b , order by b <nl> + UntypedResultSet results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + / / select b and function of b , order by b <nl> + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + / / select c , order by b <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + / / select c , order by b , c <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + / / select d , order by b , c <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( d ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + <nl> + results = execute ( " SELECT blobAsInt ( intAsBlob ( d ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; <nl> + assertEquals ( 6 , results . size ( ) ) ; <nl> + rows = results . iterator ( ) ; <nl> + assertEquals ( 5 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 4 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 3 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + execute ( " DELETE FROM % s . multiple _ clustering WHERE a = 0 " ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cli / CliMain . java b / src / java / org / apache / cassandra / cli / CliMain . java <nl> index 3f6ef02 . . 1452f6a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliMain . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliMain . java <nl> @ @ - 198 , 7 + 198 , 7 @ @ public class CliMain <nl> completer . setCandidateStrings ( strs ) ; <nl> } <nl> <nl> - public static void processStatement ( String query ) throws CharacterCodingException , ClassNotFoundException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException <nl> + public static void processStatement ( String query ) throws CharacterCodingException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException <nl> { <nl> cliClient . executeCLIStatement ( query ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql / CFPropDefs . java b / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> index f3b434b . . 82485fc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> + + + b / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> @ @ - 236 , 7 + 236 , 7 @ @ public class CFPropDefs { <nl> } <nl> <nl> / / Return a property value , typed as a Boolean <nl> - public Boolean getPropertyBoolean ( String key , Boolean defaultValue ) throws InvalidRequestException <nl> + public Boolean getPropertyBoolean ( String key , Boolean defaultValue ) <nl> { <nl> String value = properties . get ( key ) ; <nl> return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> index 2f0790c . . 409fca8 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java <nl> @ @ - 161 , 7 + 161 , 7 @ @ public class CreateColumnFamilyStatement <nl> * @ return a CFMetaData instance corresponding to the values parsed from this statement <nl> * @ throws InvalidRequestException on failure to validate parsed parameters <nl> * / <nl> - public CFMetaData getCFMetaData ( String keyspace , List < ByteBuffer > variables ) throws InvalidRequestException , ConfigurationException <nl> + public CFMetaData getCFMetaData ( String keyspace , List < ByteBuffer > variables ) throws InvalidRequestException <nl> { <nl> validate ( variables ) ; <nl> <nl> @ @ - 223 , 7 + 223 , 7 @ @ public class CreateColumnFamilyStatement <nl> return cfProps . getPropertyString ( key , defaultValue ) ; <nl> } <nl> <nl> - private Boolean getPropertyBoolean ( String key , Boolean defaultValue ) throws InvalidRequestException <nl> + private Boolean getPropertyBoolean ( String key , Boolean defaultValue ) <nl> { <nl> return cfProps . getPropertyBoolean ( key , defaultValue ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql / DropIndexStatement . java b / src / java / org / apache / cassandra / cql / DropIndexStatement . java <nl> index b9f4e5e . . bc9bbbc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / DropIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / DropIndexStatement . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class DropIndexStatement <nl> return updateCFMetadata ( findIndexedCF ( ) ) ; <nl> } <nl> <nl> - private CFMetaData updateCFMetadata ( CFMetaData cfm ) throws InvalidRequestException <nl> + private CFMetaData updateCFMetadata ( CFMetaData cfm ) <nl> { <nl> ColumnDefinition column = findIndexedColumn ( cfm ) ; <nl> assert column ! = null ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index 7eaa111 . . 2f9c5ba 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 23 , 8 + 23 , 6 @ @ import java . nio . charset . CharacterCodingException ; <nl> import java . util . * ; <nl> import java . util . concurrent . TimeoutException ; <nl> <nl> - import com . google . common . base . Predicates ; <nl> - import com . google . common . collect . Maps ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 764 , 7 + 762 , 7 @ @ public class QueryProcessor <nl> } <nl> <nl> public static CqlPreparedResult prepare ( String queryString , ThriftClientState clientState ) <nl> - throws InvalidRequestException , SyntaxException <nl> + throws SyntaxException <nl> { <nl> logger . trace ( " CQL QUERY : { } " , queryString ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java b / src / java / org / apache / cassandra / cql3 / KSPropDefs . java <nl> index 70df622 . . 9bf4070 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / KSPropDefs . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class KSPropDefs extends PropertyDefinitions <nl> <nl> private String strategyClass ; <nl> <nl> - public void validate ( ) throws ConfigurationException , SyntaxException <nl> + public void validate ( ) throws SyntaxException <nl> { <nl> validate ( keywords , obsoleteKeywords ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java <nl> index 078f0ff . . 71a3545 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement <nl> } <nl> <nl> / / Column definitions <nl> - private Map < ByteBuffer , ColumnDefinition > getColumns ( ) throws InvalidRequestException <nl> + private Map < ByteBuffer , ColumnDefinition > getColumns ( ) <nl> { <nl> Map < ByteBuffer , ColumnDefinition > columnDefs = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; <nl> Integer componentIndex = null ; <nl> @ @ - 340 , 7 + 340 , 7 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement <nl> return new ParsedStatement . Prepared ( stmt ) ; <nl> } <nl> <nl> - private AbstractType < ? > getTypeAndRemove ( Map < ColumnIdentifier , AbstractType > columns , ColumnIdentifier t ) throws InvalidRequestException , ConfigurationException <nl> + private AbstractType < ? > getTypeAndRemove ( Map < ColumnIdentifier , AbstractType > columns , ColumnIdentifier t ) throws InvalidRequestException <nl> { <nl> AbstractType type = columns . get ( t ) ; <nl> if ( type = = null ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> index c8c34e0 . . 7cc3b16 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class DropIndexStatement extends SchemaAlteringStatement <nl> MigrationManager . announceColumnFamilyUpdate ( updatedCfm , false ) ; <nl> } <nl> <nl> - private CFMetaData updateCFMetadata ( CFMetaData cfm ) throws InvalidRequestException <nl> + private CFMetaData updateCFMetadata ( CFMetaData cfm ) <nl> { <nl> ColumnDefinition column = findIndexedColumn ( cfm ) ; <nl> assert column ! = null ; <nl> diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> index a5139e8 . . 9b0c334 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> @ @ - 225 , 7 + 225 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> writeHintsForMutation ( RowMutation . serializer . deserialize ( in , VERSION ) ) ; <nl> } <nl> <nl> - private static void writeHintsForMutation ( RowMutation mutation ) throws IOException <nl> + private static void writeHintsForMutation ( RowMutation mutation ) <nl> { <nl> String table = mutation . getTable ( ) ; <nl> Token tk = StorageService . getPartitioner ( ) . getToken ( mutation . key ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java b / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java <nl> index 3016499 . . f5cf3d4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java <nl> @ @ - 170 , 7 + 170 , 7 @ @ public class ColumnFamilySerializer implements IVersionedSerializer < ColumnFamily <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - public void deserializeColumnsFromSSTable ( DataInput in , ColumnFamily cf , int size , ColumnSerializer . Flag flag , int expireBefore , Descriptor . Version version ) throws IOException <nl> + public void deserializeColumnsFromSSTable ( DataInput in , ColumnFamily cf , int size , ColumnSerializer . Flag flag , int expireBefore , Descriptor . Version version ) <nl> { <nl> Iterator < OnDiskAtom > iter = cf . metadata ( ) . getOnDiskIterator ( in , size , flag , expireBefore , version ) ; <nl> while ( iter . hasNext ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index 83d9c22 . . 482f2f9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 327 , 7 + 327 , 6 @ @ public class DefsTable <nl> } <nl> <nl> private static void mergeColumnFamilies ( Map < DecoratedKey , ColumnFamily > old , Map < DecoratedKey , ColumnFamily > updated ) <nl> - throws ConfigurationException , IOException <nl> { <nl> / / calculate the difference between old and new states ( note that entriesOnlyLeft ( ) will be always empty ) <nl> MapDifference < DecoratedKey , ColumnFamily > diff = Maps . difference ( old , updated ) ; <nl> @ @ - 454 , 7 + 453 , 7 @ @ public class DefsTable <nl> } <nl> } <nl> <nl> - private static void dropKeyspace ( String ksName ) throws IOException <nl> + private static void dropKeyspace ( String ksName ) <nl> { <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( ksName ) ; <nl> String snapshotName = Table . getTimestampedSnapshotName ( ksName ) ; <nl> @ @ - 485 , 7 + 484 , 7 @ @ public class DefsTable <nl> } <nl> } <nl> <nl> - private static void dropColumnFamily ( String ksName , String cfName ) throws IOException <nl> + private static void dropColumnFamily ( String ksName , String cfName ) <nl> { <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( ksName ) ; <nl> assert ksm ! = null ; <nl> diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index 0939abb . . 02cf090 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 210 , 7 + 210 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> } <nl> <nl> @ VisibleForTesting <nl> - protected Future < ? > compact ( ) throws ExecutionException , InterruptedException <nl> + protected Future < ? > compact ( ) <nl> { <nl> hintStore . forceBlockingFlush ( ) ; <nl> ArrayList < Descriptor > descriptors = new ArrayList < Descriptor > ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index f158e4c . . 32920e7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 118 , 12 + 118 , 12 @ @ public class Table <nl> return tableInstance ; <nl> } <nl> <nl> - public static Table clear ( String table ) throws IOException <nl> + public static Table clear ( String table ) <nl> { <nl> return clear ( table , Schema . instance ) ; <nl> } <nl> <nl> - public static Table clear ( String table , Schema schema ) throws IOException <nl> + public static Table clear ( String table , Schema schema ) <nl> { <nl> synchronized ( Table . class ) <nl> { <nl> @ @ - 281 , 7 + 281 , 7 @ @ public class Table <nl> } <nl> <nl> / / best invoked on the compaction mananger . <nl> - public void dropCf ( UUID cfId ) throws IOException <nl> + public void dropCf ( UUID cfId ) <nl> { <nl> assert columnFamilyStores . containsKey ( cfId ) ; <nl> ColumnFamilyStore cfs = columnFamilyStores . remove ( cfId ) ; <nl> @ @ - 292 , 7 + 292 , 7 @ @ public class Table <nl> } <nl> <nl> / / disassociate a cfs from this table instance . <nl> - private void unloadCf ( ColumnFamilyStore cfs ) throws IOException <nl> + private void unloadCf ( ColumnFamilyStore cfs ) <nl> { <nl> cfs . forceBlockingFlush ( ) ; <nl> cfs . invalidate ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> index 55a62b8 . . 1e7285a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> @ @ - 109 , 16 + 109 , 9 @ @ public class PrecompactedRow extends AbstractCompactedRow <nl> List < CloseableIterator < Column > > data = new ArrayList < CloseableIterator < Column > > ( rows . size ( ) ) ; <nl> for ( SSTableIdentityIterator row : rows ) <nl> { <nl> - try <nl> - { <nl> - ColumnFamily cf = row . getColumnFamilyWithColumns ( ArrayBackedSortedColumns . factory ) ; <nl> - returnCF . delete ( cf ) ; <nl> - data . add ( FBUtilities . closeableIterator ( cf . iterator ( ) ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + ColumnFamily cf = row . getColumnFamilyWithColumns ( ArrayBackedSortedColumns . factory ) ; <nl> + returnCF . delete ( cf ) ; <nl> + data . add ( FBUtilities . closeableIterator ( cf . iterator ( ) ) ) ; <nl> } <nl> <nl> merge ( returnCF , data , controller . cfs . indexManager . updaterFor ( rows . get ( 0 ) . getKey ( ) ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index 2f194f3 . . 421385a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class Scrubber implements Closeable <nl> this . scrubInfo = new ScrubInfo ( dataFile , sstable ) ; <nl> } <nl> <nl> - public void scrub ( ) throws IOException <nl> + public void scrub ( ) <nl> { <nl> outputHandler . output ( " Scrubbing " + sstable ) ; <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java <nl> index e0bd09b . . 977a600 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java <nl> @ @ - 79 , 20 + 79 , 20 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > <nl> private CFType cfType ; <nl> private ColType colType ; <nl> <nl> - BulkRecordWriter ( TaskAttemptContext context ) throws IOException <nl> + BulkRecordWriter ( TaskAttemptContext context ) <nl> { <nl> this ( context . getConfiguration ( ) ) ; <nl> this . progress = new Progressable ( context ) ; <nl> } <nl> <nl> <nl> - BulkRecordWriter ( Configuration conf , Progressable progress ) throws IOException <nl> + BulkRecordWriter ( Configuration conf , Progressable progress ) <nl> { <nl> this ( conf ) ; <nl> this . progress = progress ; <nl> } <nl> <nl> - BulkRecordWriter ( Configuration conf ) throws IOException <nl> + BulkRecordWriter ( Configuration conf ) <nl> { <nl> Config . setClientMode ( true ) ; <nl> Config . setOutboundBindAny ( true ) ; <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> index 6fa085f . . d4fb577 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> @ @ - 516 , 7 + 516 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo <nl> } <nl> } <nl> <nl> - private void setConnectionInformation ( ) throws IOException <nl> + private void setConnectionInformation ( ) <nl> { <nl> if ( System . getenv ( PIG _ RPC _ PORT ) ! = null ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> index 8170b29 . . 8e636c5 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> @ @ - 200 , 7 + 200 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat <nl> } <nl> } <nl> <nl> - public ColumnFamily getColumnFamilyWithColumns ( ColumnFamily . Factory containerFactory ) throws IOException <nl> + public ColumnFamily getColumnFamilyWithColumns ( ColumnFamily . Factory containerFactory ) <nl> { <nl> assert inputWithTracker . getBytesRead ( ) = = headerSize ( ) ; <nl> ColumnFamily cf = columnFamily . cloneMeShallow ( containerFactory , false ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> index 263f39c . . 4ee6768 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java <nl> @ @ - 107 , 12 + 107 , 12 @ @ public class SSTableLoader <nl> return sstables ; <nl> } <nl> <nl> - public LoaderFuture stream ( ) throws IOException <nl> + public LoaderFuture stream ( ) <nl> { <nl> return stream ( Collections . < InetAddress > emptySet ( ) ) ; <nl> } <nl> <nl> - public LoaderFuture stream ( Set < InetAddress > toIgnore ) throws IOException <nl> + public LoaderFuture stream ( Set < InetAddress > toIgnore ) <nl> { <nl> client . init ( keyspace ) ; <nl> <nl> @ @ - 289 , 7 + 289 , 7 @ @ public class SSTableLoader <nl> setPartitioner ( FBUtilities . newPartitioner ( partclass ) ) ; <nl> } <nl> <nl> - protected void setPartitioner ( IPartitioner partitioner ) throws ConfigurationException <nl> + protected void setPartitioner ( IPartitioner partitioner ) <nl> { <nl> this . partitioner = partitioner ; <nl> DatabaseDescriptor . setPartitioner ( partitioner ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index 809d8c9 . . 1977086 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class IncomingTcpConnection extends Thread <nl> } <nl> } <nl> <nl> - private void handleLegacyVersion ( int version ) throws IOException <nl> + private void handleLegacyVersion ( int version ) <nl> { <nl> throw new UnsupportedOperationException ( " Unable to read obsolete message version " + version + " ; the earliest version supported is 1 . 2 . 0 " ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 3c508ee . . 27bc69d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 374 , 7 + 374 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return initialized ; <nl> } <nl> <nl> - public synchronized void initClient ( ) throws IOException , ConfigurationException <nl> + public synchronized void initClient ( ) throws ConfigurationException <nl> { <nl> / / We don ' t wait , because we ' re going to actually try to work on <nl> initClient ( 0 ) ; <nl> @ @ - 407 , 7 + 407 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> <nl> - public synchronized void initClient ( int ringDelay ) throws IOException , ConfigurationException <nl> + public synchronized void initClient ( int ringDelay ) throws ConfigurationException <nl> { <nl> if ( initialized ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamIn . java b / src / java / org / apache / cassandra / streaming / StreamIn . java <nl> index 740b430 . . 152c6c7 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamIn . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamIn . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class StreamIn <nl> } <nl> <nl> / * * Translates remote files to local files by creating a local sstable per remote sstable . * / <nl> - public static PendingFile getContextMapping ( PendingFile remote ) throws IOException <nl> + public static PendingFile getContextMapping ( PendingFile remote ) <nl> { <nl> / * Create a local sstable for each remote sstable * / <nl> Descriptor remotedesc = remote . desc ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> index 6f1d496 . . c30cec0 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> + + + b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java <nl> @ @ - 81 , 7 + 81 , 6 @ @ public class TCustomServerSocket extends TServerTransport <nl> } <nl> <nl> public TCustomServerSocket ( ServerSocket socket , boolean keepAlive , Integer sendBufferSize , Integer recvBufferSize ) <nl> - throws TTransportException <nl> { <nl> this . serverSocket = socket ; <nl> this . keepAlive = keepAlive ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> index c838cb0 . . 36211bb 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class BulkLoader <nl> private static final String PASSWD _ OPTION = " password " ; <nl> private static final String THROTTLE _ MBITS = " throttle " ; <nl> <nl> - public static void main ( String args [ ] ) throws IOException <nl> + public static void main ( String args [ ] ) <nl> { <nl> LoaderOptions options = LoaderOptions . parseArgs ( args ) ; <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 6e52f69 . . 63a3357 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 922 , 7 + 922 , 7 @ @ public class NodeCmd <nl> outs . println ( probe . isThriftServerRunning ( ) ? " running " : " not running " ) ; <nl> } <nl> <nl> - public static void main ( String [ ] args ) throws IOException , InterruptedException , ConfigurationException , ParseException <nl> + public static void main ( String [ ] args ) throws IOException , InterruptedException , ParseException <nl> { <nl> CommandLineParser parser = new PosixParser ( ) ; <nl> ToolCommandLine cmd = null ; <nl> @ @ - 1280 , 7 + 1280 , 7 @ @ public class NodeCmd <nl> } <nl> } <nl> <nl> - private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , String columnFamily , NodeProbe probe ) throws InterruptedException , IOException <nl> + private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , String columnFamily , NodeProbe probe ) throws IOException <nl> { <nl> String [ ] keyspaces = Arrays . copyOfRange ( cmdArgs , 0 , cmdArgs . length ) ; <nl> System . out . print ( " Requested snapshot for : " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 753a64c . . 0a1bc5b 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 88 , 7 + 88 , 7 @ @ public class NodeProbe <nl> * @ param port TCP port of the remote JMX agent <nl> * @ throws IOException on connection failures <nl> * / <nl> - public NodeProbe ( String host , int port , String username , String password ) throws IOException , InterruptedException <nl> + public NodeProbe ( String host , int port , String username , String password ) throws IOException <nl> { <nl> assert username ! = null & & ! username . isEmpty ( ) & & password ! = null & & ! password . isEmpty ( ) <nl> : " neither username nor password can be blank " ; <nl> @ @ - 107 , 7 + 107 , 7 @ @ public class NodeProbe <nl> * @ param port TCP port of the remote JMX agent <nl> * @ throws IOException on connection failures <nl> * / <nl> - public NodeProbe ( String host , int port ) throws IOException , InterruptedException <nl> + public NodeProbe ( String host , int port ) throws IOException <nl> { <nl> this . host = host ; <nl> this . port = port ; <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class NodeProbe <nl> * @ param host hostname or IP address of the JMX agent <nl> * @ throws IOException on connection failures <nl> * / <nl> - public NodeProbe ( String host ) throws IOException , InterruptedException <nl> + public NodeProbe ( String host ) throws IOException <nl> { <nl> this . host = host ; <nl> this . port = defaultPort ; <nl> @ @ - 265 , 12 + 265 , 12 @ @ public class NodeProbe <nl> ssProxy . forceTableRepairRange ( beginToken , endToken , tableName , isSequential , isLocal , columnFamilies ) ; <nl> } <nl> <nl> - public void invalidateKeyCache ( ) throws IOException <nl> + public void invalidateKeyCache ( ) <nl> { <nl> cacheService . invalidateKeyCache ( ) ; <nl> } <nl> <nl> - public void invalidateRowCache ( ) throws IOException <nl> + public void invalidateRowCache ( ) <nl> { <nl> cacheService . invalidateRowCache ( ) ; <nl> } <nl> @ @ - 456 , 7 + 456 , 7 @ @ public class NodeProbe <nl> ssProxy . decommission ( ) ; <nl> } <nl> <nl> - public void move ( String newToken ) throws IOException , InterruptedException <nl> + public void move ( String newToken ) throws IOException <nl> { <nl> ssProxy . move ( newToken ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> index ddfe69c . . 4ad5a57 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class SSTableMetadataViewer <nl> / * * <nl> * @ param args a list of sstables whose metadata we ' re interested in <nl> * / <nl> - public static void main ( String [ ] args ) throws IOException , ConfigurationException <nl> + public static void main ( String [ ] args ) throws IOException <nl> { <nl> PrintStream out = System . out ; <nl> if ( args . length = = 0 ) <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 886eb71 . . 8bbfb25 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 217 , 7 + 217 , 7 @ @ public class CliTest extends SchemaLoader <nl> } ; <nl> <nl> @ Test <nl> - public void testCli ( ) throws IOException , TException , ConfigurationException , ClassNotFoundException , TimedOutException , NotFoundException , SchemaDisagreementException , NoSuchFieldException , InvalidRequestException , UnavailableException , InstantiationException , IllegalAccessException <nl> + public void testCli ( ) throws IOException , TException , TimedOutException , NotFoundException , SchemaDisagreementException , NoSuchFieldException , InvalidRequestException , UnavailableException , InstantiationException , IllegalAccessException <nl> { <nl> Schema . instance . clear ( ) ; / / Schema are now written on disk and will be reloaded <nl> new EmbeddedCassandraService ( ) . start ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 809a102 . . fff6d3a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 12 : 
 + * Fix InvalidRequestException with ORDER BY ( CASSANDRA - 8286 ) 
 * Disable SSLv3 for POODLE ( CASSANDRA - 8265 ) 
 * Fix millisecond timestamps in Tracing ( CASSANDRA - 8297 ) 
 * Include keyspace name in error message when there are insufficient 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 index f284436 . . 2f3e481 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 @ @ - 109 , 6 + 109 , 11 @ @ public class ColumnIdentifier implements Selectable 
 return new ColumnIdentifier ( cfm . comparator . fromString ( rawText ) , text ) ; 
 } 
 
 + public boolean processesSelection ( ) 
 + { 
 + return false ; 
 + } 
 + 
 @ Override 
 public final int hashCode ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 index c098c92 . . 61f65c1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ModificationStatement . java 
 @ @ - 684 , 7 + 684 , 7 @ @ public abstract class ModificationStatement implements CQLStatement , MeasurableF 
 } 
 for ( ColumnIdentifier id : columnsWithConditions ) 
 names . add ( cfDef . get ( id ) ) ; 
 - selection = Selection . forColumns ( names ) ; 
 + selection = Selection . forColumns ( new ArrayList < > ( names ) ) ; 
 } 
 
 long now = System . currentTimeMillis ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java b / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java 
 index 0194239 . . c2d4e20 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / RawSelector . java 
 @ @ - 30 , 4 + 30 , 9 @ @ public class RawSelector 
 this . selectable = selectable ; 
 this . alias = alias ; 
 } 
 + 
 + public boolean processesSelection ( ) 
 + { 
 + return selectable . processesSelection ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 77d94e3 . . f1d1aab 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 1957 , 10 + 1957 , 11 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 else 
 { 
 boolean hasColumn = false ; 
 - for ( int i = 0 ; i < selectClause . size ( ) ; i + + ) 
 + List < Name > selectedColumns = stmt . selection . getColumns ( ) ; 
 + for ( int i = 0 ; i < selectedColumns . size ( ) ; i + + ) 
 { 
 - RawSelector selector = selectClause . get ( i ) ; 
 - if ( name . name . equals ( selector . selectable ) ) 
 + Name selected = selectedColumns . get ( i ) ; 
 + if ( name . equals ( selected ) ) 
 { 
 stmt . orderingIndexes . put ( name , i ) ; 
 hasColumn = true ; 
 @ @ - 1969 , 7 + 1970 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 
 if ( ! hasColumn ) 
 - throw new InvalidRequestException ( " ORDER BY could not be used on columns missing in select clause . " ) ; 
 + throw new InvalidRequestException ( String . format ( " ORDER BY can only be performed on columns in the select clause ( got % s ) " , name . name ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / Selectable . java b / src / java / org / apache / cassandra / cql3 / statements / Selectable . java 
 index 633bf71 . . b7e3614 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / Selectable . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / Selectable . java 
 @ @ - 30 , 6 + 30 , 11 @ @ public interface Selectable 
 public static interface Raw 
 { 
 public Selectable prepare ( CFMetaData cfm ) ; 
 + 
 + / * * 
 + * Returns true if any processing is performed on the selected column . 
 + * * / 
 + public boolean processesSelection ( ) ; 
 } 
 
 public static class WritetimeOrTTL implements Selectable 
 @ @ - 64 , 6 + 69 , 11 @ @ public interface Selectable 
 { 
 return new WritetimeOrTTL ( id . prepare ( cfm ) , isWritetime ) ; 
 } 
 + 
 + public boolean processesSelection ( ) 
 + { 
 + return true ; 
 + } 
 } 
 } 
 
 @ @ - 109 , 6 + 119 , 11 @ @ public interface Selectable 
 preparedArgs . add ( arg . prepare ( cfm ) ) ; 
 return new WithFunction ( functionName , preparedArgs ) ; 
 } 
 + 
 + public boolean processesSelection ( ) 
 + { 
 + return true ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / Selection . java b / src / java / org / apache / cassandra / cql3 / statements / Selection . java 
 index 0135a76 . . 407f7d9 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / Selection . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / Selection . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . cql3 . statements ; 
 
 import java . nio . ByteBuffer ; 
 import java . util . ArrayList ; 
 - import java . util . Collection ; 
 import java . util . List ; 
 
 import org . apache . cassandra . cql3 . * ; 
 @ @ - 37 , 12 + 36 , 12 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 public abstract class Selection 
 { 
 - private final Collection < CFDefinition . Name > columns ; 
 + private final List < CFDefinition . Name > columns ; 
 private final List < ColumnSpecification > metadata ; 
 private final boolean collectTimestamps ; 
 private final boolean collectTTLs ; 
 
 - protected Selection ( Collection < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean collectTimestamps , boolean collectTTLs ) 
 + protected Selection ( List < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean collectTimestamps , boolean collectTTLs ) 
 { 
 this . columns = columns ; 
 this . metadata = metadata ; 
 @ @ - 69 , 16 + 68 , 16 @ @ public abstract class Selection 
 return new SimpleSelection ( all , true ) ; 
 } 
 
 - public static Selection forColumns ( Collection < CFDefinition . Name > columns ) 
 + public static Selection forColumns ( List < CFDefinition . Name > columns ) 
 { 
 return new SimpleSelection ( columns , false ) ; 
 } 
 
 - private static boolean isUsingFunction ( List < RawSelector > rawSelectors ) 
 + private static boolean selectionsNeedProcessing ( List < RawSelector > rawSelectors ) 
 { 
 for ( RawSelector rawSelector : rawSelectors ) 
 { 
 - if ( ! ( rawSelector . selectable instanceof ColumnIdentifier ) ) 
 + if ( rawSelector . processesSelection ( ) ) 
 return true ; 
 } 
 return false ; 
 @ @ - 174 , 9 + 173 , 9 @ @ public abstract class Selection 
 
 public static Selection fromSelectors ( CFDefinition cfDef , List < RawSelector > rawSelectors ) throws InvalidRequestException 
 { 
 - boolean usesFunction = isUsingFunction ( rawSelectors ) ; 
 + boolean needsProcessing = selectionsNeedProcessing ( rawSelectors ) ; 
 
 - if ( usesFunction ) 
 + if ( needsProcessing ) 
 { 
 List < CFDefinition . Name > names = new ArrayList < CFDefinition . Name > ( ) ; 
 List < ColumnSpecification > metadata = new ArrayList < ColumnSpecification > ( rawSelectors . size ( ) ) ; 
 @ @ - 193 , 7 + 192 , 7 @ @ public abstract class Selection 
 collectTTLs | = ! ( ( WritetimeOrTTLSelector ) selector ) . isWritetime ; 
 } 
 } 
 - return new SelectionWithFunctions ( names , metadata , selectors , collectTimestamps , collectTTLs ) ; 
 + return new SelectionWithProcessing ( names , metadata , selectors , collectTimestamps , collectTTLs ) ; 
 } 
 else 
 { 
 @ @ - 201 , 10 + 200 , 11 @ @ public abstract class Selection 
 List < ColumnSpecification > metadata = new ArrayList < ColumnSpecification > ( rawSelectors . size ( ) ) ; 
 for ( RawSelector rawSelector : rawSelectors ) 
 { 
 - assert rawSelector . selectable instanceof ColumnIdentifier ; 
 - CFDefinition . Name name = cfDef . get ( ( ColumnIdentifier ) rawSelector . selectable ) ; 
 + assert rawSelector . selectable instanceof ColumnIdentifier . Raw ; 
 + ColumnIdentifier id = ( ( ColumnIdentifier . Raw ) rawSelector . selectable ) . prepare ( cfDef . cfm ) ; 
 + CFDefinition . Name name = cfDef . get ( id ) ; 
 if ( name = = null ) 
 - throw new InvalidRequestException ( String . format ( " Undefined name % s in selection clause " , rawSelector . selectable ) ) ; 
 + throw new InvalidRequestException ( String . format ( " Undefined name % s in selection clause " , id ) ) ; 
 names . add ( name ) ; 
 metadata . add ( rawSelector . alias = = null ? name : makeAliasSpec ( cfDef , name . type , rawSelector . alias ) ) ; 
 } 
 @ @ - 231 , 7 + 231 , 7 @ @ public abstract class Selection 
 / * * 
 * @ return the list of CQL3 columns value this SelectionClause needs . 
 * / 
 - public Collection < CFDefinition . Name > getColumns ( ) 
 + public List < CFDefinition . Name > getColumns ( ) 
 { 
 return columns ; 
 } 
 @ @ - 322 , 12 + 322 , 12 @ @ public abstract class Selection 
 { 
 private final boolean isWildcard ; 
 
 - public SimpleSelection ( Collection < CFDefinition . Name > columns , boolean isWildcard ) 
 + public SimpleSelection ( List < CFDefinition . Name > columns , boolean isWildcard ) 
 { 
 this ( columns , new ArrayList < ColumnSpecification > ( columns ) , isWildcard ) ; 
 } 
 
 - public SimpleSelection ( Collection < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean isWildcard ) 
 + public SimpleSelection ( List < CFDefinition . Name > columns , List < ColumnSpecification > metadata , boolean isWildcard ) 
 { 
 / * 
 * In theory , even a simple selection could have multiple time the same column , so we 
 @ @ - 350 , 6 + 350 , 27 @ @ public abstract class Selection 
 } 
 } 
 
 + private static class SelectionWithProcessing extends Selection 
 + { 
 + private final List < Selector > selectors ; 
 + 
 + public SelectionWithProcessing ( List < CFDefinition . Name > columns , List < ColumnSpecification > metadata , List < Selector > selectors , boolean collectTimestamps , boolean collectTTLs ) 
 + { 
 + super ( columns , metadata , collectTimestamps , collectTTLs ) ; 
 + this . selectors = selectors ; 
 + } 
 + 
 + protected List < ByteBuffer > handleRow ( ResultSetBuilder rs ) throws InvalidRequestException 
 + { 
 + List < ByteBuffer > result = new ArrayList < ByteBuffer > ( ) ; 
 + for ( Selector selector : selectors ) 
 + { 
 + result . add ( selector . compute ( rs ) ) ; 
 + } 
 + return result ; 
 + } 
 + } 
 + 
 private interface Selector extends AssignementTestable 
 { 
 public ByteBuffer compute ( ResultSetBuilder rs ) throws InvalidRequestException ; 
 @ @ - 461 , 25 + 482 , 4 @ @ public abstract class Selection 
 return columnName ; 
 } 
 } 
 - 
 - private static class SelectionWithFunctions extends Selection 
 - { 
 - private final List < Selector > selectors ; 
 - 
 - public SelectionWithFunctions ( Collection < CFDefinition . Name > columns , List < ColumnSpecification > metadata , List < Selector > selectors , boolean collectTimestamps , boolean collectTTLs ) 
 - { 
 - super ( columns , metadata , collectTimestamps , collectTTLs ) ; 
 - this . selectors = selectors ; 
 - } 
 - 
 - protected List < ByteBuffer > handleRow ( ResultSetBuilder rs ) throws InvalidRequestException 
 - { 
 - List < ByteBuffer > result = new ArrayList < ByteBuffer > ( ) ; 
 - for ( Selector selector : selectors ) 
 - { 
 - result . add ( selector . compute ( rs ) ) ; 
 - } 
 - return result ; 
 - } 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / SelectionOrderingTest . java b / test / unit / org / apache / cassandra / cql3 / SelectionOrderingTest . java 
 new file mode 100644 
 index 0000000 . . 305d91e 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / SelectionOrderingTest . java 
 @ @ - 0 , 0 + 1 , 452 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . db . ConsistencyLevel ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 + import org . apache . cassandra . service . ClientState ; 
 + import org . junit . AfterClass ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import java . util . Iterator ; 
 + 
 + import static org . apache . cassandra . cql3 . QueryProcessor . process ; 
 + import static org . apache . cassandra . cql3 . QueryProcessor . processInternal ; 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + public class SelectionOrderingTest 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( SelectWithTokenFunctionTest . class ) ; 
 + static ClientState clientState ; 
 + static String keyspace = " select _ with _ ordering _ test " ; 
 + 
 + @ BeforeClass 
 + public static void setUpClass ( ) throws Throwable 
 + { 
 + SchemaLoader . loadSchema ( ) ; 
 + executeSchemaChange ( " CREATE KEYSPACE IF NOT EXISTS % s WITH replication = { ' class ' : ' SimpleStrategy ' , ' replication _ factor ' : ' 1 ' } " ) ; 
 + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ clustering ( a int , b int , c int , PRIMARY KEY ( a , b ) ) " ) ; 
 + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . single _ clustering _ desc ( a int , b int , c int , PRIMARY KEY ( a , b ) ) WITH CLUSTERING ORDER BY ( b DESC ) " ) ; 
 + executeSchemaChange ( " CREATE TABLE IF NOT EXISTS % s . multiple _ clustering ( a int , b int , c int , d int , PRIMARY KEY ( a , b , c ) ) " ) ; 
 + clientState = ClientState . forInternalCalls ( ) ; 
 + } 
 + 
 + @ AfterClass 
 + public static void stopGossiper ( ) 
 + { 
 + Gossiper . instance . stop ( ) ; 
 + } 
 + 
 + private static void executeSchemaChange ( String query ) throws Throwable 
 + { 
 + try 
 + { 
 + process ( String . format ( query , keyspace ) , ConsistencyLevel . ONE ) ; 
 + } 
 + catch ( RuntimeException exc ) 
 + { 
 + throw exc . getCause ( ) ; 
 + } 
 + } 
 + 
 + private static UntypedResultSet execute ( String query ) throws Throwable 
 + { 
 + try 
 + { 
 + return processInternal ( String . format ( query , keyspace ) ) ; 
 + } 
 + catch ( RuntimeException exc ) 
 + { 
 + if ( exc . getCause ( ) ! = null ) 
 + throw exc . getCause ( ) ; 
 + throw exc ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNormalSelectionOrderSingleClustering ( ) throws Throwable 
 + { 
 + for ( String descOption : new String [ ] { " " , " _ desc " } ) 
 + { 
 + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 2 , 2 ) " ) ; 
 + 
 + try 
 + { 
 + UntypedResultSet results = execute ( " SELECT * FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 2 ; i > = 0 ; i - - ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; 
 + 
 + / / order by the only column in the selection 
 + results = execute ( " SELECT b FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; 
 + 
 + results = execute ( " SELECT b FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 2 ; i > = 0 ; i - - ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " b " ) ) ; 
 + 
 + / / order by a column not in the selection 
 + results = execute ( " SELECT c FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " c " ) ) ; 
 + 
 + results = execute ( " SELECT c FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 2 ; i > = 0 ; i - - ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " c " ) ) ; 
 + } 
 + finally 
 + { 
 + execute ( " DELETE FROM % s . single _ clustering " + descOption + " WHERE a = 0 " ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 + public void testFunctionSelectionOrderSingleClustering ( ) throws Throwable 
 + { 
 + for ( String descOption : new String [ ] { " " , " _ desc " } ) 
 + { 
 + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s . single _ clustering " + descOption + " ( a , b , c ) VALUES ( 0 , 2 , 2 ) " ) ; 
 + 
 + try 
 + { 
 + / / order by a column in the selection ( wrapped in a function ) 
 + UntypedResultSet results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 2 ; i > = 0 ; i - - ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + / / order by a column in the selection , plus the column wrapped in a function 
 + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + { 
 + UntypedResultSet . Row row = rows . next ( ) ; 
 + assertEquals ( i , row . getInt ( " b " ) ) ; 
 + assertEquals ( i , row . getInt ( " col " ) ) ; 
 + } 
 + 
 + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 2 ; i > = 0 ; i - - ) 
 + { 
 + UntypedResultSet . Row row = rows . next ( ) ; 
 + assertEquals ( i , row . getInt ( " b " ) ) ; 
 + assertEquals ( i , row . getInt ( " col " ) ) ; 
 + } 
 + 
 + / / order by a column not in the selection ( wrapped in a function ) 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 0 ; i < 3 ; i + + ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . single _ clustering " + descOption + " WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 3 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + for ( int i = 2 ; i > = 0 ; i - - ) 
 + assertEquals ( i , rows . next ( ) . getInt ( " col " ) ) ; 
 + } 
 + finally 
 + { 
 + execute ( " DELETE FROM % s . single _ clustering " + descOption + " WHERE a = 0 " ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 + public void testNormalSelectionOrderMultipleClustering ( ) throws Throwable 
 + { 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 2 , 2 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 0 , 3 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 1 , 4 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 2 , 5 ) " ) ; 
 + try 
 + { 
 + UntypedResultSet results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; 
 + 
 + results = execute ( " SELECT * FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; 
 + 
 + / / select and order by b 
 + results = execute ( " SELECT b FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; 
 + 
 + results = execute ( " SELECT b FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " b " ) ) ; 
 + 
 + / / select c , order by b 
 + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + 
 + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + 
 + / / select c , order by b , c 
 + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + 
 + results = execute ( " SELECT c FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " c " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " c " ) ) ; 
 + 
 + / / select d , order by b , c 
 + results = execute ( " SELECT d FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; 
 + 
 + results = execute ( " SELECT d FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " d " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " d " ) ) ; 
 + } 
 + finally 
 + { 
 + execute ( " DELETE FROM % s . multiple _ clustering WHERE a = 0 " ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testFunctionSelectionOrderMultipleClustering ( ) throws Throwable 
 + { 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 0 , 0 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 1 , 1 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 0 , 2 , 2 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 0 , 3 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 1 , 4 ) " ) ; 
 + execute ( " INSERT INTO % s . multiple _ clustering ( a , b , c , d ) VALUES ( 0 , 1 , 2 , 5 ) " ) ; 
 + try 
 + { 
 + / / select function of b , order by b 
 + UntypedResultSet results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + Iterator < UntypedResultSet . Row > rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + / / select b and function of b , order by b 
 + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT b , blobAsInt ( intAsBlob ( b ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + / / select c , order by b 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC " ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + / / select c , order by b , c 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( c ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + / / select d , order by b , c 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( d ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b ASC , c ASC " ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " col " ) ) ; 
 + 
 + results = execute ( " SELECT blobAsInt ( intAsBlob ( d ) ) as col FROM % s . multiple _ clustering WHERE a = 0 ORDER BY b DESC , c DESC " ) ; 
 + assertEquals ( 6 , results . size ( ) ) ; 
 + rows = results . iterator ( ) ; 
 + assertEquals ( 5 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 4 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 3 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 2 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 1 , rows . next ( ) . getInt ( " col " ) ) ; 
 + assertEquals ( 0 , rows . next ( ) . getInt ( " col " ) ) ; 
 + } 
 + finally 
 + { 
 + execute ( " DELETE FROM % s . multiple _ clustering WHERE a = 0 " ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cli / CliMain . java b / src / java / org / apache / cassandra / cli / CliMain . java 
 index 3f6ef02 . . 1452f6a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliMain . java 
 + + + b / src / java / org / apache / cassandra / cli / CliMain . java 
 @ @ - 198 , 7 + 198 , 7 @ @ public class CliMain 
 completer . setCandidateStrings ( strs ) ; 
 } 
 
 - public static void processStatement ( String query ) throws CharacterCodingException , ClassNotFoundException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException 
 + public static void processStatement ( String query ) throws CharacterCodingException , TException , TimedOutException , NotFoundException , InvalidRequestException , NoSuchFieldException , UnavailableException , IllegalAccessException , InstantiationException 
 { 
 cliClient . executeCLIStatement ( query ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql / CFPropDefs . java b / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 index f3b434b . . 82485fc 100644 
 - - - a / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 + + + b / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 @ @ - 236 , 7 + 236 , 7 @ @ public class CFPropDefs { 
 } 
 
 / / Return a property value , typed as a Boolean 
 - public Boolean getPropertyBoolean ( String key , Boolean defaultValue ) throws InvalidRequestException 
 + public Boolean getPropertyBoolean ( String key , Boolean defaultValue ) 
 { 
 String value = properties . get ( key ) ; 
 return ( value = = null ) ? defaultValue : value . toLowerCase ( ) . matches ( " ( 1 | true | yes ) " ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 index 2f0790c . . 409fca8 100644 
 - - - a / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / CreateColumnFamilyStatement . java 
 @ @ - 161 , 7 + 161 , 7 @ @ public class CreateColumnFamilyStatement 
 * @ return a CFMetaData instance corresponding to the values parsed from this statement 
 * @ throws InvalidRequestException on failure to validate parsed parameters 
 * / 
 - public CFMetaData getCFMetaData ( String keyspace , List < ByteBuffer > variables ) throws InvalidRequestException , ConfigurationException 
 + public CFMetaData getCFMetaData ( String keyspace , List < ByteBuffer > variables ) throws InvalidRequestException 
 { 
 validate ( variables ) ; 
 
 @ @ - 223 , 7 + 223 , 7 @ @ public class CreateColumnFamilyStatement 
 return cfProps . getPropertyString ( key , defaultValue ) ; 
 } 
 
 - private Boolean getPropertyBoolean ( String key , Boolean defaultValue ) throws InvalidRequestException 
 + private Boolean getPropertyBoolean ( String key , Boolean defaultValue ) 
 { 
 return cfProps . getPropertyBoolean ( key , defaultValue ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql / DropIndexStatement . java b / src / java / org / apache / cassandra / cql / DropIndexStatement . java 
 index b9f4e5e . . bc9bbbc 100644 
 - - - a / src / java / org / apache / cassandra / cql / DropIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / DropIndexStatement . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class DropIndexStatement 
 return updateCFMetadata ( findIndexedCF ( ) ) ; 
 } 
 
 - private CFMetaData updateCFMetadata ( CFMetaData cfm ) throws InvalidRequestException 
 + private CFMetaData updateCFMetadata ( CFMetaData cfm ) 
 { 
 ColumnDefinition column = findIndexedColumn ( cfm ) ; 
 assert column ! = null ; 
 diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index 7eaa111 . . 2f9c5ba 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 23 , 8 + 23 , 6 @ @ import java . nio . charset . CharacterCodingException ; 
 import java . util . * ; 
 import java . util . concurrent . TimeoutException ; 
 
 - import com . google . common . base . Predicates ; 
 - import com . google . common . collect . Maps ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 764 , 7 + 762 , 7 @ @ public class QueryProcessor 
 } 
 
 public static CqlPreparedResult prepare ( String queryString , ThriftClientState clientState ) 
 - throws InvalidRequestException , SyntaxException 
 + throws SyntaxException 
 { 
 logger . trace ( " CQL QUERY : { } " , queryString ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java b / src / java / org / apache / cassandra / cql3 / KSPropDefs . java 
 index 70df622 . . 9bf4070 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / KSPropDefs . java 
 + + + b / src / java / org / apache / cassandra / cql3 / KSPropDefs . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class KSPropDefs extends PropertyDefinitions 
 
 private String strategyClass ; 
 
 - public void validate ( ) throws ConfigurationException , SyntaxException 
 + public void validate ( ) throws SyntaxException 
 { 
 validate ( keywords , obsoleteKeywords ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java 
 index 078f0ff . . 71a3545 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateColumnFamilyStatement . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement 
 } 
 
 / / Column definitions 
 - private Map < ByteBuffer , ColumnDefinition > getColumns ( ) throws InvalidRequestException 
 + private Map < ByteBuffer , ColumnDefinition > getColumns ( ) 
 { 
 Map < ByteBuffer , ColumnDefinition > columnDefs = new HashMap < ByteBuffer , ColumnDefinition > ( ) ; 
 Integer componentIndex = null ; 
 @ @ - 340 , 7 + 340 , 7 @ @ public class CreateColumnFamilyStatement extends SchemaAlteringStatement 
 return new ParsedStatement . Prepared ( stmt ) ; 
 } 
 
 - private AbstractType < ? > getTypeAndRemove ( Map < ColumnIdentifier , AbstractType > columns , ColumnIdentifier t ) throws InvalidRequestException , ConfigurationException 
 + private AbstractType < ? > getTypeAndRemove ( Map < ColumnIdentifier , AbstractType > columns , ColumnIdentifier t ) throws InvalidRequestException 
 { 
 AbstractType type = columns . get ( t ) ; 
 if ( type = = null ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 index c8c34e0 . . 7cc3b16 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 @ @ - 55 , 7 + 55 , 7 @ @ public class DropIndexStatement extends SchemaAlteringStatement 
 MigrationManager . announceColumnFamilyUpdate ( updatedCfm , false ) ; 
 } 
 
 - private CFMetaData updateCFMetadata ( CFMetaData cfm ) throws InvalidRequestException 
 + private CFMetaData updateCFMetadata ( CFMetaData cfm ) 
 { 
 ColumnDefinition column = findIndexedColumn ( cfm ) ; 
 assert column ! = null ; 
 diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 index a5139e8 . . 9b0c334 100644 
 - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 @ @ - 225 , 7 + 225 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 writeHintsForMutation ( RowMutation . serializer . deserialize ( in , VERSION ) ) ; 
 } 
 
 - private static void writeHintsForMutation ( RowMutation mutation ) throws IOException 
 + private static void writeHintsForMutation ( RowMutation mutation ) 
 { 
 String table = mutation . getTable ( ) ; 
 Token tk = StorageService . getPartitioner ( ) . getToken ( mutation . key ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java b / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java 
 index 3016499 . . f5cf3d4 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilySerializer . java 
 @ @ - 170 , 7 + 170 , 7 @ @ public class ColumnFamilySerializer implements IVersionedSerializer < ColumnFamily 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - public void deserializeColumnsFromSSTable ( DataInput in , ColumnFamily cf , int size , ColumnSerializer . Flag flag , int expireBefore , Descriptor . Version version ) throws IOException 
 + public void deserializeColumnsFromSSTable ( DataInput in , ColumnFamily cf , int size , ColumnSerializer . Flag flag , int expireBefore , Descriptor . Version version ) 
 { 
 Iterator < OnDiskAtom > iter = cf . metadata ( ) . getOnDiskIterator ( in , size , flag , expireBefore , version ) ; 
 while ( iter . hasNext ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index 83d9c22 . . 482f2f9 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 327 , 7 + 327 , 6 @ @ public class DefsTable 
 } 
 
 private static void mergeColumnFamilies ( Map < DecoratedKey , ColumnFamily > old , Map < DecoratedKey , ColumnFamily > updated ) 
 - throws ConfigurationException , IOException 
 { 
 / / calculate the difference between old and new states ( note that entriesOnlyLeft ( ) will be always empty ) 
 MapDifference < DecoratedKey , ColumnFamily > diff = Maps . difference ( old , updated ) ; 
 @ @ - 454 , 7 + 453 , 7 @ @ public class DefsTable 
 } 
 } 
 
 - private static void dropKeyspace ( String ksName ) throws IOException 
 + private static void dropKeyspace ( String ksName ) 
 { 
 KSMetaData ksm = Schema . instance . getKSMetaData ( ksName ) ; 
 String snapshotName = Table . getTimestampedSnapshotName ( ksName ) ; 
 @ @ - 485 , 7 + 484 , 7 @ @ public class DefsTable 
 } 
 } 
 
 - private static void dropColumnFamily ( String ksName , String cfName ) throws IOException 
 + private static void dropColumnFamily ( String ksName , String cfName ) 
 { 
 KSMetaData ksm = Schema . instance . getKSMetaData ( ksName ) ; 
 assert ksm ! = null ; 
 diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index 0939abb . . 02cf090 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 210 , 7 + 210 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 } 
 
 @ VisibleForTesting 
 - protected Future < ? > compact ( ) throws ExecutionException , InterruptedException 
 + protected Future < ? > compact ( ) 
 { 
 hintStore . forceBlockingFlush ( ) ; 
 ArrayList < Descriptor > descriptors = new ArrayList < Descriptor > ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index f158e4c . . 32920e7 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 118 , 12 + 118 , 12 @ @ public class Table 
 return tableInstance ; 
 } 
 
 - public static Table clear ( String table ) throws IOException 
 + public static Table clear ( String table ) 
 { 
 return clear ( table , Schema . instance ) ; 
 } 
 
 - public static Table clear ( String table , Schema schema ) throws IOException 
 + public static Table clear ( String table , Schema schema ) 
 { 
 synchronized ( Table . class ) 
 { 
 @ @ - 281 , 7 + 281 , 7 @ @ public class Table 
 } 
 
 / / best invoked on the compaction mananger . 
 - public void dropCf ( UUID cfId ) throws IOException 
 + public void dropCf ( UUID cfId ) 
 { 
 assert columnFamilyStores . containsKey ( cfId ) ; 
 ColumnFamilyStore cfs = columnFamilyStores . remove ( cfId ) ; 
 @ @ - 292 , 7 + 292 , 7 @ @ public class Table 
 } 
 
 / / disassociate a cfs from this table instance . 
 - private void unloadCf ( ColumnFamilyStore cfs ) throws IOException 
 + private void unloadCf ( ColumnFamilyStore cfs ) 
 { 
 cfs . forceBlockingFlush ( ) ; 
 cfs . invalidate ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 index 55a62b8 . . 1e7285a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 @ @ - 109 , 16 + 109 , 9 @ @ public class PrecompactedRow extends AbstractCompactedRow 
 List < CloseableIterator < Column > > data = new ArrayList < CloseableIterator < Column > > ( rows . size ( ) ) ; 
 for ( SSTableIdentityIterator row : rows ) 
 { 
 - try 
 - { 
 - ColumnFamily cf = row . getColumnFamilyWithColumns ( ArrayBackedSortedColumns . factory ) ; 
 - returnCF . delete ( cf ) ; 
 - data . add ( FBUtilities . closeableIterator ( cf . iterator ( ) ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + ColumnFamily cf = row . getColumnFamilyWithColumns ( ArrayBackedSortedColumns . factory ) ; 
 + returnCF . delete ( cf ) ; 
 + data . add ( FBUtilities . closeableIterator ( cf . iterator ( ) ) ) ; 
 } 
 
 merge ( returnCF , data , controller . cfs . indexManager . updaterFor ( rows . get ( 0 ) . getKey ( ) ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index 2f194f3 . . 421385a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 98 , 7 + 98 , 7 @ @ public class Scrubber implements Closeable 
 this . scrubInfo = new ScrubInfo ( dataFile , sstable ) ; 
 } 
 
 - public void scrub ( ) throws IOException 
 + public void scrub ( ) 
 { 
 outputHandler . output ( " Scrubbing " + sstable ) ; 
 try 
 diff - - git a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java 
 index e0bd09b . . 977a600 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / BulkRecordWriter . java 
 @ @ - 79 , 20 + 79 , 20 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < Mutation > > 
 private CFType cfType ; 
 private ColType colType ; 
 
 - BulkRecordWriter ( TaskAttemptContext context ) throws IOException 
 + BulkRecordWriter ( TaskAttemptContext context ) 
 { 
 this ( context . getConfiguration ( ) ) ; 
 this . progress = new Progressable ( context ) ; 
 } 
 
 
 - BulkRecordWriter ( Configuration conf , Progressable progress ) throws IOException 
 + BulkRecordWriter ( Configuration conf , Progressable progress ) 
 { 
 this ( conf ) ; 
 this . progress = progress ; 
 } 
 
 - BulkRecordWriter ( Configuration conf ) throws IOException 
 + BulkRecordWriter ( Configuration conf ) 
 { 
 Config . setClientMode ( true ) ; 
 Config . setOutboundBindAny ( true ) ; 
 diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 index 6fa085f . . d4fb577 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 @ @ - 516 , 7 + 516 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface , Lo 
 } 
 } 
 
 - private void setConnectionInformation ( ) throws IOException 
 + private void setConnectionInformation ( ) 
 { 
 if ( System . getenv ( PIG _ RPC _ PORT ) ! = null ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 index 8170b29 . . 8e636c5 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 @ @ - 200 , 7 + 200 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat 
 } 
 } 
 
 - public ColumnFamily getColumnFamilyWithColumns ( ColumnFamily . Factory containerFactory ) throws IOException 
 + public ColumnFamily getColumnFamilyWithColumns ( ColumnFamily . Factory containerFactory ) 
 { 
 assert inputWithTracker . getBytesRead ( ) = = headerSize ( ) ; 
 ColumnFamily cf = columnFamily . cloneMeShallow ( containerFactory , false ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 index 263f39c . . 4ee6768 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableLoader . java 
 @ @ - 107 , 12 + 107 , 12 @ @ public class SSTableLoader 
 return sstables ; 
 } 
 
 - public LoaderFuture stream ( ) throws IOException 
 + public LoaderFuture stream ( ) 
 { 
 return stream ( Collections . < InetAddress > emptySet ( ) ) ; 
 } 
 
 - public LoaderFuture stream ( Set < InetAddress > toIgnore ) throws IOException 
 + public LoaderFuture stream ( Set < InetAddress > toIgnore ) 
 { 
 client . init ( keyspace ) ; 
 
 @ @ - 289 , 7 + 289 , 7 @ @ public class SSTableLoader 
 setPartitioner ( FBUtilities . newPartitioner ( partclass ) ) ; 
 } 
 
 - protected void setPartitioner ( IPartitioner partitioner ) throws ConfigurationException 
 + protected void setPartitioner ( IPartitioner partitioner ) 
 { 
 this . partitioner = partitioner ; 
 DatabaseDescriptor . setPartitioner ( partitioner ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index 809d8c9 . . 1977086 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 136 , 7 + 136 , 7 @ @ public class IncomingTcpConnection extends Thread 
 } 
 } 
 
 - private void handleLegacyVersion ( int version ) throws IOException 
 + private void handleLegacyVersion ( int version ) 
 { 
 throw new UnsupportedOperationException ( " Unable to read obsolete message version " + version + " ; the earliest version supported is 1 . 2 . 0 " ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 3c508ee . . 27bc69d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 374 , 7 + 374 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return initialized ; 
 } 
 
 - public synchronized void initClient ( ) throws IOException , ConfigurationException 
 + public synchronized void initClient ( ) throws ConfigurationException 
 { 
 / / We don ' t wait , because we ' re going to actually try to work on 
 initClient ( 0 ) ; 
 @ @ - 407 , 7 + 407 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 
 - public synchronized void initClient ( int ringDelay ) throws IOException , ConfigurationException 
 + public synchronized void initClient ( int ringDelay ) throws ConfigurationException 
 { 
 if ( initialized ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamIn . java b / src / java / org / apache / cassandra / streaming / StreamIn . java 
 index 740b430 . . 152c6c7 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamIn . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamIn . java 
 @ @ - 69 , 7 + 69 , 7 @ @ public class StreamIn 
 } 
 
 / * * Translates remote files to local files by creating a local sstable per remote sstable . * / 
 - public static PendingFile getContextMapping ( PendingFile remote ) throws IOException 
 + public static PendingFile getContextMapping ( PendingFile remote ) 
 { 
 / * Create a local sstable for each remote sstable * / 
 Descriptor remotedesc = remote . desc ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 index 6f1d496 . . c30cec0 100644 
 - - - a / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 + + + b / src / java / org / apache / cassandra / thrift / TCustomServerSocket . java 
 @ @ - 81 , 7 + 81 , 6 @ @ public class TCustomServerSocket extends TServerTransport 
 } 
 
 public TCustomServerSocket ( ServerSocket socket , boolean keepAlive , Integer sendBufferSize , Integer recvBufferSize ) 
 - throws TTransportException 
 { 
 this . serverSocket = socket ; 
 this . keepAlive = keepAlive ; 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 index c838cb0 . . 36211bb 100644 
 - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class BulkLoader 
 private static final String PASSWD _ OPTION = " password " ; 
 private static final String THROTTLE _ MBITS = " throttle " ; 
 
 - public static void main ( String args [ ] ) throws IOException 
 + public static void main ( String args [ ] ) 
 { 
 LoaderOptions options = LoaderOptions . parseArgs ( args ) ; 
 try 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 6e52f69 . . 63a3357 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 922 , 7 + 922 , 7 @ @ public class NodeCmd 
 outs . println ( probe . isThriftServerRunning ( ) ? " running " : " not running " ) ; 
 } 
 
 - public static void main ( String [ ] args ) throws IOException , InterruptedException , ConfigurationException , ParseException 
 + public static void main ( String [ ] args ) throws IOException , InterruptedException , ParseException 
 { 
 CommandLineParser parser = new PosixParser ( ) ; 
 ToolCommandLine cmd = null ; 
 @ @ - 1280 , 7 + 1280 , 7 @ @ public class NodeCmd 
 } 
 } 
 
 - private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , String columnFamily , NodeProbe probe ) throws InterruptedException , IOException 
 + private static void handleSnapshots ( NodeCommand nc , String tag , String [ ] cmdArgs , String columnFamily , NodeProbe probe ) throws IOException 
 { 
 String [ ] keyspaces = Arrays . copyOfRange ( cmdArgs , 0 , cmdArgs . length ) ; 
 System . out . print ( " Requested snapshot for : " ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 753a64c . . 0a1bc5b 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 88 , 7 + 88 , 7 @ @ public class NodeProbe 
 * @ param port TCP port of the remote JMX agent 
 * @ throws IOException on connection failures 
 * / 
 - public NodeProbe ( String host , int port , String username , String password ) throws IOException , InterruptedException 
 + public NodeProbe ( String host , int port , String username , String password ) throws IOException 
 { 
 assert username ! = null & & ! username . isEmpty ( ) & & password ! = null & & ! password . isEmpty ( ) 
 : " neither username nor password can be blank " ; 
 @ @ - 107 , 7 + 107 , 7 @ @ public class NodeProbe 
 * @ param port TCP port of the remote JMX agent 
 * @ throws IOException on connection failures 
 * / 
 - public NodeProbe ( String host , int port ) throws IOException , InterruptedException 
 + public NodeProbe ( String host , int port ) throws IOException 
 { 
 this . host = host ; 
 this . port = port ; 
 @ @ - 120 , 7 + 120 , 7 @ @ public class NodeProbe 
 * @ param host hostname or IP address of the JMX agent 
 * @ throws IOException on connection failures 
 * / 
 - public NodeProbe ( String host ) throws IOException , InterruptedException 
 + public NodeProbe ( String host ) throws IOException 
 { 
 this . host = host ; 
 this . port = defaultPort ; 
 @ @ - 265 , 12 + 265 , 12 @ @ public class NodeProbe 
 ssProxy . forceTableRepairRange ( beginToken , endToken , tableName , isSequential , isLocal , columnFamilies ) ; 
 } 
 
 - public void invalidateKeyCache ( ) throws IOException 
 + public void invalidateKeyCache ( ) 
 { 
 cacheService . invalidateKeyCache ( ) ; 
 } 
 
 - public void invalidateRowCache ( ) throws IOException 
 + public void invalidateRowCache ( ) 
 { 
 cacheService . invalidateRowCache ( ) ; 
 } 
 @ @ - 456 , 7 + 456 , 7 @ @ public class NodeProbe 
 ssProxy . decommission ( ) ; 
 } 
 
 - public void move ( String newToken ) throws IOException , InterruptedException 
 + public void move ( String newToken ) throws IOException 
 { 
 ssProxy . move ( newToken ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 index ddfe69c . . 4ad5a57 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class SSTableMetadataViewer 
 / * * 
 * @ param args a list of sstables whose metadata we ' re interested in 
 * / 
 - public static void main ( String [ ] args ) throws IOException , ConfigurationException 
 + public static void main ( String [ ] args ) throws IOException 
 { 
 PrintStream out = System . out ; 
 if ( args . length = = 0 ) 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 886eb71 . . 8bbfb25 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 217 , 7 + 217 , 7 @ @ public class CliTest extends SchemaLoader 
 } ; 
 
 @ Test 
 - public void testCli ( ) throws IOException , TException , ConfigurationException , ClassNotFoundException , TimedOutException , NotFoundException , SchemaDisagreementException , NoSuchFieldException , InvalidRequestException , UnavailableException , InstantiationException , IllegalAccessException 
 + public void testCli ( ) throws IOException , TException , TimedOutException , NotFoundException , SchemaDisagreementException , NoSuchFieldException , InvalidRequestException , UnavailableException , InstantiationException , IllegalAccessException 
 { 
 Schema . instance . clear ( ) ; / / Schema are now written on disk and will be reloaded 
 new EmbeddedCassandraService ( ) . start ( ) ;
