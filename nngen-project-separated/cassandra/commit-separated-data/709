BLEU SCORE: 0.029079340872079116

TEST MSG: JSON support for smallint , tinyint
GENERATED MSG: Update collection types when nested UDT is altered

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 67c79de . . 5ac79cf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 8 <nl> + * Fix INSERT JSON , fromJson ( ) support of smallint , tinyint types ( CASSANDRA - 12371 ) <nl> * Restore JVM metric export for metric reporters ( CASSANDRA - 12312 ) <nl> * Release sstables of failed stream sessions only when outgoing transfers are finished ( CASSANDRA - 11345 ) <nl> * Revert CASSANDRA - 11427 ( CASSANDRA - 12351 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ByteType . java b / src / java / org / apache / cassandra / db / marshal / ByteType . java <nl> index b63b92e . . e1cacc3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ByteType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ByteType . java <nl> @ @ - 62 , 22 + 62 , 11 @ @ public class ByteType extends AbstractType < Byte > <nl> <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> - try <nl> - { <nl> - if ( parsed instanceof String ) <nl> - return new Constants . Value ( fromString ( ( String ) parsed ) ) ; <nl> - <nl> - Number parsedNumber = ( Number ) parsed ; <nl> - if ( ! ( parsedNumber instanceof Byte ) ) <nl> - throw new MarshalException ( String . format ( " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> + if ( parsed instanceof String | | parsed instanceof Number ) <nl> + return new Constants . Value ( fromString ( String . valueOf ( parsed ) ) ) ; <nl> <nl> - return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . byteValue ( ) ) ) ; <nl> - } <nl> - catch ( ClassCastException exc ) <nl> - { <nl> - throw new MarshalException ( String . format ( <nl> - " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> - } <nl> + throw new MarshalException ( String . format ( <nl> + " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / ShortType . java b / src / java / org / apache / cassandra / db / marshal / ShortType . java <nl> index 43e8f5e . . 2f9ec57 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ShortType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ShortType . java <nl> @ @ - 66 , 22 + 66 , 11 @ @ public class ShortType extends AbstractType < Short > <nl> <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> - try <nl> - { <nl> - if ( parsed instanceof String ) <nl> - return new Constants . Value ( fromString ( ( String ) parsed ) ) ; <nl> - <nl> - Number parsedNumber = ( Number ) parsed ; <nl> - if ( ! ( parsedNumber instanceof Short ) ) <nl> - throw new MarshalException ( String . format ( " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> + if ( parsed instanceof String | | parsed instanceof Number ) <nl> + return new Constants . Value ( fromString ( String . valueOf ( parsed ) ) ) ; <nl> <nl> - return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . shortValue ( ) ) ) ; <nl> - } <nl> - catch ( ClassCastException exc ) <nl> - { <nl> - throw new MarshalException ( String . format ( <nl> - " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> - } <nl> + throw new MarshalException ( String . format ( <nl> + " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> index 4f49c3b . . 6892e79 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java <nl> @ @ - 65 , 10 + 65 , 12 @ @ public class JsonTest extends CQLTester <nl> " floatval float , " + <nl> " inetval inet , " + <nl> " intval int , " + <nl> + " smallintval smallint , " + <nl> " textval text , " + <nl> " timeval time , " + <nl> " timestampval timestamp , " + <nl> " timeuuidval timeuuid , " + <nl> + " tinyintval tinyint , " + <nl> " uuidval uuid , " + <nl> " varcharval varchar , " + <nl> " varintval varint , " + <nl> @ @ - 268 , 6 + 270 , 48 @ @ public class JsonTest extends CQLTester <nl> assertInvalidMessage ( " Expected an int value , but got a " , <nl> " INSERT INTO % s ( k , intval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " true " ) ; <nl> <nl> + / / = = = = = = = = = = = = = = = = smallint = = = = = = = = = = = = = = = = <nl> + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 32767 " ) ; <nl> + assertRows ( execute ( " SELECT k , smallintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( short ) 32767 ) ) ; <nl> + <nl> + / / strings are also accepted <nl> + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " 32767 \ " " ) ; <nl> + assertRows ( execute ( " SELECT k , smallintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( short ) 32767 ) ) ; <nl> + <nl> + / / smallint overflow ( Short . MAX _ VALUE + 1 ) <nl> + assertInvalidMessage ( " Unable to make short from " , <nl> + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 32768 " ) ; <nl> + <nl> + assertInvalidMessage ( " Unable to make short from " , <nl> + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 123 . 456 " ) ; <nl> + <nl> + assertInvalidMessage ( " Unable to make short from " , <nl> + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " xyzz \ " " ) ; <nl> + <nl> + assertInvalidMessage ( " Expected a short value , but got a Boolean " , <nl> + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " true " ) ; <nl> + <nl> + / / = = = = = = = = = = = = = = = = tinyint = = = = = = = = = = = = = = = = <nl> + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 127 " ) ; <nl> + assertRows ( execute ( " SELECT k , tinyintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( byte ) 127 ) ) ; <nl> + <nl> + / / strings are also accepted <nl> + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " 127 \ " " ) ; <nl> + assertRows ( execute ( " SELECT k , tinyintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( byte ) 127 ) ) ; <nl> + <nl> + / / tinyint overflow ( Byte . MAX _ VALUE + 1 ) <nl> + assertInvalidMessage ( " Unable to make byte from " , <nl> + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 128 " ) ; <nl> + <nl> + assertInvalidMessage ( " Unable to make byte from " , <nl> + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 123 . 456 " ) ; <nl> + <nl> + assertInvalidMessage ( " Unable to make byte from " , <nl> + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " xyzz \ " " ) ; <nl> + <nl> + assertInvalidMessage ( " Expected a byte value , but got a Boolean " , <nl> + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " true " ) ; <nl> + <nl> / / = = = = = = = = = = = = = = = = text ( varchar ) = = = = = = = = = = = = = = = = <nl> execute ( " INSERT INTO % s ( k , textval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " \ " " ) ; <nl> assertRows ( execute ( " SELECT k , textval FROM % s WHERE k = ? " , 0 ) , row ( 0 , " " ) ) ; <nl> @ @ - 503 , 10 + 547 , 12 @ @ public class JsonTest extends CQLTester <nl> " floatval float , " + <nl> " inetval inet , " + <nl> " intval int , " + <nl> + " smallintval smallint , " + <nl> " textval text , " + <nl> " timeval time , " + <nl> " timestampval timestamp , " + <nl> " timeuuidval timeuuid , " + <nl> + " tinyintval tinyint , " + <nl> " uuidval uuid , " + <nl> " varcharval varchar , " + <nl> " varintval varint , " + <nl> @ @ - 600 , 6 + 646 , 26 @ @ public class JsonTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k , intval ) VALUES ( ? , ? ) " , 0 , - 123123 ) ; <nl> assertRows ( execute ( " SELECT k , toJson ( intval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " - 123123 " ) ) ; <nl> <nl> + / / = = = = = = = = = = = = = = = = smallint = = = = = = = = = = = = = = = = <nl> + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , ? ) " , 0 , ( short ) 32767 ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( smallintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 32767 " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , ? ) " , 0 , ( short ) 0 ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( smallintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 0 " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , ? ) " , 0 , ( short ) - 32768 ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( smallintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " - 32768 " ) ) ; <nl> + <nl> + / / = = = = = = = = = = = = = = = = tinyint = = = = = = = = = = = = = = = = <nl> + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , ? ) " , 0 , ( byte ) 127 ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( tinyintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 127 " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , ? ) " , 0 , ( byte ) 0 ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( tinyintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 0 " ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , ? ) " , 0 , ( byte ) - 128 ) ; <nl> + assertRows ( execute ( " SELECT k , toJson ( tinyintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " - 128 " ) ) ; <nl> + <nl> / / = = = = = = = = = = = = = = = = text ( varchar ) = = = = = = = = = = = = = = = = <nl> execute ( " INSERT INTO % s ( k , textval ) VALUES ( ? , ? ) " , 0 , " " ) ; <nl> assertRows ( execute ( " SELECT k , toJson ( textval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " \ " " ) ) ; <nl> @ @ - 869 , 6 + 935 , 8 @ @ public class JsonTest extends CQLTester <nl> " intmap map < int , boolean > , " + <nl> " bigintmap map < bigint , boolean > , " + <nl> " varintmap map < varint , boolean > , " + <nl> + " smallintmap map < smallint , boolean > , " + <nl> + " tinyintmap map < tinyint , boolean > , " + <nl> " booleanmap map < boolean , boolean > , " + <nl> " floatmap map < float , boolean > , " + <nl> " doublemap map < double , boolean > , " + <nl> @ @ - 893 , 6 + 961 , 14 @ @ public class JsonTest extends CQLTester <nl> execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; <nl> assertRows ( execute ( " SELECT JSON k , varintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; <nl> <nl> + / / smallint keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " smallintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , smallintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " smallintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; <nl> + <nl> + / / tinyint keys <nl> + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " tinyintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; <nl> + assertRows ( execute ( " SELECT JSON k , tinyintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " tinyintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; <nl> + <nl> / / boolean keys <nl> execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " true \ " : true , \ " false \ " : false } } " ) ; <nl> assertRows ( execute ( " SELECT JSON k , booleanmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " false \ " : false , \ " true \ " : true } } " ) ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 67c79de . . 5ac79cf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 8 
 + * Fix INSERT JSON , fromJson ( ) support of smallint , tinyint types ( CASSANDRA - 12371 ) 
 * Restore JVM metric export for metric reporters ( CASSANDRA - 12312 ) 
 * Release sstables of failed stream sessions only when outgoing transfers are finished ( CASSANDRA - 11345 ) 
 * Revert CASSANDRA - 11427 ( CASSANDRA - 12351 ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ByteType . java b / src / java / org / apache / cassandra / db / marshal / ByteType . java 
 index b63b92e . . e1cacc3 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ByteType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ByteType . java 
 @ @ - 62 , 22 + 62 , 11 @ @ public class ByteType extends AbstractType < Byte > 
 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 - try 
 - { 
 - if ( parsed instanceof String ) 
 - return new Constants . Value ( fromString ( ( String ) parsed ) ) ; 
 - 
 - Number parsedNumber = ( Number ) parsed ; 
 - if ( ! ( parsedNumber instanceof Byte ) ) 
 - throw new MarshalException ( String . format ( " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 + if ( parsed instanceof String | | parsed instanceof Number ) 
 + return new Constants . Value ( fromString ( String . valueOf ( parsed ) ) ) ; 
 
 - return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . byteValue ( ) ) ) ; 
 - } 
 - catch ( ClassCastException exc ) 
 - { 
 - throw new MarshalException ( String . format ( 
 - " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 - } 
 + throw new MarshalException ( String . format ( 
 + " Expected a byte value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / ShortType . java b / src / java / org / apache / cassandra / db / marshal / ShortType . java 
 index 43e8f5e . . 2f9ec57 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ShortType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ShortType . java 
 @ @ - 66 , 22 + 66 , 11 @ @ public class ShortType extends AbstractType < Short > 
 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 - try 
 - { 
 - if ( parsed instanceof String ) 
 - return new Constants . Value ( fromString ( ( String ) parsed ) ) ; 
 - 
 - Number parsedNumber = ( Number ) parsed ; 
 - if ( ! ( parsedNumber instanceof Short ) ) 
 - throw new MarshalException ( String . format ( " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 + if ( parsed instanceof String | | parsed instanceof Number ) 
 + return new Constants . Value ( fromString ( String . valueOf ( parsed ) ) ) ; 
 
 - return new Constants . Value ( getSerializer ( ) . serialize ( parsedNumber . shortValue ( ) ) ) ; 
 - } 
 - catch ( ClassCastException exc ) 
 - { 
 - throw new MarshalException ( String . format ( 
 - " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 - } 
 + throw new MarshalException ( String . format ( 
 + " Expected a short value , but got a % s : % s " , parsed . getClass ( ) . getSimpleName ( ) , parsed ) ) ; 
 } 
 
 @ Override 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 index 4f49c3b . . 6892e79 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / JsonTest . java 
 @ @ - 65 , 10 + 65 , 12 @ @ public class JsonTest extends CQLTester 
 " floatval float , " + 
 " inetval inet , " + 
 " intval int , " + 
 + " smallintval smallint , " + 
 " textval text , " + 
 " timeval time , " + 
 " timestampval timestamp , " + 
 " timeuuidval timeuuid , " + 
 + " tinyintval tinyint , " + 
 " uuidval uuid , " + 
 " varcharval varchar , " + 
 " varintval varint , " + 
 @ @ - 268 , 6 + 270 , 48 @ @ public class JsonTest extends CQLTester 
 assertInvalidMessage ( " Expected an int value , but got a " , 
 " INSERT INTO % s ( k , intval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " true " ) ; 
 
 + / / = = = = = = = = = = = = = = = = smallint = = = = = = = = = = = = = = = = 
 + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 32767 " ) ; 
 + assertRows ( execute ( " SELECT k , smallintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( short ) 32767 ) ) ; 
 + 
 + / / strings are also accepted 
 + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " 32767 \ " " ) ; 
 + assertRows ( execute ( " SELECT k , smallintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( short ) 32767 ) ) ; 
 + 
 + / / smallint overflow ( Short . MAX _ VALUE + 1 ) 
 + assertInvalidMessage ( " Unable to make short from " , 
 + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 32768 " ) ; 
 + 
 + assertInvalidMessage ( " Unable to make short from " , 
 + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 123 . 456 " ) ; 
 + 
 + assertInvalidMessage ( " Unable to make short from " , 
 + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " xyzz \ " " ) ; 
 + 
 + assertInvalidMessage ( " Expected a short value , but got a Boolean " , 
 + " INSERT INTO % s ( k , smallintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " true " ) ; 
 + 
 + / / = = = = = = = = = = = = = = = = tinyint = = = = = = = = = = = = = = = = 
 + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 127 " ) ; 
 + assertRows ( execute ( " SELECT k , tinyintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( byte ) 127 ) ) ; 
 + 
 + / / strings are also accepted 
 + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " 127 \ " " ) ; 
 + assertRows ( execute ( " SELECT k , tinyintval FROM % s WHERE k = ? " , 0 ) , row ( 0 , ( byte ) 127 ) ) ; 
 + 
 + / / tinyint overflow ( Byte . MAX _ VALUE + 1 ) 
 + assertInvalidMessage ( " Unable to make byte from " , 
 + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 128 " ) ; 
 + 
 + assertInvalidMessage ( " Unable to make byte from " , 
 + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " 123 . 456 " ) ; 
 + 
 + assertInvalidMessage ( " Unable to make byte from " , 
 + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " xyzz \ " " ) ; 
 + 
 + assertInvalidMessage ( " Expected a byte value , but got a Boolean " , 
 + " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " true " ) ; 
 + 
 / / = = = = = = = = = = = = = = = = text ( varchar ) = = = = = = = = = = = = = = = = 
 execute ( " INSERT INTO % s ( k , textval ) VALUES ( ? , fromJson ( ? ) ) " , 0 , " \ " \ " " ) ; 
 assertRows ( execute ( " SELECT k , textval FROM % s WHERE k = ? " , 0 ) , row ( 0 , " " ) ) ; 
 @ @ - 503 , 10 + 547 , 12 @ @ public class JsonTest extends CQLTester 
 " floatval float , " + 
 " inetval inet , " + 
 " intval int , " + 
 + " smallintval smallint , " + 
 " textval text , " + 
 " timeval time , " + 
 " timestampval timestamp , " + 
 " timeuuidval timeuuid , " + 
 + " tinyintval tinyint , " + 
 " uuidval uuid , " + 
 " varcharval varchar , " + 
 " varintval varint , " + 
 @ @ - 600 , 6 + 646 , 26 @ @ public class JsonTest extends CQLTester 
 execute ( " INSERT INTO % s ( k , intval ) VALUES ( ? , ? ) " , 0 , - 123123 ) ; 
 assertRows ( execute ( " SELECT k , toJson ( intval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " - 123123 " ) ) ; 
 
 + / / = = = = = = = = = = = = = = = = smallint = = = = = = = = = = = = = = = = 
 + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , ? ) " , 0 , ( short ) 32767 ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( smallintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 32767 " ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , ? ) " , 0 , ( short ) 0 ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( smallintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 0 " ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , smallintval ) VALUES ( ? , ? ) " , 0 , ( short ) - 32768 ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( smallintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " - 32768 " ) ) ; 
 + 
 + / / = = = = = = = = = = = = = = = = tinyint = = = = = = = = = = = = = = = = 
 + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , ? ) " , 0 , ( byte ) 127 ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( tinyintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 127 " ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , ? ) " , 0 , ( byte ) 0 ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( tinyintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " 0 " ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , tinyintval ) VALUES ( ? , ? ) " , 0 , ( byte ) - 128 ) ; 
 + assertRows ( execute ( " SELECT k , toJson ( tinyintval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " - 128 " ) ) ; 
 + 
 / / = = = = = = = = = = = = = = = = text ( varchar ) = = = = = = = = = = = = = = = = 
 execute ( " INSERT INTO % s ( k , textval ) VALUES ( ? , ? ) " , 0 , " " ) ; 
 assertRows ( execute ( " SELECT k , toJson ( textval ) FROM % s WHERE k = ? " , 0 ) , row ( 0 , " \ " \ " " ) ) ; 
 @ @ - 869 , 6 + 935 , 8 @ @ public class JsonTest extends CQLTester 
 " intmap map < int , boolean > , " + 
 " bigintmap map < bigint , boolean > , " + 
 " varintmap map < varint , boolean > , " + 
 + " smallintmap map < smallint , boolean > , " + 
 + " tinyintmap map < tinyint , boolean > , " + 
 " booleanmap map < boolean , boolean > , " + 
 " floatmap map < float , boolean > , " + 
 " doublemap map < double , boolean > , " + 
 @ @ - 893 , 6 + 961 , 14 @ @ public class JsonTest extends CQLTester 
 execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; 
 assertRows ( execute ( " SELECT JSON k , varintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " varintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; 
 
 + / / smallint keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " smallintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , smallintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " smallintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; 
 + 
 + / / tinyint keys 
 + execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " tinyintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ; 
 + assertRows ( execute ( " SELECT JSON k , tinyintmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " tinyintmap \ " : { \ " 0 \ " : true , \ " 1 \ " : false } } " ) ) ; 
 + 
 / / boolean keys 
 execute ( " INSERT INTO % s JSON ? " , " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " true \ " : true , \ " false \ " : false } } " ) ; 
 assertRows ( execute ( " SELECT JSON k , booleanmap FROM % s " ) , row ( " { \ " k \ " : 0 , \ " booleanmap \ " : { \ " false \ " : false , \ " true \ " : true } } " ) ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
