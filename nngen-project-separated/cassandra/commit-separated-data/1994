BLEU SCORE: 0.02383853510228548

TEST MSG: Fix aggregation fn on empty selection , column names
GENERATED MSG: semi - ninja trivial IOE cleanup

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 23e3af5 . . 04b0322 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 3 . 0 <nl> + * Fix aggregate fn results on empty selection , result column name , <nl> + and cqlsh parsing ( CASSANDRA - 8229 ) <nl> * Mark sstables as repaired after full repair ( CASSANDRA - 7586 ) <nl> * Extend Descriptor to include a format value and refactor reader / writer apis ( CASSANDRA - 7443 ) <nl> * Integrate JMH for microbenchmarks ( CASSANDRA - 8151 ) <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 5a4907d . . 261161c 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 39 , 7 + 39 , 7 @ @ NONALTERBALE _ KEYSPACES = ( ' system ' ) <nl> class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> keywords = set ( ( <nl> ' select ' , ' from ' , ' where ' , ' and ' , ' key ' , ' insert ' , ' update ' , ' with ' , <nl> - ' limit ' , ' using ' , ' use ' , ' count ' , ' set ' , <nl> + ' limit ' , ' using ' , ' use ' , ' set ' , <nl> ' begin ' , ' apply ' , ' batch ' , ' truncate ' , ' delete ' , ' in ' , ' create ' , <nl> ' function ' , ' keyspace ' , ' schema ' , ' columnfamily ' , ' table ' , ' index ' , ' on ' , ' drop ' , <nl> ' primary ' , ' into ' , ' values ' , ' timestamp ' , ' ttl ' , ' alter ' , ' add ' , ' type ' , <nl> @ @ - 292 , 7 + 292 , 6 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; <nl> < unreservedKeyword > : : = nocomplete = <nl> ( < K _ KEY > <nl> | < K _ CLUSTERING > <nl> - # | < K _ COUNT > - - to get count ( * ) completion , treat count as reserved <nl> | < K _ TTL > <nl> | < K _ COMPACT > <nl> | < K _ STORAGE > <nl> @ @ - 620 , 7 + 619 , 6 @ @ syntax _ rules + = r ' ' ' <nl> ; <nl> < selectClause > : : = " DISTINCT " ? < selector > ( " AS " < cident > ) ? ( " , " < selector > ( " AS " < cident > ) ? ) * <nl> | " * " <nl> - | " COUNT " " ( " star = ( " * " | " 1 " ) " ) " ( " AS " < cident > ) ? <nl> ; <nl> < udtSubfieldSelection > : : = < identifier > " . " < identifier > <nl> ; <nl> @ @ - 628 , 6 + 626 , 7 @ @ syntax _ rules + = r ' ' ' <nl> | < udtSubfieldSelection > <nl> | " WRITETIME " " ( " [ colname ] = < cident > " ) " <nl> | " TTL " " ( " [ colname ] = < cident > " ) " <nl> + | " COUNT " " ( " star = ( " * " | " 1 " ) " ) " <nl> | < functionName > < selectionFunctionArguments > <nl> ; <nl> < selectionFunctionArguments > : : = " ( " ( < selector > ( " , " < selector > ) * ) ? " ) " <nl> @ @ - 679 , 10 + 678 , 6 @ @ def select _ relation _ lhs _ completer ( ctxt , cass ) : <nl> filterable . add ( cd . name ) <nl> return map ( maybe _ escape _ name , filterable ) <nl> <nl> - @ completer _ for ( ' selectClause ' , ' star ' ) <nl> - def select _ count _ star _ completer ( ctxt , cass ) : <nl> - return [ ' * ' ] <nl> - <nl> explain _ completion ( ' selector ' , ' colname ' ) <nl> <nl> syntax _ rules + = r ' ' ' <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ResultSet . java b / src / java / org / apache / cassandra / cql3 / ResultSet . java <nl> index 9762f01 . . c8c3869 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ResultSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ResultSet . java <nl> @ @ - 58 , 6 + 58 , 11 @ @ public class ResultSet <nl> return rows . size ( ) ; <nl> } <nl> <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return size ( ) = = 0 ; <nl> + } <nl> + <nl> public void addRow ( List < ByteBuffer > row ) <nl> { <nl> assert row . size ( ) = = metadata . valueCount ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java <nl> index b04f346 . . 4660e1d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java <nl> @ @ - 21 , 13 + 21 , 11 @ @ import java . nio . ByteBuffer ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> - import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> + import org . apache . commons . lang3 . text . StrBuilder ; <nl> + <nl> import org . apache . cassandra . cql3 . functions . Function ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> - import org . apache . commons . lang3 . text . StrBuilder ; <nl> <nl> abstract class AbstractFunctionSelector < T extends Function > extends Selector <nl> { <nl> @ @ - 56 , 12 + 54 , 17 @ @ abstract class AbstractFunctionSelector < T extends Function > extends Selector <nl> <nl> return new Factory ( ) <nl> { <nl> - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) <nl> + protected String getColumnName ( ) <nl> + { <nl> + return new StrBuilder ( fun . name ( ) . toString ( ) ) . append ( ' ( ' ) <nl> + . appendWithSeparators ( factories . getColumnNames ( ) , " , " ) <nl> + . append ( ' ) ' ) <nl> + . toString ( ) ; <nl> + } <nl> + <nl> + protected AbstractType < ? > getReturnType ( ) <nl> { <nl> - return new ColumnSpecification ( cfm . ksName , <nl> - cfm . cfName , <nl> - new ColumnIdentifier ( fun . toString ( ) , true ) , <nl> - fun . returnType ( ) ) ; <nl> + return fun . returnType ( ) ; <nl> } <nl> <nl> public Selector newInstance ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java b / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java <nl> index 0bba56c . . 7e14486 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cql3 . selection ; <nl> <nl> import java . nio . ByteBuffer ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> - import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> @ @ - 38 , 14 + 35 , 16 @ @ final class FieldSelector extends Selector <nl> { <nl> return new Factory ( ) <nl> { <nl> - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) <nl> + protected String getColumnName ( ) <nl> { <nl> - ColumnIdentifier identifier = <nl> - new ColumnIdentifier ( String . format ( " % s . % s " , <nl> - factory . getColumnSpecification ( cfm ) . name , <nl> - UTF8Type . instance . getString ( type . fieldName ( field ) ) ) , true ) ; <nl> + return String . format ( " % s . % s " , <nl> + factory . getColumnName ( ) , <nl> + UTF8Type . instance . getString ( type . fieldName ( field ) ) ) ; <nl> + } <nl> <nl> - return new ColumnSpecification ( cfm . ksName , cfm . cfName , identifier , type . fieldType ( field ) ) ; <nl> + protected AbstractType < ? > getReturnType ( ) <nl> + { <nl> + return type . fieldType ( field ) ; <nl> } <nl> <nl> public Selector newInstance ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selection . java b / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> index 17e2e92 . . 7c3d34c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / Selection . java <nl> @ @ - 237 , 6 + 237 , 11 @ @ public abstract class Selection <nl> selectors . reset ( ) ; <nl> current = null ; <nl> } <nl> + <nl> + if ( resultSet . isEmpty ( ) & & selectors . isAggregate ( ) ) <nl> + { <nl> + resultSet . addRow ( selectors . getOutputRow ( ) ) ; <nl> + } <nl> return resultSet ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selector . java b / src / java / org / apache / cassandra / cql3 / selection / Selector . java <nl> index 310e175 . . 889da70 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / Selector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / Selector . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . cql3 . AssignmentTestable ; <nl> + import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 46 , 7 + 47 , 13 @ @ public abstract class Selector implements AssignmentTestable <nl> * @ param cfm the column family meta data <nl> * @ return a column specification <nl> * / <nl> - public abstract ColumnSpecification getColumnSpecification ( CFMetaData cfm ) ; <nl> + public final ColumnSpecification getColumnSpecification ( CFMetaData cfm ) <nl> + { <nl> + return new ColumnSpecification ( cfm . ksName , <nl> + cfm . cfName , <nl> + new ColumnIdentifier ( getColumnName ( ) , true ) , <nl> + getReturnType ( ) ) ; <nl> + } <nl> <nl> / * * <nl> * Creates a new < code > Selector < / code > instance . <nl> @ @ - 87 , 6 + 94 , 22 @ @ public abstract class Selector implements AssignmentTestable <nl> { <nl> return false ; <nl> } <nl> + <nl> + / * * <nl> + * Returns the name of the column corresponding to the output value of the selector instances created by <nl> + * this factory . <nl> + * <nl> + * @ return a column name <nl> + * / <nl> + protected abstract String getColumnName ( ) ; <nl> + <nl> + / * * <nl> + * Returns the type of the values returned by the selector instances created by this factory . <nl> + * <nl> + * @ return the selector output type <nl> + * / <nl> + protected abstract AbstractType < ? > getReturnType ( ) ; <nl> + <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java b / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java <nl> index e033556 . . 6922994 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ import java . util . ArrayList ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . Lists ; <nl> + <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . selection . Selector . Factory ; <nl> @ @ - 148 , 4 + 151 , 21 @ @ final class SelectorFactories implements Iterable < Selector . Factory > <nl> { <nl> return factories . iterator ( ) ; <nl> } <nl> + <nl> + / * * <nl> + * Returns the names of the columns corresponding to the output values of the selector instances created by <nl> + * these factories . <nl> + * <nl> + * @ return a list of column names <nl> + * / <nl> + public List < String > getColumnNames ( ) <nl> + { <nl> + return Lists . transform ( factories , new Function < Selector . Factory , String > ( ) <nl> + { <nl> + public String apply ( Selector . Factory factory ) <nl> + { <nl> + return factory . getColumnName ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java b / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java <nl> index 37459d2 . . cdd91b2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cql3 . selection ; <nl> <nl> import java . nio . ByteBuffer ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> - import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> @ @ - 37 , 12 + 34 , 14 @ @ public final class SimpleSelector extends Selector <nl> { <nl> return new Factory ( ) <nl> { <nl> - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) <nl> + protected String getColumnName ( ) <nl> { <nl> - return new ColumnSpecification ( cfm . ksName , <nl> - cfm . cfName , <nl> - new ColumnIdentifier ( columnName , true ) , <nl> - type ) ; <nl> + return columnName ; <nl> + } <nl> + <nl> + protected AbstractType < ? > getReturnType ( ) <nl> + { <nl> + return type ; <nl> } <nl> <nl> public Selector newInstance ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java b / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java <nl> index a57a3ca . . 2494334 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cql3 . selection ; <nl> <nl> import java . nio . ByteBuffer ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> - import org . apache . cassandra . cql3 . ColumnSpecification ; <nl> import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . Int32Type ; <nl> @ @ - 39 , 13 + 36 , 14 @ @ final class WritetimeOrTTLSelector extends Selector <nl> { <nl> return new Factory ( ) <nl> { <nl> - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) <nl> + protected String getColumnName ( ) <nl> { <nl> - String text = String . format ( " % s ( % s ) " , isWritetime ? " writetime " : " ttl " , columnName ) ; <nl> - return new ColumnSpecification ( cfm . ksName , <nl> - cfm . cfName , <nl> - new ColumnIdentifier ( text , true ) , <nl> - isWritetime ? LongType . instance : Int32Type . instance ) ; <nl> + return String . format ( " % s ( % s ) " , isWritetime ? " writetime " : " ttl " , columnName ) ; <nl> + } <nl> + <nl> + protected AbstractType < ? > getReturnType ( ) <nl> + { <nl> + return isWritetime ? LongType . instance : Int32Type . instance ; <nl> } <nl> <nl> public Selector newInstance ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> index 87b7ca7 . . 99db62a 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> @ @ - 32 , 6 + 32 , 15 @ @ public class AggregationTest extends CQLTester <nl> public void testFunctions ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c double , d decimal , primary key ( a , b ) ) " ) ; <nl> + <nl> + / / Test with empty table <nl> + assertColumnNames ( execute ( " SELECT COUNT ( * ) FROM % s " ) , " count " ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 0L ) ) ; <nl> + assertColumnNames ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , <nl> + " max ( b ) " , " min ( b ) " , " sum ( b ) " , " avg ( b ) " , " max ( c ) " , " sum ( c ) " , " avg ( c ) " , " sum ( d ) " , " avg ( d ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , <nl> + row ( null , null , 0 , 0 , null , 0 . 0 , 0 . 0 , new BigDecimal ( " 0 " ) , new BigDecimal ( " 0 " ) ) ) ; <nl> + <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 1 , 11 . 5 , 11 . 5 ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 2 , 9 . 5 , 1 . 5 ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 3 , 9 . 0 , 2 . 0 ) " ) ; <nl> @ @ - 46 , 6 + 55 , 26 @ @ public class AggregationTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void testFunctionsWithCompactStorage ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int , b int , c double , primary key ( a , b ) ) WITH COMPACT STORAGE " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 11 . 5 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 9 . 5 ) " ) ; <nl> + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 9 . 0 ) " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) FROM % s " ) , <nl> + row ( 3 , 1 , 6 , 2 , 11 . 5 , 30 . 0 , 10 . 0 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 3L ) ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 3L ) ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s WHERE a = 1 AND b > 1 " ) , row ( 2L ) ) ; <nl> + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s WHERE a = 1 AND b > 1 " ) , row ( 2L ) ) ; <nl> + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) FROM % s WHERE a = 1 AND b > 1 " ) , <nl> + row ( 3 , 2 , 5 , 2 , 9 . 5 , 18 . 5 , 9 . 25 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testInvalidCalls ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , primary key ( a , b ) ) " ) ; <nl> @ @ - 65 , 6 + 94 , 17 @ @ public class AggregationTest extends CQLTester <nl> { <nl> createTable ( " CREATE TABLE % s ( a int primary key , b timeuuid , c double , d double ) " ) ; <nl> <nl> + execute ( " CREATE OR REPLACE FUNCTION copySign ( magnitude double , sign double ) RETURNS double LANGUAGE JAVA \ n " + <nl> + " AS ' return Double . valueOf ( Math . copySign ( magnitude . doubleValue ( ) , sign . doubleValue ( ) ) ) ; ' ; " ) ; <nl> + <nl> + assertColumnNames ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , " max ( a ) " , " max ( unixtimestampof ( b ) ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( null , null ) ) ; <nl> + assertColumnNames ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , " max ( a ) " , " unixtimestampof ( max ( b ) ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( null , null ) ) ; <nl> + <nl> + assertColumnNames ( execute ( " SELECT max ( copySign ( c , d ) ) FROM % s " ) , " max ( copysign ( c , d ) ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( copySign ( c , d ) ) FROM % s " ) , row ( ( Object ) null ) ) ; <nl> + <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , maxTimeuuid ( ' 2011 - 02 - 03 04 : 05 : 00 + 0000 ' ) , - 1 . 2 , 2 . 1 ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 2 , maxTimeuuid ( ' 2011 - 02 - 03 04 : 06 : 00 + 0000 ' ) , 1 . 3 , - 3 . 4 ) " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 3 , maxTimeuuid ( ' 2011 - 02 - 03 04 : 10 : 00 + 0000 ' ) , 1 . 4 , 1 . 2 ) " ) ; <nl> @ @ - 76 , 8 + 116 , 6 @ @ public class AggregationTest extends CQLTester <nl> <nl> assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; <nl> assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; <nl> - execute ( " CREATE OR REPLACE FUNCTION copySign ( magnitude double , sign double ) RETURNS double LANGUAGE JAVA \ n " + <nl> - " AS ' return Double . valueOf ( Math . copySign ( magnitude . doubleValue ( ) , sign . doubleValue ( ) ) ) ; ' ; " ) ; <nl> <nl> assertRows ( execute ( " SELECT copySign ( max ( c ) , min ( c ) ) FROM % s " ) , row ( - 1 . 4 ) ) ; <nl> assertRows ( execute ( " SELECT copySign ( c , d ) FROM % s " ) , row ( 1 . 2 ) , row ( - 1 . 3 ) , row ( 1 . 4 ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 4ada0c5 . . ca02237 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 349 , 6 + 349 , 24 @ @ public abstract class CQLTester <nl> Assert . assertTrue ( String . format ( " Got % s rows than expected . Expected % d but got % d " , rows . length > i ? " less " : " more " , rows . length , i ) , i = = rows . length ) ; <nl> } <nl> <nl> + protected void assertColumnNames ( UntypedResultSet result , String . . . expectedColumnNames ) <nl> + { <nl> + if ( result = = null ) <nl> + { <nl> + Assert . fail ( " No rows returned by query . " ) ; <nl> + return ; <nl> + } <nl> + <nl> + List < ColumnSpecification > metadata = result . metadata ( ) ; <nl> + Assert . assertEquals ( " Got less columns than expected . " , expectedColumnNames . length , metadata . size ( ) ) ; <nl> + <nl> + for ( int i = 0 , m = metadata . size ( ) ; i < m ; i + + ) <nl> + { <nl> + ColumnSpecification columnSpec = metadata . get ( i ) ; <nl> + Assert . assertEquals ( expectedColumnNames [ i ] , columnSpec . name . toString ( ) ) ; <nl> + } <nl> + } <nl> + <nl> protected void assertAllRows ( Object [ ] . . . rows ) throws Throwable <nl> { <nl> assertRows ( execute ( " SELECT * FROM % s " ) , rows ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> index 9b34a6a . . 7289ab0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java <nl> @ @ - 96 , 7 + 96 , 7 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA <nl> else <nl> { <nl> setToRowStart ( sstable , indexEntry , input ) ; <nl> - IndexHelper . skipBloomFilter ( file , version . filterType ) ; <nl> + IndexHelper . skipSSTableBloomFilter ( file , version ) ; <nl> this . indexes = IndexHelper . deserializeIndex ( file ) ; <nl> this . emptyColumnFamily = ColumnFamily . create ( sstable . metadata ) ; <nl> emptyColumnFamily . delete ( DeletionInfo . serializer ( ) . deserializeFromSSTable ( file , version ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> index 132f9cb . . b30d360 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> @ @ - 75 , 7 + 75 , 7 @ @ class SimpleSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskAt <nl> Descriptor . Version version = sstable . descriptor . version ; <nl> if ( ! version . hasPromotedIndexes ) <nl> { <nl> - IndexHelper . skipBloomFilter ( file , version . filterType ) ; <nl> + IndexHelper . skipSSTableBloomFilter ( file , version ) ; <nl> IndexHelper . skipIndex ( file ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index f0709d8 . . 0338044 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 85 , 6 + 85 , 7 @ @ public class Descriptor <nl> public final boolean hasPromotedIndexes ; <nl> public final FilterFactory . Type filterType ; <nl> public final boolean hasAncestors ; <nl> + public final boolean hasBloomFilterSizeInHeader ; <nl> <nl> public Version ( String version ) <nl> { <nl> @ @ - 108 , 6 + 109 , 7 @ @ public class Descriptor <nl> filterType = FilterFactory . Type . MURMUR2 ; <nl> else <nl> filterType = FilterFactory . Type . MURMUR3 ; <nl> + hasBloomFilterSizeInHeader = version . compareTo ( " ia " ) < 0 ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java <nl> index 14b2cda . . b81f7b8 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java <nl> @ @ - 36 , 6 + 36 , 18 @ @ import org . apache . cassandra . utils . * ; <nl> * / <nl> public class IndexHelper <nl> { <nl> + public static void skipSSTableBloomFilter ( DataInput in , Descriptor . Version version ) throws IOException <nl> + { <nl> + if ( version . hasBloomFilterSizeInHeader ) <nl> + { <nl> + int size = in . readInt ( ) ; <nl> + FileUtils . skipBytesFully ( in , size ) ; <nl> + } <nl> + else <nl> + { <nl> + skipBloomFilter ( in , version . filterType ) ; <nl> + } <nl> + } <nl> <nl> / * * <nl> * Skip the bloom filter <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> index 157ccf8 . . 7583cd6 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat <nl> { <nl> try <nl> { <nl> - IndexHelper . defreezeBloomFilter ( file , dataSize , dataVersion . filterType ) ; <nl> + IndexHelper . skipSSTableBloomFilter ( file , sstable . descriptor . version ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 153 , 7 + 153 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat <nl> <nl> if ( sstable ! = null & & ! dataVersion . hasPromotedIndexes ) <nl> { <nl> - IndexHelper . skipBloomFilter ( inputWithTracker , dataVersion . filterType ) ; <nl> + IndexHelper . skipSSTableBloomFilter ( inputWithTracker , dataVersion ) ; <nl> IndexHelper . skipIndex ( inputWithTracker ) ; <nl> } <nl> columnFamily = ColumnFamily . create ( metadata ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 23e3af5 . . 04b0322 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 3 . 0 
 + * Fix aggregate fn results on empty selection , result column name , 
 + and cqlsh parsing ( CASSANDRA - 8229 ) 
 * Mark sstables as repaired after full repair ( CASSANDRA - 7586 ) 
 * Extend Descriptor to include a format value and refactor reader / writer apis ( CASSANDRA - 7443 ) 
 * Integrate JMH for microbenchmarks ( CASSANDRA - 8151 ) 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 5a4907d . . 261161c 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 39 , 7 + 39 , 7 @ @ NONALTERBALE _ KEYSPACES = ( ' system ' ) 
 class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 keywords = set ( ( 
 ' select ' , ' from ' , ' where ' , ' and ' , ' key ' , ' insert ' , ' update ' , ' with ' , 
 - ' limit ' , ' using ' , ' use ' , ' count ' , ' set ' , 
 + ' limit ' , ' using ' , ' use ' , ' set ' , 
 ' begin ' , ' apply ' , ' batch ' , ' truncate ' , ' delete ' , ' in ' , ' create ' , 
 ' function ' , ' keyspace ' , ' schema ' , ' columnfamily ' , ' table ' , ' index ' , ' on ' , ' drop ' , 
 ' primary ' , ' into ' , ' values ' , ' timestamp ' , ' ttl ' , ' alter ' , ' add ' , ' type ' , 
 @ @ - 292 , 7 + 292 , 6 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; 
 < unreservedKeyword > : : = nocomplete = 
 ( < K _ KEY > 
 | < K _ CLUSTERING > 
 - # | < K _ COUNT > - - to get count ( * ) completion , treat count as reserved 
 | < K _ TTL > 
 | < K _ COMPACT > 
 | < K _ STORAGE > 
 @ @ - 620 , 7 + 619 , 6 @ @ syntax _ rules + = r ' ' ' 
 ; 
 < selectClause > : : = " DISTINCT " ? < selector > ( " AS " < cident > ) ? ( " , " < selector > ( " AS " < cident > ) ? ) * 
 | " * " 
 - | " COUNT " " ( " star = ( " * " | " 1 " ) " ) " ( " AS " < cident > ) ? 
 ; 
 < udtSubfieldSelection > : : = < identifier > " . " < identifier > 
 ; 
 @ @ - 628 , 6 + 626 , 7 @ @ syntax _ rules + = r ' ' ' 
 | < udtSubfieldSelection > 
 | " WRITETIME " " ( " [ colname ] = < cident > " ) " 
 | " TTL " " ( " [ colname ] = < cident > " ) " 
 + | " COUNT " " ( " star = ( " * " | " 1 " ) " ) " 
 | < functionName > < selectionFunctionArguments > 
 ; 
 < selectionFunctionArguments > : : = " ( " ( < selector > ( " , " < selector > ) * ) ? " ) " 
 @ @ - 679 , 10 + 678 , 6 @ @ def select _ relation _ lhs _ completer ( ctxt , cass ) : 
 filterable . add ( cd . name ) 
 return map ( maybe _ escape _ name , filterable ) 
 
 - @ completer _ for ( ' selectClause ' , ' star ' ) 
 - def select _ count _ star _ completer ( ctxt , cass ) : 
 - return [ ' * ' ] 
 - 
 explain _ completion ( ' selector ' , ' colname ' ) 
 
 syntax _ rules + = r ' ' ' 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ResultSet . java b / src / java / org / apache / cassandra / cql3 / ResultSet . java 
 index 9762f01 . . c8c3869 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ResultSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ResultSet . java 
 @ @ - 58 , 6 + 58 , 11 @ @ public class ResultSet 
 return rows . size ( ) ; 
 } 
 
 + public boolean isEmpty ( ) 
 + { 
 + return size ( ) = = 0 ; 
 + } 
 + 
 public void addRow ( List < ByteBuffer > row ) 
 { 
 assert row . size ( ) = = metadata . valueCount ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java 
 index b04f346 . . 4660e1d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / AbstractFunctionSelector . java 
 @ @ - 21 , 13 + 21 , 11 @ @ import java . nio . ByteBuffer ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 - import org . apache . cassandra . cql3 . ColumnSpecification ; 
 + import org . apache . commons . lang3 . text . StrBuilder ; 
 + 
 import org . apache . cassandra . cql3 . functions . Function ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 - import org . apache . commons . lang3 . text . StrBuilder ; 
 
 abstract class AbstractFunctionSelector < T extends Function > extends Selector 
 { 
 @ @ - 56 , 12 + 54 , 17 @ @ abstract class AbstractFunctionSelector < T extends Function > extends Selector 
 
 return new Factory ( ) 
 { 
 - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) 
 + protected String getColumnName ( ) 
 + { 
 + return new StrBuilder ( fun . name ( ) . toString ( ) ) . append ( ' ( ' ) 
 + . appendWithSeparators ( factories . getColumnNames ( ) , " , " ) 
 + . append ( ' ) ' ) 
 + . toString ( ) ; 
 + } 
 + 
 + protected AbstractType < ? > getReturnType ( ) 
 { 
 - return new ColumnSpecification ( cfm . ksName , 
 - cfm . cfName , 
 - new ColumnIdentifier ( fun . toString ( ) , true ) , 
 - fun . returnType ( ) ) ; 
 + return fun . returnType ( ) ; 
 } 
 
 public Selector newInstance ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java b / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java 
 index 0bba56c . . 7e14486 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / FieldSelector . java 
 @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cql3 . selection ; 
 
 import java . nio . ByteBuffer ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 - import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 @ @ - 38 , 14 + 35 , 16 @ @ final class FieldSelector extends Selector 
 { 
 return new Factory ( ) 
 { 
 - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) 
 + protected String getColumnName ( ) 
 { 
 - ColumnIdentifier identifier = 
 - new ColumnIdentifier ( String . format ( " % s . % s " , 
 - factory . getColumnSpecification ( cfm ) . name , 
 - UTF8Type . instance . getString ( type . fieldName ( field ) ) ) , true ) ; 
 + return String . format ( " % s . % s " , 
 + factory . getColumnName ( ) , 
 + UTF8Type . instance . getString ( type . fieldName ( field ) ) ) ; 
 + } 
 
 - return new ColumnSpecification ( cfm . ksName , cfm . cfName , identifier , type . fieldType ( field ) ) ; 
 + protected AbstractType < ? > getReturnType ( ) 
 + { 
 + return type . fieldType ( field ) ; 
 } 
 
 public Selector newInstance ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selection . java b / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 index 17e2e92 . . 7c3d34c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / Selection . java 
 @ @ - 237 , 6 + 237 , 11 @ @ public abstract class Selection 
 selectors . reset ( ) ; 
 current = null ; 
 } 
 + 
 + if ( resultSet . isEmpty ( ) & & selectors . isAggregate ( ) ) 
 + { 
 + resultSet . addRow ( selectors . getOutputRow ( ) ) ; 
 + } 
 return resultSet ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / Selector . java b / src / java / org / apache / cassandra / cql3 / selection / Selector . java 
 index 310e175 . . 889da70 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / Selector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / Selector . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . cql3 . AssignmentTestable ; 
 + import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 46 , 7 + 47 , 13 @ @ public abstract class Selector implements AssignmentTestable 
 * @ param cfm the column family meta data 
 * @ return a column specification 
 * / 
 - public abstract ColumnSpecification getColumnSpecification ( CFMetaData cfm ) ; 
 + public final ColumnSpecification getColumnSpecification ( CFMetaData cfm ) 
 + { 
 + return new ColumnSpecification ( cfm . ksName , 
 + cfm . cfName , 
 + new ColumnIdentifier ( getColumnName ( ) , true ) , 
 + getReturnType ( ) ) ; 
 + } 
 
 / * * 
 * Creates a new < code > Selector < / code > instance . 
 @ @ - 87 , 6 + 94 , 22 @ @ public abstract class Selector implements AssignmentTestable 
 { 
 return false ; 
 } 
 + 
 + / * * 
 + * Returns the name of the column corresponding to the output value of the selector instances created by 
 + * this factory . 
 + * 
 + * @ return a column name 
 + * / 
 + protected abstract String getColumnName ( ) ; 
 + 
 + / * * 
 + * Returns the type of the values returned by the selector instances created by this factory . 
 + * 
 + * @ return the selector output type 
 + * / 
 + protected abstract AbstractType < ? > getReturnType ( ) ; 
 + 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java b / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java 
 index e033556 . . 6922994 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / SelectorFactories . java 
 @ @ - 21 , 6 + 21 , 9 @ @ import java . util . ArrayList ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . Lists ; 
 + 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . selection . Selector . Factory ; 
 @ @ - 148 , 4 + 151 , 21 @ @ final class SelectorFactories implements Iterable < Selector . Factory > 
 { 
 return factories . iterator ( ) ; 
 } 
 + 
 + / * * 
 + * Returns the names of the columns corresponding to the output values of the selector instances created by 
 + * these factories . 
 + * 
 + * @ return a list of column names 
 + * / 
 + public List < String > getColumnNames ( ) 
 + { 
 + return Lists . transform ( factories , new Function < Selector . Factory , String > ( ) 
 + { 
 + public String apply ( Selector . Factory factory ) 
 + { 
 + return factory . getColumnName ( ) ; 
 + } 
 + } ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java b / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java 
 index 37459d2 . . cdd91b2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / SimpleSelector . java 
 @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cql3 . selection ; 
 
 import java . nio . ByteBuffer ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 - import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 @ @ - 37 , 12 + 34 , 14 @ @ public final class SimpleSelector extends Selector 
 { 
 return new Factory ( ) 
 { 
 - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) 
 + protected String getColumnName ( ) 
 { 
 - return new ColumnSpecification ( cfm . ksName , 
 - cfm . cfName , 
 - new ColumnIdentifier ( columnName , true ) , 
 - type ) ; 
 + return columnName ; 
 + } 
 + 
 + protected AbstractType < ? > getReturnType ( ) 
 + { 
 + return type ; 
 } 
 
 public Selector newInstance ( ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java b / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java 
 index a57a3ca . . 2494334 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / selection / WritetimeOrTTLSelector . java 
 @ @ - 19 , 9 + 19 , 6 @ @ package org . apache . cassandra . cql3 . selection ; 
 
 import java . nio . ByteBuffer ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 - import org . apache . cassandra . cql3 . ColumnSpecification ; 
 import org . apache . cassandra . cql3 . selection . Selection . ResultSetBuilder ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . Int32Type ; 
 @ @ - 39 , 13 + 36 , 14 @ @ final class WritetimeOrTTLSelector extends Selector 
 { 
 return new Factory ( ) 
 { 
 - public ColumnSpecification getColumnSpecification ( CFMetaData cfm ) 
 + protected String getColumnName ( ) 
 { 
 - String text = String . format ( " % s ( % s ) " , isWritetime ? " writetime " : " ttl " , columnName ) ; 
 - return new ColumnSpecification ( cfm . ksName , 
 - cfm . cfName , 
 - new ColumnIdentifier ( text , true ) , 
 - isWritetime ? LongType . instance : Int32Type . instance ) ; 
 + return String . format ( " % s ( % s ) " , isWritetime ? " writetime " : " ttl " , columnName ) ; 
 + } 
 + 
 + protected AbstractType < ? > getReturnType ( ) 
 + { 
 + return isWritetime ? LongType . instance : Int32Type . instance ; 
 } 
 
 public Selector newInstance ( ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 index 87b7ca7 . . 99db62a 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 @ @ - 32 , 6 + 32 , 15 @ @ public class AggregationTest extends CQLTester 
 public void testFunctions ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c double , d decimal , primary key ( a , b ) ) " ) ; 
 + 
 + / / Test with empty table 
 + assertColumnNames ( execute ( " SELECT COUNT ( * ) FROM % s " ) , " count " ) ; 
 + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 0L ) ) ; 
 + assertColumnNames ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , 
 + " max ( b ) " , " min ( b ) " , " sum ( b ) " , " avg ( b ) " , " max ( c ) " , " sum ( c ) " , " avg ( c ) " , " sum ( d ) " , " avg ( d ) " ) ; 
 + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) , sum ( d ) , avg ( d ) FROM % s " ) , 
 + row ( null , null , 0 , 0 , null , 0 . 0 , 0 . 0 , new BigDecimal ( " 0 " ) , new BigDecimal ( " 0 " ) ) ) ; 
 + 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 1 , 11 . 5 , 11 . 5 ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 2 , 9 . 5 , 1 . 5 ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , 3 , 9 . 0 , 2 . 0 ) " ) ; 
 @ @ - 46 , 6 + 55 , 26 @ @ public class AggregationTest extends CQLTester 
 } 
 
 @ Test 
 + public void testFunctionsWithCompactStorage ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int , b int , c double , primary key ( a , b ) ) WITH COMPACT STORAGE " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 1 , 11 . 5 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 2 , 9 . 5 ) " ) ; 
 + execute ( " INSERT INTO % s ( a , b , c ) VALUES ( 1 , 3 , 9 . 0 ) " ) ; 
 + 
 + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) FROM % s " ) , 
 + row ( 3 , 1 , 6 , 2 , 11 . 5 , 30 . 0 , 10 . 0 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s " ) , row ( 3L ) ) ; 
 + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s " ) , row ( 3L ) ) ; 
 + assertRows ( execute ( " SELECT COUNT ( * ) FROM % s WHERE a = 1 AND b > 1 " ) , row ( 2L ) ) ; 
 + assertRows ( execute ( " SELECT COUNT ( 1 ) FROM % s WHERE a = 1 AND b > 1 " ) , row ( 2L ) ) ; 
 + assertRows ( execute ( " SELECT max ( b ) , min ( b ) , sum ( b ) , avg ( b ) , max ( c ) , sum ( c ) , avg ( c ) FROM % s WHERE a = 1 AND b > 1 " ) , 
 + row ( 3 , 2 , 5 , 2 , 9 . 5 , 18 . 5 , 9 . 25 ) ) ; 
 + } 
 + 
 + @ Test 
 public void testInvalidCalls ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , primary key ( a , b ) ) " ) ; 
 @ @ - 65 , 6 + 94 , 17 @ @ public class AggregationTest extends CQLTester 
 { 
 createTable ( " CREATE TABLE % s ( a int primary key , b timeuuid , c double , d double ) " ) ; 
 
 + execute ( " CREATE OR REPLACE FUNCTION copySign ( magnitude double , sign double ) RETURNS double LANGUAGE JAVA \ n " + 
 + " AS ' return Double . valueOf ( Math . copySign ( magnitude . doubleValue ( ) , sign . doubleValue ( ) ) ) ; ' ; " ) ; 
 + 
 + assertColumnNames ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , " max ( a ) " , " max ( unixtimestampof ( b ) ) " ) ; 
 + assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( null , null ) ) ; 
 + assertColumnNames ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , " max ( a ) " , " unixtimestampof ( max ( b ) ) " ) ; 
 + assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( null , null ) ) ; 
 + 
 + assertColumnNames ( execute ( " SELECT max ( copySign ( c , d ) ) FROM % s " ) , " max ( copysign ( c , d ) ) " ) ; 
 + assertRows ( execute ( " SELECT max ( copySign ( c , d ) ) FROM % s " ) , row ( ( Object ) null ) ) ; 
 + 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , maxTimeuuid ( ' 2011 - 02 - 03 04 : 05 : 00 + 0000 ' ) , - 1 . 2 , 2 . 1 ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 2 , maxTimeuuid ( ' 2011 - 02 - 03 04 : 06 : 00 + 0000 ' ) , 1 . 3 , - 3 . 4 ) " ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 3 , maxTimeuuid ( ' 2011 - 02 - 03 04 : 10 : 00 + 0000 ' ) , 1 . 4 , 1 . 2 ) " ) ; 
 @ @ - 76 , 8 + 116 , 6 @ @ public class AggregationTest extends CQLTester 
 
 assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; 
 assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; 
 - execute ( " CREATE OR REPLACE FUNCTION copySign ( magnitude double , sign double ) RETURNS double LANGUAGE JAVA \ n " + 
 - " AS ' return Double . valueOf ( Math . copySign ( magnitude . doubleValue ( ) , sign . doubleValue ( ) ) ) ; ' ; " ) ; 
 
 assertRows ( execute ( " SELECT copySign ( max ( c ) , min ( c ) ) FROM % s " ) , row ( - 1 . 4 ) ) ; 
 assertRows ( execute ( " SELECT copySign ( c , d ) FROM % s " ) , row ( 1 . 2 ) , row ( - 1 . 3 ) , row ( 1 . 4 ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 4ada0c5 . . ca02237 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 349 , 6 + 349 , 24 @ @ public abstract class CQLTester 
 Assert . assertTrue ( String . format ( " Got % s rows than expected . Expected % d but got % d " , rows . length > i ? " less " : " more " , rows . length , i ) , i = = rows . length ) ; 
 } 
 
 + protected void assertColumnNames ( UntypedResultSet result , String . . . expectedColumnNames ) 
 + { 
 + if ( result = = null ) 
 + { 
 + Assert . fail ( " No rows returned by query . " ) ; 
 + return ; 
 + } 
 + 
 + List < ColumnSpecification > metadata = result . metadata ( ) ; 
 + Assert . assertEquals ( " Got less columns than expected . " , expectedColumnNames . length , metadata . size ( ) ) ; 
 + 
 + for ( int i = 0 , m = metadata . size ( ) ; i < m ; i + + ) 
 + { 
 + ColumnSpecification columnSpec = metadata . get ( i ) ; 
 + Assert . assertEquals ( expectedColumnNames [ i ] , columnSpec . name . toString ( ) ) ; 
 + } 
 + } 
 + 
 protected void assertAllRows ( Object [ ] . . . rows ) throws Throwable 
 { 
 assertRows ( execute ( " SELECT * FROM % s " ) , rows ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 index 9b34a6a . . 7289ab0 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / IndexedSliceReader . java 
 @ @ - 96 , 7 + 96 , 7 @ @ class IndexedSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskA 
 else 
 { 
 setToRowStart ( sstable , indexEntry , input ) ; 
 - IndexHelper . skipBloomFilter ( file , version . filterType ) ; 
 + IndexHelper . skipSSTableBloomFilter ( file , version ) ; 
 this . indexes = IndexHelper . deserializeIndex ( file ) ; 
 this . emptyColumnFamily = ColumnFamily . create ( sstable . metadata ) ; 
 emptyColumnFamily . delete ( DeletionInfo . serializer ( ) . deserializeFromSSTable ( file , version ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 index 132f9cb . . b30d360 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 @ @ - 75 , 7 + 75 , 7 @ @ class SimpleSliceReader extends AbstractIterator < OnDiskAtom > implements OnDiskAt 
 Descriptor . Version version = sstable . descriptor . version ; 
 if ( ! version . hasPromotedIndexes ) 
 { 
 - IndexHelper . skipBloomFilter ( file , version . filterType ) ; 
 + IndexHelper . skipSSTableBloomFilter ( file , version ) ; 
 IndexHelper . skipIndex ( file ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index f0709d8 . . 0338044 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 85 , 6 + 85 , 7 @ @ public class Descriptor 
 public final boolean hasPromotedIndexes ; 
 public final FilterFactory . Type filterType ; 
 public final boolean hasAncestors ; 
 + public final boolean hasBloomFilterSizeInHeader ; 
 
 public Version ( String version ) 
 { 
 @ @ - 108 , 6 + 109 , 7 @ @ public class Descriptor 
 filterType = FilterFactory . Type . MURMUR2 ; 
 else 
 filterType = FilterFactory . Type . MURMUR3 ; 
 + hasBloomFilterSizeInHeader = version . compareTo ( " ia " ) < 0 ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java 
 index 14b2cda . . b81f7b8 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java 
 @ @ - 36 , 6 + 36 , 18 @ @ import org . apache . cassandra . utils . * ; 
 * / 
 public class IndexHelper 
 { 
 + public static void skipSSTableBloomFilter ( DataInput in , Descriptor . Version version ) throws IOException 
 + { 
 + if ( version . hasBloomFilterSizeInHeader ) 
 + { 
 + int size = in . readInt ( ) ; 
 + FileUtils . skipBytesFully ( in , size ) ; 
 + } 
 + else 
 + { 
 + skipBloomFilter ( in , version . filterType ) ; 
 + } 
 + } 
 
 / * * 
 * Skip the bloom filter 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 index 157ccf8 . . 7583cd6 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableIdentityIterator . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat 
 { 
 try 
 { 
 - IndexHelper . defreezeBloomFilter ( file , dataSize , dataVersion . filterType ) ; 
 + IndexHelper . skipSSTableBloomFilter ( file , sstable . descriptor . version ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 153 , 7 + 153 , 7 @ @ public class SSTableIdentityIterator implements Comparable < SSTableIdentityIterat 
 
 if ( sstable ! = null & & ! dataVersion . hasPromotedIndexes ) 
 { 
 - IndexHelper . skipBloomFilter ( inputWithTracker , dataVersion . filterType ) ; 
 + IndexHelper . skipSSTableBloomFilter ( inputWithTracker , dataVersion ) ; 
 IndexHelper . skipIndex ( inputWithTracker ) ; 
 } 
 columnFamily = ColumnFamily . create ( metadata ) ;
