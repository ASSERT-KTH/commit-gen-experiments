BLEU SCORE: 0.05522397783539471

TEST MSG: Fix CRR , add pig test for it
GENERATED MSG: Give CRR a default input _ cql Statement

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java <nl> index 74310cf . . fa8dec9 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java <nl> @ @ - 89 , 7 + 89 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> private int pageRowSize ; <nl> <nl> private List < String > partitionKeys = new ArrayList < > ( ) ; <nl> - private List < String > clusteringKeys = new ArrayList < > ( ) ; <nl> <nl> / / partition keys - - key aliases <nl> private LinkedHashMap < String , Boolean > partitionBoundColumns = Maps . newLinkedHashMap ( ) ; <nl> @ @ - 106 , 8 + 105 , 8 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> totalRowCount = ( this . split . getLength ( ) < Long . MAX _ VALUE ) <nl> ? ( int ) this . split . getLength ( ) <nl> : ConfigHelper . getInputSplitSize ( conf ) ; <nl> - cfName = quote ( ConfigHelper . getInputColumnFamily ( conf ) ) ; <nl> - keyspace = quote ( ConfigHelper . getInputKeyspace ( conf ) ) ; <nl> + cfName = ConfigHelper . getInputColumnFamily ( conf ) ; <nl> + keyspace = ConfigHelper . getInputKeyspace ( conf ) ; <nl> partitioner = ConfigHelper . getInputPartitioner ( conf ) ; <nl> inputColumns = CqlConfigHelper . getInputcolumns ( conf ) ; <nl> userDefinedWhereClauses = CqlConfigHelper . getInputWhereClauses ( conf ) ; <nl> @ @ - 161 , 6 + 160 , 14 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> / / whereClauses <nl> / / pageRowSize <nl> cqlQuery = CqlConfigHelper . getInputCql ( conf ) ; <nl> + / / validate that the user hasn ' t tried to give us a custom query along with input columns <nl> + / / and where clauses <nl> + if ( StringUtils . isNotEmpty ( cqlQuery ) & & ( StringUtils . isNotEmpty ( inputColumns ) | | <nl> + StringUtils . isNotEmpty ( userDefinedWhereClauses ) ) ) <nl> + { <nl> + throw new AssertionError ( " Cannot define a custom query with input columns and / or where clauses " ) ; <nl> + } <nl> + <nl> if ( StringUtils . isEmpty ( cqlQuery ) ) <nl> cqlQuery = buildQuery ( ) ; <nl> logger . debug ( " cqlQuery { } " , cqlQuery ) ; <nl> @ @ - 266 , 7 + 273 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> { <nl> AbstractType type = partitioner . getTokenValidator ( ) ; <nl> ResultSet rs = session . execute ( cqlQuery , type . compose ( type . fromString ( split . getStartToken ( ) ) ) , type . compose ( type . fromString ( split . getEndToken ( ) ) ) ) ; <nl> - for ( ColumnMetadata meta : cluster . getMetadata ( ) . getKeyspace ( keyspace ) . getTable ( cfName ) . getPartitionKey ( ) ) <nl> + for ( ColumnMetadata meta : cluster . getMetadata ( ) . getKeyspace ( quote ( keyspace ) ) . getTable ( quote ( cfName ) ) . getPartitionKey ( ) ) <nl> partitionBoundColumns . put ( meta . getName ( ) , Boolean . TRUE ) ; <nl> rows = rs . iterator ( ) ; <nl> } <nl> @ @ - 534 , 7 + 541 , 8 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> { <nl> fetchKeys ( ) ; <nl> <nl> - String selectColumnList = makeColumnList ( getSelectColumns ( ) ) ; <nl> + List < String > columns = getSelectColumns ( ) ; <nl> + String selectColumnList = columns . size ( ) = = 0 ? " * " : makeColumnList ( columns ) ; <nl> String partitionKeyList = makeColumnList ( partitionKeys ) ; <nl> <nl> return String . format ( " SELECT % s FROM % s . % s WHERE token ( % s ) > ? AND token ( % s ) < = ? " + getAdditionalWhereClauses ( ) , <nl> @ @ - 556 , 9 + 564 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> { <nl> List < String > selectColumns = new ArrayList < > ( ) ; <nl> <nl> - if ( StringUtils . isEmpty ( inputColumns ) ) <nl> - selectColumns . add ( " * " ) ; <nl> - else <nl> + if ( StringUtils . isNotEmpty ( inputColumns ) ) <nl> { <nl> / / We must select all the partition keys plus any other columns the user wants <nl> selectColumns . addAll ( partitionKeys ) ; <nl> @ @ - 605 , 16 + 611 , 10 @ @ public class CqlRecordReader extends RecordReader < Long , Row > <nl> int componentIndex = row . isNull ( 1 ) ? 0 : row . getInt ( 1 ) ; <nl> partitionKeyArray [ componentIndex ] = column ; <nl> } <nl> - else if ( type . equals ( " clustering _ key " ) ) <nl> - { <nl> - clusteringKeys . add ( column ) ; <nl> - } <nl> } <nl> partitionKeys . addAll ( Arrays . asList ( partitionKeyArray ) ) ; <nl> } <nl> <nl> - <nl> - <nl> private String quote ( String identifier ) <nl> { <nl> return " \ " " + identifier . replaceAll ( " \ " " , " \ " \ " " ) + " \ " " ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java 
 index 74310cf . . fa8dec9 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlRecordReader . java 
 @ @ - 89 , 7 + 89 , 6 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 private int pageRowSize ; 
 
 private List < String > partitionKeys = new ArrayList < > ( ) ; 
 - private List < String > clusteringKeys = new ArrayList < > ( ) ; 
 
 / / partition keys - - key aliases 
 private LinkedHashMap < String , Boolean > partitionBoundColumns = Maps . newLinkedHashMap ( ) ; 
 @ @ - 106 , 8 + 105 , 8 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 totalRowCount = ( this . split . getLength ( ) < Long . MAX _ VALUE ) 
 ? ( int ) this . split . getLength ( ) 
 : ConfigHelper . getInputSplitSize ( conf ) ; 
 - cfName = quote ( ConfigHelper . getInputColumnFamily ( conf ) ) ; 
 - keyspace = quote ( ConfigHelper . getInputKeyspace ( conf ) ) ; 
 + cfName = ConfigHelper . getInputColumnFamily ( conf ) ; 
 + keyspace = ConfigHelper . getInputKeyspace ( conf ) ; 
 partitioner = ConfigHelper . getInputPartitioner ( conf ) ; 
 inputColumns = CqlConfigHelper . getInputcolumns ( conf ) ; 
 userDefinedWhereClauses = CqlConfigHelper . getInputWhereClauses ( conf ) ; 
 @ @ - 161 , 6 + 160 , 14 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 / / whereClauses 
 / / pageRowSize 
 cqlQuery = CqlConfigHelper . getInputCql ( conf ) ; 
 + / / validate that the user hasn ' t tried to give us a custom query along with input columns 
 + / / and where clauses 
 + if ( StringUtils . isNotEmpty ( cqlQuery ) & & ( StringUtils . isNotEmpty ( inputColumns ) | | 
 + StringUtils . isNotEmpty ( userDefinedWhereClauses ) ) ) 
 + { 
 + throw new AssertionError ( " Cannot define a custom query with input columns and / or where clauses " ) ; 
 + } 
 + 
 if ( StringUtils . isEmpty ( cqlQuery ) ) 
 cqlQuery = buildQuery ( ) ; 
 logger . debug ( " cqlQuery { } " , cqlQuery ) ; 
 @ @ - 266 , 7 + 273 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 { 
 AbstractType type = partitioner . getTokenValidator ( ) ; 
 ResultSet rs = session . execute ( cqlQuery , type . compose ( type . fromString ( split . getStartToken ( ) ) ) , type . compose ( type . fromString ( split . getEndToken ( ) ) ) ) ; 
 - for ( ColumnMetadata meta : cluster . getMetadata ( ) . getKeyspace ( keyspace ) . getTable ( cfName ) . getPartitionKey ( ) ) 
 + for ( ColumnMetadata meta : cluster . getMetadata ( ) . getKeyspace ( quote ( keyspace ) ) . getTable ( quote ( cfName ) ) . getPartitionKey ( ) ) 
 partitionBoundColumns . put ( meta . getName ( ) , Boolean . TRUE ) ; 
 rows = rs . iterator ( ) ; 
 } 
 @ @ - 534 , 7 + 541 , 8 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 { 
 fetchKeys ( ) ; 
 
 - String selectColumnList = makeColumnList ( getSelectColumns ( ) ) ; 
 + List < String > columns = getSelectColumns ( ) ; 
 + String selectColumnList = columns . size ( ) = = 0 ? " * " : makeColumnList ( columns ) ; 
 String partitionKeyList = makeColumnList ( partitionKeys ) ; 
 
 return String . format ( " SELECT % s FROM % s . % s WHERE token ( % s ) > ? AND token ( % s ) < = ? " + getAdditionalWhereClauses ( ) , 
 @ @ - 556 , 9 + 564 , 7 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 { 
 List < String > selectColumns = new ArrayList < > ( ) ; 
 
 - if ( StringUtils . isEmpty ( inputColumns ) ) 
 - selectColumns . add ( " * " ) ; 
 - else 
 + if ( StringUtils . isNotEmpty ( inputColumns ) ) 
 { 
 / / We must select all the partition keys plus any other columns the user wants 
 selectColumns . addAll ( partitionKeys ) ; 
 @ @ - 605 , 16 + 611 , 10 @ @ public class CqlRecordReader extends RecordReader < Long , Row > 
 int componentIndex = row . isNull ( 1 ) ? 0 : row . getInt ( 1 ) ; 
 partitionKeyArray [ componentIndex ] = column ; 
 } 
 - else if ( type . equals ( " clustering _ key " ) ) 
 - { 
 - clusteringKeys . add ( column ) ; 
 - } 
 } 
 partitionKeys . addAll ( Arrays . asList ( partitionKeyArray ) ) ; 
 } 
 
 - 
 - 
 private String quote ( String identifier ) 
 { 
 return " \ " " + identifier . replaceAll ( " \ " " , " \ " \ " " ) + " \ " " ;

NEAREST DIFF:
ELIMINATEDSENTENCE
