BLEU SCORE: 0.005918093729486186

TEST MSG: merge from 2 . 0
GENERATED MSG: Fix inconsistent use of consistencyForCommit that allowed LOCAL _ QUORUM operations to incorrect become full QUORUM

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 971a33e . . 95921ff 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 9 @ @ Merged from 2 . 0 : <nl> * Fix CC # collectTimeOrderedData ( ) tombstone optimisations ( CASSANDRA - 7394 ) <nl> * Support DISTINCT for static columns and fix behaviour when DISTINC is <nl> not use ( CASSANDRA - 7305 ) . <nl> + * Fix race in FileCacheService RemovalListener ( CASSANDRA - 7278 ) <nl> + * Fix inconsistent use of consistencyForCommit that allowed LOCAL _ QUORUM <nl> + operations to incorrect become full QUORUM ( CASSANDRA - 7345 ) <nl> <nl> <nl> 2 . 1 . 0 - rc2 <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 2433457 . . 988c623 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 220 , 7 + 220 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> List < InetAddress > liveEndpoints = p . left ; <nl> int requiredParticipants = p . right ; <nl> <nl> - UUID ballot = beginAndRepairPaxos ( start , key , metadata , liveEndpoints , requiredParticipants , consistencyForPaxos ) ; <nl> + UUID ballot = beginAndRepairPaxos ( start , key , metadata , liveEndpoints , requiredParticipants , consistencyForPaxos , consistencyForCommit ) ; <nl> <nl> / / read the current values and check they validate the conditions <nl> Tracing . trace ( " Reading existing values for CAS precondition " ) ; <nl> @ @ - 305 , 7 + 305 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> * @ return the Paxos ballot promised by the replicas if no in - progress requests were seen and a quorum of <nl> * nodes have seen the mostRecentCommit . Otherwise , return null . <nl> * / <nl> - private static UUID beginAndRepairPaxos ( long start , ByteBuffer key , CFMetaData metadata , List < InetAddress > liveEndpoints , int requiredParticipants , ConsistencyLevel consistencyForPaxos ) <nl> + private static UUID beginAndRepairPaxos ( long start , ByteBuffer key , CFMetaData metadata , List < InetAddress > liveEndpoints , int requiredParticipants , ConsistencyLevel consistencyForPaxos , ConsistencyLevel consistencyForCommit ) <nl> throws WriteTimeoutException <nl> { <nl> long timeout = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getCasContentionTimeout ( ) ) ; <nl> @ @ - 341 , 7 + 341 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> Commit refreshedInProgress = Commit . newProposal ( inProgress . key , ballot , inProgress . update ) ; <nl> if ( proposePaxos ( refreshedInProgress , liveEndpoints , requiredParticipants , false , consistencyForPaxos ) ) <nl> { <nl> - commitPaxos ( refreshedInProgress , ConsistencyLevel . QUORUM ) ; <nl> + commitPaxos ( refreshedInProgress , consistencyForCommit ) ; <nl> } <nl> else <nl> { <nl> @ @ - 1169 , 16 + 1169 , 17 @ @ public class StorageProxy implements StorageProxyMBean <nl> int requiredParticipants = p . right ; <nl> <nl> / / does the work of applying in - progress writes ; throws UAE or timeout if it can ' t <nl> + final ConsistencyLevel consistencyForCommitOrFetch = consistency _ level = = ConsistencyLevel . LOCAL _ SERIAL ? ConsistencyLevel . LOCAL _ QUORUM : ConsistencyLevel . QUORUM ; <nl> try <nl> { <nl> - beginAndRepairPaxos ( start , command . key , metadata , liveEndpoints , requiredParticipants , consistency _ level ) ; <nl> + beginAndRepairPaxos ( start , command . key , metadata , liveEndpoints , requiredParticipants , consistency _ level , consistencyForCommitOrFetch ) ; <nl> } <nl> catch ( WriteTimeoutException e ) <nl> { <nl> throw new ReadTimeoutException ( consistency _ level , 0 , consistency _ level . blockFor ( Keyspace . open ( command . ksName ) ) , false ) ; <nl> } <nl> <nl> - rows = fetchRows ( commands , consistency _ level = = ConsistencyLevel . LOCAL _ SERIAL ? ConsistencyLevel . LOCAL _ QUORUM : ConsistencyLevel . QUORUM ) ; <nl> + rows = fetchRows ( commands , consistencyForCommitOrFetch ) ; <nl> } <nl> else <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 971a33e . . 95921ff 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 9 @ @ Merged from 2 . 0 : 
 * Fix CC # collectTimeOrderedData ( ) tombstone optimisations ( CASSANDRA - 7394 ) 
 * Support DISTINCT for static columns and fix behaviour when DISTINC is 
 not use ( CASSANDRA - 7305 ) . 
 + * Fix race in FileCacheService RemovalListener ( CASSANDRA - 7278 ) 
 + * Fix inconsistent use of consistencyForCommit that allowed LOCAL _ QUORUM 
 + operations to incorrect become full QUORUM ( CASSANDRA - 7345 ) 
 
 
 2 . 1 . 0 - rc2 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 2433457 . . 988c623 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 220 , 7 + 220 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 List < InetAddress > liveEndpoints = p . left ; 
 int requiredParticipants = p . right ; 
 
 - UUID ballot = beginAndRepairPaxos ( start , key , metadata , liveEndpoints , requiredParticipants , consistencyForPaxos ) ; 
 + UUID ballot = beginAndRepairPaxos ( start , key , metadata , liveEndpoints , requiredParticipants , consistencyForPaxos , consistencyForCommit ) ; 
 
 / / read the current values and check they validate the conditions 
 Tracing . trace ( " Reading existing values for CAS precondition " ) ; 
 @ @ - 305 , 7 + 305 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 * @ return the Paxos ballot promised by the replicas if no in - progress requests were seen and a quorum of 
 * nodes have seen the mostRecentCommit . Otherwise , return null . 
 * / 
 - private static UUID beginAndRepairPaxos ( long start , ByteBuffer key , CFMetaData metadata , List < InetAddress > liveEndpoints , int requiredParticipants , ConsistencyLevel consistencyForPaxos ) 
 + private static UUID beginAndRepairPaxos ( long start , ByteBuffer key , CFMetaData metadata , List < InetAddress > liveEndpoints , int requiredParticipants , ConsistencyLevel consistencyForPaxos , ConsistencyLevel consistencyForCommit ) 
 throws WriteTimeoutException 
 { 
 long timeout = TimeUnit . MILLISECONDS . toNanos ( DatabaseDescriptor . getCasContentionTimeout ( ) ) ; 
 @ @ - 341 , 7 + 341 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 Commit refreshedInProgress = Commit . newProposal ( inProgress . key , ballot , inProgress . update ) ; 
 if ( proposePaxos ( refreshedInProgress , liveEndpoints , requiredParticipants , false , consistencyForPaxos ) ) 
 { 
 - commitPaxos ( refreshedInProgress , ConsistencyLevel . QUORUM ) ; 
 + commitPaxos ( refreshedInProgress , consistencyForCommit ) ; 
 } 
 else 
 { 
 @ @ - 1169 , 16 + 1169 , 17 @ @ public class StorageProxy implements StorageProxyMBean 
 int requiredParticipants = p . right ; 
 
 / / does the work of applying in - progress writes ; throws UAE or timeout if it can ' t 
 + final ConsistencyLevel consistencyForCommitOrFetch = consistency _ level = = ConsistencyLevel . LOCAL _ SERIAL ? ConsistencyLevel . LOCAL _ QUORUM : ConsistencyLevel . QUORUM ; 
 try 
 { 
 - beginAndRepairPaxos ( start , command . key , metadata , liveEndpoints , requiredParticipants , consistency _ level ) ; 
 + beginAndRepairPaxos ( start , command . key , metadata , liveEndpoints , requiredParticipants , consistency _ level , consistencyForCommitOrFetch ) ; 
 } 
 catch ( WriteTimeoutException e ) 
 { 
 throw new ReadTimeoutException ( consistency _ level , 0 , consistency _ level . blockFor ( Keyspace . open ( command . ksName ) ) , false ) ; 
 } 
 
 - rows = fetchRows ( commands , consistency _ level = = ConsistencyLevel . LOCAL _ SERIAL ? ConsistencyLevel . LOCAL _ QUORUM : ConsistencyLevel . QUORUM ) ; 
 + rows = fetchRows ( commands , consistencyForCommitOrFetch ) ; 
 } 
 else 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
