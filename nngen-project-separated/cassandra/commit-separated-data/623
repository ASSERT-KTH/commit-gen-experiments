BLEU SCORE: 0.019833734500134766

TEST MSG: Add pre - and post - shutdown hooks to Storage Service
GENERATED MSG: fat clients were creating local data . patch by gdusbabek , reviewed by tjake . CASSANDRA - 2223

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2819aea . . d86a36c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Add pre - and post - shutdown hooks to Storage Service ( CASSANDRA - 12461 ) <nl> * Add hint delivery metrics ( CASSANDRA - 12693 ) <nl> * Remove IndexInfo cache from FileIndexInfoRetriever ( CASSANDRA - 12731 ) <nl> * ColumnIndex does not reuse buffer ( CASSANDRA - 12502 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 46f880e . . 958a2fd 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 142 , 6 + 142 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> private Thread drainOnShutdown = null ; <nl> private volatile boolean isShutdown = false ; <nl> + private final List < Runnable > preShutdownHooks = new ArrayList < > ( ) ; <nl> + private final List < Runnable > postShutdownHooks = new ArrayList < > ( ) ; <nl> <nl> public static final StorageService instance = new StorageService ( ) ; <nl> <nl> @ @ - 4379 , 6 + 4381 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> assert ! isShutdown ; <nl> isShutdown = true ; <nl> <nl> + Throwable preShutdownHookThrowable = Throwables . perform ( null , preShutdownHooks . stream ( ) . map ( h - > h : : run ) ) ; <nl> + if ( preShutdownHookThrowable ! = null ) <nl> + logger . error ( " Attempting to continue draining after pre - shutdown hooks returned exception " , preShutdownHookThrowable ) ; <nl> + <nl> try <nl> { <nl> setMode ( Mode . DRAINING , " starting drain process " , ! isFinalShutdown ) ; <nl> @ @ - 4480 , 6 + 4486 , 59 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> logger . error ( " Caught an exception while draining " , t ) ; <nl> } <nl> + finally <nl> + { <nl> + Throwable postShutdownHookThrowable = Throwables . perform ( null , postShutdownHooks . stream ( ) . map ( h - > h : : run ) ) ; <nl> + if ( postShutdownHookThrowable ! = null ) <nl> + logger . error ( " Post - shutdown hooks returned exception " , postShutdownHookThrowable ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Add a runnable which will be called before shut down or drain . This is useful for other <nl> + * applications running in the same JVM which may want to shut down first rather than time <nl> + * out attempting to use Cassandra calls which will no longer work . <nl> + * @ param hook : the code to run <nl> + * @ return true on success , false if Cassandra is already shutting down , in which case the runnable <nl> + * has NOT been added . <nl> + * / <nl> + public synchronized boolean addPreShutdownHook ( Runnable hook ) <nl> + { <nl> + if ( ! isDraining ( ) & & ! isDrained ( ) ) <nl> + return preShutdownHooks . add ( hook ) ; <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Remove a preshutdown hook <nl> + * / <nl> + public synchronized boolean removePreShutdownHook ( Runnable hook ) <nl> + { <nl> + return preShutdownHooks . remove ( hook ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Add a runnable which will be called after shutdown or drain . This is useful for other applications <nl> + * running in the same JVM that Cassandra needs to work and should shut down later . <nl> + * @ param hook : the code to run <nl> + * @ return true on success , false if Cassandra is already shutting down , in which case the runnable has NOT been <nl> + * added . <nl> + * / <nl> + public synchronized boolean addPostShutdownHook ( Runnable hook ) <nl> + { <nl> + if ( ! isDraining ( ) & & ! isDrained ( ) ) <nl> + return postShutdownHooks . add ( hook ) ; <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Remove a postshutdownhook <nl> + * / <nl> + public synchronized boolean removePostShutdownHook ( Runnable hook ) <nl> + { <nl> + return postShutdownHooks . remove ( hook ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / drivers / py / cql / marshal . py b / drivers / py / cql / marshal . py <nl> index b3b61f2 . . 31fbd29 100644 <nl> - - - a / drivers / py / cql / marshal . py <nl> + + + b / drivers / py / cql / marshal . py <nl> @ @ - 76 , 7 + 76 , 7 @ @ def unmarshal ( bytestr , typestr ) : <nl> elif typestr = = " org . apache . cassandra . db . marshal . LexicalUUIDType " : <nl> return UUID ( bytes = bytestr ) <nl> elif typestr = = " org . apache . cassandra . db . marshal . TimeUUIDType " : <nl> - return UUID ( bytes = bytetr ) <nl> + return UUID ( bytes = bytestr ) <nl> else : <nl> return bytestr <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2819aea . . d86a36c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Add pre - and post - shutdown hooks to Storage Service ( CASSANDRA - 12461 ) 
 * Add hint delivery metrics ( CASSANDRA - 12693 ) 
 * Remove IndexInfo cache from FileIndexInfoRetriever ( CASSANDRA - 12731 ) 
 * ColumnIndex does not reuse buffer ( CASSANDRA - 12502 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 46f880e . . 958a2fd 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 142 , 6 + 142 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 private Thread drainOnShutdown = null ; 
 private volatile boolean isShutdown = false ; 
 + private final List < Runnable > preShutdownHooks = new ArrayList < > ( ) ; 
 + private final List < Runnable > postShutdownHooks = new ArrayList < > ( ) ; 
 
 public static final StorageService instance = new StorageService ( ) ; 
 
 @ @ - 4379 , 6 + 4381 , 10 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 assert ! isShutdown ; 
 isShutdown = true ; 
 
 + Throwable preShutdownHookThrowable = Throwables . perform ( null , preShutdownHooks . stream ( ) . map ( h - > h : : run ) ) ; 
 + if ( preShutdownHookThrowable ! = null ) 
 + logger . error ( " Attempting to continue draining after pre - shutdown hooks returned exception " , preShutdownHookThrowable ) ; 
 + 
 try 
 { 
 setMode ( Mode . DRAINING , " starting drain process " , ! isFinalShutdown ) ; 
 @ @ - 4480 , 6 + 4486 , 59 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 logger . error ( " Caught an exception while draining " , t ) ; 
 } 
 + finally 
 + { 
 + Throwable postShutdownHookThrowable = Throwables . perform ( null , postShutdownHooks . stream ( ) . map ( h - > h : : run ) ) ; 
 + if ( postShutdownHookThrowable ! = null ) 
 + logger . error ( " Post - shutdown hooks returned exception " , postShutdownHookThrowable ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Add a runnable which will be called before shut down or drain . This is useful for other 
 + * applications running in the same JVM which may want to shut down first rather than time 
 + * out attempting to use Cassandra calls which will no longer work . 
 + * @ param hook : the code to run 
 + * @ return true on success , false if Cassandra is already shutting down , in which case the runnable 
 + * has NOT been added . 
 + * / 
 + public synchronized boolean addPreShutdownHook ( Runnable hook ) 
 + { 
 + if ( ! isDraining ( ) & & ! isDrained ( ) ) 
 + return preShutdownHooks . add ( hook ) ; 
 + 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Remove a preshutdown hook 
 + * / 
 + public synchronized boolean removePreShutdownHook ( Runnable hook ) 
 + { 
 + return preShutdownHooks . remove ( hook ) ; 
 + } 
 + 
 + / * * 
 + * Add a runnable which will be called after shutdown or drain . This is useful for other applications 
 + * running in the same JVM that Cassandra needs to work and should shut down later . 
 + * @ param hook : the code to run 
 + * @ return true on success , false if Cassandra is already shutting down , in which case the runnable has NOT been 
 + * added . 
 + * / 
 + public synchronized boolean addPostShutdownHook ( Runnable hook ) 
 + { 
 + if ( ! isDraining ( ) & & ! isDrained ( ) ) 
 + return postShutdownHooks . add ( hook ) ; 
 + 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Remove a postshutdownhook 
 + * / 
 + public synchronized boolean removePostShutdownHook ( Runnable hook ) 
 + { 
 + return postShutdownHooks . remove ( hook ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / drivers / py / cql / marshal . py b / drivers / py / cql / marshal . py 
 index b3b61f2 . . 31fbd29 100644 
 - - - a / drivers / py / cql / marshal . py 
 + + + b / drivers / py / cql / marshal . py 
 @ @ - 76 , 7 + 76 , 7 @ @ def unmarshal ( bytestr , typestr ) : 
 elif typestr = = " org . apache . cassandra . db . marshal . LexicalUUIDType " : 
 return UUID ( bytes = bytestr ) 
 elif typestr = = " org . apache . cassandra . db . marshal . TimeUUIDType " : 
 - return UUID ( bytes = bytetr ) 
 + return UUID ( bytes = bytestr ) 
 else : 
 return bytestr 

