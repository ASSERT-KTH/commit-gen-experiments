BLEU SCORE: 0.08310415003234632

TEST MSG: Clean up CFMetaData
GENERATED MSG: Fix ALTER RENAME post - 5125

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java <nl> index 90b1215 . . 237fc99 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Auth . java <nl> + + + b / src / java / org / apache / cassandra / auth / Auth . java <nl> @ @ - 205 , 7 + 205 , 7 @ @ public class Auth <nl> CFStatement parsed = ( CFStatement ) QueryProcessor . parseStatement ( cql ) ; <nl> parsed . prepareKeyspace ( AUTH _ KS ) ; <nl> CreateTableStatement statement = ( CreateTableStatement ) parsed . prepare ( ) . statement ; <nl> - CFMetaData cfm = statement . getCFMetaData ( ) . clone ( CFMetaData . generateLegacyCfId ( AUTH _ KS , name ) ) ; <nl> + CFMetaData cfm = statement . getCFMetaData ( ) . copy ( CFMetaData . generateLegacyCfId ( AUTH _ KS , name ) ) ; <nl> assert cfm . cfName . equals ( name ) ; <nl> MigrationManager . announceNewColumnFamily ( cfm ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index f38dd5e . . 9c8ceaf 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 20 , 26 + 20 , 23 @ @ package org . apache . cassandra . config ; <nl> import java . io . DataInput ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . InvocationTargetException ; <nl> - import java . lang . reflect . Method ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Objects ; <nl> + import com . google . common . base . Strings ; <nl> import com . google . common . collect . AbstractIterator ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . MapDifference ; <nl> import com . google . common . collect . Maps ; <nl> - <nl> - import org . apache . cassandra . cache . CachingOptions ; <nl> - import org . apache . cassandra . db . composites . * ; <nl> - <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . apache . commons . lang3 . builder . HashCodeBuilder ; <nl> import org . apache . commons . lang3 . builder . ToStringBuilder ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . cache . CachingOptions ; <nl> import org . apache . cassandra . cql3 . * ; <nl> import org . apache . cassandra . cql3 . statements . CFStatement ; <nl> import org . apache . cassandra . cql3 . statements . CreateTableStatement ; <nl> @ @ - 47 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; <nl> import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; <nl> import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ; <nl> + import org . apache . cassandra . db . composites . * ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> @ @ - 66 , 14 + 64 , 11 @ @ import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> import static org . apache . cassandra . utils . FBUtilities . * ; <nl> <nl> + / * * <nl> + * This class can be tricky to modify . Please read http : / / wiki . apache . org / cassandra / ConfigurationNotes for how to do so safely . <nl> + * / <nl> public final class CFMetaData <nl> { <nl> - / / <nl> - / / ! ! Important ! ! <nl> - / / This class can be tricky to modify . Please read http : / / wiki . apache . org / cassandra / ConfigurationNotes <nl> - / / for how to do so safely . <nl> - / / <nl> - <nl> private static final Logger logger = LoggerFactory . getLogger ( CFMetaData . class ) ; <nl> <nl> public final static double DEFAULT _ READ _ REPAIR _ CHANCE = 0 . 1 ; <nl> @ @ - 306 , 7 + 301 , 7 @ @ public final class CFMetaData <nl> { <nl> public enum RetryType <nl> { <nl> - NONE , CUSTOM , PERCENTILE , ALWAYS ; <nl> + NONE , CUSTOM , PERCENTILE , ALWAYS <nl> } <nl> <nl> public final RetryType type ; <nl> @ @ - 398 , 7 + 393 , 7 @ @ public final class CFMetaData <nl> private volatile CachingOptions caching = DEFAULT _ CACHING _ STRATEGY ; <nl> private volatile int minIndexInterval = DEFAULT _ MIN _ INDEX _ INTERVAL ; <nl> private volatile int maxIndexInterval = DEFAULT _ MAX _ INDEX _ INTERVAL ; <nl> - private int memtableFlushPeriod = 0 ; <nl> + private volatile int memtableFlushPeriod = 0 ; <nl> private volatile int defaultTimeToLive = DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ; <nl> private volatile SpeculativeRetry speculativeRetry = DEFAULT _ SPECULATIVE _ RETRY ; <nl> private volatile boolean populateIoCacheOnFlush = DEFAULT _ POPULATE _ IO _ CACHE _ ON _ FLUSH ; <nl> @ @ - 429 , 7 + 424 , 7 @ @ public final class CFMetaData <nl> public volatile CompressionParameters compressionParameters = new CompressionParameters ( null ) ; <nl> <nl> / / attribute setters that return the modified CFMetaData instance <nl> - public CFMetaData comment ( String prop ) { comment = enforceCommentNotNull ( prop ) ; return this ; } <nl> + public CFMetaData comment ( String prop ) { comment = Strings . nullToEmpty ( prop ) ; return this ; } <nl> public CFMetaData readRepairChance ( double prop ) { readRepairChance = prop ; return this ; } <nl> public CFMetaData dcLocalReadRepairChance ( double prop ) { dcLocalReadRepairChance = prop ; return this ; } <nl> public CFMetaData gcGraceSeconds ( int prop ) { gcGraceSeconds = prop ; return this ; } <nl> @ @ - 464 , 17 + 459 , 13 @ @ public final class CFMetaData <nl> this ( keyspace , name , type , comp , UUIDGen . getTimeUUID ( ) ) ; <nl> } <nl> <nl> - @ VisibleForTesting <nl> - CFMetaData ( String keyspace , String name , ColumnFamilyType type , CellNameType comp , UUID id ) <nl> + private CFMetaData ( String keyspace , String name , ColumnFamilyType type , CellNameType comp , UUID id ) <nl> { <nl> - / / ( subcc may be null for non - supercolumns ) <nl> - / / ( comp may also be null for custom indexes , which is kind of broken if you ask me ) <nl> - <nl> + cfId = id ; <nl> ksName = keyspace ; <nl> cfName = name ; <nl> cfType = type ; <nl> comparator = comp ; <nl> - cfId = id ; <nl> } <nl> <nl> public static CFMetaData denseCFMetaData ( String keyspace , String name , AbstractType < ? > comp , AbstractType < ? > subcc ) <nl> @ @ - 527 , 11 + 518 , 6 @ @ public final class CFMetaData <nl> } <nl> } <nl> <nl> - private static String enforceCommentNotNull ( CharSequence comment ) <nl> - { <nl> - return ( comment = = null ) ? " " : comment . toString ( ) ; <nl> - } <nl> - <nl> / * * <nl> * Generates deterministic UUID from keyspace / columnfamily name pair . <nl> * This is used to generate the same UUID for C * version < 2 . 1 <nl> @ @ - 545 , 12 + 531 , 12 @ @ public final class CFMetaData <nl> <nl> private static CFMetaData newSystemMetadata ( String keyspace , String cfName , String comment , CellNameType comparator ) <nl> { <nl> - CFMetaData newCFMD = new CFMetaData ( keyspace , cfName , ColumnFamilyType . Standard , comparator , generateLegacyCfId ( keyspace , cfName ) ) ; <nl> - return newCFMD . comment ( comment ) <nl> - . readRepairChance ( 0 ) <nl> - . dcLocalReadRepairChance ( 0 ) <nl> - . gcGraceSeconds ( 0 ) <nl> - . memtableFlushPeriod ( 3600 * 1000 ) ; <nl> + return new CFMetaData ( keyspace , cfName , ColumnFamilyType . Standard , comparator , generateLegacyCfId ( keyspace , cfName ) ) <nl> + . comment ( comment ) <nl> + . readRepairChance ( 0 ) <nl> + . dcLocalReadRepairChance ( 0 ) <nl> + . gcGraceSeconds ( 0 ) <nl> + . memtableFlushPeriod ( 3600 * 1000 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 593 , 7 + 579 , 7 @ @ public final class CFMetaData <nl> return this ; <nl> } <nl> <nl> - public CFMetaData clone ( ) <nl> + public CFMetaData copy ( ) <nl> { <nl> return copyOpts ( new CFMetaData ( ksName , cfName , cfType , comparator , cfId ) , this ) ; <nl> } <nl> @ @ - 604 , 7 + 590 , 7 @ @ public final class CFMetaData <nl> * @ param newCfId the cfId for the cloned CFMetaData <nl> * @ return the cloned CFMetaData instance with the new cfId <nl> * / <nl> - public CFMetaData clone ( UUID newCfId ) <nl> + public CFMetaData copy ( UUID newCfId ) <nl> { <nl> return copyOpts ( new CFMetaData ( ksName , cfName , cfType , comparator , newCfId ) , this ) ; <nl> } <nl> @ @ - 932 , 11 + 918 , 6 @ @ public final class CFMetaData <nl> . toHashCode ( ) ; <nl> } <nl> <nl> - public AbstractType < ? > getValueValidator ( ColumnIdentifier column ) <nl> - { <nl> - return getValueValidator ( getColumnDefinition ( column ) ) ; <nl> - } <nl> - <nl> public AbstractType < ? > getValueValidator ( CellName name ) <nl> { <nl> return getValueValidator ( getColumnDefinition ( name ) ) ; <nl> @ @ - 1142 , 7 + 1123 , 7 @ @ public final class CFMetaData <nl> / / compaction thresholds are checked by ThriftValidation . We shouldn ' t be doing <nl> / / validation on the apply path ; it ' s too late for that . <nl> <nl> - comment = enforceCommentNotNull ( cfm . comment ) ; <nl> + comment = Strings . nullToEmpty ( cfm . comment ) ; <nl> readRepairChance = cfm . readRepairChance ; <nl> dcLocalReadRepairChance = cfm . dcLocalReadRepairChance ; <nl> gcGraceSeconds = cfm . gcGraceSeconds ; <nl> @ @ - 1216 , 8 + 1197 , 7 @ @ public final class CFMetaData <nl> if ( options = = null ) <nl> return ; <nl> <nl> - Method validateMethod = strategyClass . getMethod ( " validateOptions " , Map . class ) ; <nl> - Map < String , String > unknownOptions = ( Map < String , String > ) validateMethod . invoke ( null , options ) ; <nl> + Map < ? , ? > unknownOptions = ( Map ) strategyClass . getMethod ( " validateOptions " , Map . class ) . invoke ( null , options ) ; <nl> if ( ! unknownOptions . isEmpty ( ) ) <nl> throw new ConfigurationException ( String . format ( " Properties specified % s are not understood by % s " , unknownOptions . keySet ( ) , strategyClass . getSimpleName ( ) ) ) ; <nl> } <nl> @ @ - 1283 , 7 + 1263 , 7 @ @ public final class CFMetaData <nl> def . setComparator _ type ( comparator . toString ( ) ) ; <nl> } <nl> <nl> - def . setComment ( enforceCommentNotNull ( comment ) ) ; <nl> + def . setComment ( Strings . nullToEmpty ( comment ) ) ; <nl> def . setRead _ repair _ chance ( readRepairChance ) ; <nl> def . setDclocal _ read _ repair _ chance ( dcLocalReadRepairChance ) ; <nl> def . setPopulate _ io _ cache _ on _ flush ( populateIoCacheOnFlush ) ; <nl> @ @ - 1503 , 13 + 1483 , 11 @ @ public final class CFMetaData <nl> <nl> private static Set < String > existingIndexNames ( String cfToExclude ) <nl> { <nl> - Set < String > indexNames = new HashSet < String > ( ) ; <nl> + Set < String > indexNames = new HashSet < > ( ) ; <nl> for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> - { <nl> if ( cfToExclude = = null | | ! cfs . name . equals ( cfToExclude ) ) <nl> for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) <nl> indexNames . add ( cd . getIndexName ( ) ) ; <nl> - } <nl> return indexNames ; <nl> } <nl> <nl> @ @ - 1715 , 17 + 1693 , 11 @ @ public final class CFMetaData <nl> CellNameType comparator = CellNames . fromAbstractType ( fullRawComparator , isDense ( fullRawComparator , columnDefs ) ) ; <nl> <nl> / / if we are upgrading , we use id generated from names initially <nl> - UUID cfId ; <nl> - if ( result . has ( " cf _ id " ) ) <nl> - cfId = result . getUUID ( " cf _ id " ) ; <nl> - else <nl> - cfId = generateLegacyCfId ( ksName , cfName ) ; <nl> + UUID cfId = result . has ( " cf _ id " ) <nl> + ? result . getUUID ( " cf _ id " ) <nl> + : generateLegacyCfId ( ksName , cfName ) ; <nl> <nl> - CFMetaData cfm = new CFMetaData ( ksName , <nl> - cfName , <nl> - cfType , <nl> - comparator , <nl> - cfId ) ; <nl> + CFMetaData cfm = new CFMetaData ( ksName , cfName , cfType , comparator , cfId ) ; <nl> <nl> cfm . readRepairChance ( result . getDouble ( " read _ repair _ chance " ) ) ; <nl> cfm . dcLocalReadRepairChance ( result . getDouble ( " local _ read _ repair _ chance " ) ) ; <nl> @ @ - 1774 , 7 + 1746 , 7 @ @ public final class CFMetaData <nl> cfm . addColumnMetadataFromAliases ( aliasesFromStrings ( fromJsonList ( result . getString ( " column _ aliases " ) ) ) , cfm . comparator . asAbstractType ( ) , ColumnDefinition . Kind . CLUSTERING _ COLUMN ) ; <nl> <nl> if ( result . has ( " value _ alias " ) ) <nl> - cfm . addColumnMetadataFromAliases ( Collections . < ByteBuffer > singletonList ( result . getBytes ( " value _ alias " ) ) , cfm . defaultValidator , ColumnDefinition . Kind . COMPACT _ VALUE ) ; <nl> + cfm . addColumnMetadataFromAliases ( Collections . singletonList ( result . getBytes ( " value _ alias " ) ) , cfm . defaultValidator , ColumnDefinition . Kind . COMPACT _ VALUE ) ; <nl> <nl> if ( result . has ( " dropped _ columns " ) ) <nl> cfm . droppedColumns ( convertDroppedColumns ( result . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) ) ) ; <nl> @ @ - 1841 , 7 + 1813 , 7 @ @ public final class CFMetaData <nl> if ( rawAliases = = null ) <nl> return null ; <nl> <nl> - List < String > aliases = new ArrayList < String > ( rawAliases . size ( ) ) ; <nl> + List < String > aliases = new ArrayList < > ( rawAliases . size ( ) ) ; <nl> for ( ColumnDefinition rawAlias : rawAliases ) <nl> aliases . add ( rawAlias . name . toString ( ) ) ; <nl> return json ( aliases ) ; <nl> @ @ - 1849 , 7 + 1821 , 7 @ @ public final class CFMetaData <nl> <nl> private static List < ByteBuffer > aliasesFromStrings ( List < String > aliases ) <nl> { <nl> - List < ByteBuffer > rawAliases = new ArrayList < ByteBuffer > ( aliases . size ( ) ) ; <nl> + List < ByteBuffer > rawAliases = new ArrayList < > ( aliases . size ( ) ) ; <nl> for ( String alias : aliases ) <nl> rawAliases . add ( UTF8Type . instance . decompose ( alias ) ) ; <nl> return rawAliases ; <nl> @ @ - 2198 , 12 + 2170 , 6 @ @ public final class CFMetaData <nl> return ! staticColumns . isEmpty ( ) ; <nl> } <nl> <nl> - public void validateColumns ( Iterable < Cell > columns ) <nl> - { <nl> - for ( Cell cell : columns ) <nl> - cell . validateFields ( this ) ; <nl> - } <nl> - <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql / AlterTableStatement . java b / src / java / org / apache / cassandra / cql / AlterTableStatement . java <nl> index 034f660 . . 7af65a1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / AlterTableStatement . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class AlterTableStatement <nl> public CFMetaData getCFMetaData ( String keyspace ) throws ConfigurationException , InvalidRequestException , SyntaxException <nl> { <nl> CFMetaData meta = Schema . instance . getCFMetaData ( keyspace , columnFamily ) ; <nl> - CFMetaData cfm = meta . clone ( ) ; <nl> + CFMetaData cfm = meta . copy ( ) ; <nl> <nl> ByteBuffer columnName = this . oType = = OperationType . OPTS ? null <nl> : meta . comparator . subtype ( 0 ) . fromStringCQL2 ( this . columnName ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / DropIndexStatement . java b / src / java / org / apache / cassandra / cql / DropIndexStatement . java <nl> index bc9bbbc . . 1a24b7e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / DropIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / DropIndexStatement . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class DropIndexStatement <nl> { <nl> ColumnDefinition column = findIndexedColumn ( cfm ) ; <nl> assert column ! = null ; <nl> - CFMetaData cloned = cfm . clone ( ) ; <nl> + CFMetaData cloned = cfm . copy ( ) ; <nl> ColumnDefinition toChange = cloned . getColumnDefinition ( column . name ) ; <nl> assert toChange . getIndexName ( ) ! = null & & toChange . getIndexName ( ) . equals ( indexName ) ; <nl> toChange . setIndexName ( null ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index 3d5c3f1 . . 458f131 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 681 , 7 + 681 , 7 @ @ public class QueryProcessor <nl> boolean columnExists = false ; <nl> ByteBuffer columnName = createIdx . getColumnName ( ) . getByteBuffer ( ) ; <nl> / / mutating oldCfm directly would be bad , but mutating a copy is fine . <nl> - CFMetaData cfm = oldCfm . clone ( ) ; <nl> + CFMetaData cfm = oldCfm . copy ( ) ; <nl> for ( ColumnDefinition cd : cfm . regularColumns ( ) ) <nl> { <nl> if ( cd . name . bytes . equals ( columnName ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 51b2865 . . 27acb3c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> public void announceMigration ( ) throws RequestValidationException <nl> { <nl> CFMetaData meta = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; <nl> - CFMetaData cfm = meta . clone ( ) ; <nl> + CFMetaData cfm = meta . copy ( ) ; <nl> <nl> CQL3Type validator = this . validator = = null ? null : this . validator . prepare ( keyspace ( ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> index 4ce9283 . . f8731ce 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> @ @ - 115 , 7 + 115 , 7 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> { <nl> for ( CFMetaData cfm : ksm2 . cfMetaData ( ) . values ( ) ) <nl> { <nl> - CFMetaData copy = cfm . clone ( ) ; <nl> + CFMetaData copy = cfm . copy ( ) ; <nl> boolean modified = false ; <nl> for ( ColumnDefinition def : copy . allColumns ( ) ) <nl> modified | = updateDefinition ( copy , def , toUpdate . keyspace , toUpdate . name , updated ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> index 49a669f . . ea1f933 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement <nl> public void announceMigration ( ) throws RequestValidationException <nl> { <nl> logger . debug ( " Updating column { } definition for index { } " , target . column , indexName ) ; <nl> - CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; <nl> + CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; <nl> ColumnDefinition cd = cfm . getColumnDefinition ( target . column ) ; <nl> <nl> if ( cd . getIndexType ( ) ! = null & & ifNotExists ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> index 329b7bc . . 7b4543f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class CreateTriggerStatement extends SchemaAlteringStatement <nl> <nl> public void announceMigration ( ) throws ConfigurationException <nl> { <nl> - CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; <nl> + CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; <nl> cfm . addTriggerDefinition ( TriggerDefinition . create ( triggerName , triggerClass ) ) ; <nl> logger . info ( " Adding trigger with name { } and class { } " , triggerName , triggerClass ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> index c62ad47 . . aa17d51 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class DropIndexStatement extends SchemaAlteringStatement <nl> { <nl> ColumnDefinition column = findIndexedColumn ( cfm ) ; <nl> assert column ! = null ; <nl> - CFMetaData cloned = cfm . clone ( ) ; <nl> + CFMetaData cloned = cfm . copy ( ) ; <nl> ColumnDefinition toChange = cloned . getColumnDefinition ( column . name ) ; <nl> assert toChange . getIndexName ( ) ! = null & & toChange . getIndexName ( ) . equals ( indexName ) ; <nl> toChange . setIndexName ( null ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> index ce17047 . . c9b33a1 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class DropTriggerStatement extends SchemaAlteringStatement <nl> <nl> public void announceMigration ( ) throws ConfigurationException <nl> { <nl> - CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; <nl> + CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; <nl> if ( ! cfm . removeTrigger ( triggerName ) ) <nl> throw new ConfigurationException ( String . format ( " Trigger % s was not found " , triggerName ) ) ; <nl> logger . info ( " Dropping trigger with name { } " , triggerName ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java <nl> index d0ff179 . . 47f4f20 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class CFMetaDataTest extends SchemaLoader <nl> checkInverses ( cfm ) ; <nl> <nl> / / Testing with compression to catch # 3558 <nl> - CFMetaData withCompression = cfm . clone ( ) ; <nl> + CFMetaData withCompression = cfm . copy ( ) ; <nl> withCompression . compressionParameters ( new CompressionParameters ( SnappyCompressor . instance , 32768 , new HashMap < String , String > ( ) ) ) ; <nl> checkInverses ( withCompression ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / config / DefsTest . java b / test / unit / org / apache / cassandra / config / DefsTest . java <nl> index 1251ff7 . . 2e1876f 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DefsTest . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class DefsTest extends SchemaLoader <nl> / / we ' ll be adding this one later . make sure it ' s not already there . <nl> assert cfm . getColumnDefinition ( ByteBuffer . wrap ( new byte [ ] { 5 } ) ) = = null ; <nl> <nl> - CFMetaData cfNew = cfm . clone ( ) ; <nl> + CFMetaData cfNew = cfm . copy ( ) ; <nl> <nl> / / add one . <nl> ColumnDefinition addIndexDef = ColumnDefinition . regularDef ( cfm , ByteBuffer . wrap ( new byte [ ] { 5 } ) , BytesType . instance , null ) <nl> @ @ - 411 , 7 + 411 , 7 @ @ public class DefsTest extends SchemaLoader <nl> assert Schema . instance . getCFMetaData ( cf . ksName , cf . cfName ) ! = null ; <nl> <nl> / / updating certain fields should fail . <nl> - CFMetaData newCfm = cf . clone ( ) ; <nl> + CFMetaData newCfm = cf . copy ( ) ; <nl> newCfm . defaultValidator ( BytesType . instance ) ; <nl> newCfm . minCompactionThreshold ( 5 ) ; <nl> newCfm . maxCompactionThreshold ( 31 ) ; <nl> @ @ - 444 , 7 + 444 , 7 @ @ public class DefsTest extends SchemaLoader <nl> assert Schema . instance . getCFMetaData ( cf . ksName , cf . cfName ) . getDefaultValidator ( ) = = UTF8Type . instance ; <nl> <nl> / / Change cfId <nl> - newCfm = new CFMetaData ( cf . ksName , cf . cfName , cf . cfType , cf . comparator , UUID . randomUUID ( ) ) ; <nl> + newCfm = new CFMetaData ( cf . ksName , cf . cfName , cf . cfType , cf . comparator ) ; <nl> CFMetaData . copyOpts ( newCfm , cf ) ; <nl> try <nl> { <nl> @ @ - 511 , 7 + 511 , 7 @ @ public class DefsTest extends SchemaLoader <nl> Descriptor desc = indexedCfs . getSSTables ( ) . iterator ( ) . next ( ) . descriptor ; <nl> <nl> / / drop the index <nl> - CFMetaData meta = cfs . metadata . clone ( ) ; <nl> + CFMetaData meta = cfs . metadata . copy ( ) ; <nl> ColumnDefinition cdOld = meta . regularColumns ( ) . iterator ( ) . next ( ) ; <nl> ColumnDefinition cdNew = ColumnDefinition . regularDef ( meta , cdOld . name . bytes , cdOld . type , null ) ; <nl> meta . addOrReplaceColumnDefinition ( cdNew ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java <nl> index 35d851e . . 05ac588 100644 <nl> - - - a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java <nl> + + + b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class ThriftValidationTest extends SchemaLoader <nl> public void testColumnNameEqualToKeyAlias ( ) <nl> { <nl> CFMetaData metaData = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) ; <nl> - CFMetaData newMetadata = metaData . clone ( ) ; <nl> + CFMetaData newMetadata = metaData . copy ( ) ; <nl> <nl> boolean gotException = false ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java <nl> index f9d71ee . . c6a1ac5 100644 <nl> - - - a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java <nl> + + + b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class TriggersSchemaTest extends SchemaLoader <nl> Collections . singletonList ( cfm1 ) ) ; <nl> MigrationManager . announceNewKeyspace ( ksm ) ; <nl> <nl> - CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . clone ( ) ; <nl> + CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; <nl> TriggerDefinition td = TriggerDefinition . create ( triggerName , triggerClass ) ; <nl> cfm2 . addTriggerDefinition ( td ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; <nl> @ @ - 116 , 11 + 116 , 11 @ @ public class TriggersSchemaTest extends SchemaLoader <nl> Collections . singletonList ( cfm1 ) ) ; <nl> MigrationManager . announceNewKeyspace ( ksm ) ; <nl> <nl> - CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . clone ( ) ; <nl> + CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; <nl> cfm2 . removeTrigger ( triggerName ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; <nl> <nl> - CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . clone ( ) ; <nl> + CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; <nl> assertTrue ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 958b9ae . . 0e631ea 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1239 , 6 + 1239 , 8 @ @ syntax _ rules + = r ' ' ' <nl> | " ADD " newcol = < cident > < storageType > <nl> | " DROP " existcol = < cident > <nl> | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * <nl> + | " RENAME " existcol = < cident > " TO " newcol = < cident > <nl> + ( " AND " existcol = < cident > " TO " newcol = < cident > ) * <nl> ; <nl> ' ' ' <nl> <nl> diff - - git a / pylib / cqlshlib / helptopics . py b / pylib / cqlshlib / helptopics . py <nl> index c9dae31 . . cdbb8f4 100644 <nl> - - - a / pylib / cqlshlib / helptopics . py <nl> + + + b / pylib / cqlshlib / helptopics . py <nl> @ @ - 902 , 8 + 902 , 37 @ @ class CQL3HelpTopics ( CQLHelpTopics ) : <nl> print " HELP CREATE _ USER ; " <nl> <nl> def help _ alter ( self ) : <nl> - super ( CQL3HelpTopics , self ) . help _ alter ( ) <nl> - print " HELP ALTER _ USER ; " <nl> + print " " " <nl> + ALTER TABLE < tablename > ALTER < columnname > TYPE < type > ; <nl> + ALTER TABLE < tablename > ADD < columnname > < type > ; <nl> + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > <nl> + [ AND < columnname > TO < columnname > ] <nl> + ALTER TABLE < tablename > WITH < optionname > = < val > [ AND < optionname > = < val > [ . . . ] ] ; <nl> + <nl> + An ALTER statement is used to manipulate table metadata . It allows you <nl> + to add new typed columns , drop existing columns , change the data <nl> + storage type of existing columns , or change table properties . <nl> + No results are returned . <nl> + <nl> + See one of the following for more information : <nl> + <nl> + HELP ALTER _ ALTER ; <nl> + HELP ALTER _ ADD ; <nl> + HELP ALTER _ DROP ; <nl> + HELP ALTER _ RENAME ; <nl> + HELP ALTER _ WITH ; <nl> + " " " <nl> + <nl> + def help _ alter _ rename ( self ) : <nl> + print " " " <nl> + ALTER TABLE : renaming a column <nl> + <nl> + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > <nl> + [ AND < columnname > TO < columnname > ] <nl> + <nl> + The ALTER TABLE . . . RENAME variant renames a typed column in a column <nl> + family . <nl> + " " " <nl> <nl> def help _ drop ( self ) : <nl> super ( CQL3HelpTopics , self ) . help _ drop ( )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java 
 index 90b1215 . . 237fc99 100644 
 - - - a / src / java / org / apache / cassandra / auth / Auth . java 
 + + + b / src / java / org / apache / cassandra / auth / Auth . java 
 @ @ - 205 , 7 + 205 , 7 @ @ public class Auth 
 CFStatement parsed = ( CFStatement ) QueryProcessor . parseStatement ( cql ) ; 
 parsed . prepareKeyspace ( AUTH _ KS ) ; 
 CreateTableStatement statement = ( CreateTableStatement ) parsed . prepare ( ) . statement ; 
 - CFMetaData cfm = statement . getCFMetaData ( ) . clone ( CFMetaData . generateLegacyCfId ( AUTH _ KS , name ) ) ; 
 + CFMetaData cfm = statement . getCFMetaData ( ) . copy ( CFMetaData . generateLegacyCfId ( AUTH _ KS , name ) ) ; 
 assert cfm . cfName . equals ( name ) ; 
 MigrationManager . announceNewColumnFamily ( cfm ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index f38dd5e . . 9c8ceaf 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 20 , 26 + 20 , 23 @ @ package org . apache . cassandra . config ; 
 import java . io . DataInput ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . InvocationTargetException ; 
 - import java . lang . reflect . Method ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Objects ; 
 + import com . google . common . base . Strings ; 
 import com . google . common . collect . AbstractIterator ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . MapDifference ; 
 import com . google . common . collect . Maps ; 
 - 
 - import org . apache . cassandra . cache . CachingOptions ; 
 - import org . apache . cassandra . db . composites . * ; 
 - 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . apache . commons . lang3 . builder . HashCodeBuilder ; 
 import org . apache . commons . lang3 . builder . ToStringBuilder ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . cache . CachingOptions ; 
 import org . apache . cassandra . cql3 . * ; 
 import org . apache . cassandra . cql3 . statements . CFStatement ; 
 import org . apache . cassandra . cql3 . statements . CreateTableStatement ; 
 @ @ - 47 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . compaction . AbstractCompactionStrategy ; 
 import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; 
 import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ; 
 + import org . apache . cassandra . db . composites . * ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 @ @ - 66 , 14 + 64 , 11 @ @ import org . apache . cassandra . utils . UUIDGen ; 
 
 import static org . apache . cassandra . utils . FBUtilities . * ; 
 
 + / * * 
 + * This class can be tricky to modify . Please read http : / / wiki . apache . org / cassandra / ConfigurationNotes for how to do so safely . 
 + * / 
 public final class CFMetaData 
 { 
 - / / 
 - / / ! ! Important ! ! 
 - / / This class can be tricky to modify . Please read http : / / wiki . apache . org / cassandra / ConfigurationNotes 
 - / / for how to do so safely . 
 - / / 
 - 
 private static final Logger logger = LoggerFactory . getLogger ( CFMetaData . class ) ; 
 
 public final static double DEFAULT _ READ _ REPAIR _ CHANCE = 0 . 1 ; 
 @ @ - 306 , 7 + 301 , 7 @ @ public final class CFMetaData 
 { 
 public enum RetryType 
 { 
 - NONE , CUSTOM , PERCENTILE , ALWAYS ; 
 + NONE , CUSTOM , PERCENTILE , ALWAYS 
 } 
 
 public final RetryType type ; 
 @ @ - 398 , 7 + 393 , 7 @ @ public final class CFMetaData 
 private volatile CachingOptions caching = DEFAULT _ CACHING _ STRATEGY ; 
 private volatile int minIndexInterval = DEFAULT _ MIN _ INDEX _ INTERVAL ; 
 private volatile int maxIndexInterval = DEFAULT _ MAX _ INDEX _ INTERVAL ; 
 - private int memtableFlushPeriod = 0 ; 
 + private volatile int memtableFlushPeriod = 0 ; 
 private volatile int defaultTimeToLive = DEFAULT _ DEFAULT _ TIME _ TO _ LIVE ; 
 private volatile SpeculativeRetry speculativeRetry = DEFAULT _ SPECULATIVE _ RETRY ; 
 private volatile boolean populateIoCacheOnFlush = DEFAULT _ POPULATE _ IO _ CACHE _ ON _ FLUSH ; 
 @ @ - 429 , 7 + 424 , 7 @ @ public final class CFMetaData 
 public volatile CompressionParameters compressionParameters = new CompressionParameters ( null ) ; 
 
 / / attribute setters that return the modified CFMetaData instance 
 - public CFMetaData comment ( String prop ) { comment = enforceCommentNotNull ( prop ) ; return this ; } 
 + public CFMetaData comment ( String prop ) { comment = Strings . nullToEmpty ( prop ) ; return this ; } 
 public CFMetaData readRepairChance ( double prop ) { readRepairChance = prop ; return this ; } 
 public CFMetaData dcLocalReadRepairChance ( double prop ) { dcLocalReadRepairChance = prop ; return this ; } 
 public CFMetaData gcGraceSeconds ( int prop ) { gcGraceSeconds = prop ; return this ; } 
 @ @ - 464 , 17 + 459 , 13 @ @ public final class CFMetaData 
 this ( keyspace , name , type , comp , UUIDGen . getTimeUUID ( ) ) ; 
 } 
 
 - @ VisibleForTesting 
 - CFMetaData ( String keyspace , String name , ColumnFamilyType type , CellNameType comp , UUID id ) 
 + private CFMetaData ( String keyspace , String name , ColumnFamilyType type , CellNameType comp , UUID id ) 
 { 
 - / / ( subcc may be null for non - supercolumns ) 
 - / / ( comp may also be null for custom indexes , which is kind of broken if you ask me ) 
 - 
 + cfId = id ; 
 ksName = keyspace ; 
 cfName = name ; 
 cfType = type ; 
 comparator = comp ; 
 - cfId = id ; 
 } 
 
 public static CFMetaData denseCFMetaData ( String keyspace , String name , AbstractType < ? > comp , AbstractType < ? > subcc ) 
 @ @ - 527 , 11 + 518 , 6 @ @ public final class CFMetaData 
 } 
 } 
 
 - private static String enforceCommentNotNull ( CharSequence comment ) 
 - { 
 - return ( comment = = null ) ? " " : comment . toString ( ) ; 
 - } 
 - 
 / * * 
 * Generates deterministic UUID from keyspace / columnfamily name pair . 
 * This is used to generate the same UUID for C * version < 2 . 1 
 @ @ - 545 , 12 + 531 , 12 @ @ public final class CFMetaData 
 
 private static CFMetaData newSystemMetadata ( String keyspace , String cfName , String comment , CellNameType comparator ) 
 { 
 - CFMetaData newCFMD = new CFMetaData ( keyspace , cfName , ColumnFamilyType . Standard , comparator , generateLegacyCfId ( keyspace , cfName ) ) ; 
 - return newCFMD . comment ( comment ) 
 - . readRepairChance ( 0 ) 
 - . dcLocalReadRepairChance ( 0 ) 
 - . gcGraceSeconds ( 0 ) 
 - . memtableFlushPeriod ( 3600 * 1000 ) ; 
 + return new CFMetaData ( keyspace , cfName , ColumnFamilyType . Standard , comparator , generateLegacyCfId ( keyspace , cfName ) ) 
 + . comment ( comment ) 
 + . readRepairChance ( 0 ) 
 + . dcLocalReadRepairChance ( 0 ) 
 + . gcGraceSeconds ( 0 ) 
 + . memtableFlushPeriod ( 3600 * 1000 ) ; 
 } 
 
 / * * 
 @ @ - 593 , 7 + 579 , 7 @ @ public final class CFMetaData 
 return this ; 
 } 
 
 - public CFMetaData clone ( ) 
 + public CFMetaData copy ( ) 
 { 
 return copyOpts ( new CFMetaData ( ksName , cfName , cfType , comparator , cfId ) , this ) ; 
 } 
 @ @ - 604 , 7 + 590 , 7 @ @ public final class CFMetaData 
 * @ param newCfId the cfId for the cloned CFMetaData 
 * @ return the cloned CFMetaData instance with the new cfId 
 * / 
 - public CFMetaData clone ( UUID newCfId ) 
 + public CFMetaData copy ( UUID newCfId ) 
 { 
 return copyOpts ( new CFMetaData ( ksName , cfName , cfType , comparator , newCfId ) , this ) ; 
 } 
 @ @ - 932 , 11 + 918 , 6 @ @ public final class CFMetaData 
 . toHashCode ( ) ; 
 } 
 
 - public AbstractType < ? > getValueValidator ( ColumnIdentifier column ) 
 - { 
 - return getValueValidator ( getColumnDefinition ( column ) ) ; 
 - } 
 - 
 public AbstractType < ? > getValueValidator ( CellName name ) 
 { 
 return getValueValidator ( getColumnDefinition ( name ) ) ; 
 @ @ - 1142 , 7 + 1123 , 7 @ @ public final class CFMetaData 
 / / compaction thresholds are checked by ThriftValidation . We shouldn ' t be doing 
 / / validation on the apply path ; it ' s too late for that . 
 
 - comment = enforceCommentNotNull ( cfm . comment ) ; 
 + comment = Strings . nullToEmpty ( cfm . comment ) ; 
 readRepairChance = cfm . readRepairChance ; 
 dcLocalReadRepairChance = cfm . dcLocalReadRepairChance ; 
 gcGraceSeconds = cfm . gcGraceSeconds ; 
 @ @ - 1216 , 8 + 1197 , 7 @ @ public final class CFMetaData 
 if ( options = = null ) 
 return ; 
 
 - Method validateMethod = strategyClass . getMethod ( " validateOptions " , Map . class ) ; 
 - Map < String , String > unknownOptions = ( Map < String , String > ) validateMethod . invoke ( null , options ) ; 
 + Map < ? , ? > unknownOptions = ( Map ) strategyClass . getMethod ( " validateOptions " , Map . class ) . invoke ( null , options ) ; 
 if ( ! unknownOptions . isEmpty ( ) ) 
 throw new ConfigurationException ( String . format ( " Properties specified % s are not understood by % s " , unknownOptions . keySet ( ) , strategyClass . getSimpleName ( ) ) ) ; 
 } 
 @ @ - 1283 , 7 + 1263 , 7 @ @ public final class CFMetaData 
 def . setComparator _ type ( comparator . toString ( ) ) ; 
 } 
 
 - def . setComment ( enforceCommentNotNull ( comment ) ) ; 
 + def . setComment ( Strings . nullToEmpty ( comment ) ) ; 
 def . setRead _ repair _ chance ( readRepairChance ) ; 
 def . setDclocal _ read _ repair _ chance ( dcLocalReadRepairChance ) ; 
 def . setPopulate _ io _ cache _ on _ flush ( populateIoCacheOnFlush ) ; 
 @ @ - 1503 , 13 + 1483 , 11 @ @ public final class CFMetaData 
 
 private static Set < String > existingIndexNames ( String cfToExclude ) 
 { 
 - Set < String > indexNames = new HashSet < String > ( ) ; 
 + Set < String > indexNames = new HashSet < > ( ) ; 
 for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 - { 
 if ( cfToExclude = = null | | ! cfs . name . equals ( cfToExclude ) ) 
 for ( ColumnDefinition cd : cfs . metadata . allColumns ( ) ) 
 indexNames . add ( cd . getIndexName ( ) ) ; 
 - } 
 return indexNames ; 
 } 
 
 @ @ - 1715 , 17 + 1693 , 11 @ @ public final class CFMetaData 
 CellNameType comparator = CellNames . fromAbstractType ( fullRawComparator , isDense ( fullRawComparator , columnDefs ) ) ; 
 
 / / if we are upgrading , we use id generated from names initially 
 - UUID cfId ; 
 - if ( result . has ( " cf _ id " ) ) 
 - cfId = result . getUUID ( " cf _ id " ) ; 
 - else 
 - cfId = generateLegacyCfId ( ksName , cfName ) ; 
 + UUID cfId = result . has ( " cf _ id " ) 
 + ? result . getUUID ( " cf _ id " ) 
 + : generateLegacyCfId ( ksName , cfName ) ; 
 
 - CFMetaData cfm = new CFMetaData ( ksName , 
 - cfName , 
 - cfType , 
 - comparator , 
 - cfId ) ; 
 + CFMetaData cfm = new CFMetaData ( ksName , cfName , cfType , comparator , cfId ) ; 
 
 cfm . readRepairChance ( result . getDouble ( " read _ repair _ chance " ) ) ; 
 cfm . dcLocalReadRepairChance ( result . getDouble ( " local _ read _ repair _ chance " ) ) ; 
 @ @ - 1774 , 7 + 1746 , 7 @ @ public final class CFMetaData 
 cfm . addColumnMetadataFromAliases ( aliasesFromStrings ( fromJsonList ( result . getString ( " column _ aliases " ) ) ) , cfm . comparator . asAbstractType ( ) , ColumnDefinition . Kind . CLUSTERING _ COLUMN ) ; 
 
 if ( result . has ( " value _ alias " ) ) 
 - cfm . addColumnMetadataFromAliases ( Collections . < ByteBuffer > singletonList ( result . getBytes ( " value _ alias " ) ) , cfm . defaultValidator , ColumnDefinition . Kind . COMPACT _ VALUE ) ; 
 + cfm . addColumnMetadataFromAliases ( Collections . singletonList ( result . getBytes ( " value _ alias " ) ) , cfm . defaultValidator , ColumnDefinition . Kind . COMPACT _ VALUE ) ; 
 
 if ( result . has ( " dropped _ columns " ) ) 
 cfm . droppedColumns ( convertDroppedColumns ( result . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) ) ) ; 
 @ @ - 1841 , 7 + 1813 , 7 @ @ public final class CFMetaData 
 if ( rawAliases = = null ) 
 return null ; 
 
 - List < String > aliases = new ArrayList < String > ( rawAliases . size ( ) ) ; 
 + List < String > aliases = new ArrayList < > ( rawAliases . size ( ) ) ; 
 for ( ColumnDefinition rawAlias : rawAliases ) 
 aliases . add ( rawAlias . name . toString ( ) ) ; 
 return json ( aliases ) ; 
 @ @ - 1849 , 7 + 1821 , 7 @ @ public final class CFMetaData 
 
 private static List < ByteBuffer > aliasesFromStrings ( List < String > aliases ) 
 { 
 - List < ByteBuffer > rawAliases = new ArrayList < ByteBuffer > ( aliases . size ( ) ) ; 
 + List < ByteBuffer > rawAliases = new ArrayList < > ( aliases . size ( ) ) ; 
 for ( String alias : aliases ) 
 rawAliases . add ( UTF8Type . instance . decompose ( alias ) ) ; 
 return rawAliases ; 
 @ @ - 2198 , 12 + 2170 , 6 @ @ public final class CFMetaData 
 return ! staticColumns . isEmpty ( ) ; 
 } 
 
 - public void validateColumns ( Iterable < Cell > columns ) 
 - { 
 - for ( Cell cell : columns ) 
 - cell . validateFields ( this ) ; 
 - } 
 - 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql / AlterTableStatement . java b / src / java / org / apache / cassandra / cql / AlterTableStatement . java 
 index 034f660 . . 7af65a1 100644 
 - - - a / src / java / org / apache / cassandra / cql / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / AlterTableStatement . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class AlterTableStatement 
 public CFMetaData getCFMetaData ( String keyspace ) throws ConfigurationException , InvalidRequestException , SyntaxException 
 { 
 CFMetaData meta = Schema . instance . getCFMetaData ( keyspace , columnFamily ) ; 
 - CFMetaData cfm = meta . clone ( ) ; 
 + CFMetaData cfm = meta . copy ( ) ; 
 
 ByteBuffer columnName = this . oType = = OperationType . OPTS ? null 
 : meta . comparator . subtype ( 0 ) . fromStringCQL2 ( this . columnName ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / DropIndexStatement . java b / src / java / org / apache / cassandra / cql / DropIndexStatement . java 
 index bc9bbbc . . 1a24b7e 100644 
 - - - a / src / java / org / apache / cassandra / cql / DropIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / DropIndexStatement . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class DropIndexStatement 
 { 
 ColumnDefinition column = findIndexedColumn ( cfm ) ; 
 assert column ! = null ; 
 - CFMetaData cloned = cfm . clone ( ) ; 
 + CFMetaData cloned = cfm . copy ( ) ; 
 ColumnDefinition toChange = cloned . getColumnDefinition ( column . name ) ; 
 assert toChange . getIndexName ( ) ! = null & & toChange . getIndexName ( ) . equals ( indexName ) ; 
 toChange . setIndexName ( null ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index 3d5c3f1 . . 458f131 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 681 , 7 + 681 , 7 @ @ public class QueryProcessor 
 boolean columnExists = false ; 
 ByteBuffer columnName = createIdx . getColumnName ( ) . getByteBuffer ( ) ; 
 / / mutating oldCfm directly would be bad , but mutating a copy is fine . 
 - CFMetaData cfm = oldCfm . clone ( ) ; 
 + CFMetaData cfm = oldCfm . copy ( ) ; 
 for ( ColumnDefinition cd : cfm . regularColumns ( ) ) 
 { 
 if ( cd . name . bytes . equals ( columnName ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 51b2865 . . 27acb3c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 public void announceMigration ( ) throws RequestValidationException 
 { 
 CFMetaData meta = validateColumnFamily ( keyspace ( ) , columnFamily ( ) ) ; 
 - CFMetaData cfm = meta . clone ( ) ; 
 + CFMetaData cfm = meta . copy ( ) ; 
 
 CQL3Type validator = this . validator = = null ? null : this . validator . prepare ( keyspace ( ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 index 4ce9283 . . f8731ce 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 @ @ - 115 , 7 + 115 , 7 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 { 
 for ( CFMetaData cfm : ksm2 . cfMetaData ( ) . values ( ) ) 
 { 
 - CFMetaData copy = cfm . clone ( ) ; 
 + CFMetaData copy = cfm . copy ( ) ; 
 boolean modified = false ; 
 for ( ColumnDefinition def : copy . allColumns ( ) ) 
 modified | = updateDefinition ( copy , def , toUpdate . keyspace , toUpdate . name , updated ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 index 49a669f . . ea1f933 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement 
 public void announceMigration ( ) throws RequestValidationException 
 { 
 logger . debug ( " Updating column { } definition for index { } " , target . column , indexName ) ; 
 - CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; 
 + CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; 
 ColumnDefinition cd = cfm . getColumnDefinition ( target . column ) ; 
 
 if ( cd . getIndexType ( ) ! = null & & ifNotExists ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 index 329b7bc . . 7b4543f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class CreateTriggerStatement extends SchemaAlteringStatement 
 
 public void announceMigration ( ) throws ConfigurationException 
 { 
 - CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; 
 + CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; 
 cfm . addTriggerDefinition ( TriggerDefinition . create ( triggerName , triggerClass ) ) ; 
 logger . info ( " Adding trigger with name { } and class { } " , triggerName , triggerClass ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm , false ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 index c62ad47 . . aa17d51 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class DropIndexStatement extends SchemaAlteringStatement 
 { 
 ColumnDefinition column = findIndexedColumn ( cfm ) ; 
 assert column ! = null ; 
 - CFMetaData cloned = cfm . clone ( ) ; 
 + CFMetaData cloned = cfm . copy ( ) ; 
 ColumnDefinition toChange = cloned . getColumnDefinition ( column . name ) ; 
 assert toChange . getIndexName ( ) ! = null & & toChange . getIndexName ( ) . equals ( indexName ) ; 
 toChange . setIndexName ( null ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 index ce17047 . . c9b33a1 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 @ @ - 55 , 7 + 55 , 7 @ @ public class DropTriggerStatement extends SchemaAlteringStatement 
 
 public void announceMigration ( ) throws ConfigurationException 
 { 
 - CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . clone ( ) ; 
 + CFMetaData cfm = Schema . instance . getCFMetaData ( keyspace ( ) , columnFamily ( ) ) . copy ( ) ; 
 if ( ! cfm . removeTrigger ( triggerName ) ) 
 throw new ConfigurationException ( String . format ( " Trigger % s was not found " , triggerName ) ) ; 
 logger . info ( " Dropping trigger with name { } " , triggerName ) ; 
 diff - - git a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java 
 index d0ff179 . . 47f4f20 100644 
 - - - a / test / unit / org / apache / cassandra / config / CFMetaDataTest . java 
 + + + b / test / unit / org / apache / cassandra / config / CFMetaDataTest . java 
 @ @ - 109 , 7 + 109 , 7 @ @ public class CFMetaDataTest extends SchemaLoader 
 checkInverses ( cfm ) ; 
 
 / / Testing with compression to catch # 3558 
 - CFMetaData withCompression = cfm . clone ( ) ; 
 + CFMetaData withCompression = cfm . copy ( ) ; 
 withCompression . compressionParameters ( new CompressionParameters ( SnappyCompressor . instance , 32768 , new HashMap < String , String > ( ) ) ) ; 
 checkInverses ( withCompression ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / config / DefsTest . java b / test / unit / org / apache / cassandra / config / DefsTest . java 
 index 1251ff7 . . 2e1876f 100644 
 - - - a / test / unit / org / apache / cassandra / config / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DefsTest . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class DefsTest extends SchemaLoader 
 / / we ' ll be adding this one later . make sure it ' s not already there . 
 assert cfm . getColumnDefinition ( ByteBuffer . wrap ( new byte [ ] { 5 } ) ) = = null ; 
 
 - CFMetaData cfNew = cfm . clone ( ) ; 
 + CFMetaData cfNew = cfm . copy ( ) ; 
 
 / / add one . 
 ColumnDefinition addIndexDef = ColumnDefinition . regularDef ( cfm , ByteBuffer . wrap ( new byte [ ] { 5 } ) , BytesType . instance , null ) 
 @ @ - 411 , 7 + 411 , 7 @ @ public class DefsTest extends SchemaLoader 
 assert Schema . instance . getCFMetaData ( cf . ksName , cf . cfName ) ! = null ; 
 
 / / updating certain fields should fail . 
 - CFMetaData newCfm = cf . clone ( ) ; 
 + CFMetaData newCfm = cf . copy ( ) ; 
 newCfm . defaultValidator ( BytesType . instance ) ; 
 newCfm . minCompactionThreshold ( 5 ) ; 
 newCfm . maxCompactionThreshold ( 31 ) ; 
 @ @ - 444 , 7 + 444 , 7 @ @ public class DefsTest extends SchemaLoader 
 assert Schema . instance . getCFMetaData ( cf . ksName , cf . cfName ) . getDefaultValidator ( ) = = UTF8Type . instance ; 
 
 / / Change cfId 
 - newCfm = new CFMetaData ( cf . ksName , cf . cfName , cf . cfType , cf . comparator , UUID . randomUUID ( ) ) ; 
 + newCfm = new CFMetaData ( cf . ksName , cf . cfName , cf . cfType , cf . comparator ) ; 
 CFMetaData . copyOpts ( newCfm , cf ) ; 
 try 
 { 
 @ @ - 511 , 7 + 511 , 7 @ @ public class DefsTest extends SchemaLoader 
 Descriptor desc = indexedCfs . getSSTables ( ) . iterator ( ) . next ( ) . descriptor ; 
 
 / / drop the index 
 - CFMetaData meta = cfs . metadata . clone ( ) ; 
 + CFMetaData meta = cfs . metadata . copy ( ) ; 
 ColumnDefinition cdOld = meta . regularColumns ( ) . iterator ( ) . next ( ) ; 
 ColumnDefinition cdNew = ColumnDefinition . regularDef ( meta , cdOld . name . bytes , cdOld . type , null ) ; 
 meta . addOrReplaceColumnDefinition ( cdNew ) ; 
 diff - - git a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java 
 index 35d851e . . 05ac588 100644 
 - - - a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java 
 + + + b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class ThriftValidationTest extends SchemaLoader 
 public void testColumnNameEqualToKeyAlias ( ) 
 { 
 CFMetaData metaData = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) ; 
 - CFMetaData newMetadata = metaData . clone ( ) ; 
 + CFMetaData newMetadata = metaData . copy ( ) ; 
 
 boolean gotException = false ; 
 
 diff - - git a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java 
 index f9d71ee . . c6a1ac5 100644 
 - - - a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java 
 + + + b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class TriggersSchemaTest extends SchemaLoader 
 Collections . singletonList ( cfm1 ) ) ; 
 MigrationManager . announceNewKeyspace ( ksm ) ; 
 
 - CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . clone ( ) ; 
 + CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; 
 TriggerDefinition td = TriggerDefinition . create ( triggerName , triggerClass ) ; 
 cfm2 . addTriggerDefinition ( td ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; 
 @ @ - 116 , 11 + 116 , 11 @ @ public class TriggersSchemaTest extends SchemaLoader 
 Collections . singletonList ( cfm1 ) ) ; 
 MigrationManager . announceNewKeyspace ( ksm ) ; 
 
 - CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . clone ( ) ; 
 + CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; 
 cfm2 . removeTrigger ( triggerName ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; 
 
 - CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . clone ( ) ; 
 + CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; 
 assertTrue ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 958b9ae . . 0e631ea 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1239 , 6 + 1239 , 8 @ @ syntax _ rules + = r ' ' ' 
 | " ADD " newcol = < cident > < storageType > 
 | " DROP " existcol = < cident > 
 | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * 
 + | " RENAME " existcol = < cident > " TO " newcol = < cident > 
 + ( " AND " existcol = < cident > " TO " newcol = < cident > ) * 
 ; 
 ' ' ' 
 
 diff - - git a / pylib / cqlshlib / helptopics . py b / pylib / cqlshlib / helptopics . py 
 index c9dae31 . . cdbb8f4 100644 
 - - - a / pylib / cqlshlib / helptopics . py 
 + + + b / pylib / cqlshlib / helptopics . py 
 @ @ - 902 , 8 + 902 , 37 @ @ class CQL3HelpTopics ( CQLHelpTopics ) : 
 print " HELP CREATE _ USER ; " 
 
 def help _ alter ( self ) : 
 - super ( CQL3HelpTopics , self ) . help _ alter ( ) 
 - print " HELP ALTER _ USER ; " 
 + print " " " 
 + ALTER TABLE < tablename > ALTER < columnname > TYPE < type > ; 
 + ALTER TABLE < tablename > ADD < columnname > < type > ; 
 + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > 
 + [ AND < columnname > TO < columnname > ] 
 + ALTER TABLE < tablename > WITH < optionname > = < val > [ AND < optionname > = < val > [ . . . ] ] ; 
 + 
 + An ALTER statement is used to manipulate table metadata . It allows you 
 + to add new typed columns , drop existing columns , change the data 
 + storage type of existing columns , or change table properties . 
 + No results are returned . 
 + 
 + See one of the following for more information : 
 + 
 + HELP ALTER _ ALTER ; 
 + HELP ALTER _ ADD ; 
 + HELP ALTER _ DROP ; 
 + HELP ALTER _ RENAME ; 
 + HELP ALTER _ WITH ; 
 + " " " 
 + 
 + def help _ alter _ rename ( self ) : 
 + print " " " 
 + ALTER TABLE : renaming a column 
 + 
 + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > 
 + [ AND < columnname > TO < columnname > ] 
 + 
 + The ALTER TABLE . . . RENAME variant renames a typed column in a column 
 + family . 
 + " " " 
 
 def help _ drop ( self ) : 
 super ( CQL3HelpTopics , self ) . help _ drop ( )
