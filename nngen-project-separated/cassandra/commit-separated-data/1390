BLEU SCORE: 0.0726788421210274

TEST MSG: Fix ordering with IN restriction on partition key
GENERATED MSG: Fix NPE in SelectStatement with empty IN values

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java <nl> index b49d774 . . 3a20f6a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions <nl> this . slice = true ; <nl> else if ( restriction . isContains ( ) | | primaryKeyRestrictions . isContains ( ) ) <nl> this . contains = true ; <nl> - else if ( restriction . isIN ( ) ) <nl> + else if ( restriction . isIN ( ) | | primaryKeyRestrictions . isIN ( ) ) <nl> this . in = true ; <nl> else <nl> this . eq = true ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java <nl> index e788095 . . 699ade8 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import org . junit . Test ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> <nl> import static org . junit . Assert . assertTrue ; <nl> + import static java . util . Arrays . asList ; <nl> <nl> public class SelectOrderByTest extends CQLTester <nl> { <nl> @ @ - 488 , 6 + 489 , 48 @ @ public class SelectOrderByTest extends CQLTester <nl> assertTrue ( isFirstIntSorted ( results ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testInOrderByWithTwoPartitionKeyColumns ( ) throws Throwable <nl> + { <nl> + for ( String option : asList ( " " , " WITH CLUSTERING ORDER BY ( col _ 3 DESC ) " ) ) <nl> + { <nl> + createTable ( " CREATE TABLE % s ( col _ 1 int , col _ 2 int , col _ 3 int , PRIMARY KEY ( ( col _ 1 , col _ 2 ) , col _ 3 ) ) " + option ) ; <nl> + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; <nl> + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 1 , 2 ) ; <nl> + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 1 , 13 ) ; <nl> + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 2 , 10 ) ; <nl> + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 2 , 11 ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where col _ 1 = ? and col _ 2 IN ( ? , ? ) order by col _ 3 ; " , 1 , 1 , 2 ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 1 , 1 , 2 ) , <nl> + row ( 1 , 2 , 10 ) , <nl> + row ( 1 , 2 , 11 ) , <nl> + row ( 1 , 1 , 13 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where col _ 1 = ? and col _ 2 IN ( ? , ? ) order by col _ 3 desc ; " , 1 , 1 , 2 ) , <nl> + row ( 1 , 1 , 13 ) , <nl> + row ( 1 , 2 , 11 ) , <nl> + row ( 1 , 2 , 10 ) , <nl> + row ( 1 , 1 , 2 ) , <nl> + row ( 1 , 1 , 1 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where col _ 2 IN ( ? , ? ) and col _ 1 = ? order by col _ 3 ; " , 1 , 2 , 1 ) , <nl> + row ( 1 , 1 , 1 ) , <nl> + row ( 1 , 1 , 2 ) , <nl> + row ( 1 , 2 , 10 ) , <nl> + row ( 1 , 2 , 11 ) , <nl> + row ( 1 , 1 , 13 ) ) ; <nl> + <nl> + assertRows ( execute ( " select * from % s where col _ 2 IN ( ? , ? ) and col _ 1 = ? order by col _ 3 desc ; " , 1 , 2 , 1 ) , <nl> + row ( 1 , 1 , 13 ) , <nl> + row ( 1 , 2 , 11 ) , <nl> + row ( 1 , 2 , 10 ) , <nl> + row ( 1 , 1 , 2 ) , <nl> + row ( 1 , 1 , 1 ) ) ; <nl> + } <nl> + } <nl> + <nl> private boolean isFirstIntSorted ( Object [ ] [ ] rows ) <nl> { <nl> for ( int i = 1 ; i < rows . length ; i + + )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java 
 index b49d774 . . 3a20f6a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / PrimaryKeyRestrictionSet . java 
 @ @ - 98 , 7 + 98 , 7 @ @ final class PrimaryKeyRestrictionSet extends AbstractPrimaryKeyRestrictions 
 this . slice = true ; 
 else if ( restriction . isContains ( ) | | primaryKeyRestrictions . isContains ( ) ) 
 this . contains = true ; 
 - else if ( restriction . isIN ( ) ) 
 + else if ( restriction . isIN ( ) | | primaryKeyRestrictions . isIN ( ) ) 
 this . in = true ; 
 else 
 this . eq = true ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java 
 index e788095 . . 699ade8 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectOrderByTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import org . junit . Test ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 
 import static org . junit . Assert . assertTrue ; 
 + import static java . util . Arrays . asList ; 
 
 public class SelectOrderByTest extends CQLTester 
 { 
 @ @ - 488 , 6 + 489 , 48 @ @ public class SelectOrderByTest extends CQLTester 
 assertTrue ( isFirstIntSorted ( results ) ) ; 
 } 
 
 + @ Test 
 + public void testInOrderByWithTwoPartitionKeyColumns ( ) throws Throwable 
 + { 
 + for ( String option : asList ( " " , " WITH CLUSTERING ORDER BY ( col _ 3 DESC ) " ) ) 
 + { 
 + createTable ( " CREATE TABLE % s ( col _ 1 int , col _ 2 int , col _ 3 int , PRIMARY KEY ( ( col _ 1 , col _ 2 ) , col _ 3 ) ) " + option ) ; 
 + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 1 , 1 ) ; 
 + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 1 , 2 ) ; 
 + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 1 , 13 ) ; 
 + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 2 , 10 ) ; 
 + execute ( " INSERT INTO % s ( col _ 1 , col _ 2 , col _ 3 ) VALUES ( ? , ? , ? ) " , 1 , 2 , 11 ) ; 
 + 
 + assertRows ( execute ( " select * from % s where col _ 1 = ? and col _ 2 IN ( ? , ? ) order by col _ 3 ; " , 1 , 1 , 2 ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 1 , 1 , 2 ) , 
 + row ( 1 , 2 , 10 ) , 
 + row ( 1 , 2 , 11 ) , 
 + row ( 1 , 1 , 13 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where col _ 1 = ? and col _ 2 IN ( ? , ? ) order by col _ 3 desc ; " , 1 , 1 , 2 ) , 
 + row ( 1 , 1 , 13 ) , 
 + row ( 1 , 2 , 11 ) , 
 + row ( 1 , 2 , 10 ) , 
 + row ( 1 , 1 , 2 ) , 
 + row ( 1 , 1 , 1 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where col _ 2 IN ( ? , ? ) and col _ 1 = ? order by col _ 3 ; " , 1 , 2 , 1 ) , 
 + row ( 1 , 1 , 1 ) , 
 + row ( 1 , 1 , 2 ) , 
 + row ( 1 , 2 , 10 ) , 
 + row ( 1 , 2 , 11 ) , 
 + row ( 1 , 1 , 13 ) ) ; 
 + 
 + assertRows ( execute ( " select * from % s where col _ 2 IN ( ? , ? ) and col _ 1 = ? order by col _ 3 desc ; " , 1 , 2 , 1 ) , 
 + row ( 1 , 1 , 13 ) , 
 + row ( 1 , 2 , 11 ) , 
 + row ( 1 , 2 , 10 ) , 
 + row ( 1 , 1 , 2 ) , 
 + row ( 1 , 1 , 1 ) ) ; 
 + } 
 + } 
 + 
 private boolean isFirstIntSorted ( Object [ ] [ ] rows ) 
 { 
 for ( int i = 1 ; i < rows . length ; i + + )

NEAREST DIFF:
ELIMINATEDSENTENCE
