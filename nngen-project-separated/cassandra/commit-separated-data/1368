BLEU SCORE: 0.007718322034097671

TEST MSG: Only use batchlog when paired materialized view replica is remote
GENERATED MSG: fix self - hinting of timed out read repair updates and make hinted handoff less prone to OOMing a coordinator

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9cfbd64 . . 2695233 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 0 - beta2 <nl> + * Only use batchlog when paired materialized view replica is remote ( CASSANDRA - 10061 ) <nl> * Reuse TemporalRow when updating multiple MaterializedViews ( CASSANDRA - 10060 ) <nl> * Validate gc _ grace _ seconds for batchlog writes and MVs ( CASSANDRA - 9917 ) <nl> * Fix sstablerepairedset ( CASSANDRA - 10132 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index f58ac56 . . 25789bb 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 24 , 9 + 24 , 12 @ @ import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> + import java . util . stream . Collectors ; <nl> + import javax . annotation . Nullable ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> + import com . google . common . base . Function ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . collect . * ; <nl> @ @ - 675 , 7 + 678 , 8 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> String keyspaceName = mutation . getKeyspaceName ( ) ; <nl> Token tk = mutation . key ( ) . getToken ( ) ; <nl> - List < InetAddress > naturalEndpoints = Lists . newArrayList ( MaterializedViewUtils . getViewNaturalEndpoint ( keyspaceName , baseToken , tk ) ) ; <nl> + InetAddress pairedEndpoint = MaterializedViewUtils . getViewNaturalEndpoint ( keyspaceName , baseToken , tk ) ; <nl> + List < InetAddress > naturalEndpoints = Lists . newArrayList ( pairedEndpoint ) ; <nl> <nl> WriteResponseHandlerWrapper wrapper = wrapMVBatchResponseHandler ( mutation , <nl> consistencyLevel , <nl> @ @ - 684 , 14 + 688 , 27 @ @ public class StorageProxy implements StorageProxyMBean <nl> WriteType . BATCH , <nl> cleanup ) ; <nl> <nl> - wrappers . add ( wrapper ) ; <nl> + / / When local node is the endpoint and there are no pending nodes we can <nl> + / / Just apply the mutation locally . <nl> + if ( pairedEndpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) & & <nl> + wrapper . handler . pendingEndpoints . isEmpty ( ) ) <nl> + { <nl> + mutation . apply ( ) ; <nl> + } <nl> + else <nl> + { <nl> + wrappers . add ( wrapper ) ; <nl> + } <nl> } <nl> <nl> - / / Apply to local batchlog memtable in this thread <nl> - BatchlogManager . getBatchlogMutationFor ( mutations , batchUUID , MessagingService . current _ version ) . apply ( ) ; <nl> + if ( ! wrappers . isEmpty ( ) ) <nl> + { <nl> + / / Apply to local batchlog memtable in this thread <nl> + BatchlogManager . getBatchlogMutationFor ( Lists . transform ( wrappers , w - > w . mutation ) , batchUUID , MessagingService . current _ version ) . apply ( ) ; <nl> <nl> - / / now actually perform the writes and wait for them to complete <nl> - asyncWriteBatchedMutations ( wrappers , localDataCenter , Stage . MATERIALIZED _ VIEW _ MUTATION ) ; <nl> + / / now actually perform the writes and wait for them to complete <nl> + asyncWriteBatchedMutations ( wrappers , localDataCenter , Stage . MATERIALIZED _ VIEW _ MUTATION ) ; <nl> + } <nl> } <nl> catch ( WriteTimeoutException ex ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index afdab1c . . d98ac86 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 9 @ @ <nl> <nl> <nl> 1 . 0 . 4 <nl> + * fix self - hinting of timed out read repair updates and make hinted handoff <nl> + less prone to OOMing a coordinator ( CASSANDRA - 3440 ) <nl> + * expose bloom filter sizes via JMX ( CASSANDRA - 3495 ) <nl> * enforce RP tokens 0 . . 2 * * 127 ( CASSANDRA - 3501 ) <nl> * canonicalize paths exposed through JMX ( CASSANDRA - 3504 ) <nl> * fix " liveSize " stat when sstables are removed ( CASSANDRA - 3496 ) <nl> @ @ - 23 , 7 + 26 , 6 @ @ <nl> Merged from 0 . 8 : <nl> * fix concurrence issue in the FailureDetector ( CASSANDRA - 3519 ) <nl> * fix array out of bounds error in counter shard removal ( CASSANDRA - 3514 ) <nl> - Merged from 0 . 8 : <nl> * avoid dropping tombstones when they might still be needed to shadow <nl> data in a different sstable ( CASSANDRA - 2786 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d4fe07e . . 6bf4882 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1647 , 7 + 1647 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return data . getRecentBloomFilterFalseRatio ( ) ; <nl> } <nl> <nl> - <nl> + public long getBloomFilterDiskSpaceUsed ( ) <nl> + { <nl> + long total = 0 ; <nl> + for ( SSTableReader sst : getSSTables ( ) ) <nl> + total + = sst . getBloomFilterSerializedSize ( ) ; <nl> + return total ; <nl> + } <nl> <nl> @ Override <nl> public String toString ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 49030c1 . . 4b7c8f5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 184 , 6 + 184 , 8 @ @ public interface ColumnFamilyStoreMBean <nl> <nl> public double getRecentBloomFilterFalseRatio ( ) ; <nl> <nl> + public long getBloomFilterDiskSpaceUsed ( ) ; <nl> + <nl> / * * <nl> * Gets the minimum number of sstables in queue before compaction kicks off <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java <nl> index 2f8e87b . . 6695c19 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / RowMutation . java <nl> @ @ - 263 , 10 + 263 , 10 @ @ public class RowMutation implements IMutation , MessageProducer <nl> <nl> public Message getMessage ( Integer version ) throws IOException <nl> { <nl> - return makeRowMutationMessage ( StorageService . Verb . MUTATION , version ) ; <nl> + return getMessage ( StorageService . Verb . MUTATION , version ) ; <nl> } <nl> <nl> - public Message makeRowMutationMessage ( StorageService . Verb verb , int version ) throws IOException <nl> + public Message getMessage ( StorageService . Verb verb , int version ) throws IOException <nl> { <nl> return new Message ( FBUtilities . getBroadcastAddress ( ) , verb , getSerializedBuffer ( version ) , version ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index c4d858f . . 9acf84b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 431 , 6 + 431 , 14 @ @ public class SSTableReader extends SSTable <nl> return bf ; <nl> } <nl> <nl> + public long getBloomFilterSerializedSize ( ) <nl> + { <nl> + if ( descriptor . usesOldBloomFilter ) <nl> + return LegacyBloomFilter . serializer ( ) . serializedSize ( ( LegacyBloomFilter ) bf ) ; <nl> + else <nl> + return BloomFilter . serializer ( ) . serializedSize ( ( BloomFilter ) bf ) ; <nl> + } <nl> + <nl> / * * <nl> * @ return An estimate of the number of keys in this SSTable . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index e822257 . . 331b9aa 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import java . nio . channels . AsynchronousCloseException ; <nl> import java . nio . channels . ServerSocketChannel ; <nl> import java . util . * ; <nl> import java . util . concurrent . ExecutorService ; <nl> - import java . util . concurrent . Future ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> @ @ - 36 , 7 + 35 , 6 @ @ import javax . management . ObjectName ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . Lists ; <nl> - <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 170 , 9 + 168 , 16 @ @ public final class MessagingService implements MessagingServiceMBean <nl> <nl> if ( expiredCallbackInfo . shouldHint ( ) ) <nl> { <nl> - / / Trigger hints for expired mutation message . <nl> assert expiredCallbackInfo . message ! = null ; <nl> - scheduleMutationHint ( expiredCallbackInfo . message , expiredCallbackInfo . target ) ; <nl> + try <nl> + { <nl> + RowMutation rm = RowMutation . fromBytes ( expiredCallbackInfo . message . getMessageBody ( ) , expiredCallbackInfo . message . getVersion ( ) ) ; <nl> + return StorageProxy . scheduleLocalHint ( rm , expiredCallbackInfo . target , null , null ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " Unable to deserialize mutation when writting hint for : " + expiredCallbackInfo . target ) ; <nl> + } <nl> } <nl> <nl> return null ; <nl> @ @ - 192 , 21 + 197 , 6 @ @ public final class MessagingService implements MessagingServiceMBean <nl> } <nl> } <nl> <nl> - <nl> - private Future < ? > scheduleMutationHint ( Message mutationMessage , InetAddress mutationTarget ) <nl> - { <nl> - try <nl> - { <nl> - RowMutation rm = RowMutation . fromBytes ( mutationMessage . getMessageBody ( ) , mutationMessage . getVersion ( ) ) ; <nl> - return StorageProxy . scheduleLocalHint ( rm , mutationTarget , null , null ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - logger _ . error ( " Unable to deserialize mutation when writting hint for : " + mutationTarget ) ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> / * * <nl> * Track latency information for the dynamic snitch <nl> * @ param cb the callback associated with this message - - this lets us know if it ' s a message type we ' re interested in <nl> diff - - git a / src / java / org / apache / cassandra / service / RowRepairResolver . java b / src / java / org / apache / cassandra / service / RowRepairResolver . java <nl> index e1d9df0 . . 728d703 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RowRepairResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RowRepairResolver . java <nl> @ @ - 124 , 7 + 124 , 10 @ @ public class RowRepairResolver extends AbstractRowResolver <nl> Message repairMessage ; <nl> try <nl> { <nl> - repairMessage = rowMutation . getMessage ( Gossiper . instance . getVersion ( endpoints . get ( i ) ) ) ; <nl> + / / use a separate verb here because we don ' t want these to be get the white glove hint - <nl> + / / on - timeout behavior that a " real " mutation gets <nl> + repairMessage = rowMutation . getMessage ( StorageService . Verb . READ _ REPAIR , <nl> + Gossiper . instance . getVersion ( endpoints . get ( i ) ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index ce22cbf . . 9eeec94 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 30 , 12 + 30 , 11 @ @ import java . util . concurrent . atomic . AtomicLong ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> + import com . google . common . base . Function ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Iterables ; <nl> + import com . google . common . collect . MapMaker ; <nl> import com . google . common . collect . Multimap ; <nl> - <nl> - import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . net . * ; <nl> import org . apache . commons . lang . ArrayUtils ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> @ @ - 45 , 6 + 44 , 7 @ @ import org . apache . cassandra . concurrent . CreationTimeAwareFuture ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . dht . AbstractBounds ; <nl> @ @ - 59 , 10 + 59 , 7 @ @ import org . apache . cassandra . locator . IEndpointSnitch ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . thrift . * ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . LatencyTracker ; <nl> - import org . apache . cassandra . utils . Pair ; <nl> + import org . apache . cassandra . utils . * ; <nl> <nl> <nl> public class StorageProxy implements StorageProxyMBean <nl> @ @ - 86 , 7 + 83 , 14 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static volatile boolean hintedHandoffEnabled = DatabaseDescriptor . hintedHandoffEnabled ( ) ; <nl> private static volatile int maxHintWindow = DatabaseDescriptor . getMaxHintWindow ( ) ; <nl> private static volatile int maxHintsInProgress = 1024 * Runtime . getRuntime ( ) . availableProcessors ( ) ; <nl> - private static final AtomicInteger hintsInProgress = new AtomicInteger ( ) ; <nl> + private static final AtomicInteger totalHintsInProgress = new AtomicInteger ( ) ; <nl> + private static final Map < InetAddress , AtomicInteger > hintsInProgress = new MapMaker ( ) . concurrencyLevel ( 1 ) . makeComputingMap ( new Function < InetAddress , AtomicInteger > ( ) <nl> + { <nl> + public AtomicInteger apply ( InetAddress inetAddress ) <nl> + { <nl> + return new AtomicInteger ( 0 ) ; <nl> + } <nl> + } ) ; <nl> private static final AtomicLong totalHints = new AtomicLong ( ) ; <nl> <nl> private StorageProxy ( ) { } <nl> @ @ - 286 , 10 + 290 , 19 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> for ( InetAddress destination : targets ) <nl> { <nl> - if ( FailureDetector . instance . isAlive ( destination ) ) <nl> + / / avoid OOMing due to excess hints . we need to do this check even for " live " nodes , since we can <nl> + / / still generate hints for those if it ' s overloaded or simply dead but not yet known - to - be - dead . <nl> + / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to <nl> + / / a small number of nodes causing problems , so we should avoid shutting down writes completely to <nl> + / / healthy nodes . Any node with no hintsInProgress is considered healthy . <nl> + if ( totalHintsInProgress . get ( ) > maxHintsInProgress <nl> + & & ( hintsInProgress . get ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) <nl> { <nl> - String dc = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( destination ) ; <nl> + throw new TimeoutException ( ) ; <nl> + } <nl> <nl> + if ( FailureDetector . instance . isAlive ( destination ) ) <nl> + { <nl> if ( destination . equals ( FBUtilities . getBroadcastAddress ( ) ) & & OPTIMIZE _ LOCAL _ REQUESTS ) <nl> { <nl> insertLocal ( rm , responseHandler ) ; <nl> @ @ - 300 , 6 + 313 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " insert writing key " + ByteBufferUtil . bytesToHex ( rm . key ( ) ) + " to " + destination ) ; <nl> <nl> + String dc = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( destination ) ; <nl> Multimap < Message , InetAddress > messages = dcMessages . get ( dc ) ; <nl> if ( messages = = null ) <nl> { <nl> @ @ - 315 , 11 + 329 , 6 @ @ public class StorageProxy implements StorageProxyMBean <nl> if ( ! shouldHint ( destination ) ) <nl> continue ; <nl> <nl> - / / Avoid OOMing from hints waiting to be written . ( Unlike ordinary mutations , hint <nl> - / / not eligible to drop if we fall behind . ) <nl> - if ( hintsInProgress . get ( ) > maxHintsInProgress ) <nl> - throw new TimeoutException ( ) ; <nl> - <nl> / / Schedule a local hint and let the handler know it needs to wait for the hint to complete too <nl> Future < Void > hintfuture = scheduleLocalHint ( rm , destination , responseHandler , consistency _ level ) ; <nl> responseHandler . addFutureForHint ( new CreationTimeAwareFuture < Void > ( hintfuture ) ) ; <nl> @ @ - 337 , 12 + 346 , 13 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> / / Hint of itself doesn ' t make sense . <nl> assert ! target . equals ( FBUtilities . getBroadcastAddress ( ) ) : target ; <nl> - hintsInProgress . incrementAndGet ( ) ; <nl> + totalHintsInProgress . incrementAndGet ( ) ; <nl> + final AtomicInteger targetHints = hintsInProgress . get ( target ) ; <nl> + targetHints . incrementAndGet ( ) ; <nl> <nl> - Runnable runnable = new Runnable ( ) <nl> + Runnable runnable = new WrappedRunnable ( ) <nl> { <nl> - <nl> - public void run ( ) <nl> + public void runMayThrow ( ) throws IOException <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Adding hint for " + target ) ; <nl> @ @ - 360 , 14 + 370 , 10 @ @ public class StorageProxy implements StorageProxyMBean <nl> if ( responseHandler ! = null & & consistencyLevel = = ConsistencyLevel . ANY ) <nl> responseHandler . response ( null ) ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> finally <nl> { <nl> - / / Decrement the current hint in the execution after the task is done . <nl> - hintsInProgress . decrementAndGet ( ) ; <nl> + totalHintsInProgress . decrementAndGet ( ) ; <nl> + targetHints . decrementAndGet ( ) ; <nl> } <nl> } <nl> } ; <nl> @ @ - 730 , 6 + 736 , 8 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> ReadCommand command = repairCommands . get ( i ) ; <nl> RepairCallback handler = repairResponseHandlers . get ( i ) ; <nl> + / / wait for the repair writes to be acknowledged , to minimize impact on any replica that ' s <nl> + / / behind on writes in case the out - of - sync row is read multiple times in quick succession <nl> FBUtilities . waitOnFutures ( handler . resolver . repairResults , DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> <nl> Row row ; <nl> @ @ - 1279 , 7 + 1287 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public int getHintsInProgress ( ) <nl> { <nl> - return hintsInProgress . get ( ) ; <nl> + return totalHintsInProgress . get ( ) ; <nl> } <nl> <nl> public void verifyNoHintsInProgress ( ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index d646d77 . . 023b63a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 464 , 6 + 464 , 7 @ @ public class NodeCmd <nl> outs . println ( " \ t \ tPending Tasks : " + cfstore . getPendingTasks ( ) ) ; <nl> outs . println ( " \ t \ tBloom Filter False Postives : " + cfstore . getBloomFilterFalsePositives ( ) ) ; <nl> outs . println ( " \ t \ tBloom Filter False Ratio : " + String . format ( " % 01 . 5f " , cfstore . getRecentBloomFilterFalseRatio ( ) ) ) ; <nl> + outs . println ( " \ t \ tBloom Filter Space Used : " + cfstore . getBloomFilterDiskSpaceUsed ( ) ) ; <nl> <nl> InstrumentingCacheMBean keyCacheMBean = probe . getKeyCacheMBean ( tableName , cfstore . getColumnFamilyName ( ) ) ; <nl> if ( keyCacheMBean . getCapacity ( ) > 0 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9cfbd64 . . 2695233 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 0 - beta2 
 + * Only use batchlog when paired materialized view replica is remote ( CASSANDRA - 10061 ) 
 * Reuse TemporalRow when updating multiple MaterializedViews ( CASSANDRA - 10060 ) 
 * Validate gc _ grace _ seconds for batchlog writes and MVs ( CASSANDRA - 9917 ) 
 * Fix sstablerepairedset ( CASSANDRA - 10132 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index f58ac56 . . 25789bb 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 24 , 9 + 24 , 12 @ @ import java . nio . ByteBuffer ; 
 import java . util . * ; 
 import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 + import java . util . stream . Collectors ; 
 + import javax . annotation . Nullable ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 + import com . google . common . base . Function ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . collect . * ; 
 @ @ - 675 , 7 + 678 , 8 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 String keyspaceName = mutation . getKeyspaceName ( ) ; 
 Token tk = mutation . key ( ) . getToken ( ) ; 
 - List < InetAddress > naturalEndpoints = Lists . newArrayList ( MaterializedViewUtils . getViewNaturalEndpoint ( keyspaceName , baseToken , tk ) ) ; 
 + InetAddress pairedEndpoint = MaterializedViewUtils . getViewNaturalEndpoint ( keyspaceName , baseToken , tk ) ; 
 + List < InetAddress > naturalEndpoints = Lists . newArrayList ( pairedEndpoint ) ; 
 
 WriteResponseHandlerWrapper wrapper = wrapMVBatchResponseHandler ( mutation , 
 consistencyLevel , 
 @ @ - 684 , 14 + 688 , 27 @ @ public class StorageProxy implements StorageProxyMBean 
 WriteType . BATCH , 
 cleanup ) ; 
 
 - wrappers . add ( wrapper ) ; 
 + / / When local node is the endpoint and there are no pending nodes we can 
 + / / Just apply the mutation locally . 
 + if ( pairedEndpoint . equals ( FBUtilities . getBroadcastAddress ( ) ) & & 
 + wrapper . handler . pendingEndpoints . isEmpty ( ) ) 
 + { 
 + mutation . apply ( ) ; 
 + } 
 + else 
 + { 
 + wrappers . add ( wrapper ) ; 
 + } 
 } 
 
 - / / Apply to local batchlog memtable in this thread 
 - BatchlogManager . getBatchlogMutationFor ( mutations , batchUUID , MessagingService . current _ version ) . apply ( ) ; 
 + if ( ! wrappers . isEmpty ( ) ) 
 + { 
 + / / Apply to local batchlog memtable in this thread 
 + BatchlogManager . getBatchlogMutationFor ( Lists . transform ( wrappers , w - > w . mutation ) , batchUUID , MessagingService . current _ version ) . apply ( ) ; 
 
 - / / now actually perform the writes and wait for them to complete 
 - asyncWriteBatchedMutations ( wrappers , localDataCenter , Stage . MATERIALIZED _ VIEW _ MUTATION ) ; 
 + / / now actually perform the writes and wait for them to complete 
 + asyncWriteBatchedMutations ( wrappers , localDataCenter , Stage . MATERIALIZED _ VIEW _ MUTATION ) ; 
 + } 
 } 
 catch ( WriteTimeoutException ex ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index afdab1c . . d98ac86 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 9 @ @ 
 
 
 1 . 0 . 4 
 + * fix self - hinting of timed out read repair updates and make hinted handoff 
 + less prone to OOMing a coordinator ( CASSANDRA - 3440 ) 
 + * expose bloom filter sizes via JMX ( CASSANDRA - 3495 ) 
 * enforce RP tokens 0 . . 2 * * 127 ( CASSANDRA - 3501 ) 
 * canonicalize paths exposed through JMX ( CASSANDRA - 3504 ) 
 * fix " liveSize " stat when sstables are removed ( CASSANDRA - 3496 ) 
 @ @ - 23 , 7 + 26 , 6 @ @ 
 Merged from 0 . 8 : 
 * fix concurrence issue in the FailureDetector ( CASSANDRA - 3519 ) 
 * fix array out of bounds error in counter shard removal ( CASSANDRA - 3514 ) 
 - Merged from 0 . 8 : 
 * avoid dropping tombstones when they might still be needed to shadow 
 data in a different sstable ( CASSANDRA - 2786 ) 
 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d4fe07e . . 6bf4882 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1647 , 7 + 1647 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return data . getRecentBloomFilterFalseRatio ( ) ; 
 } 
 
 - 
 + public long getBloomFilterDiskSpaceUsed ( ) 
 + { 
 + long total = 0 ; 
 + for ( SSTableReader sst : getSSTables ( ) ) 
 + total + = sst . getBloomFilterSerializedSize ( ) ; 
 + return total ; 
 + } 
 
 @ Override 
 public String toString ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 49030c1 . . 4b7c8f5 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 184 , 6 + 184 , 8 @ @ public interface ColumnFamilyStoreMBean 
 
 public double getRecentBloomFilterFalseRatio ( ) ; 
 
 + public long getBloomFilterDiskSpaceUsed ( ) ; 
 + 
 / * * 
 * Gets the minimum number of sstables in queue before compaction kicks off 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java 
 index 2f8e87b . . 6695c19 100644 
 - - - a / src / java / org / apache / cassandra / db / RowMutation . java 
 + + + b / src / java / org / apache / cassandra / db / RowMutation . java 
 @ @ - 263 , 10 + 263 , 10 @ @ public class RowMutation implements IMutation , MessageProducer 
 
 public Message getMessage ( Integer version ) throws IOException 
 { 
 - return makeRowMutationMessage ( StorageService . Verb . MUTATION , version ) ; 
 + return getMessage ( StorageService . Verb . MUTATION , version ) ; 
 } 
 
 - public Message makeRowMutationMessage ( StorageService . Verb verb , int version ) throws IOException 
 + public Message getMessage ( StorageService . Verb verb , int version ) throws IOException 
 { 
 return new Message ( FBUtilities . getBroadcastAddress ( ) , verb , getSerializedBuffer ( version ) , version ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index c4d858f . . 9acf84b 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 431 , 6 + 431 , 14 @ @ public class SSTableReader extends SSTable 
 return bf ; 
 } 
 
 + public long getBloomFilterSerializedSize ( ) 
 + { 
 + if ( descriptor . usesOldBloomFilter ) 
 + return LegacyBloomFilter . serializer ( ) . serializedSize ( ( LegacyBloomFilter ) bf ) ; 
 + else 
 + return BloomFilter . serializer ( ) . serializedSize ( ( BloomFilter ) bf ) ; 
 + } 
 + 
 / * * 
 * @ return An estimate of the number of keys in this SSTable . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index e822257 . . 331b9aa 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import java . nio . channels . AsynchronousCloseException ; 
 import java . nio . channels . ServerSocketChannel ; 
 import java . util . * ; 
 import java . util . concurrent . ExecutorService ; 
 - import java . util . concurrent . Future ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 @ @ - 36 , 7 + 35 , 6 @ @ import javax . management . ObjectName ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . collect . Lists ; 
 - 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 170 , 9 + 168 , 16 @ @ public final class MessagingService implements MessagingServiceMBean 
 
 if ( expiredCallbackInfo . shouldHint ( ) ) 
 { 
 - / / Trigger hints for expired mutation message . 
 assert expiredCallbackInfo . message ! = null ; 
 - scheduleMutationHint ( expiredCallbackInfo . message , expiredCallbackInfo . target ) ; 
 + try 
 + { 
 + RowMutation rm = RowMutation . fromBytes ( expiredCallbackInfo . message . getMessageBody ( ) , expiredCallbackInfo . message . getVersion ( ) ) ; 
 + return StorageProxy . scheduleLocalHint ( rm , expiredCallbackInfo . target , null , null ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " Unable to deserialize mutation when writting hint for : " + expiredCallbackInfo . target ) ; 
 + } 
 } 
 
 return null ; 
 @ @ - 192 , 21 + 197 , 6 @ @ public final class MessagingService implements MessagingServiceMBean 
 } 
 } 
 
 - 
 - private Future < ? > scheduleMutationHint ( Message mutationMessage , InetAddress mutationTarget ) 
 - { 
 - try 
 - { 
 - RowMutation rm = RowMutation . fromBytes ( mutationMessage . getMessageBody ( ) , mutationMessage . getVersion ( ) ) ; 
 - return StorageProxy . scheduleLocalHint ( rm , mutationTarget , null , null ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - logger _ . error ( " Unable to deserialize mutation when writting hint for : " + mutationTarget ) ; 
 - } 
 - return null ; 
 - } 
 - 
 / * * 
 * Track latency information for the dynamic snitch 
 * @ param cb the callback associated with this message - - this lets us know if it ' s a message type we ' re interested in 
 diff - - git a / src / java / org / apache / cassandra / service / RowRepairResolver . java b / src / java / org / apache / cassandra / service / RowRepairResolver . java 
 index e1d9df0 . . 728d703 100644 
 - - - a / src / java / org / apache / cassandra / service / RowRepairResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RowRepairResolver . java 
 @ @ - 124 , 7 + 124 , 10 @ @ public class RowRepairResolver extends AbstractRowResolver 
 Message repairMessage ; 
 try 
 { 
 - repairMessage = rowMutation . getMessage ( Gossiper . instance . getVersion ( endpoints . get ( i ) ) ) ; 
 + / / use a separate verb here because we don ' t want these to be get the white glove hint - 
 + / / on - timeout behavior that a " real " mutation gets 
 + repairMessage = rowMutation . getMessage ( StorageService . Verb . READ _ REPAIR , 
 + Gossiper . instance . getVersion ( endpoints . get ( i ) ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index ce22cbf . . 9eeec94 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 30 , 12 + 30 , 11 @ @ import java . util . concurrent . atomic . AtomicLong ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 + import com . google . common . base . Function ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Iterables ; 
 + import com . google . common . collect . MapMaker ; 
 import com . google . common . collect . Multimap ; 
 - 
 - import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . net . * ; 
 import org . apache . commons . lang . ArrayUtils ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 @ @ - 45 , 6 + 44 , 7 @ @ import org . apache . cassandra . concurrent . CreationTimeAwareFuture ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . dht . AbstractBounds ; 
 @ @ - 59 , 10 + 59 , 7 @ @ import org . apache . cassandra . locator . IEndpointSnitch ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . thrift . * ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . LatencyTracker ; 
 - import org . apache . cassandra . utils . Pair ; 
 + import org . apache . cassandra . utils . * ; 
 
 
 public class StorageProxy implements StorageProxyMBean 
 @ @ - 86 , 7 + 83 , 14 @ @ public class StorageProxy implements StorageProxyMBean 
 private static volatile boolean hintedHandoffEnabled = DatabaseDescriptor . hintedHandoffEnabled ( ) ; 
 private static volatile int maxHintWindow = DatabaseDescriptor . getMaxHintWindow ( ) ; 
 private static volatile int maxHintsInProgress = 1024 * Runtime . getRuntime ( ) . availableProcessors ( ) ; 
 - private static final AtomicInteger hintsInProgress = new AtomicInteger ( ) ; 
 + private static final AtomicInteger totalHintsInProgress = new AtomicInteger ( ) ; 
 + private static final Map < InetAddress , AtomicInteger > hintsInProgress = new MapMaker ( ) . concurrencyLevel ( 1 ) . makeComputingMap ( new Function < InetAddress , AtomicInteger > ( ) 
 + { 
 + public AtomicInteger apply ( InetAddress inetAddress ) 
 + { 
 + return new AtomicInteger ( 0 ) ; 
 + } 
 + } ) ; 
 private static final AtomicLong totalHints = new AtomicLong ( ) ; 
 
 private StorageProxy ( ) { } 
 @ @ - 286 , 10 + 290 , 19 @ @ public class StorageProxy implements StorageProxyMBean 
 
 for ( InetAddress destination : targets ) 
 { 
 - if ( FailureDetector . instance . isAlive ( destination ) ) 
 + / / avoid OOMing due to excess hints . we need to do this check even for " live " nodes , since we can 
 + / / still generate hints for those if it ' s overloaded or simply dead but not yet known - to - be - dead . 
 + / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to 
 + / / a small number of nodes causing problems , so we should avoid shutting down writes completely to 
 + / / healthy nodes . Any node with no hintsInProgress is considered healthy . 
 + if ( totalHintsInProgress . get ( ) > maxHintsInProgress 
 + & & ( hintsInProgress . get ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) 
 { 
 - String dc = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( destination ) ; 
 + throw new TimeoutException ( ) ; 
 + } 
 
 + if ( FailureDetector . instance . isAlive ( destination ) ) 
 + { 
 if ( destination . equals ( FBUtilities . getBroadcastAddress ( ) ) & & OPTIMIZE _ LOCAL _ REQUESTS ) 
 { 
 insertLocal ( rm , responseHandler ) ; 
 @ @ - 300 , 6 + 313 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " insert writing key " + ByteBufferUtil . bytesToHex ( rm . key ( ) ) + " to " + destination ) ; 
 
 + String dc = DatabaseDescriptor . getEndpointSnitch ( ) . getDatacenter ( destination ) ; 
 Multimap < Message , InetAddress > messages = dcMessages . get ( dc ) ; 
 if ( messages = = null ) 
 { 
 @ @ - 315 , 11 + 329 , 6 @ @ public class StorageProxy implements StorageProxyMBean 
 if ( ! shouldHint ( destination ) ) 
 continue ; 
 
 - / / Avoid OOMing from hints waiting to be written . ( Unlike ordinary mutations , hint 
 - / / not eligible to drop if we fall behind . ) 
 - if ( hintsInProgress . get ( ) > maxHintsInProgress ) 
 - throw new TimeoutException ( ) ; 
 - 
 / / Schedule a local hint and let the handler know it needs to wait for the hint to complete too 
 Future < Void > hintfuture = scheduleLocalHint ( rm , destination , responseHandler , consistency _ level ) ; 
 responseHandler . addFutureForHint ( new CreationTimeAwareFuture < Void > ( hintfuture ) ) ; 
 @ @ - 337 , 12 + 346 , 13 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 / / Hint of itself doesn ' t make sense . 
 assert ! target . equals ( FBUtilities . getBroadcastAddress ( ) ) : target ; 
 - hintsInProgress . incrementAndGet ( ) ; 
 + totalHintsInProgress . incrementAndGet ( ) ; 
 + final AtomicInteger targetHints = hintsInProgress . get ( target ) ; 
 + targetHints . incrementAndGet ( ) ; 
 
 - Runnable runnable = new Runnable ( ) 
 + Runnable runnable = new WrappedRunnable ( ) 
 { 
 - 
 - public void run ( ) 
 + public void runMayThrow ( ) throws IOException 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Adding hint for " + target ) ; 
 @ @ - 360 , 14 + 370 , 10 @ @ public class StorageProxy implements StorageProxyMBean 
 if ( responseHandler ! = null & & consistencyLevel = = ConsistencyLevel . ANY ) 
 responseHandler . response ( null ) ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 finally 
 { 
 - / / Decrement the current hint in the execution after the task is done . 
 - hintsInProgress . decrementAndGet ( ) ; 
 + totalHintsInProgress . decrementAndGet ( ) ; 
 + targetHints . decrementAndGet ( ) ; 
 } 
 } 
 } ; 
 @ @ - 730 , 6 + 736 , 8 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 ReadCommand command = repairCommands . get ( i ) ; 
 RepairCallback handler = repairResponseHandlers . get ( i ) ; 
 + / / wait for the repair writes to be acknowledged , to minimize impact on any replica that ' s 
 + / / behind on writes in case the out - of - sync row is read multiple times in quick succession 
 FBUtilities . waitOnFutures ( handler . resolver . repairResults , DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 
 Row row ; 
 @ @ - 1279 , 7 + 1287 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public int getHintsInProgress ( ) 
 { 
 - return hintsInProgress . get ( ) ; 
 + return totalHintsInProgress . get ( ) ; 
 } 
 
 public void verifyNoHintsInProgress ( ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index d646d77 . . 023b63a 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 464 , 6 + 464 , 7 @ @ public class NodeCmd 
 outs . println ( " \ t \ tPending Tasks : " + cfstore . getPendingTasks ( ) ) ; 
 outs . println ( " \ t \ tBloom Filter False Postives : " + cfstore . getBloomFilterFalsePositives ( ) ) ; 
 outs . println ( " \ t \ tBloom Filter False Ratio : " + String . format ( " % 01 . 5f " , cfstore . getRecentBloomFilterFalseRatio ( ) ) ) ; 
 + outs . println ( " \ t \ tBloom Filter Space Used : " + cfstore . getBloomFilterDiskSpaceUsed ( ) ) ; 
 
 InstrumentingCacheMBean keyCacheMBean = probe . getKeyCacheMBean ( tableName , cfstore . getColumnFamilyName ( ) ) ; 
 if ( keyCacheMBean . getCapacity ( ) > 0 )
