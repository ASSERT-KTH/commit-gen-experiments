BLEU SCORE: 0.03283637368030199

TEST MSG: Cache local ranges when calculating repair neighbors
GENERATED MSG: Expose repairing by a user provided range

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7d70902 . . ec2b48e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 15 <nl> + * Cache local ranges when calculating repair neighbors ( CASSANDRA - 11933 ) <nl> * Allow LWT operation on static column with only partition keys ( CASSANDRA - 10532 ) <nl> * Create interval tree over canonical sstables to avoid missing sstables during streaming ( CASSANDRA - 11886 ) <nl> * cqlsh COPY FROM : shutdown parent cluster after forking , to avoid corrupting SSL connections ( CASSANDRA - 11749 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> index f8975f9 . . 4c83c48 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> @ @ - 164 , 7 + 164 , 8 @ @ public class ActiveRepairService implements IEndpointStateChangeSubscriber , IFai <nl> RepairFuture submitArtificialRepairSession ( RepairJobDesc desc ) <nl> { <nl> Set < InetAddress > neighbours = new HashSet < > ( ) ; <nl> - neighbours . addAll ( ActiveRepairService . getNeighbors ( desc . keyspace , desc . range , null , null ) ) ; <nl> + Collection < Range < Token > > keyspaceLocalRanges = StorageService . instance . getLocalRanges ( desc . keyspace ) ; <nl> + neighbours . addAll ( ActiveRepairService . getNeighbors ( desc . keyspace , keyspaceLocalRanges , desc . range , null , null ) ) ; <nl> RepairSession session = new RepairSession ( desc . parentSessionId , desc . sessionId , desc . range , desc . keyspace , RepairParallelism . PARALLEL , neighbours , new String [ ] { desc . columnFamily } ) ; <nl> sessions . put ( session . getId ( ) , session ) ; <nl> RepairFuture futureTask = new RepairFuture ( session ) ; <nl> @ @ - 176 , 17 + 177 , 18 @ @ public class ActiveRepairService implements IEndpointStateChangeSubscriber , IFai <nl> * Return all of the neighbors with whom we share the provided range . <nl> * <nl> * @ param keyspaceName keyspace to repair <nl> + * @ param keyspaceLocalRanges local - range for given keyspaceName <nl> * @ param toRepair token to repair <nl> * @ param dataCenters the data centers to involve in the repair <nl> * <nl> * @ return neighbors with whom we share the provided range <nl> * / <nl> - public static Set < InetAddress > getNeighbors ( String keyspaceName , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) <nl> + public static Set < InetAddress > getNeighbors ( String keyspaceName , Collection < Range < Token > > keyspaceLocalRanges , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) <nl> { <nl> StorageService ss = StorageService . instance ; <nl> Map < Range < Token > , List < InetAddress > > replicaSets = ss . getRangeToAddressMap ( keyspaceName ) ; <nl> Range < Token > rangeSuperSet = null ; <nl> - for ( Range < Token > range : ss . getLocalRanges ( keyspaceName ) ) <nl> + for ( Range < Token > range : keyspaceLocalRanges ) <nl> { <nl> if ( range . contains ( toRepair ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index eea4556 . . 27939f9 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2978 , 13 + 2978 , 17 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return ; <nl> } <nl> <nl> + / / pre - calculate output of getLocalRanges and pass it to getNeighbors to increase performance and prevent <nl> + / / calculation multiple times <nl> + Collection < Range < Token > > keyspaceLocalRanges = getLocalRanges ( keyspace ) ; <nl> + <nl> Set < InetAddress > allNeighbors = new HashSet < > ( ) ; <nl> Map < Range , Set < InetAddress > > rangeToNeighbors = new HashMap < > ( ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> try <nl> { <nl> - Set < InetAddress > neighbors = ActiveRepairService . getNeighbors ( keyspace , range , dataCenters , hosts ) ; <nl> + Set < InetAddress > neighbors = ActiveRepairService . getNeighbors ( keyspace , keyspaceLocalRanges , range , dataCenters , hosts ) ; <nl> rangeToNeighbors . put ( range , neighbors ) ; <nl> allNeighbors . addAll ( neighbors ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java <nl> index ac39de6 . . 21eb492 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java <nl> + + + b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java <nl> @ @ - 123 , 7 + 123 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , null , null ) ) ; <nl> + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , null , null ) ) ; <nl> } <nl> assertEquals ( expected , neighbors ) ; <nl> } <nl> @ @ - 146 , 7 + 146 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , null , null ) ) ; <nl> + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , null , null ) ) ; <nl> } <nl> assertEquals ( expected , neighbors ) ; <nl> } <nl> @ @ - 168 , 7 + 168 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; <nl> + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; <nl> } <nl> assertEquals ( expected , neighbors ) ; <nl> } <nl> @ @ - 196 , 7 + 196 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; <nl> + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; <nl> } <nl> assertEquals ( expected , neighbors ) ; <nl> } <nl> @ @ - 218 , 7 + 218 , 8 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> Collection < String > hosts = Arrays . asList ( FBUtilities . getBroadcastAddress ( ) . getCanonicalHostName ( ) , expected . get ( 0 ) . getCanonicalHostName ( ) ) ; <nl> <nl> - assertEquals ( expected . get ( 0 ) , ActiveRepairService . getNeighbors ( keyspaceName , StorageService . instance . getLocalRanges ( keyspaceName ) . iterator ( ) . next ( ) , null , hosts ) . iterator ( ) . next ( ) ) ; <nl> + Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( keyspaceName ) ; <nl> + assertEquals ( expected . get ( 0 ) , ActiveRepairService . getNeighbors ( keyspaceName , ranges , ranges . iterator ( ) . next ( ) , null , hosts ) . iterator ( ) . next ( ) ) ; <nl> } <nl> <nl> @ Test ( expected = IllegalArgumentException . class ) <nl> @ @ - 227 , 7 + 228 , 8 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader <nl> addTokens ( 2 * Keyspace . open ( keyspaceName ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; <nl> / / Dont give local endpoint <nl> Collection < String > hosts = Arrays . asList ( " 127 . 0 . 0 . 3 " ) ; <nl> - ActiveRepairService . getNeighbors ( keyspaceName , StorageService . instance . getLocalRanges ( keyspaceName ) . iterator ( ) . next ( ) , null , hosts ) ; <nl> + Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( keyspaceName ) ; <nl> + ActiveRepairService . getNeighbors ( keyspaceName , ranges , ranges . iterator ( ) . next ( ) , null , hosts ) ; <nl> } <nl> <nl> Set < InetAddress > addTokens ( int max ) throws Throwable
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 149387b . . fcb8a9d 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1985 , 7 + 1985 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; <nl> Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; <nl> <nl> - logger _ . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , <nl> + logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , <nl> new Object [ ] { parsedBeginToken , parsedEndToken , tableName , columnFamilies } ) ; <nl> AntiEntropyService . RepairFuture future = forceTableRepair ( new Range < Token > ( parsedBeginToken , parsedEndToken ) , tableName , isSequential , columnFamilies ) ; <nl> if ( future = = null ) <nl> @ @ - 1996 , 7 + 1996 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> catch ( Exception e ) <nl> { <nl> - logger _ . error ( " Repair session " + future . session . getName ( ) + " failed . " , e ) ; <nl> + logger . error ( " Repair session " + future . session . getName ( ) + " failed . " , e ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7d70902 . . ec2b48e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 15 
 + * Cache local ranges when calculating repair neighbors ( CASSANDRA - 11933 ) 
 * Allow LWT operation on static column with only partition keys ( CASSANDRA - 10532 ) 
 * Create interval tree over canonical sstables to avoid missing sstables during streaming ( CASSANDRA - 11886 ) 
 * cqlsh COPY FROM : shutdown parent cluster after forking , to avoid corrupting SSL connections ( CASSANDRA - 11749 ) 
 diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 index f8975f9 . . 4c83c48 100644 
 - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 @ @ - 164 , 7 + 164 , 8 @ @ public class ActiveRepairService implements IEndpointStateChangeSubscriber , IFai 
 RepairFuture submitArtificialRepairSession ( RepairJobDesc desc ) 
 { 
 Set < InetAddress > neighbours = new HashSet < > ( ) ; 
 - neighbours . addAll ( ActiveRepairService . getNeighbors ( desc . keyspace , desc . range , null , null ) ) ; 
 + Collection < Range < Token > > keyspaceLocalRanges = StorageService . instance . getLocalRanges ( desc . keyspace ) ; 
 + neighbours . addAll ( ActiveRepairService . getNeighbors ( desc . keyspace , keyspaceLocalRanges , desc . range , null , null ) ) ; 
 RepairSession session = new RepairSession ( desc . parentSessionId , desc . sessionId , desc . range , desc . keyspace , RepairParallelism . PARALLEL , neighbours , new String [ ] { desc . columnFamily } ) ; 
 sessions . put ( session . getId ( ) , session ) ; 
 RepairFuture futureTask = new RepairFuture ( session ) ; 
 @ @ - 176 , 17 + 177 , 18 @ @ public class ActiveRepairService implements IEndpointStateChangeSubscriber , IFai 
 * Return all of the neighbors with whom we share the provided range . 
 * 
 * @ param keyspaceName keyspace to repair 
 + * @ param keyspaceLocalRanges local - range for given keyspaceName 
 * @ param toRepair token to repair 
 * @ param dataCenters the data centers to involve in the repair 
 * 
 * @ return neighbors with whom we share the provided range 
 * / 
 - public static Set < InetAddress > getNeighbors ( String keyspaceName , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) 
 + public static Set < InetAddress > getNeighbors ( String keyspaceName , Collection < Range < Token > > keyspaceLocalRanges , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) 
 { 
 StorageService ss = StorageService . instance ; 
 Map < Range < Token > , List < InetAddress > > replicaSets = ss . getRangeToAddressMap ( keyspaceName ) ; 
 Range < Token > rangeSuperSet = null ; 
 - for ( Range < Token > range : ss . getLocalRanges ( keyspaceName ) ) 
 + for ( Range < Token > range : keyspaceLocalRanges ) 
 { 
 if ( range . contains ( toRepair ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index eea4556 . . 27939f9 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2978 , 13 + 2978 , 17 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return ; 
 } 
 
 + / / pre - calculate output of getLocalRanges and pass it to getNeighbors to increase performance and prevent 
 + / / calculation multiple times 
 + Collection < Range < Token > > keyspaceLocalRanges = getLocalRanges ( keyspace ) ; 
 + 
 Set < InetAddress > allNeighbors = new HashSet < > ( ) ; 
 Map < Range , Set < InetAddress > > rangeToNeighbors = new HashMap < > ( ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 try 
 { 
 - Set < InetAddress > neighbors = ActiveRepairService . getNeighbors ( keyspace , range , dataCenters , hosts ) ; 
 + Set < InetAddress > neighbors = ActiveRepairService . getNeighbors ( keyspace , keyspaceLocalRanges , range , dataCenters , hosts ) ; 
 rangeToNeighbors . put ( range , neighbors ) ; 
 allNeighbors . addAll ( neighbors ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java 
 index ac39de6 . . 21eb492 100644 
 - - - a / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java 
 + + + b / test / unit / org / apache / cassandra / service / AntiEntropyServiceTestAbstract . java 
 @ @ - 123 , 7 + 123 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , null , null ) ) ; 
 + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , null , null ) ) ; 
 } 
 assertEquals ( expected , neighbors ) ; 
 } 
 @ @ - 146 , 7 + 146 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , null , null ) ) ; 
 + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , null , null ) ) ; 
 } 
 assertEquals ( expected , neighbors ) ; 
 } 
 @ @ - 168 , 7 + 168 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; 
 + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; 
 } 
 assertEquals ( expected , neighbors ) ; 
 } 
 @ @ - 196 , 7 + 196 , 7 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 Set < InetAddress > neighbors = new HashSet < InetAddress > ( ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 - neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; 
 + neighbors . addAll ( ActiveRepairService . getNeighbors ( keyspaceName , ranges , range , Arrays . asList ( DatabaseDescriptor . getLocalDataCenter ( ) ) , null ) ) ; 
 } 
 assertEquals ( expected , neighbors ) ; 
 } 
 @ @ - 218 , 7 + 218 , 8 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 expected . remove ( FBUtilities . getBroadcastAddress ( ) ) ; 
 Collection < String > hosts = Arrays . asList ( FBUtilities . getBroadcastAddress ( ) . getCanonicalHostName ( ) , expected . get ( 0 ) . getCanonicalHostName ( ) ) ; 
 
 - assertEquals ( expected . get ( 0 ) , ActiveRepairService . getNeighbors ( keyspaceName , StorageService . instance . getLocalRanges ( keyspaceName ) . iterator ( ) . next ( ) , null , hosts ) . iterator ( ) . next ( ) ) ; 
 + Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( keyspaceName ) ; 
 + assertEquals ( expected . get ( 0 ) , ActiveRepairService . getNeighbors ( keyspaceName , ranges , ranges . iterator ( ) . next ( ) , null , hosts ) . iterator ( ) . next ( ) ) ; 
 } 
 
 @ Test ( expected = IllegalArgumentException . class ) 
 @ @ - 227 , 7 + 228 , 8 @ @ public abstract class AntiEntropyServiceTestAbstract extends SchemaLoader 
 addTokens ( 2 * Keyspace . open ( keyspaceName ) . getReplicationStrategy ( ) . getReplicationFactor ( ) ) ; 
 / / Dont give local endpoint 
 Collection < String > hosts = Arrays . asList ( " 127 . 0 . 0 . 3 " ) ; 
 - ActiveRepairService . getNeighbors ( keyspaceName , StorageService . instance . getLocalRanges ( keyspaceName ) . iterator ( ) . next ( ) , null , hosts ) ; 
 + Collection < Range < Token > > ranges = StorageService . instance . getLocalRanges ( keyspaceName ) ; 
 + ActiveRepairService . getNeighbors ( keyspaceName , ranges , ranges . iterator ( ) . next ( ) , null , hosts ) ; 
 } 
 
 Set < InetAddress > addTokens ( int max ) throws Throwable

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 149387b . . fcb8a9d 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1985 , 7 + 1985 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; 
 Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; 
 
 - logger _ . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , 
 + logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , 
 new Object [ ] { parsedBeginToken , parsedEndToken , tableName , columnFamilies } ) ; 
 AntiEntropyService . RepairFuture future = forceTableRepair ( new Range < Token > ( parsedBeginToken , parsedEndToken ) , tableName , isSequential , columnFamilies ) ; 
 if ( future = = null ) 
 @ @ - 1996 , 7 + 1996 , 7 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 catch ( Exception e ) 
 { 
 - logger _ . error ( " Repair session " + future . session . getName ( ) + " failed . " , e ) ; 
 + logger . error ( " Repair session " + future . session . getName ( ) + " failed . " , e ) ; 
 } 
 } 

