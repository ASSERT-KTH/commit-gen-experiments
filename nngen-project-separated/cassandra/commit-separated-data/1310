BLEU SCORE: 0.02383853510228548

TEST MSG: ( Pig ) support BulkOutputFormat as a URL parameter
GENERATED MSG: Add CqlOutputFormat

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dff47fc . . 5f11049 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 10 <nl> + * ( Pig ) support BulkOutputFormat as a URL parameter ( CASSANDRA - 7410 ) <nl> * BATCH statement is broken in cqlsh ( CASSANDRA - 10272 ) <nl> * Added configurable warning threshold for GC duration ( CASSANDRA - 8907 ) <nl> * ( cqlsh ) Make cqlsh PEP8 compliant ( CASSANDRA - 10066 ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java <nl> index 887fe8e . . 7fedb41 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . config . EncryptionOptions ; <nl> import org . apache . cassandra . hadoop . AbstractBulkOutputFormat ; <nl> import org . apache . cassandra . hadoop . ConfigHelper ; <nl> import org . apache . hadoop . conf . Configuration ; <nl> @ @ - 54 , 6 + 55 , 16 @ @ public class CqlBulkOutputFormat extends AbstractBulkOutputFormat < Object , List < B <nl> private static final String OUTPUT _ CQL _ SCHEMA _ PREFIX = " cassandra . columnfamily . schema . " ; <nl> private static final String OUTPUT _ CQL _ INSERT _ PREFIX = " cassandra . columnfamily . insert . " ; <nl> private static final String DELETE _ SOURCE = " cassandra . output . delete . source " ; <nl> + private static final String OUTPUT _ CQL _ STORAGE _ PORT = " cassandra . storage . port " ; <nl> + private static final String OUTPUT _ CQL _ SSL _ STORAGE _ PORT = " cassandra . ssl . storage . port " ; <nl> + private static final String INTERNODE _ ENCRYPTION = " cassandra . internode . encryption " ; <nl> + private static final String SERVER _ KEYSTORE = " cassandra . server . keystore " ; <nl> + private static final String SERVER _ KEYSTORE _ PASSWORD = " cassandra . server . keystore . password " ; <nl> + private static final String SERVER _ TRUSTSTORE = " cassandra . server . truststore " ; <nl> + private static final String SERVER _ TRUSTSTORE _ PASSWORD = " cassandra . server . truststore . password " ; <nl> + private static final String SERVER _ CIPHER _ SUITES = " cassandra . server . truststore . password " ; <nl> + public static final int DEFAULT _ STORAGE _ PORT = 7000 ; <nl> + public static final int DEFAULT _ SSL _ STORAGE _ PORT = 7001 ; <nl> <nl> / * * Fills the deprecated OutputFormat interface for streaming . * / <nl> @ Deprecated <nl> @ @ - 84 , 7 + 95 , 87 @ @ public class CqlBulkOutputFormat extends AbstractBulkOutputFormat < Object , List < B <nl> { <nl> conf . set ( OUTPUT _ CQL _ INSERT _ PREFIX + columnFamily , insertStatement ) ; <nl> } <nl> - <nl> + <nl> + public static void setStoragePort ( Configuration conf , int port ) <nl> + { <nl> + conf . set ( OUTPUT _ CQL _ STORAGE _ PORT , " " + port ) ; <nl> + } <nl> + <nl> + public static void setSSLStoragePort ( Configuration conf , int port ) <nl> + { <nl> + conf . set ( OUTPUT _ CQL _ SSL _ STORAGE _ PORT , " " + port ) ; <nl> + } <nl> + <nl> + public static void setInternodeEncryption ( Configuration conf , String encrypt ) <nl> + { <nl> + conf . set ( INTERNODE _ ENCRYPTION , encrypt ) ; <nl> + } <nl> + <nl> + public static void setServerKeystore ( Configuration conf , String keystore ) <nl> + { <nl> + conf . set ( SERVER _ KEYSTORE , keystore ) ; <nl> + } <nl> + <nl> + public static void setServerKeystorePassword ( Configuration conf , String keystorePass ) <nl> + { <nl> + conf . set ( SERVER _ KEYSTORE _ PASSWORD , keystorePass ) ; <nl> + } <nl> + <nl> + public static void setServerTruststore ( Configuration conf , String truststore ) <nl> + { <nl> + conf . set ( SERVER _ TRUSTSTORE , truststore ) ; <nl> + } <nl> + <nl> + public static void setServerTruststorePassword ( Configuration conf , String truststorePass ) <nl> + { <nl> + conf . set ( SERVER _ TRUSTSTORE _ PASSWORD , truststorePass ) ; <nl> + } <nl> + <nl> + public static void setServerCipherSuites ( Configuration conf , String cipherSuites ) <nl> + { <nl> + conf . set ( SERVER _ CIPHER _ SUITES , cipherSuites ) ; <nl> + } <nl> + <nl> + public static int getStoragePort ( Configuration conf ) <nl> + { <nl> + return conf . getInt ( OUTPUT _ CQL _ STORAGE _ PORT , DEFAULT _ STORAGE _ PORT ) ; <nl> + } <nl> + <nl> + public static int getSSLStoragePort ( Configuration conf ) <nl> + { <nl> + return conf . getInt ( OUTPUT _ CQL _ SSL _ STORAGE _ PORT , DEFAULT _ SSL _ STORAGE _ PORT ) ; <nl> + } <nl> + <nl> + public static String getInternodeEncryption ( Configuration conf ) <nl> + { <nl> + return conf . get ( INTERNODE _ ENCRYPTION , EncryptionOptions . ServerEncryptionOptions . InternodeEncryption . none . name ( ) ) ; <nl> + } <nl> + <nl> + public static String getServerKeystore ( Configuration conf ) <nl> + { <nl> + return conf . get ( SERVER _ KEYSTORE ) ; <nl> + } <nl> + <nl> + public static String getServerTruststore ( Configuration conf ) <nl> + { <nl> + return conf . get ( SERVER _ TRUSTSTORE ) ; <nl> + } <nl> + <nl> + public static String getServerKeystorePassword ( Configuration conf ) <nl> + { <nl> + return conf . get ( SERVER _ KEYSTORE _ PASSWORD ) ; <nl> + } <nl> + <nl> + public static String getServerTruststorePassword ( Configuration conf ) <nl> + { <nl> + return conf . get ( SERVER _ TRUSTSTORE _ PASSWORD ) ; <nl> + } <nl> + <nl> + public static String getServerCipherSuites ( Configuration conf ) <nl> + { <nl> + return conf . get ( SERVER _ CIPHER _ SUITES ) ; <nl> + } <nl> + <nl> public static String getColumnFamilySchema ( Configuration conf , String columnFamily ) <nl> { <nl> String schema = conf . get ( OUTPUT _ CQL _ SCHEMA _ PREFIX + columnFamily ) ; <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java <nl> index e60a240 . . ced8aa9 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java <nl> @ @ - 19 , 13 + 19 , 16 @ @ package org . apache . cassandra . hadoop . cql3 ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . net . InetAddress ; <nl> + import java . net . UnknownHostException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> - import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . UUID ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . EncryptionOptions ; <nl> + import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> import org . apache . cassandra . hadoop . AbstractBulkRecordWriter ; <nl> import org . apache . cassandra . hadoop . BulkRecordWriter ; <nl> @ @ - 35 , 6 + 38 , 9 @ @ import org . apache . cassandra . io . sstable . CQLSSTableWriter ; <nl> import org . apache . cassandra . io . sstable . SSTableLoader ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . streaming . StreamState ; <nl> + import org . apache . cassandra . thrift . ITransportFactory ; <nl> + import org . apache . cassandra . tools . BulkLoader ; <nl> + import org . apache . commons . lang . StringUtils ; <nl> import org . apache . hadoop . conf . Configuration ; <nl> import org . apache . hadoop . mapreduce . TaskAttemptContext ; <nl> import org . apache . hadoop . util . Progressable ; <nl> @ @ - 108 , 10 + 114 , 7 @ @ public class CqlBulkRecordWriter extends AbstractBulkRecordWriter < Object , List < B <nl> } <nl> if ( loader = = null ) <nl> { <nl> - ExternalClient externalClient = new ExternalClient ( conf ) ; <nl> - <nl> - externalClient . addKnownCfs ( keyspace , schema ) ; <nl> - <nl> + BulkLoader . ExternalClient externalClient = getExternalClient ( conf ) ; <nl> this . loader = new SSTableLoader ( outputDir , externalClient , new BulkRecordWriter . NullOutputHandler ( ) ) { <nl> @ Override <nl> public void onSuccess ( StreamState finalState ) <nl> @ @ - 171 , 41 + 174 , 53 @ @ public class CqlBulkRecordWriter extends AbstractBulkRecordWriter < Object , List < B <nl> <nl> return dir ; <nl> } <nl> - <nl> - public static class ExternalClient extends AbstractBulkRecordWriter . ExternalClient <nl> - { <nl> - private Map < String , Map < String , CFMetaData > > knownCqlCfs = new HashMap < > ( ) ; <nl> - <nl> - public ExternalClient ( Configuration conf ) <nl> - { <nl> - super ( conf ) ; <nl> - } <nl> <nl> - public void addKnownCfs ( String keyspace , String cql ) <nl> + private BulkLoader . ExternalClient getExternalClient ( Configuration conf ) <nl> + { <nl> + Set < InetAddress > hosts = new HashSet < InetAddress > ( ) ; <nl> + String outputAddress = ConfigHelper . getOutputInitialAddress ( conf ) ; <nl> + if ( outputAddress = = null ) outputAddress = " localhost " ; <nl> + String [ ] nodes = outputAddress . split ( " , " ) ; <nl> + for ( String node : nodes ) <nl> { <nl> - Map < String , CFMetaData > cfs = knownCqlCfs . get ( keyspace ) ; <nl> - <nl> - if ( cfs = = null ) <nl> + try <nl> { <nl> - cfs = new HashMap < > ( ) ; <nl> - knownCqlCfs . put ( keyspace , cfs ) ; <nl> + hosts . add ( InetAddress . getByName ( node ) ) ; <nl> } <nl> - <nl> - CFMetaData metadata = CFMetaData . compile ( cql , keyspace ) ; <nl> - cfs . put ( metadata . cfName , metadata ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public CFMetaData getCFMetaData ( String keyspace , String cfName ) <nl> - { <nl> - CFMetaData metadata = super . getCFMetaData ( keyspace , cfName ) ; <nl> - if ( metadata ! = null ) <nl> + catch ( UnknownHostException e ) <nl> { <nl> - return metadata ; <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> - <nl> - Map < String , CFMetaData > cfs = knownCqlCfs . get ( keyspace ) ; <nl> - return cfs ! = null ? cfs . get ( cfName ) : null ; <nl> } <nl> + int rpcPort = ConfigHelper . getOutputRpcPort ( conf ) ; <nl> + String username = ConfigHelper . getOutputKeyspaceUserName ( conf ) ; <nl> + String password = ConfigHelper . getOutputKeyspacePassword ( conf ) ; <nl> + ITransportFactory transportFactory = ConfigHelper . getClientTransportFactory ( conf ) ; <nl> + return new BulkLoader . ExternalClient ( hosts , <nl> + rpcPort , <nl> + username , <nl> + password , <nl> + transportFactory , <nl> + CqlBulkOutputFormat . getStoragePort ( conf ) , <nl> + CqlBulkOutputFormat . getSSLStoragePort ( conf ) , <nl> + getServerEncryptOpt ( conf ) ) ; <nl> + } <nl> + <nl> + private ServerEncryptionOptions getServerEncryptOpt ( Configuration conf ) <nl> + { <nl> + ServerEncryptionOptions encryptOpt = new ServerEncryptionOptions ( ) ; <nl> + String internodeEncrypt = CqlBulkOutputFormat . getInternodeEncryption ( conf ) ; <nl> + if ( StringUtils . isEmpty ( internodeEncrypt ) ) <nl> + return encryptOpt ; <nl> + <nl> + encryptOpt . internode _ encryption = EncryptionOptions . ServerEncryptionOptions . InternodeEncryption . valueOf ( internodeEncrypt ) ; <nl> + encryptOpt . keystore = CqlBulkOutputFormat . getServerKeystore ( conf ) ; <nl> + encryptOpt . truststore = CqlBulkOutputFormat . getServerTruststore ( conf ) ; <nl> + encryptOpt . keystore _ password = CqlBulkOutputFormat . getServerKeystorePassword ( conf ) ; <nl> + encryptOpt . truststore _ password = CqlBulkOutputFormat . getServerTruststorePassword ( conf ) ; <nl> + String cipherSuites = CqlBulkOutputFormat . getServerCipherSuites ( conf ) ; <nl> + if ( ! StringUtils . isEmpty ( cipherSuites ) ) <nl> + encryptOpt . cipher _ suites = cipherSuites . replace ( " " , " " ) . split ( " , " ) ; <nl> + return encryptOpt ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> index 7887085 . . 5287bf5 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java <nl> @ @ - 24 , 18 + 24 , 21 @ @ import java . util . * ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions . InternodeEncryption ; <nl> import org . apache . cassandra . db . BufferCell ; <nl> import org . apache . cassandra . db . Cell ; <nl> import org . apache . cassandra . db . composites . CellNames ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . hadoop . AbstractBulkRecordWriter ; <nl> import org . apache . cassandra . hadoop . ConfigHelper ; <nl> import org . apache . cassandra . hadoop . HadoopCompat ; <nl> + import org . apache . cassandra . hadoop . cql3 . CqlBulkOutputFormat ; <nl> import org . apache . cassandra . hadoop . cql3 . CqlConfigHelper ; <nl> import org . apache . cassandra . hadoop . cql3 . CqlRecordReader ; <nl> import org . apache . cassandra . thrift . * ; <nl> - import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . utils . * ; <nl> + import org . apache . commons . lang . StringUtils ; <nl> import org . apache . hadoop . mapreduce . * ; <nl> import org . apache . pig . Expression ; <nl> import org . apache . pig . ResourceSchema ; <nl> @ @ - 54 , 6 + 57 , 7 @ @ import com . datastax . driver . core . Row ; <nl> public class CqlNativeStorage extends AbstractCassandraStorage <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( CqlNativeStorage . class ) ; <nl> + public static String BULK _ OUTPUT _ FORMAT = " org . apache . cassandra . hadoop . cql3 . CqlBulkOutputFormat " ; <nl> private int pageSize = 1000 ; <nl> private String columns ; <nl> private String outputQuery ; <nl> @ @ - 83 , 6 + 87 , 22 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> private String nativeSSLCipherSuites ; <nl> private String inputCql ; <nl> <nl> + private boolean bulkOutputFormat = false ; <nl> + private String bulkCfSchema ; <nl> + private String bulkInsertStatement ; <nl> + private String bulkOutputLocation ; <nl> + private int bulkBuffSize = - 1 ; <nl> + private int bulkStreamThrottle = - 1 ; <nl> + private int bulkMaxFailedHosts = - 1 ; <nl> + private int storagePort = CqlBulkOutputFormat . DEFAULT _ STORAGE _ PORT ; <nl> + private int sslStoragePort = CqlBulkOutputFormat . DEFAULT _ SSL _ STORAGE _ PORT ; <nl> + private String serverKeystore ; <nl> + private String serverKeystorePassword ; <nl> + private String serverTruststore ; <nl> + private String serverTruststorePassword ; <nl> + private String serverCipherSuites ; <nl> + private String internodeEncrypt ; <nl> + <nl> public CqlNativeStorage ( ) <nl> { <nl> this ( 1000 ) ; <nl> @ @ - 386 , 57 + 406 , 22 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> return keys ; <nl> } <nl> <nl> - <nl> - / * * output : ( ( ( name , value ) , ( name , value ) ) , ( value . . . value ) , ( value . . . value ) ) * / <nl> - public void putNext ( Tuple t ) throws IOException <nl> - { <nl> - if ( t . size ( ) < 1 ) <nl> - { <nl> - / / simply nothing here , we can ' t even delete without a key <nl> - logger . warn ( " Empty output skipped , filter empty tuples to suppress this warning " ) ; <nl> - return ; <nl> - } <nl> - <nl> - if ( t . getType ( 0 ) = = DataType . TUPLE ) <nl> - { <nl> - if ( t . getType ( 1 ) = = DataType . TUPLE ) <nl> - { <nl> - Map < String , ByteBuffer > key = tupleToKeyMap ( ( Tuple ) t . get ( 0 ) ) ; <nl> - cqlQueryFromTuple ( key , t , 1 ) ; <nl> - } <nl> - else <nl> - throw new IOException ( " Second argument in output must be a tuple " ) ; <nl> - } <nl> - else <nl> - throw new IOException ( " First argument in output must be a tuple " ) ; <nl> - } <nl> - <nl> / * * convert key tuple to key map * / <nl> private Map < String , ByteBuffer > tupleToKeyMap ( Tuple t ) throws IOException <nl> { <nl> Map < String , ByteBuffer > keys = new HashMap < String , ByteBuffer > ( ) ; <nl> for ( int i = 0 ; i < t . size ( ) ; i + + ) <nl> { <nl> - if ( t . getType ( i ) = = DataType . TUPLE ) <nl> - { <nl> - Tuple inner = ( Tuple ) t . get ( i ) ; <nl> - if ( inner . size ( ) = = 2 ) <nl> - { <nl> - Object name = inner . get ( 0 ) ; <nl> - if ( name ! = null ) <nl> - { <nl> - keys . put ( name . toString ( ) , objToBB ( inner . get ( 1 ) ) ) ; <nl> - } <nl> - else <nl> - throw new IOException ( " Key name was empty " ) ; <nl> - } <nl> - else <nl> - throw new IOException ( " Keys were not in name and value pairs " ) ; <nl> - } <nl> - else <nl> - { <nl> + if ( t . getType ( i ) ! = DataType . TUPLE ) <nl> throw new IOException ( " keys was not a tuple " ) ; <nl> - } <nl> + <nl> + Tuple inner = ( Tuple ) t . get ( i ) ; <nl> + if ( inner . size ( ) ! = 2 ) <nl> + throw new IOException ( " Keys were not in name and value pairs " ) ; <nl> + Object name = inner . get ( 0 ) ; <nl> + if ( name = = null ) <nl> + throw new IOException ( " Key name was empty " ) ; <nl> + keys . put ( name . toString ( ) , objToBB ( inner . get ( 1 ) ) ) ; <nl> } <nl> return keys ; <nl> } <nl> @ @ - 446 , 21 + 431 , 16 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> { <nl> for ( int i = offset ; i < t . size ( ) ; i + + ) <nl> { <nl> - if ( t . getType ( i ) = = DataType . TUPLE ) <nl> - { <nl> - Tuple inner = ( Tuple ) t . get ( i ) ; <nl> - if ( inner . size ( ) > 0 ) <nl> - { <nl> - List < ByteBuffer > bindedVariables = bindedVariablesFromTuple ( inner ) ; <nl> - if ( bindedVariables . size ( ) > 0 ) <nl> - sendCqlQuery ( key , bindedVariables ) ; <nl> - else <nl> - throw new IOException ( " Missing binded variables " ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> + if ( t . getType ( i ) ! = DataType . TUPLE ) <nl> throw new IOException ( " Output type was not a tuple " ) ; <nl> + <nl> + Tuple inner = ( Tuple ) t . get ( i ) ; <nl> + if ( inner . size ( ) > 0 ) <nl> + { <nl> + List < ByteBuffer > bindedVariables = bindedVariablesFromTuple ( inner ) ; <nl> + if ( bindedVariables . size ( ) < = 0 ) <nl> + throw new IOException ( " Missing binded variables " ) ; <nl> + sendCqlQuery ( key , bindedVariables ) ; <nl> } <nl> } <nl> } <nl> @ @ - 561 , 6 + 541 , 37 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> return property . getProperty ( PARTITION _ FILTER _ SIGNATURE ) ; <nl> } <nl> <nl> + / * * <nl> + * output : ( ( ( name , value ) , ( name , value ) ) , ( value . . . value ) , ( value . . . value ) ) <nl> + * bulk output : ( ( value . . . value ) , ( value . . . value ) ) <nl> + * <nl> + * * / <nl> + public void putNext ( Tuple t ) throws IOException <nl> + { <nl> + if ( t . size ( ) < 1 ) <nl> + { <nl> + / / simply nothing here , we can ' t even delete without a key <nl> + logger . warn ( " Empty output skipped , filter empty tuples to suppress this warning " ) ; <nl> + return ; <nl> + } <nl> + <nl> + if ( t . getType ( 0 ) ! = DataType . TUPLE ) <nl> + throw new IOException ( " First argument in output must be a tuple " ) ; <nl> + <nl> + if ( ! bulkOutputFormat & & t . getType ( 1 ) ! = DataType . TUPLE ) <nl> + throw new IOException ( " Second argument in output must be a tuple " ) ; <nl> + <nl> + if ( bulkOutputFormat ) <nl> + { <nl> + cqlQueryFromTuple ( null , t , 0 ) ; <nl> + } <nl> + else <nl> + { <nl> + Map < String , ByteBuffer > key = tupleToKeyMap ( ( Tuple ) t . get ( 0 ) ) ; <nl> + cqlQueryFromTuple ( key , t , 1 ) ; <nl> + } <nl> + } <nl> + <nl> / * * set read configuration settings * / <nl> public void setLocation ( String location , Job job ) throws IOException <nl> { <nl> @ @ - 688 , 6 + 699 , 42 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> ConfigHelper . setOutputColumnFamily ( conf , keyspace , column _ family ) ; <nl> CqlConfigHelper . setOutputCql ( conf , outputQuery ) ; <nl> <nl> + if ( bulkOutputFormat ) <nl> + { <nl> + DEFAULT _ OUTPUT _ FORMAT = BULK _ OUTPUT _ FORMAT ; <nl> + if ( bulkCfSchema ! = null ) <nl> + CqlBulkOutputFormat . setColumnFamilySchema ( conf , column _ family , bulkCfSchema ) ; <nl> + else <nl> + throw new IOException ( " bulk _ cf _ schema is missing in input url parameter " ) ; <nl> + if ( bulkInsertStatement ! = null ) <nl> + CqlBulkOutputFormat . setColumnFamilyInsertStatement ( conf , column _ family , bulkInsertStatement ) ; <nl> + else <nl> + throw new IOException ( " bulk _ insert _ statement is missing in input url parameter " ) ; <nl> + if ( bulkOutputLocation ! = null ) <nl> + conf . set ( AbstractBulkRecordWriter . OUTPUT _ LOCATION , bulkOutputLocation ) ; <nl> + if ( bulkBuffSize > 0 ) <nl> + conf . set ( AbstractBulkRecordWriter . BUFFER _ SIZE _ IN _ MB , String . valueOf ( bulkBuffSize ) ) ; <nl> + if ( bulkStreamThrottle > 0 ) <nl> + conf . set ( AbstractBulkRecordWriter . STREAM _ THROTTLE _ MBITS , String . valueOf ( bulkStreamThrottle ) ) ; <nl> + if ( bulkMaxFailedHosts > 0 ) <nl> + conf . set ( AbstractBulkRecordWriter . MAX _ FAILED _ HOSTS , String . valueOf ( bulkMaxFailedHosts ) ) ; <nl> + CqlBulkOutputFormat . setSSLStoragePort ( conf , sslStoragePort ) ; <nl> + CqlBulkOutputFormat . setStoragePort ( conf , storagePort ) ; <nl> + if ( serverEncrypted ( ) ) <nl> + { <nl> + if ( ! StringUtils . isEmpty ( serverKeystore ) ) <nl> + CqlBulkOutputFormat . setServerKeystore ( conf , serverKeystore ) ; <nl> + if ( ! StringUtils . isEmpty ( serverTruststore ) ) <nl> + CqlBulkOutputFormat . setServerTruststore ( conf , serverTruststore ) ; <nl> + if ( ! StringUtils . isEmpty ( serverKeystorePassword ) ) <nl> + CqlBulkOutputFormat . setServerKeystorePassword ( conf , serverKeystorePassword ) ; <nl> + if ( ! StringUtils . isEmpty ( serverTruststorePassword ) ) <nl> + CqlBulkOutputFormat . setServerTruststorePassword ( conf , serverTruststorePassword ) ; <nl> + if ( ! StringUtils . isEmpty ( serverCipherSuites ) ) <nl> + CqlBulkOutputFormat . setServerCipherSuites ( conf , serverCipherSuites ) ; <nl> + } <nl> + } <nl> + <nl> setConnectionInformation ( ) ; <nl> <nl> if ( ConfigHelper . getOutputRpcPort ( conf ) = = 0 ) <nl> @ @ - 700 , 6 + 747 , 12 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> initSchema ( storeSignature ) ; <nl> } <nl> <nl> + private boolean serverEncrypted ( ) <nl> + { <nl> + return ! StringUtils . isEmpty ( internodeEncrypt ) & & <nl> + InternodeEncryption . none ! = InternodeEncryption . valueOf ( internodeEncrypt . toLowerCase ( ) ) ; <nl> + } <nl> + <nl> private void setLocationFromUri ( String location ) throws IOException <nl> { <nl> try <nl> @ @ - 720 , 6 + 773 , 37 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> if ( urlQuery . containsKey ( " output _ query " ) ) <nl> outputQuery = urlQuery . get ( " output _ query " ) ; <nl> <nl> + if ( urlQuery . containsKey ( " bulk _ output _ format " ) ) <nl> + bulkOutputFormat = Boolean . valueOf ( urlQuery . get ( " bulk _ output _ format " ) ) ; <nl> + if ( urlQuery . containsKey ( " bulk _ cf _ schema " ) ) <nl> + bulkCfSchema = urlQuery . get ( " bulk _ cf _ schema " ) ; <nl> + if ( urlQuery . containsKey ( " bulk _ insert _ statement " ) ) <nl> + bulkInsertStatement = urlQuery . get ( " bulk _ insert _ statement " ) ; <nl> + if ( urlQuery . containsKey ( " bulk _ output _ location " ) ) <nl> + bulkOutputLocation = urlQuery . get ( " bulk _ output _ location " ) ; <nl> + if ( urlQuery . containsKey ( " bulk _ buff _ size " ) ) <nl> + bulkBuffSize = Integer . valueOf ( urlQuery . get ( " bulk _ buff _ size " ) ) ; <nl> + if ( urlQuery . containsKey ( " bulk _ stream _ throttle " ) ) <nl> + bulkStreamThrottle = Integer . valueOf ( urlQuery . get ( " bulk _ stream _ throttle " ) ) ; <nl> + if ( urlQuery . containsKey ( " bulk _ max _ failed _ hosts " ) ) <nl> + bulkMaxFailedHosts = Integer . valueOf ( urlQuery . get ( " bulk _ max _ failed _ hosts " ) ) ; <nl> + if ( urlQuery . containsKey ( " storage _ port " ) ) <nl> + storagePort = Integer . valueOf ( urlQuery . get ( " storage _ port " ) ) ; <nl> + if ( urlQuery . containsKey ( " ssl _ storage _ port " ) ) <nl> + sslStoragePort = Integer . valueOf ( urlQuery . get ( " ssl _ storage _ port " ) ) ; <nl> + if ( urlQuery . containsKey ( " internode _ encrypt " ) ) <nl> + internodeEncrypt = urlQuery . get ( " internode _ encrypt " ) ; <nl> + if ( urlQuery . containsKey ( " server _ keystore " ) ) <nl> + serverKeystore = urlQuery . get ( " server _ keystore " ) ; <nl> + if ( urlQuery . containsKey ( " server _ truststore " ) ) <nl> + serverTruststore = urlQuery . get ( " server _ truststore " ) ; <nl> + if ( urlQuery . containsKey ( " server _ keystore _ pass " ) ) <nl> + serverKeystorePassword = urlQuery . get ( " server _ keystore _ pass " ) ; <nl> + if ( urlQuery . containsKey ( " server _ truststore _ pass " ) ) <nl> + serverTruststorePassword = urlQuery . get ( " server _ truststore _ pass " ) ; <nl> + if ( urlQuery . containsKey ( " server _ cipher _ suites " ) ) <nl> + serverCipherSuites = urlQuery . get ( " server _ cipher _ suites " ) ; <nl> + <nl> / / split size <nl> if ( urlQuery . containsKey ( " split _ size " ) ) <nl> splitSize = Integer . parseInt ( urlQuery . get ( " split _ size " ) ) ; <nl> @ @ - 804 , 8 + 888 , 15 @ @ public class CqlNativeStorage extends AbstractCassandraStorage <nl> " [ & keep _ alive = < keep _ alive > ] [ & auth _ provider = < auth _ provider > ] [ & trust _ store _ path = < trust _ store _ path > ] " + <nl> " [ & key _ store _ path = < key _ store _ path > ] [ & trust _ store _ password = < trust _ store _ password > ] " + <nl> " [ & key _ store _ password = < key _ store _ password > ] [ & cipher _ suites = < cipher _ suites > ] [ & input _ cql = < input _ cql > ] " + <nl> - " [ columns = < columns > ] [ where _ clause = < where _ clause > ] ] ' : " + e . getMessage ( ) ) ; <nl> - } <nl> + " [ columns = < columns > ] [ where _ clause = < where _ clause > ] " + <nl> + " [ & bulk _ cf _ schema = bulk _ cf _ schema ] [ & bulk _ insert _ statement = bulk _ insert _ statement ] " + <nl> + " [ & bulk _ output _ location = < bulk _ output _ location > ] [ & bulk _ buff _ size = < bulk _ buff _ size > ] " + <nl> + " [ & storage _ port = < storage _ port > ] [ & ssl _ storage _ port = < ssl _ storage _ port > ] " + <nl> + " [ & server _ keystore = < server _ keystore > ] [ & server _ keystore _ pass = < server _ keystore _ pass > ] " + <nl> + " [ & server _ truststore = < server _ truststore > ] [ & server _ truststore _ pass = < server _ truststore _ pass > ] " + <nl> + " [ & server _ cipher _ suites = < server _ cipher _ suites > ] [ & internode _ encrypt = < internode _ encrypt > ] " + <nl> + " [ & bulk _ stream _ throttle = < bulk _ stream _ throttle > ] [ & bulk _ max _ failed _ hosts = < bulk _ max _ failed _ hosts > ] ] ' : " + e . getMessage ( ) ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java <nl> index c7277fa . . 66583ec 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java <nl> @ @ - 38 , 4 + 38 , 3 @ @ public class CqlStorage extends CqlNativeStorage <nl> super ( pageSize ) ; <nl> } <nl> } <nl> - <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> index 88a4404 . . f4b30cb 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> @ @ - 254 , 7 + 254 , 7 @ @ public class BulkLoader <nl> } <nl> } <nl> <nl> - static class ExternalClient extends SSTableLoader . Client <nl> + public static class ExternalClient extends SSTableLoader . Client <nl> { <nl> private final Map < String , CFMetaData > knownCfs = new HashMap < > ( ) ; <nl> private final Set < InetAddress > hosts ; <nl> diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml <nl> index ec988e2 . . 7be72dd 100644 <nl> - - - a / test / conf / cassandra . yaml <nl> + + + b / test / conf / cassandra . yaml <nl> @ @ - 10 , 6 + 10 , 7 @ @ commitlog _ segment _ size _ in _ mb : 5 <nl> partitioner : org . apache . cassandra . dht . ByteOrderedPartitioner <nl> listen _ address : 127 . 0 . 0 . 1 <nl> storage _ port : 7010 <nl> + ssl _ storage _ port : 7011 <nl> rpc _ port : 9170 <nl> start _ native _ transport : true <nl> native _ transport _ port : 9042 <nl> diff - - git a / test / pig / org / apache / cassandra / pig / CqlTableTest . java b / test / pig / org / apache / cassandra / pig / CqlTableTest . java <nl> index 4ca043d . . 2e1758e 100644 <nl> - - - a / test / pig / org / apache / cassandra / pig / CqlTableTest . java <nl> + + + b / test / pig / org / apache / cassandra / pig / CqlTableTest . java <nl> @ @ - 53 , 6 + 53 , 10 @ @ public class CqlTableTest extends PigTestBase <nl> " CREATE INDEX test _ b on test ( b ) ; " , <nl> <nl> " CREATE TABLE moredata ( x int PRIMARY KEY , y int ) ; " , <nl> + " CREATE TABLE test _ bulk ( a int PRIMARY KEY , b int ) ; " , <nl> + " INSERT INTO test _ bulk ( a , b ) VALUES ( 1 , 1 ) ; " , <nl> + " INSERT INTO test _ bulk ( a , b ) VALUES ( 2 , 2 ) ; " , <nl> + " INSERT INTO test _ bulk ( a , b ) VALUES ( 3 , 3 ) ; " , <nl> " INSERT INTO test ( a , b ) VALUES ( 1 , 1 ) ; " , <nl> " INSERT INTO test ( a , b ) VALUES ( 2 , 2 ) ; " , <nl> " INSERT INTO test ( a , b ) VALUES ( 3 , 3 ) ; " , <nl> @ @ - 160 , 10 + 164 , 13 @ @ public class CqlTableTest extends PigTestBase <nl> / / input _ cql = select * from test where token ( a ) > ? and token ( a ) < = ? <nl> pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / test ? " + defaultParameters + nativeParameters + " & input _ cql = select % 20 * % 20from % 20test % 20where % 20token ( a ) % 20 % 3E % 20 % 3F % 20and % 20token ( a ) % 20 % 3C % 3D % 20 % 3F ' USING CqlNativeStorage ( ) ; " ) ; <nl> Iterator < Tuple > it = pig . openIterator ( " result " ) ; <nl> + int count = 0 ; <nl> while ( it . hasNext ( ) ) { <nl> Tuple t = it . next ( ) ; <nl> Assert . assertEquals ( t . get ( 0 ) , t . get ( 1 ) ) ; <nl> + count + + ; <nl> } <nl> + Assert . assertEquals ( 6 , count ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 310 , 4 + 317 , 33 @ @ public class CqlTableTest extends PigTestBase <nl> Assert . fail ( " Can ' t fetch any data " ) ; <nl> } <nl> } <nl> + <nl> + @ Test <nl> + public void testCqlStorageSingleKeyTableBulkLoad ( ) <nl> + throws AuthenticationException , AuthorizationException , InvalidRequestException , UnavailableException , TimedOutException , TException , NotFoundException , SchemaDisagreementException , IOException <nl> + { <nl> + pig . setBatchOn ( ) ; <nl> + / / input _ cql = select * from moredata where token ( x ) > ? and token ( x ) < = ? <nl> + pig . registerQuery ( " moretestvalues = LOAD ' cql : / / cql3ks / moredata ? " + defaultParameters + nativeParameters + " & input _ cql = select % 20 * % 20from % 20moredata % 20where % 20token ( x ) % 20 % 3E % 20 % 3F % 20and % 20token ( x ) % 20 % 3C % 3D % 20 % 3F ' USING CqlNativeStorage ( ) ; " ) ; <nl> + pig . registerQuery ( " insertformat = FOREACH moretestvalues GENERATE TOTUPLE ( x , y ) ; " ) ; <nl> + pig . registerQuery ( " STORE insertformat INTO ' cql : / / cql3ks / test _ bulk ? " + defaultParameters + nativeParameters + " & bulk _ output _ format = true & bulk _ cf _ schema = CREATE % 20TABLE % 20cql3ks . test _ bulk % 20 ( a % 20int % 20PRIMARY % 20KEY % 2C % 20b % 20int ) & bulk _ insert _ statement = Insert % 20into % 20cql3ks . test _ bulk ( a % 2C % 20b ) % 20values ( % 3F % 2C % 3F ) ' USING CqlNativeStorage ( ) ; " ) ; <nl> + pig . executeBatch ( ) ; <nl> + <nl> + / / ( 5 , 5 ) <nl> + / / ( 6 , 6 ) <nl> + / / ( 4 , 4 ) <nl> + / / ( 2 , 2 ) <nl> + / / ( 3 , 3 ) <nl> + / / ( 1 , 1 ) <nl> + / / input _ cql = select * from test _ bulk1 where token ( a ) > ? and token ( a ) < = ? <nl> + pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / test _ bulk ? " + defaultParameters + nativeParameters + " & input _ cql = select % 20 * % 20from % 20test _ bulk % 20where % 20token ( a ) % 20 % 3E % 20 % 3F % 20and % 20token ( a ) % 20 % 3C % 3D % 20 % 3F ' USING CqlNativeStorage ( ) ; " ) ; <nl> + Iterator < Tuple > it = pig . openIterator ( " result " ) ; <nl> + int count = 0 ; <nl> + while ( it . hasNext ( ) ) { <nl> + Tuple t = it . next ( ) ; <nl> + Assert . assertEquals ( t . get ( 0 ) , t . get ( 1 ) ) ; <nl> + count + + ; <nl> + } <nl> + Assert . assertEquals ( 6 , count ) ; <nl> + } <nl> } <nl> diff - - git a / test / pig / org / apache / cassandra / pig / PigTestBase . java b / test / pig / org / apache / cassandra / pig / PigTestBase . java <nl> index 4b3e422 . . e6964f8 100644 <nl> - - - a / test / pig / org / apache / cassandra / pig / PigTestBase . java <nl> + + + b / test / pig / org / apache / cassandra / pig / PigTestBase . java <nl> @ @ - 65 , 7 + 65 , 8 @ @ public class PigTestBase extends SchemaLoader <nl> protected static Configuration conf ; <nl> protected static MiniCluster cluster ; <nl> protected static PigServer pig ; <nl> - protected static String defaultParameters = " init _ address = localhost & rpc _ port = 9170 & partitioner = org . apache . cassandra . dht . ByteOrderedPartitioner " ; <nl> + protected static String defaultParameters = " init _ address = localhost & rpc _ port = 9170 & partitioner = org . apache . cassandra . dht . ByteOrderedPartitioner " + <nl> + " & storage _ port = 7010 & ssl _ storage _ port = 7011 & internode _ encrypt = NONE " ; <nl> protected static String nativeParameters = " & core _ conns = 2 & max _ conns = 10 & min _ simult _ reqs = 3 & max _ simult _ reqs = 10 & native _ timeout = 10000000 " + <nl> " & native _ read _ timeout = 10000000 & send _ buff _ size = 4096 & receive _ buff _ size = 4096 & solinger = 3 " + <nl> " & tcp _ nodelay = true & reuse _ address = true & keep _ alive = true & native _ port = 9042 " ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dff47fc . . 5f11049 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 10 
 + * ( Pig ) support BulkOutputFormat as a URL parameter ( CASSANDRA - 7410 ) 
 * BATCH statement is broken in cqlsh ( CASSANDRA - 10272 ) 
 * Added configurable warning threshold for GC duration ( CASSANDRA - 8907 ) 
 * ( cqlsh ) Make cqlsh PEP8 compliant ( CASSANDRA - 10066 ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java 
 index 887fe8e . . 7fedb41 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkOutputFormat . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . config . EncryptionOptions ; 
 import org . apache . cassandra . hadoop . AbstractBulkOutputFormat ; 
 import org . apache . cassandra . hadoop . ConfigHelper ; 
 import org . apache . hadoop . conf . Configuration ; 
 @ @ - 54 , 6 + 55 , 16 @ @ public class CqlBulkOutputFormat extends AbstractBulkOutputFormat < Object , List < B 
 private static final String OUTPUT _ CQL _ SCHEMA _ PREFIX = " cassandra . columnfamily . schema . " ; 
 private static final String OUTPUT _ CQL _ INSERT _ PREFIX = " cassandra . columnfamily . insert . " ; 
 private static final String DELETE _ SOURCE = " cassandra . output . delete . source " ; 
 + private static final String OUTPUT _ CQL _ STORAGE _ PORT = " cassandra . storage . port " ; 
 + private static final String OUTPUT _ CQL _ SSL _ STORAGE _ PORT = " cassandra . ssl . storage . port " ; 
 + private static final String INTERNODE _ ENCRYPTION = " cassandra . internode . encryption " ; 
 + private static final String SERVER _ KEYSTORE = " cassandra . server . keystore " ; 
 + private static final String SERVER _ KEYSTORE _ PASSWORD = " cassandra . server . keystore . password " ; 
 + private static final String SERVER _ TRUSTSTORE = " cassandra . server . truststore " ; 
 + private static final String SERVER _ TRUSTSTORE _ PASSWORD = " cassandra . server . truststore . password " ; 
 + private static final String SERVER _ CIPHER _ SUITES = " cassandra . server . truststore . password " ; 
 + public static final int DEFAULT _ STORAGE _ PORT = 7000 ; 
 + public static final int DEFAULT _ SSL _ STORAGE _ PORT = 7001 ; 
 
 / * * Fills the deprecated OutputFormat interface for streaming . * / 
 @ Deprecated 
 @ @ - 84 , 7 + 95 , 87 @ @ public class CqlBulkOutputFormat extends AbstractBulkOutputFormat < Object , List < B 
 { 
 conf . set ( OUTPUT _ CQL _ INSERT _ PREFIX + columnFamily , insertStatement ) ; 
 } 
 - 
 + 
 + public static void setStoragePort ( Configuration conf , int port ) 
 + { 
 + conf . set ( OUTPUT _ CQL _ STORAGE _ PORT , " " + port ) ; 
 + } 
 + 
 + public static void setSSLStoragePort ( Configuration conf , int port ) 
 + { 
 + conf . set ( OUTPUT _ CQL _ SSL _ STORAGE _ PORT , " " + port ) ; 
 + } 
 + 
 + public static void setInternodeEncryption ( Configuration conf , String encrypt ) 
 + { 
 + conf . set ( INTERNODE _ ENCRYPTION , encrypt ) ; 
 + } 
 + 
 + public static void setServerKeystore ( Configuration conf , String keystore ) 
 + { 
 + conf . set ( SERVER _ KEYSTORE , keystore ) ; 
 + } 
 + 
 + public static void setServerKeystorePassword ( Configuration conf , String keystorePass ) 
 + { 
 + conf . set ( SERVER _ KEYSTORE _ PASSWORD , keystorePass ) ; 
 + } 
 + 
 + public static void setServerTruststore ( Configuration conf , String truststore ) 
 + { 
 + conf . set ( SERVER _ TRUSTSTORE , truststore ) ; 
 + } 
 + 
 + public static void setServerTruststorePassword ( Configuration conf , String truststorePass ) 
 + { 
 + conf . set ( SERVER _ TRUSTSTORE _ PASSWORD , truststorePass ) ; 
 + } 
 + 
 + public static void setServerCipherSuites ( Configuration conf , String cipherSuites ) 
 + { 
 + conf . set ( SERVER _ CIPHER _ SUITES , cipherSuites ) ; 
 + } 
 + 
 + public static int getStoragePort ( Configuration conf ) 
 + { 
 + return conf . getInt ( OUTPUT _ CQL _ STORAGE _ PORT , DEFAULT _ STORAGE _ PORT ) ; 
 + } 
 + 
 + public static int getSSLStoragePort ( Configuration conf ) 
 + { 
 + return conf . getInt ( OUTPUT _ CQL _ SSL _ STORAGE _ PORT , DEFAULT _ SSL _ STORAGE _ PORT ) ; 
 + } 
 + 
 + public static String getInternodeEncryption ( Configuration conf ) 
 + { 
 + return conf . get ( INTERNODE _ ENCRYPTION , EncryptionOptions . ServerEncryptionOptions . InternodeEncryption . none . name ( ) ) ; 
 + } 
 + 
 + public static String getServerKeystore ( Configuration conf ) 
 + { 
 + return conf . get ( SERVER _ KEYSTORE ) ; 
 + } 
 + 
 + public static String getServerTruststore ( Configuration conf ) 
 + { 
 + return conf . get ( SERVER _ TRUSTSTORE ) ; 
 + } 
 + 
 + public static String getServerKeystorePassword ( Configuration conf ) 
 + { 
 + return conf . get ( SERVER _ KEYSTORE _ PASSWORD ) ; 
 + } 
 + 
 + public static String getServerTruststorePassword ( Configuration conf ) 
 + { 
 + return conf . get ( SERVER _ TRUSTSTORE _ PASSWORD ) ; 
 + } 
 + 
 + public static String getServerCipherSuites ( Configuration conf ) 
 + { 
 + return conf . get ( SERVER _ CIPHER _ SUITES ) ; 
 + } 
 + 
 public static String getColumnFamilySchema ( Configuration conf , String columnFamily ) 
 { 
 String schema = conf . get ( OUTPUT _ CQL _ SCHEMA _ PREFIX + columnFamily ) ; 
 diff - - git a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java 
 index e60a240 . . ced8aa9 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / cql3 / CqlBulkRecordWriter . java 
 @ @ - 19 , 13 + 19 , 16 @ @ package org . apache . cassandra . hadoop . cql3 ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . net . InetAddress ; 
 + import java . net . UnknownHostException ; 
 import java . nio . ByteBuffer ; 
 - import java . util . HashMap ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 - import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . UUID ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . EncryptionOptions ; 
 + import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 import org . apache . cassandra . hadoop . AbstractBulkRecordWriter ; 
 import org . apache . cassandra . hadoop . BulkRecordWriter ; 
 @ @ - 35 , 6 + 38 , 9 @ @ import org . apache . cassandra . io . sstable . CQLSSTableWriter ; 
 import org . apache . cassandra . io . sstable . SSTableLoader ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . streaming . StreamState ; 
 + import org . apache . cassandra . thrift . ITransportFactory ; 
 + import org . apache . cassandra . tools . BulkLoader ; 
 + import org . apache . commons . lang . StringUtils ; 
 import org . apache . hadoop . conf . Configuration ; 
 import org . apache . hadoop . mapreduce . TaskAttemptContext ; 
 import org . apache . hadoop . util . Progressable ; 
 @ @ - 108 , 10 + 114 , 7 @ @ public class CqlBulkRecordWriter extends AbstractBulkRecordWriter < Object , List < B 
 } 
 if ( loader = = null ) 
 { 
 - ExternalClient externalClient = new ExternalClient ( conf ) ; 
 - 
 - externalClient . addKnownCfs ( keyspace , schema ) ; 
 - 
 + BulkLoader . ExternalClient externalClient = getExternalClient ( conf ) ; 
 this . loader = new SSTableLoader ( outputDir , externalClient , new BulkRecordWriter . NullOutputHandler ( ) ) { 
 @ Override 
 public void onSuccess ( StreamState finalState ) 
 @ @ - 171 , 41 + 174 , 53 @ @ public class CqlBulkRecordWriter extends AbstractBulkRecordWriter < Object , List < B 
 
 return dir ; 
 } 
 - 
 - public static class ExternalClient extends AbstractBulkRecordWriter . ExternalClient 
 - { 
 - private Map < String , Map < String , CFMetaData > > knownCqlCfs = new HashMap < > ( ) ; 
 - 
 - public ExternalClient ( Configuration conf ) 
 - { 
 - super ( conf ) ; 
 - } 
 
 - public void addKnownCfs ( String keyspace , String cql ) 
 + private BulkLoader . ExternalClient getExternalClient ( Configuration conf ) 
 + { 
 + Set < InetAddress > hosts = new HashSet < InetAddress > ( ) ; 
 + String outputAddress = ConfigHelper . getOutputInitialAddress ( conf ) ; 
 + if ( outputAddress = = null ) outputAddress = " localhost " ; 
 + String [ ] nodes = outputAddress . split ( " , " ) ; 
 + for ( String node : nodes ) 
 { 
 - Map < String , CFMetaData > cfs = knownCqlCfs . get ( keyspace ) ; 
 - 
 - if ( cfs = = null ) 
 + try 
 { 
 - cfs = new HashMap < > ( ) ; 
 - knownCqlCfs . put ( keyspace , cfs ) ; 
 + hosts . add ( InetAddress . getByName ( node ) ) ; 
 } 
 - 
 - CFMetaData metadata = CFMetaData . compile ( cql , keyspace ) ; 
 - cfs . put ( metadata . cfName , metadata ) ; 
 - } 
 - 
 - @ Override 
 - public CFMetaData getCFMetaData ( String keyspace , String cfName ) 
 - { 
 - CFMetaData metadata = super . getCFMetaData ( keyspace , cfName ) ; 
 - if ( metadata ! = null ) 
 + catch ( UnknownHostException e ) 
 { 
 - return metadata ; 
 + throw new RuntimeException ( e ) ; 
 } 
 - 
 - Map < String , CFMetaData > cfs = knownCqlCfs . get ( keyspace ) ; 
 - return cfs ! = null ? cfs . get ( cfName ) : null ; 
 } 
 + int rpcPort = ConfigHelper . getOutputRpcPort ( conf ) ; 
 + String username = ConfigHelper . getOutputKeyspaceUserName ( conf ) ; 
 + String password = ConfigHelper . getOutputKeyspacePassword ( conf ) ; 
 + ITransportFactory transportFactory = ConfigHelper . getClientTransportFactory ( conf ) ; 
 + return new BulkLoader . ExternalClient ( hosts , 
 + rpcPort , 
 + username , 
 + password , 
 + transportFactory , 
 + CqlBulkOutputFormat . getStoragePort ( conf ) , 
 + CqlBulkOutputFormat . getSSLStoragePort ( conf ) , 
 + getServerEncryptOpt ( conf ) ) ; 
 + } 
 + 
 + private ServerEncryptionOptions getServerEncryptOpt ( Configuration conf ) 
 + { 
 + ServerEncryptionOptions encryptOpt = new ServerEncryptionOptions ( ) ; 
 + String internodeEncrypt = CqlBulkOutputFormat . getInternodeEncryption ( conf ) ; 
 + if ( StringUtils . isEmpty ( internodeEncrypt ) ) 
 + return encryptOpt ; 
 + 
 + encryptOpt . internode _ encryption = EncryptionOptions . ServerEncryptionOptions . InternodeEncryption . valueOf ( internodeEncrypt ) ; 
 + encryptOpt . keystore = CqlBulkOutputFormat . getServerKeystore ( conf ) ; 
 + encryptOpt . truststore = CqlBulkOutputFormat . getServerTruststore ( conf ) ; 
 + encryptOpt . keystore _ password = CqlBulkOutputFormat . getServerKeystorePassword ( conf ) ; 
 + encryptOpt . truststore _ password = CqlBulkOutputFormat . getServerTruststorePassword ( conf ) ; 
 + String cipherSuites = CqlBulkOutputFormat . getServerCipherSuites ( conf ) ; 
 + if ( ! StringUtils . isEmpty ( cipherSuites ) ) 
 + encryptOpt . cipher _ suites = cipherSuites . replace ( " " , " " ) . split ( " , " ) ; 
 + return encryptOpt ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 index 7887085 . . 5287bf5 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlNativeStorage . java 
 @ @ - 24 , 18 + 24 , 21 @ @ import java . util . * ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . EncryptionOptions . ServerEncryptionOptions . InternodeEncryption ; 
 import org . apache . cassandra . db . BufferCell ; 
 import org . apache . cassandra . db . Cell ; 
 import org . apache . cassandra . db . composites . CellNames ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . hadoop . AbstractBulkRecordWriter ; 
 import org . apache . cassandra . hadoop . ConfigHelper ; 
 import org . apache . cassandra . hadoop . HadoopCompat ; 
 + import org . apache . cassandra . hadoop . cql3 . CqlBulkOutputFormat ; 
 import org . apache . cassandra . hadoop . cql3 . CqlConfigHelper ; 
 import org . apache . cassandra . hadoop . cql3 . CqlRecordReader ; 
 import org . apache . cassandra . thrift . * ; 
 - import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . utils . * ; 
 + import org . apache . commons . lang . StringUtils ; 
 import org . apache . hadoop . mapreduce . * ; 
 import org . apache . pig . Expression ; 
 import org . apache . pig . ResourceSchema ; 
 @ @ - 54 , 6 + 57 , 7 @ @ import com . datastax . driver . core . Row ; 
 public class CqlNativeStorage extends AbstractCassandraStorage 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( CqlNativeStorage . class ) ; 
 + public static String BULK _ OUTPUT _ FORMAT = " org . apache . cassandra . hadoop . cql3 . CqlBulkOutputFormat " ; 
 private int pageSize = 1000 ; 
 private String columns ; 
 private String outputQuery ; 
 @ @ - 83 , 6 + 87 , 22 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 private String nativeSSLCipherSuites ; 
 private String inputCql ; 
 
 + private boolean bulkOutputFormat = false ; 
 + private String bulkCfSchema ; 
 + private String bulkInsertStatement ; 
 + private String bulkOutputLocation ; 
 + private int bulkBuffSize = - 1 ; 
 + private int bulkStreamThrottle = - 1 ; 
 + private int bulkMaxFailedHosts = - 1 ; 
 + private int storagePort = CqlBulkOutputFormat . DEFAULT _ STORAGE _ PORT ; 
 + private int sslStoragePort = CqlBulkOutputFormat . DEFAULT _ SSL _ STORAGE _ PORT ; 
 + private String serverKeystore ; 
 + private String serverKeystorePassword ; 
 + private String serverTruststore ; 
 + private String serverTruststorePassword ; 
 + private String serverCipherSuites ; 
 + private String internodeEncrypt ; 
 + 
 public CqlNativeStorage ( ) 
 { 
 this ( 1000 ) ; 
 @ @ - 386 , 57 + 406 , 22 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 return keys ; 
 } 
 
 - 
 - / * * output : ( ( ( name , value ) , ( name , value ) ) , ( value . . . value ) , ( value . . . value ) ) * / 
 - public void putNext ( Tuple t ) throws IOException 
 - { 
 - if ( t . size ( ) < 1 ) 
 - { 
 - / / simply nothing here , we can ' t even delete without a key 
 - logger . warn ( " Empty output skipped , filter empty tuples to suppress this warning " ) ; 
 - return ; 
 - } 
 - 
 - if ( t . getType ( 0 ) = = DataType . TUPLE ) 
 - { 
 - if ( t . getType ( 1 ) = = DataType . TUPLE ) 
 - { 
 - Map < String , ByteBuffer > key = tupleToKeyMap ( ( Tuple ) t . get ( 0 ) ) ; 
 - cqlQueryFromTuple ( key , t , 1 ) ; 
 - } 
 - else 
 - throw new IOException ( " Second argument in output must be a tuple " ) ; 
 - } 
 - else 
 - throw new IOException ( " First argument in output must be a tuple " ) ; 
 - } 
 - 
 / * * convert key tuple to key map * / 
 private Map < String , ByteBuffer > tupleToKeyMap ( Tuple t ) throws IOException 
 { 
 Map < String , ByteBuffer > keys = new HashMap < String , ByteBuffer > ( ) ; 
 for ( int i = 0 ; i < t . size ( ) ; i + + ) 
 { 
 - if ( t . getType ( i ) = = DataType . TUPLE ) 
 - { 
 - Tuple inner = ( Tuple ) t . get ( i ) ; 
 - if ( inner . size ( ) = = 2 ) 
 - { 
 - Object name = inner . get ( 0 ) ; 
 - if ( name ! = null ) 
 - { 
 - keys . put ( name . toString ( ) , objToBB ( inner . get ( 1 ) ) ) ; 
 - } 
 - else 
 - throw new IOException ( " Key name was empty " ) ; 
 - } 
 - else 
 - throw new IOException ( " Keys were not in name and value pairs " ) ; 
 - } 
 - else 
 - { 
 + if ( t . getType ( i ) ! = DataType . TUPLE ) 
 throw new IOException ( " keys was not a tuple " ) ; 
 - } 
 + 
 + Tuple inner = ( Tuple ) t . get ( i ) ; 
 + if ( inner . size ( ) ! = 2 ) 
 + throw new IOException ( " Keys were not in name and value pairs " ) ; 
 + Object name = inner . get ( 0 ) ; 
 + if ( name = = null ) 
 + throw new IOException ( " Key name was empty " ) ; 
 + keys . put ( name . toString ( ) , objToBB ( inner . get ( 1 ) ) ) ; 
 } 
 return keys ; 
 } 
 @ @ - 446 , 21 + 431 , 16 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 { 
 for ( int i = offset ; i < t . size ( ) ; i + + ) 
 { 
 - if ( t . getType ( i ) = = DataType . TUPLE ) 
 - { 
 - Tuple inner = ( Tuple ) t . get ( i ) ; 
 - if ( inner . size ( ) > 0 ) 
 - { 
 - List < ByteBuffer > bindedVariables = bindedVariablesFromTuple ( inner ) ; 
 - if ( bindedVariables . size ( ) > 0 ) 
 - sendCqlQuery ( key , bindedVariables ) ; 
 - else 
 - throw new IOException ( " Missing binded variables " ) ; 
 - } 
 - } 
 - else 
 - { 
 + if ( t . getType ( i ) ! = DataType . TUPLE ) 
 throw new IOException ( " Output type was not a tuple " ) ; 
 + 
 + Tuple inner = ( Tuple ) t . get ( i ) ; 
 + if ( inner . size ( ) > 0 ) 
 + { 
 + List < ByteBuffer > bindedVariables = bindedVariablesFromTuple ( inner ) ; 
 + if ( bindedVariables . size ( ) < = 0 ) 
 + throw new IOException ( " Missing binded variables " ) ; 
 + sendCqlQuery ( key , bindedVariables ) ; 
 } 
 } 
 } 
 @ @ - 561 , 6 + 541 , 37 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 return property . getProperty ( PARTITION _ FILTER _ SIGNATURE ) ; 
 } 
 
 + / * * 
 + * output : ( ( ( name , value ) , ( name , value ) ) , ( value . . . value ) , ( value . . . value ) ) 
 + * bulk output : ( ( value . . . value ) , ( value . . . value ) ) 
 + * 
 + * * / 
 + public void putNext ( Tuple t ) throws IOException 
 + { 
 + if ( t . size ( ) < 1 ) 
 + { 
 + / / simply nothing here , we can ' t even delete without a key 
 + logger . warn ( " Empty output skipped , filter empty tuples to suppress this warning " ) ; 
 + return ; 
 + } 
 + 
 + if ( t . getType ( 0 ) ! = DataType . TUPLE ) 
 + throw new IOException ( " First argument in output must be a tuple " ) ; 
 + 
 + if ( ! bulkOutputFormat & & t . getType ( 1 ) ! = DataType . TUPLE ) 
 + throw new IOException ( " Second argument in output must be a tuple " ) ; 
 + 
 + if ( bulkOutputFormat ) 
 + { 
 + cqlQueryFromTuple ( null , t , 0 ) ; 
 + } 
 + else 
 + { 
 + Map < String , ByteBuffer > key = tupleToKeyMap ( ( Tuple ) t . get ( 0 ) ) ; 
 + cqlQueryFromTuple ( key , t , 1 ) ; 
 + } 
 + } 
 + 
 / * * set read configuration settings * / 
 public void setLocation ( String location , Job job ) throws IOException 
 { 
 @ @ - 688 , 6 + 699 , 42 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 ConfigHelper . setOutputColumnFamily ( conf , keyspace , column _ family ) ; 
 CqlConfigHelper . setOutputCql ( conf , outputQuery ) ; 
 
 + if ( bulkOutputFormat ) 
 + { 
 + DEFAULT _ OUTPUT _ FORMAT = BULK _ OUTPUT _ FORMAT ; 
 + if ( bulkCfSchema ! = null ) 
 + CqlBulkOutputFormat . setColumnFamilySchema ( conf , column _ family , bulkCfSchema ) ; 
 + else 
 + throw new IOException ( " bulk _ cf _ schema is missing in input url parameter " ) ; 
 + if ( bulkInsertStatement ! = null ) 
 + CqlBulkOutputFormat . setColumnFamilyInsertStatement ( conf , column _ family , bulkInsertStatement ) ; 
 + else 
 + throw new IOException ( " bulk _ insert _ statement is missing in input url parameter " ) ; 
 + if ( bulkOutputLocation ! = null ) 
 + conf . set ( AbstractBulkRecordWriter . OUTPUT _ LOCATION , bulkOutputLocation ) ; 
 + if ( bulkBuffSize > 0 ) 
 + conf . set ( AbstractBulkRecordWriter . BUFFER _ SIZE _ IN _ MB , String . valueOf ( bulkBuffSize ) ) ; 
 + if ( bulkStreamThrottle > 0 ) 
 + conf . set ( AbstractBulkRecordWriter . STREAM _ THROTTLE _ MBITS , String . valueOf ( bulkStreamThrottle ) ) ; 
 + if ( bulkMaxFailedHosts > 0 ) 
 + conf . set ( AbstractBulkRecordWriter . MAX _ FAILED _ HOSTS , String . valueOf ( bulkMaxFailedHosts ) ) ; 
 + CqlBulkOutputFormat . setSSLStoragePort ( conf , sslStoragePort ) ; 
 + CqlBulkOutputFormat . setStoragePort ( conf , storagePort ) ; 
 + if ( serverEncrypted ( ) ) 
 + { 
 + if ( ! StringUtils . isEmpty ( serverKeystore ) ) 
 + CqlBulkOutputFormat . setServerKeystore ( conf , serverKeystore ) ; 
 + if ( ! StringUtils . isEmpty ( serverTruststore ) ) 
 + CqlBulkOutputFormat . setServerTruststore ( conf , serverTruststore ) ; 
 + if ( ! StringUtils . isEmpty ( serverKeystorePassword ) ) 
 + CqlBulkOutputFormat . setServerKeystorePassword ( conf , serverKeystorePassword ) ; 
 + if ( ! StringUtils . isEmpty ( serverTruststorePassword ) ) 
 + CqlBulkOutputFormat . setServerTruststorePassword ( conf , serverTruststorePassword ) ; 
 + if ( ! StringUtils . isEmpty ( serverCipherSuites ) ) 
 + CqlBulkOutputFormat . setServerCipherSuites ( conf , serverCipherSuites ) ; 
 + } 
 + } 
 + 
 setConnectionInformation ( ) ; 
 
 if ( ConfigHelper . getOutputRpcPort ( conf ) = = 0 ) 
 @ @ - 700 , 6 + 747 , 12 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 initSchema ( storeSignature ) ; 
 } 
 
 + private boolean serverEncrypted ( ) 
 + { 
 + return ! StringUtils . isEmpty ( internodeEncrypt ) & & 
 + InternodeEncryption . none ! = InternodeEncryption . valueOf ( internodeEncrypt . toLowerCase ( ) ) ; 
 + } 
 + 
 private void setLocationFromUri ( String location ) throws IOException 
 { 
 try 
 @ @ - 720 , 6 + 773 , 37 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 if ( urlQuery . containsKey ( " output _ query " ) ) 
 outputQuery = urlQuery . get ( " output _ query " ) ; 
 
 + if ( urlQuery . containsKey ( " bulk _ output _ format " ) ) 
 + bulkOutputFormat = Boolean . valueOf ( urlQuery . get ( " bulk _ output _ format " ) ) ; 
 + if ( urlQuery . containsKey ( " bulk _ cf _ schema " ) ) 
 + bulkCfSchema = urlQuery . get ( " bulk _ cf _ schema " ) ; 
 + if ( urlQuery . containsKey ( " bulk _ insert _ statement " ) ) 
 + bulkInsertStatement = urlQuery . get ( " bulk _ insert _ statement " ) ; 
 + if ( urlQuery . containsKey ( " bulk _ output _ location " ) ) 
 + bulkOutputLocation = urlQuery . get ( " bulk _ output _ location " ) ; 
 + if ( urlQuery . containsKey ( " bulk _ buff _ size " ) ) 
 + bulkBuffSize = Integer . valueOf ( urlQuery . get ( " bulk _ buff _ size " ) ) ; 
 + if ( urlQuery . containsKey ( " bulk _ stream _ throttle " ) ) 
 + bulkStreamThrottle = Integer . valueOf ( urlQuery . get ( " bulk _ stream _ throttle " ) ) ; 
 + if ( urlQuery . containsKey ( " bulk _ max _ failed _ hosts " ) ) 
 + bulkMaxFailedHosts = Integer . valueOf ( urlQuery . get ( " bulk _ max _ failed _ hosts " ) ) ; 
 + if ( urlQuery . containsKey ( " storage _ port " ) ) 
 + storagePort = Integer . valueOf ( urlQuery . get ( " storage _ port " ) ) ; 
 + if ( urlQuery . containsKey ( " ssl _ storage _ port " ) ) 
 + sslStoragePort = Integer . valueOf ( urlQuery . get ( " ssl _ storage _ port " ) ) ; 
 + if ( urlQuery . containsKey ( " internode _ encrypt " ) ) 
 + internodeEncrypt = urlQuery . get ( " internode _ encrypt " ) ; 
 + if ( urlQuery . containsKey ( " server _ keystore " ) ) 
 + serverKeystore = urlQuery . get ( " server _ keystore " ) ; 
 + if ( urlQuery . containsKey ( " server _ truststore " ) ) 
 + serverTruststore = urlQuery . get ( " server _ truststore " ) ; 
 + if ( urlQuery . containsKey ( " server _ keystore _ pass " ) ) 
 + serverKeystorePassword = urlQuery . get ( " server _ keystore _ pass " ) ; 
 + if ( urlQuery . containsKey ( " server _ truststore _ pass " ) ) 
 + serverTruststorePassword = urlQuery . get ( " server _ truststore _ pass " ) ; 
 + if ( urlQuery . containsKey ( " server _ cipher _ suites " ) ) 
 + serverCipherSuites = urlQuery . get ( " server _ cipher _ suites " ) ; 
 + 
 / / split size 
 if ( urlQuery . containsKey ( " split _ size " ) ) 
 splitSize = Integer . parseInt ( urlQuery . get ( " split _ size " ) ) ; 
 @ @ - 804 , 8 + 888 , 15 @ @ public class CqlNativeStorage extends AbstractCassandraStorage 
 " [ & keep _ alive = < keep _ alive > ] [ & auth _ provider = < auth _ provider > ] [ & trust _ store _ path = < trust _ store _ path > ] " + 
 " [ & key _ store _ path = < key _ store _ path > ] [ & trust _ store _ password = < trust _ store _ password > ] " + 
 " [ & key _ store _ password = < key _ store _ password > ] [ & cipher _ suites = < cipher _ suites > ] [ & input _ cql = < input _ cql > ] " + 
 - " [ columns = < columns > ] [ where _ clause = < where _ clause > ] ] ' : " + e . getMessage ( ) ) ; 
 - } 
 + " [ columns = < columns > ] [ where _ clause = < where _ clause > ] " + 
 + " [ & bulk _ cf _ schema = bulk _ cf _ schema ] [ & bulk _ insert _ statement = bulk _ insert _ statement ] " + 
 + " [ & bulk _ output _ location = < bulk _ output _ location > ] [ & bulk _ buff _ size = < bulk _ buff _ size > ] " + 
 + " [ & storage _ port = < storage _ port > ] [ & ssl _ storage _ port = < ssl _ storage _ port > ] " + 
 + " [ & server _ keystore = < server _ keystore > ] [ & server _ keystore _ pass = < server _ keystore _ pass > ] " + 
 + " [ & server _ truststore = < server _ truststore > ] [ & server _ truststore _ pass = < server _ truststore _ pass > ] " + 
 + " [ & server _ cipher _ suites = < server _ cipher _ suites > ] [ & internode _ encrypt = < internode _ encrypt > ] " + 
 + " [ & bulk _ stream _ throttle = < bulk _ stream _ throttle > ] [ & bulk _ max _ failed _ hosts = < bulk _ max _ failed _ hosts > ] ] ' : " + e . getMessage ( ) ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java b / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java 
 index c7277fa . . 66583ec 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java 
 + + + b / src / java / org / apache / cassandra / hadoop / pig / CqlStorage . java 
 @ @ - 38 , 4 + 38 , 3 @ @ public class CqlStorage extends CqlNativeStorage 
 super ( pageSize ) ; 
 } 
 } 
 - 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 index 88a4404 . . f4b30cb 100644 
 - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 @ @ - 254 , 7 + 254 , 7 @ @ public class BulkLoader 
 } 
 } 
 
 - static class ExternalClient extends SSTableLoader . Client 
 + public static class ExternalClient extends SSTableLoader . Client 
 { 
 private final Map < String , CFMetaData > knownCfs = new HashMap < > ( ) ; 
 private final Set < InetAddress > hosts ; 
 diff - - git a / test / conf / cassandra . yaml b / test / conf / cassandra . yaml 
 index ec988e2 . . 7be72dd 100644 
 - - - a / test / conf / cassandra . yaml 
 + + + b / test / conf / cassandra . yaml 
 @ @ - 10 , 6 + 10 , 7 @ @ commitlog _ segment _ size _ in _ mb : 5 
 partitioner : org . apache . cassandra . dht . ByteOrderedPartitioner 
 listen _ address : 127 . 0 . 0 . 1 
 storage _ port : 7010 
 + ssl _ storage _ port : 7011 
 rpc _ port : 9170 
 start _ native _ transport : true 
 native _ transport _ port : 9042 
 diff - - git a / test / pig / org / apache / cassandra / pig / CqlTableTest . java b / test / pig / org / apache / cassandra / pig / CqlTableTest . java 
 index 4ca043d . . 2e1758e 100644 
 - - - a / test / pig / org / apache / cassandra / pig / CqlTableTest . java 
 + + + b / test / pig / org / apache / cassandra / pig / CqlTableTest . java 
 @ @ - 53 , 6 + 53 , 10 @ @ public class CqlTableTest extends PigTestBase 
 " CREATE INDEX test _ b on test ( b ) ; " , 
 
 " CREATE TABLE moredata ( x int PRIMARY KEY , y int ) ; " , 
 + " CREATE TABLE test _ bulk ( a int PRIMARY KEY , b int ) ; " , 
 + " INSERT INTO test _ bulk ( a , b ) VALUES ( 1 , 1 ) ; " , 
 + " INSERT INTO test _ bulk ( a , b ) VALUES ( 2 , 2 ) ; " , 
 + " INSERT INTO test _ bulk ( a , b ) VALUES ( 3 , 3 ) ; " , 
 " INSERT INTO test ( a , b ) VALUES ( 1 , 1 ) ; " , 
 " INSERT INTO test ( a , b ) VALUES ( 2 , 2 ) ; " , 
 " INSERT INTO test ( a , b ) VALUES ( 3 , 3 ) ; " , 
 @ @ - 160 , 10 + 164 , 13 @ @ public class CqlTableTest extends PigTestBase 
 / / input _ cql = select * from test where token ( a ) > ? and token ( a ) < = ? 
 pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / test ? " + defaultParameters + nativeParameters + " & input _ cql = select % 20 * % 20from % 20test % 20where % 20token ( a ) % 20 % 3E % 20 % 3F % 20and % 20token ( a ) % 20 % 3C % 3D % 20 % 3F ' USING CqlNativeStorage ( ) ; " ) ; 
 Iterator < Tuple > it = pig . openIterator ( " result " ) ; 
 + int count = 0 ; 
 while ( it . hasNext ( ) ) { 
 Tuple t = it . next ( ) ; 
 Assert . assertEquals ( t . get ( 0 ) , t . get ( 1 ) ) ; 
 + count + + ; 
 } 
 + Assert . assertEquals ( 6 , count ) ; 
 } 
 
 @ Test 
 @ @ - 310 , 4 + 317 , 33 @ @ public class CqlTableTest extends PigTestBase 
 Assert . fail ( " Can ' t fetch any data " ) ; 
 } 
 } 
 + 
 + @ Test 
 + public void testCqlStorageSingleKeyTableBulkLoad ( ) 
 + throws AuthenticationException , AuthorizationException , InvalidRequestException , UnavailableException , TimedOutException , TException , NotFoundException , SchemaDisagreementException , IOException 
 + { 
 + pig . setBatchOn ( ) ; 
 + / / input _ cql = select * from moredata where token ( x ) > ? and token ( x ) < = ? 
 + pig . registerQuery ( " moretestvalues = LOAD ' cql : / / cql3ks / moredata ? " + defaultParameters + nativeParameters + " & input _ cql = select % 20 * % 20from % 20moredata % 20where % 20token ( x ) % 20 % 3E % 20 % 3F % 20and % 20token ( x ) % 20 % 3C % 3D % 20 % 3F ' USING CqlNativeStorage ( ) ; " ) ; 
 + pig . registerQuery ( " insertformat = FOREACH moretestvalues GENERATE TOTUPLE ( x , y ) ; " ) ; 
 + pig . registerQuery ( " STORE insertformat INTO ' cql : / / cql3ks / test _ bulk ? " + defaultParameters + nativeParameters + " & bulk _ output _ format = true & bulk _ cf _ schema = CREATE % 20TABLE % 20cql3ks . test _ bulk % 20 ( a % 20int % 20PRIMARY % 20KEY % 2C % 20b % 20int ) & bulk _ insert _ statement = Insert % 20into % 20cql3ks . test _ bulk ( a % 2C % 20b ) % 20values ( % 3F % 2C % 3F ) ' USING CqlNativeStorage ( ) ; " ) ; 
 + pig . executeBatch ( ) ; 
 + 
 + / / ( 5 , 5 ) 
 + / / ( 6 , 6 ) 
 + / / ( 4 , 4 ) 
 + / / ( 2 , 2 ) 
 + / / ( 3 , 3 ) 
 + / / ( 1 , 1 ) 
 + / / input _ cql = select * from test _ bulk1 where token ( a ) > ? and token ( a ) < = ? 
 + pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / test _ bulk ? " + defaultParameters + nativeParameters + " & input _ cql = select % 20 * % 20from % 20test _ bulk % 20where % 20token ( a ) % 20 % 3E % 20 % 3F % 20and % 20token ( a ) % 20 % 3C % 3D % 20 % 3F ' USING CqlNativeStorage ( ) ; " ) ; 
 + Iterator < Tuple > it = pig . openIterator ( " result " ) ; 
 + int count = 0 ; 
 + while ( it . hasNext ( ) ) { 
 + Tuple t = it . next ( ) ; 
 + Assert . assertEquals ( t . get ( 0 ) , t . get ( 1 ) ) ; 
 + count + + ; 
 + } 
 + Assert . assertEquals ( 6 , count ) ; 
 + } 
 } 
 diff - - git a / test / pig / org / apache / cassandra / pig / PigTestBase . java b / test / pig / org / apache / cassandra / pig / PigTestBase . java 
 index 4b3e422 . . e6964f8 100644 
 - - - a / test / pig / org / apache / cassandra / pig / PigTestBase . java 
 + + + b / test / pig / org / apache / cassandra / pig / PigTestBase . java 
 @ @ - 65 , 7 + 65 , 8 @ @ public class PigTestBase extends SchemaLoader 
 protected static Configuration conf ; 
 protected static MiniCluster cluster ; 
 protected static PigServer pig ; 
 - protected static String defaultParameters = " init _ address = localhost & rpc _ port = 9170 & partitioner = org . apache . cassandra . dht . ByteOrderedPartitioner " ; 
 + protected static String defaultParameters = " init _ address = localhost & rpc _ port = 9170 & partitioner = org . apache . cassandra . dht . ByteOrderedPartitioner " + 
 + " & storage _ port = 7010 & ssl _ storage _ port = 7011 & internode _ encrypt = NONE " ; 
 protected static String nativeParameters = " & core _ conns = 2 & max _ conns = 10 & min _ simult _ reqs = 3 & max _ simult _ reqs = 10 & native _ timeout = 10000000 " + 
 " & native _ read _ timeout = 10000000 & send _ buff _ size = 4096 & receive _ buff _ size = 4096 & solinger = 3 " + 
 " & tcp _ nodelay = true & reuse _ address = true & keep _ alive = true & native _ port = 9042 " ;

NEAREST DIFF:
ELIMINATEDSENTENCE
