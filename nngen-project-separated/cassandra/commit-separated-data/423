BLEU SCORE: 0.037477767366779206

TEST MSG: Fix 2i page size calculation when there are no regular columns
GENERATED MSG: Fix static column indexes

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4126b07 . . c258203 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 13 <nl> + * Fix 2i page size calculation when there are no regular columns ( CASSANDRA - 13400 ) <nl> * Fix the conversion of 2 . X expired rows without regular column data ( CASSANDRA - 13395 ) <nl> * Fix hint delivery when using ext + internal IPs with prefer _ local enabled ( CASSANDRA - 13020 ) <nl> * Fix possible NPE on upgrade to 3 . 0 / 3 . X in case of IO errors ( CASSANDRA - 13389 ) <nl> diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> index d39b607 . . dd6dde4 100644 <nl> - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> @ @ - 623 , 7 + 623 , 7 @ @ public class SecondaryIndexManager implements IndexRegistry <nl> return DEFAULT _ PAGE _ SIZE ; <nl> <nl> int columnsPerRow = baseCfs . metadata . partitionColumns ( ) . regulars . size ( ) ; <nl> - if ( meanCellsPerPartition < = 0 ) <nl> + if ( columnsPerRow < = 0 ) <nl> return DEFAULT _ PAGE _ SIZE ; <nl> <nl> int meanRowsPerPartition = meanCellsPerPartition / columnsPerRow ; <nl> diff - - git a / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java b / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java <nl> index 937512d . . 6c309ac 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import static org . junit . Assert . assertArrayEquals ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> import static org . junit . Assert . fail ; <nl> <nl> / * * <nl> @ @ - 357 , 6 + 358 , 34 @ @ public class CassandraIndexTest extends CQLTester <nl> } <nl> <nl> @ Test <nl> + public void indexOnClusteringColumnWithoutRegularColumns ( ) throws Throwable <nl> + { <nl> + Object [ ] row1 = row ( " k0 " , " c0 " ) ; <nl> + Object [ ] row2 = row ( " k0 " , " c1 " ) ; <nl> + Object [ ] row3 = row ( " k1 " , " c0 " ) ; <nl> + Object [ ] row4 = row ( " k1 " , " c1 " ) ; <nl> + String tableName = createTable ( " CREATE TABLE % s ( k text , c text , PRIMARY KEY ( k , c ) ) " ) ; <nl> + createIndex ( " CREATE INDEX no _ regulars _ idx ON % s ( c ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row1 ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row2 ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row3 ) ; <nl> + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row4 ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c0 " ) , row1 , row3 ) ; <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c1 " ) , row2 , row4 ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE c = ? " , " c3 " ) ) ; <nl> + <nl> + dropIndex ( " DROP INDEX % s . no _ regulars _ idx " ) ; <nl> + createIndex ( " CREATE INDEX no _ regulars _ idx ON % s ( c ) " ) ; <nl> + assertTrue ( waitForIndex ( keyspace ( ) , tableName , " no _ regulars _ idx " ) ) ; <nl> + <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c0 " ) , row1 , row3 ) ; <nl> + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c1 " ) , row2 , row4 ) ; <nl> + assertEmpty ( execute ( " SELECT * FROM % s WHERE c = ? " , " c3 " ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void createIndexesOnMultipleMapDimensions ( ) throws Throwable <nl> { <nl> Object [ ] row1 = row ( 0 , 0 , ImmutableMap . of ( " a " , 10 , " b " , 20 , " c " , 30 ) ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4126b07 . . c258203 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 13 
 + * Fix 2i page size calculation when there are no regular columns ( CASSANDRA - 13400 ) 
 * Fix the conversion of 2 . X expired rows without regular column data ( CASSANDRA - 13395 ) 
 * Fix hint delivery when using ext + internal IPs with prefer _ local enabled ( CASSANDRA - 13020 ) 
 * Fix possible NPE on upgrade to 3 . 0 / 3 . X in case of IO errors ( CASSANDRA - 13389 ) 
 diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 index d39b607 . . dd6dde4 100644 
 - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 @ @ - 623 , 7 + 623 , 7 @ @ public class SecondaryIndexManager implements IndexRegistry 
 return DEFAULT _ PAGE _ SIZE ; 
 
 int columnsPerRow = baseCfs . metadata . partitionColumns ( ) . regulars . size ( ) ; 
 - if ( meanCellsPerPartition < = 0 ) 
 + if ( columnsPerRow < = 0 ) 
 return DEFAULT _ PAGE _ SIZE ; 
 
 int meanRowsPerPartition = meanCellsPerPartition / columnsPerRow ; 
 diff - - git a / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java b / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java 
 index 937512d . . 6c309ac 100644 
 - - - a / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / internal / CassandraIndexTest . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import static org . junit . Assert . assertArrayEquals ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertTrue ; 
 import static org . junit . Assert . fail ; 
 
 / * * 
 @ @ - 357 , 6 + 358 , 34 @ @ public class CassandraIndexTest extends CQLTester 
 } 
 
 @ Test 
 + public void indexOnClusteringColumnWithoutRegularColumns ( ) throws Throwable 
 + { 
 + Object [ ] row1 = row ( " k0 " , " c0 " ) ; 
 + Object [ ] row2 = row ( " k0 " , " c1 " ) ; 
 + Object [ ] row3 = row ( " k1 " , " c0 " ) ; 
 + Object [ ] row4 = row ( " k1 " , " c1 " ) ; 
 + String tableName = createTable ( " CREATE TABLE % s ( k text , c text , PRIMARY KEY ( k , c ) ) " ) ; 
 + createIndex ( " CREATE INDEX no _ regulars _ idx ON % s ( c ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row1 ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row2 ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row3 ) ; 
 + execute ( " INSERT INTO % s ( k , c ) VALUES ( ? , ? ) " , row4 ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c0 " ) , row1 , row3 ) ; 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c1 " ) , row2 , row4 ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE c = ? " , " c3 " ) ) ; 
 + 
 + dropIndex ( " DROP INDEX % s . no _ regulars _ idx " ) ; 
 + createIndex ( " CREATE INDEX no _ regulars _ idx ON % s ( c ) " ) ; 
 + assertTrue ( waitForIndex ( keyspace ( ) , tableName , " no _ regulars _ idx " ) ) ; 
 + 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c0 " ) , row1 , row3 ) ; 
 + assertRowsIgnoringOrder ( execute ( " SELECT * FROM % s WHERE c = ? " , " c1 " ) , row2 , row4 ) ; 
 + assertEmpty ( execute ( " SELECT * FROM % s WHERE c = ? " , " c3 " ) ) ; 
 + } 
 + 
 + @ Test 
 public void createIndexesOnMultipleMapDimensions ( ) throws Throwable 
 { 
 Object [ ] row1 = row ( 0 , 0 , ImmutableMap . of ( " a " , 10 , " b " , 20 , " c " , 30 ) ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
