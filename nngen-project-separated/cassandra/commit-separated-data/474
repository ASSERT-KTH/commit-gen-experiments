BLEU SCORE: 0.20556680845025987

TEST MSG: ninja : add missing CHANGES . txt entries
GENERATED MSG: Updated CHANGES . txt

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 893dd74 . . cac380a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 7 @ @ <nl> 4 . 0 <nl> + * Don ' t flush sstables when streaming for incremental repair ( CASSANDRA - 13226 ) <nl> + * Remove unused method ( CASSANDRA - 13227 ) <nl> + * Fix minor bugs related to # 9143 ( CASSANDRA - 13217 ) <nl> * Output warning if user increases RF ( CASSANDRA - 13079 ) <nl> * Remove pre - 3 . 0 streaming compatibility code for 4 . 0 ( CASSANDRA - 13081 ) <nl> * Add support for + and - operations on dates ( CASSANDRA - 11936 )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f93821a . . 17dce62 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 8 + 3 , 10 @ @ <nl> * lower - latency read repair ( CASSANDRA - 2069 ) <nl> * add hinted _ handoff _ throttle _ delay _ in _ ms option ( CASSANDRA - 2161 ) <nl> * fixes for cache save / load ( CASSANDRA - 2172 , - 2174 ) <nl> + * Handle whole - row deletions in CFOutputFormat ( CASSANDRA - 2014 ) <nl> * Make memtable _ flush _ writers flush in parallel ( CASSANDRA - 2178 ) <nl> <nl> + <nl> 0 . 7 . 2 <nl> * copy DecoratedKey . key when inserting into caches to avoid retaining <nl> a reference to the underlying buffer ( CASSANDRA - 2102 ) <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> index 7b7fd8d . . c6f665b 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java <nl> @ @ - 143 , 33 + 143 , 23 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < org . apache . cass <nl> { <nl> Mutation mutation = new Mutation ( ) ; <nl> org . apache . cassandra . avro . ColumnOrSuperColumn acosc = amut . column _ or _ supercolumn ; <nl> - if ( acosc ! = null ) <nl> - { <nl> - / / creation <nl> - ColumnOrSuperColumn cosc = new ColumnOrSuperColumn ( ) ; <nl> - mutation . setColumn _ or _ supercolumn ( cosc ) ; <nl> - if ( acosc . column ! = null ) <nl> - / / standard column <nl> - cosc . setColumn ( avroToThrift ( acosc . column ) ) ; <nl> - else <nl> - { <nl> - / / super column <nl> - ByteBuffer scolname = acosc . super _ column . name ; <nl> - List < Column > scolcols = new ArrayList < Column > ( acosc . super _ column . columns . size ( ) ) ; <nl> - for ( org . apache . cassandra . avro . Column acol : acosc . super _ column . columns ) <nl> - scolcols . add ( avroToThrift ( acol ) ) ; <nl> - cosc . setSuper _ column ( new SuperColumn ( scolname , scolcols ) ) ; <nl> - } <nl> - } <nl> - else <nl> + if ( acosc = = null ) <nl> { <nl> / / deletion <nl> + assert amut . deletion ! = null ; <nl> Deletion deletion = new Deletion ( amut . deletion . timestamp ) ; <nl> mutation . setDeletion ( deletion ) ; <nl> + <nl> org . apache . cassandra . avro . SlicePredicate apred = amut . deletion . predicate ; <nl> - if ( amut . deletion . super _ column ! = null ) <nl> + if ( apred = = null & & amut . deletion . super _ column = = null ) <nl> + { <nl> + / / leave Deletion alone to delete entire row <nl> + } <nl> + else if ( amut . deletion . super _ column ! = null ) <nl> + { <nl> / / super column <nl> deletion . setSuper _ column ( ByteBufferUtil . getArray ( amut . deletion . super _ column ) ) ; <nl> + } <nl> else if ( apred . column _ names ! = null ) <nl> { <nl> / / column names <nl> @ @ - 184 , 6 + 174 , 24 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < org . apache . cass <nl> deletion . setPredicate ( new SlicePredicate ( ) . setSlice _ range ( avroToThrift ( apred . slice _ range ) ) ) ; <nl> } <nl> } <nl> + else <nl> + { <nl> + / / creation <nl> + ColumnOrSuperColumn cosc = new ColumnOrSuperColumn ( ) ; <nl> + mutation . setColumn _ or _ supercolumn ( cosc ) ; <nl> + if ( acosc . column ! = null ) <nl> + / / standard column <nl> + cosc . setColumn ( avroToThrift ( acosc . column ) ) ; <nl> + else <nl> + { <nl> + / / super column <nl> + ByteBuffer scolname = acosc . super _ column . name ; <nl> + List < Column > scolcols = new ArrayList < Column > ( acosc . super _ column . columns . size ( ) ) ; <nl> + for ( org . apache . cassandra . avro . Column acol : acosc . super _ column . columns ) <nl> + scolcols . add ( avroToThrift ( acol ) ) ; <nl> + cosc . setSuper _ column ( new SuperColumn ( scolname , scolcols ) ) ; <nl> + } <nl> + } <nl> return mutation ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 893dd74 . . cac380a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 7 @ @ 
 4 . 0 
 + * Don ' t flush sstables when streaming for incremental repair ( CASSANDRA - 13226 ) 
 + * Remove unused method ( CASSANDRA - 13227 ) 
 + * Fix minor bugs related to # 9143 ( CASSANDRA - 13217 ) 
 * Output warning if user increases RF ( CASSANDRA - 13079 ) 
 * Remove pre - 3 . 0 streaming compatibility code for 4 . 0 ( CASSANDRA - 13081 ) 
 * Add support for + and - operations on dates ( CASSANDRA - 11936 )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f93821a . . 17dce62 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 8 + 3 , 10 @ @ 
 * lower - latency read repair ( CASSANDRA - 2069 ) 
 * add hinted _ handoff _ throttle _ delay _ in _ ms option ( CASSANDRA - 2161 ) 
 * fixes for cache save / load ( CASSANDRA - 2172 , - 2174 ) 
 + * Handle whole - row deletions in CFOutputFormat ( CASSANDRA - 2014 ) 
 * Make memtable _ flush _ writers flush in parallel ( CASSANDRA - 2178 ) 
 
 + 
 0 . 7 . 2 
 * copy DecoratedKey . key when inserting into caches to avoid retaining 
 a reference to the underlying buffer ( CASSANDRA - 2102 ) 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 index 7b7fd8d . . c6f665b 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordWriter . java 
 @ @ - 143 , 33 + 143 , 23 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < org . apache . cass 
 { 
 Mutation mutation = new Mutation ( ) ; 
 org . apache . cassandra . avro . ColumnOrSuperColumn acosc = amut . column _ or _ supercolumn ; 
 - if ( acosc ! = null ) 
 - { 
 - / / creation 
 - ColumnOrSuperColumn cosc = new ColumnOrSuperColumn ( ) ; 
 - mutation . setColumn _ or _ supercolumn ( cosc ) ; 
 - if ( acosc . column ! = null ) 
 - / / standard column 
 - cosc . setColumn ( avroToThrift ( acosc . column ) ) ; 
 - else 
 - { 
 - / / super column 
 - ByteBuffer scolname = acosc . super _ column . name ; 
 - List < Column > scolcols = new ArrayList < Column > ( acosc . super _ column . columns . size ( ) ) ; 
 - for ( org . apache . cassandra . avro . Column acol : acosc . super _ column . columns ) 
 - scolcols . add ( avroToThrift ( acol ) ) ; 
 - cosc . setSuper _ column ( new SuperColumn ( scolname , scolcols ) ) ; 
 - } 
 - } 
 - else 
 + if ( acosc = = null ) 
 { 
 / / deletion 
 + assert amut . deletion ! = null ; 
 Deletion deletion = new Deletion ( amut . deletion . timestamp ) ; 
 mutation . setDeletion ( deletion ) ; 
 + 
 org . apache . cassandra . avro . SlicePredicate apred = amut . deletion . predicate ; 
 - if ( amut . deletion . super _ column ! = null ) 
 + if ( apred = = null & & amut . deletion . super _ column = = null ) 
 + { 
 + / / leave Deletion alone to delete entire row 
 + } 
 + else if ( amut . deletion . super _ column ! = null ) 
 + { 
 / / super column 
 deletion . setSuper _ column ( ByteBufferUtil . getArray ( amut . deletion . super _ column ) ) ; 
 + } 
 else if ( apred . column _ names ! = null ) 
 { 
 / / column names 
 @ @ - 184 , 6 + 174 , 24 @ @ implements org . apache . hadoop . mapred . RecordWriter < ByteBuffer , List < org . apache . cass 
 deletion . setPredicate ( new SlicePredicate ( ) . setSlice _ range ( avroToThrift ( apred . slice _ range ) ) ) ; 
 } 
 } 
 + else 
 + { 
 + / / creation 
 + ColumnOrSuperColumn cosc = new ColumnOrSuperColumn ( ) ; 
 + mutation . setColumn _ or _ supercolumn ( cosc ) ; 
 + if ( acosc . column ! = null ) 
 + / / standard column 
 + cosc . setColumn ( avroToThrift ( acosc . column ) ) ; 
 + else 
 + { 
 + / / super column 
 + ByteBuffer scolname = acosc . super _ column . name ; 
 + List < Column > scolcols = new ArrayList < Column > ( acosc . super _ column . columns . size ( ) ) ; 
 + for ( org . apache . cassandra . avro . Column acol : acosc . super _ column . columns ) 
 + scolcols . add ( avroToThrift ( acol ) ) ; 
 + cosc . setSuper _ column ( new SuperColumn ( scolname , scolcols ) ) ; 
 + } 
 + } 
 return mutation ; 
 } 

