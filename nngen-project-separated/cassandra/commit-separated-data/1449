BLEU SCORE: 0.008418013465838444

TEST MSG: Fix broken internode SSL
GENERATED MSG: reset protocol - version - to - attempt when reconnecting to a node

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ec12cb8 . . 4b079d4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * UDF / UDA execution time in trace ( CASSANDRA - 9723 ) <nl> * Remove repair snapshot leftover on startup ( CASSANDRA - 7357 ) <nl> * Use random nodes for batch log when only 2 racks ( CASSANDRA - 8735 ) <nl> + * Fix broken internode SSL ( CASSANDRA - 9884 ) <nl> Merged from 2 . 1 : <nl> * Fix handling of enable / disable autocompaction ( CASSANDRA - 9899 ) <nl> * Add consistency level to tracing ouput ( CASSANDRA - 9827 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index b05232b . . ee30073 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import java . net . InetAddress ; <nl> import java . net . Socket ; <nl> import java . net . SocketException ; <nl> import java . nio . ByteBuffer ; <nl> + import java . nio . channels . Channels ; <nl> + import java . nio . channels . WritableByteChannel ; <nl> import java . util . * ; <nl> import java . util . concurrent . BlockingQueue ; <nl> import java . util . concurrent . CountDownLatch ; <nl> @ @ - 401 , 7 + 403 , 9 @ @ public class OutboundTcpConnection extends Thread <nl> } <nl> } <nl> <nl> - out = new BufferedDataOutputStreamPlus ( socket . getChannel ( ) , BUFFER _ SIZE ) ; <nl> + / / SocketChannel may be null when using SSL <nl> + WritableByteChannel ch = socket . getChannel ( ) ; <nl> + out = new BufferedDataOutputStreamPlus ( ch ! = null ? ch : Channels . newChannel ( socket . getOutputStream ( ) ) , BUFFER _ SIZE ) ; <nl> <nl> out . writeInt ( MessagingService . PROTOCOL _ MAGIC ) ; <nl> writeHeader ( out , targetVersion , shouldCompressConnection ( ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 828109e . . df9a855 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> * fix possibility of spurious UnavailableException for LOCAL _ QUORUM <nl> reads with dynamic snitch + read repair disabled ( CASSANDRA - 2870 ) <nl> * support spaces in path to log4j configuration ( CASSANDRA - 2383 ) <nl> + * avoid including inferred types in CF update ( CASSANDRA - 2809 ) <nl> <nl> <nl> 0 . 7 . 7 <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index 7999095 . . 05177b2 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 828 , 11 + 828 , 15 @ @ public class CliClient extends CliUserHelp <nl> return ; <nl> <nl> String cfName = CliCompiler . getColumnFamily ( statement , keyspacesMap . get ( keySpace ) . cf _ defs ) ; <nl> - / / first child is a column family name <nl> - CfDef cfDef = getCfDef ( cfName ) ; <nl> <nl> try <nl> { <nl> + / / request correct cfDef from the server <nl> + CfDef cfDef = getCfDef ( thriftClient . describe _ keyspace ( this . keySpace ) , cfName ) ; <nl> + <nl> + if ( cfDef = = null ) <nl> + throw new RuntimeException ( " Column Family " + cfName + " was not found in the current keyspace . " ) ; <nl> + <nl> String mySchemaVersion = thriftClient . system _ update _ column _ family ( updateCfDefAttributes ( statement , cfDef ) ) ; <nl> sessionState . out . println ( mySchemaVersion ) ; <nl> validateSchemaIsSettled ( mySchemaVersion ) ; <nl> @ @ - 1578 , 7 + 1582 , 18 @ @ public class CliClient extends CliUserHelp <nl> { <nl> return getCfDef ( this . keySpace , columnFamilyName ) ; <nl> } <nl> - <nl> + <nl> + private CfDef getCfDef ( KsDef keyspace , String columnFamilyName ) <nl> + { <nl> + for ( CfDef cfDef : keyspace . cf _ defs ) <nl> + { <nl> + if ( cfDef . name . equals ( columnFamilyName ) ) <nl> + return cfDef ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> / * * <nl> * Used to parse meta tree and compile meta attributes into List < ColumnDef > <nl> * @ param cfDef - column family definition

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ec12cb8 . . 4b079d4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * UDF / UDA execution time in trace ( CASSANDRA - 9723 ) 
 * Remove repair snapshot leftover on startup ( CASSANDRA - 7357 ) 
 * Use random nodes for batch log when only 2 racks ( CASSANDRA - 8735 ) 
 + * Fix broken internode SSL ( CASSANDRA - 9884 ) 
 Merged from 2 . 1 : 
 * Fix handling of enable / disable autocompaction ( CASSANDRA - 9899 ) 
 * Add consistency level to tracing ouput ( CASSANDRA - 9827 ) 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index b05232b . . ee30073 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import java . net . InetAddress ; 
 import java . net . Socket ; 
 import java . net . SocketException ; 
 import java . nio . ByteBuffer ; 
 + import java . nio . channels . Channels ; 
 + import java . nio . channels . WritableByteChannel ; 
 import java . util . * ; 
 import java . util . concurrent . BlockingQueue ; 
 import java . util . concurrent . CountDownLatch ; 
 @ @ - 401 , 7 + 403 , 9 @ @ public class OutboundTcpConnection extends Thread 
 } 
 } 
 
 - out = new BufferedDataOutputStreamPlus ( socket . getChannel ( ) , BUFFER _ SIZE ) ; 
 + / / SocketChannel may be null when using SSL 
 + WritableByteChannel ch = socket . getChannel ( ) ; 
 + out = new BufferedDataOutputStreamPlus ( ch ! = null ? ch : Channels . newChannel ( socket . getOutputStream ( ) ) , BUFFER _ SIZE ) ; 
 
 out . writeInt ( MessagingService . PROTOCOL _ MAGIC ) ; 
 writeHeader ( out , targetVersion , shouldCompressConnection ( ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 828109e . . df9a855 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 * fix possibility of spurious UnavailableException for LOCAL _ QUORUM 
 reads with dynamic snitch + read repair disabled ( CASSANDRA - 2870 ) 
 * support spaces in path to log4j configuration ( CASSANDRA - 2383 ) 
 + * avoid including inferred types in CF update ( CASSANDRA - 2809 ) 
 
 
 0 . 7 . 7 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index 7999095 . . 05177b2 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 828 , 11 + 828 , 15 @ @ public class CliClient extends CliUserHelp 
 return ; 
 
 String cfName = CliCompiler . getColumnFamily ( statement , keyspacesMap . get ( keySpace ) . cf _ defs ) ; 
 - / / first child is a column family name 
 - CfDef cfDef = getCfDef ( cfName ) ; 
 
 try 
 { 
 + / / request correct cfDef from the server 
 + CfDef cfDef = getCfDef ( thriftClient . describe _ keyspace ( this . keySpace ) , cfName ) ; 
 + 
 + if ( cfDef = = null ) 
 + throw new RuntimeException ( " Column Family " + cfName + " was not found in the current keyspace . " ) ; 
 + 
 String mySchemaVersion = thriftClient . system _ update _ column _ family ( updateCfDefAttributes ( statement , cfDef ) ) ; 
 sessionState . out . println ( mySchemaVersion ) ; 
 validateSchemaIsSettled ( mySchemaVersion ) ; 
 @ @ - 1578 , 7 + 1582 , 18 @ @ public class CliClient extends CliUserHelp 
 { 
 return getCfDef ( this . keySpace , columnFamilyName ) ; 
 } 
 - 
 + 
 + private CfDef getCfDef ( KsDef keyspace , String columnFamilyName ) 
 + { 
 + for ( CfDef cfDef : keyspace . cf _ defs ) 
 + { 
 + if ( cfDef . name . equals ( columnFamilyName ) ) 
 + return cfDef ; 
 + } 
 + 
 + return null ; 
 + } 
 + 
 / * * 
 * Used to parse meta tree and compile meta attributes into List < ColumnDef > 
 * @ param cfDef - column family definition
