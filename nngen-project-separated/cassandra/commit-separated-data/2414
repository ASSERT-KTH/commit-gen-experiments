BLEU SCORE: 0.037477767366779206

TEST MSG: remove incorrect use of generics in non - generified method call
GENERATED MSG: Expose schema version in nodetool .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / FileCacheService . java b / src / java / org / apache / cassandra / service / FileCacheService . java <nl> index d22763b . . faa53f0 100644 <nl> - - - a / src / java / org / apache / cassandra / service / FileCacheService . java <nl> + + + b / src / java / org / apache / cassandra / service / FileCacheService . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public class FileCacheService <nl> } <nl> } ; <nl> <nl> - cache = CacheBuilder . < String , Queue < RandomAccessReader > > newBuilder ( ) <nl> + cache = CacheBuilder . newBuilder ( ) <nl> . expireAfterAccess ( AFTER _ ACCESS _ EXPIRATION , TimeUnit . MILLISECONDS ) <nl> . concurrencyLevel ( DatabaseDescriptor . getConcurrentReaders ( ) ) <nl> . removalListener ( onRemove )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java <nl> index a01ed53 . . 954c796 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java <nl> + + + b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . utils . IntervalTree ; <nl> * / <nl> <nl> <nl> + import java . util . ArrayList ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> <nl> @ @ - 50 , 12 + 51 , 12 @ @ public class IntervalTree < T > <nl> <nl> public List < T > search ( Interval < T > searchInterval ) <nl> { <nl> - List < T > retlist = new LinkedList < T > ( ) ; <nl> - searchInternal ( head , searchInterval , retlist ) ; <nl> - return retlist ; <nl> + List < T > results = new ArrayList < T > ( ) ; <nl> + searchInternal ( head , searchInterval , results ) ; <nl> + return results ; <nl> } <nl> <nl> - protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > retList ) <nl> + protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > results ) <nl> { <nl> if ( null = = head ) <nl> return ; <nl> @ @ - 68 , 11 + 69 , 11 @ @ public class IntervalTree < T > <nl> { <nl> for ( Interval < T > interval : node . intersects _ left ) <nl> { <nl> - retList . add ( interval . Data ) ; <nl> + results . add ( interval . Data ) ; <nl> } <nl> <nl> - searchInternal ( node . left , searchInterval , retList ) ; <nl> - searchInternal ( node . right , searchInterval , retList ) ; <nl> + searchInternal ( node . left , searchInterval , results ) ; <nl> + searchInternal ( node . right , searchInterval , results ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 86 , 11 + 87 , 11 @ @ public class IntervalTree < T > <nl> { <nl> if ( interval . max . compareTo ( searchInterval . min ) > = 0 ) <nl> { <nl> - retList . add ( interval . Data ) ; <nl> + results . add ( interval . Data ) ; <nl> } <nl> else break ; <nl> } <nl> - searchInternal ( node . right , searchInterval , retList ) ; <nl> + searchInternal ( node . right , searchInterval , results ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 104 , 11 + 105 , 11 @ @ public class IntervalTree < T > <nl> { <nl> if ( interval . min . compareTo ( searchInterval . max ) < = 0 ) <nl> { <nl> - retList . add ( interval . Data ) ; <nl> + results . add ( interval . Data ) ; <nl> } <nl> else break ; <nl> } <nl> - searchInternal ( node . left , searchInterval , retList ) ; <nl> + searchInternal ( node . left , searchInterval , results ) ; <nl> return ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / FileCacheService . java b / src / java / org / apache / cassandra / service / FileCacheService . java 
 index d22763b . . faa53f0 100644 
 - - - a / src / java / org / apache / cassandra / service / FileCacheService . java 
 + + + b / src / java / org / apache / cassandra / service / FileCacheService . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public class FileCacheService 
 } 
 } ; 
 
 - cache = CacheBuilder . < String , Queue < RandomAccessReader > > newBuilder ( ) 
 + cache = CacheBuilder . newBuilder ( ) 
 . expireAfterAccess ( AFTER _ ACCESS _ EXPIRATION , TimeUnit . MILLISECONDS ) 
 . concurrencyLevel ( DatabaseDescriptor . getConcurrentReaders ( ) ) 
 . removalListener ( onRemove )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java 
 index a01ed53 . . 954c796 100644 
 - - - a / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java 
 + + + b / src / java / org / apache / cassandra / utils / IntervalTree / IntervalTree . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package org . apache . cassandra . utils . IntervalTree ; 
 * / 
 
 
 + import java . util . ArrayList ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 
 @ @ - 50 , 12 + 51 , 12 @ @ public class IntervalTree < T > 
 
 public List < T > search ( Interval < T > searchInterval ) 
 { 
 - List < T > retlist = new LinkedList < T > ( ) ; 
 - searchInternal ( head , searchInterval , retlist ) ; 
 - return retlist ; 
 + List < T > results = new ArrayList < T > ( ) ; 
 + searchInternal ( head , searchInterval , results ) ; 
 + return results ; 
 } 
 
 - protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > retList ) 
 + protected void searchInternal ( IntervalNode node , Interval < T > searchInterval , List < T > results ) 
 { 
 if ( null = = head ) 
 return ; 
 @ @ - 68 , 11 + 69 , 11 @ @ public class IntervalTree < T > 
 { 
 for ( Interval < T > interval : node . intersects _ left ) 
 { 
 - retList . add ( interval . Data ) ; 
 + results . add ( interval . Data ) ; 
 } 
 
 - searchInternal ( node . left , searchInterval , retList ) ; 
 - searchInternal ( node . right , searchInterval , retList ) ; 
 + searchInternal ( node . left , searchInterval , results ) ; 
 + searchInternal ( node . right , searchInterval , results ) ; 
 return ; 
 } 
 
 @ @ - 86 , 11 + 87 , 11 @ @ public class IntervalTree < T > 
 { 
 if ( interval . max . compareTo ( searchInterval . min ) > = 0 ) 
 { 
 - retList . add ( interval . Data ) ; 
 + results . add ( interval . Data ) ; 
 } 
 else break ; 
 } 
 - searchInternal ( node . right , searchInterval , retList ) ; 
 + searchInternal ( node . right , searchInterval , results ) ; 
 return ; 
 } 
 
 @ @ - 104 , 11 + 105 , 11 @ @ public class IntervalTree < T > 
 { 
 if ( interval . min . compareTo ( searchInterval . max ) < = 0 ) 
 { 
 - retList . add ( interval . Data ) ; 
 + results . add ( interval . Data ) ; 
 } 
 else break ; 
 } 
 - searchInternal ( node . left , searchInterval , retList ) ; 
 + searchInternal ( node . left , searchInterval , results ) ; 
 return ; 
 } 
 }
