BLEU SCORE: 0.03089055318156698

TEST MSG: CASSANDRA - 14991 Follow - up : clean up SSL Hot Reloading code
GENERATED MSG: Add hot reloading of SSL Certificates

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 9b7a6e5 . . 5c70c9a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 905 , 7 + 905 , 8 @ @ public class DatabaseDescriptor <nl> try <nl> { <nl> SSLFactory . initHotReloading ( conf . server _ encryption _ options , conf . client _ encryption _ options , false ) ; <nl> - } catch ( IOException e ) <nl> + } <nl> + catch ( IOException e ) <nl> { <nl> throw new ConfigurationException ( " Failed to initialize SSL hot reloading " , e ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> index 45579fb . . 9524cec 100644 <nl> - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> @ @ - 57 , 6 + 57 , 10 @ @ public class EncryptionOptions <nl> optional = options . optional ; <nl> } <nl> <nl> + / * * <nl> + * The method is being mainly used to cache SslContexts therefore , we only consider <nl> + * fields that would make a difference when the TrustStore or KeyStore files are updated <nl> + * / <nl> @ Override <nl> public boolean equals ( Object o ) <nl> { <nl> @ @ - 66 , 23 + 70 , 37 @ @ public class EncryptionOptions <nl> return false ; <nl> <nl> EncryptionOptions opt = ( EncryptionOptions ) o ; <nl> - return Objects . equals ( keystore , opt . keystore ) & & <nl> + return enabled = = opt . enabled & & <nl> + optional = = opt . optional & & <nl> + require _ client _ auth = = opt . require _ client _ auth & & <nl> + require _ endpoint _ verification = = opt . require _ endpoint _ verification & & <nl> + Objects . equals ( keystore , opt . keystore ) & & <nl> + Objects . equals ( keystore _ password , opt . keystore _ password ) & & <nl> Objects . equals ( truststore , opt . truststore ) & & <nl> - Objects . equals ( algorithm , opt . algorithm ) & & <nl> + Objects . equals ( truststore _ password , opt . truststore _ password ) & & <nl> Objects . equals ( protocol , opt . protocol ) & & <nl> - Arrays . equals ( cipher _ suites , opt . cipher _ suites ) & & <nl> - require _ client _ auth = = opt . require _ client _ auth & & <nl> - require _ endpoint _ verification = = opt . require _ endpoint _ verification ; <nl> + Objects . equals ( algorithm , opt . algorithm ) & & <nl> + Objects . equals ( store _ type , opt . store _ type ) & & <nl> + Arrays . equals ( cipher _ suites , opt . cipher _ suites ) ; <nl> } <nl> <nl> + / * * <nl> + * The method is being mainly used to cache SslContexts therefore , we only consider <nl> + * fields that would make a difference when the TrustStore or KeyStore files are updated <nl> + * / <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> int result = 0 ; <nl> result + = 31 * ( keystore = = null ? 0 : keystore . hashCode ( ) ) ; <nl> + result + = 31 * ( keystore _ password = = null ? 0 : keystore _ password . hashCode ( ) ) ; <nl> result + = 31 * ( truststore = = null ? 0 : truststore . hashCode ( ) ) ; <nl> - result + = 31 * ( algorithm = = null ? 0 : algorithm . hashCode ( ) ) ; <nl> + result + = 31 * ( truststore _ password = = null ? 0 : truststore _ password . hashCode ( ) ) ; <nl> result + = 31 * ( protocol = = null ? 0 : protocol . hashCode ( ) ) ; <nl> + result + = 31 * ( algorithm = = null ? 0 : algorithm . hashCode ( ) ) ; <nl> + result + = 31 * ( store _ type = = null ? 0 : store _ type . hashCode ( ) ) ; <nl> + result + = 31 * Boolean . hashCode ( enabled ) ; <nl> + result + = 31 * Boolean . hashCode ( optional ) ; <nl> result + = 31 * Arrays . hashCode ( cipher _ suites ) ; <nl> result + = 31 * Boolean . hashCode ( require _ client _ auth ) ; <nl> result + = 31 * Boolean . hashCode ( require _ endpoint _ verification ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / async / NettyFactory . java b / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> index 3752927 . . 346a067 100644 <nl> - - - a / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> + + + b / src / java / org / apache / cassandra / net / async / NettyFactory . java <nl> @ @ - 292 , 7 + 292 , 7 @ @ public final class NettyFactory <nl> } <nl> else <nl> { <nl> - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; <nl> InetSocketAddress peer = encryptionOptions . require _ endpoint _ verification ? channel . remoteAddress ( ) : null ; <nl> SslHandler sslHandler = newSslHandler ( channel , sslContext , peer ) ; <nl> logger . trace ( " creating inbound netty SslContext : context = { } , engine = { } " , sslContext . getClass ( ) . getName ( ) , sslHandler . engine ( ) . getClass ( ) . getName ( ) ) ; <nl> @ @ - 369 , 7 + 369 , 7 @ @ public final class NettyFactory <nl> / / order of handlers : ssl - > logger - > handshakeHandler <nl> if ( params . encryptionOptions ! = null ) <nl> { <nl> - SslContext sslContext = SSLFactory . getSslContext ( params . encryptionOptions , true , SSLFactory . SocketType . CLIENT ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( params . encryptionOptions , true , SSLFactory . SocketType . CLIENT ) ; <nl> / / for some reason channel . remoteAddress ( ) will return null <nl> InetAddressAndPort address = params . connectionId . remote ( ) ; <nl> InetSocketAddress peer = params . encryptionOptions . require _ endpoint _ verification ? new InetSocketAddress ( address . address , address . port ) : null ; <nl> diff - - git a / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java b / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java <nl> index 3b4f794 . . 3fb8562 100644 <nl> - - - a / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java <nl> + + + b / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public class OptionalSslHandler extends ByteToMessageDecoder <nl> if ( SslHandler . isEncrypted ( in ) ) <nl> { <nl> / / Connection uses SSL / TLS , replace the detection handler with a SslHandler and so use encryption . <nl> - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; <nl> Channel channel = ctx . channel ( ) ; <nl> InetSocketAddress peer = encryptionOptions . require _ endpoint _ verification ? ( InetSocketAddress ) channel . remoteAddress ( ) : null ; <nl> SslHandler sslHandler = NettyFactory . newSslHandler ( channel , sslContext , peer ) ; <nl> diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> index 700142d . . 7519875 100644 <nl> - - - a / src / java / org / apache / cassandra / security / SSLFactory . java <nl> + + + b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> @ @ - 129 , 6 + 129 , 15 @ @ public final class SSLFactory <nl> lastModTime = curModTime ; <nl> return result ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " HotReloadableFile { " + <nl> + " file = " + file + <nl> + " , lastModTime = " + lastModTime + <nl> + ' } ' ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 221 , 18 + 230 , 18 @ @ public final class SSLFactory <nl> / * * <nl> * get a netty { @ link SslContext } instance <nl> * / <nl> - public static SslContext getSslContext ( EncryptionOptions options , boolean buildTruststore , <nl> - SocketType socketType ) throws IOException <nl> + public static SslContext getOrCreateSslContext ( EncryptionOptions options , boolean buildTruststore , <nl> + SocketType socketType ) throws IOException <nl> { <nl> - return getSslContext ( options , buildTruststore , socketType , OpenSsl . isAvailable ( ) ) ; <nl> + return getOrCreateSslContext ( options , buildTruststore , socketType , OpenSsl . isAvailable ( ) ) ; <nl> } <nl> <nl> / * * <nl> * Get a netty { @ link SslContext } instance . <nl> * / <nl> @ VisibleForTesting <nl> - static SslContext getSslContext ( EncryptionOptions options , boolean buildTruststore , <nl> - SocketType socketType , boolean useOpenSsl ) throws IOException <nl> + static SslContext getOrCreateSslContext ( EncryptionOptions options , boolean buildTruststore , <nl> + SocketType socketType , boolean useOpenSsl ) throws IOException <nl> { <nl> CacheKey key = new CacheKey ( options , socketType ) ; <nl> SslContext sslContext ; <nl> @ @ - 302 , 7 + 311 , 7 @ @ public final class SSLFactory <nl> if ( ! isHotReloadingInitialized ) <nl> throw new IllegalStateException ( " Hot reloading functionality has not been initialized . " ) ; <nl> <nl> - logger . trace ( " Checking whether certificates have been updated " ) ; <nl> + logger . debug ( " Checking whether certificates have been updated { } " , hotReloadableFiles ) ; <nl> <nl> if ( hotReloadableFiles . stream ( ) . anyMatch ( HotReloadableFile : : shouldReload ) ) <nl> { <nl> @ @ - 311 , 7 + 320 , 8 @ @ public final class SSLFactory <nl> { <nl> validateSslCerts ( serverOpts , clientOpts ) ; <nl> cachedSslContexts . clear ( ) ; <nl> - } catch ( Exception e ) <nl> + } <nl> + catch ( Exception e ) <nl> { <nl> logger . error ( " Failed to hot reload the SSL Certificates ! Please check the certificate files . " , e ) ; <nl> } <nl> @ @ - 378 , 7 + 388 , 8 @ @ public final class SSLFactory <nl> createNettySslContext ( serverOpts , true , SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; <nl> createNettySslContext ( serverOpts , true , SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; <nl> } <nl> - } catch ( Exception e ) <nl> + } <nl> + catch ( Exception e ) <nl> { <nl> throw new IOException ( " Failed to create SSL context using server _ encryption _ options ! " , e ) ; <nl> } <nl> @ @ - 391 , 7 + 402 , 8 @ @ public final class SSLFactory <nl> createNettySslContext ( clientOpts , clientOpts . require _ client _ auth , SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; <nl> createNettySslContext ( clientOpts , clientOpts . require _ client _ auth , SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; <nl> } <nl> - } catch ( Exception e ) <nl> + } <nl> + catch ( Exception e ) <nl> { <nl> throw new IOException ( " Failed to create SSL context using client _ encryption _ options ! " , e ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 056a4a0 . . 33cd0fb 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 406 , 7 + 406 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> <nl> protected final SslHandler createSslHandler ( ByteBufAllocator allocator ) throws IOException <nl> { <nl> - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , SSLFactory . SocketType . SERVER ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , SSLFactory . SocketType . SERVER ) ; <nl> return sslContext . newHandler ( allocator ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> index 0db9136 . . 9ed4272 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java <nl> @ @ - 25 , 7 + 25 , 6 @ @ import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Optional ; <nl> import java . util . concurrent . BlockingQueue ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> import java . util . concurrent . SynchronousQueue ; <nl> @ @ - 292 , 8 + 291 , 8 @ @ public class SimpleClient implements Closeable <nl> protected void initChannel ( Channel channel ) throws Exception <nl> { <nl> super . initChannel ( channel ) ; <nl> - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , <nl> - SSLFactory . SocketType . CLIENT ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , <nl> + SSLFactory . SocketType . CLIENT ) ; <nl> channel . pipeline ( ) . addFirst ( " ssl " , sslContext . newHandler ( channel . alloc ( ) ) ) ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / security / SSLFactoryTest . java b / test / unit / org / apache / cassandra / security / SSLFactoryTest . java <nl> index b253c59 . . 5fdbe7b 100644 <nl> - - - a / test / unit / org / apache / cassandra / security / SSLFactoryTest . java <nl> + + + b / test / unit / org / apache / cassandra / security / SSLFactoryTest . java <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class SSLFactoryTest <nl> } <nl> <nl> EncryptionOptions options = addKeystoreOptions ( encryptionOptions ) ; <nl> - SslContext sslContext = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , true ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , true ) ; <nl> Assert . assertNotNull ( sslContext ) ; <nl> Assert . assertTrue ( sslContext instanceof OpenSslContext ) ; <nl> } <nl> @ @ - 105 , 7 + 105 , 7 @ @ public class SSLFactoryTest <nl> public void getSslContext _ JdkSsl ( ) throws IOException <nl> { <nl> EncryptionOptions options = addKeystoreOptions ( encryptionOptions ) ; <nl> - SslContext sslContext = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , false ) ; <nl> + SslContext sslContext = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , false ) ; <nl> Assert . assertNotNull ( sslContext ) ; <nl> Assert . assertTrue ( sslContext instanceof JdkSslContext ) ; <nl> Assert . assertEquals ( Arrays . asList ( encryptionOptions . cipher _ suites ) , sslContext . cipherSuites ( ) ) ; <nl> @ @ - 174 , 16 + 174 , 16 @ @ public class SSLFactoryTest <nl> <nl> SSLFactory . initHotReloading ( ( ServerEncryptionOptions ) options , options , true ) ; <nl> <nl> - SslContext oldCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> + SslContext oldCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> . isAvailable ( ) ) ; <nl> File keystoreFile = new File ( options . keystore ) ; <nl> <nl> SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; <nl> - Thread . sleep ( 5000 ) ; <nl> - FileUtils . touch ( keystoreFile ) ; <nl> + <nl> + keystoreFile . setLastModified ( System . currentTimeMillis ( ) + 15000 ) ; <nl> <nl> SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; ; <nl> - SslContext newCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> + SslContext newCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> . isAvailable ( ) ) ; <nl> <nl> Assert . assertNotSame ( oldCtx , newCtx ) ; <nl> @ @ - 209 , 36 + 209 , 31 @ @ public class SSLFactoryTest <nl> } <nl> <nl> @ Test <nl> - public void testSslFactoryHotReload _ BadPassword _ DoesNotClearExistingSslContext ( ) throws IOException , <nl> - InterruptedException <nl> + public void testSslFactoryHotReload _ BadPassword _ DoesNotClearExistingSslContext ( ) throws IOException <nl> { <nl> try <nl> { <nl> addKeystoreOptions ( encryptionOptions ) ; <nl> <nl> - EncryptionOptions options = new ServerEncryptionOptions ( encryptionOptions ) ; <nl> + ServerEncryptionOptions options = new ServerEncryptionOptions ( encryptionOptions ) ; <nl> options . enabled = true ; <nl> <nl> - SSLFactory . initHotReloading ( ( ServerEncryptionOptions ) options , options , true ) ; <nl> - SslContext oldCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> + SSLFactory . initHotReloading ( options , options , true ) ; <nl> + SslContext oldCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> . isAvailable ( ) ) ; <nl> File keystoreFile = new File ( options . keystore ) ; <nl> <nl> - SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; <nl> - Thread . sleep ( 5000 ) ; <nl> - FileUtils . touch ( keystoreFile ) ; <nl> + SSLFactory . checkCertFilesForHotReloading ( options , options ) ; <nl> + keystoreFile . setLastModified ( System . currentTimeMillis ( ) + 5000 ) ; <nl> <nl> - options . keystore _ password = " bad password " ; <nl> - SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; ; <nl> - SslContext newCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> + ServerEncryptionOptions modOptions = new ServerEncryptionOptions ( options ) ; <nl> + modOptions . keystore _ password = " bad password " ; <nl> + SSLFactory . checkCertFilesForHotReloading ( modOptions , modOptions ) ; <nl> + SslContext newCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> . isAvailable ( ) ) ; <nl> <nl> Assert . assertSame ( oldCtx , newCtx ) ; <nl> } <nl> - catch ( Exception e ) <nl> - { <nl> - throw e ; <nl> - } <nl> finally <nl> { <nl> DatabaseDescriptor . loadConfig ( ) ; <nl> @ @ - 261 , 16 + 256 , 15 @ @ public class SSLFactoryTest <nl> options . enabled = true ; <nl> <nl> SSLFactory . initHotReloading ( ( ServerEncryptionOptions ) options , options , true ) ; <nl> - SslContext oldCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> + SslContext oldCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> . isAvailable ( ) ) ; <nl> SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; <nl> - Thread . sleep ( 5000 ) ; <nl> <nl> - FileUtils . touch ( testKeystoreFile ) ; <nl> + testKeystoreFile . setLastModified ( System . currentTimeMillis ( ) + 15000 ) ; <nl> FileUtils . forceDelete ( testKeystoreFile ) ; <nl> <nl> SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; ; <nl> - SslContext newCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> + SslContext newCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl <nl> . isAvailable ( ) ) ; <nl> <nl> Assert . assertSame ( oldCtx , newCtx ) ; <nl> @ @ - 293 , 16 + 287 , 16 @ @ public class SSLFactoryTest <nl> options . enabled = true ; <nl> options . cipher _ suites = new String [ ] { " TLS _ ECDHE _ ECDSA _ WITH _ AES _ 128 _ GCM _ SHA256 " } ; <nl> <nl> - SslContext ctx1 = SSLFactory . getSslContext ( options , true , <nl> - SSLFactory . SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; <nl> + SslContext ctx1 = SSLFactory . getOrCreateSslContext ( options , true , <nl> + SSLFactory . SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; <nl> <nl> Assert . assertTrue ( ctx1 . isServer ( ) ) ; <nl> Assert . assertArrayEquals ( ctx1 . cipherSuites ( ) . toArray ( ) , options . cipher _ suites ) ; <nl> <nl> options . cipher _ suites = new String [ ] { " TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ GCM _ SHA256 " } ; <nl> <nl> - SslContext ctx2 = SSLFactory . getSslContext ( options , true , <nl> - SSLFactory . SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; <nl> + SslContext ctx2 = SSLFactory . getOrCreateSslContext ( options , true , <nl> + SSLFactory . SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; <nl> <nl> Assert . assertTrue ( ctx2 . isClient ( ) ) ; <nl> Assert . assertArrayEquals ( ctx2 . cipherSuites ( ) . toArray ( ) , options . cipher _ suites ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 9b7a6e5 . . 5c70c9a 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 905 , 7 + 905 , 8 @ @ public class DatabaseDescriptor 
 try 
 { 
 SSLFactory . initHotReloading ( conf . server _ encryption _ options , conf . client _ encryption _ options , false ) ; 
 - } catch ( IOException e ) 
 + } 
 + catch ( IOException e ) 
 { 
 throw new ConfigurationException ( " Failed to initialize SSL hot reloading " , e ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 index 45579fb . . 9524cec 100644 
 - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 @ @ - 57 , 6 + 57 , 10 @ @ public class EncryptionOptions 
 optional = options . optional ; 
 } 
 
 + / * * 
 + * The method is being mainly used to cache SslContexts therefore , we only consider 
 + * fields that would make a difference when the TrustStore or KeyStore files are updated 
 + * / 
 @ Override 
 public boolean equals ( Object o ) 
 { 
 @ @ - 66 , 23 + 70 , 37 @ @ public class EncryptionOptions 
 return false ; 
 
 EncryptionOptions opt = ( EncryptionOptions ) o ; 
 - return Objects . equals ( keystore , opt . keystore ) & & 
 + return enabled = = opt . enabled & & 
 + optional = = opt . optional & & 
 + require _ client _ auth = = opt . require _ client _ auth & & 
 + require _ endpoint _ verification = = opt . require _ endpoint _ verification & & 
 + Objects . equals ( keystore , opt . keystore ) & & 
 + Objects . equals ( keystore _ password , opt . keystore _ password ) & & 
 Objects . equals ( truststore , opt . truststore ) & & 
 - Objects . equals ( algorithm , opt . algorithm ) & & 
 + Objects . equals ( truststore _ password , opt . truststore _ password ) & & 
 Objects . equals ( protocol , opt . protocol ) & & 
 - Arrays . equals ( cipher _ suites , opt . cipher _ suites ) & & 
 - require _ client _ auth = = opt . require _ client _ auth & & 
 - require _ endpoint _ verification = = opt . require _ endpoint _ verification ; 
 + Objects . equals ( algorithm , opt . algorithm ) & & 
 + Objects . equals ( store _ type , opt . store _ type ) & & 
 + Arrays . equals ( cipher _ suites , opt . cipher _ suites ) ; 
 } 
 
 + / * * 
 + * The method is being mainly used to cache SslContexts therefore , we only consider 
 + * fields that would make a difference when the TrustStore or KeyStore files are updated 
 + * / 
 @ Override 
 public int hashCode ( ) 
 { 
 int result = 0 ; 
 result + = 31 * ( keystore = = null ? 0 : keystore . hashCode ( ) ) ; 
 + result + = 31 * ( keystore _ password = = null ? 0 : keystore _ password . hashCode ( ) ) ; 
 result + = 31 * ( truststore = = null ? 0 : truststore . hashCode ( ) ) ; 
 - result + = 31 * ( algorithm = = null ? 0 : algorithm . hashCode ( ) ) ; 
 + result + = 31 * ( truststore _ password = = null ? 0 : truststore _ password . hashCode ( ) ) ; 
 result + = 31 * ( protocol = = null ? 0 : protocol . hashCode ( ) ) ; 
 + result + = 31 * ( algorithm = = null ? 0 : algorithm . hashCode ( ) ) ; 
 + result + = 31 * ( store _ type = = null ? 0 : store _ type . hashCode ( ) ) ; 
 + result + = 31 * Boolean . hashCode ( enabled ) ; 
 + result + = 31 * Boolean . hashCode ( optional ) ; 
 result + = 31 * Arrays . hashCode ( cipher _ suites ) ; 
 result + = 31 * Boolean . hashCode ( require _ client _ auth ) ; 
 result + = 31 * Boolean . hashCode ( require _ endpoint _ verification ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / async / NettyFactory . java b / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 index 3752927 . . 346a067 100644 
 - - - a / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 + + + b / src / java / org / apache / cassandra / net / async / NettyFactory . java 
 @ @ - 292 , 7 + 292 , 7 @ @ public final class NettyFactory 
 } 
 else 
 { 
 - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; 
 InetSocketAddress peer = encryptionOptions . require _ endpoint _ verification ? channel . remoteAddress ( ) : null ; 
 SslHandler sslHandler = newSslHandler ( channel , sslContext , peer ) ; 
 logger . trace ( " creating inbound netty SslContext : context = { } , engine = { } " , sslContext . getClass ( ) . getName ( ) , sslHandler . engine ( ) . getClass ( ) . getName ( ) ) ; 
 @ @ - 369 , 7 + 369 , 7 @ @ public final class NettyFactory 
 / / order of handlers : ssl - > logger - > handshakeHandler 
 if ( params . encryptionOptions ! = null ) 
 { 
 - SslContext sslContext = SSLFactory . getSslContext ( params . encryptionOptions , true , SSLFactory . SocketType . CLIENT ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( params . encryptionOptions , true , SSLFactory . SocketType . CLIENT ) ; 
 / / for some reason channel . remoteAddress ( ) will return null 
 InetAddressAndPort address = params . connectionId . remote ( ) ; 
 InetSocketAddress peer = params . encryptionOptions . require _ endpoint _ verification ? new InetSocketAddress ( address . address , address . port ) : null ; 
 diff - - git a / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java b / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java 
 index 3b4f794 . . 3fb8562 100644 
 - - - a / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java 
 + + + b / src / java / org / apache / cassandra / net / async / OptionalSslHandler . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public class OptionalSslHandler extends ByteToMessageDecoder 
 if ( SslHandler . isEncrypted ( in ) ) 
 { 
 / / Connection uses SSL / TLS , replace the detection handler with a SslHandler and so use encryption . 
 - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , true , SSLFactory . SocketType . SERVER ) ; 
 Channel channel = ctx . channel ( ) ; 
 InetSocketAddress peer = encryptionOptions . require _ endpoint _ verification ? ( InetSocketAddress ) channel . remoteAddress ( ) : null ; 
 SslHandler sslHandler = NettyFactory . newSslHandler ( channel , sslContext , peer ) ; 
 diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java 
 index 700142d . . 7519875 100644 
 - - - a / src / java / org / apache / cassandra / security / SSLFactory . java 
 + + + b / src / java / org / apache / cassandra / security / SSLFactory . java 
 @ @ - 129 , 6 + 129 , 15 @ @ public final class SSLFactory 
 lastModTime = curModTime ; 
 return result ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " HotReloadableFile { " + 
 + " file = " + file + 
 + " , lastModTime = " + lastModTime + 
 + ' } ' ; 
 + } 
 } 
 
 / * * 
 @ @ - 221 , 18 + 230 , 18 @ @ public final class SSLFactory 
 / * * 
 * get a netty { @ link SslContext } instance 
 * / 
 - public static SslContext getSslContext ( EncryptionOptions options , boolean buildTruststore , 
 - SocketType socketType ) throws IOException 
 + public static SslContext getOrCreateSslContext ( EncryptionOptions options , boolean buildTruststore , 
 + SocketType socketType ) throws IOException 
 { 
 - return getSslContext ( options , buildTruststore , socketType , OpenSsl . isAvailable ( ) ) ; 
 + return getOrCreateSslContext ( options , buildTruststore , socketType , OpenSsl . isAvailable ( ) ) ; 
 } 
 
 / * * 
 * Get a netty { @ link SslContext } instance . 
 * / 
 @ VisibleForTesting 
 - static SslContext getSslContext ( EncryptionOptions options , boolean buildTruststore , 
 - SocketType socketType , boolean useOpenSsl ) throws IOException 
 + static SslContext getOrCreateSslContext ( EncryptionOptions options , boolean buildTruststore , 
 + SocketType socketType , boolean useOpenSsl ) throws IOException 
 { 
 CacheKey key = new CacheKey ( options , socketType ) ; 
 SslContext sslContext ; 
 @ @ - 302 , 7 + 311 , 7 @ @ public final class SSLFactory 
 if ( ! isHotReloadingInitialized ) 
 throw new IllegalStateException ( " Hot reloading functionality has not been initialized . " ) ; 
 
 - logger . trace ( " Checking whether certificates have been updated " ) ; 
 + logger . debug ( " Checking whether certificates have been updated { } " , hotReloadableFiles ) ; 
 
 if ( hotReloadableFiles . stream ( ) . anyMatch ( HotReloadableFile : : shouldReload ) ) 
 { 
 @ @ - 311 , 7 + 320 , 8 @ @ public final class SSLFactory 
 { 
 validateSslCerts ( serverOpts , clientOpts ) ; 
 cachedSslContexts . clear ( ) ; 
 - } catch ( Exception e ) 
 + } 
 + catch ( Exception e ) 
 { 
 logger . error ( " Failed to hot reload the SSL Certificates ! Please check the certificate files . " , e ) ; 
 } 
 @ @ - 378 , 7 + 388 , 8 @ @ public final class SSLFactory 
 createNettySslContext ( serverOpts , true , SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; 
 createNettySslContext ( serverOpts , true , SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; 
 } 
 - } catch ( Exception e ) 
 + } 
 + catch ( Exception e ) 
 { 
 throw new IOException ( " Failed to create SSL context using server _ encryption _ options ! " , e ) ; 
 } 
 @ @ - 391 , 7 + 402 , 8 @ @ public final class SSLFactory 
 createNettySslContext ( clientOpts , clientOpts . require _ client _ auth , SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; 
 createNettySslContext ( clientOpts , clientOpts . require _ client _ auth , SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; 
 } 
 - } catch ( Exception e ) 
 + } 
 + catch ( Exception e ) 
 { 
 throw new IOException ( " Failed to create SSL context using client _ encryption _ options ! " , e ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 056a4a0 . . 33cd0fb 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 406 , 7 + 406 , 7 @ @ public class Server implements CassandraDaemon . Server 
 
 protected final SslHandler createSslHandler ( ByteBufAllocator allocator ) throws IOException 
 { 
 - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , SSLFactory . SocketType . SERVER ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , SSLFactory . SocketType . SERVER ) ; 
 return sslContext . newHandler ( allocator ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / SimpleClient . java b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 index 0db9136 . . 9ed4272 100644 
 - - - a / src / java / org / apache / cassandra / transport / SimpleClient . java 
 + + + b / src / java / org / apache / cassandra / transport / SimpleClient . java 
 @ @ - 25 , 7 + 25 , 6 @ @ import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Optional ; 
 import java . util . concurrent . BlockingQueue ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 import java . util . concurrent . SynchronousQueue ; 
 @ @ - 292 , 8 + 291 , 8 @ @ public class SimpleClient implements Closeable 
 protected void initChannel ( Channel channel ) throws Exception 
 { 
 super . initChannel ( channel ) ; 
 - SslContext sslContext = SSLFactory . getSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , 
 - SSLFactory . SocketType . CLIENT ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( encryptionOptions , encryptionOptions . require _ client _ auth , 
 + SSLFactory . SocketType . CLIENT ) ; 
 channel . pipeline ( ) . addFirst ( " ssl " , sslContext . newHandler ( channel . alloc ( ) ) ) ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / security / SSLFactoryTest . java b / test / unit / org / apache / cassandra / security / SSLFactoryTest . java 
 index b253c59 . . 5fdbe7b 100644 
 - - - a / test / unit / org / apache / cassandra / security / SSLFactoryTest . java 
 + + + b / test / unit / org / apache / cassandra / security / SSLFactoryTest . java 
 @ @ - 96 , 7 + 96 , 7 @ @ public class SSLFactoryTest 
 } 
 
 EncryptionOptions options = addKeystoreOptions ( encryptionOptions ) ; 
 - SslContext sslContext = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , true ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , true ) ; 
 Assert . assertNotNull ( sslContext ) ; 
 Assert . assertTrue ( sslContext instanceof OpenSslContext ) ; 
 } 
 @ @ - 105 , 7 + 105 , 7 @ @ public class SSLFactoryTest 
 public void getSslContext _ JdkSsl ( ) throws IOException 
 { 
 EncryptionOptions options = addKeystoreOptions ( encryptionOptions ) ; 
 - SslContext sslContext = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , false ) ; 
 + SslContext sslContext = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , false ) ; 
 Assert . assertNotNull ( sslContext ) ; 
 Assert . assertTrue ( sslContext instanceof JdkSslContext ) ; 
 Assert . assertEquals ( Arrays . asList ( encryptionOptions . cipher _ suites ) , sslContext . cipherSuites ( ) ) ; 
 @ @ - 174 , 16 + 174 , 16 @ @ public class SSLFactoryTest 
 
 SSLFactory . initHotReloading ( ( ServerEncryptionOptions ) options , options , true ) ; 
 
 - SslContext oldCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 + SslContext oldCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 . isAvailable ( ) ) ; 
 File keystoreFile = new File ( options . keystore ) ; 
 
 SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; 
 - Thread . sleep ( 5000 ) ; 
 - FileUtils . touch ( keystoreFile ) ; 
 + 
 + keystoreFile . setLastModified ( System . currentTimeMillis ( ) + 15000 ) ; 
 
 SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; ; 
 - SslContext newCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 + SslContext newCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 . isAvailable ( ) ) ; 
 
 Assert . assertNotSame ( oldCtx , newCtx ) ; 
 @ @ - 209 , 36 + 209 , 31 @ @ public class SSLFactoryTest 
 } 
 
 @ Test 
 - public void testSslFactoryHotReload _ BadPassword _ DoesNotClearExistingSslContext ( ) throws IOException , 
 - InterruptedException 
 + public void testSslFactoryHotReload _ BadPassword _ DoesNotClearExistingSslContext ( ) throws IOException 
 { 
 try 
 { 
 addKeystoreOptions ( encryptionOptions ) ; 
 
 - EncryptionOptions options = new ServerEncryptionOptions ( encryptionOptions ) ; 
 + ServerEncryptionOptions options = new ServerEncryptionOptions ( encryptionOptions ) ; 
 options . enabled = true ; 
 
 - SSLFactory . initHotReloading ( ( ServerEncryptionOptions ) options , options , true ) ; 
 - SslContext oldCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 + SSLFactory . initHotReloading ( options , options , true ) ; 
 + SslContext oldCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 . isAvailable ( ) ) ; 
 File keystoreFile = new File ( options . keystore ) ; 
 
 - SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; 
 - Thread . sleep ( 5000 ) ; 
 - FileUtils . touch ( keystoreFile ) ; 
 + SSLFactory . checkCertFilesForHotReloading ( options , options ) ; 
 + keystoreFile . setLastModified ( System . currentTimeMillis ( ) + 5000 ) ; 
 
 - options . keystore _ password = " bad password " ; 
 - SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; ; 
 - SslContext newCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 + ServerEncryptionOptions modOptions = new ServerEncryptionOptions ( options ) ; 
 + modOptions . keystore _ password = " bad password " ; 
 + SSLFactory . checkCertFilesForHotReloading ( modOptions , modOptions ) ; 
 + SslContext newCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 . isAvailable ( ) ) ; 
 
 Assert . assertSame ( oldCtx , newCtx ) ; 
 } 
 - catch ( Exception e ) 
 - { 
 - throw e ; 
 - } 
 finally 
 { 
 DatabaseDescriptor . loadConfig ( ) ; 
 @ @ - 261 , 16 + 256 , 15 @ @ public class SSLFactoryTest 
 options . enabled = true ; 
 
 SSLFactory . initHotReloading ( ( ServerEncryptionOptions ) options , options , true ) ; 
 - SslContext oldCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 + SslContext oldCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 . isAvailable ( ) ) ; 
 SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; 
 - Thread . sleep ( 5000 ) ; 
 
 - FileUtils . touch ( testKeystoreFile ) ; 
 + testKeystoreFile . setLastModified ( System . currentTimeMillis ( ) + 15000 ) ; 
 FileUtils . forceDelete ( testKeystoreFile ) ; 
 
 SSLFactory . checkCertFilesForHotReloading ( ( ServerEncryptionOptions ) options , options ) ; ; 
 - SslContext newCtx = SSLFactory . getSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 + SslContext newCtx = SSLFactory . getOrCreateSslContext ( options , true , SSLFactory . SocketType . CLIENT , OpenSsl 
 . isAvailable ( ) ) ; 
 
 Assert . assertSame ( oldCtx , newCtx ) ; 
 @ @ - 293 , 16 + 287 , 16 @ @ public class SSLFactoryTest 
 options . enabled = true ; 
 options . cipher _ suites = new String [ ] { " TLS _ ECDHE _ ECDSA _ WITH _ AES _ 128 _ GCM _ SHA256 " } ; 
 
 - SslContext ctx1 = SSLFactory . getSslContext ( options , true , 
 - SSLFactory . SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; 
 + SslContext ctx1 = SSLFactory . getOrCreateSslContext ( options , true , 
 + SSLFactory . SocketType . SERVER , OpenSsl . isAvailable ( ) ) ; 
 
 Assert . assertTrue ( ctx1 . isServer ( ) ) ; 
 Assert . assertArrayEquals ( ctx1 . cipherSuites ( ) . toArray ( ) , options . cipher _ suites ) ; 
 
 options . cipher _ suites = new String [ ] { " TLS _ ECDHE _ RSA _ WITH _ AES _ 128 _ GCM _ SHA256 " } ; 
 
 - SslContext ctx2 = SSLFactory . getSslContext ( options , true , 
 - SSLFactory . SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; 
 + SslContext ctx2 = SSLFactory . getOrCreateSslContext ( options , true , 
 + SSLFactory . SocketType . CLIENT , OpenSsl . isAvailable ( ) ) ; 
 
 Assert . assertTrue ( ctx2 . isClient ( ) ) ; 
 Assert . assertArrayEquals ( ctx2 . cipherSuites ( ) . toArray ( ) , options . cipher _ suites ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
