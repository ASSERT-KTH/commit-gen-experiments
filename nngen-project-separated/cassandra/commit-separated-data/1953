BLEU SCORE: 0.03283637368030199

TEST MSG: Fix AIOOBE when building syntax error message
GENERATED MSG: Optimize partitioner tokens

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5402ad5 . . 07d526c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 1 . 3 <nl> + * Fix ArrayIndexOutOfBoundsException when generating error message <nl> + for some CQL syntax errors ( CASSANDRA - 8455 ) <nl> * Scale memtable slab allocation logarithmically ( CASSANDRA - 7882 ) <nl> * cassandra - stress simultaneous inserts over same seed ( CASSANDRA - 7964 ) <nl> * Reduce cassandra - stress sampling memory requirements ( CASSANDRA - 7926 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ErrorCollector . java b / src / java / org / apache / cassandra / cql3 / ErrorCollector . java <nl> index cd628b8 . . 2137da2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ErrorCollector . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ErrorCollector . java <nl> @ @ - 132 , 6 + 132 , 9 @ @ public final class ErrorCollector implements ErrorListener <nl> Token to , <nl> Token offending ) <nl> { <nl> + if ( ! areTokensValid ( from , to , offending ) ) <nl> + return ; <nl> + <nl> String [ ] lines = query . split ( " \ n " ) ; <nl> <nl> boolean includeQueryStart = ( from . getLine ( ) = = 1 ) & & ( from . getCharPositionInLine ( ) = = 0 ) ; <nl> @ @ - 157 , 6 + 160 , 33 @ @ public final class ErrorCollector implements ErrorListener <nl> } <nl> <nl> / * * <nl> + * Checks if the specified tokens are valid . <nl> + * <nl> + * @ param tokens the tokens to check <nl> + * @ return < code > true < / code > if all the specified tokens are valid ones , < code > false < / code > otherwise . <nl> + * / <nl> + private static boolean areTokensValid ( Token . . . tokens ) <nl> + { <nl> + for ( Token token : tokens ) <nl> + { <nl> + if ( ! isTokenValid ( token ) ) <nl> + return false ; <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks that the specified token is valid . <nl> + * <nl> + * @ param token the token to check <nl> + * @ return < code > true < / code > if it is considered as valid , < code > false < / code > otherwise . <nl> + * / <nl> + private static boolean isTokenValid ( Token token ) <nl> + { <nl> + return token . getLine ( ) > 0 & & token . getCharPositionInLine ( ) > = 0 ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the index of the offending token . < p > In the case where the offending token is an extra <nl> * character at the end , the index returned by the < code > TokenStream < / code > might be after the last token . <nl> * To avoid that problem we need to make sure that the index of the offending token is a valid index <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 8e829e8 . . 197225b 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 542 , 6 + 542 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> } <nl> catch ( RuntimeException re ) <nl> { <nl> + logger . error ( String . format ( " The statement : [ % s ] could not be parsed . " , queryStr ) , re ) ; <nl> throw new SyntaxException ( String . format ( " Failed parsing statement : [ % s ] reason : % s % s " , <nl> queryStr , <nl> re . getClass ( ) . getSimpleName ( ) , <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java b / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java <nl> index 4f5db34 . . fca93df 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java <nl> @ @ - 107 , 6 + 107 , 23 @ @ public class ErrorCollectorTest <nl> assertEquals ( expected , builder . toString ( ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAppendSnippetWithInvalidToToken ( ) <nl> + { <nl> + String query = " CREATE TABLE test ( a int PRIMARY KEY , b set < int > ; " ; <nl> + <nl> + ErrorCollector collector = new ErrorCollector ( query ) ; <nl> + <nl> + StringBuilder builder = new StringBuilder ( ) ; <nl> + <nl> + Token from = new MockToken ( 1 , 32 , " " ) ; <nl> + Token to = new MockToken ( 0 , - 1 , " < no text > " ) ; <nl> + Token offending = new MockToken ( 1 , 48 , " ; " ) ; <nl> + <nl> + collector . appendSnippet ( builder , from , to , offending ) ; <nl> + assertEquals ( " " , builder . toString ( ) ) ; <nl> + } <nl> + <nl> private final static class MockToken implements Token <nl> { <nl> / * *
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5402ad5 . . 07d526c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 1 . 3 
 + * Fix ArrayIndexOutOfBoundsException when generating error message 
 + for some CQL syntax errors ( CASSANDRA - 8455 ) 
 * Scale memtable slab allocation logarithmically ( CASSANDRA - 7882 ) 
 * cassandra - stress simultaneous inserts over same seed ( CASSANDRA - 7964 ) 
 * Reduce cassandra - stress sampling memory requirements ( CASSANDRA - 7926 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ErrorCollector . java b / src / java / org / apache / cassandra / cql3 / ErrorCollector . java 
 index cd628b8 . . 2137da2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ErrorCollector . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ErrorCollector . java 
 @ @ - 132 , 6 + 132 , 9 @ @ public final class ErrorCollector implements ErrorListener 
 Token to , 
 Token offending ) 
 { 
 + if ( ! areTokensValid ( from , to , offending ) ) 
 + return ; 
 + 
 String [ ] lines = query . split ( " \ n " ) ; 
 
 boolean includeQueryStart = ( from . getLine ( ) = = 1 ) & & ( from . getCharPositionInLine ( ) = = 0 ) ; 
 @ @ - 157 , 6 + 160 , 33 @ @ public final class ErrorCollector implements ErrorListener 
 } 
 
 / * * 
 + * Checks if the specified tokens are valid . 
 + * 
 + * @ param tokens the tokens to check 
 + * @ return < code > true < / code > if all the specified tokens are valid ones , < code > false < / code > otherwise . 
 + * / 
 + private static boolean areTokensValid ( Token . . . tokens ) 
 + { 
 + for ( Token token : tokens ) 
 + { 
 + if ( ! isTokenValid ( token ) ) 
 + return false ; 
 + } 
 + return true ; 
 + } 
 + 
 + / * * 
 + * Checks that the specified token is valid . 
 + * 
 + * @ param token the token to check 
 + * @ return < code > true < / code > if it is considered as valid , < code > false < / code > otherwise . 
 + * / 
 + private static boolean isTokenValid ( Token token ) 
 + { 
 + return token . getLine ( ) > 0 & & token . getCharPositionInLine ( ) > = 0 ; 
 + } 
 + 
 + / * * 
 * Returns the index of the offending token . < p > In the case where the offending token is an extra 
 * character at the end , the index returned by the < code > TokenStream < / code > might be after the last token . 
 * To avoid that problem we need to make sure that the index of the offending token is a valid index 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 8e829e8 . . 197225b 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 542 , 6 + 542 , 7 @ @ public class QueryProcessor implements QueryHandler 
 } 
 catch ( RuntimeException re ) 
 { 
 + logger . error ( String . format ( " The statement : [ % s ] could not be parsed . " , queryStr ) , re ) ; 
 throw new SyntaxException ( String . format ( " Failed parsing statement : [ % s ] reason : % s % s " , 
 queryStr , 
 re . getClass ( ) . getSimpleName ( ) , 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java b / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java 
 index 4f5db34 . . fca93df 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / ErrorCollectorTest . java 
 @ @ - 107 , 6 + 107 , 23 @ @ public class ErrorCollectorTest 
 assertEquals ( expected , builder . toString ( ) ) ; 
 } 
 
 + @ Test 
 + public void testAppendSnippetWithInvalidToToken ( ) 
 + { 
 + String query = " CREATE TABLE test ( a int PRIMARY KEY , b set < int > ; " ; 
 + 
 + ErrorCollector collector = new ErrorCollector ( query ) ; 
 + 
 + StringBuilder builder = new StringBuilder ( ) ; 
 + 
 + Token from = new MockToken ( 1 , 32 , " " ) ; 
 + Token to = new MockToken ( 0 , - 1 , " < no text > " ) ; 
 + Token offending = new MockToken ( 1 , 48 , " ; " ) ; 
 + 
 + collector . appendSnippet ( builder , from , to , offending ) ; 
 + assertEquals ( " " , builder . toString ( ) ) ; 
 + } 
 + 
 private final static class MockToken implements Token 
 { 
 / * *

NEAREST DIFF:
ELIMINATEDSENTENCE
