BLEU SCORE: 0.05815868174415823

TEST MSG: Improve validation of sub range repair
GENERATED MSG: Add nodetool options to repair specific ranges .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> index 00e43ea . . aac9f9a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> @ @ - 146 , 9 + 146 , 6 @ @ public class ActiveRepairService <nl> * / <nl> public static Set < InetAddress > getNeighbors ( String keyspaceName , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) <nl> { <nl> - if ( dataCenters ! = null & & ! dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) <nl> - throw new IllegalArgumentException ( " The local data center must be part of the repair " ) ; <nl> - <nl> StorageService ss = StorageService . instance ; <nl> Map < Range < Token > , List < InetAddress > > replicaSets = ss . getRangeToAddressMap ( keyspaceName ) ; <nl> Range < Token > rangeSuperSet = null ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 05cc8d7 . . 13dd3b7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2488 , 6 + 2488 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairAsync ( final String keyspace , final boolean isSequential , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) <nl> { <nl> + / / when repairing only primary range , dataCenter nor hosts can be set <nl> + if ( primaryRange & & ( dataCenters ! = null | | hosts ! = null ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; <nl> + } <nl> final Collection < Range < Token > > ranges = primaryRange ? getLocalPrimaryRanges ( keyspace ) : getLocalRanges ( keyspace ) ; <nl> return forceRepairAsync ( keyspace , isSequential , dataCenters , hosts , ranges , columnFamilies ) ; <nl> } <nl> @ @ - 2507 , 6 + 2512 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairAsync ( final String keyspace , final boolean isSequential , final boolean isLocal , final boolean primaryRange , final String . . . columnFamilies ) <nl> { <nl> + / / when repairing only primary range , you cannot repair only on local DC <nl> + if ( primaryRange & & isLocal ) <nl> + { <nl> + throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; <nl> + } <nl> final Collection < Range < Token > > ranges = primaryRange ? getLocalPrimaryRanges ( keyspace ) : getLocalRanges ( keyspace ) ; <nl> return forceRepairAsync ( keyspace , isSequential , isLocal , ranges , columnFamilies ) ; <nl> } <nl> @ @ - 2528 , 30 + 2538 , 25 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) <nl> { <nl> - Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; <nl> - Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; <nl> + Collection < Range < Token > > repairingRange = createRepairRangeFrom ( beginToken , endToken ) ; <nl> <nl> - logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , <nl> - parsedBeginToken , parsedEndToken , keyspaceName , columnFamilies ) ; <nl> - return forceRepairAsync ( keyspaceName , isSequential , dataCenters , hosts , Collections . singleton ( new Range < Token > ( parsedBeginToken , parsedEndToken ) ) , columnFamilies ) ; <nl> + logger . info ( " starting user - requested repair of range { } for keyspace { } and column families { } " , <nl> + repairingRange , keyspaceName , columnFamilies ) ; <nl> + return forceRepairAsync ( keyspaceName , isSequential , dataCenters , hosts , repairingRange , columnFamilies ) ; <nl> } <nl> <nl> public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) <nl> { <nl> - Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; <nl> - Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; <nl> - <nl> - logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , <nl> - parsedBeginToken , parsedEndToken , keyspaceName , columnFamilies ) ; <nl> - return forceRepairAsync ( keyspaceName , isSequential , isLocal , Collections . singleton ( new Range < Token > ( parsedBeginToken , parsedEndToken ) ) , columnFamilies ) ; <nl> + Set < String > dataCenters = null ; <nl> + if ( isLocal ) <nl> + { <nl> + dataCenters = Sets . newHashSet ( DatabaseDescriptor . getLocalDataCenter ( ) ) ; <nl> + } <nl> + return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential , dataCenters , null , columnFamilies ) ; <nl> } <nl> <nl> - <nl> / * * <nl> * Trigger proactive repair for a keyspace and column families . <nl> - * @ param keyspaceName <nl> - * @ param columnFamilies <nl> - * @ throws IOException <nl> * / <nl> public void forceKeyspaceRepair ( final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException <nl> { <nl> @ @ - 2560 , 17 + 2565 , 23 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> public void forceKeyspaceRepairPrimaryRange ( final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException <nl> { <nl> - forceKeyspaceRepairRange ( keyspaceName , getLocalPrimaryRanges ( keyspaceName ) , isSequential , isLocal , columnFamilies ) ; <nl> + / / primary range repair can only be performed for whole cluster . <nl> + / / NOTE : we should omit the param but keep API as is for now . <nl> + if ( isLocal ) <nl> + { <nl> + throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; <nl> + } <nl> + <nl> + forceKeyspaceRepairRange ( keyspaceName , getLocalPrimaryRanges ( keyspaceName ) , isSequential , false , columnFamilies ) ; <nl> } <nl> <nl> public void forceKeyspaceRepairRange ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException <nl> { <nl> - Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; <nl> - Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; <nl> + Collection < Range < Token > > repairingRange = createRepairRangeFrom ( beginToken , endToken ) ; <nl> <nl> - logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , <nl> - parsedBeginToken , parsedEndToken , keyspaceName , columnFamilies ) ; <nl> - forceKeyspaceRepairRange ( keyspaceName , Collections . singleton ( new Range < Token > ( parsedBeginToken , parsedEndToken ) ) , isSequential , isLocal , columnFamilies ) ; <nl> + logger . info ( " starting user - requested repair of range { } for keyspace { } and column families { } " , <nl> + repairingRange , keyspaceName , columnFamilies ) ; <nl> + forceKeyspaceRepairRange ( keyspaceName , repairingRange , isSequential , isLocal , columnFamilies ) ; <nl> } <nl> <nl> public void forceKeyspaceRepairRange ( final String keyspaceName , final Collection < Range < Token > > ranges , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException <nl> @ @ - 2580 , 6 + 2591 , 34 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> createRepairTask ( nextRepairCommand . incrementAndGet ( ) , keyspaceName , ranges , isSequential , isLocal , columnFamilies ) . run ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Create collection of ranges that match ring layout from given tokens . <nl> + * <nl> + * @ param beginToken beginning token of the range <nl> + * @ param endToken end token of the range <nl> + * @ return collection of ranges that match ring layout in TokenMetadata <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + private Collection < Range < Token > > createRepairRangeFrom ( String beginToken , String endToken ) <nl> + { <nl> + Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; <nl> + Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; <nl> + <nl> + Deque < Range < Token > > repairingRange = new ArrayDeque < > ( ) ; <nl> + / / Break up given range to match ring layout in TokenMetadata <nl> + Token previous = tokenMetadata . getPredecessor ( TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , parsedEndToken ) ) ; <nl> + while ( parsedBeginToken . compareTo ( previous ) < 0 ) <nl> + { <nl> + repairingRange . addFirst ( new Range < > ( previous , parsedEndToken ) ) ; <nl> + <nl> + parsedEndToken = previous ; <nl> + previous = tokenMetadata . getPredecessor ( previous ) ; <nl> + } <nl> + repairingRange . addFirst ( new Range < > ( parsedBeginToken , parsedEndToken ) ) ; <nl> + <nl> + return repairingRange ; <nl> + } <nl> + <nl> private FutureTask < Object > createRepairTask ( final int cmd , final String keyspace , final Collection < Range < Token > > ranges , final boolean isSequential , final boolean isLocal , final String . . . columnFamilies ) <nl> { <nl> Set < String > dataCenters = null ; <nl> @ @ - 2592 , 7 + 2631 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> private FutureTask < Object > createRepairTask ( final int cmd , final String keyspace , final Collection < Range < Token > > ranges , final boolean isSequential , final Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) <nl> { <nl> - return new FutureTask < Object > ( new WrappedRunnable ( ) <nl> + if ( dataCenters ! = null & & ! dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " the local data center must be part of the repair " ) ; <nl> + } <nl> + <nl> + return new FutureTask < > ( new WrappedRunnable ( ) <nl> { <nl> protected void runMayThrow ( ) throws Exception <nl> { <nl> @ @ - 2600 , 15 + 2644 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> logger . info ( message ) ; <nl> sendNotification ( " repair " , message , new int [ ] { cmd , ActiveRepairService . Status . STARTED . ordinal ( ) } ) ; <nl> <nl> - if ( dataCenters ! = null & & ! dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) <nl> - { <nl> - message = String . format ( " Cancelling repair command # % d ( the local data center must be part of the repair ) " , cmd ) ; <nl> - logger . error ( message ) ; <nl> - sendNotification ( " repair " , message , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; <nl> - return ; <nl> - } <nl> - <nl> - List < RepairFuture > futures = new ArrayList < RepairFuture > ( ranges . size ( ) ) ; <nl> + List < RepairFuture > futures = new ArrayList < > ( ranges . size ( ) ) ; <nl> for ( Range < Token > range : ranges ) <nl> { <nl> RepairFuture future ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 213e4b4 . . afa42dd 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 1659 , 6 + 1659 , 9 @ @ public class NodeCmd <nl> Collection < String > dataCenters = null ; <nl> Collection < String > hosts = null ; <nl> <nl> + if ( primaryRange & & ( localDC | | specificDC | | specificHosts ) ) <nl> + throw new RuntimeException ( " Primary range repair should be performed on all nodes in the cluster . " ) ; <nl> + <nl> if ( specificDC ) <nl> dataCenters = Arrays . asList ( cmd . getOptionValue ( DC _ REPAIR _ OPT . left ) . split ( " , " ) ) ; <nl> else if ( localDC )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java <nl> index ae6cf67 . . d55566c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class DropUserStatement extends AuthenticationStatement <nl> state . ensureNotAnonymous ( ) ; <nl> <nl> if ( ! Auth . isExistingUser ( username ) ) <nl> - throw new InvalidRequestException ( String . format ( " User % s doesn ' t exists " , username ) ) ; <nl> + throw new InvalidRequestException ( String . format ( " User % s doesn ' t exist " , username ) ) ; <nl> <nl> AuthenticatedUser user = state . getUser ( ) ; <nl> if ( user ! = null & & user . getName ( ) . equals ( username ) )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 index 00e43ea . . aac9f9a 100644 
 - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 @ @ - 146 , 9 + 146 , 6 @ @ public class ActiveRepairService 
 * / 
 public static Set < InetAddress > getNeighbors ( String keyspaceName , Range < Token > toRepair , Collection < String > dataCenters , Collection < String > hosts ) 
 { 
 - if ( dataCenters ! = null & & ! dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) 
 - throw new IllegalArgumentException ( " The local data center must be part of the repair " ) ; 
 - 
 StorageService ss = StorageService . instance ; 
 Map < Range < Token > , List < InetAddress > > replicaSets = ss . getRangeToAddressMap ( keyspaceName ) ; 
 Range < Token > rangeSuperSet = null ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 05cc8d7 . . 13dd3b7 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2488 , 6 + 2488 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairAsync ( final String keyspace , final boolean isSequential , final Collection < String > dataCenters , final Collection < String > hosts , final boolean primaryRange , final String . . . columnFamilies ) 
 { 
 + / / when repairing only primary range , dataCenter nor hosts can be set 
 + if ( primaryRange & & ( dataCenters ! = null | | hosts ! = null ) ) 
 + { 
 + throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; 
 + } 
 final Collection < Range < Token > > ranges = primaryRange ? getLocalPrimaryRanges ( keyspace ) : getLocalRanges ( keyspace ) ; 
 return forceRepairAsync ( keyspace , isSequential , dataCenters , hosts , ranges , columnFamilies ) ; 
 } 
 @ @ - 2507 , 6 + 2512 , 11 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairAsync ( final String keyspace , final boolean isSequential , final boolean isLocal , final boolean primaryRange , final String . . . columnFamilies ) 
 { 
 + / / when repairing only primary range , you cannot repair only on local DC 
 + if ( primaryRange & & isLocal ) 
 + { 
 + throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; 
 + } 
 final Collection < Range < Token > > ranges = primaryRange ? getLocalPrimaryRanges ( keyspace ) : getLocalRanges ( keyspace ) ; 
 return forceRepairAsync ( keyspace , isSequential , isLocal , ranges , columnFamilies ) ; 
 } 
 @ @ - 2528 , 30 + 2538 , 25 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) 
 { 
 - Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; 
 - Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; 
 + Collection < Range < Token > > repairingRange = createRepairRangeFrom ( beginToken , endToken ) ; 
 
 - logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , 
 - parsedBeginToken , parsedEndToken , keyspaceName , columnFamilies ) ; 
 - return forceRepairAsync ( keyspaceName , isSequential , dataCenters , hosts , Collections . singleton ( new Range < Token > ( parsedBeginToken , parsedEndToken ) ) , columnFamilies ) ; 
 + logger . info ( " starting user - requested repair of range { } for keyspace { } and column families { } " , 
 + repairingRange , keyspaceName , columnFamilies ) ; 
 + return forceRepairAsync ( keyspaceName , isSequential , dataCenters , hosts , repairingRange , columnFamilies ) ; 
 } 
 
 public int forceRepairRangeAsync ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) 
 { 
 - Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; 
 - Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; 
 - 
 - logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , 
 - parsedBeginToken , parsedEndToken , keyspaceName , columnFamilies ) ; 
 - return forceRepairAsync ( keyspaceName , isSequential , isLocal , Collections . singleton ( new Range < Token > ( parsedBeginToken , parsedEndToken ) ) , columnFamilies ) ; 
 + Set < String > dataCenters = null ; 
 + if ( isLocal ) 
 + { 
 + dataCenters = Sets . newHashSet ( DatabaseDescriptor . getLocalDataCenter ( ) ) ; 
 + } 
 + return forceRepairRangeAsync ( beginToken , endToken , keyspaceName , isSequential , dataCenters , null , columnFamilies ) ; 
 } 
 
 - 
 / * * 
 * Trigger proactive repair for a keyspace and column families . 
 - * @ param keyspaceName 
 - * @ param columnFamilies 
 - * @ throws IOException 
 * / 
 public void forceKeyspaceRepair ( final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException 
 { 
 @ @ - 2560 , 17 + 2565 , 23 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 public void forceKeyspaceRepairPrimaryRange ( final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException 
 { 
 - forceKeyspaceRepairRange ( keyspaceName , getLocalPrimaryRanges ( keyspaceName ) , isSequential , isLocal , columnFamilies ) ; 
 + / / primary range repair can only be performed for whole cluster . 
 + / / NOTE : we should omit the param but keep API as is for now . 
 + if ( isLocal ) 
 + { 
 + throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; 
 + } 
 + 
 + forceKeyspaceRepairRange ( keyspaceName , getLocalPrimaryRanges ( keyspaceName ) , isSequential , false , columnFamilies ) ; 
 } 
 
 public void forceKeyspaceRepairRange ( String beginToken , String endToken , final String keyspaceName , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException 
 { 
 - Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; 
 - Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; 
 + Collection < Range < Token > > repairingRange = createRepairRangeFrom ( beginToken , endToken ) ; 
 
 - logger . info ( " starting user - requested repair of range ( { } , { } ] for keyspace { } and column families { } " , 
 - parsedBeginToken , parsedEndToken , keyspaceName , columnFamilies ) ; 
 - forceKeyspaceRepairRange ( keyspaceName , Collections . singleton ( new Range < Token > ( parsedBeginToken , parsedEndToken ) ) , isSequential , isLocal , columnFamilies ) ; 
 + logger . info ( " starting user - requested repair of range { } for keyspace { } and column families { } " , 
 + repairingRange , keyspaceName , columnFamilies ) ; 
 + forceKeyspaceRepairRange ( keyspaceName , repairingRange , isSequential , isLocal , columnFamilies ) ; 
 } 
 
 public void forceKeyspaceRepairRange ( final String keyspaceName , final Collection < Range < Token > > ranges , boolean isSequential , boolean isLocal , final String . . . columnFamilies ) throws IOException 
 @ @ - 2580 , 6 + 2591 , 34 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 createRepairTask ( nextRepairCommand . incrementAndGet ( ) , keyspaceName , ranges , isSequential , isLocal , columnFamilies ) . run ( ) ; 
 } 
 
 + / * * 
 + * Create collection of ranges that match ring layout from given tokens . 
 + * 
 + * @ param beginToken beginning token of the range 
 + * @ param endToken end token of the range 
 + * @ return collection of ranges that match ring layout in TokenMetadata 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + private Collection < Range < Token > > createRepairRangeFrom ( String beginToken , String endToken ) 
 + { 
 + Token parsedBeginToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( beginToken ) ; 
 + Token parsedEndToken = getPartitioner ( ) . getTokenFactory ( ) . fromString ( endToken ) ; 
 + 
 + Deque < Range < Token > > repairingRange = new ArrayDeque < > ( ) ; 
 + / / Break up given range to match ring layout in TokenMetadata 
 + Token previous = tokenMetadata . getPredecessor ( TokenMetadata . firstToken ( tokenMetadata . sortedTokens ( ) , parsedEndToken ) ) ; 
 + while ( parsedBeginToken . compareTo ( previous ) < 0 ) 
 + { 
 + repairingRange . addFirst ( new Range < > ( previous , parsedEndToken ) ) ; 
 + 
 + parsedEndToken = previous ; 
 + previous = tokenMetadata . getPredecessor ( previous ) ; 
 + } 
 + repairingRange . addFirst ( new Range < > ( parsedBeginToken , parsedEndToken ) ) ; 
 + 
 + return repairingRange ; 
 + } 
 + 
 private FutureTask < Object > createRepairTask ( final int cmd , final String keyspace , final Collection < Range < Token > > ranges , final boolean isSequential , final boolean isLocal , final String . . . columnFamilies ) 
 { 
 Set < String > dataCenters = null ; 
 @ @ - 2592 , 7 + 2631 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 private FutureTask < Object > createRepairTask ( final int cmd , final String keyspace , final Collection < Range < Token > > ranges , final boolean isSequential , final Collection < String > dataCenters , final Collection < String > hosts , final String . . . columnFamilies ) 
 { 
 - return new FutureTask < Object > ( new WrappedRunnable ( ) 
 + if ( dataCenters ! = null & & ! dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) 
 + { 
 + throw new IllegalArgumentException ( " the local data center must be part of the repair " ) ; 
 + } 
 + 
 + return new FutureTask < > ( new WrappedRunnable ( ) 
 { 
 protected void runMayThrow ( ) throws Exception 
 { 
 @ @ - 2600 , 15 + 2644 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 logger . info ( message ) ; 
 sendNotification ( " repair " , message , new int [ ] { cmd , ActiveRepairService . Status . STARTED . ordinal ( ) } ) ; 
 
 - if ( dataCenters ! = null & & ! dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) 
 - { 
 - message = String . format ( " Cancelling repair command # % d ( the local data center must be part of the repair ) " , cmd ) ; 
 - logger . error ( message ) ; 
 - sendNotification ( " repair " , message , new int [ ] { cmd , ActiveRepairService . Status . FINISHED . ordinal ( ) } ) ; 
 - return ; 
 - } 
 - 
 - List < RepairFuture > futures = new ArrayList < RepairFuture > ( ranges . size ( ) ) ; 
 + List < RepairFuture > futures = new ArrayList < > ( ranges . size ( ) ) ; 
 for ( Range < Token > range : ranges ) 
 { 
 RepairFuture future ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 213e4b4 . . afa42dd 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 1659 , 6 + 1659 , 9 @ @ public class NodeCmd 
 Collection < String > dataCenters = null ; 
 Collection < String > hosts = null ; 
 
 + if ( primaryRange & & ( localDC | | specificDC | | specificHosts ) ) 
 + throw new RuntimeException ( " Primary range repair should be performed on all nodes in the cluster . " ) ; 
 + 
 if ( specificDC ) 
 dataCenters = Arrays . asList ( cmd . getOptionValue ( DC _ REPAIR _ OPT . left ) . split ( " , " ) ) ; 
 else if ( localDC )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java 
 index ae6cf67 . . d55566c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropUserStatement . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class DropUserStatement extends AuthenticationStatement 
 state . ensureNotAnonymous ( ) ; 
 
 if ( ! Auth . isExistingUser ( username ) ) 
 - throw new InvalidRequestException ( String . format ( " User % s doesn ' t exists " , username ) ) ; 
 + throw new InvalidRequestException ( String . format ( " User % s doesn ' t exist " , username ) ) ; 
 
 AuthenticatedUser user = state . getUser ( ) ; 
 if ( user ! = null & & user . getName ( ) . equals ( username ) )
