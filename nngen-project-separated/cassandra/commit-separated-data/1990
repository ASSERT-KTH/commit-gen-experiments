BLEU SCORE: 0.07495553473355841

TEST MSG: Remove post - 2 . 1 dead schema migrations and columns
GENERATED MSG: Fix ALTER RENAME post - 5125

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cache / CachingOptions . java b / src / java / org / apache / cassandra / cache / CachingOptions . java <nl> index 6eeaa37 . . f9c7e64 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / CachingOptions . java <nl> + + + b / src / java / org / apache / cassandra / cache / CachingOptions . java <nl> @ @ - 130 , 11 + 130 , 7 @ @ public class CachingOptions <nl> return result ; <nl> } <nl> <nl> - public static boolean isLegacy ( String CachingOptions ) <nl> - { <nl> - return legacyOptions . contains ( CachingOptions . toUpperCase ( ) ) ; <nl> - } <nl> - <nl> + / / FIXME : move to ThriftConversion <nl> public static CachingOptions fromThrift ( String caching , String cellsPerRow ) throws ConfigurationException <nl> { <nl> <nl> @ @ - 153 , 6 + 149 , 7 @ @ public class CachingOptions <nl> return new CachingOptions ( kc , rc ) ; <nl> } <nl> <nl> + / / FIXME : move to ThriftConversion <nl> public String toThriftCaching ( ) <nl> { <nl> if ( rowCache . isEnabled ( ) & & keyCache . isEnabled ( ) ) <nl> @ @ - 164 , 6 + 161 , 7 @ @ public class CachingOptions <nl> return " NONE " ; <nl> } <nl> <nl> + / / FIXME : move to ThriftConversion <nl> public String toThriftCellsPerRow ( ) <nl> { <nl> if ( rowCache . cacheFullPartitions ( ) ) <nl> @ @ - 171 , 7 + 169 , 6 @ @ public class CachingOptions <nl> return String . valueOf ( rowCache . rowsToCache ) ; <nl> } <nl> <nl> - <nl> public static class KeyCache <nl> { <nl> public final Type type ; <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 14271c0 . . 2ed4a95 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 54 , 7 + 54 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> - import static org . apache . cassandra . utils . FBUtilities . fromJsonList ; <nl> import static org . apache . cassandra . utils . FBUtilities . fromJsonMap ; <nl> import static org . apache . cassandra . utils . FBUtilities . json ; <nl> <nl> @ @ - 1251 , 7 + 1250 , 6 @ @ public final class CFMetaData <nl> adder . add ( " min _ compaction _ threshold " , minCompactionThreshold ) ; <nl> adder . add ( " max _ compaction _ threshold " , maxCompactionThreshold ) ; <nl> adder . add ( " bloom _ filter _ fp _ chance " , getBloomFilterFpChance ( ) ) ; <nl> - <nl> adder . add ( " memtable _ flush _ period _ in _ ms " , memtableFlushPeriod ) ; <nl> adder . add ( " caching " , caching . toString ( ) ) ; <nl> adder . add ( " default _ time _ to _ live " , defaultTimeToLive ) ; <nl> @ @ - 1260 , 18 + 1258 , 12 @ @ public final class CFMetaData <nl> adder . add ( " compaction _ strategy _ options " , json ( compactionStrategyOptions ) ) ; <nl> adder . add ( " min _ index _ interval " , minIndexInterval ) ; <nl> adder . add ( " max _ index _ interval " , maxIndexInterval ) ; <nl> - adder . add ( " index _ interval " , null ) ; <nl> adder . add ( " speculative _ retry " , speculativeRetry . toString ( ) ) ; <nl> <nl> for ( Map . Entry < ColumnIdentifier , Long > entry : droppedColumns . entrySet ( ) ) <nl> adder . addMapEntry ( " dropped _ columns " , entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; <nl> <nl> adder . add ( " is _ dense " , isDense ) ; <nl> - <nl> - / / Save the CQL3 metadata " the old way " for compatibility sake <nl> - adder . add ( " key _ aliases " , aliasesToJson ( partitionKeyColumns ) ) ; <nl> - adder . add ( " column _ aliases " , aliasesToJson ( clusteringColumns ) ) ; <nl> - adder . add ( " value _ alias " , compactValueColumn = = null ? null : compactValueColumn . name . toString ( ) ) ; <nl> } <nl> <nl> @ VisibleForTesting <nl> @ @ - 1328 , 11 + 1320 , 9 @ @ public final class CFMetaData <nl> cfm . compressionParameters ( CompressionParameters . create ( fromJsonMap ( result . getString ( " compression _ parameters " ) ) ) ) ; <nl> cfm . compactionStrategyOptions ( fromJsonMap ( result . getString ( " compaction _ strategy _ options " ) ) ) ; <nl> <nl> - / / migrate old index _ interval values to min _ index _ interval , if present <nl> if ( result . has ( " min _ index _ interval " ) ) <nl> cfm . minIndexInterval ( result . getInt ( " min _ index _ interval " ) ) ; <nl> - else if ( result . has ( " index _ interval " ) ) <nl> - cfm . minIndexInterval ( result . getInt ( " index _ interval " ) ) ; <nl> + <nl> if ( result . has ( " max _ index _ interval " ) ) <nl> cfm . maxIndexInterval ( result . getInt ( " max _ index _ interval " ) ) ; <nl> <nl> @ @ - 1341 , 20 + 1331 , 6 @ @ public final class CFMetaData <nl> else <nl> cfm . bloomFilterFpChance ( cfm . getBloomFilterFpChance ( ) ) ; <nl> <nl> - / * <nl> - * The info previously hold by key _ aliases , column _ aliases and value _ alias is now stored in columnMetadata ( because 1 ) this <nl> - * make more sense and 2 ) this allow to store indexing information ) . <nl> - * However , for upgrade sake we need to still be able to read those old values . Moreover , we cannot easily <nl> - * remove those old columns once " converted " to columnMetadata because that would screw up nodes that may <nl> - * not have upgraded . So for now we keep the both info and in sync , even though its redundant . <nl> - * / <nl> - if ( result . has ( " key _ aliases " ) ) <nl> - cfm . addColumnMetadataFromAliases ( aliasesFromStrings ( fromJsonList ( result . getString ( " key _ aliases " ) ) ) , cfm . keyValidator , ColumnDefinition . Kind . PARTITION _ KEY ) ; <nl> - if ( result . has ( " column _ aliases " ) ) <nl> - cfm . addColumnMetadataFromAliases ( aliasesFromStrings ( fromJsonList ( result . getString ( " column _ aliases " ) ) ) , cfm . comparator . asAbstractType ( ) , ColumnDefinition . Kind . CLUSTERING _ COLUMN ) ; <nl> - if ( result . has ( " value _ alias " ) ) <nl> - cfm . addColumnMetadataFromAliases ( Collections . singletonList ( result . getBytes ( " value _ alias " ) ) , cfm . defaultValidator , ColumnDefinition . Kind . COMPACT _ VALUE ) ; <nl> - <nl> if ( result . has ( " dropped _ columns " ) ) <nl> cfm . droppedColumns ( convertDroppedColumns ( result . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) ) ) ; <nl> <nl> @ @ - 1415 , 25 + 1391 , 6 @ @ public final class CFMetaData <nl> return fromSchema ( result ) ; <nl> } <nl> <nl> - private String aliasesToJson ( List < ColumnDefinition > rawAliases ) <nl> - { <nl> - if ( rawAliases = = null ) <nl> - return null ; <nl> - <nl> - List < String > aliases = new ArrayList < > ( rawAliases . size ( ) ) ; <nl> - for ( ColumnDefinition rawAlias : rawAliases ) <nl> - aliases . add ( rawAlias . name . toString ( ) ) ; <nl> - return json ( aliases ) ; <nl> - } <nl> - <nl> - private static List < ByteBuffer > aliasesFromStrings ( List < String > aliases ) <nl> - { <nl> - List < ByteBuffer > rawAliases = new ArrayList < > ( aliases . size ( ) ) ; <nl> - for ( String alias : aliases ) <nl> - rawAliases . add ( UTF8Type . instance . decompose ( alias ) ) ; <nl> - return rawAliases ; <nl> - } <nl> - <nl> private static Map < ColumnIdentifier , Long > convertDroppedColumns ( Map < String , Long > raw ) <nl> { <nl> Map < ColumnIdentifier , Long > converted = Maps . newHashMap ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 7806d5f . . ddf6fa0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import com . google . common . collect . Sets ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . cache . CachingOptions ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> @ @ - 119 , 7 + 118 , 6 @ @ public final class SystemKeyspace <nl> + " bloom _ filter _ fp _ chance double , " <nl> + " caching text , " <nl> + " cf _ id uuid , " / / post - 2 . 1 UUID cfid <nl> - + " column _ aliases text , " <nl> + " comment text , " <nl> + " compaction _ strategy _ class text , " <nl> + " compaction _ strategy _ options text , " <nl> @ @ - 129 , 9 + 127 , 7 @ @ public final class SystemKeyspace <nl> + " default _ validator text , " <nl> + " dropped _ columns map < text , bigint > , " <nl> + " gc _ grace _ seconds int , " <nl> - + " index _ interval int , " <nl> + " is _ dense boolean , " <nl> - + " key _ aliases text , " <nl> + " key _ validator text , " <nl> + " local _ read _ repair _ chance double , " <nl> + " max _ compaction _ threshold int , " <nl> @ @ - 143 , 7 + 139 , 6 @ @ public final class SystemKeyspace <nl> + " speculative _ retry text , " <nl> + " subcomparator text , " <nl> + " type text , " <nl> - + " value _ alias text , " <nl> + " PRIMARY KEY ( ( keyspace _ name ) , columnfamily _ name ) ) " ) <nl> . gcGraceSeconds ( WEEK ) ; <nl> <nl> @ @ - 370 , 16 + 365 , 11 @ @ public final class SystemKeyspace <nl> { <nl> setupVersion ( ) ; <nl> <nl> - migrateIndexInterval ( ) ; <nl> - migrateCachingOption ( ) ; <nl> / / add entries to system schema columnfamilies for the hardcoded system definitions <nl> KSMetaData ksmd = Schema . instance . getKSMetaData ( NAME ) ; <nl> <nl> / / delete old , possibly obsolete entries in schema tables <nl> - / / FIXME : once schema _ functions moves from ' namespace ' to ' keyspace _ name ' , fix this <nl> - List < String > schemaTables = new ArrayList < > ( ALL _ SCHEMA _ TABLES ) ; <nl> - schemaTables . remove ( SCHEMA _ FUNCTIONS _ TABLE ) ; <nl> - for ( String table : schemaTables ) <nl> + for ( String table : ALL _ SCHEMA _ TABLES ) <nl> executeOnceInternal ( String . format ( " DELETE FROM system . % s WHERE keyspace _ name = ? " , table ) , ksmd . name ) ; <nl> <nl> / / ( + 1 to timestamp to make sure we don ' t get shadowed by the tombstones we just added ) <nl> @ @ - 401 , 56 + 391 , 6 @ @ public final class SystemKeyspace <nl> DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) ) ; <nl> } <nl> <nl> - / / TODO : In 3 . 0 , remove this and the index _ interval column from system . schema _ columnfamilies <nl> - / * * Migrates index _ interval values to min _ index _ interval and sets index _ interval to null * / <nl> - private static void migrateIndexInterval ( ) <nl> - { <nl> - for ( UntypedResultSet . Row row : executeOnceInternal ( String . format ( " SELECT * FROM system . % s " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ) ) <nl> - { <nl> - if ( ! row . has ( " index _ interval " ) ) <nl> - continue ; <nl> - <nl> - logger . debug ( " Migrating index _ interval to min _ index _ interval " ) ; <nl> - <nl> - CFMetaData table = CFMetaData . fromSchema ( row ) ; <nl> - String query = String . format ( " SELECT writetime ( type ) FROM system . % s WHERE keyspace _ name = ? AND columnfamily _ name = ? " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ; <nl> - long timestamp = executeOnceInternal ( query , table . ksName , table . cfName ) . one ( ) . getLong ( " writetime ( type ) " ) ; <nl> - try <nl> - { <nl> - table . toSchema ( timestamp ) . apply ( ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - / / shouldn ' t happen <nl> - } <nl> - } <nl> - } <nl> - <nl> - private static void migrateCachingOption ( ) <nl> - { <nl> - for ( UntypedResultSet . Row row : executeOnceInternal ( String . format ( " SELECT * FROM system . % s " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ) ) <nl> - { <nl> - if ( ! row . has ( " caching " ) ) <nl> - continue ; <nl> - <nl> - if ( ! CachingOptions . isLegacy ( row . getString ( " caching " ) ) ) <nl> - continue ; <nl> - try <nl> - { <nl> - CachingOptions caching = CachingOptions . fromString ( row . getString ( " caching " ) ) ; <nl> - CFMetaData table = CFMetaData . fromSchema ( row ) ; <nl> - logger . info ( " Migrating caching option { } to { } for { } . { } " , row . getString ( " caching " ) , caching . toString ( ) , table . ksName , table . cfName ) ; <nl> - String query = String . format ( " SELECT writetime ( type ) FROM system . % s WHERE keyspace _ name = ? AND columnfamily _ name = ? " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ; <nl> - long timestamp = executeOnceInternal ( query , table . ksName , table . cfName ) . one ( ) . getLong ( " writetime ( type ) " ) ; <nl> - table . toSchema ( timestamp ) . apply ( ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - / / shouldn ' t happen <nl> - } <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Write compaction log , except columfamilies under system keyspace . <nl> *
NEAREST DIFF (one line): diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 958b9ae . . 0e631ea 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1239 , 6 + 1239 , 8 @ @ syntax _ rules + = r ' ' ' <nl> | " ADD " newcol = < cident > < storageType > <nl> | " DROP " existcol = < cident > <nl> | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * <nl> + | " RENAME " existcol = < cident > " TO " newcol = < cident > <nl> + ( " AND " existcol = < cident > " TO " newcol = < cident > ) * <nl> ; <nl> ' ' ' <nl> <nl> diff - - git a / pylib / cqlshlib / helptopics . py b / pylib / cqlshlib / helptopics . py <nl> index c9dae31 . . cdbb8f4 100644 <nl> - - - a / pylib / cqlshlib / helptopics . py <nl> + + + b / pylib / cqlshlib / helptopics . py <nl> @ @ - 902 , 8 + 902 , 37 @ @ class CQL3HelpTopics ( CQLHelpTopics ) : <nl> print " HELP CREATE _ USER ; " <nl> <nl> def help _ alter ( self ) : <nl> - super ( CQL3HelpTopics , self ) . help _ alter ( ) <nl> - print " HELP ALTER _ USER ; " <nl> + print " " " <nl> + ALTER TABLE < tablename > ALTER < columnname > TYPE < type > ; <nl> + ALTER TABLE < tablename > ADD < columnname > < type > ; <nl> + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > <nl> + [ AND < columnname > TO < columnname > ] <nl> + ALTER TABLE < tablename > WITH < optionname > = < val > [ AND < optionname > = < val > [ . . . ] ] ; <nl> + <nl> + An ALTER statement is used to manipulate table metadata . It allows you <nl> + to add new typed columns , drop existing columns , change the data <nl> + storage type of existing columns , or change table properties . <nl> + No results are returned . <nl> + <nl> + See one of the following for more information : <nl> + <nl> + HELP ALTER _ ALTER ; <nl> + HELP ALTER _ ADD ; <nl> + HELP ALTER _ DROP ; <nl> + HELP ALTER _ RENAME ; <nl> + HELP ALTER _ WITH ; <nl> + " " " <nl> + <nl> + def help _ alter _ rename ( self ) : <nl> + print " " " <nl> + ALTER TABLE : renaming a column <nl> + <nl> + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > <nl> + [ AND < columnname > TO < columnname > ] <nl> + <nl> + The ALTER TABLE . . . RENAME variant renames a typed column in a column <nl> + family . <nl> + " " " <nl> <nl> def help _ drop ( self ) : <nl> super ( CQL3HelpTopics , self ) . help _ drop ( )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cache / CachingOptions . java b / src / java / org / apache / cassandra / cache / CachingOptions . java 
 index 6eeaa37 . . f9c7e64 100644 
 - - - a / src / java / org / apache / cassandra / cache / CachingOptions . java 
 + + + b / src / java / org / apache / cassandra / cache / CachingOptions . java 
 @ @ - 130 , 11 + 130 , 7 @ @ public class CachingOptions 
 return result ; 
 } 
 
 - public static boolean isLegacy ( String CachingOptions ) 
 - { 
 - return legacyOptions . contains ( CachingOptions . toUpperCase ( ) ) ; 
 - } 
 - 
 + / / FIXME : move to ThriftConversion 
 public static CachingOptions fromThrift ( String caching , String cellsPerRow ) throws ConfigurationException 
 { 
 
 @ @ - 153 , 6 + 149 , 7 @ @ public class CachingOptions 
 return new CachingOptions ( kc , rc ) ; 
 } 
 
 + / / FIXME : move to ThriftConversion 
 public String toThriftCaching ( ) 
 { 
 if ( rowCache . isEnabled ( ) & & keyCache . isEnabled ( ) ) 
 @ @ - 164 , 6 + 161 , 7 @ @ public class CachingOptions 
 return " NONE " ; 
 } 
 
 + / / FIXME : move to ThriftConversion 
 public String toThriftCellsPerRow ( ) 
 { 
 if ( rowCache . cacheFullPartitions ( ) ) 
 @ @ - 171 , 7 + 169 , 6 @ @ public class CachingOptions 
 return String . valueOf ( rowCache . rowsToCache ) ; 
 } 
 
 - 
 public static class KeyCache 
 { 
 public final Type type ; 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 14271c0 . . 2ed4a95 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 54 , 7 + 54 , 6 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 
 - import static org . apache . cassandra . utils . FBUtilities . fromJsonList ; 
 import static org . apache . cassandra . utils . FBUtilities . fromJsonMap ; 
 import static org . apache . cassandra . utils . FBUtilities . json ; 
 
 @ @ - 1251 , 7 + 1250 , 6 @ @ public final class CFMetaData 
 adder . add ( " min _ compaction _ threshold " , minCompactionThreshold ) ; 
 adder . add ( " max _ compaction _ threshold " , maxCompactionThreshold ) ; 
 adder . add ( " bloom _ filter _ fp _ chance " , getBloomFilterFpChance ( ) ) ; 
 - 
 adder . add ( " memtable _ flush _ period _ in _ ms " , memtableFlushPeriod ) ; 
 adder . add ( " caching " , caching . toString ( ) ) ; 
 adder . add ( " default _ time _ to _ live " , defaultTimeToLive ) ; 
 @ @ - 1260 , 18 + 1258 , 12 @ @ public final class CFMetaData 
 adder . add ( " compaction _ strategy _ options " , json ( compactionStrategyOptions ) ) ; 
 adder . add ( " min _ index _ interval " , minIndexInterval ) ; 
 adder . add ( " max _ index _ interval " , maxIndexInterval ) ; 
 - adder . add ( " index _ interval " , null ) ; 
 adder . add ( " speculative _ retry " , speculativeRetry . toString ( ) ) ; 
 
 for ( Map . Entry < ColumnIdentifier , Long > entry : droppedColumns . entrySet ( ) ) 
 adder . addMapEntry ( " dropped _ columns " , entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; 
 
 adder . add ( " is _ dense " , isDense ) ; 
 - 
 - / / Save the CQL3 metadata " the old way " for compatibility sake 
 - adder . add ( " key _ aliases " , aliasesToJson ( partitionKeyColumns ) ) ; 
 - adder . add ( " column _ aliases " , aliasesToJson ( clusteringColumns ) ) ; 
 - adder . add ( " value _ alias " , compactValueColumn = = null ? null : compactValueColumn . name . toString ( ) ) ; 
 } 
 
 @ VisibleForTesting 
 @ @ - 1328 , 11 + 1320 , 9 @ @ public final class CFMetaData 
 cfm . compressionParameters ( CompressionParameters . create ( fromJsonMap ( result . getString ( " compression _ parameters " ) ) ) ) ; 
 cfm . compactionStrategyOptions ( fromJsonMap ( result . getString ( " compaction _ strategy _ options " ) ) ) ; 
 
 - / / migrate old index _ interval values to min _ index _ interval , if present 
 if ( result . has ( " min _ index _ interval " ) ) 
 cfm . minIndexInterval ( result . getInt ( " min _ index _ interval " ) ) ; 
 - else if ( result . has ( " index _ interval " ) ) 
 - cfm . minIndexInterval ( result . getInt ( " index _ interval " ) ) ; 
 + 
 if ( result . has ( " max _ index _ interval " ) ) 
 cfm . maxIndexInterval ( result . getInt ( " max _ index _ interval " ) ) ; 
 
 @ @ - 1341 , 20 + 1331 , 6 @ @ public final class CFMetaData 
 else 
 cfm . bloomFilterFpChance ( cfm . getBloomFilterFpChance ( ) ) ; 
 
 - / * 
 - * The info previously hold by key _ aliases , column _ aliases and value _ alias is now stored in columnMetadata ( because 1 ) this 
 - * make more sense and 2 ) this allow to store indexing information ) . 
 - * However , for upgrade sake we need to still be able to read those old values . Moreover , we cannot easily 
 - * remove those old columns once " converted " to columnMetadata because that would screw up nodes that may 
 - * not have upgraded . So for now we keep the both info and in sync , even though its redundant . 
 - * / 
 - if ( result . has ( " key _ aliases " ) ) 
 - cfm . addColumnMetadataFromAliases ( aliasesFromStrings ( fromJsonList ( result . getString ( " key _ aliases " ) ) ) , cfm . keyValidator , ColumnDefinition . Kind . PARTITION _ KEY ) ; 
 - if ( result . has ( " column _ aliases " ) ) 
 - cfm . addColumnMetadataFromAliases ( aliasesFromStrings ( fromJsonList ( result . getString ( " column _ aliases " ) ) ) , cfm . comparator . asAbstractType ( ) , ColumnDefinition . Kind . CLUSTERING _ COLUMN ) ; 
 - if ( result . has ( " value _ alias " ) ) 
 - cfm . addColumnMetadataFromAliases ( Collections . singletonList ( result . getBytes ( " value _ alias " ) ) , cfm . defaultValidator , ColumnDefinition . Kind . COMPACT _ VALUE ) ; 
 - 
 if ( result . has ( " dropped _ columns " ) ) 
 cfm . droppedColumns ( convertDroppedColumns ( result . getMap ( " dropped _ columns " , UTF8Type . instance , LongType . instance ) ) ) ; 
 
 @ @ - 1415 , 25 + 1391 , 6 @ @ public final class CFMetaData 
 return fromSchema ( result ) ; 
 } 
 
 - private String aliasesToJson ( List < ColumnDefinition > rawAliases ) 
 - { 
 - if ( rawAliases = = null ) 
 - return null ; 
 - 
 - List < String > aliases = new ArrayList < > ( rawAliases . size ( ) ) ; 
 - for ( ColumnDefinition rawAlias : rawAliases ) 
 - aliases . add ( rawAlias . name . toString ( ) ) ; 
 - return json ( aliases ) ; 
 - } 
 - 
 - private static List < ByteBuffer > aliasesFromStrings ( List < String > aliases ) 
 - { 
 - List < ByteBuffer > rawAliases = new ArrayList < > ( aliases . size ( ) ) ; 
 - for ( String alias : aliases ) 
 - rawAliases . add ( UTF8Type . instance . decompose ( alias ) ) ; 
 - return rawAliases ; 
 - } 
 - 
 private static Map < ColumnIdentifier , Long > convertDroppedColumns ( Map < String , Long > raw ) 
 { 
 Map < ColumnIdentifier , Long > converted = Maps . newHashMap ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 7806d5f . . ddf6fa0 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import com . google . common . collect . Sets ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . cache . CachingOptions ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 @ @ - 119 , 7 + 118 , 6 @ @ public final class SystemKeyspace 
 + " bloom _ filter _ fp _ chance double , " 
 + " caching text , " 
 + " cf _ id uuid , " / / post - 2 . 1 UUID cfid 
 - + " column _ aliases text , " 
 + " comment text , " 
 + " compaction _ strategy _ class text , " 
 + " compaction _ strategy _ options text , " 
 @ @ - 129 , 9 + 127 , 7 @ @ public final class SystemKeyspace 
 + " default _ validator text , " 
 + " dropped _ columns map < text , bigint > , " 
 + " gc _ grace _ seconds int , " 
 - + " index _ interval int , " 
 + " is _ dense boolean , " 
 - + " key _ aliases text , " 
 + " key _ validator text , " 
 + " local _ read _ repair _ chance double , " 
 + " max _ compaction _ threshold int , " 
 @ @ - 143 , 7 + 139 , 6 @ @ public final class SystemKeyspace 
 + " speculative _ retry text , " 
 + " subcomparator text , " 
 + " type text , " 
 - + " value _ alias text , " 
 + " PRIMARY KEY ( ( keyspace _ name ) , columnfamily _ name ) ) " ) 
 . gcGraceSeconds ( WEEK ) ; 
 
 @ @ - 370 , 16 + 365 , 11 @ @ public final class SystemKeyspace 
 { 
 setupVersion ( ) ; 
 
 - migrateIndexInterval ( ) ; 
 - migrateCachingOption ( ) ; 
 / / add entries to system schema columnfamilies for the hardcoded system definitions 
 KSMetaData ksmd = Schema . instance . getKSMetaData ( NAME ) ; 
 
 / / delete old , possibly obsolete entries in schema tables 
 - / / FIXME : once schema _ functions moves from ' namespace ' to ' keyspace _ name ' , fix this 
 - List < String > schemaTables = new ArrayList < > ( ALL _ SCHEMA _ TABLES ) ; 
 - schemaTables . remove ( SCHEMA _ FUNCTIONS _ TABLE ) ; 
 - for ( String table : schemaTables ) 
 + for ( String table : ALL _ SCHEMA _ TABLES ) 
 executeOnceInternal ( String . format ( " DELETE FROM system . % s WHERE keyspace _ name = ? " , table ) , ksmd . name ) ; 
 
 / / ( + 1 to timestamp to make sure we don ' t get shadowed by the tombstones we just added ) 
 @ @ - 401 , 56 + 391 , 6 @ @ public final class SystemKeyspace 
 DatabaseDescriptor . getPartitioner ( ) . getClass ( ) . getName ( ) ) ; 
 } 
 
 - / / TODO : In 3 . 0 , remove this and the index _ interval column from system . schema _ columnfamilies 
 - / * * Migrates index _ interval values to min _ index _ interval and sets index _ interval to null * / 
 - private static void migrateIndexInterval ( ) 
 - { 
 - for ( UntypedResultSet . Row row : executeOnceInternal ( String . format ( " SELECT * FROM system . % s " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ) ) 
 - { 
 - if ( ! row . has ( " index _ interval " ) ) 
 - continue ; 
 - 
 - logger . debug ( " Migrating index _ interval to min _ index _ interval " ) ; 
 - 
 - CFMetaData table = CFMetaData . fromSchema ( row ) ; 
 - String query = String . format ( " SELECT writetime ( type ) FROM system . % s WHERE keyspace _ name = ? AND columnfamily _ name = ? " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ; 
 - long timestamp = executeOnceInternal ( query , table . ksName , table . cfName ) . one ( ) . getLong ( " writetime ( type ) " ) ; 
 - try 
 - { 
 - table . toSchema ( timestamp ) . apply ( ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - / / shouldn ' t happen 
 - } 
 - } 
 - } 
 - 
 - private static void migrateCachingOption ( ) 
 - { 
 - for ( UntypedResultSet . Row row : executeOnceInternal ( String . format ( " SELECT * FROM system . % s " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ) ) 
 - { 
 - if ( ! row . has ( " caching " ) ) 
 - continue ; 
 - 
 - if ( ! CachingOptions . isLegacy ( row . getString ( " caching " ) ) ) 
 - continue ; 
 - try 
 - { 
 - CachingOptions caching = CachingOptions . fromString ( row . getString ( " caching " ) ) ; 
 - CFMetaData table = CFMetaData . fromSchema ( row ) ; 
 - logger . info ( " Migrating caching option { } to { } for { } . { } " , row . getString ( " caching " ) , caching . toString ( ) , table . ksName , table . cfName ) ; 
 - String query = String . format ( " SELECT writetime ( type ) FROM system . % s WHERE keyspace _ name = ? AND columnfamily _ name = ? " , SCHEMA _ COLUMNFAMILIES _ TABLE ) ; 
 - long timestamp = executeOnceInternal ( query , table . ksName , table . cfName ) . one ( ) . getLong ( " writetime ( type ) " ) ; 
 - table . toSchema ( timestamp ) . apply ( ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - / / shouldn ' t happen 
 - } 
 - } 
 - } 
 - 
 / * * 
 * Write compaction log , except columfamilies under system keyspace . 
 *

NEAREST DIFF:
diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 958b9ae . . 0e631ea 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1239 , 6 + 1239 , 8 @ @ syntax _ rules + = r ' ' ' 
 | " ADD " newcol = < cident > < storageType > 
 | " DROP " existcol = < cident > 
 | " WITH " < cfamProperty > ( " AND " < cfamProperty > ) * 
 + | " RENAME " existcol = < cident > " TO " newcol = < cident > 
 + ( " AND " existcol = < cident > " TO " newcol = < cident > ) * 
 ; 
 ' ' ' 
 
 diff - - git a / pylib / cqlshlib / helptopics . py b / pylib / cqlshlib / helptopics . py 
 index c9dae31 . . cdbb8f4 100644 
 - - - a / pylib / cqlshlib / helptopics . py 
 + + + b / pylib / cqlshlib / helptopics . py 
 @ @ - 902 , 8 + 902 , 37 @ @ class CQL3HelpTopics ( CQLHelpTopics ) : 
 print " HELP CREATE _ USER ; " 
 
 def help _ alter ( self ) : 
 - super ( CQL3HelpTopics , self ) . help _ alter ( ) 
 - print " HELP ALTER _ USER ; " 
 + print " " " 
 + ALTER TABLE < tablename > ALTER < columnname > TYPE < type > ; 
 + ALTER TABLE < tablename > ADD < columnname > < type > ; 
 + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > 
 + [ AND < columnname > TO < columnname > ] 
 + ALTER TABLE < tablename > WITH < optionname > = < val > [ AND < optionname > = < val > [ . . . ] ] ; 
 + 
 + An ALTER statement is used to manipulate table metadata . It allows you 
 + to add new typed columns , drop existing columns , change the data 
 + storage type of existing columns , or change table properties . 
 + No results are returned . 
 + 
 + See one of the following for more information : 
 + 
 + HELP ALTER _ ALTER ; 
 + HELP ALTER _ ADD ; 
 + HELP ALTER _ DROP ; 
 + HELP ALTER _ RENAME ; 
 + HELP ALTER _ WITH ; 
 + " " " 
 + 
 + def help _ alter _ rename ( self ) : 
 + print " " " 
 + ALTER TABLE : renaming a column 
 + 
 + ALTER TABLE < tablename > RENAME < columnname > TO < columnname > 
 + [ AND < columnname > TO < columnname > ] 
 + 
 + The ALTER TABLE . . . RENAME variant renames a typed column in a column 
 + family . 
 + " " " 
 
 def help _ drop ( self ) : 
 super ( CQL3HelpTopics , self ) . help _ drop ( )
