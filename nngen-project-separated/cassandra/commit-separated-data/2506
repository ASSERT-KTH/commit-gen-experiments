BLEU SCORE: 0.05522397783539471

TEST MSG: don ' t log retry policy so often
GENERATED MSG: add CF name to log message

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index bfd3b08 . . 3fac640 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 290 , 12 + 290 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + logger . debug ( " retryPolicy for { } is { } " , name , this . metadata . getSpeculativeRetry ( ) ) ; <nl> StorageService . optionalTasks . scheduleWithFixedDelay ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> SpeculativeRetry retryPolicy = ColumnFamilyStore . this . metadata . getSpeculativeRetry ( ) ; <nl> - logger . debug ( " retryPolicy for { } is { } " , name , retryPolicy . value ) ; <nl> switch ( retryPolicy . type ) <nl> { <nl> case PERCENTILE :
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ca559b1 . . 6a695e1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 11 <nl> + * lock access to TM . endpointToHostIdMap ( CASSANDRA - 6103 ) <nl> * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) <nl> * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) <nl> * Avoid sending Truncate command to fat clients ( CASSANDRA - 6088 ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 1f6682b . . 7ad711f 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 221 , 43 + 221 , 76 @ @ public class TokenMetadata <nl> assert hostId ! = null ; <nl> assert endpoint ! = null ; <nl> <nl> - InetAddress storedEp = endpointToHostIdMap . inverse ( ) . get ( hostId ) ; <nl> - if ( storedEp ! = null ) <nl> + lock . writeLock ( ) . lock ( ) ; <nl> + try <nl> { <nl> - if ( ! storedEp . equals ( endpoint ) & & ( FailureDetector . instance . isAlive ( storedEp ) ) ) <nl> + InetAddress storedEp = endpointToHostIdMap . inverse ( ) . get ( hostId ) ; <nl> + if ( storedEp ! = null ) <nl> { <nl> - throw new RuntimeException ( String . format ( " Host ID collision between active endpoint % s and % s ( id = % s ) " , <nl> - storedEp , <nl> - endpoint , <nl> - hostId ) ) ; <nl> + if ( ! storedEp . equals ( endpoint ) & & ( FailureDetector . instance . isAlive ( storedEp ) ) ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Host ID collision between active endpoint % s and % s ( id = % s ) " , <nl> + storedEp , <nl> + endpoint , <nl> + hostId ) ) ; <nl> + } <nl> } <nl> + <nl> + UUID storedId = endpointToHostIdMap . get ( endpoint ) ; <nl> + if ( ( storedId ! = null ) & & ( ! storedId . equals ( hostId ) ) ) <nl> + logger . warn ( " Changing { } ' s host ID from { } to { } " , new Object [ ] { endpoint , storedId , hostId } ) ; <nl> + <nl> + endpointToHostIdMap . forcePut ( endpoint , hostId ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . writeLock ( ) . unlock ( ) ; <nl> } <nl> <nl> - UUID storedId = endpointToHostIdMap . get ( endpoint ) ; <nl> - if ( ( storedId ! = null ) & & ( ! storedId . equals ( hostId ) ) ) <nl> - logger . warn ( " Changing { } ' s host ID from { } to { } " , new Object [ ] { endpoint , storedId , hostId } ) ; <nl> - <nl> - endpointToHostIdMap . forcePut ( endpoint , hostId ) ; <nl> } <nl> <nl> / * * Return the unique host ID for an end - point . * / <nl> public UUID getHostId ( InetAddress endpoint ) <nl> { <nl> - return endpointToHostIdMap . get ( endpoint ) ; <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + return endpointToHostIdMap . get ( endpoint ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> } <nl> <nl> / * * Return the end - point for a unique host ID * / <nl> public InetAddress getEndpointForHostId ( UUID hostId ) <nl> { <nl> - return endpointToHostIdMap . inverse ( ) . get ( hostId ) ; <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + return endpointToHostIdMap . inverse ( ) . get ( hostId ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> } <nl> <nl> / * * @ return a copy of the endpoint - to - id map for read - only operations * / <nl> public Map < InetAddress , UUID > getEndpointToHostIdMapForReading ( ) <nl> { <nl> - Map < InetAddress , UUID > readMap = new HashMap < InetAddress , UUID > ( ) ; <nl> - readMap . putAll ( endpointToHostIdMap ) ; <nl> - return readMap ; <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + Map < InetAddress , UUID > readMap = new HashMap < InetAddress , UUID > ( ) ; <nl> + readMap . putAll ( endpointToHostIdMap ) ; <nl> + return readMap ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> } <nl> <nl> @ Deprecated <nl> @ @ - 725 , 13 + 758 , 29 @ @ public class TokenMetadata <nl> <nl> public Set < InetAddress > getAllEndpoints ( ) <nl> { <nl> - return endpointToHostIdMap . keySet ( ) ; <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + return new HashSet < > ( endpointToHostIdMap . keySet ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> } <nl> <nl> / * * caller should not modify leavingEndpoints * / <nl> public Set < InetAddress > getLeavingEndpoints ( ) <nl> { <nl> - return leavingEndpoints ; <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + return new HashSet < > ( leavingEndpoints ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 740 , 7 + 789 , 15 @ @ public class TokenMetadata <nl> * / <nl> public Set < Pair < Token , InetAddress > > getMovingEndpoints ( ) <nl> { <nl> - return movingEndpoints ; <nl> + lock . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + return new HashSet < > ( movingEndpoints ) ; <nl> + } <nl> + finally <nl> + { <nl> + lock . readLock ( ) . unlock ( ) ; <nl> + } <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index bfd3b08 . . 3fac640 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 290 , 12 + 290 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + logger . debug ( " retryPolicy for { } is { } " , name , this . metadata . getSpeculativeRetry ( ) ) ; 
 StorageService . optionalTasks . scheduleWithFixedDelay ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 SpeculativeRetry retryPolicy = ColumnFamilyStore . this . metadata . getSpeculativeRetry ( ) ; 
 - logger . debug ( " retryPolicy for { } is { } " , name , retryPolicy . value ) ; 
 switch ( retryPolicy . type ) 
 { 
 case PERCENTILE :

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ca559b1 . . 6a695e1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 11 
 + * lock access to TM . endpointToHostIdMap ( CASSANDRA - 6103 ) 
 * Allow estimated memtable size to exceed slab allocator size ( CASSANDRA - 6078 ) 
 * Start MeteredFlusher earlier to prevent OOM during CL replay ( CASSANDRA - 6087 ) 
 * Avoid sending Truncate command to fat clients ( CASSANDRA - 6088 ) 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 1f6682b . . 7ad711f 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 221 , 43 + 221 , 76 @ @ public class TokenMetadata 
 assert hostId ! = null ; 
 assert endpoint ! = null ; 
 
 - InetAddress storedEp = endpointToHostIdMap . inverse ( ) . get ( hostId ) ; 
 - if ( storedEp ! = null ) 
 + lock . writeLock ( ) . lock ( ) ; 
 + try 
 { 
 - if ( ! storedEp . equals ( endpoint ) & & ( FailureDetector . instance . isAlive ( storedEp ) ) ) 
 + InetAddress storedEp = endpointToHostIdMap . inverse ( ) . get ( hostId ) ; 
 + if ( storedEp ! = null ) 
 { 
 - throw new RuntimeException ( String . format ( " Host ID collision between active endpoint % s and % s ( id = % s ) " , 
 - storedEp , 
 - endpoint , 
 - hostId ) ) ; 
 + if ( ! storedEp . equals ( endpoint ) & & ( FailureDetector . instance . isAlive ( storedEp ) ) ) 
 + { 
 + throw new RuntimeException ( String . format ( " Host ID collision between active endpoint % s and % s ( id = % s ) " , 
 + storedEp , 
 + endpoint , 
 + hostId ) ) ; 
 + } 
 } 
 + 
 + UUID storedId = endpointToHostIdMap . get ( endpoint ) ; 
 + if ( ( storedId ! = null ) & & ( ! storedId . equals ( hostId ) ) ) 
 + logger . warn ( " Changing { } ' s host ID from { } to { } " , new Object [ ] { endpoint , storedId , hostId } ) ; 
 + 
 + endpointToHostIdMap . forcePut ( endpoint , hostId ) ; 
 + } 
 + finally 
 + { 
 + lock . writeLock ( ) . unlock ( ) ; 
 } 
 
 - UUID storedId = endpointToHostIdMap . get ( endpoint ) ; 
 - if ( ( storedId ! = null ) & & ( ! storedId . equals ( hostId ) ) ) 
 - logger . warn ( " Changing { } ' s host ID from { } to { } " , new Object [ ] { endpoint , storedId , hostId } ) ; 
 - 
 - endpointToHostIdMap . forcePut ( endpoint , hostId ) ; 
 } 
 
 / * * Return the unique host ID for an end - point . * / 
 public UUID getHostId ( InetAddress endpoint ) 
 { 
 - return endpointToHostIdMap . get ( endpoint ) ; 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + return endpointToHostIdMap . get ( endpoint ) ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 } 
 
 / * * Return the end - point for a unique host ID * / 
 public InetAddress getEndpointForHostId ( UUID hostId ) 
 { 
 - return endpointToHostIdMap . inverse ( ) . get ( hostId ) ; 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + return endpointToHostIdMap . inverse ( ) . get ( hostId ) ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 } 
 
 / * * @ return a copy of the endpoint - to - id map for read - only operations * / 
 public Map < InetAddress , UUID > getEndpointToHostIdMapForReading ( ) 
 { 
 - Map < InetAddress , UUID > readMap = new HashMap < InetAddress , UUID > ( ) ; 
 - readMap . putAll ( endpointToHostIdMap ) ; 
 - return readMap ; 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + Map < InetAddress , UUID > readMap = new HashMap < InetAddress , UUID > ( ) ; 
 + readMap . putAll ( endpointToHostIdMap ) ; 
 + return readMap ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 } 
 
 @ Deprecated 
 @ @ - 725 , 13 + 758 , 29 @ @ public class TokenMetadata 
 
 public Set < InetAddress > getAllEndpoints ( ) 
 { 
 - return endpointToHostIdMap . keySet ( ) ; 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + return new HashSet < > ( endpointToHostIdMap . keySet ( ) ) ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 } 
 
 / * * caller should not modify leavingEndpoints * / 
 public Set < InetAddress > getLeavingEndpoints ( ) 
 { 
 - return leavingEndpoints ; 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + return new HashSet < > ( leavingEndpoints ) ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 } 
 
 / * * 
 @ @ - 740 , 7 + 789 , 15 @ @ public class TokenMetadata 
 * / 
 public Set < Pair < Token , InetAddress > > getMovingEndpoints ( ) 
 { 
 - return movingEndpoints ; 
 + lock . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + return new HashSet < > ( movingEndpoints ) ; 
 + } 
 + finally 
 + { 
 + lock . readLock ( ) . unlock ( ) ; 
 + } 
 } 
 
 / * *
