BLEU SCORE: 0.041961149062965476

TEST MSG: Fix PRSI handling of CQL3 row markers for row cleanup
GENERATED MSG: Fix composite index bug

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6c2ba2c . . 0ac1fb6 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 10 <nl> + * Fix PRSI handling of CQL3 row markers for row cleanup ( CASSANDRA - 7787 ) <nl> * ( cqlsh ) enable CTRL - R history search with libedit ( CASSANDRA - 7577 ) <nl> * Fix dropping collection when it ' s the last regular column ( CASSANDRA - 7744 ) <nl> * Properly reject operations on list index with conditions ( CASSANDRA - 7499 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index a15464a . . a54882d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 454 , 22 + 454 , 19 @ @ public class SecondaryIndexManager <nl> <nl> for ( Column column : indexedColumnsInRow ) <nl> { <nl> - ColumnDefinition cDef = baseCfs . metadata . getColumnDefinitionFromColumnName ( column . name ( ) ) ; <nl> - SecondaryIndex index = indexesByColumn . get ( cDef . name ) ; <nl> - if ( index = = null ) <nl> - continue ; <nl> - <nl> - if ( index instanceof PerRowSecondaryIndex ) <nl> - { <nl> - if ( cleanedRowLevelIndexes = = null ) <nl> - cleanedRowLevelIndexes = new HashSet < > ( ) ; <nl> - <nl> - if ( cleanedRowLevelIndexes . add ( index . getClass ( ) ) ) <nl> - ( ( PerRowSecondaryIndex ) index ) . delete ( key ) ; <nl> - } <nl> - else <nl> + for ( SecondaryIndex index : indexFor ( column . name ( ) ) ) <nl> { <nl> - ( ( PerColumnSecondaryIndex ) index ) . delete ( key . key , column ) ; <nl> + if ( index instanceof PerRowSecondaryIndex ) <nl> + { <nl> + if ( cleanedRowLevelIndexes = = null ) <nl> + cleanedRowLevelIndexes = new HashSet < > ( ) ; <nl> + if ( cleanedRowLevelIndexes . add ( index . getClass ( ) ) ) <nl> + ( ( PerRowSecondaryIndex ) index ) . delete ( key ) ; <nl> + } <nl> + else <nl> + { <nl> + ( ( PerColumnSecondaryIndex ) index ) . delete ( key . key , column ) ; <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e69298f . . 5f5ea89 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> * fix compositeType . { get / from } String methods ( CASSANDRA - 4842 ) <nl> * ( CQL ) fix CREATE COLUMNFAMILY permissions check ( CASSANDRA - 4864 ) <nl> * Fix DynamicCompositeType same type comparison ( CASSANDRA - 4711 ) <nl> + * Fix duplicate SSTable reference when stream session failed ( CASSANDRA - 3306 ) <nl> <nl> <nl> 1 . 1 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java <nl> index 915d3bc . . bfb046fc 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java <nl> @ @ - 31 , 9 + 31 , 11 @ @ import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . compaction . CompactionController ; <nl> import org . apache . cassandra . db . compaction . PrecompactedRow ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . io . IColumnSerializer ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> + import org . apache . cassandra . net . OutboundTcpConnection ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . BytesReadTracker ; <nl> @ @ - 60 , 6 + 62 , 16 @ @ public class IncomingStreamReader <nl> this . socket = socket ; <nl> InetAddress host = header . broadcastAddress ! = null ? header . broadcastAddress <nl> : ( ( InetSocketAddress ) socket . getRemoteSocketAddress ( ) ) . getAddress ( ) ; <nl> + if ( header . pendingFiles . isEmpty ( ) & & header . file ! = null ) <nl> + { <nl> + / / StreamInSession should be created already when receiving 2nd and after files <nl> + if ( ! StreamInSession . hasSession ( host , header . sessionId ) ) <nl> + { <nl> + StreamReply reply = new StreamReply ( " " , header . sessionId , StreamReply . Status . SESSION _ FAILURE ) ; <nl> + OutboundTcpConnection . write ( reply . getMessage ( Gossiper . instance . getVersion ( host ) ) , Long . toString ( header . sessionId ) , new DataOutputStream ( socket . getOutputStream ( ) ) ) ; <nl> + throw new IOException ( " Session " + header . sessionId + " already closed . " ) ; <nl> + } <nl> + } <nl> session = StreamInSession . get ( host , header . sessionId ) ; <nl> session . setSocket ( socket ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> index e123714 . . e1bbe41 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> @ @ - 102 , 6 + 102 , 12 @ @ public class StreamInSession extends AbstractStreamSession <nl> return session ; <nl> } <nl> <nl> + public static boolean hasSession ( InetAddress host , long sessionId ) <nl> + { <nl> + Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , sessionId ) ; <nl> + return sessions . get ( context ) ! = null ; <nl> + } <nl> + <nl> public void setCurrentFile ( PendingFile file ) <nl> { <nl> this . current = file ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6c2ba2c . . 0ac1fb6 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 10 
 + * Fix PRSI handling of CQL3 row markers for row cleanup ( CASSANDRA - 7787 ) 
 * ( cqlsh ) enable CTRL - R history search with libedit ( CASSANDRA - 7577 ) 
 * Fix dropping collection when it ' s the last regular column ( CASSANDRA - 7744 ) 
 * Properly reject operations on list index with conditions ( CASSANDRA - 7499 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index a15464a . . a54882d 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 454 , 22 + 454 , 19 @ @ public class SecondaryIndexManager 
 
 for ( Column column : indexedColumnsInRow ) 
 { 
 - ColumnDefinition cDef = baseCfs . metadata . getColumnDefinitionFromColumnName ( column . name ( ) ) ; 
 - SecondaryIndex index = indexesByColumn . get ( cDef . name ) ; 
 - if ( index = = null ) 
 - continue ; 
 - 
 - if ( index instanceof PerRowSecondaryIndex ) 
 - { 
 - if ( cleanedRowLevelIndexes = = null ) 
 - cleanedRowLevelIndexes = new HashSet < > ( ) ; 
 - 
 - if ( cleanedRowLevelIndexes . add ( index . getClass ( ) ) ) 
 - ( ( PerRowSecondaryIndex ) index ) . delete ( key ) ; 
 - } 
 - else 
 + for ( SecondaryIndex index : indexFor ( column . name ( ) ) ) 
 { 
 - ( ( PerColumnSecondaryIndex ) index ) . delete ( key . key , column ) ; 
 + if ( index instanceof PerRowSecondaryIndex ) 
 + { 
 + if ( cleanedRowLevelIndexes = = null ) 
 + cleanedRowLevelIndexes = new HashSet < > ( ) ; 
 + if ( cleanedRowLevelIndexes . add ( index . getClass ( ) ) ) 
 + ( ( PerRowSecondaryIndex ) index ) . delete ( key ) ; 
 + } 
 + else 
 + { 
 + ( ( PerColumnSecondaryIndex ) index ) . delete ( key . key , column ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e69298f . . 5f5ea89 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 * fix compositeType . { get / from } String methods ( CASSANDRA - 4842 ) 
 * ( CQL ) fix CREATE COLUMNFAMILY permissions check ( CASSANDRA - 4864 ) 
 * Fix DynamicCompositeType same type comparison ( CASSANDRA - 4711 ) 
 + * Fix duplicate SSTable reference when stream session failed ( CASSANDRA - 3306 ) 
 
 
 1 . 1 . 6 
 diff - - git a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java 
 index 915d3bc . . bfb046fc 100644 
 - - - a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java 
 + + + b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java 
 @ @ - 31 , 9 + 31 , 11 @ @ import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . compaction . CompactionController ; 
 import org . apache . cassandra . db . compaction . PrecompactedRow ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . io . IColumnSerializer ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 + import org . apache . cassandra . net . OutboundTcpConnection ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . BytesReadTracker ; 
 @ @ - 60 , 6 + 62 , 16 @ @ public class IncomingStreamReader 
 this . socket = socket ; 
 InetAddress host = header . broadcastAddress ! = null ? header . broadcastAddress 
 : ( ( InetSocketAddress ) socket . getRemoteSocketAddress ( ) ) . getAddress ( ) ; 
 + if ( header . pendingFiles . isEmpty ( ) & & header . file ! = null ) 
 + { 
 + / / StreamInSession should be created already when receiving 2nd and after files 
 + if ( ! StreamInSession . hasSession ( host , header . sessionId ) ) 
 + { 
 + StreamReply reply = new StreamReply ( " " , header . sessionId , StreamReply . Status . SESSION _ FAILURE ) ; 
 + OutboundTcpConnection . write ( reply . getMessage ( Gossiper . instance . getVersion ( host ) ) , Long . toString ( header . sessionId ) , new DataOutputStream ( socket . getOutputStream ( ) ) ) ; 
 + throw new IOException ( " Session " + header . sessionId + " already closed . " ) ; 
 + } 
 + } 
 session = StreamInSession . get ( host , header . sessionId ) ; 
 session . setSocket ( socket ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 index e123714 . . e1bbe41 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 @ @ - 102 , 6 + 102 , 12 @ @ public class StreamInSession extends AbstractStreamSession 
 return session ; 
 } 
 
 + public static boolean hasSession ( InetAddress host , long sessionId ) 
 + { 
 + Pair < InetAddress , Long > context = new Pair < InetAddress , Long > ( host , sessionId ) ; 
 + return sessions . get ( context ) ! = null ; 
 + } 
 + 
 public void setCurrentFile ( PendingFile file ) 
 { 
 this . current = file ;
