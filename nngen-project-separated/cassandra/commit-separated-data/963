BLEU SCORE: 0.020980574531482755

TEST MSG: Make Stress exit with non - zero status after failure
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4366c08 . . 149b1d1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 6 <nl> + * Stress should exit with non - zero status after failure ( CASSANDRA - 10340 ) <nl> * Add client to cqlsh SHOW _ SESSION ( CASSANDRA - 8958 ) <nl> * Fix nodetool tablestats keyspace level metrics ( CASSANDRA - 11226 ) <nl> * Store repair options in parent _ repair _ history ( CASSANDRA - 11244 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / Stress . java b / tools / stress / src / org / apache / cassandra / stress / Stress . java <nl> index aeddb4a . . 874f515 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / Stress . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / Stress . java <nl> @ @ - 58 , 19 + 58 , 31 @ @ public final class Stress <nl> if ( FBUtilities . isWindows ( ) ) <nl> WindowsTimer . startTimerPeriod ( 1 ) ; <nl> <nl> + int exitCode = run ( arguments ) ; <nl> + <nl> + if ( FBUtilities . isWindows ( ) ) <nl> + WindowsTimer . endTimerPeriod ( 1 ) ; <nl> + <nl> + System . exit ( exitCode ) ; <nl> + } <nl> + <nl> + <nl> + private static int run ( String [ ] arguments ) <nl> + { <nl> try <nl> { <nl> - <nl> final StressSettings settings ; <nl> try <nl> { <nl> settings = StressSettings . parse ( arguments ) ; <nl> + if ( settings = = null ) <nl> + return 0 ; / / special settings action <nl> } <nl> catch ( IllegalArgumentException e ) <nl> { <nl> + System . out . printf ( " % s \ n " , e . getMessage ( ) ) ; <nl> printHelpMessage ( ) ; <nl> - e . printStackTrace ( ) ; <nl> - return ; <nl> + return 1 ; <nl> } <nl> <nl> MultiPrintStream logout = settings . log . getOutput ( ) ; <nl> @ @ - 128 , 14 + 140 , 10 @ @ public final class Stress <nl> catch ( Throwable t ) <nl> { <nl> t . printStackTrace ( ) ; <nl> - } <nl> - finally <nl> - { <nl> - if ( FBUtilities . isWindows ( ) ) <nl> - WindowsTimer . endTimerPeriod ( 1 ) ; <nl> - System . exit ( 0 ) ; <nl> + return 1 ; <nl> } <nl> <nl> + return 0 ; <nl> } <nl> <nl> / * * <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> index ebe6270 . . 94a41d2 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java <nl> @ @ - 79 , 6 + 79 , 9 @ @ public class StressAction implements Runnable <nl> output . println ( " FAILURE " ) ; <nl> <nl> settings . disconnect ( ) ; <nl> + <nl> + if ( ! success ) <nl> + throw new RuntimeException ( " Failed to execute stress action " ) ; <nl> } <nl> <nl> / / type provided separately to support recursive call for mixed command with each command type it is performing <nl> @ @ - 101 , 8 + 104 , 11 @ @ public class StressAction implements Runnable <nl> / / we need to warm up all the nodes in the cluster ideally , but we may not be the only stress instance ; <nl> / / so warm up all the nodes we ' re speaking to only . <nl> output . println ( String . format ( " Warming up % s with % d iterations . . . " , single . desc ( ) , iterations ) ) ; <nl> - run ( single , threads , iterations , 0 , null , null , warmupOutput , true ) ; <nl> + boolean success = null ! = run ( single , threads , iterations , 0 , null , null , warmupOutput , true ) ; <nl> + if ( ! success ) <nl> + throw new RuntimeException ( " Failed to execute warmup " ) ; <nl> } <nl> + <nl> } <nl> <nl> / / TODO : permit varying more than just thread count <nl> @ @ - 332 , 13 + 338 , 10 @ @ public class StressAction implements Runnable <nl> catch ( Exception e ) <nl> { <nl> if ( output = = null ) <nl> - { <nl> System . err . println ( e . getMessage ( ) ) ; <nl> - success = false ; <nl> - System . exit ( - 1 ) ; <nl> - } <nl> + else <nl> + e . printStackTrace ( output ) ; <nl> <nl> - e . printStackTrace ( output ) ; <nl> success = false ; <nl> workManager . stop ( ) ; <nl> metrics . cancel ( ) ; <nl> @ @ - 346 , 6 + 349 , 11 @ @ public class StressAction implements Runnable <nl> } <nl> } <nl> } <nl> + catch ( Exception e ) <nl> + { <nl> + System . err . println ( e . getMessage ( ) ) ; <nl> + success = false ; <nl> + } <nl> finally <nl> { <nl> done . countDown ( ) ; <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java <nl> index 6625bc8 . . 069454d 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java <nl> @ @ - 184 , 6 + 184 , 8 @ @ public class StressSettings implements Serializable <nl> } <nl> <nl> private static volatile JavaDriverClient client ; <nl> + private static volatile int numFailures ; <nl> + private static int MAX _ NUM _ FAILURES = 10 ; <nl> <nl> public JavaDriverClient getJavaDriverClient ( ) <nl> { <nl> @ @ - 195 , 9 + 197 , 12 @ @ public class StressSettings implements Serializable <nl> if ( client ! = null ) <nl> return client ; <nl> <nl> - try <nl> + synchronized ( this ) <nl> { <nl> - synchronized ( this ) <nl> + if ( numFailures > = MAX _ NUM _ FAILURES ) <nl> + throw new RuntimeException ( " Failed to create client too many times " ) ; <nl> + <nl> + try <nl> { <nl> String currentNode = node . randomNode ( ) ; <nl> if ( client ! = null ) <nl> @ @ - 211 , 10 + 216 , 11 @ @ public class StressSettings implements Serializable <nl> <nl> return client = c ; <nl> } <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> + catch ( Exception e ) <nl> + { <nl> + numFailures + = 1 ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 228 , 22 + 234 , 14 @ @ public class StressSettings implements Serializable <nl> <nl> public static StressSettings parse ( String [ ] args ) <nl> { <nl> - try <nl> - { <nl> - args = repairParams ( args ) ; <nl> - final Map < String , String [ ] > clArgs = parseMap ( args ) ; <nl> - if ( clArgs . containsKey ( " legacy " ) ) <nl> - return Legacy . build ( Arrays . copyOfRange ( args , 1 , args . length ) ) ; <nl> - if ( SettingsMisc . maybeDoSpecial ( clArgs ) ) <nl> - System . exit ( 1 ) ; <nl> - return get ( clArgs ) ; <nl> - } <nl> - catch ( IllegalArgumentException e ) <nl> - { <nl> - System . out . println ( e . getMessage ( ) ) ; <nl> - System . exit ( 1 ) ; <nl> - throw new AssertionError ( ) ; <nl> - } <nl> + args = repairParams ( args ) ; <nl> + final Map < String , String [ ] > clArgs = parseMap ( args ) ; <nl> + if ( clArgs . containsKey ( " legacy " ) ) <nl> + return Legacy . build ( Arrays . copyOfRange ( args , 1 , args . length ) ) ; <nl> + if ( SettingsMisc . maybeDoSpecial ( clArgs ) ) <nl> + return null ; <nl> + return get ( clArgs ) ; <nl> + <nl> } <nl> <nl> private static String [ ] repairParams ( String [ ] args )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4366c08 . . 149b1d1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 6 
 + * Stress should exit with non - zero status after failure ( CASSANDRA - 10340 ) 
 * Add client to cqlsh SHOW _ SESSION ( CASSANDRA - 8958 ) 
 * Fix nodetool tablestats keyspace level metrics ( CASSANDRA - 11226 ) 
 * Store repair options in parent _ repair _ history ( CASSANDRA - 11244 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / Stress . java b / tools / stress / src / org / apache / cassandra / stress / Stress . java 
 index aeddb4a . . 874f515 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / Stress . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / Stress . java 
 @ @ - 58 , 19 + 58 , 31 @ @ public final class Stress 
 if ( FBUtilities . isWindows ( ) ) 
 WindowsTimer . startTimerPeriod ( 1 ) ; 
 
 + int exitCode = run ( arguments ) ; 
 + 
 + if ( FBUtilities . isWindows ( ) ) 
 + WindowsTimer . endTimerPeriod ( 1 ) ; 
 + 
 + System . exit ( exitCode ) ; 
 + } 
 + 
 + 
 + private static int run ( String [ ] arguments ) 
 + { 
 try 
 { 
 - 
 final StressSettings settings ; 
 try 
 { 
 settings = StressSettings . parse ( arguments ) ; 
 + if ( settings = = null ) 
 + return 0 ; / / special settings action 
 } 
 catch ( IllegalArgumentException e ) 
 { 
 + System . out . printf ( " % s \ n " , e . getMessage ( ) ) ; 
 printHelpMessage ( ) ; 
 - e . printStackTrace ( ) ; 
 - return ; 
 + return 1 ; 
 } 
 
 MultiPrintStream logout = settings . log . getOutput ( ) ; 
 @ @ - 128 , 14 + 140 , 10 @ @ public final class Stress 
 catch ( Throwable t ) 
 { 
 t . printStackTrace ( ) ; 
 - } 
 - finally 
 - { 
 - if ( FBUtilities . isWindows ( ) ) 
 - WindowsTimer . endTimerPeriod ( 1 ) ; 
 - System . exit ( 0 ) ; 
 + return 1 ; 
 } 
 
 + return 0 ; 
 } 
 
 / * * 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressAction . java b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 index ebe6270 . . 94a41d2 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressAction . java 
 @ @ - 79 , 6 + 79 , 9 @ @ public class StressAction implements Runnable 
 output . println ( " FAILURE " ) ; 
 
 settings . disconnect ( ) ; 
 + 
 + if ( ! success ) 
 + throw new RuntimeException ( " Failed to execute stress action " ) ; 
 } 
 
 / / type provided separately to support recursive call for mixed command with each command type it is performing 
 @ @ - 101 , 8 + 104 , 11 @ @ public class StressAction implements Runnable 
 / / we need to warm up all the nodes in the cluster ideally , but we may not be the only stress instance ; 
 / / so warm up all the nodes we ' re speaking to only . 
 output . println ( String . format ( " Warming up % s with % d iterations . . . " , single . desc ( ) , iterations ) ) ; 
 - run ( single , threads , iterations , 0 , null , null , warmupOutput , true ) ; 
 + boolean success = null ! = run ( single , threads , iterations , 0 , null , null , warmupOutput , true ) ; 
 + if ( ! success ) 
 + throw new RuntimeException ( " Failed to execute warmup " ) ; 
 } 
 + 
 } 
 
 / / TODO : permit varying more than just thread count 
 @ @ - 332 , 13 + 338 , 10 @ @ public class StressAction implements Runnable 
 catch ( Exception e ) 
 { 
 if ( output = = null ) 
 - { 
 System . err . println ( e . getMessage ( ) ) ; 
 - success = false ; 
 - System . exit ( - 1 ) ; 
 - } 
 + else 
 + e . printStackTrace ( output ) ; 
 
 - e . printStackTrace ( output ) ; 
 success = false ; 
 workManager . stop ( ) ; 
 metrics . cancel ( ) ; 
 @ @ - 346 , 6 + 349 , 11 @ @ public class StressAction implements Runnable 
 } 
 } 
 } 
 + catch ( Exception e ) 
 + { 
 + System . err . println ( e . getMessage ( ) ) ; 
 + success = false ; 
 + } 
 finally 
 { 
 done . countDown ( ) ; 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java 
 index 6625bc8 . . 069454d 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / settings / StressSettings . java 
 @ @ - 184 , 6 + 184 , 8 @ @ public class StressSettings implements Serializable 
 } 
 
 private static volatile JavaDriverClient client ; 
 + private static volatile int numFailures ; 
 + private static int MAX _ NUM _ FAILURES = 10 ; 
 
 public JavaDriverClient getJavaDriverClient ( ) 
 { 
 @ @ - 195 , 9 + 197 , 12 @ @ public class StressSettings implements Serializable 
 if ( client ! = null ) 
 return client ; 
 
 - try 
 + synchronized ( this ) 
 { 
 - synchronized ( this ) 
 + if ( numFailures > = MAX _ NUM _ FAILURES ) 
 + throw new RuntimeException ( " Failed to create client too many times " ) ; 
 + 
 + try 
 { 
 String currentNode = node . randomNode ( ) ; 
 if ( client ! = null ) 
 @ @ - 211 , 10 + 216 , 11 @ @ public class StressSettings implements Serializable 
 
 return client = c ; 
 } 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 + catch ( Exception e ) 
 + { 
 + numFailures + = 1 ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 
 @ @ - 228 , 22 + 234 , 14 @ @ public class StressSettings implements Serializable 
 
 public static StressSettings parse ( String [ ] args ) 
 { 
 - try 
 - { 
 - args = repairParams ( args ) ; 
 - final Map < String , String [ ] > clArgs = parseMap ( args ) ; 
 - if ( clArgs . containsKey ( " legacy " ) ) 
 - return Legacy . build ( Arrays . copyOfRange ( args , 1 , args . length ) ) ; 
 - if ( SettingsMisc . maybeDoSpecial ( clArgs ) ) 
 - System . exit ( 1 ) ; 
 - return get ( clArgs ) ; 
 - } 
 - catch ( IllegalArgumentException e ) 
 - { 
 - System . out . println ( e . getMessage ( ) ) ; 
 - System . exit ( 1 ) ; 
 - throw new AssertionError ( ) ; 
 - } 
 + args = repairParams ( args ) ; 
 + final Map < String , String [ ] > clArgs = parseMap ( args ) ; 
 + if ( clArgs . containsKey ( " legacy " ) ) 
 + return Legacy . build ( Arrays . copyOfRange ( args , 1 , args . length ) ) ; 
 + if ( SettingsMisc . maybeDoSpecial ( clArgs ) ) 
 + return null ; 
 + return get ( clArgs ) ; 
 + 
 } 
 
 private static String [ ] repairParams ( String [ ] args )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
