BLEU SCORE: 0.0334950357084578

TEST MSG: refuse to decomission if not in state NORMAL
GENERATED MSG: ability to forcibly mark machines failed by disabling gossip via JMX .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0e4ade3 . . d4cc15f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 17 <nl> + * Disallow decommission when node is in drained state ( CASSANDRA - 8741 ) <nl> * Backport CASSANDRA - 8013 to 2 . 0 ( CASSANDRA - 10144 ) <nl> * Make getFullyExpiredSSTables less expensive ( CASSANDRA - 9882 ) <nl> * Add tool to find why expired sstables are not getting dropped ( CASSANDRA - 10015 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 745fe4c . . 5ac4980 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2963 , 6 + 2963 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> throw new UnsupportedOperationException ( " local node is not a member of the token ring yet " ) ; <nl> if ( tokenMetadata . cloneAfterAllLeft ( ) . sortedTokens ( ) . size ( ) < 2 ) <nl> throw new UnsupportedOperationException ( " no other normal nodes in the ring ; decommission would be pointless " ) ; <nl> + if ( operationMode ! = Mode . NORMAL ) <nl> + throw new UnsupportedOperationException ( " Node in " + operationMode + " state ; wait for status to become normal or restart " ) ; <nl> <nl> PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; <nl> for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index b006d69 . . 8071013 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 1366 , 7 + 1366 , 8 @ @ public class NodeCmd <nl> System . err . println ( " Decommission will decommission the node you are connected to and does not take arguments ! " ) ; <nl> System . exit ( 1 ) ; <nl> } <nl> - probe . decommission ( ) ; <nl> + try { probe . decommission ( ) ; } <nl> + catch ( UnsupportedOperationException e ) { err ( " Unsupported operation : " + e . getMessage ( ) ) ; } <nl> break ; <nl> <nl> case DRAIN : <nl> @ @ - 1678 , 6 + 1679 , 12 @ @ public class NodeCmd <nl> System . exit ( 1 ) ; <nl> } <nl> <nl> + private static void err ( String useStr ) <nl> + { <nl> + System . err . println ( useStr ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> private static void err ( Exception e , String errStr ) <nl> { <nl> System . err . println ( errStr ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d16ddac . . 80e194d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 30 , 6 + 30 , 8 @ @ dev <nl> * include secondary indexes in cleanup ( CASSANDRA - 1916 ) <nl> * CFS . scrubDataDirectories should also cleanup invalid secondary indexes <nl> ( CASSANDRA - 1904 ) <nl> + * ability to disable / enable gossip on nodes to force them down <nl> + ( CASSANDRA - 1108 ) <nl> <nl> <nl> 0 . 7 . 0 - rc3 <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index b4eb27c . . ff0dcee 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 246 , 6 + 246 , 28 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> throw new RuntimeException ( " Streaming service is unavailable . " ) ; <nl> } <nl> <nl> + / / should only be called via JMX <nl> + public void stopGossiping ( ) <nl> + { <nl> + if ( initialized ) <nl> + { <nl> + logger _ . warn ( " Stopping gossip by operator request " ) ; <nl> + Gossiper . instance . stop ( ) ; <nl> + initialized = false ; <nl> + } <nl> + } <nl> + <nl> + / / should only be called via JMX <nl> + public void startGossiping ( ) <nl> + { <nl> + if ( ! initialized ) <nl> + { <nl> + logger _ . warn ( " Starting gossip by operator request " ) ; <nl> + Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; <nl> + initialized = true ; <nl> + } <nl> + } <nl> + <nl> public void stopClient ( ) <nl> { <nl> Gossiper . instance . unregister ( migrationManager ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index acce2b7 . . 5d2a4fd 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 270 , 4 + 270 , 13 @ @ public interface StorageServiceMBean <nl> * @ throws ConfigurationException classname not found on classpath <nl> * / <nl> public void updateSnitch ( String epSnitchClassName , Boolean dynamic , Integer dynamicUpdateInterval , Integer dynamicResetInterval , Double dynamicBadnessThreshold ) throws ConfigurationException ; <nl> + <nl> + / / allows a user to forcibly ' kill ' a sick node <nl> + public void stopGossiping ( ) ; <nl> + <nl> + / / allows a user to recover a forcibly ' killed ' node <nl> + public void startGossiping ( ) ; <nl> + <nl> + / / to determine if gossip is disabled <nl> + public boolean isInitialized ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 47f5139 . . e29e9fe 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class NodeCmd { <nl> RING , INFO , CFSTATS , SNAPSHOT , CLEARSNAPSHOT , VERSION , TPSTATS , FLUSH , DRAIN , <nl> DECOMMISSION , MOVE , LOADBALANCE , REMOVETOKEN , REPAIR , CLEANUP , COMPACT , <nl> SETCACHECAPACITY , GETCOMPACTIONTHRESHOLD , SETCOMPACTIONTHRESHOLD , NETSTATS , CFHISTOGRAMS , <nl> - COMPACTIONSTATS <nl> + COMPACTIONSTATS , DISABLEGOSSIP , ENABLEGOSSIP <nl> } <nl> <nl> <nl> @ @ - 96 , 6 + 96 , 8 @ @ public class NodeCmd { <nl> + " decommission \ n " <nl> + " loadbalance \ n " <nl> + " compactionstats \ n " <nl> + + " disablegossip \ n " <nl> + + " enablegossip \ n " <nl> <nl> / / One arg <nl> + " snapshot [ snapshotname ] \ n " <nl> @ @ - 189 , 6 + 191 , 7 @ @ public class NodeCmd { <nl> public void printInfo ( PrintStream outs ) <nl> { <nl> outs . println ( probe . getToken ( ) ) ; <nl> + outs . printf ( " % - 17s : % s % n " , " Gossip active " , probe . isInitialized ( ) ) ; <nl> outs . printf ( " % - 17s : % s % n " , " Load " , probe . getLoadString ( ) ) ; <nl> outs . printf ( " % - 17s : % s % n " , " Generation No " , probe . getCurrentGenerationNumber ( ) ) ; <nl> <nl> @ @ - 519 , 6 + 522 , 8 @ @ public class NodeCmd { <nl> case TPSTATS : nodeCmd . printThreadPoolStats ( System . out ) ; break ; <nl> case VERSION : nodeCmd . printReleaseVersion ( System . out ) ; break ; <nl> case COMPACTIONSTATS : nodeCmd . printCompactionStats ( System . out ) ; break ; <nl> + case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; <nl> + case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; <nl> <nl> case DRAIN : <nl> try { probe . drain ( ) ; } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 8177a29 . . a618e5a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 503 , 6 + 503 , 21 @ @ public class NodeProbe <nl> { <nl> return ssProxy . getKeyspaces ( ) ; <nl> } <nl> + <nl> + public void stopGossiping ( ) <nl> + { <nl> + ssProxy . stopGossiping ( ) ; <nl> + } <nl> + <nl> + public void startGossiping ( ) <nl> + { <nl> + ssProxy . startGossiping ( ) ; <nl> + } <nl> + <nl> + public boolean isInitialized ( ) <nl> + { <nl> + return ssProxy . isInitialized ( ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > >

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0e4ade3 . . d4cc15f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 17 
 + * Disallow decommission when node is in drained state ( CASSANDRA - 8741 ) 
 * Backport CASSANDRA - 8013 to 2 . 0 ( CASSANDRA - 10144 ) 
 * Make getFullyExpiredSSTables less expensive ( CASSANDRA - 9882 ) 
 * Add tool to find why expired sstables are not getting dropped ( CASSANDRA - 10015 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 745fe4c . . 5ac4980 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2963 , 6 + 2963 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 throw new UnsupportedOperationException ( " local node is not a member of the token ring yet " ) ; 
 if ( tokenMetadata . cloneAfterAllLeft ( ) . sortedTokens ( ) . size ( ) < 2 ) 
 throw new UnsupportedOperationException ( " no other normal nodes in the ring ; decommission would be pointless " ) ; 
 + if ( operationMode ! = Mode . NORMAL ) 
 + throw new UnsupportedOperationException ( " Node in " + operationMode + " state ; wait for status to become normal or restart " ) ; 
 
 PendingRangeCalculatorService . instance . blockUntilFinished ( ) ; 
 for ( String keyspaceName : Schema . instance . getNonSystemKeyspaces ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index b006d69 . . 8071013 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 1366 , 7 + 1366 , 8 @ @ public class NodeCmd 
 System . err . println ( " Decommission will decommission the node you are connected to and does not take arguments ! " ) ; 
 System . exit ( 1 ) ; 
 } 
 - probe . decommission ( ) ; 
 + try { probe . decommission ( ) ; } 
 + catch ( UnsupportedOperationException e ) { err ( " Unsupported operation : " + e . getMessage ( ) ) ; } 
 break ; 
 
 case DRAIN : 
 @ @ - 1678 , 6 + 1679 , 12 @ @ public class NodeCmd 
 System . exit ( 1 ) ; 
 } 
 
 + private static void err ( String useStr ) 
 + { 
 + System . err . println ( useStr ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 private static void err ( Exception e , String errStr ) 
 { 
 System . err . println ( errStr ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d16ddac . . 80e194d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 30 , 6 + 30 , 8 @ @ dev 
 * include secondary indexes in cleanup ( CASSANDRA - 1916 ) 
 * CFS . scrubDataDirectories should also cleanup invalid secondary indexes 
 ( CASSANDRA - 1904 ) 
 + * ability to disable / enable gossip on nodes to force them down 
 + ( CASSANDRA - 1108 ) 
 
 
 0 . 7 . 0 - rc3 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index b4eb27c . . ff0dcee 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 246 , 6 + 246 , 28 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 throw new RuntimeException ( " Streaming service is unavailable . " ) ; 
 } 
 
 + / / should only be called via JMX 
 + public void stopGossiping ( ) 
 + { 
 + if ( initialized ) 
 + { 
 + logger _ . warn ( " Stopping gossip by operator request " ) ; 
 + Gossiper . instance . stop ( ) ; 
 + initialized = false ; 
 + } 
 + } 
 + 
 + / / should only be called via JMX 
 + public void startGossiping ( ) 
 + { 
 + if ( ! initialized ) 
 + { 
 + logger _ . warn ( " Starting gossip by operator request " ) ; 
 + Gossiper . instance . start ( FBUtilities . getLocalAddress ( ) , ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; 
 + initialized = true ; 
 + } 
 + } 
 + 
 public void stopClient ( ) 
 { 
 Gossiper . instance . unregister ( migrationManager ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index acce2b7 . . 5d2a4fd 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 270 , 4 + 270 , 13 @ @ public interface StorageServiceMBean 
 * @ throws ConfigurationException classname not found on classpath 
 * / 
 public void updateSnitch ( String epSnitchClassName , Boolean dynamic , Integer dynamicUpdateInterval , Integer dynamicResetInterval , Double dynamicBadnessThreshold ) throws ConfigurationException ; 
 + 
 + / / allows a user to forcibly ' kill ' a sick node 
 + public void stopGossiping ( ) ; 
 + 
 + / / allows a user to recover a forcibly ' killed ' node 
 + public void startGossiping ( ) ; 
 + 
 + / / to determine if gossip is disabled 
 + public boolean isInitialized ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 47f5139 . . e29e9fe 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class NodeCmd { 
 RING , INFO , CFSTATS , SNAPSHOT , CLEARSNAPSHOT , VERSION , TPSTATS , FLUSH , DRAIN , 
 DECOMMISSION , MOVE , LOADBALANCE , REMOVETOKEN , REPAIR , CLEANUP , COMPACT , 
 SETCACHECAPACITY , GETCOMPACTIONTHRESHOLD , SETCOMPACTIONTHRESHOLD , NETSTATS , CFHISTOGRAMS , 
 - COMPACTIONSTATS 
 + COMPACTIONSTATS , DISABLEGOSSIP , ENABLEGOSSIP 
 } 
 
 
 @ @ - 96 , 6 + 96 , 8 @ @ public class NodeCmd { 
 + " decommission \ n " 
 + " loadbalance \ n " 
 + " compactionstats \ n " 
 + + " disablegossip \ n " 
 + + " enablegossip \ n " 
 
 / / One arg 
 + " snapshot [ snapshotname ] \ n " 
 @ @ - 189 , 6 + 191 , 7 @ @ public class NodeCmd { 
 public void printInfo ( PrintStream outs ) 
 { 
 outs . println ( probe . getToken ( ) ) ; 
 + outs . printf ( " % - 17s : % s % n " , " Gossip active " , probe . isInitialized ( ) ) ; 
 outs . printf ( " % - 17s : % s % n " , " Load " , probe . getLoadString ( ) ) ; 
 outs . printf ( " % - 17s : % s % n " , " Generation No " , probe . getCurrentGenerationNumber ( ) ) ; 
 
 @ @ - 519 , 6 + 522 , 8 @ @ public class NodeCmd { 
 case TPSTATS : nodeCmd . printThreadPoolStats ( System . out ) ; break ; 
 case VERSION : nodeCmd . printReleaseVersion ( System . out ) ; break ; 
 case COMPACTIONSTATS : nodeCmd . printCompactionStats ( System . out ) ; break ; 
 + case DISABLEGOSSIP : probe . stopGossiping ( ) ; break ; 
 + case ENABLEGOSSIP : probe . startGossiping ( ) ; break ; 
 
 case DRAIN : 
 try { probe . drain ( ) ; } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 8177a29 . . a618e5a 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 503 , 6 + 503 , 21 @ @ public class NodeProbe 
 { 
 return ssProxy . getKeyspaces ( ) ; 
 } 
 + 
 + public void stopGossiping ( ) 
 + { 
 + ssProxy . stopGossiping ( ) ; 
 + } 
 + 
 + public void startGossiping ( ) 
 + { 
 + ssProxy . startGossiping ( ) ; 
 + } 
 + 
 + public boolean isInitialized ( ) 
 + { 
 + return ssProxy . isInitialized ( ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > >
