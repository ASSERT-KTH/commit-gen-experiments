BLEU SCORE: 0.018738883683389617

TEST MSG: Change streaming _ socket _ timeout _ in _ ms default
GENERATED MSG: Require enabling cross - node timeouts

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2e3fb7d . . 26dc34b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 10 <nl> + * Change streaming _ socket _ timeout _ in _ ms default to 1 hour ( CASSANDRA - 8611 ) <nl> * ( cqlsh ) update list of CQL keywords ( CASSANDRA - 9232 ) <nl> <nl> <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index a3e54e5 . . 4e0111d 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 633 , 8 + 633 , 8 @ @ cross _ node _ timeout : false <nl> # When a timeout occurs during streaming , streaming is retried from the start <nl> # of the current file . This _ can _ involve re - streaming an important amount of <nl> # data , so you should avoid setting the value too low . <nl> - # Default value is 0 , which never timeout streams . <nl> - # streaming _ socket _ timeout _ in _ ms : 0 <nl> + # Default value is 3600000 , which means streams timeout after an hour . <nl> + # streaming _ socket _ timeout _ in _ ms : 3600000 <nl> <nl> # phi value that must be reached for a host to be marked down . <nl> # most users should never need to adjust this . <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index fec6a70 . . d960463 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class Config <nl> <nl> public volatile Long truncate _ request _ timeout _ in _ ms = 60000L ; <nl> <nl> - public Integer streaming _ socket _ timeout _ in _ ms = 0 ; <nl> + public Integer streaming _ socket _ timeout _ in _ ms = 3600000 ; <nl> <nl> public boolean cross _ node _ timeout = false ; <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> index fc90e5c . . 73f9786 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java <nl> @ @ - 106 , 7 + 106 , 9 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap <nl> <nl> public float getProgress ( ) <nl> { <nl> - / / TODO this is totally broken for wide rows <nl> + if ( ! iter . hasNext ( ) ) <nl> + return 1 . 0F ; <nl> + <nl> / / the progress is likely to be reported slightly off the actual but close enough <nl> float progress = ( ( float ) iter . rowsRead ( ) / totalRowCount ) ; <nl> return progress > 1 . 0F ? 1 . 0F : progress ; <nl> @ @ - 423 , 6 + 425 , 7 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap <nl> { <nl> private PeekingIterator < Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > > wideColumns ; <nl> private ByteBuffer lastColumn = ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> + private ByteBuffer lastCountedKey = ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; <nl> <nl> private void maybeInit ( ) <nl> { <nl> @ @ - 476 , 12 + 479 , 28 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap <nl> if ( rows = = null ) <nl> return endOfData ( ) ; <nl> <nl> - totalRead + + ; <nl> Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > next = wideColumns . next ( ) ; <nl> lastColumn = next . right . values ( ) . iterator ( ) . next ( ) . name ( ) ; <nl> + <nl> + maybeCountRow ( next ) ; <nl> return next ; <nl> } <nl> <nl> + <nl> + / * * <nl> + * Increases the row counter only if we really moved to the next row . <nl> + * @ param next just fetched row slice <nl> + * / <nl> + private void maybeCountRow ( Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > next ) <nl> + { <nl> + ByteBuffer currentKey = next . left ; <nl> + if ( ! currentKey . equals ( lastCountedKey ) ) <nl> + { <nl> + totalRead + + ; <nl> + lastCountedKey = currentKey ; <nl> + } <nl> + } <nl> + <nl> private class WideColumnIterator extends AbstractIterator < Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > > <nl> { <nl> private final Iterator < KeySlice > rows ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2e3fb7d . . 26dc34b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 10 
 + * Change streaming _ socket _ timeout _ in _ ms default to 1 hour ( CASSANDRA - 8611 ) 
 * ( cqlsh ) update list of CQL keywords ( CASSANDRA - 9232 ) 
 
 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index a3e54e5 . . 4e0111d 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 633 , 8 + 633 , 8 @ @ cross _ node _ timeout : false 
 # When a timeout occurs during streaming , streaming is retried from the start 
 # of the current file . This _ can _ involve re - streaming an important amount of 
 # data , so you should avoid setting the value too low . 
 - # Default value is 0 , which never timeout streams . 
 - # streaming _ socket _ timeout _ in _ ms : 0 
 + # Default value is 3600000 , which means streams timeout after an hour . 
 + # streaming _ socket _ timeout _ in _ ms : 3600000 
 
 # phi value that must be reached for a host to be marked down . 
 # most users should never need to adjust this . 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index fec6a70 . . d960463 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class Config 
 
 public volatile Long truncate _ request _ timeout _ in _ ms = 60000L ; 
 
 - public Integer streaming _ socket _ timeout _ in _ ms = 0 ; 
 + public Integer streaming _ socket _ timeout _ in _ ms = 3600000 ; 
 
 public boolean cross _ node _ timeout = false ; 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 index fc90e5c . . 73f9786 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyRecordReader . java 
 @ @ - 106 , 7 + 106 , 9 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap 
 
 public float getProgress ( ) 
 { 
 - / / TODO this is totally broken for wide rows 
 + if ( ! iter . hasNext ( ) ) 
 + return 1 . 0F ; 
 + 
 / / the progress is likely to be reported slightly off the actual but close enough 
 float progress = ( ( float ) iter . rowsRead ( ) / totalRowCount ) ; 
 return progress > 1 . 0F ? 1 . 0F : progress ; 
 @ @ - 423 , 6 + 425 , 7 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap 
 { 
 private PeekingIterator < Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > > wideColumns ; 
 private ByteBuffer lastColumn = ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 + private ByteBuffer lastCountedKey = ByteBufferUtil . EMPTY _ BYTE _ BUFFER ; 
 
 private void maybeInit ( ) 
 { 
 @ @ - 476 , 12 + 479 , 28 @ @ public class ColumnFamilyRecordReader extends RecordReader < ByteBuffer , SortedMap 
 if ( rows = = null ) 
 return endOfData ( ) ; 
 
 - totalRead + + ; 
 Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > next = wideColumns . next ( ) ; 
 lastColumn = next . right . values ( ) . iterator ( ) . next ( ) . name ( ) ; 
 + 
 + maybeCountRow ( next ) ; 
 return next ; 
 } 
 
 + 
 + / * * 
 + * Increases the row counter only if we really moved to the next row . 
 + * @ param next just fetched row slice 
 + * / 
 + private void maybeCountRow ( Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > next ) 
 + { 
 + ByteBuffer currentKey = next . left ; 
 + if ( ! currentKey . equals ( lastCountedKey ) ) 
 + { 
 + totalRead + + ; 
 + lastCountedKey = currentKey ; 
 + } 
 + } 
 + 
 private class WideColumnIterator extends AbstractIterator < Pair < ByteBuffer , SortedMap < ByteBuffer , IColumn > > > 
 { 
 private final Iterator < KeySlice > rows ;
