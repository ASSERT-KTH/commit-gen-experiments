BLEU SCORE: 0.017820934647025707

TEST MSG: Fix failing pig test
GENERATED MSG: Pig : support for composite row keys , writing composites

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / pig / CqlTableTest . java b / test / unit / org / apache / cassandra / pig / CqlTableTest . java <nl> index 785d819 . . 55586c7 100644 <nl> - - - a / test / unit / org / apache / cassandra / pig / CqlTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / pig / CqlTableTest . java <nl> @ @ - 174 , 18 + 174 , 18 @ @ public class CqlTableTest extends PigTestBase <nl> pig . registerQuery ( " STORE recs INTO ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " & output _ query = update + cql3ks . collectiontable + set + n + % 3D + % 3F ' USING CqlStorage ( ) ; " ) ; <nl> pig . executeBatch ( ) ; <nl> <nl> - / / ( book2 , ( ( m , mm ) , ( n , nn ) ) ) <nl> - / / ( book3 , ( ( m , mm ) , ( n , nn ) ) ) <nl> - / / ( book4 , ( ( m , mm ) , ( n , nn ) ) ) <nl> - / / ( book1 , ( ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book2 , ( ( key2 , value2 ) , ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book3 , ( ( key3 , value3 ) , ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book4 , ( ( key4 , value4 ) , ( m , mm ) , ( n , nn ) ) ) <nl> + / / ( book1 , ( ( key1 , value1 ) , ( m , mm ) , ( n , nn ) ) ) <nl> pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " ' USING CqlStorage ( ) ; " ) ; <nl> Iterator < Tuple > it = pig . openIterator ( " result " ) ; <nl> - if ( it . hasNext ( ) ) { <nl> + while ( it . hasNext ( ) ) { <nl> Tuple t = it . next ( ) ; <nl> Tuple t1 = ( Tuple ) t . get ( 1 ) ; <nl> - Assert . assertEquals ( t1 . size ( ) , 2 ) ; <nl> - Tuple element1 = ( Tuple ) t1 . get ( 0 ) ; <nl> - Tuple element2 = ( Tuple ) t1 . get ( 1 ) ; <nl> + Assert . assertEquals ( t1 . size ( ) , 3 ) ; <nl> + Tuple element1 = ( Tuple ) t1 . get ( 1 ) ; <nl> + Tuple element2 = ( Tuple ) t1 . get ( 2 ) ; <nl> Assert . assertEquals ( element1 . get ( 0 ) , " m " ) ; <nl> Assert . assertEquals ( element1 . get ( 1 ) , " mm " ) ; <nl> Assert . assertEquals ( element2 . get ( 0 ) , " n " ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / CounterColumn . java b / src / java / org / apache / cassandra / db / CounterColumn . java <nl> index 4b0bdc2 . . 7ea6514 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterColumn . java <nl> @ @ - 366 , 7 + 366 , 8 @ @ public class CounterColumn extends Column <nl> <nl> StorageProxy . performWrite ( rm , ConsistencyLevel . ANY , localDataCenter , new StorageProxy . WritePerformer ( ) <nl> { <nl> - public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException , TimeoutException <nl> + public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) <nl> + throws IOException , TimeoutException , UnavailableException <nl> { <nl> / / We should only send to the remote replica , not the local one <nl> targets . remove ( local ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 8ae063b . . 7a79c06 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> IWriteResponseHandler responseHandler , <nl> String localDataCenter , <nl> ConsistencyLevel consistency _ level ) <nl> - throws IOException , TimeoutException <nl> + throws IOException , TimeoutException , UnavailableException <nl> { <nl> assert mutation instanceof RowMutation ; <nl> sendToHintedEndpoints ( ( RowMutation ) mutation , targets , responseHandler , localDataCenter , consistency _ level ) ; <nl> @ @ - 287 , 7 + 287 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> IWriteResponseHandler responseHandler , <nl> String localDataCenter , <nl> ConsistencyLevel consistency _ level ) <nl> - throws IOException , TimeoutException <nl> + throws IOException , TimeoutException , UnavailableException <nl> { <nl> / / Multimap that holds onto all the messages and addresses meant for a specific datacenter <nl> Map < String , Multimap < MessageOut , InetAddress > > dcMessages = new HashMap < String , Multimap < MessageOut , InetAddress > > ( targets . size ( ) ) ; <nl> @ @ - 302 , 7 + 302 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> if ( totalHintsInProgress . get ( ) > maxHintsInProgress <nl> & & ( hintsInProgress . get ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) <nl> { <nl> - throw new TimeoutException ( ) ; <nl> + throw new UnavailableException ( ) ; <nl> } <nl> <nl> if ( FailureDetector . instance . isAlive ( destination ) ) <nl> @ @ - 576 , 7 + 576 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / and we want to avoid blocking too much the MUTATION stage <nl> StageManager . getStage ( Stage . REPLICATE _ ON _ WRITE ) . execute ( new DroppableRunnable ( MessagingService . Verb . READ ) <nl> { <nl> - public void runMayThrow ( ) throws IOException , TimeoutException <nl> + public void runMayThrow ( ) throws IOException , TimeoutException , UnavailableException <nl> { <nl> / / send mutation to other replica <nl> sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , targets , responseHandler , localDataCenter , consistency _ level ) ; <nl> @ @ - 1254 , 7 + 1254 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public interface WritePerformer <nl> { <nl> - public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException , TimeoutException ; <nl> + public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException , TimeoutException , UnavailableException ; <nl> } <nl> <nl> private static abstract class DroppableRunnable implements Runnable

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / pig / CqlTableTest . java b / test / unit / org / apache / cassandra / pig / CqlTableTest . java 
 index 785d819 . . 55586c7 100644 
 - - - a / test / unit / org / apache / cassandra / pig / CqlTableTest . java 
 + + + b / test / unit / org / apache / cassandra / pig / CqlTableTest . java 
 @ @ - 174 , 18 + 174 , 18 @ @ public class CqlTableTest extends PigTestBase 
 pig . registerQuery ( " STORE recs INTO ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " & output _ query = update + cql3ks . collectiontable + set + n + % 3D + % 3F ' USING CqlStorage ( ) ; " ) ; 
 pig . executeBatch ( ) ; 
 
 - / / ( book2 , ( ( m , mm ) , ( n , nn ) ) ) 
 - / / ( book3 , ( ( m , mm ) , ( n , nn ) ) ) 
 - / / ( book4 , ( ( m , mm ) , ( n , nn ) ) ) 
 - / / ( book1 , ( ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book2 , ( ( key2 , value2 ) , ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book3 , ( ( key3 , value3 ) , ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book4 , ( ( key4 , value4 ) , ( m , mm ) , ( n , nn ) ) ) 
 + / / ( book1 , ( ( key1 , value1 ) , ( m , mm ) , ( n , nn ) ) ) 
 pig . registerQuery ( " result = LOAD ' cql : / / cql3ks / collectiontable ? " + defaultParameters + " ' USING CqlStorage ( ) ; " ) ; 
 Iterator < Tuple > it = pig . openIterator ( " result " ) ; 
 - if ( it . hasNext ( ) ) { 
 + while ( it . hasNext ( ) ) { 
 Tuple t = it . next ( ) ; 
 Tuple t1 = ( Tuple ) t . get ( 1 ) ; 
 - Assert . assertEquals ( t1 . size ( ) , 2 ) ; 
 - Tuple element1 = ( Tuple ) t1 . get ( 0 ) ; 
 - Tuple element2 = ( Tuple ) t1 . get ( 1 ) ; 
 + Assert . assertEquals ( t1 . size ( ) , 3 ) ; 
 + Tuple element1 = ( Tuple ) t1 . get ( 1 ) ; 
 + Tuple element2 = ( Tuple ) t1 . get ( 2 ) ; 
 Assert . assertEquals ( element1 . get ( 0 ) , " m " ) ; 
 Assert . assertEquals ( element1 . get ( 1 ) , " mm " ) ; 
 Assert . assertEquals ( element2 . get ( 0 ) , " n " ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / CounterColumn . java b / src / java / org / apache / cassandra / db / CounterColumn . java 
 index 4b0bdc2 . . 7ea6514 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterColumn . java 
 + + + b / src / java / org / apache / cassandra / db / CounterColumn . java 
 @ @ - 366 , 7 + 366 , 8 @ @ public class CounterColumn extends Column 
 
 StorageProxy . performWrite ( rm , ConsistencyLevel . ANY , localDataCenter , new StorageProxy . WritePerformer ( ) 
 { 
 - public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException , TimeoutException 
 + public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) 
 + throws IOException , TimeoutException , UnavailableException 
 { 
 / / We should only send to the remote replica , not the local one 
 targets . remove ( local ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 8ae063b . . 7a79c06 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 IWriteResponseHandler responseHandler , 
 String localDataCenter , 
 ConsistencyLevel consistency _ level ) 
 - throws IOException , TimeoutException 
 + throws IOException , TimeoutException , UnavailableException 
 { 
 assert mutation instanceof RowMutation ; 
 sendToHintedEndpoints ( ( RowMutation ) mutation , targets , responseHandler , localDataCenter , consistency _ level ) ; 
 @ @ - 287 , 7 + 287 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 IWriteResponseHandler responseHandler , 
 String localDataCenter , 
 ConsistencyLevel consistency _ level ) 
 - throws IOException , TimeoutException 
 + throws IOException , TimeoutException , UnavailableException 
 { 
 / / Multimap that holds onto all the messages and addresses meant for a specific datacenter 
 Map < String , Multimap < MessageOut , InetAddress > > dcMessages = new HashMap < String , Multimap < MessageOut , InetAddress > > ( targets . size ( ) ) ; 
 @ @ - 302 , 7 + 302 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 if ( totalHintsInProgress . get ( ) > maxHintsInProgress 
 & & ( hintsInProgress . get ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) 
 { 
 - throw new TimeoutException ( ) ; 
 + throw new UnavailableException ( ) ; 
 } 
 
 if ( FailureDetector . instance . isAlive ( destination ) ) 
 @ @ - 576 , 7 + 576 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 / / and we want to avoid blocking too much the MUTATION stage 
 StageManager . getStage ( Stage . REPLICATE _ ON _ WRITE ) . execute ( new DroppableRunnable ( MessagingService . Verb . READ ) 
 { 
 - public void runMayThrow ( ) throws IOException , TimeoutException 
 + public void runMayThrow ( ) throws IOException , TimeoutException , UnavailableException 
 { 
 / / send mutation to other replica 
 sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , targets , responseHandler , localDataCenter , consistency _ level ) ; 
 @ @ - 1254 , 7 + 1254 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public interface WritePerformer 
 { 
 - public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException , TimeoutException ; 
 + public void apply ( IMutation mutation , Collection < InetAddress > targets , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException , TimeoutException , UnavailableException ; 
 } 
 
 private static abstract class DroppableRunnable implements Runnable
