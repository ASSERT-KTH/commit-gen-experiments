BLEU SCORE: 0.001756240011964942

TEST MSG: Fix GC logging on first start
GENERATED MSG: switch from PrintGCTimeStamps ( time - elapsed - since - jvm - start , which is almost useless ) to PrintGCDateStamps ( wall clock time in ISO 8601 )

TEST DIFF (one line): diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index 321a9ca . . 60d15bb 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 425 , 6 + 425 , 7 @ @ Function SetCassandraEnvironment <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintPromotionFailure " <nl> # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : PrintFLSStatistics = 1 " <nl> <nl> + New - Item - Force - ItemType directory - Path $ env : CASSANDRA _ HOME / logs / <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xloggc : " " $ env : CASSANDRA _ HOME / logs / gc . log " " " <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseGCLogFileRotation " <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : NumberOfGCLogFiles = 10 " <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index b519b76 . . 5d2330c 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 241 , 6 + 241 , 7 @ @ JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " <nl> JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : PrintFLSStatistics = 1 " <nl> <nl> + mkdir - p $ { CASSANDRA _ HOME } / logs / <nl> JVM _ OPTS = " $ JVM _ OPTS - Xloggc : $ { CASSANDRA _ HOME } / logs / gc . log " <nl> JVM _ OPTS = " $ JVM _ OPTS - XX : + UseGCLogFileRotation " <nl> JVM _ OPTS = " $ JVM _ OPTS - XX : NumberOfGCLogFiles = 10 "
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e897761 . . d39c6ff 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 8 , 6 + 8 , 8 @ @ <nl> Merged from 0 . 8 : <nl> * acquire compactionlock during truncate ( CASSANDRA - 3399 ) <nl> * fix bug that caused first column in per row indexes to be ignored ( CASSANDRA - 3441 ) <nl> + * fix DecimalType bytebuffer marshalling ( CASSANDRA - 3421 ) <nl> + <nl> <nl> 1 . 0 . 1 <nl> * acquire references during index build to prevent delete problems <nl> diff - - git a / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java b / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java <nl> index 8879a6b . . f97634e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java <nl> + + + b / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java <nl> @ @ - 86 , 12 + 86 , 14 @ @ public class JdbcDecimal extends AbstractJdbcType < BigDecimal > <nl> public BigDecimal compose ( ByteBuffer bytes ) <nl> { <nl> if ( bytes = = null ) return null ; <nl> - <nl> + <nl> + / / do not consume the contents of the ByteBuffer <nl> + bytes = bytes . duplicate ( ) ; <nl> int scale = bytes . getInt ( ) ; <nl> byte [ ] bibytes = new byte [ bytes . remaining ( ) ] ; <nl> - bytes . get ( bibytes , 0 , bytes . remaining ( ) ) ; <nl> + bytes . get ( bibytes ) ; <nl> + <nl> BigInteger bi = new BigInteger ( bibytes ) ; <nl> - <nl> return new BigDecimal ( bi , scale ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / DecimalType . java b / src / java / org / apache / cassandra / db / marshal / DecimalType . java <nl> index 56381d9 . . e98e228 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DecimalType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DecimalType . java <nl> @ @ - 35 , 6 + 35 , 15 @ @ public class DecimalType extends AbstractType < BigDecimal > <nl> <nl> public int compare ( ByteBuffer bb0 , ByteBuffer bb1 ) <nl> { <nl> + if ( bb0 . remaining ( ) = = 0 ) <nl> + { <nl> + return bb1 . remaining ( ) = = 0 ? 0 : - 1 ; <nl> + } <nl> + if ( bb1 . remaining ( ) = = 0 ) <nl> + { <nl> + return 1 ; <nl> + } <nl> + <nl> return compose ( bb0 ) . compareTo ( compose ( bb1 ) ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / DecimalTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / DecimalTypeTest . java <nl> new file mode 100644 <nl> index 0000000 . . db41083 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / DecimalTypeTest . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . db . marshal ; <nl> + <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import java . math . BigDecimal ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Arrays ; <nl> + <nl> + import org . apache . cassandra . db . marshal . DecimalType ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . junit . Test ; <nl> + <nl> + public class DecimalTypeTest <nl> + { <nl> + private static final String LOW = " 12 . 34 " ; <nl> + private static final String HIGH = " 34 . 5678 " ; <nl> + <nl> + private static BigDecimal zero = new BigDecimal ( " 0 . 0 " ) ; <nl> + private static BigDecimal minus = new BigDecimal ( " - 1 . 000001 " ) ; <nl> + private static BigDecimal low = new BigDecimal ( LOW ) ; <nl> + private static BigDecimal high = new BigDecimal ( HIGH ) ; <nl> + <nl> + @ Test <nl> + public void test1Decompose _ compose ( ) <nl> + { <nl> + ByteBuffer bb = DecimalType . instance . decompose ( low ) ; <nl> + <nl> + String string = DecimalType . instance . compose ( bb ) . toPlainString ( ) ; <nl> + <nl> + / / check that the decomposed buffer when re - composed is equal to the initial string . <nl> + assertEquals ( LOW , string ) ; <nl> + <nl> + / / check that a null argument yields an empty byte buffer <nl> + bb = DecimalType . instance . decompose ( null ) ; <nl> + assertEquals ( bb , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void test2Compare ( ) <nl> + { <nl> + ByteBuffer lowBB = DecimalType . instance . decompose ( low ) ; <nl> + ByteBuffer low2BB = DecimalType . instance . decompose ( low ) ; <nl> + ByteBuffer highBB = DecimalType . instance . decompose ( high ) ; <nl> + assertEquals ( - 1 , DecimalType . instance . compare ( lowBB , highBB ) ) ; <nl> + <nl> + lowBB = DecimalType . instance . decompose ( low ) ; <nl> + highBB = DecimalType . instance . decompose ( high ) ; <nl> + assertEquals ( 1 , DecimalType . instance . compare ( highBB , lowBB ) ) ; <nl> + <nl> + lowBB = DecimalType . instance . decompose ( low ) ; <nl> + assertEquals ( 0 , DecimalType . instance . compare ( low2BB , lowBB ) ) ; <nl> + <nl> + lowBB = DecimalType . instance . decompose ( low ) ; <nl> + assertEquals ( - 1 , DecimalType . instance . compare ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , lowBB ) ) ; <nl> + <nl> + lowBB = DecimalType . instance . decompose ( low ) ; <nl> + assertEquals ( 1 , DecimalType . instance . compare ( lowBB , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + <nl> + assertEquals ( 0 , DecimalType . instance . compare ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void test3Sort ( ) <nl> + { <nl> + ByteBuffer zeroBB = DecimalType . instance . decompose ( zero ) ; <nl> + ByteBuffer minusBB = DecimalType . instance . decompose ( minus ) ; <nl> + ByteBuffer lowBB = DecimalType . instance . decompose ( low ) ; <nl> + ByteBuffer highBB = DecimalType . instance . decompose ( high ) ; <nl> + <nl> + ByteBuffer [ ] array = { highBB , minusBB , lowBB , lowBB , zeroBB , minusBB } ; <nl> + <nl> + / / Sort the array of ByteBuffer using a DecimalType comparator <nl> + Arrays . sort ( array , DecimalType . instance ) ; <nl> + <nl> + / / Check that the array is in order <nl> + for ( int i = 1 ; i < array . length ; i + + ) <nl> + { <nl> + BigDecimal i0 = DecimalType . instance . compose ( array [ i - 1 ] ) ; <nl> + BigDecimal i1 = DecimalType . instance . compose ( array [ i ] ) ; <nl> + assertTrue ( " # " + i , i0 . compareTo ( i1 ) < = 0 ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index 321a9ca . . 60d15bb 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 425 , 6 + 425 , 7 @ @ Function SetCassandraEnvironment 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + PrintPromotionFailure " 
 # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : PrintFLSStatistics = 1 " 
 
 + New - Item - Force - ItemType directory - Path $ env : CASSANDRA _ HOME / logs / 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xloggc : " " $ env : CASSANDRA _ HOME / logs / gc . log " " " 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + UseGCLogFileRotation " 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : NumberOfGCLogFiles = 10 " 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index b519b76 . . 5d2330c 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 241 , 6 + 241 , 7 @ @ JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " 
 JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : PrintFLSStatistics = 1 " 
 
 + mkdir - p $ { CASSANDRA _ HOME } / logs / 
 JVM _ OPTS = " $ JVM _ OPTS - Xloggc : $ { CASSANDRA _ HOME } / logs / gc . log " 
 JVM _ OPTS = " $ JVM _ OPTS - XX : + UseGCLogFileRotation " 
 JVM _ OPTS = " $ JVM _ OPTS - XX : NumberOfGCLogFiles = 10 "

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e897761 . . d39c6ff 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 8 , 6 + 8 , 8 @ @ 
 Merged from 0 . 8 : 
 * acquire compactionlock during truncate ( CASSANDRA - 3399 ) 
 * fix bug that caused first column in per row indexes to be ignored ( CASSANDRA - 3441 ) 
 + * fix DecimalType bytebuffer marshalling ( CASSANDRA - 3421 ) 
 + 
 
 1 . 0 . 1 
 * acquire references during index build to prevent delete problems 
 diff - - git a / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java b / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java 
 index 8879a6b . . f97634e 100644 
 - - - a / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java 
 + + + b / src / java / org / apache / cassandra / cql / jdbc / JdbcDecimal . java 
 @ @ - 86 , 12 + 86 , 14 @ @ public class JdbcDecimal extends AbstractJdbcType < BigDecimal > 
 public BigDecimal compose ( ByteBuffer bytes ) 
 { 
 if ( bytes = = null ) return null ; 
 - 
 + 
 + / / do not consume the contents of the ByteBuffer 
 + bytes = bytes . duplicate ( ) ; 
 int scale = bytes . getInt ( ) ; 
 byte [ ] bibytes = new byte [ bytes . remaining ( ) ] ; 
 - bytes . get ( bibytes , 0 , bytes . remaining ( ) ) ; 
 + bytes . get ( bibytes ) ; 
 + 
 BigInteger bi = new BigInteger ( bibytes ) ; 
 - 
 return new BigDecimal ( bi , scale ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / DecimalType . java b / src / java / org / apache / cassandra / db / marshal / DecimalType . java 
 index 56381d9 . . e98e228 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DecimalType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DecimalType . java 
 @ @ - 35 , 6 + 35 , 15 @ @ public class DecimalType extends AbstractType < BigDecimal > 
 
 public int compare ( ByteBuffer bb0 , ByteBuffer bb1 ) 
 { 
 + if ( bb0 . remaining ( ) = = 0 ) 
 + { 
 + return bb1 . remaining ( ) = = 0 ? 0 : - 1 ; 
 + } 
 + if ( bb1 . remaining ( ) = = 0 ) 
 + { 
 + return 1 ; 
 + } 
 + 
 return compose ( bb0 ) . compareTo ( compose ( bb1 ) ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / DecimalTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / DecimalTypeTest . java 
 new file mode 100644 
 index 0000000 . . db41083 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / marshal / DecimalTypeTest . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . db . marshal ; 
 + 
 + import static org . junit . Assert . * ; 
 + 
 + import java . math . BigDecimal ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . Arrays ; 
 + 
 + import org . apache . cassandra . db . marshal . DecimalType ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . junit . Test ; 
 + 
 + public class DecimalTypeTest 
 + { 
 + private static final String LOW = " 12 . 34 " ; 
 + private static final String HIGH = " 34 . 5678 " ; 
 + 
 + private static BigDecimal zero = new BigDecimal ( " 0 . 0 " ) ; 
 + private static BigDecimal minus = new BigDecimal ( " - 1 . 000001 " ) ; 
 + private static BigDecimal low = new BigDecimal ( LOW ) ; 
 + private static BigDecimal high = new BigDecimal ( HIGH ) ; 
 + 
 + @ Test 
 + public void test1Decompose _ compose ( ) 
 + { 
 + ByteBuffer bb = DecimalType . instance . decompose ( low ) ; 
 + 
 + String string = DecimalType . instance . compose ( bb ) . toPlainString ( ) ; 
 + 
 + / / check that the decomposed buffer when re - composed is equal to the initial string . 
 + assertEquals ( LOW , string ) ; 
 + 
 + / / check that a null argument yields an empty byte buffer 
 + bb = DecimalType . instance . decompose ( null ) ; 
 + assertEquals ( bb , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + } 
 + 
 + @ Test 
 + public void test2Compare ( ) 
 + { 
 + ByteBuffer lowBB = DecimalType . instance . decompose ( low ) ; 
 + ByteBuffer low2BB = DecimalType . instance . decompose ( low ) ; 
 + ByteBuffer highBB = DecimalType . instance . decompose ( high ) ; 
 + assertEquals ( - 1 , DecimalType . instance . compare ( lowBB , highBB ) ) ; 
 + 
 + lowBB = DecimalType . instance . decompose ( low ) ; 
 + highBB = DecimalType . instance . decompose ( high ) ; 
 + assertEquals ( 1 , DecimalType . instance . compare ( highBB , lowBB ) ) ; 
 + 
 + lowBB = DecimalType . instance . decompose ( low ) ; 
 + assertEquals ( 0 , DecimalType . instance . compare ( low2BB , lowBB ) ) ; 
 + 
 + lowBB = DecimalType . instance . decompose ( low ) ; 
 + assertEquals ( - 1 , DecimalType . instance . compare ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , lowBB ) ) ; 
 + 
 + lowBB = DecimalType . instance . decompose ( low ) ; 
 + assertEquals ( 1 , DecimalType . instance . compare ( lowBB , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + 
 + assertEquals ( 0 , DecimalType . instance . compare ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 + } 
 + 
 + @ Test 
 + public void test3Sort ( ) 
 + { 
 + ByteBuffer zeroBB = DecimalType . instance . decompose ( zero ) ; 
 + ByteBuffer minusBB = DecimalType . instance . decompose ( minus ) ; 
 + ByteBuffer lowBB = DecimalType . instance . decompose ( low ) ; 
 + ByteBuffer highBB = DecimalType . instance . decompose ( high ) ; 
 + 
 + ByteBuffer [ ] array = { highBB , minusBB , lowBB , lowBB , zeroBB , minusBB } ; 
 + 
 + / / Sort the array of ByteBuffer using a DecimalType comparator 
 + Arrays . sort ( array , DecimalType . instance ) ; 
 + 
 + / / Check that the array is in order 
 + for ( int i = 1 ; i < array . length ; i + + ) 
 + { 
 + BigDecimal i0 = DecimalType . instance . compose ( array [ i - 1 ] ) ; 
 + BigDecimal i1 = DecimalType . instance . compose ( array [ i ] ) ; 
 + assertTrue ( " # " + i , i0 . compareTo ( i1 ) < = 0 ) ; 
 + } 
 + } 
 + }
