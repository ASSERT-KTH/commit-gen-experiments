BLEU SCORE: 0.040583489434387374

TEST MSG: backport 9029 to 2 . 1
GENERATED MSG: fix compile

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0593e2b . . e7689ab 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 6 <nl> + * Add support for rate limiting log messages ( CASSANDRA - 9029 ) <nl> * Log the partition key with tombstone warnings ( CASSANDRA - 8561 ) <nl> * Reduce runWithCompactionsDisabled poll interval to 1ms ( CASSANDRA - 9271 ) <nl> * Fix PITR commitlog replay ( CASSANDRA - 9195 ) <nl> diff - - git a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> index 0a5a005 . . 0d6c8b1 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> @ @ - 32 , 34 + 32 , 169 @ @ import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> import org . slf4j . Logger ; <nl> - import org . slf4j . helpers . SubstituteLogger ; <nl> + import org . slf4j . helpers . MarkerIgnoringBase ; <nl> <nl> <nl> public class NoSpamLoggerTest <nl> { <nl> Map < Level , Queue < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; <nl> <nl> - Logger mock = new SubstituteLogger ( null ) <nl> + Logger mock = new MarkerIgnoringBase ( ) <nl> { <nl> <nl> + public boolean isTraceEnabled ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void trace ( String s ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void trace ( String s , Object o ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void trace ( String s , Object o , Object o1 ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void trace ( String s , Object . . . objects ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void trace ( String s , Throwable throwable ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public boolean isDebugEnabled ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void debug ( String s ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void debug ( String s , Object o ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void debug ( String s , Object o , Object o1 ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void debug ( String s , Object . . . objects ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void debug ( String s , Throwable throwable ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public boolean isInfoEnabled ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void info ( String s ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void info ( String s , Object o ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void info ( String s , Object o , Object o1 ) <nl> + { <nl> + <nl> + } <nl> + <nl> @ Override <nl> public void info ( String statement , Object . . . args ) <nl> { <nl> logged . get ( Level . INFO ) . offer ( Pair . create ( statement , args ) ) ; <nl> } <nl> <nl> + public void info ( String s , Throwable throwable ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public boolean isWarnEnabled ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void warn ( String s ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void warn ( String s , Object o ) <nl> + { <nl> + <nl> + } <nl> + <nl> @ Override <nl> public void warn ( String statement , Object . . . args ) <nl> { <nl> logged . get ( Level . WARN ) . offer ( Pair . create ( statement , args ) ) ; <nl> } <nl> <nl> + public void warn ( String s , Object o , Object o1 ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void warn ( String s , Throwable throwable ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public boolean isErrorEnabled ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public void error ( String s ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void error ( String s , Object o ) <nl> + { <nl> + <nl> + } <nl> + <nl> + public void error ( String s , Object o , Object o1 ) <nl> + { <nl> + <nl> + } <nl> + <nl> @ Override <nl> public void error ( String statement , Object . . . args ) <nl> { <nl> logged . get ( Level . ERROR ) . offer ( Pair . create ( statement , args ) ) ; <nl> } <nl> <nl> + public void error ( String s , Throwable throwable ) <nl> + { <nl> + <nl> + } <nl> + <nl> @ Override <nl> public int hashCode ( ) <nl> { <nl> @ @ - 123 , 7 + 258 , 7 @ @ public class NoSpamLoggerTest <nl> <nl> now + = 5 ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> <nl> assertEquals ( 2 , logged . get ( l ) . size ( ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 79278aa . . b3fa1a8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * fix 1 . 0 . x node join to mixed version cluster , other nodes > = 1 . 1 ( CASSANDRA - 4195 ) <nl> * Fix LCS splitting sstable base on uncompressed size ( CASSANDRA - 4419 ) <nl> * Push the validation of secondary index values to the SecondaryIndexManager ( CASSANDRA - 4240 ) <nl> + * Don ' t purge columns during upgradesstables ( CASSANDRA - 4462 ) <nl> <nl> 1 . 0 . 10 <nl> * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 872ce0b . . 2400cfe 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 67 , 6 + 67 , 9 @ @ public class CompactionManager implements CompactionManagerMBean <nl> private static final Logger logger = LoggerFactory . getLogger ( CompactionManager . class ) ; <nl> public static final CompactionManager instance ; <nl> <nl> + public static final int NO _ GC = Integer . MIN _ VALUE ; <nl> + public static final int GC _ ALL = Integer . MAX _ VALUE ; <nl> + <nl> / * * <nl> * compactionLock has two purposes : <nl> * - Compaction acquires its readLock so that multiple compactions can happen simultaneously , <nl> @ @ - 238 , 7 + 241 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / SSTables are marked by the caller <nl> / / NOTE : it is important that the task create one and only one sstable , even for Leveled compaction ( see LeveledManifest . replace ( ) ) <nl> - CompactionTask task = new CompactionTask ( cfs , Collections . singletonList ( sstable ) , Integer . MAX _ VALUE ) ; <nl> + CompactionTask task = new CompactionTask ( cfs , Collections . singletonList ( sstable ) , NO _ GC ) ; <nl> task . isUserDefined ( true ) ; <nl> task . setCompactionType ( OperationType . UPGRADE _ SSTABLES ) ; <nl> task . execute ( executor ) ; <nl> @ @ - 974 , 7 + 977 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> static int getDefaultGcBefore ( ColumnFamilyStore cfs ) <nl> { <nl> return cfs . isIndex ( ) <nl> - ? Integer . MAX _ VALUE <nl> + ? GC _ ALL <nl> : ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0593e2b . . e7689ab 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 6 
 + * Add support for rate limiting log messages ( CASSANDRA - 9029 ) 
 * Log the partition key with tombstone warnings ( CASSANDRA - 8561 ) 
 * Reduce runWithCompactionsDisabled poll interval to 1ms ( CASSANDRA - 9271 ) 
 * Fix PITR commitlog replay ( CASSANDRA - 9195 ) 
 diff - - git a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 index 0a5a005 . . 0d6c8b1 100644 
 - - - a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 @ @ - 32 , 34 + 32 , 169 @ @ import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 import org . slf4j . Logger ; 
 - import org . slf4j . helpers . SubstituteLogger ; 
 + import org . slf4j . helpers . MarkerIgnoringBase ; 
 
 
 public class NoSpamLoggerTest 
 { 
 Map < Level , Queue < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; 
 
 - Logger mock = new SubstituteLogger ( null ) 
 + Logger mock = new MarkerIgnoringBase ( ) 
 { 
 
 + public boolean isTraceEnabled ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void trace ( String s ) 
 + { 
 + 
 + } 
 + 
 + public void trace ( String s , Object o ) 
 + { 
 + 
 + } 
 + 
 + public void trace ( String s , Object o , Object o1 ) 
 + { 
 + 
 + } 
 + 
 + public void trace ( String s , Object . . . objects ) 
 + { 
 + 
 + } 
 + 
 + public void trace ( String s , Throwable throwable ) 
 + { 
 + 
 + } 
 + 
 + public boolean isDebugEnabled ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void debug ( String s ) 
 + { 
 + 
 + } 
 + 
 + public void debug ( String s , Object o ) 
 + { 
 + 
 + } 
 + 
 + public void debug ( String s , Object o , Object o1 ) 
 + { 
 + 
 + } 
 + 
 + public void debug ( String s , Object . . . objects ) 
 + { 
 + 
 + } 
 + 
 + public void debug ( String s , Throwable throwable ) 
 + { 
 + 
 + } 
 + 
 + public boolean isInfoEnabled ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void info ( String s ) 
 + { 
 + 
 + } 
 + 
 + public void info ( String s , Object o ) 
 + { 
 + 
 + } 
 + 
 + public void info ( String s , Object o , Object o1 ) 
 + { 
 + 
 + } 
 + 
 @ Override 
 public void info ( String statement , Object . . . args ) 
 { 
 logged . get ( Level . INFO ) . offer ( Pair . create ( statement , args ) ) ; 
 } 
 
 + public void info ( String s , Throwable throwable ) 
 + { 
 + 
 + } 
 + 
 + public boolean isWarnEnabled ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void warn ( String s ) 
 + { 
 + 
 + } 
 + 
 + public void warn ( String s , Object o ) 
 + { 
 + 
 + } 
 + 
 @ Override 
 public void warn ( String statement , Object . . . args ) 
 { 
 logged . get ( Level . WARN ) . offer ( Pair . create ( statement , args ) ) ; 
 } 
 
 + public void warn ( String s , Object o , Object o1 ) 
 + { 
 + 
 + } 
 + 
 + public void warn ( String s , Throwable throwable ) 
 + { 
 + 
 + } 
 + 
 + public boolean isErrorEnabled ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public void error ( String s ) 
 + { 
 + 
 + } 
 + 
 + public void error ( String s , Object o ) 
 + { 
 + 
 + } 
 + 
 + public void error ( String s , Object o , Object o1 ) 
 + { 
 + 
 + } 
 + 
 @ Override 
 public void error ( String statement , Object . . . args ) 
 { 
 logged . get ( Level . ERROR ) . offer ( Pair . create ( statement , args ) ) ; 
 } 
 
 + public void error ( String s , Throwable throwable ) 
 + { 
 + 
 + } 
 + 
 @ Override 
 public int hashCode ( ) 
 { 
 @ @ - 123 , 7 + 258 , 7 @ @ public class NoSpamLoggerTest 
 
 now + = 5 ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 
 assertEquals ( 2 , logged . get ( l ) . size ( ) ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 79278aa . . b3fa1a8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * fix 1 . 0 . x node join to mixed version cluster , other nodes > = 1 . 1 ( CASSANDRA - 4195 ) 
 * Fix LCS splitting sstable base on uncompressed size ( CASSANDRA - 4419 ) 
 * Push the validation of secondary index values to the SecondaryIndexManager ( CASSANDRA - 4240 ) 
 + * Don ' t purge columns during upgradesstables ( CASSANDRA - 4462 ) 
 
 1 . 0 . 10 
 * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 872ce0b . . 2400cfe 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 67 , 6 + 67 , 9 @ @ public class CompactionManager implements CompactionManagerMBean 
 private static final Logger logger = LoggerFactory . getLogger ( CompactionManager . class ) ; 
 public static final CompactionManager instance ; 
 
 + public static final int NO _ GC = Integer . MIN _ VALUE ; 
 + public static final int GC _ ALL = Integer . MAX _ VALUE ; 
 + 
 / * * 
 * compactionLock has two purposes : 
 * - Compaction acquires its readLock so that multiple compactions can happen simultaneously , 
 @ @ - 238 , 7 + 241 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / SSTables are marked by the caller 
 / / NOTE : it is important that the task create one and only one sstable , even for Leveled compaction ( see LeveledManifest . replace ( ) ) 
 - CompactionTask task = new CompactionTask ( cfs , Collections . singletonList ( sstable ) , Integer . MAX _ VALUE ) ; 
 + CompactionTask task = new CompactionTask ( cfs , Collections . singletonList ( sstable ) , NO _ GC ) ; 
 task . isUserDefined ( true ) ; 
 task . setCompactionType ( OperationType . UPGRADE _ SSTABLES ) ; 
 task . execute ( executor ) ; 
 @ @ - 974 , 7 + 977 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 static int getDefaultGcBefore ( ColumnFamilyStore cfs ) 
 { 
 return cfs . isIndex ( ) 
 - ? Integer . MAX _ VALUE 
 + ? GC _ ALL 
 : ( int ) ( System . currentTimeMillis ( ) / 1000 ) - cfs . metadata . getGcGraceSeconds ( ) ; 
 } 

