BLEU SCORE: 0.09287528999566796

TEST MSG: Randomize batchlog endpoint selection with only 1 or 2 racks
GENERATED MSG: Use random nodes for batch log when only 2 racks

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2e9e8ad . . 358dd04 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Randomize batchlog endpoint selection with only 1 or 2 racks ( CASSANDRA - 12884 ) <nl> * Fix digest calculation for counter cells ( CASSANDRA - 13750 ) <nl> * Fix ColumnDefinition . cellValueType ( ) for non - frozen collection and change SSTabledump to use type . toJSONString ( ) ( CASSANDRA - 13573 ) <nl> * Skip materialized view addition if the base table doesn ' t exist ( CASSANDRA - 13737 ) <nl> diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> index f5133bb . . b614fc5 100644 <nl> - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> @ @ - 523 , 9 + 523 , 14 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> <nl> if ( validated . keySet ( ) . size ( ) = = 1 ) <nl> { <nl> - / / we have only 1 ` other ` rack <nl> - Collection < InetAddress > otherRack = Iterables . getOnlyElement ( validated . asMap ( ) . values ( ) ) ; <nl> - return Lists . newArrayList ( Iterables . limit ( otherRack , 2 ) ) ; <nl> + / * <nl> + * we have only 1 ` other ` rack to select replicas from ( whether it be the local rack or a single non - local rack ) <nl> + * pick two random nodes from there ; we are guaranteed to have at least two nodes in the single remaining rack <nl> + * because of the preceding if block . <nl> + * / <nl> + List < InetAddress > otherRack = Lists . newArrayList ( validated . values ( ) ) ; <nl> + shuffle ( otherRack ) ; <nl> + return otherRack . subList ( 0 , 2 ) ; <nl> } <nl> <nl> / / randomize which racks we pick from if more than 2 remaining <nl> @ @ - 537 , 7 + 542 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> else <nl> { <nl> racks = Lists . newArrayList ( validated . keySet ( ) ) ; <nl> - Collections . shuffle ( ( List < String > ) racks ) ; <nl> + shuffle ( ( List < String > ) racks ) ; <nl> } <nl> <nl> / / grab a random member of up to two racks <nl> @ @ - 562 , 5 + 567 , 11 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> { <nl> return ThreadLocalRandom . current ( ) . nextInt ( bound ) ; <nl> } <nl> + <nl> + @ VisibleForTesting <nl> + protected void shuffle ( List < ? > list ) <nl> + { <nl> + Collections . shuffle ( list ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java b / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java <nl> index 23aeaaa . . 7db1cfa 100644 <nl> - - - a / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java <nl> + + + b / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java <nl> @ @ - 20 , 7 + 20 , 9 @ @ package org . apache . cassandra . batchlog ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . HashSet ; <nl> + import java . util . List ; <nl> <nl> import com . google . common . collect . ImmutableMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 87 , 8 + 89 , 28 @ @ public class BatchlogEndpointFilterTest <nl> . put ( " 1 " , InetAddress . getByName ( " 111 " ) ) <nl> . build ( ) ; <nl> Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; <nl> - / / result should contain random two distinct values <nl> - assertThat ( new HashSet < > ( result ) . size ( ) , is ( 2 ) ) ; <nl> + / / result should be the last two non - local replicas <nl> + / / ( Collections . shuffle has been replaced with Collections . reverse for testing ) <nl> + assertThat ( result . size ( ) , is ( 2 ) ) ; <nl> + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 11 " ) ) ) ; <nl> + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 111 " ) ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void shouldSelectTwoRandomHostsFromSingleRack ( ) throws UnknownHostException <nl> + { <nl> + Multimap < String , InetAddress > endpoints = ImmutableMultimap . < String , InetAddress > builder ( ) <nl> + . put ( LOCAL , InetAddress . getByName ( " 1 " ) ) <nl> + . put ( LOCAL , InetAddress . getByName ( " 11 " ) ) <nl> + . put ( LOCAL , InetAddress . getByName ( " 111 " ) ) <nl> + . put ( LOCAL , InetAddress . getByName ( " 1111 " ) ) <nl> + . build ( ) ; <nl> + Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; <nl> + / / result should be the last two non - local replicas <nl> + / / ( Collections . shuffle has been replaced with Collections . reverse for testing ) <nl> + assertThat ( result . size ( ) , is ( 2 ) ) ; <nl> + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 111 " ) ) ) ; <nl> + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 1111 " ) ) ) ; <nl> } <nl> <nl> private static class TestEndpointFilter extends BatchlogManager . EndpointFilter <nl> @ @ - 111 , 5 + 133 , 12 @ @ public class BatchlogEndpointFilterTest <nl> / / We don ' t need random behavior here <nl> return bound - 1 ; <nl> } <nl> + <nl> + @ Override <nl> + protected void shuffle ( List < ? > list ) <nl> + { <nl> + / / We don ' t need random behavior here <nl> + Collections . reverse ( list ) ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2e9e8ad . . 358dd04 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Randomize batchlog endpoint selection with only 1 or 2 racks ( CASSANDRA - 12884 ) 
 * Fix digest calculation for counter cells ( CASSANDRA - 13750 ) 
 * Fix ColumnDefinition . cellValueType ( ) for non - frozen collection and change SSTabledump to use type . toJSONString ( ) ( CASSANDRA - 13573 ) 
 * Skip materialized view addition if the base table doesn ' t exist ( CASSANDRA - 13737 ) 
 diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 index f5133bb . . b614fc5 100644 
 - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 @ @ - 523 , 9 + 523 , 14 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 
 if ( validated . keySet ( ) . size ( ) = = 1 ) 
 { 
 - / / we have only 1 ` other ` rack 
 - Collection < InetAddress > otherRack = Iterables . getOnlyElement ( validated . asMap ( ) . values ( ) ) ; 
 - return Lists . newArrayList ( Iterables . limit ( otherRack , 2 ) ) ; 
 + / * 
 + * we have only 1 ` other ` rack to select replicas from ( whether it be the local rack or a single non - local rack ) 
 + * pick two random nodes from there ; we are guaranteed to have at least two nodes in the single remaining rack 
 + * because of the preceding if block . 
 + * / 
 + List < InetAddress > otherRack = Lists . newArrayList ( validated . values ( ) ) ; 
 + shuffle ( otherRack ) ; 
 + return otherRack . subList ( 0 , 2 ) ; 
 } 
 
 / / randomize which racks we pick from if more than 2 remaining 
 @ @ - 537 , 7 + 542 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 else 
 { 
 racks = Lists . newArrayList ( validated . keySet ( ) ) ; 
 - Collections . shuffle ( ( List < String > ) racks ) ; 
 + shuffle ( ( List < String > ) racks ) ; 
 } 
 
 / / grab a random member of up to two racks 
 @ @ - 562 , 5 + 567 , 11 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 { 
 return ThreadLocalRandom . current ( ) . nextInt ( bound ) ; 
 } 
 + 
 + @ VisibleForTesting 
 + protected void shuffle ( List < ? > list ) 
 + { 
 + Collections . shuffle ( list ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java b / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java 
 index 23aeaaa . . 7db1cfa 100644 
 - - - a / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java 
 + + + b / test / unit / org / apache / cassandra / batchlog / BatchlogEndpointFilterTest . java 
 @ @ - 20 , 7 + 20 , 9 @ @ package org . apache . cassandra . batchlog ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . HashSet ; 
 + import java . util . List ; 
 
 import com . google . common . collect . ImmutableMultimap ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 87 , 8 + 89 , 28 @ @ public class BatchlogEndpointFilterTest 
 . put ( " 1 " , InetAddress . getByName ( " 111 " ) ) 
 . build ( ) ; 
 Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; 
 - / / result should contain random two distinct values 
 - assertThat ( new HashSet < > ( result ) . size ( ) , is ( 2 ) ) ; 
 + / / result should be the last two non - local replicas 
 + / / ( Collections . shuffle has been replaced with Collections . reverse for testing ) 
 + assertThat ( result . size ( ) , is ( 2 ) ) ; 
 + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 11 " ) ) ) ; 
 + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 111 " ) ) ) ; 
 + } 
 + 
 + @ Test 
 + public void shouldSelectTwoRandomHostsFromSingleRack ( ) throws UnknownHostException 
 + { 
 + Multimap < String , InetAddress > endpoints = ImmutableMultimap . < String , InetAddress > builder ( ) 
 + . put ( LOCAL , InetAddress . getByName ( " 1 " ) ) 
 + . put ( LOCAL , InetAddress . getByName ( " 11 " ) ) 
 + . put ( LOCAL , InetAddress . getByName ( " 111 " ) ) 
 + . put ( LOCAL , InetAddress . getByName ( " 1111 " ) ) 
 + . build ( ) ; 
 + Collection < InetAddress > result = new TestEndpointFilter ( LOCAL , endpoints ) . filter ( ) ; 
 + / / result should be the last two non - local replicas 
 + / / ( Collections . shuffle has been replaced with Collections . reverse for testing ) 
 + assertThat ( result . size ( ) , is ( 2 ) ) ; 
 + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 111 " ) ) ) ; 
 + assertThat ( result , JUnitMatchers . hasItem ( InetAddress . getByName ( " 1111 " ) ) ) ; 
 } 
 
 private static class TestEndpointFilter extends BatchlogManager . EndpointFilter 
 @ @ - 111 , 5 + 133 , 12 @ @ public class BatchlogEndpointFilterTest 
 / / We don ' t need random behavior here 
 return bound - 1 ; 
 } 
 + 
 + @ Override 
 + protected void shuffle ( List < ? > list ) 
 + { 
 + / / We don ' t need random behavior here 
 + Collections . reverse ( list ) ; 
 + } 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
