BLEU SCORE: 0.037477767366779206

TEST MSG: Add command to get / set the number of concurrent compactors
GENERATED MSG: add getPendingTasks to CommitLogExecutorService

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f9fed90 . . 0a7f9b0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Tune compaction thread count via nodetool ( CASSANDRA - 12248 ) <nl> * Add + = / - = shortcut syntax for update queries ( CASSANDRA - 12232 ) <nl> * Include repair session IDs in repair start message ( CASSANDRA - 12532 ) <nl> * Add a blocking task to Index , run before joining the ring ( CASSANDRA - 12039 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 4bcb197 . . ad0f2be 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 18 , 6 + 18 , 7 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> New features <nl> - - - - - - - - - - - - <nl> + - Runtime modification of concurrent _ compactors is now available via nodetool <nl> - Support for the assignment operators + = / - = has been added for update queries . <nl> - An Index implementation may now provide a task which runs prior to joining <nl> the ring . See CASSANDRA - 12039 <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index e6b3638 . . 35a17a5 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 176 , 7 + 176 , 7 @ @ public class Config <nl> public volatile int batch _ size _ warn _ threshold _ in _ kb = 5 ; <nl> public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; <nl> public Integer unlogged _ batch _ across _ partitions _ warn _ threshold = 10 ; <nl> - public Integer concurrent _ compactors ; <nl> + public volatile Integer concurrent _ compactors ; <nl> public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; <nl> public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; <nl> public Integer min _ free _ space _ per _ drive _ in _ mb = 50 ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 963d564 . . 880cb1e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1495 , 6 + 1495 , 11 @ @ public class DatabaseDescriptor <nl> return conf . concurrent _ compactors ; <nl> } <nl> <nl> + public static void setConcurrentCompactors ( int value ) <nl> + { <nl> + conf . concurrent _ compactors = value ; <nl> + } <nl> + <nl> public static int getCompactionThroughputMbPerSec ( ) <nl> { <nl> return conf . compaction _ throughput _ mb _ per _ sec ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 27058d2 . . bad0bdf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 1863 , 6 + 1863 , 12 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> <nl> + public void setConcurrentCompactors ( int value ) <nl> + { <nl> + executor . setCorePoolSize ( value ) ; <nl> + executor . setMaximumPoolSize ( value ) ; <nl> + } <nl> + <nl> public int getCoreCompactorThreads ( ) <nl> { <nl> return executor . getCorePoolSize ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 4f11800 . . 2e982ed 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1414 , 6 + 1414 , 19 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> CompactionManager . instance . setRate ( value ) ; <nl> } <nl> <nl> + public int getConcurrentCompactors ( ) <nl> + { <nl> + return DatabaseDescriptor . getConcurrentCompactors ( ) ; <nl> + } <nl> + <nl> + public void setConcurrentCompactors ( int value ) <nl> + { <nl> + if ( value < = 0 ) <nl> + throw new IllegalArgumentException ( " Number of concurrent compactors should be greater than 0 . " ) ; <nl> + DatabaseDescriptor . setConcurrentCompactors ( value ) ; <nl> + CompactionManager . instance . setConcurrentCompactors ( value ) ; <nl> + } <nl> + <nl> public boolean isIncrementalBackupsEnabled ( ) <nl> { <nl> return DatabaseDescriptor . isIncrementalBackupsEnabled ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> index 527417c . . 2243a96 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java <nl> @ @ - 560 , 6 + 560 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter <nl> public int getCompactionThroughputMbPerSec ( ) ; <nl> public void setCompactionThroughputMbPerSec ( int value ) ; <nl> <nl> + public int getConcurrentCompactors ( ) ; <nl> + public void setConcurrentCompactors ( int value ) ; <nl> + <nl> public boolean isIncrementalBackupsEnabled ( ) ; <nl> public void setIncrementalBackupsEnabled ( boolean value ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 5d6dff0 . . ed23c04 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 994 , 6 + 994 , 16 @ @ public class NodeProbe implements AutoCloseable <nl> return ssProxy . getCompactionThroughputMbPerSec ( ) ; <nl> } <nl> <nl> + public void setConcurrentCompactors ( int value ) <nl> + { <nl> + ssProxy . setConcurrentCompactors ( value ) ; <nl> + } <nl> + <nl> + public int getConcurrentCompactors ( ) <nl> + { <nl> + return ssProxy . getConcurrentCompactors ( ) ; <nl> + } <nl> + <nl> public long getTimeout ( String type ) <nl> { <nl> switch ( type ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> index cde4ee5 . . 23e6df3 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeTool . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeTool . java <nl> @ @ - 105 , 6 + 105 , 8 @ @ public class NodeTool <nl> SetHintedHandoffThrottleInKB . class , <nl> SetCompactionThreshold . class , <nl> SetCompactionThroughput . class , <nl> + GetConcurrentCompactors . class , <nl> + SetConcurrentCompactors . class , <nl> SetTimeout . class , <nl> SetStreamThroughput . class , <nl> SetInterDCStreamThroughput . class , <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetConcurrentCompactors . java b / src / java / org / apache / cassandra / tools / nodetool / GetConcurrentCompactors . java <nl> new file mode 100644 <nl> index 0000000 . . 8f4d5e4 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / GetConcurrentCompactors . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import io . airlift . command . Command ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> + <nl> + @ Command ( name = " getconcurrentcompactors " , description = " Get the number of concurrent compactors in the system . " ) <nl> + public class GetConcurrentCompactors extends NodeToolCmd <nl> + { <nl> + protected void execute ( NodeProbe probe ) <nl> + { <nl> + System . out . println ( " Current concurrent compactors in the system is : \ n " + <nl> + probe . getConcurrentCompactors ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / SetConcurrentCompactors . java b / src / java / org / apache / cassandra / tools / nodetool / SetConcurrentCompactors . java <nl> new file mode 100644 <nl> index 0000000 . . 56fafe1 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / SetConcurrentCompactors . java <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . tools . nodetool ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkArgument ; <nl> + import io . airlift . command . Arguments ; <nl> + import io . airlift . command . Command ; <nl> + import org . apache . cassandra . tools . NodeProbe ; <nl> + import org . apache . cassandra . tools . NodeTool ; <nl> + <nl> + @ Command ( name = " setconcurrentcompactors " , description = " Set number of concurrent compactors in the system . " ) <nl> + public class SetConcurrentCompactors extends NodeTool . NodeToolCmd <nl> + { <nl> + @ Arguments ( title = " concurrent _ compactors " , usage = " < value > " , description = " Number of concurrent compactors , greater than 0 . " , required = true ) <nl> + private Integer concurrentCompactors = null ; <nl> + <nl> + protected void execute ( NodeProbe probe ) <nl> + { <nl> + checkArgument ( concurrentCompactors > 0 , " concurrent _ compactors should be great than 0 . " ) ; <nl> + probe . setConcurrentCompactors ( concurrentCompactors ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 21d8979 . . 0565fce 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 18 , 20 + 18 , 17 @ @ <nl> <nl> package org . apache . cassandra . concurrent ; <nl> <nl> - import java . util . concurrent . * ; <nl> import java . lang . management . ManagementFactory ; <nl> - <nl> - import org . apache . log4j . Logger ; <nl> - <nl> + import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> + import org . apache . log4j . Logger ; <nl> + <nl> / * * <nl> * This is a wrapper class for the < i > ScheduledThreadPoolExecutor < / i > . It provides an implementation <nl> * for the < i > afterExecute ( ) < / i > found in the < i > ThreadPoolExecutor < / i > class to log any unexpected <nl> * Runtime Exceptions . <nl> - * <nl> - * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> * / <nl> <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> @ @ - 53 , 6 + 50 , 7 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> { <nl> super ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , threadFactory ) ; <nl> super . prestartAllCoreThreads ( ) ; <nl> + <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> try <nl> { <nl> @ @ - 64 , 19 + 62 , 6 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> - <nl> - public void unregisterMBean ( ) <nl> - { <nl> - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> - try <nl> - { <nl> - mbs . unregisterMBean ( objName ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> <nl> public long getPendingTasks ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java <nl> index 4c6abcc . . ee374a8 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . concurrent ; <nl> <nl> - public interface DebuggableThreadPoolExecutorMBean <nl> + public interface DebuggableThreadPoolExecutorMBean extends IExecutorMBean <nl> { <nl> - public long getPendingTasks ( ) ; <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / IExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / IExecutorMBean . java <nl> new file mode 100644 <nl> index 0000000 . . d964af3 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / concurrent / IExecutorMBean . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . concurrent ; <nl> + <nl> + public interface IExecutorMBean <nl> + { <nl> + public long getPendingTasks ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / CommitLogExecutorService . java b / src / java / org / apache / cassandra / db / CommitLogExecutorService . java <nl> index 2cfb72f . . 789cc75 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CommitLogExecutorService . java <nl> + + + b / src / java / org / apache / cassandra / db / CommitLogExecutorService . java <nl> @ @ - 21 , 14 + 21 , 17 @ @ package org . apache . cassandra . db ; <nl> * / <nl> <nl> <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - <nl> import java . io . IOException ; <nl> + import java . lang . management . ManagementFactory ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . concurrent . * ; <nl> + import javax . management . MBeanServer ; <nl> + import javax . management . ObjectName ; <nl> + <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> <nl> - public class CommitLogExecutorService extends AbstractExecutorService <nl> + public class CommitLogExecutorService extends AbstractExecutorService implements CommitLogExecutorServiceMBean <nl> { <nl> BlockingQueue < CheaterFutureTask > queue ; <nl> <nl> @ @ - 63 , 6 + 66 , 20 @ @ public class CommitLogExecutorService extends AbstractExecutorService <nl> } <nl> } ; <nl> new Thread ( runnable ) . start ( ) ; <nl> + <nl> + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + try <nl> + { <nl> + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = COMMITLOG " ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public long getPendingTasks ( ) { <nl> + return queue . size ( ) ; <nl> } <nl> <nl> private void process ( ) throws InterruptedException <nl> diff - - git a / src / java / org / apache / cassandra / db / CommitLogExecutorServiceMBean . java b / src / java / org / apache / cassandra / db / CommitLogExecutorServiceMBean . java <nl> new file mode 100644 <nl> index 0000000 . . 2da2699 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / CommitLogExecutorServiceMBean . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import org . apache . cassandra . concurrent . IExecutorMBean ; <nl> + <nl> + public interface CommitLogExecutorServiceMBean extends IExecutorMBean <nl> + { <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index c09d55e . . 7f92079 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ import javax . management . remote . JMXConnector ; <nl> import javax . management . remote . JMXConnectorFactory ; <nl> import javax . management . remote . JMXServiceURL ; <nl> <nl> - import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutorMBean ; <nl> + import org . apache . cassandra . concurrent . IExecutorMBean ; <nl> import org . apache . cassandra . db . ColumnFamilyStoreMBean ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> @ @ - 468 , 9 + 468 , 7 @ @ public class NodeProbe <nl> for ( ObjectName objectName : result ) <nl> { <nl> String poolName = objectName . getKeyProperty ( " type " ) ; <nl> - DebuggableThreadPoolExecutorMBean threadPoolProxy = JMX . newMBeanProxy ( mbeanServerConn , <nl> - objectName , <nl> - DebuggableThreadPoolExecutorMBean . class ) ; <nl> + IExecutorMBean threadPoolProxy = JMX . newMBeanProxy ( mbeanServerConn , objectName , IExecutorMBean . class ) ; <nl> outs . println ( poolName + " , pending tasks = " + threadPoolProxy . getPendingTasks ( ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f9fed90 . . 0a7f9b0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Tune compaction thread count via nodetool ( CASSANDRA - 12248 ) 
 * Add + = / - = shortcut syntax for update queries ( CASSANDRA - 12232 ) 
 * Include repair session IDs in repair start message ( CASSANDRA - 12532 ) 
 * Add a blocking task to Index , run before joining the ring ( CASSANDRA - 12039 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 4bcb197 . . ad0f2be 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 18 , 6 + 18 , 7 @ @ using the provided ' sstableupgrade ' tool . 
 
 New features 
 - - - - - - - - - - - - 
 + - Runtime modification of concurrent _ compactors is now available via nodetool 
 - Support for the assignment operators + = / - = has been added for update queries . 
 - An Index implementation may now provide a task which runs prior to joining 
 the ring . See CASSANDRA - 12039 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index e6b3638 . . 35a17a5 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 176 , 7 + 176 , 7 @ @ public class Config 
 public volatile int batch _ size _ warn _ threshold _ in _ kb = 5 ; 
 public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; 
 public Integer unlogged _ batch _ across _ partitions _ warn _ threshold = 10 ; 
 - public Integer concurrent _ compactors ; 
 + public volatile Integer concurrent _ compactors ; 
 public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; 
 public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; 
 public Integer min _ free _ space _ per _ drive _ in _ mb = 50 ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 963d564 . . 880cb1e 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1495 , 6 + 1495 , 11 @ @ public class DatabaseDescriptor 
 return conf . concurrent _ compactors ; 
 } 
 
 + public static void setConcurrentCompactors ( int value ) 
 + { 
 + conf . concurrent _ compactors = value ; 
 + } 
 + 
 public static int getCompactionThroughputMbPerSec ( ) 
 { 
 return conf . compaction _ throughput _ mb _ per _ sec ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 27058d2 . . bad0bdf 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 1863 , 6 + 1863 , 12 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 
 + public void setConcurrentCompactors ( int value ) 
 + { 
 + executor . setCorePoolSize ( value ) ; 
 + executor . setMaximumPoolSize ( value ) ; 
 + } 
 + 
 public int getCoreCompactorThreads ( ) 
 { 
 return executor . getCorePoolSize ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 4f11800 . . 2e982ed 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1414 , 6 + 1414 , 19 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 CompactionManager . instance . setRate ( value ) ; 
 } 
 
 + public int getConcurrentCompactors ( ) 
 + { 
 + return DatabaseDescriptor . getConcurrentCompactors ( ) ; 
 + } 
 + 
 + public void setConcurrentCompactors ( int value ) 
 + { 
 + if ( value < = 0 ) 
 + throw new IllegalArgumentException ( " Number of concurrent compactors should be greater than 0 . " ) ; 
 + DatabaseDescriptor . setConcurrentCompactors ( value ) ; 
 + CompactionManager . instance . setConcurrentCompactors ( value ) ; 
 + } 
 + 
 public boolean isIncrementalBackupsEnabled ( ) 
 { 
 return DatabaseDescriptor . isIncrementalBackupsEnabled ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageServiceMBean . java b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 index 527417c . . 2243a96 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageServiceMBean . java 
 @ @ - 560 , 6 + 560 , 9 @ @ public interface StorageServiceMBean extends NotificationEmitter 
 public int getCompactionThroughputMbPerSec ( ) ; 
 public void setCompactionThroughputMbPerSec ( int value ) ; 
 
 + public int getConcurrentCompactors ( ) ; 
 + public void setConcurrentCompactors ( int value ) ; 
 + 
 public boolean isIncrementalBackupsEnabled ( ) ; 
 public void setIncrementalBackupsEnabled ( boolean value ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 5d6dff0 . . ed23c04 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 994 , 6 + 994 , 16 @ @ public class NodeProbe implements AutoCloseable 
 return ssProxy . getCompactionThroughputMbPerSec ( ) ; 
 } 
 
 + public void setConcurrentCompactors ( int value ) 
 + { 
 + ssProxy . setConcurrentCompactors ( value ) ; 
 + } 
 + 
 + public int getConcurrentCompactors ( ) 
 + { 
 + return ssProxy . getConcurrentCompactors ( ) ; 
 + } 
 + 
 public long getTimeout ( String type ) 
 { 
 switch ( type ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeTool . java b / src / java / org / apache / cassandra / tools / NodeTool . java 
 index cde4ee5 . . 23e6df3 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeTool . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeTool . java 
 @ @ - 105 , 6 + 105 , 8 @ @ public class NodeTool 
 SetHintedHandoffThrottleInKB . class , 
 SetCompactionThreshold . class , 
 SetCompactionThroughput . class , 
 + GetConcurrentCompactors . class , 
 + SetConcurrentCompactors . class , 
 SetTimeout . class , 
 SetStreamThroughput . class , 
 SetInterDCStreamThroughput . class , 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / GetConcurrentCompactors . java b / src / java / org / apache / cassandra / tools / nodetool / GetConcurrentCompactors . java 
 new file mode 100644 
 index 0000000 . . 8f4d5e4 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / GetConcurrentCompactors . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import io . airlift . command . Command ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 + 
 + @ Command ( name = " getconcurrentcompactors " , description = " Get the number of concurrent compactors in the system . " ) 
 + public class GetConcurrentCompactors extends NodeToolCmd 
 + { 
 + protected void execute ( NodeProbe probe ) 
 + { 
 + System . out . println ( " Current concurrent compactors in the system is : \ n " + 
 + probe . getConcurrentCompactors ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / SetConcurrentCompactors . java b / src / java / org / apache / cassandra / tools / nodetool / SetConcurrentCompactors . java 
 new file mode 100644 
 index 0000000 . . 56fafe1 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / SetConcurrentCompactors . java 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . tools . nodetool ; 
 + 
 + import static com . google . common . base . Preconditions . checkArgument ; 
 + import io . airlift . command . Arguments ; 
 + import io . airlift . command . Command ; 
 + import org . apache . cassandra . tools . NodeProbe ; 
 + import org . apache . cassandra . tools . NodeTool ; 
 + 
 + @ Command ( name = " setconcurrentcompactors " , description = " Set number of concurrent compactors in the system . " ) 
 + public class SetConcurrentCompactors extends NodeTool . NodeToolCmd 
 + { 
 + @ Arguments ( title = " concurrent _ compactors " , usage = " < value > " , description = " Number of concurrent compactors , greater than 0 . " , required = true ) 
 + private Integer concurrentCompactors = null ; 
 + 
 + protected void execute ( NodeProbe probe ) 
 + { 
 + checkArgument ( concurrentCompactors > 0 , " concurrent _ compactors should be great than 0 . " ) ; 
 + probe . setConcurrentCompactors ( concurrentCompactors ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 21d8979 . . 0565fce 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 18 , 20 + 18 , 17 @ @ 
 
 package org . apache . cassandra . concurrent ; 
 
 - import java . util . concurrent . * ; 
 import java . lang . management . ManagementFactory ; 
 - 
 - import org . apache . log4j . Logger ; 
 - 
 + import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 + import org . apache . log4j . Logger ; 
 + 
 / * * 
 * This is a wrapper class for the < i > ScheduledThreadPoolExecutor < / i > . It provides an implementation 
 * for the < i > afterExecute ( ) < / i > found in the < i > ThreadPoolExecutor < / i > class to log any unexpected 
 * Runtime Exceptions . 
 - * 
 - * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 * / 
 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 @ @ - 53 , 6 + 50 , 7 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 { 
 super ( corePoolSize , maximumPoolSize , keepAliveTime , unit , workQueue , threadFactory ) ; 
 super . prestartAllCoreThreads ( ) ; 
 + 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 try 
 { 
 @ @ - 64 , 19 + 62 , 6 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 - 
 - public void unregisterMBean ( ) 
 - { 
 - MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 - try 
 - { 
 - mbs . unregisterMBean ( objName ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 
 public long getPendingTasks ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java 
 index 4c6abcc . . ee374a8 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutorMBean . java 
 @ @ - 18 , 7 + 18 , 6 @ @ 
 * / 
 package org . apache . cassandra . concurrent ; 
 
 - public interface DebuggableThreadPoolExecutorMBean 
 + public interface DebuggableThreadPoolExecutorMBean extends IExecutorMBean 
 { 
 - public long getPendingTasks ( ) ; 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / concurrent / IExecutorMBean . java b / src / java / org / apache / cassandra / concurrent / IExecutorMBean . java 
 new file mode 100644 
 index 0000000 . . d964af3 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / concurrent / IExecutorMBean . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . concurrent ; 
 + 
 + public interface IExecutorMBean 
 + { 
 + public long getPendingTasks ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / CommitLogExecutorService . java b / src / java / org / apache / cassandra / db / CommitLogExecutorService . java 
 index 2cfb72f . . 789cc75 100644 
 - - - a / src / java / org / apache / cassandra / db / CommitLogExecutorService . java 
 + + + b / src / java / org / apache / cassandra / db / CommitLogExecutorService . java 
 @ @ - 21 , 14 + 21 , 17 @ @ package org . apache . cassandra . db ; 
 * / 
 
 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - 
 import java . io . IOException ; 
 + import java . lang . management . ManagementFactory ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . concurrent . * ; 
 + import javax . management . MBeanServer ; 
 + import javax . management . ObjectName ; 
 + 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 
 - public class CommitLogExecutorService extends AbstractExecutorService 
 + public class CommitLogExecutorService extends AbstractExecutorService implements CommitLogExecutorServiceMBean 
 { 
 BlockingQueue < CheaterFutureTask > queue ; 
 
 @ @ - 63 , 6 + 66 , 20 @ @ public class CommitLogExecutorService extends AbstractExecutorService 
 } 
 } ; 
 new Thread ( runnable ) . start ( ) ; 
 + 
 + MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + try 
 + { 
 + mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = COMMITLOG " ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + public long getPendingTasks ( ) { 
 + return queue . size ( ) ; 
 } 
 
 private void process ( ) throws InterruptedException 
 diff - - git a / src / java / org / apache / cassandra / db / CommitLogExecutorServiceMBean . java b / src / java / org / apache / cassandra / db / CommitLogExecutorServiceMBean . java 
 new file mode 100644 
 index 0000000 . . 2da2699 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / CommitLogExecutorServiceMBean . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . db ; 
 + 
 + import org . apache . cassandra . concurrent . IExecutorMBean ; 
 + 
 + public interface CommitLogExecutorServiceMBean extends IExecutorMBean 
 + { 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index c09d55e . . 7f92079 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 39 , 7 + 39 , 7 @ @ import javax . management . remote . JMXConnector ; 
 import javax . management . remote . JMXConnectorFactory ; 
 import javax . management . remote . JMXServiceURL ; 
 
 - import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutorMBean ; 
 + import org . apache . cassandra . concurrent . IExecutorMBean ; 
 import org . apache . cassandra . db . ColumnFamilyStoreMBean ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . net . EndPoint ; 
 @ @ - 468 , 9 + 468 , 7 @ @ public class NodeProbe 
 for ( ObjectName objectName : result ) 
 { 
 String poolName = objectName . getKeyProperty ( " type " ) ; 
 - DebuggableThreadPoolExecutorMBean threadPoolProxy = JMX . newMBeanProxy ( mbeanServerConn , 
 - objectName , 
 - DebuggableThreadPoolExecutorMBean . class ) ; 
 + IExecutorMBean threadPoolProxy = JMX . newMBeanProxy ( mbeanServerConn , objectName , IExecutorMBean . class ) ; 
 outs . println ( poolName + " , pending tasks = " + threadPoolProxy . getPendingTasks ( ) ) ; 
 } 
 }
