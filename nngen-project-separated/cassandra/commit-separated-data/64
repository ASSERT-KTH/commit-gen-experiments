BLEU SCORE: 0.03283637368030199

TEST MSG: ninja : fix precondition for unclustered tables
GENERATED MSG: r / m unused EmptyCompactionScanner

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> index f48d0a6 . . 437d80f 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . utils . StreamingHistogram ; <nl> public class MetadataCollector implements PartitionStatisticsCollector <nl> { <nl> public static final double NO _ COMPRESSION _ RATIO = - 1 . 0 ; <nl> + private static final ByteBuffer [ ] EMPTY _ CLUSTERING = new ByteBuffer [ 0 ] ; <nl> <nl> static EstimatedHistogram defaultCellPerPartitionCountHistogram ( ) <nl> { <nl> @ @ - 95 , 8 + 96 , 8 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> protected double compressionRatio = NO _ COMPRESSION _ RATIO ; <nl> protected StreamingHistogram . StreamingHistogramBuilder estimatedTombstoneDropTime = defaultTombstoneDropTimeHistogramBuilder ( ) ; <nl> protected int sstableLevel ; <nl> - private ClusteringPrefix minClustering = Slice . Bound . TOP ; <nl> - private ClusteringPrefix maxClustering = Slice . Bound . BOTTOM ; <nl> + private ClusteringPrefix minClustering = null ; <nl> + private ClusteringPrefix maxClustering = null ; <nl> protected boolean hasLegacyCounterShards = false ; <nl> protected long totalColumnsSet ; <nl> protected long totalRows ; <nl> @ @ - 228 , 8 + 229 , 8 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> <nl> public MetadataCollector updateClusteringValues ( ClusteringPrefix clustering ) <nl> { <nl> - minClustering = comparator . compare ( clustering , minClustering ) < 0 ? clustering : minClustering ; <nl> - maxClustering = comparator . compare ( clustering , maxClustering ) > 0 ? clustering : maxClustering ; <nl> + minClustering = minClustering = = null | | comparator . compare ( clustering , minClustering ) < 0 ? clustering : minClustering ; <nl> + maxClustering = maxClustering = = null | | comparator . compare ( clustering , maxClustering ) > 0 ? clustering : maxClustering ; <nl> return this ; <nl> } <nl> <nl> @ @ - 271 , 7 + 272 , 10 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> <nl> public Map < MetadataType , MetadataComponent > finalizeMetadata ( String partitioner , double bloomFilterFPChance , long repairedAt , SerializationHeader header ) <nl> { <nl> - Preconditions . checkState ( comparator . compare ( maxClustering , minClustering ) > = 0 ) ; <nl> + Preconditions . checkState ( ( minClustering = = null & & maxClustering = = null ) <nl> + | | comparator . compare ( maxClustering , minClustering ) > = 0 ) ; <nl> + ByteBuffer [ ] minValues = minClustering ! = null ? minClustering . getRawValues ( ) : EMPTY _ CLUSTERING ; <nl> + ByteBuffer [ ] maxValues = maxClustering ! = null ? maxClustering . getRawValues ( ) : EMPTY _ CLUSTERING ; <nl> Map < MetadataType , MetadataComponent > components = Maps . newHashMap ( ) ; <nl> components . put ( MetadataType . VALIDATION , new ValidationMetadata ( partitioner , bloomFilterFPChance ) ) ; <nl> components . put ( MetadataType . STATS , new StatsMetadata ( estimatedPartitionSize , <nl> @ @ - 286 , 8 + 290 , 8 @ @ public class MetadataCollector implements PartitionStatisticsCollector <nl> compressionRatio , <nl> estimatedTombstoneDropTime . build ( ) , <nl> sstableLevel , <nl> - makeList ( minClustering . getRawValues ( ) ) , <nl> - makeList ( maxClustering . getRawValues ( ) ) , <nl> + makeList ( minValues ) , <nl> + makeList ( maxValues ) , <nl> hasLegacyCounterShards , <nl> repairedAt , <nl> totalColumnsSet ,
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java <nl> index 8aec501 . . 5cc3998 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Message . java <nl> + + + b / src / java / org / apache / cassandra / transport / Message . java <nl> @ @ - 282 , 14 + 282 , 14 @ @ public abstract class Message <nl> ServerConnection connection = ( ServerConnection ) request . connection ( ) ; <nl> connection . validateNewMessage ( request . type ) ; <nl> <nl> - logger . debug ( " Received : " + request ) ; <nl> + logger . debug ( " Received : { } " , request ) ; <nl> <nl> Response response = request . execute ( connection . getQueryState ( request . getStreamId ( ) ) ) ; <nl> response . setStreamId ( request . getStreamId ( ) ) ; <nl> response . attach ( connection ) ; <nl> connection . applyStateTransition ( request . type , response . type ) ; <nl> <nl> - logger . debug ( " Responding : " + response ) ; <nl> + logger . debug ( " Responding : { } " , response ) ; <nl> <nl> ctx . getChannel ( ) . write ( response ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 68160c6 . . 0b01c0d 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> <nl> / / Bind and start to accept incoming connections . <nl> - logger . info ( " Starting listening for CQL clients on " + socket + " . . . " ) ; <nl> + logger . info ( " Starting listening for CQL clients on { } . . . " , socket ) ; <nl> Channel channel = bootstrap . bind ( socket ) ; <nl> connectionTracker . allChannels . add ( channel ) ; <nl> } <nl> @ @ - 292 , 7 + 292 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> { <nl> / / That should not happen , so log an error , but return the <nl> / / endpoint address since there ' s a good change this is right <nl> - logger . error ( " Problem retrieving RPC address for " + endpoint , e ) ; <nl> + logger . error ( " Problem retrieving RPC address for { } " , endpoint , e ) ; <nl> return endpoint ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 index f48d0a6 . . 437d80f 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import org . apache . cassandra . utils . StreamingHistogram ; 
 public class MetadataCollector implements PartitionStatisticsCollector 
 { 
 public static final double NO _ COMPRESSION _ RATIO = - 1 . 0 ; 
 + private static final ByteBuffer [ ] EMPTY _ CLUSTERING = new ByteBuffer [ 0 ] ; 
 
 static EstimatedHistogram defaultCellPerPartitionCountHistogram ( ) 
 { 
 @ @ - 95 , 8 + 96 , 8 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 protected double compressionRatio = NO _ COMPRESSION _ RATIO ; 
 protected StreamingHistogram . StreamingHistogramBuilder estimatedTombstoneDropTime = defaultTombstoneDropTimeHistogramBuilder ( ) ; 
 protected int sstableLevel ; 
 - private ClusteringPrefix minClustering = Slice . Bound . TOP ; 
 - private ClusteringPrefix maxClustering = Slice . Bound . BOTTOM ; 
 + private ClusteringPrefix minClustering = null ; 
 + private ClusteringPrefix maxClustering = null ; 
 protected boolean hasLegacyCounterShards = false ; 
 protected long totalColumnsSet ; 
 protected long totalRows ; 
 @ @ - 228 , 8 + 229 , 8 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 
 public MetadataCollector updateClusteringValues ( ClusteringPrefix clustering ) 
 { 
 - minClustering = comparator . compare ( clustering , minClustering ) < 0 ? clustering : minClustering ; 
 - maxClustering = comparator . compare ( clustering , maxClustering ) > 0 ? clustering : maxClustering ; 
 + minClustering = minClustering = = null | | comparator . compare ( clustering , minClustering ) < 0 ? clustering : minClustering ; 
 + maxClustering = maxClustering = = null | | comparator . compare ( clustering , maxClustering ) > 0 ? clustering : maxClustering ; 
 return this ; 
 } 
 
 @ @ - 271 , 7 + 272 , 10 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 
 public Map < MetadataType , MetadataComponent > finalizeMetadata ( String partitioner , double bloomFilterFPChance , long repairedAt , SerializationHeader header ) 
 { 
 - Preconditions . checkState ( comparator . compare ( maxClustering , minClustering ) > = 0 ) ; 
 + Preconditions . checkState ( ( minClustering = = null & & maxClustering = = null ) 
 + | | comparator . compare ( maxClustering , minClustering ) > = 0 ) ; 
 + ByteBuffer [ ] minValues = minClustering ! = null ? minClustering . getRawValues ( ) : EMPTY _ CLUSTERING ; 
 + ByteBuffer [ ] maxValues = maxClustering ! = null ? maxClustering . getRawValues ( ) : EMPTY _ CLUSTERING ; 
 Map < MetadataType , MetadataComponent > components = Maps . newHashMap ( ) ; 
 components . put ( MetadataType . VALIDATION , new ValidationMetadata ( partitioner , bloomFilterFPChance ) ) ; 
 components . put ( MetadataType . STATS , new StatsMetadata ( estimatedPartitionSize , 
 @ @ - 286 , 8 + 290 , 8 @ @ public class MetadataCollector implements PartitionStatisticsCollector 
 compressionRatio , 
 estimatedTombstoneDropTime . build ( ) , 
 sstableLevel , 
 - makeList ( minClustering . getRawValues ( ) ) , 
 - makeList ( maxClustering . getRawValues ( ) ) , 
 + makeList ( minValues ) , 
 + makeList ( maxValues ) , 
 hasLegacyCounterShards , 
 repairedAt , 
 totalColumnsSet ,

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / transport / Message . java b / src / java / org / apache / cassandra / transport / Message . java 
 index 8aec501 . . 5cc3998 100644 
 - - - a / src / java / org / apache / cassandra / transport / Message . java 
 + + + b / src / java / org / apache / cassandra / transport / Message . java 
 @ @ - 282 , 14 + 282 , 14 @ @ public abstract class Message 
 ServerConnection connection = ( ServerConnection ) request . connection ( ) ; 
 connection . validateNewMessage ( request . type ) ; 
 
 - logger . debug ( " Received : " + request ) ; 
 + logger . debug ( " Received : { } " , request ) ; 
 
 Response response = request . execute ( connection . getQueryState ( request . getStreamId ( ) ) ) ; 
 response . setStreamId ( request . getStreamId ( ) ) ; 
 response . attach ( connection ) ; 
 connection . applyStateTransition ( request . type , response . type ) ; 
 
 - logger . debug ( " Responding : " + response ) ; 
 + logger . debug ( " Responding : { } " , response ) ; 
 
 ctx . getChannel ( ) . write ( response ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 68160c6 . . 0b01c0d 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 132 , 7 + 132 , 7 @ @ public class Server implements CassandraDaemon . Server 
 } 
 
 / / Bind and start to accept incoming connections . 
 - logger . info ( " Starting listening for CQL clients on " + socket + " . . . " ) ; 
 + logger . info ( " Starting listening for CQL clients on { } . . . " , socket ) ; 
 Channel channel = bootstrap . bind ( socket ) ; 
 connectionTracker . allChannels . add ( channel ) ; 
 } 
 @ @ - 292 , 7 + 292 , 7 @ @ public class Server implements CassandraDaemon . Server 
 { 
 / / That should not happen , so log an error , but return the 
 / / endpoint address since there ' s a good change this is right 
 - logger . error ( " Problem retrieving RPC address for " + endpoint , e ) ; 
 + logger . error ( " Problem retrieving RPC address for { } " , endpoint , e ) ; 
 return endpoint ; 
 } 
 }
