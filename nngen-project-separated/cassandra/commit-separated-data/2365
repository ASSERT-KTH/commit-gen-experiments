BLEU SCORE: 0.04767707020457096

TEST MSG: Fix heap size calculation for CompoundSparseCellName / . WithCollection
GENERATED MSG: Fix minor issues reported by FindBugs

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4f68cf7 . . 04b148c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 1 . 0 - rc2 <nl> + * Fix heap size calculation for CompoundSparseCellName and <nl> + CompoundSparseCellName . WithCollection ( CASSANDRA - 7421 ) <nl> * Allow counter mutations in UNLOGGED batches ( CASSANDRA - 7351 ) <nl> * Modify reconcile logic to always pick a tombstone over a counter cell <nl> ( CASSANDRA - 7346 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> index 1b232cf . . fa151d2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class ColumnIdentifier implements Selectable , IMeasurableMemory <nl> + ObjectSizes . sizeOf ( text ) ; <nl> } <nl> <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return EMPTY _ SIZE <nl> + ObjectSizes . sizeOnHeapExcludingData ( bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> index 0e38784 . . 03cd0c5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> @ @ - 344 , 7 + 344 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> indexer . insert ( insert ) ; <nl> insert = insert . localCopy ( metadata , allocator , writeOp ) ; <nl> this . dataSize + = insert . cellDataSize ( ) ; <nl> - this . heapSize + = insert . excessHeapSizeExcludingData ( ) ; <nl> + this . heapSize + = insert . unsharedHeapSizeExcludingData ( ) ; <nl> if ( inserted = = null ) <nl> inserted = new ArrayList < > ( ) ; <nl> inserted . add ( insert ) ; <nl> @ @ - 359 , 7 + 359 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> { <nl> reconciled = reconciled . localCopy ( metadata , allocator , writeOp ) ; <nl> dataSize + = reconciled . cellDataSize ( ) - existing . cellDataSize ( ) ; <nl> - heapSize + = reconciled . excessHeapSizeExcludingData ( ) - existing . excessHeapSizeExcludingData ( ) ; <nl> + heapSize + = reconciled . unsharedHeapSizeExcludingData ( ) - existing . unsharedHeapSizeExcludingData ( ) ; <nl> if ( inserted = = null ) <nl> inserted = new ArrayList < > ( ) ; <nl> inserted . add ( reconciled ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / BufferCell . java b / src / java / org / apache / cassandra / db / BufferCell . java <nl> index 93251c8 . . a7d632d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BufferCell . java <nl> + + + b / src / java / org / apache / cassandra / db / BufferCell . java <nl> @ @ - 84 , 9 + 84 , 9 @ @ public class BufferCell extends AbstractCell <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> - return EMPTY _ SIZE + name . excessHeapSizeExcludingData ( ) + ObjectSizes . sizeOnHeapExcludingData ( value ) ; <nl> + return EMPTY _ SIZE + name . unsharedHeapSizeExcludingData ( ) + ObjectSizes . sizeOnHeapExcludingData ( value ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / Cell . java b / src / java / org / apache / cassandra / db / Cell . java <nl> index f91376d . . 7c3926a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Cell . java <nl> + + + b / src / java / org / apache / cassandra / db / Cell . java <nl> @ @ - 51 , 7 + 51 , 7 @ @ public interface Cell extends OnDiskAtom <nl> <nl> / / returns the size of the Cell and all references on the heap , excluding any costs associated with byte arrays <nl> / / that would be allocated by a localCopy , as these will be accounted for by the allocator <nl> - public long excessHeapSizeExcludingData ( ) ; <nl> + public long unsharedHeapSizeExcludingData ( ) ; <nl> <nl> public int serializedSize ( CellNameType type , TypeSizes typeSizes ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / NativeCell . java b / src / java / org / apache / cassandra / db / NativeCell . java <nl> index 1c8ebd9 . . dac5674 100644 <nl> - - - a / src / java / org / apache / cassandra / db / NativeCell . java <nl> + + + b / src / java / org / apache / cassandra / db / NativeCell . java <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class NativeCell extends AbstractNativeCell <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return SIZE ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / NativeCounterCell . java b / src / java / org / apache / cassandra / db / NativeCounterCell . java <nl> index d0df17e . . 3fe73ce 100644 <nl> - - - a / src / java / org / apache / cassandra / db / NativeCounterCell . java <nl> + + + b / src / java / org / apache / cassandra / db / NativeCounterCell . java <nl> @ @ - 167 , 7 + 167 , 7 @ @ public class NativeCounterCell extends NativeCell implements CounterCell <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return SIZE ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / NativeDeletedCell . java b / src / java / org / apache / cassandra / db / NativeDeletedCell . java <nl> index 20118a4 . . e900635 100644 <nl> - - - a / src / java / org / apache / cassandra / db / NativeDeletedCell . java <nl> + + + b / src / java / org / apache / cassandra / db / NativeDeletedCell . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public class NativeDeletedCell extends NativeCell implements DeletedCell <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return SIZE ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / NativeExpiringCell . java b / src / java / org / apache / cassandra / db / NativeExpiringCell . java <nl> index fcadb16 . . f265511 100644 <nl> - - - a / src / java / org / apache / cassandra / db / NativeExpiringCell . java <nl> + + + b / src / java / org / apache / cassandra / db / NativeExpiringCell . java <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class NativeExpiringCell extends NativeCell implements ExpiringCell <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return SIZE ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> index 618cd61 . . 05c563c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> @ @ - 207 , 7 + 207 , 7 @ @ public class RowIndexEntry implements IMeasurableMemory <nl> { <nl> long entrySize = 0 ; <nl> for ( IndexHelper . IndexInfo idx : columnsIndex ) <nl> - entrySize + = idx . excessHeapSize ( ) ; <nl> + entrySize + = idx . unsharedHeapSize ( ) ; <nl> <nl> return BASE _ SIZE <nl> + entrySize <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / CellName . java b / src / java / org / apache / cassandra / db / composites / CellName . java <nl> index 22b3fbd . . 4d778d3 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / CellName . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / CellName . java <nl> @ @ - 74 , 5 + 74 , 5 @ @ public interface CellName extends Composite <nl> @ Override <nl> public CellName copy ( CFMetaData cfm , AbstractAllocator allocator ) ; <nl> <nl> - public long excessHeapSizeExcludingData ( ) ; <nl> + public long unsharedHeapSizeExcludingData ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / CompoundComposite . java b / src / java / org / apache / cassandra / db / composites / CompoundComposite . java <nl> index e16b48a . . 7a21b01 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / CompoundComposite . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / CompoundComposite . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ import org . apache . cassandra . utils . memory . AbstractAllocator ; <nl> * / <nl> public class CompoundComposite extends AbstractComposite <nl> { <nl> - private static final long EMPTY _ SIZE = ObjectSizes . measure ( new CompoundComposite ( null , 0 , false ) ) ; <nl> + private static final long HEAP _ SIZE = ObjectSizes . measure ( new CompoundComposite ( null , 0 , false ) ) ; <nl> <nl> / / We could use a List , but we ' ll create such object * a lot * and using a array + size is not <nl> / / all that harder , so we save the List object allocation . <nl> @ @ - 73 , 12 + 73 , 12 @ @ public class CompoundComposite extends AbstractComposite <nl> <nl> public long unsharedHeapSize ( ) <nl> { <nl> - return EMPTY _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) ; <nl> + return HEAP _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) ; <nl> } <nl> <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> - return EMPTY _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; <nl> + return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; <nl> } <nl> <nl> public Composite copy ( CFMetaData cfm , AbstractAllocator allocator ) <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java b / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java <nl> index 0a157c2 . . 1f471a8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class CompoundDenseCellName extends CompoundComposite implements CellName <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java b / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java <nl> index ad7bb73 . . 03af6d0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java <nl> @ @ - 50 , 6 + 50 , 18 @ @ public class CompoundSparseCellName extends CompoundComposite implements CellNam <nl> this . columnName = columnName ; <nl> } <nl> <nl> + @ Override <nl> + public long unsharedHeapSize ( ) <nl> + { <nl> + return HEAP _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> + { <nl> + return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; <nl> + } <nl> + <nl> public int size ( ) <nl> { <nl> return size + 1 ; <nl> @ @ - 156 , 13 + 168 , 15 @ @ public class CompoundSparseCellName extends CompoundComposite implements CellNam <nl> @ Override <nl> public long unsharedHeapSize ( ) <nl> { <nl> - return super . unsharedHeapSize ( ) + ObjectSizes . sizeOnHeapOf ( collectionElement ) ; <nl> + return HEAP _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) <nl> + + ObjectSizes . sizeOnHeapExcludingData ( collectionElement ) ; <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> - return super . excessHeapSizeExcludingData ( ) + ObjectSizes . sizeOnHeapExcludingData ( collectionElement ) ; <nl> + return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) <nl> + + ObjectSizes . sizeOnHeapExcludingData ( collectionElement ) ; <nl> } <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java b / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java <nl> index 5c0f976 . . 2ca7d23 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class SimpleDenseCellName extends SimpleComposite implements CellName <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return EMPTY _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( element ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java b / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java <nl> index a7fafba . . c6351f1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java <nl> @ @ - 87 , 9 + 87 , 9 @ @ public class SimpleSparseCellName extends AbstractComposite implements CellName <nl> return true ; <nl> } <nl> <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> - return EMPTY _ SIZE + columnName . excessHeapSizeExcludingData ( ) ; <nl> + return EMPTY _ SIZE + columnName . unsharedHeapSizeExcludingData ( ) ; <nl> } <nl> <nl> public long unsharedHeapSize ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java b / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java <nl> index c5708d8 . . c613720 100644 <nl> - - - a / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java <nl> + + + b / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ public class SimpleSparseInternedCellName extends SimpleSparseCellName <nl> } <nl> <nl> @ Override <nl> - public long excessHeapSizeExcludingData ( ) <nl> + public long unsharedHeapSizeExcludingData ( ) <nl> { <nl> return 0 ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java <nl> index 72a708b . . 7099a15 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java <nl> @ @ - 205 , 7 + 205 , 7 @ @ public class IndexHelper <nl> } <nl> } <nl> <nl> - public long excessHeapSize ( ) <nl> + public long unsharedHeapSize ( ) <nl> { <nl> return EMPTY _ SIZE + firstName . unsharedHeapSize ( ) + lastName . unsharedHeapSize ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt < nl > index 0f9a13b . . e88fd21 100644 < nl > - - - a / CHANGES . txt < nl > + + + b / CHANGES . txt < nl > @ @ - 29 , 6 + 29 , 7 @ @ < nl > * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) < nl > * fix minor issues reported by FindBugs ( CASSANDRA - 3658 ) < nl > * global key / row caches ( CASSANDRA - 3143 ) < nl > + * optimize memtable iteration during range scan ( CASSANDRA - 3638 ) < nl > < nl > 1 . 0 . 7 < nl > * add nodetool setstreamthroughput ( CASSANDRA - 3571 ) < nl > diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java < nl > index 2aa7d66 . . 78d69ed 100644 < nl > - - - a / src / java / org / apache / cassandra / db / Memtable . java < nl > + + + b / src / java / org / apache / cassandra / db / Memtable . java < nl > @ @ - 309 , 11 + 309 , 13 @ @ public class Memtable < nl > * @ param startWith Include data in the result from and including this key and to the end of the memtable < nl > * @ return An iterator of entries with the data from the start key < nl > * / < nl > - public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith ) < nl > + public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith , final RowPosition stopAt ) < nl > { < nl > return new Iterator < Map . Entry < DecoratedKey , ColumnFamily > > ( ) < nl > { < nl > - private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) ; < nl > + private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = stopAt . isMinimum ( ) < nl > + ? columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) < nl > + : columnFamilies . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; < nl > < nl > public boolean hasNext ( ) < nl > { < nl > diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java < nl > index caad3a9 . . 87d1d7f 100644 < nl > - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java < nl > + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java < nl > @ @ - 65 , 21 + 65 , 11 @ @ public class RowIteratorFactory < nl > { < nl > / / fetch data from current memtable , historical memtables , and SSTables in the correct order . < nl > final List < CloseableIterator < IColumnIterator > > iterators = new ArrayList < CloseableIterator < IColumnIterator > > ( ) ; < nl > - / / we iterate through memtables with a priority queue to avoid more sorting than necessary . < nl > - / / this predicate throws out the rows before the start of our range . < nl > - Predicate < IColumnIterator > p = new Predicate < IColumnIterator > ( ) < nl > - { < nl > - public boolean apply ( IColumnIterator row ) < nl > - { < nl > - return startWith . compareTo ( row . getKey ( ) ) < = 0 < nl > - & & ( stopAt . isMinimum ( ) | | row . getKey ( ) . compareTo ( stopAt ) < = 0 ) ; < nl > - } < nl > - } ; < nl > < nl > / / memtables < nl > for ( Memtable memtable : memtables ) < nl > { < nl > - iterators . add ( new ConvertToColumnIterator ( filter , p , memtable . getEntryIterator ( startWith ) ) ) ; < nl > + iterators . add ( new ConvertToColumnIterator ( filter , memtable . getEntryIterator ( startWith , stopAt ) ) ) ; < nl > } < nl > < nl > for ( SSTableReader sstable : sstables ) < nl > @ @ - 139 , 24 + 129 , 20 @ @ public class RowIteratorFactory < nl > private static class ConvertToColumnIterator extends AbstractIterator < IColumnIterator > implements CloseableIterator < IColumnIterator > < nl > { < nl > private final QueryFilter filter ; < nl > - private final Predicate < IColumnIterator > pred ; < nl > private final Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ; < nl > < nl > - public ConvertToColumnIterator ( QueryFilter filter , Predicate < IColumnIterator > pred , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) < nl > + public ConvertToColumnIterator ( QueryFilter filter , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) < nl > { < nl > this . filter = filter ; < nl > - this . pred = pred ; < nl > this . iter = iter ; < nl > } < nl > < nl > public IColumnIterator computeNext ( ) < nl > { < nl > - while ( iter . hasNext ( ) ) < nl > + if ( iter . hasNext ( ) ) < nl > { < nl > Map . Entry < DecoratedKey , ColumnFamily > entry = iter . next ( ) ; < nl > - IColumnIterator ici = filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; < nl > - if ( pred . apply ( ici ) ) < nl > - return ici ; < nl > + return filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; < nl > } < nl > return endOfData ( ) ; < nl > }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4f68cf7 . . 04b148c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 1 . 0 - rc2 
 + * Fix heap size calculation for CompoundSparseCellName and 
 + CompoundSparseCellName . WithCollection ( CASSANDRA - 7421 ) 
 * Allow counter mutations in UNLOGGED batches ( CASSANDRA - 7351 ) 
 * Modify reconcile logic to always pick a tombstone over a counter cell 
 ( CASSANDRA - 7346 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 index 1b232cf . . fa151d2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnIdentifier . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class ColumnIdentifier implements Selectable , IMeasurableMemory 
 + ObjectSizes . sizeOf ( text ) ; 
 } 
 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return EMPTY _ SIZE 
 + ObjectSizes . sizeOnHeapExcludingData ( bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 index 0e38784 . . 03cd0c5 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 @ @ - 344 , 7 + 344 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 indexer . insert ( insert ) ; 
 insert = insert . localCopy ( metadata , allocator , writeOp ) ; 
 this . dataSize + = insert . cellDataSize ( ) ; 
 - this . heapSize + = insert . excessHeapSizeExcludingData ( ) ; 
 + this . heapSize + = insert . unsharedHeapSizeExcludingData ( ) ; 
 if ( inserted = = null ) 
 inserted = new ArrayList < > ( ) ; 
 inserted . add ( insert ) ; 
 @ @ - 359 , 7 + 359 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 { 
 reconciled = reconciled . localCopy ( metadata , allocator , writeOp ) ; 
 dataSize + = reconciled . cellDataSize ( ) - existing . cellDataSize ( ) ; 
 - heapSize + = reconciled . excessHeapSizeExcludingData ( ) - existing . excessHeapSizeExcludingData ( ) ; 
 + heapSize + = reconciled . unsharedHeapSizeExcludingData ( ) - existing . unsharedHeapSizeExcludingData ( ) ; 
 if ( inserted = = null ) 
 inserted = new ArrayList < > ( ) ; 
 inserted . add ( reconciled ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / BufferCell . java b / src / java / org / apache / cassandra / db / BufferCell . java 
 index 93251c8 . . a7d632d 100644 
 - - - a / src / java / org / apache / cassandra / db / BufferCell . java 
 + + + b / src / java / org / apache / cassandra / db / BufferCell . java 
 @ @ - 84 , 9 + 84 , 9 @ @ public class BufferCell extends AbstractCell 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 - return EMPTY _ SIZE + name . excessHeapSizeExcludingData ( ) + ObjectSizes . sizeOnHeapExcludingData ( value ) ; 
 + return EMPTY _ SIZE + name . unsharedHeapSizeExcludingData ( ) + ObjectSizes . sizeOnHeapExcludingData ( value ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / Cell . java b / src / java / org / apache / cassandra / db / Cell . java 
 index f91376d . . 7c3926a 100644 
 - - - a / src / java / org / apache / cassandra / db / Cell . java 
 + + + b / src / java / org / apache / cassandra / db / Cell . java 
 @ @ - 51 , 7 + 51 , 7 @ @ public interface Cell extends OnDiskAtom 
 
 / / returns the size of the Cell and all references on the heap , excluding any costs associated with byte arrays 
 / / that would be allocated by a localCopy , as these will be accounted for by the allocator 
 - public long excessHeapSizeExcludingData ( ) ; 
 + public long unsharedHeapSizeExcludingData ( ) ; 
 
 public int serializedSize ( CellNameType type , TypeSizes typeSizes ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / NativeCell . java b / src / java / org / apache / cassandra / db / NativeCell . java 
 index 1c8ebd9 . . dac5674 100644 
 - - - a / src / java / org / apache / cassandra / db / NativeCell . java 
 + + + b / src / java / org / apache / cassandra / db / NativeCell . java 
 @ @ - 75 , 7 + 75 , 7 @ @ public class NativeCell extends AbstractNativeCell 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return SIZE ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / NativeCounterCell . java b / src / java / org / apache / cassandra / db / NativeCounterCell . java 
 index d0df17e . . 3fe73ce 100644 
 - - - a / src / java / org / apache / cassandra / db / NativeCounterCell . java 
 + + + b / src / java / org / apache / cassandra / db / NativeCounterCell . java 
 @ @ - 167 , 7 + 167 , 7 @ @ public class NativeCounterCell extends NativeCell implements CounterCell 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return SIZE ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / NativeDeletedCell . java b / src / java / org / apache / cassandra / db / NativeDeletedCell . java 
 index 20118a4 . . e900635 100644 
 - - - a / src / java / org / apache / cassandra / db / NativeDeletedCell . java 
 + + + b / src / java / org / apache / cassandra / db / NativeDeletedCell . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public class NativeDeletedCell extends NativeCell implements DeletedCell 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return SIZE ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / NativeExpiringCell . java b / src / java / org / apache / cassandra / db / NativeExpiringCell . java 
 index fcadb16 . . f265511 100644 
 - - - a / src / java / org / apache / cassandra / db / NativeExpiringCell . java 
 + + + b / src / java / org / apache / cassandra / db / NativeExpiringCell . java 
 @ @ - 160 , 7 + 160 , 7 @ @ public class NativeExpiringCell extends NativeCell implements ExpiringCell 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return SIZE ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 index 618cd61 . . 05c563c 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 @ @ - 207 , 7 + 207 , 7 @ @ public class RowIndexEntry implements IMeasurableMemory 
 { 
 long entrySize = 0 ; 
 for ( IndexHelper . IndexInfo idx : columnsIndex ) 
 - entrySize + = idx . excessHeapSize ( ) ; 
 + entrySize + = idx . unsharedHeapSize ( ) ; 
 
 return BASE _ SIZE 
 + entrySize 
 diff - - git a / src / java / org / apache / cassandra / db / composites / CellName . java b / src / java / org / apache / cassandra / db / composites / CellName . java 
 index 22b3fbd . . 4d778d3 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / CellName . java 
 + + + b / src / java / org / apache / cassandra / db / composites / CellName . java 
 @ @ - 74 , 5 + 74 , 5 @ @ public interface CellName extends Composite 
 @ Override 
 public CellName copy ( CFMetaData cfm , AbstractAllocator allocator ) ; 
 
 - public long excessHeapSizeExcludingData ( ) ; 
 + public long unsharedHeapSizeExcludingData ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / composites / CompoundComposite . java b / src / java / org / apache / cassandra / db / composites / CompoundComposite . java 
 index e16b48a . . 7a21b01 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / CompoundComposite . java 
 + + + b / src / java / org / apache / cassandra / db / composites / CompoundComposite . java 
 @ @ - 28 , 7 + 28 , 7 @ @ import org . apache . cassandra . utils . memory . AbstractAllocator ; 
 * / 
 public class CompoundComposite extends AbstractComposite 
 { 
 - private static final long EMPTY _ SIZE = ObjectSizes . measure ( new CompoundComposite ( null , 0 , false ) ) ; 
 + private static final long HEAP _ SIZE = ObjectSizes . measure ( new CompoundComposite ( null , 0 , false ) ) ; 
 
 / / We could use a List , but we ' ll create such object * a lot * and using a array + size is not 
 / / all that harder , so we save the List object allocation . 
 @ @ - 73 , 12 + 73 , 12 @ @ public class CompoundComposite extends AbstractComposite 
 
 public long unsharedHeapSize ( ) 
 { 
 - return EMPTY _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) ; 
 + return HEAP _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) ; 
 } 
 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 - return EMPTY _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; 
 + return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; 
 } 
 
 public Composite copy ( CFMetaData cfm , AbstractAllocator allocator ) 
 diff - - git a / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java b / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java 
 index 0a157c2 . . 1f471a8 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java 
 + + + b / src / java / org / apache / cassandra / db / composites / CompoundDenseCellName . java 
 @ @ - 73 , 7 + 73 , 7 @ @ public class CompoundDenseCellName extends CompoundComposite implements CellName 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java b / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java 
 index ad7bb73 . . 03af6d0 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java 
 + + + b / src / java / org / apache / cassandra / db / composites / CompoundSparseCellName . java 
 @ @ - 50 , 6 + 50 , 18 @ @ public class CompoundSparseCellName extends CompoundComposite implements CellNam 
 this . columnName = columnName ; 
 } 
 
 + @ Override 
 + public long unsharedHeapSize ( ) 
 + { 
 + return HEAP _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) ; 
 + } 
 + 
 + @ Override 
 + public long unsharedHeapSizeExcludingData ( ) 
 + { 
 + return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) ; 
 + } 
 + 
 public int size ( ) 
 { 
 return size + 1 ; 
 @ @ - 156 , 13 + 168 , 15 @ @ public class CompoundSparseCellName extends CompoundComposite implements CellNam 
 @ Override 
 public long unsharedHeapSize ( ) 
 { 
 - return super . unsharedHeapSize ( ) + ObjectSizes . sizeOnHeapOf ( collectionElement ) ; 
 + return HEAP _ SIZE + ObjectSizes . sizeOnHeapOf ( elements ) 
 + + ObjectSizes . sizeOnHeapExcludingData ( collectionElement ) ; 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 - return super . excessHeapSizeExcludingData ( ) + ObjectSizes . sizeOnHeapExcludingData ( collectionElement ) ; 
 + return HEAP _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( elements ) 
 + + ObjectSizes . sizeOnHeapExcludingData ( collectionElement ) ; 
 } 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java b / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java 
 index 5c0f976 . . 2ca7d23 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java 
 + + + b / src / java / org / apache / cassandra / db / composites / SimpleDenseCellName . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class SimpleDenseCellName extends SimpleComposite implements CellName 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return EMPTY _ SIZE + ObjectSizes . sizeOnHeapExcludingData ( element ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java b / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java 
 index a7fafba . . c6351f1 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java 
 + + + b / src / java / org / apache / cassandra / db / composites / SimpleSparseCellName . java 
 @ @ - 87 , 9 + 87 , 9 @ @ public class SimpleSparseCellName extends AbstractComposite implements CellName 
 return true ; 
 } 
 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 - return EMPTY _ SIZE + columnName . excessHeapSizeExcludingData ( ) ; 
 + return EMPTY _ SIZE + columnName . unsharedHeapSizeExcludingData ( ) ; 
 } 
 
 public long unsharedHeapSize ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java b / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java 
 index c5708d8 . . c613720 100644 
 - - - a / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java 
 + + + b / src / java / org / apache / cassandra / db / composites / SimpleSparseInternedCellName . java 
 @ @ - 31 , 7 + 31 , 7 @ @ public class SimpleSparseInternedCellName extends SimpleSparseCellName 
 } 
 
 @ Override 
 - public long excessHeapSizeExcludingData ( ) 
 + public long unsharedHeapSizeExcludingData ( ) 
 { 
 return 0 ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java 
 index 72a708b . . 7099a15 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexHelper . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexHelper . java 
 @ @ - 205 , 7 + 205 , 7 @ @ public class IndexHelper 
 } 
 } 
 
 - public long excessHeapSize ( ) 
 + public long unsharedHeapSize ( ) 
 { 
 return EMPTY _ SIZE + firstName . unsharedHeapSize ( ) + lastName . unsharedHeapSize ( ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0f9a13b . . e88fd21 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 6 + 29 , 7 @ @ 
 * fsync the directory after new sstable or commitlog segment are created ( CASSANDRA - 3250 ) 
 * fix minor issues reported by FindBugs ( CASSANDRA - 3658 ) 
 * global key / row caches ( CASSANDRA - 3143 ) 
 + * optimize memtable iteration during range scan ( CASSANDRA - 3638 ) 
 
 1 . 0 . 7 
 * add nodetool setstreamthroughput ( CASSANDRA - 3571 ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 2aa7d66 . . 78d69ed 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 309 , 11 + 309 , 13 @ @ public class Memtable 
 * @ param startWith Include data in the result from and including this key and to the end of the memtable 
 * @ return An iterator of entries with the data from the start key 
 * / 
 - public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith ) 
 + public Iterator < Map . Entry < DecoratedKey , ColumnFamily > > getEntryIterator ( final RowPosition startWith , final RowPosition stopAt ) 
 { 
 return new Iterator < Map . Entry < DecoratedKey , ColumnFamily > > ( ) 
 { 
 - private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) ; 
 + private Iterator < Map . Entry < RowPosition , ColumnFamily > > iter = stopAt . isMinimum ( ) 
 + ? columnFamilies . tailMap ( startWith ) . entrySet ( ) . iterator ( ) 
 + : columnFamilies . subMap ( startWith , true , stopAt , true ) . entrySet ( ) . iterator ( ) ; 
 
 public boolean hasNext ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 index caad3a9 . . 87d1d7f 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 @ @ - 65 , 21 + 65 , 11 @ @ public class RowIteratorFactory 
 { 
 / / fetch data from current memtable , historical memtables , and SSTables in the correct order . 
 final List < CloseableIterator < IColumnIterator > > iterators = new ArrayList < CloseableIterator < IColumnIterator > > ( ) ; 
 - / / we iterate through memtables with a priority queue to avoid more sorting than necessary . 
 - / / this predicate throws out the rows before the start of our range . 
 - Predicate < IColumnIterator > p = new Predicate < IColumnIterator > ( ) 
 - { 
 - public boolean apply ( IColumnIterator row ) 
 - { 
 - return startWith . compareTo ( row . getKey ( ) ) < = 0 
 - & & ( stopAt . isMinimum ( ) | | row . getKey ( ) . compareTo ( stopAt ) < = 0 ) ; 
 - } 
 - } ; 
 
 / / memtables 
 for ( Memtable memtable : memtables ) 
 { 
 - iterators . add ( new ConvertToColumnIterator ( filter , p , memtable . getEntryIterator ( startWith ) ) ) ; 
 + iterators . add ( new ConvertToColumnIterator ( filter , memtable . getEntryIterator ( startWith , stopAt ) ) ) ; 
 } 
 
 for ( SSTableReader sstable : sstables ) 
 @ @ - 139 , 24 + 129 , 20 @ @ public class RowIteratorFactory 
 private static class ConvertToColumnIterator extends AbstractIterator < IColumnIterator > implements CloseableIterator < IColumnIterator > 
 { 
 private final QueryFilter filter ; 
 - private final Predicate < IColumnIterator > pred ; 
 private final Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ; 
 
 - public ConvertToColumnIterator ( QueryFilter filter , Predicate < IColumnIterator > pred , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) 
 + public ConvertToColumnIterator ( QueryFilter filter , Iterator < Map . Entry < DecoratedKey , ColumnFamily > > iter ) 
 { 
 this . filter = filter ; 
 - this . pred = pred ; 
 this . iter = iter ; 
 } 
 
 public IColumnIterator computeNext ( ) 
 { 
 - while ( iter . hasNext ( ) ) 
 + if ( iter . hasNext ( ) ) 
 { 
 Map . Entry < DecoratedKey , ColumnFamily > entry = iter . next ( ) ; 
 - IColumnIterator ici = filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; 
 - if ( pred . apply ( ici ) ) 
 - return ici ; 
 + return filter . getMemtableColumnIterator ( entry . getValue ( ) , entry . getKey ( ) ) ; 
 } 
 return endOfData ( ) ; 
 }
