BLEU SCORE: 0.03527502360630138

TEST MSG: Allow native function calls in CQLSSTableWriter
GENERATED MSG: stableloader will fail if there are collections in the schema tables

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d90d220 . . c5179e7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 15 <nl> + * Allow native function calls in CQLSSTableWriter ( CASSANDRA - 12606 ) <nl> * Fix secondary index queries on COMPACT tables ( CASSANDRA - 13627 ) <nl> * Nodetool listsnapshots output is missing a newline , if there are no snapshots ( CASSANDRA - 13568 ) <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> index 81a3356 . . 39f7339 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . cql3 . statements . ParsedStatement ; <nl> import org . apache . cassandra . cql3 . statements . UpdateStatement ; <nl> import org . apache . cassandra . db . Clustering ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . partitions . Partition ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> @ @ - 40 , 6 + 41 , 7 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . io . sstable . format . SSTableFormat ; <nl> import org . apache . cassandra . schema . KeyspaceMetadata ; <nl> import org . apache . cassandra . schema . KeyspaceParams ; <nl> + import org . apache . cassandra . schema . SchemaKeyspace ; <nl> import org . apache . cassandra . schema . Tables ; <nl> import org . apache . cassandra . schema . Types ; <nl> import org . apache . cassandra . service . ClientState ; <nl> @ @ - 354 , 6 + 356 , 11 @ @ public class CQLSSTableWriter implements Closeable <nl> { <nl> synchronized ( CQLSSTableWriter . class ) <nl> { <nl> + if ( Schema . instance . getKSMetaData ( SchemaKeyspace . NAME ) = = null ) <nl> + Schema . instance . load ( SchemaKeyspace . metadata ( ) ) ; <nl> + if ( Schema . instance . getKSMetaData ( SystemKeyspace . NAME ) = = null ) <nl> + Schema . instance . load ( SystemKeyspace . metadata ( ) ) ; <nl> + <nl> this . schema = getTableMetadata ( schema ) ; <nl> <nl> / / We need to register the keyspace / table metadata through Schema , otherwise we won ' t be able to properly <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> index e6d18c4 . . 7d79036 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . util . Arrays ; <nl> import java . util . Iterator ; <nl> import java . util . UUID ; <nl> + import java . util . concurrent . ExecutionException ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . io . Files ; <nl> @ @ - 42 , 10 + 43 , 13 @ @ import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . OutputHandler ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class CQLSSTableWriterTest <nl> { <nl> @ @ - 94 , 24 + 98 , 7 @ @ public class CQLSSTableWriterTest <nl> <nl> writer . close ( ) ; <nl> <nl> - SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) <nl> - { <nl> - private String keyspace ; <nl> - <nl> - public void init ( String keyspace ) <nl> - { <nl> - this . keyspace = keyspace ; <nl> - for ( Range < Token > range : StorageService . instance . getLocalRanges ( " cql _ keyspace " ) ) <nl> - addRangeForEndpoint ( range , FBUtilities . getBroadcastAddress ( ) ) ; <nl> - } <nl> - <nl> - public CFMetaData getTableMetadata ( String cfName ) <nl> - { <nl> - return Schema . instance . getCFMetaData ( keyspace , cfName ) ; <nl> - } <nl> - } , new OutputHandler . SystemOutput ( false , false ) ) ; <nl> - <nl> - loader . stream ( ) . get ( ) ; <nl> + loadSSTables ( dataDir , KS ) ; <nl> <nl> UntypedResultSet rs = QueryProcessor . executeInternal ( " SELECT * FROM cql _ keyspace . table1 ; " ) ; <nl> assertEquals ( 4 , rs . size ( ) ) ; <nl> @ @ - 142 , 7 + 129 , 7 @ @ public class CQLSSTableWriterTest <nl> } <nl> } <nl> <nl> - @ Test ( expected = IllegalArgumentException . class ) <nl> + @ Test <nl> public void testForbidCounterUpdates ( ) throws Exception <nl> { <nl> String KS = " cql _ keyspace " ; <nl> @ @ - 158 , 10 + 145 , 18 @ @ public class CQLSSTableWriterTest <nl> " PRIMARY KEY ( my _ id ) " + <nl> " ) " ; <nl> String insert = String . format ( " UPDATE cql _ keyspace . counter1 SET my _ counter = my _ counter - ? WHERE my _ id = ? " ) ; <nl> - CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) <nl> - . forTable ( schema ) <nl> - . withPartitioner ( Murmur3Partitioner . instance ) <nl> - . using ( insert ) . build ( ) ; <nl> + try <nl> + { <nl> + CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) <nl> + . forTable ( schema ) <nl> + . withPartitioner ( Murmur3Partitioner . instance ) <nl> + . using ( insert ) . build ( ) ; <nl> + fail ( " Counter update statements should not be supported " ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + assertEquals ( e . getMessage ( ) , " Counter update statements are not supported " ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 230 , 7 + 225 , 102 @ @ public class CQLSSTableWriterTest <nl> <nl> } <nl> <nl> + @ Test <nl> + public void testUpdateStatement ( ) throws Exception <nl> + { <nl> + final String KS = " cql _ keyspace6 " ; <nl> + final String TABLE = " table6 " ; <nl> <nl> + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " <nl> + + " k int , " <nl> + + " c1 int , " <nl> + + " c2 int , " <nl> + + " v text , " <nl> + + " PRIMARY KEY ( k , c1 , c2 ) " <nl> + + " ) " ; <nl> + <nl> + File tempdir = Files . createTempDir ( ) ; <nl> + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; <nl> + assert dataDir . mkdirs ( ) ; <nl> + <nl> + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) <nl> + . inDirectory ( dataDir ) <nl> + . forTable ( schema ) <nl> + . using ( " UPDATE " + KS + " . " + TABLE + " SET v = ? " + <nl> + " WHERE k = ? AND c1 = ? AND c2 = ? " ) <nl> + . build ( ) ; <nl> + <nl> + writer . addRow ( " a " , 1 , 2 , 3 ) ; <nl> + writer . addRow ( " b " , 4 , 5 , 6 ) ; <nl> + writer . addRow ( null , 7 , 8 , 9 ) ; <nl> + writer . close ( ) ; <nl> + loadSSTables ( dataDir , KS ) ; <nl> + <nl> + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; <nl> + assertEquals ( 2 , resultSet . size ( ) ) ; <nl> + <nl> + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; <nl> + UntypedResultSet . Row r1 = iter . next ( ) ; <nl> + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; <nl> + assertEquals ( 2 , r1 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 3 , r1 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( " a " , r1 . getString ( " v " ) ) ; <nl> + UntypedResultSet . Row r2 = iter . next ( ) ; <nl> + assertEquals ( 4 , r2 . getInt ( " k " ) ) ; <nl> + assertEquals ( 5 , r2 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 6 , r2 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( " b " , r2 . getString ( " v " ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testNativeFunctions ( ) throws Exception <nl> + { <nl> + final String KS = " cql _ keyspace7 " ; <nl> + final String TABLE = " table7 " ; <nl> + <nl> + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " <nl> + + " k int , " <nl> + + " c1 int , " <nl> + + " c2 int , " <nl> + + " v blob , " <nl> + + " PRIMARY KEY ( k , c1 , c2 ) " <nl> + + " ) " ; <nl> + <nl> + File tempdir = Files . createTempDir ( ) ; <nl> + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; <nl> + assert dataDir . mkdirs ( ) ; <nl> + <nl> + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) <nl> + . inDirectory ( dataDir ) <nl> + . forTable ( schema ) <nl> + . using ( " INSERT INTO " + KS + " . " + TABLE + " ( k , c1 , c2 , v ) VALUES ( ? , ? , ? , textAsBlob ( ? ) ) " ) <nl> + . build ( ) ; <nl> + <nl> + writer . addRow ( 1 , 2 , 3 , " abc " ) ; <nl> + writer . addRow ( 4 , 5 , 6 , " efg " ) ; <nl> + <nl> + writer . close ( ) ; <nl> + loadSSTables ( dataDir , KS ) ; <nl> + <nl> + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; <nl> + assertEquals ( 2 , resultSet . size ( ) ) ; <nl> + <nl> + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; <nl> + UntypedResultSet . Row r1 = iter . next ( ) ; <nl> + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; <nl> + assertEquals ( 2 , r1 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 3 , r1 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( ByteBufferUtil . bytes ( " abc " ) , r1 . getBytes ( " v " ) ) ; <nl> + <nl> + UntypedResultSet . Row r2 = iter . next ( ) ; <nl> + assertEquals ( 4 , r2 . getInt ( " k " ) ) ; <nl> + assertEquals ( 5 , r2 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 6 , r2 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( ByteBufferUtil . bytes ( " efg " ) , r2 . getBytes ( " v " ) ) ; <nl> + <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + } <nl> <nl> private static final int NUMBER _ WRITES _ IN _ RUNNABLE = 10 ; <nl> private class WriterThread extends Thread <nl> @ @ - 302 , 6 + 392 , 14 @ @ public class CQLSSTableWriterTest <nl> } <nl> } <nl> <nl> + loadSSTables ( dataDir , KS ) ; <nl> + <nl> + UntypedResultSet rs = QueryProcessor . executeInternal ( " SELECT * FROM cql _ keyspace2 . table2 ; " ) ; <nl> + assertEquals ( threads . length * NUMBER _ WRITES _ IN _ RUNNABLE , rs . size ( ) ) ; <nl> + } <nl> + <nl> + private static void loadSSTables ( File dataDir , String ks ) throws ExecutionException , InterruptedException <nl> + { <nl> SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) <nl> { <nl> private String keyspace ; <nl> @ @ - 309 , 7 + 407 , 7 @ @ public class CQLSSTableWriterTest <nl> public void init ( String keyspace ) <nl> { <nl> this . keyspace = keyspace ; <nl> - for ( Range < Token > range : StorageService . instance . getLocalRanges ( KS ) ) <nl> + for ( Range < Token > range : StorageService . instance . getLocalRanges ( ks ) ) <nl> addRangeForEndpoint ( range , FBUtilities . getBroadcastAddress ( ) ) ; <nl> } <nl> <nl> @ @ - 320 , 8 + 418 , 5 @ @ public class CQLSSTableWriterTest <nl> } , new OutputHandler . SystemOutput ( false , false ) ) ; <nl> <nl> loader . stream ( ) . get ( ) ; <nl> - <nl> - UntypedResultSet rs = QueryProcessor . executeInternal ( " SELECT * FROM cql _ keyspace2 . table2 ; " ) ; <nl> - assertEquals ( threads . length * NUMBER _ WRITES _ IN _ RUNNABLE , rs . size ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d90d220 . . c5179e7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 15 
 + * Allow native function calls in CQLSSTableWriter ( CASSANDRA - 12606 ) 
 * Fix secondary index queries on COMPACT tables ( CASSANDRA - 13627 ) 
 * Nodetool listsnapshots output is missing a newline , if there are no snapshots ( CASSANDRA - 13568 ) 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 index 81a3356 . . 39f7339 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . cql3 . statements . ParsedStatement ; 
 import org . apache . cassandra . cql3 . statements . UpdateStatement ; 
 import org . apache . cassandra . db . Clustering ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . partitions . Partition ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 @ @ - 40 , 6 + 41 , 7 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . io . sstable . format . SSTableFormat ; 
 import org . apache . cassandra . schema . KeyspaceMetadata ; 
 import org . apache . cassandra . schema . KeyspaceParams ; 
 + import org . apache . cassandra . schema . SchemaKeyspace ; 
 import org . apache . cassandra . schema . Tables ; 
 import org . apache . cassandra . schema . Types ; 
 import org . apache . cassandra . service . ClientState ; 
 @ @ - 354 , 6 + 356 , 11 @ @ public class CQLSSTableWriter implements Closeable 
 { 
 synchronized ( CQLSSTableWriter . class ) 
 { 
 + if ( Schema . instance . getKSMetaData ( SchemaKeyspace . NAME ) = = null ) 
 + Schema . instance . load ( SchemaKeyspace . metadata ( ) ) ; 
 + if ( Schema . instance . getKSMetaData ( SystemKeyspace . NAME ) = = null ) 
 + Schema . instance . load ( SystemKeyspace . metadata ( ) ) ; 
 + 
 this . schema = getTableMetadata ( schema ) ; 
 
 / / We need to register the keyspace / table metadata through Schema , otherwise we won ' t be able to properly 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 index e6d18c4 . . 7d79036 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . util . Arrays ; 
 import java . util . Iterator ; 
 import java . util . UUID ; 
 + import java . util . concurrent . ExecutionException ; 
 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . io . Files ; 
 @ @ - 42 , 10 + 43 , 13 @ @ import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . OutputHandler ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . fail ; 
 
 public class CQLSSTableWriterTest 
 { 
 @ @ - 94 , 24 + 98 , 7 @ @ public class CQLSSTableWriterTest 
 
 writer . close ( ) ; 
 
 - SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) 
 - { 
 - private String keyspace ; 
 - 
 - public void init ( String keyspace ) 
 - { 
 - this . keyspace = keyspace ; 
 - for ( Range < Token > range : StorageService . instance . getLocalRanges ( " cql _ keyspace " ) ) 
 - addRangeForEndpoint ( range , FBUtilities . getBroadcastAddress ( ) ) ; 
 - } 
 - 
 - public CFMetaData getTableMetadata ( String cfName ) 
 - { 
 - return Schema . instance . getCFMetaData ( keyspace , cfName ) ; 
 - } 
 - } , new OutputHandler . SystemOutput ( false , false ) ) ; 
 - 
 - loader . stream ( ) . get ( ) ; 
 + loadSSTables ( dataDir , KS ) ; 
 
 UntypedResultSet rs = QueryProcessor . executeInternal ( " SELECT * FROM cql _ keyspace . table1 ; " ) ; 
 assertEquals ( 4 , rs . size ( ) ) ; 
 @ @ - 142 , 7 + 129 , 7 @ @ public class CQLSSTableWriterTest 
 } 
 } 
 
 - @ Test ( expected = IllegalArgumentException . class ) 
 + @ Test 
 public void testForbidCounterUpdates ( ) throws Exception 
 { 
 String KS = " cql _ keyspace " ; 
 @ @ - 158 , 10 + 145 , 18 @ @ public class CQLSSTableWriterTest 
 " PRIMARY KEY ( my _ id ) " + 
 " ) " ; 
 String insert = String . format ( " UPDATE cql _ keyspace . counter1 SET my _ counter = my _ counter - ? WHERE my _ id = ? " ) ; 
 - CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) 
 - . forTable ( schema ) 
 - . withPartitioner ( Murmur3Partitioner . instance ) 
 - . using ( insert ) . build ( ) ; 
 + try 
 + { 
 + CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) 
 + . forTable ( schema ) 
 + . withPartitioner ( Murmur3Partitioner . instance ) 
 + . using ( insert ) . build ( ) ; 
 + fail ( " Counter update statements should not be supported " ) ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + assertEquals ( e . getMessage ( ) , " Counter update statements are not supported " ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 230 , 7 + 225 , 102 @ @ public class CQLSSTableWriterTest 
 
 } 
 
 + @ Test 
 + public void testUpdateStatement ( ) throws Exception 
 + { 
 + final String KS = " cql _ keyspace6 " ; 
 + final String TABLE = " table6 " ; 
 
 + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " 
 + + " k int , " 
 + + " c1 int , " 
 + + " c2 int , " 
 + + " v text , " 
 + + " PRIMARY KEY ( k , c1 , c2 ) " 
 + + " ) " ; 
 + 
 + File tempdir = Files . createTempDir ( ) ; 
 + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; 
 + assert dataDir . mkdirs ( ) ; 
 + 
 + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) 
 + . inDirectory ( dataDir ) 
 + . forTable ( schema ) 
 + . using ( " UPDATE " + KS + " . " + TABLE + " SET v = ? " + 
 + " WHERE k = ? AND c1 = ? AND c2 = ? " ) 
 + . build ( ) ; 
 + 
 + writer . addRow ( " a " , 1 , 2 , 3 ) ; 
 + writer . addRow ( " b " , 4 , 5 , 6 ) ; 
 + writer . addRow ( null , 7 , 8 , 9 ) ; 
 + writer . close ( ) ; 
 + loadSSTables ( dataDir , KS ) ; 
 + 
 + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; 
 + assertEquals ( 2 , resultSet . size ( ) ) ; 
 + 
 + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; 
 + UntypedResultSet . Row r1 = iter . next ( ) ; 
 + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; 
 + assertEquals ( 2 , r1 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 3 , r1 . getInt ( " c2 " ) ) ; 
 + assertEquals ( " a " , r1 . getString ( " v " ) ) ; 
 + UntypedResultSet . Row r2 = iter . next ( ) ; 
 + assertEquals ( 4 , r2 . getInt ( " k " ) ) ; 
 + assertEquals ( 5 , r2 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 6 , r2 . getInt ( " c2 " ) ) ; 
 + assertEquals ( " b " , r2 . getString ( " v " ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testNativeFunctions ( ) throws Exception 
 + { 
 + final String KS = " cql _ keyspace7 " ; 
 + final String TABLE = " table7 " ; 
 + 
 + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " 
 + + " k int , " 
 + + " c1 int , " 
 + + " c2 int , " 
 + + " v blob , " 
 + + " PRIMARY KEY ( k , c1 , c2 ) " 
 + + " ) " ; 
 + 
 + File tempdir = Files . createTempDir ( ) ; 
 + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; 
 + assert dataDir . mkdirs ( ) ; 
 + 
 + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) 
 + . inDirectory ( dataDir ) 
 + . forTable ( schema ) 
 + . using ( " INSERT INTO " + KS + " . " + TABLE + " ( k , c1 , c2 , v ) VALUES ( ? , ? , ? , textAsBlob ( ? ) ) " ) 
 + . build ( ) ; 
 + 
 + writer . addRow ( 1 , 2 , 3 , " abc " ) ; 
 + writer . addRow ( 4 , 5 , 6 , " efg " ) ; 
 + 
 + writer . close ( ) ; 
 + loadSSTables ( dataDir , KS ) ; 
 + 
 + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; 
 + assertEquals ( 2 , resultSet . size ( ) ) ; 
 + 
 + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; 
 + UntypedResultSet . Row r1 = iter . next ( ) ; 
 + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; 
 + assertEquals ( 2 , r1 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 3 , r1 . getInt ( " c2 " ) ) ; 
 + assertEquals ( ByteBufferUtil . bytes ( " abc " ) , r1 . getBytes ( " v " ) ) ; 
 + 
 + UntypedResultSet . Row r2 = iter . next ( ) ; 
 + assertEquals ( 4 , r2 . getInt ( " k " ) ) ; 
 + assertEquals ( 5 , r2 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 6 , r2 . getInt ( " c2 " ) ) ; 
 + assertEquals ( ByteBufferUtil . bytes ( " efg " ) , r2 . getBytes ( " v " ) ) ; 
 + 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + } 
 
 private static final int NUMBER _ WRITES _ IN _ RUNNABLE = 10 ; 
 private class WriterThread extends Thread 
 @ @ - 302 , 6 + 392 , 14 @ @ public class CQLSSTableWriterTest 
 } 
 } 
 
 + loadSSTables ( dataDir , KS ) ; 
 + 
 + UntypedResultSet rs = QueryProcessor . executeInternal ( " SELECT * FROM cql _ keyspace2 . table2 ; " ) ; 
 + assertEquals ( threads . length * NUMBER _ WRITES _ IN _ RUNNABLE , rs . size ( ) ) ; 
 + } 
 + 
 + private static void loadSSTables ( File dataDir , String ks ) throws ExecutionException , InterruptedException 
 + { 
 SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) 
 { 
 private String keyspace ; 
 @ @ - 309 , 7 + 407 , 7 @ @ public class CQLSSTableWriterTest 
 public void init ( String keyspace ) 
 { 
 this . keyspace = keyspace ; 
 - for ( Range < Token > range : StorageService . instance . getLocalRanges ( KS ) ) 
 + for ( Range < Token > range : StorageService . instance . getLocalRanges ( ks ) ) 
 addRangeForEndpoint ( range , FBUtilities . getBroadcastAddress ( ) ) ; 
 } 
 
 @ @ - 320 , 8 + 418 , 5 @ @ public class CQLSSTableWriterTest 
 } , new OutputHandler . SystemOutput ( false , false ) ) ; 
 
 loader . stream ( ) . get ( ) ; 
 - 
 - UntypedResultSet rs = QueryProcessor . executeInternal ( " SELECT * FROM cql _ keyspace2 . table2 ; " ) ; 
 - assertEquals ( threads . length * NUMBER _ WRITES _ IN _ RUNNABLE , rs . size ( ) ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
