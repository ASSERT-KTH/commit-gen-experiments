BLEU SCORE: 0.020980574531482755

TEST MSG: FBUtilities . singleton ( ) should use the CF comparator
GENERATED MSG: Avoid NPE

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 19cedd8 . . d697e3f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 33 , 6 + 33 , 7 @ @ <nl> * Fix UPDATE updating PRIMARY KEY columns implicitly ( CASSANDRA - 6782 ) <nl> * Fix IllegalArgumentException when updating from 1 . 2 with SuperColumns <nl> ( CASSANDRA - 6733 ) <nl> + * FBUtilities . singleton ( ) should use the CF comparator ( CASSANDRA - 6778 ) <nl> Merged from 1 . 2 : <nl> * Add CMSClassUnloadingEnabled JVM option ( CASSANDRA - 6541 ) <nl> * Catch memtable flush exceptions during shutdown ( CASSANDRA - 6735 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java b / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java <nl> index 5c3fcb9 . . 1c9a346 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import org . apache . cassandra . db . Column ; <nl> + import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> @ @ - 155 , 7 + 156 , 8 @ @ public class ColumnGroupMap <nl> { <nl> for ( int i = 0 ; i < idx ; i + + ) <nl> { <nl> - if ( ! c [ i ] . equals ( previous [ i ] ) ) <nl> + AbstractType < ? > comp = composite . types . get ( i ) ; <nl> + if ( comp . compare ( c [ i ] , previous [ i ] ) ! = 0 ) <nl> return false ; <nl> } <nl> return true ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 5a9d3d9 . . 100383f 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 717 , 7 + 717 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> { <nl> if ( cfDef . isCompact ) <nl> { <nl> - return FBUtilities . singleton ( builder . build ( ) ) ; <nl> + return FBUtilities . singleton ( builder . build ( ) , cfDef . cfm . comparator ) ; <nl> } <nl> else <nl> { <nl> @ @ - 994 , 10 + 994 , 11 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache <nl> } <nl> else if ( sliceRestriction ! = null ) <nl> { <nl> + Comparator < ByteBuffer > comp = cfDef . cfm . comparator ; <nl> / / For dynamic CF , the column could be out of the requested bounds , filter here <nl> - if ( ! sliceRestriction . isInclusive ( Bound . START ) & & c . name ( ) . equals ( sliceRestriction . bound ( Bound . START , variables ) ) ) <nl> + if ( ! sliceRestriction . isInclusive ( Bound . START ) & & comp . compare ( c . name ( ) , sliceRestriction . bound ( Bound . START , variables ) ) = = 0 ) <nl> continue ; <nl> - if ( ! sliceRestriction . isInclusive ( Bound . END ) & & c . name ( ) . equals ( sliceRestriction . bound ( Bound . END , variables ) ) ) <nl> + if ( ! sliceRestriction . isInclusive ( Bound . END ) & & comp . compare ( c . name ( ) , sliceRestriction . bound ( Bound . END , variables ) ) = = 0 ) <nl> continue ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 910f025 . . 15d8538 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 621 , 7 + 621 , 7 @ @ public class SystemKeyspace <nl> ColumnFamilyStore cfs = Keyspace . open ( Keyspace . SYSTEM _ KS ) . getColumnFamilyStore ( INDEX _ CF ) ; <nl> QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( ByteBufferUtil . bytes ( keyspaceName ) ) , <nl> INDEX _ CF , <nl> - ByteBufferUtil . bytes ( indexName ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( indexName ) , cfs . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ; <nl> return ColumnFamilyStore . removeDeleted ( cfs . getColumnFamily ( filter ) , Integer . MAX _ VALUE ) ! = null ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> index f65bf3a . . 4ff8091 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> @ @ - 60 , 9 + 60 , 9 @ @ public class NamesQueryFilter implements IDiskAtomFilter <nl> this . countCQL3Rows = countCQL3Rows ; <nl> } <nl> <nl> - public NamesQueryFilter ( ByteBuffer column ) <nl> + public NamesQueryFilter ( ByteBuffer column , Comparator < ByteBuffer > comparator ) <nl> { <nl> - this ( FBUtilities . singleton ( column ) ) ; <nl> + this ( FBUtilities . singleton ( column , comparator ) ) ; <nl> } <nl> <nl> public NamesQueryFilter cloneShallow ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> index 4f71f3a . . 7136ae8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> @ @ - 223 , 14 + 223 , 6 @ @ public class QueryFilter <nl> return new QueryFilter ( key , cfName , new NamesQueryFilter ( columns ) , timestamp ) ; <nl> } <nl> <nl> - / * * <nl> - * convenience method for creating a name filter matching a single column <nl> - * / <nl> - public static QueryFilter getNamesFilter ( DecoratedKey key , String cfName , ByteBuffer column , long timestamp ) <nl> - { <nl> - return new QueryFilter ( key , cfName , new NamesQueryFilter ( column ) , timestamp ) ; <nl> - } <nl> - <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 579f5fa . . b8260b2 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 504 , 9 + 504 , 11 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static < T extends Comparable > SortedSet < T > singleton ( T column ) <nl> + public static < T > SortedSet < T > singleton ( T column , Comparator < T > comparator ) <nl> { <nl> - return new TreeSet < T > ( Arrays . asList ( column ) ) ; <nl> + TreeSet < T > s = new TreeSet < > ( comparator ) ; <nl> + s . add ( column ) ; <nl> + return s ; <nl> } <nl> <nl> public static String toString ( Map < ? , ? > map ) <nl> diff - - git a / test / long / org / apache / cassandra / db / LongKeyspaceTest . java b / test / long / org / apache / cassandra / db / LongKeyspaceTest . java <nl> index b1ef690 . . 1a472d6 100644 <nl> - - - a / test / long / org / apache / cassandra / db / LongKeyspaceTest . java <nl> + + + b / test / long / org / apache / cassandra / db / LongKeyspaceTest . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import static org . apache . cassandra . Util . column ; <nl> <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> <nl> public class LongKeyspaceTest extends SchemaLoader <nl> @ @ - 58 , 7 + 59 , 7 @ @ public class LongKeyspaceTest extends SchemaLoader <nl> { <nl> cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( " key " + i ) , <nl> " Standard1 " , <nl> - ByteBufferUtil . bytes ( " c " + j ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( " c " + j ) , cfStore . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ) ; <nl> KeyspaceTest . assertColumns ( cf , " c " + j ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index d554a8c . . 058e1e3 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> import org . apache . cassandra . thrift . IndexType ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class SchemaLoader <nl> { <nl> @ @ - 446 , 7 + 447 , 7 @ @ public class SchemaLoader <nl> for ( int i = offset ; i < offset + numberOfRows ; i + + ) <nl> { <nl> DecoratedKey key = Util . dk ( " key " + i ) ; <nl> - store . getColumnFamily ( QueryFilter . getNamesFilter ( key , columnFamily , ByteBufferUtil . bytes ( " col " + i ) , System . currentTimeMillis ( ) ) ) ; <nl> + store . getColumnFamily ( QueryFilter . getNamesFilter ( key , columnFamily , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col " + i ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / config / DefsTest . java b / test / unit / org / apache / cassandra / config / DefsTest . java <nl> index 79c9b33 . . 943745a 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DefsTest . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> import org . apache . cassandra . thrift . IndexType ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> import org . junit . Test ; <nl> import org . junit . runner . RunWith ; <nl> @ @ - 179 , 7 + 180 , 7 @ @ public class DefsTest extends SchemaLoader <nl> assert store ! = null ; <nl> store . forceBlockingFlush ( ) ; <nl> <nl> - ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , cf , ByteBufferUtil . bytes ( " col0 " ) , System . currentTimeMillis ( ) ) ) ; <nl> + ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , cf , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col0 " ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; <nl> assert cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ! = null ; <nl> Column col = cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ; <nl> assert ByteBufferUtil . bytes ( " value0 " ) . equals ( col . value ( ) ) ; <nl> @ @ - 252 , 7 + 253 , 7 @ @ public class DefsTest extends SchemaLoader <nl> assert store ! = null ; <nl> store . forceBlockingFlush ( ) ; <nl> <nl> - ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , ByteBufferUtil . bytes ( " col0 " ) , System . currentTimeMillis ( ) ) ) ; <nl> + ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col0 " ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; <nl> assert cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ! = null ; <nl> Column col = cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ; <nl> assert ByteBufferUtil . bytes ( " value0 " ) . equals ( col . value ( ) ) ; <nl> @ @ - 360 , 7 + 361 , 7 @ @ public class DefsTest extends SchemaLoader <nl> assert store ! = null ; <nl> store . forceBlockingFlush ( ) ; <nl> <nl> - ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , ByteBufferUtil . bytes ( " col0 " ) , System . currentTimeMillis ( ) ) ) ; <nl> + ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col0 " ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; <nl> assert cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ! = null ; <nl> Column col = cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ; <nl> assert ByteBufferUtil . bytes ( " value0 " ) . equals ( col . value ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / CollationControllerTest . java b / test / unit / org / apache / cassandra / db / CollationControllerTest . java <nl> index 8763a41 . . 721dfae 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CollationControllerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CollationControllerTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> @ @ - 70 , 7 + 71 , 7 @ @ public class CollationControllerTest extends SchemaLoader <nl> <nl> / / A NamesQueryFilter goes down one code path ( through collectTimeOrderedData ( ) ) <nl> / / It should only iterate the last flushed sstable , since it probably contains the most recent value for Column1 <nl> - QueryFilter filter = QueryFilter . getNamesFilter ( dk , cfs . name , ByteBufferUtil . bytes ( " Column1 " ) , System . currentTimeMillis ( ) ) ; <nl> + QueryFilter filter = QueryFilter . getNamesFilter ( dk , cfs . name , FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , cfs . getComparator ( ) ) , System . currentTimeMillis ( ) ) ; <nl> CollationController controller = new CollationController ( cfs , filter , Integer . MIN _ VALUE ) ; <nl> controller . getTopLevelColumns ( ) ; <nl> assertEquals ( 1 , controller . getSstablesIterated ( ) ) ; <nl> @ @ - 113 , 7 + 114 , 7 @ @ public class CollationControllerTest extends SchemaLoader <nl> long queryAt = System . currentTimeMillis ( ) + 1000 ; <nl> int gcBefore = cfs . gcBefore ( queryAt ) ; <nl> <nl> - filter = QueryFilter . getNamesFilter ( dk , cfs . name , cellName , queryAt ) ; <nl> + filter = QueryFilter . getNamesFilter ( dk , cfs . name , FBUtilities . singleton ( cellName , cfs . getComparator ( ) ) , queryAt ) ; <nl> CollationController controller = new CollationController ( cfs , filter , gcBefore ) ; <nl> assert ColumnFamilyStore . removeDeleted ( controller . getTopLevelColumns ( ) , gcBefore ) = = null ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> index 65b1708 . . 2edf6a8 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . * ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> @ @ - 94 , 7 + 95 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> cfs . forceBlockingFlush ( ) ; <nl> <nl> cfs . getRecentSSTablesPerReadHistogram ( ) ; / / resets counts <nl> - cfs . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( " key1 " ) , " Standard1 " , ByteBufferUtil . bytes ( " Column1 " ) , System . currentTimeMillis ( ) ) ) ; <nl> + cfs . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( " key1 " ) , " Standard1 " , FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , cfs . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; <nl> assertEquals ( 1 , cfs . getRecentSSTablesPerReadHistogram ( ) [ 0 ] ) ; <nl> } <nl> <nl> @ @ - 148 , 7 + 149 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> <nl> QueryFilter namesFilter = QueryFilter . getNamesFilter ( Util . dk ( " key1 " ) , <nl> " Standard2 " , <nl> - ByteBufferUtil . bytes ( " a " ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( " a " ) , store . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ; <nl> cf = store . getColumnFamily ( namesFilter ) ; <nl> assert cf . isMarkedForDelete ( ) ; <nl> @ @ - 167 , 7 + 168 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> IPartitioner p = StorageService . getPartitioner ( ) ; <nl> List < Row > result = cfs . getRangeSlice ( Util . range ( p , " key1 " , " key2 " ) , <nl> null , <nl> - new NamesQueryFilter ( ByteBufferUtil . bytes ( " asdf " ) ) , <nl> + new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " asdf " ) , cfs . getComparator ( ) ) ) , <nl> 10 ) ; <nl> assertEquals ( 1 , result . size ( ) ) ; <nl> assert result . get ( 0 ) . key . key . equals ( ByteBufferUtil . bytes ( " key2 " ) ) ; <nl> @ @ - 198 , 13 + 199 , 15 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> rm . add ( " Indexed1 " , ByteBufferUtil . bytes ( " birthdate " ) , ByteBufferUtil . bytes ( 3L ) , 0 ) ; <nl> rm . apply ( ) ; <nl> <nl> + ColumnFamilyStore store = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) ; <nl> + <nl> / / basic single - expression query <nl> IndexExpression expr = new IndexExpression ( ByteBufferUtil . bytes ( " birthdate " ) , IndexOperator . EQ , ByteBufferUtil . bytes ( 1L ) ) ; <nl> List < IndexExpression > clause = Arrays . asList ( expr ) ; <nl> IDiskAtomFilter filter = new IdentityQueryFilter ( ) ; <nl> IPartitioner p = StorageService . getPartitioner ( ) ; <nl> Range < RowPosition > range = Util . range ( " " , " " ) ; <nl> - List < Row > rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , filter , 100 ) ; <nl> + List < Row > rows = store . search ( range , clause , filter , 100 ) ; <nl> <nl> assert rows ! = null ; <nl> assert rows . size ( ) = = 2 : StringUtils . join ( rows , " , " ) ; <nl> @ @ - 221 , 14 + 224 , 14 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> / / add a second expression <nl> IndexExpression expr2 = new IndexExpression ( ByteBufferUtil . bytes ( " notbirthdate " ) , IndexOperator . GTE , ByteBufferUtil . bytes ( 2L ) ) ; <nl> clause = Arrays . asList ( expr , expr2 ) ; <nl> - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , filter , 100 ) ; <nl> + rows = store . search ( range , clause , filter , 100 ) ; <nl> <nl> assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; <nl> key = new String ( rows . get ( 0 ) . key . key . array ( ) , rows . get ( 0 ) . key . key . position ( ) , rows . get ( 0 ) . key . key . remaining ( ) ) ; <nl> assert " k3 " . equals ( key ) ; <nl> <nl> / / same query again , but with resultset not including the subordinate expression <nl> - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , new NamesQueryFilter ( ByteBufferUtil . bytes ( " birthdate " ) ) , 100 ) ; <nl> + rows = store . search ( range , clause , new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " birthdate " ) , store . getComparator ( ) ) ) , 100 ) ; <nl> <nl> assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; <nl> key = new String ( rows . get ( 0 ) . key . key . array ( ) , rows . get ( 0 ) . key . key . position ( ) , rows . get ( 0 ) . key . key . remaining ( ) ) ; <nl> @ @ - 238 , 7 + 241 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> <nl> / / once more , this time with a slice rowset that needs to be expanded <nl> SliceQueryFilter emptyFilter = new SliceQueryFilter ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , false , 0 ) ; <nl> - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , emptyFilter , 100 ) ; <nl> + rows = store . search ( range , clause , emptyFilter , 100 ) ; <nl> <nl> assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; <nl> key = new String ( rows . get ( 0 ) . key . key . array ( ) , rows . get ( 0 ) . key . key . position ( ) , rows . get ( 0 ) . key . key . remaining ( ) ) ; <nl> @ @ - 250 , 7 + 253 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> / / doesn ' t tell the scan loop that it ' s done <nl> IndexExpression expr3 = new IndexExpression ( ByteBufferUtil . bytes ( " notbirthdate " ) , IndexOperator . EQ , ByteBufferUtil . bytes ( - 1L ) ) ; <nl> clause = Arrays . asList ( expr , expr3 ) ; <nl> - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , filter , 100 ) ; <nl> + rows = store . search ( range , clause , filter , 100 ) ; <nl> <nl> assert rows . isEmpty ( ) ; <nl> } <nl> @ @ - 686 , 6 + 689 , 50 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> } <nl> <nl> @ Test <nl> + public void testCassandra6778 ( ) throws CharacterCodingException <nl> + { <nl> + String cfname = " StandardInteger1 " ; <nl> + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cfname ) ; <nl> + <nl> + / / insert two columns that represent the same integer but have different binary forms ( the <nl> + / / second one is padded with extra zeros ) <nl> + RowMutation rm = new RowMutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) ) ; <nl> + byte [ ] column1 = { 1 } ; <nl> + rm . add ( cfname , ByteBuffer . wrap ( column1 ) , ByteBufferUtil . bytes ( " data1 " ) , 1 ) ; <nl> + rm . apply ( ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> + <nl> + rm = new RowMutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) ) ; <nl> + byte [ ] column2 = { 0 , 0 , 1 } ; <nl> + rm . add ( cfname , ByteBuffer . wrap ( column2 ) , ByteBufferUtil . bytes ( " data2 " ) , 2 ) ; <nl> + rm . apply ( ) ; <nl> + cfs . forceBlockingFlush ( ) ; <nl> + <nl> + / / fetch by the first column name ; we should get the second version of the column value <nl> + SliceByNamesReadCommand cmd = new SliceByNamesReadCommand ( <nl> + " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) , cfname , System . currentTimeMillis ( ) , <nl> + new NamesQueryFilter ( FBUtilities . singleton ( ByteBuffer . wrap ( column1 ) , cfs . getComparator ( ) ) ) ) ; <nl> + <nl> + ColumnFamily cf = cmd . getRow ( keyspace ) . cf ; <nl> + assertEquals ( 1 , cf . getColumnCount ( ) ) ; <nl> + Column column = cf . getColumn ( ByteBuffer . wrap ( column1 ) ) ; <nl> + assertEquals ( " data2 " , ByteBufferUtil . string ( column . value ( ) ) ) ; <nl> + assertEquals ( ByteBuffer . wrap ( column2 ) , column . name ( ) ) ; <nl> + <nl> + / / fetch by the second column name ; we should get the second version of the column value <nl> + cmd = new SliceByNamesReadCommand ( <nl> + " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) , cfname , System . currentTimeMillis ( ) , <nl> + new NamesQueryFilter ( FBUtilities . singleton ( ByteBuffer . wrap ( column2 ) , cfs . getComparator ( ) ) ) ) ; <nl> + <nl> + cf = cmd . getRow ( keyspace ) . cf ; <nl> + assertEquals ( 1 , cf . getColumnCount ( ) ) ; <nl> + column = cf . getColumn ( ByteBuffer . wrap ( column2 ) ) ; <nl> + assertEquals ( " data2 " , ByteBufferUtil . string ( column . value ( ) ) ) ; <nl> + assertEquals ( ByteBuffer . wrap ( column2 ) , column . name ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testInclusiveBounds ( ) throws IOException , ExecutionException , InterruptedException <nl> { <nl> ColumnFamilyStore cfs = insertKey1Key2 ( ) ; <nl> @ @ - 693 , 7 + 740 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> IPartitioner p = StorageService . getPartitioner ( ) ; <nl> List < Row > result = cfs . getRangeSlice ( Util . bounds ( " key1 " , " key2 " ) , <nl> null , <nl> - new NamesQueryFilter ( ByteBufferUtil . bytes ( " asdf " ) ) , <nl> + new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " asdf " ) , cfs . getComparator ( ) ) ) , <nl> 10 ) ; <nl> assertEquals ( 2 , result . size ( ) ) ; <nl> assert result . get ( 0 ) . key . key . equals ( ByteBufferUtil . bytes ( " key1 " ) ) ; <nl> @ @ - 945 , 7 + 992 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader <nl> putColsStandard ( cfs , key , new Column ( cname , ByteBufferUtil . bytes ( " b " ) , 1 ) ) ; <nl> <nl> / / Test fetching the column by name returns the first column <nl> - SliceByNamesReadCommand cmd = new SliceByNamesReadCommand ( keyspaceName , key . key , cfName , System . currentTimeMillis ( ) , new NamesQueryFilter ( cname ) ) ; <nl> + SliceByNamesReadCommand cmd = new SliceByNamesReadCommand ( keyspaceName , key . key , cfName , System . currentTimeMillis ( ) , new NamesQueryFilter ( FBUtilities . singleton ( cname , cfs . getComparator ( ) ) ) ) ; <nl> ColumnFamily cf = cmd . getRow ( keyspace ) . cf ; <nl> Column column = ( Column ) cf . getColumn ( cname ) ; <nl> assert column . value ( ) . equals ( ByteBufferUtil . bytes ( " a " ) ) : " expecting a , got " + ByteBufferUtil . string ( column . value ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / KeyspaceTest . java b / test / unit / org / apache / cassandra / db / KeyspaceTest . java <nl> index f1fcb29 . . e04a9d4 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / KeyspaceTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / KeyspaceTest . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import static org . apache . cassandra . Util . expiringColumn ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> <nl> public class KeyspaceTest extends SchemaLoader <nl> @ @ - 91 , 7 + 92 , 7 @ @ public class KeyspaceTest extends SchemaLoader <nl> <nl> cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( TEST _ KEY , <nl> " Standard3 " , <nl> - ByteBufferUtil . bytes ( " col99 " ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( " col99 " ) , cfStore . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ) ; <nl> assertColumns ( cf ) ; <nl> } <nl> @ @ - 120 , 13 + 121 , 13 @ @ public class KeyspaceTest extends SchemaLoader <nl> <nl> cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( TEST _ KEY , <nl> " Standard1 " , <nl> - ByteBufferUtil . bytes ( " col1 " ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( " col1 " ) , cfStore . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ) ; <nl> assertColumns ( cf , " col1 " ) ; <nl> <nl> cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( TEST _ KEY , <nl> " Standard1 " , <nl> - ByteBufferUtil . bytes ( " col3 " ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( " col3 " ) , cfStore . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ) ; <nl> assertColumns ( cf , " col3 " ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / ReadMessageTest . java b / test / unit / org / apache / cassandra / db / ReadMessageTest . java <nl> index d829dae . . 94928c0 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ReadMessageTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ReadMessageTest . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> <nl> public class ReadMessageTest extends SchemaLoader <nl> @ @ - 86 , 6 + 87 , 7 @ @ public class ReadMessageTest extends SchemaLoader <nl> public void testGetColumn ( ) throws IOException , ColumnFamilyNotDefinedException <nl> { <nl> Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> RowMutation rm ; <nl> DecoratedKey dk = Util . dk ( " key1 " ) ; <nl> <nl> @ @ - 94 , 7 + 96 , 7 @ @ public class ReadMessageTest extends SchemaLoader <nl> rm . add ( " Standard1 " , ByteBufferUtil . bytes ( " Column1 " ) , ByteBufferUtil . bytes ( " abcd " ) , 0 ) ; <nl> rm . apply ( ) ; <nl> <nl> - ReadCommand command = new SliceByNamesReadCommand ( " Keyspace1 " , dk . key , " Standard1 " , System . currentTimeMillis ( ) , new NamesQueryFilter ( ByteBufferUtil . bytes ( " Column1 " ) ) ) ; <nl> + ReadCommand command = new SliceByNamesReadCommand ( " Keyspace1 " , dk . key , " Standard1 " , System . currentTimeMillis ( ) , new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , cfs . getComparator ( ) ) ) ) ; <nl> Row row = command . getRow ( keyspace ) ; <nl> Column col = row . cf . getColumn ( ByteBufferUtil . bytes ( " Column1 " ) ) ; <nl> assertEquals ( col . value ( ) , ByteBuffer . wrap ( " abcd " . getBytes ( ) ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> index b98a8b0 . . 1c98079 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . junit . Test ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * Test for the truncate operation . <nl> @ @ - 74 , 7 + 75 , 7 @ @ public class RecoveryManagerTruncateTest extends SchemaLoader <nl> 	 	 } <nl> 	 	 cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( keyName ) , <nl> cfName , <nl> - ByteBufferUtil . bytes ( columnName ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( columnName ) , cfStore . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ) ; <nl> 	 	 if ( cf = = null ) <nl> 	 	 { <nl> diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java <nl> index dfbf513 . . eddf5e0 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> <nl> public class RemoveColumnTest extends SchemaLoader <nl> @ @ - 53 , 7 + 54 , 7 @ @ public class RemoveColumnTest extends SchemaLoader <nl> <nl> ColumnFamily retrieved = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , <nl> " Standard1 " , <nl> - ByteBufferUtil . bytes ( " Column1 " ) , <nl> + FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , store . getComparator ( ) ) , <nl> System . currentTimeMillis ( ) ) ) ; <nl> assert retrieved . getColumn ( ByteBufferUtil . bytes ( " Column1 " ) ) . isMarkedForDelete ( System . currentTimeMillis ( ) ) ; <nl> assertNull ( Util . cloneAndRemoveDeleted ( retrieved , Integer . MAX _ VALUE ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> index e508a55 . . c4ab8ab 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class LegacySSTableTest extends SchemaLoader <nl> for ( String keystring : TEST _ DATA ) <nl> { <nl> ByteBuffer key = ByteBufferUtil . bytes ( keystring ) ; <nl> - SSTableNamesIterator iter = new SSTableNamesIterator ( sstable , Util . dk ( key ) , FBUtilities . singleton ( key ) ) ; <nl> + SSTableNamesIterator iter = new SSTableNamesIterator ( sstable , Util . dk ( key ) , FBUtilities . singleton ( key , sstable . metadata . comparator ) ) ; <nl> ColumnFamily cf = iter . getColumnFamily ( ) ; <nl> <nl> / / check not deleted ( CASSANDRA - 6527 ) <nl> @ @ - 149 , 7 + 149 , 7 @ @ public class LegacySSTableTest extends SchemaLoader <nl> ByteBuffer key = ByteBufferUtil . bytes ( keystring ) ; <nl> / / confirm that the bloom filter does not reject any keys / names <nl> DecoratedKey dk = reader . partitioner . decorateKey ( key ) ; <nl> - SSTableNamesIterator iter = new SSTableNamesIterator ( reader , dk , FBUtilities . singleton ( key ) ) ; <nl> + SSTableNamesIterator iter = new SSTableNamesIterator ( reader , dk , FBUtilities . singleton ( key , reader . metadata . comparator ) ) ; <nl> assert iter . next ( ) . name ( ) . equals ( key ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> index 54c65f4 . . 47aa2c8 100644 <nl> - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import java . io . FileReader ; <nl> import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> import java . io . PrintStream ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . SortedSet ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . json . simple . JSONArray ; <nl> import org . json . simple . JSONObject ; <nl> import org . json . simple . JSONValue ; <nl> @ @ - 201 , 13 + 204 , 14 @ @ public class SSTableExportTest extends SchemaLoader <nl> new SSTableImport ( ) . importJson ( tempJson . getPath ( ) , " Keyspace1 " , " Standard1 " , tempSS2 . getPath ( ) ) ; <nl> <nl> reader = SSTableReader . open ( Descriptor . fromFilename ( tempSS2 . getPath ( ) ) ) ; <nl> - QueryFilter qf = QueryFilter . getNamesFilter ( Util . dk ( " rowA " ) , " Standard1 " , ByteBufferUtil . bytes ( " name " ) , System . currentTimeMillis ( ) ) ; <nl> + SortedSet < ByteBuffer > names = FBUtilities . singleton ( ByteBufferUtil . bytes ( " name " ) , cfamily . getComparator ( ) ) ; <nl> + QueryFilter qf = QueryFilter . getNamesFilter ( Util . dk ( " rowA " ) , " Standard1 " , names , System . currentTimeMillis ( ) ) ; <nl> ColumnFamily cf = qf . getSSTableColumnIterator ( reader ) . getColumnFamily ( ) ; <nl> qf . collateOnDiskAtom ( cf , qf . getSSTableColumnIterator ( reader ) , Integer . MIN _ VALUE ) ; <nl> assertTrue ( cf ! = null ) ; <nl> assertTrue ( cf . getColumn ( ByteBufferUtil . bytes ( " name " ) ) . value ( ) . equals ( hexToBytes ( " 76616c " ) ) ) ; <nl> <nl> - qf = QueryFilter . getNamesFilter ( Util . dk ( " rowExclude " ) , " Standard1 " , ByteBufferUtil . bytes ( " name " ) , System . currentTimeMillis ( ) ) ; <nl> + qf = QueryFilter . getNamesFilter ( Util . dk ( " rowExclude " ) , " Standard1 " , names , System . currentTimeMillis ( ) ) ; <nl> cf = qf . getSSTableColumnIterator ( reader ) . getColumnFamily ( ) ; <nl> assert cf = = null ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 3641945 . . 35354c8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 394 , 7 + 394 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> doValidationCompaction ( cfStore , validator ) ; <nl> } <nl> - catch ( Exception e ) <nl> + catch ( Throwable e ) <nl> { <nl> / / we need to inform the remote end of our failure , otherwise it will hang on repair forever <nl> validator . fail ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 19cedd8 . . d697e3f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 33 , 6 + 33 , 7 @ @ 
 * Fix UPDATE updating PRIMARY KEY columns implicitly ( CASSANDRA - 6782 ) 
 * Fix IllegalArgumentException when updating from 1 . 2 with SuperColumns 
 ( CASSANDRA - 6733 ) 
 + * FBUtilities . singleton ( ) should use the CF comparator ( CASSANDRA - 6778 ) 
 Merged from 1 . 2 : 
 * Add CMSClassUnloadingEnabled JVM option ( CASSANDRA - 6541 ) 
 * Catch memtable flush exceptions during shutdown ( CASSANDRA - 6735 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java b / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java 
 index 5c3fcb9 . . 1c9a346 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ColumnGroupMap . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 import org . apache . cassandra . db . Column ; 
 + import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 import org . apache . cassandra . utils . Pair ; 
 
 @ @ - 155 , 7 + 156 , 8 @ @ public class ColumnGroupMap 
 { 
 for ( int i = 0 ; i < idx ; i + + ) 
 { 
 - if ( ! c [ i ] . equals ( previous [ i ] ) ) 
 + AbstractType < ? > comp = composite . types . get ( i ) ; 
 + if ( comp . compare ( c [ i ] , previous [ i ] ) ! = 0 ) 
 return false ; 
 } 
 return true ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 5a9d3d9 . . 100383f 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 717 , 7 + 717 , 7 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 { 
 if ( cfDef . isCompact ) 
 { 
 - return FBUtilities . singleton ( builder . build ( ) ) ; 
 + return FBUtilities . singleton ( builder . build ( ) , cfDef . cfm . comparator ) ; 
 } 
 else 
 { 
 @ @ - 994 , 10 + 994 , 11 @ @ public class SelectStatement implements CQLStatement , MeasurableForPreparedCache 
 } 
 else if ( sliceRestriction ! = null ) 
 { 
 + Comparator < ByteBuffer > comp = cfDef . cfm . comparator ; 
 / / For dynamic CF , the column could be out of the requested bounds , filter here 
 - if ( ! sliceRestriction . isInclusive ( Bound . START ) & & c . name ( ) . equals ( sliceRestriction . bound ( Bound . START , variables ) ) ) 
 + if ( ! sliceRestriction . isInclusive ( Bound . START ) & & comp . compare ( c . name ( ) , sliceRestriction . bound ( Bound . START , variables ) ) = = 0 ) 
 continue ; 
 - if ( ! sliceRestriction . isInclusive ( Bound . END ) & & c . name ( ) . equals ( sliceRestriction . bound ( Bound . END , variables ) ) ) 
 + if ( ! sliceRestriction . isInclusive ( Bound . END ) & & comp . compare ( c . name ( ) , sliceRestriction . bound ( Bound . END , variables ) ) = = 0 ) 
 continue ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 910f025 . . 15d8538 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 621 , 7 + 621 , 7 @ @ public class SystemKeyspace 
 ColumnFamilyStore cfs = Keyspace . open ( Keyspace . SYSTEM _ KS ) . getColumnFamilyStore ( INDEX _ CF ) ; 
 QueryFilter filter = QueryFilter . getNamesFilter ( decorate ( ByteBufferUtil . bytes ( keyspaceName ) ) , 
 INDEX _ CF , 
 - ByteBufferUtil . bytes ( indexName ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( indexName ) , cfs . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ; 
 return ColumnFamilyStore . removeDeleted ( cfs . getColumnFamily ( filter ) , Integer . MAX _ VALUE ) ! = null ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 index f65bf3a . . 4ff8091 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 @ @ - 60 , 9 + 60 , 9 @ @ public class NamesQueryFilter implements IDiskAtomFilter 
 this . countCQL3Rows = countCQL3Rows ; 
 } 
 
 - public NamesQueryFilter ( ByteBuffer column ) 
 + public NamesQueryFilter ( ByteBuffer column , Comparator < ByteBuffer > comparator ) 
 { 
 - this ( FBUtilities . singleton ( column ) ) ; 
 + this ( FBUtilities . singleton ( column , comparator ) ) ; 
 } 
 
 public NamesQueryFilter cloneShallow ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 index 4f71f3a . . 7136ae8 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 @ @ - 223 , 14 + 223 , 6 @ @ public class QueryFilter 
 return new QueryFilter ( key , cfName , new NamesQueryFilter ( columns ) , timestamp ) ; 
 } 
 
 - / * * 
 - * convenience method for creating a name filter matching a single column 
 - * / 
 - public static QueryFilter getNamesFilter ( DecoratedKey key , String cfName , ByteBuffer column , long timestamp ) 
 - { 
 - return new QueryFilter ( key , cfName , new NamesQueryFilter ( column ) , timestamp ) ; 
 - } 
 - 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 579f5fa . . b8260b2 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 504 , 9 + 504 , 11 @ @ public class FBUtilities 
 } 
 } 
 
 - public static < T extends Comparable > SortedSet < T > singleton ( T column ) 
 + public static < T > SortedSet < T > singleton ( T column , Comparator < T > comparator ) 
 { 
 - return new TreeSet < T > ( Arrays . asList ( column ) ) ; 
 + TreeSet < T > s = new TreeSet < > ( comparator ) ; 
 + s . add ( column ) ; 
 + return s ; 
 } 
 
 public static String toString ( Map < ? , ? > map ) 
 diff - - git a / test / long / org / apache / cassandra / db / LongKeyspaceTest . java b / test / long / org / apache / cassandra / db / LongKeyspaceTest . java 
 index b1ef690 . . 1a472d6 100644 
 - - - a / test / long / org / apache / cassandra / db / LongKeyspaceTest . java 
 + + + b / test / long / org / apache / cassandra / db / LongKeyspaceTest . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import static org . apache . cassandra . Util . column ; 
 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 
 public class LongKeyspaceTest extends SchemaLoader 
 @ @ - 58 , 7 + 59 , 7 @ @ public class LongKeyspaceTest extends SchemaLoader 
 { 
 cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( " key " + i ) , 
 " Standard1 " , 
 - ByteBufferUtil . bytes ( " c " + j ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( " c " + j ) , cfStore . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ) ; 
 KeyspaceTest . assertColumns ( cf , " c " + j ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index d554a8c . . 058e1e3 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . service . MigrationManager ; 
 import org . apache . cassandra . thrift . IndexType ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 public class SchemaLoader 
 { 
 @ @ - 446 , 7 + 447 , 7 @ @ public class SchemaLoader 
 for ( int i = offset ; i < offset + numberOfRows ; i + + ) 
 { 
 DecoratedKey key = Util . dk ( " key " + i ) ; 
 - store . getColumnFamily ( QueryFilter . getNamesFilter ( key , columnFamily , ByteBufferUtil . bytes ( " col " + i ) , System . currentTimeMillis ( ) ) ) ; 
 + store . getColumnFamily ( QueryFilter . getNamesFilter ( key , columnFamily , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col " + i ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / config / DefsTest . java b / test / unit / org / apache / cassandra / config / DefsTest . java 
 index 79c9b33 . . 943745a 100644 
 - - - a / test / unit / org / apache / cassandra / config / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DefsTest . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . service . MigrationManager ; 
 import org . apache . cassandra . thrift . IndexType ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 import org . junit . Test ; 
 import org . junit . runner . RunWith ; 
 @ @ - 179 , 7 + 180 , 7 @ @ public class DefsTest extends SchemaLoader 
 assert store ! = null ; 
 store . forceBlockingFlush ( ) ; 
 
 - ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , cf , ByteBufferUtil . bytes ( " col0 " ) , System . currentTimeMillis ( ) ) ) ; 
 + ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , cf , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col0 " ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; 
 assert cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ! = null ; 
 Column col = cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ; 
 assert ByteBufferUtil . bytes ( " value0 " ) . equals ( col . value ( ) ) ; 
 @ @ - 252 , 7 + 253 , 7 @ @ public class DefsTest extends SchemaLoader 
 assert store ! = null ; 
 store . forceBlockingFlush ( ) ; 
 
 - ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , ByteBufferUtil . bytes ( " col0 " ) , System . currentTimeMillis ( ) ) ) ; 
 + ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col0 " ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; 
 assert cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ! = null ; 
 Column col = cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ; 
 assert ByteBufferUtil . bytes ( " value0 " ) . equals ( col . value ( ) ) ; 
 @ @ - 360 , 7 + 361 , 7 @ @ public class DefsTest extends SchemaLoader 
 assert store ! = null ; 
 store . forceBlockingFlush ( ) ; 
 
 - ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , ByteBufferUtil . bytes ( " col0 " ) , System . currentTimeMillis ( ) ) ) ; 
 + ColumnFamily cfam = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , newCf . cfName , FBUtilities . singleton ( ByteBufferUtil . bytes ( " col0 " ) , store . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; 
 assert cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ! = null ; 
 Column col = cfam . getColumn ( ByteBufferUtil . bytes ( " col0 " ) ) ; 
 assert ByteBufferUtil . bytes ( " value0 " ) . equals ( col . value ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / CollationControllerTest . java b / test / unit / org / apache / cassandra / db / CollationControllerTest . java 
 index 8763a41 . . 721dfae 100644 
 - - - a / test / unit / org / apache / cassandra / db / CollationControllerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CollationControllerTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . junit . Test ; 
 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 @ @ - 70 , 7 + 71 , 7 @ @ public class CollationControllerTest extends SchemaLoader 
 
 / / A NamesQueryFilter goes down one code path ( through collectTimeOrderedData ( ) ) 
 / / It should only iterate the last flushed sstable , since it probably contains the most recent value for Column1 
 - QueryFilter filter = QueryFilter . getNamesFilter ( dk , cfs . name , ByteBufferUtil . bytes ( " Column1 " ) , System . currentTimeMillis ( ) ) ; 
 + QueryFilter filter = QueryFilter . getNamesFilter ( dk , cfs . name , FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , cfs . getComparator ( ) ) , System . currentTimeMillis ( ) ) ; 
 CollationController controller = new CollationController ( cfs , filter , Integer . MIN _ VALUE ) ; 
 controller . getTopLevelColumns ( ) ; 
 assertEquals ( 1 , controller . getSstablesIterated ( ) ) ; 
 @ @ - 113 , 7 + 114 , 7 @ @ public class CollationControllerTest extends SchemaLoader 
 long queryAt = System . currentTimeMillis ( ) + 1000 ; 
 int gcBefore = cfs . gcBefore ( queryAt ) ; 
 
 - filter = QueryFilter . getNamesFilter ( dk , cfs . name , cellName , queryAt ) ; 
 + filter = QueryFilter . getNamesFilter ( dk , cfs . name , FBUtilities . singleton ( cellName , cfs . getComparator ( ) ) , queryAt ) ; 
 CollationController controller = new CollationController ( cfs , filter , gcBefore ) ; 
 assert ColumnFamilyStore . removeDeleted ( controller . getTopLevelColumns ( ) , gcBefore ) = = null ; 
 
 diff - - git a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 index 65b1708 . . 2edf6a8 100644 
 - - - a / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ColumnFamilyStoreTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . * ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 @ @ - 94 , 7 + 95 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 cfs . forceBlockingFlush ( ) ; 
 
 cfs . getRecentSSTablesPerReadHistogram ( ) ; / / resets counts 
 - cfs . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( " key1 " ) , " Standard1 " , ByteBufferUtil . bytes ( " Column1 " ) , System . currentTimeMillis ( ) ) ) ; 
 + cfs . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( " key1 " ) , " Standard1 " , FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , cfs . getComparator ( ) ) , System . currentTimeMillis ( ) ) ) ; 
 assertEquals ( 1 , cfs . getRecentSSTablesPerReadHistogram ( ) [ 0 ] ) ; 
 } 
 
 @ @ - 148 , 7 + 149 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 
 QueryFilter namesFilter = QueryFilter . getNamesFilter ( Util . dk ( " key1 " ) , 
 " Standard2 " , 
 - ByteBufferUtil . bytes ( " a " ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( " a " ) , store . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ; 
 cf = store . getColumnFamily ( namesFilter ) ; 
 assert cf . isMarkedForDelete ( ) ; 
 @ @ - 167 , 7 + 168 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 IPartitioner p = StorageService . getPartitioner ( ) ; 
 List < Row > result = cfs . getRangeSlice ( Util . range ( p , " key1 " , " key2 " ) , 
 null , 
 - new NamesQueryFilter ( ByteBufferUtil . bytes ( " asdf " ) ) , 
 + new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " asdf " ) , cfs . getComparator ( ) ) ) , 
 10 ) ; 
 assertEquals ( 1 , result . size ( ) ) ; 
 assert result . get ( 0 ) . key . key . equals ( ByteBufferUtil . bytes ( " key2 " ) ) ; 
 @ @ - 198 , 13 + 199 , 15 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 rm . add ( " Indexed1 " , ByteBufferUtil . bytes ( " birthdate " ) , ByteBufferUtil . bytes ( 3L ) , 0 ) ; 
 rm . apply ( ) ; 
 
 + ColumnFamilyStore store = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) ; 
 + 
 / / basic single - expression query 
 IndexExpression expr = new IndexExpression ( ByteBufferUtil . bytes ( " birthdate " ) , IndexOperator . EQ , ByteBufferUtil . bytes ( 1L ) ) ; 
 List < IndexExpression > clause = Arrays . asList ( expr ) ; 
 IDiskAtomFilter filter = new IdentityQueryFilter ( ) ; 
 IPartitioner p = StorageService . getPartitioner ( ) ; 
 Range < RowPosition > range = Util . range ( " " , " " ) ; 
 - List < Row > rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , filter , 100 ) ; 
 + List < Row > rows = store . search ( range , clause , filter , 100 ) ; 
 
 assert rows ! = null ; 
 assert rows . size ( ) = = 2 : StringUtils . join ( rows , " , " ) ; 
 @ @ - 221 , 14 + 224 , 14 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 / / add a second expression 
 IndexExpression expr2 = new IndexExpression ( ByteBufferUtil . bytes ( " notbirthdate " ) , IndexOperator . GTE , ByteBufferUtil . bytes ( 2L ) ) ; 
 clause = Arrays . asList ( expr , expr2 ) ; 
 - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , filter , 100 ) ; 
 + rows = store . search ( range , clause , filter , 100 ) ; 
 
 assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; 
 key = new String ( rows . get ( 0 ) . key . key . array ( ) , rows . get ( 0 ) . key . key . position ( ) , rows . get ( 0 ) . key . key . remaining ( ) ) ; 
 assert " k3 " . equals ( key ) ; 
 
 / / same query again , but with resultset not including the subordinate expression 
 - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , new NamesQueryFilter ( ByteBufferUtil . bytes ( " birthdate " ) ) , 100 ) ; 
 + rows = store . search ( range , clause , new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " birthdate " ) , store . getComparator ( ) ) ) , 100 ) ; 
 
 assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; 
 key = new String ( rows . get ( 0 ) . key . key . array ( ) , rows . get ( 0 ) . key . key . position ( ) , rows . get ( 0 ) . key . key . remaining ( ) ) ; 
 @ @ - 238 , 7 + 241 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 
 / / once more , this time with a slice rowset that needs to be expanded 
 SliceQueryFilter emptyFilter = new SliceQueryFilter ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , false , 0 ) ; 
 - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , emptyFilter , 100 ) ; 
 + rows = store . search ( range , clause , emptyFilter , 100 ) ; 
 
 assert rows . size ( ) = = 1 : StringUtils . join ( rows , " , " ) ; 
 key = new String ( rows . get ( 0 ) . key . key . array ( ) , rows . get ( 0 ) . key . key . position ( ) , rows . get ( 0 ) . key . key . remaining ( ) ) ; 
 @ @ - 250 , 7 + 253 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 / / doesn ' t tell the scan loop that it ' s done 
 IndexExpression expr3 = new IndexExpression ( ByteBufferUtil . bytes ( " notbirthdate " ) , IndexOperator . EQ , ByteBufferUtil . bytes ( - 1L ) ) ; 
 clause = Arrays . asList ( expr , expr3 ) ; 
 - rows = Keyspace . open ( " Keyspace1 " ) . getColumnFamilyStore ( " Indexed1 " ) . search ( range , clause , filter , 100 ) ; 
 + rows = store . search ( range , clause , filter , 100 ) ; 
 
 assert rows . isEmpty ( ) ; 
 } 
 @ @ - 686 , 6 + 689 , 50 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 } 
 
 @ Test 
 + public void testCassandra6778 ( ) throws CharacterCodingException 
 + { 
 + String cfname = " StandardInteger1 " ; 
 + Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( cfname ) ; 
 + 
 + / / insert two columns that represent the same integer but have different binary forms ( the 
 + / / second one is padded with extra zeros ) 
 + RowMutation rm = new RowMutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) ) ; 
 + byte [ ] column1 = { 1 } ; 
 + rm . add ( cfname , ByteBuffer . wrap ( column1 ) , ByteBufferUtil . bytes ( " data1 " ) , 1 ) ; 
 + rm . apply ( ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 + 
 + rm = new RowMutation ( " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) ) ; 
 + byte [ ] column2 = { 0 , 0 , 1 } ; 
 + rm . add ( cfname , ByteBuffer . wrap ( column2 ) , ByteBufferUtil . bytes ( " data2 " ) , 2 ) ; 
 + rm . apply ( ) ; 
 + cfs . forceBlockingFlush ( ) ; 
 + 
 + / / fetch by the first column name ; we should get the second version of the column value 
 + SliceByNamesReadCommand cmd = new SliceByNamesReadCommand ( 
 + " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) , cfname , System . currentTimeMillis ( ) , 
 + new NamesQueryFilter ( FBUtilities . singleton ( ByteBuffer . wrap ( column1 ) , cfs . getComparator ( ) ) ) ) ; 
 + 
 + ColumnFamily cf = cmd . getRow ( keyspace ) . cf ; 
 + assertEquals ( 1 , cf . getColumnCount ( ) ) ; 
 + Column column = cf . getColumn ( ByteBuffer . wrap ( column1 ) ) ; 
 + assertEquals ( " data2 " , ByteBufferUtil . string ( column . value ( ) ) ) ; 
 + assertEquals ( ByteBuffer . wrap ( column2 ) , column . name ( ) ) ; 
 + 
 + / / fetch by the second column name ; we should get the second version of the column value 
 + cmd = new SliceByNamesReadCommand ( 
 + " Keyspace1 " , ByteBufferUtil . bytes ( " k1 " ) , cfname , System . currentTimeMillis ( ) , 
 + new NamesQueryFilter ( FBUtilities . singleton ( ByteBuffer . wrap ( column2 ) , cfs . getComparator ( ) ) ) ) ; 
 + 
 + cf = cmd . getRow ( keyspace ) . cf ; 
 + assertEquals ( 1 , cf . getColumnCount ( ) ) ; 
 + column = cf . getColumn ( ByteBuffer . wrap ( column2 ) ) ; 
 + assertEquals ( " data2 " , ByteBufferUtil . string ( column . value ( ) ) ) ; 
 + assertEquals ( ByteBuffer . wrap ( column2 ) , column . name ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testInclusiveBounds ( ) throws IOException , ExecutionException , InterruptedException 
 { 
 ColumnFamilyStore cfs = insertKey1Key2 ( ) ; 
 @ @ - 693 , 7 + 740 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 IPartitioner p = StorageService . getPartitioner ( ) ; 
 List < Row > result = cfs . getRangeSlice ( Util . bounds ( " key1 " , " key2 " ) , 
 null , 
 - new NamesQueryFilter ( ByteBufferUtil . bytes ( " asdf " ) ) , 
 + new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " asdf " ) , cfs . getComparator ( ) ) ) , 
 10 ) ; 
 assertEquals ( 2 , result . size ( ) ) ; 
 assert result . get ( 0 ) . key . key . equals ( ByteBufferUtil . bytes ( " key1 " ) ) ; 
 @ @ - 945 , 7 + 992 , 7 @ @ public class ColumnFamilyStoreTest extends SchemaLoader 
 putColsStandard ( cfs , key , new Column ( cname , ByteBufferUtil . bytes ( " b " ) , 1 ) ) ; 
 
 / / Test fetching the column by name returns the first column 
 - SliceByNamesReadCommand cmd = new SliceByNamesReadCommand ( keyspaceName , key . key , cfName , System . currentTimeMillis ( ) , new NamesQueryFilter ( cname ) ) ; 
 + SliceByNamesReadCommand cmd = new SliceByNamesReadCommand ( keyspaceName , key . key , cfName , System . currentTimeMillis ( ) , new NamesQueryFilter ( FBUtilities . singleton ( cname , cfs . getComparator ( ) ) ) ) ; 
 ColumnFamily cf = cmd . getRow ( keyspace ) . cf ; 
 Column column = ( Column ) cf . getColumn ( cname ) ; 
 assert column . value ( ) . equals ( ByteBufferUtil . bytes ( " a " ) ) : " expecting a , got " + ByteBufferUtil . string ( column . value ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / KeyspaceTest . java b / test / unit / org / apache / cassandra / db / KeyspaceTest . java 
 index f1fcb29 . . e04a9d4 100644 
 - - - a / test / unit / org / apache / cassandra / db / KeyspaceTest . java 
 + + + b / test / unit / org / apache / cassandra / db / KeyspaceTest . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import static org . apache . cassandra . Util . expiringColumn ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 
 public class KeyspaceTest extends SchemaLoader 
 @ @ - 91 , 7 + 92 , 7 @ @ public class KeyspaceTest extends SchemaLoader 
 
 cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( TEST _ KEY , 
 " Standard3 " , 
 - ByteBufferUtil . bytes ( " col99 " ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( " col99 " ) , cfStore . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ) ; 
 assertColumns ( cf ) ; 
 } 
 @ @ - 120 , 13 + 121 , 13 @ @ public class KeyspaceTest extends SchemaLoader 
 
 cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( TEST _ KEY , 
 " Standard1 " , 
 - ByteBufferUtil . bytes ( " col1 " ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( " col1 " ) , cfStore . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ) ; 
 assertColumns ( cf , " col1 " ) ; 
 
 cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( TEST _ KEY , 
 " Standard1 " , 
 - ByteBufferUtil . bytes ( " col3 " ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( " col3 " ) , cfStore . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ) ; 
 assertColumns ( cf , " col3 " ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / ReadMessageTest . java b / test / unit / org / apache / cassandra / db / ReadMessageTest . java 
 index d829dae . . 94928c0 100644 
 - - - a / test / unit / org / apache / cassandra / db / ReadMessageTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ReadMessageTest . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 
 public class ReadMessageTest extends SchemaLoader 
 @ @ - 86 , 6 + 87 , 7 @ @ public class ReadMessageTest extends SchemaLoader 
 public void testGetColumn ( ) throws IOException , ColumnFamilyNotDefinedException 
 { 
 Keyspace keyspace = Keyspace . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 RowMutation rm ; 
 DecoratedKey dk = Util . dk ( " key1 " ) ; 
 
 @ @ - 94 , 7 + 96 , 7 @ @ public class ReadMessageTest extends SchemaLoader 
 rm . add ( " Standard1 " , ByteBufferUtil . bytes ( " Column1 " ) , ByteBufferUtil . bytes ( " abcd " ) , 0 ) ; 
 rm . apply ( ) ; 
 
 - ReadCommand command = new SliceByNamesReadCommand ( " Keyspace1 " , dk . key , " Standard1 " , System . currentTimeMillis ( ) , new NamesQueryFilter ( ByteBufferUtil . bytes ( " Column1 " ) ) ) ; 
 + ReadCommand command = new SliceByNamesReadCommand ( " Keyspace1 " , dk . key , " Standard1 " , System . currentTimeMillis ( ) , new NamesQueryFilter ( FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , cfs . getComparator ( ) ) ) ) ; 
 Row row = command . getRow ( keyspace ) ; 
 Column col = row . cf . getColumn ( ByteBufferUtil . bytes ( " Column1 " ) ) ; 
 assertEquals ( col . value ( ) , ByteBuffer . wrap ( " abcd " . getBytes ( ) ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 index b98a8b0 . . 1c98079 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManagerTruncateTest . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . junit . Test ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * Test for the truncate operation . 
 @ @ - 74 , 7 + 75 , 7 @ @ public class RecoveryManagerTruncateTest extends SchemaLoader 
 	 	 } 
 	 	 cf = cfStore . getColumnFamily ( QueryFilter . getNamesFilter ( Util . dk ( keyName ) , 
 cfName , 
 - ByteBufferUtil . bytes ( columnName ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( columnName ) , cfStore . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ) ; 
 	 	 if ( cf = = null ) 
 	 	 { 
 diff - - git a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java 
 index dfbf513 . . eddf5e0 100644 
 - - - a / test / unit / org / apache / cassandra / db / RemoveColumnTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RemoveColumnTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 
 public class RemoveColumnTest extends SchemaLoader 
 @ @ - 53 , 7 + 54 , 7 @ @ public class RemoveColumnTest extends SchemaLoader 
 
 ColumnFamily retrieved = store . getColumnFamily ( QueryFilter . getNamesFilter ( dk , 
 " Standard1 " , 
 - ByteBufferUtil . bytes ( " Column1 " ) , 
 + FBUtilities . singleton ( ByteBufferUtil . bytes ( " Column1 " ) , store . getComparator ( ) ) , 
 System . currentTimeMillis ( ) ) ) ; 
 assert retrieved . getColumn ( ByteBufferUtil . bytes ( " Column1 " ) ) . isMarkedForDelete ( System . currentTimeMillis ( ) ) ; 
 assertNull ( Util . cloneAndRemoveDeleted ( retrieved , Integer . MAX _ VALUE ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 index e508a55 . . c4ab8ab 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class LegacySSTableTest extends SchemaLoader 
 for ( String keystring : TEST _ DATA ) 
 { 
 ByteBuffer key = ByteBufferUtil . bytes ( keystring ) ; 
 - SSTableNamesIterator iter = new SSTableNamesIterator ( sstable , Util . dk ( key ) , FBUtilities . singleton ( key ) ) ; 
 + SSTableNamesIterator iter = new SSTableNamesIterator ( sstable , Util . dk ( key ) , FBUtilities . singleton ( key , sstable . metadata . comparator ) ) ; 
 ColumnFamily cf = iter . getColumnFamily ( ) ; 
 
 / / check not deleted ( CASSANDRA - 6527 ) 
 @ @ - 149 , 7 + 149 , 7 @ @ public class LegacySSTableTest extends SchemaLoader 
 ByteBuffer key = ByteBufferUtil . bytes ( keystring ) ; 
 / / confirm that the bloom filter does not reject any keys / names 
 DecoratedKey dk = reader . partitioner . decorateKey ( key ) ; 
 - SSTableNamesIterator iter = new SSTableNamesIterator ( reader , dk , FBUtilities . singleton ( key ) ) ; 
 + SSTableNamesIterator iter = new SSTableNamesIterator ( reader , dk , FBUtilities . singleton ( key , reader . metadata . comparator ) ) ; 
 assert iter . next ( ) . name ( ) . equals ( key ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 index 54c65f4 . . 47aa2c8 100644 
 - - - a / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 + + + b / test / unit / org / apache / cassandra / tools / SSTableExportTest . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import java . io . FileReader ; 
 import java . io . IOException ; 
 import java . io . OutputStream ; 
 import java . io . PrintStream ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . SortedSet ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . sstable . SSTableWriter ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . json . simple . JSONArray ; 
 import org . json . simple . JSONObject ; 
 import org . json . simple . JSONValue ; 
 @ @ - 201 , 13 + 204 , 14 @ @ public class SSTableExportTest extends SchemaLoader 
 new SSTableImport ( ) . importJson ( tempJson . getPath ( ) , " Keyspace1 " , " Standard1 " , tempSS2 . getPath ( ) ) ; 
 
 reader = SSTableReader . open ( Descriptor . fromFilename ( tempSS2 . getPath ( ) ) ) ; 
 - QueryFilter qf = QueryFilter . getNamesFilter ( Util . dk ( " rowA " ) , " Standard1 " , ByteBufferUtil . bytes ( " name " ) , System . currentTimeMillis ( ) ) ; 
 + SortedSet < ByteBuffer > names = FBUtilities . singleton ( ByteBufferUtil . bytes ( " name " ) , cfamily . getComparator ( ) ) ; 
 + QueryFilter qf = QueryFilter . getNamesFilter ( Util . dk ( " rowA " ) , " Standard1 " , names , System . currentTimeMillis ( ) ) ; 
 ColumnFamily cf = qf . getSSTableColumnIterator ( reader ) . getColumnFamily ( ) ; 
 qf . collateOnDiskAtom ( cf , qf . getSSTableColumnIterator ( reader ) , Integer . MIN _ VALUE ) ; 
 assertTrue ( cf ! = null ) ; 
 assertTrue ( cf . getColumn ( ByteBufferUtil . bytes ( " name " ) ) . value ( ) . equals ( hexToBytes ( " 76616c " ) ) ) ; 
 
 - qf = QueryFilter . getNamesFilter ( Util . dk ( " rowExclude " ) , " Standard1 " , ByteBufferUtil . bytes ( " name " ) , System . currentTimeMillis ( ) ) ; 
 + qf = QueryFilter . getNamesFilter ( Util . dk ( " rowExclude " ) , " Standard1 " , names , System . currentTimeMillis ( ) ) ; 
 cf = qf . getSSTableColumnIterator ( reader ) . getColumnFamily ( ) ; 
 assert cf = = null ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 3641945 . . 35354c8 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 394 , 7 + 394 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 doValidationCompaction ( cfStore , validator ) ; 
 } 
 - catch ( Exception e ) 
 + catch ( Throwable e ) 
 { 
 / / we need to inform the remote end of our failure , otherwise it will hang on repair forever 
 validator . fail ( ) ;
