BLEU SCORE: 0.17491650626361266

TEST MSG: More PEP8 compliance for cqlsh
GENERATED MSG: User types support for cqlsh .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b4e6f75 . . 6e1ca85 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> 2 . 1 . 20 <nl> - * <nl> + * More PEP8 compliance for cqlsh ( CASSANDRA - 14021 ) <nl> <nl> 2 . 1 . 19 <nl> * Add storage port options to sstableloader ( CASSANDRA - 13844 ) <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index 6317ec9 . . 30840db 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 83 , 6 + 83 , 7 @ @ def find _ zip ( libprefix ) : <nl> if zips : <nl> return max ( zips ) # probably the highest version , if multiple <nl> <nl> + <nl> cql _ zip = find _ zip ( CQL _ LIB _ PREFIX ) <nl> if cql _ zip : <nl> ver = os . path . splitext ( os . path . basename ( cql _ zip ) ) [ 0 ] [ len ( CQL _ LIB _ PREFIX ) : ] <nl> @ @ - 522 , 6 + 523 , 8 @ @ def show _ warning _ without _ quoting _ line ( message , category , filename , lineno , file = <nl> file . write ( warnings . formatwarning ( message , category , filename , lineno , line = ' ' ) ) <nl> except IOError : <nl> pass <nl> + <nl> + <nl> warnings . showwarning = show _ warning _ without _ quoting _ line <nl> warnings . filterwarnings ( ' always ' , category = cql3handling . UnexpectedTableStructure ) <nl> <nl> @ @ - 2213 , 6 + 2216 , 7 @ @ def main ( options , hostname , port ) : <nl> if batch _ mode and shell . statement _ error : <nl> sys . exit ( 2 ) <nl> <nl> + <nl> # always call this regardless of module name : when a sub - process is spawned <nl> # on Windows then the module name is not _ _ main _ _ , see CASSANDRA - 9304 <nl> insert _ driver _ hooks ( ) <nl> diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py <nl> index 3a45353 . . 85e2678 100644 <nl> - - - a / pylib / cqlshlib / copyutil . py <nl> + + + b / pylib / cqlshlib / copyutil . py <nl> @ @ - 191 , 7 + 191 , 7 @ @ class OneWayChannels ( object ) : <nl> for ch in self . channels : <nl> try : <nl> ch . close ( ) <nl> - except : <nl> + except Exception : <nl> pass <nl> <nl> <nl> @ @ - 1967 , 8 + 1967 , 8 @ @ class ImportConversion ( object ) : <nl> pk _ values = [ ] <nl> for i in partition _ key _ indexes : <nl> val = serialize ( i , row [ i ] ) <nl> - l = len ( val ) <nl> - pk _ values . append ( struct . pack ( " > H % dsB " % l , l , val , 0 ) ) <nl> + length = len ( val ) <nl> + pk _ values . append ( struct . pack ( " > H % dsB " % length , length , val , 0 ) ) <nl> return b " " . join ( pk _ values ) <nl> <nl> if len ( partition _ key _ indexes ) = = 1 : <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 029e0c7 . . 012e383 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 34 , 6 + 34 , 7 @ @ class UnexpectedTableStructure ( UserWarning ) : <nl> def _ _ str _ _ ( self ) : <nl> return ' Unexpected table structure ; may not translate correctly to CQL . ' + self . msg <nl> <nl> + <nl> SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) <nl> NONALTERBALE _ KEYSPACES = ( ' system ' ) <nl> <nl> @ @ - 109 , 6 + 110 , 7 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : <nl> cqlword = cqlword [ 1 : - 1 ] . replace ( " ' ' " , " ' " ) <nl> return cqlword <nl> <nl> + <nl> CqlRuleSet = Cql3ParsingRuleSet ( ) <nl> <nl> # convenience for remainder of module <nl> @ @ - 306 , 6 + 308 , 7 @ @ def prop _ equals _ completer ( ctxt , cass ) : <nl> return ( ) <nl> return [ ' = ' ] <nl> <nl> + <nl> completer _ for ( ' property ' , ' propeq ' ) ( prop _ equals _ completer ) <nl> <nl> <nl> @ @ - 529 , 6 + 532 , 7 @ @ def ks _ name _ completer ( ctxt , cass ) : <nl> def cf _ ks _ name _ completer ( ctxt , cass ) : <nl> return [ maybe _ escape _ name ( ks ) + ' . ' for ks in cass . get _ keyspace _ names ( ) ] <nl> <nl> + <nl> completer _ for ( ' columnFamilyName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) <nl> <nl> <nl> @ @ - 538 , 6 + 542 , 7 @ @ def cf _ ks _ dot _ completer ( ctxt , cass ) : <nl> return [ ' . ' ] <nl> return [ ] <nl> <nl> + <nl> completer _ for ( ' columnFamilyName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) <nl> <nl> <nl> @ @ - 554 , 6 + 559 , 7 @ @ def cf _ name _ completer ( ctxt , cass ) : <nl> raise <nl> return map ( maybe _ escape _ name , cfnames ) <nl> <nl> + <nl> completer _ for ( ' userTypeName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) <nl> <nl> completer _ for ( ' userTypeName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) <nl> @ @ - 606 , 6 + 612 , 7 @ @ def working _ on _ keyspace ( ctxt ) : <nl> return True <nl> return False <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < useStatement > : : = " USE " < keyspaceName > <nl> ; <nl> @ @ - 694 , 6 + 701 , 7 @ @ def select _ relation _ lhs _ completer ( ctxt , cass ) : <nl> def select _ count _ star _ completer ( ctxt , cass ) : <nl> return [ ' * ' ] <nl> <nl> + <nl> explain _ completion ( ' selector ' , ' colname ' ) <nl> <nl> syntax _ rules + = r ' ' ' <nl> @ @ - 770 , 6 + 778 , 7 @ @ def insert _ option _ completer ( ctxt , cass ) : <nl> opts . discard ( opt . split ( ) [ 0 ] ) <nl> return opts <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < updateStatement > : : = " UPDATE " cf = < columnFamilyName > <nl> ( " USING " [ updateopt ] = < usingOption > <nl> @ @ - 863 , 6 + 872 , 7 @ @ def update _ indexbracket _ completer ( ctxt , cass ) : <nl> return [ ' [ ' ] <nl> return [ ] <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < deleteStatement > : : = " DELETE " ( < deleteSelector > ( " , " < deleteSelector > ) * ) ? <nl> " FROM " cf = < columnFamilyName > <nl> @ @ - 890 , 6 + 900 , 7 @ @ def delete _ delcol _ completer ( ctxt , cass ) : <nl> layout = get _ table _ meta ( ctxt , cass ) <nl> return map ( maybe _ escape _ name , regular _ column _ names ( layout ) ) <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < batchStatement > : : = " BEGIN " ( " UNLOGGED " | " COUNTER " ) ? " BATCH " <nl> ( " USING " [ batchopt ] = < usingOption > <nl> @ @ - 912 , 6 + 923 , 7 @ @ def batch _ opt _ completer ( ctxt , cass ) : <nl> opts . discard ( opt . split ( ) [ 0 ] ) <nl> return opts <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < truncateStatement > : : = " TRUNCATE " ( " COLUMNFAMILY " | " TABLE " ) ? cf = < columnFamilyName > <nl> ; <nl> @ @ - 931 , 6 + 943 , 7 @ @ def create _ ks _ wat _ completer ( ctxt , cass ) : <nl> return [ ' KEYSPACE ' ] <nl> return [ ' KEYSPACE ' , ' SCHEMA ' ] <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < createColumnFamilyStatement > : : = " CREATE " wat = ( " COLUMNFAMILY " | " TABLE " ) ( " IF " " NOT " " EXISTS " ) ? <nl> ( ks = < nonSystemKeyspaceName > dot = " . " ) ? cf = < cfOrKsName > <nl> @ @ - 979 , 6 + 992 , 7 @ @ def create _ cf _ wat _ completer ( ctxt , cass ) : <nl> return [ ' TABLE ' ] <nl> return [ ' TABLE ' , ' COLUMNFAMILY ' ] <nl> <nl> + <nl> explain _ completion ( ' createColumnFamilyStatement ' , ' cf ' , ' < new _ table _ name > ' ) <nl> explain _ completion ( ' compositeKeyCfSpec ' , ' newcolname ' , ' < new _ column _ name > ' ) <nl> <nl> @ @ - 1033 , 6 + 1047 , 7 @ @ def create _ cf _ composite _ primary _ key _ comma _ completer ( ctxt , cass ) : <nl> return ( ) <nl> return [ ' , ' ] <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> <nl> < idxName > : : = < identifier > <nl> @ @ - 1065 , 6 + 1080 , 7 @ @ def create _ index _ col _ completer ( ctxt , cass ) : <nl> colnames = [ cd . name for cd in layout . columns . values ( ) if not cd . index ] <nl> return map ( maybe _ escape _ name , colnames ) <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < dropKeyspaceStatement > : : = " DROP " " KEYSPACE " ( " IF " " EXISTS " ) ? ksname = < nonSystemKeyspaceName > <nl> ; <nl> @ @ - 1113 , 6 + 1129 , 7 @ @ def idx _ ks _ idx _ name _ completer ( ctxt , cass ) : <nl> raise <nl> return map ( maybe _ escape _ name , idxnames ) <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < alterTableStatement > : : = " ALTER " wat = ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > <nl> < alterInstructions > <nl> @ @ - 1149 , 6 + 1166 , 7 @ @ def alter _ type _ field _ completer ( ctxt , cass ) : <nl> fields = [ tuple [ 0 ] for tuple in layout ] <nl> return map ( maybe _ escape _ name , fields ) <nl> <nl> + <nl> explain _ completion ( ' alterInstructions ' , ' newcol ' , ' < new _ column _ name > ' ) <nl> explain _ completion ( ' alterTypeInstructions ' , ' newcol ' , ' < new _ field _ name > ' ) <nl> <nl> @ @ - 1227 , 6 + 1245 , 7 @ @ def username _ name _ completer ( ctxt , cass ) : <nl> session = cass . session <nl> return [ maybe _ quote ( row . values ( ) [ 0 ] . replace ( " ' " , " ' ' " ) ) for row in session . execute ( " LIST USERS " ) ] <nl> <nl> + <nl> syntax _ rules + = r ' ' ' <nl> < createTriggerStatement > : : = " CREATE " " TRIGGER " ( " IF " " NOT " " EXISTS " ) ? < cident > <nl> " ON " cf = < columnFamilyName > " USING " class = < stringLiteral > <nl> @ @ - 1251 , 6 + 1270 , 7 @ @ def alter _ type _ field _ completer ( ctxt , cass ) : <nl> names = get _ trigger _ names ( ctxt , cass ) <nl> return map ( maybe _ escape _ name , names ) <nl> <nl> + <nl> # END SYNTAX / COMPLETION RULE DEFINITIONS <nl> <nl> CqlRuleSet . append _ rules ( syntax _ rules ) <nl> diff - - git a / pylib / cqlshlib / displaying . py b / pylib / cqlshlib / displaying . py <nl> index 7b260c2 . . 09068ca 100644 <nl> - - - a / pylib / cqlshlib / displaying . py <nl> + + + b / pylib / cqlshlib / displaying . py <nl> @ @ - 99 , 6 + 99 , 7 @ @ class FormattedValue : <nl> " " " <nl> return self . coloredval + self . _ pad ( width , fill ) <nl> <nl> + <nl> DEFAULT _ VALUE _ COLORS = dict ( <nl> default = YELLOW , <nl> text = YELLOW , <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index abb4896 . . eac1810 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 38 , 6 + 38 , 7 @ @ def _ show _ control _ chars ( match ) : <nl> txt = txt [ 1 : - 1 ] <nl> return txt <nl> <nl> + <nl> bits _ to _ turn _ red _ re = re . compile ( r ' \ \ ( [ ^ uUx ] | u [ 0 - 9a - fA - F ] { 4 } | x [ 0 - 9a - fA - F ] { 2 } | U [ 0 - 9a - fA - F ] { 8 } ) ' ) <nl> <nl> <nl> @ @ - 49 , 6 + 50 , 7 @ @ def _ make _ turn _ bits _ red _ f ( color1 , color2 ) : <nl> return color1 + txt + color2 <nl> return _ turn _ bits _ red <nl> <nl> + <nl> default _ null _ placeholder = ' null ' <nl> default _ time _ format = ' ' <nl> default _ float _ precision = 3 <nl> @ @ - 101 , 6 + 103 , 7 @ @ def format _ value _ default ( val , colormap , * * _ ) : <nl> bval = controlchars _ re . sub ( _ show _ control _ chars , escapedval ) <nl> return bval if colormap is NO _ COLOR _ MAP else color _ text ( bval , colormap ) <nl> <nl> + <nl> # Mapping cql type base names ( " int " , " map " , etc ) to formatter functions , <nl> # making format _ value a generic function <nl> _ formatters = { } <nl> @ @ - 128 , 6 + 131 , 8 @ @ def formatter _ for ( typname ) : <nl> def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' 0x ' + binascii . hexlify ( str ( val ) ) <nl> return colorme ( bval , colormap , ' blob ' ) <nl> + <nl> + <nl> formatter _ for ( ' buffer ' ) ( format _ value _ blob ) <nl> <nl> <nl> @ @ - 188 , 6 + 193 , 7 @ @ def format _ floating _ point _ type ( val , colormap , float _ precision , decimal _ sep = None , <nl> <nl> return colorme ( bval , colormap , ' float ' ) <nl> <nl> + <nl> formatter _ for ( ' float ' ) ( format _ floating _ point _ type ) <nl> <nl> <nl> @ @ - 196 , 6 + 202 , 7 @ @ def format _ integer _ type ( val , colormap , thousands _ sep = None , * * _ ) : <nl> bval = format _ integer _ with _ thousands _ sep ( val , thousands _ sep ) if thousands _ sep else str ( val ) <nl> return colorme ( bval , colormap , ' int ' ) <nl> <nl> + <nl> # We can get rid of this in cassandra - 2 . 2 <nl> if sys . version _ info > = ( 2 , 7 ) : <nl> def format _ integer _ with _ thousands _ sep ( val , thousands _ sep = ' , ' ) : <nl> @ @ - 221 , 6 + 228 , 7 @ @ def format _ value _ timestamp ( val , colormap , time _ format , quote = False , * * _ ) : <nl> bval = " ' % s ' " % bval <nl> return colorme ( bval , colormap , ' timestamp ' ) <nl> <nl> + <nl> formatter _ for ( ' datetime ' ) ( format _ value _ timestamp ) <nl> <nl> <nl> @ @ - 241 , 6 + 249 , 7 @ @ def format _ value _ text ( val , encoding , colormap , quote = False , * * _ ) : <nl> <nl> return bval if colormap is NO _ COLOR _ MAP else color _ text ( bval , colormap , wcwidth . wcswidth ( bval . decode ( encoding ) ) ) <nl> <nl> + <nl> # name alias <nl> formatter _ for ( ' unicode ' ) ( format _ value _ text ) <nl> <nl> @ @ - 286 , 6 + 295 , 8 @ @ def format _ value _ set ( val , encoding , colormap , time _ format , float _ precision , null <nl> return format _ simple _ collection ( sorted ( val ) , ' { ' , ' } ' , encoding , colormap , <nl> time _ format , float _ precision , nullval , <nl> decimal _ sep , thousands _ sep , boolean _ styles ) <nl> + <nl> + <nl> formatter _ for ( ' frozenset ' ) ( format _ value _ set ) <nl> # This code is used by cqlsh ( bundled driver version 2 . 7 . 2 using sortedset ) , <nl> # and the dtests , which use whichever driver on the machine , i . e . 3 . 0 . 0 ( SortedSet ) <nl> @ @ - 314 , 6 + 325 , 8 @ @ def format _ value _ map ( val , encoding , colormap , time _ format , float _ precision , null <nl> + rb <nl> displaywidth = 4 * len ( subs ) + sum ( k . displaywidth + v . displaywidth for ( k , v ) in subs ) <nl> return FormattedValue ( bval , coloredval , displaywidth ) <nl> + <nl> + <nl> formatter _ for ( ' OrderedDict ' ) ( format _ value _ map ) <nl> formatter _ for ( ' OrderedMap ' ) ( format _ value _ map ) <nl> formatter _ for ( ' OrderedMapSerializedKey ' ) ( format _ value _ map ) <nl> diff - - git a / pylib / cqlshlib / pylexotron . py b / pylib / cqlshlib / pylexotron . py <nl> index 9cf0f4e . . 7b11eac 100644 <nl> - - - a / pylib / cqlshlib / pylexotron . py <nl> + + + b / pylib / cqlshlib / pylexotron . py <nl> @ @ - 518 , 6 + 518 , 7 @ @ class ParsingRuleSet : <nl> pattern . match ( ctxt , completions ) <nl> return completions <nl> <nl> + <nl> import sys <nl> <nl> <nl> diff - - git a / pylib / cqlshlib / wcwidth . py b / pylib / cqlshlib / wcwidth . py <nl> index bc55c31 . . 985fd41 100644 <nl> - - - a / pylib / cqlshlib / wcwidth . py <nl> + + + b / pylib / cqlshlib / wcwidth . py <nl> @ @ - 94 , 6 + 94 , 7 @ @ def bisearch ( ucs , table ) : <nl> return 1 <nl> return 0 <nl> <nl> + <nl> # The following two functions define the column width of an ISO 10646 <nl> # character as follows : <nl> # <nl> @ @ - 178 , 6 + 179 , 7 @ @ combining = ( <nl> ( 0xE0100 , 0xE01EF ) <nl> ) <nl> <nl> + <nl> # sorted list of non - overlapping intervals of East Asian Ambiguous <nl> # characters , generated by " uniset + WIDTH - A - cat = Me - cat = Mn - cat = Cf c " <nl> ambiguous = ( <nl> @ @ - 321 , 6 + 323 , 7 @ @ def wcwidth _ cjk ( c ) : <nl> def wcswidth _ cjk ( s ) : <nl> return mk _ wcswidth _ cjk ( map ( ord , s ) ) <nl> <nl> + <nl> if _ _ name _ _ = = " _ _ main _ _ " : <nl> samples = ( <nl> ( ' MUSIC SHARP SIGN ' , 1 ) ,
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b4e6f75 . . 6e1ca85 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 2 . 1 . 20 
 - * 
 + * More PEP8 compliance for cqlsh ( CASSANDRA - 14021 ) 
 
 2 . 1 . 19 
 * Add storage port options to sstableloader ( CASSANDRA - 13844 ) 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index 6317ec9 . . 30840db 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 83 , 6 + 83 , 7 @ @ def find _ zip ( libprefix ) : 
 if zips : 
 return max ( zips ) # probably the highest version , if multiple 
 
 + 
 cql _ zip = find _ zip ( CQL _ LIB _ PREFIX ) 
 if cql _ zip : 
 ver = os . path . splitext ( os . path . basename ( cql _ zip ) ) [ 0 ] [ len ( CQL _ LIB _ PREFIX ) : ] 
 @ @ - 522 , 6 + 523 , 8 @ @ def show _ warning _ without _ quoting _ line ( message , category , filename , lineno , file = 
 file . write ( warnings . formatwarning ( message , category , filename , lineno , line = ' ' ) ) 
 except IOError : 
 pass 
 + 
 + 
 warnings . showwarning = show _ warning _ without _ quoting _ line 
 warnings . filterwarnings ( ' always ' , category = cql3handling . UnexpectedTableStructure ) 
 
 @ @ - 2213 , 6 + 2216 , 7 @ @ def main ( options , hostname , port ) : 
 if batch _ mode and shell . statement _ error : 
 sys . exit ( 2 ) 
 
 + 
 # always call this regardless of module name : when a sub - process is spawned 
 # on Windows then the module name is not _ _ main _ _ , see CASSANDRA - 9304 
 insert _ driver _ hooks ( ) 
 diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py 
 index 3a45353 . . 85e2678 100644 
 - - - a / pylib / cqlshlib / copyutil . py 
 + + + b / pylib / cqlshlib / copyutil . py 
 @ @ - 191 , 7 + 191 , 7 @ @ class OneWayChannels ( object ) : 
 for ch in self . channels : 
 try : 
 ch . close ( ) 
 - except : 
 + except Exception : 
 pass 
 
 
 @ @ - 1967 , 8 + 1967 , 8 @ @ class ImportConversion ( object ) : 
 pk _ values = [ ] 
 for i in partition _ key _ indexes : 
 val = serialize ( i , row [ i ] ) 
 - l = len ( val ) 
 - pk _ values . append ( struct . pack ( " > H % dsB " % l , l , val , 0 ) ) 
 + length = len ( val ) 
 + pk _ values . append ( struct . pack ( " > H % dsB " % length , length , val , 0 ) ) 
 return b " " . join ( pk _ values ) 
 
 if len ( partition _ key _ indexes ) = = 1 : 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 029e0c7 . . 012e383 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 34 , 6 + 34 , 7 @ @ class UnexpectedTableStructure ( UserWarning ) : 
 def _ _ str _ _ ( self ) : 
 return ' Unexpected table structure ; may not translate correctly to CQL . ' + self . msg 
 
 + 
 SYSTEM _ KEYSPACES = ( ' system ' , ' system _ traces ' , ' system _ auth ' ) 
 NONALTERBALE _ KEYSPACES = ( ' system ' ) 
 
 @ @ - 109 , 6 + 110 , 7 @ @ class Cql3ParsingRuleSet ( CqlParsingRuleSet ) : 
 cqlword = cqlword [ 1 : - 1 ] . replace ( " ' ' " , " ' " ) 
 return cqlword 
 
 + 
 CqlRuleSet = Cql3ParsingRuleSet ( ) 
 
 # convenience for remainder of module 
 @ @ - 306 , 6 + 308 , 7 @ @ def prop _ equals _ completer ( ctxt , cass ) : 
 return ( ) 
 return [ ' = ' ] 
 
 + 
 completer _ for ( ' property ' , ' propeq ' ) ( prop _ equals _ completer ) 
 
 
 @ @ - 529 , 6 + 532 , 7 @ @ def ks _ name _ completer ( ctxt , cass ) : 
 def cf _ ks _ name _ completer ( ctxt , cass ) : 
 return [ maybe _ escape _ name ( ks ) + ' . ' for ks in cass . get _ keyspace _ names ( ) ] 
 
 + 
 completer _ for ( ' columnFamilyName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) 
 
 
 @ @ - 538 , 6 + 542 , 7 @ @ def cf _ ks _ dot _ completer ( ctxt , cass ) : 
 return [ ' . ' ] 
 return [ ] 
 
 + 
 completer _ for ( ' columnFamilyName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) 
 
 
 @ @ - 554 , 6 + 559 , 7 @ @ def cf _ name _ completer ( ctxt , cass ) : 
 raise 
 return map ( maybe _ escape _ name , cfnames ) 
 
 + 
 completer _ for ( ' userTypeName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) 
 
 completer _ for ( ' userTypeName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) 
 @ @ - 606 , 6 + 612 , 7 @ @ def working _ on _ keyspace ( ctxt ) : 
 return True 
 return False 
 
 + 
 syntax _ rules + = r ' ' ' 
 < useStatement > : : = " USE " < keyspaceName > 
 ; 
 @ @ - 694 , 6 + 701 , 7 @ @ def select _ relation _ lhs _ completer ( ctxt , cass ) : 
 def select _ count _ star _ completer ( ctxt , cass ) : 
 return [ ' * ' ] 
 
 + 
 explain _ completion ( ' selector ' , ' colname ' ) 
 
 syntax _ rules + = r ' ' ' 
 @ @ - 770 , 6 + 778 , 7 @ @ def insert _ option _ completer ( ctxt , cass ) : 
 opts . discard ( opt . split ( ) [ 0 ] ) 
 return opts 
 
 + 
 syntax _ rules + = r ' ' ' 
 < updateStatement > : : = " UPDATE " cf = < columnFamilyName > 
 ( " USING " [ updateopt ] = < usingOption > 
 @ @ - 863 , 6 + 872 , 7 @ @ def update _ indexbracket _ completer ( ctxt , cass ) : 
 return [ ' [ ' ] 
 return [ ] 
 
 + 
 syntax _ rules + = r ' ' ' 
 < deleteStatement > : : = " DELETE " ( < deleteSelector > ( " , " < deleteSelector > ) * ) ? 
 " FROM " cf = < columnFamilyName > 
 @ @ - 890 , 6 + 900 , 7 @ @ def delete _ delcol _ completer ( ctxt , cass ) : 
 layout = get _ table _ meta ( ctxt , cass ) 
 return map ( maybe _ escape _ name , regular _ column _ names ( layout ) ) 
 
 + 
 syntax _ rules + = r ' ' ' 
 < batchStatement > : : = " BEGIN " ( " UNLOGGED " | " COUNTER " ) ? " BATCH " 
 ( " USING " [ batchopt ] = < usingOption > 
 @ @ - 912 , 6 + 923 , 7 @ @ def batch _ opt _ completer ( ctxt , cass ) : 
 opts . discard ( opt . split ( ) [ 0 ] ) 
 return opts 
 
 + 
 syntax _ rules + = r ' ' ' 
 < truncateStatement > : : = " TRUNCATE " ( " COLUMNFAMILY " | " TABLE " ) ? cf = < columnFamilyName > 
 ; 
 @ @ - 931 , 6 + 943 , 7 @ @ def create _ ks _ wat _ completer ( ctxt , cass ) : 
 return [ ' KEYSPACE ' ] 
 return [ ' KEYSPACE ' , ' SCHEMA ' ] 
 
 + 
 syntax _ rules + = r ' ' ' 
 < createColumnFamilyStatement > : : = " CREATE " wat = ( " COLUMNFAMILY " | " TABLE " ) ( " IF " " NOT " " EXISTS " ) ? 
 ( ks = < nonSystemKeyspaceName > dot = " . " ) ? cf = < cfOrKsName > 
 @ @ - 979 , 6 + 992 , 7 @ @ def create _ cf _ wat _ completer ( ctxt , cass ) : 
 return [ ' TABLE ' ] 
 return [ ' TABLE ' , ' COLUMNFAMILY ' ] 
 
 + 
 explain _ completion ( ' createColumnFamilyStatement ' , ' cf ' , ' < new _ table _ name > ' ) 
 explain _ completion ( ' compositeKeyCfSpec ' , ' newcolname ' , ' < new _ column _ name > ' ) 
 
 @ @ - 1033 , 6 + 1047 , 7 @ @ def create _ cf _ composite _ primary _ key _ comma _ completer ( ctxt , cass ) : 
 return ( ) 
 return [ ' , ' ] 
 
 + 
 syntax _ rules + = r ' ' ' 
 
 < idxName > : : = < identifier > 
 @ @ - 1065 , 6 + 1080 , 7 @ @ def create _ index _ col _ completer ( ctxt , cass ) : 
 colnames = [ cd . name for cd in layout . columns . values ( ) if not cd . index ] 
 return map ( maybe _ escape _ name , colnames ) 
 
 + 
 syntax _ rules + = r ' ' ' 
 < dropKeyspaceStatement > : : = " DROP " " KEYSPACE " ( " IF " " EXISTS " ) ? ksname = < nonSystemKeyspaceName > 
 ; 
 @ @ - 1113 , 6 + 1129 , 7 @ @ def idx _ ks _ idx _ name _ completer ( ctxt , cass ) : 
 raise 
 return map ( maybe _ escape _ name , idxnames ) 
 
 + 
 syntax _ rules + = r ' ' ' 
 < alterTableStatement > : : = " ALTER " wat = ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > 
 < alterInstructions > 
 @ @ - 1149 , 6 + 1166 , 7 @ @ def alter _ type _ field _ completer ( ctxt , cass ) : 
 fields = [ tuple [ 0 ] for tuple in layout ] 
 return map ( maybe _ escape _ name , fields ) 
 
 + 
 explain _ completion ( ' alterInstructions ' , ' newcol ' , ' < new _ column _ name > ' ) 
 explain _ completion ( ' alterTypeInstructions ' , ' newcol ' , ' < new _ field _ name > ' ) 
 
 @ @ - 1227 , 6 + 1245 , 7 @ @ def username _ name _ completer ( ctxt , cass ) : 
 session = cass . session 
 return [ maybe _ quote ( row . values ( ) [ 0 ] . replace ( " ' " , " ' ' " ) ) for row in session . execute ( " LIST USERS " ) ] 
 
 + 
 syntax _ rules + = r ' ' ' 
 < createTriggerStatement > : : = " CREATE " " TRIGGER " ( " IF " " NOT " " EXISTS " ) ? < cident > 
 " ON " cf = < columnFamilyName > " USING " class = < stringLiteral > 
 @ @ - 1251 , 6 + 1270 , 7 @ @ def alter _ type _ field _ completer ( ctxt , cass ) : 
 names = get _ trigger _ names ( ctxt , cass ) 
 return map ( maybe _ escape _ name , names ) 
 
 + 
 # END SYNTAX / COMPLETION RULE DEFINITIONS 
 
 CqlRuleSet . append _ rules ( syntax _ rules ) 
 diff - - git a / pylib / cqlshlib / displaying . py b / pylib / cqlshlib / displaying . py 
 index 7b260c2 . . 09068ca 100644 
 - - - a / pylib / cqlshlib / displaying . py 
 + + + b / pylib / cqlshlib / displaying . py 
 @ @ - 99 , 6 + 99 , 7 @ @ class FormattedValue : 
 " " " 
 return self . coloredval + self . _ pad ( width , fill ) 
 
 + 
 DEFAULT _ VALUE _ COLORS = dict ( 
 default = YELLOW , 
 text = YELLOW , 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index abb4896 . . eac1810 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 38 , 6 + 38 , 7 @ @ def _ show _ control _ chars ( match ) : 
 txt = txt [ 1 : - 1 ] 
 return txt 
 
 + 
 bits _ to _ turn _ red _ re = re . compile ( r ' \ \ ( [ ^ uUx ] | u [ 0 - 9a - fA - F ] { 4 } | x [ 0 - 9a - fA - F ] { 2 } | U [ 0 - 9a - fA - F ] { 8 } ) ' ) 
 
 
 @ @ - 49 , 6 + 50 , 7 @ @ def _ make _ turn _ bits _ red _ f ( color1 , color2 ) : 
 return color1 + txt + color2 
 return _ turn _ bits _ red 
 
 + 
 default _ null _ placeholder = ' null ' 
 default _ time _ format = ' ' 
 default _ float _ precision = 3 
 @ @ - 101 , 6 + 103 , 7 @ @ def format _ value _ default ( val , colormap , * * _ ) : 
 bval = controlchars _ re . sub ( _ show _ control _ chars , escapedval ) 
 return bval if colormap is NO _ COLOR _ MAP else color _ text ( bval , colormap ) 
 
 + 
 # Mapping cql type base names ( " int " , " map " , etc ) to formatter functions , 
 # making format _ value a generic function 
 _ formatters = { } 
 @ @ - 128 , 6 + 131 , 8 @ @ def formatter _ for ( typname ) : 
 def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' 0x ' + binascii . hexlify ( str ( val ) ) 
 return colorme ( bval , colormap , ' blob ' ) 
 + 
 + 
 formatter _ for ( ' buffer ' ) ( format _ value _ blob ) 
 
 
 @ @ - 188 , 6 + 193 , 7 @ @ def format _ floating _ point _ type ( val , colormap , float _ precision , decimal _ sep = None , 
 
 return colorme ( bval , colormap , ' float ' ) 
 
 + 
 formatter _ for ( ' float ' ) ( format _ floating _ point _ type ) 
 
 
 @ @ - 196 , 6 + 202 , 7 @ @ def format _ integer _ type ( val , colormap , thousands _ sep = None , * * _ ) : 
 bval = format _ integer _ with _ thousands _ sep ( val , thousands _ sep ) if thousands _ sep else str ( val ) 
 return colorme ( bval , colormap , ' int ' ) 
 
 + 
 # We can get rid of this in cassandra - 2 . 2 
 if sys . version _ info > = ( 2 , 7 ) : 
 def format _ integer _ with _ thousands _ sep ( val , thousands _ sep = ' , ' ) : 
 @ @ - 221 , 6 + 228 , 7 @ @ def format _ value _ timestamp ( val , colormap , time _ format , quote = False , * * _ ) : 
 bval = " ' % s ' " % bval 
 return colorme ( bval , colormap , ' timestamp ' ) 
 
 + 
 formatter _ for ( ' datetime ' ) ( format _ value _ timestamp ) 
 
 
 @ @ - 241 , 6 + 249 , 7 @ @ def format _ value _ text ( val , encoding , colormap , quote = False , * * _ ) : 
 
 return bval if colormap is NO _ COLOR _ MAP else color _ text ( bval , colormap , wcwidth . wcswidth ( bval . decode ( encoding ) ) ) 
 
 + 
 # name alias 
 formatter _ for ( ' unicode ' ) ( format _ value _ text ) 
 
 @ @ - 286 , 6 + 295 , 8 @ @ def format _ value _ set ( val , encoding , colormap , time _ format , float _ precision , null 
 return format _ simple _ collection ( sorted ( val ) , ' { ' , ' } ' , encoding , colormap , 
 time _ format , float _ precision , nullval , 
 decimal _ sep , thousands _ sep , boolean _ styles ) 
 + 
 + 
 formatter _ for ( ' frozenset ' ) ( format _ value _ set ) 
 # This code is used by cqlsh ( bundled driver version 2 . 7 . 2 using sortedset ) , 
 # and the dtests , which use whichever driver on the machine , i . e . 3 . 0 . 0 ( SortedSet ) 
 @ @ - 314 , 6 + 325 , 8 @ @ def format _ value _ map ( val , encoding , colormap , time _ format , float _ precision , null 
 + rb 
 displaywidth = 4 * len ( subs ) + sum ( k . displaywidth + v . displaywidth for ( k , v ) in subs ) 
 return FormattedValue ( bval , coloredval , displaywidth ) 
 + 
 + 
 formatter _ for ( ' OrderedDict ' ) ( format _ value _ map ) 
 formatter _ for ( ' OrderedMap ' ) ( format _ value _ map ) 
 formatter _ for ( ' OrderedMapSerializedKey ' ) ( format _ value _ map ) 
 diff - - git a / pylib / cqlshlib / pylexotron . py b / pylib / cqlshlib / pylexotron . py 
 index 9cf0f4e . . 7b11eac 100644 
 - - - a / pylib / cqlshlib / pylexotron . py 
 + + + b / pylib / cqlshlib / pylexotron . py 
 @ @ - 518 , 6 + 518 , 7 @ @ class ParsingRuleSet : 
 pattern . match ( ctxt , completions ) 
 return completions 
 
 + 
 import sys 
 
 
 diff - - git a / pylib / cqlshlib / wcwidth . py b / pylib / cqlshlib / wcwidth . py 
 index bc55c31 . . 985fd41 100644 
 - - - a / pylib / cqlshlib / wcwidth . py 
 + + + b / pylib / cqlshlib / wcwidth . py 
 @ @ - 94 , 6 + 94 , 7 @ @ def bisearch ( ucs , table ) : 
 return 1 
 return 0 
 
 + 
 # The following two functions define the column width of an ISO 10646 
 # character as follows : 
 # 
 @ @ - 178 , 6 + 179 , 7 @ @ combining = ( 
 ( 0xE0100 , 0xE01EF ) 
 ) 
 
 + 
 # sorted list of non - overlapping intervals of East Asian Ambiguous 
 # characters , generated by " uniset + WIDTH - A - cat = Me - cat = Mn - cat = Cf c " 
 ambiguous = ( 
 @ @ - 321 , 6 + 323 , 7 @ @ def wcwidth _ cjk ( c ) : 
 def wcswidth _ cjk ( s ) : 
 return mk _ wcswidth _ cjk ( map ( ord , s ) ) 
 
 + 
 if _ _ name _ _ = = " _ _ main _ _ " : 
 samples = ( 
 ( ' MUSIC SHARP SIGN ' , 1 ) ,

NEAREST DIFF:
ELIMINATEDSENTENCE
