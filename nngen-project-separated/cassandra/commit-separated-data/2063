BLEU SCORE: 0.037477767366779206

TEST MSG: Fix counters in supercolumns during live upgrades from 1 . 2
GENERATED MSG: Update deletion timestamps in Commit # updatesWithPaxosTime

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1c2231d . . bc12402 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 11 : <nl> + * Fix counters in supercolumns during live upgrades from 1 . 2 ( CASSANDRA - 7188 ) <nl> * Notify DT subscribers when a column family is truncated ( CASSANDRA - 8088 ) <nl> * Add sanity check of $ JAVA on startup ( CASSANDRA - 7676 ) <nl> * Schedule fat client schema pull on join ( CASSANDRA - 7993 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterUpdateColumn . java b / src / java / org / apache / cassandra / db / CounterUpdateColumn . java <nl> index 422beee . . df90625 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterUpdateColumn . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterUpdateColumn . java <nl> @ @ - 56 , 6 + 56 , 12 @ @ public class CounterUpdateColumn extends Column <nl> } <nl> <nl> @ Override <nl> + public CounterUpdateColumn withUpdatedName ( ByteBuffer newName ) <nl> + { <nl> + return new CounterUpdateColumn ( newName , value , timestamp ) ; <nl> + } <nl> + <nl> + @ Override <nl> public Column reconcile ( Column column , Allocator allocator ) <nl> { <nl> / / The only time this could happen is if a batchAdd ships two
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 20a6373 . . dec32d7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 6 + 15 , 7 @ @ <nl> * Always respect protocol version in native protocol ( CASSANDRA - 5778 ) <nl> * Fix ConcurrentModificationException during streaming ( CASSANDRA - 5782 ) <nl> * Update deletion timestamp in Commit # updatesWithPaxosTime ( CASSANDRA - 5787 ) <nl> + * Thrift cas ( ) method crashes if input columns are not sorted ( CASSANDRA - 5786 ) <nl> <nl> <nl> 2 . 0 . 0 - beta1 <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 5715058 . . 3bbf533 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 471 , 6 + 471 , 7 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry <nl> return builder . build ( ) ; <nl> } <nl> <nl> + / / Note : the returned ColumnFamily will be an UnsortedColumns . <nl> public static ColumnFamily fromBytes ( ByteBuffer bytes ) <nl> { <nl> if ( bytes = = null ) <nl> @ @ - 478 , 7 + 479 , 7 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry <nl> <nl> try <nl> { <nl> - return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , MessagingService . current _ version ) ; <nl> + return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , MessagingService . current _ version ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / Commit . java b / src / java / org / apache / cassandra / service / paxos / Commit . java <nl> index 04ddca8 . . 84589cc 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / Commit . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / Commit . java <nl> @ @ - 32 , 8 + 32 , 10 @ @ import com . google . common . base . Objects ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . Column ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnSerializer ; <nl> import org . apache . cassandra . db . EmptyColumns ; <nl> import org . apache . cassandra . db . RowMutation ; <nl> + import org . apache . cassandra . db . UnsortedColumns ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> @ @ - 139 , 7 + 141 , 7 @ @ public class Commit <nl> { <nl> return new Commit ( ByteBufferUtil . readWithShortLength ( in ) , <nl> UUIDSerializer . serializer . deserialize ( in , version ) , <nl> - ColumnFamily . serializer . deserialize ( in , version ) ) ; <nl> + ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ; <nl> } <nl> <nl> public long serializedSize ( Commit commit , int version ) <nl> diff - - git a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java <nl> index 246e09a . . 9f5fda6 100644 <nl> - - - a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java <nl> + + + b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java <nl> @ @ - 27 , 6 + 27 , 8 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnSerializer ; <nl> + import org . apache . cassandra . db . UnsortedColumns ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . UUIDSerializer ; <nl> @ @ - 74 , 10 + 76 , 10 @ @ public class PrepareResponse <nl> return new PrepareResponse ( success , <nl> new Commit ( key , <nl> UUIDSerializer . serializer . deserialize ( in , version ) , <nl> - ColumnFamily . serializer . deserialize ( in , version ) ) , <nl> + ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) , <nl> new Commit ( key , <nl> UUIDSerializer . serializer . deserialize ( in , version ) , <nl> - ColumnFamily . serializer . deserialize ( in , version ) ) ) ; <nl> + ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ) ; <nl> } <nl> <nl> public long serializedSize ( PrepareResponse response , int version )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1c2231d . . bc12402 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 11 : 
 + * Fix counters in supercolumns during live upgrades from 1 . 2 ( CASSANDRA - 7188 ) 
 * Notify DT subscribers when a column family is truncated ( CASSANDRA - 8088 ) 
 * Add sanity check of $ JAVA on startup ( CASSANDRA - 7676 ) 
 * Schedule fat client schema pull on join ( CASSANDRA - 7993 ) 
 diff - - git a / src / java / org / apache / cassandra / db / CounterUpdateColumn . java b / src / java / org / apache / cassandra / db / CounterUpdateColumn . java 
 index 422beee . . df90625 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterUpdateColumn . java 
 + + + b / src / java / org / apache / cassandra / db / CounterUpdateColumn . java 
 @ @ - 56 , 6 + 56 , 12 @ @ public class CounterUpdateColumn extends Column 
 } 
 
 @ Override 
 + public CounterUpdateColumn withUpdatedName ( ByteBuffer newName ) 
 + { 
 + return new CounterUpdateColumn ( newName , value , timestamp ) ; 
 + } 
 + 
 + @ Override 
 public Column reconcile ( Column column , Allocator allocator ) 
 { 
 / / The only time this could happen is if a batchAdd ships two

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 20a6373 . . dec32d7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 6 + 15 , 7 @ @ 
 * Always respect protocol version in native protocol ( CASSANDRA - 5778 ) 
 * Fix ConcurrentModificationException during streaming ( CASSANDRA - 5782 ) 
 * Update deletion timestamp in Commit # updatesWithPaxosTime ( CASSANDRA - 5787 ) 
 + * Thrift cas ( ) method crashes if input columns are not sorted ( CASSANDRA - 5786 ) 
 
 
 2 . 0 . 0 - beta1 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 5715058 . . 3bbf533 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 471 , 6 + 471 , 7 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry 
 return builder . build ( ) ; 
 } 
 
 + / / Note : the returned ColumnFamily will be an UnsortedColumns . 
 public static ColumnFamily fromBytes ( ByteBuffer bytes ) 
 { 
 if ( bytes = = null ) 
 @ @ - 478 , 7 + 479 , 7 @ @ public abstract class ColumnFamily implements Iterable < Column > , IRowCacheEntry 
 
 try 
 { 
 - return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , MessagingService . current _ version ) ; 
 + return serializer . deserialize ( new DataInputStream ( ByteBufferUtil . inputStream ( bytes ) ) , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , MessagingService . current _ version ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / Commit . java b / src / java / org / apache / cassandra / service / paxos / Commit . java 
 index 04ddca8 . . 84589cc 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / Commit . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / Commit . java 
 @ @ - 32 , 8 + 32 , 10 @ @ import com . google . common . base . Objects ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . Column ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnSerializer ; 
 import org . apache . cassandra . db . EmptyColumns ; 
 import org . apache . cassandra . db . RowMutation ; 
 + import org . apache . cassandra . db . UnsortedColumns ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 @ @ - 139 , 7 + 141 , 7 @ @ public class Commit 
 { 
 return new Commit ( ByteBufferUtil . readWithShortLength ( in ) , 
 UUIDSerializer . serializer . deserialize ( in , version ) , 
 - ColumnFamily . serializer . deserialize ( in , version ) ) ; 
 + ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ; 
 } 
 
 public long serializedSize ( Commit commit , int version ) 
 diff - - git a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java 
 index 246e09a . . 9f5fda6 100644 
 - - - a / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java 
 + + + b / src / java / org / apache / cassandra / service / paxos / PrepareResponse . java 
 @ @ - 27 , 6 + 27 , 8 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnSerializer ; 
 + import org . apache . cassandra . db . UnsortedColumns ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . UUIDSerializer ; 
 @ @ - 74 , 10 + 76 , 10 @ @ public class PrepareResponse 
 return new PrepareResponse ( success , 
 new Commit ( key , 
 UUIDSerializer . serializer . deserialize ( in , version ) , 
 - ColumnFamily . serializer . deserialize ( in , version ) ) , 
 + ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) , 
 new Commit ( key , 
 UUIDSerializer . serializer . deserialize ( in , version ) , 
 - ColumnFamily . serializer . deserialize ( in , version ) ) ) ; 
 + ColumnFamily . serializer . deserialize ( in , UnsortedColumns . factory , ColumnSerializer . Flag . LOCAL , version ) ) ) ; 
 } 
 
 public long serializedSize ( PrepareResponse response , int version )
