BLEU SCORE: 0.05522397783539471

TEST MSG: Avoid un - needed system flushes on startup
GENERATED MSG: Update CQL pseudo - maps to real maps

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 36f0605 . . 5b63ba6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 413 , 6 + 413 , 9 @ @ public final class SystemKeyspace <nl> <nl> public static void setViewBuilt ( String keyspaceName , String viewName , boolean replicated ) <nl> { <nl> + if ( isViewBuilt ( keyspaceName , viewName ) & & isViewStatusReplicated ( keyspaceName , viewName ) = = replicated ) <nl> + return ; <nl> + <nl> String req = " INSERT INTO % s . \ " % s \ " ( keyspace _ name , view _ name , status _ replicated ) VALUES ( ? , ? , ? ) " ; <nl> executeInternal ( String . format ( req , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , BUILT _ VIEWS ) , keyspaceName , viewName , replicated ) ; <nl> forceBlockingFlush ( BUILT _ VIEWS ) ; <nl> @ @ - 420 , 11 + 423 , 11 @ @ public final class SystemKeyspace <nl> <nl> public static void setViewRemoved ( String keyspaceName , String viewName ) <nl> { <nl> - String buildReq = " DELETE FROM % S . % s WHERE keyspace _ name = ? AND view _ name = ? " ; <nl> + String buildReq = " DELETE FROM % S . % s WHERE keyspace _ name = ? AND view _ name = ? IF EXISTS " ; <nl> executeInternal ( String . format ( buildReq , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , VIEWS _ BUILDS _ IN _ PROGRESS ) , keyspaceName , viewName ) ; <nl> forceBlockingFlush ( VIEWS _ BUILDS _ IN _ PROGRESS ) ; <nl> <nl> - String builtReq = " DELETE FROM % s . \ " % s \ " WHERE keyspace _ name = ? AND view _ name = ? " ; <nl> + String builtReq = " DELETE FROM % s . \ " % s \ " WHERE keyspace _ name = ? AND view _ name = ? IF EXISTS " ; <nl> executeInternal ( String . format ( builtReq , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , BUILT _ VIEWS ) , keyspaceName , viewName ) ; <nl> forceBlockingFlush ( BUILT _ VIEWS ) ; <nl> } <nl> @ @ - 445 , 7 + 448 , 7 @ @ public final class SystemKeyspace <nl> / / Also , if writing to the built _ view succeeds , but the view _ builds _ in _ progress deletion fails , we will be able <nl> / / to skip the view build next boot . <nl> setViewBuilt ( ksname , viewName , false ) ; <nl> - executeInternal ( String . format ( " DELETE FROM system . % s WHERE keyspace _ name = ? AND view _ name = ? " , VIEWS _ BUILDS _ IN _ PROGRESS ) , ksname , viewName ) ; <nl> + executeInternal ( String . format ( " DELETE FROM system . % s WHERE keyspace _ name = ? AND view _ name = ? IF EXISTS " , VIEWS _ BUILDS _ IN _ PROGRESS ) , ksname , viewName ) ; <nl> forceBlockingFlush ( VIEWS _ BUILDS _ IN _ PROGRESS ) ; <nl> } <nl> <nl> @ @ - 496 , 6 + 499 , 10 @ @ public final class SystemKeyspace <nl> * / <nl> public static synchronized void removeTruncationRecord ( UUID cfId ) <nl> { <nl> + Pair < CommitLogPosition , Long > truncationRecord = getTruncationRecord ( cfId ) ; <nl> + if ( truncationRecord = = null ) <nl> + return ; <nl> + <nl> String req = " DELETE truncated _ at [ ? ] from system . % s WHERE key = ' % s ' " ; <nl> executeInternal ( String . format ( req , LOCAL , LOCAL ) , cfId ) ; <nl> truncationRecords = null ; <nl> @ @ - 577 , 6 + 584 , 9 @ @ public final class SystemKeyspace <nl> <nl> public static synchronized void updatePreferredIP ( InetAddress ep , InetAddress preferred _ ip ) <nl> { <nl> + if ( getPreferredIP ( ep ) = = preferred _ ip ) <nl> + return ; <nl> + <nl> String req = " INSERT INTO system . % s ( peer , preferred _ ip ) VALUES ( ? , ? ) " ; <nl> executeInternal ( String . format ( req , PEERS ) , ep , preferred _ ip ) ; <nl> forceBlockingFlush ( PEERS ) ; <nl> @ @ - 640 , 6 + 650 , 11 @ @ public final class SystemKeyspace <nl> public static synchronized void updateTokens ( Collection < Token > tokens ) <nl> { <nl> assert ! tokens . isEmpty ( ) : " removeEndpoint should be used instead " ; <nl> + <nl> + Collection < Token > savedTokens = getSavedTokens ( ) ; <nl> + if ( tokens . containsAll ( savedTokens ) & & tokens . size ( ) = = savedTokens . size ( ) ) <nl> + return ; <nl> + <nl> String req = " INSERT INTO system . % s ( key , tokens ) VALUES ( ' % s ' , ? ) " ; <nl> executeInternal ( String . format ( req , LOCAL , LOCAL ) , tokensAsSet ( tokens ) ) ; <nl> forceBlockingFlush ( LOCAL ) ; <nl> @ @ - 867 , 6 + 882 , 9 @ @ public final class SystemKeyspace <nl> <nl> public static void setBootstrapState ( BootstrapState state ) <nl> { <nl> + if ( getBootstrapState ( ) = = state ) <nl> + return ; <nl> + <nl> String req = " INSERT INTO system . % s ( key , bootstrapped ) VALUES ( ' % s ' , ? ) " ; <nl> executeInternal ( String . format ( req , LOCAL , LOCAL ) , state . name ( ) ) ; <nl> forceBlockingFlush ( LOCAL ) ; <nl> @ @ - 888 , 7 + 906 , 7 @ @ public final class SystemKeyspace <nl> <nl> public static void setIndexRemoved ( String keyspaceName , String indexName ) <nl> { <nl> - String req = " DELETE FROM % s . \ " % s \ " WHERE table _ name = ? AND index _ name = ? " ; <nl> + String req = " DELETE FROM % s . \ " % s \ " WHERE table _ name = ? AND index _ name = ? IF EXISTS " ; <nl> executeInternal ( String . format ( req , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , BUILT _ INDEXES ) , keyspaceName , indexName ) ; <nl> forceBlockingFlush ( BUILT _ INDEXES ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b23e9ba . . 6c504e8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 1 . 5 <nl> + * fix FD leak in slice queries ( CASSANDRA - 4571 ) <nl> * avoid recursion in leveled compaction ( CASSANDRA - 4587 ) <nl> * increase stack size under Java7 to 180K <nl> * Log ( info ) schema changes ( CASSANDRA - 4547 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java <nl> index 8121062 . . fb9674f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CollationController . java <nl> + + + b / src / java / org / apache / cassandra / db / CollationController . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; <nl> import org . apache . cassandra . db . columniterator . SimpleAbstractColumnIterator ; <nl> import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> @ @ - 245 , 7 + 246 , 6 @ @ public class CollationController <nl> } <nl> <nl> long mostRecentRowTombstone = Long . MIN _ VALUE ; <nl> - Map < IColumnIterator , Long > iteratorMaxTimes = Maps . newHashMapWithExpectedSize ( view . sstables . size ( ) ) ; <nl> for ( SSTableReader sstable : view . sstables ) <nl> { <nl> / / if we ' ve already seen a row tombstone with a timestamp greater <nl> @ @ - 254 , 7 + 254 , 7 @ @ public class CollationController <nl> continue ; <nl> <nl> IColumnIterator iter = filter . getSSTableColumnIterator ( sstable ) ; <nl> - iteratorMaxTimes . put ( iter , sstable . getMaxTimestamp ( ) ) ; <nl> + iterators . add ( iter ) ; <nl> if ( iter . getColumnFamily ( ) ! = null ) <nl> { <nl> ColumnFamily cf = iter . getColumnFamily ( ) ; <nl> @ @ - 269 , 10 + 269 , 19 @ @ public class CollationController <nl> / / If we saw a row tombstone , do a second pass through the iterators we <nl> / / obtained from the sstables and drop any whose maxTimestamp < that of the <nl> / / row tombstone <nl> - for ( Map . Entry < IColumnIterator , Long > entry : iteratorMaxTimes . entrySet ( ) ) <nl> + if ( mostRecentRowTombstone > Long . MIN _ VALUE ) <nl> { <nl> - if ( entry . getValue ( ) > = mostRecentRowTombstone ) <nl> - iterators . add ( entry . getKey ( ) ) ; <nl> + Iterator < IColumnIterator > it = iterators . iterator ( ) ; <nl> + while ( it . hasNext ( ) ) <nl> + { <nl> + IColumnIterator iter = it . next ( ) ; <nl> + if ( ( iter instanceof ISSTableColumnIterator ) <nl> + & & ( ( ISSTableColumnIterator ) iter ) . getSStable ( ) . getMaxTimestamp ( ) < mostRecentRowTombstone ) <nl> + { <nl> + FileUtils . closeQuietly ( iter ) ; <nl> + it . remove ( ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / / we need to distinguish between " there is no data at all for this row " ( BF will let us rebuild that efficiently ) <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / ISSTableColumnIterator . java b / src / java / org / apache / cassandra / db / columniterator / ISSTableColumnIterator . java <nl> new file mode 100644 <nl> index 0000000 . . 4da4c0a <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / ISSTableColumnIterator . java <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + package org . apache . cassandra . db . columniterator ; <nl> + <nl> + import org . apache . cassandra . io . sstable . SSTableReader ; <nl> + <nl> + public interface ISSTableColumnIterator extends IColumnIterator <nl> + { <nl> + public SSTableReader getSStable ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> index d5d999f . . 23036df 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . Filter ; <nl> <nl> - public class SSTableNamesIterator extends SimpleAbstractColumnIterator implements IColumnIterator <nl> + public class SSTableNamesIterator extends SimpleAbstractColumnIterator implements ISSTableColumnIterator <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( SSTableNamesIterator . class ) ; <nl> <nl> @ @ - 51 , 9 + 51 , 11 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> private Iterator < IColumn > iter ; <nl> public final SortedSet < ByteBuffer > columns ; <nl> public final DecoratedKey key ; <nl> + private final SSTableReader sstable ; <nl> <nl> public SSTableNamesIterator ( SSTableReader sstable , DecoratedKey key , SortedSet < ByteBuffer > columns ) <nl> { <nl> + this . sstable = sstable ; <nl> assert columns ! = null ; <nl> this . columns = columns ; <nl> this . key = key ; <nl> @ @ - 84 , 6 + 86 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> <nl> public SSTableNamesIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey key , SortedSet < ByteBuffer > columns ) <nl> { <nl> + this . sstable = sstable ; <nl> assert columns ! = null ; <nl> this . columns = columns ; <nl> this . key = key ; <nl> @ @ - 99 , 6 + 102 , 11 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> } <nl> } <nl> <nl> + public SSTableReader getSStable ( ) <nl> + { <nl> + return sstable ; <nl> + } <nl> + <nl> private void read ( SSTableReader sstable , FileDataInput file ) <nl> throws IOException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> index 8e4fc06 . . 38335f4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> @ @ - 36 , 14 + 36 , 16 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> / * * <nl> * A Column Iterator over SSTable <nl> * / <nl> - public class SSTableSliceIterator implements IColumnIterator <nl> + public class SSTableSliceIterator implements ISSTableColumnIterator <nl> { <nl> private final FileDataInput fileToClose ; <nl> private IColumnIterator reader ; <nl> + private final SSTableReader sstable ; <nl> private DecoratedKey key ; <nl> <nl> public SSTableSliceIterator ( SSTableReader sstable , DecoratedKey key , ByteBuffer startColumn , ByteBuffer finishColumn , boolean reversed ) <nl> { <nl> + this . sstable = sstable ; <nl> this . key = key ; <nl> fileToClose = sstable . getFileDataInput ( this . key ) ; <nl> if ( fileToClose = = null ) <nl> @ @ - 81 , 6 + 83 , 7 @ @ public class SSTableSliceIterator implements IColumnIterator <nl> * / <nl> public SSTableSliceIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey key , ByteBuffer startColumn , ByteBuffer finishColumn , boolean reversed ) <nl> { <nl> + this . sstable = sstable ; <nl> this . key = key ; <nl> fileToClose = null ; <nl> reader = createReader ( sstable , file , startColumn , finishColumn , reversed ) ; <nl> @ @ - 93 , 6 + 96 , 11 @ @ public class SSTableSliceIterator implements IColumnIterator <nl> : new IndexedSliceReader ( sstable , file , startColumn , finishColumn , reversed ) ; <nl> } <nl> <nl> + public SSTableReader getSStable ( ) <nl> + { <nl> + return sstable ; <nl> + } <nl> + <nl> public DecoratedKey getKey ( ) <nl> { <nl> return key ; <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / IFilter . java b / src / java / org / apache / cassandra / db / filter / IFilter . java <nl> index de26e83 . . 355d3c6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / IFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / IFilter . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Iterator ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> @ @ - 51 , 13 + 52 , 13 @ @ public interface IFilter <nl> * @ param file Already opened file data input , saves us opening another one <nl> * @ param key The key of the row we are about to iterate over <nl> * / <nl> - public abstract IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) ; <nl> + public abstract ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) ; <nl> <nl> / * * <nl> * returns an iterator that returns columns from the given SSTable <nl> * matching the Filter criteria in sorted order . <nl> * / <nl> - public abstract IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) ; <nl> + public abstract ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) ; <nl> <nl> / * * <nl> * collects columns from reducedColumns into returnCF . Termination is determined <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> index d6ab552 . . 6db0aee 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . commons . lang . StringUtils ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; <nl> import org . apache . cassandra . db . columniterator . SSTableNamesIterator ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> @ @ - 55 , 12 + 56 , 12 @ @ public class NamesQueryFilter implements IFilter <nl> return Memtable . getNamesIterator ( key , cf , this ) ; <nl> } <nl> <nl> - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) <nl> + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) <nl> { <nl> return new SSTableNamesIterator ( sstable , key , columns ) ; <nl> } <nl> <nl> - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) <nl> + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) <nl> { <nl> return new SSTableNamesIterator ( sstable , file , key , columns ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> index 1e83bf4 . . 08a4f70 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; <nl> import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> @ @ - 72 , 14 + 73 , 14 @ @ public class QueryFilter <nl> } <nl> <nl> / / TODO move gcBefore into a field <nl> - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable ) <nl> + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable ) <nl> { <nl> if ( path . superColumnName = = null ) <nl> return filter . getSSTableColumnIterator ( sstable , key ) ; <nl> return superFilter . getSSTableColumnIterator ( sstable , key ) ; <nl> } <nl> <nl> - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) <nl> + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) <nl> { <nl> if ( path . superColumnName = = null ) <nl> return filter . getSSTableColumnIterator ( sstable , file , key ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index 1a4a912 . . e749719 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; <nl> import org . apache . cassandra . db . columniterator . SSTableSliceIterator ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> @ @ - 61 , 12 + 62 , 12 @ @ public class SliceQueryFilter implements IFilter <nl> return Memtable . getSliceIterator ( key , cf , this ) ; <nl> } <nl> <nl> - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) <nl> + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) <nl> { <nl> return new SSTableSliceIterator ( sstable , key , start , finish , reversed ) ; <nl> } <nl> <nl> - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) <nl> + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) <nl> { <nl> return new SSTableSliceIterator ( sstable , file , key , start , finish , reversed ) ; <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 36f0605 . . 5b63ba6 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 413 , 6 + 413 , 9 @ @ public final class SystemKeyspace 
 
 public static void setViewBuilt ( String keyspaceName , String viewName , boolean replicated ) 
 { 
 + if ( isViewBuilt ( keyspaceName , viewName ) & & isViewStatusReplicated ( keyspaceName , viewName ) = = replicated ) 
 + return ; 
 + 
 String req = " INSERT INTO % s . \ " % s \ " ( keyspace _ name , view _ name , status _ replicated ) VALUES ( ? , ? , ? ) " ; 
 executeInternal ( String . format ( req , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , BUILT _ VIEWS ) , keyspaceName , viewName , replicated ) ; 
 forceBlockingFlush ( BUILT _ VIEWS ) ; 
 @ @ - 420 , 11 + 423 , 11 @ @ public final class SystemKeyspace 
 
 public static void setViewRemoved ( String keyspaceName , String viewName ) 
 { 
 - String buildReq = " DELETE FROM % S . % s WHERE keyspace _ name = ? AND view _ name = ? " ; 
 + String buildReq = " DELETE FROM % S . % s WHERE keyspace _ name = ? AND view _ name = ? IF EXISTS " ; 
 executeInternal ( String . format ( buildReq , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , VIEWS _ BUILDS _ IN _ PROGRESS ) , keyspaceName , viewName ) ; 
 forceBlockingFlush ( VIEWS _ BUILDS _ IN _ PROGRESS ) ; 
 
 - String builtReq = " DELETE FROM % s . \ " % s \ " WHERE keyspace _ name = ? AND view _ name = ? " ; 
 + String builtReq = " DELETE FROM % s . \ " % s \ " WHERE keyspace _ name = ? AND view _ name = ? IF EXISTS " ; 
 executeInternal ( String . format ( builtReq , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , BUILT _ VIEWS ) , keyspaceName , viewName ) ; 
 forceBlockingFlush ( BUILT _ VIEWS ) ; 
 } 
 @ @ - 445 , 7 + 448 , 7 @ @ public final class SystemKeyspace 
 / / Also , if writing to the built _ view succeeds , but the view _ builds _ in _ progress deletion fails , we will be able 
 / / to skip the view build next boot . 
 setViewBuilt ( ksname , viewName , false ) ; 
 - executeInternal ( String . format ( " DELETE FROM system . % s WHERE keyspace _ name = ? AND view _ name = ? " , VIEWS _ BUILDS _ IN _ PROGRESS ) , ksname , viewName ) ; 
 + executeInternal ( String . format ( " DELETE FROM system . % s WHERE keyspace _ name = ? AND view _ name = ? IF EXISTS " , VIEWS _ BUILDS _ IN _ PROGRESS ) , ksname , viewName ) ; 
 forceBlockingFlush ( VIEWS _ BUILDS _ IN _ PROGRESS ) ; 
 } 
 
 @ @ - 496 , 6 + 499 , 10 @ @ public final class SystemKeyspace 
 * / 
 public static synchronized void removeTruncationRecord ( UUID cfId ) 
 { 
 + Pair < CommitLogPosition , Long > truncationRecord = getTruncationRecord ( cfId ) ; 
 + if ( truncationRecord = = null ) 
 + return ; 
 + 
 String req = " DELETE truncated _ at [ ? ] from system . % s WHERE key = ' % s ' " ; 
 executeInternal ( String . format ( req , LOCAL , LOCAL ) , cfId ) ; 
 truncationRecords = null ; 
 @ @ - 577 , 6 + 584 , 9 @ @ public final class SystemKeyspace 
 
 public static synchronized void updatePreferredIP ( InetAddress ep , InetAddress preferred _ ip ) 
 { 
 + if ( getPreferredIP ( ep ) = = preferred _ ip ) 
 + return ; 
 + 
 String req = " INSERT INTO system . % s ( peer , preferred _ ip ) VALUES ( ? , ? ) " ; 
 executeInternal ( String . format ( req , PEERS ) , ep , preferred _ ip ) ; 
 forceBlockingFlush ( PEERS ) ; 
 @ @ - 640 , 6 + 650 , 11 @ @ public final class SystemKeyspace 
 public static synchronized void updateTokens ( Collection < Token > tokens ) 
 { 
 assert ! tokens . isEmpty ( ) : " removeEndpoint should be used instead " ; 
 + 
 + Collection < Token > savedTokens = getSavedTokens ( ) ; 
 + if ( tokens . containsAll ( savedTokens ) & & tokens . size ( ) = = savedTokens . size ( ) ) 
 + return ; 
 + 
 String req = " INSERT INTO system . % s ( key , tokens ) VALUES ( ' % s ' , ? ) " ; 
 executeInternal ( String . format ( req , LOCAL , LOCAL ) , tokensAsSet ( tokens ) ) ; 
 forceBlockingFlush ( LOCAL ) ; 
 @ @ - 867 , 6 + 882 , 9 @ @ public final class SystemKeyspace 
 
 public static void setBootstrapState ( BootstrapState state ) 
 { 
 + if ( getBootstrapState ( ) = = state ) 
 + return ; 
 + 
 String req = " INSERT INTO system . % s ( key , bootstrapped ) VALUES ( ' % s ' , ? ) " ; 
 executeInternal ( String . format ( req , LOCAL , LOCAL ) , state . name ( ) ) ; 
 forceBlockingFlush ( LOCAL ) ; 
 @ @ - 888 , 7 + 906 , 7 @ @ public final class SystemKeyspace 
 
 public static void setIndexRemoved ( String keyspaceName , String indexName ) 
 { 
 - String req = " DELETE FROM % s . \ " % s \ " WHERE table _ name = ? AND index _ name = ? " ; 
 + String req = " DELETE FROM % s . \ " % s \ " WHERE table _ name = ? AND index _ name = ? IF EXISTS " ; 
 executeInternal ( String . format ( req , SchemaConstants . SYSTEM _ KEYSPACE _ NAME , BUILT _ INDEXES ) , keyspaceName , indexName ) ; 
 forceBlockingFlush ( BUILT _ INDEXES ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b23e9ba . . 6c504e8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 1 . 5 
 + * fix FD leak in slice queries ( CASSANDRA - 4571 ) 
 * avoid recursion in leveled compaction ( CASSANDRA - 4587 ) 
 * increase stack size under Java7 to 180K 
 * Log ( info ) schema changes ( CASSANDRA - 4547 ) 
 diff - - git a / src / java / org / apache / cassandra / db / CollationController . java b / src / java / org / apache / cassandra / db / CollationController . java 
 index 8121062 . . fb9674f 100644 
 - - - a / src / java / org / apache / cassandra / db / CollationController . java 
 + + + b / src / java / org / apache / cassandra / db / CollationController . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; 
 import org . apache . cassandra . db . columniterator . SimpleAbstractColumnIterator ; 
 import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 @ @ - 245 , 7 + 246 , 6 @ @ public class CollationController 
 } 
 
 long mostRecentRowTombstone = Long . MIN _ VALUE ; 
 - Map < IColumnIterator , Long > iteratorMaxTimes = Maps . newHashMapWithExpectedSize ( view . sstables . size ( ) ) ; 
 for ( SSTableReader sstable : view . sstables ) 
 { 
 / / if we ' ve already seen a row tombstone with a timestamp greater 
 @ @ - 254 , 7 + 254 , 7 @ @ public class CollationController 
 continue ; 
 
 IColumnIterator iter = filter . getSSTableColumnIterator ( sstable ) ; 
 - iteratorMaxTimes . put ( iter , sstable . getMaxTimestamp ( ) ) ; 
 + iterators . add ( iter ) ; 
 if ( iter . getColumnFamily ( ) ! = null ) 
 { 
 ColumnFamily cf = iter . getColumnFamily ( ) ; 
 @ @ - 269 , 10 + 269 , 19 @ @ public class CollationController 
 / / If we saw a row tombstone , do a second pass through the iterators we 
 / / obtained from the sstables and drop any whose maxTimestamp < that of the 
 / / row tombstone 
 - for ( Map . Entry < IColumnIterator , Long > entry : iteratorMaxTimes . entrySet ( ) ) 
 + if ( mostRecentRowTombstone > Long . MIN _ VALUE ) 
 { 
 - if ( entry . getValue ( ) > = mostRecentRowTombstone ) 
 - iterators . add ( entry . getKey ( ) ) ; 
 + Iterator < IColumnIterator > it = iterators . iterator ( ) ; 
 + while ( it . hasNext ( ) ) 
 + { 
 + IColumnIterator iter = it . next ( ) ; 
 + if ( ( iter instanceof ISSTableColumnIterator ) 
 + & & ( ( ISSTableColumnIterator ) iter ) . getSStable ( ) . getMaxTimestamp ( ) < mostRecentRowTombstone ) 
 + { 
 + FileUtils . closeQuietly ( iter ) ; 
 + it . remove ( ) ; 
 + } 
 + } 
 } 
 
 / / we need to distinguish between " there is no data at all for this row " ( BF will let us rebuild that efficiently ) 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / ISSTableColumnIterator . java b / src / java / org / apache / cassandra / db / columniterator / ISSTableColumnIterator . java 
 new file mode 100644 
 index 0000000 . . 4da4c0a 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / columniterator / ISSTableColumnIterator . java 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + package org . apache . cassandra . db . columniterator ; 
 + 
 + import org . apache . cassandra . io . sstable . SSTableReader ; 
 + 
 + public interface ISSTableColumnIterator extends IColumnIterator 
 + { 
 + public SSTableReader getSStable ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 index d5d999f . . 23036df 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 @ @ - 43 , 7 + 43 , 7 @ @ import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . Filter ; 
 
 - public class SSTableNamesIterator extends SimpleAbstractColumnIterator implements IColumnIterator 
 + public class SSTableNamesIterator extends SimpleAbstractColumnIterator implements ISSTableColumnIterator 
 { 
 private static Logger logger = LoggerFactory . getLogger ( SSTableNamesIterator . class ) ; 
 
 @ @ - 51 , 9 + 51 , 11 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 private Iterator < IColumn > iter ; 
 public final SortedSet < ByteBuffer > columns ; 
 public final DecoratedKey key ; 
 + private final SSTableReader sstable ; 
 
 public SSTableNamesIterator ( SSTableReader sstable , DecoratedKey key , SortedSet < ByteBuffer > columns ) 
 { 
 + this . sstable = sstable ; 
 assert columns ! = null ; 
 this . columns = columns ; 
 this . key = key ; 
 @ @ - 84 , 6 + 86 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 
 public SSTableNamesIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey key , SortedSet < ByteBuffer > columns ) 
 { 
 + this . sstable = sstable ; 
 assert columns ! = null ; 
 this . columns = columns ; 
 this . key = key ; 
 @ @ - 99 , 6 + 102 , 11 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 } 
 } 
 
 + public SSTableReader getSStable ( ) 
 + { 
 + return sstable ; 
 + } 
 + 
 private void read ( SSTableReader sstable , FileDataInput file ) 
 throws IOException 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 index 8e4fc06 . . 38335f4 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 @ @ - 36 , 14 + 36 , 16 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 / * * 
 * A Column Iterator over SSTable 
 * / 
 - public class SSTableSliceIterator implements IColumnIterator 
 + public class SSTableSliceIterator implements ISSTableColumnIterator 
 { 
 private final FileDataInput fileToClose ; 
 private IColumnIterator reader ; 
 + private final SSTableReader sstable ; 
 private DecoratedKey key ; 
 
 public SSTableSliceIterator ( SSTableReader sstable , DecoratedKey key , ByteBuffer startColumn , ByteBuffer finishColumn , boolean reversed ) 
 { 
 + this . sstable = sstable ; 
 this . key = key ; 
 fileToClose = sstable . getFileDataInput ( this . key ) ; 
 if ( fileToClose = = null ) 
 @ @ - 81 , 6 + 83 , 7 @ @ public class SSTableSliceIterator implements IColumnIterator 
 * / 
 public SSTableSliceIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey key , ByteBuffer startColumn , ByteBuffer finishColumn , boolean reversed ) 
 { 
 + this . sstable = sstable ; 
 this . key = key ; 
 fileToClose = null ; 
 reader = createReader ( sstable , file , startColumn , finishColumn , reversed ) ; 
 @ @ - 93 , 6 + 96 , 11 @ @ public class SSTableSliceIterator implements IColumnIterator 
 : new IndexedSliceReader ( sstable , file , startColumn , finishColumn , reversed ) ; 
 } 
 
 + public SSTableReader getSStable ( ) 
 + { 
 + return sstable ; 
 + } 
 + 
 public DecoratedKey getKey ( ) 
 { 
 return key ; 
 diff - - git a / src / java / org / apache / cassandra / db / filter / IFilter . java b / src / java / org / apache / cassandra / db / filter / IFilter . java 
 index de26e83 . . 355d3c6 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / IFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / IFilter . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Iterator ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 @ @ - 51 , 13 + 52 , 13 @ @ public interface IFilter 
 * @ param file Already opened file data input , saves us opening another one 
 * @ param key The key of the row we are about to iterate over 
 * / 
 - public abstract IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) ; 
 + public abstract ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) ; 
 
 / * * 
 * returns an iterator that returns columns from the given SSTable 
 * matching the Filter criteria in sorted order . 
 * / 
 - public abstract IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) ; 
 + public abstract ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) ; 
 
 / * * 
 * collects columns from reducedColumns into returnCF . Termination is determined 
 diff - - git a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 index d6ab552 . . 6db0aee 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / NamesQueryFilter . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . commons . lang . StringUtils ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; 
 import org . apache . cassandra . db . columniterator . SSTableNamesIterator ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 @ @ - 55 , 12 + 56 , 12 @ @ public class NamesQueryFilter implements IFilter 
 return Memtable . getNamesIterator ( key , cf , this ) ; 
 } 
 
 - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) 
 + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) 
 { 
 return new SSTableNamesIterator ( sstable , key , columns ) ; 
 } 
 
 - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) 
 + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) 
 { 
 return new SSTableNamesIterator ( sstable , file , key , columns ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 index 1e83bf4 . . 08a4f70 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; 
 import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 @ @ - 72 , 14 + 73 , 14 @ @ public class QueryFilter 
 } 
 
 / / TODO move gcBefore into a field 
 - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable ) 
 + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable ) 
 { 
 if ( path . superColumnName = = null ) 
 return filter . getSSTableColumnIterator ( sstable , key ) ; 
 return superFilter . getSSTableColumnIterator ( sstable , key ) ; 
 } 
 
 - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) 
 + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) 
 { 
 if ( path . superColumnName = = null ) 
 return filter . getSSTableColumnIterator ( sstable , file , key ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index 1a4a912 . . e749719 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 + import org . apache . cassandra . db . columniterator . ISSTableColumnIterator ; 
 import org . apache . cassandra . db . columniterator . SSTableSliceIterator ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 @ @ - 61 , 12 + 62 , 12 @ @ public class SliceQueryFilter implements IFilter 
 return Memtable . getSliceIterator ( key , cf , this ) ; 
 } 
 
 - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) 
 + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , DecoratedKey < ? > key ) 
 { 
 return new SSTableSliceIterator ( sstable , key , start , finish , reversed ) ; 
 } 
 
 - public IColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) 
 + public ISSTableColumnIterator getSSTableColumnIterator ( SSTableReader sstable , FileDataInput file , DecoratedKey < ? > key ) 
 { 
 return new SSTableSliceIterator ( sstable , file , key , start , finish , reversed ) ; 
 }
