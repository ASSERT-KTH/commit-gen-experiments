BLEU SCORE: 0.04372912656590315

TEST MSG: Replace equals by type compare
GENERATED MSG: Fix unintended update with conditional statement

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> index 0ebd4af . . e6cdf43 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java <nl> @ @ - 26 , 9 + 26 , 7 @ @ import com . google . common . collect . Iterators ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . filter . ColumnSlice ; <nl> - import org . apache . cassandra . db . marshal . CollectionType ; <nl> - import org . apache . cassandra . db . marshal . CounterColumnType ; <nl> - import org . apache . cassandra . db . marshal . CompositeType ; <nl> + import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> <nl> / * * <nl> @ @ - 140 , 9 + 138 , 9 @ @ public class ColumnCondition <nl> <nl> switch ( type . kind ) <nl> { <nl> - case LIST : return listAppliesTo ( current . metadata ( ) , iter , ( ( Lists . Value ) v ) . elements ) ; <nl> - case SET : return setAppliesTo ( current . metadata ( ) , iter , ( ( Sets . Value ) v ) . elements ) ; <nl> - case MAP : return mapAppliesTo ( current . metadata ( ) , iter , ( ( Maps . Value ) v ) . map ) ; <nl> + case LIST : return listAppliesTo ( ( ListType ) type , current . metadata ( ) , iter , ( ( Lists . Value ) v ) . elements ) ; <nl> + case SET : return setAppliesTo ( ( SetType ) type , current . metadata ( ) , iter , ( ( Sets . Value ) v ) . elements ) ; <nl> + case MAP : return mapAppliesTo ( ( MapType ) type , current . metadata ( ) , iter , ( ( Maps . Value ) v ) . map ) ; <nl> } <nl> throw new AssertionError ( ) ; <nl> } <nl> @ @ - 153 , 18 + 151 , 19 @ @ public class ColumnCondition <nl> return bbs [ bbs . length - 1 ] ; <nl> } <nl> <nl> - private boolean listAppliesTo ( CFMetaData cfm , Iterator < Column > iter , List < ByteBuffer > elements ) <nl> + private boolean listAppliesTo ( ListType type , CFMetaData cfm , Iterator < Column > iter , List < ByteBuffer > elements ) <nl> { <nl> for ( ByteBuffer e : elements ) <nl> - if ( ! iter . hasNext ( ) | | ! iter . next ( ) . value ( ) . equals ( e ) ) <nl> + if ( ! iter . hasNext ( ) | | type . elements . compare ( iter . next ( ) . value ( ) , e ) ! = 0 ) <nl> return false ; <nl> / / We must not have more elements than expected <nl> return ! iter . hasNext ( ) ; <nl> } <nl> <nl> - private boolean setAppliesTo ( CFMetaData cfm , Iterator < Column > iter , Set < ByteBuffer > elements ) <nl> + private boolean setAppliesTo ( SetType type , CFMetaData cfm , Iterator < Column > iter , Set < ByteBuffer > elements ) <nl> { <nl> - Set < ByteBuffer > remaining = new HashSet < > ( elements ) ; <nl> + Set < ByteBuffer > remaining = new TreeSet < > ( type . elements ) ; <nl> + remaining . addAll ( elements ) ; <nl> while ( iter . hasNext ( ) ) <nl> { <nl> if ( remaining . isEmpty ( ) ) <nl> @ @ - 176 , 16 + 175 , 18 @ @ public class ColumnCondition <nl> return remaining . isEmpty ( ) ; <nl> } <nl> <nl> - private boolean mapAppliesTo ( CFMetaData cfm , Iterator < Column > iter , Map < ByteBuffer , ByteBuffer > elements ) <nl> + private boolean mapAppliesTo ( MapType type , CFMetaData cfm , Iterator < Column > iter , Map < ByteBuffer , ByteBuffer > elements ) <nl> { <nl> - Map < ByteBuffer , ByteBuffer > remaining = new HashMap < > ( elements ) ; <nl> + Map < ByteBuffer , ByteBuffer > remaining = new TreeMap < > ( type . keys ) ; <nl> + remaining . putAll ( elements ) ; <nl> while ( iter . hasNext ( ) ) <nl> { <nl> if ( remaining . isEmpty ( ) ) <nl> return false ; <nl> <nl> Column c = iter . next ( ) ; <nl> - if ( ! remaining . remove ( collectionKey ( cfm , c ) ) . equals ( c . value ( ) ) ) <nl> + ByteBuffer previous = remaining . remove ( collectionKey ( cfm , c ) ) ; <nl> + if ( previous = = null | | type . values . compare ( previous , c . value ( ) ) ! = 0 ) <nl> return false ; <nl> } <nl> return remaining . isEmpty ( ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 index 0ebd4af . . e6cdf43 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 + + + b / src / java / org / apache / cassandra / cql3 / ColumnCondition . java 
 @ @ - 26 , 9 + 26 , 7 @ @ import com . google . common . collect . Iterators ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . filter . ColumnSlice ; 
 - import org . apache . cassandra . db . marshal . CollectionType ; 
 - import org . apache . cassandra . db . marshal . CounterColumnType ; 
 - import org . apache . cassandra . db . marshal . CompositeType ; 
 + import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 
 / * * 
 @ @ - 140 , 9 + 138 , 9 @ @ public class ColumnCondition 
 
 switch ( type . kind ) 
 { 
 - case LIST : return listAppliesTo ( current . metadata ( ) , iter , ( ( Lists . Value ) v ) . elements ) ; 
 - case SET : return setAppliesTo ( current . metadata ( ) , iter , ( ( Sets . Value ) v ) . elements ) ; 
 - case MAP : return mapAppliesTo ( current . metadata ( ) , iter , ( ( Maps . Value ) v ) . map ) ; 
 + case LIST : return listAppliesTo ( ( ListType ) type , current . metadata ( ) , iter , ( ( Lists . Value ) v ) . elements ) ; 
 + case SET : return setAppliesTo ( ( SetType ) type , current . metadata ( ) , iter , ( ( Sets . Value ) v ) . elements ) ; 
 + case MAP : return mapAppliesTo ( ( MapType ) type , current . metadata ( ) , iter , ( ( Maps . Value ) v ) . map ) ; 
 } 
 throw new AssertionError ( ) ; 
 } 
 @ @ - 153 , 18 + 151 , 19 @ @ public class ColumnCondition 
 return bbs [ bbs . length - 1 ] ; 
 } 
 
 - private boolean listAppliesTo ( CFMetaData cfm , Iterator < Column > iter , List < ByteBuffer > elements ) 
 + private boolean listAppliesTo ( ListType type , CFMetaData cfm , Iterator < Column > iter , List < ByteBuffer > elements ) 
 { 
 for ( ByteBuffer e : elements ) 
 - if ( ! iter . hasNext ( ) | | ! iter . next ( ) . value ( ) . equals ( e ) ) 
 + if ( ! iter . hasNext ( ) | | type . elements . compare ( iter . next ( ) . value ( ) , e ) ! = 0 ) 
 return false ; 
 / / We must not have more elements than expected 
 return ! iter . hasNext ( ) ; 
 } 
 
 - private boolean setAppliesTo ( CFMetaData cfm , Iterator < Column > iter , Set < ByteBuffer > elements ) 
 + private boolean setAppliesTo ( SetType type , CFMetaData cfm , Iterator < Column > iter , Set < ByteBuffer > elements ) 
 { 
 - Set < ByteBuffer > remaining = new HashSet < > ( elements ) ; 
 + Set < ByteBuffer > remaining = new TreeSet < > ( type . elements ) ; 
 + remaining . addAll ( elements ) ; 
 while ( iter . hasNext ( ) ) 
 { 
 if ( remaining . isEmpty ( ) ) 
 @ @ - 176 , 16 + 175 , 18 @ @ public class ColumnCondition 
 return remaining . isEmpty ( ) ; 
 } 
 
 - private boolean mapAppliesTo ( CFMetaData cfm , Iterator < Column > iter , Map < ByteBuffer , ByteBuffer > elements ) 
 + private boolean mapAppliesTo ( MapType type , CFMetaData cfm , Iterator < Column > iter , Map < ByteBuffer , ByteBuffer > elements ) 
 { 
 - Map < ByteBuffer , ByteBuffer > remaining = new HashMap < > ( elements ) ; 
 + Map < ByteBuffer , ByteBuffer > remaining = new TreeMap < > ( type . keys ) ; 
 + remaining . putAll ( elements ) ; 
 while ( iter . hasNext ( ) ) 
 { 
 if ( remaining . isEmpty ( ) ) 
 return false ; 
 
 Column c = iter . next ( ) ; 
 - if ( ! remaining . remove ( collectionKey ( cfm , c ) ) . equals ( c . value ( ) ) ) 
 + ByteBuffer previous = remaining . remove ( collectionKey ( cfm , c ) ) ; 
 + if ( previous = = null | | type . values . compare ( previous , c . value ( ) ) ! = 0 ) 
 return false ; 
 } 
 return remaining . isEmpty ( ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
