BLEU SCORE: 0.01222796968620182

TEST MSG: Enable repair - pr and - local together ( fix regression of CASSANDRA - 7450 )
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 74c44f8 . . 0f7cf0e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 8 <nl> + * Enable repair - pr and - local together ( fix regression of CASSANDRA - 7450 ) ( CASSANDRA - 12522 ) <nl> * Fail repair on non - existing table ( CASSANDRA - 12279 ) <nl> * cqlsh copy : fix missing counter values ( CASSANDRA - 12476 ) <nl> * Move migration tasks to non - periodic queue , assure flush executor shutdown after non - periodic executor ( CASSANDRA - 12251 ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairOption . java b / src / java / org / apache / cassandra / repair / messages / RepairOption . java <nl> index d50a2ed . . 44a1e57 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / RepairOption . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / RepairOption . java <nl> @ @ - 208 , 7 + 208 , 7 @ @ public class RepairOption <nl> { <nl> throw new IllegalArgumentException ( " Too many job threads . Max is " + MAX _ JOB _ THREADS ) ; <nl> } <nl> - if ( primaryRange & & ( ! dataCenters . isEmpty ( ) | | ! hosts . isEmpty ( ) ) ) <nl> + if ( primaryRange & & ( ( ! dataCenters . isEmpty ( ) & & ! option . isInLocalDCOnly ( ) ) | | ! hosts . isEmpty ( ) ) ) <nl> { <nl> throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; <nl> } <nl> @ @ - 303 , 6 + 303 , 10 @ @ public class RepairOption <nl> return isSubrangeRepair ; <nl> } <nl> <nl> + public boolean isInLocalDCOnly ( ) { <nl> + return dataCenters . size ( ) = = 1 & & dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index e8ab54e . . 48a291b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 2801 , 7 + 2801 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( option . getDataCenters ( ) . isEmpty ( ) & & option . getHosts ( ) . isEmpty ( ) ) <nl> option . getRanges ( ) . addAll ( getPrimaryRanges ( keyspace ) ) ; <nl> / / except dataCenters only contain local DC ( i . e . - local ) <nl> - else if ( option . getDataCenters ( ) . size ( ) = = 1 & & option . getDataCenters ( ) . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) <nl> + else if ( option . isInLocalDCOnly ( ) ) <nl> option . getRanges ( ) . addAll ( getPrimaryRangesWithinDC ( keyspace ) ) ; <nl> else <nl> throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java b / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java <nl> index cc6f46a . . a0eea4e 100644 <nl> - - - a / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java <nl> + + + b / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java <nl> @ @ - 97 , 6 + 97 , 26 @ @ public class RepairOptionTest <nl> } <nl> <nl> @ Test <nl> + public void testPrWithLocalParseOptions ( ) <nl> + { <nl> + DatabaseDescriptor . forceStaticInitialization ( ) ; <nl> + <nl> + Map < String , String > options = new HashMap < > ( ) ; <nl> + options . put ( RepairOption . PARALLELISM _ KEY , " parallel " ) ; <nl> + options . put ( RepairOption . PRIMARY _ RANGE _ KEY , " true " ) ; <nl> + options . put ( RepairOption . INCREMENTAL _ KEY , " false " ) ; <nl> + options . put ( RepairOption . COLUMNFAMILIES _ KEY , " cf1 , cf2 , cf3 " ) ; <nl> + options . put ( RepairOption . DATACENTERS _ KEY , " datacenter1 " ) ; <nl> + <nl> + RepairOption option = RepairOption . parse ( options , Murmur3Partitioner . instance ) ; <nl> + assertTrue ( option . isPrimaryRange ( ) ) ; <nl> + <nl> + Set < String > expectedDCs = new HashSet < > ( 3 ) ; <nl> + expectedDCs . add ( " datacenter1 " ) ; <nl> + assertEquals ( expectedDCs , option . getDataCenters ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testIncrementalRepairWithSubrangesIsNotGlobal ( ) throws Exception <nl> { <nl> RepairOption ro = RepairOption . parse ( ImmutableMap . of ( RepairOption . INCREMENTAL _ KEY , " true " , RepairOption . RANGES _ KEY , " 42 : 42 " ) ,
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 74c44f8 . . 0f7cf0e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 8 
 + * Enable repair - pr and - local together ( fix regression of CASSANDRA - 7450 ) ( CASSANDRA - 12522 ) 
 * Fail repair on non - existing table ( CASSANDRA - 12279 ) 
 * cqlsh copy : fix missing counter values ( CASSANDRA - 12476 ) 
 * Move migration tasks to non - periodic queue , assure flush executor shutdown after non - periodic executor ( CASSANDRA - 12251 ) 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairOption . java b / src / java / org / apache / cassandra / repair / messages / RepairOption . java 
 index d50a2ed . . 44a1e57 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / RepairOption . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / RepairOption . java 
 @ @ - 208 , 7 + 208 , 7 @ @ public class RepairOption 
 { 
 throw new IllegalArgumentException ( " Too many job threads . Max is " + MAX _ JOB _ THREADS ) ; 
 } 
 - if ( primaryRange & & ( ! dataCenters . isEmpty ( ) | | ! hosts . isEmpty ( ) ) ) 
 + if ( primaryRange & & ( ( ! dataCenters . isEmpty ( ) & & ! option . isInLocalDCOnly ( ) ) | | ! hosts . isEmpty ( ) ) ) 
 { 
 throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; 
 } 
 @ @ - 303 , 6 + 303 , 10 @ @ public class RepairOption 
 return isSubrangeRepair ; 
 } 
 
 + public boolean isInLocalDCOnly ( ) { 
 + return dataCenters . size ( ) = = 1 & & dataCenters . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index e8ab54e . . 48a291b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 2801 , 7 + 2801 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( option . getDataCenters ( ) . isEmpty ( ) & & option . getHosts ( ) . isEmpty ( ) ) 
 option . getRanges ( ) . addAll ( getPrimaryRanges ( keyspace ) ) ; 
 / / except dataCenters only contain local DC ( i . e . - local ) 
 - else if ( option . getDataCenters ( ) . size ( ) = = 1 & & option . getDataCenters ( ) . contains ( DatabaseDescriptor . getLocalDataCenter ( ) ) ) 
 + else if ( option . isInLocalDCOnly ( ) ) 
 option . getRanges ( ) . addAll ( getPrimaryRangesWithinDC ( keyspace ) ) ; 
 else 
 throw new IllegalArgumentException ( " You need to run primary range repair on all nodes in the cluster . " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java b / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java 
 index cc6f46a . . a0eea4e 100644 
 - - - a / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java 
 + + + b / test / unit / org / apache / cassandra / repair / messages / RepairOptionTest . java 
 @ @ - 97 , 6 + 97 , 26 @ @ public class RepairOptionTest 
 } 
 
 @ Test 
 + public void testPrWithLocalParseOptions ( ) 
 + { 
 + DatabaseDescriptor . forceStaticInitialization ( ) ; 
 + 
 + Map < String , String > options = new HashMap < > ( ) ; 
 + options . put ( RepairOption . PARALLELISM _ KEY , " parallel " ) ; 
 + options . put ( RepairOption . PRIMARY _ RANGE _ KEY , " true " ) ; 
 + options . put ( RepairOption . INCREMENTAL _ KEY , " false " ) ; 
 + options . put ( RepairOption . COLUMNFAMILIES _ KEY , " cf1 , cf2 , cf3 " ) ; 
 + options . put ( RepairOption . DATACENTERS _ KEY , " datacenter1 " ) ; 
 + 
 + RepairOption option = RepairOption . parse ( options , Murmur3Partitioner . instance ) ; 
 + assertTrue ( option . isPrimaryRange ( ) ) ; 
 + 
 + Set < String > expectedDCs = new HashSet < > ( 3 ) ; 
 + expectedDCs . add ( " datacenter1 " ) ; 
 + assertEquals ( expectedDCs , option . getDataCenters ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testIncrementalRepairWithSubrangesIsNotGlobal ( ) throws Exception 
 { 
 RepairOption ro = RepairOption . parse ( ImmutableMap . of ( RepairOption . INCREMENTAL _ KEY , " true " , RepairOption . RANGES _ KEY , " 42 : 42 " ) ,

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
