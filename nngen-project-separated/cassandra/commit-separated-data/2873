BLEU SCORE: 0.008964300330801856

TEST MSG: Don ' t send confusing info on timeouts
GENERATED MSG: add auth support to sstableloader ; patch by Alexis , reviewed by yukim for CASSANDRA - 4712

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5086440 . . a1514d0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> 1 . 2 . 14 <nl> * Allow executing CREATE statements multiple times ( CASSANDRA - 6471 ) <nl> + * Don ' t send confusing info with timeouts ( CASSANDRA - 6491 ) <nl> <nl> 1 . 2 . 13 <nl> * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> index 4df9e1f . . 3cd853f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> + + + b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java <nl> @ @ - 88 , 7 + 88 , 16 @ @ public abstract class AbstractWriteResponseHandler implements IAsyncCallback <nl> } <nl> <nl> if ( ! success ) <nl> - throw new WriteTimeoutException ( writeType , consistencyLevel , ackCount ( ) , totalBlockFor ( ) ) ; <nl> + { <nl> + int acks = ackCount ( ) ; <nl> + int blockedFor = totalBlockFor ( ) ; <nl> + / / It ' s pretty unlikely , but we can race between exiting await above and here , so <nl> + / / that we could now have enough acks . In that case , we " lie " on the acks count to <nl> + / / avoid sending confusing info to the user ( see CASSANDRA - ) . <nl> + if ( acks > = blockedFor ) <nl> + acks = blockedFor - 1 ; <nl> + throw new WriteTimeoutException ( writeType , consistencyLevel , acks , blockedFor ) ; <nl> + } <nl> } <nl> <nl> protected int totalBlockFor ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index 64b9e76 . . 7889039 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 97 , 7 + 97 , 13 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag <nl> } <nl> <nl> if ( ! success ) <nl> - throw new ReadTimeoutException ( consistencyLevel , received . get ( ) , blockfor , resolver . isDataPresent ( ) ) ; <nl> + { <nl> + / / Same as for writes , see AbstractWriteResponseHandler <nl> + int acks = received . get ( ) ; <nl> + if ( resolver . isDataPresent ( ) & & acks > = blockfor ) <nl> + acks = blockfor - 1 ; <nl> + throw new ReadTimeoutException ( consistencyLevel , acks , blockfor , resolver . isDataPresent ( ) ) ; <nl> + } <nl> <nl> return blockfor = = 1 ? resolver . getData ( ) : resolver . resolve ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index d49e59d . . e6cd755 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 1013 , 7 + 1013 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> Tracing . trace ( " Timed out on digest mismatch retries " ) ; <nl> int blockFor = consistency _ level . blockFor ( Table . open ( command . getKeyspace ( ) ) ) ; <nl> - throw new ReadTimeoutException ( consistency _ level , blockFor , blockFor , true ) ; <nl> + throw new ReadTimeoutException ( consistency _ level , blockFor - 1 , blockFor , true ) ; <nl> } <nl> <nl> / / retry any potential short reads <nl> @ @ - 1248 , 7 + 1248 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> Tracing . trace ( " Timed out while read - repairing after receiving all { } data and digest responses " , blockFor ) ; <nl> else <nl> logger . debug ( " Range slice timeout while read - repairing after receiving all { } data and digest responses " , blockFor ) ; <nl> - throw new ReadTimeoutException ( consistency _ level , blockFor , blockFor , true ) ; <nl> + throw new ReadTimeoutException ( consistency _ level , blockFor - 1 , blockFor , true ) ; <nl> } <nl> catch ( DigestMismatchException e ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a7a7ca7 . . 7425111 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 8 + 11 , 7 @ @ <nl> * Fix scrubbing of CQL3 created tables ( CASSANDRA - 4685 ) <nl> * ( CQL3 ) Fix validation when using counter and regular columns in the same table <nl> ( CASSANDRA - 4706 ) <nl> - * Fix bug starting Cassandra with simple authentication ( CASSANDRA - 4648 <nl> - * ) <nl> + * Fix bug starting Cassandra with simple authentication ( CASSANDRA - 4648 ) <nl> <nl> 1 . 2 - beta1 <nl> * add atomic _ batch _ mutate ( CASSANDRA - 4542 , - 4635 )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5086440 . . a1514d0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 1 . 2 . 14 
 * Allow executing CREATE statements multiple times ( CASSANDRA - 6471 ) 
 + * Don ' t send confusing info with timeouts ( CASSANDRA - 6491 ) 
 
 1 . 2 . 13 
 * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) 
 diff - - git a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 index 4df9e1f . . 3cd853f 100644 
 - - - a / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 + + + b / src / java / org / apache / cassandra / service / AbstractWriteResponseHandler . java 
 @ @ - 88 , 7 + 88 , 16 @ @ public abstract class AbstractWriteResponseHandler implements IAsyncCallback 
 } 
 
 if ( ! success ) 
 - throw new WriteTimeoutException ( writeType , consistencyLevel , ackCount ( ) , totalBlockFor ( ) ) ; 
 + { 
 + int acks = ackCount ( ) ; 
 + int blockedFor = totalBlockFor ( ) ; 
 + / / It ' s pretty unlikely , but we can race between exiting await above and here , so 
 + / / that we could now have enough acks . In that case , we " lie " on the acks count to 
 + / / avoid sending confusing info to the user ( see CASSANDRA - ) . 
 + if ( acks > = blockedFor ) 
 + acks = blockedFor - 1 ; 
 + throw new WriteTimeoutException ( writeType , consistencyLevel , acks , blockedFor ) ; 
 + } 
 } 
 
 protected int totalBlockFor ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index 64b9e76 . . 7889039 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 97 , 7 + 97 , 13 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag 
 } 
 
 if ( ! success ) 
 - throw new ReadTimeoutException ( consistencyLevel , received . get ( ) , blockfor , resolver . isDataPresent ( ) ) ; 
 + { 
 + / / Same as for writes , see AbstractWriteResponseHandler 
 + int acks = received . get ( ) ; 
 + if ( resolver . isDataPresent ( ) & & acks > = blockfor ) 
 + acks = blockfor - 1 ; 
 + throw new ReadTimeoutException ( consistencyLevel , acks , blockfor , resolver . isDataPresent ( ) ) ; 
 + } 
 
 return blockfor = = 1 ? resolver . getData ( ) : resolver . resolve ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index d49e59d . . e6cd755 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 1013 , 7 + 1013 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 Tracing . trace ( " Timed out on digest mismatch retries " ) ; 
 int blockFor = consistency _ level . blockFor ( Table . open ( command . getKeyspace ( ) ) ) ; 
 - throw new ReadTimeoutException ( consistency _ level , blockFor , blockFor , true ) ; 
 + throw new ReadTimeoutException ( consistency _ level , blockFor - 1 , blockFor , true ) ; 
 } 
 
 / / retry any potential short reads 
 @ @ - 1248 , 7 + 1248 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 Tracing . trace ( " Timed out while read - repairing after receiving all { } data and digest responses " , blockFor ) ; 
 else 
 logger . debug ( " Range slice timeout while read - repairing after receiving all { } data and digest responses " , blockFor ) ; 
 - throw new ReadTimeoutException ( consistency _ level , blockFor , blockFor , true ) ; 
 + throw new ReadTimeoutException ( consistency _ level , blockFor - 1 , blockFor , true ) ; 
 } 
 catch ( DigestMismatchException e ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a7a7ca7 . . 7425111 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 8 + 11 , 7 @ @ 
 * Fix scrubbing of CQL3 created tables ( CASSANDRA - 4685 ) 
 * ( CQL3 ) Fix validation when using counter and regular columns in the same table 
 ( CASSANDRA - 4706 ) 
 - * Fix bug starting Cassandra with simple authentication ( CASSANDRA - 4648 
 - * ) 
 + * Fix bug starting Cassandra with simple authentication ( CASSANDRA - 4648 ) 
 
 1 . 2 - beta1 
 * add atomic _ batch _ mutate ( CASSANDRA - 4542 , - 4635 )
