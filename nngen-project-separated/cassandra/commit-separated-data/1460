BLEU SCORE: 0.03283637368030199

TEST MSG: Don ' t serialize CFMetaData in readResponse
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index a2d51e1f . . cd5560e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 284 , 6 + 284 , 11 @ @ public class Memtable implements Comparable < Memtable > <nl> return isForThrift ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return cfs . metadata ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> return iter . hasNext ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> index b9928dc . . 740423a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadResponse . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadResponse . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . security . MessageDigest ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> @ @ - 39 , 6 + 40 , 15 @ @ public abstract class ReadResponse <nl> public static final IVersionedSerializer < ReadResponse > serializer = new Serializer ( ) ; <nl> public static final IVersionedSerializer < ReadResponse > legacyRangeSliceReplySerializer = new LegacyRangeSliceReplySerializer ( ) ; <nl> <nl> + / / This is used only when serializing data responses and we can ' t it easily in other cases . So this can be null , which is slighly <nl> + / / hacky , but as this hack doesn ' t escape this class , and it ' s easy enough to validate that it ' s not null when we need , it ' s " good enough " . <nl> + private final CFMetaData metadata ; <nl> + <nl> + protected ReadResponse ( CFMetaData metadata ) <nl> + { <nl> + this . metadata = metadata ; <nl> + } <nl> + <nl> public static ReadResponse createDataResponse ( UnfilteredPartitionIterator data ) <nl> { <nl> return new DataResponse ( data ) ; <nl> @ @ - 49 , 8 + 59 , 8 @ @ public abstract class ReadResponse <nl> return new DigestResponse ( makeDigest ( data ) ) ; <nl> } <nl> <nl> - public abstract UnfilteredPartitionIterator makeIterator ( ) ; <nl> - public abstract ByteBuffer digest ( ) ; <nl> + public abstract UnfilteredPartitionIterator makeIterator ( CFMetaData metadata ) ; <nl> + public abstract ByteBuffer digest ( CFMetaData metadata ) ; <nl> public abstract boolean isDigestQuery ( ) ; <nl> <nl> protected static ByteBuffer makeDigest ( UnfilteredPartitionIterator iterator ) <nl> @ @ - 66 , 16 + 76 , 17 @ @ public abstract class ReadResponse <nl> <nl> private DigestResponse ( ByteBuffer digest ) <nl> { <nl> + super ( null ) ; <nl> assert digest . hasRemaining ( ) ; <nl> this . digest = digest ; <nl> } <nl> <nl> - public UnfilteredPartitionIterator makeIterator ( ) <nl> + public UnfilteredPartitionIterator makeIterator ( CFMetaData metadata ) <nl> { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - public ByteBuffer digest ( ) <nl> + public ByteBuffer digest ( CFMetaData metadata ) <nl> { <nl> return digest ; <nl> } <nl> @ @ - 94 , 12 + 105 , 14 @ @ public abstract class ReadResponse <nl> <nl> private DataResponse ( ByteBuffer data ) <nl> { <nl> + super ( null ) ; / / This is never call on the serialization side , where we actually care of the metadata . <nl> this . data = data ; <nl> this . flag = SerializationHelper . Flag . FROM _ REMOTE ; <nl> } <nl> <nl> private DataResponse ( UnfilteredPartitionIterator iter ) <nl> { <nl> + super ( iter . metadata ( ) ) ; <nl> try ( DataOutputBuffer buffer = new DataOutputBuffer ( ) ) <nl> { <nl> UnfilteredPartitionIterators . serializerForIntraNode ( ) . serialize ( iter , buffer , MessagingService . current _ version ) ; <nl> @ @ - 113 , 12 + 126 , 12 @ @ public abstract class ReadResponse <nl> } <nl> } <nl> <nl> - public UnfilteredPartitionIterator makeIterator ( ) <nl> + public UnfilteredPartitionIterator makeIterator ( CFMetaData metadata ) <nl> { <nl> try <nl> { <nl> DataInputPlus in = new DataInputBuffer ( data , true ) ; <nl> - return UnfilteredPartitionIterators . serializerForIntraNode ( ) . deserialize ( in , MessagingService . current _ version , flag ) ; <nl> + return UnfilteredPartitionIterators . serializerForIntraNode ( ) . deserialize ( in , MessagingService . current _ version , metadata , flag ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 127 , 9 + 140 , 9 @ @ public abstract class ReadResponse <nl> } <nl> } <nl> <nl> - public ByteBuffer digest ( ) <nl> + public ByteBuffer digest ( CFMetaData metadata ) <nl> { <nl> - try ( UnfilteredPartitionIterator iterator = makeIterator ( ) ) <nl> + try ( UnfilteredPartitionIterator iterator = makeIterator ( metadata ) ) <nl> { <nl> return makeDigest ( iterator ) ; <nl> } <nl> @ @ - 152 , 7 + 165 , 7 @ @ public abstract class ReadResponse <nl> } <nl> <nl> boolean isDigest = response . isDigestQuery ( ) ; <nl> - ByteBufferUtil . writeWithShortLength ( isDigest ? response . digest ( ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER , out ) ; <nl> + ByteBufferUtil . writeWithShortLength ( isDigest ? response . digest ( response . metadata ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER , out ) ; <nl> if ( ! isDigest ) <nl> { <nl> / / Note that we can only get there if version = = 3 . 0 , which is the current _ version . When we ' ll change the <nl> @ @ - 189 , 7 + 202 , 7 @ @ public abstract class ReadResponse <nl> } <nl> <nl> boolean isDigest = response . isDigestQuery ( ) ; <nl> - long size = ByteBufferUtil . serializedSizeWithShortLength ( isDigest ? response . digest ( ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + long size = ByteBufferUtil . serializedSizeWithShortLength ( isDigest ? response . digest ( response . metadata ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> <nl> if ( ! isDigest ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> index 0149582 . . a1a9d25 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; <nl> import java . util . UUID ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . index . SecondaryIndexManager ; <nl> @ @ - 93 , 7 + 94 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> metrics . beginCompaction ( this ) ; <nl> <nl> this . compacted = scanners . isEmpty ( ) <nl> - ? UnfilteredPartitionIterators . EMPTY <nl> + ? UnfilteredPartitionIterators . empty ( controller . cfs . metadata ) <nl> : new PurgeIterator ( UnfilteredPartitionIterators . merge ( scanners , nowInSec , listener ( ) ) , controller ) ; <nl> } <nl> <nl> @ @ - 102 , 6 + 103 , 11 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte <nl> return false ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return controller . cfs . metadata ; <nl> + } <nl> + <nl> public CompactionInfo getCompactionInfo ( ) <nl> { <nl> return new CompactionInfo ( controller . cfs . metadata , <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index dcdfd7f . . 83f6aba 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import com . google . common . primitives . Doubles ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> @ @ - 341 , 6 + 342 , 11 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> return false ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return sstables . get ( 0 ) . metadata ; / / The ctor checks we have at least one sstable <nl> + } <nl> + <nl> protected UnfilteredRowIterator computeNext ( ) <nl> { <nl> if ( currentScanner = = null ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> index ce92164 . . d322faf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> @ @ - 69 , 6 + 70 , 11 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> return command . isForThrift ( ) ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return command . metadata ( ) ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> return prepareNext ( ) ; <nl> @ @ - 125 , 7 + 131 , 7 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> <nl> / / Query the gathered index hits . We still need to filter stale hits from the resulting query . <nl> ClusteringIndexNamesFilter filter = new ClusteringIndexNamesFilter ( clusterings . build ( ) , false ) ; <nl> - SinglePartitionReadCommand dataCmd = new SinglePartitionNamesCommand ( baseCfs . metadata , <nl> + SinglePartitionReadCommand dataCmd = new SinglePartitionNamesCommand ( metadata ( ) , <nl> command . nowInSec ( ) , <nl> command . columnFilter ( ) , <nl> command . rowFilter ( ) , <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> index 118fb75 . . bcaf70b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . util . Set ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> @ @ - 58 , 6 + 59 , 11 @ @ public class KeysSearcher extends SecondaryIndexSearcher <nl> return command . isForThrift ( ) ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return command . metadata ( ) ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> return prepareNext ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java b / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java <nl> index f39245b . . e2ec06d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java <nl> @ @ - 203 , 6 + 203 , 8 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements <nl> { <nl> public void serialize ( CachedPartition partition , DataOutputPlus out ) throws IOException <nl> { <nl> + int version = MessagingService . current _ version ; <nl> + <nl> assert partition instanceof ArrayBackedCachedPartition ; <nl> ArrayBackedCachedPartition p = ( ArrayBackedCachedPartition ) partition ; <nl> <nl> @ @ - 211 , 14 + 213 , 17 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements <nl> out . writeInt ( p . rowsWithNonExpiringCells ) ; <nl> out . writeInt ( p . nonTombstoneCellCount ) ; <nl> out . writeInt ( p . nonExpiringLiveCells ) ; <nl> + CFMetaData . serializer . serialize ( partition . metadata ( ) , out , version ) ; <nl> try ( UnfilteredRowIterator iter = p . sliceableUnfilteredIterator ( ) ) <nl> { <nl> - UnfilteredRowIteratorSerializer . serializer . serialize ( iter , out , MessagingService . current _ version , p . rowCount ( ) ) ; <nl> + UnfilteredRowIteratorSerializer . serializer . serialize ( iter , out , version , p . rowCount ( ) ) ; <nl> } <nl> } <nl> <nl> public CachedPartition deserialize ( DataInputPlus in ) throws IOException <nl> { <nl> + int version = MessagingService . current _ version ; <nl> + <nl> / / Note that it would be slightly simpler to just do <nl> / / ArrayBackedCachedPiartition . create ( UnfilteredRowIteratorSerializer . serializer . deserialize ( . . . ) ) ; <nl> / / However deserializing the header separatly is not a lot harder and allows us to : <nl> @ @ - 232 , 13 + 237 , 14 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements <nl> int nonTombstoneCellCount = in . readInt ( ) ; <nl> int nonExpiringLiveCells = in . readInt ( ) ; <nl> <nl> - UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , MessagingService . current _ version , SerializationHelper . Flag . LOCAL ) ; <nl> + CFMetaData metadata = CFMetaData . serializer . deserialize ( in , version ) ; <nl> + UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , version , metadata , SerializationHelper . Flag . LOCAL ) ; <nl> assert ! header . isReversed & & header . rowEstimate > = 0 ; <nl> <nl> - MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , header . metadata . comparator , false ) ; <nl> + MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , metadata . comparator , false ) ; <nl> List < Row > rows = new ArrayList < > ( header . rowEstimate ) ; <nl> <nl> - try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , MessagingService . current _ version , SerializationHelper . Flag . LOCAL , header ) ) <nl> + try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , metadata , SerializationHelper . Flag . LOCAL , header ) ) <nl> { <nl> while ( partition . hasNext ( ) ) <nl> { <nl> @ @ - 250 , 7 + 256 , 7 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements <nl> } <nl> } <nl> <nl> - return new ArrayBackedCachedPartition ( header . metadata , <nl> + return new ArrayBackedCachedPartition ( metadata , <nl> header . key , <nl> header . sHeader . columns ( ) , <nl> header . staticRow , <nl> @ @ - 267 , 6 + 273 , 8 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements <nl> <nl> public long serializedSize ( CachedPartition partition ) <nl> { <nl> + int version = MessagingService . current _ version ; <nl> + <nl> assert partition instanceof ArrayBackedCachedPartition ; <nl> ArrayBackedCachedPartition p = ( ArrayBackedCachedPartition ) partition ; <nl> <nl> @ @ - 277 , 6 + 285 , 7 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements <nl> + TypeSizes . sizeof ( p . rowsWithNonExpiringCells ) <nl> + TypeSizes . sizeof ( p . nonTombstoneCellCount ) <nl> + TypeSizes . sizeof ( p . nonExpiringLiveCells ) <nl> + + CFMetaData . serializer . serializedSize ( partition . metadata ( ) , version ) <nl> + UnfilteredRowIteratorSerializer . serializer . serializedSize ( iter , MessagingService . current _ version , p . rowCount ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> index 366828a . . c9788e6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> @ @ - 687 , 6 + 687 , 7 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition <nl> / / assert count = = written : " Table had " + count + " columns , but " + written + " written " ; <nl> } <nl> <nl> + CFMetaData . serializer . serialize ( update . metadata ( ) , out , version ) ; <nl> try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) <nl> { <nl> assert ! iter . isReverseOrder ( ) ; <nl> @ @ - 717 , 17 + 718 , 18 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition <nl> <nl> assert key = = null ; / / key is only there for the old format <nl> <nl> - UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , version , flag ) ; <nl> + CFMetaData metadata = CFMetaData . serializer . deserialize ( in , version ) ; <nl> + UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , version , metadata , flag ) ; <nl> if ( header . isEmpty ) <nl> - return emptyUpdate ( header . metadata , header . key ) ; <nl> + return emptyUpdate ( metadata , header . key ) ; <nl> <nl> assert ! header . isReversed ; <nl> assert header . rowEstimate > = 0 ; <nl> <nl> - MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , header . metadata . comparator , false ) ; <nl> + MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , metadata . comparator , false ) ; <nl> List < Row > rows = new ArrayList < > ( header . rowEstimate ) ; <nl> <nl> - try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , flag , header ) ) <nl> + try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , metadata , flag , header ) ) <nl> { <nl> while ( partition . hasNext ( ) ) <nl> { <nl> @ @ - 739 , 7 + 741 , 7 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition <nl> } <nl> } <nl> <nl> - return new PartitionUpdate ( header . metadata , <nl> + return new PartitionUpdate ( metadata , <nl> header . key , <nl> header . sHeader . columns ( ) , <nl> header . staticRow , <nl> @ @ - 770 , 7 + 772 , 8 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition <nl> <nl> try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) <nl> { <nl> - return UnfilteredRowIteratorSerializer . serializer . serializedSize ( iter , version , update . rows . size ( ) ) ; <nl> + return CFMetaData . serializer . serializedSize ( update . metadata ( ) , version ) <nl> + + UnfilteredRowIteratorSerializer . serializer . serializedSize ( iter , version , update . rows . size ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java b / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java <nl> index e2fec05 . . bfa6690 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . partitions ; <nl> <nl> import java . util . NoSuchElementException ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> <nl> public class SingletonUnfilteredPartitionIterator implements UnfilteredPartitionIterator <nl> @ @ - 38 , 6 + 39 , 11 @ @ public class SingletonUnfilteredPartitionIterator implements UnfilteredPartition <nl> return isForThrift ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return iter . metadata ( ) ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> return ! returned ; <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java <nl> index 2447da8 . . 10989df 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . partitions ; <nl> <nl> import java . util . Iterator ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> <nl> / * * <nl> @ @ - 42 , 5 + 43 , 7 @ @ public interface UnfilteredPartitionIterator extends Iterator < UnfilteredRowItera <nl> * / <nl> public boolean isForThrift ( ) ; <nl> <nl> + public CFMetaData metadata ( ) ; <nl> + <nl> public void close ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java <nl> index 4414f44 . . dd625c4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java <nl> @ @ - 39 , 24 + 39 , 6 @ @ public abstract class UnfilteredPartitionIterators <nl> <nl> private static final Comparator < UnfilteredRowIterator > partitionComparator = ( p1 , p2 ) - > p1 . partitionKey ( ) . compareTo ( p2 . partitionKey ( ) ) ; <nl> <nl> - public static final UnfilteredPartitionIterator EMPTY = new AbstractUnfilteredPartitionIterator ( ) <nl> - { <nl> - public boolean isForThrift ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean hasNext ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public UnfilteredRowIterator next ( ) <nl> - { <nl> - throw new NoSuchElementException ( ) ; <nl> - } <nl> - } ; <nl> - <nl> private UnfilteredPartitionIterators ( ) { } <nl> <nl> public interface MergeListener <nl> @ @ - 65 , 6 + 47 , 33 @ @ public abstract class UnfilteredPartitionIterators <nl> public void close ( ) ; <nl> } <nl> <nl> + <nl> + public static UnfilteredPartitionIterator empty ( final CFMetaData metadata ) <nl> + { <nl> + return new AbstractUnfilteredPartitionIterator ( ) <nl> + { <nl> + public boolean isForThrift ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return metadata ; <nl> + } <nl> + <nl> + public boolean hasNext ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public UnfilteredRowIterator next ( ) <nl> + { <nl> + throw new NoSuchElementException ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> @ SuppressWarnings ( " resource " ) / / The created resources are returned right away <nl> public static UnfilteredRowIterator getOnlyElement ( final UnfilteredPartitionIterator iter , SinglePartitionReadCommand < ? > command ) <nl> { <nl> @ @ - 163 , 18 + 172 , 17 @ @ public abstract class UnfilteredPartitionIterators <nl> assert ! iterators . isEmpty ( ) ; <nl> <nl> final boolean isForThrift = iterators . get ( 0 ) . isForThrift ( ) ; <nl> + final CFMetaData metadata = iterators . get ( 0 ) . metadata ( ) ; <nl> <nl> final MergeIterator < UnfilteredRowIterator , UnfilteredRowIterator > merged = MergeIterator . get ( iterators , partitionComparator , new MergeIterator . Reducer < UnfilteredRowIterator , UnfilteredRowIterator > ( ) <nl> { <nl> private final List < UnfilteredRowIterator > toMerge = new ArrayList < > ( iterators . size ( ) ) ; <nl> <nl> - private CFMetaData metadata ; <nl> private DecoratedKey partitionKey ; <nl> private boolean isReverseOrder ; <nl> <nl> public void reduce ( int idx , UnfilteredRowIterator current ) <nl> { <nl> - metadata = current . metadata ( ) ; <nl> partitionKey = current . partitionKey ( ) ; <nl> isReverseOrder = current . isReverseOrder ( ) ; <nl> <nl> @ @ - 210 , 6 + 218 , 11 @ @ public abstract class UnfilteredPartitionIterators <nl> return isForThrift ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return metadata ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> return merged . hasNext ( ) ; <nl> @ @ - 236 , 6 + 249 , 7 @ @ public abstract class UnfilteredPartitionIterators <nl> return iterators . get ( 0 ) ; <nl> <nl> final boolean isForThrift = iterators . get ( 0 ) . isForThrift ( ) ; <nl> + final CFMetaData metadata = iterators . get ( 0 ) . metadata ( ) ; <nl> <nl> final MergeIterator < UnfilteredRowIterator , UnfilteredRowIterator > merged = MergeIterator . get ( iterators , partitionComparator , new MergeIterator . Reducer < UnfilteredRowIterator , UnfilteredRowIterator > ( ) <nl> { <nl> @ @ - 276 , 6 + 290 , 11 @ @ public abstract class UnfilteredPartitionIterators <nl> return isForThrift ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return metadata ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> return merged . hasNext ( ) ; <nl> @ @ - 353 , 7 + 372 , 7 @ @ public abstract class UnfilteredPartitionIterators <nl> out . writeBoolean ( false ) ; <nl> } <nl> <nl> - public UnfilteredPartitionIterator deserialize ( final DataInputPlus in , final int version , final SerializationHelper . Flag flag ) throws IOException <nl> + public UnfilteredPartitionIterator deserialize ( final DataInputPlus in , final int version , final CFMetaData metadata , final SerializationHelper . Flag flag ) throws IOException <nl> { <nl> if ( version < MessagingService . VERSION _ 30 ) <nl> throw new UnsupportedOperationException ( ) ; <nl> @ @ - 371 , 6 + 390 , 11 @ @ public abstract class UnfilteredPartitionIterators <nl> return isForThrift ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return metadata ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> if ( ! nextReturned ) <nl> @ @ - 401 , 7 + 425 , 7 @ @ public abstract class UnfilteredPartitionIterators <nl> try <nl> { <nl> nextReturned = true ; <nl> - next = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , flag ) ; <nl> + next = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , metadata , flag ) ; <nl> return next ; <nl> } <nl> catch ( IOException e ) <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java b / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java <nl> index 4f35075 . . ebf3c28 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ <nl> * / <nl> package org . apache . cassandra . db . partitions ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterators ; <nl> <nl> @ @ - 44 , 6 + 45 , 11 @ @ public abstract class WrappingUnfilteredPartitionIterator extends AbstractUnfilt <nl> return wrapped . isForThrift ( ) ; <nl> } <nl> <nl> + public CFMetaData metadata ( ) <nl> + { <nl> + return wrapped . metadata ( ) ; <nl> + } <nl> + <nl> public boolean hasNext ( ) <nl> { <nl> prepareNext ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java b / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java <nl> index 129ed50 . . c998964 100644 <nl> - - - a / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java <nl> + + + b / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java <nl> @ @ - 89 , 7 + 89 , 6 @ @ public class UnfilteredRowIteratorSerializer <nl> / / Should only be used for the on - wire format . <nl> public void serialize ( UnfilteredRowIterator iterator , DataOutputPlus out , SerializationHeader header , int version , int rowEstimate ) throws IOException <nl> { <nl> - CFMetaData . serializer . serialize ( iterator . metadata ( ) , out , version ) ; <nl> ByteBufferUtil . writeWithLength ( iterator . partitionKey ( ) . getKey ( ) , out ) ; <nl> <nl> int flags = 0 ; <nl> @ @ - 141 , 8 + 140 , 7 @ @ public class UnfilteredRowIteratorSerializer <nl> <nl> assert rowEstimate > = 0 ; <nl> <nl> - long size = CFMetaData . serializer . serializedSize ( iterator . metadata ( ) , version ) <nl> - + TypeSizes . sizeofWithLength ( iterator . partitionKey ( ) . getKey ( ) ) <nl> + long size = TypeSizes . sizeofWithLength ( iterator . partitionKey ( ) . getKey ( ) ) <nl> + 1 ; / / flags <nl> <nl> if ( iterator . isEmpty ( ) ) <nl> @ @ - 170 , 16 + 168 , 15 @ @ public class UnfilteredRowIteratorSerializer <nl> return size ; <nl> } <nl> <nl> - public Header deserializeHeader ( DataInputPlus in , int version , SerializationHelper . Flag flag ) throws IOException <nl> + public Header deserializeHeader ( DataInputPlus in , int version , CFMetaData metadata , SerializationHelper . Flag flag ) throws IOException <nl> { <nl> - CFMetaData metadata = CFMetaData . serializer . deserialize ( in , version ) ; <nl> DecoratedKey key = StorageService . getPartitioner ( ) . decorateKey ( ByteBufferUtil . readWithLength ( in ) ) ; <nl> int flags = in . readUnsignedByte ( ) ; <nl> boolean isReversed = ( flags & IS _ REVERSED ) ! = 0 ; <nl> if ( ( flags & IS _ EMPTY ) ! = 0 ) <nl> { <nl> SerializationHeader sh = new SerializationHeader ( metadata , PartitionColumns . NONE , RowStats . NO _ STATS ) ; <nl> - return new Header ( sh , metadata , key , isReversed , true , null , null , 0 ) ; <nl> + return new Header ( sh , key , isReversed , true , null , null , 0 ) ; <nl> } <nl> <nl> boolean hasPartitionDeletion = ( flags & HAS _ PARTITION _ DELETION ) ! = 0 ; <nl> @ @ - 195 , 17 + 192 , 17 @ @ public class UnfilteredRowIteratorSerializer <nl> staticRow = UnfilteredSerializer . serializer . deserializeStaticRow ( in , header , new SerializationHelper ( metadata , version , flag ) ) ; <nl> <nl> int rowEstimate = hasRowEstimate ? ( int ) in . readVInt ( ) : - 1 ; <nl> - return new Header ( header , metadata , key , isReversed , false , partitionDeletion , staticRow , rowEstimate ) ; <nl> + return new Header ( header , key , isReversed , false , partitionDeletion , staticRow , rowEstimate ) ; <nl> } <nl> <nl> - public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , SerializationHelper . Flag flag , Header header ) throws IOException <nl> + public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , CFMetaData metadata , SerializationHelper . Flag flag , Header header ) throws IOException <nl> { <nl> if ( header . isEmpty ) <nl> - return UnfilteredRowIterators . emptyIterator ( header . metadata , header . key , header . isReversed ) ; <nl> + return UnfilteredRowIterators . emptyIterator ( metadata , header . key , header . isReversed ) ; <nl> <nl> - final SerializationHelper helper = new SerializationHelper ( header . metadata , version , flag ) ; <nl> + final SerializationHelper helper = new SerializationHelper ( metadata , version , flag ) ; <nl> final SerializationHeader sHeader = header . sHeader ; <nl> - return new AbstractUnfilteredRowIterator ( header . metadata , header . key , header . partitionDeletion , sHeader . columns ( ) , header . staticRow , header . isReversed , sHeader . stats ( ) ) <nl> + return new AbstractUnfilteredRowIterator ( metadata , header . key , header . partitionDeletion , sHeader . columns ( ) , header . staticRow , header . isReversed , sHeader . stats ( ) ) <nl> { <nl> private final Row . Builder builder = ArrayBackedRow . sortedBuilder ( sHeader . columns ( ) . regulars ) ; <nl> <nl> @ @ - 224 , 9 + 221 , 9 @ @ public class UnfilteredRowIteratorSerializer <nl> } ; <nl> } <nl> <nl> - public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , SerializationHelper . Flag flag ) throws IOException <nl> + public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , CFMetaData metadata , SerializationHelper . Flag flag ) throws IOException <nl> { <nl> - return deserialize ( in , version , flag , deserializeHeader ( in , version , flag ) ) ; <nl> + return deserialize ( in , version , metadata , flag , deserializeHeader ( in , version , metadata , flag ) ) ; <nl> } <nl> <nl> public static void writeDelTime ( DeletionTime dt , SerializationHeader header , DataOutputPlus out ) throws IOException <nl> @ @ - 257 , 7 + 254 , 6 @ @ public class UnfilteredRowIteratorSerializer <nl> public static class Header <nl> { <nl> public final SerializationHeader sHeader ; <nl> - public final CFMetaData metadata ; <nl> public final DecoratedKey key ; <nl> public final boolean isReversed ; <nl> public final boolean isEmpty ; <nl> @ @ - 266 , 7 + 262 , 6 @ @ public class UnfilteredRowIteratorSerializer <nl> public final int rowEstimate ; / / - 1 if no estimate <nl> <nl> private Header ( SerializationHeader sHeader , <nl> - CFMetaData metadata , <nl> DecoratedKey key , <nl> boolean isReversed , <nl> boolean isEmpty , <nl> @ @ - 275 , 7 + 270 , 6 @ @ public class UnfilteredRowIteratorSerializer <nl> int rowEstimate ) <nl> { <nl> this . sHeader = sHeader ; <nl> - this . metadata = metadata ; <nl> this . key = key ; <nl> this . isReversed = isReversed ; <nl> this . isEmpty = isEmpty ; <nl> @ @ - 287 , 8 + 281 , 8 @ @ public class UnfilteredRowIteratorSerializer <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - return String . format ( " { header = % s , table = % s . % s , key = % s , isReversed = % b , isEmpty = % b , del = % s , staticRow = % s , rowEstimate = % d } " , <nl> - sHeader , metadata . ksName , metadata . cfName , key , isReversed , isEmpty , partitionDeletion , staticRow . toString ( metadata ) , rowEstimate ) ; <nl> + return String . format ( " { header = % s , key = % s , isReversed = % b , isEmpty = % b , del = % s , staticRow = % s , rowEstimate = % d } " , <nl> + sHeader , key , isReversed , isEmpty , partitionDeletion , staticRow , rowEstimate ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> index 0794e90 . . 0451a98 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . collect . AbstractIterator ; <nl> import com . google . common . collect . Iterators ; <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> @ @ - 62 , 7 + 63 , 7 @ @ public class BigTableScanner implements ISSTableScanner <nl> private final RowIndexEntry . IndexSerializer rowIndexEntrySerializer ; <nl> private final boolean isForThrift ; <nl> <nl> - protected UnfilteredPartitionIterator iterator ; <nl> + protected Iterator < UnfilteredRowIterator > iterator ; <nl> <nl> / / Full scan of the sstables <nl> public static ISSTableScanner getScanner ( SSTableReader sstable , RateLimiter limiter ) <nl> @ @ - 80 , 7 + 81 , 7 @ @ public class BigTableScanner implements ISSTableScanner <nl> / / We want to avoid allocating a SSTableScanner if the range don ' t overlap the sstable
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index a2d51e1f . . cd5560e 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 284 , 6 + 284 , 11 @ @ public class Memtable implements Comparable < Memtable > 
 return isForThrift ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return cfs . metadata ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 return iter . hasNext ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ReadResponse . java b / src / java / org / apache / cassandra / db / ReadResponse . java 
 index b9928dc . . 740423a 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadResponse . java 
 + + + b / src / java / org / apache / cassandra / db / ReadResponse . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . security . MessageDigest ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 @ @ - 39 , 6 + 40 , 15 @ @ public abstract class ReadResponse 
 public static final IVersionedSerializer < ReadResponse > serializer = new Serializer ( ) ; 
 public static final IVersionedSerializer < ReadResponse > legacyRangeSliceReplySerializer = new LegacyRangeSliceReplySerializer ( ) ; 
 
 + / / This is used only when serializing data responses and we can ' t it easily in other cases . So this can be null , which is slighly 
 + / / hacky , but as this hack doesn ' t escape this class , and it ' s easy enough to validate that it ' s not null when we need , it ' s " good enough " . 
 + private final CFMetaData metadata ; 
 + 
 + protected ReadResponse ( CFMetaData metadata ) 
 + { 
 + this . metadata = metadata ; 
 + } 
 + 
 public static ReadResponse createDataResponse ( UnfilteredPartitionIterator data ) 
 { 
 return new DataResponse ( data ) ; 
 @ @ - 49 , 8 + 59 , 8 @ @ public abstract class ReadResponse 
 return new DigestResponse ( makeDigest ( data ) ) ; 
 } 
 
 - public abstract UnfilteredPartitionIterator makeIterator ( ) ; 
 - public abstract ByteBuffer digest ( ) ; 
 + public abstract UnfilteredPartitionIterator makeIterator ( CFMetaData metadata ) ; 
 + public abstract ByteBuffer digest ( CFMetaData metadata ) ; 
 public abstract boolean isDigestQuery ( ) ; 
 
 protected static ByteBuffer makeDigest ( UnfilteredPartitionIterator iterator ) 
 @ @ - 66 , 16 + 76 , 17 @ @ public abstract class ReadResponse 
 
 private DigestResponse ( ByteBuffer digest ) 
 { 
 + super ( null ) ; 
 assert digest . hasRemaining ( ) ; 
 this . digest = digest ; 
 } 
 
 - public UnfilteredPartitionIterator makeIterator ( ) 
 + public UnfilteredPartitionIterator makeIterator ( CFMetaData metadata ) 
 { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 
 - public ByteBuffer digest ( ) 
 + public ByteBuffer digest ( CFMetaData metadata ) 
 { 
 return digest ; 
 } 
 @ @ - 94 , 12 + 105 , 14 @ @ public abstract class ReadResponse 
 
 private DataResponse ( ByteBuffer data ) 
 { 
 + super ( null ) ; / / This is never call on the serialization side , where we actually care of the metadata . 
 this . data = data ; 
 this . flag = SerializationHelper . Flag . FROM _ REMOTE ; 
 } 
 
 private DataResponse ( UnfilteredPartitionIterator iter ) 
 { 
 + super ( iter . metadata ( ) ) ; 
 try ( DataOutputBuffer buffer = new DataOutputBuffer ( ) ) 
 { 
 UnfilteredPartitionIterators . serializerForIntraNode ( ) . serialize ( iter , buffer , MessagingService . current _ version ) ; 
 @ @ - 113 , 12 + 126 , 12 @ @ public abstract class ReadResponse 
 } 
 } 
 
 - public UnfilteredPartitionIterator makeIterator ( ) 
 + public UnfilteredPartitionIterator makeIterator ( CFMetaData metadata ) 
 { 
 try 
 { 
 DataInputPlus in = new DataInputBuffer ( data , true ) ; 
 - return UnfilteredPartitionIterators . serializerForIntraNode ( ) . deserialize ( in , MessagingService . current _ version , flag ) ; 
 + return UnfilteredPartitionIterators . serializerForIntraNode ( ) . deserialize ( in , MessagingService . current _ version , metadata , flag ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 127 , 9 + 140 , 9 @ @ public abstract class ReadResponse 
 } 
 } 
 
 - public ByteBuffer digest ( ) 
 + public ByteBuffer digest ( CFMetaData metadata ) 
 { 
 - try ( UnfilteredPartitionIterator iterator = makeIterator ( ) ) 
 + try ( UnfilteredPartitionIterator iterator = makeIterator ( metadata ) ) 
 { 
 return makeDigest ( iterator ) ; 
 } 
 @ @ - 152 , 7 + 165 , 7 @ @ public abstract class ReadResponse 
 } 
 
 boolean isDigest = response . isDigestQuery ( ) ; 
 - ByteBufferUtil . writeWithShortLength ( isDigest ? response . digest ( ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER , out ) ; 
 + ByteBufferUtil . writeWithShortLength ( isDigest ? response . digest ( response . metadata ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER , out ) ; 
 if ( ! isDigest ) 
 { 
 / / Note that we can only get there if version = = 3 . 0 , which is the current _ version . When we ' ll change the 
 @ @ - 189 , 7 + 202 , 7 @ @ public abstract class ReadResponse 
 } 
 
 boolean isDigest = response . isDigestQuery ( ) ; 
 - long size = ByteBufferUtil . serializedSizeWithShortLength ( isDigest ? response . digest ( ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + long size = ByteBufferUtil . serializedSizeWithShortLength ( isDigest ? response . digest ( response . metadata ) : ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 
 if ( ! isDigest ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 index 0149582 . . a1a9d25 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterator . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; 
 import java . util . UUID ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . index . SecondaryIndexManager ; 
 @ @ - 93 , 7 + 94 , 7 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 metrics . beginCompaction ( this ) ; 
 
 this . compacted = scanners . isEmpty ( ) 
 - ? UnfilteredPartitionIterators . EMPTY 
 + ? UnfilteredPartitionIterators . empty ( controller . cfs . metadata ) 
 : new PurgeIterator ( UnfilteredPartitionIterators . merge ( scanners , nowInSec , listener ( ) ) , controller ) ; 
 } 
 
 @ @ - 102 , 6 + 103 , 11 @ @ public class CompactionIterator extends CompactionInfo . Holder implements Unfilte 
 return false ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return controller . cfs . metadata ; 
 + } 
 + 
 public CompactionInfo getCompactionInfo ( ) 
 { 
 return new CompactionInfo ( controller . cfs . metadata , 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index dcdfd7f . . 83f6aba 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import com . google . common . primitives . Doubles ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 @ @ - 341 , 6 + 342 , 11 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 return false ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return sstables . get ( 0 ) . metadata ; / / The ctor checks we have at least one sstable 
 + } 
 + 
 protected UnfilteredRowIterator computeNext ( ) 
 { 
 if ( currentScanner = = null ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 index ce92164 . . d322faf 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . rows . * ; 
 @ @ - 69 , 6 + 70 , 11 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 return command . isForThrift ( ) ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return command . metadata ( ) ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 return prepareNext ( ) ; 
 @ @ - 125 , 7 + 131 , 7 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 
 / / Query the gathered index hits . We still need to filter stale hits from the resulting query . 
 ClusteringIndexNamesFilter filter = new ClusteringIndexNamesFilter ( clusterings . build ( ) , false ) ; 
 - SinglePartitionReadCommand dataCmd = new SinglePartitionNamesCommand ( baseCfs . metadata , 
 + SinglePartitionReadCommand dataCmd = new SinglePartitionNamesCommand ( metadata ( ) , 
 command . nowInSec ( ) , 
 command . columnFilter ( ) , 
 command . rowFilter ( ) , 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 index 118fb75 . . bcaf70b 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysSearcher . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . util . Set ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . rows . * ; 
 @ @ - 58 , 6 + 59 , 11 @ @ public class KeysSearcher extends SecondaryIndexSearcher 
 return command . isForThrift ( ) ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return command . metadata ( ) ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 return prepareNext ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java b / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java 
 index f39245b . . e2ec06d 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / ArrayBackedCachedPartition . java 
 @ @ - 203 , 6 + 203 , 8 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements 
 { 
 public void serialize ( CachedPartition partition , DataOutputPlus out ) throws IOException 
 { 
 + int version = MessagingService . current _ version ; 
 + 
 assert partition instanceof ArrayBackedCachedPartition ; 
 ArrayBackedCachedPartition p = ( ArrayBackedCachedPartition ) partition ; 
 
 @ @ - 211 , 14 + 213 , 17 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements 
 out . writeInt ( p . rowsWithNonExpiringCells ) ; 
 out . writeInt ( p . nonTombstoneCellCount ) ; 
 out . writeInt ( p . nonExpiringLiveCells ) ; 
 + CFMetaData . serializer . serialize ( partition . metadata ( ) , out , version ) ; 
 try ( UnfilteredRowIterator iter = p . sliceableUnfilteredIterator ( ) ) 
 { 
 - UnfilteredRowIteratorSerializer . serializer . serialize ( iter , out , MessagingService . current _ version , p . rowCount ( ) ) ; 
 + UnfilteredRowIteratorSerializer . serializer . serialize ( iter , out , version , p . rowCount ( ) ) ; 
 } 
 } 
 
 public CachedPartition deserialize ( DataInputPlus in ) throws IOException 
 { 
 + int version = MessagingService . current _ version ; 
 + 
 / / Note that it would be slightly simpler to just do 
 / / ArrayBackedCachedPiartition . create ( UnfilteredRowIteratorSerializer . serializer . deserialize ( . . . ) ) ; 
 / / However deserializing the header separatly is not a lot harder and allows us to : 
 @ @ - 232 , 13 + 237 , 14 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements 
 int nonTombstoneCellCount = in . readInt ( ) ; 
 int nonExpiringLiveCells = in . readInt ( ) ; 
 
 - UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , MessagingService . current _ version , SerializationHelper . Flag . LOCAL ) ; 
 + CFMetaData metadata = CFMetaData . serializer . deserialize ( in , version ) ; 
 + UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , version , metadata , SerializationHelper . Flag . LOCAL ) ; 
 assert ! header . isReversed & & header . rowEstimate > = 0 ; 
 
 - MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , header . metadata . comparator , false ) ; 
 + MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , metadata . comparator , false ) ; 
 List < Row > rows = new ArrayList < > ( header . rowEstimate ) ; 
 
 - try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , MessagingService . current _ version , SerializationHelper . Flag . LOCAL , header ) ) 
 + try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , metadata , SerializationHelper . Flag . LOCAL , header ) ) 
 { 
 while ( partition . hasNext ( ) ) 
 { 
 @ @ - 250 , 7 + 256 , 7 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements 
 } 
 } 
 
 - return new ArrayBackedCachedPartition ( header . metadata , 
 + return new ArrayBackedCachedPartition ( metadata , 
 header . key , 
 header . sHeader . columns ( ) , 
 header . staticRow , 
 @ @ - 267 , 6 + 273 , 8 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements 
 
 public long serializedSize ( CachedPartition partition ) 
 { 
 + int version = MessagingService . current _ version ; 
 + 
 assert partition instanceof ArrayBackedCachedPartition ; 
 ArrayBackedCachedPartition p = ( ArrayBackedCachedPartition ) partition ; 
 
 @ @ - 277 , 6 + 285 , 7 @ @ public class ArrayBackedCachedPartition extends ArrayBackedPartition implements 
 + TypeSizes . sizeof ( p . rowsWithNonExpiringCells ) 
 + TypeSizes . sizeof ( p . nonTombstoneCellCount ) 
 + TypeSizes . sizeof ( p . nonExpiringLiveCells ) 
 + + CFMetaData . serializer . serializedSize ( partition . metadata ( ) , version ) 
 + UnfilteredRowIteratorSerializer . serializer . serializedSize ( iter , MessagingService . current _ version , p . rowCount ( ) ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 index 366828a . . c9788e6 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 @ @ - 687 , 6 + 687 , 7 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition 
 / / assert count = = written : " Table had " + count + " columns , but " + written + " written " ; 
 } 
 
 + CFMetaData . serializer . serialize ( update . metadata ( ) , out , version ) ; 
 try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) 
 { 
 assert ! iter . isReverseOrder ( ) ; 
 @ @ - 717 , 17 + 718 , 18 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition 
 
 assert key = = null ; / / key is only there for the old format 
 
 - UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , version , flag ) ; 
 + CFMetaData metadata = CFMetaData . serializer . deserialize ( in , version ) ; 
 + UnfilteredRowIteratorSerializer . Header header = UnfilteredRowIteratorSerializer . serializer . deserializeHeader ( in , version , metadata , flag ) ; 
 if ( header . isEmpty ) 
 - return emptyUpdate ( header . metadata , header . key ) ; 
 + return emptyUpdate ( metadata , header . key ) ; 
 
 assert ! header . isReversed ; 
 assert header . rowEstimate > = 0 ; 
 
 - MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , header . metadata . comparator , false ) ; 
 + MutableDeletionInfo . Builder deletionBuilder = MutableDeletionInfo . builder ( header . partitionDeletion , metadata . comparator , false ) ; 
 List < Row > rows = new ArrayList < > ( header . rowEstimate ) ; 
 
 - try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , flag , header ) ) 
 + try ( UnfilteredRowIterator partition = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , metadata , flag , header ) ) 
 { 
 while ( partition . hasNext ( ) ) 
 { 
 @ @ - 739 , 7 + 741 , 7 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition 
 } 
 } 
 
 - return new PartitionUpdate ( header . metadata , 
 + return new PartitionUpdate ( metadata , 
 header . key , 
 header . sHeader . columns ( ) , 
 header . staticRow , 
 @ @ - 770 , 7 + 772 , 8 @ @ public class PartitionUpdate extends AbstractThreadUnsafePartition 
 
 try ( UnfilteredRowIterator iter = update . sliceableUnfilteredIterator ( ) ) 
 { 
 - return UnfilteredRowIteratorSerializer . serializer . serializedSize ( iter , version , update . rows . size ( ) ) ; 
 + return CFMetaData . serializer . serializedSize ( update . metadata ( ) , version ) 
 + + UnfilteredRowIteratorSerializer . serializer . serializedSize ( iter , version , update . rows . size ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java b / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java 
 index e2fec05 . . bfa6690 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / SingletonUnfilteredPartitionIterator . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . partitions ; 
 
 import java . util . NoSuchElementException ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 
 public class SingletonUnfilteredPartitionIterator implements UnfilteredPartitionIterator 
 @ @ - 38 , 6 + 39 , 11 @ @ public class SingletonUnfilteredPartitionIterator implements UnfilteredPartition 
 return isForThrift ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return iter . metadata ( ) ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 return ! returned ; 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java 
 index 2447da8 . . 10989df 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterator . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . partitions ; 
 
 import java . util . Iterator ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 
 / * * 
 @ @ - 42 , 5 + 43 , 7 @ @ public interface UnfilteredPartitionIterator extends Iterator < UnfilteredRowItera 
 * / 
 public boolean isForThrift ( ) ; 
 
 + public CFMetaData metadata ( ) ; 
 + 
 public void close ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java 
 index 4414f44 . . dd625c4 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / UnfilteredPartitionIterators . java 
 @ @ - 39 , 24 + 39 , 6 @ @ public abstract class UnfilteredPartitionIterators 
 
 private static final Comparator < UnfilteredRowIterator > partitionComparator = ( p1 , p2 ) - > p1 . partitionKey ( ) . compareTo ( p2 . partitionKey ( ) ) ; 
 
 - public static final UnfilteredPartitionIterator EMPTY = new AbstractUnfilteredPartitionIterator ( ) 
 - { 
 - public boolean isForThrift ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean hasNext ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - public UnfilteredRowIterator next ( ) 
 - { 
 - throw new NoSuchElementException ( ) ; 
 - } 
 - } ; 
 - 
 private UnfilteredPartitionIterators ( ) { } 
 
 public interface MergeListener 
 @ @ - 65 , 6 + 47 , 33 @ @ public abstract class UnfilteredPartitionIterators 
 public void close ( ) ; 
 } 
 
 + 
 + public static UnfilteredPartitionIterator empty ( final CFMetaData metadata ) 
 + { 
 + return new AbstractUnfilteredPartitionIterator ( ) 
 + { 
 + public boolean isForThrift ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public CFMetaData metadata ( ) 
 + { 
 + return metadata ; 
 + } 
 + 
 + public boolean hasNext ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public UnfilteredRowIterator next ( ) 
 + { 
 + throw new NoSuchElementException ( ) ; 
 + } 
 + } ; 
 + } 
 + 
 @ SuppressWarnings ( " resource " ) / / The created resources are returned right away 
 public static UnfilteredRowIterator getOnlyElement ( final UnfilteredPartitionIterator iter , SinglePartitionReadCommand < ? > command ) 
 { 
 @ @ - 163 , 18 + 172 , 17 @ @ public abstract class UnfilteredPartitionIterators 
 assert ! iterators . isEmpty ( ) ; 
 
 final boolean isForThrift = iterators . get ( 0 ) . isForThrift ( ) ; 
 + final CFMetaData metadata = iterators . get ( 0 ) . metadata ( ) ; 
 
 final MergeIterator < UnfilteredRowIterator , UnfilteredRowIterator > merged = MergeIterator . get ( iterators , partitionComparator , new MergeIterator . Reducer < UnfilteredRowIterator , UnfilteredRowIterator > ( ) 
 { 
 private final List < UnfilteredRowIterator > toMerge = new ArrayList < > ( iterators . size ( ) ) ; 
 
 - private CFMetaData metadata ; 
 private DecoratedKey partitionKey ; 
 private boolean isReverseOrder ; 
 
 public void reduce ( int idx , UnfilteredRowIterator current ) 
 { 
 - metadata = current . metadata ( ) ; 
 partitionKey = current . partitionKey ( ) ; 
 isReverseOrder = current . isReverseOrder ( ) ; 
 
 @ @ - 210 , 6 + 218 , 11 @ @ public abstract class UnfilteredPartitionIterators 
 return isForThrift ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return metadata ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 return merged . hasNext ( ) ; 
 @ @ - 236 , 6 + 249 , 7 @ @ public abstract class UnfilteredPartitionIterators 
 return iterators . get ( 0 ) ; 
 
 final boolean isForThrift = iterators . get ( 0 ) . isForThrift ( ) ; 
 + final CFMetaData metadata = iterators . get ( 0 ) . metadata ( ) ; 
 
 final MergeIterator < UnfilteredRowIterator , UnfilteredRowIterator > merged = MergeIterator . get ( iterators , partitionComparator , new MergeIterator . Reducer < UnfilteredRowIterator , UnfilteredRowIterator > ( ) 
 { 
 @ @ - 276 , 6 + 290 , 11 @ @ public abstract class UnfilteredPartitionIterators 
 return isForThrift ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return metadata ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 return merged . hasNext ( ) ; 
 @ @ - 353 , 7 + 372 , 7 @ @ public abstract class UnfilteredPartitionIterators 
 out . writeBoolean ( false ) ; 
 } 
 
 - public UnfilteredPartitionIterator deserialize ( final DataInputPlus in , final int version , final SerializationHelper . Flag flag ) throws IOException 
 + public UnfilteredPartitionIterator deserialize ( final DataInputPlus in , final int version , final CFMetaData metadata , final SerializationHelper . Flag flag ) throws IOException 
 { 
 if ( version < MessagingService . VERSION _ 30 ) 
 throw new UnsupportedOperationException ( ) ; 
 @ @ - 371 , 6 + 390 , 11 @ @ public abstract class UnfilteredPartitionIterators 
 return isForThrift ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return metadata ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 if ( ! nextReturned ) 
 @ @ - 401 , 7 + 425 , 7 @ @ public abstract class UnfilteredPartitionIterators 
 try 
 { 
 nextReturned = true ; 
 - next = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , flag ) ; 
 + next = UnfilteredRowIteratorSerializer . serializer . deserialize ( in , version , metadata , flag ) ; 
 return next ; 
 } 
 catch ( IOException e ) 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java b / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java 
 index 4f35075 . . ebf3c28 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / WrappingUnfilteredPartitionIterator . java 
 @ @ - 17 , 6 + 17 , 7 @ @ 
 * / 
 package org . apache . cassandra . db . partitions ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterators ; 
 
 @ @ - 44 , 6 + 45 , 11 @ @ public abstract class WrappingUnfilteredPartitionIterator extends AbstractUnfilt 
 return wrapped . isForThrift ( ) ; 
 } 
 
 + public CFMetaData metadata ( ) 
 + { 
 + return wrapped . metadata ( ) ; 
 + } 
 + 
 public boolean hasNext ( ) 
 { 
 prepareNext ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java b / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java 
 index 129ed50 . . c998964 100644 
 - - - a / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java 
 + + + b / src / java / org / apache / cassandra / db / rows / UnfilteredRowIteratorSerializer . java 
 @ @ - 89 , 7 + 89 , 6 @ @ public class UnfilteredRowIteratorSerializer 
 / / Should only be used for the on - wire format . 
 public void serialize ( UnfilteredRowIterator iterator , DataOutputPlus out , SerializationHeader header , int version , int rowEstimate ) throws IOException 
 { 
 - CFMetaData . serializer . serialize ( iterator . metadata ( ) , out , version ) ; 
 ByteBufferUtil . writeWithLength ( iterator . partitionKey ( ) . getKey ( ) , out ) ; 
 
 int flags = 0 ; 
 @ @ - 141 , 8 + 140 , 7 @ @ public class UnfilteredRowIteratorSerializer 
 
 assert rowEstimate > = 0 ; 
 
 - long size = CFMetaData . serializer . serializedSize ( iterator . metadata ( ) , version ) 
 - + TypeSizes . sizeofWithLength ( iterator . partitionKey ( ) . getKey ( ) ) 
 + long size = TypeSizes . sizeofWithLength ( iterator . partitionKey ( ) . getKey ( ) ) 
 + 1 ; / / flags 
 
 if ( iterator . isEmpty ( ) ) 
 @ @ - 170 , 16 + 168 , 15 @ @ public class UnfilteredRowIteratorSerializer 
 return size ; 
 } 
 
 - public Header deserializeHeader ( DataInputPlus in , int version , SerializationHelper . Flag flag ) throws IOException 
 + public Header deserializeHeader ( DataInputPlus in , int version , CFMetaData metadata , SerializationHelper . Flag flag ) throws IOException 
 { 
 - CFMetaData metadata = CFMetaData . serializer . deserialize ( in , version ) ; 
 DecoratedKey key = StorageService . getPartitioner ( ) . decorateKey ( ByteBufferUtil . readWithLength ( in ) ) ; 
 int flags = in . readUnsignedByte ( ) ; 
 boolean isReversed = ( flags & IS _ REVERSED ) ! = 0 ; 
 if ( ( flags & IS _ EMPTY ) ! = 0 ) 
 { 
 SerializationHeader sh = new SerializationHeader ( metadata , PartitionColumns . NONE , RowStats . NO _ STATS ) ; 
 - return new Header ( sh , metadata , key , isReversed , true , null , null , 0 ) ; 
 + return new Header ( sh , key , isReversed , true , null , null , 0 ) ; 
 } 
 
 boolean hasPartitionDeletion = ( flags & HAS _ PARTITION _ DELETION ) ! = 0 ; 
 @ @ - 195 , 17 + 192 , 17 @ @ public class UnfilteredRowIteratorSerializer 
 staticRow = UnfilteredSerializer . serializer . deserializeStaticRow ( in , header , new SerializationHelper ( metadata , version , flag ) ) ; 
 
 int rowEstimate = hasRowEstimate ? ( int ) in . readVInt ( ) : - 1 ; 
 - return new Header ( header , metadata , key , isReversed , false , partitionDeletion , staticRow , rowEstimate ) ; 
 + return new Header ( header , key , isReversed , false , partitionDeletion , staticRow , rowEstimate ) ; 
 } 
 
 - public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , SerializationHelper . Flag flag , Header header ) throws IOException 
 + public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , CFMetaData metadata , SerializationHelper . Flag flag , Header header ) throws IOException 
 { 
 if ( header . isEmpty ) 
 - return UnfilteredRowIterators . emptyIterator ( header . metadata , header . key , header . isReversed ) ; 
 + return UnfilteredRowIterators . emptyIterator ( metadata , header . key , header . isReversed ) ; 
 
 - final SerializationHelper helper = new SerializationHelper ( header . metadata , version , flag ) ; 
 + final SerializationHelper helper = new SerializationHelper ( metadata , version , flag ) ; 
 final SerializationHeader sHeader = header . sHeader ; 
 - return new AbstractUnfilteredRowIterator ( header . metadata , header . key , header . partitionDeletion , sHeader . columns ( ) , header . staticRow , header . isReversed , sHeader . stats ( ) ) 
 + return new AbstractUnfilteredRowIterator ( metadata , header . key , header . partitionDeletion , sHeader . columns ( ) , header . staticRow , header . isReversed , sHeader . stats ( ) ) 
 { 
 private final Row . Builder builder = ArrayBackedRow . sortedBuilder ( sHeader . columns ( ) . regulars ) ; 
 
 @ @ - 224 , 9 + 221 , 9 @ @ public class UnfilteredRowIteratorSerializer 
 } ; 
 } 
 
 - public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , SerializationHelper . Flag flag ) throws IOException 
 + public UnfilteredRowIterator deserialize ( DataInputPlus in , int version , CFMetaData metadata , SerializationHelper . Flag flag ) throws IOException 
 { 
 - return deserialize ( in , version , flag , deserializeHeader ( in , version , flag ) ) ; 
 + return deserialize ( in , version , metadata , flag , deserializeHeader ( in , version , metadata , flag ) ) ; 
 } 
 
 public static void writeDelTime ( DeletionTime dt , SerializationHeader header , DataOutputPlus out ) throws IOException 
 @ @ - 257 , 7 + 254 , 6 @ @ public class UnfilteredRowIteratorSerializer 
 public static class Header 
 { 
 public final SerializationHeader sHeader ; 
 - public final CFMetaData metadata ; 
 public final DecoratedKey key ; 
 public final boolean isReversed ; 
 public final boolean isEmpty ; 
 @ @ - 266 , 7 + 262 , 6 @ @ public class UnfilteredRowIteratorSerializer 
 public final int rowEstimate ; / / - 1 if no estimate 
 
 private Header ( SerializationHeader sHeader , 
 - CFMetaData metadata , 
 DecoratedKey key , 
 boolean isReversed , 
 boolean isEmpty , 
 @ @ - 275 , 7 + 270 , 6 @ @ public class UnfilteredRowIteratorSerializer 
 int rowEstimate ) 
 { 
 this . sHeader = sHeader ; 
 - this . metadata = metadata ; 
 this . key = key ; 
 this . isReversed = isReversed ; 
 this . isEmpty = isEmpty ; 
 @ @ - 287 , 8 + 281 , 8 @ @ public class UnfilteredRowIteratorSerializer 
 @ Override 
 public String toString ( ) 
 { 
 - return String . format ( " { header = % s , table = % s . % s , key = % s , isReversed = % b , isEmpty = % b , del = % s , staticRow = % s , rowEstimate = % d } " , 
 - sHeader , metadata . ksName , metadata . cfName , key , isReversed , isEmpty , partitionDeletion , staticRow . toString ( metadata ) , rowEstimate ) ; 
 + return String . format ( " { header = % s , key = % s , isReversed = % b , isEmpty = % b , del = % s , staticRow = % s , rowEstimate = % d } " , 
 + sHeader , key , isReversed , isEmpty , partitionDeletion , staticRow , rowEstimate ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 index 0794e90 . . 0451a98 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import com . google . common . collect . AbstractIterator ; 
 import com . google . common . collect . Iterators ; 
 import com . google . common . util . concurrent . RateLimiter ; 
 
 + import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . db . filter . * ; 
 @ @ - 62 , 7 + 63 , 7 @ @ public class BigTableScanner implements ISSTableScanner 
 private final RowIndexEntry . IndexSerializer rowIndexEntrySerializer ; 
 private final boolean isForThrift ; 
 
 - protected UnfilteredPartitionIterator iterator ; 
 + protected Iterator < UnfilteredRowIterator > iterator ; 
 
 / / Full scan of the sstables 
 public static ISSTableScanner getScanner ( SSTableReader sstable , RateLimiter limiter ) 
 @ @ - 80 , 7 + 81 , 7 @ @ public class BigTableScanner implements ISSTableScanner 
 / / We want to avoid allocating a SSTableScanner if the range don ' t overlap the sstable

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

