BLEU SCORE: 0.04935157841536379

TEST MSG: skip startup logging if not info level
GENERATED MSG: Check for permission problems with directories on startup .

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index c19dac8 . . c1b4ad6 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 324 , 22 + 324 , 25 @ @ public class CassandraDaemon <nl> <nl> private void logSystemInfo ( ) <nl> { <nl> - try <nl> - { <nl> - logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; <nl> - } <nl> - catch ( UnknownHostException e1 ) <nl> - { <nl> - logger . info ( " Could not resolve local host " ) ; <nl> - } <nl> - <nl> - logger . info ( " JVM vendor / version : { } / { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) ) ; <nl> - logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; <nl> - <nl> - for ( MemoryPoolMXBean pool : ManagementFactory . getMemoryPoolMXBeans ( ) ) <nl> - logger . info ( " { } { } : { } " , pool . getName ( ) , pool . getType ( ) , pool . getPeakUsage ( ) ) ; <nl> - <nl> - logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; <nl> + 	 if ( logger . isInfoEnabled ( ) ) <nl> + 	 { <nl> + 	 try <nl> + 	 { <nl> + 	 logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; <nl> + 	 } <nl> + 	 catch ( UnknownHostException e1 ) <nl> + 	 { <nl> + 	 logger . info ( " Could not resolve local host " ) ; <nl> + 	 } <nl> + 	 <nl> + 	 logger . info ( " JVM vendor / version : { } / { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) ) ; <nl> + 	 logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; <nl> + 	 <nl> + 	 for ( MemoryPoolMXBean pool : ManagementFactory . getMemoryPoolMXBeans ( ) ) <nl> + 	 logger . info ( " { } { } : { } " , pool . getName ( ) , pool . getType ( ) , pool . getPeakUsage ( ) ) ; <nl> + 	 <nl> + 	 logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; <nl> + 	 } <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / context / CounterContext . java b / src / java / org / apache / cassandra / db / context / CounterContext . java <nl> index 2a95936 . . 400f7f1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / context / CounterContext . java <nl> + + + b / src / java / org / apache / cassandra / db / context / CounterContext . java <nl> @ @ - 19 , 15 + 19 , 18 @ @ package org . apache . cassandra . db . context ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . security . MessageDigest ; <nl> - import java . util . * ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> <nl> - import org . apache . log4j . Logger ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . db . marshal . MarshalException ; <nl> import org . apache . cassandra . db . DBConstants ; <nl> + import org . apache . cassandra . db . marshal . MarshalException ; <nl> import org . apache . cassandra . utils . Allocator ; <nl> - import org . apache . cassandra . utils . HeapAllocator ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . HeapAllocator ; <nl> import org . apache . cassandra . utils . NodeId ; <nl> <nl> / * * <nl> @ @ - 69 , 7 + 72 , 7 @ @ public class CounterContext implements IContext <nl> private static final int COUNT _ LENGTH = DBConstants . longSize ; <nl> private static final int STEP _ LENGTH = NodeId . LENGTH + CLOCK _ LENGTH + COUNT _ LENGTH ; <nl> <nl> - private static final Logger logger = Logger . getLogger ( CounterContext . class ) ; <nl> + private static final Logger logger = LoggerFactory . getLogger ( CounterContext . class ) ; <nl> <nl> / / lazy - load singleton <nl> private static class LazyHolder

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index c19dac8 . . c1b4ad6 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 324 , 22 + 324 , 25 @ @ public class CassandraDaemon 
 
 private void logSystemInfo ( ) 
 { 
 - try 
 - { 
 - logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; 
 - } 
 - catch ( UnknownHostException e1 ) 
 - { 
 - logger . info ( " Could not resolve local host " ) ; 
 - } 
 - 
 - logger . info ( " JVM vendor / version : { } / { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) ) ; 
 - logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; 
 - 
 - for ( MemoryPoolMXBean pool : ManagementFactory . getMemoryPoolMXBeans ( ) ) 
 - logger . info ( " { } { } : { } " , pool . getName ( ) , pool . getType ( ) , pool . getPeakUsage ( ) ) ; 
 - 
 - logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; 
 + 	 if ( logger . isInfoEnabled ( ) ) 
 + 	 { 
 + 	 try 
 + 	 { 
 + 	 logger . info ( " Hostname : { } " , InetAddress . getLocalHost ( ) . getHostName ( ) ) ; 
 + 	 } 
 + 	 catch ( UnknownHostException e1 ) 
 + 	 { 
 + 	 logger . info ( " Could not resolve local host " ) ; 
 + 	 } 
 + 	 
 + 	 logger . info ( " JVM vendor / version : { } / { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) ) ; 
 + 	 logger . info ( " Heap size : { } / { } " , Runtime . getRuntime ( ) . totalMemory ( ) , Runtime . getRuntime ( ) . maxMemory ( ) ) ; 
 + 	 
 + 	 for ( MemoryPoolMXBean pool : ManagementFactory . getMemoryPoolMXBeans ( ) ) 
 + 	 logger . info ( " { } { } : { } " , pool . getName ( ) , pool . getType ( ) , pool . getPeakUsage ( ) ) ; 
 + 	 
 + 	 logger . info ( " Classpath : { } " , System . getProperty ( " java . class . path " ) ) ; 
 + 	 } 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / context / CounterContext . java b / src / java / org / apache / cassandra / db / context / CounterContext . java 
 index 2a95936 . . 400f7f1 100644 
 - - - a / src / java / org / apache / cassandra / db / context / CounterContext . java 
 + + + b / src / java / org / apache / cassandra / db / context / CounterContext . java 
 @ @ - 19 , 15 + 19 , 18 @ @ package org . apache . cassandra . db . context ; 
 
 import java . nio . ByteBuffer ; 
 import java . security . MessageDigest ; 
 - import java . util . * ; 
 + import java . util . ArrayList ; 
 + import java . util . Iterator ; 
 + import java . util . List ; 
 
 - import org . apache . log4j . Logger ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . db . marshal . MarshalException ; 
 import org . apache . cassandra . db . DBConstants ; 
 + import org . apache . cassandra . db . marshal . MarshalException ; 
 import org . apache . cassandra . utils . Allocator ; 
 - import org . apache . cassandra . utils . HeapAllocator ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . HeapAllocator ; 
 import org . apache . cassandra . utils . NodeId ; 
 
 / * * 
 @ @ - 69 , 7 + 72 , 7 @ @ public class CounterContext implements IContext 
 private static final int COUNT _ LENGTH = DBConstants . longSize ; 
 private static final int STEP _ LENGTH = NodeId . LENGTH + CLOCK _ LENGTH + COUNT _ LENGTH ; 
 
 - private static final Logger logger = Logger . getLogger ( CounterContext . class ) ; 
 + private static final Logger logger = LoggerFactory . getLogger ( CounterContext . class ) ; 
 
 / / lazy - load singleton 
 private static class LazyHolder
