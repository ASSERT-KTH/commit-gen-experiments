BLEU SCORE: 0.021906016114066472

TEST MSG: remove useless equals
GENERATED MSG: CASSANDRA - 499 JSON to SSTable converter ( importer )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> index 9c80965 . . 3acbc63 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java <nl> @ @ - 526 , 12 + 526 , 6 @ @ public class CommitLogSegment <nl> return " CommitLogSegment ( " + getPath ( ) + ' ) ' ; <nl> } <nl> <nl> - public boolean equals ( Object that ) <nl> - { <nl> - return super . equals ( that ) ; <nl> - } <nl> - <nl> - <nl> public static class CommitLogSegmentFileComparator implements Comparator < File > <nl> { <nl> public int compare ( File f , File f2 )
NEAREST DIFF (one line): diff - - git a / bin / json2sstable b / bin / json2sstable <nl> new file mode 100755 <nl> index 0000000 . . 71965eb <nl> - - - / dev / null <nl> + + + b / bin / json2sstable <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + # ! / bin / sh <nl> + <nl> + # Licensed to the Apache Software Foundation ( ASF ) under one <nl> + # or more contributor license agreements . See the NOTICE file <nl> + # distributed with this work for additional information <nl> + # regarding copyright ownership . The ASF licenses this file <nl> + # to you under the Apache License , Version 2 . 0 ( the <nl> + # " License " ) ; you may not use this file except in compliance <nl> + # with the License . You may obtain a copy of the License at <nl> + # <nl> + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + # <nl> + # Unless required by applicable law or agreed to in writing , software <nl> + # distributed under the License is distributed on an " AS IS " BASIS , <nl> + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + # See the License for the specific language governing permissions and <nl> + # limitations under the License . <nl> + <nl> + if [ " x $ CASSANDRA _ INCLUDE " = " x " ] ; then <nl> + for include in / usr / share / cassandra / cassandra . in . sh \ <nl> + / usr / local / share / cassandra / cassandra . in . sh \ <nl> + / opt / cassandra / cassandra . in . sh \ <nl> + ~ / . cassandra . in . sh \ <nl> + ` dirname $ 0 ` / cassandra . in . sh ; do <nl> + if [ - r $ include ] ; then <nl> + . $ include <nl> + break <nl> + fi <nl> + done <nl> + elif [ - r $ CASSANDRA _ INCLUDE ] ; then <nl> + . $ CASSANDRA _ INCLUDE <nl> + fi <nl> + <nl> + if [ - z $ CLASSPATH ] ; then <nl> + echo " You must set the CLASSPATH var " > & 2 <nl> + exit 1 <nl> + fi <nl> + <nl> + java - cp $ CLASSPATH - Dstorage - config = $ CASSANDRA _ CONF \ <nl> + org . apache . cassandra . tools . SSTableImport " $ @ " <nl> + <nl> + # vi : ai sw = 4 ts = 4 tw = 0 et <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> new file mode 100644 <nl> index 0000000 . . de049b7 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java <nl> @ @ - 0 , 0 + 1 , 193 @ @ <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . tools ; <nl> + <nl> + import java . io . FileReader ; <nl> + import java . io . IOException ; <nl> + import java . util . * ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . io . DataOutputBuffer ; <nl> + import org . apache . cassandra . io . SSTableWriter ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . commons . cli . CommandLine ; <nl> + import org . apache . commons . cli . CommandLineParser ; <nl> + import org . apache . commons . cli . Option ; <nl> + import org . apache . commons . cli . Options ; <nl> + import org . apache . commons . cli . PosixParser ; <nl> + import org . json . simple . JSONObject ; <nl> + import org . json . simple . JSONValue ; <nl> + import org . json . simple . parser . ParseException ; <nl> + <nl> + / * * <nl> + * Create SSTables from JSON input <nl> + * / <nl> + public class SSTableImport <nl> + { <nl> + private static final String KEYSPACE _ OPTION = " K " ; <nl> + private static final String COLFAM _ OPTION = " c " ; <nl> + private static Options options ; <nl> + private static CommandLine cmd ; <nl> + <nl> + static <nl> + { <nl> + options = new Options ( ) ; <nl> + Option optKeyspace = new Option ( KEYSPACE _ OPTION , true , " Keyspace name " ) ; <nl> + optKeyspace . setRequired ( true ) ; <nl> + options . addOption ( optKeyspace ) ; <nl> + Option optColfamily = new Option ( COLFAM _ OPTION , true , " Column family " ) ; <nl> + optColfamily . setRequired ( true ) ; <nl> + options . addOption ( optColfamily ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Add columns to a column family . <nl> + * <nl> + * @ param row the columns associated with a row <nl> + * @ param cfamily the column family to add columns to <nl> + * / <nl> + private static void addToStandardCF ( JSONObject row , ColumnFamily cfamily ) <nl> + { <nl> + for ( Map . Entry < String , String > col : ( Set < Map . Entry < String , String > > ) row . entrySet ( ) ) <nl> + { <nl> + QueryPath path = new QueryPath ( cfamily . name ( ) , null , col . getKey ( ) . getBytes ( ) ) ; <nl> + byte [ ] value = FBUtilities . hexToBytes ( col . getValue ( ) ) ; <nl> + cfamily . addColumn ( path , value , System . currentTimeMillis ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Add super columns to a column family . <nl> + * <nl> + * @ param row the super columns associated with a row <nl> + * @ param cfamily the column family to add columns to <nl> + * / <nl> + private static void addToSuperCF ( JSONObject row , ColumnFamily cfamily ) <nl> + { <nl> + / / Super columns <nl> + for ( Map . Entry < String , JSONObject > entry : ( Set < Map . Entry < String , JSONObject > > ) row . entrySet ( ) ) <nl> + { <nl> + byte [ ] superName = entry . getKey ( ) . getBytes ( ) ; <nl> + <nl> + / / Sub - columns <nl> + for ( Map . Entry < String , String > col : ( Set < Map . Entry < String , String > > ) entry . getValue ( ) . entrySet ( ) ) <nl> + { <nl> + QueryPath path = new QueryPath ( cfamily . name ( ) , superName , col . getKey ( ) . getBytes ( ) ) ; <nl> + byte [ ] value = FBUtilities . hexToBytes ( col . getValue ( ) ) ; <nl> + cfamily . addColumn ( path , value , System . currentTimeMillis ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Convert a JSON formatted file to an SSTable . <nl> + * <nl> + * @ param jsonFile the file containing JSON formatted data <nl> + * @ param keyspace keyspace the data belongs to <nl> + * @ param cf column family the data belongs to <nl> + * @ param ssTablePath file to write the SSTable to <nl> + * @ throws IOException for errors reading / writing input / output <nl> + * @ throws ParseException for errors encountered parsing JSON input <nl> + * / <nl> + private static void importJson ( String jsonFile , String keyspace , String cf , String ssTablePath ) <nl> + throws IOException , ParseException <nl> + { <nl> + ColumnFamily cfamily = ColumnFamily . create ( keyspace , cf ) ; <nl> + String cfType = cfamily . type ( ) ; / / Super or Standard <nl> + IPartitioner < ? > partitioner = DatabaseDescriptor . getPartitioner ( ) ; <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + <nl> + try <nl> + { <nl> + JSONObject json = ( JSONObject ) JSONValue . parse ( new FileReader ( jsonFile ) ) ; <nl> + SSTableWriter writer = new SSTableWriter ( ssTablePath , json . size ( ) , partitioner ) ; <nl> + List < DecoratedKey < ? > > decoratedKeys = new ArrayList < DecoratedKey < ? > > ( ) ; <nl> + <nl> + for ( String key : ( Set < String > ) json . keySet ( ) ) <nl> + decoratedKeys . add ( partitioner . decorateKey ( key ) ) ; <nl> + Collections . sort ( decoratedKeys ) ; <nl> + <nl> + for ( DecoratedKey < ? > rowKey : decoratedKeys ) <nl> + { <nl> + JSONObject value = ( JSONObject ) json . get ( rowKey . key ) ; <nl> + <nl> + if ( cfType . equals ( " Super " ) ) <nl> + addToSuperCF ( value , cfamily ) ; <nl> + else <nl> + addToStandardCF ( value , cfamily ) ; <nl> + <nl> + ColumnFamily . serializer ( ) . serializeWithIndexes ( cfamily , dob ) ; <nl> + writer . append ( rowKey , dob ) ; <nl> + dob . reset ( ) ; <nl> + cfamily . clear ( ) ; <nl> + } <nl> + <nl> + writer . closeAndOpenReader ( 0 ) ; <nl> + } <nl> + catch ( ClassCastException cce ) <nl> + { <nl> + / / throw cce ; <nl> + throw new RuntimeException ( " Invalid JSON input , or incorrect column family " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Converts JSON to an SSTable file . JSON input can either be a file specified <nl> + * using an optional command line argument , or supplied on standard in . <nl> + * <nl> + * @ param args command line arguments <nl> + * @ throws IOException on failure to open / read / write files or output streams <nl> + * @ throws ParseException on failure to parse JSON input <nl> + * / <nl> + public static void main ( String [ ] args ) throws IOException , ParseException <nl> + { <nl> + String usage = String . format ( " Usage : % s - K keyspace - c column _ family < json > < sstable > % n " , <nl> + SSTableImport . class . getName ( ) ) ; <nl> + <nl> + CommandLineParser parser = new PosixParser ( ) ; <nl> + try <nl> + { <nl> + cmd = parser . parse ( options , args ) ; <nl> + } catch ( org . apache . commons . cli . ParseException e1 ) <nl> + { <nl> + System . err . println ( e1 . getMessage ( ) ) ; <nl> + System . err . println ( usage ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + if ( cmd . getArgs ( ) . length ! = 2 ) <nl> + { <nl> + System . err . println ( usage ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + String json = cmd . getArgs ( ) [ 0 ] ; <nl> + String ssTable = cmd . getArgs ( ) [ 1 ] ; <nl> + String keyspace = cmd . getOptionValue ( KEYSPACE _ OPTION ) ; <nl> + String cfamily = cmd . getOptionValue ( COLFAM _ OPTION ) ; <nl> + <nl> + importJson ( json , keyspace , cfamily , ssTable ) ; <nl> + <nl> + System . exit ( 0 ) ; <nl> + } <nl> + <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 index 9c80965 . . 3acbc63 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegment . java 
 @ @ - 526 , 12 + 526 , 6 @ @ public class CommitLogSegment 
 return " CommitLogSegment ( " + getPath ( ) + ' ) ' ; 
 } 
 
 - public boolean equals ( Object that ) 
 - { 
 - return super . equals ( that ) ; 
 - } 
 - 
 - 
 public static class CommitLogSegmentFileComparator implements Comparator < File > 
 { 
 public int compare ( File f , File f2 )

NEAREST DIFF:
diff - - git a / bin / json2sstable b / bin / json2sstable 
 new file mode 100755 
 index 0000000 . . 71965eb 
 - - - / dev / null 
 + + + b / bin / json2sstable 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + # ! / bin / sh 
 + 
 + # Licensed to the Apache Software Foundation ( ASF ) under one 
 + # or more contributor license agreements . See the NOTICE file 
 + # distributed with this work for additional information 
 + # regarding copyright ownership . The ASF licenses this file 
 + # to you under the Apache License , Version 2 . 0 ( the 
 + # " License " ) ; you may not use this file except in compliance 
 + # with the License . You may obtain a copy of the License at 
 + # 
 + # http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + # 
 + # Unless required by applicable law or agreed to in writing , software 
 + # distributed under the License is distributed on an " AS IS " BASIS , 
 + # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + # See the License for the specific language governing permissions and 
 + # limitations under the License . 
 + 
 + if [ " x $ CASSANDRA _ INCLUDE " = " x " ] ; then 
 + for include in / usr / share / cassandra / cassandra . in . sh \ 
 + / usr / local / share / cassandra / cassandra . in . sh \ 
 + / opt / cassandra / cassandra . in . sh \ 
 + ~ / . cassandra . in . sh \ 
 + ` dirname $ 0 ` / cassandra . in . sh ; do 
 + if [ - r $ include ] ; then 
 + . $ include 
 + break 
 + fi 
 + done 
 + elif [ - r $ CASSANDRA _ INCLUDE ] ; then 
 + . $ CASSANDRA _ INCLUDE 
 + fi 
 + 
 + if [ - z $ CLASSPATH ] ; then 
 + echo " You must set the CLASSPATH var " > & 2 
 + exit 1 
 + fi 
 + 
 + java - cp $ CLASSPATH - Dstorage - config = $ CASSANDRA _ CONF \ 
 + org . apache . cassandra . tools . SSTableImport " $ @ " 
 + 
 + # vi : ai sw = 4 ts = 4 tw = 0 et 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableImport . java b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 new file mode 100644 
 index 0000000 . . de049b7 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / SSTableImport . java 
 @ @ - 0 , 0 + 1 , 193 @ @ 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . tools ; 
 + 
 + import java . io . FileReader ; 
 + import java . io . IOException ; 
 + import java . util . * ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . io . DataOutputBuffer ; 
 + import org . apache . cassandra . io . SSTableWriter ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . commons . cli . CommandLine ; 
 + import org . apache . commons . cli . CommandLineParser ; 
 + import org . apache . commons . cli . Option ; 
 + import org . apache . commons . cli . Options ; 
 + import org . apache . commons . cli . PosixParser ; 
 + import org . json . simple . JSONObject ; 
 + import org . json . simple . JSONValue ; 
 + import org . json . simple . parser . ParseException ; 
 + 
 + / * * 
 + * Create SSTables from JSON input 
 + * / 
 + public class SSTableImport 
 + { 
 + private static final String KEYSPACE _ OPTION = " K " ; 
 + private static final String COLFAM _ OPTION = " c " ; 
 + private static Options options ; 
 + private static CommandLine cmd ; 
 + 
 + static 
 + { 
 + options = new Options ( ) ; 
 + Option optKeyspace = new Option ( KEYSPACE _ OPTION , true , " Keyspace name " ) ; 
 + optKeyspace . setRequired ( true ) ; 
 + options . addOption ( optKeyspace ) ; 
 + Option optColfamily = new Option ( COLFAM _ OPTION , true , " Column family " ) ; 
 + optColfamily . setRequired ( true ) ; 
 + options . addOption ( optColfamily ) ; 
 + } 
 + 
 + / * * 
 + * Add columns to a column family . 
 + * 
 + * @ param row the columns associated with a row 
 + * @ param cfamily the column family to add columns to 
 + * / 
 + private static void addToStandardCF ( JSONObject row , ColumnFamily cfamily ) 
 + { 
 + for ( Map . Entry < String , String > col : ( Set < Map . Entry < String , String > > ) row . entrySet ( ) ) 
 + { 
 + QueryPath path = new QueryPath ( cfamily . name ( ) , null , col . getKey ( ) . getBytes ( ) ) ; 
 + byte [ ] value = FBUtilities . hexToBytes ( col . getValue ( ) ) ; 
 + cfamily . addColumn ( path , value , System . currentTimeMillis ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Add super columns to a column family . 
 + * 
 + * @ param row the super columns associated with a row 
 + * @ param cfamily the column family to add columns to 
 + * / 
 + private static void addToSuperCF ( JSONObject row , ColumnFamily cfamily ) 
 + { 
 + / / Super columns 
 + for ( Map . Entry < String , JSONObject > entry : ( Set < Map . Entry < String , JSONObject > > ) row . entrySet ( ) ) 
 + { 
 + byte [ ] superName = entry . getKey ( ) . getBytes ( ) ; 
 + 
 + / / Sub - columns 
 + for ( Map . Entry < String , String > col : ( Set < Map . Entry < String , String > > ) entry . getValue ( ) . entrySet ( ) ) 
 + { 
 + QueryPath path = new QueryPath ( cfamily . name ( ) , superName , col . getKey ( ) . getBytes ( ) ) ; 
 + byte [ ] value = FBUtilities . hexToBytes ( col . getValue ( ) ) ; 
 + cfamily . addColumn ( path , value , System . currentTimeMillis ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Convert a JSON formatted file to an SSTable . 
 + * 
 + * @ param jsonFile the file containing JSON formatted data 
 + * @ param keyspace keyspace the data belongs to 
 + * @ param cf column family the data belongs to 
 + * @ param ssTablePath file to write the SSTable to 
 + * @ throws IOException for errors reading / writing input / output 
 + * @ throws ParseException for errors encountered parsing JSON input 
 + * / 
 + private static void importJson ( String jsonFile , String keyspace , String cf , String ssTablePath ) 
 + throws IOException , ParseException 
 + { 
 + ColumnFamily cfamily = ColumnFamily . create ( keyspace , cf ) ; 
 + String cfType = cfamily . type ( ) ; / / Super or Standard 
 + IPartitioner < ? > partitioner = DatabaseDescriptor . getPartitioner ( ) ; 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + 
 + try 
 + { 
 + JSONObject json = ( JSONObject ) JSONValue . parse ( new FileReader ( jsonFile ) ) ; 
 + SSTableWriter writer = new SSTableWriter ( ssTablePath , json . size ( ) , partitioner ) ; 
 + List < DecoratedKey < ? > > decoratedKeys = new ArrayList < DecoratedKey < ? > > ( ) ; 
 + 
 + for ( String key : ( Set < String > ) json . keySet ( ) ) 
 + decoratedKeys . add ( partitioner . decorateKey ( key ) ) ; 
 + Collections . sort ( decoratedKeys ) ; 
 + 
 + for ( DecoratedKey < ? > rowKey : decoratedKeys ) 
 + { 
 + JSONObject value = ( JSONObject ) json . get ( rowKey . key ) ; 
 + 
 + if ( cfType . equals ( " Super " ) ) 
 + addToSuperCF ( value , cfamily ) ; 
 + else 
 + addToStandardCF ( value , cfamily ) ; 
 + 
 + ColumnFamily . serializer ( ) . serializeWithIndexes ( cfamily , dob ) ; 
 + writer . append ( rowKey , dob ) ; 
 + dob . reset ( ) ; 
 + cfamily . clear ( ) ; 
 + } 
 + 
 + writer . closeAndOpenReader ( 0 ) ; 
 + } 
 + catch ( ClassCastException cce ) 
 + { 
 + / / throw cce ; 
 + throw new RuntimeException ( " Invalid JSON input , or incorrect column family " ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Converts JSON to an SSTable file . JSON input can either be a file specified 
 + * using an optional command line argument , or supplied on standard in . 
 + * 
 + * @ param args command line arguments 
 + * @ throws IOException on failure to open / read / write files or output streams 
 + * @ throws ParseException on failure to parse JSON input 
 + * / 
 + public static void main ( String [ ] args ) throws IOException , ParseException 
 + { 
 + String usage = String . format ( " Usage : % s - K keyspace - c column _ family < json > < sstable > % n " , 
 + SSTableImport . class . getName ( ) ) ; 
 + 
 + CommandLineParser parser = new PosixParser ( ) ; 
 + try 
 + { 
 + cmd = parser . parse ( options , args ) ; 
 + } catch ( org . apache . commons . cli . ParseException e1 ) 
 + { 
 + System . err . println ( e1 . getMessage ( ) ) ; 
 + System . err . println ( usage ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + if ( cmd . getArgs ( ) . length ! = 2 ) 
 + { 
 + System . err . println ( usage ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + String json = cmd . getArgs ( ) [ 0 ] ; 
 + String ssTable = cmd . getArgs ( ) [ 1 ] ; 
 + String keyspace = cmd . getOptionValue ( KEYSPACE _ OPTION ) ; 
 + String cfamily = cmd . getOptionValue ( COLFAM _ OPTION ) ; 
 + 
 + importJson ( json , keyspace , cfamily , ssTable ) ; 
 + 
 + System . exit ( 0 ) ; 
 + } 
 + 
 + } 
 \ No newline at end of file
