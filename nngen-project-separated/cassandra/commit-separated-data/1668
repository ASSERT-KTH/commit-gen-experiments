BLEU SCORE: 1.0

TEST MSG: Ninja fix CASSANDRA - 9029
GENERATED MSG: Ninja fix CASSANDRA - 9029

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / NoSpamLogger . java b / src / java / org / apache / cassandra / utils / NoSpamLogger . java <nl> index 9f5d5ce . . 3cc8b5e 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NoSpamLogger . java <nl> + + + b / src / java / org / apache / cassandra / utils / NoSpamLogger . java <nl> @ @ - 103 , 32 + 103 , 32 @ @ public class NoSpamLogger <nl> <nl> public void info ( long nowNanos , Object . . . objects ) <nl> { <nl> - log ( Level . INFO , nowNanos , objects ) ; <nl> + NoSpamLogStatement . this . log ( Level . INFO , nowNanos , objects ) ; <nl> } <nl> <nl> public void info ( Object . . . objects ) <nl> { <nl> - info ( CLOCK . nanoTime ( ) , objects ) ; <nl> + NoSpamLogStatement . this . info ( CLOCK . nanoTime ( ) , objects ) ; <nl> } <nl> <nl> public void warn ( long nowNanos , Object . . . objects ) <nl> { <nl> - log ( Level . WARN , nowNanos , objects ) ; <nl> + NoSpamLogStatement . this . log ( Level . WARN , nowNanos , objects ) ; <nl> } <nl> <nl> - public void warn ( String s , Object . . . objects ) <nl> + public void warn ( Object . . . objects ) <nl> { <nl> - warn ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + NoSpamLogStatement . this . warn ( CLOCK . nanoTime ( ) , objects ) ; <nl> } <nl> <nl> public void error ( long nowNanos , Object . . . objects ) <nl> { <nl> - log ( Level . ERROR , nowNanos , objects ) ; <nl> + NoSpamLogStatement . this . log ( Level . ERROR , nowNanos , objects ) ; <nl> } <nl> <nl> public void error ( Object . . . objects ) <nl> { <nl> - error ( CLOCK . nanoTime ( ) , objects ) ; <nl> + NoSpamLogStatement . this . error ( CLOCK . nanoTime ( ) , objects ) ; <nl> } <nl> } <nl> <nl> @ @ - 165 , 7 + 165 , 8 @ @ public class NoSpamLogger <nl> statement . log ( level , nowNanos , objects ) ; <nl> } <nl> <nl> - public static NoSpamLogStatement getStatement ( Logger logger , String message , long minInterval , TimeUnit unit ) { <nl> + public static NoSpamLogStatement getStatement ( Logger logger , String message , long minInterval , TimeUnit unit ) <nl> + { <nl> NoSpamLogger wrapped = getLogger ( logger , minInterval , unit ) ; <nl> return wrapped . getStatement ( message ) ; <nl> } <nl> @ @ - 182 , 45 + 183 , 45 @ @ public class NoSpamLogger <nl> <nl> public void info ( long nowNanos , String s , Object . . . objects ) <nl> { <nl> - log ( Level . INFO , s , nowNanos , objects ) ; <nl> + NoSpamLogger . this . log ( Level . INFO , s , nowNanos , objects ) ; <nl> } <nl> <nl> public void info ( String s , Object . . . objects ) <nl> { <nl> - info ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + NoSpamLogger . this . info ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> } <nl> <nl> public void warn ( long nowNanos , String s , Object . . . objects ) <nl> { <nl> - log ( Level . WARN , s , nowNanos , objects ) ; <nl> + NoSpamLogger . this . log ( Level . WARN , s , nowNanos , objects ) ; <nl> } <nl> <nl> public void warn ( String s , Object . . . objects ) <nl> { <nl> - warn ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + NoSpamLogger . this . warn ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> } <nl> <nl> public void error ( long nowNanos , String s , Object . . . objects ) <nl> { <nl> - log ( Level . ERROR , s , nowNanos , objects ) ; <nl> + NoSpamLogger . this . log ( Level . ERROR , s , nowNanos , objects ) ; <nl> } <nl> <nl> public void error ( String s , Object . . . objects ) <nl> { <nl> - error ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> + NoSpamLogger . this . error ( CLOCK . nanoTime ( ) , s , objects ) ; <nl> } <nl> <nl> public void log ( Level l , String s , long nowNanos , Object . . . objects ) { <nl> - getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; <nl> + NoSpamLogger . this . getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; <nl> } <nl> <nl> public NoSpamLogStatement getStatement ( String s ) <nl> { <nl> - return getStatement ( s , minIntervalNanos ) ; <nl> + return NoSpamLogger . this . getStatement ( s , minIntervalNanos ) ; <nl> } <nl> <nl> public NoSpamLogStatement getStatement ( String s , long minInterval , TimeUnit unit ) { <nl> - return getStatement ( s , unit . toNanos ( minInterval ) ) ; <nl> + return NoSpamLogger . this . getStatement ( s , unit . toNanos ( minInterval ) ) ; <nl> } <nl> <nl> public NoSpamLogStatement getStatement ( String s , long minIntervalNanos ) <nl> diff - - git a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> index 3ad7ab8 . . ca1d6d3 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java <nl> @ @ - 20 , 10 + 20 , 10 @ @ package org . apache . cassandra . utils ; <nl> <nl> import static org . junit . Assert . * ; <nl> <nl> - import java . util . ArrayList ; <nl> + import java . util . ArrayDeque ; <nl> import java . util . HashMap ; <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Queue ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import org . apache . cassandra . utils . NoSpamLogger . Level ; <nl> @ @ - 37 , 7 + 37 , 7 @ @ import org . slf4j . helpers . SubstituteLogger ; <nl> <nl> public class NoSpamLoggerTest <nl> { <nl> - Map < Level , List < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; <nl> + Map < Level , Queue < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; <nl> <nl> Logger mock = new SubstituteLogger ( null ) <nl> { <nl> @ @ - 45 , 19 + 45 , 19 @ @ public class NoSpamLoggerTest <nl> @ Override <nl> public void info ( String statement , Object . . . args ) <nl> { <nl> - logged . get ( Level . INFO ) . add ( Pair . create ( statement , args ) ) ; <nl> + logged . get ( Level . INFO ) . offer ( Pair . create ( statement , args ) ) ; <nl> } <nl> <nl> @ Override <nl> public void warn ( String statement , Object . . . args ) <nl> { <nl> - logged . get ( Level . WARN ) . add ( Pair . create ( statement , args ) ) ; <nl> + logged . get ( Level . WARN ) . offer ( Pair . create ( statement , args ) ) ; <nl> } <nl> <nl> @ Override <nl> public void error ( String statement , Object . . . args ) <nl> { <nl> - logged . get ( Level . ERROR ) . add ( Pair . create ( statement , args ) ) ; <nl> + logged . get ( Level . ERROR ) . offer ( Pair . create ( statement , args ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 74 , 6 + 74 , 8 @ @ public class NoSpamLoggerTest <nl> } ; <nl> <nl> <nl> + static final String statement = " swizzle { } " ; <nl> + static final String param = " " ; <nl> static long now ; <nl> <nl> @ BeforeClass <nl> @ @ - 92 , 9 + 94 , 10 @ @ public class NoSpamLoggerTest <nl> @ Before <nl> public void setUp ( ) throws Exception <nl> { <nl> - logged . put ( Level . INFO , new ArrayList < Pair < String , Object [ ] > > ( ) ) ; <nl> - logged . put ( Level . WARN , new ArrayList < Pair < String , Object [ ] > > ( ) ) ; <nl> - logged . put ( Level . ERROR , new ArrayList < Pair < String , Object [ ] > > ( ) ) ; <nl> + logged . put ( Level . INFO , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; <nl> + logged . put ( Level . WARN , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; <nl> + logged . put ( Level . ERROR , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; <nl> + NoSpamLogger . clearWrappedLoggersForTest ( ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 109 , 19 + 112 , 18 @ @ public class NoSpamLoggerTest <nl> { <nl> setUp ( ) ; <nl> now = 5 ; <nl> - NoSpamLogger . clearWrappedLoggersForTest ( ) ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , " swizzle { } " , " a " ) ; <nl> + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> <nl> assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , " swizzle { } " , " a " ) ; <nl> + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> <nl> assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; <nl> <nl> now + = 5 ; <nl> <nl> - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , " swizzle { } " , " a " ) ; <nl> + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> <nl> assertEquals ( 2 , logged . get ( l ) . size ( ) ) ; <nl> } <nl> @ @ - 139 , 20 + 141 , 20 @ @ public class NoSpamLoggerTest <nl> now = 5 ; <nl> NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; <nl> <nl> - logger . info ( " swizzle { } " , " a " ) ; <nl> - logger . info ( " swizzle { } " , " a " ) ; <nl> - logger . warn ( " swizzle { } " , " a " ) ; <nl> - logger . error ( " swizzle { } " , " a " ) ; <nl> + logger . info ( statement , param ) ; <nl> + logger . info ( statement , param ) ; <nl> + logger . warn ( statement , param ) ; <nl> + logger . error ( statement , param ) ; <nl> <nl> assertLoggedSizes ( 1 , 0 , 0 ) ; <nl> <nl> NoSpamLogStatement statement = logger . getStatement ( " swizzle2 { } " , 10 , TimeUnit . NANOSECONDS ) ; <nl> - statement . warn ( " a " ) ; <nl> + statement . warn ( param ) ; <nl> / / now is 5 so it won ' t log <nl> assertLoggedSizes ( 1 , 0 , 0 ) ; <nl> <nl> now = 10 ; <nl> - statement . warn ( " a " ) ; <nl> + statement . warn ( param ) ; <nl> assertLoggedSizes ( 1 , 1 , 0 ) ; <nl> <nl> } <nl> @ @ - 160 , 15 + 162 , 80 @ @ public class NoSpamLoggerTest <nl> @ Test <nl> public void testNoSpamLoggerStatementDirect ( ) throws Exception <nl> { <nl> - NoSpamLogger . NoSpamLogStatement statement = NoSpamLogger . getStatement ( mock , " swizzle { } " , 5 , TimeUnit . NANOSECONDS ) ; <nl> + NoSpamLogger . NoSpamLogStatement nospam = NoSpamLogger . getStatement ( mock , statement , 5 , TimeUnit . NANOSECONDS ) ; <nl> <nl> now = 5 ; <nl> <nl> - statement . info ( " swizzle { } " , " a " ) ; <nl> - statement . info ( " swizzle { } " , " a " ) ; <nl> - statement . warn ( " swizzle { } " , " a " ) ; <nl> - statement . error ( " swizzle { } " , " a " ) ; <nl> + nospam . info ( statement , param ) ; <nl> + nospam . info ( statement , param ) ; <nl> + nospam . warn ( statement , param ) ; <nl> + nospam . error ( statement , param ) ; <nl> <nl> assertLoggedSizes ( 1 , 0 , 0 ) ; <nl> } <nl> + <nl> + private void checkMock ( Level l ) <nl> + { <nl> + Pair < String , Object [ ] > p = logged . get ( l ) . poll ( ) ; <nl> + assertNotNull ( p ) ; <nl> + assertEquals ( statement , p . left ) ; <nl> + Object objs [ ] = p . right ; <nl> + assertEquals ( 1 , objs . length ) ; <nl> + assertEquals ( param , objs [ 0 ] ) ; <nl> + assertTrue ( logged . get ( l ) . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + / * <nl> + * Make sure that what is passed to the underlying logger is the correct set of objects <nl> + * / <nl> + @ Test <nl> + public void testLoggedResult ( ) throws Exception <nl> + { <nl> + NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + checkMock ( Level . INFO ) ; <nl> + <nl> + now = 10 ; <nl> + <nl> + NoSpamLogger . log ( mock , Level . WARN , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + checkMock ( Level . WARN ) ; <nl> + <nl> + now = 15 ; <nl> + <nl> + NoSpamLogger . log ( mock , Level . ERROR , 5 , TimeUnit . NANOSECONDS , statement , param ) ; <nl> + checkMock ( Level . ERROR ) ; <nl> + <nl> + now = 20 ; <nl> + <nl> + NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; <nl> + <nl> + logger . info ( statement , param ) ; <nl> + checkMock ( Level . INFO ) ; <nl> + <nl> + now = 25 ; <nl> + <nl> + logger . warn ( statement , param ) ; <nl> + checkMock ( Level . WARN ) ; <nl> + <nl> + now = 30 ; <nl> + <nl> + logger . error ( statement , param ) ; <nl> + checkMock ( Level . ERROR ) ; <nl> + <nl> + NoSpamLogger . NoSpamLogStatement nospamStatement = logger . getStatement ( statement ) ; <nl> + <nl> + now = 35 ; <nl> + <nl> + nospamStatement . info ( param ) ; <nl> + checkMock ( Level . INFO ) ; <nl> + <nl> + now = 40 ; <nl> + <nl> + nospamStatement . warn ( param ) ; <nl> + checkMock ( Level . WARN ) ; <nl> + <nl> + now = 45 ; <nl> + <nl> + nospamStatement . error ( param ) ; <nl> + checkMock ( Level . ERROR ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / NoSpamLogger . java b / src / java / org / apache / cassandra / utils / NoSpamLogger . java 
 index 9f5d5ce . . 3cc8b5e 100644 
 - - - a / src / java / org / apache / cassandra / utils / NoSpamLogger . java 
 + + + b / src / java / org / apache / cassandra / utils / NoSpamLogger . java 
 @ @ - 103 , 32 + 103 , 32 @ @ public class NoSpamLogger 
 
 public void info ( long nowNanos , Object . . . objects ) 
 { 
 - log ( Level . INFO , nowNanos , objects ) ; 
 + NoSpamLogStatement . this . log ( Level . INFO , nowNanos , objects ) ; 
 } 
 
 public void info ( Object . . . objects ) 
 { 
 - info ( CLOCK . nanoTime ( ) , objects ) ; 
 + NoSpamLogStatement . this . info ( CLOCK . nanoTime ( ) , objects ) ; 
 } 
 
 public void warn ( long nowNanos , Object . . . objects ) 
 { 
 - log ( Level . WARN , nowNanos , objects ) ; 
 + NoSpamLogStatement . this . log ( Level . WARN , nowNanos , objects ) ; 
 } 
 
 - public void warn ( String s , Object . . . objects ) 
 + public void warn ( Object . . . objects ) 
 { 
 - warn ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + NoSpamLogStatement . this . warn ( CLOCK . nanoTime ( ) , objects ) ; 
 } 
 
 public void error ( long nowNanos , Object . . . objects ) 
 { 
 - log ( Level . ERROR , nowNanos , objects ) ; 
 + NoSpamLogStatement . this . log ( Level . ERROR , nowNanos , objects ) ; 
 } 
 
 public void error ( Object . . . objects ) 
 { 
 - error ( CLOCK . nanoTime ( ) , objects ) ; 
 + NoSpamLogStatement . this . error ( CLOCK . nanoTime ( ) , objects ) ; 
 } 
 } 
 
 @ @ - 165 , 7 + 165 , 8 @ @ public class NoSpamLogger 
 statement . log ( level , nowNanos , objects ) ; 
 } 
 
 - public static NoSpamLogStatement getStatement ( Logger logger , String message , long minInterval , TimeUnit unit ) { 
 + public static NoSpamLogStatement getStatement ( Logger logger , String message , long minInterval , TimeUnit unit ) 
 + { 
 NoSpamLogger wrapped = getLogger ( logger , minInterval , unit ) ; 
 return wrapped . getStatement ( message ) ; 
 } 
 @ @ - 182 , 45 + 183 , 45 @ @ public class NoSpamLogger 
 
 public void info ( long nowNanos , String s , Object . . . objects ) 
 { 
 - log ( Level . INFO , s , nowNanos , objects ) ; 
 + NoSpamLogger . this . log ( Level . INFO , s , nowNanos , objects ) ; 
 } 
 
 public void info ( String s , Object . . . objects ) 
 { 
 - info ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + NoSpamLogger . this . info ( CLOCK . nanoTime ( ) , s , objects ) ; 
 } 
 
 public void warn ( long nowNanos , String s , Object . . . objects ) 
 { 
 - log ( Level . WARN , s , nowNanos , objects ) ; 
 + NoSpamLogger . this . log ( Level . WARN , s , nowNanos , objects ) ; 
 } 
 
 public void warn ( String s , Object . . . objects ) 
 { 
 - warn ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + NoSpamLogger . this . warn ( CLOCK . nanoTime ( ) , s , objects ) ; 
 } 
 
 public void error ( long nowNanos , String s , Object . . . objects ) 
 { 
 - log ( Level . ERROR , s , nowNanos , objects ) ; 
 + NoSpamLogger . this . log ( Level . ERROR , s , nowNanos , objects ) ; 
 } 
 
 public void error ( String s , Object . . . objects ) 
 { 
 - error ( CLOCK . nanoTime ( ) , s , objects ) ; 
 + NoSpamLogger . this . error ( CLOCK . nanoTime ( ) , s , objects ) ; 
 } 
 
 public void log ( Level l , String s , long nowNanos , Object . . . objects ) { 
 - getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; 
 + NoSpamLogger . this . getStatement ( s , minIntervalNanos ) . log ( l , nowNanos , objects ) ; 
 } 
 
 public NoSpamLogStatement getStatement ( String s ) 
 { 
 - return getStatement ( s , minIntervalNanos ) ; 
 + return NoSpamLogger . this . getStatement ( s , minIntervalNanos ) ; 
 } 
 
 public NoSpamLogStatement getStatement ( String s , long minInterval , TimeUnit unit ) { 
 - return getStatement ( s , unit . toNanos ( minInterval ) ) ; 
 + return NoSpamLogger . this . getStatement ( s , unit . toNanos ( minInterval ) ) ; 
 } 
 
 public NoSpamLogStatement getStatement ( String s , long minIntervalNanos ) 
 diff - - git a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 index 3ad7ab8 . . ca1d6d3 100644 
 - - - a / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / NoSpamLoggerTest . java 
 @ @ - 20 , 10 + 20 , 10 @ @ package org . apache . cassandra . utils ; 
 
 import static org . junit . Assert . * ; 
 
 - import java . util . ArrayList ; 
 + import java . util . ArrayDeque ; 
 import java . util . HashMap ; 
 - import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Queue ; 
 import java . util . concurrent . TimeUnit ; 
 
 import org . apache . cassandra . utils . NoSpamLogger . Level ; 
 @ @ - 37 , 7 + 37 , 7 @ @ import org . slf4j . helpers . SubstituteLogger ; 
 
 public class NoSpamLoggerTest 
 { 
 - Map < Level , List < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; 
 + Map < Level , Queue < Pair < String , Object [ ] > > > logged = new HashMap < > ( ) ; 
 
 Logger mock = new SubstituteLogger ( null ) 
 { 
 @ @ - 45 , 19 + 45 , 19 @ @ public class NoSpamLoggerTest 
 @ Override 
 public void info ( String statement , Object . . . args ) 
 { 
 - logged . get ( Level . INFO ) . add ( Pair . create ( statement , args ) ) ; 
 + logged . get ( Level . INFO ) . offer ( Pair . create ( statement , args ) ) ; 
 } 
 
 @ Override 
 public void warn ( String statement , Object . . . args ) 
 { 
 - logged . get ( Level . WARN ) . add ( Pair . create ( statement , args ) ) ; 
 + logged . get ( Level . WARN ) . offer ( Pair . create ( statement , args ) ) ; 
 } 
 
 @ Override 
 public void error ( String statement , Object . . . args ) 
 { 
 - logged . get ( Level . ERROR ) . add ( Pair . create ( statement , args ) ) ; 
 + logged . get ( Level . ERROR ) . offer ( Pair . create ( statement , args ) ) ; 
 } 
 
 @ Override 
 @ @ - 74 , 6 + 74 , 8 @ @ public class NoSpamLoggerTest 
 } ; 
 
 
 + static final String statement = " swizzle { } " ; 
 + static final String param = " " ; 
 static long now ; 
 
 @ BeforeClass 
 @ @ - 92 , 9 + 94 , 10 @ @ public class NoSpamLoggerTest 
 @ Before 
 public void setUp ( ) throws Exception 
 { 
 - logged . put ( Level . INFO , new ArrayList < Pair < String , Object [ ] > > ( ) ) ; 
 - logged . put ( Level . WARN , new ArrayList < Pair < String , Object [ ] > > ( ) ) ; 
 - logged . put ( Level . ERROR , new ArrayList < Pair < String , Object [ ] > > ( ) ) ; 
 + logged . put ( Level . INFO , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; 
 + logged . put ( Level . WARN , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; 
 + logged . put ( Level . ERROR , new ArrayDeque < Pair < String , Object [ ] > > ( ) ) ; 
 + NoSpamLogger . clearWrappedLoggersForTest ( ) ; 
 } 
 
 @ Test 
 @ @ - 109 , 19 + 112 , 18 @ @ public class NoSpamLoggerTest 
 { 
 setUp ( ) ; 
 now = 5 ; 
 - NoSpamLogger . clearWrappedLoggersForTest ( ) ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , " swizzle { } " , " a " ) ; 
 + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 
 assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , " swizzle { } " , " a " ) ; 
 + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 
 assertEquals ( 1 , logged . get ( l ) . size ( ) ) ; 
 
 now + = 5 ; 
 
 - NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , " swizzle { } " , " a " ) ; 
 + NoSpamLogger . log ( mock , l , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 
 assertEquals ( 2 , logged . get ( l ) . size ( ) ) ; 
 } 
 @ @ - 139 , 20 + 141 , 20 @ @ public class NoSpamLoggerTest 
 now = 5 ; 
 NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; 
 
 - logger . info ( " swizzle { } " , " a " ) ; 
 - logger . info ( " swizzle { } " , " a " ) ; 
 - logger . warn ( " swizzle { } " , " a " ) ; 
 - logger . error ( " swizzle { } " , " a " ) ; 
 + logger . info ( statement , param ) ; 
 + logger . info ( statement , param ) ; 
 + logger . warn ( statement , param ) ; 
 + logger . error ( statement , param ) ; 
 
 assertLoggedSizes ( 1 , 0 , 0 ) ; 
 
 NoSpamLogStatement statement = logger . getStatement ( " swizzle2 { } " , 10 , TimeUnit . NANOSECONDS ) ; 
 - statement . warn ( " a " ) ; 
 + statement . warn ( param ) ; 
 / / now is 5 so it won ' t log 
 assertLoggedSizes ( 1 , 0 , 0 ) ; 
 
 now = 10 ; 
 - statement . warn ( " a " ) ; 
 + statement . warn ( param ) ; 
 assertLoggedSizes ( 1 , 1 , 0 ) ; 
 
 } 
 @ @ - 160 , 15 + 162 , 80 @ @ public class NoSpamLoggerTest 
 @ Test 
 public void testNoSpamLoggerStatementDirect ( ) throws Exception 
 { 
 - NoSpamLogger . NoSpamLogStatement statement = NoSpamLogger . getStatement ( mock , " swizzle { } " , 5 , TimeUnit . NANOSECONDS ) ; 
 + NoSpamLogger . NoSpamLogStatement nospam = NoSpamLogger . getStatement ( mock , statement , 5 , TimeUnit . NANOSECONDS ) ; 
 
 now = 5 ; 
 
 - statement . info ( " swizzle { } " , " a " ) ; 
 - statement . info ( " swizzle { } " , " a " ) ; 
 - statement . warn ( " swizzle { } " , " a " ) ; 
 - statement . error ( " swizzle { } " , " a " ) ; 
 + nospam . info ( statement , param ) ; 
 + nospam . info ( statement , param ) ; 
 + nospam . warn ( statement , param ) ; 
 + nospam . error ( statement , param ) ; 
 
 assertLoggedSizes ( 1 , 0 , 0 ) ; 
 } 
 + 
 + private void checkMock ( Level l ) 
 + { 
 + Pair < String , Object [ ] > p = logged . get ( l ) . poll ( ) ; 
 + assertNotNull ( p ) ; 
 + assertEquals ( statement , p . left ) ; 
 + Object objs [ ] = p . right ; 
 + assertEquals ( 1 , objs . length ) ; 
 + assertEquals ( param , objs [ 0 ] ) ; 
 + assertTrue ( logged . get ( l ) . isEmpty ( ) ) ; 
 + } 
 + 
 + / * 
 + * Make sure that what is passed to the underlying logger is the correct set of objects 
 + * / 
 + @ Test 
 + public void testLoggedResult ( ) throws Exception 
 + { 
 + NoSpamLogger . log ( mock , Level . INFO , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + checkMock ( Level . INFO ) ; 
 + 
 + now = 10 ; 
 + 
 + NoSpamLogger . log ( mock , Level . WARN , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + checkMock ( Level . WARN ) ; 
 + 
 + now = 15 ; 
 + 
 + NoSpamLogger . log ( mock , Level . ERROR , 5 , TimeUnit . NANOSECONDS , statement , param ) ; 
 + checkMock ( Level . ERROR ) ; 
 + 
 + now = 20 ; 
 + 
 + NoSpamLogger logger = NoSpamLogger . getLogger ( mock , 5 , TimeUnit . NANOSECONDS ) ; 
 + 
 + logger . info ( statement , param ) ; 
 + checkMock ( Level . INFO ) ; 
 + 
 + now = 25 ; 
 + 
 + logger . warn ( statement , param ) ; 
 + checkMock ( Level . WARN ) ; 
 + 
 + now = 30 ; 
 + 
 + logger . error ( statement , param ) ; 
 + checkMock ( Level . ERROR ) ; 
 + 
 + NoSpamLogger . NoSpamLogStatement nospamStatement = logger . getStatement ( statement ) ; 
 + 
 + now = 35 ; 
 + 
 + nospamStatement . info ( param ) ; 
 + checkMock ( Level . INFO ) ; 
 + 
 + now = 40 ; 
 + 
 + nospamStatement . warn ( param ) ; 
 + checkMock ( Level . WARN ) ; 
 + 
 + now = 45 ; 
 + 
 + nospamStatement . error ( param ) ; 
 + checkMock ( Level . ERROR ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
