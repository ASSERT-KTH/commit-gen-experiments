BLEU SCORE: 0.034089919964838566

TEST MSG: cqlsh : COPY FROM should use regular inserts for single statement batches
GENERATED MSG: Revert " Revert " Update cqlsh driver for new driver execution API " "

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cf07e80 . . 6e6e17b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 2 . 7 <nl> + * cqlsh : COPY FROM should use regular inserts for single statement batches and <nl> + report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) <nl> * Always close cluster with connection in CqlRecordWriter ( CASSANDRA - 11553 ) <nl> Merged from 2 . 1 : <nl> * ( cqlsh ) Fix potential COPY deadlock when parent process is terminating child <nl> diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py <nl> index 8140c93 . . dae819c 100644 <nl> - - - a / pylib / cqlshlib / copyutil . py <nl> + + + b / pylib / cqlshlib / copyutil . py <nl> @ @ - 2066 , 8 + 2066 , 7 @ @ class ImportProcess ( ChildProcess ) : <nl> profile _ off ( pr , file _ name = ' worker _ profile _ % d . txt ' % ( os . getpid ( ) , ) ) <nl> <nl> except Exception , exc : <nl> - if self . debug : <nl> - traceback . print _ exc ( exc ) <nl> + self . report _ error ( exc ) <nl> <nl> finally : <nl> self . close ( ) <nl> @ @ - 2156 , 20 + 2155 , 25 @ @ class ImportProcess ( ChildProcess ) : <nl> return make _ statement _ with _ failures if self . test _ failures else make _ statement <nl> <nl> def make _ counter _ batch _ statement ( self , query , conv , batch , replicas ) : <nl> - statement = BatchStatement ( batch _ type = BatchType . COUNTER , consistency _ level = self . consistency _ level ) <nl> - statement . replicas = replicas <nl> - statement . keyspace = self . ks <nl> - for row in batch [ ' rows ' ] : <nl> + def make _ full _ query ( r ) : <nl> where _ clause = [ ] <nl> set _ clause = [ ] <nl> - for i , value in enumerate ( row ) : <nl> + for i , value in enumerate ( r ) : <nl> if i in conv . primary _ key _ indexes : <nl> where _ clause . append ( " % s = % s " % ( self . valid _ columns [ i ] , value ) ) <nl> else : <nl> set _ clause . append ( " % s = % s + % s " % ( self . valid _ columns [ i ] , self . valid _ columns [ i ] , value ) ) <nl> + return query % ( ' , ' . join ( set _ clause ) , ' AND ' . join ( where _ clause ) ) <nl> <nl> - full _ query _ text = query % ( ' , ' . join ( set _ clause ) , ' AND ' . join ( where _ clause ) ) <nl> - statement . add ( full _ query _ text ) <nl> + if len ( batch [ ' rows ' ] ) = = 1 : <nl> + statement = SimpleStatement ( make _ full _ query ( batch [ ' rows ' ] [ 0 ] ) , consistency _ level = self . consistency _ level ) <nl> + else : <nl> + statement = BatchStatement ( batch _ type = BatchType . COUNTER , consistency _ level = self . consistency _ level ) <nl> + for row in batch [ ' rows ' ] : <nl> + statement . add ( make _ full _ query ( row ) ) <nl> + <nl> + statement . replicas = replicas <nl> + statement . keyspace = self . ks <nl> return statement <nl> <nl> def make _ prepared _ batch _ statement ( self , query , _ , batch , replicas ) : <nl> @ @ - 2183 , 17 + 2187 , 25 @ @ class ImportProcess ( ChildProcess ) : <nl> We could optimize further by removing bound _ statements altogether but we ' d have to duplicate much <nl> more driver ' s code ( BoundStatement . bind ( ) ) . <nl> " " " <nl> - statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) <nl> + if len ( batch [ ' rows ' ] ) = = 1 : <nl> + statement = query . bind ( batch [ ' rows ' ] [ 0 ] ) <nl> + else : <nl> + statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) <nl> + statement . _ statements _ and _ parameters = [ ( True , query . query _ id , query . bind ( r ) . values ) for r in batch [ ' rows ' ] ] <nl> + <nl> statement . replicas = replicas <nl> statement . keyspace = self . ks <nl> - statement . _ statements _ and _ parameters = [ ( True , query . query _ id , query . bind ( r ) . values ) for r in batch [ ' rows ' ] ] <nl> return statement <nl> <nl> def make _ non _ prepared _ batch _ statement ( self , query , _ , batch , replicas ) : <nl> - statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) <nl> + if len ( batch [ ' rows ' ] ) = = 1 : <nl> + statement = SimpleStatement ( query % ( ' , ' . join ( batch [ ' rows ' ] [ 0 ] ) , ) , consistency _ level = self . consistency _ level ) <nl> + else : <nl> + statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) <nl> + statement . _ statements _ and _ parameters = [ ( False , query % ( ' , ' . join ( r ) , ) , ( ) ) for r in batch [ ' rows ' ] ] <nl> + <nl> statement . replicas = replicas <nl> statement . keyspace = self . ks <nl> - statement . _ statements _ and _ parameters = [ ( False , query % ( ' , ' . join ( r ) , ) , ( ) ) for r in batch [ ' rows ' ] ] <nl> return statement <nl> <nl> def convert _ rows ( self , conv , chunk ) : <nl> @ @ - 2314 , 11 + 2326 , 11 @ @ class ImportProcess ( ChildProcess ) : <nl> future . add _ callbacks ( callback = self . result _ callback , callback _ args = ( batch , chunk ) , <nl> errback = self . err _ callback , errback _ args = ( batch , chunk , replicas ) ) <nl> <nl> - def report _ error ( self , err , chunk , rows = None , attempts = 1 , final = True ) : <nl> + def report _ error ( self , err , chunk = None , rows = None , attempts = 1 , final = True ) : <nl> if self . debug and sys . exc _ info ( ) [ 1 ] = = err : <nl> traceback . print _ exc ( ) <nl> self . outmsg . send ( ImportTaskError ( err . _ _ class _ _ . _ _ name _ _ , err . message , rows , attempts , final ) ) <nl> - if final : <nl> + if final and chunk is not None : <nl> self . update _ chunk ( rows , chunk ) <nl> <nl> def update _ chunk ( self , rows , chunk ) :
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cf07e80 . . 6e6e17b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 2 . 7 
 + * cqlsh : COPY FROM should use regular inserts for single statement batches and 
 + report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) 
 * Always close cluster with connection in CqlRecordWriter ( CASSANDRA - 11553 ) 
 Merged from 2 . 1 : 
 * ( cqlsh ) Fix potential COPY deadlock when parent process is terminating child 
 diff - - git a / pylib / cqlshlib / copyutil . py b / pylib / cqlshlib / copyutil . py 
 index 8140c93 . . dae819c 100644 
 - - - a / pylib / cqlshlib / copyutil . py 
 + + + b / pylib / cqlshlib / copyutil . py 
 @ @ - 2066 , 8 + 2066 , 7 @ @ class ImportProcess ( ChildProcess ) : 
 profile _ off ( pr , file _ name = ' worker _ profile _ % d . txt ' % ( os . getpid ( ) , ) ) 
 
 except Exception , exc : 
 - if self . debug : 
 - traceback . print _ exc ( exc ) 
 + self . report _ error ( exc ) 
 
 finally : 
 self . close ( ) 
 @ @ - 2156 , 20 + 2155 , 25 @ @ class ImportProcess ( ChildProcess ) : 
 return make _ statement _ with _ failures if self . test _ failures else make _ statement 
 
 def make _ counter _ batch _ statement ( self , query , conv , batch , replicas ) : 
 - statement = BatchStatement ( batch _ type = BatchType . COUNTER , consistency _ level = self . consistency _ level ) 
 - statement . replicas = replicas 
 - statement . keyspace = self . ks 
 - for row in batch [ ' rows ' ] : 
 + def make _ full _ query ( r ) : 
 where _ clause = [ ] 
 set _ clause = [ ] 
 - for i , value in enumerate ( row ) : 
 + for i , value in enumerate ( r ) : 
 if i in conv . primary _ key _ indexes : 
 where _ clause . append ( " % s = % s " % ( self . valid _ columns [ i ] , value ) ) 
 else : 
 set _ clause . append ( " % s = % s + % s " % ( self . valid _ columns [ i ] , self . valid _ columns [ i ] , value ) ) 
 + return query % ( ' , ' . join ( set _ clause ) , ' AND ' . join ( where _ clause ) ) 
 
 - full _ query _ text = query % ( ' , ' . join ( set _ clause ) , ' AND ' . join ( where _ clause ) ) 
 - statement . add ( full _ query _ text ) 
 + if len ( batch [ ' rows ' ] ) = = 1 : 
 + statement = SimpleStatement ( make _ full _ query ( batch [ ' rows ' ] [ 0 ] ) , consistency _ level = self . consistency _ level ) 
 + else : 
 + statement = BatchStatement ( batch _ type = BatchType . COUNTER , consistency _ level = self . consistency _ level ) 
 + for row in batch [ ' rows ' ] : 
 + statement . add ( make _ full _ query ( row ) ) 
 + 
 + statement . replicas = replicas 
 + statement . keyspace = self . ks 
 return statement 
 
 def make _ prepared _ batch _ statement ( self , query , _ , batch , replicas ) : 
 @ @ - 2183 , 17 + 2187 , 25 @ @ class ImportProcess ( ChildProcess ) : 
 We could optimize further by removing bound _ statements altogether but we ' d have to duplicate much 
 more driver ' s code ( BoundStatement . bind ( ) ) . 
 " " " 
 - statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) 
 + if len ( batch [ ' rows ' ] ) = = 1 : 
 + statement = query . bind ( batch [ ' rows ' ] [ 0 ] ) 
 + else : 
 + statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) 
 + statement . _ statements _ and _ parameters = [ ( True , query . query _ id , query . bind ( r ) . values ) for r in batch [ ' rows ' ] ] 
 + 
 statement . replicas = replicas 
 statement . keyspace = self . ks 
 - statement . _ statements _ and _ parameters = [ ( True , query . query _ id , query . bind ( r ) . values ) for r in batch [ ' rows ' ] ] 
 return statement 
 
 def make _ non _ prepared _ batch _ statement ( self , query , _ , batch , replicas ) : 
 - statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) 
 + if len ( batch [ ' rows ' ] ) = = 1 : 
 + statement = SimpleStatement ( query % ( ' , ' . join ( batch [ ' rows ' ] [ 0 ] ) , ) , consistency _ level = self . consistency _ level ) 
 + else : 
 + statement = BatchStatement ( batch _ type = BatchType . UNLOGGED , consistency _ level = self . consistency _ level ) 
 + statement . _ statements _ and _ parameters = [ ( False , query % ( ' , ' . join ( r ) , ) , ( ) ) for r in batch [ ' rows ' ] ] 
 + 
 statement . replicas = replicas 
 statement . keyspace = self . ks 
 - statement . _ statements _ and _ parameters = [ ( False , query % ( ' , ' . join ( r ) , ) , ( ) ) for r in batch [ ' rows ' ] ] 
 return statement 
 
 def convert _ rows ( self , conv , chunk ) : 
 @ @ - 2314 , 11 + 2326 , 11 @ @ class ImportProcess ( ChildProcess ) : 
 future . add _ callbacks ( callback = self . result _ callback , callback _ args = ( batch , chunk ) , 
 errback = self . err _ callback , errback _ args = ( batch , chunk , replicas ) ) 
 
 - def report _ error ( self , err , chunk , rows = None , attempts = 1 , final = True ) : 
 + def report _ error ( self , err , chunk = None , rows = None , attempts = 1 , final = True ) : 
 if self . debug and sys . exc _ info ( ) [ 1 ] = = err : 
 traceback . print _ exc ( ) 
 self . outmsg . send ( ImportTaskError ( err . _ _ class _ _ . _ _ name _ _ , err . message , rows , attempts , final ) ) 
 - if final : 
 + if final and chunk is not None : 
 self . update _ chunk ( rows , chunk ) 
 
 def update _ chunk ( self , rows , chunk ) :

NEAREST DIFF:
ELIMINATEDSENTENCE
