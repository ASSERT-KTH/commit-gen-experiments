BLEU SCORE: 0.033864985683445356

TEST MSG: UnbufferedDataOutputstreamPlus . writeUTF fails for 0 length and > 8190 length strings
GENERATED MSG: Add block level checksum for compressed data

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f9d9ae1 . . ea11489 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 1 <nl> + * Fix broken UnbufferedDataOutputStreamPlus . writeUTF ( CASSANDRA - 10203 ) <nl> * ( cqlsh ) add CLEAR command ( CASSANDRA - 10086 ) <nl> * Support string literals as Role names for compatibility ( CASSANDRA - 10135 ) <nl> * Allow count ( * ) and count ( 1 ) to be use as normal aggregation ( CASSANDRA - 10114 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java b / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java <nl> index d8036ff . . 10aefa6 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java <nl> + + + b / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . io . UTFDataFormatException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . channels . WritableByteChannel ; <nl> <nl> - import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . utils . memory . MemoryUtil ; <nl> <nl> import com . google . common . base . Function ; <nl> @ @ - 38 , 6 + 37 , 8 @ @ import com . google . common . base . Function ; <nl> * / <nl> public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlus <nl> { <nl> + private static final byte [ ] zeroBytes = new byte [ 2 ] ; <nl> + <nl> protected UnbufferedDataOutputStreamPlus ( ) <nl> { <nl> super ( ) ; <nl> @ @ - 253 , 6 + 254 , 12 @ @ public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlu <nl> public static void writeUTF ( String str , DataOutput out ) throws IOException <nl> { <nl> int length = str . length ( ) ; <nl> + if ( length = = 0 ) <nl> + { <nl> + out . write ( zeroBytes ) ; <nl> + return ; <nl> + } <nl> + <nl> int utfCount = 0 ; <nl> int maxSize = 2 ; <nl> for ( int i = 0 ; i < length ; i + + ) <nl> @ @ - 284 , 7 + 291 , 6 @ @ public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlu <nl> for ( int i = firstIndex ; i < runLength ; i + + ) <nl> utfBytes [ i ] = ( byte ) str . charAt ( offset + i ) ; <nl> out . write ( utfBytes , 0 , runLength ) ; <nl> - offset + = firstIndex ; <nl> firstIndex = 0 ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java <nl> index d0819fe . . ffe9cb9 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java <nl> @ @ - 1 , 6 + 1 , 11 @ @ <nl> package org . apache . cassandra . io . util ; <nl> <nl> + import java . io . ByteArrayInputStream ; <nl> import java . io . ByteArrayOutputStream ; <nl> + import java . io . DataInput ; <nl> + import java . io . DataInputStream ; <nl> + import java . io . DataOutput ; <nl> + import java . io . DataOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . OutputStream ; <nl> import java . io . UTFDataFormatException ; <nl> @ @ - 442 , 4 + 447 , 43 @ @ public class BufferedDataOutputStreamTest <nl> } <nl> return count ; <nl> } <nl> + <nl> + @ Test <nl> + public void testWriteUTF ( ) throws Exception <nl> + { <nl> + ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; <nl> + DataOutput dataOut = new DataOutputStream ( baos ) ; <nl> + <nl> + StringBuilder sb = new StringBuilder ( 65535 ) ; <nl> + for ( int ii = 0 ; ii < 1 < < 16 ; ii + + ) <nl> + { <nl> + String s = sb . toString ( ) ; <nl> + UnbufferedDataOutputStreamPlus . writeUTF ( s , dataOut ) ; <nl> + DataInput dataIn = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; <nl> + assertEquals ( s , dataIn . readUTF ( ) ) ; <nl> + baos . reset ( ) ; <nl> + sb . append ( " a " ) ; <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> + public void testWriteUTFBigChar ( ) throws Exception <nl> + { <nl> + ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; <nl> + DataOutput dataOut = new DataOutputStream ( baos ) ; <nl> + <nl> + StringBuilder sb = new StringBuilder ( 65535 ) ; <nl> + for ( int ii = 0 ; ii < 1 < < 15 ; ii + + ) <nl> + { <nl> + String s = sb . toString ( ) ; <nl> + UnbufferedDataOutputStreamPlus . writeUTF ( s , dataOut ) ; <nl> + DataInput dataIn = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; <nl> + assertEquals ( s , dataIn . readUTF ( ) ) ; <nl> + baos . reset ( ) ; <nl> + if ( ii = = ( 1 < < 15 ) - 1 ) <nl> + sb . append ( " a " ) ; <nl> + else <nl> + sb . append ( twoByte ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9e22617 . . 5920283 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 0 . 8 . 4 <nl> * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) <nl> * use JAVA env var in cassandra - env . sh ( CASSANDRA - 2785 , 2992 ) <nl> + * avoid doing read for no - op replicate - on - write at CL = 1 ( CASSANDRA - 2892 ) <nl> <nl> <nl> 0 . 8 . 3 <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index d295224 . . 17255ba 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> public void apply ( IMutation mutation , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException <nl> { <nl> assert mutation instanceof RowMutation ; <nl> - sendToHintedEndpoints ( ( RowMutation ) mutation , hintedEndpoints , responseHandler , localDataCenter , true , consistency _ level ) ; <nl> + sendToHintedEndpoints ( ( RowMutation ) mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 110 , 7 + 110 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> public void apply ( IMutation mutation , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException <nl> { <nl> - applyCounterMutation ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level , false ) ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " insert writing local & replicate " + mutation . toString ( true ) ) ; <nl> + <nl> + Runnable runnable = counterWriteTask ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; <nl> + runnable . run ( ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 118 , 7 + 122 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> { <nl> public void apply ( IMutation mutation , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException <nl> { <nl> - applyCounterMutation ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level , true ) ; <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " insert writing local & replicate " + mutation . toString ( true ) ) ; <nl> + <nl> + Runnable runnable = counterWriteTask ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; <nl> + StageManager . getStage ( Stage . MUTATION ) . execute ( runnable ) ; <nl> } <nl> } ; <nl> } <nl> @ @ - 218 , 7 + 226 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> return ss . getTokenMetadata ( ) . getWriteEndpoints ( StorageService . getPartitioner ( ) . getToken ( key ) , table , naturalEndpoints ) ; <nl> } <nl> <nl> - private static void sendToHintedEndpoints ( final RowMutation rm , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , boolean insertLocalMessages , ConsistencyLevel consistency _ level ) <nl> + private static void sendToHintedEndpoints ( final RowMutation rm , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) <nl> throws IOException <nl> { <nl> / / Multimap that holds onto all the messages and addresses meant for a specific datacenter <nl> @ @ - 237 , 8 + 245 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / unhinted writes <nl> if ( destination . equals ( FBUtilities . getLocalAddress ( ) ) ) <nl> { <nl> - if ( insertLocalMessages ) <nl> - insertLocal ( rm , responseHandler ) ; <nl> + insertLocal ( rm , responseHandler ) ; <nl> } <nl> else <nl> { <nl> @ @ - 425 , 13 + 432 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> return performWrite ( cm , cm . consistency ( ) , localDataCenter , counterWriteOnCoordinatorPerformer ) ; <nl> } <nl> <nl> - private static void applyCounterMutation ( final IMutation mutation , final Multimap < InetAddress , InetAddress > hintedEndpoints , final IWriteResponseHandler responseHandler , final String localDataCenter , final ConsistencyLevel consistency _ level , boolean executeOnMutationStage ) <nl> + private static Runnable counterWriteTask ( final IMutation mutation , final Multimap < InetAddress , InetAddress > hintedEndpoints , final IWriteResponseHandler responseHandler , final String localDataCenter , final ConsistencyLevel consistency _ level ) <nl> { <nl> - / / we apply locally first , then send it to other replica <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " insert writing local & replicate " + mutation . toString ( true ) ) ; <nl> - <nl> - Runnable runnable = new DroppableRunnable ( StorageService . Verb . MUTATION ) <nl> + return new DroppableRunnable ( StorageService . Verb . MUTATION ) <nl> { <nl> public void runMayThrow ( ) throws IOException <nl> { <nl> @ @ - 440 , 10 + 443 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> / / apply mutation <nl> cm . apply ( ) ; <nl> - <nl> responseHandler . response ( null ) ; <nl> <nl> - if ( cm . shouldReplicateOnWrite ( ) ) <nl> + / / then send to replicas , if any <nl> + hintedEndpoints . removeAll ( FBUtilities . getLocalAddress ( ) ) ; <nl> + if ( cm . shouldReplicateOnWrite ( ) & & ! hintedEndpoints . isEmpty ( ) ) <nl> { <nl> / / We do the replication on another stage because it involves a read ( see CM . makeReplicationMutation ) <nl> / / and we want to avoid blocking too much the MUTATION stage <nl> @ @ - 452 , 16 + 456 , 12 @ @ public class StorageProxy implements StorageProxyMBean <nl> public void runMayThrow ( ) throws IOException <nl> { <nl> / / send mutation to other replica <nl> - sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , hintedEndpoints , responseHandler , localDataCenter , false , consistency _ level ) ; <nl> + sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; <nl> } <nl> } ) ; <nl> } <nl> } <nl> } ; <nl> - if ( executeOnMutationStage ) <nl> - StageManager . getStage ( Stage . MUTATION ) . execute ( runnable ) ; <nl> - else <nl> - runnable . run ( ) ; <nl> } <nl> <nl> / * *

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f9d9ae1 . . ea11489 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 1 
 + * Fix broken UnbufferedDataOutputStreamPlus . writeUTF ( CASSANDRA - 10203 ) 
 * ( cqlsh ) add CLEAR command ( CASSANDRA - 10086 ) 
 * Support string literals as Role names for compatibility ( CASSANDRA - 10135 ) 
 * Allow count ( * ) and count ( 1 ) to be use as normal aggregation ( CASSANDRA - 10114 ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java b / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java 
 index d8036ff . . 10aefa6 100644 
 - - - a / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java 
 + + + b / src / java / org / apache / cassandra / io / util / UnbufferedDataOutputStreamPlus . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . io . UTFDataFormatException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . channels . WritableByteChannel ; 
 
 - import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . utils . memory . MemoryUtil ; 
 
 import com . google . common . base . Function ; 
 @ @ - 38 , 6 + 37 , 8 @ @ import com . google . common . base . Function ; 
 * / 
 public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlus 
 { 
 + private static final byte [ ] zeroBytes = new byte [ 2 ] ; 
 + 
 protected UnbufferedDataOutputStreamPlus ( ) 
 { 
 super ( ) ; 
 @ @ - 253 , 6 + 254 , 12 @ @ public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlu 
 public static void writeUTF ( String str , DataOutput out ) throws IOException 
 { 
 int length = str . length ( ) ; 
 + if ( length = = 0 ) 
 + { 
 + out . write ( zeroBytes ) ; 
 + return ; 
 + } 
 + 
 int utfCount = 0 ; 
 int maxSize = 2 ; 
 for ( int i = 0 ; i < length ; i + + ) 
 @ @ - 284 , 7 + 291 , 6 @ @ public abstract class UnbufferedDataOutputStreamPlus extends DataOutputStreamPlu 
 for ( int i = firstIndex ; i < runLength ; i + + ) 
 utfBytes [ i ] = ( byte ) str . charAt ( offset + i ) ; 
 out . write ( utfBytes , 0 , runLength ) ; 
 - offset + = firstIndex ; 
 firstIndex = 0 ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java 
 index d0819fe . . ffe9cb9 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedDataOutputStreamTest . java 
 @ @ - 1 , 6 + 1 , 11 @ @ 
 package org . apache . cassandra . io . util ; 
 
 + import java . io . ByteArrayInputStream ; 
 import java . io . ByteArrayOutputStream ; 
 + import java . io . DataInput ; 
 + import java . io . DataInputStream ; 
 + import java . io . DataOutput ; 
 + import java . io . DataOutputStream ; 
 import java . io . IOException ; 
 import java . io . OutputStream ; 
 import java . io . UTFDataFormatException ; 
 @ @ - 442 , 4 + 447 , 43 @ @ public class BufferedDataOutputStreamTest 
 } 
 return count ; 
 } 
 + 
 + @ Test 
 + public void testWriteUTF ( ) throws Exception 
 + { 
 + ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
 + DataOutput dataOut = new DataOutputStream ( baos ) ; 
 + 
 + StringBuilder sb = new StringBuilder ( 65535 ) ; 
 + for ( int ii = 0 ; ii < 1 < < 16 ; ii + + ) 
 + { 
 + String s = sb . toString ( ) ; 
 + UnbufferedDataOutputStreamPlus . writeUTF ( s , dataOut ) ; 
 + DataInput dataIn = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; 
 + assertEquals ( s , dataIn . readUTF ( ) ) ; 
 + baos . reset ( ) ; 
 + sb . append ( " a " ) ; 
 + } 
 + } 
 + 
 + @ Test 
 + public void testWriteUTFBigChar ( ) throws Exception 
 + { 
 + ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; 
 + DataOutput dataOut = new DataOutputStream ( baos ) ; 
 + 
 + StringBuilder sb = new StringBuilder ( 65535 ) ; 
 + for ( int ii = 0 ; ii < 1 < < 15 ; ii + + ) 
 + { 
 + String s = sb . toString ( ) ; 
 + UnbufferedDataOutputStreamPlus . writeUTF ( s , dataOut ) ; 
 + DataInput dataIn = new DataInputStream ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) ; 
 + assertEquals ( s , dataIn . readUTF ( ) ) ; 
 + baos . reset ( ) ; 
 + if ( ii = = ( 1 < < 15 ) - 1 ) 
 + sb . append ( " a " ) ; 
 + else 
 + sb . append ( twoByte ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9e22617 . . 5920283 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 0 . 8 . 4 
 * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) 
 * use JAVA env var in cassandra - env . sh ( CASSANDRA - 2785 , 2992 ) 
 + * avoid doing read for no - op replicate - on - write at CL = 1 ( CASSANDRA - 2892 ) 
 
 
 0 . 8 . 3 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index d295224 . . 17255ba 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 96 , 7 + 96 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 public void apply ( IMutation mutation , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException 
 { 
 assert mutation instanceof RowMutation ; 
 - sendToHintedEndpoints ( ( RowMutation ) mutation , hintedEndpoints , responseHandler , localDataCenter , true , consistency _ level ) ; 
 + sendToHintedEndpoints ( ( RowMutation ) mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; 
 } 
 } ; 
 
 @ @ - 110 , 7 + 110 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 public void apply ( IMutation mutation , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException 
 { 
 - applyCounterMutation ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level , false ) ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " insert writing local & replicate " + mutation . toString ( true ) ) ; 
 + 
 + Runnable runnable = counterWriteTask ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; 
 + runnable . run ( ) ; 
 } 
 } ; 
 
 @ @ - 118 , 7 + 122 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 { 
 public void apply ( IMutation mutation , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) throws IOException 
 { 
 - applyCounterMutation ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level , true ) ; 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " insert writing local & replicate " + mutation . toString ( true ) ) ; 
 + 
 + Runnable runnable = counterWriteTask ( mutation , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; 
 + StageManager . getStage ( Stage . MUTATION ) . execute ( runnable ) ; 
 } 
 } ; 
 } 
 @ @ - 218 , 7 + 226 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 return ss . getTokenMetadata ( ) . getWriteEndpoints ( StorageService . getPartitioner ( ) . getToken ( key ) , table , naturalEndpoints ) ; 
 } 
 
 - private static void sendToHintedEndpoints ( final RowMutation rm , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , boolean insertLocalMessages , ConsistencyLevel consistency _ level ) 
 + private static void sendToHintedEndpoints ( final RowMutation rm , Multimap < InetAddress , InetAddress > hintedEndpoints , IWriteResponseHandler responseHandler , String localDataCenter , ConsistencyLevel consistency _ level ) 
 throws IOException 
 { 
 / / Multimap that holds onto all the messages and addresses meant for a specific datacenter 
 @ @ - 237 , 8 + 245 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 / / unhinted writes 
 if ( destination . equals ( FBUtilities . getLocalAddress ( ) ) ) 
 { 
 - if ( insertLocalMessages ) 
 - insertLocal ( rm , responseHandler ) ; 
 + insertLocal ( rm , responseHandler ) ; 
 } 
 else 
 { 
 @ @ - 425 , 13 + 432 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 return performWrite ( cm , cm . consistency ( ) , localDataCenter , counterWriteOnCoordinatorPerformer ) ; 
 } 
 
 - private static void applyCounterMutation ( final IMutation mutation , final Multimap < InetAddress , InetAddress > hintedEndpoints , final IWriteResponseHandler responseHandler , final String localDataCenter , final ConsistencyLevel consistency _ level , boolean executeOnMutationStage ) 
 + private static Runnable counterWriteTask ( final IMutation mutation , final Multimap < InetAddress , InetAddress > hintedEndpoints , final IWriteResponseHandler responseHandler , final String localDataCenter , final ConsistencyLevel consistency _ level ) 
 { 
 - / / we apply locally first , then send it to other replica 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " insert writing local & replicate " + mutation . toString ( true ) ) ; 
 - 
 - Runnable runnable = new DroppableRunnable ( StorageService . Verb . MUTATION ) 
 + return new DroppableRunnable ( StorageService . Verb . MUTATION ) 
 { 
 public void runMayThrow ( ) throws IOException 
 { 
 @ @ - 440 , 10 + 443 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 
 / / apply mutation 
 cm . apply ( ) ; 
 - 
 responseHandler . response ( null ) ; 
 
 - if ( cm . shouldReplicateOnWrite ( ) ) 
 + / / then send to replicas , if any 
 + hintedEndpoints . removeAll ( FBUtilities . getLocalAddress ( ) ) ; 
 + if ( cm . shouldReplicateOnWrite ( ) & & ! hintedEndpoints . isEmpty ( ) ) 
 { 
 / / We do the replication on another stage because it involves a read ( see CM . makeReplicationMutation ) 
 / / and we want to avoid blocking too much the MUTATION stage 
 @ @ - 452 , 16 + 456 , 12 @ @ public class StorageProxy implements StorageProxyMBean 
 public void runMayThrow ( ) throws IOException 
 { 
 / / send mutation to other replica 
 - sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , hintedEndpoints , responseHandler , localDataCenter , false , consistency _ level ) ; 
 + sendToHintedEndpoints ( cm . makeReplicationMutation ( ) , hintedEndpoints , responseHandler , localDataCenter , consistency _ level ) ; 
 } 
 } ) ; 
 } 
 } 
 } ; 
 - if ( executeOnMutationStage ) 
 - StageManager . getStage ( Stage . MUTATION ) . execute ( runnable ) ; 
 - else 
 - runnable . run ( ) ; 
 } 
 
 / * *
