BLEU SCORE: 0.16186478197091597

TEST MSG: Centralize shared executors
GENERATED MSG: Shutdown JVM on OOM

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c00e671 . . 41a5aaf 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 3 <nl> + * Centralize shared executors ( CASSANDRA - 8055 ) <nl> * Fix filtering for CONTAINS ( KEY ) relations on frozen collection <nl> clustering columns when the query is restricted to a single <nl> partition ( CASSANDRA - 8203 ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java <nl> index 4f18111 . . ed7aa87 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / Auth . java <nl> + + + b / src / java / org / apache / cassandra / auth / Auth . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . KSMetaData ; <nl> @ @ - 189 , 15 + 190 , 13 @ @ public class Auth implements AuthMBean <nl> / / the delay is here to give the node some time to see its peers - to reduce <nl> / / " Skipped default superuser setup : some nodes were not ready " log spam . <nl> / / It ' s the only reason for the delay . <nl> - StorageService . tasks . schedule ( new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - setupDefaultSuperuser ( ) ; <nl> - } <nl> - } , <nl> - SUPERUSER _ SETUP _ DELAY , <nl> - TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . nonPeriodicTasks . schedule ( new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + setupDefaultSuperuser ( ) ; <nl> + } <nl> + } , SUPERUSER _ SETUP _ DELAY , TimeUnit . MILLISECONDS ) ; <nl> <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> index 1218ee2 . . 9570770 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> + + + b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . QueryOptions ; <nl> @ @ - 37 , 7 + 38 , 6 @ @ import org . apache . cassandra . cql3 . statements . SelectStatement ; <nl> import org . apache . cassandra . db . ConsistencyLevel ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . service . QueryState ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . transport . messages . ResultMessage ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . mindrot . jbcrypt . BCrypt ; <nl> @ @ - 169 , 15 + 169 , 13 @ @ public class PasswordAuthenticator implements ISaslAwareAuthenticator <nl> / / the delay is here to give the node some time to see its peers - to reduce <nl> / / " skipped default user setup : some nodes are were not ready " log spam . <nl> / / It ' s the only reason for the delay . <nl> - StorageService . tasks . schedule ( new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - setupDefaultUser ( ) ; <nl> - } <nl> - } , <nl> - Auth . SUPERUSER _ SETUP _ DELAY , <nl> - TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . nonPeriodicTasks . schedule ( new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + setupDefaultUser ( ) ; <nl> + } <nl> + } , Auth . SUPERUSER _ SETUP _ DELAY , TimeUnit . MILLISECONDS ) ; <nl> <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index fca939a . . 2117eb8 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . cliffc . high _ scale _ lib . NonBlockingHashSet ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> @ @ - 39 , 7 + 40 , 6 @ @ import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . util . * ; <nl> import org . apache . cassandra . service . CacheService ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> @ @ - 121 , 10 + 121 , 10 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> submitWrite ( keysToSave ) ; <nl> } <nl> } ; <nl> - saveTask = StorageService . optionalTasks . scheduleWithFixedDelay ( runnable , <nl> - savePeriodInSeconds , <nl> - savePeriodInSeconds , <nl> - TimeUnit . SECONDS ) ; <nl> + saveTask = ScheduledExecutors . optionalTasks . scheduleWithFixedDelay ( runnable , <nl> + savePeriodInSeconds , <nl> + savePeriodInSeconds , <nl> + TimeUnit . SECONDS ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> new file mode 100644 <nl> index 0000000 . . 5935669 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . concurrent ; <nl> + <nl> + / * * <nl> + * Centralized location for shared executors <nl> + * / <nl> + public class ScheduledExecutors <nl> + { <nl> + / * * <nl> + * This pool is used for periodic short ( sub - second ) tasks . <nl> + * / <nl> + public static final DebuggableScheduledThreadPoolExecutor scheduledTasks = new DebuggableScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; <nl> + <nl> + / * * <nl> + * This executor is used for tasks that can have longer execution times , and usually are non periodic . <nl> + * / <nl> + public static final DebuggableScheduledThreadPoolExecutor nonPeriodicTasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; <nl> + static <nl> + { <nl> + nonPeriodicTasks . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This executor is used for tasks that do not need to be waited for on shutdown / drain . <nl> + * / <nl> + public static final DebuggableScheduledThreadPoolExecutor optionalTasks = new DebuggableScheduledThreadPoolExecutor ( " OptionalTasks " ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 9f71d71 . . 45ef39c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ import java . util . * ; <nl> import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> <nl> - import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . primitives . Ints ; <nl> <nl> import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; <nl> @ @ - 33 , 6 + 32 , 7 @ @ import org . github . jamm . MemoryMeter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . cql3 . statements . * ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . composites . * ; <nl> @ @ - 89 , 7 + 89 , 6 @ @ public class QueryProcessor implements QueryHandler <nl> public static final CQLMetrics metrics = new CQLMetrics ( ) ; <nl> <nl> private static final AtomicInteger lastMinuteEvictionsCount = new AtomicInteger ( 0 ) ; <nl> - private static final ScheduledExecutorService evictionCheckTimer = Executors . newScheduledThreadPool ( 1 ) ; <nl> <nl> static <nl> { <nl> @ @ - 118 , 7 + 117 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> } ) <nl> . build ( ) ; <nl> <nl> - evictionCheckTimer . scheduleAtFixedRate ( new Runnable ( ) <nl> + ScheduledExecutors . scheduledTasks . scheduleAtFixedRate ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> index 279f876 . . 20f134d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> private final AtomicLong totalBatchesReplayed = new AtomicLong ( ) ; <nl> <nl> / / Single - thread executor service for scheduling and serializing log replay . <nl> - public static final ScheduledExecutorService batchlogTasks = new DebuggableScheduledThreadPoolExecutor ( " BatchlogTasks " ) ; <nl> + private static final ScheduledExecutorService batchlogTasks = new DebuggableScheduledThreadPoolExecutor ( " BatchlogTasks " ) ; <nl> <nl> public void start ( ) <nl> { <nl> @ @ - 95 , 6 + 95 , 12 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> batchlogTasks . scheduleWithFixedDelay ( runnable , StorageService . RING _ DELAY , REPLAY _ INTERVAL , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> + public static void shutdown ( ) throws InterruptedException <nl> + { <nl> + batchlogTasks . shutdown ( ) ; <nl> + batchlogTasks . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> + } <nl> + <nl> public int countAllBatches ( ) <nl> { <nl> String query = String . format ( " SELECT count ( * ) FROM % s . % s " , Keyspace . SYSTEM _ KS , SystemKeyspace . BATCHLOG _ CF ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0fa50bb . . 7e1dd18 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 33 , 15 + 33 , 13 @ @ import com . google . common . collect . * ; <nl> import com . google . common . util . concurrent . * ; <nl> import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> - import org . apache . cassandra . io . FSWriteError ; <nl> + <nl> import org . json . simple . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . cache . * ; <nl> - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> - import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> - import org . apache . cassandra . concurrent . StageManager ; <nl> + import org . apache . cassandra . concurrent . * ; <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> @ @ - 61 , 6 + 59 , 7 @ @ import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . compress . CompressionParameters ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> @ @ - 86 , 18 + 85 , 21 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> new LinkedBlockingQueue < Runnable > ( ) , <nl> new NamedThreadFactory ( " MemtableFlushWriter " ) , <nl> " internal " ) ; <nl> + <nl> / / post - flush executor is single threaded to provide guarantee that any flush Future on a CF will never return until prior flushes have completed <nl> - public static final ExecutorService postFlushExecutor = new JMXEnabledThreadPoolExecutor ( 1 , <nl> - StageManager . KEEPALIVE , <nl> - TimeUnit . SECONDS , <nl> - new LinkedBlockingQueue < Runnable > ( ) , <nl> - new NamedThreadFactory ( " MemtablePostFlush " ) , <nl> - " internal " ) ; <nl> - public static final ExecutorService reclaimExecutor = new JMXEnabledThreadPoolExecutor ( 1 , StageManager . KEEPALIVE , <nl> - TimeUnit . SECONDS , <nl> - new LinkedBlockingQueue < Runnable > ( ) , <nl> - new NamedThreadFactory ( " MemtableReclaimMemory " ) , <nl> - " internal " ) ; <nl> + private static final ExecutorService postFlushExecutor = new JMXEnabledThreadPoolExecutor ( 1 , <nl> + StageManager . KEEPALIVE , <nl> + TimeUnit . SECONDS , <nl> + new LinkedBlockingQueue < Runnable > ( ) , <nl> + new NamedThreadFactory ( " MemtablePostFlush " ) , <nl> + " internal " ) ; <nl> + <nl> + private static final ExecutorService reclaimExecutor = new JMXEnabledThreadPoolExecutor ( 1 , <nl> + StageManager . KEEPALIVE , <nl> + TimeUnit . SECONDS , <nl> + new LinkedBlockingQueue < Runnable > ( ) , <nl> + new NamedThreadFactory ( " MemtableReclaimMemory " ) , <nl> + " internal " ) ; <nl> <nl> public final Keyspace keyspace ; <nl> public final String name ; <nl> @ @ - 134 , 6 + 136 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> public final ColumnFamilyMetrics metric ; <nl> public volatile long sampleLatencyNanos ; <nl> <nl> + public static void shutdownPostFlushExecutor ( ) throws InterruptedException <nl> + { <nl> + postFlushExecutor . shutdown ( ) ; <nl> + postFlushExecutor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> + } <nl> + <nl> public void reload ( ) <nl> { <nl> / / metadata object has been mutated directly . make all the members jibe with new settings . <nl> @ @ - 188 , 7 + 196 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> } ; <nl> - StorageService . scheduledTasks . schedule ( runnable , period , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . scheduledTasks . schedule ( runnable , period , TimeUnit . MILLISECONDS ) ; <nl> } <nl> } <nl> <nl> @ @ - 310 , 7 + 318 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> throw new RuntimeException ( e ) ; <nl> } <nl> logger . debug ( " retryPolicy for { } is { } " , name , this . metadata . getSpeculativeRetry ( ) ) ; <nl> - StorageService . optionalTasks . scheduleWithFixedDelay ( new Runnable ( ) <nl> + ScheduledExecutors . optionalTasks . scheduleWithFixedDelay ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> index 0e68a71 . . ad8546e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> @ @ - 176 , 7 + 177 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> metrics . log ( ) ; <nl> } <nl> } ; <nl> - StorageService . optionalTasks . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; <nl> + ScheduledExecutors . optionalTasks . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; <nl> } <nl> <nl> private static void deleteHint ( ByteBuffer tokenBytes , CellName columnName , long timestamp ) <nl> @ @ - 228 , 7 + 229 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> } <nl> } <nl> } ; <nl> - StorageService . optionalTasks . submit ( runnable ) ; <nl> + ScheduledExecutors . optionalTasks . submit ( runnable ) ; <nl> } <nl> <nl> / / foobar <nl> @ @ - 249 , 7 + 250 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean <nl> } <nl> } <nl> } ; <nl> - StorageService . optionalTasks . submit ( runnable ) . get ( ) ; <nl> + ScheduledExecutors . optionalTasks . submit ( runnable ) . get ( ) ; <nl> <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> index 1b1a1e0 . . 6cba603 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class CommitLogArchiver <nl> } <nl> <nl> public final Map < String , Future < ? > > archivePending = new ConcurrentHashMap < String , Future < ? > > ( ) ; <nl> - public final ExecutorService executor = new JMXEnabledThreadPoolExecutor ( " CommitLogArchiver " ) ; <nl> + private final ExecutorService executor = new JMXEnabledThreadPoolExecutor ( " CommitLogArchiver " ) ; <nl> private final String archiveCommand ; <nl> private final String restoreCommand ; <nl> private final String restoreDirectories ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java b / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java <nl> index d95dff7 . . fb1cbb3 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java <nl> @ @ - 27 , 9 + 27 , 9 @ @ import com . google . common . collect . Sets ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . db . DataTracker ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class SSTableDeletingTask implements Runnable <nl> @ @ - 69 , 7 + 69 , 7 @ @ public class SSTableDeletingTask implements Runnable <nl> <nl> public void schedule ( ) <nl> { <nl> - StorageService . tasks . submit ( this ) ; <nl> + ScheduledExecutors . nonPeriodicTasks . submit ( this ) ; <nl> } <nl> <nl> public void run ( ) <nl> @ @ - 119 , 7 + 119 , 7 @ @ public class SSTableDeletingTask implements Runnable <nl> } <nl> } ; <nl> <nl> - FBUtilities . waitOnFuture ( StorageService . tasks . schedule ( runnable , 0 , TimeUnit . MILLISECONDS ) ) ; <nl> + FBUtilities . waitOnFuture ( ScheduledExecutors . nonPeriodicTasks . schedule ( runnable , 0 , TimeUnit . MILLISECONDS ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index 8f302f3 . . a3e3cf5 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ import org . apache . cassandra . cache . CachingOptions ; <nl> import org . apache . cassandra . cache . InstrumentingCache ; <nl> import org . apache . cassandra . cache . KeyCacheKey ; <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . config . Config ; <nl> @ @ - 635 , 7 + 636 , 7 @ @ public class SSTableReader extends SSTable <nl> else <nl> barrier = null ; <nl> <nl> - StorageService . tasks . execute ( new Runnable ( ) <nl> + ScheduledExecutors . nonPeriodicTasks . execute ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index 295679e . . 7d187ac 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 38 , 7 + 38 , 7 @ @ import sun . nio . ch . DirectBuffer ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . BlacklistedDirectories ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> @ @ - 326 , 7 + 326 , 7 @ @ public class FileUtils <nl> deleteWithConfirm ( new File ( file ) ) ; <nl> } <nl> } ; <nl> - StorageService . tasks . execute ( runnable ) ; <nl> + ScheduledExecutors . nonPeriodicTasks . execute ( runnable ) ; <nl> } <nl> <nl> public static String stringifyFileSize ( double value ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 49442c8 . . e4b714c 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 84 , 8 + 85 , 8 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> reset ( ) ; <nl> } <nl> } ; <nl> - StorageService . scheduledTasks . scheduleWithFixedDelay ( update , UPDATE _ INTERVAL _ IN _ MS , UPDATE _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> - StorageService . scheduledTasks . scheduleWithFixedDelay ( reset , RESET _ INTERVAL _ IN _ MS , RESET _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( update , UPDATE _ INTERVAL _ IN _ MS , UPDATE _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( reset , RESET _ INTERVAL _ IN _ MS , RESET _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> registerMBean ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 05b449c . . 73bc9ff 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 37 , 6 + 37 , 8 @ @ import com . google . common . collect . Lists ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . concurrent . TracingAwareExecutorService ; <nl> @ @ - 329 , 7 + 331 , 7 @ @ public final class MessagingService implements MessagingServiceMBean <nl> logDroppedMessages ( ) ; <nl> } <nl> } ; <nl> - StorageService . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> <nl> Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , ? > timeoutReporter = new Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , Object > ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 5897a22 . . 1c99348 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import com . addthis . metrics . reporter . config . ReporterConfig ; <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 329 , 7 + 330 , 7 @ @ public class CassandraDaemon <nl> } <nl> } <nl> } ; <nl> - StorageService . optionalTasks . schedule ( runnable , 5 * 60 , TimeUnit . SECONDS ) ; <nl> + ScheduledExecutors . optionalTasks . schedule ( runnable , 5 * 60 , TimeUnit . SECONDS ) ; <nl> <nl> SystemKeyspace . finishStartup ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / LoadBroadcaster . java b / src / java / org / apache / cassandra / service / LoadBroadcaster . java <nl> index 4996e52 . . d12ffba 100644 <nl> - - - a / src / java / org / apache / cassandra / service / LoadBroadcaster . java <nl> + + + b / src / java / org / apache / cassandra / service / LoadBroadcaster . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . TimeUnit ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . gms . * ; <nl> <nl> public class LoadBroadcaster implements IEndpointStateChangeSubscriber <nl> @ @ - 91 , 7 + 92 , 7 @ @ public class LoadBroadcaster implements IEndpointStateChangeSubscriber <nl> StorageService . instance . valueFactory . load ( StorageService . instance . getLoad ( ) ) ) ; <nl> } <nl> } ; <nl> - StorageService . scheduledTasks . scheduleWithFixedDelay ( runnable , 2 * Gossiper . intervalInMillis , BROADCAST _ INTERVAL , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( runnable , 2 * Gossiper . intervalInMillis , BROADCAST _ INTERVAL , TimeUnit . MILLISECONDS ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index bdae208 . . ce4dca4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ import java . lang . management . RuntimeMXBean ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 126 , 7 + 127 , 7 @ @ public class MigrationManager <nl> submitMigrationTask ( endpoint ) ; <nl> } <nl> } ; <nl> - StorageService . optionalTasks . schedule ( runnable , MIGRATION _ DELAY _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . optionalTasks . schedule ( runnable , MIGRATION _ DELAY _ IN _ MS , TimeUnit . MILLISECONDS ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 29054f4 . . ae8c798 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . auth . Auth ; <nl> - import org . apache . cassandra . concurrent . DebuggableScheduledThreadPoolExecutor ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 121 , 24 + 121 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> return 30 * 1000 ; <nl> } <nl> <nl> - / * * <nl> - * This pool is used for periodic short ( sub - second ) tasks . <nl> - * / <nl> - public static final DebuggableScheduledThreadPoolExecutor scheduledTasks = new DebuggableScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; <nl> - <nl> - / * * <nl> - * This pool is used by tasks that can have longer execution times , and usually are non periodic . <nl> - * / <nl> - public static final DebuggableScheduledThreadPoolExecutor tasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; <nl> - / * * <nl> - * tasks that do not need to be waited for on shutdown / drain <nl> - * / <nl> - public static final DebuggableScheduledThreadPoolExecutor optionalTasks = new DebuggableScheduledThreadPoolExecutor ( " OptionalTasks " ) ; <nl> - static <nl> - { <nl> - tasks . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; <nl> - } <nl> - <nl> / * This abstraction maintains the token / endpoint metadata information * / <nl> private TokenMetadata tokenMetadata = new TokenMetadata ( ) ; <nl> <nl> @ @ - 597 , 7 + 579 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> if ( daemon ! = null ) <nl> 	 shutdownClientServers ( ) ; <nl> - optionalTasks . shutdown ( ) ; <nl> + ScheduledExecutors . optionalTasks . shutdown ( ) ; <nl> Gossiper . instance . stop ( ) ; <nl> <nl> / / In - progress writes originating here could generate hints to be written , so shut down MessagingService <nl> @ @ - 633 , 8 + 615 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> CommitLog . instance . shutdownBlocking ( ) ; <nl> <nl> / / wait for miscellaneous tasks like sstable and commitlog segment deletion <nl> - tasks . shutdown ( ) ; <nl> - if ( ! tasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> + ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; <nl> + if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> logger . warn ( " Miscellaneous task executor still busy after one minute ; proceeding with shutdown " ) ; <nl> } <nl> } , " StorageServiceShutdownHook " ) ; <nl> @ @ - 3602 , 7 + 3584 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> setMode ( Mode . DRAINING , " starting drain process " , true ) ; <nl> shutdownClientServers ( ) ; <nl> - optionalTasks . shutdown ( ) ; <nl> + ScheduledExecutors . optionalTasks . shutdown ( ) ; <nl> Gossiper . instance . stop ( ) ; <nl> <nl> setMode ( Mode . DRAINING , " shutting down MessageService " , false ) ; <nl> @ @ - 3647 , 21 + 3629 , 19 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> FBUtilities . waitOnFutures ( flushes ) ; <nl> <nl> - BatchlogManager . batchlogTasks . shutdown ( ) ; <nl> - BatchlogManager . batchlogTasks . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> + BatchlogManager . shutdown ( ) ; <nl> <nl> / / whilst we ' ve flushed all the CFs , which will have recycled all completed segments , we want to ensure <nl> / / there are no segments to replay , so we force the recycling of any remaining ( should be at most one ) <nl> CommitLog . instance . forceRecycleAllSegments ( ) ; <nl> <nl> - ColumnFamilyStore . postFlushExecutor . shutdown ( ) ; <nl> - ColumnFamilyStore . postFlushExecutor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> + ColumnFamilyStore . shutdownPostFlushExecutor ( ) ; <nl> <nl> CommitLog . instance . shutdownBlocking ( ) ; <nl> <nl> / / wait for miscellaneous tasks like sstable and commitlog segment deletion <nl> - tasks . shutdown ( ) ; <nl> - if ( ! tasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> + ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; <nl> + if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) <nl> logger . warn ( " Miscellaneous task executor still busy after one minute ; proceeding with shutdown " ) ; <nl> <nl> setMode ( Mode . DRAINED , true ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / ResourceWatcher . java b / src / java / org / apache / cassandra / utils / ResourceWatcher . java <nl> index 2dfab95 . . 5e7cbdd 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ResourceWatcher . java <nl> + + + b / src / java / org / apache / cassandra / utils / ResourceWatcher . java <nl> @ @ - 23 , 13 + 23 , 13 @ @ import java . util . concurrent . TimeUnit ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> <nl> public class ResourceWatcher <nl> { <nl> public static void watch ( String resource , Runnable callback , int period ) <nl> { <nl> - StorageService . scheduledTasks . scheduleWithFixedDelay ( new WatchedResource ( resource , callback ) , period , period , TimeUnit . MILLISECONDS ) ; <nl> + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( new WatchedResource ( resource , callback ) , period , period , TimeUnit . MILLISECONDS ) ; <nl> } <nl> <nl> public static class WatchedResource implements Runnable <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 470b701 . . dd22896 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . Directories ; <nl> @ @ - 43 , 7 + 44 , 6 @ @ import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> <nl> / * * <nl> * Base class for CQL tests . <nl> @ @ - 88 , 7 + 88 , 7 @ @ public abstract class CQLTester <nl> currentTypes . clear ( ) ; <nl> <nl> / / We want to clean up after the test , but dropping a table is rather long so just do that asynchronously <nl> - StorageService . optionalTasks . execute ( new Runnable ( ) <nl> + ScheduledExecutors . optionalTasks . execute ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> @ @ - 105 , 7 + 105 , 7 @ @ public abstract class CQLTester <nl> / / mono - threaded , just push a task on the queue to find when it ' s empty . No perfect but good enough . <nl> <nl> final CountDownLatch latch = new CountDownLatch ( 1 ) ; <nl> - StorageService . tasks . execute ( new Runnable ( ) <nl> + ScheduledExecutors . nonPeriodicTasks . execute ( new Runnable ( ) <nl> { <nl> public void run ( ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / KeyCacheTest . java b / test / unit / org / apache / cassandra / db / KeyCacheTest . java <nl> index c0560ab . . 1bc7caf 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / KeyCacheTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / KeyCacheTest . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ <nl> * / <nl> package org . apache . cassandra . db ; <nl> <nl> - import java . nio . file . Files ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> @ @ - 31 , 12 + 30 , 12 @ @ import org . junit . Test ; <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . cache . KeyCacheKey ; <nl> + import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . db . composites . * ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . service . CacheService ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> @ @ - 165 , 7 + 164 , 7 @ @ public class KeyCacheTest extends SchemaLoader <nl> reader . releaseReference ( ) ; <nl> <nl> Uninterruptibles . sleepUninterruptibly ( 10 , TimeUnit . MILLISECONDS ) ; ; <nl> - while ( StorageService . tasks . getActiveCount ( ) + StorageService . tasks . getQueue ( ) . size ( ) > 0 ) ; <nl> + while ( ScheduledExecutors . nonPeriodicTasks . getActiveCount ( ) + ScheduledExecutors . nonPeriodicTasks . getQueue ( ) . size ( ) > 0 ) ; <nl> <nl> / / after releasing the reference this should drop to 2 <nl> assertKeyCacheSize ( 2 , KEYSPACE1 , COLUMN _ FAMILY1 ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c00e671 . . 41a5aaf 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 3 
 + * Centralize shared executors ( CASSANDRA - 8055 ) 
 * Fix filtering for CONTAINS ( KEY ) relations on frozen collection 
 clustering columns when the query is restricted to a single 
 partition ( CASSANDRA - 8203 ) 
 diff - - git a / src / java / org / apache / cassandra / auth / Auth . java b / src / java / org / apache / cassandra / auth / Auth . java 
 index 4f18111 . . ed7aa87 100644 
 - - - a / src / java / org / apache / cassandra / auth / Auth . java 
 + + + b / src / java / org / apache / cassandra / auth / Auth . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . KSMetaData ; 
 @ @ - 189 , 15 + 190 , 13 @ @ public class Auth implements AuthMBean 
 / / the delay is here to give the node some time to see its peers - to reduce 
 / / " Skipped default superuser setup : some nodes were not ready " log spam . 
 / / It ' s the only reason for the delay . 
 - StorageService . tasks . schedule ( new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - setupDefaultSuperuser ( ) ; 
 - } 
 - } , 
 - SUPERUSER _ SETUP _ DELAY , 
 - TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . nonPeriodicTasks . schedule ( new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + setupDefaultSuperuser ( ) ; 
 + } 
 + } , SUPERUSER _ SETUP _ DELAY , TimeUnit . MILLISECONDS ) ; 
 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 index 1218ee2 . . 9570770 100644 
 - - - a / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 + + + b / src / java / org / apache / cassandra / auth / PasswordAuthenticator . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . QueryOptions ; 
 @ @ - 37 , 7 + 38 , 6 @ @ import org . apache . cassandra . cql3 . statements . SelectStatement ; 
 import org . apache . cassandra . db . ConsistencyLevel ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . service . QueryState ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . transport . messages . ResultMessage ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . mindrot . jbcrypt . BCrypt ; 
 @ @ - 169 , 15 + 169 , 13 @ @ public class PasswordAuthenticator implements ISaslAwareAuthenticator 
 / / the delay is here to give the node some time to see its peers - to reduce 
 / / " skipped default user setup : some nodes are were not ready " log spam . 
 / / It ' s the only reason for the delay . 
 - StorageService . tasks . schedule ( new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - setupDefaultUser ( ) ; 
 - } 
 - } , 
 - Auth . SUPERUSER _ SETUP _ DELAY , 
 - TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . nonPeriodicTasks . schedule ( new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + setupDefaultUser ( ) ; 
 + } 
 + } , Auth . SUPERUSER _ SETUP _ DELAY , TimeUnit . MILLISECONDS ) ; 
 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index fca939a . . 2117eb8 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . cliffc . high _ scale _ lib . NonBlockingHashSet ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 @ @ - 39 , 7 + 40 , 6 @ @ import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . util . * ; 
 import org . apache . cassandra . service . CacheService ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . Pair ; 
 
 @ @ - 121 , 10 + 121 , 10 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 submitWrite ( keysToSave ) ; 
 } 
 } ; 
 - saveTask = StorageService . optionalTasks . scheduleWithFixedDelay ( runnable , 
 - savePeriodInSeconds , 
 - savePeriodInSeconds , 
 - TimeUnit . SECONDS ) ; 
 + saveTask = ScheduledExecutors . optionalTasks . scheduleWithFixedDelay ( runnable , 
 + savePeriodInSeconds , 
 + savePeriodInSeconds , 
 + TimeUnit . SECONDS ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 new file mode 100644 
 index 0000000 . . 5935669 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / concurrent / ScheduledExecutors . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . concurrent ; 
 + 
 + / * * 
 + * Centralized location for shared executors 
 + * / 
 + public class ScheduledExecutors 
 + { 
 + / * * 
 + * This pool is used for periodic short ( sub - second ) tasks . 
 + * / 
 + public static final DebuggableScheduledThreadPoolExecutor scheduledTasks = new DebuggableScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; 
 + 
 + / * * 
 + * This executor is used for tasks that can have longer execution times , and usually are non periodic . 
 + * / 
 + public static final DebuggableScheduledThreadPoolExecutor nonPeriodicTasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; 
 + static 
 + { 
 + nonPeriodicTasks . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; 
 + } 
 + 
 + / * * 
 + * This executor is used for tasks that do not need to be waited for on shutdown / drain . 
 + * / 
 + public static final DebuggableScheduledThreadPoolExecutor optionalTasks = new DebuggableScheduledThreadPoolExecutor ( " OptionalTasks " ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 9f71d71 . . 45ef39c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 22 , 7 + 22 , 6 @ @ import java . util . * ; 
 import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 
 - import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . primitives . Ints ; 
 
 import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; 
 @ @ - 33 , 6 + 32 , 7 @ @ import org . github . jamm . MemoryMeter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . cql3 . statements . * ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . composites . * ; 
 @ @ - 89 , 7 + 89 , 6 @ @ public class QueryProcessor implements QueryHandler 
 public static final CQLMetrics metrics = new CQLMetrics ( ) ; 
 
 private static final AtomicInteger lastMinuteEvictionsCount = new AtomicInteger ( 0 ) ; 
 - private static final ScheduledExecutorService evictionCheckTimer = Executors . newScheduledThreadPool ( 1 ) ; 
 
 static 
 { 
 @ @ - 118 , 7 + 117 , 7 @ @ public class QueryProcessor implements QueryHandler 
 } ) 
 . build ( ) ; 
 
 - evictionCheckTimer . scheduleAtFixedRate ( new Runnable ( ) 
 + ScheduledExecutors . scheduledTasks . scheduleAtFixedRate ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / BatchlogManager . java b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 index 279f876 . . 20f134d 100644 
 - - - a / src / java / org / apache / cassandra / db / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / db / BatchlogManager . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 private final AtomicLong totalBatchesReplayed = new AtomicLong ( ) ; 
 
 / / Single - thread executor service for scheduling and serializing log replay . 
 - public static final ScheduledExecutorService batchlogTasks = new DebuggableScheduledThreadPoolExecutor ( " BatchlogTasks " ) ; 
 + private static final ScheduledExecutorService batchlogTasks = new DebuggableScheduledThreadPoolExecutor ( " BatchlogTasks " ) ; 
 
 public void start ( ) 
 { 
 @ @ - 95 , 6 + 95 , 12 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 batchlogTasks . scheduleWithFixedDelay ( runnable , StorageService . RING _ DELAY , REPLAY _ INTERVAL , TimeUnit . MILLISECONDS ) ; 
 } 
 
 + public static void shutdown ( ) throws InterruptedException 
 + { 
 + batchlogTasks . shutdown ( ) ; 
 + batchlogTasks . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 + } 
 + 
 public int countAllBatches ( ) 
 { 
 String query = String . format ( " SELECT count ( * ) FROM % s . % s " , Keyspace . SYSTEM _ KS , SystemKeyspace . BATCHLOG _ CF ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0fa50bb . . 7e1dd18 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 33 , 15 + 33 , 13 @ @ import com . google . common . collect . * ; 
 import com . google . common . util . concurrent . * ; 
 import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 - import org . apache . cassandra . io . FSWriteError ; 
 + 
 import org . json . simple . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . cache . * ; 
 - import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 - import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 - import org . apache . cassandra . concurrent . StageManager ; 
 + import org . apache . cassandra . concurrent . * ; 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . config . CFMetaData . SpeculativeRetry ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 @ @ - 61 , 6 + 59 , 7 @ @ import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . FSReadError ; 
 + import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . compress . CompressionParameters ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 @ @ - 86 , 18 + 85 , 21 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 new LinkedBlockingQueue < Runnable > ( ) , 
 new NamedThreadFactory ( " MemtableFlushWriter " ) , 
 " internal " ) ; 
 + 
 / / post - flush executor is single threaded to provide guarantee that any flush Future on a CF will never return until prior flushes have completed 
 - public static final ExecutorService postFlushExecutor = new JMXEnabledThreadPoolExecutor ( 1 , 
 - StageManager . KEEPALIVE , 
 - TimeUnit . SECONDS , 
 - new LinkedBlockingQueue < Runnable > ( ) , 
 - new NamedThreadFactory ( " MemtablePostFlush " ) , 
 - " internal " ) ; 
 - public static final ExecutorService reclaimExecutor = new JMXEnabledThreadPoolExecutor ( 1 , StageManager . KEEPALIVE , 
 - TimeUnit . SECONDS , 
 - new LinkedBlockingQueue < Runnable > ( ) , 
 - new NamedThreadFactory ( " MemtableReclaimMemory " ) , 
 - " internal " ) ; 
 + private static final ExecutorService postFlushExecutor = new JMXEnabledThreadPoolExecutor ( 1 , 
 + StageManager . KEEPALIVE , 
 + TimeUnit . SECONDS , 
 + new LinkedBlockingQueue < Runnable > ( ) , 
 + new NamedThreadFactory ( " MemtablePostFlush " ) , 
 + " internal " ) ; 
 + 
 + private static final ExecutorService reclaimExecutor = new JMXEnabledThreadPoolExecutor ( 1 , 
 + StageManager . KEEPALIVE , 
 + TimeUnit . SECONDS , 
 + new LinkedBlockingQueue < Runnable > ( ) , 
 + new NamedThreadFactory ( " MemtableReclaimMemory " ) , 
 + " internal " ) ; 
 
 public final Keyspace keyspace ; 
 public final String name ; 
 @ @ - 134 , 6 + 136 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 public final ColumnFamilyMetrics metric ; 
 public volatile long sampleLatencyNanos ; 
 
 + public static void shutdownPostFlushExecutor ( ) throws InterruptedException 
 + { 
 + postFlushExecutor . shutdown ( ) ; 
 + postFlushExecutor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 + } 
 + 
 public void reload ( ) 
 { 
 / / metadata object has been mutated directly . make all the members jibe with new settings . 
 @ @ - 188 , 7 + 196 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 } ; 
 - StorageService . scheduledTasks . schedule ( runnable , period , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . scheduledTasks . schedule ( runnable , period , TimeUnit . MILLISECONDS ) ; 
 } 
 } 
 
 @ @ - 310 , 7 + 318 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 throw new RuntimeException ( e ) ; 
 } 
 logger . debug ( " retryPolicy for { } is { } " , name , this . metadata . getSpeculativeRetry ( ) ) ; 
 - StorageService . optionalTasks . scheduleWithFixedDelay ( new Runnable ( ) 
 + ScheduledExecutors . optionalTasks . scheduleWithFixedDelay ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / HintedHandOffManager . java b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 index 0e68a71 . . ad8546e 100644 
 - - - a / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 + + + b / src / java / org / apache / cassandra / db / HintedHandOffManager . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 @ @ - 176 , 7 + 177 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 metrics . log ( ) ; 
 } 
 } ; 
 - StorageService . optionalTasks . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; 
 + ScheduledExecutors . optionalTasks . scheduleWithFixedDelay ( runnable , 10 , 10 , TimeUnit . MINUTES ) ; 
 } 
 
 private static void deleteHint ( ByteBuffer tokenBytes , CellName columnName , long timestamp ) 
 @ @ - 228 , 7 + 229 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 } 
 } 
 } ; 
 - StorageService . optionalTasks . submit ( runnable ) ; 
 + ScheduledExecutors . optionalTasks . submit ( runnable ) ; 
 } 
 
 / / foobar 
 @ @ - 249 , 7 + 250 , 7 @ @ public class HintedHandOffManager implements HintedHandOffManagerMBean 
 } 
 } 
 } ; 
 - StorageService . optionalTasks . submit ( runnable ) . get ( ) ; 
 + ScheduledExecutors . optionalTasks . submit ( runnable ) . get ( ) ; 
 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 index 1b1a1e0 . . 6cba603 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogArchiver . java 
 @ @ - 52 , 7 + 52 , 7 @ @ public class CommitLogArchiver 
 } 
 
 public final Map < String , Future < ? > > archivePending = new ConcurrentHashMap < String , Future < ? > > ( ) ; 
 - public final ExecutorService executor = new JMXEnabledThreadPoolExecutor ( " CommitLogArchiver " ) ; 
 + private final ExecutorService executor = new JMXEnabledThreadPoolExecutor ( " CommitLogArchiver " ) ; 
 private final String archiveCommand ; 
 private final String restoreCommand ; 
 private final String restoreDirectories ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java b / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java 
 index d95dff7 . . fb1cbb3 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableDeletingTask . java 
 @ @ - 27 , 9 + 27 , 9 @ @ import com . google . common . collect . Sets ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . db . DataTracker ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 public class SSTableDeletingTask implements Runnable 
 @ @ - 69 , 7 + 69 , 7 @ @ public class SSTableDeletingTask implements Runnable 
 
 public void schedule ( ) 
 { 
 - StorageService . tasks . submit ( this ) ; 
 + ScheduledExecutors . nonPeriodicTasks . submit ( this ) ; 
 } 
 
 public void run ( ) 
 @ @ - 119 , 7 + 119 , 7 @ @ public class SSTableDeletingTask implements Runnable 
 } 
 } ; 
 
 - FBUtilities . waitOnFuture ( StorageService . tasks . schedule ( runnable , 0 , TimeUnit . MILLISECONDS ) ) ; 
 + FBUtilities . waitOnFuture ( ScheduledExecutors . nonPeriodicTasks . schedule ( runnable , 0 , TimeUnit . MILLISECONDS ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index 8f302f3 . . a3e3cf5 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import org . apache . cassandra . cache . CachingOptions ; 
 import org . apache . cassandra . cache . InstrumentingCache ; 
 import org . apache . cassandra . cache . KeyCacheKey ; 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . config . Config ; 
 @ @ - 635 , 7 + 636 , 7 @ @ public class SSTableReader extends SSTable 
 else 
 barrier = null ; 
 
 - StorageService . tasks . execute ( new Runnable ( ) 
 + ScheduledExecutors . nonPeriodicTasks . execute ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index 295679e . . 7d187ac 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 38 , 7 + 38 , 7 @ @ import sun . nio . ch . DirectBuffer ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . BlacklistedDirectories ; 
 import org . apache . cassandra . db . Keyspace ; 
 @ @ - 326 , 7 + 326 , 7 @ @ public class FileUtils 
 deleteWithConfirm ( new File ( file ) ) ; 
 } 
 } ; 
 - StorageService . tasks . execute ( runnable ) ; 
 + ScheduledExecutors . nonPeriodicTasks . execute ( runnable ) ; 
 } 
 
 public static String stringifyFileSize ( double value ) 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 49442c8 . . e4b714c 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 84 , 8 + 85 , 8 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 reset ( ) ; 
 } 
 } ; 
 - StorageService . scheduledTasks . scheduleWithFixedDelay ( update , UPDATE _ INTERVAL _ IN _ MS , UPDATE _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 - StorageService . scheduledTasks . scheduleWithFixedDelay ( reset , RESET _ INTERVAL _ IN _ MS , RESET _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( update , UPDATE _ INTERVAL _ IN _ MS , UPDATE _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( reset , RESET _ INTERVAL _ IN _ MS , RESET _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 registerMBean ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 05b449c . . 73bc9ff 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 37 , 6 + 37 , 8 @ @ import com . google . common . collect . Lists ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . concurrent . TracingAwareExecutorService ; 
 @ @ - 329 , 7 + 331 , 7 @ @ public final class MessagingService implements MessagingServiceMBean 
 logDroppedMessages ( ) ; 
 } 
 } ; 
 - StorageService . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( logDropped , LOG _ DROPPED _ INTERVAL _ IN _ MS , LOG _ DROPPED _ INTERVAL _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 
 Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , ? > timeoutReporter = new Function < Pair < Integer , ExpiringMap . CacheableObject < CallbackInfo > > , Object > ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 5897a22 . . 1c99348 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 import com . addthis . metrics . reporter . config . ReporterConfig ; 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 329 , 7 + 330 , 7 @ @ public class CassandraDaemon 
 } 
 } 
 } ; 
 - StorageService . optionalTasks . schedule ( runnable , 5 * 60 , TimeUnit . SECONDS ) ; 
 + ScheduledExecutors . optionalTasks . schedule ( runnable , 5 * 60 , TimeUnit . SECONDS ) ; 
 
 SystemKeyspace . finishStartup ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / service / LoadBroadcaster . java b / src / java / org / apache / cassandra / service / LoadBroadcaster . java 
 index 4996e52 . . d12ffba 100644 
 - - - a / src / java / org / apache / cassandra / service / LoadBroadcaster . java 
 + + + b / src / java / org / apache / cassandra / service / LoadBroadcaster . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . TimeUnit ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . gms . * ; 
 
 public class LoadBroadcaster implements IEndpointStateChangeSubscriber 
 @ @ - 91 , 7 + 92 , 7 @ @ public class LoadBroadcaster implements IEndpointStateChangeSubscriber 
 StorageService . instance . valueFactory . load ( StorageService . instance . getLoad ( ) ) ) ; 
 } 
 } ; 
 - StorageService . scheduledTasks . scheduleWithFixedDelay ( runnable , 2 * Gossiper . intervalInMillis , BROADCAST _ INTERVAL , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( runnable , 2 * Gossiper . intervalInMillis , BROADCAST _ INTERVAL , TimeUnit . MILLISECONDS ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index bdae208 . . ce4dca4 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 32 , 6 + 32 , 7 @ @ import java . lang . management . RuntimeMXBean ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 126 , 7 + 127 , 7 @ @ public class MigrationManager 
 submitMigrationTask ( endpoint ) ; 
 } 
 } ; 
 - StorageService . optionalTasks . schedule ( runnable , MIGRATION _ DELAY _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . optionalTasks . schedule ( runnable , MIGRATION _ DELAY _ IN _ MS , TimeUnit . MILLISECONDS ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 29054f4 . . ae8c798 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 54 , 7 + 54 , 7 @ @ import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . auth . Auth ; 
 - import org . apache . cassandra . concurrent . DebuggableScheduledThreadPoolExecutor ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 121 , 24 + 121 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 return 30 * 1000 ; 
 } 
 
 - / * * 
 - * This pool is used for periodic short ( sub - second ) tasks . 
 - * / 
 - public static final DebuggableScheduledThreadPoolExecutor scheduledTasks = new DebuggableScheduledThreadPoolExecutor ( " ScheduledTasks " ) ; 
 - 
 - / * * 
 - * This pool is used by tasks that can have longer execution times , and usually are non periodic . 
 - * / 
 - public static final DebuggableScheduledThreadPoolExecutor tasks = new DebuggableScheduledThreadPoolExecutor ( " NonPeriodicTasks " ) ; 
 - / * * 
 - * tasks that do not need to be waited for on shutdown / drain 
 - * / 
 - public static final DebuggableScheduledThreadPoolExecutor optionalTasks = new DebuggableScheduledThreadPoolExecutor ( " OptionalTasks " ) ; 
 - static 
 - { 
 - tasks . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; 
 - } 
 - 
 / * This abstraction maintains the token / endpoint metadata information * / 
 private TokenMetadata tokenMetadata = new TokenMetadata ( ) ; 
 
 @ @ - 597 , 7 + 579 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 if ( daemon ! = null ) 
 	 shutdownClientServers ( ) ; 
 - optionalTasks . shutdown ( ) ; 
 + ScheduledExecutors . optionalTasks . shutdown ( ) ; 
 Gossiper . instance . stop ( ) ; 
 
 / / In - progress writes originating here could generate hints to be written , so shut down MessagingService 
 @ @ - 633 , 8 + 615 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 CommitLog . instance . shutdownBlocking ( ) ; 
 
 / / wait for miscellaneous tasks like sstable and commitlog segment deletion 
 - tasks . shutdown ( ) ; 
 - if ( ! tasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 + ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; 
 + if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 logger . warn ( " Miscellaneous task executor still busy after one minute ; proceeding with shutdown " ) ; 
 } 
 } , " StorageServiceShutdownHook " ) ; 
 @ @ - 3602 , 7 + 3584 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 setMode ( Mode . DRAINING , " starting drain process " , true ) ; 
 shutdownClientServers ( ) ; 
 - optionalTasks . shutdown ( ) ; 
 + ScheduledExecutors . optionalTasks . shutdown ( ) ; 
 Gossiper . instance . stop ( ) ; 
 
 setMode ( Mode . DRAINING , " shutting down MessageService " , false ) ; 
 @ @ - 3647 , 21 + 3629 , 19 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 FBUtilities . waitOnFutures ( flushes ) ; 
 
 - BatchlogManager . batchlogTasks . shutdown ( ) ; 
 - BatchlogManager . batchlogTasks . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 + BatchlogManager . shutdown ( ) ; 
 
 / / whilst we ' ve flushed all the CFs , which will have recycled all completed segments , we want to ensure 
 / / there are no segments to replay , so we force the recycling of any remaining ( should be at most one ) 
 CommitLog . instance . forceRecycleAllSegments ( ) ; 
 
 - ColumnFamilyStore . postFlushExecutor . shutdown ( ) ; 
 - ColumnFamilyStore . postFlushExecutor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 + ColumnFamilyStore . shutdownPostFlushExecutor ( ) ; 
 
 CommitLog . instance . shutdownBlocking ( ) ; 
 
 / / wait for miscellaneous tasks like sstable and commitlog segment deletion 
 - tasks . shutdown ( ) ; 
 - if ( ! tasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 + ScheduledExecutors . nonPeriodicTasks . shutdown ( ) ; 
 + if ( ! ScheduledExecutors . nonPeriodicTasks . awaitTermination ( 1 , TimeUnit . MINUTES ) ) 
 logger . warn ( " Miscellaneous task executor still busy after one minute ; proceeding with shutdown " ) ; 
 
 setMode ( Mode . DRAINED , true ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / ResourceWatcher . java b / src / java / org / apache / cassandra / utils / ResourceWatcher . java 
 index 2dfab95 . . 5e7cbdd 100644 
 - - - a / src / java / org / apache / cassandra / utils / ResourceWatcher . java 
 + + + b / src / java / org / apache / cassandra / utils / ResourceWatcher . java 
 @ @ - 23 , 13 + 23 , 13 @ @ import java . util . concurrent . TimeUnit ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 
 public class ResourceWatcher 
 { 
 public static void watch ( String resource , Runnable callback , int period ) 
 { 
 - StorageService . scheduledTasks . scheduleWithFixedDelay ( new WatchedResource ( resource , callback ) , period , period , TimeUnit . MILLISECONDS ) ; 
 + ScheduledExecutors . scheduledTasks . scheduleWithFixedDelay ( new WatchedResource ( resource , callback ) , period , period , TimeUnit . MILLISECONDS ) ; 
 } 
 
 public static class WatchedResource implements Runnable 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 470b701 . . dd22896 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . Directories ; 
 @ @ - 43 , 7 + 44 , 6 @ @ import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 - import org . apache . cassandra . service . StorageService ; 
 
 / * * 
 * Base class for CQL tests . 
 @ @ - 88 , 7 + 88 , 7 @ @ public abstract class CQLTester 
 currentTypes . clear ( ) ; 
 
 / / We want to clean up after the test , but dropping a table is rather long so just do that asynchronously 
 - StorageService . optionalTasks . execute ( new Runnable ( ) 
 + ScheduledExecutors . optionalTasks . execute ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 @ @ - 105 , 7 + 105 , 7 @ @ public abstract class CQLTester 
 / / mono - threaded , just push a task on the queue to find when it ' s empty . No perfect but good enough . 
 
 final CountDownLatch latch = new CountDownLatch ( 1 ) ; 
 - StorageService . tasks . execute ( new Runnable ( ) 
 + ScheduledExecutors . nonPeriodicTasks . execute ( new Runnable ( ) 
 { 
 public void run ( ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / KeyCacheTest . java b / test / unit / org / apache / cassandra / db / KeyCacheTest . java 
 index c0560ab . . 1bc7caf 100644 
 - - - a / test / unit / org / apache / cassandra / db / KeyCacheTest . java 
 + + + b / test / unit / org / apache / cassandra / db / KeyCacheTest . java 
 @ @ - 17 , 7 + 17 , 6 @ @ 
 * / 
 package org . apache . cassandra . db ; 
 
 - import java . nio . file . Files ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Set ; 
 @ @ - 31 , 12 + 30 , 12 @ @ import org . junit . Test ; 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . cache . KeyCacheKey ; 
 + import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . db . composites . * ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . service . CacheService ; 
 - import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 import static org . junit . Assert . assertEquals ; 
 @ @ - 165 , 7 + 164 , 7 @ @ public class KeyCacheTest extends SchemaLoader 
 reader . releaseReference ( ) ; 
 
 Uninterruptibles . sleepUninterruptibly ( 10 , TimeUnit . MILLISECONDS ) ; ; 
 - while ( StorageService . tasks . getActiveCount ( ) + StorageService . tasks . getQueue ( ) . size ( ) > 0 ) ; 
 + while ( ScheduledExecutors . nonPeriodicTasks . getActiveCount ( ) + ScheduledExecutors . nonPeriodicTasks . getQueue ( ) . size ( ) > 0 ) ; 
 
 / / after releasing the reference this should drop to 2 
 assertKeyCacheSize ( 2 , KEYSPACE1 , COLUMN _ FAMILY1 ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
