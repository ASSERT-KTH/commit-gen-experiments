BLEU SCORE: 0.007228376004244835

TEST MSG: Ninja trivial typo in TESTING
GENERATED MSG: hack to allow OpenJDK to run w / o javaagent ( otherwise it segfaults )

TEST DIFF (one line): diff - - git a / TESTING . md b / TESTING . md <nl> index de0c34a . . b6e27aa 100644 <nl> - - - a / TESTING . md <nl> + + + b / TESTING . md <nl> @ @ - 1 , 7 + 1 , 7 @ @ <nl> The goal of this document is to establish guidelines on writing tests that drive incremental improvement of the test coverage and testability of <nl> Cassandra , without overly burdening day to day work . While not every point here will be immediately practical to implement or relevant for every <nl> contribution , it errs on the side of not making rules out of potential exceptions . It provides guidelines on test scope , style , and goals , as <nl> - weel as guidelines for dealing with global state and refactoring untested code . <nl> + well as guidelines for dealing with global state and refactoring untested code . <nl> <nl> # # What to Test <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 50669c3 . . 6e45df5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1232 , 15 + 1232 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = null ; <nl> - try <nl> - { <nl> - cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new IOError ( e ) ; <nl> - } <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> filter . collectCollatedColumns ( cf , ci , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> @ @ - 1302 , 10 + 1294 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / / and " there used to be data , but it ' s gone now " ( we should cache the empty CF so we don ' t need to rebuild that slower ) <nl> return returnCF ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new IOError ( e ) ; <nl> - } <nl> finally <nl> { <nl> / * close all cursors * / <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java <nl> index dc68a99 . . 5764b43 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java <nl> @ @ - 118 , 14 + 118 , 7 @ @ public class RowIteratorFactory <nl> { <nl> this . colIters . add ( current ) ; <nl> this . key = current . getKey ( ) ; <nl> - try <nl> - { <nl> - this . returnCF . delete ( current . getColumnFamily ( ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new IOError ( e ) ; <nl> - } <nl> + this . returnCF . delete ( current . getColumnFamily ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java b / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java <nl> index 09818db . . a0d93ca 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java <nl> @ @ - 31 , 14 + 31 , 9 @ @ import org . apache . cassandra . db . IColumn ; <nl> public interface IColumnIterator extends Iterator < IColumn > <nl> { <nl> / * * <nl> - * returns the CF of the column being iterated . <nl> - * Do not modify the returned CF ; clone first . <nl> - * This is guaranteed to be non - null and that the returned CF have the correct metadata <nl> - * ( markedForDeleteAt and localDeletionTime ) . The full CF is however only guaranteed to <nl> - * be available after a call to next ( ) or hasNext ( ) . <nl> - * @ throws IOException <nl> + * @ return An empty CF holding metadata for the row being iterated . <nl> * / <nl> - public abstract ColumnFamily getColumnFamily ( ) throws IOException ; <nl> + public abstract ColumnFamily getColumnFamily ( ) ; <nl> <nl> / * * <nl> * @ return the current row key <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> index fe86a4c . . 9c59741 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java <nl> @ @ - 98 , 7 + 98 , 7 @ @ public class SSTableSliceIterator implements IColumnIterator <nl> return key ; <nl> } <nl> <nl> - public ColumnFamily getColumnFamily ( ) throws IOException <nl> + public ColumnFamily getColumnFamily ( ) <nl> { <nl> return reader = = null ? null : reader . getColumnFamily ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> index ebebc87 . . 2feab42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ class SimpleSliceReader extends AbstractIterator < IColumn > implements IColumnIter <nl> return column ; <nl> } <nl> <nl> - public ColumnFamily getColumnFamily ( ) throws IOException <nl> + public ColumnFamily getColumnFamily ( ) <nl> { <nl> return emptyColumnFamily ; <nl> }

TEST DIFF:
diff - - git a / TESTING . md b / TESTING . md 
 index de0c34a . . b6e27aa 100644 
 - - - a / TESTING . md 
 + + + b / TESTING . md 
 @ @ - 1 , 7 + 1 , 7 @ @ 
 The goal of this document is to establish guidelines on writing tests that drive incremental improvement of the test coverage and testability of 
 Cassandra , without overly burdening day to day work . While not every point here will be immediately practical to implement or relevant for every 
 contribution , it errs on the side of not making rules out of potential exceptions . It provides guidelines on test scope , style , and goals , as 
 - weel as guidelines for dealing with global state and refactoring untested code . 
 + well as guidelines for dealing with global state and refactoring untested code . 
 
 # # What to Test 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 50669c3 . . 6e45df5 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1232 , 15 + 1232 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = null ; 
 - try 
 - { 
 - cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new IOError ( e ) ; 
 - } 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 filter . collectCollatedColumns ( cf , ci , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 @ @ - 1302 , 10 + 1294 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / / and " there used to be data , but it ' s gone now " ( we should cache the empty CF so we don ' t need to rebuild that slower ) 
 return returnCF ; 
 } 
 - catch ( IOException e ) 
 - { 
 - throw new IOError ( e ) ; 
 - } 
 finally 
 { 
 / * close all cursors * / 
 diff - - git a / src / java / org / apache / cassandra / db / RowIteratorFactory . java b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 index dc68a99 . . 5764b43 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 + + + b / src / java / org / apache / cassandra / db / RowIteratorFactory . java 
 @ @ - 118 , 14 + 118 , 7 @ @ public class RowIteratorFactory 
 { 
 this . colIters . add ( current ) ; 
 this . key = current . getKey ( ) ; 
 - try 
 - { 
 - this . returnCF . delete ( current . getColumnFamily ( ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new IOError ( e ) ; 
 - } 
 + this . returnCF . delete ( current . getColumnFamily ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java b / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java 
 index 09818db . . a0d93ca 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / IColumnIterator . java 
 @ @ - 31 , 14 + 31 , 9 @ @ import org . apache . cassandra . db . IColumn ; 
 public interface IColumnIterator extends Iterator < IColumn > 
 { 
 / * * 
 - * returns the CF of the column being iterated . 
 - * Do not modify the returned CF ; clone first . 
 - * This is guaranteed to be non - null and that the returned CF have the correct metadata 
 - * ( markedForDeleteAt and localDeletionTime ) . The full CF is however only guaranteed to 
 - * be available after a call to next ( ) or hasNext ( ) . 
 - * @ throws IOException 
 + * @ return An empty CF holding metadata for the row being iterated . 
 * / 
 - public abstract ColumnFamily getColumnFamily ( ) throws IOException ; 
 + public abstract ColumnFamily getColumnFamily ( ) ; 
 
 / * * 
 * @ return the current row key 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 index fe86a4c . . 9c59741 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableSliceIterator . java 
 @ @ - 98 , 7 + 98 , 7 @ @ public class SSTableSliceIterator implements IColumnIterator 
 return key ; 
 } 
 
 - public ColumnFamily getColumnFamily ( ) throws IOException 
 + public ColumnFamily getColumnFamily ( ) 
 { 
 return reader = = null ? null : reader . getColumnFamily ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 index ebebc87 . . 2feab42 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SimpleSliceReader . java 
 @ @ - 89 , 7 + 89 , 7 @ @ class SimpleSliceReader extends AbstractIterator < IColumn > implements IColumnIter 
 return column ; 
 } 
 
 - public ColumnFamily getColumnFamily ( ) throws IOException 
 + public ColumnFamily getColumnFamily ( ) 
 { 
 return emptyColumnFamily ; 
 }
