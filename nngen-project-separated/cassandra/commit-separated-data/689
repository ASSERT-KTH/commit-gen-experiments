BLEU SCORE: 0.026341919627252283

TEST MSG: Debug logging for unit tests
GENERATED MSG: move connecting into OutboundTcpConnection so write does not block for connection startup

TEST DIFF (one line): diff - - git a / test / conf / logback - test . xml b / test / conf / logback - test . xml <nl> index abedc32 . . 21c7142 100644 <nl> - - - a / test / conf / logback - test . xml <nl> + + + b / test / conf / logback - test . xml <nl> @ @ - 68 , 7 + 68 , 7 @ @ <nl> < appender - ref ref = " TEE " / > <nl> < / appender > <nl> <nl> - < root level = " INFO " > <nl> + < root level = " DEBUG " > <nl> < appender - ref ref = " ASYNC " / > <nl> < / root > <nl> < / configuration > <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index c9c4631 . . 7f5eb02 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 707 , 8 + 707 , 8 @ @ public abstract class CQLTester <nl> UntypedResultSet rs ; <nl> if ( usePrepared ) <nl> { <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Executing : { } with values { } " , query , formatAllValues ( values ) ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Executing : { } with values { } " , query , formatAllValues ( values ) ) ; <nl> if ( reusePrepared ) <nl> { <nl> rs = QueryProcessor . executeInternal ( query , transformValues ( values ) ) ; <nl> @ @ - 728 , 14 + 728 , 14 @ @ public abstract class CQLTester <nl> else <nl> { <nl> query = replaceValues ( query , values ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Executing : { } " , query ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Executing : { } " , query ) ; <nl> rs = QueryProcessor . executeOnceInternal ( query ) ; <nl> } <nl> if ( rs ! = null ) <nl> { <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " Got { } rows " , rs . size ( ) ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Got { } rows " , rs . size ( ) ) ; <nl> } <nl> return rs ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index ceb0724 . . 47b5ccc 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 293 , 10 + 293 , 7 @ @ public class MessagingService implements IFailureDetectionEventListener <nl> } <nl> <nl> / / get pooled connection ( really , connection queue ) <nl> - OutboundTcpConnection connection = null ; <nl> - connection = getConnection ( to , message ) ; <nl> - if ( connection = = null ) <nl> - return ; <nl> + OutboundTcpConnection connection = getConnection ( to , message ) ; <nl> <nl> / / pack message with header in a bytebuffer <nl> byte [ ] data ; <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index 64af056 . . d7ac4d3 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 1 , 11 + 1 , 9 @ @ <nl> package org . apache . cassandra . net ; <nl> <nl> import java . io . DataOutputStream ; <nl> - import java . io . IOError ; <nl> import java . io . IOException ; <nl> import java . net . InetAddress ; <nl> import java . net . Socket ; <nl> - import java . net . SocketException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . concurrent . BlockingQueue ; <nl> import java . util . concurrent . LinkedBlockingQueue ; <nl> @ @ - 13 , 58 + 11 , 25 @ @ import java . util . concurrent . LinkedBlockingQueue ; <nl> import org . apache . log4j . Logger ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> - public class OutboundTcpConnection <nl> + public class OutboundTcpConnection extends Thread <nl> { <nl> - private static Logger logger = Logger . getLogger ( OutboundTcpConnection . class ) ; <nl> + private static final Logger logger = Logger . getLogger ( OutboundTcpConnection . class ) ; <nl> <nl> - public BlockingQueue < ByteBuffer > queue = new LinkedBlockingQueue < ByteBuffer > ( ) ; <nl> - public DataOutputStream output ; <nl> - public Socket socket ; <nl> + private static final ByteBuffer CLOSE _ SENTINEL = ByteBuffer . allocate ( 0 ) ; <nl> + private static final int OPEN _ RETRY _ DELAY = 100 ; / / ms between retries <nl> + <nl> + private final OutboundTcpConnectionPool pool ; <nl> + private final InetAddress endpoint ; <nl> + private final BlockingQueue < ByteBuffer > queue = new LinkedBlockingQueue < ByteBuffer > ( ) ; <nl> + private DataOutputStream output ; <nl> + private Socket socket ; <nl> <nl> public OutboundTcpConnection ( final OutboundTcpConnectionPool pool , final InetAddress remoteEp ) <nl> - throws IOException <nl> { <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " attempting to connect to " + remoteEp ) ; <nl> - <nl> - socket = new Socket ( remoteEp , DatabaseDescriptor . getStoragePort ( ) ) ; <nl> - socket . setTcpNoDelay ( true ) ; <nl> - output = new DataOutputStream ( socket . getOutputStream ( ) ) ; <nl> - <nl> - new Thread ( new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - while ( socket ! = null ) <nl> - { <nl> - ByteBuffer bb ; <nl> - try <nl> - { <nl> - bb = queue . take ( ) ; <nl> - } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - throw new AssertionError ( e ) ; <nl> - } <nl> - try <nl> - { <nl> - output . write ( bb . array ( ) , 0 , bb . limit ( ) ) ; <nl> - if ( queue . peek ( ) = = null ) <nl> - { <nl> - output . flush ( ) ; <nl> - } <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - logger . info ( " error writing to " + remoteEp ) ; <nl> - pool . reset ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - } , " WRITE - " + remoteEp ) . start ( ) ; <nl> + super ( " WRITE - " + remoteEp ) ; <nl> + this . pool = pool ; <nl> + this . endpoint = remoteEp ; <nl> } <nl> <nl> public void write ( ByteBuffer buffer ) <nl> @ @ - 81 , 15 + 46 , 103 @ @ public class OutboundTcpConnection <nl> <nl> public void closeSocket ( ) <nl> { <nl> + queue . clear ( ) ; <nl> + write ( CLOSE _ SENTINEL ) ; <nl> + } <nl> + <nl> + public void run ( ) <nl> + { <nl> + while ( true ) <nl> + { <nl> + ByteBuffer bb = take ( ) ; <nl> + if ( bb = = CLOSE _ SENTINEL ) <nl> + { <nl> + disconnect ( ) ; <nl> + continue ; <nl> + } <nl> + if ( socket ! = null | | connect ( ) ) <nl> + writeConnected ( bb ) ; <nl> + } <nl> + } <nl> + <nl> + private void writeConnected ( ByteBuffer bb ) <nl> + { <nl> try <nl> { <nl> - socket . close ( ) ; <nl> + output . write ( bb . array ( ) , 0 , bb . limit ( ) ) ; <nl> + if ( queue . peek ( ) = = null ) <nl> + { <nl> + output . flush ( ) ; <nl> + } <nl> } <nl> catch ( IOException e ) <nl> { <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " error closing socket " , e ) ; <nl> + logger . info ( " error writing to " + endpoint ) ; <nl> + disconnect ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void disconnect ( ) <nl> + { <nl> + if ( socket ! = null ) <nl> + { <nl> + try <nl> + { <nl> + socket . close ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " exception closing connection to " + endpoint , e ) ; <nl> + } <nl> + output = null ; <nl> + socket = null ; <nl> + } <nl> + } <nl> + <nl> + private ByteBuffer take ( ) <nl> + { <nl> + ByteBuffer bb ; <nl> + try <nl> + { <nl> + bb = queue . take ( ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + return bb ; <nl> + } <nl> + <nl> + private boolean connect ( ) <nl> + { <nl> + if ( logger . isDebugEnabled ( ) ) <nl> + logger . debug ( " attempting to connect to " + endpoint ) ; <nl> + long start = System . currentTimeMillis ( ) ; <nl> + while ( System . currentTimeMillis ( ) < start + DatabaseDescriptor . getRpcTimeout ( ) ) <nl> + { <nl> + try <nl> + { <nl> + socket = new Socket ( endpoint , DatabaseDescriptor . getStoragePort ( ) ) ; <nl> + socket . setTcpNoDelay ( true ) ; <nl> + output = new DataOutputStream ( socket . getOutputStream ( ) ) ; <nl> + return true ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + socket = null ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " unable to connect to " + endpoint , e ) ; <nl> + try <nl> + { <nl> + Thread . sleep ( OPEN _ RETRY _ DELAY ) ; <nl> + } <nl> + catch ( InterruptedException e1 ) <nl> + { <nl> + throw new AssertionError ( e1 ) ; <nl> + } <nl> + } <nl> } <nl> - socket = null ; <nl> + return false ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java <nl> index 2902c0c . . 1878a3f 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java <nl> @ @ - 27 , 14 + 27 , 9 @ @ import org . apache . cassandra . concurrent . StageManager ; <nl> <nl> class OutboundTcpConnectionPool <nl> { <nl> - private static Logger logger = Logger . getLogger ( OutboundTcpConnectionPool . class ) ; <nl> - <nl> - private final int OPEN _ RETRY _ DELAY = 100 ; / / ms between retries <nl> - <nl> private InetAddress remoteEp _ ; <nl> private OutboundTcpConnection cmdCon ; <nl> private OutboundTcpConnection ackCon ; <nl> - private long lastFailedAttempt = Long . MIN _ VALUE ; <nl> <nl> OutboundTcpConnectionPool ( InetAddress remoteEp ) <nl> { <nl> @ @ - 52 , 18 + 47 , 8 @ @ class OutboundTcpConnectionPool <nl> { <nl> if ( ackCon = = null ) <nl> { <nl> - if ( System . currentTimeMillis ( ) < lastFailedAttempt + OPEN _ RETRY _ DELAY ) <nl> - return null ; <nl> - try <nl> - { <nl> - ackCon = new OutboundTcpConnection ( this , remoteEp _ ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - lastFailedAttempt = System . currentTimeMillis ( ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " unable to connect to " + remoteEp _ , e ) ; <nl> - } <nl> + ackCon = new OutboundTcpConnection ( this , remoteEp _ ) ; <nl> + ackCon . start ( ) ; <nl> } <nl> return ackCon ; <nl> } <nl> @ @ - 71 , 18 + 56 , 8 @ @ class OutboundTcpConnectionPool <nl> { <nl> if ( cmdCon = = null ) <nl> { <nl> - if ( System . currentTimeMillis ( ) < lastFailedAttempt + OPEN _ RETRY _ DELAY ) <nl> - return null ; <nl> - try <nl> - { <nl> - cmdCon = new OutboundTcpConnection ( this , remoteEp _ ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - lastFailedAttempt = System . currentTimeMillis ( ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " unable to connect to " + remoteEp _ , e ) ; <nl> - } <nl> + cmdCon = new OutboundTcpConnection ( this , remoteEp _ ) ; <nl> + cmdCon . start ( ) ; <nl> } <nl> return cmdCon ; <nl> } <nl> @ @ - 93 , 7 + 68 , 5 @ @ class OutboundTcpConnectionPool <nl> for ( OutboundTcpConnection con : new OutboundTcpConnection [ ] { cmdCon , ackCon } ) <nl> if ( con ! = null ) <nl> con . closeSocket ( ) ; <nl> - cmdCon = null ; <nl> - ackCon = null ; <nl> } <nl> }

TEST DIFF:
diff - - git a / test / conf / logback - test . xml b / test / conf / logback - test . xml 
 index abedc32 . . 21c7142 100644 
 - - - a / test / conf / logback - test . xml 
 + + + b / test / conf / logback - test . xml 
 @ @ - 68 , 7 + 68 , 7 @ @ 
 < appender - ref ref = " TEE " / > 
 < / appender > 
 
 - < root level = " INFO " > 
 + < root level = " DEBUG " > 
 < appender - ref ref = " ASYNC " / > 
 < / root > 
 < / configuration > 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index c9c4631 . . 7f5eb02 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 707 , 8 + 707 , 8 @ @ public abstract class CQLTester 
 UntypedResultSet rs ; 
 if ( usePrepared ) 
 { 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Executing : { } with values { } " , query , formatAllValues ( values ) ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Executing : { } with values { } " , query , formatAllValues ( values ) ) ; 
 if ( reusePrepared ) 
 { 
 rs = QueryProcessor . executeInternal ( query , transformValues ( values ) ) ; 
 @ @ - 728 , 14 + 728 , 14 @ @ public abstract class CQLTester 
 else 
 { 
 query = replaceValues ( query , values ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Executing : { } " , query ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Executing : { } " , query ) ; 
 rs = QueryProcessor . executeOnceInternal ( query ) ; 
 } 
 if ( rs ! = null ) 
 { 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " Got { } rows " , rs . size ( ) ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Got { } rows " , rs . size ( ) ) ; 
 } 
 return rs ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index ceb0724 . . 47b5ccc 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 293 , 10 + 293 , 7 @ @ public class MessagingService implements IFailureDetectionEventListener 
 } 
 
 / / get pooled connection ( really , connection queue ) 
 - OutboundTcpConnection connection = null ; 
 - connection = getConnection ( to , message ) ; 
 - if ( connection = = null ) 
 - return ; 
 + OutboundTcpConnection connection = getConnection ( to , message ) ; 
 
 / / pack message with header in a bytebuffer 
 byte [ ] data ; 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index 64af056 . . d7ac4d3 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 1 , 11 + 1 , 9 @ @ 
 package org . apache . cassandra . net ; 
 
 import java . io . DataOutputStream ; 
 - import java . io . IOError ; 
 import java . io . IOException ; 
 import java . net . InetAddress ; 
 import java . net . Socket ; 
 - import java . net . SocketException ; 
 import java . nio . ByteBuffer ; 
 import java . util . concurrent . BlockingQueue ; 
 import java . util . concurrent . LinkedBlockingQueue ; 
 @ @ - 13 , 58 + 11 , 25 @ @ import java . util . concurrent . LinkedBlockingQueue ; 
 import org . apache . log4j . Logger ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 - public class OutboundTcpConnection 
 + public class OutboundTcpConnection extends Thread 
 { 
 - private static Logger logger = Logger . getLogger ( OutboundTcpConnection . class ) ; 
 + private static final Logger logger = Logger . getLogger ( OutboundTcpConnection . class ) ; 
 
 - public BlockingQueue < ByteBuffer > queue = new LinkedBlockingQueue < ByteBuffer > ( ) ; 
 - public DataOutputStream output ; 
 - public Socket socket ; 
 + private static final ByteBuffer CLOSE _ SENTINEL = ByteBuffer . allocate ( 0 ) ; 
 + private static final int OPEN _ RETRY _ DELAY = 100 ; / / ms between retries 
 + 
 + private final OutboundTcpConnectionPool pool ; 
 + private final InetAddress endpoint ; 
 + private final BlockingQueue < ByteBuffer > queue = new LinkedBlockingQueue < ByteBuffer > ( ) ; 
 + private DataOutputStream output ; 
 + private Socket socket ; 
 
 public OutboundTcpConnection ( final OutboundTcpConnectionPool pool , final InetAddress remoteEp ) 
 - throws IOException 
 { 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " attempting to connect to " + remoteEp ) ; 
 - 
 - socket = new Socket ( remoteEp , DatabaseDescriptor . getStoragePort ( ) ) ; 
 - socket . setTcpNoDelay ( true ) ; 
 - output = new DataOutputStream ( socket . getOutputStream ( ) ) ; 
 - 
 - new Thread ( new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - while ( socket ! = null ) 
 - { 
 - ByteBuffer bb ; 
 - try 
 - { 
 - bb = queue . take ( ) ; 
 - } 
 - catch ( InterruptedException e ) 
 - { 
 - throw new AssertionError ( e ) ; 
 - } 
 - try 
 - { 
 - output . write ( bb . array ( ) , 0 , bb . limit ( ) ) ; 
 - if ( queue . peek ( ) = = null ) 
 - { 
 - output . flush ( ) ; 
 - } 
 - } 
 - catch ( IOException e ) 
 - { 
 - logger . info ( " error writing to " + remoteEp ) ; 
 - pool . reset ( ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - } , " WRITE - " + remoteEp ) . start ( ) ; 
 + super ( " WRITE - " + remoteEp ) ; 
 + this . pool = pool ; 
 + this . endpoint = remoteEp ; 
 } 
 
 public void write ( ByteBuffer buffer ) 
 @ @ - 81 , 15 + 46 , 103 @ @ public class OutboundTcpConnection 
 
 public void closeSocket ( ) 
 { 
 + queue . clear ( ) ; 
 + write ( CLOSE _ SENTINEL ) ; 
 + } 
 + 
 + public void run ( ) 
 + { 
 + while ( true ) 
 + { 
 + ByteBuffer bb = take ( ) ; 
 + if ( bb = = CLOSE _ SENTINEL ) 
 + { 
 + disconnect ( ) ; 
 + continue ; 
 + } 
 + if ( socket ! = null | | connect ( ) ) 
 + writeConnected ( bb ) ; 
 + } 
 + } 
 + 
 + private void writeConnected ( ByteBuffer bb ) 
 + { 
 try 
 { 
 - socket . close ( ) ; 
 + output . write ( bb . array ( ) , 0 , bb . limit ( ) ) ; 
 + if ( queue . peek ( ) = = null ) 
 + { 
 + output . flush ( ) ; 
 + } 
 } 
 catch ( IOException e ) 
 { 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " error closing socket " , e ) ; 
 + logger . info ( " error writing to " + endpoint ) ; 
 + disconnect ( ) ; 
 + } 
 + } 
 + 
 + private void disconnect ( ) 
 + { 
 + if ( socket ! = null ) 
 + { 
 + try 
 + { 
 + socket . close ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " exception closing connection to " + endpoint , e ) ; 
 + } 
 + output = null ; 
 + socket = null ; 
 + } 
 + } 
 + 
 + private ByteBuffer take ( ) 
 + { 
 + ByteBuffer bb ; 
 + try 
 + { 
 + bb = queue . take ( ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + return bb ; 
 + } 
 + 
 + private boolean connect ( ) 
 + { 
 + if ( logger . isDebugEnabled ( ) ) 
 + logger . debug ( " attempting to connect to " + endpoint ) ; 
 + long start = System . currentTimeMillis ( ) ; 
 + while ( System . currentTimeMillis ( ) < start + DatabaseDescriptor . getRpcTimeout ( ) ) 
 + { 
 + try 
 + { 
 + socket = new Socket ( endpoint , DatabaseDescriptor . getStoragePort ( ) ) ; 
 + socket . setTcpNoDelay ( true ) ; 
 + output = new DataOutputStream ( socket . getOutputStream ( ) ) ; 
 + return true ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + socket = null ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " unable to connect to " + endpoint , e ) ; 
 + try 
 + { 
 + Thread . sleep ( OPEN _ RETRY _ DELAY ) ; 
 + } 
 + catch ( InterruptedException e1 ) 
 + { 
 + throw new AssertionError ( e1 ) ; 
 + } 
 + } 
 } 
 - socket = null ; 
 + return false ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java 
 index 2902c0c . . 1878a3f 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnectionPool . java 
 @ @ - 27 , 14 + 27 , 9 @ @ import org . apache . cassandra . concurrent . StageManager ; 
 
 class OutboundTcpConnectionPool 
 { 
 - private static Logger logger = Logger . getLogger ( OutboundTcpConnectionPool . class ) ; 
 - 
 - private final int OPEN _ RETRY _ DELAY = 100 ; / / ms between retries 
 - 
 private InetAddress remoteEp _ ; 
 private OutboundTcpConnection cmdCon ; 
 private OutboundTcpConnection ackCon ; 
 - private long lastFailedAttempt = Long . MIN _ VALUE ; 
 
 OutboundTcpConnectionPool ( InetAddress remoteEp ) 
 { 
 @ @ - 52 , 18 + 47 , 8 @ @ class OutboundTcpConnectionPool 
 { 
 if ( ackCon = = null ) 
 { 
 - if ( System . currentTimeMillis ( ) < lastFailedAttempt + OPEN _ RETRY _ DELAY ) 
 - return null ; 
 - try 
 - { 
 - ackCon = new OutboundTcpConnection ( this , remoteEp _ ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - lastFailedAttempt = System . currentTimeMillis ( ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " unable to connect to " + remoteEp _ , e ) ; 
 - } 
 + ackCon = new OutboundTcpConnection ( this , remoteEp _ ) ; 
 + ackCon . start ( ) ; 
 } 
 return ackCon ; 
 } 
 @ @ - 71 , 18 + 56 , 8 @ @ class OutboundTcpConnectionPool 
 { 
 if ( cmdCon = = null ) 
 { 
 - if ( System . currentTimeMillis ( ) < lastFailedAttempt + OPEN _ RETRY _ DELAY ) 
 - return null ; 
 - try 
 - { 
 - cmdCon = new OutboundTcpConnection ( this , remoteEp _ ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - lastFailedAttempt = System . currentTimeMillis ( ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " unable to connect to " + remoteEp _ , e ) ; 
 - } 
 + cmdCon = new OutboundTcpConnection ( this , remoteEp _ ) ; 
 + cmdCon . start ( ) ; 
 } 
 return cmdCon ; 
 } 
 @ @ - 93 , 7 + 68 , 5 @ @ class OutboundTcpConnectionPool 
 for ( OutboundTcpConnection con : new OutboundTcpConnection [ ] { cmdCon , ackCon } ) 
 if ( con ! = null ) 
 con . closeSocket ( ) ; 
 - cmdCon = null ; 
 - ackCon = null ; 
 } 
 }
