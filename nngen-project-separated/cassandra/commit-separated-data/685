BLEU SCORE: 0.020980574531482755

TEST MSG: FOLLOW - UP OF Let DatabaseDescriptor not implicitly startup services
GENERATED MSG: merge from 0 . 6

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / auth / AuthConfig . java b / src / java / org / apache / cassandra / auth / AuthConfig . java <nl> index c3dd9a9 . . c389ae4 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthConfig . java <nl> + + + b / src / java / org / apache / cassandra / auth / AuthConfig . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> - * Only purpose is to Initialize authentication / authorization via { @ link # applyAuthz ( ) } . <nl> + * Only purpose is to Initialize authentication / authorization via { @ link # applyAuth ( ) } . <nl> * This is in this separate class as it implicitly initializes schema stuff ( via classes referenced in here ) . <nl> * / <nl> public final class AuthConfig <nl> @ @ - 36 , 7 + 36 , 7 @ @ public final class AuthConfig <nl> <nl> private static boolean initialized ; <nl> <nl> - public static void applyAuthz ( ) <nl> + public static void applyAuth ( ) <nl> { <nl> / / some tests need this <nl> if ( initialized ) <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index f9d0498 . . 8b33242 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class DatabaseDescriptor <nl> <nl> setConfig ( loadConfig ( ) ) ; <nl> applyAll ( ) ; <nl> - AuthConfig . applyAuthz ( ) ; <nl> + AuthConfig . applyAuth ( ) ; <nl> } <nl> <nl> public static void toolInitialization ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index d18fc82 . . 4cbac41 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 46 , 11 + 46 , 6 @ @ import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> - import com . addthis . metrics3 . reporter . config . ReporterConfig ; <nl> - import com . codahale . metrics . Meter ; <nl> - import com . codahale . metrics . MetricRegistryListener ; <nl> - import com . codahale . metrics . SharedMetricRegistries ; <nl> - import org . apache . cassandra . auth . AuthConfig ; <nl> import org . apache . cassandra . batchlog . LegacyBatchlogMigrator ; <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 643 , 7 + 638 , 6 @ @ public class CassandraDaemon <nl> public void applyConfig ( ) <nl> { <nl> DatabaseDescriptor . daemonInitialization ( ) ; <nl> - AuthConfig . applyAuthz ( ) ; <nl> } <nl> <nl> public void startNativeTransport ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> index 02edf3a . . 56409c4 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> @ @ - 57 , 7 + 57 , 6 @ @ public class CQLSSTableWriterTest <nl> static <nl> { <nl> DatabaseDescriptor . daemonInitialization ( ) ; <nl> - AuthConfig . applyAuthz ( ) ; <nl> } <nl> <nl> @ BeforeClass
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8d9e2ea . . c97b17f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 7 + 1 , 10 @ @ <nl> dev <nl> * sstable versioning ( CASSANDRA - 389 ) <nl> <nl> - 0 . 6 . 0 - dev <nl> + 0 . 6 . 0 - RC1 <nl> + * fix compaction bucketing bug ( CASSANDRA - 814 ) <nl> + <nl> + 0 . 6 . 0 - beta1 / beta2 <nl> * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) <nl> * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) <nl> * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) <nl> @ @ - 42 , 7 + 45 , 9 @ @ dev <nl> * allow larger numbers of keys ( > 140M ) in a sstable bloom filter <nl> ( CASSANDRA - 790 ) <nl> * include jvm argument improvements from CASSANDRA - 504 in debian package <nl> - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * change streaming chunk size to 32MB to accomodate Windows XP limitations <nl> + ( was 64MB ) ( CASSANDRA - 795 ) <nl> + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) <nl> <nl> <nl> 0 . 5 . 0 final <nl> diff - - git a / build . xml b / build . xml <nl> index ea79876 . . 54ef12d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 314 , 6 + 314 , 7 @ @ <nl> < include name = " * * " / > <nl> < exclude name = " build / * * " / > <nl> < exclude name = " src / gen - java / * * " / > <nl> + < exclude name = " interface / avro / * * " / > <nl> < / tarfileset > <nl> < / tar > <nl> < / target > <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index fbd5ebb . . 1b5b6b1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return 0 ; <nl> } <nl> logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; <nl> - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> <nl> for ( List < SSTableReader > sstables : buckets ) <nl> @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> / * <nl> * Group files of similar size into buckets . <nl> * / <nl> - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) <nl> + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) <nl> { <nl> Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; <nl> for ( SSTableReader sstable : files ) <nl> @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> / / remove and re - add because adding changes the hash <nl> buckets . remove ( bucket ) ; <nl> - averageSize = ( averageSize + size ) / 2 ; <nl> + long totalSize = bucket . size ( ) * averageSize ; <nl> + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; <nl> bucket . add ( sstable ) ; <nl> buckets . put ( bucket , averageSize ) ; <nl> bFound = true ; <nl> @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> public void run ( ) <nl> { <nl> logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; <nl> - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; <nl> updateEstimateFor ( cfs , buckets ) ; <nl> } <nl> } ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / auth / AuthConfig . java b / src / java / org / apache / cassandra / auth / AuthConfig . java 
 index c3dd9a9 . . c389ae4 100644 
 - - - a / src / java / org / apache / cassandra / auth / AuthConfig . java 
 + + + b / src / java / org / apache / cassandra / auth / AuthConfig . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 - * Only purpose is to Initialize authentication / authorization via { @ link # applyAuthz ( ) } . 
 + * Only purpose is to Initialize authentication / authorization via { @ link # applyAuth ( ) } . 
 * This is in this separate class as it implicitly initializes schema stuff ( via classes referenced in here ) . 
 * / 
 public final class AuthConfig 
 @ @ - 36 , 7 + 36 , 7 @ @ public final class AuthConfig 
 
 private static boolean initialized ; 
 
 - public static void applyAuthz ( ) 
 + public static void applyAuth ( ) 
 { 
 / / some tests need this 
 if ( initialized ) 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index f9d0498 . . 8b33242 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 128 , 7 + 128 , 7 @ @ public class DatabaseDescriptor 
 
 setConfig ( loadConfig ( ) ) ; 
 applyAll ( ) ; 
 - AuthConfig . applyAuthz ( ) ; 
 + AuthConfig . applyAuth ( ) ; 
 } 
 
 public static void toolInitialization ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index d18fc82 . . 4cbac41 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 46 , 11 + 46 , 6 @ @ import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 - import com . addthis . metrics3 . reporter . config . ReporterConfig ; 
 - import com . codahale . metrics . Meter ; 
 - import com . codahale . metrics . MetricRegistryListener ; 
 - import com . codahale . metrics . SharedMetricRegistries ; 
 - import org . apache . cassandra . auth . AuthConfig ; 
 import org . apache . cassandra . batchlog . LegacyBatchlogMigrator ; 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 643 , 7 + 638 , 6 @ @ public class CassandraDaemon 
 public void applyConfig ( ) 
 { 
 DatabaseDescriptor . daemonInitialization ( ) ; 
 - AuthConfig . applyAuthz ( ) ; 
 } 
 
 public void startNativeTransport ( ) 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 index 02edf3a . . 56409c4 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 @ @ - 57 , 7 + 57 , 6 @ @ public class CQLSSTableWriterTest 
 static 
 { 
 DatabaseDescriptor . daemonInitialization ( ) ; 
 - AuthConfig . applyAuthz ( ) ; 
 } 
 
 @ BeforeClass

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8d9e2ea . . c97b17f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 7 + 1 , 10 @ @ 
 dev 
 * sstable versioning ( CASSANDRA - 389 ) 
 
 - 0 . 6 . 0 - dev 
 + 0 . 6 . 0 - RC1 
 + * fix compaction bucketing bug ( CASSANDRA - 814 ) 
 + 
 + 0 . 6 . 0 - beta1 / beta2 
 * add batch _ mutate thrift command , deprecating batch _ insert ( CASSANDRA - 336 ) 
 * remove get _ key _ range Thrift API , deprecated in 0 . 5 ( CASSANDRA - 710 ) 
 * add optional login ( ) Thrift call for authentication ( CASSANDRA - 547 ) 
 @ @ - 42 , 7 + 45 , 9 @ @ dev 
 * allow larger numbers of keys ( > 140M ) in a sstable bloom filter 
 ( CASSANDRA - 790 ) 
 * include jvm argument improvements from CASSANDRA - 504 in debian package 
 - * change streaming chunk size to 32MB ( was 64MB ) ( CASSANDRA - 795 ) 
 + * change streaming chunk size to 32MB to accomodate Windows XP limitations 
 + ( was 64MB ) ( CASSANDRA - 795 ) 
 + * fix get _ range _ slice returning results in the wrong order ( CASSANDRA - 781 ) 
 
 
 0 . 5 . 0 final 
 diff - - git a / build . xml b / build . xml 
 index ea79876 . . 54ef12d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 314 , 6 + 314 , 7 @ @ 
 < include name = " * * " / > 
 < exclude name = " build / * * " / > 
 < exclude name = " src / gen - java / * * " / > 
 + < exclude name = " interface / avro / * * " / > 
 < / tarfileset > 
 < / tar > 
 < / target > 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index fbd5ebb . . 1b5b6b1 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 return 0 ; 
 } 
 logger . debug ( " Checking to see if compaction of " + cfs . columnFamily _ + " would be useful " ) ; 
 - Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 
 for ( List < SSTableReader > sstables : buckets ) 
 @ @ - 441 , 7 + 441 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 / * 
 * Group files of similar size into buckets . 
 * / 
 - static Set < List < SSTableReader > > getCompactionBuckets ( Iterable < SSTableReader > files , long min ) 
 + static Set < List < SSTableReader > > getBuckets ( Iterable < SSTableReader > files , long min ) 
 { 
 Map < List < SSTableReader > , Long > buckets = new HashMap < List < SSTableReader > , Long > ( ) ; 
 for ( SSTableReader sstable : files ) 
 @ @ - 461 , 7 + 461 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 / / remove and re - add because adding changes the hash 
 buckets . remove ( bucket ) ; 
 - averageSize = ( averageSize + size ) / 2 ; 
 + long totalSize = bucket . size ( ) * averageSize ; 
 + averageSize = ( totalSize + size ) / ( bucket . size ( ) + 1 ) ; 
 bucket . add ( sstable ) ; 
 buckets . put ( bucket , averageSize ) ; 
 bFound = true ; 
 @ @ - 538 , 7 + 539 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 public void run ( ) 
 { 
 logger . debug ( " Estimating compactions for " + cfs . columnFamily _ ) ; 
 - final Set < List < SSTableReader > > buckets = getCompactionBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 + final Set < List < SSTableReader > > buckets = getBuckets ( cfs . getSSTables ( ) , 50L * 1024L * 1024L ) ; 
 updateEstimateFor ( cfs , buckets ) ; 
 } 
 } ;
