BLEU SCORE: 0.08116697886877475

TEST MSG: Handle host id conflicts properly .
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2920c15 . . d88bb26 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> * Add properties to adjust FD initial value and max interval ( CASSANDRA - 4375 ) <nl> * Fix preparing with batch and delete from collection ( CASSANDRA - 6607 ) <nl> * Fix ABSC reverse iterator ' s remove ( ) method ( CASSANDRA - 6629 ) <nl> + * Handle host ID conflicts properly ( CASSANDRA - 6615 ) <nl> <nl> <nl> 1 . 2 . 13 <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3ed6cba . . b51bbd3 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 596 , 7 + 596 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> { <nl> return false ; <nl> } <nl> - return ! isDeadState ( epState ) & & ! epState . isAlive ( ) & & ! StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ; <nl> + return ! isDeadState ( epState ) & & ! StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ; <nl> } <nl> <nl> private void doStatusCheck ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index ab266d8 . . c93ea5b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1453 , 6 + 1453 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> tokens = getTokensFor ( endpoint , pieces [ 1 ] ) ; <nl> <nl> + Set < Token > tokensToUpdateInMetadata = new HashSet < Token > ( ) ; <nl> + Set < Token > tokensToUpdateInSystemTable = new HashSet < Token > ( ) ; <nl> + Set < Token > localTokensToRemove = new HashSet < Token > ( ) ; <nl> + Set < InetAddress > endpointsToRemove = new HashSet < InetAddress > ( ) ; <nl> + <nl> + <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Node " + endpoint + " state normal , token " + tokens ) ; <nl> <nl> @ @ - 1463 , 16 + 1469 , 38 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( Gossiper . instance . usesHostId ( endpoint ) ) <nl> { <nl> UUID hostId = Gossiper . instance . getHostId ( endpoint ) ; <nl> + InetAddress existing = tokenMetadata . getEndpointForHostId ( hostId ) ; <nl> if ( DatabaseDescriptor . isReplacing ( ) & & Gossiper . instance . getEndpointStateForEndpoint ( DatabaseDescriptor . getReplaceAddress ( ) ) ! = null & & ( hostId . equals ( Gossiper . instance . getHostId ( DatabaseDescriptor . getReplaceAddress ( ) ) ) ) ) <nl> logger . warn ( " Not updating token metadata for { } because I am replacing it " , endpoint ) ; <nl> else <nl> - tokenMetadata . updateHostId ( hostId , endpoint ) ; <nl> - } <nl> + { <nl> + if ( existing ! = null & & ! existing . equals ( endpoint ) ) <nl> + { <nl> + if ( existing . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> + { <nl> + logger . warn ( " Not updating host ID { } for { } because it ' s mine " , hostId , endpoint ) ; <nl> + tokenMetadata . removeEndpoint ( endpoint ) ; <nl> + endpointsToRemove . add ( endpoint ) ; <nl> + } <nl> + else if ( Gossiper . instance . compareEndpointStartup ( endpoint , existing ) > 0 ) <nl> + { <nl> + logger . warn ( " Host ID collision for { } between { } and { } ; { } is the new owner " , hostId , existing , endpoint , endpoint ) ; <nl> + tokenMetadata . removeEndpoint ( existing ) ; <nl> + endpointsToRemove . add ( existing ) ; <nl> + tokenMetadata . updateHostId ( hostId , endpoint ) ; <nl> + } <nl> + else <nl> + { <nl> + logger . warn ( " Host ID Collision for { } between { } and { } ; ignored { } " , hostId , existing , endpoint , endpoint ) ; <nl> + tokenMetadata . removeEndpoint ( endpoint ) ; <nl> + endpointsToRemove . add ( endpoint ) ; <nl> + } <nl> + } <nl> + else <nl> + tokenMetadata . updateHostId ( hostId , endpoint ) ; <nl> + } <nl> <nl> - Set < Token > tokensToUpdateInMetadata = new HashSet < Token > ( ) ; <nl> - Set < Token > tokensToUpdateInSystemTable = new HashSet < Token > ( ) ; <nl> - Set < Token > localTokensToRemove = new HashSet < Token > ( ) ; <nl> - Set < InetAddress > endpointsToRemove = new HashSet < InetAddress > ( ) ; <nl> + } <nl> <nl> for ( final Token token : tokens ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2920c15 . . d88bb26 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 * Add properties to adjust FD initial value and max interval ( CASSANDRA - 4375 ) 
 * Fix preparing with batch and delete from collection ( CASSANDRA - 6607 ) 
 * Fix ABSC reverse iterator ' s remove ( ) method ( CASSANDRA - 6629 ) 
 + * Handle host ID conflicts properly ( CASSANDRA - 6615 ) 
 
 
 1 . 2 . 13 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3ed6cba . . b51bbd3 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 596 , 7 + 596 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 { 
 return false ; 
 } 
 - return ! isDeadState ( epState ) & & ! epState . isAlive ( ) & & ! StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ; 
 + return ! isDeadState ( epState ) & & ! StorageService . instance . getTokenMetadata ( ) . isMember ( endpoint ) ; 
 } 
 
 private void doStatusCheck ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index ab266d8 . . c93ea5b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1453 , 6 + 1453 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 tokens = getTokensFor ( endpoint , pieces [ 1 ] ) ; 
 
 + Set < Token > tokensToUpdateInMetadata = new HashSet < Token > ( ) ; 
 + Set < Token > tokensToUpdateInSystemTable = new HashSet < Token > ( ) ; 
 + Set < Token > localTokensToRemove = new HashSet < Token > ( ) ; 
 + Set < InetAddress > endpointsToRemove = new HashSet < InetAddress > ( ) ; 
 + 
 + 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Node " + endpoint + " state normal , token " + tokens ) ; 
 
 @ @ - 1463 , 16 + 1469 , 38 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( Gossiper . instance . usesHostId ( endpoint ) ) 
 { 
 UUID hostId = Gossiper . instance . getHostId ( endpoint ) ; 
 + InetAddress existing = tokenMetadata . getEndpointForHostId ( hostId ) ; 
 if ( DatabaseDescriptor . isReplacing ( ) & & Gossiper . instance . getEndpointStateForEndpoint ( DatabaseDescriptor . getReplaceAddress ( ) ) ! = null & & ( hostId . equals ( Gossiper . instance . getHostId ( DatabaseDescriptor . getReplaceAddress ( ) ) ) ) ) 
 logger . warn ( " Not updating token metadata for { } because I am replacing it " , endpoint ) ; 
 else 
 - tokenMetadata . updateHostId ( hostId , endpoint ) ; 
 - } 
 + { 
 + if ( existing ! = null & & ! existing . equals ( endpoint ) ) 
 + { 
 + if ( existing . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 + { 
 + logger . warn ( " Not updating host ID { } for { } because it ' s mine " , hostId , endpoint ) ; 
 + tokenMetadata . removeEndpoint ( endpoint ) ; 
 + endpointsToRemove . add ( endpoint ) ; 
 + } 
 + else if ( Gossiper . instance . compareEndpointStartup ( endpoint , existing ) > 0 ) 
 + { 
 + logger . warn ( " Host ID collision for { } between { } and { } ; { } is the new owner " , hostId , existing , endpoint , endpoint ) ; 
 + tokenMetadata . removeEndpoint ( existing ) ; 
 + endpointsToRemove . add ( existing ) ; 
 + tokenMetadata . updateHostId ( hostId , endpoint ) ; 
 + } 
 + else 
 + { 
 + logger . warn ( " Host ID Collision for { } between { } and { } ; ignored { } " , hostId , existing , endpoint , endpoint ) ; 
 + tokenMetadata . removeEndpoint ( endpoint ) ; 
 + endpointsToRemove . add ( endpoint ) ; 
 + } 
 + } 
 + else 
 + tokenMetadata . updateHostId ( hostId , endpoint ) ; 
 + } 
 
 - Set < Token > tokensToUpdateInMetadata = new HashSet < Token > ( ) ; 
 - Set < Token > tokensToUpdateInSystemTable = new HashSet < Token > ( ) ; 
 - Set < Token > localTokensToRemove = new HashSet < Token > ( ) ; 
 - Set < InetAddress > endpointsToRemove = new HashSet < InetAddress > ( ) ; 
 + } 
 
 for ( final Token token : tokens ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

