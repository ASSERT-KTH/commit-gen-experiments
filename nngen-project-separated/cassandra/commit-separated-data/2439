BLEU SCORE: 0.015445276590783498

TEST MSG: Bump CQL version to 3 . 1 . 7 , update CQL docs
GENERATED MSG: Allow empty IN relations in SELECT / UPDATE / DELETE statements

TEST DIFF (one line): diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index 66a4566 . . 3c64bc6 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> < link rel = " StyleSheet " href = " CQL . css " type = " text / css " media = " screen " > <nl> <nl> - h1 . Cassandra Query Language ( CQL ) v3 . 1 . 5 <nl> + h1 . Cassandra Query Language ( CQL ) v3 . 1 . 7 <nl> <nl> <nl> < span id = " tableOfContents " > <nl> @ @ - 665 , 13 + 665 , 15 @ @ bc ( syntax ) . . <nl> < where - clause > : : = < relation > ( AND < relation > ) * <nl> <nl> < relation > : : = < identifier > < op > < term > <nl> - | ' ( ' < identifier > ( ' , ' < identifier > ) * ' ) ' < op > ' ( ' < term > ( ' , ' < term > ) * ' ) ' <nl> + | ' ( ' < identifier > ( ' , ' < identifier > ) * ' ) ' < op > < term - tuple > <nl> | < identifier > IN ' ( ' ( < term > ( ' , ' < term > ) * ) ? ' ) ' <nl> + | ' ( ' < identifier > ( ' , ' < identifier > ) * ' ) ' IN ' ( ' ( < term - tuple > ( ' , ' < term - tuple > ) * ) ? ' ) ' <nl> | TOKEN ' ( ' < identifier > ( ' , ' < identifer > ) * ' ) ' < op > < term > <nl> <nl> < op > : : = ' = ' | ' < ' | ' > ' | ' < = ' | ' > = ' <nl> < order - by > : : = < ordering > ( ' , ' < odering > ) * <nl> < ordering > : : = < identifer > ( ASC | DESC ) ? <nl> + < term - tuple > : : = ' ( ' < term > ( ' , ' < term > ) * ' ) ' <nl> p . <nl> _ _ Sample : _ _ <nl> <nl> @ @ - 738 , 7 + 740 , 7 @ @ SELECT * FROM posts WHERE token ( userid ) > token ( ' tom ' ) AND token ( userid ) < token <nl> <nl> Moreover , the @ IN @ relation is only allowed on the last column of the partition key and on the last column of the full primary key . <nl> <nl> - It is also possible to " group " @ CLUSTERING COLUMNS @ together in a relation , for instance : <nl> + It is also possible to " group " @ CLUSTERING COLUMNS @ together in a relation using the tuple notation . For instance : <nl> <nl> bc ( sample ) . <nl> SELECT * FROM posts WHERE userid = ' john doe ' AND ( blog _ title , posted _ at ) > ( ' John ' ' s Blog ' , ' 2012 - 01 - 01 ' ) <nl> @ @ - 748 , 6 + 750 , 11 @ @ will request all rows that sorts after the one having " John ' s Blog " as @ blog _ til <nl> bc ( sample ) . <nl> SELECT * FROM posts WHERE userid = ' john doe ' AND blog _ title > ' John ' ' s Blog ' AND posted _ at > ' 2012 - 01 - 01 ' <nl> <nl> + The tuple notation may also be used for @ IN @ clauses on @ CLUSTERING COLUMNS @ : <nl> + <nl> + bc ( sample ) . <nl> + SELECT * FROM posts WHERE userid = ' john doe ' AND ( blog _ title , posted _ at ) IN ( ( ' John ' ' s Blog ' , ' 2012 - 01 - 01 ) , ( ' Extreme Chess ' , ' 2014 - 06 - 01 ' ) ) <nl> + <nl> h4 ( # selectOrderBy ) . @ < order - by > @ <nl> <nl> The @ ORDER BY @ option allows to select the order of the returned results . It takes as argument a list of column names along with the order for the column ( @ ASC @ for ascendant and @ DESC @ for descendant , omitting the order being equivalent to @ ASC @ ) . Currently the possible orderings are limited ( which depends on the table " @ CLUSTERING ORDER @ " : # createTableOptions ) : <nl> @ @ - 1162 , 15 + 1169 , 18 @ @ h2 ( # changes ) . Changes <nl> <nl> The following describes the addition / changes brought for each version of CQL . <nl> <nl> + h3 . 3 . 1 . 7 <nl> + <nl> + * @ SELECT @ statements now support selecting multiple rows in a single partition using an @ IN @ clause on combinations of clustering columns . See " SELECT WHERE " : # selectWhere clauses . <nl> + <nl> h3 . 3 . 1 . 6 <nl> <nl> * A new " @ uuid @ method " : # uuidFun has been added . <nl> * Support for @ DELETE . . . IF EXISTS @ syntax . <nl> <nl> - <nl> h3 . 3 . 1 . 5 <nl> <nl> - * It is now possible to group clustering columns in a relatiion , see " SELECT Where clauses " : # selectWhere . <nl> + * It is now possible to group clustering columns in a relatiion , see " SELECT WHERE " : # selectWhere clauses . <nl> * Added support for @ STATIC @ columns , see " static in CREATE TABLE " : # createTableStatic . <nl> <nl> h3 . 3 . 1 . 4 <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 30d1bd7 . . 3d9c5a8 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ import org . apache . cassandra . utils . SemanticVersion ; <nl> <nl> public class QueryProcessor implements QueryHandler <nl> { <nl> - public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 1 . 6 " ) ; <nl> + public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 1 . 7 " ) ; <nl> <nl> public static final QueryProcessor instance = new QueryProcessor ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index fe64c71 . . 532d341 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 1054 , 7 + 1054 , 7 @ @ The following describes the addition / changes brought for each version of CQL . <nl> <nl> h3 . 3 . 0 . 5 <nl> <nl> - * SELECT , UPDATE , and DELETE statements now allow empty IN relations ( see " CASSANDRA - 5626 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 5626 ) . <nl> + * @ SELECT @ , @ UPDATE @ , and @ DELETE @ statements now allow empty @ IN @ relations ( see " CASSANDRA - 5626 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 5626 ) . <nl> <nl> h3 . 3 . 0 . 4 <nl>

TEST DIFF:
diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index 66a4566 . . 3c64bc6 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 < link rel = " StyleSheet " href = " CQL . css " type = " text / css " media = " screen " > 
 
 - h1 . Cassandra Query Language ( CQL ) v3 . 1 . 5 
 + h1 . Cassandra Query Language ( CQL ) v3 . 1 . 7 
 
 
 < span id = " tableOfContents " > 
 @ @ - 665 , 13 + 665 , 15 @ @ bc ( syntax ) . . 
 < where - clause > : : = < relation > ( AND < relation > ) * 
 
 < relation > : : = < identifier > < op > < term > 
 - | ' ( ' < identifier > ( ' , ' < identifier > ) * ' ) ' < op > ' ( ' < term > ( ' , ' < term > ) * ' ) ' 
 + | ' ( ' < identifier > ( ' , ' < identifier > ) * ' ) ' < op > < term - tuple > 
 | < identifier > IN ' ( ' ( < term > ( ' , ' < term > ) * ) ? ' ) ' 
 + | ' ( ' < identifier > ( ' , ' < identifier > ) * ' ) ' IN ' ( ' ( < term - tuple > ( ' , ' < term - tuple > ) * ) ? ' ) ' 
 | TOKEN ' ( ' < identifier > ( ' , ' < identifer > ) * ' ) ' < op > < term > 
 
 < op > : : = ' = ' | ' < ' | ' > ' | ' < = ' | ' > = ' 
 < order - by > : : = < ordering > ( ' , ' < odering > ) * 
 < ordering > : : = < identifer > ( ASC | DESC ) ? 
 + < term - tuple > : : = ' ( ' < term > ( ' , ' < term > ) * ' ) ' 
 p . 
 _ _ Sample : _ _ 
 
 @ @ - 738 , 7 + 740 , 7 @ @ SELECT * FROM posts WHERE token ( userid ) > token ( ' tom ' ) AND token ( userid ) < token 
 
 Moreover , the @ IN @ relation is only allowed on the last column of the partition key and on the last column of the full primary key . 
 
 - It is also possible to " group " @ CLUSTERING COLUMNS @ together in a relation , for instance : 
 + It is also possible to " group " @ CLUSTERING COLUMNS @ together in a relation using the tuple notation . For instance : 
 
 bc ( sample ) . 
 SELECT * FROM posts WHERE userid = ' john doe ' AND ( blog _ title , posted _ at ) > ( ' John ' ' s Blog ' , ' 2012 - 01 - 01 ' ) 
 @ @ - 748 , 6 + 750 , 11 @ @ will request all rows that sorts after the one having " John ' s Blog " as @ blog _ til 
 bc ( sample ) . 
 SELECT * FROM posts WHERE userid = ' john doe ' AND blog _ title > ' John ' ' s Blog ' AND posted _ at > ' 2012 - 01 - 01 ' 
 
 + The tuple notation may also be used for @ IN @ clauses on @ CLUSTERING COLUMNS @ : 
 + 
 + bc ( sample ) . 
 + SELECT * FROM posts WHERE userid = ' john doe ' AND ( blog _ title , posted _ at ) IN ( ( ' John ' ' s Blog ' , ' 2012 - 01 - 01 ) , ( ' Extreme Chess ' , ' 2014 - 06 - 01 ' ) ) 
 + 
 h4 ( # selectOrderBy ) . @ < order - by > @ 
 
 The @ ORDER BY @ option allows to select the order of the returned results . It takes as argument a list of column names along with the order for the column ( @ ASC @ for ascendant and @ DESC @ for descendant , omitting the order being equivalent to @ ASC @ ) . Currently the possible orderings are limited ( which depends on the table " @ CLUSTERING ORDER @ " : # createTableOptions ) : 
 @ @ - 1162 , 15 + 1169 , 18 @ @ h2 ( # changes ) . Changes 
 
 The following describes the addition / changes brought for each version of CQL . 
 
 + h3 . 3 . 1 . 7 
 + 
 + * @ SELECT @ statements now support selecting multiple rows in a single partition using an @ IN @ clause on combinations of clustering columns . See " SELECT WHERE " : # selectWhere clauses . 
 + 
 h3 . 3 . 1 . 6 
 
 * A new " @ uuid @ method " : # uuidFun has been added . 
 * Support for @ DELETE . . . IF EXISTS @ syntax . 
 
 - 
 h3 . 3 . 1 . 5 
 
 - * It is now possible to group clustering columns in a relatiion , see " SELECT Where clauses " : # selectWhere . 
 + * It is now possible to group clustering columns in a relatiion , see " SELECT WHERE " : # selectWhere clauses . 
 * Added support for @ STATIC @ columns , see " static in CREATE TABLE " : # createTableStatic . 
 
 h3 . 3 . 1 . 4 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 30d1bd7 . . 3d9c5a8 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 43 , 7 + 43 , 7 @ @ import org . apache . cassandra . utils . SemanticVersion ; 
 
 public class QueryProcessor implements QueryHandler 
 { 
 - public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 1 . 6 " ) ; 
 + public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 1 . 7 " ) ; 
 
 public static final QueryProcessor instance = new QueryProcessor ( ) ; 


NEAREST DIFF:
diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index fe64c71 . . 532d341 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 1054 , 7 + 1054 , 7 @ @ The following describes the addition / changes brought for each version of CQL . 
 
 h3 . 3 . 0 . 5 
 
 - * SELECT , UPDATE , and DELETE statements now allow empty IN relations ( see " CASSANDRA - 5626 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 5626 ) . 
 + * @ SELECT @ , @ UPDATE @ , and @ DELETE @ statements now allow empty @ IN @ relations ( see " CASSANDRA - 5626 " : https : / / issues . apache . org / jira / browse / CASSANDRA - 5626 ) . 
 
 h3 . 3 . 0 . 4 

