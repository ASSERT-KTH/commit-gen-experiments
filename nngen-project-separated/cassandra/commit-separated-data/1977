BLEU SCORE: 0.018738883683389617

TEST MSG: Validate functionality of different JSR - 223 providers in UDFs .
GENERATED MSG: Fix installing as service on Windows

TEST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index c7cf9fd . . fd37407 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 57 , 3 + 57 , 15 @ @ target / <nl> * . tmp <nl> . DS _ Store <nl> Thumbs . db <nl> + <nl> + # JSR223 <nl> + lib / jsr223 / clojure / * . jar <nl> + lib / jsr223 / groovy / * . jar <nl> + lib / jsr223 / jaskell / * . jar <nl> + lib / jsr223 / jruby / * . jar <nl> + lib / jsr223 / jruby / jni <nl> + lib / jsr223 / jruby / ruby <nl> + lib / jsr223 / jython / * . jar <nl> + lib / jsr223 / jython / cachedir <nl> + lib / jsr223 / scala / * . jar <nl> + <nl> diff - - git a / bin / cassandra . bat b / bin / cassandra . bat <nl> index a16bf1a . . 3445af2 100644 <nl> - - - a / bin / cassandra . bat <nl> + + + b / bin / cassandra . bat <nl> @ @ - 85 , 6 + 85 , 29 @ @ goto : eof <nl> <nl> REM - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> : okClasspath <nl> + <nl> + REM JSR223 - collect all JSR223 engines ' jars <nl> + for / D % % P in ( " % CASSANDRA _ HOME % \ lib \ jsr223 \ * . * " ) do ( <nl> + 	 for % % i in ( " % % P \ * . jar " ) do call : append " % % i " <nl> + ) <nl> + <nl> + REM JSR223 / JRuby - set ruby lib directory <nl> + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ ruby " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Djruby . lib = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby " <nl> + ) <nl> + REM JSR223 / JRuby - set ruby JNI libraries root directory <nl> + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Djffi . boot . library . path = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " <nl> + ) <nl> + REM JSR223 / Jython - set python . home system property <nl> + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jython \ jython . jar " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Dpython . home = % CASSANDRA _ HOME % \ lib \ jsr223 \ jython " <nl> + ) <nl> + REM JSR223 / Scala - necessary system property <nl> + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ scala \ scala - compiler . jar " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Dscala . usejavacp = true " <nl> + ) <nl> + <nl> REM Include the build \ classes \ main directory so it works in development <nl> set CASSANDRA _ CLASSPATH = % CLASSPATH % ; " % CASSANDRA _ HOME % \ build \ classes \ main " ; " % CASSANDRA _ HOME % \ build \ classes \ thrift " <nl> set CASSANDRA _ PARAMS = - Dcassandra - Dcassandra - foreground = yes <nl> diff - - git a / bin / cassandra . in . bat b / bin / cassandra . in . bat <nl> index a0eced5 . . 1b4e38e 100644 <nl> - - - a / bin / cassandra . in . bat <nl> + + + b / bin / cassandra . in . bat <nl> @ @ - 49 , 5 + 49 , 26 @ @ set CASSANDRA _ CLASSPATH = % CLASSPATH % ; " % CASSANDRA _ HOME % \ build \ classes \ main " ; % CASSA <nl> REM Add the default storage location . Can be overridden in conf \ cassandra . yaml <nl> set CASSANDRA _ PARAMS = % CASSANDRA _ PARAMS % " - Dcassandra . storagedir = % CASSANDRA _ HOME % \ data " <nl> <nl> + REM JSR223 - collect all JSR223 engines ' jars <nl> + for / r % % P in ( " % CASSANDRA _ HOME % \ lib \ jsr223 \ * . jar " ) do ( <nl> + set CLASSPATH = % CLASSPATH % ; % % ~ fP <nl> + ) <nl> + REM JSR223 / JRuby - set ruby lib directory <nl> + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ ruby " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Djruby . lib = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby " <nl> + ) <nl> + REM JSR223 / JRuby - set ruby JNI libraries root directory <nl> + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Djffi . boot . library . path = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " <nl> + ) <nl> + REM JSR223 / Jython - set python . home system property <nl> + if EXIST " % $ CASSANDRA _ HOME % \ lib \ jsr223 \ jython \ jython . jar " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Dpython . home = % CASSANDRA _ HOME % \ lib \ jsr223 \ jython " <nl> + ) <nl> + REM JSR223 / Scala - necessary system property <nl> + if EXIST " $ CASSANDRA _ HOME \ lib \ jsr223 \ scala \ scala - compiler . jar " ( <nl> + set JAVA _ OPTS = % JAVA _ OPTS % " - Dscala . usejavacp = true " <nl> + ) <nl> + <nl> REM Add the sigar - bin path to the java . library . path CASSANDRA - 7838 <nl> set JAVA _ OPTS = % JAVA _ OPTS % - Djava . library . path = % CASSANDRA _ HOME % \ lib \ sigar - bin " <nl> diff - - git a / bin / cassandra . in . sh b / bin / cassandra . in . sh <nl> index 6b0581d . . 92f79c7 100644 <nl> - - - a / bin / cassandra . in . sh <nl> + + + b / bin / cassandra . in . sh <nl> @ @ - 44 , 6 + 44 , 27 @ @ for jar in " $ CASSANDRA _ HOME " / lib / * . jar ; do <nl> CLASSPATH = " $ CLASSPATH : $ jar " <nl> done <nl> <nl> + # JSR223 - collect all JSR223 engines ' jars <nl> + for jsr223jar in " $ CASSANDRA _ HOME " / lib / jsr223 / * / * . jar ; do <nl> + CLASSPATH = " $ CLASSPATH : $ jsr223jar " <nl> + done <nl> + # JSR223 / JRuby - set ruby lib directory <nl> + if [ - d " $ CASSANDRA _ HOME " / lib / jsr223 / jruby / ruby ] ; then <nl> + export JVM _ OPTS = " $ JVM _ OPTS - Djruby . lib = $ CASSANDRA _ HOME / lib / jsr223 / jruby " <nl> + fi <nl> + # JSR223 / JRuby - set ruby JNI libraries root directory <nl> + if [ - d " $ CASSANDRA _ HOME " / lib / jsr223 / jruby / jni ] ; then <nl> + export JVM _ OPTS = " $ JVM _ OPTS - Djffi . boot . library . path = $ CASSANDRA _ HOME / lib / jsr223 / jruby / jni " <nl> + fi <nl> + # JSR223 / Jython - set python . home system property <nl> + if [ - f " $ CASSANDRA _ HOME " / lib / jsr223 / jython / jython . jar ] ; then <nl> + export JVM _ OPTS = " $ JVM _ OPTS - Dpython . home = $ CASSANDRA _ HOME / lib / jsr223 / jython " <nl> + fi <nl> + # JSR223 / Scala - necessary system property <nl> + if [ - f " $ CASSANDRA _ HOME " / lib / jsr223 / scala / scala - compiler . jar ] ; then <nl> + export JVM _ OPTS = " $ JVM _ OPTS - Dscala . usejavacp = true " <nl> + fi <nl> + <nl> # set JVM javaagent opts to avoid warnings / errors <nl> if [ " $ JVM _ VENDOR " ! = " OpenJDK " - o " $ JVM _ VERSION " \ > " 1 . 6 . 0 " ] \ <nl> | | [ " $ JVM _ VERSION " = " 1 . 6 . 0 " - a " $ JVM _ PATCH _ VERSION " - ge 23 ] <nl> diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index 8793cf4 . . 8acb507 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 197 , 6 + 197 , 42 @ @ Function CalculateHeapSizes <nl> } <nl> <nl> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + Function SetJsr223Env <nl> + { <nl> + $ cp = " " " $ env : CLASSPATH " " " <nl> + foreach ( $ jsrDir in Get - ChildItem - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 " ) <nl> + { <nl> + foreach ( $ file in Get - ChildItem - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ $ jsrDir \ * . jar " ) <nl> + { <nl> + $ file = $ file - replace " \ \ " , " / " <nl> + 	 	 	 $ cp = $ cp + " ; " + " " " $ file " " " <nl> + } <nl> + } <nl> + $ env : CLASSPATH = $ cp <nl> + <nl> + 	 # JSR223 / JRuby - set ruby lib directory <nl> + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby \ ruby " ) <nl> + 	 { <nl> + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Djruby . lib = $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby " <nl> + 	 } <nl> + 	 # JSR223 / JRuby - set ruby JNI libraries root directory <nl> + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby \ jni " ) <nl> + 	 { <nl> + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Djffi . boot . library . path = $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby \ jni " <nl> + 	 } <nl> + 	 # JSR223 / Jython - set python . home system property <nl> + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jython \ jython . jar " ) <nl> + 	 { <nl> + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Dpython . home = $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jython " <nl> + 	 } <nl> + 	 # JSR223 / Scala - necessary system property <nl> + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ scala \ scala - compiler . jar " ) <nl> + 	 { <nl> + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Dscala . usejavacp = true " <nl> + 	 } <nl> + } <nl> + <nl> + # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> Function ParseJVMInfo <nl> { <nl> # grab info about the JVM <nl> @ @ - 276 , 6 + 312 , 7 @ @ Function SetCassandraEnvironment <nl> <nl> SetCassandraMain <nl> BuildClassPath <nl> + SetJsr223Env <nl> <nl> # Override these to set the amount of memory to allocate to the JVM at <nl> # start - up . For production use you may wish to adjust this for your <nl> diff - - git a / lib / jsr223 / clojure / README . txt b / lib / jsr223 / clojure / README . txt <nl> new file mode 100644 <nl> index 0000000 . . 7ed7551 <nl> - - - / dev / null <nl> + + + b / lib / jsr223 / clojure / README . txt <nl> @ @ - 0 , 0 + 1 , 8 @ @ <nl> + Apache Cassandra User - Defined - Functions JSR 223 scripting <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Unfortunately the JSR - 223 support provided by the project https : / / github . com / ato / clojure - jsr223 <nl> + and the related ones do not provide compileable script support . <nl> + <nl> + The JSR - 223 javax . script . Compilable implementation takes source file names or readers but not script sources <nl> + as all other JSR - 223 implementations do . <nl> diff - - git a / lib / jsr223 / groovy / README . txt b / lib / jsr223 / groovy / README . txt <nl> new file mode 100644 <nl> index 0000000 . . 09fef93 <nl> - - - / dev / null <nl> + + + b / lib / jsr223 / groovy / README . txt <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + Apache Cassandra User - Defined - Functions JSR 223 scripting <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Using JSR - 223 capable Groovy <nl> + <nl> + Tested with version 2 . 3 . 6 <nl> + <nl> + Installation <nl> + - - - - - - - - - - - - <nl> + <nl> + 1 . Download Groovy binary release <nl> + 2 . Unpack the downloaded archive into a temporary directory <nl> + 3 . Copy the jar groovy - all - 2 . 3 . 6 - indy . jar from the Groovy embeddable directory to $ CASSANDRA _ HOME / lib / jsr223 / groovy <nl> + " indy " means " invokedynamic " and is a JVM instruction for scripting languages new to Java 7 . <nl> + 4 . Restart your Cassandra daemon if it ' s already running <nl> + <nl> + Cassandra log should contain a line like this : <nl> + INFO 10 : 49 : 45 Found scripting engine Groovy Scripting Engine 2 . 0 - Groovy 2 . 3 . 6 - language names : [ groovy , Groovy ] <nl> + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . <nl> + <nl> + Smoke Test <nl> + - - - - - - - - - - <nl> + <nl> + To test Groovy functionality , open cqlsh and execute the following command : <nl> + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE groovy AS ' return " foo " ; ' ; <nl> + <nl> + If you get the error <nl> + code = 2200 [ Invalid query ] message = " Invalid language groovy for ' foobar ' " <nl> + Groovy for Apache Cassandra has not been installed correctly . <nl> + <nl> + Notes / Java7 invokedynamic <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + Groovy provides jars that support invokedynamic bytecode instruction . These jars are whose ending with <nl> + " - indy . jar " . <nl> diff - - git a / lib / jsr223 / jaskell / README . txt b / lib / jsr223 / jaskell / README . txt <nl> new file mode 100644 <nl> index 0000000 . . 53e942e <nl> - - - / dev / null <nl> + + + b / lib / jsr223 / jaskell / README . txt <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + Apache Cassandra User - Defined - Functions JSR 223 scripting <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Unfortunately Jaskell JSR - 223 support is quite old and the Jaskell engine seems to be quite <nl> + unsupported . If you find a solution , please open a ticket at Apache Cassandra JIRA . <nl> diff - - git a / lib / jsr223 / jruby / README . txt b / lib / jsr223 / jruby / README . txt <nl> new file mode 100644 <nl> index 0000000 . . cbc12dc <nl> - - - / dev / null <nl> + + + b / lib / jsr223 / jruby / README . txt <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + Apache Cassandra User - Defined - Functions JSR 223 scripting <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Using JSR - 223 capable JRuby <nl> + <nl> + Tested with version 1 . 7 . 15 <nl> + <nl> + Installation <nl> + - - - - - - - - - - - - <nl> + <nl> + 1 . Download JRuby binary release <nl> + 2 . Unpack the downloaded archive into a temporary directory <nl> + 3 . Copy everything from the JRuby lib directory to $ CASSANDRA _ HOME / lib / jsr223 / jruby <nl> + 4 . Restart your Cassandra daemon if it ' s already running <nl> + <nl> + Cassandra log should contain a line like this : <nl> + INFO 10 : 29 : 03 Found scripting engine JSR 223 JRuby Engine 1 . 7 . 15 - ruby jruby 1 . 7 . 15 - language names : [ ruby , jruby ] <nl> + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . <nl> + <nl> + <nl> + Smoke Test <nl> + - - - - - - - - - - <nl> + <nl> + To test JRuby functionality , open cqlsh and execute the following command : <nl> + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE ruby AS ' return " foo " ; ' ; <nl> + <nl> + If you get the error <nl> + code = 2200 [ Invalid query ] message = " Invalid language ruby for ' foobar ' " <nl> + JRuby for Apache Cassandra has not been installed correctly . <nl> + <nl> + <nl> + Ruby require / include <nl> + - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + You can use Ruby require and include in your scripts as in the following example : <nl> + <nl> + <nl> + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE ruby AS ' <nl> + require " bigdecimal " <nl> + require " bigdecimal / math " <nl> + <nl> + include BigMath <nl> + <nl> + a = BigDecimal ( ( PI ( 100 ) / 2 ) . to _ s ) <nl> + <nl> + return " foo " + a . to _ s ; <nl> + ' ; <nl> + <nl> + <nl> + Notes / Java7 invokedynamic <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + See JRuby wiki pages https : / / github . com / jruby / jruby / wiki / ConfiguringJRuby and <nl> + https : / / github . com / jruby / jruby / wiki / PerformanceTuning for more information and optimization tips . <nl> diff - - git a / lib / jsr223 / jython / README . txt b / lib / jsr223 / jython / README . txt <nl> new file mode 100644 <nl> index 0000000 . . bef3c83 <nl> - - - / dev / null <nl> + + + b / lib / jsr223 / jython / README . txt <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + Apache Cassandra User - Defined - Functions JSR 223 scripting <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Using JSR - 223 capable Jython <nl> + <nl> + Tested with version 2 . 3 . 5 <nl> + <nl> + Installation <nl> + - - - - - - - - - - - - <nl> + <nl> + 1 . Download Jython binary release <nl> + 2 . Unpack the downloaded archive into a temporary directory <nl> + 3 . Copy the jar jython . jar from the Jython directory to $ CASSANDRA _ HOME / lib / jsr223 / jython <nl> + 4 . Restart your Cassandra daemon if it ' s already running <nl> + <nl> + Cassandra log should contain a line like this : <nl> + INFO 10 : 58 : 18 Found scripting engine jython 2 . 5 . 3 - python 2 . 5 - language names : [ python , jython ] <nl> + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . <nl> + <nl> + Smoke Test <nl> + - - - - - - - - - - <nl> + <nl> + To test Jython functionality , open cqlsh and execute the following command : <nl> + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE python AS ' ' ' foo ' ' ' ; <nl> + <nl> + If you get the error <nl> + code = 2200 [ Invalid query ] message = " Invalid language python for ' foobar ' " <nl> + Jython for Apache Cassandra has not been installed correctly . <nl> + <nl> + Notes / Java7 invokedynamic <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + Jython currently targets Java6 only . They want to switch to Java7 + invokedynamic in Jython 3 . <nl> diff - - git a / lib / jsr223 / scala / README . txt b / lib / jsr223 / scala / README . txt <nl> new file mode 100644 <nl> index 0000000 . . 7f5d6fe <nl> - - - / dev / null <nl> + + + b / lib / jsr223 / scala / README . txt <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + Apache Cassandra User - Defined - Functions JSR 223 scripting <nl> + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> + Using JSR - 223 capable Scala <nl> + <nl> + Tested with version 2 . 11 . 2 <nl> + <nl> + Installation <nl> + - - - - - - - - - - - - <nl> + <nl> + 1 . Download Scala binary release <nl> + 2 . Unpack the downloaded archive into a temporary directory <nl> + 3 . Copy the following jars from the Scala lib directory to $ CASSANDRA _ HOME / lib / jsr223 / scala <nl> + scala - compiler . jar <nl> + scala - library . jar <nl> + scala - reflect . jar <nl> + 4 . Restart your Cassandra daemon if it ' s already running <nl> + <nl> + Cassandra log should contain a line like this : <nl> + INFO 11 : 42 : 35 Found scripting engine Scala Interpreter 1 . 0 - Scala version 2 . 11 . 2 - language names : [ scala ] <nl> + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . <nl> + <nl> + Smoke Test <nl> + - - - - - - - - - - <nl> + <nl> + To test Scala functionality , open cqlsh and execute the following command : <nl> + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE scala AS ' return " foo " ; ' ; <nl> + <nl> + If you get the error <nl> + code = 2200 [ Invalid query ] message = " Invalid language scala for ' foobar ' " <nl> + Scala for Apache Cassandra has not been installed correctly . <nl> + <nl> + Notes / Java7 invokedynamic <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + Scala 2 . 10 has Java6 support only . 2 . 11 has experimental invokedynamic support ( use at your own risk ! ) . <nl> + 2 . 12 introduces an upgrade directly to Java8 - see https : / / stackoverflow . com / questions / 14285894 / advantages - of - scala - emitting - bytecode - for - the - jvm - 1 - 7 <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index c7cf9fd . . fd37407 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 57 , 3 + 57 , 15 @ @ target / 
 * . tmp 
 . DS _ Store 
 Thumbs . db 
 + 
 + # JSR223 
 + lib / jsr223 / clojure / * . jar 
 + lib / jsr223 / groovy / * . jar 
 + lib / jsr223 / jaskell / * . jar 
 + lib / jsr223 / jruby / * . jar 
 + lib / jsr223 / jruby / jni 
 + lib / jsr223 / jruby / ruby 
 + lib / jsr223 / jython / * . jar 
 + lib / jsr223 / jython / cachedir 
 + lib / jsr223 / scala / * . jar 
 + 
 diff - - git a / bin / cassandra . bat b / bin / cassandra . bat 
 index a16bf1a . . 3445af2 100644 
 - - - a / bin / cassandra . bat 
 + + + b / bin / cassandra . bat 
 @ @ - 85 , 6 + 85 , 29 @ @ goto : eof 
 
 REM - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 : okClasspath 
 + 
 + REM JSR223 - collect all JSR223 engines ' jars 
 + for / D % % P in ( " % CASSANDRA _ HOME % \ lib \ jsr223 \ * . * " ) do ( 
 + 	 for % % i in ( " % % P \ * . jar " ) do call : append " % % i " 
 + ) 
 + 
 + REM JSR223 / JRuby - set ruby lib directory 
 + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ ruby " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Djruby . lib = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby " 
 + ) 
 + REM JSR223 / JRuby - set ruby JNI libraries root directory 
 + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Djffi . boot . library . path = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " 
 + ) 
 + REM JSR223 / Jython - set python . home system property 
 + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jython \ jython . jar " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Dpython . home = % CASSANDRA _ HOME % \ lib \ jsr223 \ jython " 
 + ) 
 + REM JSR223 / Scala - necessary system property 
 + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ scala \ scala - compiler . jar " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Dscala . usejavacp = true " 
 + ) 
 + 
 REM Include the build \ classes \ main directory so it works in development 
 set CASSANDRA _ CLASSPATH = % CLASSPATH % ; " % CASSANDRA _ HOME % \ build \ classes \ main " ; " % CASSANDRA _ HOME % \ build \ classes \ thrift " 
 set CASSANDRA _ PARAMS = - Dcassandra - Dcassandra - foreground = yes 
 diff - - git a / bin / cassandra . in . bat b / bin / cassandra . in . bat 
 index a0eced5 . . 1b4e38e 100644 
 - - - a / bin / cassandra . in . bat 
 + + + b / bin / cassandra . in . bat 
 @ @ - 49 , 5 + 49 , 26 @ @ set CASSANDRA _ CLASSPATH = % CLASSPATH % ; " % CASSANDRA _ HOME % \ build \ classes \ main " ; % CASSA 
 REM Add the default storage location . Can be overridden in conf \ cassandra . yaml 
 set CASSANDRA _ PARAMS = % CASSANDRA _ PARAMS % " - Dcassandra . storagedir = % CASSANDRA _ HOME % \ data " 
 
 + REM JSR223 - collect all JSR223 engines ' jars 
 + for / r % % P in ( " % CASSANDRA _ HOME % \ lib \ jsr223 \ * . jar " ) do ( 
 + set CLASSPATH = % CLASSPATH % ; % % ~ fP 
 + ) 
 + REM JSR223 / JRuby - set ruby lib directory 
 + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ ruby " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Djruby . lib = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby " 
 + ) 
 + REM JSR223 / JRuby - set ruby JNI libraries root directory 
 + if EXIST " % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Djffi . boot . library . path = % CASSANDRA _ HOME % \ lib \ jsr223 \ jruby \ jni " 
 + ) 
 + REM JSR223 / Jython - set python . home system property 
 + if EXIST " % $ CASSANDRA _ HOME % \ lib \ jsr223 \ jython \ jython . jar " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Dpython . home = % CASSANDRA _ HOME % \ lib \ jsr223 \ jython " 
 + ) 
 + REM JSR223 / Scala - necessary system property 
 + if EXIST " $ CASSANDRA _ HOME \ lib \ jsr223 \ scala \ scala - compiler . jar " ( 
 + set JAVA _ OPTS = % JAVA _ OPTS % " - Dscala . usejavacp = true " 
 + ) 
 + 
 REM Add the sigar - bin path to the java . library . path CASSANDRA - 7838 
 set JAVA _ OPTS = % JAVA _ OPTS % - Djava . library . path = % CASSANDRA _ HOME % \ lib \ sigar - bin " 
 diff - - git a / bin / cassandra . in . sh b / bin / cassandra . in . sh 
 index 6b0581d . . 92f79c7 100644 
 - - - a / bin / cassandra . in . sh 
 + + + b / bin / cassandra . in . sh 
 @ @ - 44 , 6 + 44 , 27 @ @ for jar in " $ CASSANDRA _ HOME " / lib / * . jar ; do 
 CLASSPATH = " $ CLASSPATH : $ jar " 
 done 
 
 + # JSR223 - collect all JSR223 engines ' jars 
 + for jsr223jar in " $ CASSANDRA _ HOME " / lib / jsr223 / * / * . jar ; do 
 + CLASSPATH = " $ CLASSPATH : $ jsr223jar " 
 + done 
 + # JSR223 / JRuby - set ruby lib directory 
 + if [ - d " $ CASSANDRA _ HOME " / lib / jsr223 / jruby / ruby ] ; then 
 + export JVM _ OPTS = " $ JVM _ OPTS - Djruby . lib = $ CASSANDRA _ HOME / lib / jsr223 / jruby " 
 + fi 
 + # JSR223 / JRuby - set ruby JNI libraries root directory 
 + if [ - d " $ CASSANDRA _ HOME " / lib / jsr223 / jruby / jni ] ; then 
 + export JVM _ OPTS = " $ JVM _ OPTS - Djffi . boot . library . path = $ CASSANDRA _ HOME / lib / jsr223 / jruby / jni " 
 + fi 
 + # JSR223 / Jython - set python . home system property 
 + if [ - f " $ CASSANDRA _ HOME " / lib / jsr223 / jython / jython . jar ] ; then 
 + export JVM _ OPTS = " $ JVM _ OPTS - Dpython . home = $ CASSANDRA _ HOME / lib / jsr223 / jython " 
 + fi 
 + # JSR223 / Scala - necessary system property 
 + if [ - f " $ CASSANDRA _ HOME " / lib / jsr223 / scala / scala - compiler . jar ] ; then 
 + export JVM _ OPTS = " $ JVM _ OPTS - Dscala . usejavacp = true " 
 + fi 
 + 
 # set JVM javaagent opts to avoid warnings / errors 
 if [ " $ JVM _ VENDOR " ! = " OpenJDK " - o " $ JVM _ VERSION " \ > " 1 . 6 . 0 " ] \ 
 | | [ " $ JVM _ VERSION " = " 1 . 6 . 0 " - a " $ JVM _ PATCH _ VERSION " - ge 23 ] 
 diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index 8793cf4 . . 8acb507 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 197 , 6 + 197 , 42 @ @ Function CalculateHeapSizes 
 } 
 
 # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + Function SetJsr223Env 
 + { 
 + $ cp = " " " $ env : CLASSPATH " " " 
 + foreach ( $ jsrDir in Get - ChildItem - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 " ) 
 + { 
 + foreach ( $ file in Get - ChildItem - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ $ jsrDir \ * . jar " ) 
 + { 
 + $ file = $ file - replace " \ \ " , " / " 
 + 	 	 	 $ cp = $ cp + " ; " + " " " $ file " " " 
 + } 
 + } 
 + $ env : CLASSPATH = $ cp 
 + 
 + 	 # JSR223 / JRuby - set ruby lib directory 
 + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby \ ruby " ) 
 + 	 { 
 + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Djruby . lib = $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby " 
 + 	 } 
 + 	 # JSR223 / JRuby - set ruby JNI libraries root directory 
 + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby \ jni " ) 
 + 	 { 
 + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Djffi . boot . library . path = $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jruby \ jni " 
 + 	 } 
 + 	 # JSR223 / Jython - set python . home system property 
 + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jython \ jython . jar " ) 
 + 	 { 
 + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Dpython . home = $ env : CASSANDRA _ HOME \ lib \ jsr223 \ jython " 
 + 	 } 
 + 	 # JSR223 / Scala - necessary system property 
 + 	 if ( Test - Path " $ env : CASSANDRA _ HOME \ lib \ jsr223 \ scala \ scala - compiler . jar " ) 
 + 	 { 
 + 	 	 $ env : CASSANDRA _ PARAMS = $ env : CASSANDRA _ PARAMS + " - Dscala . usejavacp = true " 
 + 	 } 
 + } 
 + 
 + # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 Function ParseJVMInfo 
 { 
 # grab info about the JVM 
 @ @ - 276 , 6 + 312 , 7 @ @ Function SetCassandraEnvironment 
 
 SetCassandraMain 
 BuildClassPath 
 + SetJsr223Env 
 
 # Override these to set the amount of memory to allocate to the JVM at 
 # start - up . For production use you may wish to adjust this for your 
 diff - - git a / lib / jsr223 / clojure / README . txt b / lib / jsr223 / clojure / README . txt 
 new file mode 100644 
 index 0000000 . . 7ed7551 
 - - - / dev / null 
 + + + b / lib / jsr223 / clojure / README . txt 
 @ @ - 0 , 0 + 1 , 8 @ @ 
 + Apache Cassandra User - Defined - Functions JSR 223 scripting 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Unfortunately the JSR - 223 support provided by the project https : / / github . com / ato / clojure - jsr223 
 + and the related ones do not provide compileable script support . 
 + 
 + The JSR - 223 javax . script . Compilable implementation takes source file names or readers but not script sources 
 + as all other JSR - 223 implementations do . 
 diff - - git a / lib / jsr223 / groovy / README . txt b / lib / jsr223 / groovy / README . txt 
 new file mode 100644 
 index 0000000 . . 09fef93 
 - - - / dev / null 
 + + + b / lib / jsr223 / groovy / README . txt 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + Apache Cassandra User - Defined - Functions JSR 223 scripting 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Using JSR - 223 capable Groovy 
 + 
 + Tested with version 2 . 3 . 6 
 + 
 + Installation 
 + - - - - - - - - - - - - 
 + 
 + 1 . Download Groovy binary release 
 + 2 . Unpack the downloaded archive into a temporary directory 
 + 3 . Copy the jar groovy - all - 2 . 3 . 6 - indy . jar from the Groovy embeddable directory to $ CASSANDRA _ HOME / lib / jsr223 / groovy 
 + " indy " means " invokedynamic " and is a JVM instruction for scripting languages new to Java 7 . 
 + 4 . Restart your Cassandra daemon if it ' s already running 
 + 
 + Cassandra log should contain a line like this : 
 + INFO 10 : 49 : 45 Found scripting engine Groovy Scripting Engine 2 . 0 - Groovy 2 . 3 . 6 - language names : [ groovy , Groovy ] 
 + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . 
 + 
 + Smoke Test 
 + - - - - - - - - - - 
 + 
 + To test Groovy functionality , open cqlsh and execute the following command : 
 + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE groovy AS ' return " foo " ; ' ; 
 + 
 + If you get the error 
 + code = 2200 [ Invalid query ] message = " Invalid language groovy for ' foobar ' " 
 + Groovy for Apache Cassandra has not been installed correctly . 
 + 
 + Notes / Java7 invokedynamic 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + Groovy provides jars that support invokedynamic bytecode instruction . These jars are whose ending with 
 + " - indy . jar " . 
 diff - - git a / lib / jsr223 / jaskell / README . txt b / lib / jsr223 / jaskell / README . txt 
 new file mode 100644 
 index 0000000 . . 53e942e 
 - - - / dev / null 
 + + + b / lib / jsr223 / jaskell / README . txt 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + Apache Cassandra User - Defined - Functions JSR 223 scripting 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Unfortunately Jaskell JSR - 223 support is quite old and the Jaskell engine seems to be quite 
 + unsupported . If you find a solution , please open a ticket at Apache Cassandra JIRA . 
 diff - - git a / lib / jsr223 / jruby / README . txt b / lib / jsr223 / jruby / README . txt 
 new file mode 100644 
 index 0000000 . . cbc12dc 
 - - - / dev / null 
 + + + b / lib / jsr223 / jruby / README . txt 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + Apache Cassandra User - Defined - Functions JSR 223 scripting 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Using JSR - 223 capable JRuby 
 + 
 + Tested with version 1 . 7 . 15 
 + 
 + Installation 
 + - - - - - - - - - - - - 
 + 
 + 1 . Download JRuby binary release 
 + 2 . Unpack the downloaded archive into a temporary directory 
 + 3 . Copy everything from the JRuby lib directory to $ CASSANDRA _ HOME / lib / jsr223 / jruby 
 + 4 . Restart your Cassandra daemon if it ' s already running 
 + 
 + Cassandra log should contain a line like this : 
 + INFO 10 : 29 : 03 Found scripting engine JSR 223 JRuby Engine 1 . 7 . 15 - ruby jruby 1 . 7 . 15 - language names : [ ruby , jruby ] 
 + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . 
 + 
 + 
 + Smoke Test 
 + - - - - - - - - - - 
 + 
 + To test JRuby functionality , open cqlsh and execute the following command : 
 + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE ruby AS ' return " foo " ; ' ; 
 + 
 + If you get the error 
 + code = 2200 [ Invalid query ] message = " Invalid language ruby for ' foobar ' " 
 + JRuby for Apache Cassandra has not been installed correctly . 
 + 
 + 
 + Ruby require / include 
 + - - - - - - - - - - - - - - - - - - - - 
 + 
 + You can use Ruby require and include in your scripts as in the following example : 
 + 
 + 
 + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE ruby AS ' 
 + require " bigdecimal " 
 + require " bigdecimal / math " 
 + 
 + include BigMath 
 + 
 + a = BigDecimal ( ( PI ( 100 ) / 2 ) . to _ s ) 
 + 
 + return " foo " + a . to _ s ; 
 + ' ; 
 + 
 + 
 + Notes / Java7 invokedynamic 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + See JRuby wiki pages https : / / github . com / jruby / jruby / wiki / ConfiguringJRuby and 
 + https : / / github . com / jruby / jruby / wiki / PerformanceTuning for more information and optimization tips . 
 diff - - git a / lib / jsr223 / jython / README . txt b / lib / jsr223 / jython / README . txt 
 new file mode 100644 
 index 0000000 . . bef3c83 
 - - - / dev / null 
 + + + b / lib / jsr223 / jython / README . txt 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + Apache Cassandra User - Defined - Functions JSR 223 scripting 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Using JSR - 223 capable Jython 
 + 
 + Tested with version 2 . 3 . 5 
 + 
 + Installation 
 + - - - - - - - - - - - - 
 + 
 + 1 . Download Jython binary release 
 + 2 . Unpack the downloaded archive into a temporary directory 
 + 3 . Copy the jar jython . jar from the Jython directory to $ CASSANDRA _ HOME / lib / jsr223 / jython 
 + 4 . Restart your Cassandra daemon if it ' s already running 
 + 
 + Cassandra log should contain a line like this : 
 + INFO 10 : 58 : 18 Found scripting engine jython 2 . 5 . 3 - python 2 . 5 - language names : [ python , jython ] 
 + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . 
 + 
 + Smoke Test 
 + - - - - - - - - - - 
 + 
 + To test Jython functionality , open cqlsh and execute the following command : 
 + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE python AS ' ' ' foo ' ' ' ; 
 + 
 + If you get the error 
 + code = 2200 [ Invalid query ] message = " Invalid language python for ' foobar ' " 
 + Jython for Apache Cassandra has not been installed correctly . 
 + 
 + Notes / Java7 invokedynamic 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + Jython currently targets Java6 only . They want to switch to Java7 + invokedynamic in Jython 3 . 
 diff - - git a / lib / jsr223 / scala / README . txt b / lib / jsr223 / scala / README . txt 
 new file mode 100644 
 index 0000000 . . 7f5d6fe 
 - - - / dev / null 
 + + + b / lib / jsr223 / scala / README . txt 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + Apache Cassandra User - Defined - Functions JSR 223 scripting 
 + = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 + Using JSR - 223 capable Scala 
 + 
 + Tested with version 2 . 11 . 2 
 + 
 + Installation 
 + - - - - - - - - - - - - 
 + 
 + 1 . Download Scala binary release 
 + 2 . Unpack the downloaded archive into a temporary directory 
 + 3 . Copy the following jars from the Scala lib directory to $ CASSANDRA _ HOME / lib / jsr223 / scala 
 + scala - compiler . jar 
 + scala - library . jar 
 + scala - reflect . jar 
 + 4 . Restart your Cassandra daemon if it ' s already running 
 + 
 + Cassandra log should contain a line like this : 
 + INFO 11 : 42 : 35 Found scripting engine Scala Interpreter 1 . 0 - Scala version 2 . 11 . 2 - language names : [ scala ] 
 + Such a line appears when you already have scripted UDFs in your system or add a scripted UDF for the first time ( see below ) . 
 + 
 + Smoke Test 
 + - - - - - - - - - - 
 + 
 + To test Scala functionality , open cqlsh and execute the following command : 
 + CREATE OR REPLACE FUNCTION foobar ( input text ) RETURNS text LANGUAGE scala AS ' return " foo " ; ' ; 
 + 
 + If you get the error 
 + code = 2200 [ Invalid query ] message = " Invalid language scala for ' foobar ' " 
 + Scala for Apache Cassandra has not been installed correctly . 
 + 
 + Notes / Java7 invokedynamic 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + Scala 2 . 10 has Java6 support only . 2 . 11 has experimental invokedynamic support ( use at your own risk ! ) . 
 + 2 . 12 introduces an upgrade directly to Java8 - see https : / / stackoverflow . com / questions / 14285894 / advantages - of - scala - emitting - bytecode - for - the - jvm - 1 - 7 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
