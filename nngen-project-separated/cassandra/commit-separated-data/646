BLEU SCORE: 0.02383853510228548

TEST MSG: Added new task to Index which runs before joining
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 74a2372 . . e847f8b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Add a blocking task to Index , run before joining the ring ( CASSANDRA - 12039 ) <nl> * Fix NPE when using CQLSSTableWriter ( CASSANDRA - 12667 ) <nl> * Support optional backpressure strategies at the coordinator ( CASSANDRA - 9318 ) <nl> * Make randompartitioner work with new vnode allocation ( CASSANDRA - 12647 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 1b15f7d . . 708e839 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 18 , 6 + 18 , 8 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> New features <nl> - - - - - - - - - - - - <nl> + - An Index implementation may now provide a task which runs prior to joining <nl> + the ring . See CASSANDRA - 12039 <nl> - Filtering on partition key columns is now also supported for queries without <nl> secondary indexes . <nl> - A slow query log has been added : slow queries will be logged at DEBUG level . <nl> diff - - git a / src / java / org / apache / cassandra / index / Index . java b / src / java / org / apache / cassandra / index / Index . java <nl> index 4ffef1e . . e254555 100644 <nl> - - - a / src / java / org / apache / cassandra / index / Index . java <nl> + + + b / src / java / org / apache / cassandra / index / Index . java <nl> @ @ - 253 , 6 + 253 , 17 @ @ public interface Index <nl> public Callable < ? > getTruncateTask ( long truncatedAt ) ; <nl> <nl> / * * <nl> + * Return a task to be executed before the node enters NORMAL state and finally joins the ring . <nl> + * <nl> + * @ param hadBootstrap If the node had bootstrap before joining . <nl> + * @ return task to be executed by the index manager before joining the ring . <nl> + * / <nl> + default public Callable < ? > getPreJoinTask ( boolean hadBootstrap ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> * Return true if this index can be built or rebuilt when the index manager determines it is necessary . Returning <nl> * false enables the index implementation ( or some other component ) to control if and when SSTable data is <nl> * incorporated into the index . <nl> diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> index e06cab0 . . 6e36511 100644 <nl> - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java <nl> @ @ - 493 , 6 + 493 , 17 @ @ public class SecondaryIndexManager implements IndexRegistry <nl> } <nl> <nl> / * * <nl> + * Performs a blocking execution of pre - join tasks of all indexes <nl> + * / <nl> + public void executePreJoinTasksBlocking ( boolean hadBootstrap ) <nl> + { <nl> + logger . info ( " Executing pre - join { } tasks for : { } " , hadBootstrap ? " post - bootstrap " : " " , this . baseCfs ) ; <nl> + executeAllBlocking ( indexes . values ( ) . stream ( ) , ( index ) - > { <nl> + return index . getPreJoinTask ( hadBootstrap ) ; <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> * @ return all indexes which are marked as built and ready to use <nl> * / <nl> public List < String > getBuiltIndexNames ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index b33ac0e . . 24b10ea 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 29 , 6 + 29 , 8 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . regex . MatchResult ; <nl> import java . util . regex . Pattern ; <nl> + import java . util . stream . StreamSupport ; <nl> + <nl> import javax . annotation . Nullable ; <nl> import javax . management . * ; <nl> import javax . management . openmbean . TabularData ; <nl> @ @ - 38 , 7 + 40 , 9 @ @ import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . * ; <nl> import com . google . common . util . concurrent . * ; <nl> + <nl> import org . apache . commons . lang3 . StringUtils ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 858 , 7 + 862 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> <nl> boolean dataAvailable = true ; / / make this to false when bootstrap streaming failed <nl> - if ( shouldBootstrap ( ) ) <nl> + boolean bootstrap = shouldBootstrap ( ) ; <nl> + if ( bootstrap ) <nl> { <nl> if ( SystemKeyspace . bootstrapInProgress ( ) ) <nl> logger . warn ( " Detected previous bootstrap failure ; retrying " ) ; <nl> @ @ - 1000 , 8 + 1005 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> { <nl> if ( dataAvailable ) <nl> { <nl> - finishJoiningRing ( ) ; <nl> - <nl> + finishJoiningRing ( bootstrap ) ; <nl> / / remove the existing info about the replaced node . <nl> if ( ! current . isEmpty ( ) ) <nl> { <nl> @ @ - 1034 , 7 + 1038 , 13 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Gossiper . instance . addLocalApplicationState ( ApplicationState . RACK , StorageService . instance . valueFactory . rack ( rack ) ) ; <nl> } <nl> <nl> - public synchronized void joinRing ( ) throws IOException <nl> + public void joinRing ( ) throws IOException <nl> + { <nl> + SystemKeyspace . BootstrapState state = SystemKeyspace . getBootstrapState ( ) ; <nl> + joinRing ( state . equals ( SystemKeyspace . BootstrapState . IN _ PROGRESS ) ) ; <nl> + } <nl> + <nl> + private synchronized void joinRing ( boolean resumedBootstrap ) throws IOException <nl> { <nl> if ( ! joined ) <nl> { <nl> @ @ - 1051 , 15 + 1061 , 23 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> else if ( isSurveyMode ) <nl> { <nl> logger . info ( " Leaving write survey mode and joining ring at operator request " ) ; <nl> - finishJoiningRing ( ) ; <nl> + finishJoiningRing ( resumedBootstrap ) ; <nl> isSurveyMode = false ; <nl> } <nl> } <nl> <nl> - private void finishJoiningRing ( ) <nl> + private void executePreJoinTasks ( boolean bootstrap ) <nl> + { <nl> + StreamSupport . stream ( ColumnFamilyStore . all ( ) . spliterator ( ) , false ) <nl> + . filter ( cfs - > Schema . instance . getUserKeyspaces ( ) . contains ( cfs . keyspace . getName ( ) ) ) <nl> + . forEach ( cfs - > cfs . indexManager . executePreJoinTasksBlocking ( bootstrap ) ) ; <nl> + } <nl> + <nl> + private void finishJoiningRing ( boolean didBootstrap ) <nl> { <nl> / / start participating in the ring . <nl> SystemKeyspace . setBootstrapState ( SystemKeyspace . BootstrapState . COMPLETED ) ; <nl> + executePreJoinTasks ( didBootstrap ) ; <nl> setTokens ( bootstrapTokens ) ; <nl> <nl> assert tokenMetadata . sortedTokens ( ) . size ( ) > 0 ; <nl> @ @ - 1506 , 7 + 1524 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> try <nl> { <nl> progressSupport . progress ( " bootstrap " , ProgressEvent . createNotification ( " Joining ring . . . " ) ) ; <nl> - joinRing ( ) ; <nl> + joinRing ( true ) ; <nl> } <nl> catch ( IOException ignore ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index c178ee0 . . d9c322f 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 88 , 6 + 88 , 7 @ @ public class SchemaLoader <nl> String ks4 = testName + " Keyspace4 " ; <nl> String ks5 = testName + " Keyspace5 " ; <nl> String ks6 = testName + " Keyspace6 " ; <nl> + String ks7 = testName + " Keyspace7 " ; <nl> String ks _ kcs = testName + " KeyCacheSpace " ; <nl> String ks _ rcs = testName + " RowCacheSpace " ; <nl> String ks _ ccs = testName + " CounterCacheSpace " ; <nl> @ @ - 191 , 11 + 192 , 17 @ @ public class SchemaLoader <nl> schema . add ( KeyspaceMetadata . create ( ks5 , <nl> KeyspaceParams . simple ( 2 ) , <nl> Tables . of ( standardCFMD ( ks5 , " Standard1 " ) ) ) ) ; <nl> + <nl> / / Keyspace 6 <nl> schema . add ( KeyspaceMetadata . create ( ks6 , <nl> KeyspaceParams . simple ( 1 ) , <nl> Tables . of ( keysIndexCFMD ( ks6 , " Indexed1 " , true ) ) ) ) ; <nl> <nl> + / / Keyspace 7 <nl> + schema . add ( KeyspaceMetadata . create ( ks7 , <nl> + KeyspaceParams . simple ( 1 ) , <nl> + Tables . of ( customIndexCFMD ( ks7 , " Indexed1 " ) ) ) ) ; <nl> + <nl> / / KeyCacheSpace <nl> schema . add ( KeyspaceMetadata . create ( ks _ kcs , <nl> KeyspaceParams . simple ( 1 ) , <nl> @ @ - 455 , 6 + 462 , 7 @ @ public class SchemaLoader <nl> <nl> return cfm . compression ( getCompressionParameters ( ) ) ; <nl> } <nl> + <nl> public static CFMetaData keysIndexCFMD ( String ksName , String cfName , boolean withIndex ) throws ConfigurationException <nl> { <nl> CFMetaData cfm = CFMetaData . Builder . createDense ( ksName , cfName , false , false ) <nl> @ @ - 480 , 6 + 488 , 30 @ @ public class SchemaLoader <nl> return cfm . compression ( getCompressionParameters ( ) ) ; <nl> } <nl> <nl> + public static CFMetaData customIndexCFMD ( String ksName , String cfName ) throws ConfigurationException <nl> + { <nl> + CFMetaData cfm = CFMetaData . Builder . createDense ( ksName , cfName , false , false ) <nl> + . addPartitionKey ( " key " , AsciiType . instance ) <nl> + . addClusteringColumn ( " c1 " , AsciiType . instance ) <nl> + . addRegularColumn ( " value " , LongType . instance ) <nl> + . build ( ) ; <nl> + <nl> + cfm . indexes ( <nl> + cfm . getIndexes ( ) <nl> + . with ( IndexMetadata . fromIndexTargets ( cfm , <nl> + Collections . singletonList ( <nl> + new IndexTarget ( new ColumnIdentifier ( " value " , true ) , <nl> + IndexTarget . Type . VALUES ) ) , <nl> + " value _ index " , <nl> + IndexMetadata . Kind . CUSTOM , <nl> + Collections . singletonMap ( <nl> + IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , <nl> + StubIndex . class . getName ( ) ) ) ) ) ; <nl> + <nl> + <nl> + return cfm . compression ( getCompressionParameters ( ) ) ; <nl> + } <nl> + <nl> public static CFMetaData jdbcCFMD ( String ksName , String cfName , AbstractType comp ) <nl> { <nl> return CFMetaData . Builder . create ( ksName , cfName ) . addPartitionKey ( " key " , BytesType . instance ) <nl> diff - - git a / test / unit / org / apache / cassandra / index / StubIndex . java b / test / unit / org / apache / cassandra / index / StubIndex . java <nl> index 0b7b32f . . 92efee5 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / StubIndex . java <nl> + + + b / test / unit / org / apache / cassandra / index / StubIndex . java <nl> @ @ - 51 , 6 + 51 , 7 @ @ public class StubIndex implements Index <nl> public List < Row > rowsInserted = new ArrayList < > ( ) ; <nl> public List < Row > rowsDeleted = new ArrayList < > ( ) ; <nl> public List < Pair < Row , Row > > rowsUpdated = new ArrayList < > ( ) ; <nl> + public volatile boolean preJoinInvocation ; <nl> private IndexMetadata indexMetadata ; <nl> private ColumnFamilyStore baseCfs ; <nl> <nl> @ @ - 171 , 6 + 172 , 14 @ @ public class StubIndex implements Index <nl> return null ; <nl> } <nl> <nl> + public Callable < ? > getPreJoinTask ( boolean hadBootstrap ) <nl> + { <nl> + return ( ) - > { <nl> + preJoinInvocation = true ; <nl> + return null ; <nl> + } ; <nl> + } <nl> + <nl> public Callable < ? > getInvalidateTask ( ) <nl> { <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / service / JoinTokenRingTest . java b / test / unit / org / apache / cassandra / service / JoinTokenRingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 866910e <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / JoinTokenRingTest . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . io . IOException ; <nl> + <nl> + import org . junit . Assert ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . index . SecondaryIndexManager ; <nl> + import org . apache . cassandra . index . StubIndex ; <nl> + <nl> + public class JoinTokenRingTest <nl> + { <nl> + @ BeforeClass <nl> + public static void setup ( ) throws ConfigurationException <nl> + { <nl> + DatabaseDescriptor . daemonInitialization ( ) ; <nl> + SchemaLoader . startGossiper ( ) ; <nl> + SchemaLoader . prepareServer ( ) ; <nl> + SchemaLoader . schemaDefinition ( " JoinTokenRingTest " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIndexPreJoinInvocation ( ) throws IOException <nl> + { <nl> + StorageService ss = StorageService . instance ; <nl> + ss . joinRing ( ) ; <nl> + <nl> + SecondaryIndexManager indexManager = ColumnFamilyStore . getIfExists ( " JoinTokenRingTestKeyspace7 " , " Indexed1 " ) . indexManager ; <nl> + StubIndex stub = ( StubIndex ) indexManager . getIndexByName ( " value _ index " ) ; <nl> + Assert . assertTrue ( stub . preJoinInvocation ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 74a2372 . . e847f8b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Add a blocking task to Index , run before joining the ring ( CASSANDRA - 12039 ) 
 * Fix NPE when using CQLSSTableWriter ( CASSANDRA - 12667 ) 
 * Support optional backpressure strategies at the coordinator ( CASSANDRA - 9318 ) 
 * Make randompartitioner work with new vnode allocation ( CASSANDRA - 12647 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 1b15f7d . . 708e839 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 18 , 6 + 18 , 8 @ @ using the provided ' sstableupgrade ' tool . 
 
 New features 
 - - - - - - - - - - - - 
 + - An Index implementation may now provide a task which runs prior to joining 
 + the ring . See CASSANDRA - 12039 
 - Filtering on partition key columns is now also supported for queries without 
 secondary indexes . 
 - A slow query log has been added : slow queries will be logged at DEBUG level . 
 diff - - git a / src / java / org / apache / cassandra / index / Index . java b / src / java / org / apache / cassandra / index / Index . java 
 index 4ffef1e . . e254555 100644 
 - - - a / src / java / org / apache / cassandra / index / Index . java 
 + + + b / src / java / org / apache / cassandra / index / Index . java 
 @ @ - 253 , 6 + 253 , 17 @ @ public interface Index 
 public Callable < ? > getTruncateTask ( long truncatedAt ) ; 
 
 / * * 
 + * Return a task to be executed before the node enters NORMAL state and finally joins the ring . 
 + * 
 + * @ param hadBootstrap If the node had bootstrap before joining . 
 + * @ return task to be executed by the index manager before joining the ring . 
 + * / 
 + default public Callable < ? > getPreJoinTask ( boolean hadBootstrap ) 
 + { 
 + return null ; 
 + } 
 + 
 + / * * 
 * Return true if this index can be built or rebuilt when the index manager determines it is necessary . Returning 
 * false enables the index implementation ( or some other component ) to control if and when SSTable data is 
 * incorporated into the index . 
 diff - - git a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 index e06cab0 . . 6e36511 100644 
 - - - a / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / index / SecondaryIndexManager . java 
 @ @ - 493 , 6 + 493 , 17 @ @ public class SecondaryIndexManager implements IndexRegistry 
 } 
 
 / * * 
 + * Performs a blocking execution of pre - join tasks of all indexes 
 + * / 
 + public void executePreJoinTasksBlocking ( boolean hadBootstrap ) 
 + { 
 + logger . info ( " Executing pre - join { } tasks for : { } " , hadBootstrap ? " post - bootstrap " : " " , this . baseCfs ) ; 
 + executeAllBlocking ( indexes . values ( ) . stream ( ) , ( index ) - > { 
 + return index . getPreJoinTask ( hadBootstrap ) ; 
 + } ) ; 
 + } 
 + 
 + / * * 
 * @ return all indexes which are marked as built and ready to use 
 * / 
 public List < String > getBuiltIndexNames ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index b33ac0e . . 24b10ea 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 29 , 6 + 29 , 8 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . regex . MatchResult ; 
 import java . util . regex . Pattern ; 
 + import java . util . stream . StreamSupport ; 
 + 
 import javax . annotation . Nullable ; 
 import javax . management . * ; 
 import javax . management . openmbean . TabularData ; 
 @ @ - 38 , 7 + 40 , 9 @ @ import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . * ; 
 import com . google . common . util . concurrent . * ; 
 + 
 import org . apache . commons . lang3 . StringUtils ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 858 , 7 + 862 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 
 boolean dataAvailable = true ; / / make this to false when bootstrap streaming failed 
 - if ( shouldBootstrap ( ) ) 
 + boolean bootstrap = shouldBootstrap ( ) ; 
 + if ( bootstrap ) 
 { 
 if ( SystemKeyspace . bootstrapInProgress ( ) ) 
 logger . warn ( " Detected previous bootstrap failure ; retrying " ) ; 
 @ @ - 1000 , 8 + 1005 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 { 
 if ( dataAvailable ) 
 { 
 - finishJoiningRing ( ) ; 
 - 
 + finishJoiningRing ( bootstrap ) ; 
 / / remove the existing info about the replaced node . 
 if ( ! current . isEmpty ( ) ) 
 { 
 @ @ - 1034 , 7 + 1038 , 13 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Gossiper . instance . addLocalApplicationState ( ApplicationState . RACK , StorageService . instance . valueFactory . rack ( rack ) ) ; 
 } 
 
 - public synchronized void joinRing ( ) throws IOException 
 + public void joinRing ( ) throws IOException 
 + { 
 + SystemKeyspace . BootstrapState state = SystemKeyspace . getBootstrapState ( ) ; 
 + joinRing ( state . equals ( SystemKeyspace . BootstrapState . IN _ PROGRESS ) ) ; 
 + } 
 + 
 + private synchronized void joinRing ( boolean resumedBootstrap ) throws IOException 
 { 
 if ( ! joined ) 
 { 
 @ @ - 1051 , 15 + 1061 , 23 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 else if ( isSurveyMode ) 
 { 
 logger . info ( " Leaving write survey mode and joining ring at operator request " ) ; 
 - finishJoiningRing ( ) ; 
 + finishJoiningRing ( resumedBootstrap ) ; 
 isSurveyMode = false ; 
 } 
 } 
 
 - private void finishJoiningRing ( ) 
 + private void executePreJoinTasks ( boolean bootstrap ) 
 + { 
 + StreamSupport . stream ( ColumnFamilyStore . all ( ) . spliterator ( ) , false ) 
 + . filter ( cfs - > Schema . instance . getUserKeyspaces ( ) . contains ( cfs . keyspace . getName ( ) ) ) 
 + . forEach ( cfs - > cfs . indexManager . executePreJoinTasksBlocking ( bootstrap ) ) ; 
 + } 
 + 
 + private void finishJoiningRing ( boolean didBootstrap ) 
 { 
 / / start participating in the ring . 
 SystemKeyspace . setBootstrapState ( SystemKeyspace . BootstrapState . COMPLETED ) ; 
 + executePreJoinTasks ( didBootstrap ) ; 
 setTokens ( bootstrapTokens ) ; 
 
 assert tokenMetadata . sortedTokens ( ) . size ( ) > 0 ; 
 @ @ - 1506 , 7 + 1524 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 try 
 { 
 progressSupport . progress ( " bootstrap " , ProgressEvent . createNotification ( " Joining ring . . . " ) ) ; 
 - joinRing ( ) ; 
 + joinRing ( true ) ; 
 } 
 catch ( IOException ignore ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index c178ee0 . . d9c322f 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 88 , 6 + 88 , 7 @ @ public class SchemaLoader 
 String ks4 = testName + " Keyspace4 " ; 
 String ks5 = testName + " Keyspace5 " ; 
 String ks6 = testName + " Keyspace6 " ; 
 + String ks7 = testName + " Keyspace7 " ; 
 String ks _ kcs = testName + " KeyCacheSpace " ; 
 String ks _ rcs = testName + " RowCacheSpace " ; 
 String ks _ ccs = testName + " CounterCacheSpace " ; 
 @ @ - 191 , 11 + 192 , 17 @ @ public class SchemaLoader 
 schema . add ( KeyspaceMetadata . create ( ks5 , 
 KeyspaceParams . simple ( 2 ) , 
 Tables . of ( standardCFMD ( ks5 , " Standard1 " ) ) ) ) ; 
 + 
 / / Keyspace 6 
 schema . add ( KeyspaceMetadata . create ( ks6 , 
 KeyspaceParams . simple ( 1 ) , 
 Tables . of ( keysIndexCFMD ( ks6 , " Indexed1 " , true ) ) ) ) ; 
 
 + / / Keyspace 7 
 + schema . add ( KeyspaceMetadata . create ( ks7 , 
 + KeyspaceParams . simple ( 1 ) , 
 + Tables . of ( customIndexCFMD ( ks7 , " Indexed1 " ) ) ) ) ; 
 + 
 / / KeyCacheSpace 
 schema . add ( KeyspaceMetadata . create ( ks _ kcs , 
 KeyspaceParams . simple ( 1 ) , 
 @ @ - 455 , 6 + 462 , 7 @ @ public class SchemaLoader 
 
 return cfm . compression ( getCompressionParameters ( ) ) ; 
 } 
 + 
 public static CFMetaData keysIndexCFMD ( String ksName , String cfName , boolean withIndex ) throws ConfigurationException 
 { 
 CFMetaData cfm = CFMetaData . Builder . createDense ( ksName , cfName , false , false ) 
 @ @ - 480 , 6 + 488 , 30 @ @ public class SchemaLoader 
 return cfm . compression ( getCompressionParameters ( ) ) ; 
 } 
 
 + public static CFMetaData customIndexCFMD ( String ksName , String cfName ) throws ConfigurationException 
 + { 
 + CFMetaData cfm = CFMetaData . Builder . createDense ( ksName , cfName , false , false ) 
 + . addPartitionKey ( " key " , AsciiType . instance ) 
 + . addClusteringColumn ( " c1 " , AsciiType . instance ) 
 + . addRegularColumn ( " value " , LongType . instance ) 
 + . build ( ) ; 
 + 
 + cfm . indexes ( 
 + cfm . getIndexes ( ) 
 + . with ( IndexMetadata . fromIndexTargets ( cfm , 
 + Collections . singletonList ( 
 + new IndexTarget ( new ColumnIdentifier ( " value " , true ) , 
 + IndexTarget . Type . VALUES ) ) , 
 + " value _ index " , 
 + IndexMetadata . Kind . CUSTOM , 
 + Collections . singletonMap ( 
 + IndexTarget . CUSTOM _ INDEX _ OPTION _ NAME , 
 + StubIndex . class . getName ( ) ) ) ) ) ; 
 + 
 + 
 + return cfm . compression ( getCompressionParameters ( ) ) ; 
 + } 
 + 
 public static CFMetaData jdbcCFMD ( String ksName , String cfName , AbstractType comp ) 
 { 
 return CFMetaData . Builder . create ( ksName , cfName ) . addPartitionKey ( " key " , BytesType . instance ) 
 diff - - git a / test / unit / org / apache / cassandra / index / StubIndex . java b / test / unit / org / apache / cassandra / index / StubIndex . java 
 index 0b7b32f . . 92efee5 100644 
 - - - a / test / unit / org / apache / cassandra / index / StubIndex . java 
 + + + b / test / unit / org / apache / cassandra / index / StubIndex . java 
 @ @ - 51 , 6 + 51 , 7 @ @ public class StubIndex implements Index 
 public List < Row > rowsInserted = new ArrayList < > ( ) ; 
 public List < Row > rowsDeleted = new ArrayList < > ( ) ; 
 public List < Pair < Row , Row > > rowsUpdated = new ArrayList < > ( ) ; 
 + public volatile boolean preJoinInvocation ; 
 private IndexMetadata indexMetadata ; 
 private ColumnFamilyStore baseCfs ; 
 
 @ @ - 171 , 6 + 172 , 14 @ @ public class StubIndex implements Index 
 return null ; 
 } 
 
 + public Callable < ? > getPreJoinTask ( boolean hadBootstrap ) 
 + { 
 + return ( ) - > { 
 + preJoinInvocation = true ; 
 + return null ; 
 + } ; 
 + } 
 + 
 public Callable < ? > getInvalidateTask ( ) 
 { 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / service / JoinTokenRingTest . java b / test / unit / org / apache / cassandra / service / JoinTokenRingTest . java 
 new file mode 100644 
 index 0000000 . . 866910e 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / JoinTokenRingTest . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . service ; 
 + 
 + import java . io . IOException ; 
 + 
 + import org . junit . Assert ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . index . SecondaryIndexManager ; 
 + import org . apache . cassandra . index . StubIndex ; 
 + 
 + public class JoinTokenRingTest 
 + { 
 + @ BeforeClass 
 + public static void setup ( ) throws ConfigurationException 
 + { 
 + DatabaseDescriptor . daemonInitialization ( ) ; 
 + SchemaLoader . startGossiper ( ) ; 
 + SchemaLoader . prepareServer ( ) ; 
 + SchemaLoader . schemaDefinition ( " JoinTokenRingTest " ) ; 
 + } 
 + 
 + @ Test 
 + public void testIndexPreJoinInvocation ( ) throws IOException 
 + { 
 + StorageService ss = StorageService . instance ; 
 + ss . joinRing ( ) ; 
 + 
 + SecondaryIndexManager indexManager = ColumnFamilyStore . getIfExists ( " JoinTokenRingTestKeyspace7 " , " Indexed1 " ) . indexManager ; 
 + StubIndex stub = ( StubIndex ) indexManager . getIndexByName ( " value _ index " ) ; 
 + Assert . assertTrue ( stub . preJoinInvocation ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

