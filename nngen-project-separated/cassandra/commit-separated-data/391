BLEU SCORE: 0.041961149062965476

TEST MSG: Reject multiple values for a key in CQL grammar .
GENERATED MSG: CQL : keyspace creation

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6603911 . . 3166780 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 . 0 <nl> + * Reject multiple values for a key in CQL grammar . ( CASSANDRA - 13369 ) <nl> * UDA fails without input rows ( CASSANDRA - 13399 ) <nl> * Fix compaction - stress by using daemonInitialization ( CASSANDRA - 13188 ) <nl> * V5 protocol flags decoding broken ( CASSANDRA - 13443 ) <nl> diff - - git a / src / antlr / Parser . g b / src / antlr / Parser . g <nl> index 3d06dc3 . . e5b7584 100644 <nl> - - - a / src / antlr / Parser . g <nl> + + + b / src / antlr / Parser . g <nl> @ @ - 127 , 7 + 127 , 10 @ @ options { <nl> break ; <nl> } <nl> <nl> - res . put ( ( ( Constants . Literal ) entry . left ) . getRawText ( ) , ( ( Constants . Literal ) entry . right ) . getRawText ( ) ) ; <nl> + if ( res . put ( ( ( Constants . Literal ) entry . left ) . getRawText ( ) , ( ( Constants . Literal ) entry . right ) . getRawText ( ) ) ! = null ) <nl> + { <nl> + addRecognitionError ( String . format ( " Multiple definition for property " + ( ( Constants . Literal ) entry . left ) . getRawText ( ) ) ) ; <nl> + } <nl> } <nl> <nl> return res ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java <nl> index 4b76dbc . . 4871c09 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . antlr . runtime . CharStream ; <nl> import org . antlr . runtime . CommonTokenStream ; <nl> import org . antlr . runtime . RecognitionException ; <nl> import org . antlr . runtime . TokenStream ; <nl> + import org . apache . cassandra . cql3 . statements . PropertyDefinitions ; <nl> <nl> import static org . junit . Assert . * ; <nl> <nl> @ @ - 75 , 6 + 76 , 35 @ @ public class CqlParserTest <nl> assertEquals ( 0 , secondCounter . count ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDuplicateProperties ( ) throws Exception <nl> + { <nl> + parseAndCountErrors ( " properties = { ' foo ' : ' value1 ' , ' bar ' : ' value2 ' } ; " , 0 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; <nl> + parseAndCountErrors ( " properties = { ' foo ' : ' value1 ' , ' foo ' : ' value2 ' } ; " , 1 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; <nl> + parseAndCountErrors ( " foo = ' value1 ' AND bar = ' value2 ' } ; " , 0 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; <nl> + parseAndCountErrors ( " foo = ' value1 ' AND foo = ' value2 ' } ; " , 1 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; <nl> + } <nl> + <nl> + private void parseAndCountErrors ( String cql , int expectedErrors , ParserOperation operation ) throws RecognitionException <nl> + { <nl> + SyntaxErrorCounter counter = new SyntaxErrorCounter ( ) ; <nl> + CharStream stream = new ANTLRStringStream ( cql ) ; <nl> + CqlLexer lexer = new CqlLexer ( stream ) ; <nl> + TokenStream tokenStream = new CommonTokenStream ( lexer ) ; <nl> + CqlParser parser = new CqlParser ( tokenStream ) ; <nl> + parser . addErrorListener ( counter ) ; <nl> + <nl> + operation . perform ( parser ) ; <nl> + <nl> + assertEquals ( expectedErrors , counter . count ) ; <nl> + } <nl> + <nl> + @ FunctionalInterface <nl> + private interface ParserOperation <nl> + { <nl> + void perform ( CqlParser cqlParser ) throws RecognitionException ; <nl> + } <nl> + <nl> private static final class SyntaxErrorCounter implements ErrorListener <nl> { <nl> private int count ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> index 2d34967 . . b0ee566 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java <nl> @ @ - 229 , 6 + 229 , 25 @ @ public class AlterTest extends CQLTester <nl> " max _ threshold " , " 32 " ) ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testAlterKeyspaceWithMultipleInstancesOfSameDCThrowsSyntaxException ( ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + / / Create a keyspace <nl> + execute ( " CREATE KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 2 } " ) ; <nl> + <nl> + / / try modifying the keyspace <nl> + assertInvalidThrow ( SyntaxException . class , " ALTER KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 2 , ' dc1 ' : 3 } " ) ; <nl> + execute ( " ALTER KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 3 } " ) ; <nl> + } <nl> + finally <nl> + { <nl> + / / clean - up <nl> + execute ( " DROP KEYSPACE IF EXISTS testABC " ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Test for bug of 5232 , <nl> * migrated from cql _ tests . py : TestCQL . alter _ bug _ test ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java <nl> index bb6ead9 . . 3eaec23 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java <nl> @ @ - 499 , 6 + 499 , 20 @ @ public class CreateTest extends CQLTester <nl> execute ( " DROP KEYSPACE testXYZ " ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testCreateKeyspaceWithMultipleInstancesOfSameDCThrowsException ( ) throws Throwable <nl> + { <nl> + try <nl> + { <nl> + assertInvalidThrow ( SyntaxException . class , " CREATE KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 2 , ' dc1 ' : 3 } " ) ; <nl> + } <nl> + finally <nl> + { <nl> + / / clean - up <nl> + execute ( " DROP KEYSPACE IF EXISTS testABC " ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Test create and drop table <nl> * migrated from cql _ tests . py : TestCQL . table _ test ( )
NEAREST DIFF (one line): diff - - git a / doc / cql / CQL . html b / doc / cql / CQL . html <nl> index 30a50aa . . 1a13a12 100644 <nl> - - - a / doc / cql / CQL . html <nl> + + + b / doc / cql / CQL . html <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - < ? xml version = ' 1 . 0 ' encoding = ' utf - 8 ' ? > < ! DOCTYPE html PUBLIC " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN " " http : / / www . w3 . org / TR / xhtml1 / DTD / xhtml1 - transitional . dtd " > < html xmlns = " http : / / www . w3 . org / 1999 / xhtml " > < head > < meta http - equiv = " Content - Type " content = " text / html ; charset = utf - 8 " / > < / head > < body > < h1 id = " CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / h1 > < h2 id = " TableofContents " > Table of Contents < / h2 > < ol style = " list - style : none ; " > < li > < a href = " # CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / a > < ol style = " list - style : none ; " > < li > < a href = " # TableofContents " > Table of Contents < / a > < / li > < li > < a href = " # USE " > USE < / a > < / li > < li > < a href = " # SELECT " > SELECT < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel " > Consistency Level < / a > < / li > < li > < a href = " # Filteringrows " > Filtering rows < / a > < / li > < li > < a href = " # Limits " > Limits < / a > < / li > < / ol > < / li > < li > < a href = " # UPDATE " > UPDATE < / a > < ol style = " list - style : none ; " > < li > < a href = " # ColumnFamily2 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel2 " > Consistency Level < / a > < / li > < li > < a href = " # SpecifyingColumnsandRow " > Specifying Columns and Row < / a > < / li > < / ol > < / li > < li > < a href = " # DELETE " > DELETE < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns2 " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily3 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel3 " > Consistency Level < / a > < / li > < li > < a href = " # deleterows " > Specifying Rows < / a > < / li > < / ol > < / li > < li > < a href = " # TRUNCATE " > TRUNCATE < / a > < / li > < li > < a href = " # CommonIdioms " > Common Idioms < / a > < ol style = " list - style : none ; " > < li > < a href = " # consistency " > Specifying Consistency < / a > < / li > < li > < a href = " # terms " > Term specification < / a > < ol style = " list - style : none ; " > < li > < a href = " # StringLiterals " > String Literals < / a > < / li > < li > < a href = " # Integerslongs " > Integers / longs < / a > < / li > < / ol > < / li > < / ol > < / li > < / ol > < / li > < / ol > < h2 id = " USE " > USE < / h2 > < p > < i > Synopsis : < / i > < / p > < pre > < code > USE & lt ; KEYSPACE & gt ; ; <nl> + < ? xml version = ' 1 . 0 ' encoding = ' utf - 8 ' ? > < ! DOCTYPE html PUBLIC " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN " " http : / / www . w3 . org / TR / xhtml1 / DTD / xhtml1 - transitional . dtd " > < html xmlns = " http : / / www . w3 . org / 1999 / xhtml " > < head > < meta http - equiv = " Content - Type " content = " text / html ; charset = utf - 8 " / > < / head > < body > < h1 id = " CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / h1 > < h2 id = " TableofContents " > Table of Contents < / h2 > < ol style = " list - style : none ; " > < li > < a href = " # CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / a > < ol style = " list - style : none ; " > < li > < a href = " # TableofContents " > Table of Contents < / a > < / li > < li > < a href = " # USE " > USE < / a > < / li > < li > < a href = " # SELECT " > SELECT < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel " > Consistency Level < / a > < / li > < li > < a href = " # Filteringrows " > Filtering rows < / a > < / li > < li > < a href = " # Limits " > Limits < / a > < / li > < / ol > < / li > < li > < a href = " # UPDATE " > UPDATE < / a > < ol style = " list - style : none ; " > < li > < a href = " # ColumnFamily2 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel2 " > Consistency Level < / a > < / li > < li > < a href = " # SpecifyingColumnsandRow " > Specifying Columns and Row < / a > < / li > < / ol > < / li > < li > < a href = " # DELETE " > DELETE < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns2 " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily3 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel3 " > Consistency Level < / a > < / li > < li > < a href = " # deleterows " > Specifying Rows < / a > < / li > < / ol > < / li > < li > < a href = " # TRUNCATE " > TRUNCATE < / a > < / li > < li > < a href = " # CREATEKEYSPACE " > CREATE KEYSPACE < / a > < / li > < li > < a href = " # CommonIdioms " > Common Idioms < / a > < ol style = " list - style : none ; " > < li > < a href = " # consistency " > Specifying Consistency < / a > < / li > < li > < a href = " # terms " > Term specification < / a > < ol style = " list - style : none ; " > < li > < a href = " # StringLiterals " > String Literals < / a > < / li > < li > < a href = " # Integerslongs " > Integers / longs < / a > < / li > < / ol > < / li > < / ol > < / li > < / ol > < / li > < / ol > < h2 id = " USE " > USE < / h2 > < p > < i > Synopsis : < / i > < / p > < pre > < code > USE & lt ; KEYSPACE & gt ; ; <nl> < / code > < / pre > < p > A < code > USE < / code > statement consists of the < code > USE < / code > keyword , followed by a valid keyspace name . Its purpose is to assign the per - connection , current working keyspace . All subsequent keyspace - specific actions will be performed in the context of the supplied value . < / p > < h2 id = " SELECT " > SELECT < / h2 > < p > < i > Synopsis : < / i > < / p > < pre > < code > SELECT [ FIRST N ] [ REVERSED ] & lt ; SELECT EXPR & gt ; FROM & lt ; COLUMN FAMILY & gt ; [ USING & lt ; CONSISTENCY & gt ; ] <nl> [ WHERE & lt ; CLAUSE & gt ; ] [ LIMIT N ] ; <nl> < / code > < / pre > < p > A < code > SELECT < / code > is used to read one or more records from a Cassandra column family . It returns a result - set of rows , where each row consists of a key and a collection of columns corresponding to the query . < / p > < h3 id = " SpecifyingColumns " > Specifying Columns < / h3 > < pre > < code > SELECT [ FIRST N ] [ REVERSED ] name1 , name2 , name3 FROM . . . <nl> @ @ - 21 , 10 + 21 , 12 @ @ APPLY BATCH <nl> < / code > < / pre > < p > When batching UPDATEs , a single consistency level is used for the entire batch , it appears after the < code > BEGIN BATCH < / code > statement , and uses the standard < a href = " # consistency " > consistency level specification < / a > . Batch UPDATEs default to < code > CONSISTENCY . ONE < / code > when left unspecified . < / p > < p > < em > NOTE : While there are no isolation guarantees , < code > UPDATE < / code > queries are atomic within a give record . < / em > < / p > < h2 id = " DELETE " > DELETE < / h2 > < p > < em > Synopsis : < / em > < / p > < pre > < code > DELETE [ COLUMNS ] FROM & lt ; COLUMN FAMILY & gt ; [ USING & lt ; CONSISTENCY & gt ; ] WHERE KEY = keyname1 <nl> DELETE [ COLUMNS ] FROM & lt ; COLUMN FAMILY & gt ; [ USING & lt ; CONSISTENCY & gt ; ] WHERE KEY IN ( keyname1 , keyname2 ) ; <nl> < / code > < / pre > < p > A < code > DELETE < / code > is used to perform the removal of one or more columns from one or more rows . < / p > < h3 id = " SpecifyingColumns2 " > Specifying Columns < / h3 > < pre > < code > DELETE [ COLUMNS ] . . . <nl> - < / code > < / pre > < p > Following the < code > DELETE < / code > keyword is an optional comma - delimited list of column name terms . When no column names are specified , the remove applies to the entire row ( s ) matched by the < a href = " # deleterows " > < code > WHERE < / code > clause < / a > < / p > < h3 id = " ColumnFamily3 " > Column Family < / h3 > < pre > < code > DELETE . . . FROM & lt ; COLUMN FAMILY & gt ; . . . <nl> + < / code > < / pre > < p > Following the < code > DELETE < / code > keyword is an optional comma - delimited list of column name terms . When no column names are specified , the remove applies to the entire row ( s ) matched by the < a href = " # deleterows " > WHERE clause < / a > < / p > < h3 id = " ColumnFamily3 " > Column Family < / h3 > < pre > < code > DELETE . . . FROM & lt ; COLUMN FAMILY & gt ; . . . <nl> < / code > < / pre > < p > The column family name follows the list of column names . < / p > < h3 id = " ConsistencyLevel3 " > Consistency Level < / h3 > < pre > < code > UPDATE . . . [ USING & lt ; CONSISTENCY & gt ; ] . . . <nl> < / code > < / pre > < p > Following the column family identifier is an optional < a href = " # consistency " > consistency level specification < / a > . < / p > < h3 id = " deleterows " > Specifying Rows < / h3 > < pre > < code > UPDATE . . . WHERE KEY = keyname1 <nl> UPDATE . . . WHERE KEY IN ( keyname1 , keyname2 ) <nl> < / code > < / pre > < p > The < code > WHERE < / code > clause is used to determine which row ( s ) a < code > DELETE < / code > applies to . The first form allows the specification of a single keyname using the < code > KEY < / code > keyword and the < code > = < / code > operator . The second form allows a list of keyname terms to be specified using the < code > IN < / code > notation and a parenthesized list of comma - delimited keyname terms . < / p > < h2 id = " TRUNCATE " > TRUNCATE < / h2 > < p > < em > Synopsis : < / em > < / p > < pre > < code > TRUNCATE & lt ; COLUMN FAMILY & gt ; <nl> - < / code > < / pre > < p > Accepts a single argument for the column family name , and permanently removes all data from said column family . < / p > < h2 id = " CommonIdioms " > Common Idioms < / h2 > < h3 id = " consistency " > Specifying Consistency < / h3 > < pre > < code > . . . USING & lt ; CONSISTENCY & gt ; . . . <nl> + < / code > < / pre > < p > Accepts a single argument for the column family name , and permanently removes all data from said column family . < / p > < h2 id = " CREATEKEYSPACE " > CREATE KEYSPACE < / h2 > < p > < em > Synopsis : < / em > < / p > < pre > < code > CREATE KEYSPACE & lt ; NAME & gt ; WITH replication _ factor = & lt ; NUM & gt ; AND strategy _ class = " & lt ; STRATEGY & gt ; " <nl> + [ AND strategy _ options . & lt ; OPTION & gt ; = & lt ; VALUE & gt ; [ AND strategy _ options . & lt ; OPTION & gt ; = & lt ; VALUE & gt ; ] ] ; <nl> + < / code > < / pre > < p > The < code > CREATE KEYSPACE < / code > statement creates a new top - level namespace ( aka & # 8220 ; keyspace & # 8221 ; ) . Valid names are any string constructed of alphanumeric characters and underscores , but must begin with a letter . Properties such as replication strategy and count are specified during creation using the following accepted keyword arguments : < / p > < table > < tr > < th > keyword < / th > < th > required < / th > < th > description < / th > < / tr > < tr > < td > replication _ factor < / td > < td > yes < / td > < td > Numeric argument that specifies the number of replicas for this keyspace . < / td > < / tr > < tr > < td > strategy _ class < / td > < td > yes < / td > < td > Class name to use for managing replica placement . Any of the shipped strategies can be used by specifying the class name relative to org . apache . cassandra . locator , others will need to be fully - qualified and located on the classpath . < / td > < / tr > < tr > < td > strategy _ options < / td > < td > no < / td > < td > Some strategies require additional arguments which can be supplied by appending the option name to the < code > strategy _ options < / code > keyword , separated by a colon ( < code > : < / code > ) . For example , a strategy option of & # 8220 ; DC1 & # 8221 ; with a value of & # 8220 ; 1 & # 8221 ; would be specified as < code > strategy _ options : DC1 = " 1 " < / code > . < / td > < / tr > < / table > < h2 id = " CommonIdioms " > Common Idioms < / h2 > < h3 id = " consistency " > Specifying Consistency < / h3 > < pre > < code > . . . USING & lt ; CONSISTENCY & gt ; . . . <nl> < / code > < / pre > < p > Consistency level specifications are made up the keyword < code > USING < / code > , followed by a consistency level identifier . Valid consistency levels are as follows : < / p > < ul > < li > < code > CONSISTENCY . ZERO < / code > < / li > < li > < code > CONSISTENCY . ONE < / code > ( default ) < / li > < li > < code > CONSISTENCY . QUORUM < / code > < / li > < li > < code > CONSISTENCY . ALL < / code > < / li > < li > < code > CONSISTENCY . DCQUORUM < / code > < / li > < li > < code > CONSISTENCY . DCQUORUMSYNC < / code > < / li > < / ul > < h3 id = " terms " > Term specification < / h3 > < p > Where possible , the type of terms are inferred ; the following term types are supported : < / p > < h4 id = " StringLiterals " > String Literals < / h4 > < p > String literals are any value enclosed in double - quotes , ( ` " ` ) . String literals are treated as raw bytes ; no interpolation is performed . < / p > < h4 id = " Integerslongs " > Integers / longs < / h4 > < p > Integers are any term consisting soley of unquoted numericals , longs are any otherwise valid integer term followed by an upper case & # 8220 ; L & # 8221 ; , ( e . g . 100L ) . It is an error to specify an integer term that will not fit in 4 bytes unsigned , or a long that will not fit in 8 bytes unsigned . < / p > < / body > < / html > <nl> \ No newline at end of file <nl> diff - - git a / doc / cql / CQL . textile b / doc / cql / CQL . textile <nl> index a7479ca . . 1d82664 100644 <nl> - - - a / doc / cql / CQL . textile <nl> + + + b / doc / cql / CQL . textile <nl> @ @ - 160 , 6 + 160 , 21 @ @ TRUNCATE < COLUMN FAMILY > <nl> <nl> Accepts a single argument for the column family name , and permanently removes all data from said column family . <nl> <nl> + h2 . CREATE KEYSPACE <nl> + <nl> + _ Synopsis : _ <nl> + <nl> + bc . <nl> + CREATE KEYSPACE < NAME > WITH replication _ factor = < NUM > AND strategy _ class = " < STRATEGY > " <nl> + [ AND strategy _ options . < OPTION > = < VALUE > [ AND strategy _ options . < OPTION > = < VALUE > ] ] ; <nl> + <nl> + The @ CREATE KEYSPACE @ statement creates a new top - level namespace ( aka " keyspace " ) . Valid names are any string constructed of alphanumeric characters and underscores , but must begin with a letter . Properties such as replication strategy and count are specified during creation using the following accepted keyword arguments : <nl> + <nl> + | _ . keyword | _ . required | _ . description | <nl> + | replication _ factor | yes | Numeric argument that specifies the number of replicas for this keyspace . | <nl> + | strategy _ class | yes | Class name to use for managing replica placement . Any of the shipped strategies can be used by specifying the class name relative to org . apache . cassandra . locator , others will need to be fully - qualified and located on the classpath . | <nl> + | strategy _ options | no | Some strategies require additional arguments which can be supplied by appending the option name to the @ strategy _ options @ keyword , separated by a colon ( @ : @ ) . For example , a strategy option of " DC1 " with a value of " 1 " would be specified as @ strategy _ options : DC1 = " 1 " @ . | <nl> + <nl> h2 . Common Idioms <nl> <nl> h3 ( # consistency ) . Specifying Consistency

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6603911 . . 3166780 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 . 0 
 + * Reject multiple values for a key in CQL grammar . ( CASSANDRA - 13369 ) 
 * UDA fails without input rows ( CASSANDRA - 13399 ) 
 * Fix compaction - stress by using daemonInitialization ( CASSANDRA - 13188 ) 
 * V5 protocol flags decoding broken ( CASSANDRA - 13443 ) 
 diff - - git a / src / antlr / Parser . g b / src / antlr / Parser . g 
 index 3d06dc3 . . e5b7584 100644 
 - - - a / src / antlr / Parser . g 
 + + + b / src / antlr / Parser . g 
 @ @ - 127 , 7 + 127 , 10 @ @ options { 
 break ; 
 } 
 
 - res . put ( ( ( Constants . Literal ) entry . left ) . getRawText ( ) , ( ( Constants . Literal ) entry . right ) . getRawText ( ) ) ; 
 + if ( res . put ( ( ( Constants . Literal ) entry . left ) . getRawText ( ) , ( ( Constants . Literal ) entry . right ) . getRawText ( ) ) ! = null ) 
 + { 
 + addRecognitionError ( String . format ( " Multiple definition for property " + ( ( Constants . Literal ) entry . left ) . getRawText ( ) ) ) ; 
 + } 
 } 
 
 return res ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java 
 index 4b76dbc . . 4871c09 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . antlr . runtime . CharStream ; 
 import org . antlr . runtime . CommonTokenStream ; 
 import org . antlr . runtime . RecognitionException ; 
 import org . antlr . runtime . TokenStream ; 
 + import org . apache . cassandra . cql3 . statements . PropertyDefinitions ; 
 
 import static org . junit . Assert . * ; 
 
 @ @ - 75 , 6 + 76 , 35 @ @ public class CqlParserTest 
 assertEquals ( 0 , secondCounter . count ) ; 
 } 
 
 + @ Test 
 + public void testDuplicateProperties ( ) throws Exception 
 + { 
 + parseAndCountErrors ( " properties = { ' foo ' : ' value1 ' , ' bar ' : ' value2 ' } ; " , 0 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; 
 + parseAndCountErrors ( " properties = { ' foo ' : ' value1 ' , ' foo ' : ' value2 ' } ; " , 1 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; 
 + parseAndCountErrors ( " foo = ' value1 ' AND bar = ' value2 ' } ; " , 0 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; 
 + parseAndCountErrors ( " foo = ' value1 ' AND foo = ' value2 ' } ; " , 1 , ( p ) - > p . properties ( new PropertyDefinitions ( ) ) ) ; 
 + } 
 + 
 + private void parseAndCountErrors ( String cql , int expectedErrors , ParserOperation operation ) throws RecognitionException 
 + { 
 + SyntaxErrorCounter counter = new SyntaxErrorCounter ( ) ; 
 + CharStream stream = new ANTLRStringStream ( cql ) ; 
 + CqlLexer lexer = new CqlLexer ( stream ) ; 
 + TokenStream tokenStream = new CommonTokenStream ( lexer ) ; 
 + CqlParser parser = new CqlParser ( tokenStream ) ; 
 + parser . addErrorListener ( counter ) ; 
 + 
 + operation . perform ( parser ) ; 
 + 
 + assertEquals ( expectedErrors , counter . count ) ; 
 + } 
 + 
 + @ FunctionalInterface 
 + private interface ParserOperation 
 + { 
 + void perform ( CqlParser cqlParser ) throws RecognitionException ; 
 + } 
 + 
 private static final class SyntaxErrorCounter implements ErrorListener 
 { 
 private int count ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 index 2d34967 . . b0ee566 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AlterTest . java 
 @ @ - 229 , 6 + 229 , 25 @ @ public class AlterTest extends CQLTester 
 " max _ threshold " , " 32 " ) ) ) ; 
 } 
 
 + @ Test 
 + public void testAlterKeyspaceWithMultipleInstancesOfSameDCThrowsSyntaxException ( ) throws Throwable 
 + { 
 + try 
 + { 
 + / / Create a keyspace 
 + execute ( " CREATE KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 2 } " ) ; 
 + 
 + / / try modifying the keyspace 
 + assertInvalidThrow ( SyntaxException . class , " ALTER KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 2 , ' dc1 ' : 3 } " ) ; 
 + execute ( " ALTER KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 3 } " ) ; 
 + } 
 + finally 
 + { 
 + / / clean - up 
 + execute ( " DROP KEYSPACE IF EXISTS testABC " ) ; 
 + } 
 + } 
 + 
 / * * 
 * Test for bug of 5232 , 
 * migrated from cql _ tests . py : TestCQL . alter _ bug _ test ( ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java 
 index bb6ead9 . . 3eaec23 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / CreateTest . java 
 @ @ - 499 , 6 + 499 , 20 @ @ public class CreateTest extends CQLTester 
 execute ( " DROP KEYSPACE testXYZ " ) ; 
 } 
 
 + @ Test 
 + public void testCreateKeyspaceWithMultipleInstancesOfSameDCThrowsException ( ) throws Throwable 
 + { 
 + try 
 + { 
 + assertInvalidThrow ( SyntaxException . class , " CREATE KEYSPACE testABC WITH replication = { ' class ' : ' NetworkTopologyStrategy ' , ' dc1 ' : 2 , ' dc1 ' : 3 } " ) ; 
 + } 
 + finally 
 + { 
 + / / clean - up 
 + execute ( " DROP KEYSPACE IF EXISTS testABC " ) ; 
 + } 
 + } 
 + 
 / * * 
 * Test create and drop table 
 * migrated from cql _ tests . py : TestCQL . table _ test ( )

NEAREST DIFF:
diff - - git a / doc / cql / CQL . html b / doc / cql / CQL . html 
 index 30a50aa . . 1a13a12 100644 
 - - - a / doc / cql / CQL . html 
 + + + b / doc / cql / CQL . html 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - < ? xml version = ' 1 . 0 ' encoding = ' utf - 8 ' ? > < ! DOCTYPE html PUBLIC " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN " " http : / / www . w3 . org / TR / xhtml1 / DTD / xhtml1 - transitional . dtd " > < html xmlns = " http : / / www . w3 . org / 1999 / xhtml " > < head > < meta http - equiv = " Content - Type " content = " text / html ; charset = utf - 8 " / > < / head > < body > < h1 id = " CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / h1 > < h2 id = " TableofContents " > Table of Contents < / h2 > < ol style = " list - style : none ; " > < li > < a href = " # CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / a > < ol style = " list - style : none ; " > < li > < a href = " # TableofContents " > Table of Contents < / a > < / li > < li > < a href = " # USE " > USE < / a > < / li > < li > < a href = " # SELECT " > SELECT < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel " > Consistency Level < / a > < / li > < li > < a href = " # Filteringrows " > Filtering rows < / a > < / li > < li > < a href = " # Limits " > Limits < / a > < / li > < / ol > < / li > < li > < a href = " # UPDATE " > UPDATE < / a > < ol style = " list - style : none ; " > < li > < a href = " # ColumnFamily2 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel2 " > Consistency Level < / a > < / li > < li > < a href = " # SpecifyingColumnsandRow " > Specifying Columns and Row < / a > < / li > < / ol > < / li > < li > < a href = " # DELETE " > DELETE < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns2 " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily3 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel3 " > Consistency Level < / a > < / li > < li > < a href = " # deleterows " > Specifying Rows < / a > < / li > < / ol > < / li > < li > < a href = " # TRUNCATE " > TRUNCATE < / a > < / li > < li > < a href = " # CommonIdioms " > Common Idioms < / a > < ol style = " list - style : none ; " > < li > < a href = " # consistency " > Specifying Consistency < / a > < / li > < li > < a href = " # terms " > Term specification < / a > < ol style = " list - style : none ; " > < li > < a href = " # StringLiterals " > String Literals < / a > < / li > < li > < a href = " # Integerslongs " > Integers / longs < / a > < / li > < / ol > < / li > < / ol > < / li > < / ol > < / li > < / ol > < h2 id = " USE " > USE < / h2 > < p > < i > Synopsis : < / i > < / p > < pre > < code > USE & lt ; KEYSPACE & gt ; ; 
 + < ? xml version = ' 1 . 0 ' encoding = ' utf - 8 ' ? > < ! DOCTYPE html PUBLIC " - / / W3C / / DTD XHTML 1 . 0 Transitional / / EN " " http : / / www . w3 . org / TR / xhtml1 / DTD / xhtml1 - transitional . dtd " > < html xmlns = " http : / / www . w3 . org / 1999 / xhtml " > < head > < meta http - equiv = " Content - Type " content = " text / html ; charset = utf - 8 " / > < / head > < body > < h1 id = " CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / h1 > < h2 id = " TableofContents " > Table of Contents < / h2 > < ol style = " list - style : none ; " > < li > < a href = " # CassandraQueryLanguageCQLv0 . 99 . 1 " > Cassandra Query Language ( CQL ) v0 . 99 . 1 < / a > < ol style = " list - style : none ; " > < li > < a href = " # TableofContents " > Table of Contents < / a > < / li > < li > < a href = " # USE " > USE < / a > < / li > < li > < a href = " # SELECT " > SELECT < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel " > Consistency Level < / a > < / li > < li > < a href = " # Filteringrows " > Filtering rows < / a > < / li > < li > < a href = " # Limits " > Limits < / a > < / li > < / ol > < / li > < li > < a href = " # UPDATE " > UPDATE < / a > < ol style = " list - style : none ; " > < li > < a href = " # ColumnFamily2 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel2 " > Consistency Level < / a > < / li > < li > < a href = " # SpecifyingColumnsandRow " > Specifying Columns and Row < / a > < / li > < / ol > < / li > < li > < a href = " # DELETE " > DELETE < / a > < ol style = " list - style : none ; " > < li > < a href = " # SpecifyingColumns2 " > Specifying Columns < / a > < / li > < li > < a href = " # ColumnFamily3 " > Column Family < / a > < / li > < li > < a href = " # ConsistencyLevel3 " > Consistency Level < / a > < / li > < li > < a href = " # deleterows " > Specifying Rows < / a > < / li > < / ol > < / li > < li > < a href = " # TRUNCATE " > TRUNCATE < / a > < / li > < li > < a href = " # CREATEKEYSPACE " > CREATE KEYSPACE < / a > < / li > < li > < a href = " # CommonIdioms " > Common Idioms < / a > < ol style = " list - style : none ; " > < li > < a href = " # consistency " > Specifying Consistency < / a > < / li > < li > < a href = " # terms " > Term specification < / a > < ol style = " list - style : none ; " > < li > < a href = " # StringLiterals " > String Literals < / a > < / li > < li > < a href = " # Integerslongs " > Integers / longs < / a > < / li > < / ol > < / li > < / ol > < / li > < / ol > < / li > < / ol > < h2 id = " USE " > USE < / h2 > < p > < i > Synopsis : < / i > < / p > < pre > < code > USE & lt ; KEYSPACE & gt ; ; 
 < / code > < / pre > < p > A < code > USE < / code > statement consists of the < code > USE < / code > keyword , followed by a valid keyspace name . Its purpose is to assign the per - connection , current working keyspace . All subsequent keyspace - specific actions will be performed in the context of the supplied value . < / p > < h2 id = " SELECT " > SELECT < / h2 > < p > < i > Synopsis : < / i > < / p > < pre > < code > SELECT [ FIRST N ] [ REVERSED ] & lt ; SELECT EXPR & gt ; FROM & lt ; COLUMN FAMILY & gt ; [ USING & lt ; CONSISTENCY & gt ; ] 
 [ WHERE & lt ; CLAUSE & gt ; ] [ LIMIT N ] ; 
 < / code > < / pre > < p > A < code > SELECT < / code > is used to read one or more records from a Cassandra column family . It returns a result - set of rows , where each row consists of a key and a collection of columns corresponding to the query . < / p > < h3 id = " SpecifyingColumns " > Specifying Columns < / h3 > < pre > < code > SELECT [ FIRST N ] [ REVERSED ] name1 , name2 , name3 FROM . . . 
 @ @ - 21 , 10 + 21 , 12 @ @ APPLY BATCH 
 < / code > < / pre > < p > When batching UPDATEs , a single consistency level is used for the entire batch , it appears after the < code > BEGIN BATCH < / code > statement , and uses the standard < a href = " # consistency " > consistency level specification < / a > . Batch UPDATEs default to < code > CONSISTENCY . ONE < / code > when left unspecified . < / p > < p > < em > NOTE : While there are no isolation guarantees , < code > UPDATE < / code > queries are atomic within a give record . < / em > < / p > < h2 id = " DELETE " > DELETE < / h2 > < p > < em > Synopsis : < / em > < / p > < pre > < code > DELETE [ COLUMNS ] FROM & lt ; COLUMN FAMILY & gt ; [ USING & lt ; CONSISTENCY & gt ; ] WHERE KEY = keyname1 
 DELETE [ COLUMNS ] FROM & lt ; COLUMN FAMILY & gt ; [ USING & lt ; CONSISTENCY & gt ; ] WHERE KEY IN ( keyname1 , keyname2 ) ; 
 < / code > < / pre > < p > A < code > DELETE < / code > is used to perform the removal of one or more columns from one or more rows . < / p > < h3 id = " SpecifyingColumns2 " > Specifying Columns < / h3 > < pre > < code > DELETE [ COLUMNS ] . . . 
 - < / code > < / pre > < p > Following the < code > DELETE < / code > keyword is an optional comma - delimited list of column name terms . When no column names are specified , the remove applies to the entire row ( s ) matched by the < a href = " # deleterows " > < code > WHERE < / code > clause < / a > < / p > < h3 id = " ColumnFamily3 " > Column Family < / h3 > < pre > < code > DELETE . . . FROM & lt ; COLUMN FAMILY & gt ; . . . 
 + < / code > < / pre > < p > Following the < code > DELETE < / code > keyword is an optional comma - delimited list of column name terms . When no column names are specified , the remove applies to the entire row ( s ) matched by the < a href = " # deleterows " > WHERE clause < / a > < / p > < h3 id = " ColumnFamily3 " > Column Family < / h3 > < pre > < code > DELETE . . . FROM & lt ; COLUMN FAMILY & gt ; . . . 
 < / code > < / pre > < p > The column family name follows the list of column names . < / p > < h3 id = " ConsistencyLevel3 " > Consistency Level < / h3 > < pre > < code > UPDATE . . . [ USING & lt ; CONSISTENCY & gt ; ] . . . 
 < / code > < / pre > < p > Following the column family identifier is an optional < a href = " # consistency " > consistency level specification < / a > . < / p > < h3 id = " deleterows " > Specifying Rows < / h3 > < pre > < code > UPDATE . . . WHERE KEY = keyname1 
 UPDATE . . . WHERE KEY IN ( keyname1 , keyname2 ) 
 < / code > < / pre > < p > The < code > WHERE < / code > clause is used to determine which row ( s ) a < code > DELETE < / code > applies to . The first form allows the specification of a single keyname using the < code > KEY < / code > keyword and the < code > = < / code > operator . The second form allows a list of keyname terms to be specified using the < code > IN < / code > notation and a parenthesized list of comma - delimited keyname terms . < / p > < h2 id = " TRUNCATE " > TRUNCATE < / h2 > < p > < em > Synopsis : < / em > < / p > < pre > < code > TRUNCATE & lt ; COLUMN FAMILY & gt ; 
 - < / code > < / pre > < p > Accepts a single argument for the column family name , and permanently removes all data from said column family . < / p > < h2 id = " CommonIdioms " > Common Idioms < / h2 > < h3 id = " consistency " > Specifying Consistency < / h3 > < pre > < code > . . . USING & lt ; CONSISTENCY & gt ; . . . 
 + < / code > < / pre > < p > Accepts a single argument for the column family name , and permanently removes all data from said column family . < / p > < h2 id = " CREATEKEYSPACE " > CREATE KEYSPACE < / h2 > < p > < em > Synopsis : < / em > < / p > < pre > < code > CREATE KEYSPACE & lt ; NAME & gt ; WITH replication _ factor = & lt ; NUM & gt ; AND strategy _ class = " & lt ; STRATEGY & gt ; " 
 + [ AND strategy _ options . & lt ; OPTION & gt ; = & lt ; VALUE & gt ; [ AND strategy _ options . & lt ; OPTION & gt ; = & lt ; VALUE & gt ; ] ] ; 
 + < / code > < / pre > < p > The < code > CREATE KEYSPACE < / code > statement creates a new top - level namespace ( aka & # 8220 ; keyspace & # 8221 ; ) . Valid names are any string constructed of alphanumeric characters and underscores , but must begin with a letter . Properties such as replication strategy and count are specified during creation using the following accepted keyword arguments : < / p > < table > < tr > < th > keyword < / th > < th > required < / th > < th > description < / th > < / tr > < tr > < td > replication _ factor < / td > < td > yes < / td > < td > Numeric argument that specifies the number of replicas for this keyspace . < / td > < / tr > < tr > < td > strategy _ class < / td > < td > yes < / td > < td > Class name to use for managing replica placement . Any of the shipped strategies can be used by specifying the class name relative to org . apache . cassandra . locator , others will need to be fully - qualified and located on the classpath . < / td > < / tr > < tr > < td > strategy _ options < / td > < td > no < / td > < td > Some strategies require additional arguments which can be supplied by appending the option name to the < code > strategy _ options < / code > keyword , separated by a colon ( < code > : < / code > ) . For example , a strategy option of & # 8220 ; DC1 & # 8221 ; with a value of & # 8220 ; 1 & # 8221 ; would be specified as < code > strategy _ options : DC1 = " 1 " < / code > . < / td > < / tr > < / table > < h2 id = " CommonIdioms " > Common Idioms < / h2 > < h3 id = " consistency " > Specifying Consistency < / h3 > < pre > < code > . . . USING & lt ; CONSISTENCY & gt ; . . . 
 < / code > < / pre > < p > Consistency level specifications are made up the keyword < code > USING < / code > , followed by a consistency level identifier . Valid consistency levels are as follows : < / p > < ul > < li > < code > CONSISTENCY . ZERO < / code > < / li > < li > < code > CONSISTENCY . ONE < / code > ( default ) < / li > < li > < code > CONSISTENCY . QUORUM < / code > < / li > < li > < code > CONSISTENCY . ALL < / code > < / li > < li > < code > CONSISTENCY . DCQUORUM < / code > < / li > < li > < code > CONSISTENCY . DCQUORUMSYNC < / code > < / li > < / ul > < h3 id = " terms " > Term specification < / h3 > < p > Where possible , the type of terms are inferred ; the following term types are supported : < / p > < h4 id = " StringLiterals " > String Literals < / h4 > < p > String literals are any value enclosed in double - quotes , ( ` " ` ) . String literals are treated as raw bytes ; no interpolation is performed . < / p > < h4 id = " Integerslongs " > Integers / longs < / h4 > < p > Integers are any term consisting soley of unquoted numericals , longs are any otherwise valid integer term followed by an upper case & # 8220 ; L & # 8221 ; , ( e . g . 100L ) . It is an error to specify an integer term that will not fit in 4 bytes unsigned , or a long that will not fit in 8 bytes unsigned . < / p > < / body > < / html > 
 \ No newline at end of file 
 diff - - git a / doc / cql / CQL . textile b / doc / cql / CQL . textile 
 index a7479ca . . 1d82664 100644 
 - - - a / doc / cql / CQL . textile 
 + + + b / doc / cql / CQL . textile 
 @ @ - 160 , 6 + 160 , 21 @ @ TRUNCATE < COLUMN FAMILY > 
 
 Accepts a single argument for the column family name , and permanently removes all data from said column family . 
 
 + h2 . CREATE KEYSPACE 
 + 
 + _ Synopsis : _ 
 + 
 + bc . 
 + CREATE KEYSPACE < NAME > WITH replication _ factor = < NUM > AND strategy _ class = " < STRATEGY > " 
 + [ AND strategy _ options . < OPTION > = < VALUE > [ AND strategy _ options . < OPTION > = < VALUE > ] ] ; 
 + 
 + The @ CREATE KEYSPACE @ statement creates a new top - level namespace ( aka " keyspace " ) . Valid names are any string constructed of alphanumeric characters and underscores , but must begin with a letter . Properties such as replication strategy and count are specified during creation using the following accepted keyword arguments : 
 + 
 + | _ . keyword | _ . required | _ . description | 
 + | replication _ factor | yes | Numeric argument that specifies the number of replicas for this keyspace . | 
 + | strategy _ class | yes | Class name to use for managing replica placement . Any of the shipped strategies can be used by specifying the class name relative to org . apache . cassandra . locator , others will need to be fully - qualified and located on the classpath . | 
 + | strategy _ options | no | Some strategies require additional arguments which can be supplied by appending the option name to the @ strategy _ options @ keyword , separated by a colon ( @ : @ ) . For example , a strategy option of " DC1 " with a value of " 1 " would be specified as @ strategy _ options : DC1 = " 1 " @ . | 
 + 
 h2 . Common Idioms 
 
 h3 ( # consistency ) . Specifying Consistency
