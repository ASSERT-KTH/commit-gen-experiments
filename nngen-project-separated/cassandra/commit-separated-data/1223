BLEU SCORE: 0.018738883683389617

TEST MSG: Fix PartitionUpdate . operationCount ( ) for updates with static column
GENERATED MSG: fix maxTimestamp to include row tombstones

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 3423a1e . . c51cb51 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Fix PartitionUpdate . operationCount ( ) for updates with static column operations ( CASSANDRA - 10606 ) <nl> * Fix thrift get ( ) queries with defined columns ( CASSANDRA - 10586 ) <nl> * Fix marking of indexes as built and removed ( CASSANDRA - 10601 ) <nl> * Skip initialization of non - registered 2i instances , remove Index : : getIndexName ( CASSANDRA - 10595 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> index b1776ca . . 52f8f67 100644 <nl> - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java <nl> @ @ - 334 , 6 + 334 , 7 @ @ public class PartitionUpdate extends AbstractBTreePartition <nl> public int operationCount ( ) <nl> { <nl> return rowCount ( ) <nl> + + ( staticRow ( ) . isEmpty ( ) ? 0 : 1 ) <nl> + deletionInfo . rangeCount ( ) <nl> + ( deletionInfo . getPartitionDeletion ( ) . isLive ( ) ? 0 : 1 ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / db / partition / PartitionUpdateTest . java b / test / unit / org / apache / cassandra / db / partition / PartitionUpdateTest . java <nl> new file mode 100644 <nl> index 0000000 . . a069db1 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / partition / PartitionUpdateTest . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db . partition ; <nl> + <nl> + import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . db . RowUpdateBuilder ; <nl> + import org . apache . cassandra . db . partitions . PartitionUpdate ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . junit . Test ; <nl> + <nl> + import junit . framework . Assert ; <nl> + <nl> + public class PartitionUpdateTest extends CQLTester <nl> + { <nl> + @ Test <nl> + public void testOperationCount ( ) <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key text , clustering int , a int , s int static , PRIMARY KEY ( key , clustering ) ) " ) ; <nl> + CFMetaData cfm = currentTableMetadata ( ) ; <nl> + <nl> + long timestamp = FBUtilities . timestampMicros ( ) ; <nl> + PartitionUpdate update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . clustering ( 1 ) . add ( " a " , 1 ) . buildUpdate ( ) ; <nl> + Assert . assertEquals ( 1 , update . operationCount ( ) ) ; <nl> + <nl> + update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . buildUpdate ( ) ; <nl> + Assert . assertEquals ( 0 , update . operationCount ( ) ) ; <nl> + <nl> + update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . add ( " s " , 1 ) . buildUpdate ( ) ; <nl> + Assert . assertEquals ( 1 , update . operationCount ( ) ) ; <nl> + <nl> + update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . add ( " s " , 1 ) . buildUpdate ( ) ; <nl> + update = new RowUpdateBuilder ( update , timestamp , cfm . params . defaultTimeToLive ) . clustering ( 1 ) <nl> + . add ( " a " , 1 ) <nl> + . buildUpdate ( ) ; <nl> + Assert . assertEquals ( 2 , update . operationCount ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testOperationCountWithCompactTable ( ) <nl> + { <nl> + createTable ( " CREATE TABLE % s ( key text PRIMARY KEY , a int ) WITH COMPACT STORAGE " ) ; <nl> + CFMetaData cfm = currentTableMetadata ( ) ; <nl> + <nl> + PartitionUpdate update = new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , " key0 " ) . add ( " a " , 1 ) <nl> + . buildUpdate ( ) ; <nl> + Assert . assertEquals ( 1 , update . operationCount ( ) ) ; <nl> + <nl> + update = new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , " key0 " ) . buildUpdate ( ) ; <nl> + Assert . assertEquals ( 0 , update . operationCount ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c37dd93 . . 49719f4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> * Avoids having replicate on write tasks stacking up at CL . ONE ( CASSANDRA - 2889 ) <nl> Merged from 1 . 0 : <nl> * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) <nl> + * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) <nl> <nl> <nl> 1 . 1 . 0 - final <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 7b01766 . . 298dfa54 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 270 , 7 + 270 , 7 @ @ public class ColumnFamily extends AbstractColumnContainer implements IRowCacheEn <nl> <nl> public long maxTimestamp ( ) <nl> { <nl> - long maxTimestamp = Long . MIN _ VALUE ; <nl> + long maxTimestamp = getMarkedForDeleteAt ( ) ; <nl> for ( IColumn column : columns ) <nl> maxTimestamp = Math . max ( maxTimestamp , column . maxTimestamp ( ) ) ; <nl> return maxTimestamp ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java <nl> new file mode 100644 <nl> index 0000000 . . ba6f125 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + package org . apache . cassandra . io . sstable ; <nl> + / * <nl> + * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * <nl> + * / <nl> + <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + <nl> + import org . apache . cassandra . SchemaLoader ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . RowMutation ; <nl> + import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . junit . Test ; <nl> + <nl> + public class SSTableWriterTest extends SchemaLoader <nl> + { <nl> + @ Test <nl> + public void testRowDeleteTimestampRecordedCorrectly ( ) throws IOException , ExecutionException , InterruptedException <nl> + { <nl> + Table table = Table . open ( " Keyspace1 " ) ; <nl> + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; <nl> + ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( " key1 " ) ) ; <nl> + <nl> + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; <nl> + rm . delete ( new QueryPath ( " Standard2 " ) , 0 ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + store . forceBlockingFlush ( ) ; <nl> + <nl> + SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; <nl> + assertEquals ( 0 , sstable . getMaxTimestamp ( ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 3423a1e . . c51cb51 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Fix PartitionUpdate . operationCount ( ) for updates with static column operations ( CASSANDRA - 10606 ) 
 * Fix thrift get ( ) queries with defined columns ( CASSANDRA - 10586 ) 
 * Fix marking of indexes as built and removed ( CASSANDRA - 10601 ) 
 * Skip initialization of non - registered 2i instances , remove Index : : getIndexName ( CASSANDRA - 10595 ) 
 diff - - git a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 index b1776ca . . 52f8f67 100644 
 - - - a / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 + + + b / src / java / org / apache / cassandra / db / partitions / PartitionUpdate . java 
 @ @ - 334 , 6 + 334 , 7 @ @ public class PartitionUpdate extends AbstractBTreePartition 
 public int operationCount ( ) 
 { 
 return rowCount ( ) 
 + + ( staticRow ( ) . isEmpty ( ) ? 0 : 1 ) 
 + deletionInfo . rangeCount ( ) 
 + ( deletionInfo . getPartitionDeletion ( ) . isLive ( ) ? 0 : 1 ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / db / partition / PartitionUpdateTest . java b / test / unit / org / apache / cassandra / db / partition / PartitionUpdateTest . java 
 new file mode 100644 
 index 0000000 . . a069db1 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / partition / PartitionUpdateTest . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db . partition ; 
 + 
 + import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . db . RowUpdateBuilder ; 
 + import org . apache . cassandra . db . partitions . PartitionUpdate ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import org . junit . Test ; 
 + 
 + import junit . framework . Assert ; 
 + 
 + public class PartitionUpdateTest extends CQLTester 
 + { 
 + @ Test 
 + public void testOperationCount ( ) 
 + { 
 + createTable ( " CREATE TABLE % s ( key text , clustering int , a int , s int static , PRIMARY KEY ( key , clustering ) ) " ) ; 
 + CFMetaData cfm = currentTableMetadata ( ) ; 
 + 
 + long timestamp = FBUtilities . timestampMicros ( ) ; 
 + PartitionUpdate update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . clustering ( 1 ) . add ( " a " , 1 ) . buildUpdate ( ) ; 
 + Assert . assertEquals ( 1 , update . operationCount ( ) ) ; 
 + 
 + update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . buildUpdate ( ) ; 
 + Assert . assertEquals ( 0 , update . operationCount ( ) ) ; 
 + 
 + update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . add ( " s " , 1 ) . buildUpdate ( ) ; 
 + Assert . assertEquals ( 1 , update . operationCount ( ) ) ; 
 + 
 + update = new RowUpdateBuilder ( cfm , timestamp , " key0 " ) . add ( " s " , 1 ) . buildUpdate ( ) ; 
 + update = new RowUpdateBuilder ( update , timestamp , cfm . params . defaultTimeToLive ) . clustering ( 1 ) 
 + . add ( " a " , 1 ) 
 + . buildUpdate ( ) ; 
 + Assert . assertEquals ( 2 , update . operationCount ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testOperationCountWithCompactTable ( ) 
 + { 
 + createTable ( " CREATE TABLE % s ( key text PRIMARY KEY , a int ) WITH COMPACT STORAGE " ) ; 
 + CFMetaData cfm = currentTableMetadata ( ) ; 
 + 
 + PartitionUpdate update = new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , " key0 " ) . add ( " a " , 1 ) 
 + . buildUpdate ( ) ; 
 + Assert . assertEquals ( 1 , update . operationCount ( ) ) ; 
 + 
 + update = new RowUpdateBuilder ( cfm , FBUtilities . timestampMicros ( ) , " key0 " ) . buildUpdate ( ) ; 
 + Assert . assertEquals ( 0 , update . operationCount ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c37dd93 . . 49719f4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 * Avoids having replicate on write tasks stacking up at CL . ONE ( CASSANDRA - 2889 ) 
 Merged from 1 . 0 : 
 * Fix super columns bug where cache is not updated ( CASSANDRA - 4190 ) 
 + * fix maxTimestamp to include row tombstones ( CASSANDRA - 4116 ) 
 
 
 1 . 1 . 0 - final 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 7b01766 . . 298dfa54 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 270 , 7 + 270 , 7 @ @ public class ColumnFamily extends AbstractColumnContainer implements IRowCacheEn 
 
 public long maxTimestamp ( ) 
 { 
 - long maxTimestamp = Long . MIN _ VALUE ; 
 + long maxTimestamp = getMarkedForDeleteAt ( ) ; 
 for ( IColumn column : columns ) 
 maxTimestamp = Math . max ( maxTimestamp , column . maxTimestamp ( ) ) ; 
 return maxTimestamp ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java 
 new file mode 100644 
 index 0000000 . . ba6f125 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableWriterTest . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + package org . apache . cassandra . io . sstable ; 
 + / * 
 + * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * 
 + * / 
 + 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . concurrent . ExecutionException ; 
 + 
 + import org . apache . cassandra . SchemaLoader ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . RowMutation ; 
 + import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . junit . Test ; 
 + 
 + public class SSTableWriterTest extends SchemaLoader 
 + { 
 + @ Test 
 + public void testRowDeleteTimestampRecordedCorrectly ( ) throws IOException , ExecutionException , InterruptedException 
 + { 
 + Table table = Table . open ( " Keyspace1 " ) ; 
 + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard2 " ) ; 
 + ByteBuffer key = ByteBufferUtil . bytes ( String . valueOf ( " key1 " ) ) ; 
 + 
 + RowMutation rm = new RowMutation ( " Keyspace1 " , key ) ; 
 + rm . delete ( new QueryPath ( " Standard2 " ) , 0 ) ; 
 + rm . apply ( ) ; 
 + 
 + store . forceBlockingFlush ( ) ; 
 + 
 + SSTableReader sstable = store . getSSTables ( ) . iterator ( ) . next ( ) ; 
 + assertEquals ( 0 , sstable . getMaxTimestamp ( ) ) ; 
 + } 
 + }
