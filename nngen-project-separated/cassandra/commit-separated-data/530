BLEU SCORE: 0.01763751180315069

TEST MSG: Fixed query monitoring for range queries
GENERATED MSG: replace compactionlock use in schema migration by checking CFS . isInvalidD

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 74a9808 . . 0c215a2 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Fixed query monitoring for range queries ( CASSANDRA - 13050 ) <nl> * Remove outboundBindAny configuration property ( CASSANDRA - 12673 ) <nl> * Use correct bounds for all - data range when filtering ( CASSANDRA - 12666 ) <nl> * Remove timing window in test case ( CASSANDRA - 12875 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> index d8051fe . . 405b0fc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadCommand . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . * ; <nl> import org . apache . cassandra . cql3 . Operator ; <nl> import org . apache . cassandra . db . filter . * ; <nl> + import org . apache . cassandra . db . monitoring . ApproximateTime ; <nl> import org . apache . cassandra . db . monitoring . MonitorableImpl ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . rows . * ; <nl> @ @ - 528 , 9 + 529 , 11 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery <nl> return Transformation . apply ( iter , new MetricRecording ( ) ) ; <nl> } <nl> <nl> - protected class CheckForAbort extends StoppingTransformation < BaseRowIterator < ? > > <nl> + protected class CheckForAbort extends StoppingTransformation < UnfilteredRowIterator > <nl> { <nl> - protected BaseRowIterator < ? > applyToPartition ( BaseRowIterator < ? > partition ) <nl> + long lastChecked = 0 ; <nl> + <nl> + protected UnfilteredRowIterator applyToPartition ( UnfilteredRowIterator partition ) <nl> { <nl> if ( maybeAbort ( ) ) <nl> { <nl> @ @ - 538 , 18 + 541 , 28 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery <nl> return null ; <nl> } <nl> <nl> - return partition ; <nl> + return Transformation . apply ( partition , this ) ; <nl> } <nl> <nl> protected Row applyToRow ( Row row ) <nl> { <nl> + if ( TEST _ ITERATION _ DELAY _ MILLIS > 0 ) <nl> + maybeDelayForTesting ( ) ; <nl> + <nl> return maybeAbort ( ) ? null : row ; <nl> } <nl> <nl> private boolean maybeAbort ( ) <nl> { <nl> - if ( TEST _ ITERATION _ DELAY _ MILLIS > 0 ) <nl> - maybeDelayForTesting ( ) ; <nl> + / * * <nl> + * The value returned by ApproximateTime . currentTimeMillis ( ) is updated only every <nl> + * { @ link ApproximateTime . CHECK _ INTERVAL _ MS } , by default 10 millis . Since MonitorableImpl <nl> + * relies on ApproximateTime , we don ' t need to check unless the approximate time has elapsed . <nl> + * / <nl> + if ( lastChecked = = ApproximateTime . currentTimeMillis ( ) ) <nl> + return false ; <nl> + <nl> + lastChecked = ApproximateTime . currentTimeMillis ( ) ; <nl> <nl> if ( isAborted ( ) ) <nl> { <nl> @ @ - 559 , 24 + 572 , 19 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery <nl> <nl> return false ; <nl> } <nl> - } <nl> <nl> - protected UnfilteredPartitionIterator withStateTracking ( UnfilteredPartitionIterator iter ) <nl> - { <nl> - return Transformation . apply ( iter , new CheckForAbort ( ) ) ; <nl> + private void maybeDelayForTesting ( ) <nl> + { <nl> + if ( ! metadata . ksName . startsWith ( " system " ) ) <nl> + FBUtilities . sleepQuietly ( TEST _ ITERATION _ DELAY _ MILLIS ) ; <nl> + } <nl> } <nl> <nl> - protected UnfilteredRowIterator withStateTracking ( UnfilteredRowIterator iter ) <nl> + protected UnfilteredPartitionIterator withStateTracking ( UnfilteredPartitionIterator iter ) <nl> { <nl> return Transformation . apply ( iter , new CheckForAbort ( ) ) ; <nl> } <nl> <nl> - private void maybeDelayForTesting ( ) <nl> - { <nl> - if ( ! metadata . ksName . startsWith ( " system " ) ) <nl> - FBUtilities . sleepQuietly ( TEST _ ITERATION _ DELAY _ MILLIS ) ; <nl> - } <nl> - <nl> / * * <nl> * Creates a message for this command . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> index d87d277 . . f6d10f5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java <nl> @ @ - 634 , 7 + 634 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> return EmptyIterators . unfilteredRow ( cfs . metadata , partitionKey ( ) , filter . isReversed ( ) ) ; <nl> <nl> StorageHook . instance . reportRead ( cfs . metadata . cfId , partitionKey ( ) ) ; <nl> - return withStateTracking ( withSSTablesIterated ( iterators , cfs . metric ) ) ; <nl> + return withSSTablesIterated ( iterators , cfs . metric ) ; <nl> } <nl> catch ( RuntimeException | Error e ) <nl> { <nl> @ @ - 832 , 7 + 832 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand <nl> } <nl> } <nl> <nl> - return withStateTracking ( result . unfilteredIterator ( columnFilter ( ) , Slices . ALL , clusteringIndexFilter ( ) . isReversed ( ) ) ) ; <nl> + return result . unfilteredIterator ( columnFilter ( ) , Slices . ALL , clusteringIndexFilter ( ) . isReversed ( ) ) ; <nl> } <nl> <nl> private ImmutableBTreePartition add ( UnfilteredRowIterator iter , ImmutableBTreePartition result , ClusteringIndexNamesFilter filter , boolean isRepaired ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / RowFilter . java b / src / java / org / apache / cassandra / db / filter / RowFilter . java <nl> index 4c0608f . . 1c934e7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / RowFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / RowFilter . java <nl> @ @ - 299 , 10 + 299 , 19 @ @ public abstract class RowFilter implements Iterable < RowFilter . Expression > <nl> / / Short - circuit all partitions that won ' t match based on static and partition keys <nl> for ( Expression e : partitionLevelExpressions ) <nl> if ( ! e . isSatisfiedBy ( metadata , partition . partitionKey ( ) , partition . staticRow ( ) ) ) <nl> + { <nl> + partition . close ( ) ; <nl> return null ; <nl> + } <nl> <nl> UnfilteredRowIterator iterator = Transformation . apply ( partition , this ) ; <nl> - return ( filterNonStaticColumns & & ! iterator . hasNext ( ) ) ? null : iterator ; <nl> + if ( filterNonStaticColumns & & ! iterator . hasNext ( ) ) <nl> + { <nl> + iterator . close ( ) ; <nl> + return null ; <nl> + } <nl> + <nl> + return iterator ; <nl> } <nl> <nl> public Row applyToRow ( Row row ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java b / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java <nl> index ea9f88a . . b814ea6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java <nl> @ @ - 182 , 9 + 182 , 11 @ @ public class RepairedDataTombstonesTest extends CQLTester <nl> while ( iterator . hasNext ( ) ) <nl> { <nl> partitionsFound + + ; <nl> - UnfilteredRowIterator rowIter = iterator . next ( ) ; <nl> - int val = ByteBufferUtil . toInt ( rowIter . partitionKey ( ) . getKey ( ) ) ; <nl> - assertTrue ( " val = " + val , val > = 10 & & val < 20 ) ; <nl> + try ( UnfilteredRowIterator rowIter = iterator . next ( ) ) <nl> + { <nl> + int val = ByteBufferUtil . toInt ( rowIter . partitionKey ( ) . getKey ( ) ) ; <nl> + assertTrue ( " val = " + val , val > = 10 & & val < 20 ) ; <nl> + } <nl> } <nl> } <nl> assertEquals ( 10 , partitionsFound ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index dc86de1 . . 7512c9d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> * cleanup usage of StorageService . setMode ( ) ( CASANDRA - 3388 ) <nl> * Add timing information to cassandra - cli GET / SET / LIST queries ( CASSANDRA - 3326 ) <nl> * Cache for CompressionMetadata objects ( CASSANDRA - 3427 ) <nl> + * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) <nl> + <nl> <nl> 1 . 0 . 1 <nl> * acquire references during index build to prevent delete problems <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index c21b363 . . 1c3c0ed 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 165 , 6 + 165 , 7 @ @ JVM _ OPTS = " $ JVM _ OPTS - XX : + UseCMSInitiatingOccupancyOnly " <nl> # GC logging options - - uncomment to enable <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDetails " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCTimeStamps " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintHeapAtGC " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintTenuringDistribution " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " <nl> # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 196e15e . . b648656 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class TokenMetadata <nl> / / Finally , note that recording the tokens of joining nodes in bootstrapTokens also <nl> / / means we can detect and reject the addition of multiple nodes at the same token <nl> / / before one becomes part of the ring . <nl> - private BiMap < Token , InetAddress > bootstrapTokens = HashBiMap . create ( ) ; <nl> + private BiMap < Token , InetAddress > bootstrapTokens = Maps . synchronizedBiMap ( HashBiMap . < Token , InetAddress > create ( ) ) ; <nl> / / ( don ' t need to record Token here since it ' s still part of tokenToEndpointMap until it ' s done leaving ) <nl> private Set < InetAddress > leavingEndpoints = new HashSet < InetAddress > ( ) ; <nl> / / this is a cache of the calculation from { tokenToEndpointMap , bootstrapTokens , leavingEndpoints }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 74a9808 . . 0c215a2 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Fixed query monitoring for range queries ( CASSANDRA - 13050 ) 
 * Remove outboundBindAny configuration property ( CASSANDRA - 12673 ) 
 * Use correct bounds for all - data range when filtering ( CASSANDRA - 12666 ) 
 * Remove timing window in test case ( CASSANDRA - 12875 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ReadCommand . java b / src / java / org / apache / cassandra / db / ReadCommand . java 
 index d8051fe . . 405b0fc 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / ReadCommand . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . * ; 
 import org . apache . cassandra . cql3 . Operator ; 
 import org . apache . cassandra . db . filter . * ; 
 + import org . apache . cassandra . db . monitoring . ApproximateTime ; 
 import org . apache . cassandra . db . monitoring . MonitorableImpl ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . rows . * ; 
 @ @ - 528 , 9 + 529 , 11 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery 
 return Transformation . apply ( iter , new MetricRecording ( ) ) ; 
 } 
 
 - protected class CheckForAbort extends StoppingTransformation < BaseRowIterator < ? > > 
 + protected class CheckForAbort extends StoppingTransformation < UnfilteredRowIterator > 
 { 
 - protected BaseRowIterator < ? > applyToPartition ( BaseRowIterator < ? > partition ) 
 + long lastChecked = 0 ; 
 + 
 + protected UnfilteredRowIterator applyToPartition ( UnfilteredRowIterator partition ) 
 { 
 if ( maybeAbort ( ) ) 
 { 
 @ @ - 538 , 18 + 541 , 28 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery 
 return null ; 
 } 
 
 - return partition ; 
 + return Transformation . apply ( partition , this ) ; 
 } 
 
 protected Row applyToRow ( Row row ) 
 { 
 + if ( TEST _ ITERATION _ DELAY _ MILLIS > 0 ) 
 + maybeDelayForTesting ( ) ; 
 + 
 return maybeAbort ( ) ? null : row ; 
 } 
 
 private boolean maybeAbort ( ) 
 { 
 - if ( TEST _ ITERATION _ DELAY _ MILLIS > 0 ) 
 - maybeDelayForTesting ( ) ; 
 + / * * 
 + * The value returned by ApproximateTime . currentTimeMillis ( ) is updated only every 
 + * { @ link ApproximateTime . CHECK _ INTERVAL _ MS } , by default 10 millis . Since MonitorableImpl 
 + * relies on ApproximateTime , we don ' t need to check unless the approximate time has elapsed . 
 + * / 
 + if ( lastChecked = = ApproximateTime . currentTimeMillis ( ) ) 
 + return false ; 
 + 
 + lastChecked = ApproximateTime . currentTimeMillis ( ) ; 
 
 if ( isAborted ( ) ) 
 { 
 @ @ - 559 , 24 + 572 , 19 @ @ public abstract class ReadCommand extends MonitorableImpl implements ReadQuery 
 
 return false ; 
 } 
 - } 
 
 - protected UnfilteredPartitionIterator withStateTracking ( UnfilteredPartitionIterator iter ) 
 - { 
 - return Transformation . apply ( iter , new CheckForAbort ( ) ) ; 
 + private void maybeDelayForTesting ( ) 
 + { 
 + if ( ! metadata . ksName . startsWith ( " system " ) ) 
 + FBUtilities . sleepQuietly ( TEST _ ITERATION _ DELAY _ MILLIS ) ; 
 + } 
 } 
 
 - protected UnfilteredRowIterator withStateTracking ( UnfilteredRowIterator iter ) 
 + protected UnfilteredPartitionIterator withStateTracking ( UnfilteredPartitionIterator iter ) 
 { 
 return Transformation . apply ( iter , new CheckForAbort ( ) ) ; 
 } 
 
 - private void maybeDelayForTesting ( ) 
 - { 
 - if ( ! metadata . ksName . startsWith ( " system " ) ) 
 - FBUtilities . sleepQuietly ( TEST _ ITERATION _ DELAY _ MILLIS ) ; 
 - } 
 - 
 / * * 
 * Creates a message for this command . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 index d87d277 . . f6d10f5 100644 
 - - - a / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 + + + b / src / java / org / apache / cassandra / db / SinglePartitionReadCommand . java 
 @ @ - 634 , 7 + 634 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 return EmptyIterators . unfilteredRow ( cfs . metadata , partitionKey ( ) , filter . isReversed ( ) ) ; 
 
 StorageHook . instance . reportRead ( cfs . metadata . cfId , partitionKey ( ) ) ; 
 - return withStateTracking ( withSSTablesIterated ( iterators , cfs . metric ) ) ; 
 + return withSSTablesIterated ( iterators , cfs . metric ) ; 
 } 
 catch ( RuntimeException | Error e ) 
 { 
 @ @ - 832 , 7 + 832 , 7 @ @ public class SinglePartitionReadCommand extends ReadCommand 
 } 
 } 
 
 - return withStateTracking ( result . unfilteredIterator ( columnFilter ( ) , Slices . ALL , clusteringIndexFilter ( ) . isReversed ( ) ) ) ; 
 + return result . unfilteredIterator ( columnFilter ( ) , Slices . ALL , clusteringIndexFilter ( ) . isReversed ( ) ) ; 
 } 
 
 private ImmutableBTreePartition add ( UnfilteredRowIterator iter , ImmutableBTreePartition result , ClusteringIndexNamesFilter filter , boolean isRepaired ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / RowFilter . java b / src / java / org / apache / cassandra / db / filter / RowFilter . java 
 index 4c0608f . . 1c934e7 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / RowFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / RowFilter . java 
 @ @ - 299 , 10 + 299 , 19 @ @ public abstract class RowFilter implements Iterable < RowFilter . Expression > 
 / / Short - circuit all partitions that won ' t match based on static and partition keys 
 for ( Expression e : partitionLevelExpressions ) 
 if ( ! e . isSatisfiedBy ( metadata , partition . partitionKey ( ) , partition . staticRow ( ) ) ) 
 + { 
 + partition . close ( ) ; 
 return null ; 
 + } 
 
 UnfilteredRowIterator iterator = Transformation . apply ( partition , this ) ; 
 - return ( filterNonStaticColumns & & ! iterator . hasNext ( ) ) ? null : iterator ; 
 + if ( filterNonStaticColumns & & ! iterator . hasNext ( ) ) 
 + { 
 + iterator . close ( ) ; 
 + return null ; 
 + } 
 + 
 + return iterator ; 
 } 
 
 public Row applyToRow ( Row row ) 
 diff - - git a / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java b / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java 
 index ea9f88a . . b814ea6 100644 
 - - - a / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RepairedDataTombstonesTest . java 
 @ @ - 182 , 9 + 182 , 11 @ @ public class RepairedDataTombstonesTest extends CQLTester 
 while ( iterator . hasNext ( ) ) 
 { 
 partitionsFound + + ; 
 - UnfilteredRowIterator rowIter = iterator . next ( ) ; 
 - int val = ByteBufferUtil . toInt ( rowIter . partitionKey ( ) . getKey ( ) ) ; 
 - assertTrue ( " val = " + val , val > = 10 & & val < 20 ) ; 
 + try ( UnfilteredRowIterator rowIter = iterator . next ( ) ) 
 + { 
 + int val = ByteBufferUtil . toInt ( rowIter . partitionKey ( ) . getKey ( ) ) ; 
 + assertTrue ( " val = " + val , val > = 10 & & val < 20 ) ; 
 + } 
 } 
 } 
 assertEquals ( 10 , partitionsFound ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index dc86de1 . . 7512c9d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 * cleanup usage of StorageService . setMode ( ) ( CASANDRA - 3388 ) 
 * Add timing information to cassandra - cli GET / SET / LIST queries ( CASSANDRA - 3326 ) 
 * Cache for CompressionMetadata objects ( CASSANDRA - 3427 ) 
 + * synchronize BiMap of bootstrapping tokens ( CASSANDRA - 3417 ) 
 + 
 
 1 . 0 . 1 
 * acquire references during index build to prevent delete problems 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index c21b363 . . 1c3c0ed 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 165 , 6 + 165 , 7 @ @ JVM _ OPTS = " $ JVM _ OPTS - XX : + UseCMSInitiatingOccupancyOnly " 
 # GC logging options - - uncomment to enable 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCDetails " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCTimeStamps " 
 + # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintHeapAtGC " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintTenuringDistribution " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintGCApplicationStoppedTime " 
 # JVM _ OPTS = " $ JVM _ OPTS - XX : + PrintPromotionFailure " 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 196e15e . . b648656 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class TokenMetadata 
 / / Finally , note that recording the tokens of joining nodes in bootstrapTokens also 
 / / means we can detect and reject the addition of multiple nodes at the same token 
 / / before one becomes part of the ring . 
 - private BiMap < Token , InetAddress > bootstrapTokens = HashBiMap . create ( ) ; 
 + private BiMap < Token , InetAddress > bootstrapTokens = Maps . synchronizedBiMap ( HashBiMap . < Token , InetAddress > create ( ) ) ; 
 / / ( don ' t need to record Token here since it ' s still part of tokenToEndpointMap until it ' s done leaving ) 
 private Set < InetAddress > leavingEndpoints = new HashSet < InetAddress > ( ) ; 
 / / this is a cache of the calculation from { tokenToEndpointMap , bootstrapTokens , leavingEndpoints }
