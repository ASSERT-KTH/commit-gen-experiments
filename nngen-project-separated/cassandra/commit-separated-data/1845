BLEU SCORE: 0.02931251013275449

TEST MSG: ninja fix CASSANDRA - 8528
GENERATED MSG: Evaluate now ( ) function at execution time

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java <nl> index 4bce2f0 . . 2fb855a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java <nl> @ @ - 248 , 7 + 248 , 7 @ @ public final class JavaSourceUDFFactory <nl> / / handle OutOfMemoryError and other fatals not here ! <nl> " if ( t instanceof VirtualMachineError ) \ n " + <nl> " throw ( VirtualMachineError ) t ; \ n " + <nl> - " throw org . apache . cassandra . exceptions . FunctionExecutionException . build ( this , t ) ; \ n " + <nl> + " throw org . apache . cassandra . exceptions . FunctionExecutionException . create ( this , t ) ; \ n " + <nl> " } \ n " + <nl> " } " ) ; <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index edbb94d . . 75b3173 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> * cqlsh : fix COPY FROM with ReversedType ( CASSANDRA - 5610 ) <nl> * Allow creating CUSTOM indexes on collections ( CASSANDRA - 5615 ) <nl> * Evaluate now ( ) function at execution time ( CASSANDRA - 5616 ) <nl> + * Expose detailed read repair metrics ( CASSANDRA - 5618 ) <nl> Merged from 1 . 1 : <nl> * Remove buggy thrift max message length option ( CASSANDRA - 5529 ) <nl> * Fix NPE in Pig ' s widerow mode ( CASSANDRA - 5488 ) <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java <nl> new file mode 100644 <nl> index 0000000 . . 3f48fee <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package org . apache . cassandra . metrics ; <nl> + <nl> + import java . util . concurrent . TimeUnit ; <nl> + <nl> + import com . yammer . metrics . Metrics ; <nl> + import com . yammer . metrics . core . Counter ; <nl> + import com . yammer . metrics . core . Gauge ; <nl> + import com . yammer . metrics . core . Meter ; <nl> + import com . yammer . metrics . core . MetricName ; <nl> + import com . yammer . metrics . util . RatioGauge ; <nl> + <nl> + / * * <nl> + * Metrics related to Read Repair . <nl> + * / <nl> + public class ReadRepairMetrics { <nl> + public static final String GROUP _ NAME = " org . apache . cassandra . metrics " ; <nl> + public static final String TYPE _ NAME = " ReadRepair " ; <nl> + <nl> + public static final Meter repairedBlocking = <nl> + Metrics . newMeter ( new MetricName ( GROUP _ NAME , TYPE _ NAME , " RepairedBlocking " ) , " RepairedBlocking " , TimeUnit . SECONDS ) ; <nl> + public static final Meter repairedBackground = <nl> + Metrics . newMeter ( new MetricName ( GROUP _ NAME , TYPE _ NAME , " RepairedBackground " ) , " RepairedBackground " , TimeUnit . SECONDS ) ; <nl> + public static final Meter attempted = <nl> + Metrics . newMeter ( new MetricName ( GROUP _ NAME , TYPE _ NAME , " Attempted " ) , " Attempted " , TimeUnit . SECONDS ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> index a19df5f . . 92032f2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ReadCallback . java <nl> + + + b / src / java / org / apache / cassandra / service / ReadCallback . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . ReadCommand ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . exceptions . ReadTimeoutException ; <nl> import org . apache . cassandra . exceptions . UnavailableException ; <nl> + import org . apache . cassandra . metrics . ReadRepairMetrics ; <nl> import org . apache . cassandra . net . IAsyncCallback ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessageOut ; <nl> @ @ - 174 , 7 + 175 , 9 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag <nl> <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Digest mismatch : " , e ) ; <nl> - <nl> + <nl> + ReadRepairMetrics . repairedBackground . mark ( ) ; <nl> + <nl> ReadCommand readCommand = ( ReadCommand ) command ; <nl> final RowDataResolver repairResolver = new RowDataResolver ( readCommand . table , readCommand . key , readCommand . filter ( ) ) ; <nl> IAsyncCallback repairHandler = new AsyncRepairCallback ( repairResolver , endpoints . size ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index e8440c4 . . 5517387 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . ReadRepairDecision ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . Table ; <nl> @ @ - 59 , 6 + 60 , 7 @ @ import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . locator . IEndpointSnitch ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . metrics . ClientRequestMetrics ; <nl> + import org . apache . cassandra . metrics . ReadRepairMetrics ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 888 , 7 + 890 , 13 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> List < InetAddress > endpoints = getLiveSortedEndpoints ( table , command . key ) ; <nl> CFMetaData cfm = Schema . instance . getCFMetaData ( command . getKeyspace ( ) , command . getColumnFamilyName ( ) ) ; <nl> - endpoints = consistency _ level . filterForQuery ( table , endpoints , cfm . newReadRepairDecision ( ) ) ; <nl> + <nl> + ReadRepairDecision rrDecision = cfm . newReadRepairDecision ( ) ; <nl> + endpoints = consistency _ level . filterForQuery ( table , endpoints , rrDecision ) ; <nl> + <nl> + if ( rrDecision ! = ReadRepairDecision . NONE ) { <nl> + ReadRepairMetrics . attempted . mark ( ) ; <nl> + } <nl> <nl> RowDigestResolver resolver = new RowDigestResolver ( command . table , command . key ) ; <nl> ReadCallback < ReadResponse , Row > handler = new ReadCallback ( resolver , consistency _ level , command , endpoints ) ; <nl> @ @ - 960 , 6 + 968 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> catch ( DigestMismatchException ex ) <nl> { <nl> logger . debug ( " Digest mismatch : { } " , ex . toString ( ) ) ; <nl> + <nl> + ReadRepairMetrics . repairedBlocking . mark ( ) ; <nl> + <nl> / / Do a full data read to resolve the correct response ( and repair node that need be ) <nl> RowDataResolver resolver = new RowDataResolver ( command . table , command . key , command . filter ( ) ) ; <nl> ReadCallback < ReadResponse , Row > repairHandler = handler . withNewResolver ( resolver ) ; <nl> @ @ - 1702 , 4 + 1713 , 16 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public Long getTruncateRpcTimeout ( ) { return DatabaseDescriptor . getTruncateRpcTimeout ( ) ; } <nl> public void setTruncateRpcTimeout ( Long timeoutInMillis ) { DatabaseDescriptor . setTruncateRpcTimeout ( timeoutInMillis ) ; } <nl> + <nl> + public long getReadRepairAttempted ( ) { <nl> + return ReadRepairMetrics . attempted . count ( ) ; <nl> + } <nl> + <nl> + public long getReadRepairRepairedBlocking ( ) { <nl> + return ReadRepairMetrics . repairedBlocking . count ( ) ; <nl> + } <nl> + <nl> + public long getReadRepairRepairedBackground ( ) { <nl> + return ReadRepairMetrics . repairedBackground . count ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxyMBean . java b / src / java / org / apache / cassandra / service / StorageProxyMBean . java <nl> index 1bbfd1f . . e8f5b4a 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxyMBean . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxyMBean . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ <nl> * / <nl> package org . apache . cassandra . service ; <nl> <nl> + import org . apache . cassandra . metrics . ReadRepairMetrics ; <nl> + <nl> public interface StorageProxyMBean <nl> { <nl> / * * <nl> @ @ - 86 , 4 + 88 , 8 @ @ public interface StorageProxyMBean <nl> public void setRangeRpcTimeout ( Long timeoutInMillis ) ; <nl> public Long getTruncateRpcTimeout ( ) ; <nl> public void setTruncateRpcTimeout ( Long timeoutInMillis ) ; <nl> + <nl> + public long getReadRepairAttempted ( ) ; <nl> + public long getReadRepairRepairedBlocking ( ) ; <nl> + public long getReadRepairRepairedBackground ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index bca0fcd . . 1cb30ad 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 669 , 6 + 669 , 8 @ @ public class NodeCmd <nl> outs . printf ( " Error retrieving file data for % s % n " , host ) ; <nl> } <nl> } <nl> + <nl> + outs . printf ( " Read Repair Statistics : % nAttempted : % d % nMismatch ( Blocking ) : % d % nMismatch ( Background ) : % d % n " , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; <nl> <nl> MessagingServiceMBean ms = probe . msProxy ; <nl> outs . printf ( " % - 25s " , " Pool Name " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 5db8f1c . . dbcb66e 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 825 , 6 + 825 , 21 @ @ public class NodeProbe <nl> { <nl> return failed ; <nl> } <nl> + <nl> + public long getReadRepairAttempted ( ) <nl> + { <nl> + return spProxy . getReadRepairAttempted ( ) ; <nl> + } <nl> + <nl> + public long getReadRepairRepairedBlocking ( ) <nl> + { <nl> + return spProxy . getReadRepairRepairedBlocking ( ) ; <nl> + } <nl> + <nl> + public long getReadRepairRepairedBackground ( ) <nl> + { <nl> + return spProxy . getReadRepairRepairedBackground ( ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > >

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java 
 index 4bce2f0 . . 2fb855a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / JavaSourceUDFFactory . java 
 @ @ - 248 , 7 + 248 , 7 @ @ public final class JavaSourceUDFFactory 
 / / handle OutOfMemoryError and other fatals not here ! 
 " if ( t instanceof VirtualMachineError ) \ n " + 
 " throw ( VirtualMachineError ) t ; \ n " + 
 - " throw org . apache . cassandra . exceptions . FunctionExecutionException . build ( this , t ) ; \ n " + 
 + " throw org . apache . cassandra . exceptions . FunctionExecutionException . create ( this , t ) ; \ n " + 
 " } \ n " + 
 " } " ) ; 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index edbb94d . . 75b3173 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 * cqlsh : fix COPY FROM with ReversedType ( CASSANDRA - 5610 ) 
 * Allow creating CUSTOM indexes on collections ( CASSANDRA - 5615 ) 
 * Evaluate now ( ) function at execution time ( CASSANDRA - 5616 ) 
 + * Expose detailed read repair metrics ( CASSANDRA - 5618 ) 
 Merged from 1 . 1 : 
 * Remove buggy thrift max message length option ( CASSANDRA - 5529 ) 
 * Fix NPE in Pig ' s widerow mode ( CASSANDRA - 5488 ) 
 diff - - git a / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java 
 new file mode 100644 
 index 0000000 . . 3f48fee 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / metrics / ReadRepairMetrics . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package org . apache . cassandra . metrics ; 
 + 
 + import java . util . concurrent . TimeUnit ; 
 + 
 + import com . yammer . metrics . Metrics ; 
 + import com . yammer . metrics . core . Counter ; 
 + import com . yammer . metrics . core . Gauge ; 
 + import com . yammer . metrics . core . Meter ; 
 + import com . yammer . metrics . core . MetricName ; 
 + import com . yammer . metrics . util . RatioGauge ; 
 + 
 + / * * 
 + * Metrics related to Read Repair . 
 + * / 
 + public class ReadRepairMetrics { 
 + public static final String GROUP _ NAME = " org . apache . cassandra . metrics " ; 
 + public static final String TYPE _ NAME = " ReadRepair " ; 
 + 
 + public static final Meter repairedBlocking = 
 + Metrics . newMeter ( new MetricName ( GROUP _ NAME , TYPE _ NAME , " RepairedBlocking " ) , " RepairedBlocking " , TimeUnit . SECONDS ) ; 
 + public static final Meter repairedBackground = 
 + Metrics . newMeter ( new MetricName ( GROUP _ NAME , TYPE _ NAME , " RepairedBackground " ) , " RepairedBackground " , TimeUnit . SECONDS ) ; 
 + public static final Meter attempted = 
 + Metrics . newMeter ( new MetricName ( GROUP _ NAME , TYPE _ NAME , " Attempted " ) , " Attempted " , TimeUnit . SECONDS ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / service / ReadCallback . java b / src / java / org / apache / cassandra / service / ReadCallback . java 
 index a19df5f . . 92032f2 100644 
 - - - a / src / java / org / apache / cassandra / service / ReadCallback . java 
 + + + b / src / java / org / apache / cassandra / service / ReadCallback . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . db . ReadCommand ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . exceptions . ReadTimeoutException ; 
 import org . apache . cassandra . exceptions . UnavailableException ; 
 + import org . apache . cassandra . metrics . ReadRepairMetrics ; 
 import org . apache . cassandra . net . IAsyncCallback ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessageOut ; 
 @ @ - 174 , 7 + 175 , 9 @ @ public class ReadCallback < TMessage , TResolved > implements IAsyncCallback < TMessag 
 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Digest mismatch : " , e ) ; 
 - 
 + 
 + ReadRepairMetrics . repairedBackground . mark ( ) ; 
 + 
 ReadCommand readCommand = ( ReadCommand ) command ; 
 final RowDataResolver repairResolver = new RowDataResolver ( readCommand . table , readCommand . key , readCommand . filter ( ) ) ; 
 IAsyncCallback repairHandler = new AsyncRepairCallback ( repairResolver , endpoints . size ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index e8440c4 . . 5517387 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . ReadRepairDecision ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . Table ; 
 @ @ - 59 , 6 + 60 , 7 @ @ import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . locator . IEndpointSnitch ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . metrics . ClientRequestMetrics ; 
 + import org . apache . cassandra . metrics . ReadRepairMetrics ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 888 , 7 + 890 , 13 @ @ public class StorageProxy implements StorageProxyMBean 
 
 List < InetAddress > endpoints = getLiveSortedEndpoints ( table , command . key ) ; 
 CFMetaData cfm = Schema . instance . getCFMetaData ( command . getKeyspace ( ) , command . getColumnFamilyName ( ) ) ; 
 - endpoints = consistency _ level . filterForQuery ( table , endpoints , cfm . newReadRepairDecision ( ) ) ; 
 + 
 + ReadRepairDecision rrDecision = cfm . newReadRepairDecision ( ) ; 
 + endpoints = consistency _ level . filterForQuery ( table , endpoints , rrDecision ) ; 
 + 
 + if ( rrDecision ! = ReadRepairDecision . NONE ) { 
 + ReadRepairMetrics . attempted . mark ( ) ; 
 + } 
 
 RowDigestResolver resolver = new RowDigestResolver ( command . table , command . key ) ; 
 ReadCallback < ReadResponse , Row > handler = new ReadCallback ( resolver , consistency _ level , command , endpoints ) ; 
 @ @ - 960 , 6 + 968 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 catch ( DigestMismatchException ex ) 
 { 
 logger . debug ( " Digest mismatch : { } " , ex . toString ( ) ) ; 
 + 
 + ReadRepairMetrics . repairedBlocking . mark ( ) ; 
 + 
 / / Do a full data read to resolve the correct response ( and repair node that need be ) 
 RowDataResolver resolver = new RowDataResolver ( command . table , command . key , command . filter ( ) ) ; 
 ReadCallback < ReadResponse , Row > repairHandler = handler . withNewResolver ( resolver ) ; 
 @ @ - 1702 , 4 + 1713 , 16 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public Long getTruncateRpcTimeout ( ) { return DatabaseDescriptor . getTruncateRpcTimeout ( ) ; } 
 public void setTruncateRpcTimeout ( Long timeoutInMillis ) { DatabaseDescriptor . setTruncateRpcTimeout ( timeoutInMillis ) ; } 
 + 
 + public long getReadRepairAttempted ( ) { 
 + return ReadRepairMetrics . attempted . count ( ) ; 
 + } 
 + 
 + public long getReadRepairRepairedBlocking ( ) { 
 + return ReadRepairMetrics . repairedBlocking . count ( ) ; 
 + } 
 + 
 + public long getReadRepairRepairedBackground ( ) { 
 + return ReadRepairMetrics . repairedBackground . count ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxyMBean . java b / src / java / org / apache / cassandra / service / StorageProxyMBean . java 
 index 1bbfd1f . . e8f5b4a 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxyMBean . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxyMBean . java 
 @ @ - 17 , 6 + 17 , 8 @ @ 
 * / 
 package org . apache . cassandra . service ; 
 
 + import org . apache . cassandra . metrics . ReadRepairMetrics ; 
 + 
 public interface StorageProxyMBean 
 { 
 / * * 
 @ @ - 86 , 4 + 88 , 8 @ @ public interface StorageProxyMBean 
 public void setRangeRpcTimeout ( Long timeoutInMillis ) ; 
 public Long getTruncateRpcTimeout ( ) ; 
 public void setTruncateRpcTimeout ( Long timeoutInMillis ) ; 
 + 
 + public long getReadRepairAttempted ( ) ; 
 + public long getReadRepairRepairedBlocking ( ) ; 
 + public long getReadRepairRepairedBackground ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index bca0fcd . . 1cb30ad 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 669 , 6 + 669 , 8 @ @ public class NodeCmd 
 outs . printf ( " Error retrieving file data for % s % n " , host ) ; 
 } 
 } 
 + 
 + outs . printf ( " Read Repair Statistics : % nAttempted : % d % nMismatch ( Blocking ) : % d % nMismatch ( Background ) : % d % n " , probe . getReadRepairAttempted ( ) , probe . getReadRepairRepairedBlocking ( ) , probe . getReadRepairRepairedBackground ( ) ) ; 
 
 MessagingServiceMBean ms = probe . msProxy ; 
 outs . printf ( " % - 25s " , " Pool Name " ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 5db8f1c . . dbcb66e 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 825 , 6 + 825 , 21 @ @ public class NodeProbe 
 { 
 return failed ; 
 } 
 + 
 + public long getReadRepairAttempted ( ) 
 + { 
 + return spProxy . getReadRepairAttempted ( ) ; 
 + } 
 + 
 + public long getReadRepairRepairedBlocking ( ) 
 + { 
 + return spProxy . getReadRepairRepairedBlocking ( ) ; 
 + } 
 + 
 + public long getReadRepairRepairedBackground ( ) 
 + { 
 + return spProxy . getReadRepairRepairedBackground ( ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > >
