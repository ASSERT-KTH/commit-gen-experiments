BLEU SCORE: 0.07593603555191142

TEST MSG: CASSANDRA - 6916 followup , make sure offline split works
GENERATED MSG: CASSANDRA - 414 combine addToList and storeLocation ; rename to addSSTable

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 77dc7b0 . . c1c5504 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 218 , 7 + 218 , 8 @ @ public class CompactionTask extends AbstractCompactionTask <nl> <nl> Collection < SSTableReader > oldSStables = this . sstables ; <nl> List < SSTableReader > newSStables = writer . finished ( ) ; <nl> - cfs . getDataTracker ( ) . markCompactedSSTablesReplaced ( oldSStables , newSStables , compactionType ) ; <nl> + if ( ! offline ) <nl> + cfs . getDataTracker ( ) . markCompactedSSTablesReplaced ( oldSStables , newSStables , compactionType ) ; <nl> <nl> / / log a bunch of statistics about the result and save to system table compaction _ history <nl> long dTime = TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - start ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java <nl> index 67705e0 . . 6b9f161 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class SSTableSplitter { <nl> @ Override <nl> protected CompactionController getCompactionController ( Set < SSTableReader > toCompact ) <nl> { <nl> - return new SplitController ( cfs , toCompact ) ; <nl> + return new SplitController ( cfs ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class SSTableSplitter { <nl> <nl> public static class SplitController extends CompactionController <nl> { <nl> - public SplitController ( ColumnFamilyStore cfs , Collection < SSTableReader > toCompact ) <nl> + public SplitController ( ColumnFamilyStore cfs ) <nl> { <nl> super ( cfs , CompactionManager . NO _ GC ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> index 2dfefc4 . . 553993a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java <nl> @ @ - 37 , 6 + 37 , 21 @ @ import org . apache . cassandra . db . compaction . AbstractCompactedRow ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . utils . CLibrary ; <nl> <nl> + / * * <nl> + * Wraps one or more writers as output for rewriting one or more readers : every sstable _ preemptive _ open _ interval _ in _ mb <nl> + * we look in the summary we ' re collecting for the latest writer for the penultimate key that we know to have been fully <nl> + * flushed to the index file , and then double check that the key is fully present in the flushed data file . <nl> + * Then we move the starts of each reader forwards to that point , replace them in the datatracker , and attach a runnable <nl> + * for on - close ( i . e . when all references expire ) that drops the page cache prior to that key position <nl> + * <nl> + * hard - links are created for each partially written sstable so that readers opened against them continue to work past <nl> + * the rename of the temporary file , which is deleted once all readers against the hard - link have been closed . <nl> + * If for any reason the writer is rolled over , we immediately rename and fully expose the completed file in the DataTracker . <nl> + * <nl> + * On abort we restore the original lower bounds to the existing readers and delete any temporary files we had in progress , <nl> + * but leave any hard - links in place for the readers we opened to cleanup when they ' re finished as we would had we finished <nl> + * successfully . <nl> + * / <nl> public class SSTableRewriter <nl> { <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> index 9cc98f7 . . 32801ec 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> @ @ - 175 , 7 + 175 , 7 @ @ public class BinaryMemtable <nl> writer . append ( key , bytes ) ; <nl> } <nl> } <nl> - cfStore . storeLocation ( writer . closeAndOpenReader ( ) ) ; <nl> + cfStore . addSSTable ( writer . closeAndOpenReader ( ) ) ; <nl> columnFamilies _ . clear ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 1fe09a4 . . 9692265 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 241 , 24 + 241 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> sb . append ( newLineSeparator ) ; <nl> return sb . toString ( ) ; <nl> } <nl> - <nl> - / * <nl> - * This is called after bootstrap to add the files <nl> - * to the list of files maintained . <nl> - * / <nl> - void addToList ( SSTableReader file ) <nl> - { <nl> - sstableLock _ . writeLock ( ) . lock ( ) ; <nl> - try <nl> - { <nl> - ssTables _ . put ( file . getFilename ( ) , file ) ; <nl> - } <nl> - finally <nl> - { <nl> - sstableLock _ . writeLock ( ) . unlock ( ) ; <nl> - } <nl> - } <nl> - <nl> + <nl> / * <nl> * This method forces a compaction of the SSTables on disk . We wait <nl> * for the process to complete by waiting on a future pointer . <nl> @ @ - 585 , 7 + 568 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> / * <nl> - * Called after the Memtable flushes its in - memory data . This information is <nl> + * Called after the Memtable flushes its in - memory data , or we add a file <nl> + * via bootstrap . This information is <nl> * cached in the ColumnFamilyStore . This is useful for reads because the <nl> * ColumnFamilyStore first looks in the in - memory store and the into the <nl> * disk to find the key . If invoked during recoveryMode the <nl> @ @ - 594 , 7 + 578 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * param @ filename - filename just flushed to disk <nl> * param @ bf - bloom filter which indicates the keys that are in this file . <nl> * / <nl> - void storeLocation ( SSTableReader sstable ) <nl> + void addSSTable ( SSTableReader sstable ) <nl> { <nl> int ssTableCount ; <nl> sstableLock _ . writeLock ( ) . lock ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 7b105d1 . . 2599f57 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 214 , 7 + 214 , 7 @ @ public class Memtable implements Comparable < Memtable > <nl> } <nl> SSTableReader ssTable = writer . closeAndOpenReader ( ) ; <nl> cfStore . onMemtableFlush ( cLogCtx ) ; <nl> - cfStore . storeLocation ( ssTable ) ; <nl> + cfStore . addSSTable ( ssTable ) ; <nl> buffer . close ( ) ; <nl> isFlushed _ = true ; <nl> logger _ . info ( " Completed flushing " + this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 04b28fb . . 5fdd9a1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 23 , 18 + 23 , 12 @ @ import java . io . IOException ; <nl> import java . io . File ; <nl> import java . util . concurrent . locks . Lock ; <nl> import java . util . concurrent . locks . ReentrantLock ; <nl> - import java . util . concurrent . ExecutionException ; <nl> - <nl> - import org . apache . commons . collections . IteratorUtils ; <nl> - import org . apache . commons . collections . Predicate ; <nl> - import org . apache . commons . lang . ArrayUtils ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . BootstrapInitiateMessage ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . io . DataInputBuffer ; <nl> import org . apache . cassandra . io . SSTableReader ; <nl> - import org . apache . cassandra . io . FileStruct ; <nl> import org . apache . cassandra . io . SSTableWriter ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . net . IVerbHandler ; <nl> @ @ - 185 , 7 + 179 , 7 @ @ public class Table <nl> sstable = SSTableWriter . renameAndOpen ( streamContext . getTargetFile ( ) ) ; <nl> <nl> / / TODO add a sanity check that this sstable has all its parts and is ok <nl> - Table . open ( tableName ) . getColumnFamilyStore ( temp [ 0 ] ) . addToList ( sstable ) ; <nl> + Table . open ( tableName ) . getColumnFamilyStore ( temp [ 0 ] ) . addSSTable ( sstable ) ; <nl> logger _ . info ( " Bootstrap added " + sstable . getFilename ( ) ) ; <nl> } <nl> catch ( IOException e )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 77dc7b0 . . c1c5504 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 218 , 7 + 218 , 8 @ @ public class CompactionTask extends AbstractCompactionTask 
 
 Collection < SSTableReader > oldSStables = this . sstables ; 
 List < SSTableReader > newSStables = writer . finished ( ) ; 
 - cfs . getDataTracker ( ) . markCompactedSSTablesReplaced ( oldSStables , newSStables , compactionType ) ; 
 + if ( ! offline ) 
 + cfs . getDataTracker ( ) . markCompactedSSTablesReplaced ( oldSStables , newSStables , compactionType ) ; 
 
 / / log a bunch of statistics about the result and save to system table compaction _ history 
 long dTime = TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - start ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java 
 index 67705e0 . . 6b9f161 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / SSTableSplitter . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class SSTableSplitter { 
 @ Override 
 protected CompactionController getCompactionController ( Set < SSTableReader > toCompact ) 
 { 
 - return new SplitController ( cfs , toCompact ) ; 
 + return new SplitController ( cfs ) ; 
 } 
 
 @ Override 
 @ @ - 85 , 7 + 85 , 7 @ @ public class SSTableSplitter { 
 
 public static class SplitController extends CompactionController 
 { 
 - public SplitController ( ColumnFamilyStore cfs , Collection < SSTableReader > toCompact ) 
 + public SplitController ( ColumnFamilyStore cfs ) 
 { 
 super ( cfs , CompactionManager . NO _ GC ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 index 2dfefc4 . . 553993a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableRewriter . java 
 @ @ - 37 , 6 + 37 , 21 @ @ import org . apache . cassandra . db . compaction . AbstractCompactedRow ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . utils . CLibrary ; 
 
 + / * * 
 + * Wraps one or more writers as output for rewriting one or more readers : every sstable _ preemptive _ open _ interval _ in _ mb 
 + * we look in the summary we ' re collecting for the latest writer for the penultimate key that we know to have been fully 
 + * flushed to the index file , and then double check that the key is fully present in the flushed data file . 
 + * Then we move the starts of each reader forwards to that point , replace them in the datatracker , and attach a runnable 
 + * for on - close ( i . e . when all references expire ) that drops the page cache prior to that key position 
 + * 
 + * hard - links are created for each partially written sstable so that readers opened against them continue to work past 
 + * the rename of the temporary file , which is deleted once all readers against the hard - link have been closed . 
 + * If for any reason the writer is rolled over , we immediately rename and fully expose the completed file in the DataTracker . 
 + * 
 + * On abort we restore the original lower bounds to the existing readers and delete any temporary files we had in progress , 
 + * but leave any hard - links in place for the readers we opened to cleanup when they ' re finished as we would had we finished 
 + * successfully . 
 + * / 
 public class SSTableRewriter 
 { 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 index 9cc98f7 . . 32801ec 100644 
 - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 @ @ - 175 , 7 + 175 , 7 @ @ public class BinaryMemtable 
 writer . append ( key , bytes ) ; 
 } 
 } 
 - cfStore . storeLocation ( writer . closeAndOpenReader ( ) ) ; 
 + cfStore . addSSTable ( writer . closeAndOpenReader ( ) ) ; 
 columnFamilies _ . clear ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 1fe09a4 . . 9692265 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 241 , 24 + 241 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 sb . append ( newLineSeparator ) ; 
 return sb . toString ( ) ; 
 } 
 - 
 - / * 
 - * This is called after bootstrap to add the files 
 - * to the list of files maintained . 
 - * / 
 - void addToList ( SSTableReader file ) 
 - { 
 - sstableLock _ . writeLock ( ) . lock ( ) ; 
 - try 
 - { 
 - ssTables _ . put ( file . getFilename ( ) , file ) ; 
 - } 
 - finally 
 - { 
 - sstableLock _ . writeLock ( ) . unlock ( ) ; 
 - } 
 - } 
 - 
 + 
 / * 
 * This method forces a compaction of the SSTables on disk . We wait 
 * for the process to complete by waiting on a future pointer . 
 @ @ - 585 , 7 + 568 , 8 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 / * 
 - * Called after the Memtable flushes its in - memory data . This information is 
 + * Called after the Memtable flushes its in - memory data , or we add a file 
 + * via bootstrap . This information is 
 * cached in the ColumnFamilyStore . This is useful for reads because the 
 * ColumnFamilyStore first looks in the in - memory store and the into the 
 * disk to find the key . If invoked during recoveryMode the 
 @ @ - 594 , 7 + 578 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * param @ filename - filename just flushed to disk 
 * param @ bf - bloom filter which indicates the keys that are in this file . 
 * / 
 - void storeLocation ( SSTableReader sstable ) 
 + void addSSTable ( SSTableReader sstable ) 
 { 
 int ssTableCount ; 
 sstableLock _ . writeLock ( ) . lock ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 7b105d1 . . 2599f57 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 214 , 7 + 214 , 7 @ @ public class Memtable implements Comparable < Memtable > 
 } 
 SSTableReader ssTable = writer . closeAndOpenReader ( ) ; 
 cfStore . onMemtableFlush ( cLogCtx ) ; 
 - cfStore . storeLocation ( ssTable ) ; 
 + cfStore . addSSTable ( ssTable ) ; 
 buffer . close ( ) ; 
 isFlushed _ = true ; 
 logger _ . info ( " Completed flushing " + this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 04b28fb . . 5fdd9a1 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 23 , 18 + 23 , 12 @ @ import java . io . IOException ; 
 import java . io . File ; 
 import java . util . concurrent . locks . Lock ; 
 import java . util . concurrent . locks . ReentrantLock ; 
 - import java . util . concurrent . ExecutionException ; 
 - 
 - import org . apache . commons . collections . IteratorUtils ; 
 - import org . apache . commons . collections . Predicate ; 
 - import org . apache . commons . lang . ArrayUtils ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . BootstrapInitiateMessage ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . io . DataInputBuffer ; 
 import org . apache . cassandra . io . SSTableReader ; 
 - import org . apache . cassandra . io . FileStruct ; 
 import org . apache . cassandra . io . SSTableWriter ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . net . IVerbHandler ; 
 @ @ - 185 , 7 + 179 , 7 @ @ public class Table 
 sstable = SSTableWriter . renameAndOpen ( streamContext . getTargetFile ( ) ) ; 
 
 / / TODO add a sanity check that this sstable has all its parts and is ok 
 - Table . open ( tableName ) . getColumnFamilyStore ( temp [ 0 ] ) . addToList ( sstable ) ; 
 + Table . open ( tableName ) . getColumnFamilyStore ( temp [ 0 ] ) . addSSTable ( sstable ) ; 
 logger _ . info ( " Bootstrap added " + sstable . getFilename ( ) ) ; 
 } 
 catch ( IOException e )
