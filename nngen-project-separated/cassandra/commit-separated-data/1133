BLEU SCORE: 0.04923026124015933

TEST MSG: Fix type casting for counter columns
GENERATED MSG: Accept Java source code for user - defined functions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9610181 . . dda12ba 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 2 <nl> + * Fix type casting for counter columns ( CASSANDRA - 10824 ) <nl> * Prevent running Cassandra as root ( CASSANDRA - 8142 ) <nl> * bound maximum in - flight commit log replay mutation bytes to 64 megabytes ( CASSANDRA - 8639 ) <nl> * Normalize all scripts ( CASSANDRA - 10679 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java b / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java <nl> index 7349f0c . . 800ff65 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java <nl> @ @ - 146 , 7 + 146 , 17 @ @ public final class CastFcts <nl> java . util . function . Function < I , O > converter ) <nl> { <nl> if ( ! inputType . equals ( outputType ) ) <nl> - functions . add ( JavaFunctionWrapper . create ( inputType , outputType , converter ) ) ; <nl> + functions . add ( wrapJavaFunction ( inputType , outputType , converter ) ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + private static < O , I > Function wrapJavaFunction ( AbstractType < I > inputType , <nl> + AbstractType < O > outputType , <nl> + java . util . function . Function < I , O > converter ) <nl> + { <nl> + return inputType . equals ( CounterColumnType . instance ) <nl> + ? JavaCounterFunctionWrapper . create ( outputType , ( java . util . function . Function < Long , O > ) converter ) <nl> + : JavaFunctionWrapper . create ( inputType , outputType , converter ) ; <nl> } <nl> <nl> private static String toLowerCaseString ( CQL3Type type ) <nl> @ @ - 192 , 7 + 202 , 7 @ @ public final class CastFcts <nl> * @ param < I > the input parameter <nl> * @ param < O > the output parameter <nl> * / <nl> - private static final class JavaFunctionWrapper < I , O > extends CastFunction < I , O > <nl> + private static class JavaFunctionWrapper < I , O > extends CastFunction < I , O > <nl> { <nl> / * * <nl> * The java function used to convert the input type into the output one . <nl> @ @ - 206 , 21 + 216 , 54 @ @ public final class CastFcts <nl> return new JavaFunctionWrapper < I , O > ( inputType , outputType , converter ) ; <nl> } <nl> <nl> - private JavaFunctionWrapper ( AbstractType < I > inputType , <nl> - AbstractType < O > outputType , <nl> - java . util . function . Function < I , O > converter ) <nl> + protected JavaFunctionWrapper ( AbstractType < I > inputType , <nl> + AbstractType < O > outputType , <nl> + java . util . function . Function < I , O > converter ) <nl> { <nl> super ( inputType , outputType ) ; <nl> this . converter = converter ; <nl> } <nl> <nl> - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + public final ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> { <nl> ByteBuffer bb = parameters . get ( 0 ) ; <nl> if ( bb = = null ) <nl> return null ; <nl> <nl> - return outputType ( ) . decompose ( converter . apply ( inputType ( ) . compose ( bb ) ) ) ; <nl> + return outputType ( ) . decompose ( converter . apply ( compose ( bb ) ) ) ; <nl> + } <nl> + <nl> + protected I compose ( ByteBuffer bb ) <nl> + { <nl> + return inputType ( ) . compose ( bb ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * < code > JavaFunctionWrapper < / code > for counter columns . <nl> + * <nl> + * < p > Counter columns need to be handled in a special way because their binary representation is converted into <nl> + * the one of a BIGINT before functions are applied . < / p > <nl> + * <nl> + * @ param < O > the output parameter <nl> + * / <nl> + private static class JavaCounterFunctionWrapper < O > extends JavaFunctionWrapper < Long , O > <nl> + { <nl> + public static < O > JavaFunctionWrapper < Long , O > create ( AbstractType < O > outputType , <nl> + java . util . function . Function < Long , O > converter ) <nl> + { <nl> + return new JavaCounterFunctionWrapper < O > ( outputType , converter ) ; <nl> + } <nl> + <nl> + protected JavaCounterFunctionWrapper ( AbstractType < O > outputType , <nl> + java . util . function . Function < Long , O > converter ) <nl> + { <nl> + super ( CounterColumnType . instance , outputType , converter ) ; <nl> + } <nl> + <nl> + protected Long compose ( ByteBuffer bb ) <nl> + { <nl> + return LongType . instance . compose ( bb ) ; <nl> } <nl> } ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java b / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java <nl> index ed30f03 . . 9b4b570 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java <nl> @ @ - 292 , 4 + 292 , 23 @ @ public class CastFctsTest extends CQLTester <nl> assertRows ( execute ( " SELECT CAST ( " + f + " ( CAST ( b AS int ) ) AS text ) FROM % s " ) , <nl> row ( " 2 . 0 " ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCounterCastsInSelectionClause ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( a int primary key , b counter ) " ) ; <nl> + <nl> + execute ( " UPDATE % s SET b = b + 2 WHERE a = 1 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT CAST ( b AS tinyint ) , " + <nl> + " CAST ( b AS smallint ) , " + <nl> + " CAST ( b AS int ) , " + <nl> + " CAST ( b AS bigint ) , " + <nl> + " CAST ( b AS float ) , " + <nl> + " CAST ( b AS double ) , " + <nl> + " CAST ( b AS decimal ) , " + <nl> + " CAST ( b AS ascii ) , " + <nl> + " CAST ( b AS text ) FROM % s " ) , <nl> + row ( ( byte ) 2 , ( short ) 2 , 2 , 2L , 2 . 0F , 2 . 0 , BigDecimal . valueOf ( 2 . 0 ) , " 2 " , " 2 " ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9610181 . . dda12ba 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 2 
 + * Fix type casting for counter columns ( CASSANDRA - 10824 ) 
 * Prevent running Cassandra as root ( CASSANDRA - 8142 ) 
 * bound maximum in - flight commit log replay mutation bytes to 64 megabytes ( CASSANDRA - 8639 ) 
 * Normalize all scripts ( CASSANDRA - 10679 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java b / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java 
 index 7349f0c . . 800ff65 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / CastFcts . java 
 @ @ - 146 , 7 + 146 , 17 @ @ public final class CastFcts 
 java . util . function . Function < I , O > converter ) 
 { 
 if ( ! inputType . equals ( outputType ) ) 
 - functions . add ( JavaFunctionWrapper . create ( inputType , outputType , converter ) ) ; 
 + functions . add ( wrapJavaFunction ( inputType , outputType , converter ) ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + private static < O , I > Function wrapJavaFunction ( AbstractType < I > inputType , 
 + AbstractType < O > outputType , 
 + java . util . function . Function < I , O > converter ) 
 + { 
 + return inputType . equals ( CounterColumnType . instance ) 
 + ? JavaCounterFunctionWrapper . create ( outputType , ( java . util . function . Function < Long , O > ) converter ) 
 + : JavaFunctionWrapper . create ( inputType , outputType , converter ) ; 
 } 
 
 private static String toLowerCaseString ( CQL3Type type ) 
 @ @ - 192 , 7 + 202 , 7 @ @ public final class CastFcts 
 * @ param < I > the input parameter 
 * @ param < O > the output parameter 
 * / 
 - private static final class JavaFunctionWrapper < I , O > extends CastFunction < I , O > 
 + private static class JavaFunctionWrapper < I , O > extends CastFunction < I , O > 
 { 
 / * * 
 * The java function used to convert the input type into the output one . 
 @ @ - 206 , 21 + 216 , 54 @ @ public final class CastFcts 
 return new JavaFunctionWrapper < I , O > ( inputType , outputType , converter ) ; 
 } 
 
 - private JavaFunctionWrapper ( AbstractType < I > inputType , 
 - AbstractType < O > outputType , 
 - java . util . function . Function < I , O > converter ) 
 + protected JavaFunctionWrapper ( AbstractType < I > inputType , 
 + AbstractType < O > outputType , 
 + java . util . function . Function < I , O > converter ) 
 { 
 super ( inputType , outputType ) ; 
 this . converter = converter ; 
 } 
 
 - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + public final ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 { 
 ByteBuffer bb = parameters . get ( 0 ) ; 
 if ( bb = = null ) 
 return null ; 
 
 - return outputType ( ) . decompose ( converter . apply ( inputType ( ) . compose ( bb ) ) ) ; 
 + return outputType ( ) . decompose ( converter . apply ( compose ( bb ) ) ) ; 
 + } 
 + 
 + protected I compose ( ByteBuffer bb ) 
 + { 
 + return inputType ( ) . compose ( bb ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * < code > JavaFunctionWrapper < / code > for counter columns . 
 + * 
 + * < p > Counter columns need to be handled in a special way because their binary representation is converted into 
 + * the one of a BIGINT before functions are applied . < / p > 
 + * 
 + * @ param < O > the output parameter 
 + * / 
 + private static class JavaCounterFunctionWrapper < O > extends JavaFunctionWrapper < Long , O > 
 + { 
 + public static < O > JavaFunctionWrapper < Long , O > create ( AbstractType < O > outputType , 
 + java . util . function . Function < Long , O > converter ) 
 + { 
 + return new JavaCounterFunctionWrapper < O > ( outputType , converter ) ; 
 + } 
 + 
 + protected JavaCounterFunctionWrapper ( AbstractType < O > outputType , 
 + java . util . function . Function < Long , O > converter ) 
 + { 
 + super ( CounterColumnType . instance , outputType , converter ) ; 
 + } 
 + 
 + protected Long compose ( ByteBuffer bb ) 
 + { 
 + return LongType . instance . compose ( bb ) ; 
 } 
 } ; 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java b / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java 
 index ed30f03 . . 9b4b570 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / functions / CastFctsTest . java 
 @ @ - 292 , 4 + 292 , 23 @ @ public class CastFctsTest extends CQLTester 
 assertRows ( execute ( " SELECT CAST ( " + f + " ( CAST ( b AS int ) ) AS text ) FROM % s " ) , 
 row ( " 2 . 0 " ) ) ; 
 } 
 + 
 + @ Test 
 + public void testCounterCastsInSelectionClause ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( a int primary key , b counter ) " ) ; 
 + 
 + execute ( " UPDATE % s SET b = b + 2 WHERE a = 1 " ) ; 
 + 
 + assertRows ( execute ( " SELECT CAST ( b AS tinyint ) , " + 
 + " CAST ( b AS smallint ) , " + 
 + " CAST ( b AS int ) , " + 
 + " CAST ( b AS bigint ) , " + 
 + " CAST ( b AS float ) , " + 
 + " CAST ( b AS double ) , " + 
 + " CAST ( b AS decimal ) , " + 
 + " CAST ( b AS ascii ) , " + 
 + " CAST ( b AS text ) FROM % s " ) , 
 + row ( ( byte ) 2 , ( short ) 2 , 2 , 2L , 2 . 0F , 2 . 0 , BigDecimal . valueOf ( 2 . 0 ) , " 2 " , " 2 " ) ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
