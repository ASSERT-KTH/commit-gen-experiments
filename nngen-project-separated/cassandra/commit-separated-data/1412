BLEU SCORE: 0.02383853510228548

TEST MSG: Fix race condition on proximal SecondaryIndex drop / create
GENERATED MSG: merge # 3437 from 1 . 0

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index c89f16a . . 797e2c7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 310 , 7 + 310 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - public ColumnFamilyStore ( Keyspace keyspace , <nl> + private ColumnFamilyStore ( Keyspace keyspace , <nl> String columnFamilyName , <nl> int generation , <nl> CFMetaData metadata , <nl> @ @ - 457 , 7 + 457 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> latencyCalculator . cancel ( false ) ; <nl> compactionStrategyManager . shutdown ( ) ; <nl> SystemKeyspace . removeTruncationRecord ( metadata . cfId ) ; <nl> + <nl> data . dropSSTables ( ) ; <nl> + TransactionLogs . waitForDeletions ( ) ; <nl> + <nl> indexManager . invalidate ( ) ; <nl> materializedViewManager . invalidate ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index 4bb0bc4 . . b5ed7f6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 18 , 11 + 18 , 14 @ @ <nl> package org . apache . cassandra . db . index ; <nl> <nl> import java . nio . ByteBuffer ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . concurrent . Future ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . db . partitions . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> @ @ - 155 , 6 + 158 , 15 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> <nl> public void removeIndex ( ByteBuffer columnName ) <nl> { <nl> + / / interrupt in - progress compactions <nl> + Collection < ColumnFamilyStore > cfss = Collections . singleton ( indexCfs ) ; <nl> + CompactionManager . instance . interruptCompactionForCFs ( cfss , true ) ; <nl> + CompactionManager . instance . waitForCessation ( cfss ) ; <nl> + <nl> + indexCfs . keyspace . writeOrder . awaitNewBarrier ( ) ; <nl> + indexCfs . forceBlockingFlush ( ) ; <nl> + <nl> + indexCfs . readOrdering . awaitNewBarrier ( ) ; <nl> indexCfs . invalidate ( ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java <nl> index 80e7831 . . 821f58c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java <nl> @ @ - 479 , 7 + 479 , 7 @ @ public class TransactionLogs extends Transactional . AbstractTransactional impleme <nl> } <nl> catch ( NoSuchFileException e ) <nl> { <nl> - logger . warn ( " Unable to delete { } as it does not exist " , file ) ; <nl> + logger . error ( " Unable to delete { } as it does not exist " , file ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index f415f2b . . c3de1db 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . charset . Charset ; <nl> import java . nio . file . * ; <nl> import java . text . DecimalFormat ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> import org . apache . cassandra . config . Config ; <nl> @ @ - 615 , 6 + 616 , 11 @ @ public class FileUtils <nl> { <nl> return Files . readAllLines ( file . toPath ( ) , Charset . forName ( " utf - 8 " ) ) ; <nl> } <nl> + catch ( NoSuchFileException ex ) <nl> + { <nl> + logger . warn ( " Tried to read non existing file : { } " , file ) ; <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> catch ( IOException ex ) <nl> { <nl> throw new RuntimeException ( ex ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java b / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java <nl> index 89924a5 . . ea0d9a8 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java <nl> @ @ - 205 , 14 + 205 , 19 @ @ public class TrackerTest <nl> <nl> try <nl> { <nl> - TransactionLogs . pauseDeletions ( true ) ; <nl> + / / TransactionLogs . pauseDeletions ( true ) ; <nl> try ( LifecycleTransaction txn = tracker . tryModify ( readers . get ( 0 ) , OperationType . COMPACTION ) ) <nl> { <nl> if ( invalidate ) <nl> + { <nl> cfs . invalidate ( false ) ; <nl> + } <nl> else <nl> + { <nl> tracker . dropSSTables ( ) ; <nl> - Assert . assertEquals ( 95 , cfs . metric . totalDiskSpaceUsed . getCount ( ) ) ; <nl> + TransactionLogs . waitForDeletions ( ) ; <nl> + } <nl> + Assert . assertEquals ( 9 , cfs . metric . totalDiskSpaceUsed . getCount ( ) ) ; <nl> Assert . assertEquals ( 9 , cfs . metric . liveDiskSpaceUsed . getCount ( ) ) ; <nl> Assert . assertEquals ( 1 , tracker . getView ( ) . sstables . size ( ) ) ; <nl> } <nl> @ @ - 253 , 7 + 258 , 7 @ @ public class TrackerTest <nl> } <nl> finally <nl> { <nl> - TransactionLogs . pauseDeletions ( false ) ; <nl> + / / TransactionLogs . pauseDeletions ( false ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java <nl> index 4339877 . . 991eed3 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java <nl> @ @ - 502 , 7 + 502 , 31 @ @ public class TransactionLogsTest extends AbstractTransactionalTest <nl> sstable2 . selfRef ( ) . release ( ) ; <nl> } <nl> <nl> - public static SSTableReader sstable ( ColumnFamilyStore cfs , int generation , int size ) throws IOException <nl> + @ Test <nl> + public void testGetTemporaryFilesSafeAfterObsoletion ( ) throws Throwable <nl> + { <nl> + ColumnFamilyStore cfs = MockSchema . newCFS ( KEYSPACE ) ; <nl> + SSTableReader sstable = sstable ( cfs , 0 , 128 ) ; <nl> + File dataFolder = sstable . descriptor . directory ; <nl> + <nl> + TransactionLogs transactionLogs = new TransactionLogs ( OperationType . COMPACTION , cfs . metadata ) ; <nl> + assertNotNull ( transactionLogs ) ; <nl> + <nl> + TransactionLogs . SSTableTidier tidier = transactionLogs . obsoleted ( sstable ) ; <nl> + <nl> + transactionLogs . finish ( ) ; <nl> + sstable . markObsolete ( tidier ) ; <nl> + sstable . selfRef ( ) . release ( ) ; <nl> + <nl> + for ( int i = 0 ; i < 1000 ; i + + ) <nl> + { <nl> + / / This should race with the asynchronous deletion of txn log files <nl> + / / It doesn ' t matter what it returns but it should not throw <nl> + TransactionLogs . getTemporaryFiles ( cfs . metadata , dataFolder ) ; <nl> + } <nl> + } <nl> + <nl> + private static SSTableReader sstable ( ColumnFamilyStore cfs , int generation , int size ) throws IOException <nl> { <nl> Directories dir = new Directories ( cfs . metadata ) ; <nl> Descriptor descriptor = new Descriptor ( dir . getDirectoryForNewSSTables ( ) , cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , generation ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0f68c66 . . 58fb125 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1633 , 30 + 1633 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return CompactionManager . instance . submitTruncate ( this , truncatedAt ) ; <nl> } <nl> <nl> - / / if this errors out , we are in a world of hurt . <nl> - public void renameSSTables ( String newCfName ) throws IOException <nl> - { <nl> - / / complete as much of the job as possible . Don ' t let errors long the way prevent as much renaming as possible <nl> - / / from happening . <nl> - IOException mostRecentProblem = null ; <nl> - for ( File existing : DefsTable . getFiles ( table . name , columnFamily ) ) <nl> - { <nl> - try <nl> - { <nl> - String newFileName = existing . getName ( ) . replaceFirst ( " \ \ w + - " , newCfName + " - " ) ; <nl> - FileUtils . renameWithConfirm ( existing , new File ( existing . getParent ( ) , newFileName ) ) ; <nl> - } <nl> - catch ( IOException ex ) <nl> - { <nl> - mostRecentProblem = ex ; <nl> - } <nl> - } <nl> - if ( mostRecentProblem ! = null ) <nl> - throw new IOException ( " One or more IOExceptions encountered while renaming files . Most recent problem is included . " , mostRecentProblem ) ; <nl> - <nl> - indexManager . renameIndexes ( newCfName ) ; <nl> - } <nl> - <nl> public long getBloomFilterFalsePositives ( ) <nl> { <nl> return data . getBloomFilterFalsePositives ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index 4f43993 . . 42e9cf7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 123 , 14 + 123 , 7 @ @ public abstract class SecondaryIndex <nl> * @ param columnName the indexed column to remove <nl> * / <nl> public abstract void removeIndex ( ByteBuffer columnName ) throws IOException ; <nl> - <nl> - / * * <nl> - * Renames the underlying index files to reflect the new CF name <nl> - * @ param newCfName new column family name . <nl> - * @ throws IOException on any I / O error . <nl> - * / <nl> - public abstract void renameIndex ( String newCfName ) throws IOException ; <nl> - <nl> + <nl> / * * <nl> * Remove the index and unregisters this index ' s mbean if one exists <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index c75d03a . . 88528ed 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 246 , 17 + 246 , 7 @ @ public class SecondaryIndexManager <nl> for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) <nl> entry . getValue ( ) . invalidate ( ) ; <nl> } <nl> - <nl> - / * * <nl> - * Rename all underlying index files <nl> - * @ param newCfName the new index Name <nl> - * / <nl> - public void renameIndexes ( String newCfName ) throws IOException <nl> - { <nl> - for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) <nl> - entry . getValue ( ) . renameIndex ( newCfName ) ; <nl> - } <nl> - <nl> + <nl> / * * <nl> * Flush all indexes to disk <nl> * @ throws ExecutionException <nl> diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> index 492a027 . . 17a2104 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java <nl> @ @ - 148 , 11 + 148 , 6 @ @ public class KeysIndex extends PerColumnSecondaryIndex <nl> return indexCfs . columnFamily ; <nl> } <nl> <nl> - public void renameIndex ( String newCfName ) throws IOException <nl> - { <nl> - indexCfs . renameSSTables ( indexCfs . columnFamily . replace ( baseCfs . columnFamily , newCfName ) ) ; <nl> - } <nl> - <nl> public void validateOptions ( ) throws ConfigurationException <nl> { <nl> / / no options used

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index c89f16a . . 797e2c7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 310 , 7 + 310 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - public ColumnFamilyStore ( Keyspace keyspace , 
 + private ColumnFamilyStore ( Keyspace keyspace , 
 String columnFamilyName , 
 int generation , 
 CFMetaData metadata , 
 @ @ - 457 , 7 + 457 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 latencyCalculator . cancel ( false ) ; 
 compactionStrategyManager . shutdown ( ) ; 
 SystemKeyspace . removeTruncationRecord ( metadata . cfId ) ; 
 + 
 data . dropSSTables ( ) ; 
 + TransactionLogs . waitForDeletions ( ) ; 
 + 
 indexManager . invalidate ( ) ; 
 materializedViewManager . invalidate ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index 4bb0bc4 . . b5ed7f6 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 18 , 11 + 18 , 14 @ @ 
 package org . apache . cassandra . db . index ; 
 
 import java . nio . ByteBuffer ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . concurrent . Future ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . db . partitions . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 @ @ - 155 , 6 + 158 , 15 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 
 public void removeIndex ( ByteBuffer columnName ) 
 { 
 + / / interrupt in - progress compactions 
 + Collection < ColumnFamilyStore > cfss = Collections . singleton ( indexCfs ) ; 
 + CompactionManager . instance . interruptCompactionForCFs ( cfss , true ) ; 
 + CompactionManager . instance . waitForCessation ( cfss ) ; 
 + 
 + indexCfs . keyspace . writeOrder . awaitNewBarrier ( ) ; 
 + indexCfs . forceBlockingFlush ( ) ; 
 + 
 + indexCfs . readOrdering . awaitNewBarrier ( ) ; 
 indexCfs . invalidate ( ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java 
 index 80e7831 . . 821f58c 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / TransactionLogs . java 
 @ @ - 479 , 7 + 479 , 7 @ @ public class TransactionLogs extends Transactional . AbstractTransactional impleme 
 } 
 catch ( NoSuchFileException e ) 
 { 
 - logger . warn ( " Unable to delete { } as it does not exist " , file ) ; 
 + logger . error ( " Unable to delete { } as it does not exist " , file ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index f415f2b . . c3de1db 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . charset . Charset ; 
 import java . nio . file . * ; 
 import java . text . DecimalFormat ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 
 import org . apache . cassandra . config . Config ; 
 @ @ - 615 , 6 + 616 , 11 @ @ public class FileUtils 
 { 
 return Files . readAllLines ( file . toPath ( ) , Charset . forName ( " utf - 8 " ) ) ; 
 } 
 + catch ( NoSuchFileException ex ) 
 + { 
 + logger . warn ( " Tried to read non existing file : { } " , file ) ; 
 + return Collections . emptyList ( ) ; 
 + } 
 catch ( IOException ex ) 
 { 
 throw new RuntimeException ( ex ) ; 
 diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java b / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java 
 index 89924a5 . . ea0d9a8 100644 
 - - - a / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / lifecycle / TrackerTest . java 
 @ @ - 205 , 14 + 205 , 19 @ @ public class TrackerTest 
 
 try 
 { 
 - TransactionLogs . pauseDeletions ( true ) ; 
 + / / TransactionLogs . pauseDeletions ( true ) ; 
 try ( LifecycleTransaction txn = tracker . tryModify ( readers . get ( 0 ) , OperationType . COMPACTION ) ) 
 { 
 if ( invalidate ) 
 + { 
 cfs . invalidate ( false ) ; 
 + } 
 else 
 + { 
 tracker . dropSSTables ( ) ; 
 - Assert . assertEquals ( 95 , cfs . metric . totalDiskSpaceUsed . getCount ( ) ) ; 
 + TransactionLogs . waitForDeletions ( ) ; 
 + } 
 + Assert . assertEquals ( 9 , cfs . metric . totalDiskSpaceUsed . getCount ( ) ) ; 
 Assert . assertEquals ( 9 , cfs . metric . liveDiskSpaceUsed . getCount ( ) ) ; 
 Assert . assertEquals ( 1 , tracker . getView ( ) . sstables . size ( ) ) ; 
 } 
 @ @ - 253 , 7 + 258 , 7 @ @ public class TrackerTest 
 } 
 finally 
 { 
 - TransactionLogs . pauseDeletions ( false ) ; 
 + / / TransactionLogs . pauseDeletions ( false ) ; 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java 
 index 4339877 . . 991eed3 100644 
 - - - a / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / lifecycle / TransactionLogsTest . java 
 @ @ - 502 , 7 + 502 , 31 @ @ public class TransactionLogsTest extends AbstractTransactionalTest 
 sstable2 . selfRef ( ) . release ( ) ; 
 } 
 
 - public static SSTableReader sstable ( ColumnFamilyStore cfs , int generation , int size ) throws IOException 
 + @ Test 
 + public void testGetTemporaryFilesSafeAfterObsoletion ( ) throws Throwable 
 + { 
 + ColumnFamilyStore cfs = MockSchema . newCFS ( KEYSPACE ) ; 
 + SSTableReader sstable = sstable ( cfs , 0 , 128 ) ; 
 + File dataFolder = sstable . descriptor . directory ; 
 + 
 + TransactionLogs transactionLogs = new TransactionLogs ( OperationType . COMPACTION , cfs . metadata ) ; 
 + assertNotNull ( transactionLogs ) ; 
 + 
 + TransactionLogs . SSTableTidier tidier = transactionLogs . obsoleted ( sstable ) ; 
 + 
 + transactionLogs . finish ( ) ; 
 + sstable . markObsolete ( tidier ) ; 
 + sstable . selfRef ( ) . release ( ) ; 
 + 
 + for ( int i = 0 ; i < 1000 ; i + + ) 
 + { 
 + / / This should race with the asynchronous deletion of txn log files 
 + / / It doesn ' t matter what it returns but it should not throw 
 + TransactionLogs . getTemporaryFiles ( cfs . metadata , dataFolder ) ; 
 + } 
 + } 
 + 
 + private static SSTableReader sstable ( ColumnFamilyStore cfs , int generation , int size ) throws IOException 
 { 
 Directories dir = new Directories ( cfs . metadata ) ; 
 Descriptor descriptor = new Descriptor ( dir . getDirectoryForNewSSTables ( ) , cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , generation ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0f68c66 . . 58fb125 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1633 , 30 + 1633 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return CompactionManager . instance . submitTruncate ( this , truncatedAt ) ; 
 } 
 
 - / / if this errors out , we are in a world of hurt . 
 - public void renameSSTables ( String newCfName ) throws IOException 
 - { 
 - / / complete as much of the job as possible . Don ' t let errors long the way prevent as much renaming as possible 
 - / / from happening . 
 - IOException mostRecentProblem = null ; 
 - for ( File existing : DefsTable . getFiles ( table . name , columnFamily ) ) 
 - { 
 - try 
 - { 
 - String newFileName = existing . getName ( ) . replaceFirst ( " \ \ w + - " , newCfName + " - " ) ; 
 - FileUtils . renameWithConfirm ( existing , new File ( existing . getParent ( ) , newFileName ) ) ; 
 - } 
 - catch ( IOException ex ) 
 - { 
 - mostRecentProblem = ex ; 
 - } 
 - } 
 - if ( mostRecentProblem ! = null ) 
 - throw new IOException ( " One or more IOExceptions encountered while renaming files . Most recent problem is included . " , mostRecentProblem ) ; 
 - 
 - indexManager . renameIndexes ( newCfName ) ; 
 - } 
 - 
 public long getBloomFilterFalsePositives ( ) 
 { 
 return data . getBloomFilterFalsePositives ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index 4f43993 . . 42e9cf7 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 123 , 14 + 123 , 7 @ @ public abstract class SecondaryIndex 
 * @ param columnName the indexed column to remove 
 * / 
 public abstract void removeIndex ( ByteBuffer columnName ) throws IOException ; 
 - 
 - / * * 
 - * Renames the underlying index files to reflect the new CF name 
 - * @ param newCfName new column family name . 
 - * @ throws IOException on any I / O error . 
 - * / 
 - public abstract void renameIndex ( String newCfName ) throws IOException ; 
 - 
 + 
 / * * 
 * Remove the index and unregisters this index ' s mbean if one exists 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index c75d03a . . 88528ed 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 246 , 17 + 246 , 7 @ @ public class SecondaryIndexManager 
 for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) 
 entry . getValue ( ) . invalidate ( ) ; 
 } 
 - 
 - / * * 
 - * Rename all underlying index files 
 - * @ param newCfName the new index Name 
 - * / 
 - public void renameIndexes ( String newCfName ) throws IOException 
 - { 
 - for ( Map . Entry < ByteBuffer , SecondaryIndex > entry : indexesByColumn . entrySet ( ) ) 
 - entry . getValue ( ) . renameIndex ( newCfName ) ; 
 - } 
 - 
 + 
 / * * 
 * Flush all indexes to disk 
 * @ throws ExecutionException 
 diff - - git a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 index 492a027 . . 17a2104 100644 
 - - - a / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / keys / KeysIndex . java 
 @ @ - 148 , 11 + 148 , 6 @ @ public class KeysIndex extends PerColumnSecondaryIndex 
 return indexCfs . columnFamily ; 
 } 
 
 - public void renameIndex ( String newCfName ) throws IOException 
 - { 
 - indexCfs . renameSSTables ( indexCfs . columnFamily . replace ( baseCfs . columnFamily , newCfName ) ) ; 
 - } 
 - 
 public void validateOptions ( ) throws ConfigurationException 
 { 
 / / no options used
