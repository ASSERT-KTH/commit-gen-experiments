BLEU SCORE: 0.014199193612838947

TEST MSG: Add functions to convert timeuuid to date or time , deprecate dateOf and unixTimestampOf
GENERATED MSG: Secondary index support for collections

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 355eefb . . 0a03e60 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> * Revert CASSANDRA - 7807 ( tracing completion client notifications ) ( CASSANDRA - 9429 ) <nl> * Add ability to stop compaction by ID ( CASSANDRA - 7207 ) <nl> * Let CassandraVersion handle SNAPSHOT version ( CASSANDRA - 9438 ) <nl> + * Add functions to convert timeuuid to date or time , deprecate dateOf and unixTimestampOf ( CASSANDRA - 9229 ) <nl> Merged from 2 . 1 : <nl> * Make nodetool exit with non - 0 status on failure ( CASSANDRA - 9569 ) <nl> * ( cqlsh ) Fix using COPY through SOURCE or - f ( CASSANDRA - 9083 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 9beb911 . . 3c71310 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 88 , 6 + 88 , 13 @ @ New features <nl> - New ` ShortType ` ( cql smallint ) . 2 - byte signed integer <nl> - New ` SimpleDateType ` ( cql date ) . 4 - byte unsigned integer <nl> - New ` TimeType ` ( cql time ) . 8 - byte long <nl> + - The toDate ( timeuuid ) , toTimestamp ( timeuuid ) and toUnixTimestamp ( timeuuid ) functions have been added to allow <nl> + to convert from timeuuid into date type , timestamp type and bigint raw value . <nl> + The functions unixTimestampOf ( timeuuid ) and dateOf ( timeuuid ) have been deprecated . <nl> + - The toDate ( timestamp ) and toUnixTimestamp ( timestamp ) functions have been added to allow <nl> + to convert from timestamp into date type and bigint raw value . <nl> + - The toTimestamp ( date ) and toUnixTimestamp ( date ) functions have been added to allow <nl> + to convert from date into timestamp type and bigint raw value . <nl> <nl> <nl> Upgrading <nl> diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile <nl> index 9cf7b23 . . 3755a2d 100644 <nl> - - - a / doc / cql3 / CQL . textile <nl> + + + b / doc / cql3 / CQL . textile <nl> @ @ - 1819 , 9 + 1819 , 20 @ @ will select all rows where the @ timeuuid @ column @ t @ is strictly older than ' 201 <nl> <nl> _ Warning _ : We called the values generated by @ minTimeuuid @ and @ maxTimeuuid @ _ fake _ UUID because they do no respect the Time - Based UUID generation process specified by the " RFC 4122 " : http : / / www . ietf . org / rfc / rfc4122 . txt . In particular , the value returned by these 2 methods will not be unique . This means you should only use those methods for querying ( as in the example above ) . Inserting the result of those methods is almost certainly _ a bad idea _ . <nl> <nl> - h4 . @ dateOf @ and @ unixTimestampOf @ <nl> - <nl> - The @ dateOf @ and @ unixTimestampOf @ functions take a @ timeuuid @ argument and extract the embedded timestamp . However , while the @ dateof @ function return it with the @ timestamp @ type ( that most client , including cqlsh , interpret as a date ) , the @ unixTimestampOf @ function returns it as a @ bigint @ raw value . <nl> + h3 ( # timeFun ) . Time conversion functions <nl> + <nl> + A number of functions are provided to " convert " a @ timeuuid @ , a @ timestamp @ or a @ date @ into another @ native @ type . <nl> + <nl> + | _ . function name | _ . input type | _ . description | <nl> + | @ toDate @ | @ timeuuid @ | Converts the @ timeuuid @ argument into a @ date @ type | <nl> + | @ toDate @ | @ timestamp @ | Converts the @ timestamp @ argument into a @ date @ type | <nl> + | @ toTimestamp @ | @ timeuuid @ | Converts the @ timeuuid @ argument into a @ timestamp @ type | <nl> + | @ toTimestamp @ | @ date @ | Converts the @ date @ argument into a @ timestamp @ type | <nl> + | @ toUnixTimestamp @ | @ timeuuid @ | Converts the @ timeuuid @ argument into a @ bigInt @ raw value | <nl> + | @ toUnixTimestamp @ | @ timestamp @ | Converts the @ timestamp @ argument into a @ bigInt @ raw value | <nl> + | @ toUnixTimestamp @ | @ date @ | Converts the @ date @ argument into a @ bigInt @ raw value | <nl> + | @ dateOf @ | @ timeuuid @ | Similar to @ toTimestamp ( timeuuid ) @ ( DEPRECATED ) | <nl> + | @ unixTimestampOf @ | @ timeuuid @ | Similar to @ toUnixTimestamp ( timeuuid ) @ ( DEPRECATED ) | <nl> <nl> h3 ( # blobFun ) . Blob conversion functions <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> index 7ac8039 . . c940787 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java <nl> @ @ - 46 , 11 + 46 , 18 @ @ public abstract class Functions <nl> static <nl> { <nl> declare ( AggregateFcts . countRowsFunction ) ; <nl> - declare ( TimeuuidFcts . nowFct ) ; <nl> - declare ( TimeuuidFcts . minTimeuuidFct ) ; <nl> - declare ( TimeuuidFcts . maxTimeuuidFct ) ; <nl> - declare ( TimeuuidFcts . dateOfFct ) ; <nl> - declare ( TimeuuidFcts . unixTimestampOfFct ) ; <nl> + declare ( TimeFcts . nowFct ) ; <nl> + declare ( TimeFcts . minTimeuuidFct ) ; <nl> + declare ( TimeFcts . maxTimeuuidFct ) ; <nl> + declare ( TimeFcts . dateOfFct ) ; <nl> + declare ( TimeFcts . unixTimestampOfFct ) ; <nl> + declare ( TimeFcts . timeUuidtoDate ) ; <nl> + declare ( TimeFcts . timeUuidToTimestamp ) ; <nl> + declare ( TimeFcts . timeUuidToUnixTimestamp ) ; <nl> + declare ( TimeFcts . timestampToDate ) ; <nl> + declare ( TimeFcts . timestampToUnixTimestamp ) ; <nl> + declare ( TimeFcts . dateToTimestamp ) ; <nl> + declare ( TimeFcts . dateToUnixTimestamp ) ; <nl> declare ( UuidFcts . uuidFct ) ; <nl> <nl> for ( CQL3Type type : CQL3Type . Native . values ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java <nl> new file mode 100644 <nl> index 0000000 . . a4623cd <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java <nl> @ @ - 0 , 0 + 1 , 229 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . functions ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Date ; <nl> + import java . util . List ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . db . marshal . * ; <nl> + import org . apache . cassandra . serializers . TimestampSerializer ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + <nl> + public abstract class TimeFcts <nl> + { <nl> + public static Logger logger = LoggerFactory . getLogger ( TimeFcts . class ) ; <nl> + <nl> + public static final Function nowFct = new NativeScalarFunction ( " now " , TimeUUIDType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + public static final Function minTimeuuidFct = new NativeScalarFunction ( " mintimeuuid " , TimeUUIDType . instance , TimestampType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + public static final Function maxTimeuuidFct = new NativeScalarFunction ( " maxtimeuuid " , TimeUUIDType . instance , TimestampType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of < code > TIMEUUID < / code > into a value of type < code > TIMESTAMP < / code > . <nl> + * @ deprecated Replaced by the { @ link # timeUuidToTimestamp } function <nl> + * / <nl> + public static final Function dateOfFct = new NativeScalarFunction ( " dateof " , TimestampType . instance , TimeUUIDType . instance ) <nl> + { <nl> + private volatile boolean hasLoggedDeprecationWarning ; <nl> + <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + if ( ! hasLoggedDeprecationWarning ) <nl> + { <nl> + hasLoggedDeprecationWarning = true ; <nl> + logger . warn ( " The function ' dateof ' is deprecated . " + <nl> + " Use the function ' toTimestamp ' instead . " ) ; <nl> + } <nl> + <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; <nl> + return ByteBufferUtil . bytes ( timeInMillis ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > TIMEUUID < / code > into an UNIX timestamp . <nl> + * @ deprecated Replaced by the { @ link # timeUuidToUnixTimestamp } function <nl> + * / <nl> + public static final Function unixTimestampOfFct = new NativeScalarFunction ( " unixtimestampof " , LongType . instance , TimeUUIDType . instance ) <nl> + { <nl> + private volatile boolean hasLoggedDeprecationWarning ; <nl> + <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + if ( ! hasLoggedDeprecationWarning ) <nl> + { <nl> + hasLoggedDeprecationWarning = true ; <nl> + logger . warn ( " The function ' unixtimestampof ' is deprecated . " + <nl> + " Use the function ' toUnixTimestamp ' instead . " ) ; <nl> + } <nl> + <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of < code > TIMEUUID < / code > into a value of type < code > DATE < / code > . <nl> + * / <nl> + public static final Function timeUuidtoDate = new NativeScalarFunction ( " todate " , SimpleDateType . instance , TimeUUIDType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; <nl> + return SimpleDateType . instance . fromTimeInMillis ( timeInMillis ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > TIMEUUID < / code > into a value of type < code > TIMESTAMP < / code > . <nl> + * / <nl> + public static final Function timeUuidToTimestamp = new NativeScalarFunction ( " totimestamp " , TimestampType . instance , TimeUUIDType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; <nl> + return TimestampType . instance . fromTimeInMillis ( timeInMillis ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > TIMEUUID < / code > into an UNIX timestamp . <nl> + * / <nl> + public static final Function timeUuidToUnixTimestamp = new NativeScalarFunction ( " tounixtimestamp " , LongType . instance , TimeUUIDType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > TIMESTAMP < / code > into an UNIX timestamp . <nl> + * / <nl> + public static final Function timestampToUnixTimestamp = new NativeScalarFunction ( " tounixtimestamp " , LongType . instance , TimestampType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + Date date = TimestampType . instance . compose ( bb ) ; <nl> + return date = = null ? null : ByteBufferUtil . bytes ( date . getTime ( ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > TIMESTAMP < / code > into a < code > DATE < / code > . <nl> + * / <nl> + public static final Function timestampToDate = new NativeScalarFunction ( " todate " , SimpleDateType . instance , TimestampType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + Date date = TimestampType . instance . compose ( bb ) ; <nl> + return date = = null ? null : SimpleDateType . instance . fromTimeInMillis ( date . getTime ( ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > TIMESTAMP < / code > into a < code > DATE < / code > . <nl> + * / <nl> + public static final Function dateToTimestamp = new NativeScalarFunction ( " totimestamp " , TimestampType . instance , SimpleDateType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + long millis = SimpleDateType . instance . toTimeInMillis ( bb ) ; <nl> + return TimestampType . instance . fromTimeInMillis ( millis ) ; <nl> + } <nl> + } ; <nl> + <nl> + / * * <nl> + * Function that convert a value of type < code > DATE < / code > into an UNIX timestamp . <nl> + * / <nl> + public static final Function dateToUnixTimestamp = new NativeScalarFunction ( " tounixtimestamp " , LongType . instance , SimpleDateType . instance ) <nl> + { <nl> + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> + { <nl> + ByteBuffer bb = parameters . get ( 0 ) ; <nl> + if ( bb = = null ) <nl> + return null ; <nl> + <nl> + return ByteBufferUtil . bytes ( SimpleDateType . instance . toTimeInMillis ( bb ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java <nl> deleted file mode 100644 <nl> index d24572b . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java <nl> + + + / dev / null <nl> @ @ - 1 , 88 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . cql3 . functions ; <nl> - <nl> - import java . nio . ByteBuffer ; <nl> - import java . util . Date ; <nl> - import java . util . List ; <nl> - <nl> - import org . apache . cassandra . db . marshal . TimestampType ; <nl> - import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> - import org . apache . cassandra . db . marshal . LongType ; <nl> - import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . cassandra . utils . UUIDGen ; <nl> - <nl> - public abstract class TimeuuidFcts <nl> - { <nl> - public static final Function nowFct = new NativeScalarFunction ( " now " , TimeUUIDType . instance ) <nl> - { <nl> - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> - { <nl> - return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; <nl> - } <nl> - } ; <nl> - <nl> - public static final Function minTimeuuidFct = new NativeScalarFunction ( " mintimeuuid " , TimeUUIDType . instance , TimestampType . instance ) <nl> - { <nl> - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> - { <nl> - ByteBuffer bb = parameters . get ( 0 ) ; <nl> - if ( bb = = null ) <nl> - return null ; <nl> - <nl> - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; <nl> - } <nl> - } ; <nl> - <nl> - public static final Function maxTimeuuidFct = new NativeScalarFunction ( " maxtimeuuid " , TimeUUIDType . instance , TimestampType . instance ) <nl> - { <nl> - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> - { <nl> - ByteBuffer bb = parameters . get ( 0 ) ; <nl> - if ( bb = = null ) <nl> - return null ; <nl> - <nl> - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; <nl> - } <nl> - } ; <nl> - <nl> - public static final Function dateOfFct = new NativeScalarFunction ( " dateof " , TimestampType . instance , TimeUUIDType . instance ) <nl> - { <nl> - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> - { <nl> - ByteBuffer bb = parameters . get ( 0 ) ; <nl> - if ( bb = = null ) <nl> - return null ; <nl> - <nl> - return TimestampType . instance . decompose ( new Date ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ) ; <nl> - } <nl> - } ; <nl> - <nl> - public static final Function unixTimestampOfFct = new NativeScalarFunction ( " unixtimestampof " , LongType . instance , TimeUUIDType . instance ) <nl> - { <nl> - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) <nl> - { <nl> - ByteBuffer bb = parameters . get ( 0 ) ; <nl> - if ( bb = = null ) <nl> - return null ; <nl> - <nl> - return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; <nl> - } <nl> - } ; <nl> - } <nl> - <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java <nl> index 225b9cc . . 747709e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java <nl> @ @ - 50 , 6 + 50 , 16 @ @ public class SimpleDateType extends AbstractType < Integer > <nl> return ByteBufferUtil . bytes ( SimpleDateSerializer . dateStringToDays ( source ) ) ; <nl> } <nl> <nl> + public ByteBuffer fromTimeInMillis ( long millis ) throws MarshalException <nl> + { <nl> + return ByteBufferUtil . bytes ( SimpleDateSerializer . timeInMillisToDay ( millis ) ) ; <nl> + } <nl> + <nl> + public long toTimeInMillis ( ByteBuffer buffer ) throws MarshalException <nl> + { <nl> + return SimpleDateSerializer . dayToTimeInMillis ( ByteBufferUtil . toInt ( buffer ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public boolean isCompatibleWith ( AbstractType < ? > previous ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimestampType . java b / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> index 38e0296 . . b01651d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimestampType . java <nl> @ @ - 64 , 6 + 64 , 11 @ @ public class TimestampType extends AbstractType < Date > <nl> return ByteBufferUtil . bytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ; <nl> } <nl> <nl> + public ByteBuffer fromTimeInMillis ( long millis ) throws MarshalException <nl> + { <nl> + return ByteBufferUtil . bytes ( millis ) ; <nl> + } <nl> + <nl> @ Override <nl> public Term fromJSONObject ( Object parsed ) throws MarshalException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java <nl> index 0f4bde8 . . 2509597 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java <nl> @ @ - 105 , 14 + 105 , 14 @ @ public final class SystemDistributedKeyspace <nl> { <nl> <nl> String query = " INSERT INTO % s . % s ( parent _ id , keyspace _ name , columnfamily _ names , requested _ ranges , started _ at ) " + <nl> - " VALUES ( % s , ' % s ' , { ' % s ' } , { ' % s ' } , dateOf ( now ( ) ) ) " ; <nl> + " VALUES ( % s , ' % s ' , { ' % s ' } , { ' % s ' } , toTimestamp ( now ( ) ) ) " ; <nl> String fmtQry = String . format ( query , NAME , PARENT _ REPAIR _ HISTORY , parent _ id . toString ( ) , keyspaceName , Joiner . on ( " ' , ' " ) . join ( cfnames ) , Joiner . on ( " ' , ' " ) . join ( ranges ) ) ; <nl> processSilent ( fmtQry ) ; <nl> } <nl> <nl> public static void failParentRepair ( UUID parent _ id , Throwable t ) <nl> { <nl> - String query = " UPDATE % s . % s SET finished _ at = dateOf ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE parent _ id = % s " ; <nl> + String query = " UPDATE % s . % s SET finished _ at = toTimestamp ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE parent _ id = % s " ; <nl> <nl> StringWriter sw = new StringWriter ( ) ; <nl> PrintWriter pw = new PrintWriter ( sw ) ; <nl> @ @ - 123 , 7 + 123 , 7 @ @ public final class SystemDistributedKeyspace <nl> <nl> public static void successfulParentRepair ( UUID parent _ id , Collection < Range < Token > > successfulRanges ) <nl> { <nl> - String query = " UPDATE % s . % s SET finished _ at = dateOf ( now ( ) ) , successful _ ranges = { ' % s ' } WHERE parent _ id = % s " ; <nl> + String query = " UPDATE % s . % s SET finished _ at = toTimestamp ( now ( ) ) , successful _ ranges = { ' % s ' } WHERE parent _ id = % s " ; <nl> String fmtQuery = String . format ( query , NAME , PARENT _ REPAIR _ HISTORY , Joiner . on ( " ' , ' " ) . join ( successfulRanges ) , parent _ id . toString ( ) ) ; <nl> processSilent ( fmtQuery ) ; <nl> } <nl> @ @ - 138 , 7 + 138 , 7 @ @ public final class SystemDistributedKeyspace <nl> <nl> String query = <nl> " INSERT INTO % s . % s ( keyspace _ name , columnfamily _ name , id , parent _ id , range _ begin , range _ end , coordinator , participants , status , started _ at ) " + <nl> - " VALUES ( ' % s ' , ' % s ' , % s , % s , ' % s ' , ' % s ' , ' % s ' , { ' % s ' } , ' % s ' , dateOf ( now ( ) ) ) " ; <nl> + " VALUES ( ' % s ' , ' % s ' , % s , % s , ' % s ' , ' % s ' , ' % s ' , { ' % s ' } , ' % s ' , toTimestamp ( now ( ) ) ) " ; <nl> <nl> for ( String cfname : cfnames ) <nl> { <nl> @ @ - 164 , 7 + 164 , 7 @ @ public final class SystemDistributedKeyspace <nl> <nl> public static void successfulRepairJob ( UUID id , String keyspaceName , String cfname ) <nl> { <nl> - String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = dateOf ( now ( ) ) WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; <nl> + String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = toTimestamp ( now ( ) ) WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; <nl> String fmtQuery = String . format ( query , NAME , REPAIR _ HISTORY , <nl> RepairState . SUCCESS . toString ( ) , <nl> keyspaceName , <nl> @ @ - 175 , 7 + 175 , 7 @ @ public final class SystemDistributedKeyspace <nl> <nl> public static void failedRepairJob ( UUID id , String keyspaceName , String cfname , Throwable t ) <nl> { <nl> - String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = dateOf ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; <nl> + String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = toTimestamp ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; <nl> StringWriter sw = new StringWriter ( ) ; <nl> PrintWriter pw = new PrintWriter ( sw ) ; <nl> t . printStackTrace ( pw ) ; <nl> diff - - git a / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java b / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java <nl> index 82cedc0 . . 075094c 100644 <nl> - - - a / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java <nl> + + + b / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java <nl> @ @ - 86 , 9 + 86 , 7 @ @ public class SimpleDateSerializer implements TypeSerializer < Integer > <nl> if ( millis > maxSupportedDateMillis ) <nl> throw new MarshalException ( String . format ( " Input date % s is greater than max supported date % s " , source , new LocalDate ( maxSupportedDateMillis ) . toString ( ) ) ) ; <nl> <nl> - Integer result = ( int ) TimeUnit . MILLISECONDS . toDays ( millis ) ; <nl> - result - = Integer . MIN _ VALUE ; <nl> - return result ; <nl> + return timeInMillisToDay ( millis ) ; <nl> } <nl> catch ( IllegalArgumentException e1 ) <nl> { <nl> @ @ - 96 , 6 + 94 , 18 @ @ public class SimpleDateSerializer implements TypeSerializer < Integer > <nl> } <nl> } <nl> <nl> + public static int timeInMillisToDay ( long millis ) <nl> + { <nl> + Integer result = ( int ) TimeUnit . MILLISECONDS . toDays ( millis ) ; <nl> + result - = Integer . MIN _ VALUE ; <nl> + return result ; <nl> + } <nl> + <nl> + public static long dayToTimeInMillis ( int days ) <nl> + { <nl> + return TimeUnit . DAYS . toMillis ( days - Integer . MIN _ VALUE ) ; <nl> + } <nl> + <nl> public void validate ( ByteBuffer bytes ) throws MarshalException <nl> { <nl> if ( bytes . remaining ( ) ! = 4 ) <nl> @ @ - 107 , 7 + 117 , 7 @ @ public class SimpleDateSerializer implements TypeSerializer < Integer > <nl> if ( value = = null ) <nl> return " " ; <nl> <nl> - return formatter . print ( new LocalDate ( TimeUnit . DAYS . toMillis ( value - Integer . MIN _ VALUE ) , DateTimeZone . UTC ) ) ; <nl> + return formatter . print ( new LocalDate ( dayToTimeInMillis ( value ) , DateTimeZone . UTC ) ) ; <nl> } <nl> <nl> public Class < Integer > getType ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> index af68ddc . . 768fdc3 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java <nl> @ @ - 111 , 10 + 111 , 10 @ @ public class AggregationTest extends CQLTester <nl> " LANGUAGE JAVA " + <nl> " AS ' return Double . valueOf ( Math . copySign ( magnitude , sign ) ) ; ' ; " ) ; <nl> <nl> - assertColumnNames ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . max ( system . unixtimestampof ( b ) ) " ) ; <nl> - assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( null , null ) ) ; <nl> - assertColumnNames ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . unixtimestampof ( system . max ( b ) ) " ) ; <nl> - assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( null , null ) ) ; <nl> + assertColumnNames ( execute ( " SELECT max ( a ) , max ( toUnixTimestamp ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . max ( system . tounixtimestamp ( b ) ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( a ) , max ( toUnixTimestamp ( b ) ) FROM % s " ) , row ( null , null ) ) ; <nl> + assertColumnNames ( execute ( " SELECT max ( a ) , toUnixTimestamp ( max ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . tounixtimestamp ( system . max ( b ) ) " ) ; <nl> + assertRows ( execute ( " SELECT max ( a ) , toUnixTimestamp ( max ( b ) ) FROM % s " ) , row ( null , null ) ) ; <nl> <nl> assertColumnNames ( execute ( " SELECT max ( " + copySign + " ( c , d ) ) FROM % s " ) , " system . max ( " + copySign + " ( c , d ) ) " ) ; <nl> assertRows ( execute ( " SELECT max ( " + copySign + " ( c , d ) ) FROM % s " ) , row ( ( Object ) null ) ) ; <nl> @ @ - 128 , 8 + 128 , 8 @ @ public class AggregationTest extends CQLTester <nl> Date date = format . parse ( " 2011 - 02 - 03 04 : 10 : 00 " ) ; <nl> date = DateUtils . truncate ( date , Calendar . MILLISECOND ) ; <nl> <nl> - assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; <nl> - assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; <nl> + assertRows ( execute ( " SELECT max ( a ) , max ( toUnixTimestamp ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; <nl> + assertRows ( execute ( " SELECT max ( a ) , toUnixTimestamp ( max ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; <nl> <nl> assertRows ( execute ( " SELECT " + copySign + " ( max ( c ) , min ( c ) ) FROM % s " ) , row ( - 1 . 4 ) ) ; <nl> assertRows ( execute ( " SELECT " + copySign + " ( c , d ) FROM % s " ) , row ( 1 . 2 ) , row ( - 1 . 3 ) , row ( 1 . 4 ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / TypeTest . java b / test / unit / org / apache / cassandra / cql3 / TypeTest . java <nl> index 7e12f9f . . 0605554 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / TypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / TypeTest . java <nl> @ @ - 36 , 8 + 36 , 13 @ @ public class TypeTest extends CQLTester <nl> public void testDateCompatibility ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b timestamp , c bigint , d varint , PRIMARY KEY ( a , b , c , d ) ) " ) ; <nl> - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 0 , unixTimestampOf ( now ( ) ) , dateOf ( now ( ) ) , dateOf ( now ( ) ) ) " ) ; <nl> - UntypedResultSet results = execute ( " SELECT * FROM % s WHERE a = 0 AND b < unixTimestampOf ( now ( ) ) " ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 0 , toUnixTimestamp ( now ( ) ) , toTimestamp ( now ( ) ) , toTimestamp ( now ( ) ) ) " ) ; <nl> + UntypedResultSet results = execute ( " SELECT * FROM % s WHERE a = 0 AND b < toUnixTimestamp ( now ( ) ) " ) ; <nl> + assertEquals ( 1 , results . size ( ) ) ; <nl> + <nl> + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , unixTimestampOf ( now ( ) ) , dateOf ( now ( ) ) , dateOf ( now ( ) ) ) " ) ; <nl> + results = execute ( " SELECT * FROM % s WHERE a = 1 AND b < toUnixTimestamp ( now ( ) ) " ) ; <nl> assertEquals ( 1 , results . size ( ) ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> index db94a4c . . 5a20c18 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java <nl> @ @ - 388 , 7 + 388 , 7 @ @ public class UFTest extends CQLTester <nl> execute ( " DROP FUNCTION IF EXISTS " + fSin ) ; <nl> <nl> / / can ' t drop native functions <nl> - assertInvalidMessage ( " system keyspace is not user - modifiable " , " DROP FUNCTION dateof " ) ; <nl> + assertInvalidMessage ( " system keyspace is not user - modifiable " , " DROP FUNCTION totimestamp " ) ; <nl> assertInvalidMessage ( " system keyspace is not user - modifiable " , " DROP FUNCTION uuid " ) ; <nl> <nl> / / sin ( ) no longer exists <nl> @ @ - 732 , 10 + 732 , 11 @ @ public class UFTest extends CQLTester <nl> @ Test <nl> public void testFunctionInSystemKS ( ) throws Throwable <nl> { <nl> - execute ( " CREATE OR REPLACE FUNCTION " + KEYSPACE + " . dateof ( val timeuuid ) " + <nl> + execute ( " CREATE OR REPLACE FUNCTION " + KEYSPACE + " . totimestamp ( val timeuuid ) " + <nl> " RETURNS NULL ON NULL INPUT " + <nl> " RETURNS timestamp " + <nl> " LANGUAGE JAVA \ n " + <nl> + <nl> " AS ' return null ; ' ; " ) ; <nl> <nl> assertInvalidMessage ( " system keyspace is not user - modifiable " , <nl> @ @ - 745 , 10 + 746 , 11 @ @ public class UFTest extends CQLTester <nl> " LANGUAGE JAVA \ n " + <nl> " AS ' return null ; ' ; " ) ; <nl> assertInvalidMessage ( " system keyspace is not user - modifiable " , <nl> - " CREATE OR REPLACE FUNCTION system . dateof ( val timeuuid ) " + <nl> + " CREATE OR REPLACE FUNCTION system . totimestamp ( val timeuuid ) " + <nl> " RETURNS NULL ON NULL INPUT " + <nl> " RETURNS timestamp " + <nl> " LANGUAGE JAVA \ n " + <nl> + <nl> " AS ' return null ; ' ; " ) ; <nl> assertInvalidMessage ( " system keyspace is not user - modifiable " , <nl> " DROP FUNCTION system . now " ) ; <nl> @ @ - 761 , 7 + 763 , 7 @ @ public class UFTest extends CQLTester <nl> " LANGUAGE JAVA \ n " + <nl> " AS ' return null ; ' ; " ) ; <nl> assertInvalidMessage ( " system keyspace is not user - modifiable " , <nl> - " CREATE OR REPLACE FUNCTION dateof ( val timeuuid ) " + <nl> + " CREATE OR REPLACE FUNCTION totimestamp ( val timeuuid ) " + <nl> " RETURNS NULL ON NULL INPUT " + <nl> " RETURNS timestamp " + <nl> " LANGUAGE JAVA \ n " + <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / functions / TimeFctsTest . java b / test / unit / org / apache / cassandra / cql3 / functions / TimeFctsTest . java <nl> new file mode 100644 <nl> index 0000000 . . f6fca20 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / cql3 / functions / TimeFctsTest . java <nl> @ @ - 0 , 0 + 1 , 206 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . cql3 . functions ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . db . marshal . LongType ; <nl> + import org . apache . cassandra . db . marshal . SimpleDateType ; <nl> + import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> + import org . apache . cassandra . db . marshal . TimestampType ; <nl> + import org . apache . cassandra . transport . Server ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> + import org . joda . time . DateTime ; <nl> + import org . joda . time . DateTimeZone ; <nl> + import org . joda . time . format . DateTimeFormat ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNull ; <nl> + <nl> + public class TimeFctsTest <nl> + { <nl> + @ Test <nl> + public void testMinTimeUuid ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = TimestampType . instance . fromString ( " 2015 - 05 - 21 11 : 03 : 02 + 00 " ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . minTimeuuidFct , input ) ; <nl> + assertEquals ( UUIDGen . minTimeUUID ( timeInMillis ) , TimeUUIDType . instance . compose ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testMaxTimeUuid ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = TimestampType . instance . fromString ( " 2015 - 05 - 21 11 : 03 : 02 + 00 " ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . maxTimeuuidFct , input ) ; <nl> + assertEquals ( UUIDGen . maxTimeUUID ( timeInMillis ) , TimeUUIDType . instance . compose ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDateOf ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . dateOfFct , input ) ; <nl> + assertEquals ( dateTime . toDate ( ) , TimestampType . instance . compose ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimeUuidToTimestamp ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . timeUuidToTimestamp , input ) ; <nl> + assertEquals ( dateTime . toDate ( ) , TimestampType . instance . compose ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testUnixTimestampOfFct ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . unixTimestampOfFct , input ) ; <nl> + assertEquals ( timeInMillis , LongType . instance . compose ( output ) . longValue ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimeUuidToUnixTimestamp ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . timeUuidToUnixTimestamp , input ) ; <nl> + assertEquals ( timeInMillis , LongType . instance . compose ( output ) . longValue ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimeUuidToDate ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + long timeInMillis = dateTime . getMillis ( ) ; <nl> + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . timeUuidtoDate , input ) ; <nl> + <nl> + long expectedTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 " ) <nl> + . getMillis ( ) ; <nl> + <nl> + assertEquals ( expectedTime , SimpleDateType . instance . toTimeInMillis ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDateToTimestamp ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 " ) ; <nl> + <nl> + ByteBuffer input = SimpleDateType . instance . fromString ( " 2015 - 05 - 21 " ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . dateToTimestamp , input ) ; <nl> + assertEquals ( dateTime . toDate ( ) , TimestampType . instance . compose ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDateToUnixTimestamp ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 " ) ; <nl> + <nl> + ByteBuffer input = SimpleDateType . instance . fromString ( " 2015 - 05 - 21 " ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . dateToUnixTimestamp , input ) ; <nl> + assertEquals ( dateTime . getMillis ( ) , LongType . instance . compose ( output ) . longValue ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimestampToDate ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 " ) ; <nl> + <nl> + ByteBuffer input = TimestampType . instance . fromString ( " 2015 - 05 - 21 11 : 03 : 02 + 00 " ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . timestampToDate , input ) ; <nl> + assertEquals ( dateTime . getMillis ( ) , SimpleDateType . instance . toTimeInMillis ( output ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimestampToDateWithEmptyInput ( ) <nl> + { <nl> + ByteBuffer output = executeFunction ( TimeFcts . timestampToDate , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + assertNull ( output ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimestampToUnixTimestamp ( ) <nl> + { <nl> + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) <nl> + . withZone ( DateTimeZone . UTC ) <nl> + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; <nl> + <nl> + ByteBuffer input = TimestampType . instance . decompose ( dateTime . toDate ( ) ) ; <nl> + ByteBuffer output = executeFunction ( TimeFcts . timestampToUnixTimestamp , input ) ; <nl> + assertEquals ( dateTime . getMillis ( ) , LongType . instance . compose ( output ) . longValue ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testTimestampToUnixTimestampWithEmptyInput ( ) <nl> + { <nl> + ByteBuffer output = executeFunction ( TimeFcts . timestampToUnixTimestamp , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; <nl> + assertNull ( output ) ; <nl> + } <nl> + <nl> + private static ByteBuffer executeFunction ( Function function , ByteBuffer input ) <nl> + { <nl> + List < ByteBuffer > params = Arrays . asList ( input ) ; <nl> + return ( ( ScalarFunction ) function ) . execute ( Server . CURRENT _ VERSION , params ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 355eefb . . 0a03e60 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 * Revert CASSANDRA - 7807 ( tracing completion client notifications ) ( CASSANDRA - 9429 ) 
 * Add ability to stop compaction by ID ( CASSANDRA - 7207 ) 
 * Let CassandraVersion handle SNAPSHOT version ( CASSANDRA - 9438 ) 
 + * Add functions to convert timeuuid to date or time , deprecate dateOf and unixTimestampOf ( CASSANDRA - 9229 ) 
 Merged from 2 . 1 : 
 * Make nodetool exit with non - 0 status on failure ( CASSANDRA - 9569 ) 
 * ( cqlsh ) Fix using COPY through SOURCE or - f ( CASSANDRA - 9083 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 9beb911 . . 3c71310 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 88 , 6 + 88 , 13 @ @ New features 
 - New ` ShortType ` ( cql smallint ) . 2 - byte signed integer 
 - New ` SimpleDateType ` ( cql date ) . 4 - byte unsigned integer 
 - New ` TimeType ` ( cql time ) . 8 - byte long 
 + - The toDate ( timeuuid ) , toTimestamp ( timeuuid ) and toUnixTimestamp ( timeuuid ) functions have been added to allow 
 + to convert from timeuuid into date type , timestamp type and bigint raw value . 
 + The functions unixTimestampOf ( timeuuid ) and dateOf ( timeuuid ) have been deprecated . 
 + - The toDate ( timestamp ) and toUnixTimestamp ( timestamp ) functions have been added to allow 
 + to convert from timestamp into date type and bigint raw value . 
 + - The toTimestamp ( date ) and toUnixTimestamp ( date ) functions have been added to allow 
 + to convert from date into timestamp type and bigint raw value . 
 
 
 Upgrading 
 diff - - git a / doc / cql3 / CQL . textile b / doc / cql3 / CQL . textile 
 index 9cf7b23 . . 3755a2d 100644 
 - - - a / doc / cql3 / CQL . textile 
 + + + b / doc / cql3 / CQL . textile 
 @ @ - 1819 , 9 + 1819 , 20 @ @ will select all rows where the @ timeuuid @ column @ t @ is strictly older than ' 201 
 
 _ Warning _ : We called the values generated by @ minTimeuuid @ and @ maxTimeuuid @ _ fake _ UUID because they do no respect the Time - Based UUID generation process specified by the " RFC 4122 " : http : / / www . ietf . org / rfc / rfc4122 . txt . In particular , the value returned by these 2 methods will not be unique . This means you should only use those methods for querying ( as in the example above ) . Inserting the result of those methods is almost certainly _ a bad idea _ . 
 
 - h4 . @ dateOf @ and @ unixTimestampOf @ 
 - 
 - The @ dateOf @ and @ unixTimestampOf @ functions take a @ timeuuid @ argument and extract the embedded timestamp . However , while the @ dateof @ function return it with the @ timestamp @ type ( that most client , including cqlsh , interpret as a date ) , the @ unixTimestampOf @ function returns it as a @ bigint @ raw value . 
 + h3 ( # timeFun ) . Time conversion functions 
 + 
 + A number of functions are provided to " convert " a @ timeuuid @ , a @ timestamp @ or a @ date @ into another @ native @ type . 
 + 
 + | _ . function name | _ . input type | _ . description | 
 + | @ toDate @ | @ timeuuid @ | Converts the @ timeuuid @ argument into a @ date @ type | 
 + | @ toDate @ | @ timestamp @ | Converts the @ timestamp @ argument into a @ date @ type | 
 + | @ toTimestamp @ | @ timeuuid @ | Converts the @ timeuuid @ argument into a @ timestamp @ type | 
 + | @ toTimestamp @ | @ date @ | Converts the @ date @ argument into a @ timestamp @ type | 
 + | @ toUnixTimestamp @ | @ timeuuid @ | Converts the @ timeuuid @ argument into a @ bigInt @ raw value | 
 + | @ toUnixTimestamp @ | @ timestamp @ | Converts the @ timestamp @ argument into a @ bigInt @ raw value | 
 + | @ toUnixTimestamp @ | @ date @ | Converts the @ date @ argument into a @ bigInt @ raw value | 
 + | @ dateOf @ | @ timeuuid @ | Similar to @ toTimestamp ( timeuuid ) @ ( DEPRECATED ) | 
 + | @ unixTimestampOf @ | @ timeuuid @ | Similar to @ toUnixTimestamp ( timeuuid ) @ ( DEPRECATED ) | 
 
 h3 ( # blobFun ) . Blob conversion functions 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / Functions . java b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 index 7ac8039 . . c940787 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / Functions . java 
 @ @ - 46 , 11 + 46 , 18 @ @ public abstract class Functions 
 static 
 { 
 declare ( AggregateFcts . countRowsFunction ) ; 
 - declare ( TimeuuidFcts . nowFct ) ; 
 - declare ( TimeuuidFcts . minTimeuuidFct ) ; 
 - declare ( TimeuuidFcts . maxTimeuuidFct ) ; 
 - declare ( TimeuuidFcts . dateOfFct ) ; 
 - declare ( TimeuuidFcts . unixTimestampOfFct ) ; 
 + declare ( TimeFcts . nowFct ) ; 
 + declare ( TimeFcts . minTimeuuidFct ) ; 
 + declare ( TimeFcts . maxTimeuuidFct ) ; 
 + declare ( TimeFcts . dateOfFct ) ; 
 + declare ( TimeFcts . unixTimestampOfFct ) ; 
 + declare ( TimeFcts . timeUuidtoDate ) ; 
 + declare ( TimeFcts . timeUuidToTimestamp ) ; 
 + declare ( TimeFcts . timeUuidToUnixTimestamp ) ; 
 + declare ( TimeFcts . timestampToDate ) ; 
 + declare ( TimeFcts . timestampToUnixTimestamp ) ; 
 + declare ( TimeFcts . dateToTimestamp ) ; 
 + declare ( TimeFcts . dateToUnixTimestamp ) ; 
 declare ( UuidFcts . uuidFct ) ; 
 
 for ( CQL3Type type : CQL3Type . Native . values ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java 
 new file mode 100644 
 index 0000000 . . a4623cd 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / cql3 / functions / TimeFcts . java 
 @ @ - 0 , 0 + 1 , 229 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . functions ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Date ; 
 + import java . util . List ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . db . marshal . * ; 
 + import org . apache . cassandra . serializers . TimestampSerializer ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + 
 + public abstract class TimeFcts 
 + { 
 + public static Logger logger = LoggerFactory . getLogger ( TimeFcts . class ) ; 
 + 
 + public static final Function nowFct = new NativeScalarFunction ( " now " , TimeUUIDType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; 
 + } 
 + } ; 
 + 
 + public static final Function minTimeuuidFct = new NativeScalarFunction ( " mintimeuuid " , TimeUUIDType . instance , TimestampType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; 
 + } 
 + } ; 
 + 
 + public static final Function maxTimeuuidFct = new NativeScalarFunction ( " maxtimeuuid " , TimeUUIDType . instance , TimestampType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of < code > TIMEUUID < / code > into a value of type < code > TIMESTAMP < / code > . 
 + * @ deprecated Replaced by the { @ link # timeUuidToTimestamp } function 
 + * / 
 + public static final Function dateOfFct = new NativeScalarFunction ( " dateof " , TimestampType . instance , TimeUUIDType . instance ) 
 + { 
 + private volatile boolean hasLoggedDeprecationWarning ; 
 + 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + if ( ! hasLoggedDeprecationWarning ) 
 + { 
 + hasLoggedDeprecationWarning = true ; 
 + logger . warn ( " The function ' dateof ' is deprecated . " + 
 + " Use the function ' toTimestamp ' instead . " ) ; 
 + } 
 + 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; 
 + return ByteBufferUtil . bytes ( timeInMillis ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > TIMEUUID < / code > into an UNIX timestamp . 
 + * @ deprecated Replaced by the { @ link # timeUuidToUnixTimestamp } function 
 + * / 
 + public static final Function unixTimestampOfFct = new NativeScalarFunction ( " unixtimestampof " , LongType . instance , TimeUUIDType . instance ) 
 + { 
 + private volatile boolean hasLoggedDeprecationWarning ; 
 + 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + if ( ! hasLoggedDeprecationWarning ) 
 + { 
 + hasLoggedDeprecationWarning = true ; 
 + logger . warn ( " The function ' unixtimestampof ' is deprecated . " + 
 + " Use the function ' toUnixTimestamp ' instead . " ) ; 
 + } 
 + 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of < code > TIMEUUID < / code > into a value of type < code > DATE < / code > . 
 + * / 
 + public static final Function timeUuidtoDate = new NativeScalarFunction ( " todate " , SimpleDateType . instance , TimeUUIDType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; 
 + return SimpleDateType . instance . fromTimeInMillis ( timeInMillis ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > TIMEUUID < / code > into a value of type < code > TIMESTAMP < / code > . 
 + * / 
 + public static final Function timeUuidToTimestamp = new NativeScalarFunction ( " totimestamp " , TimestampType . instance , TimeUUIDType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + long timeInMillis = UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ; 
 + return TimestampType . instance . fromTimeInMillis ( timeInMillis ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > TIMEUUID < / code > into an UNIX timestamp . 
 + * / 
 + public static final Function timeUuidToUnixTimestamp = new NativeScalarFunction ( " tounixtimestamp " , LongType . instance , TimeUUIDType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > TIMESTAMP < / code > into an UNIX timestamp . 
 + * / 
 + public static final Function timestampToUnixTimestamp = new NativeScalarFunction ( " tounixtimestamp " , LongType . instance , TimestampType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + Date date = TimestampType . instance . compose ( bb ) ; 
 + return date = = null ? null : ByteBufferUtil . bytes ( date . getTime ( ) ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > TIMESTAMP < / code > into a < code > DATE < / code > . 
 + * / 
 + public static final Function timestampToDate = new NativeScalarFunction ( " todate " , SimpleDateType . instance , TimestampType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + Date date = TimestampType . instance . compose ( bb ) ; 
 + return date = = null ? null : SimpleDateType . instance . fromTimeInMillis ( date . getTime ( ) ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > TIMESTAMP < / code > into a < code > DATE < / code > . 
 + * / 
 + public static final Function dateToTimestamp = new NativeScalarFunction ( " totimestamp " , TimestampType . instance , SimpleDateType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + long millis = SimpleDateType . instance . toTimeInMillis ( bb ) ; 
 + return TimestampType . instance . fromTimeInMillis ( millis ) ; 
 + } 
 + } ; 
 + 
 + / * * 
 + * Function that convert a value of type < code > DATE < / code > into an UNIX timestamp . 
 + * / 
 + public static final Function dateToUnixTimestamp = new NativeScalarFunction ( " tounixtimestamp " , LongType . instance , SimpleDateType . instance ) 
 + { 
 + public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 + { 
 + ByteBuffer bb = parameters . get ( 0 ) ; 
 + if ( bb = = null ) 
 + return null ; 
 + 
 + return ByteBufferUtil . bytes ( SimpleDateType . instance . toTimeInMillis ( bb ) ) ; 
 + } 
 + } ; 
 + } 
 + 
 diff - - git a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java b / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java 
 deleted file mode 100644 
 index d24572b . . 0000000 
 - - - a / src / java / org / apache / cassandra / cql3 / functions / TimeuuidFcts . java 
 + + + / dev / null 
 @ @ - 1 , 88 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . cql3 . functions ; 
 - 
 - import java . nio . ByteBuffer ; 
 - import java . util . Date ; 
 - import java . util . List ; 
 - 
 - import org . apache . cassandra . db . marshal . TimestampType ; 
 - import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 - import org . apache . cassandra . db . marshal . LongType ; 
 - import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . cassandra . utils . UUIDGen ; 
 - 
 - public abstract class TimeuuidFcts 
 - { 
 - public static final Function nowFct = new NativeScalarFunction ( " now " , TimeUUIDType . instance ) 
 - { 
 - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 - { 
 - return ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( ) ) ; 
 - } 
 - } ; 
 - 
 - public static final Function minTimeuuidFct = new NativeScalarFunction ( " mintimeuuid " , TimeUUIDType . instance , TimestampType . instance ) 
 - { 
 - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 - { 
 - ByteBuffer bb = parameters . get ( 0 ) ; 
 - if ( bb = = null ) 
 - return null ; 
 - 
 - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . minTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; 
 - } 
 - } ; 
 - 
 - public static final Function maxTimeuuidFct = new NativeScalarFunction ( " maxtimeuuid " , TimeUUIDType . instance , TimestampType . instance ) 
 - { 
 - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 - { 
 - ByteBuffer bb = parameters . get ( 0 ) ; 
 - if ( bb = = null ) 
 - return null ; 
 - 
 - return ByteBuffer . wrap ( UUIDGen . decompose ( UUIDGen . maxTimeUUID ( TimestampType . instance . compose ( bb ) . getTime ( ) ) ) ) ; 
 - } 
 - } ; 
 - 
 - public static final Function dateOfFct = new NativeScalarFunction ( " dateof " , TimestampType . instance , TimeUUIDType . instance ) 
 - { 
 - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 - { 
 - ByteBuffer bb = parameters . get ( 0 ) ; 
 - if ( bb = = null ) 
 - return null ; 
 - 
 - return TimestampType . instance . decompose ( new Date ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ) ; 
 - } 
 - } ; 
 - 
 - public static final Function unixTimestampOfFct = new NativeScalarFunction ( " unixtimestampof " , LongType . instance , TimeUUIDType . instance ) 
 - { 
 - public ByteBuffer execute ( int protocolVersion , List < ByteBuffer > parameters ) 
 - { 
 - ByteBuffer bb = parameters . get ( 0 ) ; 
 - if ( bb = = null ) 
 - return null ; 
 - 
 - return ByteBufferUtil . bytes ( UUIDGen . unixTimestamp ( UUIDGen . getUUID ( bb ) ) ) ; 
 - } 
 - } ; 
 - } 
 - 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java 
 index 225b9cc . . 747709e 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / SimpleDateType . java 
 @ @ - 50 , 6 + 50 , 16 @ @ public class SimpleDateType extends AbstractType < Integer > 
 return ByteBufferUtil . bytes ( SimpleDateSerializer . dateStringToDays ( source ) ) ; 
 } 
 
 + public ByteBuffer fromTimeInMillis ( long millis ) throws MarshalException 
 + { 
 + return ByteBufferUtil . bytes ( SimpleDateSerializer . timeInMillisToDay ( millis ) ) ; 
 + } 
 + 
 + public long toTimeInMillis ( ByteBuffer buffer ) throws MarshalException 
 + { 
 + return SimpleDateSerializer . dayToTimeInMillis ( ByteBufferUtil . toInt ( buffer ) ) ; 
 + } 
 + 
 @ Override 
 public boolean isCompatibleWith ( AbstractType < ? > previous ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimestampType . java b / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 index 38e0296 . . b01651d 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimestampType . java 
 @ @ - 64 , 6 + 64 , 11 @ @ public class TimestampType extends AbstractType < Date > 
 return ByteBufferUtil . bytes ( TimestampSerializer . dateStringToTimestamp ( source ) ) ; 
 } 
 
 + public ByteBuffer fromTimeInMillis ( long millis ) throws MarshalException 
 + { 
 + return ByteBufferUtil . bytes ( millis ) ; 
 + } 
 + 
 @ Override 
 public Term fromJSONObject ( Object parsed ) throws MarshalException 
 { 
 diff - - git a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java 
 index 0f4bde8 . . 2509597 100644 
 - - - a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java 
 + + + b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java 
 @ @ - 105 , 14 + 105 , 14 @ @ public final class SystemDistributedKeyspace 
 { 
 
 String query = " INSERT INTO % s . % s ( parent _ id , keyspace _ name , columnfamily _ names , requested _ ranges , started _ at ) " + 
 - " VALUES ( % s , ' % s ' , { ' % s ' } , { ' % s ' } , dateOf ( now ( ) ) ) " ; 
 + " VALUES ( % s , ' % s ' , { ' % s ' } , { ' % s ' } , toTimestamp ( now ( ) ) ) " ; 
 String fmtQry = String . format ( query , NAME , PARENT _ REPAIR _ HISTORY , parent _ id . toString ( ) , keyspaceName , Joiner . on ( " ' , ' " ) . join ( cfnames ) , Joiner . on ( " ' , ' " ) . join ( ranges ) ) ; 
 processSilent ( fmtQry ) ; 
 } 
 
 public static void failParentRepair ( UUID parent _ id , Throwable t ) 
 { 
 - String query = " UPDATE % s . % s SET finished _ at = dateOf ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE parent _ id = % s " ; 
 + String query = " UPDATE % s . % s SET finished _ at = toTimestamp ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE parent _ id = % s " ; 
 
 StringWriter sw = new StringWriter ( ) ; 
 PrintWriter pw = new PrintWriter ( sw ) ; 
 @ @ - 123 , 7 + 123 , 7 @ @ public final class SystemDistributedKeyspace 
 
 public static void successfulParentRepair ( UUID parent _ id , Collection < Range < Token > > successfulRanges ) 
 { 
 - String query = " UPDATE % s . % s SET finished _ at = dateOf ( now ( ) ) , successful _ ranges = { ' % s ' } WHERE parent _ id = % s " ; 
 + String query = " UPDATE % s . % s SET finished _ at = toTimestamp ( now ( ) ) , successful _ ranges = { ' % s ' } WHERE parent _ id = % s " ; 
 String fmtQuery = String . format ( query , NAME , PARENT _ REPAIR _ HISTORY , Joiner . on ( " ' , ' " ) . join ( successfulRanges ) , parent _ id . toString ( ) ) ; 
 processSilent ( fmtQuery ) ; 
 } 
 @ @ - 138 , 7 + 138 , 7 @ @ public final class SystemDistributedKeyspace 
 
 String query = 
 " INSERT INTO % s . % s ( keyspace _ name , columnfamily _ name , id , parent _ id , range _ begin , range _ end , coordinator , participants , status , started _ at ) " + 
 - " VALUES ( ' % s ' , ' % s ' , % s , % s , ' % s ' , ' % s ' , ' % s ' , { ' % s ' } , ' % s ' , dateOf ( now ( ) ) ) " ; 
 + " VALUES ( ' % s ' , ' % s ' , % s , % s , ' % s ' , ' % s ' , ' % s ' , { ' % s ' } , ' % s ' , toTimestamp ( now ( ) ) ) " ; 
 
 for ( String cfname : cfnames ) 
 { 
 @ @ - 164 , 7 + 164 , 7 @ @ public final class SystemDistributedKeyspace 
 
 public static void successfulRepairJob ( UUID id , String keyspaceName , String cfname ) 
 { 
 - String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = dateOf ( now ( ) ) WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; 
 + String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = toTimestamp ( now ( ) ) WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; 
 String fmtQuery = String . format ( query , NAME , REPAIR _ HISTORY , 
 RepairState . SUCCESS . toString ( ) , 
 keyspaceName , 
 @ @ - 175 , 7 + 175 , 7 @ @ public final class SystemDistributedKeyspace 
 
 public static void failedRepairJob ( UUID id , String keyspaceName , String cfname , Throwable t ) 
 { 
 - String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = dateOf ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; 
 + String query = " UPDATE % s . % s SET status = ' % s ' , finished _ at = toTimestamp ( now ( ) ) , exception _ message = ? , exception _ stacktrace = ? WHERE keyspace _ name = ' % s ' AND columnfamily _ name = ' % s ' AND id = % s " ; 
 StringWriter sw = new StringWriter ( ) ; 
 PrintWriter pw = new PrintWriter ( sw ) ; 
 t . printStackTrace ( pw ) ; 
 diff - - git a / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java b / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java 
 index 82cedc0 . . 075094c 100644 
 - - - a / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java 
 + + + b / src / java / org / apache / cassandra / serializers / SimpleDateSerializer . java 
 @ @ - 86 , 9 + 86 , 7 @ @ public class SimpleDateSerializer implements TypeSerializer < Integer > 
 if ( millis > maxSupportedDateMillis ) 
 throw new MarshalException ( String . format ( " Input date % s is greater than max supported date % s " , source , new LocalDate ( maxSupportedDateMillis ) . toString ( ) ) ) ; 
 
 - Integer result = ( int ) TimeUnit . MILLISECONDS . toDays ( millis ) ; 
 - result - = Integer . MIN _ VALUE ; 
 - return result ; 
 + return timeInMillisToDay ( millis ) ; 
 } 
 catch ( IllegalArgumentException e1 ) 
 { 
 @ @ - 96 , 6 + 94 , 18 @ @ public class SimpleDateSerializer implements TypeSerializer < Integer > 
 } 
 } 
 
 + public static int timeInMillisToDay ( long millis ) 
 + { 
 + Integer result = ( int ) TimeUnit . MILLISECONDS . toDays ( millis ) ; 
 + result - = Integer . MIN _ VALUE ; 
 + return result ; 
 + } 
 + 
 + public static long dayToTimeInMillis ( int days ) 
 + { 
 + return TimeUnit . DAYS . toMillis ( days - Integer . MIN _ VALUE ) ; 
 + } 
 + 
 public void validate ( ByteBuffer bytes ) throws MarshalException 
 { 
 if ( bytes . remaining ( ) ! = 4 ) 
 @ @ - 107 , 7 + 117 , 7 @ @ public class SimpleDateSerializer implements TypeSerializer < Integer > 
 if ( value = = null ) 
 return " " ; 
 
 - return formatter . print ( new LocalDate ( TimeUnit . DAYS . toMillis ( value - Integer . MIN _ VALUE ) , DateTimeZone . UTC ) ) ; 
 + return formatter . print ( new LocalDate ( dayToTimeInMillis ( value ) , DateTimeZone . UTC ) ) ; 
 } 
 
 public Class < Integer > getType ( ) 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 index af68ddc . . 768fdc3 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / AggregationTest . java 
 @ @ - 111 , 10 + 111 , 10 @ @ public class AggregationTest extends CQLTester 
 " LANGUAGE JAVA " + 
 " AS ' return Double . valueOf ( Math . copySign ( magnitude , sign ) ) ; ' ; " ) ; 
 
 - assertColumnNames ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . max ( system . unixtimestampof ( b ) ) " ) ; 
 - assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( null , null ) ) ; 
 - assertColumnNames ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . unixtimestampof ( system . max ( b ) ) " ) ; 
 - assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( null , null ) ) ; 
 + assertColumnNames ( execute ( " SELECT max ( a ) , max ( toUnixTimestamp ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . max ( system . tounixtimestamp ( b ) ) " ) ; 
 + assertRows ( execute ( " SELECT max ( a ) , max ( toUnixTimestamp ( b ) ) FROM % s " ) , row ( null , null ) ) ; 
 + assertColumnNames ( execute ( " SELECT max ( a ) , toUnixTimestamp ( max ( b ) ) FROM % s " ) , " system . max ( a ) " , " system . tounixtimestamp ( system . max ( b ) ) " ) ; 
 + assertRows ( execute ( " SELECT max ( a ) , toUnixTimestamp ( max ( b ) ) FROM % s " ) , row ( null , null ) ) ; 
 
 assertColumnNames ( execute ( " SELECT max ( " + copySign + " ( c , d ) ) FROM % s " ) , " system . max ( " + copySign + " ( c , d ) ) " ) ; 
 assertRows ( execute ( " SELECT max ( " + copySign + " ( c , d ) ) FROM % s " ) , row ( ( Object ) null ) ) ; 
 @ @ - 128 , 8 + 128 , 8 @ @ public class AggregationTest extends CQLTester 
 Date date = format . parse ( " 2011 - 02 - 03 04 : 10 : 00 " ) ; 
 date = DateUtils . truncate ( date , Calendar . MILLISECOND ) ; 
 
 - assertRows ( execute ( " SELECT max ( a ) , max ( unixTimestampOf ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; 
 - assertRows ( execute ( " SELECT max ( a ) , unixTimestampOf ( max ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; 
 + assertRows ( execute ( " SELECT max ( a ) , max ( toUnixTimestamp ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; 
 + assertRows ( execute ( " SELECT max ( a ) , toUnixTimestamp ( max ( b ) ) FROM % s " ) , row ( 3 , date . getTime ( ) ) ) ; 
 
 assertRows ( execute ( " SELECT " + copySign + " ( max ( c ) , min ( c ) ) FROM % s " ) , row ( - 1 . 4 ) ) ; 
 assertRows ( execute ( " SELECT " + copySign + " ( c , d ) FROM % s " ) , row ( 1 . 2 ) , row ( - 1 . 3 ) , row ( 1 . 4 ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / TypeTest . java b / test / unit / org / apache / cassandra / cql3 / TypeTest . java 
 index 7e12f9f . . 0605554 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / TypeTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / TypeTest . java 
 @ @ - 36 , 8 + 36 , 13 @ @ public class TypeTest extends CQLTester 
 public void testDateCompatibility ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b timestamp , c bigint , d varint , PRIMARY KEY ( a , b , c , d ) ) " ) ; 
 - execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 0 , unixTimestampOf ( now ( ) ) , dateOf ( now ( ) ) , dateOf ( now ( ) ) ) " ) ; 
 - UntypedResultSet results = execute ( " SELECT * FROM % s WHERE a = 0 AND b < unixTimestampOf ( now ( ) ) " ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 0 , toUnixTimestamp ( now ( ) ) , toTimestamp ( now ( ) ) , toTimestamp ( now ( ) ) ) " ) ; 
 + UntypedResultSet results = execute ( " SELECT * FROM % s WHERE a = 0 AND b < toUnixTimestamp ( now ( ) ) " ) ; 
 + assertEquals ( 1 , results . size ( ) ) ; 
 + 
 + execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( 1 , unixTimestampOf ( now ( ) ) , dateOf ( now ( ) ) , dateOf ( now ( ) ) ) " ) ; 
 + results = execute ( " SELECT * FROM % s WHERE a = 1 AND b < toUnixTimestamp ( now ( ) ) " ) ; 
 assertEquals ( 1 , results . size ( ) ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / UFTest . java b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 index db94a4c . . 5a20c18 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / UFTest . java 
 @ @ - 388 , 7 + 388 , 7 @ @ public class UFTest extends CQLTester 
 execute ( " DROP FUNCTION IF EXISTS " + fSin ) ; 
 
 / / can ' t drop native functions 
 - assertInvalidMessage ( " system keyspace is not user - modifiable " , " DROP FUNCTION dateof " ) ; 
 + assertInvalidMessage ( " system keyspace is not user - modifiable " , " DROP FUNCTION totimestamp " ) ; 
 assertInvalidMessage ( " system keyspace is not user - modifiable " , " DROP FUNCTION uuid " ) ; 
 
 / / sin ( ) no longer exists 
 @ @ - 732 , 10 + 732 , 11 @ @ public class UFTest extends CQLTester 
 @ Test 
 public void testFunctionInSystemKS ( ) throws Throwable 
 { 
 - execute ( " CREATE OR REPLACE FUNCTION " + KEYSPACE + " . dateof ( val timeuuid ) " + 
 + execute ( " CREATE OR REPLACE FUNCTION " + KEYSPACE + " . totimestamp ( val timeuuid ) " + 
 " RETURNS NULL ON NULL INPUT " + 
 " RETURNS timestamp " + 
 " LANGUAGE JAVA \ n " + 
 + 
 " AS ' return null ; ' ; " ) ; 
 
 assertInvalidMessage ( " system keyspace is not user - modifiable " , 
 @ @ - 745 , 10 + 746 , 11 @ @ public class UFTest extends CQLTester 
 " LANGUAGE JAVA \ n " + 
 " AS ' return null ; ' ; " ) ; 
 assertInvalidMessage ( " system keyspace is not user - modifiable " , 
 - " CREATE OR REPLACE FUNCTION system . dateof ( val timeuuid ) " + 
 + " CREATE OR REPLACE FUNCTION system . totimestamp ( val timeuuid ) " + 
 " RETURNS NULL ON NULL INPUT " + 
 " RETURNS timestamp " + 
 " LANGUAGE JAVA \ n " + 
 + 
 " AS ' return null ; ' ; " ) ; 
 assertInvalidMessage ( " system keyspace is not user - modifiable " , 
 " DROP FUNCTION system . now " ) ; 
 @ @ - 761 , 7 + 763 , 7 @ @ public class UFTest extends CQLTester 
 " LANGUAGE JAVA \ n " + 
 " AS ' return null ; ' ; " ) ; 
 assertInvalidMessage ( " system keyspace is not user - modifiable " , 
 - " CREATE OR REPLACE FUNCTION dateof ( val timeuuid ) " + 
 + " CREATE OR REPLACE FUNCTION totimestamp ( val timeuuid ) " + 
 " RETURNS NULL ON NULL INPUT " + 
 " RETURNS timestamp " + 
 " LANGUAGE JAVA \ n " + 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / functions / TimeFctsTest . java b / test / unit / org / apache / cassandra / cql3 / functions / TimeFctsTest . java 
 new file mode 100644 
 index 0000000 . . f6fca20 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / cql3 / functions / TimeFctsTest . java 
 @ @ - 0 , 0 + 1 , 206 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . cql3 . functions ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . db . marshal . LongType ; 
 + import org . apache . cassandra . db . marshal . SimpleDateType ; 
 + import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 + import org . apache . cassandra . db . marshal . TimestampType ; 
 + import org . apache . cassandra . transport . Server ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 + import org . joda . time . DateTime ; 
 + import org . joda . time . DateTimeZone ; 
 + import org . joda . time . format . DateTimeFormat ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNull ; 
 + 
 + public class TimeFctsTest 
 + { 
 + @ Test 
 + public void testMinTimeUuid ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = TimestampType . instance . fromString ( " 2015 - 05 - 21 11 : 03 : 02 + 00 " ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . minTimeuuidFct , input ) ; 
 + assertEquals ( UUIDGen . minTimeUUID ( timeInMillis ) , TimeUUIDType . instance . compose ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testMaxTimeUuid ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = TimestampType . instance . fromString ( " 2015 - 05 - 21 11 : 03 : 02 + 00 " ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . maxTimeuuidFct , input ) ; 
 + assertEquals ( UUIDGen . maxTimeUUID ( timeInMillis ) , TimeUUIDType . instance . compose ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDateOf ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . dateOfFct , input ) ; 
 + assertEquals ( dateTime . toDate ( ) , TimestampType . instance . compose ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimeUuidToTimestamp ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . timeUuidToTimestamp , input ) ; 
 + assertEquals ( dateTime . toDate ( ) , TimestampType . instance . compose ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testUnixTimestampOfFct ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . unixTimestampOfFct , input ) ; 
 + assertEquals ( timeInMillis , LongType . instance . compose ( output ) . longValue ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimeUuidToUnixTimestamp ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . timeUuidToUnixTimestamp , input ) ; 
 + assertEquals ( timeInMillis , LongType . instance . compose ( output ) . longValue ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimeUuidToDate ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + long timeInMillis = dateTime . getMillis ( ) ; 
 + ByteBuffer input = ByteBuffer . wrap ( UUIDGen . getTimeUUIDBytes ( timeInMillis , 0 ) ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . timeUuidtoDate , input ) ; 
 + 
 + long expectedTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 " ) 
 + . getMillis ( ) ; 
 + 
 + assertEquals ( expectedTime , SimpleDateType . instance . toTimeInMillis ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDateToTimestamp ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 " ) ; 
 + 
 + ByteBuffer input = SimpleDateType . instance . fromString ( " 2015 - 05 - 21 " ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . dateToTimestamp , input ) ; 
 + assertEquals ( dateTime . toDate ( ) , TimestampType . instance . compose ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testDateToUnixTimestamp ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 " ) ; 
 + 
 + ByteBuffer input = SimpleDateType . instance . fromString ( " 2015 - 05 - 21 " ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . dateToUnixTimestamp , input ) ; 
 + assertEquals ( dateTime . getMillis ( ) , LongType . instance . compose ( output ) . longValue ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimestampToDate ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 " ) ; 
 + 
 + ByteBuffer input = TimestampType . instance . fromString ( " 2015 - 05 - 21 11 : 03 : 02 + 00 " ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . timestampToDate , input ) ; 
 + assertEquals ( dateTime . getMillis ( ) , SimpleDateType . instance . toTimeInMillis ( output ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimestampToDateWithEmptyInput ( ) 
 + { 
 + ByteBuffer output = executeFunction ( TimeFcts . timestampToDate , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + assertNull ( output ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimestampToUnixTimestamp ( ) 
 + { 
 + DateTime dateTime = DateTimeFormat . forPattern ( " yyyy - MM - dd hh : mm : ss " ) 
 + . withZone ( DateTimeZone . UTC ) 
 + . parseDateTime ( " 2015 - 05 - 21 11 : 03 : 02 " ) ; 
 + 
 + ByteBuffer input = TimestampType . instance . decompose ( dateTime . toDate ( ) ) ; 
 + ByteBuffer output = executeFunction ( TimeFcts . timestampToUnixTimestamp , input ) ; 
 + assertEquals ( dateTime . getMillis ( ) , LongType . instance . compose ( output ) . longValue ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testTimestampToUnixTimestampWithEmptyInput ( ) 
 + { 
 + ByteBuffer output = executeFunction ( TimeFcts . timestampToUnixTimestamp , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ; 
 + assertNull ( output ) ; 
 + } 
 + 
 + private static ByteBuffer executeFunction ( Function function , ByteBuffer input ) 
 + { 
 + List < ByteBuffer > params = Arrays . asList ( input ) ; 
 + return ( ( ScalarFunction ) function ) . execute ( Server . CURRENT _ VERSION , params ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
