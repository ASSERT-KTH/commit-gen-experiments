BLEU SCORE: 0.01226235504168822

TEST MSG: Ensure memtable book keeping is not corrupted in the event we shrink usage
GENERATED MSG: clean up more ad - hoc timing message and move to mbeans . add TimedStatsDeque to

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 762b88b . . 25f7c1d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 8 <nl> + * Ensure memtable book keeping is not corrupted in the event we shrink usage ( CASSANDRA - 9681 ) <nl> * Update internal python driver for cqlsh ( CASSANDRA - 9064 ) <nl> * Fix IndexOutOfBoundsException when inserting tuple with too many <nl> elements using the string literal notation ( CASSANDRA - 9559 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> index 47f0b85 . . d9eb29c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> @ @ - 505 , 7 + 505 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> <nl> protected void finish ( ) <nl> { <nl> - allocator . onHeap ( ) . allocate ( heapSize , writeOp ) ; <nl> + allocator . onHeap ( ) . adjust ( heapSize , writeOp ) ; <nl> reclaimer . commit ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index fa527c7 . . 8e67cdc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import com . google . common . collect . * ; <nl> import com . google . common . util . concurrent . * ; <nl> <nl> import org . apache . cassandra . io . FSWriteError ; <nl> + import org . apache . cassandra . utils . memory . MemtablePool ; <nl> import org . json . simple . * ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 1157 , 6 + 1158 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> float largestRatio = 0f ; <nl> Memtable largest = null ; <nl> + float liveOnHeap = 0 , liveOffHeap = 0 ; <nl> for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> { <nl> / / we take a reference to the current main memtable for the CF prior to snapping its ownership ratios <nl> @ @ - 1181 , 19 + 1183 , 37 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> float ratio = Math . max ( onHeap , offHeap ) ; <nl> - <nl> if ( ratio > largestRatio ) <nl> { <nl> largest = current ; <nl> largestRatio = ratio ; <nl> } <nl> + <nl> + liveOnHeap + = onHeap ; <nl> + liveOffHeap + = offHeap ; <nl> } <nl> <nl> if ( largest ! = null ) <nl> + { <nl> + float usedOnHeap = Memtable . MEMORY _ POOL . onHeap . usedRatio ( ) ; <nl> + float usedOffHeap = Memtable . MEMORY _ POOL . offHeap . usedRatio ( ) ; <nl> + float flushingOnHeap = Memtable . MEMORY _ POOL . onHeap . reclaimingRatio ( ) ; <nl> + float flushingOffHeap = Memtable . MEMORY _ POOL . offHeap . reclaimingRatio ( ) ; <nl> + float thisOnHeap = largest . getAllocator ( ) . onHeap ( ) . ownershipRatio ( ) ; <nl> + float thisOffHeap = largest . getAllocator ( ) . onHeap ( ) . ownershipRatio ( ) ; <nl> + logger . info ( " Flushing largest { } to free up room . Used total : { } , live : { } , flushing : { } , this : { } " , <nl> + largest . cfs , ratio ( usedOnHeap , usedOffHeap ) , ratio ( liveOnHeap , liveOffHeap ) , <nl> + ratio ( flushingOnHeap , flushingOffHeap ) , ratio ( thisOnHeap , thisOffHeap ) ) ; <nl> largest . cfs . switchMemtableIfCurrent ( largest ) ; <nl> + } <nl> } <nl> } <nl> <nl> + private static String ratio ( float onHeap , float offHeap ) <nl> + { <nl> + return String . format ( " % . 0f / % . 0f " , onHeap , offHeap ) ; <nl> + } <nl> + <nl> public void maybeUpdateRowCache ( DecoratedKey key ) <nl> { <nl> if ( ! isRowCacheEnabled ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index a50a614 . . 9f6cf9b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 239 , 7 + 239 , 8 @ @ public class Memtable <nl> public String toString ( ) <nl> { <nl> return String . format ( " Memtable - % s @ % s ( % s serialized bytes , % s ops , % . 0f % % / % . 0f % % of on / off - heap limit ) " , <nl> - cfs . name , hashCode ( ) , liveDataSize , currentOperations , 100 * allocator . onHeap ( ) . ownershipRatio ( ) , 100 * allocator . offHeap ( ) . ownershipRatio ( ) ) ; <nl> + cfs . name , hashCode ( ) , FBUtilities . prettyPrintMemory ( liveDataSize . get ( ) ) , currentOperations , <nl> + 100 * allocator . onHeap ( ) . ownershipRatio ( ) , 100 * allocator . offHeap ( ) . ownershipRatio ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 378 , 19 + 379 , 21 @ @ public class Memtable <nl> <nl> if ( writer . getFilePointer ( ) > 0 ) <nl> { <nl> - writer . isolateReferences ( ) ; <nl> + logger . info ( String . format ( " Completed flushing % s ( % s ) for commitlog position % s " , <nl> + writer . getFilename ( ) , <nl> + FBUtilities . prettyPrintMemory ( writer . getOnDiskFilePointer ( ) ) , <nl> + context ) ) ; <nl> <nl> + writer . isolateReferences ( ) ; <nl> / / temp sstables should contain non - repaired data . <nl> ssTable = writer . closeAndOpenReader ( ) ; <nl> - logger . info ( String . format ( " Completed flushing % s ( % d bytes ) for commitlog position % s " , <nl> - ssTable . getFilename ( ) , new File ( ssTable . getFilename ( ) ) . length ( ) , context ) ) ; <nl> } <nl> else <nl> { <nl> + logger . info ( " Completed flushing % s ; nothing needed to be retained . Commitlog position was { } " , <nl> + writer . getFilename ( ) , context ) ; <nl> writer . abort ( ) ; <nl> ssTable = null ; <nl> - logger . info ( " Completed flushing ; nothing needed to be retained . Commitlog position was { } " , <nl> - context ) ; <nl> } <nl> <nl> if ( heavilyContendedRowCount > 0 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 4c81b2a . . 68eb864 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . net . UnknownHostException ; <nl> import java . nio . ByteBuffer ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> + import java . text . NumberFormat ; <nl> import java . util . * ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . Future ; <nl> @ @ - 570 , 6 + 571 , 15 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> + public static String prettyPrintMemory ( long size ) <nl> + { <nl> + if ( size > = 1 < < 30 ) <nl> + return String . format ( " % . 3fGiB " , size / ( double ) ( 1 < < 30 ) ) ; <nl> + if ( size > = 1 < < 20 ) <nl> + return String . format ( " % . 3fMiB " , size / ( double ) ( 1 < < 20 ) ) ; <nl> + return String . format ( " % . 3fKiB " , size / ( double ) ( 1 < < 10 ) ) ; <nl> + } <nl> + <nl> / * * <nl> * Starts and waits for the given @ param pb to finish . <nl> * @ throws java . io . IOException on non - zero exit code <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / HeapPool . java b / src / java / org / apache / cassandra / utils / memory / HeapPool . java <nl> index a04947c . . 2a19d9c 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / HeapPool . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / HeapPool . java <nl> @ @ - 75 , 13 + 75 , 13 @ @ public class HeapPool extends MemtablePool <nl> <nl> public Reclaimer reclaimImmediately ( Cell cell ) <nl> { <nl> - onHeap ( ) . release ( cell . name ( ) . dataSize ( ) + cell . value ( ) . remaining ( ) ) ; <nl> + onHeap ( ) . released ( cell . name ( ) . dataSize ( ) + cell . value ( ) . remaining ( ) ) ; <nl> return this ; <nl> } <nl> <nl> public Reclaimer reclaimImmediately ( DecoratedKey key ) <nl> { <nl> - onHeap ( ) . release ( key . getKey ( ) . remaining ( ) ) ; <nl> + onHeap ( ) . released ( key . getKey ( ) . remaining ( ) ) ; <nl> return this ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java <nl> index e814b4d . . f5e743c 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java <nl> @ @ - 160 , 13 + 160 , 24 @ @ public abstract class MemtableAllocator <nl> / / currently no corroboration / enforcement of this is performed . <nl> void releaseAll ( ) <nl> { <nl> - parent . adjustAcquired ( - ownsUpdater . getAndSet ( this , 0 ) , false ) ; <nl> - parent . adjustReclaiming ( - reclaimingUpdater . getAndSet ( this , 0 ) ) ; <nl> + parent . released ( ownsUpdater . getAndSet ( this , 0 ) ) ; <nl> + parent . reclaimed ( reclaimingUpdater . getAndSet ( this , 0 ) ) ; <nl> + } <nl> + <nl> + / / like allocate , but permits allocations to be negative <nl> + public void adjust ( long size , OpOrder . Group opGroup ) <nl> + { <nl> + if ( size < = 0 ) <nl> + released ( - size ) ; <nl> + else <nl> + allocate ( size , opGroup ) ; <nl> } <nl> <nl> / / allocate memory in the tracker , and mark ourselves as owning it <nl> public void allocate ( long size , OpOrder . Group opGroup ) <nl> { <nl> + assert size > = 0 ; <nl> + <nl> while ( true ) <nl> { <nl> if ( parent . tryAllocate ( size ) ) <nl> @ @ - 190 , 23 + 201 , 23 @ @ public abstract class MemtableAllocator <nl> } <nl> } <nl> <nl> - / / retroactively mark an amount allocated amd acquired in the tracker , and owned by us <nl> - void allocated ( long size ) <nl> + / / retroactively mark an amount allocated and acquired in the tracker , and owned by us <nl> + private void allocated ( long size ) <nl> { <nl> - parent . adjustAcquired ( size , true ) ; <nl> + parent . allocated ( size ) ; <nl> ownsUpdater . addAndGet ( this , size ) ; <nl> } <nl> <nl> / / retroactively mark an amount acquired in the tracker , and owned by us <nl> - void acquired ( long size ) <nl> + private void acquired ( long size ) <nl> { <nl> - parent . adjustAcquired ( size , false ) ; <nl> + parent . acquired ( size ) ; <nl> ownsUpdater . addAndGet ( this , size ) ; <nl> } <nl> <nl> - void release ( long size ) <nl> + void released ( long size ) <nl> { <nl> - parent . adjustAcquired ( - size , false ) ; <nl> + parent . released ( size ) ; <nl> ownsUpdater . addAndGet ( this , - size ) ; <nl> } <nl> <nl> @ @ - 217 , 11 + 228 , 11 @ @ public abstract class MemtableAllocator <nl> { <nl> long cur = owns ; <nl> long prev = reclaiming ; <nl> - if ( reclaimingUpdater . compareAndSet ( this , prev , cur ) ) <nl> - { <nl> - parent . adjustReclaiming ( cur - prev ) ; <nl> - return ; <nl> - } <nl> + if ( ! reclaimingUpdater . compareAndSet ( this , prev , cur ) ) <nl> + continue ; <nl> + <nl> + parent . reclaiming ( cur - prev ) ; <nl> + return ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java <nl> index 1d219bb . . bb85884 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java <nl> @ @ - 130 , 10 + 130 , 8 @ @ public abstract class MemtablePool <nl> * apply the size adjustment to allocated , bypassing any limits or constraints . If this reduces the <nl> * allocated total , we will signal waiters <nl> * / <nl> - void adjustAllocated ( long size ) <nl> + private void adjustAllocated ( long size ) <nl> { <nl> - if ( size = = 0 ) <nl> - return ; <nl> while ( true ) <nl> { <nl> long cur = allocated ; <nl> @ @ - 142 , 38 + 140 , 43 @ @ public abstract class MemtablePool <nl> } <nl> } <nl> <nl> - / / ' acquires ' an amount of memory , and maybe also marks it allocated . This method is meant to be overridden <nl> - / / by implementations with a separate concept of acquired / allocated . As this method stands , an acquire <nl> - / / without an allocate is a no - op ( acquisition is achieved through allocation ) , however a release ( where size < 0 ) <nl> - / / is always processed and accounted for in allocated . <nl> - void adjustAcquired ( long size , boolean alsoAllocated ) <nl> + void allocated ( long size ) <nl> { <nl> - if ( size > 0 | | alsoAllocated ) <nl> - { <nl> - if ( alsoAllocated ) <nl> - adjustAllocated ( size ) ; <nl> - maybeClean ( ) ; <nl> - } <nl> - else if ( size < 0 ) <nl> - { <nl> - adjustAllocated ( size ) ; <nl> - hasRoom . signalAll ( ) ; <nl> - } <nl> + assert size > = 0 ; <nl> + if ( size = = 0 ) <nl> + return ; <nl> + <nl> + adjustAllocated ( size ) ; <nl> + maybeClean ( ) ; <nl> + } <nl> + <nl> + void acquired ( long size ) <nl> + { <nl> + maybeClean ( ) ; <nl> + } <nl> + <nl> + void released ( long size ) <nl> + { <nl> + assert size > = 0 ; <nl> + adjustAllocated ( - size ) ; <nl> + hasRoom . signalAll ( ) ; <nl> } <nl> <nl> - / / space reclaimed should be released prior to calling this , to avoid triggering unnecessary cleans <nl> - void adjustReclaiming ( long reclaiming ) <nl> + void reclaiming ( long size ) <nl> { <nl> - if ( reclaiming = = 0 ) <nl> + if ( size = = 0 ) <nl> return ; <nl> - reclaimingUpdater . addAndGet ( this , reclaiming ) ; <nl> - if ( reclaiming < 0 & & updateNextClean ( ) & & cleaner ! = null ) <nl> - cleaner . trigger ( ) ; <nl> + reclaimingUpdater . addAndGet ( this , size ) ; <nl> } <nl> <nl> - public long allocated ( ) <nl> + void reclaimed ( long size ) <nl> { <nl> - return allocated ; <nl> + if ( size = = 0 ) <nl> + return ; <nl> + <nl> + reclaimingUpdater . addAndGet ( this , - size ) ; <nl> + if ( updateNextClean ( ) & & cleaner ! = null ) <nl> + cleaner . trigger ( ) ; <nl> } <nl> <nl> public long used ( ) <nl> @ @ - 181 , 6 + 184 , 22 @ @ public abstract class MemtablePool <nl> return allocated ; <nl> } <nl> <nl> + public float reclaimingRatio ( ) <nl> + { <nl> + float r = reclaiming / ( float ) limit ; <nl> + if ( Float . isNaN ( r ) ) <nl> + return 0 ; <nl> + return r ; <nl> + } <nl> + <nl> + public float usedRatio ( ) <nl> + { <nl> + float r = allocated / ( float ) limit ; <nl> + if ( Float . isNaN ( r ) ) <nl> + return 0 ; <nl> + return r ; <nl> + } <nl> + <nl> public MemtableAllocator . SubAllocator newAllocator ( ) <nl> { <nl> return new MemtableAllocator . SubAllocator ( this ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java b / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java <nl> index 83d6c0c . . 7f87fcd 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class NativeAllocatorTest <nl> } <nl> if ( isClean . getCount ( ) > 0 ) <nl> { <nl> - allocatorRef . get ( ) . offHeap ( ) . release ( 80 ) ; <nl> + allocatorRef . get ( ) . offHeap ( ) . released ( 80 ) ; <nl> isClean . countDown ( ) ; <nl> } <nl> } <nl> @ @ - 79 , 6 + 79 , 22 @ @ public class NativeAllocatorTest <nl> / / allocate normal , check accounted and not cleaned <nl> allocator . allocate ( 10 , group ) ; <nl> Assert . assertEquals ( 10 , allocator . offHeap ( ) . owns ( ) ) ; <nl> + / / confirm adjustment works <nl> + allocator . offHeap ( ) . adjust ( - 10 , group ) ; <nl> + Assert . assertEquals ( 0 , allocator . offHeap ( ) . owns ( ) ) ; <nl> + allocator . offHeap ( ) . adjust ( 10 , group ) ; <nl> + Assert . assertEquals ( 10 , allocator . offHeap ( ) . owns ( ) ) ; <nl> + / / confirm we cannot allocate negative <nl> + boolean success = false ; <nl> + try <nl> + { <nl> + allocator . offHeap ( ) . allocate ( - 10 , group ) ; <nl> + } <nl> + catch ( AssertionError e ) <nl> + { <nl> + success = true ; <nl> + } <nl> + Assert . assertTrue ( success ) ; <nl> Uninterruptibles . sleepUninterruptibly ( 10L , TimeUnit . MILLISECONDS ) ; <nl> Assert . assertEquals ( 1 , isClean . getCount ( ) ) ; <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 920edbc . . d26b83a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 54 , 6 + 54 , 7 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . FileUtils ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . TimedStatsDeque ; <nl> <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> @ @ - 88 , 6 + 89 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / * Flag indicates if a compaction is in process * / <nl> private AtomicBoolean isCompacting _ = new AtomicBoolean ( false ) ; <nl> <nl> + private TimedStatsDeque readStats _ = new TimedStatsDeque ( 60000 ) ; <nl> + private TimedStatsDeque diskReadStats _ = new TimedStatsDeque ( 60000 ) ; <nl> + <nl> ColumnFamilyStore ( String table , String columnFamily , boolean isSuper , int indexValue ) throws IOException <nl> { <nl> table _ = table ; <nl> @ @ - 482 , 15 + 486 , 20 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter ) throws IOException <nl> { <nl> + long start = System . currentTimeMillis ( ) ; <nl> List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; <nl> - return resolveAndRemoveDeleted ( columnFamilies ) ; <nl> + ColumnFamily cf = resolveAndRemoveDeleted ( columnFamilies ) ; <nl> + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> + return cf ; <nl> } <nl> <nl> public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter , int gcBefore ) throws IOException <nl> { <nl> + long start = System . currentTimeMillis ( ) ; <nl> List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; <nl> - ColumnFamily cf = ColumnFamily . resolve ( columnFamilies ) ; <nl> - return removeDeleted ( cf , gcBefore ) ; <nl> + ColumnFamily cf = removeDeleted ( ColumnFamily . resolve ( columnFamilies ) , gcBefore ) ; <nl> + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> + return cf ; <nl> } <nl> <nl> / * * <nl> @ @ - 513 , 7 + 522 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> long start = System . currentTimeMillis ( ) ; <nl> getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; <nl> - logger _ . debug ( " DISK TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; <nl> } <nl> return columnFamilies ; <nl> } <nl> @ @ - 1457 , 4 + 1466 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> return Collections . unmodifiableSet ( ssTables _ ) ; <nl> } <nl> + <nl> + public int getReadCount ( ) <nl> + { <nl> + return readStats _ . size ( ) ; <nl> + } <nl> + <nl> + public int getReadDiskHits ( ) <nl> + { <nl> + return diskReadStats _ . size ( ) ; <nl> + } <nl> + <nl> + public double getReadLatency ( ) <nl> + { <nl> + return readStats _ . mean ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index 94e91c3 . . b39ec502 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 53 , 4 + 53 , 19 @ @ public interface ColumnFamilyStoreMBean <nl> * Triggers an immediate memtable flush . <nl> * / <nl> public void forceFlush ( ) ; <nl> + <nl> + / * * <nl> + * @ return the number of read operations on this column family in the last minute <nl> + * / <nl> + public int getReadCount ( ) ; <nl> + <nl> + / * * <nl> + * @ return the number of read operations on this column family that hit the disk in the last minute <nl> + * / <nl> + public int getReadDiskHits ( ) ; <nl> + <nl> + / * * <nl> + * @ return average latency per read operation in the last minute <nl> + * / <nl> + public double getReadLatency ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> index 1c09767 . . f551d69 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java <nl> @ @ - 75 , 10 + 75 , 7 @ @ public class ReadVerbHandler implements IVerbHandler <nl> ReadCommand readCommand = ReadCommand . serializer ( ) . deserialize ( readCtx . bufIn _ ) ; <nl> Table table = Table . open ( readCommand . table ) ; <nl> Row row = null ; <nl> - long start = System . currentTimeMillis ( ) ; <nl> row = readCommand . getRow ( table ) ; <nl> - logger _ . info ( " getRow ( ) TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> - start = System . currentTimeMillis ( ) ; <nl> ReadResponse readResponse = null ; <nl> if ( readCommand . isDigestQuery ( ) ) <nl> { <nl> @ @ - 92 , 28 + 89 , 24 @ @ public class ReadVerbHandler implements IVerbHandler <nl> / * serialize the ReadResponseMessage . * / <nl> readCtx . bufOut _ . reset ( ) ; <nl> <nl> - start = System . currentTimeMillis ( ) ; <nl> ReadResponse . serializer ( ) . serialize ( readResponse , readCtx . bufOut _ ) ; <nl> - logger _ . info ( " serialize TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> <nl> byte [ ] bytes = new byte [ readCtx . bufOut _ . getLength ( ) ] ; <nl> - start = System . currentTimeMillis ( ) ; <nl> System . arraycopy ( readCtx . bufOut _ . getData ( ) , 0 , bytes , 0 , bytes . length ) ; <nl> - logger _ . info ( " copy TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> <nl> - Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; <nl> + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; <nl> + logger _ . debug ( " Read key " + readCommand . key + " ; sending response to " + message . getFrom ( ) ) ; <nl> MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; <nl> - logger _ . info ( " ReadVerbHandler TIME 2 : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> - <nl> + <nl> / * Do read repair if header of the message says so * / <nl> if ( message . getHeader ( ReadCommand . DO _ REPAIR ) ! = null ) <nl> { <nl> doReadRepair ( row , readCommand ) ; <nl> } <nl> } <nl> - catch ( IOException ex ) <nl> + catch ( IOException ex ) <nl> { <nl> - logger _ . info ( LogUtil . throwableToString ( ex ) ) ; <nl> + throw new RuntimeException ( ex ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index cb54bba . . 01b3d05 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . BoundedStatsDeque ; <nl> import org . apache . log4j . Logger ; <nl> <nl> / * * <nl> @ @ - 236 , 22 + 237 , 17 @ @ class ArrivalWindow <nl> { <nl> private static Logger logger _ = Logger . getLogger ( ArrivalWindow . class ) ; <nl> private double tLast _ = 0L ; <nl> - private Deque < Double > arrivalIntervals _ ; <nl> + private BoundedStatsDeque arrivalIntervals _ ; <nl> private int size _ ; <nl> <nl> ArrivalWindow ( int size ) <nl> { <nl> size _ = size ; <nl> - arrivalIntervals _ = new ArrayDeque < Double > ( size ) ; <nl> + arrivalIntervals _ = new BoundedStatsDeque ( size ) ; <nl> } <nl> <nl> synchronized void add ( double value ) <nl> { <nl> - if ( arrivalIntervals _ . size ( ) = = size _ ) <nl> - { <nl> - arrivalIntervals _ . remove ( ) ; <nl> - } <nl> - <nl> double interArrivalTime ; <nl> if ( tLast _ > 0L ) <nl> { <nl> @ @ - 267 , 41 + 263 , 27 @ @ class ArrivalWindow <nl> <nl> synchronized double sum ( ) <nl> { <nl> - double sum = 0d ; <nl> - for ( Double interval : arrivalIntervals _ ) <nl> - { <nl> - sum + = interval ; <nl> - } <nl> - return sum ; <nl> + return arrivalIntervals _ . sum ( ) ; <nl> } <nl> <nl> synchronized double sumOfDeviations ( ) <nl> { <nl> - double sumOfDeviations = 0d ; <nl> - double mean = mean ( ) ; <nl> - <nl> - for ( Double interval : arrivalIntervals _ ) <nl> - { <nl> - double v = interval - mean ; <nl> - sumOfDeviations + = v * v ; <nl> - } <nl> - <nl> - return sumOfDeviations ; <nl> + return arrivalIntervals _ . sumOfDeviations ( ) ; <nl> } <nl> <nl> synchronized double mean ( ) <nl> { <nl> - return sum ( ) / arrivalIntervals _ . size ( ) ; <nl> + return arrivalIntervals _ . mean ( ) ; <nl> } <nl> <nl> synchronized double variance ( ) <nl> - { <nl> - return sumOfDeviations ( ) / ( arrivalIntervals _ . size ( ) ) ; <nl> + { <nl> + return arrivalIntervals _ . variance ( ) ; <nl> } <nl> <nl> - double deviation ( ) <nl> - { <nl> - return Math . sqrt ( variance ( ) ) ; <nl> + double stdev ( ) <nl> + { <nl> + return arrivalIntervals _ . stdev ( ) ; <nl> } <nl> <nl> void clear ( ) <nl> @ @ - 311 , 13 + 293 , 9 @ @ class ArrivalWindow <nl> <nl> double p ( double t ) <nl> { <nl> - / / Stat stat = new Stat ( ) ; <nl> - double mean = mean ( ) ; <nl> - double deviation = deviation ( ) ; <nl> - / * Exponential CDF = 1 - e ^ - lambda * x * / <nl> + double mean = mean ( ) ; <nl> double exponent = ( - 1 ) * ( t ) / mean ; <nl> return 1 - ( 1 - Math . pow ( Math . E , exponent ) ) ; <nl> - / / return stat . gaussianCDF ( mean , deviation , t , Double . POSITIVE _ INFINITY ) ; <nl> } <nl> <nl> double phi ( long tnow ) <nl> @ @ - 335 , 7 + 313 , 7 @ @ class ArrivalWindow <nl> <nl> public String toString ( ) <nl> { <nl> - return StringUtils . join ( arrivalIntervals _ , " " ) ; <nl> + return StringUtils . join ( arrivalIntervals _ . iterator ( ) , " " ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> index 45fcc70 . . b76ad64 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java <nl> @ @ - 39 , 18 + 39 , 11 @ @ public class MessageDeliveryTask implements Runnable <nl> <nl> public void run ( ) <nl> { <nl> - try <nl> - { <nl> - String verb = message _ . getVerb ( ) ; <nl> - IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; <nl> - if ( verbHandler ! = null ) <nl> - { <nl> - verbHandler . doVerb ( message _ ) ; <nl> - } <nl> - } <nl> - catch ( Throwable th ) <nl> + String verb = message _ . getVerb ( ) ; <nl> + IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; <nl> + if ( verbHandler ! = null ) <nl> { <nl> - logger _ . warn ( LogUtil . throwableToString ( th ) ) ; <nl> + verbHandler . doVerb ( message _ ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index c0b546d . . 00cb7f3 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . net . EndPoint ; <nl> import org . apache . cassandra . net . IAsyncResult ; <nl> import org . apache . cassandra . net . Message ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . utils . TimedStatsDeque ; <nl> import org . apache . log4j . Logger ; <nl> <nl> import javax . management . MBeanServer ; <nl> @ @ - 48 , 12 + 49 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> private static Logger logger = Logger . getLogger ( StorageProxy . class ) ; <nl> <nl> / / mbean stuff <nl> - private static volatile long readLatency ; <nl> - private static volatile int readOperations ; <nl> - private static volatile long rangeLatency ; <nl> - private static volatile int rangeOperations ; <nl> - private static volatile long writeLatency ; <nl> - private static volatile int writeOperations ; <nl> + private static TimedStatsDeque readStats = new TimedStatsDeque ( 60000 ) ; <nl> + private static TimedStatsDeque rangeStats = new TimedStatsDeque ( 60000 ) ; <nl> + private static TimedStatsDeque writeStats = new TimedStatsDeque ( 60000 ) ; <nl> private StorageProxy ( ) { } <nl> static <nl> { <nl> @ @ - 119 , 7 + 117 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> 	 	 	 Map < EndPoint , EndPoint > endpointMap = StorageService . instance ( ) . getNStorageEndPointMap ( rm . key ( ) ) ; <nl> 	 	 	 / / TODO : throw a thrift exception if we do not have N nodes <nl> 	 	 	 Map < EndPoint , Message > messageMap = createWriteMessages ( rm , endpointMap ) ; <nl> - logger . debug ( " insert writing to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; <nl> + logger . debug ( " insert writing key " + rm . key ( ) + " to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; <nl> 	 	 	 for ( Map . Entry < EndPoint , Message > entry : messageMap . entrySet ( ) ) <nl> 	 	 	 { <nl> 	 	 	 	 MessagingService . getMessagingInstance ( ) . sendOneWay ( entry . getValue ( ) , entry . getKey ( ) ) ; <nl> @ @ - 131 , 12 + 129 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( writeOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - writeOperations = 1 ; <nl> - writeLatency = 0 ; <nl> - } <nl> - writeLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> @ @ - 154 , 12 + 147 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> try <nl> { <nl> - IResponseResolver < Boolean > writeResponseResolver = new WriteResponseResolver ( ) ; <nl> QuorumResponseHandler < Boolean > quorumResponseHandler = new QuorumResponseHandler < Boolean > ( <nl> DatabaseDescriptor . getReplicationFactor ( ) , <nl> - writeResponseResolver ) ; <nl> + new WriteResponseResolver ( ) ) ; <nl> EndPoint [ ] endpoints = StorageService . instance ( ) . getNStorageEndPoint ( rm . key ( ) ) ; <nl> - logger . debug ( " insertBlocking writing to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; <nl> + logger . debug ( " insertBlocking writing key " + rm . key ( ) + " to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; <nl> / / TODO : throw a thrift exception if we do not have N nodes <nl> <nl> MessagingService . getMessagingInstance ( ) . sendRR ( message , endpoints , quorumResponseHandler ) ; <nl> @ @ - 173 , 12 + 165 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( writeOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - writeOperations = 1 ; <nl> - writeLatency = 0 ; <nl> - } <nl> - writeLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> @ @ - 346 , 12 + 333 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( readOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - readOperations = 1 ; <nl> - readLatency = 0 ; <nl> - } <nl> - readLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> @ @ - 385 , 12 + 367 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> row = strongRead ( command ) ; <nl> } <nl> <nl> - if ( readOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - readOperations = 1 ; <nl> - readLatency = 0 ; <nl> - } <nl> - readLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> <nl> return row ; <nl> } <nl> @ @ - 702 , 42 + 679 , 37 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> finally <nl> { <nl> - if ( rangeOperations + + = = Integer . MAX _ VALUE ) <nl> - { <nl> - rangeOperations = 1 ; <nl> - rangeLatency = 0 ; <nl> - } <nl> - rangeLatency + = System . currentTimeMillis ( ) - startTime ; <nl> + rangeStats . add ( System . currentTimeMillis ( ) - startTime ) ; <nl> } <nl> } <nl> <nl> public double getReadLatency ( ) <nl> { <nl> - return ( ( double ) readLatency ) / readOperations ; <nl> + return readStats . mean ( ) ; <nl> } <nl> <nl> public double getRangeLatency ( ) <nl> { <nl> - return ( ( double ) rangeLatency ) / rangeOperations ; <nl> + return rangeStats . mean ( ) ; <nl> } <nl> <nl> public double getWriteLatency ( ) <nl> { <nl> - return ( ( double ) writeLatency ) / writeOperations ; <nl> + return writeStats . mean ( ) ; <nl> } <nl> <nl> public int getReadOperations ( ) <nl> { <nl> - return readOperations ; <nl> + return readStats . size ( ) ; <nl> } <nl> <nl> public int getRangeOperations ( ) <nl> { <nl> - return rangeOperations ; <nl> + return rangeStats . size ( ) ; <nl> } <nl> <nl> public int getWriteOperations ( ) <nl> { <nl> - return writeOperations ; <nl> + return writeStats . size ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java <nl> new file mode 100644 <nl> index 0000000 . . 16521c0 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . ArrayDeque ; <nl> + <nl> + public abstract class AbstractStatsDeque implements Iterable < Double > <nl> + { <nl> + public abstract Iterator < Double > iterator ( ) ; <nl> + public abstract int size ( ) ; <nl> + public abstract void add ( double o ) ; <nl> + public abstract void clear ( ) ; <nl> + <nl> + / / <nl> + / / statistical methods <nl> + / / <nl> + <nl> + public double sum ( ) <nl> + { <nl> + double sum = 0d ; <nl> + for ( Double interval : this ) <nl> + { <nl> + sum + = interval ; <nl> + } <nl> + return sum ; <nl> + } <nl> + <nl> + public double sumOfDeviations ( ) <nl> + { <nl> + double sumOfDeviations = 0d ; <nl> + double mean = mean ( ) ; <nl> + <nl> + for ( Double interval : this ) <nl> + { <nl> + double v = interval - mean ; <nl> + sumOfDeviations + = v * v ; <nl> + } <nl> + <nl> + return sumOfDeviations ; <nl> + } <nl> + <nl> + public double mean ( ) <nl> + { <nl> + return sum ( ) / size ( ) ; <nl> + } <nl> + <nl> + public double variance ( ) <nl> + { <nl> + return sumOfDeviations ( ) / size ( ) ; <nl> + } <nl> + <nl> + public double stdev ( ) <nl> + { <nl> + return Math . sqrt ( variance ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> new file mode 100644 <nl> index 0000000 . . 80f8af1 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . ArrayDeque ; <nl> + import java . util . Iterator ; <nl> + <nl> + public class BoundedStatsDeque extends AbstractStatsDeque <nl> + { <nl> + private final int size ; <nl> + protected final ArrayDeque < Double > deque ; <nl> + <nl> + public BoundedStatsDeque ( int size ) <nl> + { <nl> + this . size = size ; <nl> + deque = new ArrayDeque < Double > ( size ) ; <nl> + } <nl> + <nl> + public Iterator < Double > iterator ( ) <nl> + { <nl> + return deque . iterator ( ) ; <nl> + } <nl> + <nl> + public int size ( ) <nl> + { <nl> + return deque . size ( ) ; <nl> + } <nl> + <nl> + public void clear ( ) <nl> + { <nl> + deque . clear ( ) ; <nl> + } <nl> + <nl> + public void add ( double o ) <nl> + { <nl> + if ( size = = deque . size ( ) ) <nl> + { <nl> + deque . remove ( ) ; <nl> + } <nl> + deque . add ( o ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / TimedStatsDeque . java b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java <nl> new file mode 100644 <nl> index 0000000 . . 914c459 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . ArrayDeque ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + public class TimedStatsDeque extends AbstractStatsDeque <nl> + { <nl> + private final ArrayDeque < Tuple > deque ; <nl> + private final long period ; <nl> + <nl> + public TimedStatsDeque ( long period ) <nl> + { <nl> + this . period = period ; <nl> + deque = new ArrayDeque < Tuple > ( ) ; <nl> + } <nl> + <nl> + private void purge ( ) <nl> + { <nl> + long now = System . currentTimeMillis ( ) ; <nl> + while ( ! deque . isEmpty ( ) & & deque . peek ( ) . timestamp < now - period ) <nl> + { <nl> + deque . remove ( ) ; <nl> + } <nl> + } <nl> + <nl> + public Iterator < Double > iterator ( ) <nl> + { <nl> + purge ( ) ; <nl> + / / I expect this method to be called relatively infrequently so inefficiency is ok . <nl> + List < Double > L = new ArrayList < Double > ( deque . size ( ) ) ; <nl> + for ( Tuple t : deque ) <nl> + { <nl> + L . add ( t . value ) ; <nl> + } <nl> + return L . iterator ( ) ; <nl> + } <nl> + <nl> + public int size ( ) <nl> + { <nl> + purge ( ) ; <nl> + return deque . size ( ) ; <nl> + } <nl> + <nl> + public void add ( double o ) <nl> + { <nl> + purge ( ) ; <nl> + deque . add ( new Tuple ( o , System . currentTimeMillis ( ) ) ) ; <nl> + } <nl> + <nl> + public void clear ( ) <nl> + { <nl> + deque . clear ( ) ; <nl> + } <nl> + } <nl> + <nl> + class Tuple <nl> + { <nl> + public final double value ; <nl> + public final long timestamp ; <nl> + <nl> + public Tuple ( double value , long timestamp ) <nl> + { <nl> + this . value = value ; <nl> + this . timestamp = timestamp ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 762b88b . . 25f7c1d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 8 
 + * Ensure memtable book keeping is not corrupted in the event we shrink usage ( CASSANDRA - 9681 ) 
 * Update internal python driver for cqlsh ( CASSANDRA - 9064 ) 
 * Fix IndexOutOfBoundsException when inserting tuple with too many 
 elements using the string literal notation ( CASSANDRA - 9559 ) 
 diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 index 47f0b85 . . d9eb29c 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 @ @ - 505 , 7 + 505 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 
 protected void finish ( ) 
 { 
 - allocator . onHeap ( ) . allocate ( heapSize , writeOp ) ; 
 + allocator . onHeap ( ) . adjust ( heapSize , writeOp ) ; 
 reclaimer . commit ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index fa527c7 . . 8e67cdc 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import com . google . common . collect . * ; 
 import com . google . common . util . concurrent . * ; 
 
 import org . apache . cassandra . io . FSWriteError ; 
 + import org . apache . cassandra . utils . memory . MemtablePool ; 
 import org . json . simple . * ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 1157 , 6 + 1158 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 float largestRatio = 0f ; 
 Memtable largest = null ; 
 + float liveOnHeap = 0 , liveOffHeap = 0 ; 
 for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 { 
 / / we take a reference to the current main memtable for the CF prior to snapping its ownership ratios 
 @ @ - 1181 , 19 + 1183 , 37 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 float ratio = Math . max ( onHeap , offHeap ) ; 
 - 
 if ( ratio > largestRatio ) 
 { 
 largest = current ; 
 largestRatio = ratio ; 
 } 
 + 
 + liveOnHeap + = onHeap ; 
 + liveOffHeap + = offHeap ; 
 } 
 
 if ( largest ! = null ) 
 + { 
 + float usedOnHeap = Memtable . MEMORY _ POOL . onHeap . usedRatio ( ) ; 
 + float usedOffHeap = Memtable . MEMORY _ POOL . offHeap . usedRatio ( ) ; 
 + float flushingOnHeap = Memtable . MEMORY _ POOL . onHeap . reclaimingRatio ( ) ; 
 + float flushingOffHeap = Memtable . MEMORY _ POOL . offHeap . reclaimingRatio ( ) ; 
 + float thisOnHeap = largest . getAllocator ( ) . onHeap ( ) . ownershipRatio ( ) ; 
 + float thisOffHeap = largest . getAllocator ( ) . onHeap ( ) . ownershipRatio ( ) ; 
 + logger . info ( " Flushing largest { } to free up room . Used total : { } , live : { } , flushing : { } , this : { } " , 
 + largest . cfs , ratio ( usedOnHeap , usedOffHeap ) , ratio ( liveOnHeap , liveOffHeap ) , 
 + ratio ( flushingOnHeap , flushingOffHeap ) , ratio ( thisOnHeap , thisOffHeap ) ) ; 
 largest . cfs . switchMemtableIfCurrent ( largest ) ; 
 + } 
 } 
 } 
 
 + private static String ratio ( float onHeap , float offHeap ) 
 + { 
 + return String . format ( " % . 0f / % . 0f " , onHeap , offHeap ) ; 
 + } 
 + 
 public void maybeUpdateRowCache ( DecoratedKey key ) 
 { 
 if ( ! isRowCacheEnabled ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index a50a614 . . 9f6cf9b 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 239 , 7 + 239 , 8 @ @ public class Memtable 
 public String toString ( ) 
 { 
 return String . format ( " Memtable - % s @ % s ( % s serialized bytes , % s ops , % . 0f % % / % . 0f % % of on / off - heap limit ) " , 
 - cfs . name , hashCode ( ) , liveDataSize , currentOperations , 100 * allocator . onHeap ( ) . ownershipRatio ( ) , 100 * allocator . offHeap ( ) . ownershipRatio ( ) ) ; 
 + cfs . name , hashCode ( ) , FBUtilities . prettyPrintMemory ( liveDataSize . get ( ) ) , currentOperations , 
 + 100 * allocator . onHeap ( ) . ownershipRatio ( ) , 100 * allocator . offHeap ( ) . ownershipRatio ( ) ) ; 
 } 
 
 / * * 
 @ @ - 378 , 19 + 379 , 21 @ @ public class Memtable 
 
 if ( writer . getFilePointer ( ) > 0 ) 
 { 
 - writer . isolateReferences ( ) ; 
 + logger . info ( String . format ( " Completed flushing % s ( % s ) for commitlog position % s " , 
 + writer . getFilename ( ) , 
 + FBUtilities . prettyPrintMemory ( writer . getOnDiskFilePointer ( ) ) , 
 + context ) ) ; 
 
 + writer . isolateReferences ( ) ; 
 / / temp sstables should contain non - repaired data . 
 ssTable = writer . closeAndOpenReader ( ) ; 
 - logger . info ( String . format ( " Completed flushing % s ( % d bytes ) for commitlog position % s " , 
 - ssTable . getFilename ( ) , new File ( ssTable . getFilename ( ) ) . length ( ) , context ) ) ; 
 } 
 else 
 { 
 + logger . info ( " Completed flushing % s ; nothing needed to be retained . Commitlog position was { } " , 
 + writer . getFilename ( ) , context ) ; 
 writer . abort ( ) ; 
 ssTable = null ; 
 - logger . info ( " Completed flushing ; nothing needed to be retained . Commitlog position was { } " , 
 - context ) ; 
 } 
 
 if ( heavilyContendedRowCount > 0 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 4c81b2a . . 68eb864 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . net . UnknownHostException ; 
 import java . nio . ByteBuffer ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 + import java . text . NumberFormat ; 
 import java . util . * ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . Future ; 
 @ @ - 570 , 6 + 571 , 15 @ @ public class FBUtilities 
 } 
 } 
 
 + public static String prettyPrintMemory ( long size ) 
 + { 
 + if ( size > = 1 < < 30 ) 
 + return String . format ( " % . 3fGiB " , size / ( double ) ( 1 < < 30 ) ) ; 
 + if ( size > = 1 < < 20 ) 
 + return String . format ( " % . 3fMiB " , size / ( double ) ( 1 < < 20 ) ) ; 
 + return String . format ( " % . 3fKiB " , size / ( double ) ( 1 < < 10 ) ) ; 
 + } 
 + 
 / * * 
 * Starts and waits for the given @ param pb to finish . 
 * @ throws java . io . IOException on non - zero exit code 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / HeapPool . java b / src / java / org / apache / cassandra / utils / memory / HeapPool . java 
 index a04947c . . 2a19d9c 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / HeapPool . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / HeapPool . java 
 @ @ - 75 , 13 + 75 , 13 @ @ public class HeapPool extends MemtablePool 
 
 public Reclaimer reclaimImmediately ( Cell cell ) 
 { 
 - onHeap ( ) . release ( cell . name ( ) . dataSize ( ) + cell . value ( ) . remaining ( ) ) ; 
 + onHeap ( ) . released ( cell . name ( ) . dataSize ( ) + cell . value ( ) . remaining ( ) ) ; 
 return this ; 
 } 
 
 public Reclaimer reclaimImmediately ( DecoratedKey key ) 
 { 
 - onHeap ( ) . release ( key . getKey ( ) . remaining ( ) ) ; 
 + onHeap ( ) . released ( key . getKey ( ) . remaining ( ) ) ; 
 return this ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java 
 index e814b4d . . f5e743c 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemtableAllocator . java 
 @ @ - 160 , 13 + 160 , 24 @ @ public abstract class MemtableAllocator 
 / / currently no corroboration / enforcement of this is performed . 
 void releaseAll ( ) 
 { 
 - parent . adjustAcquired ( - ownsUpdater . getAndSet ( this , 0 ) , false ) ; 
 - parent . adjustReclaiming ( - reclaimingUpdater . getAndSet ( this , 0 ) ) ; 
 + parent . released ( ownsUpdater . getAndSet ( this , 0 ) ) ; 
 + parent . reclaimed ( reclaimingUpdater . getAndSet ( this , 0 ) ) ; 
 + } 
 + 
 + / / like allocate , but permits allocations to be negative 
 + public void adjust ( long size , OpOrder . Group opGroup ) 
 + { 
 + if ( size < = 0 ) 
 + released ( - size ) ; 
 + else 
 + allocate ( size , opGroup ) ; 
 } 
 
 / / allocate memory in the tracker , and mark ourselves as owning it 
 public void allocate ( long size , OpOrder . Group opGroup ) 
 { 
 + assert size > = 0 ; 
 + 
 while ( true ) 
 { 
 if ( parent . tryAllocate ( size ) ) 
 @ @ - 190 , 23 + 201 , 23 @ @ public abstract class MemtableAllocator 
 } 
 } 
 
 - / / retroactively mark an amount allocated amd acquired in the tracker , and owned by us 
 - void allocated ( long size ) 
 + / / retroactively mark an amount allocated and acquired in the tracker , and owned by us 
 + private void allocated ( long size ) 
 { 
 - parent . adjustAcquired ( size , true ) ; 
 + parent . allocated ( size ) ; 
 ownsUpdater . addAndGet ( this , size ) ; 
 } 
 
 / / retroactively mark an amount acquired in the tracker , and owned by us 
 - void acquired ( long size ) 
 + private void acquired ( long size ) 
 { 
 - parent . adjustAcquired ( size , false ) ; 
 + parent . acquired ( size ) ; 
 ownsUpdater . addAndGet ( this , size ) ; 
 } 
 
 - void release ( long size ) 
 + void released ( long size ) 
 { 
 - parent . adjustAcquired ( - size , false ) ; 
 + parent . released ( size ) ; 
 ownsUpdater . addAndGet ( this , - size ) ; 
 } 
 
 @ @ - 217 , 11 + 228 , 11 @ @ public abstract class MemtableAllocator 
 { 
 long cur = owns ; 
 long prev = reclaiming ; 
 - if ( reclaimingUpdater . compareAndSet ( this , prev , cur ) ) 
 - { 
 - parent . adjustReclaiming ( cur - prev ) ; 
 - return ; 
 - } 
 + if ( ! reclaimingUpdater . compareAndSet ( this , prev , cur ) ) 
 + continue ; 
 + 
 + parent . reclaiming ( cur - prev ) ; 
 + return ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java 
 index 1d219bb . . bb85884 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemtablePool . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemtablePool . java 
 @ @ - 130 , 10 + 130 , 8 @ @ public abstract class MemtablePool 
 * apply the size adjustment to allocated , bypassing any limits or constraints . If this reduces the 
 * allocated total , we will signal waiters 
 * / 
 - void adjustAllocated ( long size ) 
 + private void adjustAllocated ( long size ) 
 { 
 - if ( size = = 0 ) 
 - return ; 
 while ( true ) 
 { 
 long cur = allocated ; 
 @ @ - 142 , 38 + 140 , 43 @ @ public abstract class MemtablePool 
 } 
 } 
 
 - / / ' acquires ' an amount of memory , and maybe also marks it allocated . This method is meant to be overridden 
 - / / by implementations with a separate concept of acquired / allocated . As this method stands , an acquire 
 - / / without an allocate is a no - op ( acquisition is achieved through allocation ) , however a release ( where size < 0 ) 
 - / / is always processed and accounted for in allocated . 
 - void adjustAcquired ( long size , boolean alsoAllocated ) 
 + void allocated ( long size ) 
 { 
 - if ( size > 0 | | alsoAllocated ) 
 - { 
 - if ( alsoAllocated ) 
 - adjustAllocated ( size ) ; 
 - maybeClean ( ) ; 
 - } 
 - else if ( size < 0 ) 
 - { 
 - adjustAllocated ( size ) ; 
 - hasRoom . signalAll ( ) ; 
 - } 
 + assert size > = 0 ; 
 + if ( size = = 0 ) 
 + return ; 
 + 
 + adjustAllocated ( size ) ; 
 + maybeClean ( ) ; 
 + } 
 + 
 + void acquired ( long size ) 
 + { 
 + maybeClean ( ) ; 
 + } 
 + 
 + void released ( long size ) 
 + { 
 + assert size > = 0 ; 
 + adjustAllocated ( - size ) ; 
 + hasRoom . signalAll ( ) ; 
 } 
 
 - / / space reclaimed should be released prior to calling this , to avoid triggering unnecessary cleans 
 - void adjustReclaiming ( long reclaiming ) 
 + void reclaiming ( long size ) 
 { 
 - if ( reclaiming = = 0 ) 
 + if ( size = = 0 ) 
 return ; 
 - reclaimingUpdater . addAndGet ( this , reclaiming ) ; 
 - if ( reclaiming < 0 & & updateNextClean ( ) & & cleaner ! = null ) 
 - cleaner . trigger ( ) ; 
 + reclaimingUpdater . addAndGet ( this , size ) ; 
 } 
 
 - public long allocated ( ) 
 + void reclaimed ( long size ) 
 { 
 - return allocated ; 
 + if ( size = = 0 ) 
 + return ; 
 + 
 + reclaimingUpdater . addAndGet ( this , - size ) ; 
 + if ( updateNextClean ( ) & & cleaner ! = null ) 
 + cleaner . trigger ( ) ; 
 } 
 
 public long used ( ) 
 @ @ - 181 , 6 + 184 , 22 @ @ public abstract class MemtablePool 
 return allocated ; 
 } 
 
 + public float reclaimingRatio ( ) 
 + { 
 + float r = reclaiming / ( float ) limit ; 
 + if ( Float . isNaN ( r ) ) 
 + return 0 ; 
 + return r ; 
 + } 
 + 
 + public float usedRatio ( ) 
 + { 
 + float r = allocated / ( float ) limit ; 
 + if ( Float . isNaN ( r ) ) 
 + return 0 ; 
 + return r ; 
 + } 
 + 
 public MemtableAllocator . SubAllocator newAllocator ( ) 
 { 
 return new MemtableAllocator . SubAllocator ( this ) ; 
 diff - - git a / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java b / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java 
 index 83d6c0c . . 7f87fcd 100644 
 - - - a / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / memory / NativeAllocatorTest . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class NativeAllocatorTest 
 } 
 if ( isClean . getCount ( ) > 0 ) 
 { 
 - allocatorRef . get ( ) . offHeap ( ) . release ( 80 ) ; 
 + allocatorRef . get ( ) . offHeap ( ) . released ( 80 ) ; 
 isClean . countDown ( ) ; 
 } 
 } 
 @ @ - 79 , 6 + 79 , 22 @ @ public class NativeAllocatorTest 
 / / allocate normal , check accounted and not cleaned 
 allocator . allocate ( 10 , group ) ; 
 Assert . assertEquals ( 10 , allocator . offHeap ( ) . owns ( ) ) ; 
 + / / confirm adjustment works 
 + allocator . offHeap ( ) . adjust ( - 10 , group ) ; 
 + Assert . assertEquals ( 0 , allocator . offHeap ( ) . owns ( ) ) ; 
 + allocator . offHeap ( ) . adjust ( 10 , group ) ; 
 + Assert . assertEquals ( 10 , allocator . offHeap ( ) . owns ( ) ) ; 
 + / / confirm we cannot allocate negative 
 + boolean success = false ; 
 + try 
 + { 
 + allocator . offHeap ( ) . allocate ( - 10 , group ) ; 
 + } 
 + catch ( AssertionError e ) 
 + { 
 + success = true ; 
 + } 
 + Assert . assertTrue ( success ) ; 
 Uninterruptibles . sleepUninterruptibly ( 10L , TimeUnit . MILLISECONDS ) ; 
 Assert . assertEquals ( 1 , isClean . getCount ( ) ) ; 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 920edbc . . d26b83a 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 54 , 6 + 54 , 7 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . FileUtils ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . TimedStatsDeque ; 
 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 @ @ - 88 , 6 + 89 , 9 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / * Flag indicates if a compaction is in process * / 
 private AtomicBoolean isCompacting _ = new AtomicBoolean ( false ) ; 
 
 + private TimedStatsDeque readStats _ = new TimedStatsDeque ( 60000 ) ; 
 + private TimedStatsDeque diskReadStats _ = new TimedStatsDeque ( 60000 ) ; 
 + 
 ColumnFamilyStore ( String table , String columnFamily , boolean isSuper , int indexValue ) throws IOException 
 { 
 table _ = table ; 
 @ @ - 482 , 15 + 486 , 20 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter ) throws IOException 
 { 
 + long start = System . currentTimeMillis ( ) ; 
 List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; 
 - return resolveAndRemoveDeleted ( columnFamilies ) ; 
 + ColumnFamily cf = resolveAndRemoveDeleted ( columnFamilies ) ; 
 + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 + return cf ; 
 } 
 
 public ColumnFamily getColumnFamily ( String key , String columnFamilyColumn , IFilter filter , int gcBefore ) throws IOException 
 { 
 + long start = System . currentTimeMillis ( ) ; 
 List < ColumnFamily > columnFamilies = getColumnFamilies ( key , columnFamilyColumn , filter ) ; 
 - ColumnFamily cf = ColumnFamily . resolve ( columnFamilies ) ; 
 - return removeDeleted ( cf , gcBefore ) ; 
 + ColumnFamily cf = removeDeleted ( ColumnFamily . resolve ( columnFamilies ) , gcBefore ) ; 
 + readStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 + return cf ; 
 } 
 
 / * * 
 @ @ - 513 , 7 + 522 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 long start = System . currentTimeMillis ( ) ; 
 getColumnFamilyFromDisk ( key , columnFamilyColumn , columnFamilies , filter ) ; 
 - logger _ . debug ( " DISK TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 + diskReadStats _ . add ( System . currentTimeMillis ( ) - start ) ; 
 } 
 return columnFamilies ; 
 } 
 @ @ - 1457 , 4 + 1466 , 19 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 return Collections . unmodifiableSet ( ssTables _ ) ; 
 } 
 + 
 + public int getReadCount ( ) 
 + { 
 + return readStats _ . size ( ) ; 
 + } 
 + 
 + public int getReadDiskHits ( ) 
 + { 
 + return diskReadStats _ . size ( ) ; 
 + } 
 + 
 + public double getReadLatency ( ) 
 + { 
 + return readStats _ . mean ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index 94e91c3 . . b39ec502 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 53 , 4 + 53 , 19 @ @ public interface ColumnFamilyStoreMBean 
 * Triggers an immediate memtable flush . 
 * / 
 public void forceFlush ( ) ; 
 + 
 + / * * 
 + * @ return the number of read operations on this column family in the last minute 
 + * / 
 + public int getReadCount ( ) ; 
 + 
 + / * * 
 + * @ return the number of read operations on this column family that hit the disk in the last minute 
 + * / 
 + public int getReadDiskHits ( ) ; 
 + 
 + / * * 
 + * @ return average latency per read operation in the last minute 
 + * / 
 + public double getReadLatency ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ReadVerbHandler . java b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 index 1c09767 . . f551d69 100644 
 - - - a / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / ReadVerbHandler . java 
 @ @ - 75 , 10 + 75 , 7 @ @ public class ReadVerbHandler implements IVerbHandler 
 ReadCommand readCommand = ReadCommand . serializer ( ) . deserialize ( readCtx . bufIn _ ) ; 
 Table table = Table . open ( readCommand . table ) ; 
 Row row = null ; 
 - long start = System . currentTimeMillis ( ) ; 
 row = readCommand . getRow ( table ) ; 
 - logger _ . info ( " getRow ( ) TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 - start = System . currentTimeMillis ( ) ; 
 ReadResponse readResponse = null ; 
 if ( readCommand . isDigestQuery ( ) ) 
 { 
 @ @ - 92 , 28 + 89 , 24 @ @ public class ReadVerbHandler implements IVerbHandler 
 / * serialize the ReadResponseMessage . * / 
 readCtx . bufOut _ . reset ( ) ; 
 
 - start = System . currentTimeMillis ( ) ; 
 ReadResponse . serializer ( ) . serialize ( readResponse , readCtx . bufOut _ ) ; 
 - logger _ . info ( " serialize TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 
 byte [ ] bytes = new byte [ readCtx . bufOut _ . getLength ( ) ] ; 
 - start = System . currentTimeMillis ( ) ; 
 System . arraycopy ( readCtx . bufOut _ . getData ( ) , 0 , bytes , 0 , bytes . length ) ; 
 - logger _ . info ( " copy TIME : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 
 - Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; 
 + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , bytes ) ; 
 + logger _ . debug ( " Read key " + readCommand . key + " ; sending response to " + message . getFrom ( ) ) ; 
 MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; 
 - logger _ . info ( " ReadVerbHandler TIME 2 : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 - 
 + 
 / * Do read repair if header of the message says so * / 
 if ( message . getHeader ( ReadCommand . DO _ REPAIR ) ! = null ) 
 { 
 doReadRepair ( row , readCommand ) ; 
 } 
 } 
 - catch ( IOException ex ) 
 + catch ( IOException ex ) 
 { 
 - logger _ . info ( LogUtil . throwableToString ( ex ) ) ; 
 + throw new RuntimeException ( ex ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index cb54bba . . 01b3d05 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . BoundedStatsDeque ; 
 import org . apache . log4j . Logger ; 
 
 / * * 
 @ @ - 236 , 22 + 237 , 17 @ @ class ArrivalWindow 
 { 
 private static Logger logger _ = Logger . getLogger ( ArrivalWindow . class ) ; 
 private double tLast _ = 0L ; 
 - private Deque < Double > arrivalIntervals _ ; 
 + private BoundedStatsDeque arrivalIntervals _ ; 
 private int size _ ; 
 
 ArrivalWindow ( int size ) 
 { 
 size _ = size ; 
 - arrivalIntervals _ = new ArrayDeque < Double > ( size ) ; 
 + arrivalIntervals _ = new BoundedStatsDeque ( size ) ; 
 } 
 
 synchronized void add ( double value ) 
 { 
 - if ( arrivalIntervals _ . size ( ) = = size _ ) 
 - { 
 - arrivalIntervals _ . remove ( ) ; 
 - } 
 - 
 double interArrivalTime ; 
 if ( tLast _ > 0L ) 
 { 
 @ @ - 267 , 41 + 263 , 27 @ @ class ArrivalWindow 
 
 synchronized double sum ( ) 
 { 
 - double sum = 0d ; 
 - for ( Double interval : arrivalIntervals _ ) 
 - { 
 - sum + = interval ; 
 - } 
 - return sum ; 
 + return arrivalIntervals _ . sum ( ) ; 
 } 
 
 synchronized double sumOfDeviations ( ) 
 { 
 - double sumOfDeviations = 0d ; 
 - double mean = mean ( ) ; 
 - 
 - for ( Double interval : arrivalIntervals _ ) 
 - { 
 - double v = interval - mean ; 
 - sumOfDeviations + = v * v ; 
 - } 
 - 
 - return sumOfDeviations ; 
 + return arrivalIntervals _ . sumOfDeviations ( ) ; 
 } 
 
 synchronized double mean ( ) 
 { 
 - return sum ( ) / arrivalIntervals _ . size ( ) ; 
 + return arrivalIntervals _ . mean ( ) ; 
 } 
 
 synchronized double variance ( ) 
 - { 
 - return sumOfDeviations ( ) / ( arrivalIntervals _ . size ( ) ) ; 
 + { 
 + return arrivalIntervals _ . variance ( ) ; 
 } 
 
 - double deviation ( ) 
 - { 
 - return Math . sqrt ( variance ( ) ) ; 
 + double stdev ( ) 
 + { 
 + return arrivalIntervals _ . stdev ( ) ; 
 } 
 
 void clear ( ) 
 @ @ - 311 , 13 + 293 , 9 @ @ class ArrivalWindow 
 
 double p ( double t ) 
 { 
 - / / Stat stat = new Stat ( ) ; 
 - double mean = mean ( ) ; 
 - double deviation = deviation ( ) ; 
 - / * Exponential CDF = 1 - e ^ - lambda * x * / 
 + double mean = mean ( ) ; 
 double exponent = ( - 1 ) * ( t ) / mean ; 
 return 1 - ( 1 - Math . pow ( Math . E , exponent ) ) ; 
 - / / return stat . gaussianCDF ( mean , deviation , t , Double . POSITIVE _ INFINITY ) ; 
 } 
 
 double phi ( long tnow ) 
 @ @ - 335 , 7 + 313 , 7 @ @ class ArrivalWindow 
 
 public String toString ( ) 
 { 
 - return StringUtils . join ( arrivalIntervals _ , " " ) ; 
 + return StringUtils . join ( arrivalIntervals _ . iterator ( ) , " " ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 index 45fcc70 . . b76ad64 100644 
 - - - a / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 + + + b / src / java / org / apache / cassandra / net / MessageDeliveryTask . java 
 @ @ - 39 , 18 + 39 , 11 @ @ public class MessageDeliveryTask implements Runnable 
 
 public void run ( ) 
 { 
 - try 
 - { 
 - String verb = message _ . getVerb ( ) ; 
 - IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; 
 - if ( verbHandler ! = null ) 
 - { 
 - verbHandler . doVerb ( message _ ) ; 
 - } 
 - } 
 - catch ( Throwable th ) 
 + String verb = message _ . getVerb ( ) ; 
 + IVerbHandler verbHandler = MessagingService . getMessagingInstance ( ) . getVerbHandler ( verb ) ; 
 + if ( verbHandler ! = null ) 
 { 
 - logger _ . warn ( LogUtil . throwableToString ( th ) ) ; 
 + verbHandler . doVerb ( message _ ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index c0b546d . . 00cb7f3 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . net . EndPoint ; 
 import org . apache . cassandra . net . IAsyncResult ; 
 import org . apache . cassandra . net . Message ; 
 import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . utils . TimedStatsDeque ; 
 import org . apache . log4j . Logger ; 
 
 import javax . management . MBeanServer ; 
 @ @ - 48 , 12 + 49 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 private static Logger logger = Logger . getLogger ( StorageProxy . class ) ; 
 
 / / mbean stuff 
 - private static volatile long readLatency ; 
 - private static volatile int readOperations ; 
 - private static volatile long rangeLatency ; 
 - private static volatile int rangeOperations ; 
 - private static volatile long writeLatency ; 
 - private static volatile int writeOperations ; 
 + private static TimedStatsDeque readStats = new TimedStatsDeque ( 60000 ) ; 
 + private static TimedStatsDeque rangeStats = new TimedStatsDeque ( 60000 ) ; 
 + private static TimedStatsDeque writeStats = new TimedStatsDeque ( 60000 ) ; 
 private StorageProxy ( ) { } 
 static 
 { 
 @ @ - 119 , 7 + 117 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 	 	 	 Map < EndPoint , EndPoint > endpointMap = StorageService . instance ( ) . getNStorageEndPointMap ( rm . key ( ) ) ; 
 	 	 	 / / TODO : throw a thrift exception if we do not have N nodes 
 	 	 	 Map < EndPoint , Message > messageMap = createWriteMessages ( rm , endpointMap ) ; 
 - logger . debug ( " insert writing to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; 
 + logger . debug ( " insert writing key " + rm . key ( ) + " to [ " + StringUtils . join ( messageMap . keySet ( ) , " , " ) + " ] " ) ; 
 	 	 	 for ( Map . Entry < EndPoint , Message > entry : messageMap . entrySet ( ) ) 
 	 	 	 { 
 	 	 	 	 MessagingService . getMessagingInstance ( ) . sendOneWay ( entry . getValue ( ) , entry . getKey ( ) ) ; 
 @ @ - 131 , 12 + 129 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( writeOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - writeOperations = 1 ; 
 - writeLatency = 0 ; 
 - } 
 - writeLatency + = System . currentTimeMillis ( ) - startTime ; 
 + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 @ @ - 154 , 12 + 147 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 try 
 { 
 - IResponseResolver < Boolean > writeResponseResolver = new WriteResponseResolver ( ) ; 
 QuorumResponseHandler < Boolean > quorumResponseHandler = new QuorumResponseHandler < Boolean > ( 
 DatabaseDescriptor . getReplicationFactor ( ) , 
 - writeResponseResolver ) ; 
 + new WriteResponseResolver ( ) ) ; 
 EndPoint [ ] endpoints = StorageService . instance ( ) . getNStorageEndPoint ( rm . key ( ) ) ; 
 - logger . debug ( " insertBlocking writing to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; 
 + logger . debug ( " insertBlocking writing key " + rm . key ( ) + " to [ " + StringUtils . join ( endpoints , " , " ) + " ] " ) ; 
 / / TODO : throw a thrift exception if we do not have N nodes 
 
 MessagingService . getMessagingInstance ( ) . sendRR ( message , endpoints , quorumResponseHandler ) ; 
 @ @ - 173 , 12 + 165 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( writeOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - writeOperations = 1 ; 
 - writeLatency = 0 ; 
 - } 
 - writeLatency + = System . currentTimeMillis ( ) - startTime ; 
 + writeStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 @ @ - 346 , 12 + 333 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( readOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - readOperations = 1 ; 
 - readLatency = 0 ; 
 - } 
 - readLatency + = System . currentTimeMillis ( ) - startTime ; 
 + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 @ @ - 385 , 12 + 367 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 row = strongRead ( command ) ; 
 } 
 
 - if ( readOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - readOperations = 1 ; 
 - readLatency = 0 ; 
 - } 
 - readLatency + = System . currentTimeMillis ( ) - startTime ; 
 + readStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 
 return row ; 
 } 
 @ @ - 702 , 42 + 679 , 37 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 finally 
 { 
 - if ( rangeOperations + + = = Integer . MAX _ VALUE ) 
 - { 
 - rangeOperations = 1 ; 
 - rangeLatency = 0 ; 
 - } 
 - rangeLatency + = System . currentTimeMillis ( ) - startTime ; 
 + rangeStats . add ( System . currentTimeMillis ( ) - startTime ) ; 
 } 
 } 
 
 public double getReadLatency ( ) 
 { 
 - return ( ( double ) readLatency ) / readOperations ; 
 + return readStats . mean ( ) ; 
 } 
 
 public double getRangeLatency ( ) 
 { 
 - return ( ( double ) rangeLatency ) / rangeOperations ; 
 + return rangeStats . mean ( ) ; 
 } 
 
 public double getWriteLatency ( ) 
 { 
 - return ( ( double ) writeLatency ) / writeOperations ; 
 + return writeStats . mean ( ) ; 
 } 
 
 public int getReadOperations ( ) 
 { 
 - return readOperations ; 
 + return readStats . size ( ) ; 
 } 
 
 public int getRangeOperations ( ) 
 { 
 - return rangeOperations ; 
 + return rangeStats . size ( ) ; 
 } 
 
 public int getWriteOperations ( ) 
 { 
 - return writeOperations ; 
 + return writeStats . size ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java 
 new file mode 100644 
 index 0000000 . . 16521c0 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / AbstractStatsDeque . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . ArrayDeque ; 
 + 
 + public abstract class AbstractStatsDeque implements Iterable < Double > 
 + { 
 + public abstract Iterator < Double > iterator ( ) ; 
 + public abstract int size ( ) ; 
 + public abstract void add ( double o ) ; 
 + public abstract void clear ( ) ; 
 + 
 + / / 
 + / / statistical methods 
 + / / 
 + 
 + public double sum ( ) 
 + { 
 + double sum = 0d ; 
 + for ( Double interval : this ) 
 + { 
 + sum + = interval ; 
 + } 
 + return sum ; 
 + } 
 + 
 + public double sumOfDeviations ( ) 
 + { 
 + double sumOfDeviations = 0d ; 
 + double mean = mean ( ) ; 
 + 
 + for ( Double interval : this ) 
 + { 
 + double v = interval - mean ; 
 + sumOfDeviations + = v * v ; 
 + } 
 + 
 + return sumOfDeviations ; 
 + } 
 + 
 + public double mean ( ) 
 + { 
 + return sum ( ) / size ( ) ; 
 + } 
 + 
 + public double variance ( ) 
 + { 
 + return sumOfDeviations ( ) / size ( ) ; 
 + } 
 + 
 + public double stdev ( ) 
 + { 
 + return Math . sqrt ( variance ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 new file mode 100644 
 index 0000000 . . 80f8af1 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / BoundedStatsDeque . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . ArrayDeque ; 
 + import java . util . Iterator ; 
 + 
 + public class BoundedStatsDeque extends AbstractStatsDeque 
 + { 
 + private final int size ; 
 + protected final ArrayDeque < Double > deque ; 
 + 
 + public BoundedStatsDeque ( int size ) 
 + { 
 + this . size = size ; 
 + deque = new ArrayDeque < Double > ( size ) ; 
 + } 
 + 
 + public Iterator < Double > iterator ( ) 
 + { 
 + return deque . iterator ( ) ; 
 + } 
 + 
 + public int size ( ) 
 + { 
 + return deque . size ( ) ; 
 + } 
 + 
 + public void clear ( ) 
 + { 
 + deque . clear ( ) ; 
 + } 
 + 
 + public void add ( double o ) 
 + { 
 + if ( size = = deque . size ( ) ) 
 + { 
 + deque . remove ( ) ; 
 + } 
 + deque . add ( o ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / TimedStatsDeque . java b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java 
 new file mode 100644 
 index 0000000 . . 914c459 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / TimedStatsDeque . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . ArrayDeque ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + public class TimedStatsDeque extends AbstractStatsDeque 
 + { 
 + private final ArrayDeque < Tuple > deque ; 
 + private final long period ; 
 + 
 + public TimedStatsDeque ( long period ) 
 + { 
 + this . period = period ; 
 + deque = new ArrayDeque < Tuple > ( ) ; 
 + } 
 + 
 + private void purge ( ) 
 + { 
 + long now = System . currentTimeMillis ( ) ; 
 + while ( ! deque . isEmpty ( ) & & deque . peek ( ) . timestamp < now - period ) 
 + { 
 + deque . remove ( ) ; 
 + } 
 + } 
 + 
 + public Iterator < Double > iterator ( ) 
 + { 
 + purge ( ) ; 
 + / / I expect this method to be called relatively infrequently so inefficiency is ok . 
 + List < Double > L = new ArrayList < Double > ( deque . size ( ) ) ; 
 + for ( Tuple t : deque ) 
 + { 
 + L . add ( t . value ) ; 
 + } 
 + return L . iterator ( ) ; 
 + } 
 + 
 + public int size ( ) 
 + { 
 + purge ( ) ; 
 + return deque . size ( ) ; 
 + } 
 + 
 + public void add ( double o ) 
 + { 
 + purge ( ) ; 
 + deque . add ( new Tuple ( o , System . currentTimeMillis ( ) ) ) ; 
 + } 
 + 
 + public void clear ( ) 
 + { 
 + deque . clear ( ) ; 
 + } 
 + } 
 + 
 + class Tuple 
 + { 
 + public final double value ; 
 + public final long timestamp ; 
 + 
 + public Tuple ( double value , long timestamp ) 
 + { 
 + this . value = value ; 
 + this . timestamp = timestamp ; 
 + } 
 + } 
 \ No newline at end of file
