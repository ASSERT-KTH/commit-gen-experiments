BLEU SCORE: 0.5900468726392808

TEST MSG: Allow only DISTINCT queries with partition keys or static columns restrictions
GENERATED MSG: Allow only DISTINCT queries with partition keys restrictions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ed4c412 . . 3b4d473 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 6 <nl> + * Allow only DISTINCT queries with partition keys or static columns restrictions ( CASSANDRA - 11339 ) <nl> * LogAwareFileLister should only use OLD sstable files in current folder to determine disk consistency ( CASSANDRA - 11470 ) <nl> * Notify indexers of expired rows during compaction ( CASSANDRA - 11329 ) <nl> * Properly respond with ProtocolError when a v1 / v2 native protocol <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> index 797b8e4 . . 763a7be 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java <nl> @ @ - 396 , 6 + 396 , 15 @ @ public final class StatementRestrictions <nl> } <nl> <nl> / * * <nl> + * Checks if the restrictions contain any non - primary key restrictions <nl> + * @ return < code > true < / code > if the restrictions contain any non - primary key restrictions , < code > false < / code > otherwise . <nl> + * / <nl> + public boolean hasNonPrimaryKeyRestrictions ( ) <nl> + { <nl> + return ! nonPrimaryKeyRestrictions . isEmpty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns the partition key components that are not restricted . <nl> * @ return the partition key components that are not restricted . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> index 51d675b . . b4215ac 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java <nl> @ @ - 896 , 6 + 896 , 10 @ @ public class SelectStatement implements CQLStatement <nl> StatementRestrictions restrictions ) <nl> throws InvalidRequestException <nl> { <nl> + checkFalse ( restrictions . hasClusteringColumnsRestriction ( ) | | <nl> + ( restrictions . hasNonPrimaryKeyRestrictions ( ) & & ! restrictions . nonPKRestrictedColumns ( true ) . stream ( ) . allMatch ( ColumnDefinition : : isStatic ) ) , <nl> + " SELECT DISTINCT with WHERE clause only supports restriction by partition key and / or static columns . " ) ; <nl> + <nl> Collection < ColumnDefinition > requestedColumns = selection . getColumns ( ) ; <nl> for ( ColumnDefinition def : requestedColumns ) <nl> checkFalse ( ! def . isPartitionKey ( ) & & ! def . isStatic ( ) , <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> index a7eeeb8 . . 5c19e1b 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java <nl> @ @ - 1253 , 6 + 1253 , 78 @ @ public class SelectTest extends CQLTester <nl> Assert . assertEquals ( 9 , rows . length ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testSelectDistinctWithWhereClause ( ) throws Throwable { <nl> + createTable ( " CREATE TABLE % s ( k int , a int , b int , PRIMARY KEY ( k , a ) ) " ) ; <nl> + createIndex ( " CREATE INDEX ON % s ( b ) " ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + execute ( " INSERT INTO % s ( k , a , b ) VALUES ( ? , ? , ? ) " , i , i , i ) ; <nl> + execute ( " INSERT INTO % s ( k , a , b ) VALUES ( ? , ? , ? ) " , i , i * 10 , i * 10 ) ; <nl> + } <nl> + <nl> + String distinctQueryErrorMsg = " SELECT DISTINCT with WHERE clause only supports restriction by partition key and / or static columns . " ; <nl> + assertInvalidMessage ( distinctQueryErrorMsg , <nl> + " SELECT DISTINCT k FROM % s WHERE a > = 80 ALLOW FILTERING " ) ; <nl> + <nl> + assertInvalidMessage ( distinctQueryErrorMsg , <nl> + " SELECT DISTINCT k FROM % s WHERE k IN ( 1 , 2 , 3 ) AND a = 10 " ) ; <nl> + <nl> + assertInvalidMessage ( distinctQueryErrorMsg , <nl> + " SELECT DISTINCT k FROM % s WHERE b = 5 " ) ; <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT k FROM % s WHERE k = 1 " ) , <nl> + row ( 1 ) ) ; <nl> + assertRows ( execute ( " SELECT DISTINCT k FROM % s WHERE k IN ( 5 , 6 , 7 ) " ) , <nl> + row ( 5 ) , <nl> + row ( 6 ) , <nl> + row ( 7 ) ) ; <nl> + <nl> + / / With static columns <nl> + createTable ( " CREATE TABLE % s ( k int , a int , s int static , b int , PRIMARY KEY ( k , a ) ) " ) ; <nl> + createIndex ( " CREATE INDEX ON % s ( b ) " ) ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + execute ( " INSERT INTO % s ( k , a , b , s ) VALUES ( ? , ? , ? , ? ) " , i , i , i , i ) ; <nl> + execute ( " INSERT INTO % s ( k , a , b , s ) VALUES ( ? , ? , ? , ? ) " , i , i * 10 , i * 10 , i * 10 ) ; <nl> + } <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT s FROM % s WHERE k = 5 " ) , <nl> + row ( 50 ) ) ; <nl> + assertRows ( execute ( " SELECT DISTINCT s FROM % s WHERE k IN ( 5 , 6 , 7 ) " ) , <nl> + row ( 50 ) , <nl> + row ( 60 ) , <nl> + row ( 70 ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSelectDistinctWithWhereClauseOnStaticColumn ( ) throws Throwable <nl> + { <nl> + createTable ( " CREATE TABLE % s ( k int , a int , s int static , s1 int static , b int , PRIMARY KEY ( k , a ) ) " ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) <nl> + { <nl> + execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , i , i , i , i , i ) ; <nl> + execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , i , i * 10 , i * 10 , i * 10 , i * 10 ) ; <nl> + } <nl> + <nl> + execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , 2 , 10 , 10 , 10 , 10 ) ; <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , <nl> + row ( 9 , 90 , 90 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , <nl> + row ( 9 , 90 , 90 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 10 AND s1 = 10 ALLOW FILTERING " ) , <nl> + row ( 1 , 10 , 10 ) , <nl> + row ( 2 , 10 , 10 ) ) ; <nl> + <nl> + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE k = 1 AND s = 10 AND s1 = 10 ALLOW FILTERING " ) , <nl> + row ( 1 , 10 , 10 ) ) ; <nl> + } <nl> + <nl> / * * <nl> * Migrated from cql _ tests . py : TestCQL . bug _ 6327 _ test ( ) <nl> * /
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ed4c412 . . 3b4d473 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 6 
 + * Allow only DISTINCT queries with partition keys or static columns restrictions ( CASSANDRA - 11339 ) 
 * LogAwareFileLister should only use OLD sstable files in current folder to determine disk consistency ( CASSANDRA - 11470 ) 
 * Notify indexers of expired rows during compaction ( CASSANDRA - 11329 ) 
 * Properly respond with ProtocolError when a v1 / v2 native protocol 
 diff - - git a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 index 797b8e4 . . 763a7be 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 + + + b / src / java / org / apache / cassandra / cql3 / restrictions / StatementRestrictions . java 
 @ @ - 396 , 6 + 396 , 15 @ @ public final class StatementRestrictions 
 } 
 
 / * * 
 + * Checks if the restrictions contain any non - primary key restrictions 
 + * @ return < code > true < / code > if the restrictions contain any non - primary key restrictions , < code > false < / code > otherwise . 
 + * / 
 + public boolean hasNonPrimaryKeyRestrictions ( ) 
 + { 
 + return ! nonPrimaryKeyRestrictions . isEmpty ( ) ; 
 + } 
 + 
 + / * * 
 * Returns the partition key components that are not restricted . 
 * @ return the partition key components that are not restricted . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 index 51d675b . . b4215ac 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SelectStatement . java 
 @ @ - 896 , 6 + 896 , 10 @ @ public class SelectStatement implements CQLStatement 
 StatementRestrictions restrictions ) 
 throws InvalidRequestException 
 { 
 + checkFalse ( restrictions . hasClusteringColumnsRestriction ( ) | | 
 + ( restrictions . hasNonPrimaryKeyRestrictions ( ) & & ! restrictions . nonPKRestrictedColumns ( true ) . stream ( ) . allMatch ( ColumnDefinition : : isStatic ) ) , 
 + " SELECT DISTINCT with WHERE clause only supports restriction by partition key and / or static columns . " ) ; 
 + 
 Collection < ColumnDefinition > requestedColumns = selection . getColumns ( ) ; 
 for ( ColumnDefinition def : requestedColumns ) 
 checkFalse ( ! def . isPartitionKey ( ) & & ! def . isStatic ( ) , 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 index a7eeeb8 . . 5c19e1b 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / SelectTest . java 
 @ @ - 1253 , 6 + 1253 , 78 @ @ public class SelectTest extends CQLTester 
 Assert . assertEquals ( 9 , rows . length ) ; 
 } 
 
 + @ Test 
 + public void testSelectDistinctWithWhereClause ( ) throws Throwable { 
 + createTable ( " CREATE TABLE % s ( k int , a int , b int , PRIMARY KEY ( k , a ) ) " ) ; 
 + createIndex ( " CREATE INDEX ON % s ( b ) " ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + execute ( " INSERT INTO % s ( k , a , b ) VALUES ( ? , ? , ? ) " , i , i , i ) ; 
 + execute ( " INSERT INTO % s ( k , a , b ) VALUES ( ? , ? , ? ) " , i , i * 10 , i * 10 ) ; 
 + } 
 + 
 + String distinctQueryErrorMsg = " SELECT DISTINCT with WHERE clause only supports restriction by partition key and / or static columns . " ; 
 + assertInvalidMessage ( distinctQueryErrorMsg , 
 + " SELECT DISTINCT k FROM % s WHERE a > = 80 ALLOW FILTERING " ) ; 
 + 
 + assertInvalidMessage ( distinctQueryErrorMsg , 
 + " SELECT DISTINCT k FROM % s WHERE k IN ( 1 , 2 , 3 ) AND a = 10 " ) ; 
 + 
 + assertInvalidMessage ( distinctQueryErrorMsg , 
 + " SELECT DISTINCT k FROM % s WHERE b = 5 " ) ; 
 + 
 + assertRows ( execute ( " SELECT DISTINCT k FROM % s WHERE k = 1 " ) , 
 + row ( 1 ) ) ; 
 + assertRows ( execute ( " SELECT DISTINCT k FROM % s WHERE k IN ( 5 , 6 , 7 ) " ) , 
 + row ( 5 ) , 
 + row ( 6 ) , 
 + row ( 7 ) ) ; 
 + 
 + / / With static columns 
 + createTable ( " CREATE TABLE % s ( k int , a int , s int static , b int , PRIMARY KEY ( k , a ) ) " ) ; 
 + createIndex ( " CREATE INDEX ON % s ( b ) " ) ; 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + execute ( " INSERT INTO % s ( k , a , b , s ) VALUES ( ? , ? , ? , ? ) " , i , i , i , i ) ; 
 + execute ( " INSERT INTO % s ( k , a , b , s ) VALUES ( ? , ? , ? , ? ) " , i , i * 10 , i * 10 , i * 10 ) ; 
 + } 
 + 
 + assertRows ( execute ( " SELECT DISTINCT s FROM % s WHERE k = 5 " ) , 
 + row ( 50 ) ) ; 
 + assertRows ( execute ( " SELECT DISTINCT s FROM % s WHERE k IN ( 5 , 6 , 7 ) " ) , 
 + row ( 50 ) , 
 + row ( 60 ) , 
 + row ( 70 ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSelectDistinctWithWhereClauseOnStaticColumn ( ) throws Throwable 
 + { 
 + createTable ( " CREATE TABLE % s ( k int , a int , s int static , s1 int static , b int , PRIMARY KEY ( k , a ) ) " ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) 
 + { 
 + execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , i , i , i , i , i ) ; 
 + execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , i , i * 10 , i * 10 , i * 10 , i * 10 ) ; 
 + } 
 + 
 + execute ( " INSERT INTO % s ( k , a , b , s , s1 ) VALUES ( ? , ? , ? , ? , ? ) " , 2 , 10 , 10 , 10 , 10 ) ; 
 + 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , 
 + row ( 9 , 90 , 90 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 90 AND s1 = 90 ALLOW FILTERING " ) , 
 + row ( 9 , 90 , 90 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE s = 10 AND s1 = 10 ALLOW FILTERING " ) , 
 + row ( 1 , 10 , 10 ) , 
 + row ( 2 , 10 , 10 ) ) ; 
 + 
 + assertRows ( execute ( " SELECT DISTINCT k , s , s1 FROM % s WHERE k = 1 AND s = 10 AND s1 = 10 ALLOW FILTERING " ) , 
 + row ( 1 , 10 , 10 ) ) ; 
 + } 
 + 
 / * * 
 * Migrated from cql _ tests . py : TestCQL . bug _ 6327 _ test ( ) 
 * /

NEAREST DIFF:
ELIMINATEDSENTENCE
