BLEU SCORE: 0.02931251013275449

TEST MSG: Check checksum before decompressing data
GENERATED MSG: Simplify CompressedRandomAccessReader to work around JDK FD bug

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0c25388 . . aeb3009 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 21 <nl> + * Check checksum before decompressing data ( CASSANDRA - 14284 ) <nl> * CVE - 2017 - 5929 Security vulnerability in Logback warning in NEWS . txt ( CASSANDRA - 14183 ) <nl> <nl> 2 . 1 . 20 <nl> diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> index 184db9c . . fe90cc9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java <nl> @ @ - 29 , 7 + 29 , 6 @ @ import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . cassandra . io . util . CompressedPoolingSegmentedFile ; <nl> import org . apache . cassandra . io . util . PoolingSegmentedFile ; <nl> import org . apache . cassandra . io . util . RandomAccessReader ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * CRAR extends RAR to transparently uncompress blocks from the file into RAR . buffer . Most of the RAR <nl> @ @ - 107 , 6 + 106 , 11 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> / / technically flip ( ) is unnecessary since all the remaining work uses the raw array , but if that changes <nl> / / in the future this will save a lot of hair - pulling <nl> compressed . flip ( ) ; <nl> + <nl> + / / If the checksum is on compressed data we want to check it before uncompressing the data <nl> + if ( metadata . hasPostCompressionAdlerChecksums ) <nl> + checkChecksumIfNeeded ( chunk , compressed . array ( ) , chunk . length ) ; <nl> + <nl> try <nl> { <nl> validBufferBytes = metadata . compressor ( ) . uncompress ( compressed . array ( ) , 0 , chunk . length , buffer , 0 ) ; <nl> @ @ - 116 , 24 + 120 , 9 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> throw new CorruptBlockException ( getPath ( ) , chunk , e ) ; <nl> } <nl> <nl> - if ( metadata . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> - { <nl> - <nl> - if ( metadata . hasPostCompressionAdlerChecksums ) <nl> - { <nl> - checksum . update ( compressed . array ( ) , 0 , chunk . length ) ; <nl> - } <nl> - else <nl> - { <nl> - checksum . update ( buffer , 0 , validBufferBytes ) ; <nl> - } <nl> + if ( ! metadata . hasPostCompressionAdlerChecksums ) <nl> + checkChecksumIfNeeded ( chunk , buffer , validBufferBytes ) ; <nl> <nl> - if ( checksum ( chunk ) ! = ( int ) checksum . getValue ( ) ) <nl> - throw new CorruptBlockException ( getPath ( ) , chunk ) ; <nl> - <nl> - / / reset checksum object back to the original ( blank ) state <nl> - checksum . reset ( ) ; <nl> - } <nl> <nl> / / buffer offset is always aligned <nl> bufferOffset = current & ~ ( buffer . length - 1 ) ; <nl> @ @ - 143 , 6 + 132 , 18 @ @ public class CompressedRandomAccessReader extends RandomAccessReader <nl> validBufferBytes = ( int ) ( length ( ) - bufferOffset ) ; <nl> } <nl> <nl> + private void checkChecksumIfNeeded ( CompressionMetadata . Chunk chunk , byte [ ] bytes , int length ) throws IOException <nl> + { <nl> + if ( metadata . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) <nl> + { <nl> + checksum . update ( bytes , 0 , length ) ; <nl> + if ( checksum ( chunk ) ! = ( int ) checksum . getValue ( ) ) <nl> + throw new CorruptBlockException ( getPath ( ) , chunk ) ; <nl> + / / reset checksum object back to the original ( blank ) state <nl> + checksum . reset ( ) ; <nl> + } <nl> + } <nl> + <nl> private int checksum ( CompressionMetadata . Chunk chunk ) throws IOException <nl> { <nl> assert channel . position ( ) = = chunk . offset + chunk . length ;
NEAREST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index f2be64a . . 364bdd7 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 623 , 6 + 623 , 7 @ @ server _ encryption _ options : <nl> # algorithm : SunX509 <nl> # store _ type : JKS <nl> # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> + # require _ client _ auth : false <nl> <nl> # enable or disable client / server encryption . <nl> client _ encryption _ options : <nl> @ @ - 634 , 6 + 635 , 7 @ @ client _ encryption _ options : <nl> # algorithm : SunX509 <nl> # store _ type : JKS <nl> # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] <nl> + # require _ client _ auth : false <nl> <nl> # internode _ compression controls whether traffic between nodes is <nl> # compressed . <nl> diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> index b8a5a91 . . fe07f68 100644 <nl> - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ public abstract class EncryptionOptions <nl> public String protocol = " TLS " ; <nl> public String algorithm = " SunX509 " ; <nl> public String store _ type = " JKS " ; <nl> + public Boolean require _ client _ auth = false ; <nl> <nl> public static class ClientEncryptionOptions extends EncryptionOptions <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> index 5e64c43 . . da8a3f4 100644 <nl> - - - a / src / java / org / apache / cassandra / security / SSLFactory . java <nl> + + + b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> @ @ - 55 , 6 + 55 , 7 @ @ public final class SSLFactory <nl> serverSocket . setReuseAddress ( true ) ; <nl> String [ ] suits = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> serverSocket . setEnabledCipherSuites ( suits ) ; <nl> + serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; <nl> serverSocket . bind ( new InetSocketAddress ( address , port ) , 100 ) ; <nl> return serverSocket ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> index f6ab1f7 . . 0a456b9 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java <nl> @ @ - 249 , 6 + 249 , 7 @ @ public class CustomTThreadPoolServer extends TServer <nl> logger . info ( " enabling encrypted thrift connections between client and server " ) ; <nl> TSSLTransportParameters params = new TSSLTransportParameters ( clientEnc . protocol , clientEnc . cipher _ suites ) ; <nl> params . setKeyStore ( clientEnc . keystore , clientEnc . keystore _ password ) ; <nl> + params . requireClientAuth ( clientEnc . require _ client _ auth ) ; <nl> TServerSocket sslServer = TSSLTransportFactory . getServerSocket ( addr . getPort ( ) , 0 , addr . getAddress ( ) , params ) ; <nl> serverTransport = new TCustomServerSocket ( sslServer . getServerSocket ( ) , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 0b43a4a . . e999128 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 249 , 7 + 249 , 8 @ @ public class Server implements CassandraDaemon . Server <nl> SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; <nl> sslEngine . setUseClientMode ( false ) ; <nl> sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; <nl> - <nl> + sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; <nl> + <nl> SslHandler sslHandler = new SslHandler ( sslEngine ) ; <nl> sslHandler . setIssueHandshake ( true ) ; <nl> ChannelPipeline pipeline = super . getPipeline ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0c25388 . . aeb3009 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 21 
 + * Check checksum before decompressing data ( CASSANDRA - 14284 ) 
 * CVE - 2017 - 5929 Security vulnerability in Logback warning in NEWS . txt ( CASSANDRA - 14183 ) 
 
 2 . 1 . 20 
 diff - - git a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 index 184db9c . . fe90cc9 100644 
 - - - a / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / compress / CompressedRandomAccessReader . java 
 @ @ - 29 , 7 + 29 , 6 @ @ import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . cassandra . io . util . CompressedPoolingSegmentedFile ; 
 import org . apache . cassandra . io . util . PoolingSegmentedFile ; 
 import org . apache . cassandra . io . util . RandomAccessReader ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * CRAR extends RAR to transparently uncompress blocks from the file into RAR . buffer . Most of the RAR 
 @ @ - 107 , 6 + 106 , 11 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 / / technically flip ( ) is unnecessary since all the remaining work uses the raw array , but if that changes 
 / / in the future this will save a lot of hair - pulling 
 compressed . flip ( ) ; 
 + 
 + / / If the checksum is on compressed data we want to check it before uncompressing the data 
 + if ( metadata . hasPostCompressionAdlerChecksums ) 
 + checkChecksumIfNeeded ( chunk , compressed . array ( ) , chunk . length ) ; 
 + 
 try 
 { 
 validBufferBytes = metadata . compressor ( ) . uncompress ( compressed . array ( ) , 0 , chunk . length , buffer , 0 ) ; 
 @ @ - 116 , 24 + 120 , 9 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 throw new CorruptBlockException ( getPath ( ) , chunk , e ) ; 
 } 
 
 - if ( metadata . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 - { 
 - 
 - if ( metadata . hasPostCompressionAdlerChecksums ) 
 - { 
 - checksum . update ( compressed . array ( ) , 0 , chunk . length ) ; 
 - } 
 - else 
 - { 
 - checksum . update ( buffer , 0 , validBufferBytes ) ; 
 - } 
 + if ( ! metadata . hasPostCompressionAdlerChecksums ) 
 + checkChecksumIfNeeded ( chunk , buffer , validBufferBytes ) ; 
 
 - if ( checksum ( chunk ) ! = ( int ) checksum . getValue ( ) ) 
 - throw new CorruptBlockException ( getPath ( ) , chunk ) ; 
 - 
 - / / reset checksum object back to the original ( blank ) state 
 - checksum . reset ( ) ; 
 - } 
 
 / / buffer offset is always aligned 
 bufferOffset = current & ~ ( buffer . length - 1 ) ; 
 @ @ - 143 , 6 + 132 , 18 @ @ public class CompressedRandomAccessReader extends RandomAccessReader 
 validBufferBytes = ( int ) ( length ( ) - bufferOffset ) ; 
 } 
 
 + private void checkChecksumIfNeeded ( CompressionMetadata . Chunk chunk , byte [ ] bytes , int length ) throws IOException 
 + { 
 + if ( metadata . parameters . getCrcCheckChance ( ) > ThreadLocalRandom . current ( ) . nextDouble ( ) ) 
 + { 
 + checksum . update ( bytes , 0 , length ) ; 
 + if ( checksum ( chunk ) ! = ( int ) checksum . getValue ( ) ) 
 + throw new CorruptBlockException ( getPath ( ) , chunk ) ; 
 + / / reset checksum object back to the original ( blank ) state 
 + checksum . reset ( ) ; 
 + } 
 + } 
 + 
 private int checksum ( CompressionMetadata . Chunk chunk ) throws IOException 
 { 
 assert channel . position ( ) = = chunk . offset + chunk . length ;

NEAREST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index f2be64a . . 364bdd7 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 623 , 6 + 623 , 7 @ @ server _ encryption _ options : 
 # algorithm : SunX509 
 # store _ type : JKS 
 # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 + # require _ client _ auth : false 
 
 # enable or disable client / server encryption . 
 client _ encryption _ options : 
 @ @ - 634 , 6 + 635 , 7 @ @ client _ encryption _ options : 
 # algorithm : SunX509 
 # store _ type : JKS 
 # cipher _ suites : [ TLS _ RSA _ WITH _ AES _ 128 _ CBC _ SHA , TLS _ RSA _ WITH _ AES _ 256 _ CBC _ SHA ] 
 + # require _ client _ auth : false 
 
 # internode _ compression controls whether traffic between nodes is 
 # compressed . 
 diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 index b8a5a91 . . fe07f68 100644 
 - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 @ @ - 27 , 6 + 27 , 7 @ @ public abstract class EncryptionOptions 
 public String protocol = " TLS " ; 
 public String algorithm = " SunX509 " ; 
 public String store _ type = " JKS " ; 
 + public Boolean require _ client _ auth = false ; 
 
 public static class ClientEncryptionOptions extends EncryptionOptions 
 { 
 diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java 
 index 5e64c43 . . da8a3f4 100644 
 - - - a / src / java / org / apache / cassandra / security / SSLFactory . java 
 + + + b / src / java / org / apache / cassandra / security / SSLFactory . java 
 @ @ - 55 , 6 + 55 , 7 @ @ public final class SSLFactory 
 serverSocket . setReuseAddress ( true ) ; 
 String [ ] suits = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 serverSocket . setEnabledCipherSuites ( suits ) ; 
 + serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; 
 serverSocket . bind ( new InetSocketAddress ( address , port ) , 100 ) ; 
 return serverSocket ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 index f6ab1f7 . . 0a456b9 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CustomTThreadPoolServer . java 
 @ @ - 249 , 6 + 249 , 7 @ @ public class CustomTThreadPoolServer extends TServer 
 logger . info ( " enabling encrypted thrift connections between client and server " ) ; 
 TSSLTransportParameters params = new TSSLTransportParameters ( clientEnc . protocol , clientEnc . cipher _ suites ) ; 
 params . setKeyStore ( clientEnc . keystore , clientEnc . keystore _ password ) ; 
 + params . requireClientAuth ( clientEnc . require _ client _ auth ) ; 
 TServerSocket sslServer = TSSLTransportFactory . getServerSocket ( addr . getPort ( ) , 0 , addr . getAddress ( ) , params ) ; 
 serverTransport = new TCustomServerSocket ( sslServer . getServerSocket ( ) , args . keepAlive , args . sendBufferSize , args . recvBufferSize ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 0b43a4a . . e999128 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 249 , 7 + 249 , 8 @ @ public class Server implements CassandraDaemon . Server 
 SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; 
 sslEngine . setUseClientMode ( false ) ; 
 sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; 
 - 
 + sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; 
 + 
 SslHandler sslHandler = new SslHandler ( sslEngine ) ; 
 sslHandler . setIssueHandshake ( true ) ; 
 ChannelPipeline pipeline = super . getPipeline ( ) ;
