BLEU SCORE: 0.020980574531482755

TEST MSG: Config class uses boxed types but DD exposes primitive types
GENERATED MSG: Refactor auth caches and add credentials cache

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d86a36c . . 08de041 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Config class uses boxed types but DD exposes primitive types ( CASSANDRA - 12199 ) <nl> * Add pre - and post - shutdown hooks to Storage Service ( CASSANDRA - 12461 ) <nl> * Add hint delivery metrics ( CASSANDRA - 12693 ) <nl> * Remove IndexInfo cache from FileIndexInfoRetriever ( CASSANDRA - 12731 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java <nl> index 35a17a5 . . b1318d9 100644 <nl> - - - a / src / java / org / apache / cassandra / config / Config . java <nl> + + + b / src / java / org / apache / cassandra / config / Config . java <nl> @ @ - 63 , 10 + 63 , 10 @ @ public class Config <nl> / * Hashing strategy Random or OPHF * / <nl> public String partitioner ; <nl> <nl> - public Boolean auto _ bootstrap = true ; <nl> + public boolean auto _ bootstrap = true ; <nl> public volatile boolean hinted _ handoff _ enabled = true ; <nl> public Set < String > hinted _ handoff _ disabled _ datacenters = Sets . newConcurrentHashSet ( ) ; <nl> - public volatile Integer max _ hint _ window _ in _ ms = 3 * 3600 * 1000 ; / / three hours <nl> + public volatile int max _ hint _ window _ in _ ms = 3 * 3600 * 1000 ; / / three hours <nl> public String hints _ directory ; <nl> <nl> public ParameterizedClass seed _ provider ; <nl> @ @ - 77 , 29 + 77 , 29 @ @ public class Config <nl> <nl> / * initial token in the ring * / <nl> public String initial _ token ; <nl> - public Integer num _ tokens = 1 ; <nl> + public int num _ tokens = 1 ; <nl> / * * Triggers automatic allocation of tokens if set , using the replication strategy of the referenced keyspace * / <nl> public String allocate _ tokens _ for _ keyspace = null ; <nl> <nl> - public volatile Long request _ timeout _ in _ ms = 10000L ; <nl> + public volatile long request _ timeout _ in _ ms = 10000L ; <nl> <nl> - public volatile Long read _ request _ timeout _ in _ ms = 5000L ; <nl> + public volatile long read _ request _ timeout _ in _ ms = 5000L ; <nl> <nl> - public volatile Long range _ request _ timeout _ in _ ms = 10000L ; <nl> + public volatile long range _ request _ timeout _ in _ ms = 10000L ; <nl> <nl> - public volatile Long write _ request _ timeout _ in _ ms = 2000L ; <nl> + public volatile long write _ request _ timeout _ in _ ms = 2000L ; <nl> <nl> - public volatile Long counter _ write _ request _ timeout _ in _ ms = 5000L ; <nl> + public volatile long counter _ write _ request _ timeout _ in _ ms = 5000L ; <nl> <nl> - public volatile Long cas _ contention _ timeout _ in _ ms = 1000L ; <nl> + public volatile long cas _ contention _ timeout _ in _ ms = 1000L ; <nl> <nl> - public volatile Long truncate _ request _ timeout _ in _ ms = 60000L ; <nl> + public volatile long truncate _ request _ timeout _ in _ ms = 60000L ; <nl> <nl> / * * <nl> * @ deprecated use { @ link this # streaming _ keep _ alive _ period _ in _ secs } instead <nl> * / <nl> @ Deprecated <nl> - public Integer streaming _ socket _ timeout _ in _ ms = 86400000 ; / / 24 hours <nl> + public int streaming _ socket _ timeout _ in _ ms = 86400000 ; / / 24 hours <nl> <nl> public Integer streaming _ keep _ alive _ period _ in _ secs = 300 ; / / 5 minutes <nl> <nl> @ @ - 107 , 88 + 107 , 88 @ @ public class Config <nl> <nl> public volatile long slow _ query _ log _ timeout _ in _ ms = 500L ; <nl> <nl> - public volatile Double phi _ convict _ threshold = 8 . 0 ; <nl> + public volatile double phi _ convict _ threshold = 8 . 0 ; <nl> <nl> - public Integer concurrent _ reads = 32 ; <nl> - public Integer concurrent _ writes = 32 ; <nl> - public Integer concurrent _ counter _ writes = 32 ; <nl> - public Integer concurrent _ materialized _ view _ writes = 32 ; <nl> + public int concurrent _ reads = 32 ; <nl> + public int concurrent _ writes = 32 ; <nl> + public int concurrent _ counter _ writes = 32 ; <nl> + public int concurrent _ materialized _ view _ writes = 32 ; <nl> <nl> @ Deprecated <nl> public Integer concurrent _ replicates = null ; <nl> <nl> - public Integer memtable _ flush _ writers = null ; <nl> + public int memtable _ flush _ writers = 0 ; <nl> public Integer memtable _ heap _ space _ in _ mb ; <nl> public Integer memtable _ offheap _ space _ in _ mb ; <nl> public Float memtable _ cleanup _ threshold = null ; <nl> <nl> - public Integer storage _ port = 7000 ; <nl> - public Integer ssl _ storage _ port = 7001 ; <nl> + public int storage _ port = 7000 ; <nl> + public int ssl _ storage _ port = 7001 ; <nl> public String listen _ address ; <nl> public String listen _ interface ; <nl> - public Boolean listen _ interface _ prefer _ ipv6 = false ; <nl> + public boolean listen _ interface _ prefer _ ipv6 = false ; <nl> public String broadcast _ address ; <nl> - public Boolean listen _ on _ broadcast _ address = false ; <nl> + public boolean listen _ on _ broadcast _ address = false ; <nl> public String internode _ authenticator ; <nl> <nl> / * intentionally left set to true , despite being set to false in stock 2 . 2 cassandra . yaml <nl> we don ' t want to surprise Thrift users who have the setting blank in the yaml during 2 . 1 - > 2 . 2 upgrade * / <nl> - public Boolean start _ rpc = true ; <nl> + public boolean start _ rpc = true ; <nl> public String rpc _ address ; <nl> public String rpc _ interface ; <nl> - public Boolean rpc _ interface _ prefer _ ipv6 = false ; <nl> + public boolean rpc _ interface _ prefer _ ipv6 = false ; <nl> public String broadcast _ rpc _ address ; <nl> - public Integer rpc _ port = 9160 ; <nl> - public Integer rpc _ listen _ backlog = 50 ; <nl> + public int rpc _ port = 9160 ; <nl> + public int rpc _ listen _ backlog = 50 ; <nl> public String rpc _ server _ type = " sync " ; <nl> - public Boolean rpc _ keepalive = true ; <nl> - public Integer rpc _ min _ threads = 16 ; <nl> - public Integer rpc _ max _ threads = Integer . MAX _ VALUE ; <nl> + public boolean rpc _ keepalive = true ; <nl> + public int rpc _ min _ threads = 16 ; <nl> + public int rpc _ max _ threads = Integer . MAX _ VALUE ; <nl> public Integer rpc _ send _ buff _ size _ in _ bytes ; <nl> public Integer rpc _ recv _ buff _ size _ in _ bytes ; <nl> - public Integer internode _ send _ buff _ size _ in _ bytes ; <nl> - public Integer internode _ recv _ buff _ size _ in _ bytes ; <nl> + public int internode _ send _ buff _ size _ in _ bytes = 0 ; <nl> + public int internode _ recv _ buff _ size _ in _ bytes = 0 ; <nl> <nl> - public Boolean start _ native _ transport = false ; <nl> - public Integer native _ transport _ port = 9042 ; <nl> + public boolean start _ native _ transport = false ; <nl> + public int native _ transport _ port = 9042 ; <nl> public Integer native _ transport _ port _ ssl = null ; <nl> - public Integer native _ transport _ max _ threads = 128 ; <nl> - public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; <nl> - public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> - public volatile Long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; <nl> + public int native _ transport _ max _ threads = 128 ; <nl> + public int native _ transport _ max _ frame _ size _ in _ mb = 256 ; <nl> + public volatile long native _ transport _ max _ concurrent _ connections = - 1L ; <nl> + public volatile long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; <nl> <nl> @ Deprecated <nl> - public Integer thrift _ max _ message _ length _ in _ mb = 16 ; <nl> + public int thrift _ max _ message _ length _ in _ mb = 16 ; <nl> / * * <nl> * Max size of values in SSTables , in MegaBytes . <nl> * Default is the same as the native protocol frame limit : 256Mb . <nl> * See AbstractType for how it is used . <nl> * / <nl> - public Integer max _ value _ size _ in _ mb = 256 ; <nl> + public int max _ value _ size _ in _ mb = 256 ; <nl> <nl> - public Integer thrift _ framed _ transport _ size _ in _ mb = 15 ; <nl> - public Boolean snapshot _ before _ compaction = false ; <nl> - public Boolean auto _ snapshot = true ; <nl> + public int thrift _ framed _ transport _ size _ in _ mb = 15 ; <nl> + public boolean snapshot _ before _ compaction = false ; <nl> + public boolean auto _ snapshot = true ; <nl> <nl> / * if the size of columns or super - columns are more than this , indexing will kick in * / <nl> - public Integer column _ index _ size _ in _ kb = 64 ; <nl> - public Integer column _ index _ cache _ size _ in _ kb = 2 ; <nl> + public int column _ index _ size _ in _ kb = 64 ; <nl> + public int column _ index _ cache _ size _ in _ kb = 2 ; <nl> public volatile int batch _ size _ warn _ threshold _ in _ kb = 5 ; <nl> public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; <nl> public Integer unlogged _ batch _ across _ partitions _ warn _ threshold = 10 ; <nl> public volatile Integer concurrent _ compactors ; <nl> - public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; <nl> - public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; <nl> - public Integer min _ free _ space _ per _ drive _ in _ mb = 50 ; <nl> + public volatile int compaction _ throughput _ mb _ per _ sec = 16 ; <nl> + public volatile int compaction _ large _ partition _ warning _ threshold _ mb = 100 ; <nl> + public int min _ free _ space _ per _ drive _ in _ mb = 50 ; <nl> <nl> / * * <nl> * @ deprecated retry support removed on CASSANDRA - 10992 <nl> * / <nl> @ Deprecated <nl> - public Integer max _ streaming _ retries = 3 ; <nl> + public int max _ streaming _ retries = 3 ; <nl> <nl> - public volatile Integer stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; <nl> - public volatile Integer inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; <nl> + public volatile int stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; <nl> + public volatile int inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; <nl> <nl> public String [ ] data _ file _ directories = new String [ 0 ] ; <nl> <nl> @ @ - 198 , 8 + 198 , 8 @ @ public class Config <nl> public String commitlog _ directory ; <nl> public Integer commitlog _ total _ space _ in _ mb ; <nl> public CommitLogSync commitlog _ sync ; <nl> - public Double commitlog _ sync _ batch _ window _ in _ ms ; <nl> - public Integer commitlog _ sync _ period _ in _ ms ; <nl> + public double commitlog _ sync _ batch _ window _ in _ ms = Double . NaN ; <nl> + public int commitlog _ sync _ period _ in _ ms ; <nl> public int commitlog _ segment _ size _ in _ mb = 32 ; <nl> public ParameterizedClass commitlog _ compression ; <nl> public int commitlog _ max _ compression _ buffers _ in _ pool = 3 ; <nl> @ @ - 208 , 19 + 208 , 19 @ @ public class Config <nl> public Integer max _ mutation _ size _ in _ kb ; <nl> <nl> / / Change - data - capture logs <nl> - public Boolean cdc _ enabled = false ; <nl> + public boolean cdc _ enabled = false ; <nl> public String cdc _ raw _ directory ; <nl> - public Integer cdc _ total _ space _ in _ mb ; <nl> - public Integer cdc _ free _ space _ check _ interval _ ms = 250 ; <nl> + public int cdc _ total _ space _ in _ mb = 0 ; <nl> + public int cdc _ free _ space _ check _ interval _ ms = 250 ; <nl> <nl> @ Deprecated <nl> public int commitlog _ periodic _ queue _ size = - 1 ; <nl> <nl> public String endpoint _ snitch ; <nl> - public Boolean dynamic _ snitch = true ; <nl> - public volatile Integer dynamic _ snitch _ update _ interval _ in _ ms = 100 ; <nl> - public volatile Integer dynamic _ snitch _ reset _ interval _ in _ ms = 600000 ; <nl> - public volatile Double dynamic _ snitch _ badness _ threshold = 0 . 1 ; <nl> + public boolean dynamic _ snitch = true ; <nl> + public int dynamic _ snitch _ update _ interval _ in _ ms = 100 ; <nl> + public int dynamic _ snitch _ reset _ interval _ in _ ms = 600000 ; <nl> + public double dynamic _ snitch _ badness _ threshold = 0 . 1 ; <nl> <nl> public String request _ scheduler ; <nl> public RequestSchedulerId request _ scheduler _ id ; <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 36def79 . . 5041186 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 120 , 6 + 120 , 11 @ @ public class DatabaseDescriptor <nl> private static boolean toolInitialized ; <nl> private static boolean daemonInitialized ; <nl> <nl> + private static final int searchConcurrencyFactor = Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " search _ concurrency _ factor " , " 1 " ) ) ; <nl> + <nl> + private static final boolean disableSTCSInL0 = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " disable _ stcs _ in _ l0 " ) ; <nl> + private static final boolean unsafeSystem = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " unsafesystem " ) ; <nl> + <nl> public static void daemonInitialization ( ) throws ConfigurationException <nl> { <nl> if ( toolInitialized ) <nl> @ @ - 249 , 7 + 254 , 7 @ @ public class DatabaseDescriptor <nl> @ VisibleForTesting <nl> public static Config loadConfig ( ) throws ConfigurationException <nl> { <nl> - String loaderClass = System . getProperty ( " cassandra . config . loader " ) ; <nl> + String loaderClass = System . getProperty ( Config . PROPERTY _ PREFIX + " config . loader " ) ; <nl> ConfigurationLoader loader = loaderClass = = null <nl> ? new YamlConfigurationLoader ( ) <nl> : FBUtilities . < ConfigurationLoader > construct ( loaderClass , " configuration loading " ) ; <nl> @ @ - 330 , 11 + 335 , 11 @ @ public class DatabaseDescriptor <nl> <nl> if ( conf . commitlog _ sync = = Config . CommitLogSync . batch ) <nl> { <nl> - if ( conf . commitlog _ sync _ batch _ window _ in _ ms = = null ) <nl> + if ( Double . isNaN ( conf . commitlog _ sync _ batch _ window _ in _ ms ) | | conf . commitlog _ sync _ batch _ window _ in _ ms < = 0d ) <nl> { <nl> - throw new ConfigurationException ( " Missing value for commitlog _ sync _ batch _ window _ in _ ms : Double expected . " , false ) ; <nl> + throw new ConfigurationException ( " Missing value for commitlog _ sync _ batch _ window _ in _ ms : positive double value expected . " , false ) ; <nl> } <nl> - else if ( conf . commitlog _ sync _ period _ in _ ms ! = null ) <nl> + else if ( conf . commitlog _ sync _ period _ in _ ms ! = 0 ) <nl> { <nl> throw new ConfigurationException ( " Batch sync specified , but commitlog _ sync _ period _ in _ ms found . Only specify commitlog _ sync _ batch _ window _ in _ ms when using batch sync " , false ) ; <nl> } <nl> @ @ - 342 , 11 + 347 , 11 @ @ public class DatabaseDescriptor <nl> } <nl> else <nl> { <nl> - if ( conf . commitlog _ sync _ period _ in _ ms = = null ) <nl> + if ( conf . commitlog _ sync _ period _ in _ ms < = 0 ) <nl> { <nl> - throw new ConfigurationException ( " Missing value for commitlog _ sync _ period _ in _ ms : Integer expected " , false ) ; <nl> + throw new ConfigurationException ( " Missing value for commitlog _ sync _ period _ in _ ms : positive integer expected " , false ) ; <nl> } <nl> - else if ( conf . commitlog _ sync _ batch _ window _ in _ ms ! = null ) <nl> + else if ( ! Double . isNaN ( conf . commitlog _ sync _ batch _ window _ in _ ms ) ) <nl> { <nl> throw new ConfigurationException ( " commitlog _ sync _ period _ in _ ms specified , but commitlog _ sync _ batch _ window _ in _ ms found . Only specify commitlog _ sync _ period _ in _ ms when using periodic sync . " , false ) ; <nl> } <nl> @ @ - 377 , 11 + 382 , 6 @ @ public class DatabaseDescriptor <nl> throw new ConfigurationException ( " gc _ warn _ threshold _ in _ ms must be a positive integer " ) ; <nl> } <nl> <nl> - if ( conf . max _ hint _ window _ in _ ms = = null ) <nl> - { <nl> - throw new ConfigurationException ( " max _ hint _ window _ in _ ms cannot be set to null " , false ) ; <nl> - } <nl> - <nl> / * phi convict threshold for FailureDetector * / <nl> if ( conf . phi _ convict _ threshold < 5 | | conf . phi _ convict _ threshold > 16 ) <nl> { <nl> @ @ - 389 , 17 + 389 , 17 @ @ public class DatabaseDescriptor <nl> } <nl> <nl> / * Thread per pool * / <nl> - if ( conf . concurrent _ reads ! = null & & conf . concurrent _ reads < 2 ) <nl> + if ( conf . concurrent _ reads < 2 ) <nl> { <nl> throw new ConfigurationException ( " concurrent _ reads must be at least 2 , but was " + conf . concurrent _ reads , false ) ; <nl> } <nl> <nl> - if ( conf . concurrent _ writes ! = null & & conf . concurrent _ writes < 2 ) <nl> + if ( conf . concurrent _ writes < 2 ) <nl> { <nl> throw new ConfigurationException ( " concurrent _ writes must be at least 2 , but was " + conf . concurrent _ writes , false ) ; <nl> } <nl> <nl> - if ( conf . concurrent _ counter _ writes ! = null & & conf . concurrent _ counter _ writes < 2 ) <nl> + if ( conf . concurrent _ counter _ writes < 2 ) <nl> throw new ConfigurationException ( " concurrent _ counter _ writes must be at least 2 , but was " + conf . concurrent _ counter _ writes , false ) ; <nl> <nl> if ( conf . concurrent _ replicates ! = null ) <nl> @ @ - 433 , 26 + 433 , 17 @ @ public class DatabaseDescriptor <nl> / / use - Dcassandra . storagedir ( set in cassandra - env . sh ) as the parent dir for data / , commitlog / , and saved _ caches / <nl> if ( conf . commitlog _ directory = = null ) <nl> { <nl> - conf . commitlog _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; <nl> - if ( conf . commitlog _ directory = = null ) <nl> - throw new ConfigurationException ( " commitlog _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; <nl> - conf . commitlog _ directory + = File . separator + " commitlog " ; <nl> + conf . commitlog _ directory = storagedirFor ( " commitlog " ) ; <nl> } <nl> <nl> if ( conf . hints _ directory = = null ) <nl> { <nl> - conf . hints _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; <nl> - if ( conf . hints _ directory = = null ) <nl> - throw new ConfigurationException ( " hints _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; <nl> - conf . hints _ directory + = File . separator + " hints " ; <nl> + conf . hints _ directory = storagedirFor ( " hints " ) ; <nl> } <nl> <nl> if ( conf . cdc _ raw _ directory = = null ) <nl> { <nl> - conf . cdc _ raw _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; <nl> - if ( conf . cdc _ raw _ directory = = null ) <nl> - throw new ConfigurationException ( " cdc _ raw _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; <nl> - conf . cdc _ raw _ directory + = File . separator + " cdc _ raw " ; <nl> + conf . cdc _ raw _ directory = storagedirFor ( " cdc _ raw " ) ; <nl> } <nl> <nl> if ( conf . commitlog _ total _ space _ in _ mb = = null ) <nl> @ @ - 482 , 7 + 473 , 7 @ @ public class DatabaseDescriptor <nl> } <nl> } <nl> <nl> - if ( conf . cdc _ total _ space _ in _ mb = = null ) <nl> + if ( conf . cdc _ total _ space _ in _ mb = = 0 ) <nl> { <nl> int preferredSize = 4096 ; <nl> int minSize = 0 ; <nl> @ @ - 509 , 24 + 500 , 18 @ @ public class DatabaseDescriptor <nl> } <nl> } <nl> <nl> - if ( conf . cdc _ enabled = = true ) <nl> + if ( conf . cdc _ enabled ) <nl> { <nl> logger . info ( " cdc _ enabled is true . Starting casssandra node with Change - Data - Capture enabled . " ) ; <nl> } <nl> <nl> if ( conf . saved _ caches _ directory = = null ) <nl> { <nl> - conf . saved _ caches _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; <nl> - if ( conf . saved _ caches _ directory = = null ) <nl> - throw new ConfigurationException ( " saved _ caches _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; <nl> - conf . saved _ caches _ directory + = File . separator + " saved _ caches " ; <nl> + conf . saved _ caches _ directory = storagedirFor ( " saved _ caches " ) ; <nl> } <nl> if ( conf . data _ file _ directories = = null | | conf . data _ file _ directories . length = = 0 ) <nl> { <nl> - String defaultDataDir = System . getProperty ( " cassandra . storagedir " , null ) ; <nl> - if ( defaultDataDir = = null ) <nl> - throw new ConfigurationException ( " data _ file _ directories is not missing and - Dcassandra . storagedir is not set " , false ) ; <nl> - conf . data _ file _ directories = new String [ ] { defaultDataDir + File . separator + " data " } ; <nl> + conf . data _ file _ directories = new String [ ] { storagedir ( " data _ file _ directories " ) + File . separator + " data " } ; <nl> } <nl> <nl> long dataFreeBytes = 0 ; <nl> @ @ - 563 , 7 + 548 , 7 @ @ public class DatabaseDescriptor <nl> if ( conf . hints _ directory . equals ( conf . saved _ caches _ directory ) ) <nl> throw new ConfigurationException ( " saved _ caches _ directory must not be the same as the hints _ directory " , false ) ; <nl> <nl> - if ( conf . memtable _ flush _ writers = = null ) <nl> + if ( conf . memtable _ flush _ writers = = 0 ) <nl> { <nl> conf . memtable _ flush _ writers = conf . data _ file _ directories . length = = 1 ? 2 : 1 ; <nl> } <nl> @ @ - 593 , 9 + 578 , 7 @ @ public class DatabaseDescriptor <nl> if ( conf . concurrent _ compactors < = 0 ) <nl> throw new ConfigurationException ( " concurrent _ compactors should be strictly greater than 0 , but was " + conf . concurrent _ compactors , false ) ; <nl> <nl> - if ( conf . num _ tokens = = null ) <nl> - conf . num _ tokens = 1 ; <nl> - else if ( conf . num _ tokens > MAX _ NUM _ TOKENS ) <nl> + if ( conf . num _ tokens > MAX _ NUM _ TOKENS ) <nl> throw new ConfigurationException ( String . format ( " A maximum number of % d tokens per node is supported " , MAX _ NUM _ TOKENS ) , false ) ; <nl> <nl> try <nl> @ @ - 671 , 6 + 654 , 9 @ @ public class DatabaseDescriptor <nl> throw new ConfigurationException ( " index _ summary _ capacity _ in _ mb option was set incorrectly to ' " <nl> + conf . index _ summary _ capacity _ in _ mb + " ' , it should be a non - negative integer . " , false ) ; <nl> <nl> + if ( conf . index _ interval ! = null ) <nl> + logger . warn ( " index _ interval has been deprecated and should be removed from cassandra . yaml " ) ; <nl> + <nl> if ( conf . encryption _ options ! = null ) <nl> { <nl> logger . warn ( " Please rename encryption _ options as server _ encryption _ options in the yaml " ) ; <nl> @ @ - 693 , 13 + 679 , 13 @ @ public class DatabaseDescriptor <nl> <nl> / / native transport encryption options <nl> if ( conf . native _ transport _ port _ ssl ! = null <nl> - & & conf . native _ transport _ port _ ssl . intValue ( ) ! = conf . native _ transport _ port . intValue ( ) <nl> + & & conf . native _ transport _ port _ ssl ! = conf . native _ transport _ port <nl> & & ! conf . client _ encryption _ options . enabled ) <nl> { <nl> throw new ConfigurationException ( " Encryption must be enabled in client _ encryption _ options for native _ transport _ port _ ssl " , false ) ; <nl> } <nl> <nl> - if ( conf . max _ value _ size _ in _ mb = = null | | conf . max _ value _ size _ in _ mb < = 0 ) <nl> + if ( conf . max _ value _ size _ in _ mb < = 0 ) <nl> throw new ConfigurationException ( " max _ value _ size _ in _ mb must be positive " , false ) ; <nl> <nl> switch ( conf . disk _ optimization _ strategy ) <nl> @ @ - 734 , 6 + 720 , 19 @ @ public class DatabaseDescriptor <nl> } <nl> } <nl> <nl> + private static String storagedirFor ( String type ) <nl> + { <nl> + return storagedir ( type + " _ directory " ) + File . separator + type ; <nl> + } <nl> + <nl> + private static String storagedir ( String errMsgType ) <nl> + { <nl> + String storagedir = System . getProperty ( Config . PROPERTY _ PREFIX + " storagedir " , null ) ; <nl> + if ( storagedir = = null ) <nl> + throw new ConfigurationException ( errMsgType + " is missing and - Dcassandra . storagedir is not set " , false ) ; <nl> + return storagedir ; <nl> + } <nl> + <nl> public static void applyAddressConfig ( ) throws ConfigurationException <nl> { <nl> applyAddressConfig ( conf ) ; <nl> @ @ - 965 , 7 + 964 , 7 @ @ public class DatabaseDescriptor <nl> } <nl> try <nl> { <nl> - partitioner = FBUtilities . newPartitioner ( System . getProperty ( " cassandra . partitioner " , conf . partitioner ) ) ; <nl> + partitioner = FBUtilities . newPartitioner ( System . getProperty ( Config . PROPERTY _ PREFIX + " partitioner " , conf . partitioner ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 1281 , 12 + 1280 , 12 @ @ public class DatabaseDescriptor <nl> <nl> public static Collection < String > getInitialTokens ( ) <nl> { <nl> - return tokensFromString ( System . getProperty ( " cassandra . initial _ token " , conf . initial _ token ) ) ; <nl> + return tokensFromString ( System . getProperty ( Config . PROPERTY _ PREFIX + " initial _ token " , conf . initial _ token ) ) ; <nl> } <nl> <nl> public static String getAllocateTokensForKeyspace ( ) <nl> { <nl> - return System . getProperty ( " cassandra . allocate _ tokens _ for _ keyspace " , conf . allocate _ tokens _ for _ keyspace ) ; <nl> + return System . getProperty ( Config . PROPERTY _ PREFIX + " allocate _ tokens _ for _ keyspace " , conf . allocate _ tokens _ for _ keyspace ) ; <nl> } <nl> <nl> public static Collection < String > tokensFromString ( String tokenString ) <nl> @ @ - 1298 , 7 + 1297 , 7 @ @ public class DatabaseDescriptor <nl> return tokens ; <nl> } <nl> <nl> - public static Integer getNumTokens ( ) <nl> + public static int getNumTokens ( ) <nl> { <nl> return conf . num _ tokens ; <nl> } <nl> @ @ - 1307 , 10 + 1306 , 10 @ @ public class DatabaseDescriptor <nl> { <nl> try <nl> { <nl> - if ( System . getProperty ( " cassandra . replace _ address " , null ) ! = null ) <nl> - return InetAddress . getByName ( System . getProperty ( " cassandra . replace _ address " , null ) ) ; <nl> - else if ( System . getProperty ( " cassandra . replace _ address _ first _ boot " , null ) ! = null ) <nl> - return InetAddress . getByName ( System . getProperty ( " cassandra . replace _ address _ first _ boot " , null ) ) ; <nl> + if ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address " , null ) ! = null ) <nl> + return InetAddress . getByName ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address " , null ) ) ; <nl> + else if ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address _ first _ boot " , null ) ! = null ) <nl> + return InetAddress . getByName ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address _ first _ boot " , null ) ) ; <nl> return null ; <nl> } <nl> catch ( UnknownHostException e ) <nl> @ @ - 1321 , 14 + 1320 , 14 @ @ public class DatabaseDescriptor <nl> <nl> public static Collection < String > getReplaceTokens ( ) <nl> { <nl> - return tokensFromString ( System . getProperty ( " cassandra . replace _ token " , null ) ) ; <nl> + return tokensFromString ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ token " , null ) ) ; <nl> } <nl> <nl> public static UUID getReplaceNode ( ) <nl> { <nl> try <nl> { <nl> - return UUID . fromString ( System . getProperty ( " cassandra . replace _ node " , null ) ) ; <nl> + return UUID . fromString ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ node " , null ) ) ; <nl> } catch ( NullPointerException e ) <nl> { <nl> return null ; <nl> @ @ - 1342 , 17 + 1341 , 17 @ @ public class DatabaseDescriptor <nl> <nl> public static int getStoragePort ( ) <nl> { <nl> - return Integer . parseInt ( System . getProperty ( " cassandra . storage _ port " , conf . storage _ port . toString ( ) ) ) ; <nl> + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " storage _ port " , Integer . toString ( conf . storage _ port ) ) ) ; <nl> } <nl> <nl> public static int getSSLStoragePort ( ) <nl> { <nl> - return Integer . parseInt ( System . getProperty ( " cassandra . ssl _ storage _ port " , conf . ssl _ storage _ port . toString ( ) ) ) ; <nl> + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " ssl _ storage _ port " , Integer . toString ( conf . ssl _ storage _ port ) ) ) ; <nl> } <nl> <nl> public static int getRpcPort ( ) <nl> { <nl> - return Integer . parseInt ( System . getProperty ( " cassandra . rpc _ port " , conf . rpc _ port . toString ( ) ) ) ; <nl> + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " rpc _ port " , Integer . toString ( conf . rpc _ port ) ) ) ; <nl> } <nl> <nl> public static int getRpcListenBacklog ( ) <nl> @ @ - 1365 , 7 + 1364 , 7 @ @ public class DatabaseDescriptor <nl> return conf . request _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setRpcTimeout ( Long timeOutInMillis ) <nl> + public static void setRpcTimeout ( long timeOutInMillis ) <nl> { <nl> conf . request _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1375 , 7 + 1374 , 7 @ @ public class DatabaseDescriptor <nl> return conf . read _ request _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setReadRpcTimeout ( Long timeOutInMillis ) <nl> + public static void setReadRpcTimeout ( long timeOutInMillis ) <nl> { <nl> conf . read _ request _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1385 , 7 + 1384 , 7 @ @ public class DatabaseDescriptor <nl> return conf . range _ request _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setRangeRpcTimeout ( Long timeOutInMillis ) <nl> + public static void setRangeRpcTimeout ( long timeOutInMillis ) <nl> { <nl> conf . range _ request _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1395 , 7 + 1394 , 7 @ @ public class DatabaseDescriptor <nl> return conf . write _ request _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setWriteRpcTimeout ( Long timeOutInMillis ) <nl> + public static void setWriteRpcTimeout ( long timeOutInMillis ) <nl> { <nl> conf . write _ request _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1405 , 7 + 1404 , 7 @ @ public class DatabaseDescriptor <nl> return conf . counter _ write _ request _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setCounterWriteRpcTimeout ( Long timeOutInMillis ) <nl> + public static void setCounterWriteRpcTimeout ( long timeOutInMillis ) <nl> { <nl> conf . counter _ write _ request _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1415 , 7 + 1414 , 7 @ @ public class DatabaseDescriptor <nl> return conf . cas _ contention _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setCasContentionTimeout ( Long timeOutInMillis ) <nl> + public static void setCasContentionTimeout ( long timeOutInMillis ) <nl> { <nl> conf . cas _ contention _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1425 , 7 + 1424 , 7 @ @ public class DatabaseDescriptor <nl> return conf . truncate _ request _ timeout _ in _ ms ; <nl> } <nl> <nl> - public static void setTruncateRpcTimeout ( Long timeOutInMillis ) <nl> + public static void setTruncateRpcTimeout ( long timeOutInMillis ) <nl> { <nl> conf . truncate _ request _ timeout _ in _ ms = timeOutInMillis ; <nl> } <nl> @ @ - 1517 , 7 + 1516 , 7 @ @ public class DatabaseDescriptor <nl> <nl> public static boolean getDisableSTCSInL0 ( ) <nl> { <nl> - return Boolean . getBoolean ( " cassandra . disable _ stcs _ in _ l0 " ) ; <nl> + return disableSTCSInL0 ; <nl> } <nl> <nl> public static int getStreamThroughputOutboundMegabitsPerSec ( ) <nl> @ @ - 1639 , 7 + 1638 , 7 @ @ public class DatabaseDescriptor <nl> return broadcastAddress ; <nl> } <nl> <nl> - public static Boolean shouldListenOnBroadcastAddress ( ) <nl> + public static boolean shouldListenOnBroadcastAddress ( ) <nl> { <nl> return conf . listen _ on _ broadcast _ address ; <nl> } <nl> @ @ - 1712 , 12 + 1711 , 12 @ @ public class DatabaseDescriptor <nl> return conf . rpc _ recv _ buff _ size _ in _ bytes ; <nl> } <nl> <nl> - public static Integer getInternodeSendBufferSize ( ) <nl> + public static int getInternodeSendBufferSize ( ) <nl> { <nl> return conf . internode _ send _ buff _ size _ in _ bytes ; <nl> } <nl> <nl> - public static Integer getInternodeRecvBufferSize ( ) <nl> + public static int getInternodeRecvBufferSize ( ) <nl> { <nl> return conf . internode _ recv _ buff _ size _ in _ bytes ; <nl> } <nl> @ @ - 1729 , 7 + 1728 , 7 @ @ public class DatabaseDescriptor <nl> <nl> public static int getNativeTransportPort ( ) <nl> { <nl> - return Integer . parseInt ( System . getProperty ( " cassandra . native _ transport _ port " , conf . native _ transport _ port . toString ( ) ) ) ; <nl> + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " native _ transport _ port " , Integer . toString ( conf . native _ transport _ port ) ) ) ; <nl> } <nl> <nl> @ VisibleForTesting <nl> @ @ - 1749 , 7 + 1748 , 7 @ @ public class DatabaseDescriptor <nl> conf . native _ transport _ port _ ssl = port ; <nl> } <nl> <nl> - public static Integer getNativeTransportMaxThreads ( ) <nl> + public static int getNativeTransportMaxThreads ( ) <nl> { <nl> return conf . native _ transport _ max _ threads ; <nl> } <nl> @ @ - 1759 , 7 + 1758 , 7 @ @ public class DatabaseDescriptor <nl> return conf . native _ transport _ max _ frame _ size _ in _ mb * 1024 * 1024 ; <nl> } <nl> <nl> - public static Long getNativeTransportMaxConcurrentConnections ( ) <nl> + public static long getNativeTransportMaxConcurrentConnections ( ) <nl> { <nl> return conf . native _ transport _ max _ concurrent _ connections ; <nl> } <nl> @ @ - 1769 , 7 + 1768 , 7 @ @ public class DatabaseDescriptor <nl> conf . native _ transport _ max _ concurrent _ connections = nativeTransportMaxConcurrentConnections ; <nl> } <nl> <nl> - public static Long getNativeTransportMaxConcurrentConnectionsPerIp ( ) <nl> + public static long getNativeTransportMaxConcurrentConnectionsPerIp ( ) <nl> { <nl> return conf . native _ transport _ max _ concurrent _ connections _ per _ ip ; <nl> } <nl> @ @ - 1876 , 7 + 1875 , 7 @ @ public class DatabaseDescriptor <nl> <nl> public static boolean isAutoBootstrap ( ) <nl> { <nl> - return Boolean . parseBoolean ( System . getProperty ( " cassandra . auto _ bootstrap " , conf . auto _ bootstrap . toString ( ) ) ) ; <nl> + return Boolean . parseBoolean ( System . getProperty ( Config . PROPERTY _ PREFIX + " auto _ bootstrap " , Boolean . toString ( conf . auto _ bootstrap ) ) ) ; <nl> } <nl> <nl> public static void setHintedHandoffEnabled ( boolean hintedHandoffEnabled ) <nl> @ @ - 1930 , 7 + 1929 , 7 @ @ public class DatabaseDescriptor <nl> { <nl> return conf . dynamic _ snitch _ update _ interval _ in _ ms ; <nl> } <nl> - public static void setDynamicUpdateInterval ( Integer dynamicUpdateInterval ) <nl> + public static void setDynamicUpdateInterval ( int dynamicUpdateInterval ) <nl> { <nl> conf . dynamic _ snitch _ update _ interval _ in _ ms = dynamicUpdateInterval ; <nl> } <nl> @ @ - 1939 , 7 + 1938 , 7 @ @ public class DatabaseDescriptor <nl> { <nl> return conf . dynamic _ snitch _ reset _ interval _ in _ ms ; <nl> } <nl> - public static void setDynamicResetInterval ( Integer dynamicResetInterval ) <nl> + public static void setDynamicResetInterval ( int dynamicResetInterval ) <nl> { <nl> conf . dynamic _ snitch _ reset _ interval _ in _ ms = dynamicResetInterval ; <nl> } <nl> @ @ - 1949 , 7 + 1948 , 7 @ @ public class DatabaseDescriptor <nl> return conf . dynamic _ snitch _ badness _ threshold ; <nl> } <nl> <nl> - public static void setDynamicBadnessThreshold ( Double dynamicBadnessThreshold ) <nl> + public static void setDynamicBadnessThreshold ( double dynamicBadnessThreshold ) <nl> { <nl> conf . dynamic _ snitch _ badness _ threshold = dynamicBadnessThreshold ; <nl> } <nl> @ @ - 1974 , 7 + 1973 , 7 @ @ public class DatabaseDescriptor <nl> return conf . batchlog _ replay _ throttle _ in _ kb ; <nl> } <nl> <nl> - public static void setHintedHandoffThrottleInKB ( Integer throttleInKB ) <nl> + public static void setHintedHandoffThrottleInKB ( int throttleInKB ) <nl> { <nl> conf . hinted _ handoff _ throttle _ in _ kb = throttleInKB ; <nl> } <nl> @ @ - 2347 , 18 + 2346 , 18 @ @ public class DatabaseDescriptor <nl> return conf . cdc _ raw _ directory ; <nl> } <nl> <nl> - public static Integer getCDCSpaceInMB ( ) <nl> + public static int getCDCSpaceInMB ( ) <nl> { <nl> return conf . cdc _ total _ space _ in _ mb ; <nl> } <nl> <nl> @ VisibleForTesting <nl> - public static void setCDCSpaceInMB ( Integer input ) <nl> + public static void setCDCSpaceInMB ( int input ) <nl> { <nl> conf . cdc _ total _ space _ in _ mb = input ; <nl> } <nl> <nl> - public static Integer getCDCDiskCheckInterval ( ) <nl> + public static int getCDCDiskCheckInterval ( ) <nl> { <nl> return conf . cdc _ free _ space _ check _ interval _ ms ; <nl> } <nl> @ @ - 2371 , 7 + 2370 , 12 @ @ public class DatabaseDescriptor <nl> <nl> public static int searchConcurrencyFactor ( ) <nl> { <nl> - return Integer . parseInt ( System . getProperty ( " cassandra . search _ concurrency _ factor " , " 1 " ) ) ; <nl> + return searchConcurrencyFactor ; <nl> + } <nl> + <nl> + public static boolean isUnsafeSystem ( ) <nl> + { <nl> + return unsafeSystem ; <nl> } <nl> <nl> public static void setBackPressureEnabled ( boolean backPressureEnabled ) <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 598914a . . 05b7ac9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 808 , 7 + 808 , 7 @ @ public final class SystemKeyspace <nl> <nl> public static void forceBlockingFlush ( String cfname ) <nl> { <nl> - if ( ! Boolean . getBoolean ( " cassandra . unsafesystem " ) ) <nl> + if ( ! DatabaseDescriptor . isUnsafeSystem ( ) ) <nl> FBUtilities . waitOnFuture ( Keyspace . open ( SchemaConstants . SYSTEM _ KEYSPACE _ NAME ) . getColumnFamilyStore ( cfname ) . forceFlush ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> index 2c323b1 . . eeb9bc8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . config . SchemaConstants ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> @ @ - 55 , 9 + 56 , 9 @ @ public class CommitLogReplayer implements CommitLogReadHandler <nl> public static long MAX _ OUTSTANDING _ REPLAY _ BYTES = Long . getLong ( " cassandra . commitlog _ max _ outstanding _ replay _ bytes " , 1024 * 1024 * 64 ) ; <nl> @ VisibleForTesting <nl> public static MutationInitiator mutationInitiator = new MutationInitiator ( ) ; <nl> - static final String IGNORE _ REPLAY _ ERRORS _ PROPERTY = " cassandra . commitlog . ignorereplayerrors " ; <nl> + static final String IGNORE _ REPLAY _ ERRORS _ PROPERTY = Config . PROPERTY _ PREFIX + " commitlog . ignorereplayerrors " ; <nl> private static final Logger logger = LoggerFactory . getLogger ( CommitLogReplayer . class ) ; <nl> - private static final int MAX _ OUTSTANDING _ REPLAY _ COUNT = Integer . getInteger ( " cassandra . commitlog _ max _ outstanding _ replay _ count " , 1024 ) ; <nl> + private static final int MAX _ OUTSTANDING _ REPLAY _ COUNT = Integer . getInteger ( Config . PROPERTY _ PREFIX + " commitlog _ max _ outstanding _ replay _ count " , 1024 ) ; <nl> <nl> private final Set < Keyspace > keyspacesReplayed ; <nl> private final Queue < Future < Integer > > futures ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> index eca87c9 . . 0633251f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> @ @ - 45 , 6 + 46 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( LeveledCompactionStrategy . class ) ; <nl> private static final String SSTABLE _ SIZE _ OPTION = " sstable _ size _ in _ mb " ; <nl> + private static final boolean tolerateSstableSize = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " tolerate _ sstable _ size " ) ; <nl> <nl> @ VisibleForTesting <nl> final LeveledManifest manifest ; <nl> @ @ - 56 , 12 + 58 , 12 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy <nl> int configuredMaxSSTableSize = 160 ; <nl> SizeTieredCompactionStrategyOptions localOptions = new SizeTieredCompactionStrategyOptions ( options ) ; <nl> if ( options ! = null ) <nl> - { <nl> - if ( options . containsKey ( SSTABLE _ SIZE _ OPTION ) ) <nl> - { <nl> - configuredMaxSSTableSize = Integer . parseInt ( options . get ( SSTABLE _ SIZE _ OPTION ) ) ; <nl> - if ( ! Boolean . getBoolean ( " cassandra . tolerate _ sstable _ size " ) ) <nl> - { <nl> + { <nl> + if ( options . containsKey ( SSTABLE _ SIZE _ OPTION ) ) <nl> + { <nl> + configuredMaxSSTableSize = Integer . parseInt ( options . get ( SSTABLE _ SIZE _ OPTION ) ) ; <nl> + if ( ! tolerateSstableSize ) <nl> + { <nl> if ( configuredMaxSSTableSize > = 1000 ) <nl> logger . warn ( " Max sstable size of { } MB is configured for { } . { } ; having a unit of compaction this large is probably a bad idea " , <nl> configuredMaxSSTableSize , cfs . name , cfs . getColumnFamilyName ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> index 02147ef . . cd80e00 100644 <nl> - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class IncomingTcpConnection extends FastThreadLocalThread implements Clos <nl> this . compressed = compressed ; <nl> this . socket = socket ; <nl> this . group = group ; <nl> - if ( DatabaseDescriptor . getInternodeRecvBufferSize ( ) ! = null ) <nl> + if ( DatabaseDescriptor . getInternodeRecvBufferSize ( ) > 0 ) <nl> { <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index 9a47fda . . 1f47334 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 403 , 7 + 403 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread <nl> { <nl> socket . setTcpNoDelay ( DatabaseDescriptor . getInterDCTcpNoDelay ( ) ) ; <nl> } <nl> - if ( DatabaseDescriptor . getInternodeSendBufferSize ( ) ! = null ) <nl> + if ( DatabaseDescriptor . getInternodeSendBufferSize ( ) > 0 ) <nl> { <nl> try <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java <nl> index b8aaceb . . 552f318 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . CFMetaData ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . SchemaConstants ; <nl> import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> @ @ - 310 , 7 + 311 , 7 @ @ public final class SystemDistributedKeyspace <nl> <nl> public static void forceBlockingFlush ( String table ) <nl> { <nl> - if ( ! Boolean . getBoolean ( " cassandra . unsafesystem " ) ) <nl> + if ( ! DatabaseDescriptor . isUnsafeSystem ( ) ) <nl> FBUtilities . waitOnFuture ( Keyspace . open ( SchemaConstants . DISTRIBUTED _ KEYSPACE _ NAME ) . getColumnFamilyStore ( table ) . forceFlush ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index 36a8072 . . f1ee3c1 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 276 , 7 + 276 , 7 @ @ public final class SchemaKeyspace <nl> <nl> static void flush ( ) <nl> { <nl> - if ( ! Boolean . getBoolean ( " cassandra . unsafesystem " ) ) <nl> + if ( ! DatabaseDescriptor . isUnsafeSystem ( ) ) <nl> ALL . forEach ( table - > FBUtilities . waitOnFuture ( getSchemaCFS ( table ) . forceFlush ( ) ) ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d86a36c . . 08de041 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Config class uses boxed types but DD exposes primitive types ( CASSANDRA - 12199 ) 
 * Add pre - and post - shutdown hooks to Storage Service ( CASSANDRA - 12461 ) 
 * Add hint delivery metrics ( CASSANDRA - 12693 ) 
 * Remove IndexInfo cache from FileIndexInfoRetriever ( CASSANDRA - 12731 ) 
 diff - - git a / src / java / org / apache / cassandra / config / Config . java b / src / java / org / apache / cassandra / config / Config . java 
 index 35a17a5 . . b1318d9 100644 
 - - - a / src / java / org / apache / cassandra / config / Config . java 
 + + + b / src / java / org / apache / cassandra / config / Config . java 
 @ @ - 63 , 10 + 63 , 10 @ @ public class Config 
 / * Hashing strategy Random or OPHF * / 
 public String partitioner ; 
 
 - public Boolean auto _ bootstrap = true ; 
 + public boolean auto _ bootstrap = true ; 
 public volatile boolean hinted _ handoff _ enabled = true ; 
 public Set < String > hinted _ handoff _ disabled _ datacenters = Sets . newConcurrentHashSet ( ) ; 
 - public volatile Integer max _ hint _ window _ in _ ms = 3 * 3600 * 1000 ; / / three hours 
 + public volatile int max _ hint _ window _ in _ ms = 3 * 3600 * 1000 ; / / three hours 
 public String hints _ directory ; 
 
 public ParameterizedClass seed _ provider ; 
 @ @ - 77 , 29 + 77 , 29 @ @ public class Config 
 
 / * initial token in the ring * / 
 public String initial _ token ; 
 - public Integer num _ tokens = 1 ; 
 + public int num _ tokens = 1 ; 
 / * * Triggers automatic allocation of tokens if set , using the replication strategy of the referenced keyspace * / 
 public String allocate _ tokens _ for _ keyspace = null ; 
 
 - public volatile Long request _ timeout _ in _ ms = 10000L ; 
 + public volatile long request _ timeout _ in _ ms = 10000L ; 
 
 - public volatile Long read _ request _ timeout _ in _ ms = 5000L ; 
 + public volatile long read _ request _ timeout _ in _ ms = 5000L ; 
 
 - public volatile Long range _ request _ timeout _ in _ ms = 10000L ; 
 + public volatile long range _ request _ timeout _ in _ ms = 10000L ; 
 
 - public volatile Long write _ request _ timeout _ in _ ms = 2000L ; 
 + public volatile long write _ request _ timeout _ in _ ms = 2000L ; 
 
 - public volatile Long counter _ write _ request _ timeout _ in _ ms = 5000L ; 
 + public volatile long counter _ write _ request _ timeout _ in _ ms = 5000L ; 
 
 - public volatile Long cas _ contention _ timeout _ in _ ms = 1000L ; 
 + public volatile long cas _ contention _ timeout _ in _ ms = 1000L ; 
 
 - public volatile Long truncate _ request _ timeout _ in _ ms = 60000L ; 
 + public volatile long truncate _ request _ timeout _ in _ ms = 60000L ; 
 
 / * * 
 * @ deprecated use { @ link this # streaming _ keep _ alive _ period _ in _ secs } instead 
 * / 
 @ Deprecated 
 - public Integer streaming _ socket _ timeout _ in _ ms = 86400000 ; / / 24 hours 
 + public int streaming _ socket _ timeout _ in _ ms = 86400000 ; / / 24 hours 
 
 public Integer streaming _ keep _ alive _ period _ in _ secs = 300 ; / / 5 minutes 
 
 @ @ - 107 , 88 + 107 , 88 @ @ public class Config 
 
 public volatile long slow _ query _ log _ timeout _ in _ ms = 500L ; 
 
 - public volatile Double phi _ convict _ threshold = 8 . 0 ; 
 + public volatile double phi _ convict _ threshold = 8 . 0 ; 
 
 - public Integer concurrent _ reads = 32 ; 
 - public Integer concurrent _ writes = 32 ; 
 - public Integer concurrent _ counter _ writes = 32 ; 
 - public Integer concurrent _ materialized _ view _ writes = 32 ; 
 + public int concurrent _ reads = 32 ; 
 + public int concurrent _ writes = 32 ; 
 + public int concurrent _ counter _ writes = 32 ; 
 + public int concurrent _ materialized _ view _ writes = 32 ; 
 
 @ Deprecated 
 public Integer concurrent _ replicates = null ; 
 
 - public Integer memtable _ flush _ writers = null ; 
 + public int memtable _ flush _ writers = 0 ; 
 public Integer memtable _ heap _ space _ in _ mb ; 
 public Integer memtable _ offheap _ space _ in _ mb ; 
 public Float memtable _ cleanup _ threshold = null ; 
 
 - public Integer storage _ port = 7000 ; 
 - public Integer ssl _ storage _ port = 7001 ; 
 + public int storage _ port = 7000 ; 
 + public int ssl _ storage _ port = 7001 ; 
 public String listen _ address ; 
 public String listen _ interface ; 
 - public Boolean listen _ interface _ prefer _ ipv6 = false ; 
 + public boolean listen _ interface _ prefer _ ipv6 = false ; 
 public String broadcast _ address ; 
 - public Boolean listen _ on _ broadcast _ address = false ; 
 + public boolean listen _ on _ broadcast _ address = false ; 
 public String internode _ authenticator ; 
 
 / * intentionally left set to true , despite being set to false in stock 2 . 2 cassandra . yaml 
 we don ' t want to surprise Thrift users who have the setting blank in the yaml during 2 . 1 - > 2 . 2 upgrade * / 
 - public Boolean start _ rpc = true ; 
 + public boolean start _ rpc = true ; 
 public String rpc _ address ; 
 public String rpc _ interface ; 
 - public Boolean rpc _ interface _ prefer _ ipv6 = false ; 
 + public boolean rpc _ interface _ prefer _ ipv6 = false ; 
 public String broadcast _ rpc _ address ; 
 - public Integer rpc _ port = 9160 ; 
 - public Integer rpc _ listen _ backlog = 50 ; 
 + public int rpc _ port = 9160 ; 
 + public int rpc _ listen _ backlog = 50 ; 
 public String rpc _ server _ type = " sync " ; 
 - public Boolean rpc _ keepalive = true ; 
 - public Integer rpc _ min _ threads = 16 ; 
 - public Integer rpc _ max _ threads = Integer . MAX _ VALUE ; 
 + public boolean rpc _ keepalive = true ; 
 + public int rpc _ min _ threads = 16 ; 
 + public int rpc _ max _ threads = Integer . MAX _ VALUE ; 
 public Integer rpc _ send _ buff _ size _ in _ bytes ; 
 public Integer rpc _ recv _ buff _ size _ in _ bytes ; 
 - public Integer internode _ send _ buff _ size _ in _ bytes ; 
 - public Integer internode _ recv _ buff _ size _ in _ bytes ; 
 + public int internode _ send _ buff _ size _ in _ bytes = 0 ; 
 + public int internode _ recv _ buff _ size _ in _ bytes = 0 ; 
 
 - public Boolean start _ native _ transport = false ; 
 - public Integer native _ transport _ port = 9042 ; 
 + public boolean start _ native _ transport = false ; 
 + public int native _ transport _ port = 9042 ; 
 public Integer native _ transport _ port _ ssl = null ; 
 - public Integer native _ transport _ max _ threads = 128 ; 
 - public Integer native _ transport _ max _ frame _ size _ in _ mb = 256 ; 
 - public volatile Long native _ transport _ max _ concurrent _ connections = - 1L ; 
 - public volatile Long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; 
 + public int native _ transport _ max _ threads = 128 ; 
 + public int native _ transport _ max _ frame _ size _ in _ mb = 256 ; 
 + public volatile long native _ transport _ max _ concurrent _ connections = - 1L ; 
 + public volatile long native _ transport _ max _ concurrent _ connections _ per _ ip = - 1L ; 
 
 @ Deprecated 
 - public Integer thrift _ max _ message _ length _ in _ mb = 16 ; 
 + public int thrift _ max _ message _ length _ in _ mb = 16 ; 
 / * * 
 * Max size of values in SSTables , in MegaBytes . 
 * Default is the same as the native protocol frame limit : 256Mb . 
 * See AbstractType for how it is used . 
 * / 
 - public Integer max _ value _ size _ in _ mb = 256 ; 
 + public int max _ value _ size _ in _ mb = 256 ; 
 
 - public Integer thrift _ framed _ transport _ size _ in _ mb = 15 ; 
 - public Boolean snapshot _ before _ compaction = false ; 
 - public Boolean auto _ snapshot = true ; 
 + public int thrift _ framed _ transport _ size _ in _ mb = 15 ; 
 + public boolean snapshot _ before _ compaction = false ; 
 + public boolean auto _ snapshot = true ; 
 
 / * if the size of columns or super - columns are more than this , indexing will kick in * / 
 - public Integer column _ index _ size _ in _ kb = 64 ; 
 - public Integer column _ index _ cache _ size _ in _ kb = 2 ; 
 + public int column _ index _ size _ in _ kb = 64 ; 
 + public int column _ index _ cache _ size _ in _ kb = 2 ; 
 public volatile int batch _ size _ warn _ threshold _ in _ kb = 5 ; 
 public volatile int batch _ size _ fail _ threshold _ in _ kb = 50 ; 
 public Integer unlogged _ batch _ across _ partitions _ warn _ threshold = 10 ; 
 public volatile Integer concurrent _ compactors ; 
 - public volatile Integer compaction _ throughput _ mb _ per _ sec = 16 ; 
 - public volatile Integer compaction _ large _ partition _ warning _ threshold _ mb = 100 ; 
 - public Integer min _ free _ space _ per _ drive _ in _ mb = 50 ; 
 + public volatile int compaction _ throughput _ mb _ per _ sec = 16 ; 
 + public volatile int compaction _ large _ partition _ warning _ threshold _ mb = 100 ; 
 + public int min _ free _ space _ per _ drive _ in _ mb = 50 ; 
 
 / * * 
 * @ deprecated retry support removed on CASSANDRA - 10992 
 * / 
 @ Deprecated 
 - public Integer max _ streaming _ retries = 3 ; 
 + public int max _ streaming _ retries = 3 ; 
 
 - public volatile Integer stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; 
 - public volatile Integer inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; 
 + public volatile int stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; 
 + public volatile int inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 200 ; 
 
 public String [ ] data _ file _ directories = new String [ 0 ] ; 
 
 @ @ - 198 , 8 + 198 , 8 @ @ public class Config 
 public String commitlog _ directory ; 
 public Integer commitlog _ total _ space _ in _ mb ; 
 public CommitLogSync commitlog _ sync ; 
 - public Double commitlog _ sync _ batch _ window _ in _ ms ; 
 - public Integer commitlog _ sync _ period _ in _ ms ; 
 + public double commitlog _ sync _ batch _ window _ in _ ms = Double . NaN ; 
 + public int commitlog _ sync _ period _ in _ ms ; 
 public int commitlog _ segment _ size _ in _ mb = 32 ; 
 public ParameterizedClass commitlog _ compression ; 
 public int commitlog _ max _ compression _ buffers _ in _ pool = 3 ; 
 @ @ - 208 , 19 + 208 , 19 @ @ public class Config 
 public Integer max _ mutation _ size _ in _ kb ; 
 
 / / Change - data - capture logs 
 - public Boolean cdc _ enabled = false ; 
 + public boolean cdc _ enabled = false ; 
 public String cdc _ raw _ directory ; 
 - public Integer cdc _ total _ space _ in _ mb ; 
 - public Integer cdc _ free _ space _ check _ interval _ ms = 250 ; 
 + public int cdc _ total _ space _ in _ mb = 0 ; 
 + public int cdc _ free _ space _ check _ interval _ ms = 250 ; 
 
 @ Deprecated 
 public int commitlog _ periodic _ queue _ size = - 1 ; 
 
 public String endpoint _ snitch ; 
 - public Boolean dynamic _ snitch = true ; 
 - public volatile Integer dynamic _ snitch _ update _ interval _ in _ ms = 100 ; 
 - public volatile Integer dynamic _ snitch _ reset _ interval _ in _ ms = 600000 ; 
 - public volatile Double dynamic _ snitch _ badness _ threshold = 0 . 1 ; 
 + public boolean dynamic _ snitch = true ; 
 + public int dynamic _ snitch _ update _ interval _ in _ ms = 100 ; 
 + public int dynamic _ snitch _ reset _ interval _ in _ ms = 600000 ; 
 + public double dynamic _ snitch _ badness _ threshold = 0 . 1 ; 
 
 public String request _ scheduler ; 
 public RequestSchedulerId request _ scheduler _ id ; 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 36def79 . . 5041186 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 120 , 6 + 120 , 11 @ @ public class DatabaseDescriptor 
 private static boolean toolInitialized ; 
 private static boolean daemonInitialized ; 
 
 + private static final int searchConcurrencyFactor = Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " search _ concurrency _ factor " , " 1 " ) ) ; 
 + 
 + private static final boolean disableSTCSInL0 = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " disable _ stcs _ in _ l0 " ) ; 
 + private static final boolean unsafeSystem = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " unsafesystem " ) ; 
 + 
 public static void daemonInitialization ( ) throws ConfigurationException 
 { 
 if ( toolInitialized ) 
 @ @ - 249 , 7 + 254 , 7 @ @ public class DatabaseDescriptor 
 @ VisibleForTesting 
 public static Config loadConfig ( ) throws ConfigurationException 
 { 
 - String loaderClass = System . getProperty ( " cassandra . config . loader " ) ; 
 + String loaderClass = System . getProperty ( Config . PROPERTY _ PREFIX + " config . loader " ) ; 
 ConfigurationLoader loader = loaderClass = = null 
 ? new YamlConfigurationLoader ( ) 
 : FBUtilities . < ConfigurationLoader > construct ( loaderClass , " configuration loading " ) ; 
 @ @ - 330 , 11 + 335 , 11 @ @ public class DatabaseDescriptor 
 
 if ( conf . commitlog _ sync = = Config . CommitLogSync . batch ) 
 { 
 - if ( conf . commitlog _ sync _ batch _ window _ in _ ms = = null ) 
 + if ( Double . isNaN ( conf . commitlog _ sync _ batch _ window _ in _ ms ) | | conf . commitlog _ sync _ batch _ window _ in _ ms < = 0d ) 
 { 
 - throw new ConfigurationException ( " Missing value for commitlog _ sync _ batch _ window _ in _ ms : Double expected . " , false ) ; 
 + throw new ConfigurationException ( " Missing value for commitlog _ sync _ batch _ window _ in _ ms : positive double value expected . " , false ) ; 
 } 
 - else if ( conf . commitlog _ sync _ period _ in _ ms ! = null ) 
 + else if ( conf . commitlog _ sync _ period _ in _ ms ! = 0 ) 
 { 
 throw new ConfigurationException ( " Batch sync specified , but commitlog _ sync _ period _ in _ ms found . Only specify commitlog _ sync _ batch _ window _ in _ ms when using batch sync " , false ) ; 
 } 
 @ @ - 342 , 11 + 347 , 11 @ @ public class DatabaseDescriptor 
 } 
 else 
 { 
 - if ( conf . commitlog _ sync _ period _ in _ ms = = null ) 
 + if ( conf . commitlog _ sync _ period _ in _ ms < = 0 ) 
 { 
 - throw new ConfigurationException ( " Missing value for commitlog _ sync _ period _ in _ ms : Integer expected " , false ) ; 
 + throw new ConfigurationException ( " Missing value for commitlog _ sync _ period _ in _ ms : positive integer expected " , false ) ; 
 } 
 - else if ( conf . commitlog _ sync _ batch _ window _ in _ ms ! = null ) 
 + else if ( ! Double . isNaN ( conf . commitlog _ sync _ batch _ window _ in _ ms ) ) 
 { 
 throw new ConfigurationException ( " commitlog _ sync _ period _ in _ ms specified , but commitlog _ sync _ batch _ window _ in _ ms found . Only specify commitlog _ sync _ period _ in _ ms when using periodic sync . " , false ) ; 
 } 
 @ @ - 377 , 11 + 382 , 6 @ @ public class DatabaseDescriptor 
 throw new ConfigurationException ( " gc _ warn _ threshold _ in _ ms must be a positive integer " ) ; 
 } 
 
 - if ( conf . max _ hint _ window _ in _ ms = = null ) 
 - { 
 - throw new ConfigurationException ( " max _ hint _ window _ in _ ms cannot be set to null " , false ) ; 
 - } 
 - 
 / * phi convict threshold for FailureDetector * / 
 if ( conf . phi _ convict _ threshold < 5 | | conf . phi _ convict _ threshold > 16 ) 
 { 
 @ @ - 389 , 17 + 389 , 17 @ @ public class DatabaseDescriptor 
 } 
 
 / * Thread per pool * / 
 - if ( conf . concurrent _ reads ! = null & & conf . concurrent _ reads < 2 ) 
 + if ( conf . concurrent _ reads < 2 ) 
 { 
 throw new ConfigurationException ( " concurrent _ reads must be at least 2 , but was " + conf . concurrent _ reads , false ) ; 
 } 
 
 - if ( conf . concurrent _ writes ! = null & & conf . concurrent _ writes < 2 ) 
 + if ( conf . concurrent _ writes < 2 ) 
 { 
 throw new ConfigurationException ( " concurrent _ writes must be at least 2 , but was " + conf . concurrent _ writes , false ) ; 
 } 
 
 - if ( conf . concurrent _ counter _ writes ! = null & & conf . concurrent _ counter _ writes < 2 ) 
 + if ( conf . concurrent _ counter _ writes < 2 ) 
 throw new ConfigurationException ( " concurrent _ counter _ writes must be at least 2 , but was " + conf . concurrent _ counter _ writes , false ) ; 
 
 if ( conf . concurrent _ replicates ! = null ) 
 @ @ - 433 , 26 + 433 , 17 @ @ public class DatabaseDescriptor 
 / / use - Dcassandra . storagedir ( set in cassandra - env . sh ) as the parent dir for data / , commitlog / , and saved _ caches / 
 if ( conf . commitlog _ directory = = null ) 
 { 
 - conf . commitlog _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; 
 - if ( conf . commitlog _ directory = = null ) 
 - throw new ConfigurationException ( " commitlog _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; 
 - conf . commitlog _ directory + = File . separator + " commitlog " ; 
 + conf . commitlog _ directory = storagedirFor ( " commitlog " ) ; 
 } 
 
 if ( conf . hints _ directory = = null ) 
 { 
 - conf . hints _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; 
 - if ( conf . hints _ directory = = null ) 
 - throw new ConfigurationException ( " hints _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; 
 - conf . hints _ directory + = File . separator + " hints " ; 
 + conf . hints _ directory = storagedirFor ( " hints " ) ; 
 } 
 
 if ( conf . cdc _ raw _ directory = = null ) 
 { 
 - conf . cdc _ raw _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; 
 - if ( conf . cdc _ raw _ directory = = null ) 
 - throw new ConfigurationException ( " cdc _ raw _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; 
 - conf . cdc _ raw _ directory + = File . separator + " cdc _ raw " ; 
 + conf . cdc _ raw _ directory = storagedirFor ( " cdc _ raw " ) ; 
 } 
 
 if ( conf . commitlog _ total _ space _ in _ mb = = null ) 
 @ @ - 482 , 7 + 473 , 7 @ @ public class DatabaseDescriptor 
 } 
 } 
 
 - if ( conf . cdc _ total _ space _ in _ mb = = null ) 
 + if ( conf . cdc _ total _ space _ in _ mb = = 0 ) 
 { 
 int preferredSize = 4096 ; 
 int minSize = 0 ; 
 @ @ - 509 , 24 + 500 , 18 @ @ public class DatabaseDescriptor 
 } 
 } 
 
 - if ( conf . cdc _ enabled = = true ) 
 + if ( conf . cdc _ enabled ) 
 { 
 logger . info ( " cdc _ enabled is true . Starting casssandra node with Change - Data - Capture enabled . " ) ; 
 } 
 
 if ( conf . saved _ caches _ directory = = null ) 
 { 
 - conf . saved _ caches _ directory = System . getProperty ( " cassandra . storagedir " , null ) ; 
 - if ( conf . saved _ caches _ directory = = null ) 
 - throw new ConfigurationException ( " saved _ caches _ directory is missing and - Dcassandra . storagedir is not set " , false ) ; 
 - conf . saved _ caches _ directory + = File . separator + " saved _ caches " ; 
 + conf . saved _ caches _ directory = storagedirFor ( " saved _ caches " ) ; 
 } 
 if ( conf . data _ file _ directories = = null | | conf . data _ file _ directories . length = = 0 ) 
 { 
 - String defaultDataDir = System . getProperty ( " cassandra . storagedir " , null ) ; 
 - if ( defaultDataDir = = null ) 
 - throw new ConfigurationException ( " data _ file _ directories is not missing and - Dcassandra . storagedir is not set " , false ) ; 
 - conf . data _ file _ directories = new String [ ] { defaultDataDir + File . separator + " data " } ; 
 + conf . data _ file _ directories = new String [ ] { storagedir ( " data _ file _ directories " ) + File . separator + " data " } ; 
 } 
 
 long dataFreeBytes = 0 ; 
 @ @ - 563 , 7 + 548 , 7 @ @ public class DatabaseDescriptor 
 if ( conf . hints _ directory . equals ( conf . saved _ caches _ directory ) ) 
 throw new ConfigurationException ( " saved _ caches _ directory must not be the same as the hints _ directory " , false ) ; 
 
 - if ( conf . memtable _ flush _ writers = = null ) 
 + if ( conf . memtable _ flush _ writers = = 0 ) 
 { 
 conf . memtable _ flush _ writers = conf . data _ file _ directories . length = = 1 ? 2 : 1 ; 
 } 
 @ @ - 593 , 9 + 578 , 7 @ @ public class DatabaseDescriptor 
 if ( conf . concurrent _ compactors < = 0 ) 
 throw new ConfigurationException ( " concurrent _ compactors should be strictly greater than 0 , but was " + conf . concurrent _ compactors , false ) ; 
 
 - if ( conf . num _ tokens = = null ) 
 - conf . num _ tokens = 1 ; 
 - else if ( conf . num _ tokens > MAX _ NUM _ TOKENS ) 
 + if ( conf . num _ tokens > MAX _ NUM _ TOKENS ) 
 throw new ConfigurationException ( String . format ( " A maximum number of % d tokens per node is supported " , MAX _ NUM _ TOKENS ) , false ) ; 
 
 try 
 @ @ - 671 , 6 + 654 , 9 @ @ public class DatabaseDescriptor 
 throw new ConfigurationException ( " index _ summary _ capacity _ in _ mb option was set incorrectly to ' " 
 + conf . index _ summary _ capacity _ in _ mb + " ' , it should be a non - negative integer . " , false ) ; 
 
 + if ( conf . index _ interval ! = null ) 
 + logger . warn ( " index _ interval has been deprecated and should be removed from cassandra . yaml " ) ; 
 + 
 if ( conf . encryption _ options ! = null ) 
 { 
 logger . warn ( " Please rename encryption _ options as server _ encryption _ options in the yaml " ) ; 
 @ @ - 693 , 13 + 679 , 13 @ @ public class DatabaseDescriptor 
 
 / / native transport encryption options 
 if ( conf . native _ transport _ port _ ssl ! = null 
 - & & conf . native _ transport _ port _ ssl . intValue ( ) ! = conf . native _ transport _ port . intValue ( ) 
 + & & conf . native _ transport _ port _ ssl ! = conf . native _ transport _ port 
 & & ! conf . client _ encryption _ options . enabled ) 
 { 
 throw new ConfigurationException ( " Encryption must be enabled in client _ encryption _ options for native _ transport _ port _ ssl " , false ) ; 
 } 
 
 - if ( conf . max _ value _ size _ in _ mb = = null | | conf . max _ value _ size _ in _ mb < = 0 ) 
 + if ( conf . max _ value _ size _ in _ mb < = 0 ) 
 throw new ConfigurationException ( " max _ value _ size _ in _ mb must be positive " , false ) ; 
 
 switch ( conf . disk _ optimization _ strategy ) 
 @ @ - 734 , 6 + 720 , 19 @ @ public class DatabaseDescriptor 
 } 
 } 
 
 + private static String storagedirFor ( String type ) 
 + { 
 + return storagedir ( type + " _ directory " ) + File . separator + type ; 
 + } 
 + 
 + private static String storagedir ( String errMsgType ) 
 + { 
 + String storagedir = System . getProperty ( Config . PROPERTY _ PREFIX + " storagedir " , null ) ; 
 + if ( storagedir = = null ) 
 + throw new ConfigurationException ( errMsgType + " is missing and - Dcassandra . storagedir is not set " , false ) ; 
 + return storagedir ; 
 + } 
 + 
 public static void applyAddressConfig ( ) throws ConfigurationException 
 { 
 applyAddressConfig ( conf ) ; 
 @ @ - 965 , 7 + 964 , 7 @ @ public class DatabaseDescriptor 
 } 
 try 
 { 
 - partitioner = FBUtilities . newPartitioner ( System . getProperty ( " cassandra . partitioner " , conf . partitioner ) ) ; 
 + partitioner = FBUtilities . newPartitioner ( System . getProperty ( Config . PROPERTY _ PREFIX + " partitioner " , conf . partitioner ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 1281 , 12 + 1280 , 12 @ @ public class DatabaseDescriptor 
 
 public static Collection < String > getInitialTokens ( ) 
 { 
 - return tokensFromString ( System . getProperty ( " cassandra . initial _ token " , conf . initial _ token ) ) ; 
 + return tokensFromString ( System . getProperty ( Config . PROPERTY _ PREFIX + " initial _ token " , conf . initial _ token ) ) ; 
 } 
 
 public static String getAllocateTokensForKeyspace ( ) 
 { 
 - return System . getProperty ( " cassandra . allocate _ tokens _ for _ keyspace " , conf . allocate _ tokens _ for _ keyspace ) ; 
 + return System . getProperty ( Config . PROPERTY _ PREFIX + " allocate _ tokens _ for _ keyspace " , conf . allocate _ tokens _ for _ keyspace ) ; 
 } 
 
 public static Collection < String > tokensFromString ( String tokenString ) 
 @ @ - 1298 , 7 + 1297 , 7 @ @ public class DatabaseDescriptor 
 return tokens ; 
 } 
 
 - public static Integer getNumTokens ( ) 
 + public static int getNumTokens ( ) 
 { 
 return conf . num _ tokens ; 
 } 
 @ @ - 1307 , 10 + 1306 , 10 @ @ public class DatabaseDescriptor 
 { 
 try 
 { 
 - if ( System . getProperty ( " cassandra . replace _ address " , null ) ! = null ) 
 - return InetAddress . getByName ( System . getProperty ( " cassandra . replace _ address " , null ) ) ; 
 - else if ( System . getProperty ( " cassandra . replace _ address _ first _ boot " , null ) ! = null ) 
 - return InetAddress . getByName ( System . getProperty ( " cassandra . replace _ address _ first _ boot " , null ) ) ; 
 + if ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address " , null ) ! = null ) 
 + return InetAddress . getByName ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address " , null ) ) ; 
 + else if ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address _ first _ boot " , null ) ! = null ) 
 + return InetAddress . getByName ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ address _ first _ boot " , null ) ) ; 
 return null ; 
 } 
 catch ( UnknownHostException e ) 
 @ @ - 1321 , 14 + 1320 , 14 @ @ public class DatabaseDescriptor 
 
 public static Collection < String > getReplaceTokens ( ) 
 { 
 - return tokensFromString ( System . getProperty ( " cassandra . replace _ token " , null ) ) ; 
 + return tokensFromString ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ token " , null ) ) ; 
 } 
 
 public static UUID getReplaceNode ( ) 
 { 
 try 
 { 
 - return UUID . fromString ( System . getProperty ( " cassandra . replace _ node " , null ) ) ; 
 + return UUID . fromString ( System . getProperty ( Config . PROPERTY _ PREFIX + " replace _ node " , null ) ) ; 
 } catch ( NullPointerException e ) 
 { 
 return null ; 
 @ @ - 1342 , 17 + 1341 , 17 @ @ public class DatabaseDescriptor 
 
 public static int getStoragePort ( ) 
 { 
 - return Integer . parseInt ( System . getProperty ( " cassandra . storage _ port " , conf . storage _ port . toString ( ) ) ) ; 
 + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " storage _ port " , Integer . toString ( conf . storage _ port ) ) ) ; 
 } 
 
 public static int getSSLStoragePort ( ) 
 { 
 - return Integer . parseInt ( System . getProperty ( " cassandra . ssl _ storage _ port " , conf . ssl _ storage _ port . toString ( ) ) ) ; 
 + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " ssl _ storage _ port " , Integer . toString ( conf . ssl _ storage _ port ) ) ) ; 
 } 
 
 public static int getRpcPort ( ) 
 { 
 - return Integer . parseInt ( System . getProperty ( " cassandra . rpc _ port " , conf . rpc _ port . toString ( ) ) ) ; 
 + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " rpc _ port " , Integer . toString ( conf . rpc _ port ) ) ) ; 
 } 
 
 public static int getRpcListenBacklog ( ) 
 @ @ - 1365 , 7 + 1364 , 7 @ @ public class DatabaseDescriptor 
 return conf . request _ timeout _ in _ ms ; 
 } 
 
 - public static void setRpcTimeout ( Long timeOutInMillis ) 
 + public static void setRpcTimeout ( long timeOutInMillis ) 
 { 
 conf . request _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1375 , 7 + 1374 , 7 @ @ public class DatabaseDescriptor 
 return conf . read _ request _ timeout _ in _ ms ; 
 } 
 
 - public static void setReadRpcTimeout ( Long timeOutInMillis ) 
 + public static void setReadRpcTimeout ( long timeOutInMillis ) 
 { 
 conf . read _ request _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1385 , 7 + 1384 , 7 @ @ public class DatabaseDescriptor 
 return conf . range _ request _ timeout _ in _ ms ; 
 } 
 
 - public static void setRangeRpcTimeout ( Long timeOutInMillis ) 
 + public static void setRangeRpcTimeout ( long timeOutInMillis ) 
 { 
 conf . range _ request _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1395 , 7 + 1394 , 7 @ @ public class DatabaseDescriptor 
 return conf . write _ request _ timeout _ in _ ms ; 
 } 
 
 - public static void setWriteRpcTimeout ( Long timeOutInMillis ) 
 + public static void setWriteRpcTimeout ( long timeOutInMillis ) 
 { 
 conf . write _ request _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1405 , 7 + 1404 , 7 @ @ public class DatabaseDescriptor 
 return conf . counter _ write _ request _ timeout _ in _ ms ; 
 } 
 
 - public static void setCounterWriteRpcTimeout ( Long timeOutInMillis ) 
 + public static void setCounterWriteRpcTimeout ( long timeOutInMillis ) 
 { 
 conf . counter _ write _ request _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1415 , 7 + 1414 , 7 @ @ public class DatabaseDescriptor 
 return conf . cas _ contention _ timeout _ in _ ms ; 
 } 
 
 - public static void setCasContentionTimeout ( Long timeOutInMillis ) 
 + public static void setCasContentionTimeout ( long timeOutInMillis ) 
 { 
 conf . cas _ contention _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1425 , 7 + 1424 , 7 @ @ public class DatabaseDescriptor 
 return conf . truncate _ request _ timeout _ in _ ms ; 
 } 
 
 - public static void setTruncateRpcTimeout ( Long timeOutInMillis ) 
 + public static void setTruncateRpcTimeout ( long timeOutInMillis ) 
 { 
 conf . truncate _ request _ timeout _ in _ ms = timeOutInMillis ; 
 } 
 @ @ - 1517 , 7 + 1516 , 7 @ @ public class DatabaseDescriptor 
 
 public static boolean getDisableSTCSInL0 ( ) 
 { 
 - return Boolean . getBoolean ( " cassandra . disable _ stcs _ in _ l0 " ) ; 
 + return disableSTCSInL0 ; 
 } 
 
 public static int getStreamThroughputOutboundMegabitsPerSec ( ) 
 @ @ - 1639 , 7 + 1638 , 7 @ @ public class DatabaseDescriptor 
 return broadcastAddress ; 
 } 
 
 - public static Boolean shouldListenOnBroadcastAddress ( ) 
 + public static boolean shouldListenOnBroadcastAddress ( ) 
 { 
 return conf . listen _ on _ broadcast _ address ; 
 } 
 @ @ - 1712 , 12 + 1711 , 12 @ @ public class DatabaseDescriptor 
 return conf . rpc _ recv _ buff _ size _ in _ bytes ; 
 } 
 
 - public static Integer getInternodeSendBufferSize ( ) 
 + public static int getInternodeSendBufferSize ( ) 
 { 
 return conf . internode _ send _ buff _ size _ in _ bytes ; 
 } 
 
 - public static Integer getInternodeRecvBufferSize ( ) 
 + public static int getInternodeRecvBufferSize ( ) 
 { 
 return conf . internode _ recv _ buff _ size _ in _ bytes ; 
 } 
 @ @ - 1729 , 7 + 1728 , 7 @ @ public class DatabaseDescriptor 
 
 public static int getNativeTransportPort ( ) 
 { 
 - return Integer . parseInt ( System . getProperty ( " cassandra . native _ transport _ port " , conf . native _ transport _ port . toString ( ) ) ) ; 
 + return Integer . parseInt ( System . getProperty ( Config . PROPERTY _ PREFIX + " native _ transport _ port " , Integer . toString ( conf . native _ transport _ port ) ) ) ; 
 } 
 
 @ VisibleForTesting 
 @ @ - 1749 , 7 + 1748 , 7 @ @ public class DatabaseDescriptor 
 conf . native _ transport _ port _ ssl = port ; 
 } 
 
 - public static Integer getNativeTransportMaxThreads ( ) 
 + public static int getNativeTransportMaxThreads ( ) 
 { 
 return conf . native _ transport _ max _ threads ; 
 } 
 @ @ - 1759 , 7 + 1758 , 7 @ @ public class DatabaseDescriptor 
 return conf . native _ transport _ max _ frame _ size _ in _ mb * 1024 * 1024 ; 
 } 
 
 - public static Long getNativeTransportMaxConcurrentConnections ( ) 
 + public static long getNativeTransportMaxConcurrentConnections ( ) 
 { 
 return conf . native _ transport _ max _ concurrent _ connections ; 
 } 
 @ @ - 1769 , 7 + 1768 , 7 @ @ public class DatabaseDescriptor 
 conf . native _ transport _ max _ concurrent _ connections = nativeTransportMaxConcurrentConnections ; 
 } 
 
 - public static Long getNativeTransportMaxConcurrentConnectionsPerIp ( ) 
 + public static long getNativeTransportMaxConcurrentConnectionsPerIp ( ) 
 { 
 return conf . native _ transport _ max _ concurrent _ connections _ per _ ip ; 
 } 
 @ @ - 1876 , 7 + 1875 , 7 @ @ public class DatabaseDescriptor 
 
 public static boolean isAutoBootstrap ( ) 
 { 
 - return Boolean . parseBoolean ( System . getProperty ( " cassandra . auto _ bootstrap " , conf . auto _ bootstrap . toString ( ) ) ) ; 
 + return Boolean . parseBoolean ( System . getProperty ( Config . PROPERTY _ PREFIX + " auto _ bootstrap " , Boolean . toString ( conf . auto _ bootstrap ) ) ) ; 
 } 
 
 public static void setHintedHandoffEnabled ( boolean hintedHandoffEnabled ) 
 @ @ - 1930 , 7 + 1929 , 7 @ @ public class DatabaseDescriptor 
 { 
 return conf . dynamic _ snitch _ update _ interval _ in _ ms ; 
 } 
 - public static void setDynamicUpdateInterval ( Integer dynamicUpdateInterval ) 
 + public static void setDynamicUpdateInterval ( int dynamicUpdateInterval ) 
 { 
 conf . dynamic _ snitch _ update _ interval _ in _ ms = dynamicUpdateInterval ; 
 } 
 @ @ - 1939 , 7 + 1938 , 7 @ @ public class DatabaseDescriptor 
 { 
 return conf . dynamic _ snitch _ reset _ interval _ in _ ms ; 
 } 
 - public static void setDynamicResetInterval ( Integer dynamicResetInterval ) 
 + public static void setDynamicResetInterval ( int dynamicResetInterval ) 
 { 
 conf . dynamic _ snitch _ reset _ interval _ in _ ms = dynamicResetInterval ; 
 } 
 @ @ - 1949 , 7 + 1948 , 7 @ @ public class DatabaseDescriptor 
 return conf . dynamic _ snitch _ badness _ threshold ; 
 } 
 
 - public static void setDynamicBadnessThreshold ( Double dynamicBadnessThreshold ) 
 + public static void setDynamicBadnessThreshold ( double dynamicBadnessThreshold ) 
 { 
 conf . dynamic _ snitch _ badness _ threshold = dynamicBadnessThreshold ; 
 } 
 @ @ - 1974 , 7 + 1973 , 7 @ @ public class DatabaseDescriptor 
 return conf . batchlog _ replay _ throttle _ in _ kb ; 
 } 
 
 - public static void setHintedHandoffThrottleInKB ( Integer throttleInKB ) 
 + public static void setHintedHandoffThrottleInKB ( int throttleInKB ) 
 { 
 conf . hinted _ handoff _ throttle _ in _ kb = throttleInKB ; 
 } 
 @ @ - 2347 , 18 + 2346 , 18 @ @ public class DatabaseDescriptor 
 return conf . cdc _ raw _ directory ; 
 } 
 
 - public static Integer getCDCSpaceInMB ( ) 
 + public static int getCDCSpaceInMB ( ) 
 { 
 return conf . cdc _ total _ space _ in _ mb ; 
 } 
 
 @ VisibleForTesting 
 - public static void setCDCSpaceInMB ( Integer input ) 
 + public static void setCDCSpaceInMB ( int input ) 
 { 
 conf . cdc _ total _ space _ in _ mb = input ; 
 } 
 
 - public static Integer getCDCDiskCheckInterval ( ) 
 + public static int getCDCDiskCheckInterval ( ) 
 { 
 return conf . cdc _ free _ space _ check _ interval _ ms ; 
 } 
 @ @ - 2371 , 7 + 2370 , 12 @ @ public class DatabaseDescriptor 
 
 public static int searchConcurrencyFactor ( ) 
 { 
 - return Integer . parseInt ( System . getProperty ( " cassandra . search _ concurrency _ factor " , " 1 " ) ) ; 
 + return searchConcurrencyFactor ; 
 + } 
 + 
 + public static boolean isUnsafeSystem ( ) 
 + { 
 + return unsafeSystem ; 
 } 
 
 public static void setBackPressureEnabled ( boolean backPressureEnabled ) 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 598914a . . 05b7ac9 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 808 , 7 + 808 , 7 @ @ public final class SystemKeyspace 
 
 public static void forceBlockingFlush ( String cfname ) 
 { 
 - if ( ! Boolean . getBoolean ( " cassandra . unsafesystem " ) ) 
 + if ( ! DatabaseDescriptor . isUnsafeSystem ( ) ) 
 FBUtilities . waitOnFuture ( Keyspace . open ( SchemaConstants . SYSTEM _ KEYSPACE _ NAME ) . getColumnFamilyStore ( cfname ) . forceFlush ( ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 index 2c323b1 . . eeb9bc8 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogReplayer . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . config . SchemaConstants ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 @ @ - 55 , 9 + 56 , 9 @ @ public class CommitLogReplayer implements CommitLogReadHandler 
 public static long MAX _ OUTSTANDING _ REPLAY _ BYTES = Long . getLong ( " cassandra . commitlog _ max _ outstanding _ replay _ bytes " , 1024 * 1024 * 64 ) ; 
 @ VisibleForTesting 
 public static MutationInitiator mutationInitiator = new MutationInitiator ( ) ; 
 - static final String IGNORE _ REPLAY _ ERRORS _ PROPERTY = " cassandra . commitlog . ignorereplayerrors " ; 
 + static final String IGNORE _ REPLAY _ ERRORS _ PROPERTY = Config . PROPERTY _ PREFIX + " commitlog . ignorereplayerrors " ; 
 private static final Logger logger = LoggerFactory . getLogger ( CommitLogReplayer . class ) ; 
 - private static final int MAX _ OUTSTANDING _ REPLAY _ COUNT = Integer . getInteger ( " cassandra . commitlog _ max _ outstanding _ replay _ count " , 1024 ) ; 
 + private static final int MAX _ OUTSTANDING _ REPLAY _ COUNT = Integer . getInteger ( Config . PROPERTY _ PREFIX + " commitlog _ max _ outstanding _ replay _ count " , 1024 ) ; 
 
 private final Set < Keyspace > keyspacesReplayed ; 
 private final Queue < Future < Integer > > futures ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 index eca87c9 . . 0633251f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionStrategy . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 @ @ - 45 , 6 + 46 , 7 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( LeveledCompactionStrategy . class ) ; 
 private static final String SSTABLE _ SIZE _ OPTION = " sstable _ size _ in _ mb " ; 
 + private static final boolean tolerateSstableSize = Boolean . getBoolean ( Config . PROPERTY _ PREFIX + " tolerate _ sstable _ size " ) ; 
 
 @ VisibleForTesting 
 final LeveledManifest manifest ; 
 @ @ - 56 , 12 + 58 , 12 @ @ public class LeveledCompactionStrategy extends AbstractCompactionStrategy 
 int configuredMaxSSTableSize = 160 ; 
 SizeTieredCompactionStrategyOptions localOptions = new SizeTieredCompactionStrategyOptions ( options ) ; 
 if ( options ! = null ) 
 - { 
 - if ( options . containsKey ( SSTABLE _ SIZE _ OPTION ) ) 
 - { 
 - configuredMaxSSTableSize = Integer . parseInt ( options . get ( SSTABLE _ SIZE _ OPTION ) ) ; 
 - if ( ! Boolean . getBoolean ( " cassandra . tolerate _ sstable _ size " ) ) 
 - { 
 + { 
 + if ( options . containsKey ( SSTABLE _ SIZE _ OPTION ) ) 
 + { 
 + configuredMaxSSTableSize = Integer . parseInt ( options . get ( SSTABLE _ SIZE _ OPTION ) ) ; 
 + if ( ! tolerateSstableSize ) 
 + { 
 if ( configuredMaxSSTableSize > = 1000 ) 
 logger . warn ( " Max sstable size of { } MB is configured for { } . { } ; having a unit of compaction this large is probably a bad idea " , 
 configuredMaxSSTableSize , cfs . name , cfs . getColumnFamilyName ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 index 02147ef . . cd80e00 100644 
 - - - a / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / IncomingTcpConnection . java 
 @ @ - 62 , 7 + 62 , 7 @ @ public class IncomingTcpConnection extends FastThreadLocalThread implements Clos 
 this . compressed = compressed ; 
 this . socket = socket ; 
 this . group = group ; 
 - if ( DatabaseDescriptor . getInternodeRecvBufferSize ( ) ! = null ) 
 + if ( DatabaseDescriptor . getInternodeRecvBufferSize ( ) > 0 ) 
 { 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index 9a47fda . . 1f47334 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 403 , 7 + 403 , 7 @ @ public class OutboundTcpConnection extends FastThreadLocalThread 
 { 
 socket . setTcpNoDelay ( DatabaseDescriptor . getInterDCTcpNoDelay ( ) ) ; 
 } 
 - if ( DatabaseDescriptor . getInternodeSendBufferSize ( ) ! = null ) 
 + if ( DatabaseDescriptor . getInternodeSendBufferSize ( ) > 0 ) 
 { 
 try 
 { 
 diff - - git a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java 
 index b8aaceb . . 552f318 100644 
 - - - a / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java 
 + + + b / src / java / org / apache / cassandra / repair / SystemDistributedKeyspace . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . CFMetaData ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . SchemaConstants ; 
 import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . UntypedResultSet ; 
 @ @ - 310 , 7 + 311 , 7 @ @ public final class SystemDistributedKeyspace 
 
 public static void forceBlockingFlush ( String table ) 
 { 
 - if ( ! Boolean . getBoolean ( " cassandra . unsafesystem " ) ) 
 + if ( ! DatabaseDescriptor . isUnsafeSystem ( ) ) 
 FBUtilities . waitOnFuture ( Keyspace . open ( SchemaConstants . DISTRIBUTED _ KEYSPACE _ NAME ) . getColumnFamilyStore ( table ) . forceFlush ( ) ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index 36a8072 . . f1ee3c1 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 276 , 7 + 276 , 7 @ @ public final class SchemaKeyspace 
 
 static void flush ( ) 
 { 
 - if ( ! Boolean . getBoolean ( " cassandra . unsafesystem " ) ) 
 + if ( ! DatabaseDescriptor . isUnsafeSystem ( ) ) 
 ALL . forEach ( table - > FBUtilities . waitOnFuture ( getSchemaCFS ( table ) . forceFlush ( ) ) ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
