BLEU SCORE: 0.040583489434387374

TEST MSG: Exit query parsing upon first error
GENERATED MSG: optimize commitlog checksumming with PureJavaCrc32

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 00ff1eb . . 2f517e0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Exit query parsing upon first error ( CASSANDRA - 12598 ) <nl> * Fix cassandra - stress to use single seed in UUID generation ( CASSANDRA - 12729 ) <nl> * CQLSSTableWriter does not allow Update statement ( CASSANDRA - 12450 ) <nl> * Config class uses boxed types but DD exposes primitive types ( CASSANDRA - 12199 ) <nl> diff - - git a / src / antlr / Cql . g b / src / antlr / Cql . g <nl> index 61bdc43 . . a11f2fd 100644 <nl> - - - a / src / antlr / Cql . g <nl> + + + b / src / antlr / Cql . g <nl> @ @ - 73 , 6 + 73 , 23 @ @ import Parser , Lexer ; <nl> { <nl> gParser . addRecognitionError ( msg ) ; <nl> } <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Recovery methods are overridden to avoid wasting work on recovering from errors when the result will be <nl> + / / ignored anyway . <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + @ Override <nl> + protected Object recoverFromMismatchedToken ( IntStream input , int ttype , BitSet follow ) throws RecognitionException <nl> + { <nl> + throw new MismatchedTokenException ( ttype , input ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void recover ( IntStream input , RecognitionException re ) <nl> + { <nl> + / / Do nothing . <nl> + } <nl> } <nl> <nl> @ lexer : : header { <nl> diff - - git a / src / antlr / Parser . g b / src / antlr / Parser . g <nl> index 4fa27a0 . . b3a9f5c 100644 <nl> - - - a / src / antlr / Parser . g <nl> + + + b / src / antlr / Parser . g <nl> @ @ - 181 , 6 + 181 , 22 @ @ options { <nl> } <nl> } <nl> <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / Recovery methods are overridden to avoid wasting work on recovering from errors when the result will be <nl> + / / ignored anyway . <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + <nl> + @ Override <nl> + protected Object recoverFromMismatchedToken ( IntStream input , int ttype , BitSet follow ) throws RecognitionException <nl> + { <nl> + throw new MismatchedTokenException ( ttype , input ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void recover ( IntStream input , RecognitionException re ) <nl> + { <nl> + / / Do nothing . <nl> + } <nl> } <nl> <nl> / * * STATEMENTS * * / <nl> @ @ - 411 , 12 + 427 , 12 @ @ updateStatement returns [ UpdateStatement . ParsedUpdate expr ] <nl> K _ WHERE wclause = whereClause <nl> ( K _ IF ( K _ EXISTS { ifExists = true ; } | conditions = updateConditions ) ) ? <nl> { <nl> - return new UpdateStatement . ParsedUpdate ( cf , <nl> - attrs , <nl> - operations , <nl> - wclause . build ( ) , <nl> - conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , <nl> - ifExists ) ; <nl> + $ expr = new UpdateStatement . ParsedUpdate ( cf , <nl> + attrs , <nl> + operations , <nl> + wclause . build ( ) , <nl> + conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , <nl> + ifExists ) ; <nl> } <nl> ; <nl> <nl> @ @ - 445 , 12 + 461 , 12 @ @ deleteStatement returns [ DeleteStatement . Parsed expr ] <nl> K _ WHERE wclause = whereClause <nl> ( K _ IF ( K _ EXISTS { ifExists = true ; } | conditions = updateConditions ) ) ? <nl> { <nl> - return new DeleteStatement . Parsed ( cf , <nl> - attrs , <nl> - columnDeletions , <nl> - wclause . build ( ) , <nl> - conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , <nl> - ifExists ) ; <nl> + $ expr = new DeleteStatement . Parsed ( cf , <nl> + attrs , <nl> + columnDeletions , <nl> + wclause . build ( ) , <nl> + conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , <nl> + ifExists ) ; <nl> } <nl> ; <nl> <nl> @ @ - 506 , 7 + 522 , 7 @ @ batchStatement returns [ BatchStatement . Parsed expr ] <nl> ( s = batchStatementObjective ' ; ' ? { statements . add ( s ) ; } ) * <nl> K _ APPLY K _ BATCH <nl> { <nl> - return new BatchStatement . Parsed ( type , attrs , statements ) ; <nl> + $ expr = new BatchStatement . Parsed ( type , attrs , statements ) ; <nl> } <nl> ; <nl> <nl> @ @ - 1197 , 12 + 1213 , 12 @ @ columnFamilyName returns [ CFName name ] <nl> ; <nl> <nl> userTypeName returns [ UTName name ] <nl> - : ( ks = noncol _ ident ' . ' ) ? ut = non _ type _ ident { return new UTName ( ks , ut ) ; } <nl> + : ( ks = noncol _ ident ' . ' ) ? ut = non _ type _ ident { $ name = new UTName ( ks , ut ) ; } <nl> ; <nl> <nl> userOrRoleName returns [ RoleName name ] <nl> - @ init { $ name = new RoleName ( ) ; } <nl> - : roleName [ name ] { return $ name ; } <nl> + @ init { RoleName role = new RoleName ( ) ; } <nl> + : roleName [ role ] { $ name = role ; } <nl> ; <nl> <nl> ksName [ KeyspaceElementName name ] <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java <nl> index 13c4685 . . 4b76dbc 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ public class CqlParserTest <nl> SyntaxErrorCounter firstCounter = new SyntaxErrorCounter ( ) ; <nl> SyntaxErrorCounter secondCounter = new SyntaxErrorCounter ( ) ; <nl> <nl> - CharStream stream = new ANTLRStringStream ( " SELECT * FORM users " ) ; <nl> + CharStream stream = new ANTLRStringStream ( " SELECT * FORM FROM test " ) ; <nl> CqlLexer lexer = new CqlLexer ( stream ) ; <nl> <nl> TokenStream tokenStream = new CommonTokenStream ( lexer ) ; <nl> @ @ - 44 , 11 + 44 , 14 @ @ public class CqlParserTest <nl> parser . addErrorListener ( firstCounter ) ; <nl> parser . addErrorListener ( secondCounter ) ; <nl> <nl> - parser . query ( ) ; <nl> + / / By default CqlParser should recover from the syntax error by removing FORM <nl> + / / but as recoverFromMismatchedToken and recover have been overloaded , it will not <nl> + / / and the returned ParsedStatement will be null . <nl> + assertNull ( parser . query ( ) ) ; <nl> <nl> - / / ANTLR 3 . 5 reports 2 errors in the sentence above ( missing FROM and missing EOF ) . <nl> - assertTrue ( firstCounter . count > 0 ) ; <nl> - assertTrue ( secondCounter . count > 0 ) ; <nl> + / / Only one error must be reported ( mismatched : FORM ) . <nl> + assertEquals ( 1 , firstCounter . count ) ; <nl> + assertEquals ( 1 , secondCounter . count ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 68 , 7 + 71 , 7 @ @ public class CqlParserTest <nl> <nl> parser . query ( ) ; <nl> <nl> - assertTrue ( firstCounter . count > 0 ) ; <nl> + assertEquals ( 1 , firstCounter . count ) ; <nl> assertEquals ( 0 , secondCounter . count ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> index 49ce6f3 . . 26f9210 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java <nl> @ @ - 1381 , 14 + 1381 , 14 @ @ public class AggregationTest extends CQLTester <nl> " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + <nl> " INITCOND 1 " ) ; <nl> <nl> - assertInvalidMessage ( " missing EOF " , / / specifying a function using " keyspace . functionname " is a syntax error <nl> + assertInvalidMessage ( " expecting EOF " , / / specifying a function using " keyspace . functionname " is a syntax error <nl> " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + <nl> " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> " STYPE " + type + " " + <nl> " FINALFUNC " + fFinalWrong + ' ' + <nl> " INITCOND 1 " ) ; <nl> <nl> - assertInvalidMessage ( " missing EOF " , / / specifying a function using " keyspace . functionname " is a syntax error <nl> + assertInvalidMessage ( " expecting EOF " , / / specifying a function using " keyspace . functionname " is a syntax error <nl> " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + <nl> " SFUNC " + shortFunctionName ( fState ) + ' ' + <nl> " STYPE " + type + ' ' +
NEAREST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index fc401b8 . . cc3c18e 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 14 , 6 + 14 , 8 @ @ by version X , but the inverse is not necessarily the case . ) <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> + - Compression is enabled by default on newly created ColumnFamilies <nl> + ( and unchanged for ColumnFamilies created prior to upgrading ) . <nl> - The KsDef . replication _ factor field ( deprecated since 0 . 8 ) has <nl> been removed . Older clients will need to be updated to be able <nl> to continue to created and update keyspaces . <nl> @ @ - 59 , 6 + 61 , 7 @ @ Features <nl> - Hadoop : a new BulkOutputFormat is included which will directly write <nl> SSTables locally and then stream them into the cluster . <nl> - Hadoop : KeyRange . filter is now supported with ColumnFamilyInputFormat <nl> + - Hadoop wide row mode added to ColumnFamilyInputFormat <nl> - The bulk loader is not longer a fat client ; it can be run from an <nl> existing machine in a cluster . <nl> - A new write survey mode has been added , similar to bootstrap ( enabled via <nl> @ @ - 69 , 6 + 72 , 7 @ @ Features <nl> threshold . <nl> - Off - heap caches no longer require JNA . <nl> - Streaming is now multithreaded . <nl> + - Compactions may now be aborted via JMX or nodetool . <nl> <nl> <nl> 1 . 0 . 8

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 00ff1eb . . 2f517e0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Exit query parsing upon first error ( CASSANDRA - 12598 ) 
 * Fix cassandra - stress to use single seed in UUID generation ( CASSANDRA - 12729 ) 
 * CQLSSTableWriter does not allow Update statement ( CASSANDRA - 12450 ) 
 * Config class uses boxed types but DD exposes primitive types ( CASSANDRA - 12199 ) 
 diff - - git a / src / antlr / Cql . g b / src / antlr / Cql . g 
 index 61bdc43 . . a11f2fd 100644 
 - - - a / src / antlr / Cql . g 
 + + + b / src / antlr / Cql . g 
 @ @ - 73 , 6 + 73 , 23 @ @ import Parser , Lexer ; 
 { 
 gParser . addRecognitionError ( msg ) ; 
 } 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Recovery methods are overridden to avoid wasting work on recovering from errors when the result will be 
 + / / ignored anyway . 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + @ Override 
 + protected Object recoverFromMismatchedToken ( IntStream input , int ttype , BitSet follow ) throws RecognitionException 
 + { 
 + throw new MismatchedTokenException ( ttype , input ) ; 
 + } 
 + 
 + @ Override 
 + public void recover ( IntStream input , RecognitionException re ) 
 + { 
 + / / Do nothing . 
 + } 
 } 
 
 @ lexer : : header { 
 diff - - git a / src / antlr / Parser . g b / src / antlr / Parser . g 
 index 4fa27a0 . . b3a9f5c 100644 
 - - - a / src / antlr / Parser . g 
 + + + b / src / antlr / Parser . g 
 @ @ - 181 , 6 + 181 , 22 @ @ options { 
 } 
 } 
 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / Recovery methods are overridden to avoid wasting work on recovering from errors when the result will be 
 + / / ignored anyway . 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + 
 + @ Override 
 + protected Object recoverFromMismatchedToken ( IntStream input , int ttype , BitSet follow ) throws RecognitionException 
 + { 
 + throw new MismatchedTokenException ( ttype , input ) ; 
 + } 
 + 
 + @ Override 
 + public void recover ( IntStream input , RecognitionException re ) 
 + { 
 + / / Do nothing . 
 + } 
 } 
 
 / * * STATEMENTS * * / 
 @ @ - 411 , 12 + 427 , 12 @ @ updateStatement returns [ UpdateStatement . ParsedUpdate expr ] 
 K _ WHERE wclause = whereClause 
 ( K _ IF ( K _ EXISTS { ifExists = true ; } | conditions = updateConditions ) ) ? 
 { 
 - return new UpdateStatement . ParsedUpdate ( cf , 
 - attrs , 
 - operations , 
 - wclause . build ( ) , 
 - conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , 
 - ifExists ) ; 
 + $ expr = new UpdateStatement . ParsedUpdate ( cf , 
 + attrs , 
 + operations , 
 + wclause . build ( ) , 
 + conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , 
 + ifExists ) ; 
 } 
 ; 
 
 @ @ - 445 , 12 + 461 , 12 @ @ deleteStatement returns [ DeleteStatement . Parsed expr ] 
 K _ WHERE wclause = whereClause 
 ( K _ IF ( K _ EXISTS { ifExists = true ; } | conditions = updateConditions ) ) ? 
 { 
 - return new DeleteStatement . Parsed ( cf , 
 - attrs , 
 - columnDeletions , 
 - wclause . build ( ) , 
 - conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , 
 - ifExists ) ; 
 + $ expr = new DeleteStatement . Parsed ( cf , 
 + attrs , 
 + columnDeletions , 
 + wclause . build ( ) , 
 + conditions = = null ? Collections . < Pair < ColumnDefinition . Raw , ColumnCondition . Raw > > emptyList ( ) : conditions , 
 + ifExists ) ; 
 } 
 ; 
 
 @ @ - 506 , 7 + 522 , 7 @ @ batchStatement returns [ BatchStatement . Parsed expr ] 
 ( s = batchStatementObjective ' ; ' ? { statements . add ( s ) ; } ) * 
 K _ APPLY K _ BATCH 
 { 
 - return new BatchStatement . Parsed ( type , attrs , statements ) ; 
 + $ expr = new BatchStatement . Parsed ( type , attrs , statements ) ; 
 } 
 ; 
 
 @ @ - 1197 , 12 + 1213 , 12 @ @ columnFamilyName returns [ CFName name ] 
 ; 
 
 userTypeName returns [ UTName name ] 
 - : ( ks = noncol _ ident ' . ' ) ? ut = non _ type _ ident { return new UTName ( ks , ut ) ; } 
 + : ( ks = noncol _ ident ' . ' ) ? ut = non _ type _ ident { $ name = new UTName ( ks , ut ) ; } 
 ; 
 
 userOrRoleName returns [ RoleName name ] 
 - @ init { $ name = new RoleName ( ) ; } 
 - : roleName [ name ] { return $ name ; } 
 + @ init { RoleName role = new RoleName ( ) ; } 
 + : roleName [ role ] { $ name = role ; } 
 ; 
 
 ksName [ KeyspaceElementName name ] 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java 
 index 13c4685 . . 4b76dbc 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CqlParserTest . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public class CqlParserTest 
 SyntaxErrorCounter firstCounter = new SyntaxErrorCounter ( ) ; 
 SyntaxErrorCounter secondCounter = new SyntaxErrorCounter ( ) ; 
 
 - CharStream stream = new ANTLRStringStream ( " SELECT * FORM users " ) ; 
 + CharStream stream = new ANTLRStringStream ( " SELECT * FORM FROM test " ) ; 
 CqlLexer lexer = new CqlLexer ( stream ) ; 
 
 TokenStream tokenStream = new CommonTokenStream ( lexer ) ; 
 @ @ - 44 , 11 + 44 , 14 @ @ public class CqlParserTest 
 parser . addErrorListener ( firstCounter ) ; 
 parser . addErrorListener ( secondCounter ) ; 
 
 - parser . query ( ) ; 
 + / / By default CqlParser should recover from the syntax error by removing FORM 
 + / / but as recoverFromMismatchedToken and recover have been overloaded , it will not 
 + / / and the returned ParsedStatement will be null . 
 + assertNull ( parser . query ( ) ) ; 
 
 - / / ANTLR 3 . 5 reports 2 errors in the sentence above ( missing FROM and missing EOF ) . 
 - assertTrue ( firstCounter . count > 0 ) ; 
 - assertTrue ( secondCounter . count > 0 ) ; 
 + / / Only one error must be reported ( mismatched : FORM ) . 
 + assertEquals ( 1 , firstCounter . count ) ; 
 + assertEquals ( 1 , secondCounter . count ) ; 
 } 
 
 @ Test 
 @ @ - 68 , 7 + 71 , 7 @ @ public class CqlParserTest 
 
 parser . query ( ) ; 
 
 - assertTrue ( firstCounter . count > 0 ) ; 
 + assertEquals ( 1 , firstCounter . count ) ; 
 assertEquals ( 0 , secondCounter . count ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 index 49ce6f3 . . 26f9210 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / operations / AggregationTest . java 
 @ @ - 1381 , 14 + 1381 , 14 @ @ public class AggregationTest extends CQLTester 
 " FINALFUNC " + shortFunctionName ( fFinal ) + ' ' + 
 " INITCOND 1 " ) ; 
 
 - assertInvalidMessage ( " missing EOF " , / / specifying a function using " keyspace . functionname " is a syntax error 
 + assertInvalidMessage ( " expecting EOF " , / / specifying a function using " keyspace . functionname " is a syntax error 
 " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + 
 " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 " STYPE " + type + " " + 
 " FINALFUNC " + fFinalWrong + ' ' + 
 " INITCOND 1 " ) ; 
 
 - assertInvalidMessage ( " missing EOF " , / / specifying a function using " keyspace . functionname " is a syntax error 
 + assertInvalidMessage ( " expecting EOF " , / / specifying a function using " keyspace . functionname " is a syntax error 
 " CREATE AGGREGATE " + KEYSPACE _ PER _ TEST + " . test _ wrong _ ks ( int ) " + 
 " SFUNC " + shortFunctionName ( fState ) + ' ' + 
 " STYPE " + type + ' ' +

NEAREST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index fc401b8 . . cc3c18e 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 14 , 6 + 14 , 8 @ @ by version X , but the inverse is not necessarily the case . ) 
 
 Upgrading 
 - - - - - - - - - 
 + - Compression is enabled by default on newly created ColumnFamilies 
 + ( and unchanged for ColumnFamilies created prior to upgrading ) . 
 - The KsDef . replication _ factor field ( deprecated since 0 . 8 ) has 
 been removed . Older clients will need to be updated to be able 
 to continue to created and update keyspaces . 
 @ @ - 59 , 6 + 61 , 7 @ @ Features 
 - Hadoop : a new BulkOutputFormat is included which will directly write 
 SSTables locally and then stream them into the cluster . 
 - Hadoop : KeyRange . filter is now supported with ColumnFamilyInputFormat 
 + - Hadoop wide row mode added to ColumnFamilyInputFormat 
 - The bulk loader is not longer a fat client ; it can be run from an 
 existing machine in a cluster . 
 - A new write survey mode has been added , similar to bootstrap ( enabled via 
 @ @ - 69 , 6 + 72 , 7 @ @ Features 
 threshold . 
 - Off - heap caches no longer require JNA . 
 - Streaming is now multithreaded . 
 + - Compactions may now be aborted via JMX or nodetool . 
 
 
 1 . 0 . 8
