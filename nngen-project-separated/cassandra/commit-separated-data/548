BLEU SCORE: 0.02383853510228548

TEST MSG: add method to get size of endpoints to TokenMetadata
GENERATED MSG: merge from 0 . 7

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 4aac593 . . 3c49a8a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 12 <nl> + * add method to get size of endpoints to TokenMetadata ( CASSANDRA - 12999 ) <nl> * Fix primary index calculation for SASI ( CASSANDRA - 12910 ) <nl> * Expose time spent waiting in thread pool queue ( CASSANDRA - 8398 ) <nl> * Conditionally update index built status to avoid unnecessary flushes ( CASSANDRA - 12969 ) <nl> diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> index 9cb3b10 . . d23103c 100644 <nl> - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java <nl> @ @ - 187 , 7 + 187 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean <nl> <nl> / / rate limit is in bytes per second . Uses Double . MAX _ VALUE if disabled ( set to 0 in cassandra . yaml ) . <nl> / / max rate is scaled by the number of nodes in the cluster ( same as for HHOM - see CASSANDRA - 5272 ) . <nl> - int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) ; <nl> + int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getSizeOfAllEndpoints ( ) ; <nl> if ( endpointsCount < = 0 ) <nl> { <nl> logger . trace ( " Replay cancelled as there are no peers in the ring . " ) ; <nl> diff - - git a / src / java / org / apache / cassandra / dht / RangeStreamer . java b / src / java / org / apache / cassandra / dht / RangeStreamer . java <nl> index fd33d19 . . 504ef7e 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / RangeStreamer . java <nl> + + + b / src / java / org / apache / cassandra / dht / RangeStreamer . java <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class RangeStreamer <nl> AbstractReplicationStrategy strat = Keyspace . open ( keyspaceName ) . getReplicationStrategy ( ) ; <nl> return useStrictConsistency <nl> & & tokens ! = null <nl> - & & metadata . getAllEndpoints ( ) . size ( ) ! = strat . getReplicationFactor ( ) ; <nl> + & & metadata . getSizeOfAllEndpoints ( ) ! = strat . getReplicationFactor ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java b / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java <nl> index d7ccf81 . . afe7c08 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java <nl> @ @ - 199 , 7 + 199 , 7 @ @ final class HintsDispatchExecutor <nl> / / the goal is to bound maximum hints traffic going towards a particular node from the rest of the cluster , <nl> / / not total outgoing hints traffic from this node - this is why the rate limiter is not shared between <nl> / / all the dispatch tasks ( as there will be at most one dispatch task for a particular host id at a time ) . <nl> - int nodesCount = Math . max ( 1 , StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) - 1 ) ; <nl> + int nodesCount = Math . max ( 1 , StorageService . instance . getTokenMetadata ( ) . getSizeOfAllEndpoints ( ) - 1 ) ; <nl> int throttleInKB = DatabaseDescriptor . getHintedHandoffThrottleInKB ( ) / nodesCount ; <nl> this . rateLimiter = RateLimiter . create ( throttleInKB = = 0 ? Double . MAX _ VALUE : throttleInKB * 1024 ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> index 8712916 . . 50d9744 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java <nl> @ @ - 254 , 7 + 254 , 7 @ @ public class TokenMetadata <nl> UUID storedId = endpointToHostIdMap . get ( endpoint ) ; <nl> if ( ( storedId ! = null ) & & ( ! storedId . equals ( hostId ) ) ) <nl> logger . warn ( " Changing { } ' s host ID from { } to { } " , endpoint , storedId , hostId ) ; <nl> - <nl> + <nl> endpointToHostIdMap . forcePut ( endpoint , hostId ) ; <nl> } <nl> finally <nl> @ @ - 999 , 6 + 999 , 16 @ @ public class TokenMetadata <nl> } <nl> } <nl> <nl> + / * * <nl> + * We think the size ( ) operation is safe enough , so we call it without the read lock on purpose . <nl> + * <nl> + * see CASSANDRA - 12999 <nl> + * / <nl> + public int getSizeOfAllEndpoints ( ) <nl> + { <nl> + return endpointToHostIdMap . size ( ) ; <nl> + } <nl> + <nl> / * * caller should not modify leavingEndpoints * / <nl> public Set < InetAddress > getLeavingEndpoints ( ) <nl> { <nl> @ @ - 1014 , 6 + 1024 , 16 @ @ public class TokenMetadata <nl> } <nl> <nl> / * * <nl> + * We think the size ( ) operation is safe enough , so we call it without the read lock on purpose . <nl> + * <nl> + * see CASSANDRA - 12999 <nl> + * / <nl> + public int getSizeOfLeavingEndpoints ( ) <nl> + { <nl> + return leavingEndpoints . size ( ) ; <nl> + } <nl> + <nl> + / * * <nl> * Endpoints which are migrating to the new tokens <nl> * @ return set of addresses of moving endpoints <nl> * / <nl> @ @ - 1030 , 6 + 1050 , 16 @ @ public class TokenMetadata <nl> } <nl> } <nl> <nl> + / * * <nl> + * We think the size ( ) operation is safe enough , so we call it without the read lock on purpose . <nl> + * <nl> + * see CASSANDRA - 12999 <nl> + * / <nl> + public int getSizeOfMovingEndpoints ( ) <nl> + { <nl> + return movingEndpoints . size ( ) ; <nl> + } <nl> + <nl> public static int firstTokenIndex ( final ArrayList < Token > ring , Token start , boolean insertMin ) <nl> { <nl> assert ring . size ( ) > 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index a53187f . . 9bf5679 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 881 , 8 + 881 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> if ( useStrictConsistency & & ! allowSimultaneousMoves ( ) & & <nl> ( <nl> tokenMetadata . getBootstrapTokens ( ) . valueSet ( ) . size ( ) > 0 | | <nl> - tokenMetadata . getLeavingEndpoints ( ) . size ( ) > 0 | | <nl> - tokenMetadata . getMovingEndpoints ( ) . size ( ) > 0 <nl> + tokenMetadata . getSizeOfLeavingEndpoints ( ) > 0 | | <nl> + tokenMetadata . getSizeOfMovingEndpoints ( ) > 0 <nl> ) ) <nl> { <nl> throw new UnsupportedOperationException ( " Other bootstrapping / leaving / moving nodes detected , cannot bootstrap while cassandra . consistent . rangemovement is true " ) ; <nl> @ @ - 4209 , 7 + 4209 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> * / <nl> public void forceRemoveCompletion ( ) <nl> { <nl> - if ( ! replicatingNodes . isEmpty ( ) | | ! tokenMetadata . getLeavingEndpoints ( ) . isEmpty ( ) ) <nl> + if ( ! replicatingNodes . isEmpty ( ) | | tokenMetadata . getSizeOfLeavingEndpoints ( ) > 0 ) <nl> { <nl> logger . warn ( " Removal not confirmed for for { } " , StringUtils . join ( this . replicatingNodes , " , " ) ) ; <nl> for ( InetAddress endpoint : tokenMetadata . getLeavingEndpoints ( ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java b / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java <nl> index 91c83bd . . e5a86fd 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . ArrayList ; <nl> import java . util . Map ; <nl> + import java . util . UUID ; <nl> <nl> import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 288 , 4 + 289 , 42 @ @ public class TokenMetadataTest <nl> assertTrue ( racks . get ( DATA _ CENTER ) . get ( RACK1 ) . contains ( first ) ) ; <nl> assertTrue ( racks . get ( DATA _ CENTER ) . get ( RACK2 ) . contains ( second ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testEndpointSizes ( ) throws UnknownHostException <nl> + { <nl> + final InetAddress first = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; <nl> + final InetAddress second = InetAddress . getByName ( " 127 . 0 . 0 . 6 " ) ; <nl> + <nl> + tmd . updateNormalToken ( token ( ONE ) , first ) ; <nl> + tmd . updateNormalToken ( token ( SIX ) , second ) ; <nl> + <nl> + TokenMetadata tokenMetadata = tmd . cloneOnlyTokenMap ( ) ; <nl> + assertNotNull ( tokenMetadata ) ; <nl> + <nl> + tokenMetadata . updateHostId ( UUID . randomUUID ( ) , first ) ; <nl> + tokenMetadata . updateHostId ( UUID . randomUUID ( ) , second ) ; <nl> + <nl> + assertEquals ( 2 , tokenMetadata . getSizeOfAllEndpoints ( ) ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; <nl> + <nl> + tokenMetadata . addLeavingEndpoint ( first ) ; <nl> + assertEquals ( 1 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; <nl> + <nl> + tokenMetadata . removeEndpoint ( first ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; <nl> + assertEquals ( 1 , tokenMetadata . getSizeOfAllEndpoints ( ) ) ; <nl> + <nl> + tokenMetadata . addMovingEndpoint ( token ( SIX ) , second ) ; <nl> + assertEquals ( 1 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; <nl> + <nl> + tokenMetadata . removeFromMoving ( second ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; <nl> + <nl> + tokenMetadata . removeEndpoint ( second ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfAllEndpoints ( ) ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; <nl> + assertEquals ( 0 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> index 19f0b7a . . 754def9 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> @ @ - 556 , 7 + 556 , 7 @ @ public class LeaveAndBootstrapTest <nl> Gossiper . instance . injectApplicationState ( hosts . get ( 2 ) , ApplicationState . TOKENS , valueFactory . tokens ( Collections . singleton ( keyTokens . get ( 2 ) ) ) ) ; <nl> ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( keyTokens . get ( 2 ) ) ) ) ; <nl> <nl> - assertTrue ( tmd . getLeavingEndpoints ( ) . isEmpty ( ) ) ; <nl> + assertTrue ( tmd . getSizeOfLeavingEndpoints ( ) = = 0 ) ; <nl> assertEquals ( keyTokens . get ( 2 ) , tmd . getToken ( hosts . get ( 2 ) ) ) ; <nl> <nl> / / node 3 goes through leave and left and then jumps to normal at its new token <nl> @ @ - 567 , 7 + 567 , 7 @ @ public class LeaveAndBootstrapTest <nl> ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( keyTokens . get ( 4 ) ) ) ) ; <nl> <nl> assertTrue ( tmd . getBootstrapTokens ( ) . isEmpty ( ) ) ; <nl> - assertTrue ( tmd . getLeavingEndpoints ( ) . isEmpty ( ) ) ; <nl> + assertTrue ( tmd . getSizeOfLeavingEndpoints ( ) = = 0 ) ; <nl> assertEquals ( keyTokens . get ( 4 ) , tmd . getToken ( hosts . get ( 2 ) ) ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / service / MoveTest . java b / test / unit / org / apache / cassandra / service / MoveTest . java <nl> index 05757c0 . . c6dce70 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / MoveTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / MoveTest . java <nl> @ @ - 978 , 7 + 978 , 7 @ @ public class MoveTest <nl> Gossiper . instance . injectApplicationState ( hosts . get ( 2 ) , ApplicationState . TOKENS , valueFactory . tokens ( Collections . singleton ( newToken ) ) ) ; <nl> ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( newToken ) ) ) ; <nl> <nl> - assertTrue ( tmd . getMovingEndpoints ( ) . isEmpty ( ) ) ; <nl> + assertTrue ( tmd . getSizeOfMovingEndpoints ( ) = = 0 ) ; <nl> assertEquals ( newToken , tmd . getToken ( hosts . get ( 2 ) ) ) ; <nl> <nl> newToken = positionToken ( 8 ) ; <nl> @ @ - 988 , 7 + 988 , 7 @ @ public class MoveTest <nl> ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( newToken ) ) ) ; <nl> <nl> assertTrue ( tmd . getBootstrapTokens ( ) . isEmpty ( ) ) ; <nl> - assertTrue ( tmd . getMovingEndpoints ( ) . isEmpty ( ) ) ; <nl> + assertTrue ( tmd . getSizeOfMovingEndpoints ( ) = = 0 ) ; <nl> assertEquals ( newToken , tmd . getToken ( hosts . get ( 2 ) ) ) ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / service / RemoveTest . java b / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> index 0ef9b9c . . f43c4f4 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / RemoveTest . java <nl> @ @ - 163 , 7 + 163 , 7 @ @ public class RemoveTest <nl> Thread . sleep ( 1000 ) ; / / make sure removal is waiting for confirmation <nl> <nl> assertTrue ( tmd . isLeaving ( removalhost ) ) ; <nl> - assertEquals ( 1 , tmd . getLeavingEndpoints ( ) . size ( ) ) ; <nl> + assertEquals ( 1 , tmd . getSizeOfLeavingEndpoints ( ) ) ; <nl> <nl> for ( InetAddress host : hosts ) <nl> { <nl> @ @ - 174 , 6 + 174 , 6 @ @ public class RemoveTest <nl> remover . join ( ) ; <nl> <nl> assertTrue ( success . get ( ) ) ; <nl> - assertTrue ( tmd . getLeavingEndpoints ( ) . isEmpty ( ) ) ; <nl> + assertTrue ( tmd . getSizeOfLeavingEndpoints ( ) = = 0 ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eec904a . . 982454c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 59 , 6 + 59 , 8 @ @ <nl> the old ones ( CASSANDRA - 1644 ) <nl> * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) <nl> * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM <nl> + * cli truncate support ( CASSANDRA - 1653 ) <nl> + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g <nl> index e59c608 . . a9229ee 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / Cli . g <nl> + + + b / src / java / org / apache / cassandra / cli / Cli . g <nl> @ @ - 55 , 6 + 55 , 7 @ @ tokens { <nl> NODE _ UPDATE _ KEYSPACE ; <nl> NODE _ UPDATE _ COLUMN _ FAMILY ; <nl> NODE _ LIST ; <nl> + NODE _ TRUNCATE ; <nl> <nl> / / Internal Nodes . <nl> NODE _ COLUMN _ ACCESS ; <nl> @ @ - 123 , 6 + 124 , 7 @ @ statement <nl> | setStatement <nl> | showStatement <nl> | listStatement <nl> + | truncateStatement <nl> | - > ^ ( NODE _ NO _ OP ) <nl> ; <nl> <nl> @ @ - 174 , 6 + 176 , 8 @ @ helpStatement <nl> - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) <nl> | K _ HELP K _ LIST <nl> - > ^ ( NODE _ HELP NODE _ LIST ) <nl> + | K _ HELP K _ TRUNCATE <nl> + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) <nl> | K _ HELP <nl> - > ^ ( NODE _ HELP ) <nl> | ' ? ' <nl> @ @ - 231 , 6 + 235 , 11 @ @ listStatement <nl> - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) <nl> ; <nl> <nl> + truncateStatement <nl> + : K _ TRUNCATE columnFamily <nl> + - > ^ ( NODE _ TRUNCATE columnFamily ) <nl> + ; <nl> + <nl> showClusterName <nl> : K _ SHOW K _ CLUSTER K _ NAME <nl> - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) <nl> @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; <nl> K _ UPDATE : ' UPDATE ' ; <nl> K _ LIST : ' LIST ' ; <nl> K _ LIMIT : ' LIMIT ' ; <nl> + K _ TRUNCATE : ' TRUNCATE ' ; <nl> <nl> / / private syntactic rules <nl> fragment <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index b6ace98 . . b63105a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp <nl> case CliParser . NODE _ LIST : <nl> executeList ( tree ) ; <nl> break ; <nl> + case CliParser . NODE _ TRUNCATE : <nl> + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; <nl> + break ; <nl> case CliParser . NODE _ NO _ OP : <nl> / / comment lines come here ; they are treated as no ops . <nl> break ; <nl> @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp <nl> printSliceList ( columnFamilyDef , keySlices ) ; <nl> } <nl> <nl> + / / TRUNCATE < columnFamily > <nl> + private void executeTruncate ( String columnFamily ) <nl> + { <nl> + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) <nl> + return ; <nl> + <nl> + / / getting CfDef , it will fail if there is no such column family in current keySpace . <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + try <nl> + { <nl> + thriftClient . truncate ( cfDef . getName ( ) ) ; <nl> + sessionState . out . println ( columnFamily + " truncated . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( e . getWhy ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / / SHOW API VERSION <nl> private void executeShowVersion ( ) throws TException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> index f541fe5 . . b033d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor <nl> " help set " , <nl> " help del " , <nl> " help count " , <nl> + " help list " , <nl> + " help truncate " <nl> } ; <nl> private static String [ ] keyspaceCommands = { <nl> " get " , <nl> " set " , <nl> " count " , <nl> - " del " <nl> + " del " , <nl> + " list " , <nl> + " truncate " <nl> } ; <nl> <nl> public CliCompleter ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index 7c512e2 . . db6a779 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { <nl> state . out . println ( " list Users [ j : ] limit 40 " ) ; <nl> break ; <nl> <nl> + case CliParser . NODE _ TRUNCATE : <nl> + state . out . println ( " truncate < column _ family > " ) ; <nl> + state . out . println ( " Truncate specified column family . \ n " ) ; <nl> + state . out . println ( " example : " ) ; <nl> + state . out . println ( " truncate Category " ) ; <nl> + break ; <nl> + <nl> default : <nl> state . out . println ( " ? " ) ; <nl> break ; <nl> @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { <nl> state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; <nl> - state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; <nl> + state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : ] " ) ; <nl> state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 24a3de0 . . eddcafd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase <nl> " list CF3 [ h : ] " , <nl> " list CF3 limit 10 " , <nl> " list CF3 [ h : g ] limit 10 " , <nl> + " truncate CF1 " , <nl> " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , <nl> " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " <nl> } ; <nl> @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase <nl> assertTrue ( result . startsWith ( " = > ( column = " ) ) ; <nl> } <nl> } <nl> + else if ( statement . startsWith ( " truncate " ) ) <nl> + { <nl> + assertTrue ( result . contains ( " truncated . " ) ) ; <nl> + } <nl> <nl> outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time <nl> errStream . reset ( ) ; / / no errors to the end user .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 4aac593 . . 3c49a8a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 12 
 + * add method to get size of endpoints to TokenMetadata ( CASSANDRA - 12999 ) 
 * Fix primary index calculation for SASI ( CASSANDRA - 12910 ) 
 * Expose time spent waiting in thread pool queue ( CASSANDRA - 8398 ) 
 * Conditionally update index built status to avoid unnecessary flushes ( CASSANDRA - 12969 ) 
 diff - - git a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 index 9cb3b10 . . d23103c 100644 
 - - - a / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 + + + b / src / java / org / apache / cassandra / batchlog / BatchlogManager . java 
 @ @ - 187 , 7 + 187 , 7 @ @ public class BatchlogManager implements BatchlogManagerMBean 
 
 / / rate limit is in bytes per second . Uses Double . MAX _ VALUE if disabled ( set to 0 in cassandra . yaml ) . 
 / / max rate is scaled by the number of nodes in the cluster ( same as for HHOM - see CASSANDRA - 5272 ) . 
 - int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) ; 
 + int endpointsCount = StorageService . instance . getTokenMetadata ( ) . getSizeOfAllEndpoints ( ) ; 
 if ( endpointsCount < = 0 ) 
 { 
 logger . trace ( " Replay cancelled as there are no peers in the ring . " ) ; 
 diff - - git a / src / java / org / apache / cassandra / dht / RangeStreamer . java b / src / java / org / apache / cassandra / dht / RangeStreamer . java 
 index fd33d19 . . 504ef7e 100644 
 - - - a / src / java / org / apache / cassandra / dht / RangeStreamer . java 
 + + + b / src / java / org / apache / cassandra / dht / RangeStreamer . java 
 @ @ - 202 , 7 + 202 , 7 @ @ public class RangeStreamer 
 AbstractReplicationStrategy strat = Keyspace . open ( keyspaceName ) . getReplicationStrategy ( ) ; 
 return useStrictConsistency 
 & & tokens ! = null 
 - & & metadata . getAllEndpoints ( ) . size ( ) ! = strat . getReplicationFactor ( ) ; 
 + & & metadata . getSizeOfAllEndpoints ( ) ! = strat . getReplicationFactor ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java b / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java 
 index d7ccf81 . . afe7c08 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsDispatchExecutor . java 
 @ @ - 199 , 7 + 199 , 7 @ @ final class HintsDispatchExecutor 
 / / the goal is to bound maximum hints traffic going towards a particular node from the rest of the cluster , 
 / / not total outgoing hints traffic from this node - this is why the rate limiter is not shared between 
 / / all the dispatch tasks ( as there will be at most one dispatch task for a particular host id at a time ) . 
 - int nodesCount = Math . max ( 1 , StorageService . instance . getTokenMetadata ( ) . getAllEndpoints ( ) . size ( ) - 1 ) ; 
 + int nodesCount = Math . max ( 1 , StorageService . instance . getTokenMetadata ( ) . getSizeOfAllEndpoints ( ) - 1 ) ; 
 int throttleInKB = DatabaseDescriptor . getHintedHandoffThrottleInKB ( ) / nodesCount ; 
 this . rateLimiter = RateLimiter . create ( throttleInKB = = 0 ? Double . MAX _ VALUE : throttleInKB * 1024 ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / TokenMetadata . java b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 index 8712916 . . 50d9744 100644 
 - - - a / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 + + + b / src / java / org / apache / cassandra / locator / TokenMetadata . java 
 @ @ - 254 , 7 + 254 , 7 @ @ public class TokenMetadata 
 UUID storedId = endpointToHostIdMap . get ( endpoint ) ; 
 if ( ( storedId ! = null ) & & ( ! storedId . equals ( hostId ) ) ) 
 logger . warn ( " Changing { } ' s host ID from { } to { } " , endpoint , storedId , hostId ) ; 
 - 
 + 
 endpointToHostIdMap . forcePut ( endpoint , hostId ) ; 
 } 
 finally 
 @ @ - 999 , 6 + 999 , 16 @ @ public class TokenMetadata 
 } 
 } 
 
 + / * * 
 + * We think the size ( ) operation is safe enough , so we call it without the read lock on purpose . 
 + * 
 + * see CASSANDRA - 12999 
 + * / 
 + public int getSizeOfAllEndpoints ( ) 
 + { 
 + return endpointToHostIdMap . size ( ) ; 
 + } 
 + 
 / * * caller should not modify leavingEndpoints * / 
 public Set < InetAddress > getLeavingEndpoints ( ) 
 { 
 @ @ - 1014 , 6 + 1024 , 16 @ @ public class TokenMetadata 
 } 
 
 / * * 
 + * We think the size ( ) operation is safe enough , so we call it without the read lock on purpose . 
 + * 
 + * see CASSANDRA - 12999 
 + * / 
 + public int getSizeOfLeavingEndpoints ( ) 
 + { 
 + return leavingEndpoints . size ( ) ; 
 + } 
 + 
 + / * * 
 * Endpoints which are migrating to the new tokens 
 * @ return set of addresses of moving endpoints 
 * / 
 @ @ - 1030 , 6 + 1050 , 16 @ @ public class TokenMetadata 
 } 
 } 
 
 + / * * 
 + * We think the size ( ) operation is safe enough , so we call it without the read lock on purpose . 
 + * 
 + * see CASSANDRA - 12999 
 + * / 
 + public int getSizeOfMovingEndpoints ( ) 
 + { 
 + return movingEndpoints . size ( ) ; 
 + } 
 + 
 public static int firstTokenIndex ( final ArrayList < Token > ring , Token start , boolean insertMin ) 
 { 
 assert ring . size ( ) > 0 ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index a53187f . . 9bf5679 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 881 , 8 + 881 , 8 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 if ( useStrictConsistency & & ! allowSimultaneousMoves ( ) & & 
 ( 
 tokenMetadata . getBootstrapTokens ( ) . valueSet ( ) . size ( ) > 0 | | 
 - tokenMetadata . getLeavingEndpoints ( ) . size ( ) > 0 | | 
 - tokenMetadata . getMovingEndpoints ( ) . size ( ) > 0 
 + tokenMetadata . getSizeOfLeavingEndpoints ( ) > 0 | | 
 + tokenMetadata . getSizeOfMovingEndpoints ( ) > 0 
 ) ) 
 { 
 throw new UnsupportedOperationException ( " Other bootstrapping / leaving / moving nodes detected , cannot bootstrap while cassandra . consistent . rangemovement is true " ) ; 
 @ @ - 4209 , 7 + 4209 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 * / 
 public void forceRemoveCompletion ( ) 
 { 
 - if ( ! replicatingNodes . isEmpty ( ) | | ! tokenMetadata . getLeavingEndpoints ( ) . isEmpty ( ) ) 
 + if ( ! replicatingNodes . isEmpty ( ) | | tokenMetadata . getSizeOfLeavingEndpoints ( ) > 0 ) 
 { 
 logger . warn ( " Removal not confirmed for for { } " , StringUtils . join ( this . replicatingNodes , " , " ) ) ; 
 for ( InetAddress endpoint : tokenMetadata . getLeavingEndpoints ( ) ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java b / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java 
 index 91c83bd . . e5a86fd 100644 
 - - - a / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / TokenMetadataTest . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . ArrayList ; 
 import java . util . Map ; 
 + import java . util . UUID ; 
 
 import com . google . common . collect . Iterators ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 288 , 4 + 289 , 42 @ @ public class TokenMetadataTest 
 assertTrue ( racks . get ( DATA _ CENTER ) . get ( RACK1 ) . contains ( first ) ) ; 
 assertTrue ( racks . get ( DATA _ CENTER ) . get ( RACK2 ) . contains ( second ) ) ; 
 } 
 + 
 + @ Test 
 + public void testEndpointSizes ( ) throws UnknownHostException 
 + { 
 + final InetAddress first = InetAddress . getByName ( " 127 . 0 . 0 . 1 " ) ; 
 + final InetAddress second = InetAddress . getByName ( " 127 . 0 . 0 . 6 " ) ; 
 + 
 + tmd . updateNormalToken ( token ( ONE ) , first ) ; 
 + tmd . updateNormalToken ( token ( SIX ) , second ) ; 
 + 
 + TokenMetadata tokenMetadata = tmd . cloneOnlyTokenMap ( ) ; 
 + assertNotNull ( tokenMetadata ) ; 
 + 
 + tokenMetadata . updateHostId ( UUID . randomUUID ( ) , first ) ; 
 + tokenMetadata . updateHostId ( UUID . randomUUID ( ) , second ) ; 
 + 
 + assertEquals ( 2 , tokenMetadata . getSizeOfAllEndpoints ( ) ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; 
 + 
 + tokenMetadata . addLeavingEndpoint ( first ) ; 
 + assertEquals ( 1 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; 
 + 
 + tokenMetadata . removeEndpoint ( first ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; 
 + assertEquals ( 1 , tokenMetadata . getSizeOfAllEndpoints ( ) ) ; 
 + 
 + tokenMetadata . addMovingEndpoint ( token ( SIX ) , second ) ; 
 + assertEquals ( 1 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; 
 + 
 + tokenMetadata . removeFromMoving ( second ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; 
 + 
 + tokenMetadata . removeEndpoint ( second ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfAllEndpoints ( ) ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfLeavingEndpoints ( ) ) ; 
 + assertEquals ( 0 , tokenMetadata . getSizeOfMovingEndpoints ( ) ) ; 
 + } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 index 19f0b7a . . 754def9 100644 
 - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 @ @ - 556 , 7 + 556 , 7 @ @ public class LeaveAndBootstrapTest 
 Gossiper . instance . injectApplicationState ( hosts . get ( 2 ) , ApplicationState . TOKENS , valueFactory . tokens ( Collections . singleton ( keyTokens . get ( 2 ) ) ) ) ; 
 ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( keyTokens . get ( 2 ) ) ) ) ; 
 
 - assertTrue ( tmd . getLeavingEndpoints ( ) . isEmpty ( ) ) ; 
 + assertTrue ( tmd . getSizeOfLeavingEndpoints ( ) = = 0 ) ; 
 assertEquals ( keyTokens . get ( 2 ) , tmd . getToken ( hosts . get ( 2 ) ) ) ; 
 
 / / node 3 goes through leave and left and then jumps to normal at its new token 
 @ @ - 567 , 7 + 567 , 7 @ @ public class LeaveAndBootstrapTest 
 ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( keyTokens . get ( 4 ) ) ) ) ; 
 
 assertTrue ( tmd . getBootstrapTokens ( ) . isEmpty ( ) ) ; 
 - assertTrue ( tmd . getLeavingEndpoints ( ) . isEmpty ( ) ) ; 
 + assertTrue ( tmd . getSizeOfLeavingEndpoints ( ) = = 0 ) ; 
 assertEquals ( keyTokens . get ( 4 ) , tmd . getToken ( hosts . get ( 2 ) ) ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / service / MoveTest . java b / test / unit / org / apache / cassandra / service / MoveTest . java 
 index 05757c0 . . c6dce70 100644 
 - - - a / test / unit / org / apache / cassandra / service / MoveTest . java 
 + + + b / test / unit / org / apache / cassandra / service / MoveTest . java 
 @ @ - 978 , 7 + 978 , 7 @ @ public class MoveTest 
 Gossiper . instance . injectApplicationState ( hosts . get ( 2 ) , ApplicationState . TOKENS , valueFactory . tokens ( Collections . singleton ( newToken ) ) ) ; 
 ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( newToken ) ) ) ; 
 
 - assertTrue ( tmd . getMovingEndpoints ( ) . isEmpty ( ) ) ; 
 + assertTrue ( tmd . getSizeOfMovingEndpoints ( ) = = 0 ) ; 
 assertEquals ( newToken , tmd . getToken ( hosts . get ( 2 ) ) ) ; 
 
 newToken = positionToken ( 8 ) ; 
 @ @ - 988 , 7 + 988 , 7 @ @ public class MoveTest 
 ss . onChange ( hosts . get ( 2 ) , ApplicationState . STATUS , valueFactory . normal ( Collections . singleton ( newToken ) ) ) ; 
 
 assertTrue ( tmd . getBootstrapTokens ( ) . isEmpty ( ) ) ; 
 - assertTrue ( tmd . getMovingEndpoints ( ) . isEmpty ( ) ) ; 
 + assertTrue ( tmd . getSizeOfMovingEndpoints ( ) = = 0 ) ; 
 assertEquals ( newToken , tmd . getToken ( hosts . get ( 2 ) ) ) ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / service / RemoveTest . java b / test / unit / org / apache / cassandra / service / RemoveTest . java 
 index 0ef9b9c . . f43c4f4 100644 
 - - - a / test / unit / org / apache / cassandra / service / RemoveTest . java 
 + + + b / test / unit / org / apache / cassandra / service / RemoveTest . java 
 @ @ - 163 , 7 + 163 , 7 @ @ public class RemoveTest 
 Thread . sleep ( 1000 ) ; / / make sure removal is waiting for confirmation 
 
 assertTrue ( tmd . isLeaving ( removalhost ) ) ; 
 - assertEquals ( 1 , tmd . getLeavingEndpoints ( ) . size ( ) ) ; 
 + assertEquals ( 1 , tmd . getSizeOfLeavingEndpoints ( ) ) ; 
 
 for ( InetAddress host : hosts ) 
 { 
 @ @ - 174 , 6 + 174 , 6 @ @ public class RemoveTest 
 remover . join ( ) ; 
 
 assertTrue ( success . get ( ) ) ; 
 - assertTrue ( tmd . getLeavingEndpoints ( ) . isEmpty ( ) ) ; 
 + assertTrue ( tmd . getSizeOfLeavingEndpoints ( ) = = 0 ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eec904a . . 982454c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 59 , 6 + 59 , 8 @ @ 
 the old ones ( CASSANDRA - 1644 ) 
 * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) 
 * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM 
 + * cli truncate support ( CASSANDRA - 1653 ) 
 + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g 
 index e59c608 . . a9229ee 100644 
 - - - a / src / java / org / apache / cassandra / cli / Cli . g 
 + + + b / src / java / org / apache / cassandra / cli / Cli . g 
 @ @ - 55 , 6 + 55 , 7 @ @ tokens { 
 NODE _ UPDATE _ KEYSPACE ; 
 NODE _ UPDATE _ COLUMN _ FAMILY ; 
 NODE _ LIST ; 
 + NODE _ TRUNCATE ; 
 
 / / Internal Nodes . 
 NODE _ COLUMN _ ACCESS ; 
 @ @ - 123 , 6 + 124 , 7 @ @ statement 
 | setStatement 
 | showStatement 
 | listStatement 
 + | truncateStatement 
 | - > ^ ( NODE _ NO _ OP ) 
 ; 
 
 @ @ - 174 , 6 + 176 , 8 @ @ helpStatement 
 - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) 
 | K _ HELP K _ LIST 
 - > ^ ( NODE _ HELP NODE _ LIST ) 
 + | K _ HELP K _ TRUNCATE 
 + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) 
 | K _ HELP 
 - > ^ ( NODE _ HELP ) 
 | ' ? ' 
 @ @ - 231 , 6 + 235 , 11 @ @ listStatement 
 - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) 
 ; 
 
 + truncateStatement 
 + : K _ TRUNCATE columnFamily 
 + - > ^ ( NODE _ TRUNCATE columnFamily ) 
 + ; 
 + 
 showClusterName 
 : K _ SHOW K _ CLUSTER K _ NAME 
 - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) 
 @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; 
 K _ UPDATE : ' UPDATE ' ; 
 K _ LIST : ' LIST ' ; 
 K _ LIMIT : ' LIMIT ' ; 
 + K _ TRUNCATE : ' TRUNCATE ' ; 
 
 / / private syntactic rules 
 fragment 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index b6ace98 . . b63105a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp 
 case CliParser . NODE _ LIST : 
 executeList ( tree ) ; 
 break ; 
 + case CliParser . NODE _ TRUNCATE : 
 + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; 
 + break ; 
 case CliParser . NODE _ NO _ OP : 
 / / comment lines come here ; they are treated as no ops . 
 break ; 
 @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp 
 printSliceList ( columnFamilyDef , keySlices ) ; 
 } 
 
 + / / TRUNCATE < columnFamily > 
 + private void executeTruncate ( String columnFamily ) 
 + { 
 + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) 
 + return ; 
 + 
 + / / getting CfDef , it will fail if there is no such column family in current keySpace . 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + try 
 + { 
 + thriftClient . truncate ( cfDef . getName ( ) ) ; 
 + sessionState . out . println ( columnFamily + " truncated . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( e . getWhy ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / / SHOW API VERSION 
 private void executeShowVersion ( ) throws TException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 index f541fe5 . . b033d8f 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java 
 + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor 
 " help set " , 
 " help del " , 
 " help count " , 
 + " help list " , 
 + " help truncate " 
 } ; 
 private static String [ ] keyspaceCommands = { 
 " get " , 
 " set " , 
 " count " , 
 - " del " 
 + " del " , 
 + " list " , 
 + " truncate " 
 } ; 
 
 public CliCompleter ( ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index 7c512e2 . . db6a779 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { 
 state . out . println ( " list Users [ j : ] limit 40 " ) ; 
 break ; 
 
 + case CliParser . NODE _ TRUNCATE : 
 + state . out . println ( " truncate < column _ family > " ) ; 
 + state . out . println ( " Truncate specified column family . \ n " ) ; 
 + state . out . println ( " example : " ) ; 
 + state . out . println ( " truncate Category " ) ; 
 + break ; 
 + 
 default : 
 state . out . println ( " ? " ) ; 
 break ; 
 @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { 
 state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; 
 - state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; 
 + state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : ] " ) ; 
 state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 24a3de0 . . eddcafd 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase 
 " list CF3 [ h : ] " , 
 " list CF3 limit 10 " , 
 " list CF3 [ h : g ] limit 10 " , 
 + " truncate CF1 " , 
 " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , 
 " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " 
 } ; 
 @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase 
 assertTrue ( result . startsWith ( " = > ( column = " ) ) ; 
 } 
 } 
 + else if ( statement . startsWith ( " truncate " ) ) 
 + { 
 + assertTrue ( result . contains ( " truncated . " ) ) ; 
 + } 
 
 outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time 
 errStream . reset ( ) ; / / no errors to the end user .
