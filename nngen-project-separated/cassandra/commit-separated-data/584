BLEU SCORE: 0.018543295278285157

TEST MSG: Fix partition count log message during compaction
GENERATED MSG: Don ' t initialize writer before checking if iter is empty

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index cc5b003 . . 8f0e201 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 3 + 1 , 7 @ @ <nl> + 3 . 0 . 11 <nl> + * Fix partition count log during compaction ( CASSANDRA - 12184 ) <nl> + <nl> + <nl> 3 . 0 . 10 <nl> * Batch with multiple conditional updates for the same partition causes AssertionError ( CASSANDRA - 12867 ) <nl> * Make AbstractReplicationStrategy extendable from outside its package ( CASSANDRA - 12788 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 7e4ed41 . . 0c4e144 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 47 , 6 + 47 , 17 @ @ import org . apache . cassandra . utils . concurrent . Refs ; <nl> <nl> public class CompactionTask extends AbstractCompactionTask <nl> { <nl> + private static class Summary <nl> + { <nl> + final String partitionMerge ; <nl> + final long totalSourceRows ; <nl> + <nl> + public Summary ( String partitionMerge , long totalSourceRows ) <nl> + { <nl> + this . partitionMerge = partitionMerge ; <nl> + this . totalSourceRows = totalSourceRows ; <nl> + } <nl> + } <nl> protected static final Logger logger = LoggerFactory . getLogger ( CompactionTask . class ) ; <nl> protected final int gcBefore ; <nl> protected final boolean offline ; <nl> @ @ - 213 , 10 + 224 , 9 @ @ public class CompactionTask extends AbstractCompactionTask <nl> newSSTableNames . append ( reader . descriptor . baseFilename ( ) ) . append ( " , " ) ; <nl> <nl> double mbps = dTime > 0 ? ( double ) endsize / ( 1024 * 1024 ) / ( ( double ) dTime / 1000 ) : 0 ; <nl> - long totalSourceRows = 0 ; <nl> - String mergeSummary = updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , mergedRowCounts , startsize , endsize ) ; <nl> + Summary mergeSummary = updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , mergedRowCounts , startsize , endsize ) ; <nl> logger . debug ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % , d bytes to % , d ( ~ % d % % of original ) in % , dms = % fMB / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , <nl> - taskId , transaction . originals ( ) . size ( ) , newSSTableNames . toString ( ) , getLevel ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , totalSourceRows , totalKeysWritten , mergeSummary ) ) ; <nl> + taskId , transaction . originals ( ) . size ( ) , newSSTableNames . toString ( ) , getLevel ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , mergeSummary . totalSourceRows , totalKeysWritten , mergeSummary . partitionMerge ) ) ; <nl> logger . trace ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; <nl> logger . trace ( " Actual # keys : { } , Estimated # keys : { } , Err % : { } " , totalKeysWritten , estimatedKeys , ( ( double ) ( totalKeysWritten - estimatedKeys ) / totalKeysWritten ) ) ; <nl> <nl> @ @ - 234 , 10 + 244 , 11 @ @ public class CompactionTask extends AbstractCompactionTask <nl> return new DefaultCompactionWriter ( cfs , directories , transaction , nonExpiredSSTables , offline , keepOriginals ) ; <nl> } <nl> <nl> - public static String updateCompactionHistory ( String keyspaceName , String columnFamilyName , long [ ] mergedRowCounts , long startSize , long endSize ) <nl> + public static Summary updateCompactionHistory ( String keyspaceName , String columnFamilyName , long [ ] mergedRowCounts , long startSize , long endSize ) <nl> { <nl> StringBuilder mergeSummary = new StringBuilder ( mergedRowCounts . length * 10 ) ; <nl> Map < Integer , Long > mergedRows = new HashMap < > ( ) ; <nl> + long totalSourceRows = 0 ; <nl> for ( int i = 0 ; i < mergedRowCounts . length ; i + + ) <nl> { <nl> long count = mergedRowCounts [ i ] ; <nl> @ @ - 245 , 11 + 256 , 12 @ @ public class CompactionTask extends AbstractCompactionTask <nl> continue ; <nl> <nl> int rows = i + 1 ; <nl> + totalSourceRows + = rows * count ; <nl> mergeSummary . append ( String . format ( " % d : % d , " , rows , count ) ) ; <nl> mergedRows . put ( rows , count ) ; <nl> } <nl> SystemKeyspace . updateCompactionHistory ( keyspaceName , columnFamilyName , System . currentTimeMillis ( ) , startSize , endSize , mergedRows ) ; <nl> - return mergeSummary . toString ( ) ; <nl> + return new Summary ( mergeSummary . toString ( ) , totalSourceRows ) ; <nl> } <nl> <nl> protected Directories getDirectories ( )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index cc5b003 . . 8f0e201 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 3 + 1 , 7 @ @ 
 + 3 . 0 . 11 
 + * Fix partition count log during compaction ( CASSANDRA - 12184 ) 
 + 
 + 
 3 . 0 . 10 
 * Batch with multiple conditional updates for the same partition causes AssertionError ( CASSANDRA - 12867 ) 
 * Make AbstractReplicationStrategy extendable from outside its package ( CASSANDRA - 12788 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 7e4ed41 . . 0c4e144 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 47 , 6 + 47 , 17 @ @ import org . apache . cassandra . utils . concurrent . Refs ; 
 
 public class CompactionTask extends AbstractCompactionTask 
 { 
 + private static class Summary 
 + { 
 + final String partitionMerge ; 
 + final long totalSourceRows ; 
 + 
 + public Summary ( String partitionMerge , long totalSourceRows ) 
 + { 
 + this . partitionMerge = partitionMerge ; 
 + this . totalSourceRows = totalSourceRows ; 
 + } 
 + } 
 protected static final Logger logger = LoggerFactory . getLogger ( CompactionTask . class ) ; 
 protected final int gcBefore ; 
 protected final boolean offline ; 
 @ @ - 213 , 10 + 224 , 9 @ @ public class CompactionTask extends AbstractCompactionTask 
 newSSTableNames . append ( reader . descriptor . baseFilename ( ) ) . append ( " , " ) ; 
 
 double mbps = dTime > 0 ? ( double ) endsize / ( 1024 * 1024 ) / ( ( double ) dTime / 1000 ) : 0 ; 
 - long totalSourceRows = 0 ; 
 - String mergeSummary = updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , mergedRowCounts , startsize , endsize ) ; 
 + Summary mergeSummary = updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . getColumnFamilyName ( ) , mergedRowCounts , startsize , endsize ) ; 
 logger . debug ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % , d bytes to % , d ( ~ % d % % of original ) in % , dms = % fMB / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , 
 - taskId , transaction . originals ( ) . size ( ) , newSSTableNames . toString ( ) , getLevel ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , totalSourceRows , totalKeysWritten , mergeSummary ) ) ; 
 + taskId , transaction . originals ( ) . size ( ) , newSSTableNames . toString ( ) , getLevel ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , mergeSummary . totalSourceRows , totalKeysWritten , mergeSummary . partitionMerge ) ) ; 
 logger . trace ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; 
 logger . trace ( " Actual # keys : { } , Estimated # keys : { } , Err % : { } " , totalKeysWritten , estimatedKeys , ( ( double ) ( totalKeysWritten - estimatedKeys ) / totalKeysWritten ) ) ; 
 
 @ @ - 234 , 10 + 244 , 11 @ @ public class CompactionTask extends AbstractCompactionTask 
 return new DefaultCompactionWriter ( cfs , directories , transaction , nonExpiredSSTables , offline , keepOriginals ) ; 
 } 
 
 - public static String updateCompactionHistory ( String keyspaceName , String columnFamilyName , long [ ] mergedRowCounts , long startSize , long endSize ) 
 + public static Summary updateCompactionHistory ( String keyspaceName , String columnFamilyName , long [ ] mergedRowCounts , long startSize , long endSize ) 
 { 
 StringBuilder mergeSummary = new StringBuilder ( mergedRowCounts . length * 10 ) ; 
 Map < Integer , Long > mergedRows = new HashMap < > ( ) ; 
 + long totalSourceRows = 0 ; 
 for ( int i = 0 ; i < mergedRowCounts . length ; i + + ) 
 { 
 long count = mergedRowCounts [ i ] ; 
 @ @ - 245 , 11 + 256 , 12 @ @ public class CompactionTask extends AbstractCompactionTask 
 continue ; 
 
 int rows = i + 1 ; 
 + totalSourceRows + = rows * count ; 
 mergeSummary . append ( String . format ( " % d : % d , " , rows , count ) ) ; 
 mergedRows . put ( rows , count ) ; 
 } 
 SystemKeyspace . updateCompactionHistory ( keyspaceName , columnFamilyName , System . currentTimeMillis ( ) , startSize , endSize , mergedRows ) ; 
 - return mergeSummary . toString ( ) ; 
 + return new Summary ( mergeSummary . toString ( ) , totalSourceRows ) ; 
 } 
 
 protected Directories getDirectories ( )

NEAREST DIFF:
ELIMINATEDSENTENCE
