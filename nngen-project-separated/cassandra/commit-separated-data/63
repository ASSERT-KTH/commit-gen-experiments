BLEU SCORE: 0.040625828554272554

TEST MSG: Fix incorrect sorting of replicas in SimpleStrategy . calculateNaturalReplicas
GENERATED MSG: improve testing of StorageService init , and fix shutdown of messagingservice .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2373cb2 . . 4081fce 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Fix incorrect sorting of replicas in SimpleStrategy . calculateNaturalReplicas ( CASSANDRA - 14862 ) <nl> * Partitioned outbound internode TCP connections can occur when nodes restart ( CASSANDRA - 14358 ) <nl> * Don ' t write to system _ distributed . repair _ history , system _ traces . sessions , system _ traces . events in mixed version 3 . X / 4 . 0 clusters ( CASSANDRA - 14841 ) <nl> * Avoid running query to self through messaging service ( CASSANDRA - 14807 ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index 818e20e . . deb43c6 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 132 , 11 + 132 , 19 @ @ public abstract class AbstractReplicationStrategy <nl> } <nl> <nl> / * * <nl> - * calculate the natural endpoints for the given token <nl> + * Calculate the natural endpoints for the given token . Endpoints are returned in the order <nl> + * they occur in the ring following the searchToken , as defined by the replication strategy . <nl> + * <nl> + * Note that the order of the replicas is _ implicitly relied upon _ by the definition of <nl> + * " primary " range in <nl> + * { @ link org . apache . cassandra . service . StorageService # getPrimaryRangesForEndpoint ( String , InetAddressAndPort ) } <nl> + * which is in turn relied on by various components like repair and size estimate calculations . <nl> * <nl> * @ see # getNaturalReplicasForToken ( org . apache . cassandra . dht . RingPosition ) <nl> * <nl> - * @ param searchToken the token the natural endpoints are requested for <nl> + * @ param tokenMetadata the token metadata used to find the searchToken , e . g . contains token to endpoint <nl> + * mapping information <nl> + * @ param searchToken the token to find the natural endpoints for <nl> * @ return a copy of the natural endpoints for the given token <nl> * / <nl> public abstract EndpointsForRange calculateNaturalReplicas ( Token searchToken , TokenMetadata tokenMetadata ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / SimpleStrategy . java b / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> index 2dd835c . . 748d2d3 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> @ @ - 68 , 10 + 68 , 7 @ @ public class SimpleStrategy extends AbstractReplicationStrategy <nl> replicas . add ( new Replica ( ep , replicaRange , replicas . size ( ) < rf . fullReplicas ) ) ; <nl> } <nl> <nl> - / / group endpoints by DC , so that we can cheaply filter them to a given DC <nl> - IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; <nl> - return replicas . build ( ) <nl> - . sorted ( Comparator . comparing ( r - > snitch . getDatacenter ( r . endpoint ( ) ) ) ) ; <nl> + return replicas . build ( ) ; <nl> } <nl> <nl> public ReplicationFactor getReplicationFactor ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> index 338e752 . . 507cc1f 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import java . util . Map ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Multimap ; <nl> - import org . junit . Assert ; <nl> + import org . junit . Before ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 56 , 15 + 56 , 23 @ @ import static org . junit . Assert . assertTrue ; <nl> public class SimpleStrategyTest <nl> { <nl> public static final String KEYSPACE1 = " SimpleStrategyTest " ; <nl> + public static final String MULTIDC = " MultiDCSimpleStrategyTest " ; <nl> <nl> @ BeforeClass <nl> - public static void defineSchema ( ) throws Exception <nl> + public static void defineSchema ( ) <nl> { <nl> SchemaLoader . prepareServer ( ) ; <nl> SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( 1 ) ) ; <nl> + SchemaLoader . createKeyspace ( MULTIDC , KeyspaceParams . simple ( 3 ) ) ; <nl> DatabaseDescriptor . setTransientReplicationEnabledUnsafe ( true ) ; <nl> } <nl> <nl> + @ Before <nl> + public void resetSnitch ( ) <nl> + { <nl> + DatabaseDescriptor . setEndpointSnitch ( new SimpleSnitch ( ) ) ; <nl> + } <nl> + <nl> @ Test <nl> public void tryValidKeyspace ( ) <nl> { <nl> @ @ - 97 , 6 + 105 , 47 @ @ public class SimpleStrategyTest <nl> verifyGetNaturalEndpoints ( endpointTokens . toArray ( new Token [ 0 ] ) , keyTokens . toArray ( new Token [ 0 ] ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testMultiDCSimpleStrategyEndpoints ( ) throws UnknownHostException <nl> + { <nl> + IEndpointSnitch snitch = new PropertyFileSnitch ( ) ; <nl> + DatabaseDescriptor . setEndpointSnitch ( snitch ) ; <nl> + <nl> + TokenMetadata metadata = new TokenMetadata ( ) ; <nl> + <nl> + AbstractReplicationStrategy strategy = getStrategy ( MULTIDC , metadata , snitch ) ; <nl> + <nl> + / / Topology taken directly from the topology _ test . test _ size _ estimates _ multidc dtest that regressed <nl> + Multimap < InetAddressAndPort , Token > dc1 = HashMultimap . create ( ) ; <nl> + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 1 " ) , new Murmur3Partitioner . LongToken ( - 6639341390736545756L ) ) ; <nl> + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 1 " ) , new Murmur3Partitioner . LongToken ( - 2688160409776496397L ) ) ; <nl> + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 2 " ) , new Murmur3Partitioner . LongToken ( - 2506475074448728501L ) ) ; <nl> + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 2 " ) , new Murmur3Partitioner . LongToken ( 8473270337963525440L ) ) ; <nl> + metadata . updateNormalTokens ( dc1 ) ; <nl> + <nl> + Multimap < InetAddressAndPort , Token > dc2 = HashMultimap . create ( ) ; <nl> + dc2 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 4 " ) , new Murmur3Partitioner . LongToken ( - 3736333188524231709L ) ) ; <nl> + dc2 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 4 " ) , new Murmur3Partitioner . LongToken ( 8673615181726552074L ) ) ; <nl> + metadata . updateNormalTokens ( dc2 ) ; <nl> + <nl> + Map < InetAddressAndPort , Integer > primaryCount = new HashMap < > ( ) ; <nl> + Map < InetAddressAndPort , Integer > replicaCount = new HashMap < > ( ) ; <nl> + for ( Token t : metadata . sortedTokens ( ) ) <nl> + { <nl> + EndpointsForToken replicas = strategy . getNaturalReplicasForToken ( t ) ; <nl> + primaryCount . compute ( replicas . get ( 0 ) . endpoint ( ) , ( k , v ) - > ( v = = null ) ? 1 : v + 1 ) ; <nl> + for ( Replica replica : replicas ) <nl> + replicaCount . compute ( replica . endpoint ( ) , ( k , v ) - > ( v = = null ) ? 1 : v + 1 ) ; <nl> + } <nl> + <nl> + / / All three hosts should have 2 " primary " replica ranges and 6 total ranges with RF = 3 , 3 nodes and 2 DCs . <nl> + for ( InetAddressAndPort addr : primaryCount . keySet ( ) ) <nl> + { <nl> + assertEquals ( 2 , ( int ) primaryCount . get ( addr ) ) ; <nl> + assertEquals ( 6 , ( int ) replicaCount . get ( addr ) ) ; <nl> + } <nl> + } <nl> + <nl> / / given a list of endpoint tokens , and a set of key tokens falling between the endpoint tokens , <nl> / / make sure that the Strategy picks the right endpoints for the keys . <nl> private void verifyGetNaturalEndpoints ( Token [ ] endpointTokens , Token [ ] keyTokens ) throws UnknownHostException <nl> @ @ - 106 , 7 + 155 , 7 @ @ public class SimpleStrategyTest <nl> for ( String keyspaceName : Schema . instance . getNonLocalStrategyKeyspaces ( ) ) <nl> { <nl> tmd = new TokenMetadata ( ) ; <nl> - strategy = getStrategy ( keyspaceName , tmd ) ; <nl> + strategy = getStrategy ( keyspaceName , tmd , new SimpleSnitch ( ) ) ; <nl> List < InetAddressAndPort > hosts = new ArrayList < > ( ) ; <nl> for ( int i = 0 ; i < endpointTokens . length ; i + + ) <nl> { <nl> @ @ - 160 , 7 + 209 , 7 @ @ public class SimpleStrategyTest <nl> AbstractReplicationStrategy strategy = null ; <nl> for ( String keyspaceName : Schema . instance . getNonLocalStrategyKeyspaces ( ) ) <nl> { <nl> - strategy = getStrategy ( keyspaceName , tmd ) ; <nl> + strategy = getStrategy ( keyspaceName , tmd , new SimpleSnitch ( ) ) ; <nl> <nl> PendingRangeCalculatorService . calculatePendingRanges ( strategy , keyspaceName ) ; <nl> <nl> @ @ - 238 , 14 + 287 , 14 @ @ public class SimpleStrategyTest <nl> strategy . getNaturalReplicasForToken ( tk ( 101 ) ) ) ; <nl> } <nl> <nl> - private AbstractReplicationStrategy getStrategy ( String keyspaceName , TokenMetadata tmd ) <nl> + private AbstractReplicationStrategy getStrategy ( String keyspaceName , TokenMetadata tmd , IEndpointSnitch snitch ) <nl> { <nl> KeyspaceMetadata ksmd = Schema . instance . getKeyspaceMetadata ( keyspaceName ) ; <nl> return AbstractReplicationStrategy . createReplicationStrategy ( <nl> keyspaceName , <nl> ksmd . params . replication . klass , <nl> tmd , <nl> - new SimpleSnitch ( ) , <nl> + snitch , <nl> ksmd . params . replication . options ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 1f235df . . 25e1072 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra . concurrent ; <nl> <nl> import java . lang . management . ManagementFactory ; <nl> + import java . util . List ; <nl> import java . util . concurrent . * ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; <nl> public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean <nl> { <nl> private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; <nl> + private final String mbeanName ; <nl> <nl> public DebuggableThreadPoolExecutor ( String threadPoolName ) <nl> { <nl> @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> super . prestartAllCoreThreads ( ) ; <nl> <nl> MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; <nl> + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; <nl> try <nl> { <nl> - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; <nl> + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements <nl> } <nl> } <nl> <nl> + private void unregisterMBean ( ) <nl> + { <nl> + try <nl> + { <nl> + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + / / don ' t let it get in the way , but notify . <nl> + logger _ . error ( ex . getMessage ( ) , ex ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void shutdown ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + super . shutdown ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < Runnable > shutdownNow ( ) <nl> + { <nl> + unregisterMBean ( ) ; <nl> + return super . shutdownNow ( ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the number of completed tasks <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 3b70d17 . . f5d8d35 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> return gossiper _ ; <nl> } <nl> <nl> - private Timer gossipTimer _ = new Timer ( false ) ; <nl> + private Timer gossipTimer _ ; <nl> private InetAddress localEndPoint _ ; <nl> private long aVeryLongTime _ ; <nl> private Random random _ = new Random ( ) ; <nl> @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> <nl> private Gossiper ( ) <nl> { <nl> + gossipTimer _ = new Timer ( false ) ; <nl> aVeryLongTime _ = 259200 * 1000 ; <nl> / * register with the Failure Detector for receiving Failure detector events * / <nl> FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; <nl> @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC <nl> public void stop ( ) <nl> { <nl> gossipTimer _ . cancel ( ) ; <nl> + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index 8ff93f6 . . b1ad5ed 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService <nl> <nl> / * List of sockets we are listening on * / <nl> private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; <nl> + <nl> + / * List of UdpConnections we are listening on * / <nl> + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; <nl> <nl> / * Lookup table for registering message handlers based on the verb . * / <nl> private static Map < String , IVerbHandler > verbHandlers _ ; <nl> @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService <nl> try <nl> { <nl> connection . init ( localEp ) ; <nl> - endPoints _ . add ( localEp ) ; <nl> + endPoints _ . add ( localEp ) ; <nl> + udpConnections _ . put ( localEp , connection ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService <nl> logger _ . info ( " Shutting down . . . " ) ; <nl> synchronized ( MessagingService . class ) <nl> { <nl> - / * Stop listening on any socket * / <nl> + / * Stop listening on any TCP socket * / <nl> for ( SelectionKey skey : listenSockets _ . values ( ) ) <nl> { <nl> skey . cancel ( ) ; <nl> @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService <nl> } <nl> listenSockets _ . clear ( ) ; <nl> <nl> + / * Stop listening on any UDP ports . * / <nl> + for ( UdpConnection con : udpConnections _ . values ( ) ) <nl> + { <nl> + con . close ( ) ; <nl> + } <nl> + udpConnections _ . clear ( ) ; <nl> + <nl> / * Shutdown the threads in the EventQueue ' s * / <nl> messageDeserializationExecutor _ . shutdownNow ( ) ; <nl> messageDeserializerExecutor _ . shutdownNow ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> index 7623a05 . . 16511ee 100644 <nl> - - - a / src / java / org / apache / cassandra / net / SelectorManager . java <nl> + + + b / src / java / org / apache / cassandra / net / SelectorManager . java <nl> @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread <nl> / / workaround JDK select / register bug <nl> Object gate = new Object ( ) ; <nl> <nl> + / / flag to indicate that shutdown has been requested . <nl> + private boolean shutdownRequested = false ; <nl> + <nl> / / The static selector manager which is used by all applications <nl> private static SelectorManager manager ; <nl> <nl> @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread <nl> selector . wakeup ( ) ; <nl> return channel . register ( selector , ops , handler ) ; <nl> } <nl> - } <nl> + } <nl> + <nl> + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . <nl> + private void requestShutdown ( ) <nl> + { <nl> + shutdownRequested = true ; <nl> + } <nl> <nl> / * * <nl> * This method starts the socket manager listening for events . It is <nl> @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + if ( shutdownRequested ) <nl> + { <nl> + shutdownRequested = false ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread <nl> } <nl> <nl> / * * <nl> + * Intended to reset the singleton as part of testing . <nl> + * / <nl> + static void reset ( ) <nl> + { <nl> + synchronized ( SelectorManager . class ) <nl> + { <nl> + if ( manager ! = null ) <nl> + manager . requestShutdown ( ) ; <nl> + manager = null ; <nl> + if ( udpManager ! = null ) <nl> + udpManager . requestShutdown ( ) ; <nl> + udpManager = null ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the SelectorManager applications should use . <nl> * <nl> * @ return The SelectorManager which applications should use <nl> diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> index 969a2cd . . e3cde8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / CleanupHelper . java <nl> + + + b / test / unit / org / apache / cassandra / CleanupHelper . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> package org . apache . cassandra ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> import org . junit . BeforeClass ; <nl> <nl> @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper <nl> private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; <nl> <nl> @ BeforeClass <nl> + public static void cleanupAndLeaveDirs ( ) <nl> + { <nl> + mkdirs ( ) ; <nl> + cleanup ( ) ; <nl> + mkdirs ( ) ; <nl> + } <nl> + <nl> public static void cleanup ( ) <nl> { <nl> / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) <nl> @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper <nl> DatabaseDescriptor . getLogFileLocation ( ) , <nl> } ; <nl> <nl> + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process <nl> + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally <nl> + / / put there . <nl> + <nl> for ( String dirName : directoryNames ) <nl> { <nl> File dir = new File ( dirName ) ; <nl> @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper <nl> } <nl> for ( File f : dir . listFiles ( ) ) <nl> { <nl> - if ( ! f . delete ( ) ) { <nl> + if ( ! f . delete ( ) ) <nl> + { <nl> logger . error ( " could not delete " + f ) ; <nl> + } <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> - } <nl> <nl> / / cleanup data directory which are stored as data directory / table / data files <nl> for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper <nl> } <nl> } <nl> } <nl> + if ( ! tableFile . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + <nl> + if ( ! dir . delete ( ) ) <nl> + logger . warn ( " could not delete " + dir . getPath ( ) ) ; <nl> } <nl> + } <nl> <nl> + public static void mkdirs ( ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . createAllDirectories ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> new file mode 100644 <nl> index 0000000 . . 408bfba <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . net ; <nl> + <nl> + / * * <nl> + For accesing package - level members created for the sole purpose of testing . <nl> + * / <nl> + public class NetPackageAccessor <nl> + { <nl> + public static void resetSelectorManager ( ) <nl> + { <nl> + SelectorManager . reset ( ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ec9ffe <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . net . NetPackageAccessor ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + public class StorageServiceTest <nl> + { <nl> + @ Test <nl> + public void testClientOnlyMode ( ) throws IOException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initClient ( ) ; <nl> + <nl> + / / verify that no storage directories were created . <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + assertFalse ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testRegularMode ( ) throws IOException , InterruptedException <nl> + { <nl> + CleanupHelper . mkdirs ( ) ; <nl> + CleanupHelper . cleanup ( ) ; <nl> + StorageService . instance ( ) . initServer ( ) ; <nl> + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) <nl> + { <nl> + / / verify that storage directories are there . <nl> + assertTrue ( new File ( path ) . exists ( ) ) ; <nl> + } <nl> + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer <nl> + / / calls . This test is only interested in the shutdown - related items which a properly handled by just <nl> + / / stopping the client . <nl> + / / StorageService . instance ( ) . decommission ( ) ; <nl> + StorageService . instance ( ) . stopClient ( ) ; <nl> + NetPackageAccessor . resetSelectorManager ( ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2373cb2 . . 4081fce 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Fix incorrect sorting of replicas in SimpleStrategy . calculateNaturalReplicas ( CASSANDRA - 14862 ) 
 * Partitioned outbound internode TCP connections can occur when nodes restart ( CASSANDRA - 14358 ) 
 * Don ' t write to system _ distributed . repair _ history , system _ traces . sessions , system _ traces . events in mixed version 3 . X / 4 . 0 clusters ( CASSANDRA - 14841 ) 
 * Avoid running query to self through messaging service ( CASSANDRA - 14807 ) 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index 818e20e . . deb43c6 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 132 , 11 + 132 , 19 @ @ public abstract class AbstractReplicationStrategy 
 } 
 
 / * * 
 - * calculate the natural endpoints for the given token 
 + * Calculate the natural endpoints for the given token . Endpoints are returned in the order 
 + * they occur in the ring following the searchToken , as defined by the replication strategy . 
 + * 
 + * Note that the order of the replicas is _ implicitly relied upon _ by the definition of 
 + * " primary " range in 
 + * { @ link org . apache . cassandra . service . StorageService # getPrimaryRangesForEndpoint ( String , InetAddressAndPort ) } 
 + * which is in turn relied on by various components like repair and size estimate calculations . 
 * 
 * @ see # getNaturalReplicasForToken ( org . apache . cassandra . dht . RingPosition ) 
 * 
 - * @ param searchToken the token the natural endpoints are requested for 
 + * @ param tokenMetadata the token metadata used to find the searchToken , e . g . contains token to endpoint 
 + * mapping information 
 + * @ param searchToken the token to find the natural endpoints for 
 * @ return a copy of the natural endpoints for the given token 
 * / 
 public abstract EndpointsForRange calculateNaturalReplicas ( Token searchToken , TokenMetadata tokenMetadata ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / SimpleStrategy . java b / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 index 2dd835c . . 748d2d3 100644 
 - - - a / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 @ @ - 68 , 10 + 68 , 7 @ @ public class SimpleStrategy extends AbstractReplicationStrategy 
 replicas . add ( new Replica ( ep , replicaRange , replicas . size ( ) < rf . fullReplicas ) ) ; 
 } 
 
 - / / group endpoints by DC , so that we can cheaply filter them to a given DC 
 - IEndpointSnitch snitch = DatabaseDescriptor . getEndpointSnitch ( ) ; 
 - return replicas . build ( ) 
 - . sorted ( Comparator . comparing ( r - > snitch . getDatacenter ( r . endpoint ( ) ) ) ) ; 
 + return replicas . build ( ) ; 
 } 
 
 public ReplicationFactor getReplicationFactor ( ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 index 338e752 . . 507cc1f 100644 
 - - - a / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / SimpleStrategyTest . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import java . util . Map ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Multimap ; 
 - import org . junit . Assert ; 
 + import org . junit . Before ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 @ @ - 56 , 15 + 56 , 23 @ @ import static org . junit . Assert . assertTrue ; 
 public class SimpleStrategyTest 
 { 
 public static final String KEYSPACE1 = " SimpleStrategyTest " ; 
 + public static final String MULTIDC = " MultiDCSimpleStrategyTest " ; 
 
 @ BeforeClass 
 - public static void defineSchema ( ) throws Exception 
 + public static void defineSchema ( ) 
 { 
 SchemaLoader . prepareServer ( ) ; 
 SchemaLoader . createKeyspace ( KEYSPACE1 , KeyspaceParams . simple ( 1 ) ) ; 
 + SchemaLoader . createKeyspace ( MULTIDC , KeyspaceParams . simple ( 3 ) ) ; 
 DatabaseDescriptor . setTransientReplicationEnabledUnsafe ( true ) ; 
 } 
 
 + @ Before 
 + public void resetSnitch ( ) 
 + { 
 + DatabaseDescriptor . setEndpointSnitch ( new SimpleSnitch ( ) ) ; 
 + } 
 + 
 @ Test 
 public void tryValidKeyspace ( ) 
 { 
 @ @ - 97 , 6 + 105 , 47 @ @ public class SimpleStrategyTest 
 verifyGetNaturalEndpoints ( endpointTokens . toArray ( new Token [ 0 ] ) , keyTokens . toArray ( new Token [ 0 ] ) ) ; 
 } 
 
 + @ Test 
 + public void testMultiDCSimpleStrategyEndpoints ( ) throws UnknownHostException 
 + { 
 + IEndpointSnitch snitch = new PropertyFileSnitch ( ) ; 
 + DatabaseDescriptor . setEndpointSnitch ( snitch ) ; 
 + 
 + TokenMetadata metadata = new TokenMetadata ( ) ; 
 + 
 + AbstractReplicationStrategy strategy = getStrategy ( MULTIDC , metadata , snitch ) ; 
 + 
 + / / Topology taken directly from the topology _ test . test _ size _ estimates _ multidc dtest that regressed 
 + Multimap < InetAddressAndPort , Token > dc1 = HashMultimap . create ( ) ; 
 + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 1 " ) , new Murmur3Partitioner . LongToken ( - 6639341390736545756L ) ) ; 
 + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 1 " ) , new Murmur3Partitioner . LongToken ( - 2688160409776496397L ) ) ; 
 + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 2 " ) , new Murmur3Partitioner . LongToken ( - 2506475074448728501L ) ) ; 
 + dc1 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 2 " ) , new Murmur3Partitioner . LongToken ( 8473270337963525440L ) ) ; 
 + metadata . updateNormalTokens ( dc1 ) ; 
 + 
 + Multimap < InetAddressAndPort , Token > dc2 = HashMultimap . create ( ) ; 
 + dc2 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 4 " ) , new Murmur3Partitioner . LongToken ( - 3736333188524231709L ) ) ; 
 + dc2 . put ( InetAddressAndPort . getByName ( " 127 . 0 . 0 . 4 " ) , new Murmur3Partitioner . LongToken ( 8673615181726552074L ) ) ; 
 + metadata . updateNormalTokens ( dc2 ) ; 
 + 
 + Map < InetAddressAndPort , Integer > primaryCount = new HashMap < > ( ) ; 
 + Map < InetAddressAndPort , Integer > replicaCount = new HashMap < > ( ) ; 
 + for ( Token t : metadata . sortedTokens ( ) ) 
 + { 
 + EndpointsForToken replicas = strategy . getNaturalReplicasForToken ( t ) ; 
 + primaryCount . compute ( replicas . get ( 0 ) . endpoint ( ) , ( k , v ) - > ( v = = null ) ? 1 : v + 1 ) ; 
 + for ( Replica replica : replicas ) 
 + replicaCount . compute ( replica . endpoint ( ) , ( k , v ) - > ( v = = null ) ? 1 : v + 1 ) ; 
 + } 
 + 
 + / / All three hosts should have 2 " primary " replica ranges and 6 total ranges with RF = 3 , 3 nodes and 2 DCs . 
 + for ( InetAddressAndPort addr : primaryCount . keySet ( ) ) 
 + { 
 + assertEquals ( 2 , ( int ) primaryCount . get ( addr ) ) ; 
 + assertEquals ( 6 , ( int ) replicaCount . get ( addr ) ) ; 
 + } 
 + } 
 + 
 / / given a list of endpoint tokens , and a set of key tokens falling between the endpoint tokens , 
 / / make sure that the Strategy picks the right endpoints for the keys . 
 private void verifyGetNaturalEndpoints ( Token [ ] endpointTokens , Token [ ] keyTokens ) throws UnknownHostException 
 @ @ - 106 , 7 + 155 , 7 @ @ public class SimpleStrategyTest 
 for ( String keyspaceName : Schema . instance . getNonLocalStrategyKeyspaces ( ) ) 
 { 
 tmd = new TokenMetadata ( ) ; 
 - strategy = getStrategy ( keyspaceName , tmd ) ; 
 + strategy = getStrategy ( keyspaceName , tmd , new SimpleSnitch ( ) ) ; 
 List < InetAddressAndPort > hosts = new ArrayList < > ( ) ; 
 for ( int i = 0 ; i < endpointTokens . length ; i + + ) 
 { 
 @ @ - 160 , 7 + 209 , 7 @ @ public class SimpleStrategyTest 
 AbstractReplicationStrategy strategy = null ; 
 for ( String keyspaceName : Schema . instance . getNonLocalStrategyKeyspaces ( ) ) 
 { 
 - strategy = getStrategy ( keyspaceName , tmd ) ; 
 + strategy = getStrategy ( keyspaceName , tmd , new SimpleSnitch ( ) ) ; 
 
 PendingRangeCalculatorService . calculatePendingRanges ( strategy , keyspaceName ) ; 
 
 @ @ - 238 , 14 + 287 , 14 @ @ public class SimpleStrategyTest 
 strategy . getNaturalReplicasForToken ( tk ( 101 ) ) ) ; 
 } 
 
 - private AbstractReplicationStrategy getStrategy ( String keyspaceName , TokenMetadata tmd ) 
 + private AbstractReplicationStrategy getStrategy ( String keyspaceName , TokenMetadata tmd , IEndpointSnitch snitch ) 
 { 
 KeyspaceMetadata ksmd = Schema . instance . getKeyspaceMetadata ( keyspaceName ) ; 
 return AbstractReplicationStrategy . createReplicationStrategy ( 
 keyspaceName , 
 ksmd . params . replication . klass , 
 tmd , 
 - new SimpleSnitch ( ) , 
 + snitch , 
 ksmd . params . replication . options ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 1f235df . . 25e1072 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra . concurrent ; 
 
 import java . lang . management . ManagementFactory ; 
 + import java . util . List ; 
 import java . util . concurrent . * ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 @ @ - 34 , 6 + 35 , 7 @ @ import org . apache . log4j . Logger ; 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements DebuggableThreadPoolExecutorMBean 
 { 
 private static Logger logger _ = Logger . getLogger ( DebuggableThreadPoolExecutor . class ) ; 
 + private final String mbeanName ; 
 
 public DebuggableThreadPoolExecutor ( String threadPoolName ) 
 { 
 @ @ - 51 , 9 + 53 , 10 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 super . prestartAllCoreThreads ( ) ; 
 
 MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; 
 + mbeanName = " org . apache . cassandra . concurrent : type = " + threadFactory . id ; 
 try 
 { 
 - mbs . registerMBean ( this , new ObjectName ( " org . apache . cassandra . concurrent : type = " + threadFactory . id ) ) ; 
 + mbs . registerMBean ( this , new ObjectName ( mbeanName ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 84 , 6 + 87 , 33 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor implements 
 } 
 } 
 
 + private void unregisterMBean ( ) 
 + { 
 + try 
 + { 
 + ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( new ObjectName ( mbeanName ) ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + / / don ' t let it get in the way , but notify . 
 + logger _ . error ( ex . getMessage ( ) , ex ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void shutdown ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + super . shutdown ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < Runnable > shutdownNow ( ) 
 + { 
 + unregisterMBean ( ) ; 
 + return super . shutdownNow ( ) ; 
 + } 
 + 
 / * * 
 * Get the number of completed tasks 
 * / 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 3b70d17 . . f5d8d35 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 122 , 7 + 122 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 return gossiper _ ; 
 } 
 
 - private Timer gossipTimer _ = new Timer ( false ) ; 
 + private Timer gossipTimer _ ; 
 private InetAddress localEndPoint _ ; 
 private long aVeryLongTime _ ; 
 private Random random _ = new Random ( ) ; 
 @ @ - 144 , 6 + 144 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 
 private Gossiper ( ) 
 { 
 + gossipTimer _ = new Timer ( false ) ; 
 aVeryLongTime _ = 259200 * 1000 ; 
 / * register with the Failure Detector for receiving Failure detector events * / 
 FailureDetector . instance ( ) . registerFailureDetectionEventListener ( this ) ; 
 @ @ - 834 , 6 + 835 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener , IEndPointStateC 
 public void stop ( ) 
 { 
 gossipTimer _ . cancel ( ) ; 
 + gossipTimer _ = new Timer ( false ) ; / / makes the Gossiper reentrant . 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index 8ff93f6 . . b1ad5ed 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 6 + 69 , 9 @ @ public class MessagingService 
 
 / * List of sockets we are listening on * / 
 private static Map < InetAddress , SelectionKey > listenSockets _ = new HashMap < InetAddress , SelectionKey > ( ) ; 
 + 
 + / * List of UdpConnections we are listening on * / 
 + private static Map < InetAddress , UdpConnection > udpConnections _ = new HashMap < InetAddress , UdpConnection > ( ) ; 
 
 / * Lookup table for registering message handlers based on the verb . * / 
 private static Map < String , IVerbHandler > verbHandlers _ ; 
 @ @ - 214 , 7 + 217 , 8 @ @ public class MessagingService 
 try 
 { 
 connection . init ( localEp ) ; 
 - endPoints _ . add ( localEp ) ; 
 + endPoints _ . add ( localEp ) ; 
 + udpConnections _ . put ( localEp , connection ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 497 , 7 + 501 , 7 @ @ public class MessagingService 
 logger _ . info ( " Shutting down . . . " ) ; 
 synchronized ( MessagingService . class ) 
 { 
 - / * Stop listening on any socket * / 
 + / * Stop listening on any TCP socket * / 
 for ( SelectionKey skey : listenSockets _ . values ( ) ) 
 { 
 skey . cancel ( ) ; 
 @ @ - 509 , 6 + 513 , 13 @ @ public class MessagingService 
 } 
 listenSockets _ . clear ( ) ; 
 
 + / * Stop listening on any UDP ports . * / 
 + for ( UdpConnection con : udpConnections _ . values ( ) ) 
 + { 
 + con . close ( ) ; 
 + } 
 + udpConnections _ . clear ( ) ; 
 + 
 / * Shutdown the threads in the EventQueue ' s * / 
 messageDeserializationExecutor _ . shutdownNow ( ) ; 
 messageDeserializerExecutor _ . shutdownNow ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / net / SelectorManager . java b / src / java / org / apache / cassandra / net / SelectorManager . java 
 index 7623a05 . . 16511ee 100644 
 - - - a / src / java / org / apache / cassandra / net / SelectorManager . java 
 + + + b / src / java / org / apache / cassandra / net / SelectorManager . java 
 @ @ - 35 , 6 + 35 , 9 @ @ public class SelectorManager extends Thread 
 / / workaround JDK select / register bug 
 Object gate = new Object ( ) ; 
 
 + / / flag to indicate that shutdown has been requested . 
 + private boolean shutdownRequested = false ; 
 + 
 / / The static selector manager which is used by all applications 
 private static SelectorManager manager ; 
 
 @ @ - 82 , 7 + 85 , 13 @ @ public class SelectorManager extends Thread 
 selector . wakeup ( ) ; 
 return channel . register ( selector , ops , handler ) ; 
 } 
 - } 
 + } 
 + 
 + / / requests the thread to shutdown . However , it brings no guarantees . Added for testing . 
 + private void requestShutdown ( ) 
 + { 
 + shutdownRequested = true ; 
 + } 
 
 / * * 
 * This method starts the socket manager listening for events . It is 
 @ @ - 102 , 6 + 111 , 11 @ @ public class SelectorManager extends Thread 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 + if ( shutdownRequested ) 
 + { 
 + shutdownRequested = false ; 
 + break ; 
 + } 
 } 
 } 
 
 @ @ - 145 , 6 + 159 , 22 @ @ public class SelectorManager extends Thread 
 } 
 
 / * * 
 + * Intended to reset the singleton as part of testing . 
 + * / 
 + static void reset ( ) 
 + { 
 + synchronized ( SelectorManager . class ) 
 + { 
 + if ( manager ! = null ) 
 + manager . requestShutdown ( ) ; 
 + manager = null ; 
 + if ( udpManager ! = null ) 
 + udpManager . requestShutdown ( ) ; 
 + udpManager = null ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the SelectorManager applications should use . 
 * 
 * @ return The SelectorManager which applications should use 
 diff - - git a / test / unit / org / apache / cassandra / CleanupHelper . java b / test / unit / org / apache / cassandra / CleanupHelper . java 
 index 969a2cd . . e3cde8d 100644 
 - - - a / test / unit / org / apache / cassandra / CleanupHelper . java 
 + + + b / test / unit / org / apache / cassandra / CleanupHelper . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 package org . apache . cassandra ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 import org . junit . BeforeClass ; 
 
 @ @ - 30 , 6 + 31 , 13 @ @ public class CleanupHelper 
 private static Logger logger = Logger . getLogger ( CleanupHelper . class ) ; 
 
 @ BeforeClass 
 + public static void cleanupAndLeaveDirs ( ) 
 + { 
 + mkdirs ( ) ; 
 + cleanup ( ) ; 
 + mkdirs ( ) ; 
 + } 
 + 
 public static void cleanup ( ) 
 { 
 / / we clean the fs twice , once to start with ( so old data files don ' t get stored by anything static if this is the first run ) 
 @ @ - 38 , 6 + 46 , 10 @ @ public class CleanupHelper 
 DatabaseDescriptor . getLogFileLocation ( ) , 
 } ; 
 
 + / / try to delete the directories themselves too . don ' t panic if this fails . it probably means that the process 
 + / / doesn ' t have permissions to do so , or it contains non - cassandra generated files that were intentionally 
 + / / put there . 
 + 
 for ( String dirName : directoryNames ) 
 { 
 File dir = new File ( dirName ) ; 
 @ @ - 47 , 11 + 59 , 15 @ @ public class CleanupHelper 
 } 
 for ( File f : dir . listFiles ( ) ) 
 { 
 - if ( ! f . delete ( ) ) { 
 + if ( ! f . delete ( ) ) 
 + { 
 logger . error ( " could not delete " + f ) ; 
 + } 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 - } 
 
 / / cleanup data directory which are stored as data directory / table / data files 
 for ( String dirName : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 @ @ - 71 , 8 + 87 , 24 @ @ public class CleanupHelper 
 } 
 } 
 } 
 + if ( ! tableFile . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + 
 + if ( ! dir . delete ( ) ) 
 + logger . warn ( " could not delete " + dir . getPath ( ) ) ; 
 } 
 + } 
 
 + public static void mkdirs ( ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . createAllDirectories ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / net / NetPackageAccessor . java b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 new file mode 100644 
 index 0000000 . . 408bfba 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / net / NetPackageAccessor . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . net ; 
 + 
 + / * * 
 + For accesing package - level members created for the sole purpose of testing . 
 + * / 
 + public class NetPackageAccessor 
 + { 
 + public static void resetSelectorManager ( ) 
 + { 
 + SelectorManager . reset ( ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / service / StorageServiceTest . java b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 new file mode 100644 
 index 0000000 . . 0ec9ffe 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / service / StorageServiceTest . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . service ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . net . NetPackageAccessor ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertFalse ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + public class StorageServiceTest 
 + { 
 + @ Test 
 + public void testClientOnlyMode ( ) throws IOException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initClient ( ) ; 
 + 
 + / / verify that no storage directories were created . 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + assertFalse ( new File ( path ) . exists ( ) ) ; 
 + } 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testRegularMode ( ) throws IOException , InterruptedException 
 + { 
 + CleanupHelper . mkdirs ( ) ; 
 + CleanupHelper . cleanup ( ) ; 
 + StorageService . instance ( ) . initServer ( ) ; 
 + for ( String path : DatabaseDescriptor . getAllDataFileLocations ( ) ) 
 + { 
 + / / verify that storage directories are there . 
 + assertTrue ( new File ( path ) . exists ( ) ) ; 
 + } 
 + / / a proper test would be to call decommission here , but decommission ( ) mixes both shutdown and datatransfer 
 + / / calls . This test is only interested in the shutdown - related items which a properly handled by just 
 + / / stopping the client . 
 + / / StorageService . instance ( ) . decommission ( ) ; 
 + StorageService . instance ( ) . stopClient ( ) ; 
 + NetPackageAccessor . resetSelectorManager ( ) ; 
 + } 
 + }
