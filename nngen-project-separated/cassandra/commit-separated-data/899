BLEU SCORE: 0.020980574531482755

TEST MSG: Fix is _ dense recalculation for Thrift - updated tables
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e8a301a . . 3641816 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 9 + 1 , 10 @ @ <nl> 2 . 2 . 7 <nl> + * Fix is _ dense recalculation for Thrift - updated tables ( CASSANDRA - 11502 ) <nl> * Remove unnescessary file existence check during anticompaction ( CASSANDRA - 11660 ) <nl> * Add missing files to debian packages ( CASSANDRA - 11642 ) <nl> * Avoid calling Iterables : : concat in loops during ModificationStatement : : getFunctions ( CASSANDRA - 11621 ) <nl> * cqlsh : COPY FROM should use regular inserts for single statement batches and <nl> - report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) <nl> + report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) <nl> * Always close cluster with connection in CqlRecordWriter ( CASSANDRA - 11553 ) <nl> Merged from 2 . 1 : <nl> * cqlsh COPY FROM fails for null values with non - prepared statements ( CASSANDRA - 11631 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> index 63a53fa . . f4a7b39 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java <nl> @ @ - 284 , 7 + 284 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement <nl> break ; <nl> } <nl> <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> index 6459e6b . . 9203cf9 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java <nl> @ @ - 113 , 7 + 113 , 7 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement <nl> for ( ColumnDefinition def : copy . allColumns ( ) ) <nl> modified | = updateDefinition ( copy , def , toUpdate . keyspace , toUpdate . name , updated ) ; <nl> if ( modified ) <nl> - MigrationManager . announceColumnFamilyUpdate ( copy , false , isLocalOnly ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( copy , isLocalOnly ) ; <nl> } <nl> <nl> / / Other user types potentially using the updated type <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> index edc092d . . d93c0a7 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement <nl> <nl> cd . setIndexName ( indexName ) ; <nl> cfm . addDefaultIndexNames ( ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> index 6ebe0d3 . . ef2f263 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class CreateTriggerStatement extends SchemaAlteringStatement <nl> { <nl> cfm . addTriggerDefinition ( triggerDefinition ) ; <nl> logger . info ( " Adding trigger with name { } and class { } " , triggerName , triggerClass ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; <nl> return true ; <nl> } <nl> return false ; <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> index c6c0244 . . 0d33e57 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class DropIndexStatement extends SchemaAlteringStatement <nl> <nl> CFMetaData updatedCfm = updateCFMetadata ( cfm ) ; <nl> indexedCF = updatedCfm . cfName ; <nl> - MigrationManager . announceColumnFamilyUpdate ( updatedCfm , false , isLocalOnly ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( updatedCfm , isLocalOnly ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> index e3db1e1 . . 8267b4e 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class DropTriggerStatement extends SchemaAlteringStatement <nl> if ( cfm . removeTrigger ( triggerName ) ) <nl> { <nl> logger . info ( " Dropping trigger with name { } " , triggerName ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; <nl> return true ; <nl> } <nl> if ( ! ifExists ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> index 0ef9852 . . 8d5bf4f 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> + + + b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java <nl> @ @ - 908 , 8 + 908 , 7 @ @ public class LegacySchemaTables <nl> public static Mutation makeUpdateTableMutation ( KSMetaData keyspace , <nl> CFMetaData oldTable , <nl> CFMetaData newTable , <nl> - long timestamp , <nl> - boolean fromThrift ) <nl> + long timestamp ) <nl> { <nl> Mutation mutation = makeCreateKeyspaceMutation ( keyspace , timestamp , false ) ; <nl> <nl> @ @ - 920 , 14 + 919 , 7 @ @ public class LegacySchemaTables <nl> <nl> / / columns that are no longer needed <nl> for ( ColumnDefinition column : columnDiff . entriesOnlyOnLeft ( ) . values ( ) ) <nl> - { <nl> - / / Thrift only knows about the REGULAR ColumnDefinition type , so don ' t consider other type <nl> - / / are being deleted just because they are not here . <nl> - if ( fromThrift & & column . kind ! = ColumnDefinition . Kind . REGULAR ) <nl> - continue ; <nl> - <nl> dropColumnFromSchemaMutation ( oldTable , column , timestamp , mutation ) ; <nl> - } <nl> <nl> / / newly added columns <nl> for ( ColumnDefinition column : columnDiff . entriesOnlyOnRight ( ) . values ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index ec7448a . . f7a2a48 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 346 , 12 + 346 , 12 @ @ public class MigrationManager <nl> announce ( LegacySchemaTables . makeCreateKeyspaceMutation ( ksm , FBUtilities . timestampMicros ( ) ) , announceLocally ) ; <nl> } <nl> <nl> - public static void announceColumnFamilyUpdate ( CFMetaData cfm , boolean fromThrift ) throws ConfigurationException <nl> + public static void announceColumnFamilyUpdate ( CFMetaData cfm ) throws ConfigurationException <nl> { <nl> - announceColumnFamilyUpdate ( cfm , fromThrift , false ) ; <nl> + announceColumnFamilyUpdate ( cfm , false ) ; <nl> } <nl> <nl> - public static void announceColumnFamilyUpdate ( CFMetaData cfm , boolean fromThrift , boolean announceLocally ) throws ConfigurationException <nl> + public static void announceColumnFamilyUpdate ( CFMetaData cfm , boolean announceLocally ) throws ConfigurationException <nl> { <nl> cfm . validate ( ) ; <nl> <nl> @ @ - 363 , 7 + 363 , 7 @ @ public class MigrationManager <nl> oldCfm . validateCompatility ( cfm ) ; <nl> <nl> logger . info ( String . format ( " Update table ' % s / % s ' From % s To % s " , cfm . ksName , cfm . cfName , oldCfm , cfm ) ) ; <nl> - announce ( LegacySchemaTables . makeUpdateTableMutation ( ksm , oldCfm , cfm , FBUtilities . timestampMicros ( ) , fromThrift ) , announceLocally ) ; <nl> + announce ( LegacySchemaTables . makeUpdateTableMutation ( ksm , oldCfm , cfm , FBUtilities . timestampMicros ( ) ) , announceLocally ) ; <nl> } <nl> <nl> public static void announceTypeUpdate ( UserType updatedType , boolean announceLocally ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 694a36a . . 36664ae 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 1661 , 7 + 1661 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> if ( ! oldCfm . getTriggers ( ) . equals ( cfm . getTriggers ( ) ) ) <nl> state ( ) . ensureIsSuper ( " Only superusers are allowed to add or remove triggers . " ) ; <nl> <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm , true ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm ) ; <nl> return Schema . instance . getVersion ( ) . toString ( ) ; <nl> } <nl> catch ( RequestValidationException e ) <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftConversion . java b / src / java / org / apache / cassandra / thrift / ThriftConversion . java <nl> index adb925e . . 04eae38 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftConversion . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftConversion . java <nl> @ @ - 223 , 16 + 223 , 33 @ @ public class ThriftConversion <nl> if ( hasKeyAlias ) <nl> defs . add ( ColumnDefinition . partitionKeyDef ( cf _ def . keyspace , cf _ def . name , cf _ def . key _ alias , keyValidator , null ) ) ; <nl> <nl> + / / for Thrift updates , we should be calculating denseness from just the regular columns & comparator <nl> + boolean isDense = CFMetaData . calculateIsDense ( fullRawComparator , defs ) ; <nl> + <nl> / / Now add any CQL metadata that we want to copy , skipping the keyAlias if there was one <nl> for ( ColumnDefinition def : previousCQLMetadata ) <nl> { <nl> - / / isPartOfCellName basically means ' is not just a CQL metadata ' <nl> - if ( def . isPartOfCellName ( ) ) <nl> + / / skip all pre - existing REGULAR columns <nl> + if ( def . kind = = ColumnDefinition . Kind . REGULAR ) <nl> continue ; <nl> <nl> + / / skip previous PARTITION _ KEY column def if key _ alias has been set by this update already ( overwritten ) <nl> if ( def . kind = = ColumnDefinition . Kind . PARTITION _ KEY & & hasKeyAlias ) <nl> continue ; <nl> <nl> + / / the table switched from DENSE to SPARSE by adding one or more REGULAR columns ; <nl> + / / in this case we should now drop the COMPACT _ VALUE column <nl> + if ( def . kind = = ColumnDefinition . Kind . COMPACT _ VALUE & & ! isDense ) <nl> + continue ; <nl> + <nl> + / / skip CLUSTERING _ COLUMN column ( s ) of a sparse table , if : <nl> + / / a ) this is a Standard columnfamily * OR * b ) it ' s a Super columnfamily and the second ( subcolumn ) component ; <nl> + / / in other words , only keep the clustering column in sparse tables if it ' s the first ( super ) component <nl> + / / of a super column family <nl> + if ( def . kind = = ColumnDefinition . Kind . CLUSTERING _ COLUMN & & ! isDense ) <nl> + if ( cfType = = ColumnFamilyType . Standard | | def . position ( ) ! = 0 ) <nl> + continue ; <nl> + <nl> defs . add ( def ) ; <nl> } <nl> <nl> @ @ - 242 , 7 + 259 , 8 @ @ public class ThriftConversion <nl> if ( cfId = = null ) <nl> cfId = UUIDGen . getTimeUUID ( ) ; <nl> <nl> - CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , cf _ def . name , cfType , comparator , cfId ) ; <nl> + / / set isDense now so that it doesn ' t get re - calculated incorrectly later in rebuild ( ) b / c of defined clusterings <nl> + CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , cf _ def . name , cfType , comparator , cfId ) . isDense ( isDense ) ; <nl> <nl> newCFMD . addAllColumnDefinitions ( defs ) ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java b / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java <nl> index 3642e7a . . f630c88 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * * <nl> + / * <nl> * Licensed to the Apache Software Foundation ( ASF ) under one <nl> * or more contributor license agreements . See the NOTICE file <nl> * distributed with this work for additional information <nl> @ @ - 19 , 18 + 19 , 23 @ @ <nl> package org . apache . cassandra . config ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> import org . apache . cassandra . SchemaLoader ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . AsciiType ; <nl> + import org . apache . cassandra . db . marshal . BytesType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . io . compress . * ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . schema . LegacySchemaTables ; <nl> + import org . apache . cassandra . service . MigrationManager ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . thrift . CfDef ; <nl> import org . apache . cassandra . thrift . ColumnDef ; <nl> @ @ - 43 , 11 + 48 , 16 @ @ import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> + import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . assertTrue ; <nl> <nl> public class LegacySchemaTablesTest <nl> { <nl> private static final String KEYSPACE1 = " CFMetaDataTest1 " ; <nl> private static final String CF _ STANDARD1 = " Standard1 " ; <nl> + private static final String CF _ STANDARD2 = " Standard2 " ; <nl> <nl> private static List < ColumnDef > columnDefs = new ArrayList < ColumnDef > ( ) ; <nl> <nl> @ @ - 73 , 6 + 83 , 54 @ @ public class LegacySchemaTablesTest <nl> } <nl> <nl> @ Test <nl> + public void testIsDenseRecalculation ( ) <nl> + { <nl> + / / 1 . a start with a dense CF <nl> + CfDef cfDef0 = new CfDef ( ) . setDefault _ validation _ class ( BytesType . class . getCanonicalName ( ) ) <nl> + . setComparator _ type ( UTF8Type . class . getCanonicalName ( ) ) <nl> + . setColumn _ metadata ( Collections . < ColumnDef > emptyList ( ) ) <nl> + . setKeyspace ( KEYSPACE1 ) <nl> + . setName ( CF _ STANDARD2 ) ; <nl> + CFMetaData cfm0 = ThriftConversion . fromThrift ( cfDef0 ) ; <nl> + MigrationManager . announceNewColumnFamily ( cfm0 , true ) ; <nl> + <nl> + / / 1 . b validate that the cf is dense , has a single compact value and a clustering column , and no regulars <nl> + CFMetaData current = Schema . instance . getCFMetaData ( KEYSPACE1 , CF _ STANDARD2 ) ; <nl> + assertTrue ( current . getIsDense ( ) ) ; <nl> + assertNotNull ( current . compactValueColumn ( ) ) ; <nl> + assertEquals ( 0 , Iterables . size ( current . regularAndStaticColumns ( ) ) ) ; <nl> + assertEquals ( 1 , current . clusteringColumns ( ) . size ( ) ) ; <nl> + <nl> + / / 2 . a add a column to the table <nl> + CfDef cfDef1 = ThriftConversion . toThrift ( current ) ; <nl> + List < ColumnDef > colDefs = <nl> + Collections . singletonList ( new ColumnDef ( ByteBufferUtil . bytes ( " col1 " ) , AsciiType . class . getCanonicalName ( ) ) ) ; <nl> + cfDef1 . setColumn _ metadata ( colDefs ) ; <nl> + CFMetaData cfm1 = ThriftConversion . fromThriftForUpdate ( cfDef1 , current ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm1 , true ) ; <nl> + <nl> + / / 2 . b validate that the cf is sparse now , had no compact value column or clustering column , and 1 regular <nl> + current = Schema . instance . getCFMetaData ( KEYSPACE1 , CF _ STANDARD2 ) ; <nl> + assertFalse ( current . getIsDense ( ) ) ; <nl> + assertNull ( current . compactValueColumn ( ) ) ; <nl> + assertEquals ( 1 , Iterables . size ( current . regularAndStaticColumns ( ) ) ) ; <nl> + assertEquals ( 0 , current . clusteringColumns ( ) . size ( ) ) ; <nl> + <nl> + / / 3 . a remove the column <nl> + CfDef cfDef2 = ThriftConversion . toThrift ( current ) ; <nl> + cfDef2 . setColumn _ metadata ( Collections . < ColumnDef > emptyList ( ) ) ; <nl> + CFMetaData cfm2 = ThriftConversion . fromThriftForUpdate ( cfDef2 , current ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm2 , true ) ; <nl> + <nl> + / / 3 . b validate that the cf is dense , has a single compact value and a clustering column , and no regulars <nl> + current = Schema . instance . getCFMetaData ( KEYSPACE1 , CF _ STANDARD2 ) ; <nl> + assertTrue ( current . getIsDense ( ) ) ; <nl> + assertNotNull ( current . compactValueColumn ( ) ) ; <nl> + assertEquals ( 0 , Iterables . size ( current . regularAndStaticColumns ( ) ) ) ; <nl> + assertEquals ( 1 , current . clusteringColumns ( ) . size ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> public void testThriftConversion ( ) throws Exception <nl> { <nl> CfDef cfDef = new CfDef ( ) . setDefault _ validation _ class ( AsciiType . class . getCanonicalName ( ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / schema / DefsTest . java b / test / unit / org / apache / cassandra / schema / DefsTest . java <nl> index 302878a . . ecf6709 100644 <nl> - - - a / test / unit / org / apache / cassandra / schema / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / schema / DefsTest . java <nl> @ @ - 462 , 22 + 462 , 22 @ @ public class DefsTest <nl> <nl> / / test valid operations . <nl> newCfm . comment ( " Modified comment " ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; / / doesn ' t get set back here . <nl> + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; / / doesn ' t get set back here . <nl> <nl> newCfm . readRepairChance ( 0 . 23 ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; <nl> <nl> newCfm . gcGraceSeconds ( 12 ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; <nl> <nl> newCfm . defaultValidator ( UTF8Type . instance ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; <nl> <nl> newCfm . minCompactionThreshold ( 3 ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; <nl> <nl> newCfm . maxCompactionThreshold ( 33 ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; <nl> <nl> / / can ' t test changing the reconciler because there is only one impl . <nl> <nl> @ @ - 559 , 7 + 559 , 7 @ @ public class DefsTest <nl> ColumnDefinition cdOld = meta . regularColumns ( ) . iterator ( ) . next ( ) ; <nl> ColumnDefinition cdNew = ColumnDefinition . regularDef ( meta , cdOld . name . bytes , cdOld . type , null ) ; <nl> meta . addOrReplaceColumnDefinition ( cdNew ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( meta , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( meta ) ; <nl> <nl> / / check <nl> Assert . assertTrue ( cfs . indexManager . getIndexes ( ) . isEmpty ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java <nl> index 577e7d3 . . 58f743e 100644 <nl> - - - a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java <nl> + + + b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class TriggersSchemaTest <nl> CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; <nl> TriggerDefinition td = TriggerDefinition . create ( triggerName , triggerClass ) ; <nl> cfm2 . addTriggerDefinition ( td ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm2 ) ; <nl> <nl> CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) ; <nl> assertFalse ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ; <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class TriggersSchemaTest <nl> <nl> CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; <nl> cfm2 . removeTrigger ( triggerName ) ; <nl> - MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; <nl> + MigrationManager . announceColumnFamilyUpdate ( cfm2 ) ; <nl> <nl> CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; <nl> assertTrue ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e8a301a . . 3641816 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 9 + 1 , 10 @ @ 
 2 . 2 . 7 
 + * Fix is _ dense recalculation for Thrift - updated tables ( CASSANDRA - 11502 ) 
 * Remove unnescessary file existence check during anticompaction ( CASSANDRA - 11660 ) 
 * Add missing files to debian packages ( CASSANDRA - 11642 ) 
 * Avoid calling Iterables : : concat in loops during ModificationStatement : : getFunctions ( CASSANDRA - 11621 ) 
 * cqlsh : COPY FROM should use regular inserts for single statement batches and 
 - report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) 
 + report errors correctly if workers processes crash on initialization ( CASSANDRA - 11474 ) 
 * Always close cluster with connection in CqlRecordWriter ( CASSANDRA - 11553 ) 
 Merged from 2 . 1 : 
 * cqlsh COPY FROM fails for null values with non - prepared statements ( CASSANDRA - 11631 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 index 63a53fa . . f4a7b39 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTableStatement . java 
 @ @ - 284 , 7 + 284 , 7 @ @ public class AlterTableStatement extends SchemaAlteringStatement 
 break ; 
 } 
 
 - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; 
 return true ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 index 6459e6b . . 9203cf9 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterTypeStatement . java 
 @ @ - 113 , 7 + 113 , 7 @ @ public abstract class AlterTypeStatement extends SchemaAlteringStatement 
 for ( ColumnDefinition def : copy . allColumns ( ) ) 
 modified | = updateDefinition ( copy , def , toUpdate . keyspace , toUpdate . name , updated ) ; 
 if ( modified ) 
 - MigrationManager . announceColumnFamilyUpdate ( copy , false , isLocalOnly ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( copy , isLocalOnly ) ; 
 } 
 
 / / Other user types potentially using the updated type 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 index edc092d . . d93c0a7 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateIndexStatement . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public class CreateIndexStatement extends SchemaAlteringStatement 
 
 cd . setIndexName ( indexName ) ; 
 cfm . addDefaultIndexNames ( ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; 
 return true ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 index 6ebe0d3 . . ef2f263 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTriggerStatement . java 
 @ @ - 78 , 7 + 78 , 7 @ @ public class CreateTriggerStatement extends SchemaAlteringStatement 
 { 
 cfm . addTriggerDefinition ( triggerDefinition ) ; 
 logger . info ( " Adding trigger with name { } and class { } " , triggerName , triggerClass ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; 
 return true ; 
 } 
 return false ; 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 index c6c0244 . . 0d33e57 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropIndexStatement . java 
 @ @ - 97 , 7 + 97 , 7 @ @ public class DropIndexStatement extends SchemaAlteringStatement 
 
 CFMetaData updatedCfm = updateCFMetadata ( cfm ) ; 
 indexedCF = updatedCfm . cfName ; 
 - MigrationManager . announceColumnFamilyUpdate ( updatedCfm , false , isLocalOnly ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( updatedCfm , isLocalOnly ) ; 
 return true ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 index e3db1e1 . . 8267b4e 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DropTriggerStatement . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class DropTriggerStatement extends SchemaAlteringStatement 
 if ( cfm . removeTrigger ( triggerName ) ) 
 { 
 logger . info ( " Dropping trigger with name { } " , triggerName ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( cfm , false , isLocalOnly ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm , isLocalOnly ) ; 
 return true ; 
 } 
 if ( ! ifExists ) 
 diff - - git a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 index 0ef9852 . . 8d5bf4f 100644 
 - - - a / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 + + + b / src / java / org / apache / cassandra / schema / LegacySchemaTables . java 
 @ @ - 908 , 8 + 908 , 7 @ @ public class LegacySchemaTables 
 public static Mutation makeUpdateTableMutation ( KSMetaData keyspace , 
 CFMetaData oldTable , 
 CFMetaData newTable , 
 - long timestamp , 
 - boolean fromThrift ) 
 + long timestamp ) 
 { 
 Mutation mutation = makeCreateKeyspaceMutation ( keyspace , timestamp , false ) ; 
 
 @ @ - 920 , 14 + 919 , 7 @ @ public class LegacySchemaTables 
 
 / / columns that are no longer needed 
 for ( ColumnDefinition column : columnDiff . entriesOnlyOnLeft ( ) . values ( ) ) 
 - { 
 - / / Thrift only knows about the REGULAR ColumnDefinition type , so don ' t consider other type 
 - / / are being deleted just because they are not here . 
 - if ( fromThrift & & column . kind ! = ColumnDefinition . Kind . REGULAR ) 
 - continue ; 
 - 
 dropColumnFromSchemaMutation ( oldTable , column , timestamp , mutation ) ; 
 - } 
 
 / / newly added columns 
 for ( ColumnDefinition column : columnDiff . entriesOnlyOnRight ( ) . values ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index ec7448a . . f7a2a48 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 346 , 12 + 346 , 12 @ @ public class MigrationManager 
 announce ( LegacySchemaTables . makeCreateKeyspaceMutation ( ksm , FBUtilities . timestampMicros ( ) ) , announceLocally ) ; 
 } 
 
 - public static void announceColumnFamilyUpdate ( CFMetaData cfm , boolean fromThrift ) throws ConfigurationException 
 + public static void announceColumnFamilyUpdate ( CFMetaData cfm ) throws ConfigurationException 
 { 
 - announceColumnFamilyUpdate ( cfm , fromThrift , false ) ; 
 + announceColumnFamilyUpdate ( cfm , false ) ; 
 } 
 
 - public static void announceColumnFamilyUpdate ( CFMetaData cfm , boolean fromThrift , boolean announceLocally ) throws ConfigurationException 
 + public static void announceColumnFamilyUpdate ( CFMetaData cfm , boolean announceLocally ) throws ConfigurationException 
 { 
 cfm . validate ( ) ; 
 
 @ @ - 363 , 7 + 363 , 7 @ @ public class MigrationManager 
 oldCfm . validateCompatility ( cfm ) ; 
 
 logger . info ( String . format ( " Update table ' % s / % s ' From % s To % s " , cfm . ksName , cfm . cfName , oldCfm , cfm ) ) ; 
 - announce ( LegacySchemaTables . makeUpdateTableMutation ( ksm , oldCfm , cfm , FBUtilities . timestampMicros ( ) , fromThrift ) , announceLocally ) ; 
 + announce ( LegacySchemaTables . makeUpdateTableMutation ( ksm , oldCfm , cfm , FBUtilities . timestampMicros ( ) ) , announceLocally ) ; 
 } 
 
 public static void announceTypeUpdate ( UserType updatedType , boolean announceLocally ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 694a36a . . 36664ae 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 1661 , 7 + 1661 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 if ( ! oldCfm . getTriggers ( ) . equals ( cfm . getTriggers ( ) ) ) 
 state ( ) . ensureIsSuper ( " Only superusers are allowed to add or remove triggers . " ) ; 
 
 - MigrationManager . announceColumnFamilyUpdate ( cfm , true ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm ) ; 
 return Schema . instance . getVersion ( ) . toString ( ) ; 
 } 
 catch ( RequestValidationException e ) 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftConversion . java b / src / java / org / apache / cassandra / thrift / ThriftConversion . java 
 index adb925e . . 04eae38 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftConversion . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftConversion . java 
 @ @ - 223 , 16 + 223 , 33 @ @ public class ThriftConversion 
 if ( hasKeyAlias ) 
 defs . add ( ColumnDefinition . partitionKeyDef ( cf _ def . keyspace , cf _ def . name , cf _ def . key _ alias , keyValidator , null ) ) ; 
 
 + / / for Thrift updates , we should be calculating denseness from just the regular columns & comparator 
 + boolean isDense = CFMetaData . calculateIsDense ( fullRawComparator , defs ) ; 
 + 
 / / Now add any CQL metadata that we want to copy , skipping the keyAlias if there was one 
 for ( ColumnDefinition def : previousCQLMetadata ) 
 { 
 - / / isPartOfCellName basically means ' is not just a CQL metadata ' 
 - if ( def . isPartOfCellName ( ) ) 
 + / / skip all pre - existing REGULAR columns 
 + if ( def . kind = = ColumnDefinition . Kind . REGULAR ) 
 continue ; 
 
 + / / skip previous PARTITION _ KEY column def if key _ alias has been set by this update already ( overwritten ) 
 if ( def . kind = = ColumnDefinition . Kind . PARTITION _ KEY & & hasKeyAlias ) 
 continue ; 
 
 + / / the table switched from DENSE to SPARSE by adding one or more REGULAR columns ; 
 + / / in this case we should now drop the COMPACT _ VALUE column 
 + if ( def . kind = = ColumnDefinition . Kind . COMPACT _ VALUE & & ! isDense ) 
 + continue ; 
 + 
 + / / skip CLUSTERING _ COLUMN column ( s ) of a sparse table , if : 
 + / / a ) this is a Standard columnfamily * OR * b ) it ' s a Super columnfamily and the second ( subcolumn ) component ; 
 + / / in other words , only keep the clustering column in sparse tables if it ' s the first ( super ) component 
 + / / of a super column family 
 + if ( def . kind = = ColumnDefinition . Kind . CLUSTERING _ COLUMN & & ! isDense ) 
 + if ( cfType = = ColumnFamilyType . Standard | | def . position ( ) ! = 0 ) 
 + continue ; 
 + 
 defs . add ( def ) ; 
 } 
 
 @ @ - 242 , 7 + 259 , 8 @ @ public class ThriftConversion 
 if ( cfId = = null ) 
 cfId = UUIDGen . getTimeUUID ( ) ; 
 
 - CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , cf _ def . name , cfType , comparator , cfId ) ; 
 + / / set isDense now so that it doesn ' t get re - calculated incorrectly later in rebuild ( ) b / c of defined clusterings 
 + CFMetaData newCFMD = new CFMetaData ( cf _ def . keyspace , cf _ def . name , cfType , comparator , cfId ) . isDense ( isDense ) ; 
 
 newCFMD . addAllColumnDefinitions ( defs ) ; 
 
 diff - - git a / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java b / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java 
 index 3642e7a . . f630c88 100644 
 - - - a / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java 
 + + + b / test / unit / org / apache / cassandra / config / LegacySchemaTablesTest . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * * 
 + / * 
 * Licensed to the Apache Software Foundation ( ASF ) under one 
 * or more contributor license agreements . See the NOTICE file 
 * distributed with this work for additional information 
 @ @ - 19 , 18 + 19 , 23 @ @ 
 package org . apache . cassandra . config ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 
 + import com . google . common . collect . Iterables ; 
 + 
 import org . apache . cassandra . SchemaLoader ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . AsciiType ; 
 + import org . apache . cassandra . db . marshal . BytesType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . io . compress . * ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . schema . LegacySchemaTables ; 
 + import org . apache . cassandra . service . MigrationManager ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . thrift . CfDef ; 
 import org . apache . cassandra . thrift . ColumnDef ; 
 @ @ - 43 , 11 + 48 , 16 @ @ import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertNotNull ; 
 + import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . assertTrue ; 
 
 public class LegacySchemaTablesTest 
 { 
 private static final String KEYSPACE1 = " CFMetaDataTest1 " ; 
 private static final String CF _ STANDARD1 = " Standard1 " ; 
 + private static final String CF _ STANDARD2 = " Standard2 " ; 
 
 private static List < ColumnDef > columnDefs = new ArrayList < ColumnDef > ( ) ; 
 
 @ @ - 73 , 6 + 83 , 54 @ @ public class LegacySchemaTablesTest 
 } 
 
 @ Test 
 + public void testIsDenseRecalculation ( ) 
 + { 
 + / / 1 . a start with a dense CF 
 + CfDef cfDef0 = new CfDef ( ) . setDefault _ validation _ class ( BytesType . class . getCanonicalName ( ) ) 
 + . setComparator _ type ( UTF8Type . class . getCanonicalName ( ) ) 
 + . setColumn _ metadata ( Collections . < ColumnDef > emptyList ( ) ) 
 + . setKeyspace ( KEYSPACE1 ) 
 + . setName ( CF _ STANDARD2 ) ; 
 + CFMetaData cfm0 = ThriftConversion . fromThrift ( cfDef0 ) ; 
 + MigrationManager . announceNewColumnFamily ( cfm0 , true ) ; 
 + 
 + / / 1 . b validate that the cf is dense , has a single compact value and a clustering column , and no regulars 
 + CFMetaData current = Schema . instance . getCFMetaData ( KEYSPACE1 , CF _ STANDARD2 ) ; 
 + assertTrue ( current . getIsDense ( ) ) ; 
 + assertNotNull ( current . compactValueColumn ( ) ) ; 
 + assertEquals ( 0 , Iterables . size ( current . regularAndStaticColumns ( ) ) ) ; 
 + assertEquals ( 1 , current . clusteringColumns ( ) . size ( ) ) ; 
 + 
 + / / 2 . a add a column to the table 
 + CfDef cfDef1 = ThriftConversion . toThrift ( current ) ; 
 + List < ColumnDef > colDefs = 
 + Collections . singletonList ( new ColumnDef ( ByteBufferUtil . bytes ( " col1 " ) , AsciiType . class . getCanonicalName ( ) ) ) ; 
 + cfDef1 . setColumn _ metadata ( colDefs ) ; 
 + CFMetaData cfm1 = ThriftConversion . fromThriftForUpdate ( cfDef1 , current ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm1 , true ) ; 
 + 
 + / / 2 . b validate that the cf is sparse now , had no compact value column or clustering column , and 1 regular 
 + current = Schema . instance . getCFMetaData ( KEYSPACE1 , CF _ STANDARD2 ) ; 
 + assertFalse ( current . getIsDense ( ) ) ; 
 + assertNull ( current . compactValueColumn ( ) ) ; 
 + assertEquals ( 1 , Iterables . size ( current . regularAndStaticColumns ( ) ) ) ; 
 + assertEquals ( 0 , current . clusteringColumns ( ) . size ( ) ) ; 
 + 
 + / / 3 . a remove the column 
 + CfDef cfDef2 = ThriftConversion . toThrift ( current ) ; 
 + cfDef2 . setColumn _ metadata ( Collections . < ColumnDef > emptyList ( ) ) ; 
 + CFMetaData cfm2 = ThriftConversion . fromThriftForUpdate ( cfDef2 , current ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm2 , true ) ; 
 + 
 + / / 3 . b validate that the cf is dense , has a single compact value and a clustering column , and no regulars 
 + current = Schema . instance . getCFMetaData ( KEYSPACE1 , CF _ STANDARD2 ) ; 
 + assertTrue ( current . getIsDense ( ) ) ; 
 + assertNotNull ( current . compactValueColumn ( ) ) ; 
 + assertEquals ( 0 , Iterables . size ( current . regularAndStaticColumns ( ) ) ) ; 
 + assertEquals ( 1 , current . clusteringColumns ( ) . size ( ) ) ; 
 + } 
 + 
 + @ Test 
 public void testThriftConversion ( ) throws Exception 
 { 
 CfDef cfDef = new CfDef ( ) . setDefault _ validation _ class ( AsciiType . class . getCanonicalName ( ) ) 
 diff - - git a / test / unit / org / apache / cassandra / schema / DefsTest . java b / test / unit / org / apache / cassandra / schema / DefsTest . java 
 index 302878a . . ecf6709 100644 
 - - - a / test / unit / org / apache / cassandra / schema / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / schema / DefsTest . java 
 @ @ - 462 , 22 + 462 , 22 @ @ public class DefsTest 
 
 / / test valid operations . 
 newCfm . comment ( " Modified comment " ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; / / doesn ' t get set back here . 
 + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; / / doesn ' t get set back here . 
 
 newCfm . readRepairChance ( 0 . 23 ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; 
 
 newCfm . gcGraceSeconds ( 12 ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; 
 
 newCfm . defaultValidator ( UTF8Type . instance ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; 
 
 newCfm . minCompactionThreshold ( 3 ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; 
 
 newCfm . maxCompactionThreshold ( 33 ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( newCfm , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( newCfm ) ; 
 
 / / can ' t test changing the reconciler because there is only one impl . 
 
 @ @ - 559 , 7 + 559 , 7 @ @ public class DefsTest 
 ColumnDefinition cdOld = meta . regularColumns ( ) . iterator ( ) . next ( ) ; 
 ColumnDefinition cdNew = ColumnDefinition . regularDef ( meta , cdOld . name . bytes , cdOld . type , null ) ; 
 meta . addOrReplaceColumnDefinition ( cdNew ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( meta , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( meta ) ; 
 
 / / check 
 Assert . assertTrue ( cfs . indexManager . getIndexes ( ) . isEmpty ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java 
 index 577e7d3 . . 58f743e 100644 
 - - - a / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java 
 + + + b / test / unit / org / apache / cassandra / triggers / TriggersSchemaTest . java 
 @ @ - 103 , 7 + 103 , 7 @ @ public class TriggersSchemaTest 
 CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; 
 TriggerDefinition td = TriggerDefinition . create ( triggerName , triggerClass ) ; 
 cfm2 . addTriggerDefinition ( td ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm2 ) ; 
 
 CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) ; 
 assertFalse ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ; 
 @ @ - 126 , 7 + 126 , 7 @ @ public class TriggersSchemaTest 
 
 CFMetaData cfm2 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; 
 cfm2 . removeTrigger ( triggerName ) ; 
 - MigrationManager . announceColumnFamilyUpdate ( cfm2 , false ) ; 
 + MigrationManager . announceColumnFamilyUpdate ( cfm2 ) ; 
 
 CFMetaData cfm3 = Schema . instance . getCFMetaData ( ksName , cfName ) . copy ( ) ; 
 assertTrue ( cfm3 . getTriggers ( ) . isEmpty ( ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
