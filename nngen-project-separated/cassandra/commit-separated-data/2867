BLEU SCORE: 0.027611988917697356

TEST MSG: Fix potential assertion error in AbstractQueryPager . discardFirst
GENERATED MSG: fix merge

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8fd794c . . 60f86c3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> * Expose a total memtable size metric for a CF ( CASSANDRA - 6391 ) <nl> * cqlsh : handle symlinks properly ( CASSANDRA - 6425 ) <nl> * Fix potential infinite loop when paging query with IN ( CASSANDRA - 6464 ) <nl> + * Fix assertion error in AbstractQueryPager . discardFirst ( CASSANDRA - 6447 ) <nl> Merged from 1 . 2 : <nl> * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) <nl> * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> index 6f6772c . . 6047b5b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> + + + b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java <nl> @ @ - 175 , 18 + 175 , 37 @ @ abstract class AbstractQueryPager implements QueryPager <nl> <nl> private List < Row > discardFirst ( List < Row > rows ) <nl> { <nl> - Row first = rows . get ( 0 ) ; <nl> - ColumnFamily newCf = first . cf . cloneMeShallow ( ) ; <nl> - int discarded = isReversed ( ) <nl> - ? discardLast ( first . cf , 1 , newCf ) <nl> - : discardFirst ( first . cf , 1 , newCf ) ; <nl> - assert discarded = = 1 ; <nl> - <nl> - int count = newCf . getColumnCount ( ) ; <nl> - List < Row > newRows = new ArrayList < Row > ( count = = 0 ? rows . size ( ) - 1 : rows . size ( ) ) ; <nl> + return discardFirst ( rows , 1 ) ; <nl> + } <nl> + <nl> + private List < Row > discardFirst ( List < Row > rows , int toDiscard ) <nl> + { <nl> + if ( toDiscard = = 0 ) <nl> + return rows ; <nl> + <nl> + int i = 0 ; <nl> + DecoratedKey firstKey = null ; <nl> + ColumnFamily firstCf = null ; <nl> + while ( toDiscard > 0 & & i < rows . size ( ) ) <nl> + { <nl> + Row first = rows . get ( i + + ) ; <nl> + firstKey = first . key ; <nl> + firstCf = first . cf . cloneMeShallow ( ) ; <nl> + toDiscard - = isReversed ( ) <nl> + ? discardLast ( first . cf , toDiscard , firstCf ) <nl> + : discardFirst ( first . cf , toDiscard , firstCf ) ; <nl> + } <nl> + <nl> + / / If there is less live data than to discard , all is discarded <nl> + if ( i > = rows . size ( ) ) <nl> + return Collections . < Row > emptyList ( ) ; <nl> + <nl> + int count = firstCf . getColumnCount ( ) ; <nl> + int newSize = rows . size ( ) - i ; <nl> + List < Row > newRows = new ArrayList < Row > ( count = = 0 ? newSize - 1 : newSize ) ; <nl> if ( count ! = 0 ) <nl> - newRows . add ( new Row ( first . key , newCf ) ) ; <nl> - newRows . addAll ( rows . subList ( 1 , rows . size ( ) ) ) ; <nl> + newRows . add ( new Row ( firstKey , firstCf ) ) ; <nl> + newRows . addAll ( rows . subList ( i , rows . size ( ) ) ) ; <nl> <nl> return newRows ; <nl> } <nl> @ @ - 201 , 12 + 220 , 12 @ @ abstract class AbstractQueryPager implements QueryPager <nl> if ( toDiscard = = 0 ) <nl> return rows ; <nl> <nl> - int size = rows . size ( ) ; <nl> + int i = rows . size ( ) - 1 ; <nl> DecoratedKey lastKey = null ; <nl> ColumnFamily lastCf = null ; <nl> - while ( toDiscard > 0 ) <nl> + while ( toDiscard > 0 & & i > = 0 ) <nl> { <nl> - Row last = rows . get ( - - size ) ; <nl> + Row last = rows . get ( i - - ) ; <nl> lastKey = last . key ; <nl> lastCf = last . cf . cloneMeShallow ( ) ; <nl> toDiscard - = isReversed ( ) <nl> @ @ - 214 , 9 + 233 , 14 @ @ abstract class AbstractQueryPager implements QueryPager <nl> : discardLast ( last . cf , toDiscard , lastCf ) ; <nl> } <nl> <nl> + / / If there is less live data than to discard , all is discarded <nl> + if ( i < 0 ) <nl> + return Collections . < Row > emptyList ( ) ; <nl> + <nl> int count = lastCf . getColumnCount ( ) ; <nl> - List < Row > newRows = new ArrayList < Row > ( count = = 0 ? size : size + 1 ) ; <nl> - newRows . addAll ( rows . subList ( 0 , size ) ) ; <nl> + int newSize = i + 1 ; <nl> + List < Row > newRows = new ArrayList < Row > ( count = = 0 ? newSize - 1 : newSize ) ; <nl> + newRows . addAll ( rows . subList ( 0 , i ) ) ; <nl> if ( count ! = 0 ) <nl> newRows . add ( new Row ( lastKey , lastCf ) ) ; <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / ConsistencyChecker . java b / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> index cf6c5d1 . . 983f73f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> + + + b / src / java / org / apache / cassandra / service / ConsistencyChecker . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> class ConsistencyChecker implements Runnable <nl> { <nl> - private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyManager . class ) ; <nl> + private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyChecker . class ) ; <nl> private static ExpiringMap < String , String > readRepairTable _ = new ExpiringMap < String , String > ( DatabaseDescriptor . getRpcTimeout ( ) ) ; <nl> <nl> private final String table _ ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8fd794c . . 60f86c3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 * Expose a total memtable size metric for a CF ( CASSANDRA - 6391 ) 
 * cqlsh : handle symlinks properly ( CASSANDRA - 6425 ) 
 * Fix potential infinite loop when paging query with IN ( CASSANDRA - 6464 ) 
 + * Fix assertion error in AbstractQueryPager . discardFirst ( CASSANDRA - 6447 ) 
 Merged from 1 . 2 : 
 * Improved error message on bad properties in DDL queries ( CASSANDRA - 6453 ) 
 * Randomize batchlog candidates selection ( CASSANDRA - 6481 ) 
 diff - - git a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 index 6f6772c . . 6047b5b 100644 
 - - - a / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 + + + b / src / java / org / apache / cassandra / service / pager / AbstractQueryPager . java 
 @ @ - 175 , 18 + 175 , 37 @ @ abstract class AbstractQueryPager implements QueryPager 
 
 private List < Row > discardFirst ( List < Row > rows ) 
 { 
 - Row first = rows . get ( 0 ) ; 
 - ColumnFamily newCf = first . cf . cloneMeShallow ( ) ; 
 - int discarded = isReversed ( ) 
 - ? discardLast ( first . cf , 1 , newCf ) 
 - : discardFirst ( first . cf , 1 , newCf ) ; 
 - assert discarded = = 1 ; 
 - 
 - int count = newCf . getColumnCount ( ) ; 
 - List < Row > newRows = new ArrayList < Row > ( count = = 0 ? rows . size ( ) - 1 : rows . size ( ) ) ; 
 + return discardFirst ( rows , 1 ) ; 
 + } 
 + 
 + private List < Row > discardFirst ( List < Row > rows , int toDiscard ) 
 + { 
 + if ( toDiscard = = 0 ) 
 + return rows ; 
 + 
 + int i = 0 ; 
 + DecoratedKey firstKey = null ; 
 + ColumnFamily firstCf = null ; 
 + while ( toDiscard > 0 & & i < rows . size ( ) ) 
 + { 
 + Row first = rows . get ( i + + ) ; 
 + firstKey = first . key ; 
 + firstCf = first . cf . cloneMeShallow ( ) ; 
 + toDiscard - = isReversed ( ) 
 + ? discardLast ( first . cf , toDiscard , firstCf ) 
 + : discardFirst ( first . cf , toDiscard , firstCf ) ; 
 + } 
 + 
 + / / If there is less live data than to discard , all is discarded 
 + if ( i > = rows . size ( ) ) 
 + return Collections . < Row > emptyList ( ) ; 
 + 
 + int count = firstCf . getColumnCount ( ) ; 
 + int newSize = rows . size ( ) - i ; 
 + List < Row > newRows = new ArrayList < Row > ( count = = 0 ? newSize - 1 : newSize ) ; 
 if ( count ! = 0 ) 
 - newRows . add ( new Row ( first . key , newCf ) ) ; 
 - newRows . addAll ( rows . subList ( 1 , rows . size ( ) ) ) ; 
 + newRows . add ( new Row ( firstKey , firstCf ) ) ; 
 + newRows . addAll ( rows . subList ( i , rows . size ( ) ) ) ; 
 
 return newRows ; 
 } 
 @ @ - 201 , 12 + 220 , 12 @ @ abstract class AbstractQueryPager implements QueryPager 
 if ( toDiscard = = 0 ) 
 return rows ; 
 
 - int size = rows . size ( ) ; 
 + int i = rows . size ( ) - 1 ; 
 DecoratedKey lastKey = null ; 
 ColumnFamily lastCf = null ; 
 - while ( toDiscard > 0 ) 
 + while ( toDiscard > 0 & & i > = 0 ) 
 { 
 - Row last = rows . get ( - - size ) ; 
 + Row last = rows . get ( i - - ) ; 
 lastKey = last . key ; 
 lastCf = last . cf . cloneMeShallow ( ) ; 
 toDiscard - = isReversed ( ) 
 @ @ - 214 , 9 + 233 , 14 @ @ abstract class AbstractQueryPager implements QueryPager 
 : discardLast ( last . cf , toDiscard , lastCf ) ; 
 } 
 
 + / / If there is less live data than to discard , all is discarded 
 + if ( i < 0 ) 
 + return Collections . < Row > emptyList ( ) ; 
 + 
 int count = lastCf . getColumnCount ( ) ; 
 - List < Row > newRows = new ArrayList < Row > ( count = = 0 ? size : size + 1 ) ; 
 - newRows . addAll ( rows . subList ( 0 , size ) ) ; 
 + int newSize = i + 1 ; 
 + List < Row > newRows = new ArrayList < Row > ( count = = 0 ? newSize - 1 : newSize ) ; 
 + newRows . addAll ( rows . subList ( 0 , i ) ) ; 
 if ( count ! = 0 ) 
 newRows . add ( new Row ( lastKey , lastCf ) ) ; 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / ConsistencyChecker . java b / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 index cf6c5d1 . . 983f73f 100644 
 - - - a / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 + + + b / src / java / org / apache / cassandra / service / ConsistencyChecker . java 
 @ @ - 49 , 7 + 49 , 7 @ @ import org . slf4j . LoggerFactory ; 
 
 class ConsistencyChecker implements Runnable 
 { 
 - private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyManager . class ) ; 
 + private static Logger logger _ = LoggerFactory . getLogger ( ConsistencyChecker . class ) ; 
 private static ExpiringMap < String , String > readRepairTable _ = new ExpiringMap < String , String > ( DatabaseDescriptor . getRpcTimeout ( ) ) ; 
 
 private final String table _ ;
