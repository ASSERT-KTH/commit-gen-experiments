BLEU SCORE: 0.02133165846478451

TEST MSG: Support encrypted and plain traffic on the same port
GENERATED MSG: merge from 0 . 7 ( CASSANDRA - 1951 )

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5b46eac . . 998dd22 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 12 <nl> + * Support encrypted and plain traffic on the same port ( CASSANDRA - 10559 ) <nl> * Do STCS in DTCS windows ( CASSANDRA - 10276 ) <nl> * Don ' t try to get ancestors from half - renamed sstables ( CASSANDRA - 10501 ) <nl> * Avoid repetition of JVM _ OPTS in debian package ( CASSANDRA - 10251 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 67a545b . . c6ea6c0 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 18 , 6 + 18 , 8 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> New features <nl> - - - - - - - - - - - - <nl> + - Native protocol server now allows both SSL and non - SSL connections on <nl> + the same port . <nl> - Switching racks is no longer an allowed operation on a node which has <nl> data . Instead , the node will need to be decommissioned and rebootstrapped . <nl> If moving from the SimpleSnitch , make sure the rack containing all current <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index e0ef878 . . 0d0282b 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 781 , 6 + 781 , 8 @ @ server _ encryption _ options : <nl> # enable or disable client / server encryption . <nl> client _ encryption _ options : <nl> enabled : false <nl> + # If enabled and optional is set to true encrypted and unencrypted connections are handled . <nl> + optional : false <nl> keystore : conf / . keystore <nl> keystore _ password : cassandra <nl> # require _ client _ auth : false <nl> diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> index 945a15b . . 31f8b4a 100644 <nl> - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ public abstract class EncryptionOptions <nl> public static class ClientEncryptionOptions extends EncryptionOptions <nl> { <nl> public boolean enabled = false ; <nl> + public boolean optional = false ; <nl> } <nl> <nl> public static class ServerEncryptionOptions extends EncryptionOptions <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index c21a669 . . 02f17b0 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . EnumMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> @ @ - 29 , 9 + 30 , 11 @ @ import java . util . concurrent . atomic . AtomicBoolean ; <nl> import javax . net . ssl . SSLContext ; <nl> import javax . net . ssl . SSLEngine ; <nl> <nl> + import io . netty . buffer . ByteBuf ; <nl> import io . netty . channel . epoll . Epoll ; <nl> import io . netty . channel . epoll . EpollEventLoopGroup ; <nl> import io . netty . channel . epoll . EpollServerSocketChannel ; <nl> + import io . netty . handler . codec . ByteToMessageDecoder ; <nl> import io . netty . util . Version ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 170 , 8 + 173 , 16 @ @ public class Server implements CassandraDaemon . Server <nl> final EncryptionOptions . ClientEncryptionOptions clientEnc = DatabaseDescriptor . getClientEncryptionOptions ( ) ; <nl> if ( clientEnc . enabled ) <nl> { <nl> - logger . info ( " Enabling encrypted CQL connections between client and server " ) ; <nl> - bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; <nl> + if ( clientEnc . optional ) <nl> + { <nl> + logger . info ( " Enabling optionally encrypted CQL connections between client and server " ) ; <nl> + bootstrap . childHandler ( new OptionalSecureInitializer ( this , clientEnc ) ) ; <nl> + } <nl> + else <nl> + { <nl> + logger . info ( " Enabling encrypted CQL connections between client and server " ) ; <nl> + bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 309 , 12 + 320 , 12 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - private static class SecureInitializer extends Initializer <nl> + protected abstract static class AbstractSecureIntializer extends Initializer <nl> { <nl> private final SSLContext sslContext ; <nl> private final EncryptionOptions encryptionOptions ; <nl> <nl> - public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) <nl> + protected AbstractSecureIntializer ( Server server , EncryptionOptions encryptionOptions ) <nl> { <nl> super ( server ) ; <nl> this . encryptionOptions = encryptionOptions ; <nl> @ @ - 328 , 14 + 339 , 65 @ @ public class Server implements CassandraDaemon . Server <nl> } <nl> } <nl> <nl> - protected void initChannel ( Channel channel ) throws Exception <nl> - { <nl> + protected final SslHandler createSslHandler ( ) { <nl> SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; <nl> sslEngine . setUseClientMode ( false ) ; <nl> sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; <nl> sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; <nl> sslEngine . setEnabledProtocols ( SSLFactory . ACCEPTED _ PROTOCOLS ) ; <nl> - SslHandler sslHandler = new SslHandler ( sslEngine ) ; <nl> + return new SslHandler ( sslEngine ) ; <nl> + } <nl> + } <nl> + <nl> + private static class OptionalSecureInitializer extends AbstractSecureIntializer <nl> + { <nl> + public OptionalSecureInitializer ( Server server , EncryptionOptions encryptionOptions ) <nl> + { <nl> + super ( server , encryptionOptions ) ; <nl> + } <nl> + <nl> + protected void initChannel ( final Channel channel ) throws Exception <nl> + { <nl> + super . initChannel ( channel ) ; <nl> + channel . pipeline ( ) . addFirst ( " sslDetectionHandler " , new ByteToMessageDecoder ( ) <nl> + { <nl> + @ Override <nl> + protected void decode ( ChannelHandlerContext channelHandlerContext , ByteBuf byteBuf , List < Object > list ) throws Exception <nl> + { <nl> + if ( byteBuf . readableBytes ( ) < 5 ) <nl> + { <nl> + / / To detect if SSL must be used we need to have at least 5 bytes , so return here and try again <nl> + / / once more bytes a ready . <nl> + return ; <nl> + } <nl> + if ( SslHandler . isEncrypted ( byteBuf ) ) <nl> + { <nl> + / / Connection uses SSL / TLS , replace the detection handler with a SslHandler and so use <nl> + / / encryption . <nl> + SslHandler sslHandler = createSslHandler ( ) ; <nl> + channelHandlerContext . pipeline ( ) . replace ( this , " ssl " , sslHandler ) ; <nl> + } <nl> + else <nl> + { <nl> + / / Connection use no TLS / SSL encryption , just remove the detection handler and continue without <nl> + / / SslHandler in the pipeline . <nl> + channelHandlerContext . pipeline ( ) . remove ( this ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> + private static class SecureInitializer extends AbstractSecureIntializer <nl> + { <nl> + public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) <nl> + { <nl> + super ( server , encryptionOptions ) ; <nl> + } <nl> + <nl> + protected void initChannel ( Channel channel ) throws Exception <nl> + { <nl> + SslHandler sslHandler = createSslHandler ( ) ; <nl> super . initChannel ( channel ) ; <nl> channel . pipeline ( ) . addFirst ( " ssl " , sslHandler ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 54112fd . . 62def25 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 8 , 8 + 8 , 9 @ @ <nl> <nl> <nl> 0 . 7 . 2 - dev <nl> - * fix potential overflow in nodetool cfstats <nl> - * offline nodes ( CASSANDRA - 1951 ) <nl> + * fix potential overflow in nodetool cfstats ( CASSANDRA - 2057 ) <nl> + * add JVM shutdownhook to sync commitlog ( CASSANDRA - 1919 ) <nl> + * allow nodes to be up without being part of normal traffic ( CASSANDRA - 1951 ) <nl> <nl> <nl> 0 . 7 . 1 <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java <nl> index 483e93f . . 71e18f4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java <nl> @ @ - 61 , 19 + 61 , 12 @ @ public abstract class AbstractCommitLogExecutorService extends AbstractExecutorS <nl> return completedTaskCount ; <nl> } <nl> <nl> - / / cassandra is crash - only so there ' s no need to implement the shutdown methods <nl> - <nl> - public boolean isShutdown ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> public boolean isTerminated ( ) <nl> { <nl> - return false ; <nl> + throw new UnsupportedOperationException ( ) ; <nl> } <nl> <nl> - public void shutdown ( ) <nl> + public boolean isShutdown ( ) <nl> { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java <nl> index 588c4e6 . . bc67476 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java <nl> @ @ - 31 , 6 + 31 , 8 @ @ import org . apache . cassandra . utils . WrappedRunnable ; <nl> class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService implements ICommitLogExecutorService , BatchCommitLogExecutorServiceMBean <nl> { <nl> private final BlockingQueue < CheaterFutureTask > queue ; <nl> + private final Thread appendingThread ; <nl> + private volatile boolean run = true ; <nl> <nl> public BatchCommitLogExecutorService ( ) <nl> { <nl> @ @ - 44 , 14 + 46 , 15 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp <nl> { <nl> public void runMayThrow ( ) throws Exception <nl> { <nl> - while ( true ) <nl> + while ( run ) <nl> { <nl> - processWithSyncBatch ( ) ; <nl> - completedTaskCount + + ; <nl> + if ( processWithSyncBatch ( ) ) <nl> + completedTaskCount + + ; <nl> } <nl> } <nl> } ; <nl> - new Thread ( runnable , " COMMIT - LOG - WRITER " ) . start ( ) ; <nl> + appendingThread = new Thread ( runnable , " COMMIT - LOG - WRITER " ) ; <nl> + appendingThread . start ( ) ; <nl> <nl> registerMBean ( this ) ; <nl> } <nl> @ @ - 63 , 13 + 66 , 15 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp <nl> <nl> private final ArrayList < CheaterFutureTask > incompleteTasks = new ArrayList < CheaterFutureTask > ( ) ; <nl> private final ArrayList taskValues = new ArrayList ( ) ; / / TODO not sure how to generify this <nl> - private void processWithSyncBatch ( ) throws Exception <nl> + private boolean processWithSyncBatch ( ) throws Exception <nl> { <nl> - CheaterFutureTask firstTask = queue . take ( ) ; <nl> + CheaterFutureTask firstTask = queue . poll ( 100 , TimeUnit . MILLISECONDS ) ; <nl> + if ( firstTask = = null ) <nl> + return false ; <nl> if ( ! ( firstTask . getRawCallable ( ) instanceof CommitLog . LogRecordAdder ) ) <nl> { <nl> firstTask . run ( ) ; <nl> - return ; <nl> + return true ; <nl> } <nl> <nl> / / attempt to do a bunch of LogRecordAdder ops before syncing <nl> @ @ - 105 , 6 + 110 , 7 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp <nl> { <nl> incompleteTasks . get ( i ) . set ( taskValues . get ( i ) ) ; <nl> } <nl> + return true ; <nl> } <nl> <nl> <nl> @ @ - 148 , 6 + 154 , 25 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp <nl> } <nl> } <nl> <nl> + public void shutdown ( ) <nl> + { <nl> + new Thread ( new WrappedRunnable ( ) <nl> + { <nl> + public void runMayThrow ( ) throws InterruptedException , IOException <nl> + { <nl> + while ( ! queue . isEmpty ( ) ) <nl> + Thread . sleep ( 100 ) ; <nl> + run = false ; <nl> + appendingThread . join ( ) ; <nl> + } <nl> + } , " Commitlog Shutdown " ) . start ( ) ; <nl> + } <nl> + <nl> + public void awaitTermination ( ) throws InterruptedException <nl> + { <nl> + appendingThread . join ( ) ; <nl> + } <nl> + <nl> private static class CheaterFutureTask < V > extends FutureTask < V > <nl> { <nl> private final Callable rawCallable ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 7ebda3b . . 0e1aa7a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 114 , 45 + 114 , 9 @ @ public class CommitLog <nl> / / All we need to do is create a new one . <nl> segments . add ( new CommitLogSegment ( ) ) ; <nl> <nl> - if ( DatabaseDescriptor . getCommitLogSync ( ) = = Config . CommitLogSync . batch ) <nl> - { <nl> - executor = new BatchCommitLogExecutorService ( ) ; <nl> - } <nl> - else <nl> - { <nl> - executor = new PeriodicCommitLogExecutorService ( ) ; <nl> - final Callable syncer = new Callable ( ) <nl> - { <nl> - public Object call ( ) throws Exception <nl> - { <nl> - sync ( ) ; <nl> - return null ; <nl> - } <nl> - } ; <nl> - <nl> - new Thread ( new Runnable ( ) <nl> - { <nl> - public void run ( ) <nl> - { <nl> - while ( true ) <nl> - { <nl> - try <nl> - { <nl> - executor . submit ( syncer ) . get ( ) ; <nl> - Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; <nl> - } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - throw new AssertionError ( e ) ; <nl> - } <nl> - catch ( ExecutionException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - } <nl> - } <nl> - } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; <nl> - } <nl> + executor = DatabaseDescriptor . getCommitLogSync ( ) = = Config . CommitLogSync . batch <nl> + ? new BatchCommitLogExecutorService ( ) <nl> + : new PeriodicCommitLogExecutorService ( this ) ; <nl> } <nl> <nl> public void resetUnsafe ( ) <nl> @ @ - 525 , 4 + 489 , 10 @ @ public class CommitLog <nl> return null ; <nl> } <nl> } <nl> + <nl> + public void shutdownBlocking ( ) throws InterruptedException <nl> + { <nl> + executor . shutdown ( ) ; <nl> + executor . awaitTermination ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java <nl> index 7acecf2 . . 20e471f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java <nl> @ @ - 38 , 4 + 38 , 9 @ @ public interface ICommitLogExecutorService extends IExecutorMBean <nl> * / <nl> public void add ( CommitLog . LogRecordAdder adder ) ; <nl> <nl> + / * * shuts down the CommitLogExecutor in an orderly fashion * / <nl> + public void shutdown ( ) ; <nl> + <nl> + / * * Blocks until shutdown is complete . * / <nl> + public void awaitTermination ( ) throws InterruptedException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java <nl> index f44bf5e . . 228be2c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java <nl> @ @ - 21 , 35 + 21 , 71 @ @ package org . apache . cassandra . db . commitlog ; <nl> * / <nl> <nl> <nl> + import java . io . IOException ; <nl> import java . util . concurrent . * ; <nl> <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> class PeriodicCommitLogExecutorService implements ICommitLogExecutorService , PeriodicCommitLogExecutorServiceMBean <nl> { <nl> private final BlockingQueue < Runnable > queue ; <nl> protected volatile long completedTaskCount = 0 ; <nl> + private final Thread appendingThread ; <nl> + private volatile boolean run = true ; <nl> <nl> - public PeriodicCommitLogExecutorService ( ) <nl> + public PeriodicCommitLogExecutorService ( final CommitLog commitLog ) <nl> { <nl> - this ( 1024 * Runtime . getRuntime ( ) . availableProcessors ( ) ) ; <nl> - } <nl> - <nl> - public PeriodicCommitLogExecutorService ( int queueSize ) <nl> - { <nl> - queue = new LinkedBlockingQueue < Runnable > ( queueSize ) ; <nl> + queue = new LinkedBlockingQueue < Runnable > ( 1024 * Runtime . getRuntime ( ) . availableProcessors ( ) ) ; <nl> Runnable runnable = new WrappedRunnable ( ) <nl> { <nl> public void runMayThrow ( ) throws Exception <nl> { <nl> - while ( true ) <nl> + while ( run ) <nl> { <nl> - queue . take ( ) . run ( ) ; <nl> + Runnable r = queue . poll ( 100 , TimeUnit . MILLISECONDS ) ; <nl> + if ( r = = null ) <nl> + continue ; <nl> + r . run ( ) ; <nl> completedTaskCount + + ; <nl> } <nl> + commitLog . sync ( ) ; <nl> + } <nl> + } ; <nl> + appendingThread = new Thread ( runnable , " COMMIT - LOG - WRITER " ) ; <nl> + appendingThread . start ( ) ; <nl> + <nl> + final Callable syncer = new Callable ( ) <nl> + { <nl> + public Object call ( ) throws Exception <nl> + { <nl> + commitLog . sync ( ) ; <nl> + return null ; <nl> } <nl> } ; <nl> - new Thread ( runnable , " COMMIT - LOG - WRITER " ) . start ( ) ; <nl> + <nl> + new Thread ( new Runnable ( ) <nl> + { <nl> + public void run ( ) <nl> + { <nl> + while ( run ) <nl> + { <nl> + try <nl> + { <nl> + submit ( syncer ) . get ( ) ; <nl> + Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + catch ( ExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; <nl> <nl> AbstractCommitLogExecutorService . registerMBean ( this ) ; <nl> } <nl> @ @ - 80 , 6 + 116 , 25 @ @ class PeriodicCommitLogExecutorService implements ICommitLogExecutorService , Per <nl> return ft ; <nl> } <nl> <nl> + public void shutdown ( ) <nl> + { <nl> + new Thread ( new WrappedRunnable ( ) <nl> + { <nl> + public void runMayThrow ( ) throws InterruptedException , IOException <nl> + { <nl> + while ( ! queue . isEmpty ( ) ) <nl> + Thread . sleep ( 100 ) ; <nl> + run = false ; <nl> + appendingThread . join ( ) ; <nl> + } <nl> + } , " Commitlog Shutdown " ) . start ( ) ; <nl> + } <nl> + <nl> + public void awaitTermination ( ) throws InterruptedException <nl> + { <nl> + appendingThread . join ( ) ; <nl> + } <nl> + <nl> public long getPendingTasks ( ) <nl> { <nl> return queue . size ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 56ffbbf . . 7ee262f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 33 , 6 + 33 , 8 @ @ import javax . management . ObjectName ; <nl> import com . google . common . base . Charsets ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Multimap ; <nl> + <nl> + import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . locator . * ; <nl> import org . apache . log4j . Level ; <nl> import org . apache . commons . lang . StringUtils ; <nl> @ @ - 381 , 6 + 383 , 22 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> } <nl> } <nl> <nl> + / / daemon threads , like our executors ' , continue to run while shutdown hooks are invoked <nl> + Thread drainOnShutdown = new Thread ( new WrappedRunnable ( ) <nl> + { <nl> + public void runMayThrow ( ) throws ExecutionException , InterruptedException , IOException <nl> + { <nl> + ThreadPoolExecutor mutationStage = StageManager . getStage ( Stage . MUTATION ) ; <nl> + if ( ! mutationStage . isShutdown ( ) ) <nl> + { <nl> + mutationStage . shutdown ( ) ; <nl> + mutationStage . awaitTermination ( 1 , TimeUnit . SECONDS ) ; <nl> + CommitLog . instance . shutdownBlocking ( ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + Runtime . getRuntime ( ) . addShutdownHook ( drainOnShutdown ) ; <nl> + <nl> if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) <nl> { <nl> joinTokenRing ( ) ; <nl> @ @ - 1899 , 6 + 1917 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe <nl> ColumnFamilyStore . postFlushExecutor . shutdown ( ) ; <nl> ColumnFamilyStore . postFlushExecutor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; <nl> <nl> + CommitLog . instance . shutdownBlocking ( ) ; <nl> + <nl> / / want to make sure that any segments deleted as a result of flushing are gone . <nl> DeletionService . waitFor ( ) ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5b46eac . . 998dd22 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 12 
 + * Support encrypted and plain traffic on the same port ( CASSANDRA - 10559 ) 
 * Do STCS in DTCS windows ( CASSANDRA - 10276 ) 
 * Don ' t try to get ancestors from half - renamed sstables ( CASSANDRA - 10501 ) 
 * Avoid repetition of JVM _ OPTS in debian package ( CASSANDRA - 10251 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 67a545b . . c6ea6c0 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 18 , 6 + 18 , 8 @ @ using the provided ' sstableupgrade ' tool . 
 
 New features 
 - - - - - - - - - - - - 
 + - Native protocol server now allows both SSL and non - SSL connections on 
 + the same port . 
 - Switching racks is no longer an allowed operation on a node which has 
 data . Instead , the node will need to be decommissioned and rebootstrapped . 
 If moving from the SimpleSnitch , make sure the rack containing all current 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index e0ef878 . . 0d0282b 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 781 , 6 + 781 , 8 @ @ server _ encryption _ options : 
 # enable or disable client / server encryption . 
 client _ encryption _ options : 
 enabled : false 
 + # If enabled and optional is set to true encrypted and unencrypted connections are handled . 
 + optional : false 
 keystore : conf / . keystore 
 keystore _ password : cassandra 
 # require _ client _ auth : false 
 diff - - git a / src / java / org / apache / cassandra / config / EncryptionOptions . java b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 index 945a15b . . 31f8b4a 100644 
 - - - a / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 + + + b / src / java / org / apache / cassandra / config / EncryptionOptions . java 
 @ @ - 36 , 6 + 36 , 7 @ @ public abstract class EncryptionOptions 
 public static class ClientEncryptionOptions extends EncryptionOptions 
 { 
 public boolean enabled = false ; 
 + public boolean optional = false ; 
 } 
 
 public static class ServerEncryptionOptions extends EncryptionOptions 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index c21a669 . . 02f17b0 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . EnumMap ; 
 + import java . util . List ; 
 import java . util . Map ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 @ @ - 29 , 9 + 30 , 11 @ @ import java . util . concurrent . atomic . AtomicBoolean ; 
 import javax . net . ssl . SSLContext ; 
 import javax . net . ssl . SSLEngine ; 
 
 + import io . netty . buffer . ByteBuf ; 
 import io . netty . channel . epoll . Epoll ; 
 import io . netty . channel . epoll . EpollEventLoopGroup ; 
 import io . netty . channel . epoll . EpollServerSocketChannel ; 
 + import io . netty . handler . codec . ByteToMessageDecoder ; 
 import io . netty . util . Version ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 170 , 8 + 173 , 16 @ @ public class Server implements CassandraDaemon . Server 
 final EncryptionOptions . ClientEncryptionOptions clientEnc = DatabaseDescriptor . getClientEncryptionOptions ( ) ; 
 if ( clientEnc . enabled ) 
 { 
 - logger . info ( " Enabling encrypted CQL connections between client and server " ) ; 
 - bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; 
 + if ( clientEnc . optional ) 
 + { 
 + logger . info ( " Enabling optionally encrypted CQL connections between client and server " ) ; 
 + bootstrap . childHandler ( new OptionalSecureInitializer ( this , clientEnc ) ) ; 
 + } 
 + else 
 + { 
 + logger . info ( " Enabling encrypted CQL connections between client and server " ) ; 
 + bootstrap . childHandler ( new SecureInitializer ( this , clientEnc ) ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 309 , 12 + 320 , 12 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - private static class SecureInitializer extends Initializer 
 + protected abstract static class AbstractSecureIntializer extends Initializer 
 { 
 private final SSLContext sslContext ; 
 private final EncryptionOptions encryptionOptions ; 
 
 - public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) 
 + protected AbstractSecureIntializer ( Server server , EncryptionOptions encryptionOptions ) 
 { 
 super ( server ) ; 
 this . encryptionOptions = encryptionOptions ; 
 @ @ - 328 , 14 + 339 , 65 @ @ public class Server implements CassandraDaemon . Server 
 } 
 } 
 
 - protected void initChannel ( Channel channel ) throws Exception 
 - { 
 + protected final SslHandler createSslHandler ( ) { 
 SSLEngine sslEngine = sslContext . createSSLEngine ( ) ; 
 sslEngine . setUseClientMode ( false ) ; 
 sslEngine . setEnabledCipherSuites ( encryptionOptions . cipher _ suites ) ; 
 sslEngine . setNeedClientAuth ( encryptionOptions . require _ client _ auth ) ; 
 sslEngine . setEnabledProtocols ( SSLFactory . ACCEPTED _ PROTOCOLS ) ; 
 - SslHandler sslHandler = new SslHandler ( sslEngine ) ; 
 + return new SslHandler ( sslEngine ) ; 
 + } 
 + } 
 + 
 + private static class OptionalSecureInitializer extends AbstractSecureIntializer 
 + { 
 + public OptionalSecureInitializer ( Server server , EncryptionOptions encryptionOptions ) 
 + { 
 + super ( server , encryptionOptions ) ; 
 + } 
 + 
 + protected void initChannel ( final Channel channel ) throws Exception 
 + { 
 + super . initChannel ( channel ) ; 
 + channel . pipeline ( ) . addFirst ( " sslDetectionHandler " , new ByteToMessageDecoder ( ) 
 + { 
 + @ Override 
 + protected void decode ( ChannelHandlerContext channelHandlerContext , ByteBuf byteBuf , List < Object > list ) throws Exception 
 + { 
 + if ( byteBuf . readableBytes ( ) < 5 ) 
 + { 
 + / / To detect if SSL must be used we need to have at least 5 bytes , so return here and try again 
 + / / once more bytes a ready . 
 + return ; 
 + } 
 + if ( SslHandler . isEncrypted ( byteBuf ) ) 
 + { 
 + / / Connection uses SSL / TLS , replace the detection handler with a SslHandler and so use 
 + / / encryption . 
 + SslHandler sslHandler = createSslHandler ( ) ; 
 + channelHandlerContext . pipeline ( ) . replace ( this , " ssl " , sslHandler ) ; 
 + } 
 + else 
 + { 
 + / / Connection use no TLS / SSL encryption , just remove the detection handler and continue without 
 + / / SslHandler in the pipeline . 
 + channelHandlerContext . pipeline ( ) . remove ( this ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + private static class SecureInitializer extends AbstractSecureIntializer 
 + { 
 + public SecureInitializer ( Server server , EncryptionOptions encryptionOptions ) 
 + { 
 + super ( server , encryptionOptions ) ; 
 + } 
 + 
 + protected void initChannel ( Channel channel ) throws Exception 
 + { 
 + SslHandler sslHandler = createSslHandler ( ) ; 
 super . initChannel ( channel ) ; 
 channel . pipeline ( ) . addFirst ( " ssl " , sslHandler ) ; 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 54112fd . . 62def25 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 8 , 8 + 8 , 9 @ @ 
 
 
 0 . 7 . 2 - dev 
 - * fix potential overflow in nodetool cfstats 
 - * offline nodes ( CASSANDRA - 1951 ) 
 + * fix potential overflow in nodetool cfstats ( CASSANDRA - 2057 ) 
 + * add JVM shutdownhook to sync commitlog ( CASSANDRA - 1919 ) 
 + * allow nodes to be up without being part of normal traffic ( CASSANDRA - 1951 ) 
 
 
 0 . 7 . 1 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java 
 index 483e93f . . 71e18f4 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / AbstractCommitLogExecutorService . java 
 @ @ - 61 , 19 + 61 , 12 @ @ public abstract class AbstractCommitLogExecutorService extends AbstractExecutorS 
 return completedTaskCount ; 
 } 
 
 - / / cassandra is crash - only so there ' s no need to implement the shutdown methods 
 - 
 - public boolean isShutdown ( ) 
 - { 
 - return false ; 
 - } 
 - 
 public boolean isTerminated ( ) 
 { 
 - return false ; 
 + throw new UnsupportedOperationException ( ) ; 
 } 
 
 - public void shutdown ( ) 
 + public boolean isShutdown ( ) 
 { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java 
 index 588c4e6 . . bc67476 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / BatchCommitLogExecutorService . java 
 @ @ - 31 , 6 + 31 , 8 @ @ import org . apache . cassandra . utils . WrappedRunnable ; 
 class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService implements ICommitLogExecutorService , BatchCommitLogExecutorServiceMBean 
 { 
 private final BlockingQueue < CheaterFutureTask > queue ; 
 + private final Thread appendingThread ; 
 + private volatile boolean run = true ; 
 
 public BatchCommitLogExecutorService ( ) 
 { 
 @ @ - 44 , 14 + 46 , 15 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp 
 { 
 public void runMayThrow ( ) throws Exception 
 { 
 - while ( true ) 
 + while ( run ) 
 { 
 - processWithSyncBatch ( ) ; 
 - completedTaskCount + + ; 
 + if ( processWithSyncBatch ( ) ) 
 + completedTaskCount + + ; 
 } 
 } 
 } ; 
 - new Thread ( runnable , " COMMIT - LOG - WRITER " ) . start ( ) ; 
 + appendingThread = new Thread ( runnable , " COMMIT - LOG - WRITER " ) ; 
 + appendingThread . start ( ) ; 
 
 registerMBean ( this ) ; 
 } 
 @ @ - 63 , 13 + 66 , 15 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp 
 
 private final ArrayList < CheaterFutureTask > incompleteTasks = new ArrayList < CheaterFutureTask > ( ) ; 
 private final ArrayList taskValues = new ArrayList ( ) ; / / TODO not sure how to generify this 
 - private void processWithSyncBatch ( ) throws Exception 
 + private boolean processWithSyncBatch ( ) throws Exception 
 { 
 - CheaterFutureTask firstTask = queue . take ( ) ; 
 + CheaterFutureTask firstTask = queue . poll ( 100 , TimeUnit . MILLISECONDS ) ; 
 + if ( firstTask = = null ) 
 + return false ; 
 if ( ! ( firstTask . getRawCallable ( ) instanceof CommitLog . LogRecordAdder ) ) 
 { 
 firstTask . run ( ) ; 
 - return ; 
 + return true ; 
 } 
 
 / / attempt to do a bunch of LogRecordAdder ops before syncing 
 @ @ - 105 , 6 + 110 , 7 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp 
 { 
 incompleteTasks . get ( i ) . set ( taskValues . get ( i ) ) ; 
 } 
 + return true ; 
 } 
 
 
 @ @ - 148 , 6 + 154 , 25 @ @ class BatchCommitLogExecutorService extends AbstractCommitLogExecutorService imp 
 } 
 } 
 
 + public void shutdown ( ) 
 + { 
 + new Thread ( new WrappedRunnable ( ) 
 + { 
 + public void runMayThrow ( ) throws InterruptedException , IOException 
 + { 
 + while ( ! queue . isEmpty ( ) ) 
 + Thread . sleep ( 100 ) ; 
 + run = false ; 
 + appendingThread . join ( ) ; 
 + } 
 + } , " Commitlog Shutdown " ) . start ( ) ; 
 + } 
 + 
 + public void awaitTermination ( ) throws InterruptedException 
 + { 
 + appendingThread . join ( ) ; 
 + } 
 + 
 private static class CheaterFutureTask < V > extends FutureTask < V > 
 { 
 private final Callable rawCallable ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 7ebda3b . . 0e1aa7a 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 114 , 45 + 114 , 9 @ @ public class CommitLog 
 / / All we need to do is create a new one . 
 segments . add ( new CommitLogSegment ( ) ) ; 
 
 - if ( DatabaseDescriptor . getCommitLogSync ( ) = = Config . CommitLogSync . batch ) 
 - { 
 - executor = new BatchCommitLogExecutorService ( ) ; 
 - } 
 - else 
 - { 
 - executor = new PeriodicCommitLogExecutorService ( ) ; 
 - final Callable syncer = new Callable ( ) 
 - { 
 - public Object call ( ) throws Exception 
 - { 
 - sync ( ) ; 
 - return null ; 
 - } 
 - } ; 
 - 
 - new Thread ( new Runnable ( ) 
 - { 
 - public void run ( ) 
 - { 
 - while ( true ) 
 - { 
 - try 
 - { 
 - executor . submit ( syncer ) . get ( ) ; 
 - Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; 
 - } 
 - catch ( InterruptedException e ) 
 - { 
 - throw new AssertionError ( e ) ; 
 - } 
 - catch ( ExecutionException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - } 
 - } 
 - } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; 
 - } 
 + executor = DatabaseDescriptor . getCommitLogSync ( ) = = Config . CommitLogSync . batch 
 + ? new BatchCommitLogExecutorService ( ) 
 + : new PeriodicCommitLogExecutorService ( this ) ; 
 } 
 
 public void resetUnsafe ( ) 
 @ @ - 525 , 4 + 489 , 10 @ @ public class CommitLog 
 return null ; 
 } 
 } 
 + 
 + public void shutdownBlocking ( ) throws InterruptedException 
 + { 
 + executor . shutdown ( ) ; 
 + executor . awaitTermination ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java 
 index 7acecf2 . . 20e471f 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / ICommitLogExecutorService . java 
 @ @ - 38 , 4 + 38 , 9 @ @ public interface ICommitLogExecutorService extends IExecutorMBean 
 * / 
 public void add ( CommitLog . LogRecordAdder adder ) ; 
 
 + / * * shuts down the CommitLogExecutor in an orderly fashion * / 
 + public void shutdown ( ) ; 
 + 
 + / * * Blocks until shutdown is complete . * / 
 + public void awaitTermination ( ) throws InterruptedException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java 
 index f44bf5e . . 228be2c 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / PeriodicCommitLogExecutorService . java 
 @ @ - 21 , 35 + 21 , 71 @ @ package org . apache . cassandra . db . commitlog ; 
 * / 
 
 
 + import java . io . IOException ; 
 import java . util . concurrent . * ; 
 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 class PeriodicCommitLogExecutorService implements ICommitLogExecutorService , PeriodicCommitLogExecutorServiceMBean 
 { 
 private final BlockingQueue < Runnable > queue ; 
 protected volatile long completedTaskCount = 0 ; 
 + private final Thread appendingThread ; 
 + private volatile boolean run = true ; 
 
 - public PeriodicCommitLogExecutorService ( ) 
 + public PeriodicCommitLogExecutorService ( final CommitLog commitLog ) 
 { 
 - this ( 1024 * Runtime . getRuntime ( ) . availableProcessors ( ) ) ; 
 - } 
 - 
 - public PeriodicCommitLogExecutorService ( int queueSize ) 
 - { 
 - queue = new LinkedBlockingQueue < Runnable > ( queueSize ) ; 
 + queue = new LinkedBlockingQueue < Runnable > ( 1024 * Runtime . getRuntime ( ) . availableProcessors ( ) ) ; 
 Runnable runnable = new WrappedRunnable ( ) 
 { 
 public void runMayThrow ( ) throws Exception 
 { 
 - while ( true ) 
 + while ( run ) 
 { 
 - queue . take ( ) . run ( ) ; 
 + Runnable r = queue . poll ( 100 , TimeUnit . MILLISECONDS ) ; 
 + if ( r = = null ) 
 + continue ; 
 + r . run ( ) ; 
 completedTaskCount + + ; 
 } 
 + commitLog . sync ( ) ; 
 + } 
 + } ; 
 + appendingThread = new Thread ( runnable , " COMMIT - LOG - WRITER " ) ; 
 + appendingThread . start ( ) ; 
 + 
 + final Callable syncer = new Callable ( ) 
 + { 
 + public Object call ( ) throws Exception 
 + { 
 + commitLog . sync ( ) ; 
 + return null ; 
 } 
 } ; 
 - new Thread ( runnable , " COMMIT - LOG - WRITER " ) . start ( ) ; 
 + 
 + new Thread ( new Runnable ( ) 
 + { 
 + public void run ( ) 
 + { 
 + while ( run ) 
 + { 
 + try 
 + { 
 + submit ( syncer ) . get ( ) ; 
 + Thread . sleep ( DatabaseDescriptor . getCommitLogSyncPeriod ( ) ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + catch ( ExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 + } , " PERIODIC - COMMIT - LOG - SYNCER " ) . start ( ) ; 
 
 AbstractCommitLogExecutorService . registerMBean ( this ) ; 
 } 
 @ @ - 80 , 6 + 116 , 25 @ @ class PeriodicCommitLogExecutorService implements ICommitLogExecutorService , Per 
 return ft ; 
 } 
 
 + public void shutdown ( ) 
 + { 
 + new Thread ( new WrappedRunnable ( ) 
 + { 
 + public void runMayThrow ( ) throws InterruptedException , IOException 
 + { 
 + while ( ! queue . isEmpty ( ) ) 
 + Thread . sleep ( 100 ) ; 
 + run = false ; 
 + appendingThread . join ( ) ; 
 + } 
 + } , " Commitlog Shutdown " ) . start ( ) ; 
 + } 
 + 
 + public void awaitTermination ( ) throws InterruptedException 
 + { 
 + appendingThread . join ( ) ; 
 + } 
 + 
 public long getPendingTasks ( ) 
 { 
 return queue . size ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 56ffbbf . . 7ee262f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 33 , 6 + 33 , 8 @ @ import javax . management . ObjectName ; 
 import com . google . common . base . Charsets ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Multimap ; 
 + 
 + import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . locator . * ; 
 import org . apache . log4j . Level ; 
 import org . apache . commons . lang . StringUtils ; 
 @ @ - 381 , 6 + 383 , 22 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 } 
 } 
 
 + / / daemon threads , like our executors ' , continue to run while shutdown hooks are invoked 
 + Thread drainOnShutdown = new Thread ( new WrappedRunnable ( ) 
 + { 
 + public void runMayThrow ( ) throws ExecutionException , InterruptedException , IOException 
 + { 
 + ThreadPoolExecutor mutationStage = StageManager . getStage ( Stage . MUTATION ) ; 
 + if ( ! mutationStage . isShutdown ( ) ) 
 + { 
 + mutationStage . shutdown ( ) ; 
 + mutationStage . awaitTermination ( 1 , TimeUnit . SECONDS ) ; 
 + CommitLog . instance . shutdownBlocking ( ) ; 
 + } 
 + } 
 + } ) ; 
 + Runtime . getRuntime ( ) . addShutdownHook ( drainOnShutdown ) ; 
 + 
 if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) 
 { 
 joinTokenRing ( ) ; 
 @ @ - 1899 , 6 + 1917 , 8 @ @ public class StorageService implements IEndpointStateChangeSubscriber , StorageSe 
 ColumnFamilyStore . postFlushExecutor . shutdown ( ) ; 
 ColumnFamilyStore . postFlushExecutor . awaitTermination ( 60 , TimeUnit . SECONDS ) ; 
 
 + CommitLog . instance . shutdownBlocking ( ) ; 
 + 
 / / want to make sure that any segments deleted as a result of flushing are gone . 
 DeletionService . waitFor ( ) ; 

