BLEU SCORE: 0.004350967877375742

TEST MSG: Post - fix TimeoutExceptions during unit tests
GENERATED MSG: replace double - checked locking in CL . open ( ) with initialize on demand holder in CL . instance ( ) . patch by jbellis

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> index e184640 . . a897f75 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> @ @ - 521 , 6 + 521 , 15 @ @ public class CommitLogSegmentManager <nl> * / <nl> public void resetUnsafe ( ) <nl> { <nl> + stopUnsafe ( ) ; <nl> + startUnsafe ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Stops CL , for testing purposes . DO NOT USE THIS OUTSIDE OF TESTS . <nl> + * / <nl> + public void stopUnsafe ( ) <nl> + { <nl> logger . debug ( " Closing and clearing existing commit log segments . . . " ) ; <nl> <nl> while ( ! segmentManagementTasks . isEmpty ( ) ) <nl> @ @ - 549 , 7 + 558 , 13 @ @ public class CommitLogSegmentManager <nl> size . set ( 0L ) ; <nl> <nl> logger . debug ( " Done with closing and clearing existing commit log segments . " ) ; <nl> + } <nl> <nl> + / * * <nl> + * Starts CL , for testing purposes . DO NOT USE THIS OUTSIDE OF TESTS . <nl> + * / <nl> + public void startUnsafe ( ) <nl> + { <nl> start ( ) ; <nl> <nl> wakeManager ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> index 60f4703 . . 98cabe2 100644 <nl> - - - a / test / unit / org / apache / cassandra / SchemaLoader . java <nl> + + + b / test / unit / org / apache / cassandra / SchemaLoader . java <nl> @ @ - 429 , 11 + 429 , 11 @ @ public class SchemaLoader <nl> <nl> public static void cleanupAndLeaveDirs ( ) <nl> { <nl> - CommitLog . instance . resetUnsafe ( ) ; / / unmap CLS before attempting to delete or Windows complains <nl> + CommitLog . instance . allocator . stopUnsafe ( ) ; / / unmap CLS before attempting to delete or Windows complains <nl> mkdirs ( ) ; <nl> cleanup ( ) ; <nl> mkdirs ( ) ; <nl> - CommitLog . instance . resetUnsafe ( ) ; / / cleanup screws w / CommitLog , this brings it back to safe state <nl> + CommitLog . instance . allocator . startUnsafe ( ) ; / / cleanup screws w / CommitLog , this brings it back to safe state <nl> } <nl> <nl> public static void cleanup ( )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index ca52cdf . . d3b6a84 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 366 , 7 + 366 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> Table . flusherLock . writeLock ( ) . lock ( ) ; <nl> try <nl> { <nl> - final CommitLog . CommitLogContext ctx = CommitLog . open ( ) . getContext ( ) ; / / this is harmless if ! writeCommitLog <nl> + final CommitLog . CommitLogContext ctx = CommitLog . instance ( ) . getContext ( ) ; / / this is harmless if ! writeCommitLog <nl> <nl> if ( oldMemtable . isFrozen ( ) ) <nl> { <nl> @ @ - 541 , 7 + 541 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> if ( cLogCtx . isValidContext ( ) ) <nl> { <nl> - CommitLog . open ( ) . onMemtableFlush ( table _ , columnFamily _ , cLogCtx ) ; <nl> + CommitLog . instance ( ) . onMemtableFlush ( table _ , columnFamily _ , cLogCtx ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / RecoveryManager . java b / src / java / org / apache / cassandra / db / RecoveryManager . java <nl> index a044e82 . . 1a1e2e1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RecoveryManager . java <nl> + + + b / src / java / org / apache / cassandra / db / RecoveryManager . java <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class RecoveryManager <nl> <nl> Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; <nl> logger _ . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; <nl> - CommitLog . open ( ) . recover ( files ) ; <nl> + CommitLog . instance ( ) . recover ( files ) ; <nl> FileUtils . delete ( files ) ; <nl> logger _ . info ( " Log replay complete " ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 3c3732b . . f17d1bf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 396 , 7 + 396 , 7 @ @ public class Table <nl> { <nl> if ( writeCommitLog ) <nl> { <nl> - Future < CommitLog . CommitLogContext > future = CommitLog . open ( ) . add ( mutation , serializedMutation ) ; <nl> + Future < CommitLog . CommitLogContext > future = CommitLog . instance ( ) . add ( mutation , serializedMutation ) ; <nl> if ( waitForCommitLog ) <nl> { <nl> try <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index f164229 . . db307a4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 77 , 11 + 77 , 19 @ @ import java . util . concurrent . locks . ReentrantLock ; <nl> public class CommitLog <nl> { <nl> private static volatile int SEGMENT _ SIZE = 128 * 1024 * 1024 ; / / roll after log gets this big <nl> - private static volatile CommitLog instance _ ; <nl> - private static final Lock lock _ = new ReentrantLock ( ) ; <nl> private static final Logger logger _ = Logger . getLogger ( CommitLog . class ) ; <nl> private static final Map < String , CommitLogHeader > clHeaders _ = new HashMap < String , CommitLogHeader > ( ) ; <nl> <nl> + public static CommitLog instance ( ) <nl> + { <nl> + return CLHandle . instance ; <nl> + } <nl> + <nl> + private static class CLHandle <nl> + { <nl> + public static final CommitLog instance = new CommitLog ( ) ; <nl> + } <nl> + <nl> public static class CommitLogContext <nl> { <nl> / * Commit Log associated with this operation * / <nl> @ @ - 139 , 27 + 147 , 6 @ @ public class CommitLog <nl> return new BufferedRandomAccessFile ( file , " rw " ) ; <nl> } <nl> <nl> - public static CommitLog open ( ) throws IOException <nl> - { <nl> - if ( instance _ = = null ) <nl> - { <nl> - CommitLog . lock _ . lock ( ) ; <nl> - try <nl> - { <nl> - <nl> - if ( instance _ = = null ) <nl> - { <nl> - instance _ = new CommitLog ( ) ; <nl> - } <nl> - } <nl> - finally <nl> - { <nl> - CommitLog . lock _ . unlock ( ) ; <nl> - } <nl> - } <nl> - return instance _ ; <nl> - } <nl> - <nl> / * Current commit log file * / <nl> private String logFile _ ; <nl> / * header for current commit log * / <nl> @ @ - 183 , 11 + 170 , 18 @ @ public class CommitLog <nl> * param @ recoverymode - is commit log being instantiated in <nl> * in recovery mode . <nl> * / <nl> - private CommitLog ( ) throws IOException <nl> + private CommitLog ( ) <nl> { <nl> setNextFileName ( ) ; <nl> - logWriter _ = CommitLog . createWriter ( logFile _ ) ; <nl> - writeCommitLogHeader ( ) ; <nl> + try <nl> + { <nl> + logWriter _ = CommitLog . createWriter ( logFile _ ) ; <nl> + writeCommitLogHeader ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new IOError ( e ) ; <nl> + } <nl> <nl> if ( DatabaseDescriptor . getCommitLogSync ( ) = = DatabaseDescriptor . CommitLogSync . periodic ) <nl> { <nl> @ @ - 224 , 19 + 218 , 6 @ @ public class CommitLog <nl> } <nl> } <nl> <nl> - / * <nl> - * This ctor is currently used only for debugging . We <nl> - * are now using it to modify the header so that recovery <nl> - * can be tested in as many scenarios as we could imagine . <nl> - * <nl> - * param @ logFile - logfile which we wish to modify . <nl> - * / <nl> - CommitLog ( File logFile ) throws IOException <nl> - { <nl> - logFile _ = logFile . getAbsolutePath ( ) ; <nl> - logWriter _ = CommitLog . createWriter ( logFile _ ) ; <nl> - } <nl> - <nl> String getLogFile ( ) <nl> { <nl> return logFile _ ; <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java <nl> index 952a2dd . . f0675c0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class CommitLogExecutorService extends AbstractExecutorService implements <nl> / / now sync and set the tasks ' values ( which allows thread calling get ( ) to proceed ) <nl> try <nl> { <nl> - CommitLog . open ( ) . sync ( ) ; <nl> + CommitLog . instance ( ) . sync ( ) ; <nl> } <nl> catch ( IOException e ) <nl> {

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 index e184640 . . a897f75 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 @ @ - 521 , 6 + 521 , 15 @ @ public class CommitLogSegmentManager 
 * / 
 public void resetUnsafe ( ) 
 { 
 + stopUnsafe ( ) ; 
 + startUnsafe ( ) ; 
 + } 
 + 
 + / * * 
 + * Stops CL , for testing purposes . DO NOT USE THIS OUTSIDE OF TESTS . 
 + * / 
 + public void stopUnsafe ( ) 
 + { 
 logger . debug ( " Closing and clearing existing commit log segments . . . " ) ; 
 
 while ( ! segmentManagementTasks . isEmpty ( ) ) 
 @ @ - 549 , 7 + 558 , 13 @ @ public class CommitLogSegmentManager 
 size . set ( 0L ) ; 
 
 logger . debug ( " Done with closing and clearing existing commit log segments . " ) ; 
 + } 
 
 + / * * 
 + * Starts CL , for testing purposes . DO NOT USE THIS OUTSIDE OF TESTS . 
 + * / 
 + public void startUnsafe ( ) 
 + { 
 start ( ) ; 
 
 wakeManager ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / SchemaLoader . java b / test / unit / org / apache / cassandra / SchemaLoader . java 
 index 60f4703 . . 98cabe2 100644 
 - - - a / test / unit / org / apache / cassandra / SchemaLoader . java 
 + + + b / test / unit / org / apache / cassandra / SchemaLoader . java 
 @ @ - 429 , 11 + 429 , 11 @ @ public class SchemaLoader 
 
 public static void cleanupAndLeaveDirs ( ) 
 { 
 - CommitLog . instance . resetUnsafe ( ) ; / / unmap CLS before attempting to delete or Windows complains 
 + CommitLog . instance . allocator . stopUnsafe ( ) ; / / unmap CLS before attempting to delete or Windows complains 
 mkdirs ( ) ; 
 cleanup ( ) ; 
 mkdirs ( ) ; 
 - CommitLog . instance . resetUnsafe ( ) ; / / cleanup screws w / CommitLog , this brings it back to safe state 
 + CommitLog . instance . allocator . startUnsafe ( ) ; / / cleanup screws w / CommitLog , this brings it back to safe state 
 } 
 
 public static void cleanup ( )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index ca52cdf . . d3b6a84 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 366 , 7 + 366 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 Table . flusherLock . writeLock ( ) . lock ( ) ; 
 try 
 { 
 - final CommitLog . CommitLogContext ctx = CommitLog . open ( ) . getContext ( ) ; / / this is harmless if ! writeCommitLog 
 + final CommitLog . CommitLogContext ctx = CommitLog . instance ( ) . getContext ( ) ; / / this is harmless if ! writeCommitLog 
 
 if ( oldMemtable . isFrozen ( ) ) 
 { 
 @ @ - 541 , 7 + 541 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 if ( cLogCtx . isValidContext ( ) ) 
 { 
 - CommitLog . open ( ) . onMemtableFlush ( table _ , columnFamily _ , cLogCtx ) ; 
 + CommitLog . instance ( ) . onMemtableFlush ( table _ , columnFamily _ , cLogCtx ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / RecoveryManager . java b / src / java / org / apache / cassandra / db / RecoveryManager . java 
 index a044e82 . . 1a1e2e1 100644 
 - - - a / src / java / org / apache / cassandra / db / RecoveryManager . java 
 + + + b / src / java / org / apache / cassandra / db / RecoveryManager . java 
 @ @ - 53 , 7 + 53 , 7 @ @ public class RecoveryManager 
 
 Arrays . sort ( files , new FileUtils . FileComparator ( ) ) ; 
 logger _ . info ( " Replaying " + StringUtils . join ( files , " , " ) ) ; 
 - CommitLog . open ( ) . recover ( files ) ; 
 + CommitLog . instance ( ) . recover ( files ) ; 
 FileUtils . delete ( files ) ; 
 logger _ . info ( " Log replay complete " ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 3c3732b . . f17d1bf 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 396 , 7 + 396 , 7 @ @ public class Table 
 { 
 if ( writeCommitLog ) 
 { 
 - Future < CommitLog . CommitLogContext > future = CommitLog . open ( ) . add ( mutation , serializedMutation ) ; 
 + Future < CommitLog . CommitLogContext > future = CommitLog . instance ( ) . add ( mutation , serializedMutation ) ; 
 if ( waitForCommitLog ) 
 { 
 try 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index f164229 . . db307a4 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 77 , 11 + 77 , 19 @ @ import java . util . concurrent . locks . ReentrantLock ; 
 public class CommitLog 
 { 
 private static volatile int SEGMENT _ SIZE = 128 * 1024 * 1024 ; / / roll after log gets this big 
 - private static volatile CommitLog instance _ ; 
 - private static final Lock lock _ = new ReentrantLock ( ) ; 
 private static final Logger logger _ = Logger . getLogger ( CommitLog . class ) ; 
 private static final Map < String , CommitLogHeader > clHeaders _ = new HashMap < String , CommitLogHeader > ( ) ; 
 
 + public static CommitLog instance ( ) 
 + { 
 + return CLHandle . instance ; 
 + } 
 + 
 + private static class CLHandle 
 + { 
 + public static final CommitLog instance = new CommitLog ( ) ; 
 + } 
 + 
 public static class CommitLogContext 
 { 
 / * Commit Log associated with this operation * / 
 @ @ - 139 , 27 + 147 , 6 @ @ public class CommitLog 
 return new BufferedRandomAccessFile ( file , " rw " ) ; 
 } 
 
 - public static CommitLog open ( ) throws IOException 
 - { 
 - if ( instance _ = = null ) 
 - { 
 - CommitLog . lock _ . lock ( ) ; 
 - try 
 - { 
 - 
 - if ( instance _ = = null ) 
 - { 
 - instance _ = new CommitLog ( ) ; 
 - } 
 - } 
 - finally 
 - { 
 - CommitLog . lock _ . unlock ( ) ; 
 - } 
 - } 
 - return instance _ ; 
 - } 
 - 
 / * Current commit log file * / 
 private String logFile _ ; 
 / * header for current commit log * / 
 @ @ - 183 , 11 + 170 , 18 @ @ public class CommitLog 
 * param @ recoverymode - is commit log being instantiated in 
 * in recovery mode . 
 * / 
 - private CommitLog ( ) throws IOException 
 + private CommitLog ( ) 
 { 
 setNextFileName ( ) ; 
 - logWriter _ = CommitLog . createWriter ( logFile _ ) ; 
 - writeCommitLogHeader ( ) ; 
 + try 
 + { 
 + logWriter _ = CommitLog . createWriter ( logFile _ ) ; 
 + writeCommitLogHeader ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new IOError ( e ) ; 
 + } 
 
 if ( DatabaseDescriptor . getCommitLogSync ( ) = = DatabaseDescriptor . CommitLogSync . periodic ) 
 { 
 @ @ - 224 , 19 + 218 , 6 @ @ public class CommitLog 
 } 
 } 
 
 - / * 
 - * This ctor is currently used only for debugging . We 
 - * are now using it to modify the header so that recovery 
 - * can be tested in as many scenarios as we could imagine . 
 - * 
 - * param @ logFile - logfile which we wish to modify . 
 - * / 
 - CommitLog ( File logFile ) throws IOException 
 - { 
 - logFile _ = logFile . getAbsolutePath ( ) ; 
 - logWriter _ = CommitLog . createWriter ( logFile _ ) ; 
 - } 
 - 
 String getLogFile ( ) 
 { 
 return logFile _ ; 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java 
 index 952a2dd . . f0675c0 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogExecutorService . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class CommitLogExecutorService extends AbstractExecutorService implements 
 / / now sync and set the tasks ' values ( which allows thread calling get ( ) to proceed ) 
 try 
 { 
 - CommitLog . open ( ) . sync ( ) ; 
 + CommitLog . instance ( ) . sync ( ) ; 
 } 
 catch ( IOException e ) 
 {
