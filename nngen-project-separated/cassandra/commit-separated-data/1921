BLEU SCORE: 0.0039670168611924085

TEST MSG: Prevent CommitLogTest failures from cascading
GENERATED MSG: fix commitlog tests post - 1135 . patch by mdennis ; reviewed by jbellis for CASSANDRA - 1318

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 0e2f5bf . . 7a27653 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . concurrent . TimeUnit ; <nl> import javax . management . MBeanServer ; <nl> import javax . management . ObjectName ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> @ @ - 378 , 7 + 379 , 8 @ @ public class CommitLog implements CommitLogMBean <nl> } <nl> } <nl> <nl> - static boolean handleCommitError ( String message , Throwable t ) <nl> + @ VisibleForTesting <nl> + public static boolean handleCommitError ( String message , Throwable t ) <nl> { <nl> switch ( DatabaseDescriptor . getCommitFailurePolicy ( ) ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> index 9f5a7b2 . . 38c192d 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> @ @ - 39 , 6 + 39 , 8 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; <nl> import org . apache . cassandra . db . commitlog . CommitLogDescriptor ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> @ @ - 219 , 7 + 221 , 7 @ @ public class CommitLogTest extends SchemaLoader <nl> CommitLog . instance . recover ( new File [ ] { logFile } ) ; / / CASSANDRA - 1119 / CASSANDRA - 1179 throw on failure * / <nl> } <nl> } <nl> - <nl> + <nl> @ Test <nl> public void testVersions ( ) <nl> { <nl> @ @ - 235 , 34 + 237 , 27 @ @ public class CommitLogTest extends SchemaLoader <nl> String newCLName = " CommitLog - " + CommitLogDescriptor . current _ version + " - 1340512736956320000 . log " ; <nl> Assert . assertEquals ( MessagingService . current _ version , CommitLogDescriptor . fromFileName ( newCLName ) . getMessagingVersion ( ) ) ; <nl> } <nl> - / * <nl> + <nl> @ Test <nl> - public void testCommitFailurePolicy _ stop ( ) <nl> + public void testCommitFailurePolicy _ stop ( ) throws ConfigurationException <nl> { <nl> - File commitDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; <nl> + / / Need storage service active so stop policy can shutdown gossip <nl> + StorageService . instance . initServer ( ) ; <nl> + Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; <nl> <nl> + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; <nl> try <nl> { <nl> - <nl> DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . stop ) ; <nl> - commitDir . setWritable ( false ) ; <nl> - RowMutation rm = new RowMutation ( " Keyspace1 " , bytes ( " k " ) ) ; <nl> - rm . add ( " Standard1 " , bytes ( " c1 " ) , ByteBuffer . allocate ( 100 ) , 0 ) ; <nl> - <nl> - / / Adding it twice ( won ' t change segment ) <nl> - CommitLog . instance . add ( rm ) ; <nl> - Uninterruptibles . sleepUninterruptibly ( ( int ) DatabaseDescriptor . getCommitLogSyncBatchWindow ( ) , TimeUnit . MILLISECONDS ) ; <nl> - Assert . assertFalse ( StorageService . instance . isRPCServerRunning ( ) ) ; <nl> - Assert . assertFalse ( StorageService . instance . isNativeTransportRunning ( ) ) ; <nl> - Assert . assertFalse ( StorageService . instance . isInitialized ( ) ) ; <nl> - <nl> + CommitLog . handleCommitError ( " Test stop error " , new Throwable ( ) ) ; <nl> + Assert . assertFalse ( Gossiper . instance . isEnabled ( ) ) ; <nl> } <nl> finally <nl> { <nl> - commitDir . setWritable ( true ) ; <nl> + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; <nl> } <nl> } <nl> - * / <nl> + <nl> @ Test <nl> public void testTruncateWithoutSnapshot ( ) throws ExecutionException , InterruptedException <nl> {
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> index 44a0161 . . 042a7d4 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ <nl> package org . apache . cassandra . db ; <nl> <nl> import java . io . * ; <nl> - import java . util . concurrent . ExecutionException ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> <nl> @ @ - 28 , 7 + 27 , 6 @ @ import org . junit . Test ; <nl> <nl> import org . apache . cassandra . CleanupHelper ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> - <nl> import org . apache . cassandra . db . commitlog . CommitLogHeader ; <nl> import org . apache . cassandra . db . filter . QueryPath ; <nl> import org . apache . cassandra . utils . Pair ; <nl> @ @ - 36 , 18 + 34 , 21 @ @ import org . apache . cassandra . utils . Pair ; <nl> public class CommitLogTest extends CleanupHelper <nl> { <nl> @ Test <nl> - public void testCleanup ( ) throws IOException , ExecutionException , InterruptedException <nl> + public void testCleanup ( ) throws Exception <nl> { <nl> - assert CommitLog . instance ( ) . getSegmentCount ( ) = = 1 ; <nl> - CommitLog . setSegmentSize ( 1000 ) ; <nl> + int segmentCount = CommitLog . instance ( ) . getSegmentCount ( ) ; <nl> + assert segmentCount = = 1 : segmentCount + " ! = 1 " ; <nl> + <nl> + / / must me large enough to hold persistent _ stats <nl> + CommitLog . setSegmentSize ( 10000 ) ; <nl> <nl> Table table = Table . open ( " Keyspace1 " ) ; <nl> ColumnFamilyStore store1 = table . getColumnFamilyStore ( " Standard1 " ) ; <nl> ColumnFamilyStore store2 = table . getColumnFamilyStore ( " Standard2 " ) ; <nl> RowMutation rm ; <nl> - byte [ ] value = new byte [ 501 ] ; <nl> + byte [ ] value = new byte [ 5001 ] ; <nl> <nl> - / / add data . use relatively large values to force quick segment creation since we have a low flush threshold in the test config . <nl> + / / add data , one each of Standard1 / Standard2 per segment <nl> for ( int i = 0 ; i < 10 ; i + + ) <nl> { <nl> rm = new RowMutation ( " Keyspace1 " , " key1 " . getBytes ( ) ) ; <nl> @ @ - 59 , 11 + 60 , 13 @ @ public class CommitLogTest extends CleanupHelper <nl> <nl> / / nothing should get removed after flushing just Standard1 <nl> store1 . forceBlockingFlush ( ) ; <nl> - assert CommitLog . instance ( ) . getSegmentCount ( ) > 1 ; <nl> + segmentCount = CommitLog . instance ( ) . getSegmentCount ( ) ; <nl> + assert segmentCount > 1 : segmentCount + " ! > 1 " ; <nl> <nl> / / after flushing Standard2 we should be able to clean out all segments <nl> store2 . forceBlockingFlush ( ) ; <nl> - assert CommitLog . instance ( ) . getSegmentCount ( ) = = 1 ; <nl> + segmentCount = CommitLog . instance ( ) . getSegmentCount ( ) ; <nl> + assert segmentCount = = 1 : segmentCount + " ! = 1 " ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> index 11370db . . 94bee64 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> + + + b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java <nl> @ @ - 22 , 21 + 22 , 19 @ @ package org . apache . cassandra . db ; <nl> <nl> <nl> import java . io . IOException ; <nl> - import java . util . concurrent . ExecutionException ; <nl> - <nl> - import org . apache . cassandra . Util ; <nl> <nl> import org . junit . Test ; <nl> <nl> + import static org . apache . cassandra . Util . column ; <nl> import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> <nl> - import static org . apache . cassandra . Util . column ; <nl> - <nl> public class RecoveryManager2Test extends CleanupHelper <nl> { <nl> @ Test <nl> - public void testWithFlush ( ) throws IOException , ExecutionException , InterruptedException <nl> + / * test that commit logs do not replay flushed data * / <nl> + public void testWithFlush ( ) throws Exception <nl> { <nl> CompactionManager . instance . disableAutoCompaction ( ) ; <nl> <nl> @ @ - 50 , 9 + 48 , 19 @ @ public class RecoveryManager2Test extends CleanupHelper <nl> ColumnFamilyStore cfs = table1 . getColumnFamilyStore ( " Standard1 " ) ; <nl> cfs . forceBlockingFlush ( ) ; <nl> <nl> + / / forceBlockingFlush above adds persistent stats to the current commit log segment <nl> + / / it ends up in the same segment as key99 meaning that segment still has unwritten data <nl> + / / thus the commit log replays it when recover is called below <nl> + Table . open ( Table . SYSTEM _ TABLE ) . getColumnFamilyStore ( StatisticsTable . STATISTICS _ CF ) . forceBlockingFlush ( ) ; <nl> + <nl> + / / remove all SSTable / MemTables <nl> cfs . clearUnsafe ( ) ; <nl> - CommitLog . recover ( ) ; / / this is a no - op . is testing this useful ? <nl> <nl> + / / replay the commit log ( nothing should be replayed since everything was flushed ) <nl> + CommitLog . recover ( ) ; <nl> + <nl> + / / since everything that was flushed was removed ( i . e . clearUnsafe ) <nl> + / / and the commit shouldn ' t have replayed anything , there should be no data <nl> assert Util . getRangeSlice ( cfs ) . isEmpty ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 0e2f5bf . . 7a27653 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . concurrent . TimeUnit ; 
 import javax . management . MBeanServer ; 
 import javax . management . ObjectName ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 @ @ - 378 , 7 + 379 , 8 @ @ public class CommitLog implements CommitLogMBean 
 } 
 } 
 
 - static boolean handleCommitError ( String message , Throwable t ) 
 + @ VisibleForTesting 
 + public static boolean handleCommitError ( String message , Throwable t ) 
 { 
 switch ( DatabaseDescriptor . getCommitFailurePolicy ( ) ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 index 9f5a7b2 . . 38c192d 100644 
 - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 @ @ - 39 , 6 + 39 , 8 @ @ import org . apache . cassandra . db . commitlog . CommitLog ; 
 import org . apache . cassandra . db . commitlog . CommitLogDescriptor ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 @ @ - 219 , 7 + 221 , 7 @ @ public class CommitLogTest extends SchemaLoader 
 CommitLog . instance . recover ( new File [ ] { logFile } ) ; / / CASSANDRA - 1119 / CASSANDRA - 1179 throw on failure * / 
 } 
 } 
 - 
 + 
 @ Test 
 public void testVersions ( ) 
 { 
 @ @ - 235 , 34 + 237 , 27 @ @ public class CommitLogTest extends SchemaLoader 
 String newCLName = " CommitLog - " + CommitLogDescriptor . current _ version + " - 1340512736956320000 . log " ; 
 Assert . assertEquals ( MessagingService . current _ version , CommitLogDescriptor . fromFileName ( newCLName ) . getMessagingVersion ( ) ) ; 
 } 
 - / * 
 + 
 @ Test 
 - public void testCommitFailurePolicy _ stop ( ) 
 + public void testCommitFailurePolicy _ stop ( ) throws ConfigurationException 
 { 
 - File commitDir = new File ( DatabaseDescriptor . getCommitLogLocation ( ) ) ; 
 + / / Need storage service active so stop policy can shutdown gossip 
 + StorageService . instance . initServer ( ) ; 
 + Assert . assertTrue ( Gossiper . instance . isEnabled ( ) ) ; 
 
 + Config . CommitFailurePolicy oldPolicy = DatabaseDescriptor . getCommitFailurePolicy ( ) ; 
 try 
 { 
 - 
 DatabaseDescriptor . setCommitFailurePolicy ( Config . CommitFailurePolicy . stop ) ; 
 - commitDir . setWritable ( false ) ; 
 - RowMutation rm = new RowMutation ( " Keyspace1 " , bytes ( " k " ) ) ; 
 - rm . add ( " Standard1 " , bytes ( " c1 " ) , ByteBuffer . allocate ( 100 ) , 0 ) ; 
 - 
 - / / Adding it twice ( won ' t change segment ) 
 - CommitLog . instance . add ( rm ) ; 
 - Uninterruptibles . sleepUninterruptibly ( ( int ) DatabaseDescriptor . getCommitLogSyncBatchWindow ( ) , TimeUnit . MILLISECONDS ) ; 
 - Assert . assertFalse ( StorageService . instance . isRPCServerRunning ( ) ) ; 
 - Assert . assertFalse ( StorageService . instance . isNativeTransportRunning ( ) ) ; 
 - Assert . assertFalse ( StorageService . instance . isInitialized ( ) ) ; 
 - 
 + CommitLog . handleCommitError ( " Test stop error " , new Throwable ( ) ) ; 
 + Assert . assertFalse ( Gossiper . instance . isEnabled ( ) ) ; 
 } 
 finally 
 { 
 - commitDir . setWritable ( true ) ; 
 + DatabaseDescriptor . setCommitFailurePolicy ( oldPolicy ) ; 
 } 
 } 
 - * / 
 + 
 @ Test 
 public void testTruncateWithoutSnapshot ( ) throws ExecutionException , InterruptedException 
 {

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / CommitLogTest . java b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 index 44a0161 . . 042a7d4 100644 
 - - - a / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CommitLogTest . java 
 @ @ - 20 , 7 + 20 , 6 @ @ 
 package org . apache . cassandra . db ; 
 
 import java . io . * ; 
 - import java . util . concurrent . ExecutionException ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 
 @ @ - 28 , 7 + 27 , 6 @ @ import org . junit . Test ; 
 
 import org . apache . cassandra . CleanupHelper ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 - 
 import org . apache . cassandra . db . commitlog . CommitLogHeader ; 
 import org . apache . cassandra . db . filter . QueryPath ; 
 import org . apache . cassandra . utils . Pair ; 
 @ @ - 36 , 18 + 34 , 21 @ @ import org . apache . cassandra . utils . Pair ; 
 public class CommitLogTest extends CleanupHelper 
 { 
 @ Test 
 - public void testCleanup ( ) throws IOException , ExecutionException , InterruptedException 
 + public void testCleanup ( ) throws Exception 
 { 
 - assert CommitLog . instance ( ) . getSegmentCount ( ) = = 1 ; 
 - CommitLog . setSegmentSize ( 1000 ) ; 
 + int segmentCount = CommitLog . instance ( ) . getSegmentCount ( ) ; 
 + assert segmentCount = = 1 : segmentCount + " ! = 1 " ; 
 + 
 + / / must me large enough to hold persistent _ stats 
 + CommitLog . setSegmentSize ( 10000 ) ; 
 
 Table table = Table . open ( " Keyspace1 " ) ; 
 ColumnFamilyStore store1 = table . getColumnFamilyStore ( " Standard1 " ) ; 
 ColumnFamilyStore store2 = table . getColumnFamilyStore ( " Standard2 " ) ; 
 RowMutation rm ; 
 - byte [ ] value = new byte [ 501 ] ; 
 + byte [ ] value = new byte [ 5001 ] ; 
 
 - / / add data . use relatively large values to force quick segment creation since we have a low flush threshold in the test config . 
 + / / add data , one each of Standard1 / Standard2 per segment 
 for ( int i = 0 ; i < 10 ; i + + ) 
 { 
 rm = new RowMutation ( " Keyspace1 " , " key1 " . getBytes ( ) ) ; 
 @ @ - 59 , 11 + 60 , 13 @ @ public class CommitLogTest extends CleanupHelper 
 
 / / nothing should get removed after flushing just Standard1 
 store1 . forceBlockingFlush ( ) ; 
 - assert CommitLog . instance ( ) . getSegmentCount ( ) > 1 ; 
 + segmentCount = CommitLog . instance ( ) . getSegmentCount ( ) ; 
 + assert segmentCount > 1 : segmentCount + " ! > 1 " ; 
 
 / / after flushing Standard2 we should be able to clean out all segments 
 store2 . forceBlockingFlush ( ) ; 
 - assert CommitLog . instance ( ) . getSegmentCount ( ) = = 1 ; 
 + segmentCount = CommitLog . instance ( ) . getSegmentCount ( ) ; 
 + assert segmentCount = = 1 : segmentCount + " ! = 1 " ; 
 } 
 
 @ Test 
 diff - - git a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 index 11370db . . 94bee64 100644 
 - - - a / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 + + + b / test / unit / org / apache / cassandra / db / RecoveryManager2Test . java 
 @ @ - 22 , 21 + 22 , 19 @ @ package org . apache . cassandra . db ; 
 
 
 import java . io . IOException ; 
 - import java . util . concurrent . ExecutionException ; 
 - 
 - import org . apache . cassandra . Util ; 
 
 import org . junit . Test ; 
 
 + import static org . apache . cassandra . Util . column ; 
 import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . Util ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 
 - import static org . apache . cassandra . Util . column ; 
 - 
 public class RecoveryManager2Test extends CleanupHelper 
 { 
 @ Test 
 - public void testWithFlush ( ) throws IOException , ExecutionException , InterruptedException 
 + / * test that commit logs do not replay flushed data * / 
 + public void testWithFlush ( ) throws Exception 
 { 
 CompactionManager . instance . disableAutoCompaction ( ) ; 
 
 @ @ - 50 , 9 + 48 , 19 @ @ public class RecoveryManager2Test extends CleanupHelper 
 ColumnFamilyStore cfs = table1 . getColumnFamilyStore ( " Standard1 " ) ; 
 cfs . forceBlockingFlush ( ) ; 
 
 + / / forceBlockingFlush above adds persistent stats to the current commit log segment 
 + / / it ends up in the same segment as key99 meaning that segment still has unwritten data 
 + / / thus the commit log replays it when recover is called below 
 + Table . open ( Table . SYSTEM _ TABLE ) . getColumnFamilyStore ( StatisticsTable . STATISTICS _ CF ) . forceBlockingFlush ( ) ; 
 + 
 + / / remove all SSTable / MemTables 
 cfs . clearUnsafe ( ) ; 
 - CommitLog . recover ( ) ; / / this is a no - op . is testing this useful ? 
 
 + / / replay the commit log ( nothing should be replayed since everything was flushed ) 
 + CommitLog . recover ( ) ; 
 + 
 + / / since everything that was flushed was removed ( i . e . clearUnsafe ) 
 + / / and the commit shouldn ' t have replayed anything , there should be no data 
 assert Util . getRangeSlice ( cfs ) . isEmpty ( ) ; 
 } 

