BLEU SCORE: 0.003198134793023071

TEST MSG: Don ' t return early from DynamicEndpointSnitch when null scores are encountered
GENERATED MSG: fall back to subsnitch on score equality as well as no score at all , fix probability calculation . Patch by jbellis and brandonwilliams , reviewed by brandonwilliams for CASSANDRA - 981

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 8a7ae42 . . d31ffc8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 9 <nl> + * Fix DynamicEndpointSnitch noop in multi - datacenter situations ( CASSANDRA - 13074 ) <nl> * cqlsh copy - from : encode column names to avoid primary key parsing errors ( CASSANDRA - 12909 ) <nl> * Temporarily fix bug that creates commit log when running offline tools ( CASSANDRA - 8616 ) <nl> * Reduce granuality of OpOrder . Group during index build ( CASSANDRA - 12796 ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 6280dc2 . . 9c0c57e 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> { <nl> Double score = scores . get ( inet ) ; <nl> if ( score = = null ) <nl> - return ; <nl> + continue ; <nl> subsnitchOrderedScores . add ( score ) ; <nl> } <nl> <nl> @ @ - 215 , 13 + 215 , 11 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> if ( scored1 = = null ) <nl> { <nl> scored1 = 0 . 0 ; <nl> - receiveTiming ( a1 , 0 ) ; <nl> } <nl> <nl> if ( scored2 = = null ) <nl> { <nl> scored2 = 0 . 0 ; <nl> - receiveTiming ( a2 , 0 ) ; <nl> } <nl> <nl> if ( scored1 . equals ( scored2 ) ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> index 100cd25 . . d27edbf 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import static org . junit . Assert . assertEquals ; <nl> <nl> public class DynamicEndpointSnitchTest <nl> { <nl> - <nl> private static void setScores ( DynamicEndpointSnitch dsnitch , int rounds , List < InetAddress > hosts , Integer . . . scores ) throws InterruptedException <nl> { <nl> for ( int round = 0 ; round < rounds ; round + + ) <nl> @ @ - 55 , 6 + 54 , 7 @ @ public class DynamicEndpointSnitchTest <nl> InetAddress host1 = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; <nl> InetAddress host2 = InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ; <nl> InetAddress host3 = InetAddress . getByName ( " 127 . 0 . 0 . 4 " ) ; <nl> + InetAddress host4 = InetAddress . getByName ( " 127 . 0 . 0 . 5 " ) ; <nl> List < InetAddress > hosts = Arrays . asList ( host1 , host2 , host3 ) ; <nl> <nl> / / first , make all hosts equal <nl> @ @ - 88 , 5 + 88 , 12 @ @ public class DynamicEndpointSnitchTest <nl> setScores ( dsnitch , 20 , hosts , 10 , 70 , 20 ) ; <nl> order = Arrays . asList ( host1 , host3 , host2 ) ; <nl> assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; <nl> + <nl> + order = Arrays . asList ( host4 , host1 , host3 , host2 ) ; <nl> + assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; <nl> + <nl> + setScores ( dsnitch , 20 , hosts , 10 , 10 , 10 ) ; <nl> + order = Arrays . asList ( host1 , host2 , host3 , host4 ) ; <nl> + assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 565a1a1 . . 90192f0 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 118 , 7 + 118 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> <nl> public List < InetAddress > sortByProximity ( final InetAddress address , List < InetAddress > addresses ) <nl> { <nl> - assert address = = FBUtilities . getLocalAddress ( ) ; / / we only know about ourself <nl> + assert address . equals ( FBUtilities . getLocalAddress ( ) ) ; / / we only know about ourself <nl> Collections . sort ( addresses , new Comparator < InetAddress > ( ) <nl> { <nl> public int compare ( InetAddress a1 , InetAddress a2 ) <nl> @ @ - 134 , 14 + 134 , 12 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> Double scored1 = scores . get ( a1 ) ; <nl> Double scored2 = scores . get ( a2 ) ; <nl> <nl> - if ( scored1 = = null | | scored2 = = null ) <nl> + if ( scored1 = = null | | scored2 = = null | | scored1 . equals ( scored2 ) ) <nl> return subsnitch . compareEndpoints ( target , a1 , a2 ) ; <nl> - if ( scored1 . equals ( scored2 ) ) <nl> - return 0 ; <nl> if ( scored1 < scored2 ) <nl> - return 1 ; <nl> - else <nl> return - 1 ; <nl> + else <nl> + return 1 ; <nl> } <nl> <nl> public void receiveTiming ( InetAddress host , Double latency ) / / this is cheap <nl> @ @ - 234 , 7 + 232 , 7 @ @ class AdaptiveLatencyTracker extends AbstractStatsDeque <nl> { <nl> double mean = mean ( ) ; <nl> double exponent = ( - 1 ) * ( t ) / mean ; <nl> - return Math . pow ( Math . E , exponent ) ; <nl> + return 1 - Math . pow ( Math . E , exponent ) ; <nl> } <nl> <nl> double score ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> index 62904b4 . . c7eb982 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java <nl> @ @ - 25 , 9 + 25 , 6 @ @ import java . util . ArrayList ; <nl> <nl> import org . junit . Test ; <nl> <nl> - import static org . junit . Assert . * ; <nl> - import org . apache . cassandra . locator . DynamicEndpointSnitch ; <nl> - import org . apache . cassandra . locator . SimpleSnitch ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class DynamicEndpointSnitchTest <nl> @ @ - 35 , 6 + 32 , 7 @ @ public class DynamicEndpointSnitchTest <nl> @ Test <nl> public void testSnitch ( ) throws UnknownHostException , InterruptedException <nl> { <nl> + int sleeptime = 150 ; <nl> DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( new SimpleSnitch ( ) ) ; <nl> InetAddress self = FBUtilities . getLocalAddress ( ) ; <nl> ArrayList < InetAddress > order = new ArrayList < InetAddress > ( ) ; <nl> @ @ - 50 , 34 + 48 , 31 @ @ public class DynamicEndpointSnitchTest <nl> dsnitch . receiveTiming ( host3 , 1 . 0 ) ; <nl> } <nl> <nl> - Thread . sleep ( 1500 ) ; <nl> + Thread . sleep ( sleeptime ) ; <nl> <nl> order . add ( host1 ) ; <nl> order . add ( host2 ) ; <nl> order . add ( host3 ) ; <nl> - <nl> assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; <nl> <nl> / / make host1 a little worse <nl> dsnitch . receiveTiming ( host1 , 2 . 0 ) ; <nl> - Thread . sleep ( 1500 ) ; <nl> - order . clear ( ) ; <nl> + Thread . sleep ( sleeptime ) ; <nl> <nl> + order . clear ( ) ; <nl> order . add ( host2 ) ; <nl> order . add ( host3 ) ; <nl> order . add ( host1 ) ; <nl> - <nl> assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; <nl> <nl> - / / make host2 a little worse <nl> + / / make host2 as bad as host1 <nl> dsnitch . receiveTiming ( host2 , 2 . 0 ) ; <nl> - Thread . sleep ( 1500 ) ; <nl> - order . clear ( ) ; <nl> + Thread . sleep ( sleeptime ) ; <nl> <nl> + order . clear ( ) ; <nl> order . add ( host3 ) ; <nl> - order . add ( host2 ) ; <nl> order . add ( host1 ) ; <nl> - <nl> + order . add ( host2 ) ; <nl> assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; <nl> <nl> / / make host3 the worst <nl> @ @ - 85 , 25 + 80 , 25 @ @ public class DynamicEndpointSnitchTest <nl> { <nl> dsnitch . receiveTiming ( host3 , 2 . 0 ) ; <nl> } <nl> - Thread . sleep ( 1500 ) ; <nl> - order . clear ( ) ; <nl> + Thread . sleep ( sleeptime ) ; <nl> <nl> - order . add ( host2 ) ; <nl> + order . clear ( ) ; <nl> order . add ( host1 ) ; <nl> + order . add ( host2 ) ; <nl> order . add ( host3 ) ; <nl> + assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; <nl> <nl> / / make host3 equal to the others <nl> for ( int i = 0 ; i < 2 ; i + + ) <nl> { <nl> dsnitch . receiveTiming ( host3 , 1 . 0 ) ; <nl> } <nl> - Thread . sleep ( 1500 ) ; <nl> - order . clear ( ) ; <nl> + Thread . sleep ( sleeptime ) ; <nl> <nl> + order . clear ( ) ; <nl> order . add ( host1 ) ; <nl> order . add ( host2 ) ; <nl> order . add ( host3 ) ; <nl> - <nl> assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 8a7ae42 . . d31ffc8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 9 
 + * Fix DynamicEndpointSnitch noop in multi - datacenter situations ( CASSANDRA - 13074 ) 
 * cqlsh copy - from : encode column names to avoid primary key parsing errors ( CASSANDRA - 12909 ) 
 * Temporarily fix bug that creates commit log when running offline tools ( CASSANDRA - 8616 ) 
 * Reduce granuality of OpOrder . Group during index build ( CASSANDRA - 12796 ) 
 diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 6280dc2 . . 9c0c57e 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 185 , 7 + 185 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 { 
 Double score = scores . get ( inet ) ; 
 if ( score = = null ) 
 - return ; 
 + continue ; 
 subsnitchOrderedScores . add ( score ) ; 
 } 
 
 @ @ - 215 , 13 + 215 , 11 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 if ( scored1 = = null ) 
 { 
 scored1 = 0 . 0 ; 
 - receiveTiming ( a1 , 0 ) ; 
 } 
 
 if ( scored2 = = null ) 
 { 
 scored2 = 0 . 0 ; 
 - receiveTiming ( a2 , 0 ) ; 
 } 
 
 if ( scored1 . equals ( scored2 ) ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 index 100cd25 . . d27edbf 100644 
 - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import static org . junit . Assert . assertEquals ; 
 
 public class DynamicEndpointSnitchTest 
 { 
 - 
 private static void setScores ( DynamicEndpointSnitch dsnitch , int rounds , List < InetAddress > hosts , Integer . . . scores ) throws InterruptedException 
 { 
 for ( int round = 0 ; round < rounds ; round + + ) 
 @ @ - 55 , 6 + 54 , 7 @ @ public class DynamicEndpointSnitchTest 
 InetAddress host1 = InetAddress . getByName ( " 127 . 0 . 0 . 2 " ) ; 
 InetAddress host2 = InetAddress . getByName ( " 127 . 0 . 0 . 3 " ) ; 
 InetAddress host3 = InetAddress . getByName ( " 127 . 0 . 0 . 4 " ) ; 
 + InetAddress host4 = InetAddress . getByName ( " 127 . 0 . 0 . 5 " ) ; 
 List < InetAddress > hosts = Arrays . asList ( host1 , host2 , host3 ) ; 
 
 / / first , make all hosts equal 
 @ @ - 88 , 5 + 88 , 12 @ @ public class DynamicEndpointSnitchTest 
 setScores ( dsnitch , 20 , hosts , 10 , 70 , 20 ) ; 
 order = Arrays . asList ( host1 , host3 , host2 ) ; 
 assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 ) ) ) ; 
 + 
 + order = Arrays . asList ( host4 , host1 , host3 , host2 ) ; 
 + assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; 
 + 
 + setScores ( dsnitch , 20 , hosts , 10 , 10 , 10 ) ; 
 + order = Arrays . asList ( host1 , host2 , host3 , host4 ) ; 
 + assertEquals ( order , dsnitch . getSortedListByProximity ( self , Arrays . asList ( host1 , host2 , host3 , host4 ) ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 565a1a1 . . 90192f0 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 118 , 7 + 118 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 
 public List < InetAddress > sortByProximity ( final InetAddress address , List < InetAddress > addresses ) 
 { 
 - assert address = = FBUtilities . getLocalAddress ( ) ; / / we only know about ourself 
 + assert address . equals ( FBUtilities . getLocalAddress ( ) ) ; / / we only know about ourself 
 Collections . sort ( addresses , new Comparator < InetAddress > ( ) 
 { 
 public int compare ( InetAddress a1 , InetAddress a2 ) 
 @ @ - 134 , 14 + 134 , 12 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 Double scored1 = scores . get ( a1 ) ; 
 Double scored2 = scores . get ( a2 ) ; 
 
 - if ( scored1 = = null | | scored2 = = null ) 
 + if ( scored1 = = null | | scored2 = = null | | scored1 . equals ( scored2 ) ) 
 return subsnitch . compareEndpoints ( target , a1 , a2 ) ; 
 - if ( scored1 . equals ( scored2 ) ) 
 - return 0 ; 
 if ( scored1 < scored2 ) 
 - return 1 ; 
 - else 
 return - 1 ; 
 + else 
 + return 1 ; 
 } 
 
 public void receiveTiming ( InetAddress host , Double latency ) / / this is cheap 
 @ @ - 234 , 7 + 232 , 7 @ @ class AdaptiveLatencyTracker extends AbstractStatsDeque 
 { 
 double mean = mean ( ) ; 
 double exponent = ( - 1 ) * ( t ) / mean ; 
 - return Math . pow ( Math . E , exponent ) ; 
 + return 1 - Math . pow ( Math . E , exponent ) ; 
 } 
 
 double score ( ) 
 diff - - git a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 index 62904b4 . . c7eb982 100644 
 - - - a / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / DynamicEndpointSnitchTest . java 
 @ @ - 25 , 9 + 25 , 6 @ @ import java . util . ArrayList ; 
 
 import org . junit . Test ; 
 
 - import static org . junit . Assert . * ; 
 - import org . apache . cassandra . locator . DynamicEndpointSnitch ; 
 - import org . apache . cassandra . locator . SimpleSnitch ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 public class DynamicEndpointSnitchTest 
 @ @ - 35 , 6 + 32 , 7 @ @ public class DynamicEndpointSnitchTest 
 @ Test 
 public void testSnitch ( ) throws UnknownHostException , InterruptedException 
 { 
 + int sleeptime = 150 ; 
 DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch ( new SimpleSnitch ( ) ) ; 
 InetAddress self = FBUtilities . getLocalAddress ( ) ; 
 ArrayList < InetAddress > order = new ArrayList < InetAddress > ( ) ; 
 @ @ - 50 , 34 + 48 , 31 @ @ public class DynamicEndpointSnitchTest 
 dsnitch . receiveTiming ( host3 , 1 . 0 ) ; 
 } 
 
 - Thread . sleep ( 1500 ) ; 
 + Thread . sleep ( sleeptime ) ; 
 
 order . add ( host1 ) ; 
 order . add ( host2 ) ; 
 order . add ( host3 ) ; 
 - 
 assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; 
 
 / / make host1 a little worse 
 dsnitch . receiveTiming ( host1 , 2 . 0 ) ; 
 - Thread . sleep ( 1500 ) ; 
 - order . clear ( ) ; 
 + Thread . sleep ( sleeptime ) ; 
 
 + order . clear ( ) ; 
 order . add ( host2 ) ; 
 order . add ( host3 ) ; 
 order . add ( host1 ) ; 
 - 
 assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; 
 
 - / / make host2 a little worse 
 + / / make host2 as bad as host1 
 dsnitch . receiveTiming ( host2 , 2 . 0 ) ; 
 - Thread . sleep ( 1500 ) ; 
 - order . clear ( ) ; 
 + Thread . sleep ( sleeptime ) ; 
 
 + order . clear ( ) ; 
 order . add ( host3 ) ; 
 - order . add ( host2 ) ; 
 order . add ( host1 ) ; 
 - 
 + order . add ( host2 ) ; 
 assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; 
 
 / / make host3 the worst 
 @ @ - 85 , 25 + 80 , 25 @ @ public class DynamicEndpointSnitchTest 
 { 
 dsnitch . receiveTiming ( host3 , 2 . 0 ) ; 
 } 
 - Thread . sleep ( 1500 ) ; 
 - order . clear ( ) ; 
 + Thread . sleep ( sleeptime ) ; 
 
 - order . add ( host2 ) ; 
 + order . clear ( ) ; 
 order . add ( host1 ) ; 
 + order . add ( host2 ) ; 
 order . add ( host3 ) ; 
 + assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; 
 
 / / make host3 equal to the others 
 for ( int i = 0 ; i < 2 ; i + + ) 
 { 
 dsnitch . receiveTiming ( host3 , 1 . 0 ) ; 
 } 
 - Thread . sleep ( 1500 ) ; 
 - order . clear ( ) ; 
 + Thread . sleep ( sleeptime ) ; 
 
 + order . clear ( ) ; 
 order . add ( host1 ) ; 
 order . add ( host2 ) ; 
 order . add ( host3 ) ; 
 - 
 assert dsnitch . getSortedListByProximity ( self , order ) . equals ( order ) ; 
 } 
 }
