BLEU SCORE: 4.71137143972137E-9

TEST MSG: simplify
GENERATED MSG: expose cf count , disk space to JMX . patch by jbellis ; reviewed by eevans for CASSANDRA - 599

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index a5be956 . . 76171f0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 193 , 10 + 193 , 11 @ @ public class Directories <nl> <nl> this . dataPaths = new File [ dataDirectories . length ] ; <nl> / / If upgraded from version less than 2 . 1 , use existing directories <nl> + String oldSSTableRelativePath = join ( metadata . ksName , metadata . cfName ) ; <nl> for ( int i = 0 ; i < dataDirectories . length ; + + i ) <nl> { <nl> / / check if old SSTable directory exists <nl> - dataPaths [ i ] = new File ( dataDirectories [ i ] . location , join ( metadata . ksName , metadata . cfName ) ) ; <nl> + dataPaths [ i ] = new File ( dataDirectories [ i ] . location , oldSSTableRelativePath ) ; <nl> } <nl> boolean olderDirectoryExists = Iterables . any ( Arrays . asList ( dataPaths ) , new Predicate < File > ( ) <nl> { <nl> @ @ - 208 , 8 + 209 , 10 @ @ public class Directories <nl> if ( ! olderDirectoryExists ) <nl> { <nl> / / use 2 . 1 - style path names <nl> + 	 <nl> + 	 String newSSTableRelativePath = join ( metadata . ksName , directoryName ) ; <nl> for ( int i = 0 ; i < dataDirectories . length ; + + i ) <nl> - dataPaths [ i ] = new File ( dataDirectories [ i ] . location , join ( metadata . ksName , directoryName ) ) ; <nl> + dataPaths [ i ] = new File ( dataDirectories [ i ] . location , newSSTableRelativePath ) ; <nl> } <nl> <nl> for ( File dir : dataPaths )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index d82a76d . . c8b8618 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 170 , 6 + 170 , 22 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return cfs ; <nl> } <nl> <nl> + private Set < File > files ( ) <nl> + { <nl> + Set < File > fileSet = new HashSet < File > ( 3 * ssTables _ . size ( ) + 6 ) ; / / 6 is fudge factor so we don ' t have to double if there ' s a couple uncompacted ones around <nl> + for ( String directory : DatabaseDescriptor . getAllDataFileLocationsForTable ( table _ ) ) <nl> + { <nl> + File [ ] files = new File ( directory ) . listFiles ( ) ; <nl> + for ( File file : files ) <nl> + { <nl> + String cfName = getColumnFamilyFromFileName ( file . getName ( ) ) ; <nl> + if ( cfName . equals ( columnFamily _ ) ) <nl> + fileSet . add ( file ) ; <nl> + } <nl> + } <nl> + return fileSet ; <nl> + } <nl> + <nl> void onStart ( ) throws IOException <nl> { <nl> if ( logger _ . isDebugEnabled ( ) ) <nl> @ @ - 177 , 43 + 193 , 32 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> / / scan for data files corresponding to this CF <nl> List < File > sstableFiles = new ArrayList < File > ( ) ; <nl> Pattern auxFilePattern = Pattern . compile ( " ( . * ) ( - Filter \ \ . db $ | - Index \ \ . db $ ) " ) ; <nl> - String [ ] dataFileDirectories = DatabaseDescriptor . getAllDataFileLocationsForTable ( table _ ) ; <nl> - for ( String directory : dataFileDirectories ) <nl> + for ( File file : files ( ) ) <nl> { <nl> - File fileDir = new File ( directory ) ; <nl> - File [ ] files = fileDir . listFiles ( ) ; <nl> - for ( File file : files ) <nl> - { <nl> - String filename = file . getName ( ) ; <nl> - String cfName = getColumnFamilyFromFileName ( filename ) ; <nl> + String filename = file . getName ( ) ; <nl> <nl> - / / skip files that are not from this column family <nl> - if ( ! cfName . equals ( columnFamily _ ) ) <nl> - continue ; <nl> - <nl> - / * look for and remove orphans . An orphan is a - Filter . db or - Index . db with no corresponding - Data . db . * / <nl> - Matcher matcher = auxFilePattern . matcher ( file . getAbsolutePath ( ) ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - String basePath = matcher . group ( 1 ) ; <nl> - if ( ! new File ( basePath + " - Data . db " ) . exists ( ) ) <nl> - { <nl> - logger _ . info ( String . format ( " Removing orphan % s " , file . getAbsolutePath ( ) ) ) ; <nl> - FileUtils . deleteWithConfirm ( file ) ; <nl> - continue ; <nl> - } <nl> - } <nl> - <nl> - if ( ( ( file . length ( ) = = 0 & & ! filename . endsWith ( " - Compacted " ) ) | | ( filename . contains ( " - " + SSTable . TEMPFILE _ MARKER ) ) ) ) <nl> + / * look for and remove orphans . An orphan is a - Filter . db or - Index . db with no corresponding - Data . db . * / <nl> + Matcher matcher = auxFilePattern . matcher ( file . getAbsolutePath ( ) ) ; <nl> + if ( matcher . matches ( ) ) <nl> + { <nl> + String basePath = matcher . group ( 1 ) ; <nl> + if ( ! new File ( basePath + " - Data . db " ) . exists ( ) ) <nl> { <nl> + logger _ . info ( String . format ( " Removing orphan % s " , file . getAbsolutePath ( ) ) ) ; <nl> FileUtils . deleteWithConfirm ( file ) ; <nl> continue ; <nl> } <nl> + } <nl> <nl> - if ( filename . contains ( " - Data . db " ) ) <nl> - { <nl> - sstableFiles . add ( file . getAbsoluteFile ( ) ) ; <nl> - } <nl> + if ( ( ( file . length ( ) = = 0 & & ! filename . endsWith ( " - Compacted " ) ) | | ( filename . contains ( " - " + SSTable . TEMPFILE _ MARKER ) ) ) ) <nl> + { <nl> + FileUtils . deleteWithConfirm ( file ) ; <nl> + continue ; <nl> + } <nl> + <nl> + if ( filename . contains ( " - Data . db " ) ) <nl> + { <nl> + sstableFiles . add ( file . getAbsoluteFile ( ) ) ; <nl> } <nl> } <nl> Collections . sort ( sstableFiles , new FileUtils . FileComparator ( ) ) ; <nl> @ @ - 1211 , 6 + 1216 , 31 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> + public long getTotalDiskSpaceUsed ( ) <nl> + { <nl> + long n = 0 ; <nl> + for ( File file : files ( ) ) <nl> + { <nl> + n + = file . length ( ) ; <nl> + } <nl> + return n ; <nl> + } <nl> + <nl> + public long getLiveDiskSpaceUsed ( ) <nl> + { <nl> + long n = 0 ; <nl> + for ( SSTableReader sstable : ssTables _ ) <nl> + { <nl> + n + = sstable . bytesOnDisk ( ) ; <nl> + } <nl> + return n ; <nl> + } <nl> + <nl> + public int getLiveSSTableCount ( ) <nl> + { <nl> + return ssTables _ . size ( ) ; <nl> + } <nl> + <nl> / * * <nl> * for testing . no effort is made to clear historical memtables . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index a8b9893 . . ec85781 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 80 , 9 + 80 , 22 @ @ public interface ColumnFamilyStoreMBean <nl> public double getWriteLatency ( ) ; <nl> <nl> / * * <nl> - * <nl> * @ return the estimated number of tasks pending for this column family <nl> * / <nl> public int getPendingTasks ( ) ; <nl> - <nl> + <nl> + / * * <nl> + * @ return the number of SSTables on disk for this CF <nl> + * / <nl> + public int getLiveSSTableCount ( ) ; <nl> + <nl> + / * * <nl> + * @ return disk space used by SSTables belonging to this CF <nl> + * / <nl> + public long getLiveDiskSpaceUsed ( ) ; <nl> + <nl> + / * * <nl> + * @ return total disk space used by SSTables belonging to this CF , including obsolete ones waiting to be GC ' d <nl> + * / <nl> + public long getTotalDiskSpaceUsed ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTable . java b / src / java / org / apache / cassandra / io / SSTable . java <nl> index e5b0690 . . 2c137ef 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTable . java <nl> @ @ - 198 , 6 + 198 , 11 @ @ public abstract class SSTable <nl> } <nl> } <nl> <nl> + public long dataBytesOnDisk ( ) <nl> + { <nl> + return new File ( path ) . length ( ) ; <nl> + } <nl> + <nl> public long bytesOnDisk ( ) <nl> { <nl> long bytes = 0 ; <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 3b942d3 . . 8f4b542 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 781 , 10 + 781 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> for ( String cfName : table . getColumnFamilies ( ) ) <nl> { <nl> ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> - for ( SSTableReader sstable : cfs . getSSTables ( ) ) <nl> - { <nl> - bytes + = sstable . bytesOnDisk ( ) ; <nl> - } <nl> + bytes + = cfs . getLiveDiskSpaceUsed ( ) ; <nl> } <nl> } <nl> return bytes ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 5f64b5f . . e1aa720 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 322 , 10 + 322 , 14 @ @ public class NodeProbe <nl> outs . println ( " \ tWrite Count : " + tableWriteCount ) ; <nl> outs . println ( " \ tWrite Latency : " + String . format ( " % 01 . 3f " , tableWriteLatency ) + " ms . " ) ; <nl> outs . println ( " \ tPending Tasks : " + tablePendingTasks ) ; <nl> - / / print out column family statistic for this table <nl> + <nl> + / / print out column family statistics for this table <nl> for ( ColumnFamilyStoreMBean cfstore : columnFamilies ) <nl> { <nl> outs . println ( " \ t \ tColumn Family : " + cfstore . getColumnFamilyName ( ) ) ; <nl> + outs . println ( " \ t \ tSSTable count : " + cfstore . getLiveSSTableCount ( ) ) ; <nl> + outs . println ( " \ t \ tSpace used ( live ) : " + cfstore . getLiveDiskSpaceUsed ( ) ) ; <nl> + outs . println ( " \ t \ tSpace used ( total ) : " + cfstore . getTotalDiskSpaceUsed ( ) ) ; <nl> outs . println ( " \ t \ tMemtable Columns Count : " + cfstore . getMemtableColumnsCount ( ) ) ; <nl> outs . println ( " \ t \ tMemtable Data Size : " + cfstore . getMemtableDataSize ( ) ) ; <nl> outs . println ( " \ t \ tMemtable Switch Count : " + cfstore . getMemtableSwitchCount ( ) ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index a5be956 . . 76171f0 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 193 , 10 + 193 , 11 @ @ public class Directories 
 
 this . dataPaths = new File [ dataDirectories . length ] ; 
 / / If upgraded from version less than 2 . 1 , use existing directories 
 + String oldSSTableRelativePath = join ( metadata . ksName , metadata . cfName ) ; 
 for ( int i = 0 ; i < dataDirectories . length ; + + i ) 
 { 
 / / check if old SSTable directory exists 
 - dataPaths [ i ] = new File ( dataDirectories [ i ] . location , join ( metadata . ksName , metadata . cfName ) ) ; 
 + dataPaths [ i ] = new File ( dataDirectories [ i ] . location , oldSSTableRelativePath ) ; 
 } 
 boolean olderDirectoryExists = Iterables . any ( Arrays . asList ( dataPaths ) , new Predicate < File > ( ) 
 { 
 @ @ - 208 , 8 + 209 , 10 @ @ public class Directories 
 if ( ! olderDirectoryExists ) 
 { 
 / / use 2 . 1 - style path names 
 + 	 
 + 	 String newSSTableRelativePath = join ( metadata . ksName , directoryName ) ; 
 for ( int i = 0 ; i < dataDirectories . length ; + + i ) 
 - dataPaths [ i ] = new File ( dataDirectories [ i ] . location , join ( metadata . ksName , directoryName ) ) ; 
 + dataPaths [ i ] = new File ( dataDirectories [ i ] . location , newSSTableRelativePath ) ; 
 } 
 
 for ( File dir : dataPaths )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index d82a76d . . c8b8618 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 170 , 6 + 170 , 22 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return cfs ; 
 } 
 
 + private Set < File > files ( ) 
 + { 
 + Set < File > fileSet = new HashSet < File > ( 3 * ssTables _ . size ( ) + 6 ) ; / / 6 is fudge factor so we don ' t have to double if there ' s a couple uncompacted ones around 
 + for ( String directory : DatabaseDescriptor . getAllDataFileLocationsForTable ( table _ ) ) 
 + { 
 + File [ ] files = new File ( directory ) . listFiles ( ) ; 
 + for ( File file : files ) 
 + { 
 + String cfName = getColumnFamilyFromFileName ( file . getName ( ) ) ; 
 + if ( cfName . equals ( columnFamily _ ) ) 
 + fileSet . add ( file ) ; 
 + } 
 + } 
 + return fileSet ; 
 + } 
 + 
 void onStart ( ) throws IOException 
 { 
 if ( logger _ . isDebugEnabled ( ) ) 
 @ @ - 177 , 43 + 193 , 32 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 / / scan for data files corresponding to this CF 
 List < File > sstableFiles = new ArrayList < File > ( ) ; 
 Pattern auxFilePattern = Pattern . compile ( " ( . * ) ( - Filter \ \ . db $ | - Index \ \ . db $ ) " ) ; 
 - String [ ] dataFileDirectories = DatabaseDescriptor . getAllDataFileLocationsForTable ( table _ ) ; 
 - for ( String directory : dataFileDirectories ) 
 + for ( File file : files ( ) ) 
 { 
 - File fileDir = new File ( directory ) ; 
 - File [ ] files = fileDir . listFiles ( ) ; 
 - for ( File file : files ) 
 - { 
 - String filename = file . getName ( ) ; 
 - String cfName = getColumnFamilyFromFileName ( filename ) ; 
 + String filename = file . getName ( ) ; 
 
 - / / skip files that are not from this column family 
 - if ( ! cfName . equals ( columnFamily _ ) ) 
 - continue ; 
 - 
 - / * look for and remove orphans . An orphan is a - Filter . db or - Index . db with no corresponding - Data . db . * / 
 - Matcher matcher = auxFilePattern . matcher ( file . getAbsolutePath ( ) ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - String basePath = matcher . group ( 1 ) ; 
 - if ( ! new File ( basePath + " - Data . db " ) . exists ( ) ) 
 - { 
 - logger _ . info ( String . format ( " Removing orphan % s " , file . getAbsolutePath ( ) ) ) ; 
 - FileUtils . deleteWithConfirm ( file ) ; 
 - continue ; 
 - } 
 - } 
 - 
 - if ( ( ( file . length ( ) = = 0 & & ! filename . endsWith ( " - Compacted " ) ) | | ( filename . contains ( " - " + SSTable . TEMPFILE _ MARKER ) ) ) ) 
 + / * look for and remove orphans . An orphan is a - Filter . db or - Index . db with no corresponding - Data . db . * / 
 + Matcher matcher = auxFilePattern . matcher ( file . getAbsolutePath ( ) ) ; 
 + if ( matcher . matches ( ) ) 
 + { 
 + String basePath = matcher . group ( 1 ) ; 
 + if ( ! new File ( basePath + " - Data . db " ) . exists ( ) ) 
 { 
 + logger _ . info ( String . format ( " Removing orphan % s " , file . getAbsolutePath ( ) ) ) ; 
 FileUtils . deleteWithConfirm ( file ) ; 
 continue ; 
 } 
 + } 
 
 - if ( filename . contains ( " - Data . db " ) ) 
 - { 
 - sstableFiles . add ( file . getAbsoluteFile ( ) ) ; 
 - } 
 + if ( ( ( file . length ( ) = = 0 & & ! filename . endsWith ( " - Compacted " ) ) | | ( filename . contains ( " - " + SSTable . TEMPFILE _ MARKER ) ) ) ) 
 + { 
 + FileUtils . deleteWithConfirm ( file ) ; 
 + continue ; 
 + } 
 + 
 + if ( filename . contains ( " - Data . db " ) ) 
 + { 
 + sstableFiles . add ( file . getAbsoluteFile ( ) ) ; 
 } 
 } 
 Collections . sort ( sstableFiles , new FileUtils . FileComparator ( ) ) ; 
 @ @ - 1211 , 6 + 1216 , 31 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 + public long getTotalDiskSpaceUsed ( ) 
 + { 
 + long n = 0 ; 
 + for ( File file : files ( ) ) 
 + { 
 + n + = file . length ( ) ; 
 + } 
 + return n ; 
 + } 
 + 
 + public long getLiveDiskSpaceUsed ( ) 
 + { 
 + long n = 0 ; 
 + for ( SSTableReader sstable : ssTables _ ) 
 + { 
 + n + = sstable . bytesOnDisk ( ) ; 
 + } 
 + return n ; 
 + } 
 + 
 + public int getLiveSSTableCount ( ) 
 + { 
 + return ssTables _ . size ( ) ; 
 + } 
 + 
 / * * 
 * for testing . no effort is made to clear historical memtables . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index a8b9893 . . ec85781 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 80 , 9 + 80 , 22 @ @ public interface ColumnFamilyStoreMBean 
 public double getWriteLatency ( ) ; 
 
 / * * 
 - * 
 * @ return the estimated number of tasks pending for this column family 
 * / 
 public int getPendingTasks ( ) ; 
 - 
 + 
 + / * * 
 + * @ return the number of SSTables on disk for this CF 
 + * / 
 + public int getLiveSSTableCount ( ) ; 
 + 
 + / * * 
 + * @ return disk space used by SSTables belonging to this CF 
 + * / 
 + public long getLiveDiskSpaceUsed ( ) ; 
 + 
 + / * * 
 + * @ return total disk space used by SSTables belonging to this CF , including obsolete ones waiting to be GC ' d 
 + * / 
 + public long getTotalDiskSpaceUsed ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / SSTable . java b / src / java / org / apache / cassandra / io / SSTable . java 
 index e5b0690 . . 2c137ef 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / SSTable . java 
 @ @ - 198 , 6 + 198 , 11 @ @ public abstract class SSTable 
 } 
 } 
 
 + public long dataBytesOnDisk ( ) 
 + { 
 + return new File ( path ) . length ( ) ; 
 + } 
 + 
 public long bytesOnDisk ( ) 
 { 
 long bytes = 0 ; 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 3b942d3 . . 8f4b542 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 781 , 10 + 781 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 for ( String cfName : table . getColumnFamilies ( ) ) 
 { 
 ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 - for ( SSTableReader sstable : cfs . getSSTables ( ) ) 
 - { 
 - bytes + = sstable . bytesOnDisk ( ) ; 
 - } 
 + bytes + = cfs . getLiveDiskSpaceUsed ( ) ; 
 } 
 } 
 return bytes ; 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 5f64b5f . . e1aa720 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 322 , 10 + 322 , 14 @ @ public class NodeProbe 
 outs . println ( " \ tWrite Count : " + tableWriteCount ) ; 
 outs . println ( " \ tWrite Latency : " + String . format ( " % 01 . 3f " , tableWriteLatency ) + " ms . " ) ; 
 outs . println ( " \ tPending Tasks : " + tablePendingTasks ) ; 
 - / / print out column family statistic for this table 
 + 
 + / / print out column family statistics for this table 
 for ( ColumnFamilyStoreMBean cfstore : columnFamilies ) 
 { 
 outs . println ( " \ t \ tColumn Family : " + cfstore . getColumnFamilyName ( ) ) ; 
 + outs . println ( " \ t \ tSSTable count : " + cfstore . getLiveSSTableCount ( ) ) ; 
 + outs . println ( " \ t \ tSpace used ( live ) : " + cfstore . getLiveDiskSpaceUsed ( ) ) ; 
 + outs . println ( " \ t \ tSpace used ( total ) : " + cfstore . getTotalDiskSpaceUsed ( ) ) ; 
 outs . println ( " \ t \ tMemtable Columns Count : " + cfstore . getMemtableColumnsCount ( ) ) ; 
 outs . println ( " \ t \ tMemtable Data Size : " + cfstore . getMemtableDataSize ( ) ) ; 
 outs . println ( " \ t \ tMemtable Switch Count : " + cfstore . getMemtableSwitchCount ( ) ) ;
