BLEU SCORE: 0.323729563941832

TEST MSG: Improve compaction logging
GENERATED MSG: improve compaction result logging

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 9a43511 . . ed141ef 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Improve compaction logging ( CASSANDRA - 7818 ) <nl> * Remove YamlFileNetworkTopologySnitch ( CASSANDRA - 7917 ) <nl> * Support Java source code for user - defined functions ( CASSANDRA - 7562 ) <nl> * Require arg types to disambiguate UDF drops ( CASSANDRA - 7812 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 349caf3 . . fa0cffc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ import org . apache . cassandra . io . sstable . SSTableWriter ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> import org . apache . cassandra . utils . CloseableIterator ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> public class CompactionTask extends AbstractCompactionTask <nl> { <nl> @ @ - 132 , 7 + 133 , 14 @ @ public class CompactionTask extends AbstractCompactionTask <nl> / / new sstables from flush can be added during a compaction , but only the compaction can remove them , <nl> / / so in our single - threaded compaction world this is a valid way of determining if we ' re compacting <nl> / / all the sstables ( that existed when we started ) <nl> - logger . info ( " Compacting { } " , sstables ) ; <nl> + StringBuilder ssTableLoggerMsg = new StringBuilder ( " [ " ) ; <nl> + for ( SSTableReader sstr : sstables ) <nl> + { <nl> + ssTableLoggerMsg . append ( String . format ( " SSTableReader ( path = % s , level = % d ) , " , sstr . getFilename ( ) , sstr . getSSTableLevel ( ) ) ) ; <nl> + } <nl> + ssTableLoggerMsg . append ( " ] " ) ; <nl> + String taskIdLoggerMsg = taskId = = null ? UUIDGen . getTimeUUID ( ) . toString ( ) : taskId . toString ( ) ; <nl> + logger . info ( " Compacting ( { } ) { } " , taskIdLoggerMsg , ssTableLoggerMsg ) ; <nl> <nl> long start = System . nanoTime ( ) ; <nl> long totalKeysWritten = 0 ; <nl> @ @ - 246 , 8 + 254 , 8 @ @ public class CompactionTask extends AbstractCompactionTask <nl> } <nl> <nl> SystemKeyspace . updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . name , System . currentTimeMillis ( ) , startsize , endsize , mergedRows ) ; <nl> - logger . info ( String . format ( " Compacted % d sstables to [ % s ] . % , d bytes to % , d ( ~ % d % % of original ) in % , dms = % fMB / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , <nl> - oldSStables . size ( ) , newSSTableNames . toString ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , totalSourceRows , totalKeysWritten , mergeSummary . toString ( ) ) ) ; <nl> + logger . info ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % , d bytes to % , d ( ~ % d % % of original ) in % , dms = % fMB / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , <nl> + taskIdLoggerMsg , oldSStables . size ( ) , newSSTableNames . toString ( ) , getLevel ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , totalSourceRows , totalKeysWritten , mergeSummary . toString ( ) ) ) ; <nl> logger . debug ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; <nl> logger . debug ( " Actual # keys : { } , Estimated # keys : { } , Err % : { } " , totalKeysWritten , estimatedTotalKeys , ( ( double ) ( totalKeysWritten - estimatedTotalKeys ) / totalKeysWritten ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index c673a9c . . de1ce56 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 493 , 9 + 493 , 10 @ @ public class ThriftValidation <nl> if ( range . start _ token ! = null & & range . end _ key ! = null ) <nl> throw new InvalidRequestException ( " start token + end key is not a supported key range " ) ; <nl> <nl> + IPartitioner p = StorageService . getPartitioner ( ) ; <nl> + <nl> if ( range . start _ key ! = null & & range . end _ key ! = null ) <nl> { <nl> - IPartitioner p = StorageService . getPartitioner ( ) ; <nl> Token startToken = p . getToken ( range . start _ key ) ; <nl> Token endToken = p . getToken ( range . end _ key ) ; <nl> if ( startToken . compareTo ( endToken ) > 0 & & ! endToken . isMinimum ( p ) ) <nl> @ @ - 506 , 6 + 507 , 14 @ @ public class ThriftValidation <nl> throw new InvalidRequestException ( " start key must sort before ( or equal to ) finish key in your partitioner ! " ) ; <nl> } <nl> } <nl> + else if ( range . end _ token ! = null ) <nl> + { <nl> + RowPosition stop = p . getTokenFactory ( ) . fromString ( range . end _ token ) . maxKeyBound ( p ) ; <nl> + if ( range . start _ key ! = null & & RowPosition . forKey ( range . start _ key , p ) . compareTo ( stop ) > 0 ) <nl> + throw new InvalidRequestException ( " Start key ' s token sorts after end token " ) ; <nl> + if ( range . start _ token ! = null & & p . getTokenFactory ( ) . fromString ( range . start _ token ) . maxKeyBound ( p ) . compareTo ( stop ) > 0 ) <nl> + throw new InvalidRequestException ( " Start token sorts after end token " ) ; <nl> + } <nl> <nl> validateFilterClauses ( metadata , range . row _ filter ) ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 9a43511 . . ed141ef 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Improve compaction logging ( CASSANDRA - 7818 ) 
 * Remove YamlFileNetworkTopologySnitch ( CASSANDRA - 7917 ) 
 * Support Java source code for user - defined functions ( CASSANDRA - 7562 ) 
 * Require arg types to disambiguate UDF drops ( CASSANDRA - 7812 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 349caf3 . . fa0cffc 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import org . apache . cassandra . io . sstable . SSTableWriter ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 import org . apache . cassandra . utils . CloseableIterator ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 public class CompactionTask extends AbstractCompactionTask 
 { 
 @ @ - 132 , 7 + 133 , 14 @ @ public class CompactionTask extends AbstractCompactionTask 
 / / new sstables from flush can be added during a compaction , but only the compaction can remove them , 
 / / so in our single - threaded compaction world this is a valid way of determining if we ' re compacting 
 / / all the sstables ( that existed when we started ) 
 - logger . info ( " Compacting { } " , sstables ) ; 
 + StringBuilder ssTableLoggerMsg = new StringBuilder ( " [ " ) ; 
 + for ( SSTableReader sstr : sstables ) 
 + { 
 + ssTableLoggerMsg . append ( String . format ( " SSTableReader ( path = % s , level = % d ) , " , sstr . getFilename ( ) , sstr . getSSTableLevel ( ) ) ) ; 
 + } 
 + ssTableLoggerMsg . append ( " ] " ) ; 
 + String taskIdLoggerMsg = taskId = = null ? UUIDGen . getTimeUUID ( ) . toString ( ) : taskId . toString ( ) ; 
 + logger . info ( " Compacting ( { } ) { } " , taskIdLoggerMsg , ssTableLoggerMsg ) ; 
 
 long start = System . nanoTime ( ) ; 
 long totalKeysWritten = 0 ; 
 @ @ - 246 , 8 + 254 , 8 @ @ public class CompactionTask extends AbstractCompactionTask 
 } 
 
 SystemKeyspace . updateCompactionHistory ( cfs . keyspace . getName ( ) , cfs . name , System . currentTimeMillis ( ) , startsize , endsize , mergedRows ) ; 
 - logger . info ( String . format ( " Compacted % d sstables to [ % s ] . % , d bytes to % , d ( ~ % d % % of original ) in % , dms = % fMB / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , 
 - oldSStables . size ( ) , newSSTableNames . toString ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , totalSourceRows , totalKeysWritten , mergeSummary . toString ( ) ) ) ; 
 + logger . info ( String . format ( " Compacted ( % s ) % d sstables to [ % s ] to level = % d . % , d bytes to % , d ( ~ % d % % of original ) in % , dms = % fMB / s . % , d total partitions merged to % , d . Partition merge counts were { % s } " , 
 + taskIdLoggerMsg , oldSStables . size ( ) , newSSTableNames . toString ( ) , getLevel ( ) , startsize , endsize , ( int ) ( ratio * 100 ) , dTime , mbps , totalSourceRows , totalKeysWritten , mergeSummary . toString ( ) ) ) ; 
 logger . debug ( String . format ( " CF Total Bytes Compacted : % , d " , CompactionTask . addToTotalBytesCompacted ( endsize ) ) ) ; 
 logger . debug ( " Actual # keys : { } , Estimated # keys : { } , Err % : { } " , totalKeysWritten , estimatedTotalKeys , ( ( double ) ( totalKeysWritten - estimatedTotalKeys ) / totalKeysWritten ) ) ; 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index c673a9c . . de1ce56 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 493 , 9 + 493 , 10 @ @ public class ThriftValidation 
 if ( range . start _ token ! = null & & range . end _ key ! = null ) 
 throw new InvalidRequestException ( " start token + end key is not a supported key range " ) ; 
 
 + IPartitioner p = StorageService . getPartitioner ( ) ; 
 + 
 if ( range . start _ key ! = null & & range . end _ key ! = null ) 
 { 
 - IPartitioner p = StorageService . getPartitioner ( ) ; 
 Token startToken = p . getToken ( range . start _ key ) ; 
 Token endToken = p . getToken ( range . end _ key ) ; 
 if ( startToken . compareTo ( endToken ) > 0 & & ! endToken . isMinimum ( p ) ) 
 @ @ - 506 , 6 + 507 , 14 @ @ public class ThriftValidation 
 throw new InvalidRequestException ( " start key must sort before ( or equal to ) finish key in your partitioner ! " ) ; 
 } 
 } 
 + else if ( range . end _ token ! = null ) 
 + { 
 + RowPosition stop = p . getTokenFactory ( ) . fromString ( range . end _ token ) . maxKeyBound ( p ) ; 
 + if ( range . start _ key ! = null & & RowPosition . forKey ( range . start _ key , p ) . compareTo ( stop ) > 0 ) 
 + throw new InvalidRequestException ( " Start key ' s token sorts after end token " ) ; 
 + if ( range . start _ token ! = null & & p . getTokenFactory ( ) . fromString ( range . start _ token ) . maxKeyBound ( p ) . compareTo ( stop ) > 0 ) 
 + throw new InvalidRequestException ( " Start token sorts after end token " ) ; 
 + } 
 
 validateFilterClauses ( metadata , range . row _ filter ) ; 

