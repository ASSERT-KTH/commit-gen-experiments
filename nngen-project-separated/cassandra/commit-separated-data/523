BLEU SCORE: 0.05073552004225952

TEST MSG: Use StandardCharset instead of Charset . forName ( )
GENERATED MSG: Make BBU . string validate input for the desired Charset

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> index 3cd45de . . 05077ee 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> @ @ - 19 , 9 + 19 , 9 @ @ package org . apache . cassandra . db . marshal ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . nio . CharBuffer ; <nl> - import java . nio . charset . Charset ; <nl> import java . nio . charset . CharsetEncoder ; <nl> import java . nio . charset . CharacterCodingException ; <nl> + import java . nio . charset . StandardCharsets ; <nl> <nl> import io . netty . util . concurrent . FastThreadLocal ; <nl> import org . apache . cassandra . cql3 . Constants ; <nl> @ @ - 46 , 7 + 46 , 7 @ @ public class AsciiType extends AbstractType < String > <nl> @ Override <nl> protected CharsetEncoder initialValue ( ) <nl> { <nl> - return Charset . forName ( " US - ASCII " ) . newEncoder ( ) ; <nl> + return StandardCharsets . US _ ASCII . newEncoder ( ) ; <nl> } <nl> } ; <nl> <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class AsciiType extends AbstractType < String > <nl> { <nl> try <nl> { <nl> - return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , Charset . forName ( " US - ASCII " ) ) ) + ' " ' ; <nl> + return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , StandardCharsets . US _ ASCII ) ) + ' " ' ; <nl> } <nl> catch ( CharacterCodingException exc ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> index 1da6629 . . 46e0d90 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . db . marshal ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> - import java . nio . charset . Charset ; <nl> + import java . nio . charset . StandardCharsets ; <nl> <nl> import org . apache . cassandra . cql3 . Constants ; <nl> import org . apache . cassandra . cql3 . Json ; <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class UTF8Type extends AbstractType < String > <nl> { <nl> try <nl> { <nl> - return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , Charset . forName ( " UTF - 8 " ) ) ) + ' " ' ; <nl> + return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , StandardCharsets . UTF _ 8 ) ) + ' " ' ; <nl> } <nl> catch ( CharacterCodingException exc ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java b / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java <nl> index e0cddee . . d5a85cf 100644 <nl> - - - a / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java <nl> + + + b / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . metrics ; <nl> import java . io . OutputStream ; <nl> import java . io . OutputStreamWriter ; <nl> import java . io . PrintWriter ; <nl> - import java . nio . charset . Charset ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Arrays ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicLongArray ; <nl> @ @ - 48 , 7 + 48 , 7 @ @ import org . apache . cassandra . utils . EstimatedHistogram ; <nl> * end of the 30 : th minute all collected values will roughly add up to 1 . 000 . 000 * 60 * pow ( 2 , 30 ) which can be <nl> * represented with 56 bits giving us some head room in a signed 64 bit long . <nl> * <nl> - * Internally two reservoirs are maintained , one with decay and one without decay . All public getters in a { @ Snapshot } <nl> + * Internally two reservoirs are maintained , one with decay and one without decay . All public getters in a { @ link Snapshot } <nl> * will expose the decay functionality with the exception of the { @ link Snapshot # getValues ( ) } which will return values <nl> * from the reservoir without decay . This makes it possible for the caller to maintain precise deltas in an interval of <nl> * its choise . <nl> @ @ - 331 , 9 + 331 , 6 @ @ public class DecayingEstimatedHistogramReservoir implements Reservoir <nl> this . lock . writeLock ( ) . unlock ( ) ; <nl> } <nl> <nl> - <nl> - private static final Charset UTF _ 8 = Charset . forName ( " UTF - 8 " ) ; <nl> - <nl> / * * <nl> * Represents a snapshot of the decaying histogram . <nl> * <nl> @ @ - 539 , 7 + 536 , 7 @ @ public class DecayingEstimatedHistogramReservoir implements Reservoir <nl> <nl> public void dump ( OutputStream output ) <nl> { <nl> - try ( PrintWriter out = new PrintWriter ( new OutputStreamWriter ( output , UTF _ 8 ) ) ) <nl> + try ( PrintWriter out = new PrintWriter ( new OutputStreamWriter ( output , StandardCharsets . UTF _ 8 ) ) ) <nl> { <nl> int length = decayingBuckets . length ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> index 66e5e73 . . 824ad26 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / CBUtil . java <nl> + + + b / src / java / org / apache / cassandra / transport / CBUtil . java <nl> @ @ - 23 , 9 + 23 , 9 @ @ import java . net . UnknownHostException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . CharBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> - import java . nio . charset . Charset ; <nl> import java . nio . charset . CharsetDecoder ; <nl> import java . nio . charset . CoderResult ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> @ @ - 64 , 7 + 64 , 7 @ @ public abstract class CBUtil <nl> @ Override <nl> protected CharsetDecoder initialValue ( ) <nl> { <nl> - return Charset . forName ( " UTF - 8 " ) . newDecoder ( ) ; <nl> + return StandardCharsets . UTF _ 8 . newDecoder ( ) ; <nl> } <nl> } ; <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> index 0e7d8c8 . . 8821672 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . io . util ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . io . RandomAccessFile ; <nl> - import java . nio . charset . Charset ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> @ @ - 54 , 11 + 54 , 11 @ @ public class FileUtilsTest <nl> assertTrue ( file . exists ( ) ) ; <nl> <nl> byte [ ] b = Files . readAllBytes ( file . toPath ( ) ) ; <nl> - assertEquals ( expected , new String ( b , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( expected , new String ( b , StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> FileUtils . truncate ( file . getAbsolutePath ( ) , 10 ) ; <nl> b = Files . readAllBytes ( file . toPath ( ) ) ; <nl> - assertEquals ( " The quick " , new String ( b , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( " The quick " , new String ( b , StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> FileUtils . truncate ( file . getAbsolutePath ( ) , 0 ) ; <nl> b = Files . readAllBytes ( file . toPath ( ) ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java b / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java <nl> index 8941d2a . . 3a34855 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import java . nio . channels . FileChannel ; <nl> import java . nio . channels . FileLock ; <nl> import java . nio . channels . ReadableByteChannel ; <nl> import java . nio . channels . WritableByteChannel ; <nl> - import java . nio . charset . Charset ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Arrays ; <nl> import java . util . Random ; <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 338 , 7 + 338 , 7 @ @ public class RandomAccessReaderTest <nl> assertEquals ( expected . length ( ) , reader . length ( ) ) ; <nl> <nl> ByteBuffer b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; <nl> - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> assertTrue ( reader . isEOF ( ) ) ; <nl> assertEquals ( 0 , reader . bytesRemaining ( ) ) ; <nl> @ @ - 368 , 7 + 368 , 7 @ @ public class RandomAccessReaderTest <nl> assertEquals ( expected . length ( ) * numIterations , reader . length ( ) ) ; <nl> <nl> ByteBuffer b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; <nl> - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; <nl> <nl> assertFalse ( reader . isEOF ( ) ) ; <nl> assertEquals ( ( numIterations - 1 ) * expected . length ( ) , reader . bytesRemaining ( ) ) ; <nl> @ @ - 380 , 7 + 380 , 7 @ @ public class RandomAccessReaderTest <nl> for ( int i = 0 ; i < ( numIterations - 1 ) ; i + + ) <nl> { <nl> b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; <nl> - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; <nl> } <nl> assertTrue ( reader . isEOF ( ) ) ; <nl> assertEquals ( expected . length ( ) * ( numIterations - 1 ) , reader . bytesPastMark ( ) ) ; <nl> @ @ - 393 , 7 + 393 , 7 @ @ public class RandomAccessReaderTest <nl> for ( int i = 0 ; i < ( numIterations - 1 ) ; i + + ) <nl> { <nl> b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; <nl> - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; <nl> } <nl> <nl> reader . reset ( ) ; <nl> @ @ - 403 , 7 + 403 , 7 @ @ public class RandomAccessReaderTest <nl> for ( int i = 0 ; i < ( numIterations - 1 ) ; i + + ) <nl> { <nl> b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; <nl> - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; <nl> + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; <nl> } <nl> <nl> assertTrue ( reader . isEOF ( ) ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index ce1d6ae . . a01738e 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 325 , 7 + 325 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; <nl> DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> GossipDigestAckMessage . serializer ( ) . serialize ( gDigestAckMessage , dos ) ; <nl> - return new Message ( localEndpoint _ , StorageService . Verb . GOSSIP _ DIGEST _ ACK , bos . toByteArray ( ) ) ; <nl> + return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . GOSSIP _ DIGEST _ ACK , bos . toByteArray ( ) ) ; <nl> } <nl> <nl> Message makeGossipDigestAck2Message ( GossipDigestAck2Message gDigestAck2Message ) throws IOException <nl> @ @ - 431 , 7 + 431 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> else <nl> { <nl> logger . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout + " ms , removing from gossip " ) ; <nl> - if ( ! justRemovedEndpoints _ . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client <nl> + if ( ! justRemovedEndpoints . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client <nl> removeEndpoint ( endpoint ) ; / / after quarantine justRemoveEndpoints will remove the state <nl> } <nl> } <nl> @ @ - 452 , 7 + 452 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( QUARANTINE _ DELAY + " elapsed , " + entry . getKey ( ) + " gossip quarantine over " ) ; <nl> justRemovedEndpoints . remove ( entry . getKey ( ) ) ; <nl> - endpointStateMap _ . remove ( entry . getKey ( ) ) ; <nl> + endpointStateMap . remove ( entry . getKey ( ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 482 , 8 + 482 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> if ( localHbVersion > version ) <nl> { <nl> reqdEndpointState = new EndpointState ( epState . getHeartBeatState ( ) ) ; <nl> - if ( logger _ . isTraceEnabled ( ) ) <nl> - logger _ . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; <nl> } <nl> / * Accumulate all application states whose versions are greater than " version " variable * / <nl> for ( Entry < ApplicationState , VersionedValue > entry : epState . getApplicationStateMap ( ) . entrySet ( ) ) <nl> @ @ - 658 , 8 + 658 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> 	 } <nl> else <nl> { <nl> - if ( logger _ . isTraceEnabled ( ) ) <nl> - logger _ . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; <nl> } <nl> } <nl> else <nl> @ @ - 677 , 8 + 677 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> Map < ApplicationState , VersionedValue > localAppStateMap = localState . getApplicationStateMap ( ) ; <nl> <nl> localState . setHeartBeatState ( remoteHbState ) ; <nl> - if ( logger _ . isTraceEnabled ( ) ) <nl> - logger _ . trace ( " Updating heartbeat state generation to " + remoteHbState . getGeneration ( ) + " from " + localHbState . getGeneration ( ) + " for " + addr ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Updating heartbeat state generation to " + remoteHbState . getGeneration ( ) + " from " + localHbState . getGeneration ( ) + " for " + addr ) ; <nl> <nl> for ( Entry < ApplicationState , VersionedValue > remoteEntry : remoteState . getApplicationStateMap ( ) . entrySet ( ) ) <nl> { <nl> @ @ - 705 , 8 + 705 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener <nl> { <nl> / * We are here since we have no data for this endpoint locally so request everthing . * / <nl> deltaGossipDigestList . add ( new GossipDigest ( gDigest . getEndpoint ( ) , remoteGeneration , 0 ) ) ; <nl> - if ( logger _ . isTraceEnabled ( ) ) <nl> - logger _ . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; <nl> } <nl> <nl> / * Send all the data with version greater than maxRemoteVersion * /

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 index 3cd45de . . 05077ee 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 @ @ - 19 , 9 + 19 , 9 @ @ package org . apache . cassandra . db . marshal ; 
 
 import java . nio . ByteBuffer ; 
 import java . nio . CharBuffer ; 
 - import java . nio . charset . Charset ; 
 import java . nio . charset . CharsetEncoder ; 
 import java . nio . charset . CharacterCodingException ; 
 + import java . nio . charset . StandardCharsets ; 
 
 import io . netty . util . concurrent . FastThreadLocal ; 
 import org . apache . cassandra . cql3 . Constants ; 
 @ @ - 46 , 7 + 46 , 7 @ @ public class AsciiType extends AbstractType < String > 
 @ Override 
 protected CharsetEncoder initialValue ( ) 
 { 
 - return Charset . forName ( " US - ASCII " ) . newEncoder ( ) ; 
 + return StandardCharsets . US _ ASCII . newEncoder ( ) ; 
 } 
 } ; 
 
 @ @ - 85 , 7 + 85 , 7 @ @ public class AsciiType extends AbstractType < String > 
 { 
 try 
 { 
 - return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , Charset . forName ( " US - ASCII " ) ) ) + ' " ' ; 
 + return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , StandardCharsets . US _ ASCII ) ) + ' " ' ; 
 } 
 catch ( CharacterCodingException exc ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 index 1da6629 . . 46e0d90 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 @ @ - 19 , 7 + 19 , 7 @ @ package org . apache . cassandra . db . marshal ; 
 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 - import java . nio . charset . Charset ; 
 + import java . nio . charset . StandardCharsets ; 
 
 import org . apache . cassandra . cql3 . Constants ; 
 import org . apache . cassandra . cql3 . Json ; 
 @ @ - 63 , 7 + 63 , 7 @ @ public class UTF8Type extends AbstractType < String > 
 { 
 try 
 { 
 - return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , Charset . forName ( " UTF - 8 " ) ) ) + ' " ' ; 
 + return ' " ' + Json . quoteAsJsonString ( ByteBufferUtil . string ( buffer , StandardCharsets . UTF _ 8 ) ) + ' " ' ; 
 } 
 catch ( CharacterCodingException exc ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java b / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java 
 index e0cddee . . d5a85cf 100644 
 - - - a / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java 
 + + + b / src / java / org / apache / cassandra / metrics / DecayingEstimatedHistogramReservoir . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . metrics ; 
 import java . io . OutputStream ; 
 import java . io . OutputStreamWriter ; 
 import java . io . PrintWriter ; 
 - import java . nio . charset . Charset ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Arrays ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicLongArray ; 
 @ @ - 48 , 7 + 48 , 7 @ @ import org . apache . cassandra . utils . EstimatedHistogram ; 
 * end of the 30 : th minute all collected values will roughly add up to 1 . 000 . 000 * 60 * pow ( 2 , 30 ) which can be 
 * represented with 56 bits giving us some head room in a signed 64 bit long . 
 * 
 - * Internally two reservoirs are maintained , one with decay and one without decay . All public getters in a { @ Snapshot } 
 + * Internally two reservoirs are maintained , one with decay and one without decay . All public getters in a { @ link Snapshot } 
 * will expose the decay functionality with the exception of the { @ link Snapshot # getValues ( ) } which will return values 
 * from the reservoir without decay . This makes it possible for the caller to maintain precise deltas in an interval of 
 * its choise . 
 @ @ - 331 , 9 + 331 , 6 @ @ public class DecayingEstimatedHistogramReservoir implements Reservoir 
 this . lock . writeLock ( ) . unlock ( ) ; 
 } 
 
 - 
 - private static final Charset UTF _ 8 = Charset . forName ( " UTF - 8 " ) ; 
 - 
 / * * 
 * Represents a snapshot of the decaying histogram . 
 * 
 @ @ - 539 , 7 + 536 , 7 @ @ public class DecayingEstimatedHistogramReservoir implements Reservoir 
 
 public void dump ( OutputStream output ) 
 { 
 - try ( PrintWriter out = new PrintWriter ( new OutputStreamWriter ( output , UTF _ 8 ) ) ) 
 + try ( PrintWriter out = new PrintWriter ( new OutputStreamWriter ( output , StandardCharsets . UTF _ 8 ) ) ) 
 { 
 int length = decayingBuckets . length ; 
 
 diff - - git a / src / java / org / apache / cassandra / transport / CBUtil . java b / src / java / org / apache / cassandra / transport / CBUtil . java 
 index 66e5e73 . . 824ad26 100644 
 - - - a / src / java / org / apache / cassandra / transport / CBUtil . java 
 + + + b / src / java / org / apache / cassandra / transport / CBUtil . java 
 @ @ - 23 , 9 + 23 , 9 @ @ import java . net . UnknownHostException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . CharBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 - import java . nio . charset . Charset ; 
 import java . nio . charset . CharsetDecoder ; 
 import java . nio . charset . CoderResult ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 @ @ - 64 , 7 + 64 , 7 @ @ public abstract class CBUtil 
 @ Override 
 protected CharsetDecoder initialValue ( ) 
 { 
 - return Charset . forName ( " UTF - 8 " ) . newDecoder ( ) ; 
 + return StandardCharsets . UTF _ 8 . newDecoder ( ) ; 
 } 
 } ; 
 
 diff - - git a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 index 0e7d8c8 . . 8821672 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / FileUtilsTest . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . io . util ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . io . RandomAccessFile ; 
 - import java . nio . charset . Charset ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 @ @ - 54 , 11 + 54 , 11 @ @ public class FileUtilsTest 
 assertTrue ( file . exists ( ) ) ; 
 
 byte [ ] b = Files . readAllBytes ( file . toPath ( ) ) ; 
 - assertEquals ( expected , new String ( b , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( expected , new String ( b , StandardCharsets . UTF _ 8 ) ) ; 
 
 FileUtils . truncate ( file . getAbsolutePath ( ) , 10 ) ; 
 b = Files . readAllBytes ( file . toPath ( ) ) ; 
 - assertEquals ( " The quick " , new String ( b , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( " The quick " , new String ( b , StandardCharsets . UTF _ 8 ) ) ; 
 
 FileUtils . truncate ( file . getAbsolutePath ( ) , 0 ) ; 
 b = Files . readAllBytes ( file . toPath ( ) ) ; 
 diff - - git a / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java b / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java 
 index 8941d2a . . 3a34855 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / RandomAccessReaderTest . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import java . nio . channels . FileChannel ; 
 import java . nio . channels . FileLock ; 
 import java . nio . channels . ReadableByteChannel ; 
 import java . nio . channels . WritableByteChannel ; 
 - import java . nio . charset . Charset ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Arrays ; 
 import java . util . Random ; 
 import java . util . concurrent . ExecutorService ; 
 @ @ - 338 , 7 + 338 , 7 @ @ public class RandomAccessReaderTest 
 assertEquals ( expected . length ( ) , reader . length ( ) ) ; 
 
 ByteBuffer b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; 
 - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; 
 
 assertTrue ( reader . isEOF ( ) ) ; 
 assertEquals ( 0 , reader . bytesRemaining ( ) ) ; 
 @ @ - 368 , 7 + 368 , 7 @ @ public class RandomAccessReaderTest 
 assertEquals ( expected . length ( ) * numIterations , reader . length ( ) ) ; 
 
 ByteBuffer b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; 
 - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; 
 
 assertFalse ( reader . isEOF ( ) ) ; 
 assertEquals ( ( numIterations - 1 ) * expected . length ( ) , reader . bytesRemaining ( ) ) ; 
 @ @ - 380 , 7 + 380 , 7 @ @ public class RandomAccessReaderTest 
 for ( int i = 0 ; i < ( numIterations - 1 ) ; i + + ) 
 { 
 b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; 
 - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; 
 } 
 assertTrue ( reader . isEOF ( ) ) ; 
 assertEquals ( expected . length ( ) * ( numIterations - 1 ) , reader . bytesPastMark ( ) ) ; 
 @ @ - 393 , 7 + 393 , 7 @ @ public class RandomAccessReaderTest 
 for ( int i = 0 ; i < ( numIterations - 1 ) ; i + + ) 
 { 
 b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; 
 - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; 
 } 
 
 reader . reset ( ) ; 
 @ @ - 403 , 7 + 403 , 7 @ @ public class RandomAccessReaderTest 
 for ( int i = 0 ; i < ( numIterations - 1 ) ; i + + ) 
 { 
 b = ByteBufferUtil . read ( reader , expected . length ( ) ) ; 
 - assertEquals ( expected , new String ( b . array ( ) , Charset . forName ( " UTF - 8 " ) ) ) ; 
 + assertEquals ( expected , new String ( b . array ( ) , StandardCharsets . UTF _ 8 ) ) ; 
 } 
 
 assertTrue ( reader . isEOF ( ) ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index ce1d6ae . . a01738e 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 325 , 7 + 325 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; 
 DataOutputStream dos = new DataOutputStream ( bos ) ; 
 GossipDigestAckMessage . serializer ( ) . serialize ( gDigestAckMessage , dos ) ; 
 - return new Message ( localEndpoint _ , StorageService . Verb . GOSSIP _ DIGEST _ ACK , bos . toByteArray ( ) ) ; 
 + return new Message ( FBUtilities . getLocalAddress ( ) , StorageService . Verb . GOSSIP _ DIGEST _ ACK , bos . toByteArray ( ) ) ; 
 } 
 
 Message makeGossipDigestAck2Message ( GossipDigestAck2Message gDigestAck2Message ) throws IOException 
 @ @ - 431 , 7 + 431 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 else 
 { 
 logger . info ( " FatClient " + endpoint + " has been silent for " + FatClientTimeout + " ms , removing from gossip " ) ; 
 - if ( ! justRemovedEndpoints _ . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client 
 + if ( ! justRemovedEndpoints . containsKey ( endpoint ) ) / / if the node was decommissioned , it will have been removed but still appear as a fat client 
 removeEndpoint ( endpoint ) ; / / after quarantine justRemoveEndpoints will remove the state 
 } 
 } 
 @ @ - 452 , 7 + 452 , 7 @ @ public class Gossiper implements IFailureDetectionEventListener 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( QUARANTINE _ DELAY + " elapsed , " + entry . getKey ( ) + " gossip quarantine over " ) ; 
 justRemovedEndpoints . remove ( entry . getKey ( ) ) ; 
 - endpointStateMap _ . remove ( entry . getKey ( ) ) ; 
 + endpointStateMap . remove ( entry . getKey ( ) ) ; 
 } 
 } 
 } 
 @ @ - 482 , 8 + 482 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 if ( localHbVersion > version ) 
 { 
 reqdEndpointState = new EndpointState ( epState . getHeartBeatState ( ) ) ; 
 - if ( logger _ . isTraceEnabled ( ) ) 
 - logger _ . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " local heartbeat version " + localHbVersion + " greater than " + version + " for " + forEndpoint ) ; 
 } 
 / * Accumulate all application states whose versions are greater than " version " variable * / 
 for ( Entry < ApplicationState , VersionedValue > entry : epState . getApplicationStateMap ( ) . entrySet ( ) ) 
 @ @ - 658 , 8 + 658 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 	 } 
 else 
 { 
 - if ( logger _ . isTraceEnabled ( ) ) 
 - logger _ . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Ignoring remote generation " + remoteGeneration + " < " + localGeneration ) ; 
 } 
 } 
 else 
 @ @ - 677 , 8 + 677 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 Map < ApplicationState , VersionedValue > localAppStateMap = localState . getApplicationStateMap ( ) ; 
 
 localState . setHeartBeatState ( remoteHbState ) ; 
 - if ( logger _ . isTraceEnabled ( ) ) 
 - logger _ . trace ( " Updating heartbeat state generation to " + remoteHbState . getGeneration ( ) + " from " + localHbState . getGeneration ( ) + " for " + addr ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Updating heartbeat state generation to " + remoteHbState . getGeneration ( ) + " from " + localHbState . getGeneration ( ) + " for " + addr ) ; 
 
 for ( Entry < ApplicationState , VersionedValue > remoteEntry : remoteState . getApplicationStateMap ( ) . entrySet ( ) ) 
 { 
 @ @ - 705 , 8 + 705 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener 
 { 
 / * We are here since we have no data for this endpoint locally so request everthing . * / 
 deltaGossipDigestList . add ( new GossipDigest ( gDigest . getEndpoint ( ) , remoteGeneration , 0 ) ) ; 
 - if ( logger _ . isTraceEnabled ( ) ) 
 - logger _ . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " requestAll for " + gDigest . getEndpoint ( ) ) ; 
 } 
 
 / * Send all the data with version greater than maxRemoteVersion * /
