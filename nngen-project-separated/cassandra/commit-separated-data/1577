BLEU SCORE: 0.04935157841536379

TEST MSG: Clean up gossiper logic for old versions
GENERATED MSG: Handle states for non - vnode clusters correctly .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 165f76b . . 41f5cfb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 <nl> + * Clean up gossiper logic for old versions ( CASSANDRA - 9370 ) <nl> * ant test - all results incomplete when parsed ( CASSANDRA - 9463 ) <nl> * Disallow frozen < > types in function arguments and return types for <nl> clarity ( CASSANDRA - 9411 ) <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 0c449ec . . e131da6 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 798 , 24 + 798 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return endpointStateMap . entrySet ( ) ; <nl> } <nl> <nl> - public boolean usesHostId ( InetAddress endpoint ) <nl> - { <nl> - if ( MessagingService . instance ( ) . knowsVersion ( endpoint ) ) <nl> - return true ; <nl> - else if ( getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . NET _ VERSION ) ! = null ) <nl> - return true ; <nl> - return false ; <nl> - } <nl> - <nl> - public boolean usesVnodes ( InetAddress endpoint ) <nl> - { <nl> - return usesHostId ( endpoint ) & & getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . TOKENS ) ! = null ; <nl> - } <nl> - <nl> public UUID getHostId ( InetAddress endpoint ) <nl> { <nl> - if ( ! usesHostId ( endpoint ) ) <nl> - throw new RuntimeException ( " Host " + endpoint + " does not use new - style tokens ! " ) ; <nl> return UUID . fromString ( getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . HOST _ ID ) . value ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index bfbf1a8 . . 8afb93f 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1825 , 8 + 1825 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> tokenMetadata . addBootstrapTokens ( tokens , endpoint ) ; <nl> PendingRangeCalculatorService . instance . update ( ) ; <nl> <nl> - if ( Gossiper . instance . usesHostId ( endpoint ) ) <nl> - tokenMetadata . updateHostId ( Gossiper . instance . getHostId ( endpoint ) , endpoint ) ; <nl> + tokenMetadata . updateHostId ( Gossiper . instance . getHostId ( endpoint ) , endpoint ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1855 , 39 + 1854 , 36 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> <nl> updatePeerInfo ( endpoint ) ; <nl> / / Order Matters , TM . updateHostID ( ) should be called before TM . updateNormalToken ( ) , ( see CASSANDRA - 4300 ) . <nl> - if ( Gossiper . instance . usesHostId ( endpoint ) ) <nl> + UUID hostId = Gossiper . instance . getHostId ( endpoint ) ; <nl> + InetAddress existing = tokenMetadata . getEndpointForHostId ( hostId ) ; <nl> + if ( replacing & & Gossiper . instance . getEndpointStateForEndpoint ( DatabaseDescriptor . getReplaceAddress ( ) ) ! = null & & ( hostId . equals ( Gossiper . instance . getHostId ( DatabaseDescriptor . getReplaceAddress ( ) ) ) ) ) <nl> + logger . warn ( " Not updating token metadata for { } because I am replacing it " , endpoint ) ; <nl> + else <nl> { <nl> - UUID hostId = Gossiper . instance . getHostId ( endpoint ) ; <nl> - InetAddress existing = tokenMetadata . getEndpointForHostId ( hostId ) ; <nl> - if ( replacing & & Gossiper . instance . getEndpointStateForEndpoint ( DatabaseDescriptor . getReplaceAddress ( ) ) ! = null & & ( hostId . equals ( Gossiper . instance . getHostId ( DatabaseDescriptor . getReplaceAddress ( ) ) ) ) ) <nl> - logger . warn ( " Not updating token metadata for { } because I am replacing it " , endpoint ) ; <nl> - else <nl> + if ( existing ! = null & & ! existing . equals ( endpoint ) ) <nl> { <nl> - if ( existing ! = null & & ! existing . equals ( endpoint ) ) <nl> + if ( existing . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> { <nl> - if ( existing . equals ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> - { <nl> - logger . warn ( " Not updating host ID { } for { } because it ' s mine " , hostId , endpoint ) ; <nl> - tokenMetadata . removeEndpoint ( endpoint ) ; <nl> - endpointsToRemove . add ( endpoint ) ; <nl> - } <nl> - else if ( Gossiper . instance . compareEndpointStartup ( endpoint , existing ) > 0 ) <nl> - { <nl> - logger . warn ( " Host ID collision for { } between { } and { } ; { } is the new owner " , hostId , existing , endpoint , endpoint ) ; <nl> - tokenMetadata . removeEndpoint ( existing ) ; <nl> - endpointsToRemove . add ( existing ) ; <nl> - tokenMetadata . updateHostId ( hostId , endpoint ) ; <nl> - } <nl> - else <nl> - { <nl> - logger . warn ( " Host ID collision for { } between { } and { } ; ignored { } " , hostId , existing , endpoint , endpoint ) ; <nl> - tokenMetadata . removeEndpoint ( endpoint ) ; <nl> - endpointsToRemove . add ( endpoint ) ; <nl> - } <nl> + logger . warn ( " Not updating host ID { } for { } because it ' s mine " , hostId , endpoint ) ; <nl> + tokenMetadata . removeEndpoint ( endpoint ) ; <nl> + endpointsToRemove . add ( endpoint ) ; <nl> } <nl> - else <nl> + else if ( Gossiper . instance . compareEndpointStartup ( endpoint , existing ) > 0 ) <nl> + { <nl> + logger . warn ( " Host ID collision for { } between { } and { } ; { } is the new owner " , hostId , existing , endpoint , endpoint ) ; <nl> + tokenMetadata . removeEndpoint ( existing ) ; <nl> + endpointsToRemove . add ( existing ) ; <nl> tokenMetadata . updateHostId ( hostId , endpoint ) ; <nl> + } <nl> + else <nl> + { <nl> + logger . warn ( " Host ID collision for { } between { } and { } ; ignored { } " , hostId , existing , endpoint , endpoint ) ; <nl> + tokenMetadata . removeEndpoint ( endpoint ) ; <nl> + endpointsToRemove . add ( endpoint ) ; <nl> + } <nl> } <nl> + else <nl> + tokenMetadata . updateHostId ( hostId , endpoint ) ; <nl> } <nl> <nl> for ( final Token token : tokens )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 37a47f3 . . 22a3bbd 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 35 , 6 + 35 , 8 @ @ Merged from 1 . 1 : <nl> * Disallow counters in collections ( CASSANDRA - 5082 ) <nl> * cqlsh : add unit tests ( CASSANDRA - 3920 ) <nl> * fix default bloom _ filter _ fp _ chance for LeveledCompactionStrategy ( CASSANDRA - 5093 ) <nl> + Merged from 1 . 1 : <nl> + * add validation for get _ range _ slices with start _ key and end _ token ( CASSANDRA - 5089 ) <nl> <nl> <nl> 1 . 2 . 0 - rc2

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 165f76b . . 41f5cfb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 
 + * Clean up gossiper logic for old versions ( CASSANDRA - 9370 ) 
 * ant test - all results incomplete when parsed ( CASSANDRA - 9463 ) 
 * Disallow frozen < > types in function arguments and return types for 
 clarity ( CASSANDRA - 9411 ) 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 0c449ec . . e131da6 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 798 , 24 + 798 , 8 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return endpointStateMap . entrySet ( ) ; 
 } 
 
 - public boolean usesHostId ( InetAddress endpoint ) 
 - { 
 - if ( MessagingService . instance ( ) . knowsVersion ( endpoint ) ) 
 - return true ; 
 - else if ( getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . NET _ VERSION ) ! = null ) 
 - return true ; 
 - return false ; 
 - } 
 - 
 - public boolean usesVnodes ( InetAddress endpoint ) 
 - { 
 - return usesHostId ( endpoint ) & & getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . TOKENS ) ! = null ; 
 - } 
 - 
 public UUID getHostId ( InetAddress endpoint ) 
 { 
 - if ( ! usesHostId ( endpoint ) ) 
 - throw new RuntimeException ( " Host " + endpoint + " does not use new - style tokens ! " ) ; 
 return UUID . fromString ( getEndpointStateForEndpoint ( endpoint ) . getApplicationState ( ApplicationState . HOST _ ID ) . value ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index bfbf1a8 . . 8afb93f 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1825 , 8 + 1825 , 7 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 tokenMetadata . addBootstrapTokens ( tokens , endpoint ) ; 
 PendingRangeCalculatorService . instance . update ( ) ; 
 
 - if ( Gossiper . instance . usesHostId ( endpoint ) ) 
 - tokenMetadata . updateHostId ( Gossiper . instance . getHostId ( endpoint ) , endpoint ) ; 
 + tokenMetadata . updateHostId ( Gossiper . instance . getHostId ( endpoint ) , endpoint ) ; 
 } 
 
 / * * 
 @ @ - 1855 , 39 + 1854 , 36 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 
 updatePeerInfo ( endpoint ) ; 
 / / Order Matters , TM . updateHostID ( ) should be called before TM . updateNormalToken ( ) , ( see CASSANDRA - 4300 ) . 
 - if ( Gossiper . instance . usesHostId ( endpoint ) ) 
 + UUID hostId = Gossiper . instance . getHostId ( endpoint ) ; 
 + InetAddress existing = tokenMetadata . getEndpointForHostId ( hostId ) ; 
 + if ( replacing & & Gossiper . instance . getEndpointStateForEndpoint ( DatabaseDescriptor . getReplaceAddress ( ) ) ! = null & & ( hostId . equals ( Gossiper . instance . getHostId ( DatabaseDescriptor . getReplaceAddress ( ) ) ) ) ) 
 + logger . warn ( " Not updating token metadata for { } because I am replacing it " , endpoint ) ; 
 + else 
 { 
 - UUID hostId = Gossiper . instance . getHostId ( endpoint ) ; 
 - InetAddress existing = tokenMetadata . getEndpointForHostId ( hostId ) ; 
 - if ( replacing & & Gossiper . instance . getEndpointStateForEndpoint ( DatabaseDescriptor . getReplaceAddress ( ) ) ! = null & & ( hostId . equals ( Gossiper . instance . getHostId ( DatabaseDescriptor . getReplaceAddress ( ) ) ) ) ) 
 - logger . warn ( " Not updating token metadata for { } because I am replacing it " , endpoint ) ; 
 - else 
 + if ( existing ! = null & & ! existing . equals ( endpoint ) ) 
 { 
 - if ( existing ! = null & & ! existing . equals ( endpoint ) ) 
 + if ( existing . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 { 
 - if ( existing . equals ( FBUtilities . getBroadcastAddress ( ) ) ) 
 - { 
 - logger . warn ( " Not updating host ID { } for { } because it ' s mine " , hostId , endpoint ) ; 
 - tokenMetadata . removeEndpoint ( endpoint ) ; 
 - endpointsToRemove . add ( endpoint ) ; 
 - } 
 - else if ( Gossiper . instance . compareEndpointStartup ( endpoint , existing ) > 0 ) 
 - { 
 - logger . warn ( " Host ID collision for { } between { } and { } ; { } is the new owner " , hostId , existing , endpoint , endpoint ) ; 
 - tokenMetadata . removeEndpoint ( existing ) ; 
 - endpointsToRemove . add ( existing ) ; 
 - tokenMetadata . updateHostId ( hostId , endpoint ) ; 
 - } 
 - else 
 - { 
 - logger . warn ( " Host ID collision for { } between { } and { } ; ignored { } " , hostId , existing , endpoint , endpoint ) ; 
 - tokenMetadata . removeEndpoint ( endpoint ) ; 
 - endpointsToRemove . add ( endpoint ) ; 
 - } 
 + logger . warn ( " Not updating host ID { } for { } because it ' s mine " , hostId , endpoint ) ; 
 + tokenMetadata . removeEndpoint ( endpoint ) ; 
 + endpointsToRemove . add ( endpoint ) ; 
 } 
 - else 
 + else if ( Gossiper . instance . compareEndpointStartup ( endpoint , existing ) > 0 ) 
 + { 
 + logger . warn ( " Host ID collision for { } between { } and { } ; { } is the new owner " , hostId , existing , endpoint , endpoint ) ; 
 + tokenMetadata . removeEndpoint ( existing ) ; 
 + endpointsToRemove . add ( existing ) ; 
 tokenMetadata . updateHostId ( hostId , endpoint ) ; 
 + } 
 + else 
 + { 
 + logger . warn ( " Host ID collision for { } between { } and { } ; ignored { } " , hostId , existing , endpoint , endpoint ) ; 
 + tokenMetadata . removeEndpoint ( endpoint ) ; 
 + endpointsToRemove . add ( endpoint ) ; 
 + } 
 } 
 + else 
 + tokenMetadata . updateHostId ( hostId , endpoint ) ; 
 } 
 
 for ( final Token token : tokens )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 37a47f3 . . 22a3bbd 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 35 , 6 + 35 , 8 @ @ Merged from 1 . 1 : 
 * Disallow counters in collections ( CASSANDRA - 5082 ) 
 * cqlsh : add unit tests ( CASSANDRA - 3920 ) 
 * fix default bloom _ filter _ fp _ chance for LeveledCompactionStrategy ( CASSANDRA - 5093 ) 
 + Merged from 1 . 1 : 
 + * add validation for get _ range _ slices with start _ key and end _ token ( CASSANDRA - 5089 ) 
 
 
 1 . 2 . 0 - rc2
