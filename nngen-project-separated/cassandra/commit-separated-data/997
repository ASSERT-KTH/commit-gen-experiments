BLEU SCORE: 0.041961149062965476

TEST MSG: Extract LoaderOptions to be able to be used from outside
GENERATED MSG: Fix sstableloader unable to connect encrypted node

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1d8664c . . 3aa62ae 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 4 <nl> + * Extract LoaderOptions to be able to be used from outside ( CASSANDRA - 10637 ) <nl> * fix OnDiskIndexTest to properly treat empty ranges ( CASSANDRA - 11205 ) <nl> * fix TrackerTest to handle new notifications ( CASSANDRA - 11178 ) <nl> * add SASI validation for partitioner and complex columns ( CASSANDRA - 11169 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoadException . java b / src / java / org / apache / cassandra / tools / BulkLoadException . java <nl> new file mode 100644 <nl> index 0000000 . . fb5d459 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoadException . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package org . apache . cassandra . tools ; <nl> + <nl> + public class BulkLoadException extends Exception <nl> + { <nl> + <nl> + private static final long serialVersionUID = 1L ; <nl> + <nl> + public BulkLoadException ( Throwable cause ) <nl> + { <nl> + super ( cause ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> index 63caae1 . . f19924e 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java <nl> @ @ - 17 , 26 + 17 , 22 @ @ <nl> * / <nl> package org . apache . cassandra . tools ; <nl> <nl> - import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . lang . reflect . Constructor ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> import java . net . InetAddress ; <nl> - import java . net . MalformedURLException ; <nl> - import java . net . UnknownHostException ; <nl> - import java . util . * ; <nl> - <nl> - import com . google . common . collect . HashMultimap ; <nl> - import com . google . common . collect . Multimap ; <nl> - import org . apache . commons . cli . * ; <nl> + import java . util . Set ; <nl> + import javax . net . ssl . SSLContext ; <nl> <nl> import com . datastax . driver . core . AuthProvider ; <nl> import com . datastax . driver . core . JdkSSLOptions ; <nl> - import com . datastax . driver . core . PlainTextAuthProvider ; <nl> import com . datastax . driver . core . SSLOptions ; <nl> - import javax . net . ssl . SSLContext ; <nl> - import org . apache . cassandra . config . * ; <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . Multimap ; <nl> + import org . apache . commons . cli . Option ; <nl> + import org . apache . commons . cli . Options ; <nl> + <nl> + import org . apache . cassandra . config . Config ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . config . EncryptionOptions ; <nl> import org . apache . cassandra . io . sstable . SSTableLoader ; <nl> import org . apache . cassandra . security . SSLFactory ; <nl> import org . apache . cassandra . streaming . * ; <nl> @ @ - 46 , 35 + 42 , 15 @ @ import org . apache . cassandra . utils . OutputHandler ; <nl> <nl> public class BulkLoader <nl> { <nl> - private static final String TOOL _ NAME = " sstableloader " ; <nl> - private static final String VERBOSE _ OPTION = " verbose " ; <nl> - private static final String HELP _ OPTION = " help " ; <nl> - private static final String NOPROGRESS _ OPTION = " no - progress " ; <nl> - private static final String IGNORE _ NODES _ OPTION = " ignore " ; <nl> - private static final String INITIAL _ HOST _ ADDRESS _ OPTION = " nodes " ; <nl> - private static final String NATIVE _ PORT _ OPTION = " port " ; <nl> - private static final String USER _ OPTION = " username " ; <nl> - private static final String PASSWD _ OPTION = " password " ; <nl> - private static final String AUTH _ PROVIDER _ OPTION = " auth - provider " ; <nl> - private static final String THROTTLE _ MBITS = " throttle " ; <nl> - private static final String INTER _ DC _ THROTTLE _ MBITS = " inter - dc - throttle " ; <nl> - <nl> - / * client encryption options * / <nl> - private static final String SSL _ TRUSTSTORE = " truststore " ; <nl> - private static final String SSL _ TRUSTSTORE _ PW = " truststore - password " ; <nl> - private static final String SSL _ KEYSTORE = " keystore " ; <nl> - private static final String SSL _ KEYSTORE _ PW = " keystore - password " ; <nl> - private static final String SSL _ PROTOCOL = " ssl - protocol " ; <nl> - private static final String SSL _ ALGORITHM = " ssl - alg " ; <nl> - private static final String SSL _ STORE _ TYPE = " store - type " ; <nl> - private static final String SSL _ CIPHER _ SUITES = " ssl - ciphers " ; <nl> - private static final String CONNECTIONS _ PER _ HOST = " connections - per - host " ; <nl> - private static final String CONFIG _ PATH = " conf - path " ; <nl> - <nl> - public static void main ( String args [ ] ) <nl> + public static void main ( String args [ ] ) throws BulkLoadException <nl> + { <nl> + LoaderOptions options = LoaderOptions . builder ( ) . parseArgs ( args ) . build ( ) ; <nl> + load ( options ) ; <nl> + } <nl> + <nl> + public static void load ( LoaderOptions options ) throws BulkLoadException <nl> { <nl> Config . setClientMode ( true ) ; <nl> - LoaderOptions options = LoaderOptions . parseArgs ( args ) . validateArguments ( ) ; <nl> OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; <nl> SSTableLoader loader = new SSTableLoader ( <nl> options . directory , <nl> @ @ - 86 , 8 + 62 , 8 @ @ public class BulkLoader <nl> options . sslStoragePort , <nl> options . serverEncOptions , <nl> buildSSLOptions ( ( EncryptionOptions . ClientEncryptionOptions ) options . encOptions ) ) , <nl> - handler , <nl> - options . connectionsPerHost ) ; <nl> + handler , <nl> + options . connectionsPerHost ) ; <nl> DatabaseDescriptor . setStreamThroughputOutboundMegabitsPerSec ( options . throttle ) ; <nl> DatabaseDescriptor . setInterDCStreamThroughputOutboundMegabitsPerSec ( options . interDcThrottle ) ; <nl> StreamResultFuture future = null ; <nl> @ @ - 110 , 9 + 86 , 11 @ @ public class BulkLoader <nl> JVMStabilityInspector . inspectThrowable ( e ) ; <nl> System . err . println ( e . getMessage ( ) ) ; <nl> if ( e . getCause ( ) ! = null ) <nl> + { <nl> System . err . println ( e . getCause ( ) ) ; <nl> + } <nl> e . printStackTrace ( System . err ) ; <nl> - System . exit ( 1 ) ; <nl> + throw new BulkLoadException ( e ) ; <nl> } <nl> <nl> try <nl> @ @ - 120 , 18 + 98 , 20 @ @ public class BulkLoader <nl> future . get ( ) ; <nl> <nl> if ( ! options . noProgress ) <nl> + { <nl> indicator . printSummary ( options . connectionsPerHost ) ; <nl> + } <nl> <nl> / / Give sockets time to gracefully close <nl> Thread . sleep ( 1000 ) ; <nl> - System . exit ( 0 ) ; / / We need that to stop non daemonized threads <nl> + / / System . exit ( 0 ) ; / / We need that to stop non daemonized threads <nl> } <nl> catch ( Exception e ) <nl> { <nl> System . err . println ( " Streaming to the following hosts failed : " ) ; <nl> System . err . println ( loader . getFailedHosts ( ) ) ; <nl> e . printStackTrace ( System . err ) ; <nl> - System . exit ( 1 ) ; <nl> + throw new BulkLoadException ( e ) ; <nl> } <nl> } <nl> <nl> @ @ - 196 , 14 + 176 , 16 @ @ public class BulkLoader <nl> long current = 0 ; <nl> int completed = 0 ; <nl> <nl> - if ( progressInfo ! = null & & session . peer . equals ( progressInfo . peer ) & & ( session . sessionIndex = = progressInfo . sessionIndex ) ) <nl> + if ( progressInfo ! = null & & session . peer . equals ( progressInfo . peer ) & & session . sessionIndex = = progressInfo . sessionIndex ) <nl> { <nl> session . updateProgress ( progressInfo ) ; <nl> } <nl> for ( ProgressInfo progress : session . getSendingFiles ( ) ) <nl> { <nl> if ( progress . isCompleted ( ) ) <nl> + { <nl> completed + + ; <nl> + } <nl> current + = progress . currentBytes ; <nl> } <nl> totalProgress + = current ; <nl> @ @ - 215 , 7 + 197 , 9 @ @ public class BulkLoader <nl> sb . append ( " " ) . append ( String . format ( " % - 3d " , size = = 0 ? 100L : current * 100L / size ) ) . append ( " % " ) ; <nl> <nl> if ( updateTotalFiles ) <nl> + { <nl> totalFiles + = session . getTotalFilesToSend ( ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 225 , 9 + 209 , 11 @ @ public class BulkLoader <nl> <nl> sb . append ( " total : " ) . append ( totalSize = = 0 ? 100L : totalProgress * 100L / totalSize ) . append ( " % " ) ; <nl> sb . append ( String . format ( " % - 3d " , mbPerSec ( deltaProgress , deltaTime ) ) ) . append ( " MB / s " ) ; <nl> - int average = mbPerSec ( totalProgress , ( time - start ) ) ; <nl> + int average = mbPerSec ( totalProgress , time - start ) ; <nl> if ( average > peak ) <nl> + { <nl> peak = average ; <nl> + } <nl> sb . append ( " ( avg : " ) . append ( average ) . append ( " MB / s ) " ) ; <nl> <nl> System . out . print ( sb . toString ( ) ) ; <nl> @ @ - 236 , 15 + 222 , 15 @ @ public class BulkLoader <nl> <nl> private int mbPerSec ( long bytes , long timeInNano ) <nl> { <nl> - double bytesPerNano = ( ( double ) bytes ) / timeInNano ; <nl> - return ( int ) ( ( bytesPerNano * 1000 * 1000 * 1000 ) / ( 1024 * 1024 ) ) ; <nl> + double bytesPerNano = ( double ) bytes / timeInNano ; <nl> + return ( int ) ( bytesPerNano * 1000 * 1000 * 1000 / ( 1024 * 1024 ) ) ; <nl> } <nl> <nl> private void printSummary ( int connectionsPerHost ) <nl> { <nl> long end = System . nanoTime ( ) ; <nl> - long durationMS = ( ( end - start ) / ( 1000000 ) ) ; <nl> - int average = mbPerSec ( lastProgress , ( end - start ) ) ; <nl> + long durationMS = ( end - start ) / 1000000 ; <nl> + int average = mbPerSec ( lastProgress , end - start ) ; <nl> StringBuilder sb = new StringBuilder ( ) ; <nl> sb . append ( " \ nSummary statistics : \ n " ) ; <nl> sb . append ( String . format ( " % - 30s : % - 10d % n " , " Connections per host : " , connectionsPerHost ) ) ; <nl> @ @ - 261 , 7 + 247 , 9 @ @ public class BulkLoader <nl> { <nl> <nl> if ( ! clientEncryptionOptions . enabled ) <nl> + { <nl> return null ; <nl> + } <nl> <nl> SSLContext sslContext ; <nl> try <nl> @ @ - 296 , 7 + 284 , 7 @ @ public class BulkLoader <nl> super ( hosts , port , authProvider , sslOptions ) ; <nl> this . storagePort = storagePort ; <nl> this . sslStoragePort = sslStoragePort ; <nl> - this . serverEncOptions = serverEncryptionOptions ; <nl> + serverEncOptions = serverEncryptionOptions ; <nl> } <nl> <nl> @ Override <nl> @ @ - 306 , 327 + 294 , 6 @ @ public class BulkLoader <nl> } <nl> } <nl> <nl> - static class LoaderOptions <nl> - { <nl> - public final File directory ; <nl> - <nl> - public boolean debug ; <nl> - public boolean verbose ; <nl> - public boolean noProgress ; <nl> - public int nativePort = 9042 ; <nl> - public String user ; <nl> - public String passwd ; <nl> - public String authProviderName ; <nl> - public AuthProvider authProvider ; <nl> - public int throttle = 0 ; <nl> - public int interDcThrottle = 0 ; <nl> - public int storagePort ; <nl> - public int sslStoragePort ; <nl> - public EncryptionOptions encOptions = new EncryptionOptions . ClientEncryptionOptions ( ) ; <nl> - public int connectionsPerHost = 1 ; <nl> - public EncryptionOptions . ServerEncryptionOptions serverEncOptions = new EncryptionOptions . ServerEncryptionOptions ( ) ; <nl> - <nl> - public final Set < InetAddress > hosts = new HashSet < > ( ) ; <nl> - public final Set < InetAddress > ignores = new HashSet < > ( ) ; <nl> - <nl> - LoaderOptions ( File directory ) <nl> - { <nl> - this . directory = directory ; <nl> - } <nl> - <nl> - public static LoaderOptions parseArgs ( String cmdArgs [ ] ) <nl> - { <nl> - CommandLineParser parser = new GnuParser ( ) ; <nl> - CmdLineOptions options = getCmdLineOptions ( ) ; <nl> - try <nl> - { <nl> - CommandLine cmd = parser . parse ( options , cmdArgs , false ) ; <nl> - <nl> - if ( cmd . hasOption ( HELP _ OPTION ) ) <nl> - { <nl> - printUsage ( options ) ; <nl> - System . exit ( 0 ) ; <nl> - } <nl> - <nl> - String [ ] args = cmd . getArgs ( ) ; <nl> - if ( args . length = = 0 ) <nl> - { <nl> - System . err . println ( " Missing sstable directory argument " ) ; <nl> - printUsage ( options ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - <nl> - if ( args . length > 1 ) <nl> - { <nl> - System . err . println ( " Too many arguments " ) ; <nl> - printUsage ( options ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - <nl> - String dirname = args [ 0 ] ; <nl> - File dir = new File ( dirname ) ; <nl> - <nl> - if ( ! dir . exists ( ) ) <nl> - errorMsg ( " Unknown directory : " + dirname , options ) ; <nl> - <nl> - if ( ! dir . isDirectory ( ) ) <nl> - errorMsg ( dirname + " is not a directory " , options ) ; <nl> - <nl> - LoaderOptions opts = new LoaderOptions ( dir ) ; <nl> - <nl> - opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; <nl> - opts . noProgress = cmd . hasOption ( NOPROGRESS _ OPTION ) ; <nl> - <nl> - if ( cmd . hasOption ( NATIVE _ PORT _ OPTION ) ) <nl> - opts . nativePort = Integer . parseInt ( cmd . getOptionValue ( NATIVE _ PORT _ OPTION ) ) ; <nl> - <nl> - if ( cmd . hasOption ( USER _ OPTION ) ) <nl> - opts . user = cmd . getOptionValue ( USER _ OPTION ) ; <nl> - <nl> - if ( cmd . hasOption ( PASSWD _ OPTION ) ) <nl> - opts . passwd = cmd . getOptionValue ( PASSWD _ OPTION ) ; <nl> - <nl> - if ( cmd . hasOption ( AUTH _ PROVIDER _ OPTION ) ) <nl> - opts . authProviderName = cmd . getOptionValue ( AUTH _ PROVIDER _ OPTION ) ; <nl> - <nl> - if ( cmd . hasOption ( INITIAL _ HOST _ ADDRESS _ OPTION ) ) <nl> - { <nl> - String [ ] nodes = cmd . getOptionValue ( INITIAL _ HOST _ ADDRESS _ OPTION ) . split ( " , " ) ; <nl> - try <nl> - { <nl> - for ( String node : nodes ) <nl> - { <nl> - opts . hosts . add ( InetAddress . getByName ( node . trim ( ) ) ) ; <nl> - } <nl> - } <nl> - catch ( UnknownHostException e ) <nl> - { <nl> - errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; <nl> - } <nl> - <nl> - } <nl> - else <nl> - { <nl> - System . err . println ( " Initial hosts must be specified ( - d ) " ) ; <nl> - printUsage ( options ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( IGNORE _ NODES _ OPTION ) ) <nl> - { <nl> - String [ ] nodes = cmd . getOptionValue ( IGNORE _ NODES _ OPTION ) . split ( " , " ) ; <nl> - try <nl> - { <nl> - for ( String node : nodes ) <nl> - { <nl> - opts . ignores . add ( InetAddress . getByName ( node . trim ( ) ) ) ; <nl> - } <nl> - } <nl> - catch ( UnknownHostException e ) <nl> - { <nl> - errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; <nl> - } <nl> - } <nl> - <nl> - if ( cmd . hasOption ( CONNECTIONS _ PER _ HOST ) ) <nl> - opts . connectionsPerHost = Integer . parseInt ( cmd . getOptionValue ( CONNECTIONS _ PER _ HOST ) ) ; <nl> - <nl> - / / try to load config file first , so that values can be rewritten with other option values . <nl> - / / otherwise use default config . <nl> - Config config ; <nl> - if ( cmd . hasOption ( CONFIG _ PATH ) ) <nl> - { <nl> - File configFile = new File ( cmd . getOptionValue ( CONFIG _ PATH ) ) ; <nl> - if ( ! configFile . exists ( ) ) <nl> - { <nl> - errorMsg ( " Config file not found " , options ) ; <nl> - } <nl> - config = new YamlConfigurationLoader ( ) . loadConfig ( configFile . toURI ( ) . toURL ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - config = new Config ( ) ; <nl> - / / unthrottle stream by default <nl> - config . stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; <nl> - config . inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; <nl> - } <nl> - opts . storagePort = config . storage _ port ; <nl> - opts . sslStoragePort = config . ssl _ storage _ port ; <nl> - opts . throttle = config . stream _ throughput _ outbound _ megabits _ per _ sec ; <nl> - opts . interDcThrottle = config . inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec ; <nl> - opts . encOptions = config . client _ encryption _ options ; <nl> - opts . serverEncOptions = config . server _ encryption _ options ; <nl> - <nl> - if ( cmd . hasOption ( THROTTLE _ MBITS ) ) <nl> - { <nl> - opts . throttle = Integer . parseInt ( cmd . getOptionValue ( THROTTLE _ MBITS ) ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( INTER _ DC _ THROTTLE _ MBITS ) ) <nl> - { <nl> - opts . interDcThrottle = Integer . parseInt ( cmd . getOptionValue ( INTER _ DC _ THROTTLE _ MBITS ) ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) <nl> - { <nl> - opts . encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ TRUSTSTORE _ PW ) ) <nl> - { <nl> - opts . encOptions . truststore _ password = cmd . getOptionValue ( SSL _ TRUSTSTORE _ PW ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ KEYSTORE ) ) <nl> - { <nl> - opts . encOptions . keystore = cmd . getOptionValue ( SSL _ KEYSTORE ) ; <nl> - / / if a keystore was provided , lets assume we ' ll need to use it <nl> - opts . encOptions . require _ client _ auth = true ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ KEYSTORE _ PW ) ) <nl> - { <nl> - opts . encOptions . keystore _ password = cmd . getOptionValue ( SSL _ KEYSTORE _ PW ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ PROTOCOL ) ) <nl> - { <nl> - opts . encOptions . protocol = cmd . getOptionValue ( SSL _ PROTOCOL ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ ALGORITHM ) ) <nl> - { <nl> - opts . encOptions . algorithm = cmd . getOptionValue ( SSL _ ALGORITHM ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ STORE _ TYPE ) ) <nl> - { <nl> - opts . encOptions . store _ type = cmd . getOptionValue ( SSL _ STORE _ TYPE ) ; <nl> - } <nl> - <nl> - if ( cmd . hasOption ( SSL _ CIPHER _ SUITES ) ) <nl> - { <nl> - opts . encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; <nl> - } <nl> - <nl> - return opts ; <nl> - } <nl> - catch ( ParseException | ConfigurationException | MalformedURLException e ) <nl> - { <nl> - errorMsg ( e . getMessage ( ) , options ) ; <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - public LoaderOptions validateArguments ( ) <nl> - { <nl> - / / Both username and password need to be provided <nl> - if ( ( user ! = null ) ! = ( passwd ! = null ) ) <nl> - errorMsg ( " Username and password must both be provided " , getCmdLineOptions ( ) ) ; <nl> - <nl> - if ( user ! = null ) <nl> - { <nl> - / / Support for 3rd party auth providers that support plain text credentials . <nl> - / / In this case the auth provider must provide a constructor of the form : <nl> - / / <nl> - / / public MyAuthProvider ( String username , String password ) <nl> - if ( authProviderName ! = null ) <nl> - { <nl> - try <nl> - { <nl> - Class authProviderClass = Class . forName ( authProviderName ) ; <nl> - Constructor constructor = authProviderClass . getConstructor ( String . class , String . class ) ; <nl> - authProvider = ( AuthProvider ) constructor . newInstance ( user , passwd ) ; <nl> - } <nl> - catch ( ClassNotFoundException e ) <nl> - { <nl> - errorMsg ( " Unknown auth provider : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - errorMsg ( " Auth provider does not support plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> - } <nl> - catch ( InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e ) <nl> - { <nl> - errorMsg ( " Could not create auth provider with plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - / / If a 3rd party auth provider wasn ' t provided use the driver plain text provider <nl> - authProvider = new PlainTextAuthProvider ( user , passwd ) ; <nl> - } <nl> - } <nl> - / / Alternate support for 3rd party auth providers that don ' t use plain text credentials . <nl> - / / In this case the auth provider must provide a nullary constructor of the form : <nl> - / / <nl> - / / public MyAuthProvider ( ) <nl> - else if ( authProviderName ! = null ) <nl> - { <nl> - try <nl> - { <nl> - authProvider = ( AuthProvider ) Class . forName ( authProviderName ) . newInstance ( ) ; <nl> - } <nl> - catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) <nl> - { <nl> - errorMsg ( " Unknown auth provider " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - return this ; <nl> - } <nl> - <nl> - private static void errorMsg ( String msg , CmdLineOptions options ) <nl> - { <nl> - System . err . println ( msg ) ; <nl> - printUsage ( options ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - <nl> - private static CmdLineOptions getCmdLineOptions ( ) <nl> - { <nl> - CmdLineOptions options = new CmdLineOptions ( ) ; <nl> - options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; <nl> - options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> - options . addOption ( null , NOPROGRESS _ OPTION , " don ' t display progress " ) ; <nl> - options . addOption ( " i " , IGNORE _ NODES _ OPTION , " NODES " , " don ' t stream to this ( comma separated ) list of nodes " ) ; <nl> - options . addOption ( " d " , INITIAL _ HOST _ ADDRESS _ OPTION , " initial hosts " , " Required . try to connect to these hosts ( comma separated ) initially for ring information " ) ; <nl> - options . addOption ( " p " , NATIVE _ PORT _ OPTION , " rpc port " , " port used for native connection ( default 9042 ) " ) ; <nl> - options . addOption ( " t " , THROTTLE _ MBITS , " throttle " , " throttle speed in Mbits ( default unlimited ) " ) ; <nl> - options . addOption ( " idct " , INTER _ DC _ THROTTLE _ MBITS , " inter - dc - throttle " , " inter - datacenter throttle speed in Mbits ( default unlimited ) " ) ; <nl> - options . addOption ( " u " , USER _ OPTION , " username " , " username for cassandra authentication " ) ; <nl> - options . addOption ( " pw " , PASSWD _ OPTION , " password " , " password for cassandra authentication " ) ; <nl> - options . addOption ( " ap " , AUTH _ PROVIDER _ OPTION , " auth provider " , " custom AuthProvider class name for cassandra authentication " ) ; <nl> - options . addOption ( " cph " , CONNECTIONS _ PER _ HOST , " connectionsPerHost " , " number of concurrent connections - per - host . " ) ; <nl> - / / ssl connection - related options <nl> - options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " Client SSL : full path to truststore " ) ; <nl> - options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " Client SSL : password of the truststore " ) ; <nl> - options . addOption ( " ks " , SSL _ KEYSTORE , " KEYSTORE " , " Client SSL : full path to keystore " ) ; <nl> - options . addOption ( " kspw " , SSL _ KEYSTORE _ PW , " KEYSTORE - PASSWORD " , " Client SSL : password of the keystore " ) ; <nl> - options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " Client SSL : connections protocol to use ( default : TLS ) " ) ; <nl> - options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " Client SSL : algorithm ( default : SunX509 ) " ) ; <nl> - options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " Client SSL : type of store " ) ; <nl> - options . addOption ( " ciphers " , SSL _ CIPHER _ SUITES , " CIPHER - SUITES " , " Client SSL : comma - separated list of encryption suites to use " ) ; <nl> - options . addOption ( " f " , CONFIG _ PATH , " path to config file " , " cassandra . yaml file path for streaming throughput and client / server SSL . " ) ; <nl> - return options ; <nl> - } <nl> - <nl> - public static void printUsage ( Options options ) <nl> - { <nl> - String usage = String . format ( " % s [ options ] < dir _ path > " , TOOL _ NAME ) ; <nl> - String header = System . lineSeparator ( ) + <nl> - " Bulk load the sstables found in the directory < dir _ path > to the configured cluster . " + <nl> - " The parent directories of < dir _ path > are used as the target keyspace / table name . " + <nl> - " So for instance , to load an sstable named Standard1 - g - 1 - Data . db into Keyspace1 / Standard1 , " + <nl> - " you will need to have the files Standard1 - g - 1 - Data . db and Standard1 - g - 1 - Index . db into a directory / path / to / Keyspace1 / Standard1 / . " ; <nl> - String footer = System . lineSeparator ( ) + <nl> - " You can provide cassandra . yaml file with - f command line option to set up streaming throughput , client and server encryption options . " + <nl> - " Only stream _ throughput _ outbound _ megabits _ per _ sec , inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec , server _ encryption _ options and client _ encryption _ options are read from yaml . " + <nl> - " You can override options read from cassandra . yaml with corresponding command line options . " ; <nl> - new HelpFormatter ( ) . printHelp ( usage , header , options , footer ) ; <nl> - } <nl> - } <nl> - <nl> public static class CmdLineOptions extends Options <nl> { <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / tools / LoaderOptions . java b / src / java / org / apache / cassandra / tools / LoaderOptions . java <nl> new file mode 100644 <nl> index 0000000 . . 6a6e575 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / tools / LoaderOptions . java <nl> @ @ - 0 , 0 + 1 , 537 @ @ <nl> + package org . apache . cassandra . tools ; <nl> + <nl> + import java . io . File ; <nl> + import java . lang . reflect . Constructor ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . net . * ; <nl> + import java . util . HashSet ; <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . cassandra . config . * ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . tools . BulkLoader . CmdLineOptions ; <nl> + <nl> + import com . datastax . driver . core . AuthProvider ; <nl> + import com . datastax . driver . core . PlainTextAuthProvider ; <nl> + import org . apache . commons . cli . * ; <nl> + <nl> + public class LoaderOptions <nl> + { <nl> + <nl> + public static final String HELP _ OPTION = " help " ; <nl> + public static final String VERBOSE _ OPTION = " verbose " ; <nl> + public static final String NOPROGRESS _ OPTION = " no - progress " ; <nl> + public static final String NATIVE _ PORT _ OPTION = " port " ; <nl> + public static final String USER _ OPTION = " username " ; <nl> + public static final String PASSWD _ OPTION = " password " ; <nl> + public static final String AUTH _ PROVIDER _ OPTION = " auth - provider " ; <nl> + public static final String INITIAL _ HOST _ ADDRESS _ OPTION = " nodes " ; <nl> + public static final String IGNORE _ NODES _ OPTION = " ignore " ; <nl> + public static final String CONNECTIONS _ PER _ HOST = " connections - per - host " ; <nl> + public static final String CONFIG _ PATH = " conf - path " ; <nl> + public static final String THROTTLE _ MBITS = " throttle " ; <nl> + public static final String INTER _ DC _ THROTTLE _ MBITS = " inter - dc - throttle " ; <nl> + public static final String TOOL _ NAME = " sstableloader " ; <nl> + <nl> + / * client encryption options * / <nl> + public static final String SSL _ TRUSTSTORE = " truststore " ; <nl> + public static final String SSL _ TRUSTSTORE _ PW = " truststore - password " ; <nl> + public static final String SSL _ KEYSTORE = " keystore " ; <nl> + public static final String SSL _ KEYSTORE _ PW = " keystore - password " ; <nl> + public static final String SSL _ PROTOCOL = " ssl - protocol " ; <nl> + public static final String SSL _ ALGORITHM = " ssl - alg " ; <nl> + public static final String SSL _ STORE _ TYPE = " store - type " ; <nl> + public static final String SSL _ CIPHER _ SUITES = " ssl - ciphers " ; <nl> + <nl> + public final File directory ; <nl> + public final boolean debug ; <nl> + public final boolean verbose ; <nl> + public final boolean noProgress ; <nl> + public final int nativePort ; <nl> + public final String user ; <nl> + public final String passwd ; <nl> + public final AuthProvider authProvider ; <nl> + public final int throttle ; <nl> + public final int interDcThrottle ; <nl> + public final int storagePort ; <nl> + public final int sslStoragePort ; <nl> + public final EncryptionOptions encOptions ; <nl> + public final int connectionsPerHost ; <nl> + public final EncryptionOptions . ServerEncryptionOptions serverEncOptions ; <nl> + public final Set < InetAddress > hosts ; <nl> + public final Set < InetAddress > ignores = new HashSet < > ( ) ; <nl> + <nl> + LoaderOptions ( Builder builder ) <nl> + { <nl> + directory = builder . directory ; <nl> + debug = builder . debug ; <nl> + verbose = builder . verbose ; <nl> + noProgress = builder . noProgress ; <nl> + nativePort = builder . nativePort ; <nl> + user = builder . user ; <nl> + passwd = builder . passwd ; <nl> + authProvider = builder . authProvider ; <nl> + throttle = builder . throttle ; <nl> + interDcThrottle = builder . interDcThrottle ; <nl> + storagePort = builder . storagePort ; <nl> + sslStoragePort = builder . sslStoragePort ; <nl> + encOptions = builder . encOptions ; <nl> + connectionsPerHost = builder . connectionsPerHost ; <nl> + serverEncOptions = builder . serverEncOptions ; <nl> + hosts = builder . hosts ; <nl> + } <nl> + <nl> + static class Builder <nl> + { <nl> + File directory ; <nl> + boolean debug ; <nl> + boolean verbose ; <nl> + boolean noProgress ; <nl> + int nativePort = 9042 ; <nl> + String user ; <nl> + String passwd ; <nl> + String authProviderName ; <nl> + AuthProvider authProvider ; <nl> + int throttle = 0 ; <nl> + int interDcThrottle = 0 ; <nl> + int storagePort ; <nl> + int sslStoragePort ; <nl> + EncryptionOptions encOptions = new EncryptionOptions . ClientEncryptionOptions ( ) ; <nl> + int connectionsPerHost = 1 ; <nl> + EncryptionOptions . ServerEncryptionOptions serverEncOptions = new EncryptionOptions . ServerEncryptionOptions ( ) ; <nl> + Set < InetAddress > hosts = new HashSet < > ( ) ; <nl> + Set < InetAddress > ignores = new HashSet < > ( ) ; <nl> + <nl> + Builder ( ) <nl> + { <nl> + / / <nl> + } <nl> + <nl> + public LoaderOptions build ( ) <nl> + { <nl> + constructAuthProvider ( ) ; <nl> + return new LoaderOptions ( this ) ; <nl> + } <nl> + <nl> + public Builder directory ( File directory ) <nl> + { <nl> + this . directory = directory ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder debug ( boolean debug ) <nl> + { <nl> + this . debug = debug ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder verbose ( boolean verbose ) <nl> + { <nl> + this . verbose = verbose ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder noProgress ( boolean noProgress ) <nl> + { <nl> + this . noProgress = noProgress ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder nativePort ( int nativePort ) <nl> + { <nl> + this . nativePort = nativePort ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder user ( String user ) <nl> + { <nl> + this . user = user ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder password ( String passwd ) <nl> + { <nl> + this . passwd = passwd ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder authProvider ( AuthProvider authProvider ) <nl> + { <nl> + this . authProvider = authProvider ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder throttle ( int throttle ) <nl> + { <nl> + this . throttle = throttle ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder interDcThrottle ( int interDcThrottle ) <nl> + { <nl> + this . interDcThrottle = interDcThrottle ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder storagePort ( int storagePort ) <nl> + { <nl> + this . storagePort = storagePort ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder sslStoragePort ( int sslStoragePort ) <nl> + { <nl> + this . sslStoragePort = sslStoragePort ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder encOptions ( EncryptionOptions encOptions ) <nl> + { <nl> + this . encOptions = encOptions ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder connectionsPerHost ( int connectionsPerHost ) <nl> + { <nl> + this . connectionsPerHost = connectionsPerHost ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder serverEncOptions ( EncryptionOptions . ServerEncryptionOptions serverEncOptions ) <nl> + { <nl> + this . serverEncOptions = serverEncOptions ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder hosts ( Set < InetAddress > hosts ) <nl> + { <nl> + this . hosts = hosts ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder host ( InetAddress host ) <nl> + { <nl> + hosts . add ( host ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder ignore ( Set < InetAddress > ignores ) <nl> + { <nl> + this . ignores = ignores ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder ignore ( InetAddress ignore ) <nl> + { <nl> + ignores . add ( ignore ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Builder parseArgs ( String cmdArgs [ ] ) <nl> + { <nl> + CommandLineParser parser = new GnuParser ( ) ; <nl> + CmdLineOptions options = getCmdLineOptions ( ) ; <nl> + try <nl> + { <nl> + CommandLine cmd = parser . parse ( options , cmdArgs , false ) ; <nl> + <nl> + if ( cmd . hasOption ( HELP _ OPTION ) ) <nl> + { <nl> + printUsage ( options ) ; <nl> + System . exit ( 0 ) ; <nl> + } <nl> + <nl> + String [ ] args = cmd . getArgs ( ) ; <nl> + if ( args . length = = 0 ) <nl> + { <nl> + System . err . println ( " Missing sstable directory argument " ) ; <nl> + printUsage ( options ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + if ( args . length > 1 ) <nl> + { <nl> + System . err . println ( " Too many arguments " ) ; <nl> + printUsage ( options ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + String dirname = args [ 0 ] ; <nl> + File dir = new File ( dirname ) ; <nl> + <nl> + if ( ! dir . exists ( ) ) <nl> + { <nl> + errorMsg ( " Unknown directory : " + dirname , options ) ; <nl> + } <nl> + <nl> + if ( ! dir . isDirectory ( ) ) <nl> + { <nl> + errorMsg ( dirname + " is not a directory " , options ) ; <nl> + } <nl> + <nl> + directory = dir ; <nl> + <nl> + verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; <nl> + noProgress = cmd . hasOption ( NOPROGRESS _ OPTION ) ; <nl> + <nl> + if ( cmd . hasOption ( NATIVE _ PORT _ OPTION ) ) <nl> + { <nl> + nativePort = Integer . parseInt ( cmd . getOptionValue ( NATIVE _ PORT _ OPTION ) ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( USER _ OPTION ) ) <nl> + { <nl> + user = cmd . getOptionValue ( USER _ OPTION ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( PASSWD _ OPTION ) ) <nl> + { <nl> + passwd = cmd . getOptionValue ( PASSWD _ OPTION ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( AUTH _ PROVIDER _ OPTION ) ) <nl> + { <nl> + authProviderName = cmd . getOptionValue ( AUTH _ PROVIDER _ OPTION ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( INITIAL _ HOST _ ADDRESS _ OPTION ) ) <nl> + { <nl> + String [ ] nodes = cmd . getOptionValue ( INITIAL _ HOST _ ADDRESS _ OPTION ) . split ( " , " ) ; <nl> + try <nl> + { <nl> + for ( String node : nodes ) <nl> + { <nl> + hosts . add ( InetAddress . getByName ( node . trim ( ) ) ) ; <nl> + } <nl> + } catch ( UnknownHostException e ) <nl> + { <nl> + errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; <nl> + } <nl> + <nl> + } else <nl> + { <nl> + System . err . println ( " Initial hosts must be specified ( - d ) " ) ; <nl> + printUsage ( options ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( IGNORE _ NODES _ OPTION ) ) <nl> + { <nl> + String [ ] nodes = cmd . getOptionValue ( IGNORE _ NODES _ OPTION ) . split ( " , " ) ; <nl> + try <nl> + { <nl> + for ( String node : nodes ) <nl> + { <nl> + ignores . add ( InetAddress . getByName ( node . trim ( ) ) ) ; <nl> + } <nl> + } catch ( UnknownHostException e ) <nl> + { <nl> + errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; <nl> + } <nl> + } <nl> + <nl> + if ( cmd . hasOption ( CONNECTIONS _ PER _ HOST ) ) <nl> + { <nl> + connectionsPerHost = Integer . parseInt ( cmd . getOptionValue ( CONNECTIONS _ PER _ HOST ) ) ; <nl> + } <nl> + <nl> + / / try to load config file first , so that values can be <nl> + / / rewritten with other option values . <nl> + / / otherwise use default config . <nl> + Config config ; <nl> + if ( cmd . hasOption ( CONFIG _ PATH ) ) <nl> + { <nl> + File configFile = new File ( cmd . getOptionValue ( CONFIG _ PATH ) ) ; <nl> + if ( ! configFile . exists ( ) ) <nl> + { <nl> + errorMsg ( " Config file not found " , options ) ; <nl> + } <nl> + config = new YamlConfigurationLoader ( ) . loadConfig ( configFile . toURI ( ) . toURL ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + config = new Config ( ) ; <nl> + / / unthrottle stream by default <nl> + config . stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; <nl> + config . inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; <nl> + } <nl> + storagePort = config . storage _ port ; <nl> + sslStoragePort = config . ssl _ storage _ port ; <nl> + throttle = config . stream _ throughput _ outbound _ megabits _ per _ sec ; <nl> + encOptions = config . client _ encryption _ options ; <nl> + serverEncOptions = config . server _ encryption _ options ; <nl> + <nl> + if ( cmd . hasOption ( THROTTLE _ MBITS ) ) <nl> + { <nl> + throttle = Integer . parseInt ( cmd . getOptionValue ( THROTTLE _ MBITS ) ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( INTER _ DC _ THROTTLE _ MBITS ) ) <nl> + { <nl> + interDcThrottle = Integer . parseInt ( cmd . getOptionValue ( INTER _ DC _ THROTTLE _ MBITS ) ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) <nl> + { <nl> + encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ TRUSTSTORE _ PW ) ) <nl> + { <nl> + encOptions . truststore _ password = cmd . getOptionValue ( SSL _ TRUSTSTORE _ PW ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ KEYSTORE ) ) <nl> + { <nl> + encOptions . keystore = cmd . getOptionValue ( SSL _ KEYSTORE ) ; <nl> + / / if a keystore was provided , lets assume we ' ll need to use <nl> + / / it <nl> + encOptions . require _ client _ auth = true ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ KEYSTORE _ PW ) ) <nl> + { <nl> + encOptions . keystore _ password = cmd . getOptionValue ( SSL _ KEYSTORE _ PW ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ PROTOCOL ) ) <nl> + { <nl> + encOptions . protocol = cmd . getOptionValue ( SSL _ PROTOCOL ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ ALGORITHM ) ) <nl> + { <nl> + encOptions . algorithm = cmd . getOptionValue ( SSL _ ALGORITHM ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ STORE _ TYPE ) ) <nl> + { <nl> + encOptions . store _ type = cmd . getOptionValue ( SSL _ STORE _ TYPE ) ; <nl> + } <nl> + <nl> + if ( cmd . hasOption ( SSL _ CIPHER _ SUITES ) ) <nl> + { <nl> + encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; <nl> + } <nl> + <nl> + return this ; <nl> + } <nl> + catch ( ParseException | ConfigurationException | MalformedURLException e ) <nl> + { <nl> + errorMsg ( e . getMessage ( ) , options ) ; <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + private void constructAuthProvider ( ) <nl> + { <nl> + / / Both username and password need to be provided <nl> + if ( ( user ! = null ) ! = ( passwd ! = null ) ) <nl> + errorMsg ( " Username and password must both be provided " , getCmdLineOptions ( ) ) ; <nl> + <nl> + if ( user ! = null ) <nl> + { <nl> + / / Support for 3rd party auth providers that support plain text credentials . <nl> + / / In this case the auth provider must provide a constructor of the form : <nl> + / / <nl> + / / public MyAuthProvider ( String username , String password ) <nl> + if ( authProviderName ! = null ) <nl> + { <nl> + try <nl> + { <nl> + Class authProviderClass = Class . forName ( authProviderName ) ; <nl> + Constructor constructor = authProviderClass . getConstructor ( String . class , String . class ) ; <nl> + authProvider = ( AuthProvider ) constructor . newInstance ( user , passwd ) ; <nl> + } <nl> + catch ( ClassNotFoundException e ) <nl> + { <nl> + errorMsg ( " Unknown auth provider : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> + } <nl> + catch ( NoSuchMethodException e ) <nl> + { <nl> + errorMsg ( " Auth provider does not support plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> + } <nl> + catch ( InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e ) <nl> + { <nl> + errorMsg ( " Could not create auth provider with plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + / / If a 3rd party auth provider wasn ' t provided use the driver plain text provider <nl> + this . authProvider = new PlainTextAuthProvider ( user , passwd ) ; <nl> + } <nl> + } <nl> + / / Alternate support for 3rd party auth providers that don ' t use plain text credentials . <nl> + / / In this case the auth provider must provide a nullary constructor of the form : <nl> + / / <nl> + / / public MyAuthProvider ( ) <nl> + else if ( authProviderName ! = null ) <nl> + { <nl> + try <nl> + { <nl> + authProvider = ( AuthProvider ) Class . forName ( authProviderName ) . newInstance ( ) ; <nl> + } <nl> + catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) <nl> + { <nl> + errorMsg ( " Unknown auth provider : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static Builder builder ( ) <nl> + { <nl> + return new Builder ( ) ; <nl> + } <nl> + <nl> + private static void errorMsg ( String msg , CmdLineOptions options ) <nl> + { <nl> + System . err . println ( msg ) ; <nl> + printUsage ( options ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> + private static CmdLineOptions getCmdLineOptions ( ) <nl> + { <nl> + CmdLineOptions options = new CmdLineOptions ( ) ; <nl> + options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; <nl> + options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; <nl> + options . addOption ( null , NOPROGRESS _ OPTION , " don ' t display progress " ) ; <nl> + options . addOption ( " i " , IGNORE _ NODES _ OPTION , " NODES " , " don ' t stream to this ( comma separated ) list of nodes " ) ; <nl> + options . addOption ( " d " , INITIAL _ HOST _ ADDRESS _ OPTION , " initial hosts " , " Required . try to connect to these hosts ( comma separated ) initially for ring information " ) ; <nl> + options . addOption ( " p " , NATIVE _ PORT _ OPTION , " rpc port " , " port used for native connection ( default 9042 ) " ) ; <nl> + options . addOption ( " t " , THROTTLE _ MBITS , " throttle " , " throttle speed in Mbits ( default unlimited ) " ) ; <nl> + options . addOption ( " idct " , INTER _ DC _ THROTTLE _ MBITS , " inter - dc - throttle " , " inter - datacenter throttle speed in Mbits ( default unlimited ) " ) ; <nl> + options . addOption ( " u " , USER _ OPTION , " username " , " username for cassandra authentication " ) ; <nl> + options . addOption ( " pw " , PASSWD _ OPTION , " password " , " password for cassandra authentication " ) ; <nl> + options . addOption ( " ap " , AUTH _ PROVIDER _ OPTION , " auth provider " , " custom AuthProvider class name for cassandra authentication " ) ; <nl> + options . addOption ( " cph " , CONNECTIONS _ PER _ HOST , " connectionsPerHost " , " number of concurrent connections - per - host . " ) ; <nl> + / / ssl connection - related options <nl> + options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " Client SSL : full path to truststore " ) ; <nl> + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " Client SSL : password of the truststore " ) ; <nl> + options . addOption ( " ks " , SSL _ KEYSTORE , " KEYSTORE " , " Client SSL : full path to keystore " ) ; <nl> + options . addOption ( " kspw " , SSL _ KEYSTORE _ PW , " KEYSTORE - PASSWORD " , " Client SSL : password of the keystore " ) ; <nl> + options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " Client SSL : connections protocol to use ( default : TLS ) " ) ; <nl> + options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " Client SSL : algorithm ( default : SunX509 ) " ) ; <nl> + options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " Client SSL : type of store " ) ; <nl> + options . addOption ( " ciphers " , SSL _ CIPHER _ SUITES , " CIPHER - SUITES " , " Client SSL : comma - separated list of encryption suites to use " ) ; <nl> + options . addOption ( " f " , CONFIG _ PATH , " path to config file " , " cassandra . yaml file path for streaming throughput and client / server SSL . " ) ; <nl> + return options ; <nl> + } <nl> + <nl> + public static void printUsage ( Options options ) <nl> + { <nl> + String usage = String . format ( " % s [ options ] < dir _ path > " , TOOL _ NAME ) ; <nl> + String header = System . lineSeparator ( ) + <nl> + " Bulk load the sstables found in the directory < dir _ path > to the configured cluster . " + <nl> + " The parent directories of < dir _ path > are used as the target keyspace / table name . " + <nl> + " So for instance , to load an sstable named Standard1 - g - 1 - Data . db into Keyspace1 / Standard1 , " + <nl> + " you will need to have the files Standard1 - g - 1 - Data . db and Standard1 - g - 1 - Index . db into a directory / path / to / Keyspace1 / Standard1 / . " ; <nl> + String footer = System . lineSeparator ( ) + <nl> + " You can provide cassandra . yaml file with - f command line option to set up streaming throughput , client and server encryption options . " + <nl> + " Only stream _ throughput _ outbound _ megabits _ per _ sec , server _ encryption _ options and client _ encryption _ options are read from yaml . " + <nl> + " You can override options read from cassandra . yaml with corresponding command line options . " ; <nl> + new HelpFormatter ( ) . printHelp ( usage , header , options , footer ) ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1d8664c . . 3aa62ae 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 4 
 + * Extract LoaderOptions to be able to be used from outside ( CASSANDRA - 10637 ) 
 * fix OnDiskIndexTest to properly treat empty ranges ( CASSANDRA - 11205 ) 
 * fix TrackerTest to handle new notifications ( CASSANDRA - 11178 ) 
 * add SASI validation for partitioner and complex columns ( CASSANDRA - 11169 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoadException . java b / src / java / org / apache / cassandra / tools / BulkLoadException . java 
 new file mode 100644 
 index 0000000 . . fb5d459 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoadException . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package org . apache . cassandra . tools ; 
 + 
 + public class BulkLoadException extends Exception 
 + { 
 + 
 + private static final long serialVersionUID = 1L ; 
 + 
 + public BulkLoadException ( Throwable cause ) 
 + { 
 + super ( cause ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / java / org / apache / cassandra / tools / BulkLoader . java b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 index 63caae1 . . f19924e 100644 
 - - - a / src / java / org / apache / cassandra / tools / BulkLoader . java 
 + + + b / src / java / org / apache / cassandra / tools / BulkLoader . java 
 @ @ - 17 , 26 + 17 , 22 @ @ 
 * / 
 package org . apache . cassandra . tools ; 
 
 - import java . io . File ; 
 import java . io . IOException ; 
 - import java . lang . reflect . Constructor ; 
 - import java . lang . reflect . InvocationTargetException ; 
 import java . net . InetAddress ; 
 - import java . net . MalformedURLException ; 
 - import java . net . UnknownHostException ; 
 - import java . util . * ; 
 - 
 - import com . google . common . collect . HashMultimap ; 
 - import com . google . common . collect . Multimap ; 
 - import org . apache . commons . cli . * ; 
 + import java . util . Set ; 
 + import javax . net . ssl . SSLContext ; 
 
 import com . datastax . driver . core . AuthProvider ; 
 import com . datastax . driver . core . JdkSSLOptions ; 
 - import com . datastax . driver . core . PlainTextAuthProvider ; 
 import com . datastax . driver . core . SSLOptions ; 
 - import javax . net . ssl . SSLContext ; 
 - import org . apache . cassandra . config . * ; 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . Multimap ; 
 + import org . apache . commons . cli . Option ; 
 + import org . apache . commons . cli . Options ; 
 + 
 + import org . apache . cassandra . config . Config ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . config . EncryptionOptions ; 
 import org . apache . cassandra . io . sstable . SSTableLoader ; 
 import org . apache . cassandra . security . SSLFactory ; 
 import org . apache . cassandra . streaming . * ; 
 @ @ - 46 , 35 + 42 , 15 @ @ import org . apache . cassandra . utils . OutputHandler ; 
 
 public class BulkLoader 
 { 
 - private static final String TOOL _ NAME = " sstableloader " ; 
 - private static final String VERBOSE _ OPTION = " verbose " ; 
 - private static final String HELP _ OPTION = " help " ; 
 - private static final String NOPROGRESS _ OPTION = " no - progress " ; 
 - private static final String IGNORE _ NODES _ OPTION = " ignore " ; 
 - private static final String INITIAL _ HOST _ ADDRESS _ OPTION = " nodes " ; 
 - private static final String NATIVE _ PORT _ OPTION = " port " ; 
 - private static final String USER _ OPTION = " username " ; 
 - private static final String PASSWD _ OPTION = " password " ; 
 - private static final String AUTH _ PROVIDER _ OPTION = " auth - provider " ; 
 - private static final String THROTTLE _ MBITS = " throttle " ; 
 - private static final String INTER _ DC _ THROTTLE _ MBITS = " inter - dc - throttle " ; 
 - 
 - / * client encryption options * / 
 - private static final String SSL _ TRUSTSTORE = " truststore " ; 
 - private static final String SSL _ TRUSTSTORE _ PW = " truststore - password " ; 
 - private static final String SSL _ KEYSTORE = " keystore " ; 
 - private static final String SSL _ KEYSTORE _ PW = " keystore - password " ; 
 - private static final String SSL _ PROTOCOL = " ssl - protocol " ; 
 - private static final String SSL _ ALGORITHM = " ssl - alg " ; 
 - private static final String SSL _ STORE _ TYPE = " store - type " ; 
 - private static final String SSL _ CIPHER _ SUITES = " ssl - ciphers " ; 
 - private static final String CONNECTIONS _ PER _ HOST = " connections - per - host " ; 
 - private static final String CONFIG _ PATH = " conf - path " ; 
 - 
 - public static void main ( String args [ ] ) 
 + public static void main ( String args [ ] ) throws BulkLoadException 
 + { 
 + LoaderOptions options = LoaderOptions . builder ( ) . parseArgs ( args ) . build ( ) ; 
 + load ( options ) ; 
 + } 
 + 
 + public static void load ( LoaderOptions options ) throws BulkLoadException 
 { 
 Config . setClientMode ( true ) ; 
 - LoaderOptions options = LoaderOptions . parseArgs ( args ) . validateArguments ( ) ; 
 OutputHandler handler = new OutputHandler . SystemOutput ( options . verbose , options . debug ) ; 
 SSTableLoader loader = new SSTableLoader ( 
 options . directory , 
 @ @ - 86 , 8 + 62 , 8 @ @ public class BulkLoader 
 options . sslStoragePort , 
 options . serverEncOptions , 
 buildSSLOptions ( ( EncryptionOptions . ClientEncryptionOptions ) options . encOptions ) ) , 
 - handler , 
 - options . connectionsPerHost ) ; 
 + handler , 
 + options . connectionsPerHost ) ; 
 DatabaseDescriptor . setStreamThroughputOutboundMegabitsPerSec ( options . throttle ) ; 
 DatabaseDescriptor . setInterDCStreamThroughputOutboundMegabitsPerSec ( options . interDcThrottle ) ; 
 StreamResultFuture future = null ; 
 @ @ - 110 , 9 + 86 , 11 @ @ public class BulkLoader 
 JVMStabilityInspector . inspectThrowable ( e ) ; 
 System . err . println ( e . getMessage ( ) ) ; 
 if ( e . getCause ( ) ! = null ) 
 + { 
 System . err . println ( e . getCause ( ) ) ; 
 + } 
 e . printStackTrace ( System . err ) ; 
 - System . exit ( 1 ) ; 
 + throw new BulkLoadException ( e ) ; 
 } 
 
 try 
 @ @ - 120 , 18 + 98 , 20 @ @ public class BulkLoader 
 future . get ( ) ; 
 
 if ( ! options . noProgress ) 
 + { 
 indicator . printSummary ( options . connectionsPerHost ) ; 
 + } 
 
 / / Give sockets time to gracefully close 
 Thread . sleep ( 1000 ) ; 
 - System . exit ( 0 ) ; / / We need that to stop non daemonized threads 
 + / / System . exit ( 0 ) ; / / We need that to stop non daemonized threads 
 } 
 catch ( Exception e ) 
 { 
 System . err . println ( " Streaming to the following hosts failed : " ) ; 
 System . err . println ( loader . getFailedHosts ( ) ) ; 
 e . printStackTrace ( System . err ) ; 
 - System . exit ( 1 ) ; 
 + throw new BulkLoadException ( e ) ; 
 } 
 } 
 
 @ @ - 196 , 14 + 176 , 16 @ @ public class BulkLoader 
 long current = 0 ; 
 int completed = 0 ; 
 
 - if ( progressInfo ! = null & & session . peer . equals ( progressInfo . peer ) & & ( session . sessionIndex = = progressInfo . sessionIndex ) ) 
 + if ( progressInfo ! = null & & session . peer . equals ( progressInfo . peer ) & & session . sessionIndex = = progressInfo . sessionIndex ) 
 { 
 session . updateProgress ( progressInfo ) ; 
 } 
 for ( ProgressInfo progress : session . getSendingFiles ( ) ) 
 { 
 if ( progress . isCompleted ( ) ) 
 + { 
 completed + + ; 
 + } 
 current + = progress . currentBytes ; 
 } 
 totalProgress + = current ; 
 @ @ - 215 , 7 + 197 , 9 @ @ public class BulkLoader 
 sb . append ( " " ) . append ( String . format ( " % - 3d " , size = = 0 ? 100L : current * 100L / size ) ) . append ( " % " ) ; 
 
 if ( updateTotalFiles ) 
 + { 
 totalFiles + = session . getTotalFilesToSend ( ) ; 
 + } 
 } 
 } 
 
 @ @ - 225 , 9 + 209 , 11 @ @ public class BulkLoader 
 
 sb . append ( " total : " ) . append ( totalSize = = 0 ? 100L : totalProgress * 100L / totalSize ) . append ( " % " ) ; 
 sb . append ( String . format ( " % - 3d " , mbPerSec ( deltaProgress , deltaTime ) ) ) . append ( " MB / s " ) ; 
 - int average = mbPerSec ( totalProgress , ( time - start ) ) ; 
 + int average = mbPerSec ( totalProgress , time - start ) ; 
 if ( average > peak ) 
 + { 
 peak = average ; 
 + } 
 sb . append ( " ( avg : " ) . append ( average ) . append ( " MB / s ) " ) ; 
 
 System . out . print ( sb . toString ( ) ) ; 
 @ @ - 236 , 15 + 222 , 15 @ @ public class BulkLoader 
 
 private int mbPerSec ( long bytes , long timeInNano ) 
 { 
 - double bytesPerNano = ( ( double ) bytes ) / timeInNano ; 
 - return ( int ) ( ( bytesPerNano * 1000 * 1000 * 1000 ) / ( 1024 * 1024 ) ) ; 
 + double bytesPerNano = ( double ) bytes / timeInNano ; 
 + return ( int ) ( bytesPerNano * 1000 * 1000 * 1000 / ( 1024 * 1024 ) ) ; 
 } 
 
 private void printSummary ( int connectionsPerHost ) 
 { 
 long end = System . nanoTime ( ) ; 
 - long durationMS = ( ( end - start ) / ( 1000000 ) ) ; 
 - int average = mbPerSec ( lastProgress , ( end - start ) ) ; 
 + long durationMS = ( end - start ) / 1000000 ; 
 + int average = mbPerSec ( lastProgress , end - start ) ; 
 StringBuilder sb = new StringBuilder ( ) ; 
 sb . append ( " \ nSummary statistics : \ n " ) ; 
 sb . append ( String . format ( " % - 30s : % - 10d % n " , " Connections per host : " , connectionsPerHost ) ) ; 
 @ @ - 261 , 7 + 247 , 9 @ @ public class BulkLoader 
 { 
 
 if ( ! clientEncryptionOptions . enabled ) 
 + { 
 return null ; 
 + } 
 
 SSLContext sslContext ; 
 try 
 @ @ - 296 , 7 + 284 , 7 @ @ public class BulkLoader 
 super ( hosts , port , authProvider , sslOptions ) ; 
 this . storagePort = storagePort ; 
 this . sslStoragePort = sslStoragePort ; 
 - this . serverEncOptions = serverEncryptionOptions ; 
 + serverEncOptions = serverEncryptionOptions ; 
 } 
 
 @ Override 
 @ @ - 306 , 327 + 294 , 6 @ @ public class BulkLoader 
 } 
 } 
 
 - static class LoaderOptions 
 - { 
 - public final File directory ; 
 - 
 - public boolean debug ; 
 - public boolean verbose ; 
 - public boolean noProgress ; 
 - public int nativePort = 9042 ; 
 - public String user ; 
 - public String passwd ; 
 - public String authProviderName ; 
 - public AuthProvider authProvider ; 
 - public int throttle = 0 ; 
 - public int interDcThrottle = 0 ; 
 - public int storagePort ; 
 - public int sslStoragePort ; 
 - public EncryptionOptions encOptions = new EncryptionOptions . ClientEncryptionOptions ( ) ; 
 - public int connectionsPerHost = 1 ; 
 - public EncryptionOptions . ServerEncryptionOptions serverEncOptions = new EncryptionOptions . ServerEncryptionOptions ( ) ; 
 - 
 - public final Set < InetAddress > hosts = new HashSet < > ( ) ; 
 - public final Set < InetAddress > ignores = new HashSet < > ( ) ; 
 - 
 - LoaderOptions ( File directory ) 
 - { 
 - this . directory = directory ; 
 - } 
 - 
 - public static LoaderOptions parseArgs ( String cmdArgs [ ] ) 
 - { 
 - CommandLineParser parser = new GnuParser ( ) ; 
 - CmdLineOptions options = getCmdLineOptions ( ) ; 
 - try 
 - { 
 - CommandLine cmd = parser . parse ( options , cmdArgs , false ) ; 
 - 
 - if ( cmd . hasOption ( HELP _ OPTION ) ) 
 - { 
 - printUsage ( options ) ; 
 - System . exit ( 0 ) ; 
 - } 
 - 
 - String [ ] args = cmd . getArgs ( ) ; 
 - if ( args . length = = 0 ) 
 - { 
 - System . err . println ( " Missing sstable directory argument " ) ; 
 - printUsage ( options ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - 
 - if ( args . length > 1 ) 
 - { 
 - System . err . println ( " Too many arguments " ) ; 
 - printUsage ( options ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - 
 - String dirname = args [ 0 ] ; 
 - File dir = new File ( dirname ) ; 
 - 
 - if ( ! dir . exists ( ) ) 
 - errorMsg ( " Unknown directory : " + dirname , options ) ; 
 - 
 - if ( ! dir . isDirectory ( ) ) 
 - errorMsg ( dirname + " is not a directory " , options ) ; 
 - 
 - LoaderOptions opts = new LoaderOptions ( dir ) ; 
 - 
 - opts . verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; 
 - opts . noProgress = cmd . hasOption ( NOPROGRESS _ OPTION ) ; 
 - 
 - if ( cmd . hasOption ( NATIVE _ PORT _ OPTION ) ) 
 - opts . nativePort = Integer . parseInt ( cmd . getOptionValue ( NATIVE _ PORT _ OPTION ) ) ; 
 - 
 - if ( cmd . hasOption ( USER _ OPTION ) ) 
 - opts . user = cmd . getOptionValue ( USER _ OPTION ) ; 
 - 
 - if ( cmd . hasOption ( PASSWD _ OPTION ) ) 
 - opts . passwd = cmd . getOptionValue ( PASSWD _ OPTION ) ; 
 - 
 - if ( cmd . hasOption ( AUTH _ PROVIDER _ OPTION ) ) 
 - opts . authProviderName = cmd . getOptionValue ( AUTH _ PROVIDER _ OPTION ) ; 
 - 
 - if ( cmd . hasOption ( INITIAL _ HOST _ ADDRESS _ OPTION ) ) 
 - { 
 - String [ ] nodes = cmd . getOptionValue ( INITIAL _ HOST _ ADDRESS _ OPTION ) . split ( " , " ) ; 
 - try 
 - { 
 - for ( String node : nodes ) 
 - { 
 - opts . hosts . add ( InetAddress . getByName ( node . trim ( ) ) ) ; 
 - } 
 - } 
 - catch ( UnknownHostException e ) 
 - { 
 - errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; 
 - } 
 - 
 - } 
 - else 
 - { 
 - System . err . println ( " Initial hosts must be specified ( - d ) " ) ; 
 - printUsage ( options ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( IGNORE _ NODES _ OPTION ) ) 
 - { 
 - String [ ] nodes = cmd . getOptionValue ( IGNORE _ NODES _ OPTION ) . split ( " , " ) ; 
 - try 
 - { 
 - for ( String node : nodes ) 
 - { 
 - opts . ignores . add ( InetAddress . getByName ( node . trim ( ) ) ) ; 
 - } 
 - } 
 - catch ( UnknownHostException e ) 
 - { 
 - errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; 
 - } 
 - } 
 - 
 - if ( cmd . hasOption ( CONNECTIONS _ PER _ HOST ) ) 
 - opts . connectionsPerHost = Integer . parseInt ( cmd . getOptionValue ( CONNECTIONS _ PER _ HOST ) ) ; 
 - 
 - / / try to load config file first , so that values can be rewritten with other option values . 
 - / / otherwise use default config . 
 - Config config ; 
 - if ( cmd . hasOption ( CONFIG _ PATH ) ) 
 - { 
 - File configFile = new File ( cmd . getOptionValue ( CONFIG _ PATH ) ) ; 
 - if ( ! configFile . exists ( ) ) 
 - { 
 - errorMsg ( " Config file not found " , options ) ; 
 - } 
 - config = new YamlConfigurationLoader ( ) . loadConfig ( configFile . toURI ( ) . toURL ( ) ) ; 
 - } 
 - else 
 - { 
 - config = new Config ( ) ; 
 - / / unthrottle stream by default 
 - config . stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; 
 - config . inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; 
 - } 
 - opts . storagePort = config . storage _ port ; 
 - opts . sslStoragePort = config . ssl _ storage _ port ; 
 - opts . throttle = config . stream _ throughput _ outbound _ megabits _ per _ sec ; 
 - opts . interDcThrottle = config . inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec ; 
 - opts . encOptions = config . client _ encryption _ options ; 
 - opts . serverEncOptions = config . server _ encryption _ options ; 
 - 
 - if ( cmd . hasOption ( THROTTLE _ MBITS ) ) 
 - { 
 - opts . throttle = Integer . parseInt ( cmd . getOptionValue ( THROTTLE _ MBITS ) ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( INTER _ DC _ THROTTLE _ MBITS ) ) 
 - { 
 - opts . interDcThrottle = Integer . parseInt ( cmd . getOptionValue ( INTER _ DC _ THROTTLE _ MBITS ) ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) 
 - { 
 - opts . encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ TRUSTSTORE _ PW ) ) 
 - { 
 - opts . encOptions . truststore _ password = cmd . getOptionValue ( SSL _ TRUSTSTORE _ PW ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ KEYSTORE ) ) 
 - { 
 - opts . encOptions . keystore = cmd . getOptionValue ( SSL _ KEYSTORE ) ; 
 - / / if a keystore was provided , lets assume we ' ll need to use it 
 - opts . encOptions . require _ client _ auth = true ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ KEYSTORE _ PW ) ) 
 - { 
 - opts . encOptions . keystore _ password = cmd . getOptionValue ( SSL _ KEYSTORE _ PW ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ PROTOCOL ) ) 
 - { 
 - opts . encOptions . protocol = cmd . getOptionValue ( SSL _ PROTOCOL ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ ALGORITHM ) ) 
 - { 
 - opts . encOptions . algorithm = cmd . getOptionValue ( SSL _ ALGORITHM ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ STORE _ TYPE ) ) 
 - { 
 - opts . encOptions . store _ type = cmd . getOptionValue ( SSL _ STORE _ TYPE ) ; 
 - } 
 - 
 - if ( cmd . hasOption ( SSL _ CIPHER _ SUITES ) ) 
 - { 
 - opts . encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; 
 - } 
 - 
 - return opts ; 
 - } 
 - catch ( ParseException | ConfigurationException | MalformedURLException e ) 
 - { 
 - errorMsg ( e . getMessage ( ) , options ) ; 
 - return null ; 
 - } 
 - } 
 - 
 - public LoaderOptions validateArguments ( ) 
 - { 
 - / / Both username and password need to be provided 
 - if ( ( user ! = null ) ! = ( passwd ! = null ) ) 
 - errorMsg ( " Username and password must both be provided " , getCmdLineOptions ( ) ) ; 
 - 
 - if ( user ! = null ) 
 - { 
 - / / Support for 3rd party auth providers that support plain text credentials . 
 - / / In this case the auth provider must provide a constructor of the form : 
 - / / 
 - / / public MyAuthProvider ( String username , String password ) 
 - if ( authProviderName ! = null ) 
 - { 
 - try 
 - { 
 - Class authProviderClass = Class . forName ( authProviderName ) ; 
 - Constructor constructor = authProviderClass . getConstructor ( String . class , String . class ) ; 
 - authProvider = ( AuthProvider ) constructor . newInstance ( user , passwd ) ; 
 - } 
 - catch ( ClassNotFoundException e ) 
 - { 
 - errorMsg ( " Unknown auth provider : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - errorMsg ( " Auth provider does not support plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 - } 
 - catch ( InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e ) 
 - { 
 - errorMsg ( " Could not create auth provider with plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 - } 
 - } 
 - else 
 - { 
 - / / If a 3rd party auth provider wasn ' t provided use the driver plain text provider 
 - authProvider = new PlainTextAuthProvider ( user , passwd ) ; 
 - } 
 - } 
 - / / Alternate support for 3rd party auth providers that don ' t use plain text credentials . 
 - / / In this case the auth provider must provide a nullary constructor of the form : 
 - / / 
 - / / public MyAuthProvider ( ) 
 - else if ( authProviderName ! = null ) 
 - { 
 - try 
 - { 
 - authProvider = ( AuthProvider ) Class . forName ( authProviderName ) . newInstance ( ) ; 
 - } 
 - catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) 
 - { 
 - errorMsg ( " Unknown auth provider " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 - } 
 - } 
 - 
 - return this ; 
 - } 
 - 
 - private static void errorMsg ( String msg , CmdLineOptions options ) 
 - { 
 - System . err . println ( msg ) ; 
 - printUsage ( options ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - 
 - private static CmdLineOptions getCmdLineOptions ( ) 
 - { 
 - CmdLineOptions options = new CmdLineOptions ( ) ; 
 - options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; 
 - options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 - options . addOption ( null , NOPROGRESS _ OPTION , " don ' t display progress " ) ; 
 - options . addOption ( " i " , IGNORE _ NODES _ OPTION , " NODES " , " don ' t stream to this ( comma separated ) list of nodes " ) ; 
 - options . addOption ( " d " , INITIAL _ HOST _ ADDRESS _ OPTION , " initial hosts " , " Required . try to connect to these hosts ( comma separated ) initially for ring information " ) ; 
 - options . addOption ( " p " , NATIVE _ PORT _ OPTION , " rpc port " , " port used for native connection ( default 9042 ) " ) ; 
 - options . addOption ( " t " , THROTTLE _ MBITS , " throttle " , " throttle speed in Mbits ( default unlimited ) " ) ; 
 - options . addOption ( " idct " , INTER _ DC _ THROTTLE _ MBITS , " inter - dc - throttle " , " inter - datacenter throttle speed in Mbits ( default unlimited ) " ) ; 
 - options . addOption ( " u " , USER _ OPTION , " username " , " username for cassandra authentication " ) ; 
 - options . addOption ( " pw " , PASSWD _ OPTION , " password " , " password for cassandra authentication " ) ; 
 - options . addOption ( " ap " , AUTH _ PROVIDER _ OPTION , " auth provider " , " custom AuthProvider class name for cassandra authentication " ) ; 
 - options . addOption ( " cph " , CONNECTIONS _ PER _ HOST , " connectionsPerHost " , " number of concurrent connections - per - host . " ) ; 
 - / / ssl connection - related options 
 - options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " Client SSL : full path to truststore " ) ; 
 - options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " Client SSL : password of the truststore " ) ; 
 - options . addOption ( " ks " , SSL _ KEYSTORE , " KEYSTORE " , " Client SSL : full path to keystore " ) ; 
 - options . addOption ( " kspw " , SSL _ KEYSTORE _ PW , " KEYSTORE - PASSWORD " , " Client SSL : password of the keystore " ) ; 
 - options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " Client SSL : connections protocol to use ( default : TLS ) " ) ; 
 - options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " Client SSL : algorithm ( default : SunX509 ) " ) ; 
 - options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " Client SSL : type of store " ) ; 
 - options . addOption ( " ciphers " , SSL _ CIPHER _ SUITES , " CIPHER - SUITES " , " Client SSL : comma - separated list of encryption suites to use " ) ; 
 - options . addOption ( " f " , CONFIG _ PATH , " path to config file " , " cassandra . yaml file path for streaming throughput and client / server SSL . " ) ; 
 - return options ; 
 - } 
 - 
 - public static void printUsage ( Options options ) 
 - { 
 - String usage = String . format ( " % s [ options ] < dir _ path > " , TOOL _ NAME ) ; 
 - String header = System . lineSeparator ( ) + 
 - " Bulk load the sstables found in the directory < dir _ path > to the configured cluster . " + 
 - " The parent directories of < dir _ path > are used as the target keyspace / table name . " + 
 - " So for instance , to load an sstable named Standard1 - g - 1 - Data . db into Keyspace1 / Standard1 , " + 
 - " you will need to have the files Standard1 - g - 1 - Data . db and Standard1 - g - 1 - Index . db into a directory / path / to / Keyspace1 / Standard1 / . " ; 
 - String footer = System . lineSeparator ( ) + 
 - " You can provide cassandra . yaml file with - f command line option to set up streaming throughput , client and server encryption options . " + 
 - " Only stream _ throughput _ outbound _ megabits _ per _ sec , inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec , server _ encryption _ options and client _ encryption _ options are read from yaml . " + 
 - " You can override options read from cassandra . yaml with corresponding command line options . " ; 
 - new HelpFormatter ( ) . printHelp ( usage , header , options , footer ) ; 
 - } 
 - } 
 - 
 public static class CmdLineOptions extends Options 
 { 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / tools / LoaderOptions . java b / src / java / org / apache / cassandra / tools / LoaderOptions . java 
 new file mode 100644 
 index 0000000 . . 6a6e575 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / tools / LoaderOptions . java 
 @ @ - 0 , 0 + 1 , 537 @ @ 
 + package org . apache . cassandra . tools ; 
 + 
 + import java . io . File ; 
 + import java . lang . reflect . Constructor ; 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . net . * ; 
 + import java . util . HashSet ; 
 + import java . util . Set ; 
 + 
 + import org . apache . cassandra . config . * ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . tools . BulkLoader . CmdLineOptions ; 
 + 
 + import com . datastax . driver . core . AuthProvider ; 
 + import com . datastax . driver . core . PlainTextAuthProvider ; 
 + import org . apache . commons . cli . * ; 
 + 
 + public class LoaderOptions 
 + { 
 + 
 + public static final String HELP _ OPTION = " help " ; 
 + public static final String VERBOSE _ OPTION = " verbose " ; 
 + public static final String NOPROGRESS _ OPTION = " no - progress " ; 
 + public static final String NATIVE _ PORT _ OPTION = " port " ; 
 + public static final String USER _ OPTION = " username " ; 
 + public static final String PASSWD _ OPTION = " password " ; 
 + public static final String AUTH _ PROVIDER _ OPTION = " auth - provider " ; 
 + public static final String INITIAL _ HOST _ ADDRESS _ OPTION = " nodes " ; 
 + public static final String IGNORE _ NODES _ OPTION = " ignore " ; 
 + public static final String CONNECTIONS _ PER _ HOST = " connections - per - host " ; 
 + public static final String CONFIG _ PATH = " conf - path " ; 
 + public static final String THROTTLE _ MBITS = " throttle " ; 
 + public static final String INTER _ DC _ THROTTLE _ MBITS = " inter - dc - throttle " ; 
 + public static final String TOOL _ NAME = " sstableloader " ; 
 + 
 + / * client encryption options * / 
 + public static final String SSL _ TRUSTSTORE = " truststore " ; 
 + public static final String SSL _ TRUSTSTORE _ PW = " truststore - password " ; 
 + public static final String SSL _ KEYSTORE = " keystore " ; 
 + public static final String SSL _ KEYSTORE _ PW = " keystore - password " ; 
 + public static final String SSL _ PROTOCOL = " ssl - protocol " ; 
 + public static final String SSL _ ALGORITHM = " ssl - alg " ; 
 + public static final String SSL _ STORE _ TYPE = " store - type " ; 
 + public static final String SSL _ CIPHER _ SUITES = " ssl - ciphers " ; 
 + 
 + public final File directory ; 
 + public final boolean debug ; 
 + public final boolean verbose ; 
 + public final boolean noProgress ; 
 + public final int nativePort ; 
 + public final String user ; 
 + public final String passwd ; 
 + public final AuthProvider authProvider ; 
 + public final int throttle ; 
 + public final int interDcThrottle ; 
 + public final int storagePort ; 
 + public final int sslStoragePort ; 
 + public final EncryptionOptions encOptions ; 
 + public final int connectionsPerHost ; 
 + public final EncryptionOptions . ServerEncryptionOptions serverEncOptions ; 
 + public final Set < InetAddress > hosts ; 
 + public final Set < InetAddress > ignores = new HashSet < > ( ) ; 
 + 
 + LoaderOptions ( Builder builder ) 
 + { 
 + directory = builder . directory ; 
 + debug = builder . debug ; 
 + verbose = builder . verbose ; 
 + noProgress = builder . noProgress ; 
 + nativePort = builder . nativePort ; 
 + user = builder . user ; 
 + passwd = builder . passwd ; 
 + authProvider = builder . authProvider ; 
 + throttle = builder . throttle ; 
 + interDcThrottle = builder . interDcThrottle ; 
 + storagePort = builder . storagePort ; 
 + sslStoragePort = builder . sslStoragePort ; 
 + encOptions = builder . encOptions ; 
 + connectionsPerHost = builder . connectionsPerHost ; 
 + serverEncOptions = builder . serverEncOptions ; 
 + hosts = builder . hosts ; 
 + } 
 + 
 + static class Builder 
 + { 
 + File directory ; 
 + boolean debug ; 
 + boolean verbose ; 
 + boolean noProgress ; 
 + int nativePort = 9042 ; 
 + String user ; 
 + String passwd ; 
 + String authProviderName ; 
 + AuthProvider authProvider ; 
 + int throttle = 0 ; 
 + int interDcThrottle = 0 ; 
 + int storagePort ; 
 + int sslStoragePort ; 
 + EncryptionOptions encOptions = new EncryptionOptions . ClientEncryptionOptions ( ) ; 
 + int connectionsPerHost = 1 ; 
 + EncryptionOptions . ServerEncryptionOptions serverEncOptions = new EncryptionOptions . ServerEncryptionOptions ( ) ; 
 + Set < InetAddress > hosts = new HashSet < > ( ) ; 
 + Set < InetAddress > ignores = new HashSet < > ( ) ; 
 + 
 + Builder ( ) 
 + { 
 + / / 
 + } 
 + 
 + public LoaderOptions build ( ) 
 + { 
 + constructAuthProvider ( ) ; 
 + return new LoaderOptions ( this ) ; 
 + } 
 + 
 + public Builder directory ( File directory ) 
 + { 
 + this . directory = directory ; 
 + return this ; 
 + } 
 + 
 + public Builder debug ( boolean debug ) 
 + { 
 + this . debug = debug ; 
 + return this ; 
 + } 
 + 
 + public Builder verbose ( boolean verbose ) 
 + { 
 + this . verbose = verbose ; 
 + return this ; 
 + } 
 + 
 + public Builder noProgress ( boolean noProgress ) 
 + { 
 + this . noProgress = noProgress ; 
 + return this ; 
 + } 
 + 
 + public Builder nativePort ( int nativePort ) 
 + { 
 + this . nativePort = nativePort ; 
 + return this ; 
 + } 
 + 
 + public Builder user ( String user ) 
 + { 
 + this . user = user ; 
 + return this ; 
 + } 
 + 
 + public Builder password ( String passwd ) 
 + { 
 + this . passwd = passwd ; 
 + return this ; 
 + } 
 + 
 + public Builder authProvider ( AuthProvider authProvider ) 
 + { 
 + this . authProvider = authProvider ; 
 + return this ; 
 + } 
 + 
 + public Builder throttle ( int throttle ) 
 + { 
 + this . throttle = throttle ; 
 + return this ; 
 + } 
 + 
 + public Builder interDcThrottle ( int interDcThrottle ) 
 + { 
 + this . interDcThrottle = interDcThrottle ; 
 + return this ; 
 + } 
 + 
 + public Builder storagePort ( int storagePort ) 
 + { 
 + this . storagePort = storagePort ; 
 + return this ; 
 + } 
 + 
 + public Builder sslStoragePort ( int sslStoragePort ) 
 + { 
 + this . sslStoragePort = sslStoragePort ; 
 + return this ; 
 + } 
 + 
 + public Builder encOptions ( EncryptionOptions encOptions ) 
 + { 
 + this . encOptions = encOptions ; 
 + return this ; 
 + } 
 + 
 + public Builder connectionsPerHost ( int connectionsPerHost ) 
 + { 
 + this . connectionsPerHost = connectionsPerHost ; 
 + return this ; 
 + } 
 + 
 + public Builder serverEncOptions ( EncryptionOptions . ServerEncryptionOptions serverEncOptions ) 
 + { 
 + this . serverEncOptions = serverEncOptions ; 
 + return this ; 
 + } 
 + 
 + public Builder hosts ( Set < InetAddress > hosts ) 
 + { 
 + this . hosts = hosts ; 
 + return this ; 
 + } 
 + 
 + public Builder host ( InetAddress host ) 
 + { 
 + hosts . add ( host ) ; 
 + return this ; 
 + } 
 + 
 + public Builder ignore ( Set < InetAddress > ignores ) 
 + { 
 + this . ignores = ignores ; 
 + return this ; 
 + } 
 + 
 + public Builder ignore ( InetAddress ignore ) 
 + { 
 + ignores . add ( ignore ) ; 
 + return this ; 
 + } 
 + 
 + public Builder parseArgs ( String cmdArgs [ ] ) 
 + { 
 + CommandLineParser parser = new GnuParser ( ) ; 
 + CmdLineOptions options = getCmdLineOptions ( ) ; 
 + try 
 + { 
 + CommandLine cmd = parser . parse ( options , cmdArgs , false ) ; 
 + 
 + if ( cmd . hasOption ( HELP _ OPTION ) ) 
 + { 
 + printUsage ( options ) ; 
 + System . exit ( 0 ) ; 
 + } 
 + 
 + String [ ] args = cmd . getArgs ( ) ; 
 + if ( args . length = = 0 ) 
 + { 
 + System . err . println ( " Missing sstable directory argument " ) ; 
 + printUsage ( options ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + if ( args . length > 1 ) 
 + { 
 + System . err . println ( " Too many arguments " ) ; 
 + printUsage ( options ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + String dirname = args [ 0 ] ; 
 + File dir = new File ( dirname ) ; 
 + 
 + if ( ! dir . exists ( ) ) 
 + { 
 + errorMsg ( " Unknown directory : " + dirname , options ) ; 
 + } 
 + 
 + if ( ! dir . isDirectory ( ) ) 
 + { 
 + errorMsg ( dirname + " is not a directory " , options ) ; 
 + } 
 + 
 + directory = dir ; 
 + 
 + verbose = cmd . hasOption ( VERBOSE _ OPTION ) ; 
 + noProgress = cmd . hasOption ( NOPROGRESS _ OPTION ) ; 
 + 
 + if ( cmd . hasOption ( NATIVE _ PORT _ OPTION ) ) 
 + { 
 + nativePort = Integer . parseInt ( cmd . getOptionValue ( NATIVE _ PORT _ OPTION ) ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( USER _ OPTION ) ) 
 + { 
 + user = cmd . getOptionValue ( USER _ OPTION ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( PASSWD _ OPTION ) ) 
 + { 
 + passwd = cmd . getOptionValue ( PASSWD _ OPTION ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( AUTH _ PROVIDER _ OPTION ) ) 
 + { 
 + authProviderName = cmd . getOptionValue ( AUTH _ PROVIDER _ OPTION ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( INITIAL _ HOST _ ADDRESS _ OPTION ) ) 
 + { 
 + String [ ] nodes = cmd . getOptionValue ( INITIAL _ HOST _ ADDRESS _ OPTION ) . split ( " , " ) ; 
 + try 
 + { 
 + for ( String node : nodes ) 
 + { 
 + hosts . add ( InetAddress . getByName ( node . trim ( ) ) ) ; 
 + } 
 + } catch ( UnknownHostException e ) 
 + { 
 + errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; 
 + } 
 + 
 + } else 
 + { 
 + System . err . println ( " Initial hosts must be specified ( - d ) " ) ; 
 + printUsage ( options ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( IGNORE _ NODES _ OPTION ) ) 
 + { 
 + String [ ] nodes = cmd . getOptionValue ( IGNORE _ NODES _ OPTION ) . split ( " , " ) ; 
 + try 
 + { 
 + for ( String node : nodes ) 
 + { 
 + ignores . add ( InetAddress . getByName ( node . trim ( ) ) ) ; 
 + } 
 + } catch ( UnknownHostException e ) 
 + { 
 + errorMsg ( " Unknown host : " + e . getMessage ( ) , options ) ; 
 + } 
 + } 
 + 
 + if ( cmd . hasOption ( CONNECTIONS _ PER _ HOST ) ) 
 + { 
 + connectionsPerHost = Integer . parseInt ( cmd . getOptionValue ( CONNECTIONS _ PER _ HOST ) ) ; 
 + } 
 + 
 + / / try to load config file first , so that values can be 
 + / / rewritten with other option values . 
 + / / otherwise use default config . 
 + Config config ; 
 + if ( cmd . hasOption ( CONFIG _ PATH ) ) 
 + { 
 + File configFile = new File ( cmd . getOptionValue ( CONFIG _ PATH ) ) ; 
 + if ( ! configFile . exists ( ) ) 
 + { 
 + errorMsg ( " Config file not found " , options ) ; 
 + } 
 + config = new YamlConfigurationLoader ( ) . loadConfig ( configFile . toURI ( ) . toURL ( ) ) ; 
 + } 
 + else 
 + { 
 + config = new Config ( ) ; 
 + / / unthrottle stream by default 
 + config . stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; 
 + config . inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec = 0 ; 
 + } 
 + storagePort = config . storage _ port ; 
 + sslStoragePort = config . ssl _ storage _ port ; 
 + throttle = config . stream _ throughput _ outbound _ megabits _ per _ sec ; 
 + encOptions = config . client _ encryption _ options ; 
 + serverEncOptions = config . server _ encryption _ options ; 
 + 
 + if ( cmd . hasOption ( THROTTLE _ MBITS ) ) 
 + { 
 + throttle = Integer . parseInt ( cmd . getOptionValue ( THROTTLE _ MBITS ) ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( INTER _ DC _ THROTTLE _ MBITS ) ) 
 + { 
 + interDcThrottle = Integer . parseInt ( cmd . getOptionValue ( INTER _ DC _ THROTTLE _ MBITS ) ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ TRUSTSTORE ) ) 
 + { 
 + encOptions . truststore = cmd . getOptionValue ( SSL _ TRUSTSTORE ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ TRUSTSTORE _ PW ) ) 
 + { 
 + encOptions . truststore _ password = cmd . getOptionValue ( SSL _ TRUSTSTORE _ PW ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ KEYSTORE ) ) 
 + { 
 + encOptions . keystore = cmd . getOptionValue ( SSL _ KEYSTORE ) ; 
 + / / if a keystore was provided , lets assume we ' ll need to use 
 + / / it 
 + encOptions . require _ client _ auth = true ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ KEYSTORE _ PW ) ) 
 + { 
 + encOptions . keystore _ password = cmd . getOptionValue ( SSL _ KEYSTORE _ PW ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ PROTOCOL ) ) 
 + { 
 + encOptions . protocol = cmd . getOptionValue ( SSL _ PROTOCOL ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ ALGORITHM ) ) 
 + { 
 + encOptions . algorithm = cmd . getOptionValue ( SSL _ ALGORITHM ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ STORE _ TYPE ) ) 
 + { 
 + encOptions . store _ type = cmd . getOptionValue ( SSL _ STORE _ TYPE ) ; 
 + } 
 + 
 + if ( cmd . hasOption ( SSL _ CIPHER _ SUITES ) ) 
 + { 
 + encOptions . cipher _ suites = cmd . getOptionValue ( SSL _ CIPHER _ SUITES ) . split ( " , " ) ; 
 + } 
 + 
 + return this ; 
 + } 
 + catch ( ParseException | ConfigurationException | MalformedURLException e ) 
 + { 
 + errorMsg ( e . getMessage ( ) , options ) ; 
 + return null ; 
 + } 
 + } 
 + 
 + private void constructAuthProvider ( ) 
 + { 
 + / / Both username and password need to be provided 
 + if ( ( user ! = null ) ! = ( passwd ! = null ) ) 
 + errorMsg ( " Username and password must both be provided " , getCmdLineOptions ( ) ) ; 
 + 
 + if ( user ! = null ) 
 + { 
 + / / Support for 3rd party auth providers that support plain text credentials . 
 + / / In this case the auth provider must provide a constructor of the form : 
 + / / 
 + / / public MyAuthProvider ( String username , String password ) 
 + if ( authProviderName ! = null ) 
 + { 
 + try 
 + { 
 + Class authProviderClass = Class . forName ( authProviderName ) ; 
 + Constructor constructor = authProviderClass . getConstructor ( String . class , String . class ) ; 
 + authProvider = ( AuthProvider ) constructor . newInstance ( user , passwd ) ; 
 + } 
 + catch ( ClassNotFoundException e ) 
 + { 
 + errorMsg ( " Unknown auth provider : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 + } 
 + catch ( NoSuchMethodException e ) 
 + { 
 + errorMsg ( " Auth provider does not support plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 + } 
 + catch ( InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e ) 
 + { 
 + errorMsg ( " Could not create auth provider with plain text credentials : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + / / If a 3rd party auth provider wasn ' t provided use the driver plain text provider 
 + this . authProvider = new PlainTextAuthProvider ( user , passwd ) ; 
 + } 
 + } 
 + / / Alternate support for 3rd party auth providers that don ' t use plain text credentials . 
 + / / In this case the auth provider must provide a nullary constructor of the form : 
 + / / 
 + / / public MyAuthProvider ( ) 
 + else if ( authProviderName ! = null ) 
 + { 
 + try 
 + { 
 + authProvider = ( AuthProvider ) Class . forName ( authProviderName ) . newInstance ( ) ; 
 + } 
 + catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) 
 + { 
 + errorMsg ( " Unknown auth provider : " + e . getMessage ( ) , getCmdLineOptions ( ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + public static Builder builder ( ) 
 + { 
 + return new Builder ( ) ; 
 + } 
 + 
 + private static void errorMsg ( String msg , CmdLineOptions options ) 
 + { 
 + System . err . println ( msg ) ; 
 + printUsage ( options ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 + private static CmdLineOptions getCmdLineOptions ( ) 
 + { 
 + CmdLineOptions options = new CmdLineOptions ( ) ; 
 + options . addOption ( " v " , VERBOSE _ OPTION , " verbose output " ) ; 
 + options . addOption ( " h " , HELP _ OPTION , " display this help message " ) ; 
 + options . addOption ( null , NOPROGRESS _ OPTION , " don ' t display progress " ) ; 
 + options . addOption ( " i " , IGNORE _ NODES _ OPTION , " NODES " , " don ' t stream to this ( comma separated ) list of nodes " ) ; 
 + options . addOption ( " d " , INITIAL _ HOST _ ADDRESS _ OPTION , " initial hosts " , " Required . try to connect to these hosts ( comma separated ) initially for ring information " ) ; 
 + options . addOption ( " p " , NATIVE _ PORT _ OPTION , " rpc port " , " port used for native connection ( default 9042 ) " ) ; 
 + options . addOption ( " t " , THROTTLE _ MBITS , " throttle " , " throttle speed in Mbits ( default unlimited ) " ) ; 
 + options . addOption ( " idct " , INTER _ DC _ THROTTLE _ MBITS , " inter - dc - throttle " , " inter - datacenter throttle speed in Mbits ( default unlimited ) " ) ; 
 + options . addOption ( " u " , USER _ OPTION , " username " , " username for cassandra authentication " ) ; 
 + options . addOption ( " pw " , PASSWD _ OPTION , " password " , " password for cassandra authentication " ) ; 
 + options . addOption ( " ap " , AUTH _ PROVIDER _ OPTION , " auth provider " , " custom AuthProvider class name for cassandra authentication " ) ; 
 + options . addOption ( " cph " , CONNECTIONS _ PER _ HOST , " connectionsPerHost " , " number of concurrent connections - per - host . " ) ; 
 + / / ssl connection - related options 
 + options . addOption ( " ts " , SSL _ TRUSTSTORE , " TRUSTSTORE " , " Client SSL : full path to truststore " ) ; 
 + options . addOption ( " tspw " , SSL _ TRUSTSTORE _ PW , " TRUSTSTORE - PASSWORD " , " Client SSL : password of the truststore " ) ; 
 + options . addOption ( " ks " , SSL _ KEYSTORE , " KEYSTORE " , " Client SSL : full path to keystore " ) ; 
 + options . addOption ( " kspw " , SSL _ KEYSTORE _ PW , " KEYSTORE - PASSWORD " , " Client SSL : password of the keystore " ) ; 
 + options . addOption ( " prtcl " , SSL _ PROTOCOL , " PROTOCOL " , " Client SSL : connections protocol to use ( default : TLS ) " ) ; 
 + options . addOption ( " alg " , SSL _ ALGORITHM , " ALGORITHM " , " Client SSL : algorithm ( default : SunX509 ) " ) ; 
 + options . addOption ( " st " , SSL _ STORE _ TYPE , " STORE - TYPE " , " Client SSL : type of store " ) ; 
 + options . addOption ( " ciphers " , SSL _ CIPHER _ SUITES , " CIPHER - SUITES " , " Client SSL : comma - separated list of encryption suites to use " ) ; 
 + options . addOption ( " f " , CONFIG _ PATH , " path to config file " , " cassandra . yaml file path for streaming throughput and client / server SSL . " ) ; 
 + return options ; 
 + } 
 + 
 + public static void printUsage ( Options options ) 
 + { 
 + String usage = String . format ( " % s [ options ] < dir _ path > " , TOOL _ NAME ) ; 
 + String header = System . lineSeparator ( ) + 
 + " Bulk load the sstables found in the directory < dir _ path > to the configured cluster . " + 
 + " The parent directories of < dir _ path > are used as the target keyspace / table name . " + 
 + " So for instance , to load an sstable named Standard1 - g - 1 - Data . db into Keyspace1 / Standard1 , " + 
 + " you will need to have the files Standard1 - g - 1 - Data . db and Standard1 - g - 1 - Index . db into a directory / path / to / Keyspace1 / Standard1 / . " ; 
 + String footer = System . lineSeparator ( ) + 
 + " You can provide cassandra . yaml file with - f command line option to set up streaming throughput , client and server encryption options . " + 
 + " Only stream _ throughput _ outbound _ megabits _ per _ sec , server _ encryption _ options and client _ encryption _ options are read from yaml . " + 
 + " You can override options read from cassandra . yaml with corresponding command line options . " ; 
 + new HelpFormatter ( ) . printHelp ( usage , header , options , footer ) ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
