BLEU SCORE: 0.024675789207681903

TEST MSG: Remove adjusted op rate from stress output
GENERATED MSG: Support TimeUUIDType column names in Stress . java tool

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index bf65757 . . 7f88d0f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 32 , 6 + 32 , 7 @ @ <nl> * Make OpOrder AutoCloseable ( CASSANDRA - 6901 ) <nl> * Remove sync repair JMX interface ( CASSANDRA - 6900 ) <nl> * Add multiple memory allocation options for memtables ( CASSANDRA - 6689 ) <nl> + * Remove adjusted op rate from stress output ( CASSANDRA - 6921 ) <nl> Merged from 2 . 0 : <nl> * Restrict Windows to parallel repairs ( CASSANDRA - 6907 ) <nl> * ( Hadoop ) Allow manually specifying start / end tokens in CFIF ( CASSANDRA - 6436 ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> index c31665b . . 54a1e2c 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java <nl> @ @ - 26 , 11 + 26 , 12 @ @ import java . util . List ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ThreadFactory ; <nl> <nl> + import org . apache . commons . lang3 . time . DurationFormatUtils ; <nl> + <nl> import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . stress . util . Timing ; <nl> import org . apache . cassandra . stress . util . TimingInterval ; <nl> import org . apache . cassandra . stress . util . Uncertainty ; <nl> - import org . apache . commons . lang3 . time . DurationFormatUtils ; <nl> <nl> public class StressMetrics <nl> { <nl> @ @ - 126 , 12 + 127 , 12 @ @ public class StressMetrics <nl> <nl> / / PRINT FORMATTING <nl> <nl> - public static final String HEADFORMAT = " % - 10s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 7s , % 9s " ; <nl> - public static final String ROWFORMAT = " % - 10d , % 8 . 0f , % 8 . 0f , % 8 . 0f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 7 . 1f , % 9 . 5f " ; <nl> + public static final String HEADFORMAT = " % - 10s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 7s , % 9s " ; <nl> + public static final String ROWFORMAT = " % - 10d , % 8 . 0f , % 8 . 0f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 7 . 1f , % 9 . 5f " ; <nl> <nl> private static void printHeader ( String prefix , PrintStream output ) <nl> { <nl> - output . println ( prefix + String . format ( HEADFORMAT , " ops " , " op / s " , " adj op / s " , " key / s " , " mean " , " med " , " . 95 " , " . 99 " , " . 999 " , " max " , " time " , " stderr " ) ) ; <nl> + output . println ( prefix + String . format ( HEADFORMAT , " ops " , " op / s " , " key / s " , " mean " , " med " , " . 95 " , " . 99 " , " . 999 " , " max " , " time " , " stderr " ) ) ; <nl> } <nl> <nl> private static void printRow ( String prefix , TimingInterval interval , TimingInterval total , Uncertainty opRateUncertainty , PrintStream output ) <nl> @ @ - 139 , 7 + 140 , 6 @ @ public class StressMetrics <nl> output . println ( prefix + String . format ( ROWFORMAT , <nl> total . operationCount , <nl> interval . realOpRate ( ) , <nl> - interval . adjustedOpRate ( ) , <nl> interval . keyRate ( ) , <nl> interval . meanLatency ( ) , <nl> interval . medianLatency ( ) , <nl> @ @ - 157 , 7 + 157 , 6 @ @ public class StressMetrics <nl> output . println ( " Results : " ) ; <nl> TimingInterval history = timing . getHistory ( ) ; <nl> output . println ( String . format ( " real op rate : % . 0f " , history . realOpRate ( ) ) ) ; <nl> - output . println ( String . format ( " adjusted op rate : % . 0f " , history . adjustedOpRate ( ) ) ) ; <nl> output . println ( String . format ( " adjusted op rate stderr : % . 0f " , opRateUncertainty . getUncertainty ( ) ) ) ; <nl> output . println ( String . format ( " key rate : % . 0f " , history . keyRate ( ) ) ) ; <nl> output . println ( String . format ( " latency mean : % . 1f " , history . meanLatency ( ) ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7c5a752 . . d0e485b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 8 @ @ <nl> * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) <nl> * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) <nl> * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) <nl> + * ( CQL ) INSERT / UPDATE / DELETE / TRUNCATE commands should allow CF names to <nl> + be qualified by keyspace ( CASSANDRA - 3419 ) <nl> <nl> <nl> 1 . 0 . 5 <nl> diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> index d5503c1 . . 3af10cc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> @ @ - 31 , 19 + 31 , 21 @ @ public abstract class AbstractModification <nl> { <nl> public static final ConsistencyLevel defaultConsistency = ConsistencyLevel . ONE ; <nl> <nl> + protected final String keyspace ; <nl> protected final String columnFamily ; <nl> protected final ConsistencyLevel cLevel ; <nl> protected final Long timestamp ; <nl> protected final int timeToLive ; <nl> protected final String keyName ; <nl> <nl> - public AbstractModification ( String columnFamily , String keyAlias , Attributes attrs ) <nl> + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , Attributes attrs ) <nl> { <nl> - this ( columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; <nl> + this ( keyspace , columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; <nl> } <nl> <nl> - public AbstractModification ( String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) <nl> + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) <nl> { <nl> + this . keyspace = keyspace ; <nl> this . columnFamily = columnFamily ; <nl> this . cLevel = cLevel ; <nl> this . timestamp = timestamp ; <nl> @ @ - 51 , 6 + 53 , 11 @ @ public abstract class AbstractModification <nl> this . keyName = keyAlias . toUpperCase ( ) ; <nl> } <nl> <nl> + public String getKeyspace ( ) <nl> + { <nl> + return keyspace ; <nl> + } <nl> + <nl> public String getColumnFamily ( ) <nl> { <nl> return columnFamily ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g <nl> index 4e83392 . . 6971381 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql / Cql . g <nl> @ @ - 33 , 6 + 33 , 7 @ @ options { <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . ArrayList ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . thrift . ConsistencyLevel ; <nl> import org . apache . cassandra . thrift . InvalidRequestException ; <nl> <nl> @ @ - 115 , 7 + 116 , 7 @ @ query returns [ CQLStatement stmnt ] <nl> | updateStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . UPDATE , $ updateStatement . expr ) ; } <nl> | batchStatement { $ stmnt = new CQLStatement ( StatementType . BATCH , $ batchStatement . expr ) ; } <nl> | useStatement { $ stmnt = new CQLStatement ( StatementType . USE , $ useStatement . keyspace ) ; } <nl> - | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cfam ) ; } <nl> + | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cf ) ; } <nl> | deleteStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . DELETE , $ deleteStatement . expr ) ; } <nl> | createKeyspaceStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ KEYSPACE , $ createKeyspaceStatement . expr ) ; } <nl> | createColumnFamilyStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ COLUMNFAMILY , $ createColumnFamilyStatement . expr ) ; } <nl> @ @ - 219 , 13 + 220 , 13 @ @ insertStatement returns [ UpdateStatement expr ] <nl> List < Term > columnNames = new ArrayList < Term > ( ) ; <nl> List < Term > columnValues = new ArrayList < Term > ( ) ; <nl> } <nl> - K _ INSERT K _ INTO columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ INSERT K _ INTO ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ' ( ' key _ alias = term ( ' , ' column _ name = term { columnNames . add ( $ column _ name . item ) ; } ) + ' ) ' <nl> K _ VALUES <nl> ' ( ' key = term ( ' , ' column _ value = term { columnValues . add ( $ column _ value . item ) ; } ) + ' ) ' <nl> ( usingClause [ attrs ] ) ? <nl> { <nl> - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; <nl> + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 311 , 14 + 312 , 14 @ @ updateStatement returns [ UpdateStatement expr ] <nl> Map < Term , Operation > columns = new HashMap < Term , Operation > ( ) ; <nl> List < Term > keyList = null ; <nl> } <nl> - K _ UPDATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ UPDATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ( usingClause [ attrs ] ) ? <nl> K _ SET termPairWithOperation [ columns ] ( ' , ' termPairWithOperation [ columns ] ) * <nl> K _ WHERE ( key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } <nl> | <nl> K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) ) <nl> { <nl> - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; <nl> + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 340 , 13 + 341 , 13 @ @ deleteStatement returns [ DeleteStatement expr ] <nl> } <nl> K _ DELETE <nl> ( cols = termList { columnsList = $ cols . items ; } ) ? <nl> - K _ FROM columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> + K _ FROM ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) <nl> ( usingClauseDelete [ attrs ] ) ? <nl> ( K _ WHERE key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } <nl> | K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) <nl> ) ? <nl> { <nl> - return new DeleteStatement ( columnsList , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; <nl> + return new DeleteStatement ( columnsList , $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; <nl> } <nl> ; <nl> <nl> @ @ - 481 , 8 + 482 , 8 @ @ relation returns [ Relation rel ] <nl> ; <nl> <nl> / / TRUNCATE < CF > ; <nl> - truncateStatement returns [ String cfam ] <nl> - : K _ TRUNCATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cfam = $ columnFamily . text ; } endStmnt <nl> + truncateStatement returns [ Pair < String , String > cf ] <nl> + : K _ TRUNCATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cf = new Pair < String , String > ( $ keyspace . text , $ columnFamily . text ) ; } endStmnt <nl> ; <nl> <nl> endStmnt <nl> diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> index 630a242 . . eb46076 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> @ @ - 46 , 9 + 46 , 9 @ @ public class DeleteStatement extends AbstractModification <nl> private List < Term > columns ; <nl> private List < Term > keys ; <nl> <nl> - public DeleteStatement ( List < Term > columns , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) <nl> + public DeleteStatement ( List < Term > columns , String keyspace , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columns = columns ; <nl> this . keys = keys ; <nl> @ @ - 118 , 8 + 118 , 9 @ @ public class DeleteStatement extends AbstractModification <nl> <nl> public String toString ( ) <nl> { <nl> - return String . format ( " DeleteStatement ( columns = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> + return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> columns , <nl> + keyspace , <nl> columnFamily , <nl> cLevel , <nl> keys ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index a221e24 . . abc999a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ import org . apache . cassandra . thrift . * ; <nl> import org . apache . cassandra . thrift . Column ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> + import org . apache . cassandra . utils . Pair ; <nl> <nl> import com . google . common . base . Predicates ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 265 , 16 + 266 , 18 @ @ public class QueryProcessor <nl> private static void batchUpdate ( ClientState clientState , List < UpdateStatement > updateStatements , ConsistencyLevel consistency ) <nl> throws InvalidRequestException , UnavailableException , TimedOutException <nl> { <nl> - String keyspace = clientState . getKeyspace ( ) ; <nl> + String globalKeyspace = clientState . getKeyspace ( ) ; <nl> List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; <nl> List < String > cfamsSeen = new ArrayList < String > ( ) ; <nl> <nl> for ( UpdateStatement update : updateStatements ) <nl> { <nl> + String keyspace = update . keyspace = = null ? globalKeyspace : update . keyspace ; <nl> + <nl> / / Avoid unnecessary authorizations . <nl> if ( ! ( cfamsSeen . contains ( update . getColumnFamily ( ) ) ) ) <nl> { <nl> - clientState . hasColumnFamilyAccess ( update . getColumnFamily ( ) , Permission . WRITE ) ; <nl> + clientState . hasColumnFamilyAccess ( keyspace , update . getColumnFamily ( ) , Permission . WRITE ) ; <nl> cfamsSeen . add ( update . getColumnFamily ( ) ) ; <nl> } <nl> <nl> @ @ - 705 , 13 + 708 , 15 @ @ public class QueryProcessor <nl> return result ; <nl> <nl> case TRUNCATE : <nl> - String columnFamily = ( String ) statement . statement ; <nl> - validateColumnFamily ( keyspace , columnFamily ) ; <nl> - clientState . hasColumnFamilyAccess ( columnFamily , Permission . WRITE ) ; <nl> + Pair < String , String > columnFamily = ( Pair < String , String > ) statement . statement ; <nl> + keyspace = columnFamily . left = = null ? clientState . getKeyspace ( ) : columnFamily . left ; <nl> + <nl> + validateColumnFamily ( keyspace , columnFamily . right ) ; <nl> + clientState . hasColumnFamilyAccess ( keyspace , columnFamily . right , Permission . WRITE ) ; <nl> <nl> try <nl> { <nl> - StorageProxy . truncateBlocking ( keyspace , columnFamily ) ; <nl> + StorageProxy . truncateBlocking ( keyspace , columnFamily . right ) ; <nl> } <nl> catch ( TimeoutException e ) <nl> { <nl> @ @ - 727 , 6 + 732 , 9 @ @ public class QueryProcessor <nl> <nl> case DELETE : <nl> DeleteStatement delete = ( DeleteStatement ) statement . statement ; <nl> + <nl> + keyspace = delete . keyspace = = null ? clientState . getKeyspace ( ) : delete . keyspace ; <nl> + <nl> try <nl> { <nl> StorageProxy . mutate ( delete . prepareRowMutations ( keyspace , clientState ) , delete . getConsistencyLevel ( ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> index 7783198 . . 128b261 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . thrift . InvalidRequestException ; <nl> <nl> import static org . apache . cassandra . cql . QueryProcessor . validateColumn ; <nl> <nl> - import static org . apache . cassandra . cql . Operation . OperationType ; <nl> import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; <nl> import static org . apache . cassandra . thrift . ThriftValidation . validateCommutativeForWrite ; <nl> <nl> @ @ - 54 , 20 + 53 , 22 @ @ public class UpdateStatement extends AbstractModification <nl> / * * <nl> * Creates a new UpdateStatement from a column family name , columns map , consistency <nl> * level , and key term . <nl> - * <nl> + * <nl> + * @ param keyspace Keyspace ( optional ) <nl> * @ param columnFamily column family name <nl> * @ param keyName alias key name <nl> * @ param columns a map of column name / values pairs <nl> * @ param keys the keys to update <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public UpdateStatement ( String columnFamily , <nl> + public UpdateStatement ( String keyspace , <nl> + String columnFamily , <nl> String keyName , <nl> Map < Term , Operation > columns , <nl> List < Term > keys , <nl> Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columns = columns ; <nl> this . keys = keys ; <nl> @ @ - 77 , 7 + 78 , 8 @ @ public class UpdateStatement extends AbstractModification <nl> * Creates a new UpdateStatement from a column family name , a consistency level , <nl> * key , and lists of column names and values . It is intended for use with the <nl> * alternate update format , < code > INSERT < / code > . <nl> - * <nl> + * <nl> + * @ param keyspace Keyspace ( optional ) <nl> * @ param columnFamily column family name <nl> * @ param keyName alias key name <nl> * @ param columnNames list of column names <nl> @ @ - 85 , 14 + 87 , 15 @ @ public class UpdateStatement extends AbstractModification <nl> * @ param keys the keys to update <nl> * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) <nl> * / <nl> - public UpdateStatement ( String columnFamily , <nl> + public UpdateStatement ( String keyspace , <nl> + String columnFamily , <nl> String keyName , <nl> List < Term > columnNames , <nl> List < Term > columnValues , <nl> List < Term > keys , <nl> Attributes attrs ) <nl> { <nl> - super ( columnFamily , keyName , attrs ) ; <nl> + super ( keyspace , columnFamily , keyName , attrs ) ; <nl> <nl> this . columnNames = columnNames ; <nl> this . columnValues = columnValues ; <nl> @ @ - 266 , 7 + 269 , 8 @ @ public class UpdateStatement extends AbstractModification <nl> <nl> public String toString ( ) <nl> { <nl> - return String . format ( " UpdateStatement ( columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , <nl> + return String . format ( " UpdateStatement ( keyspace = % s , columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , <nl> + keyspace , <nl> columnFamily , <nl> keys , <nl> columns ,

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index bf65757 . . 7f88d0f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 32 , 6 + 32 , 7 @ @ 
 * Make OpOrder AutoCloseable ( CASSANDRA - 6901 ) 
 * Remove sync repair JMX interface ( CASSANDRA - 6900 ) 
 * Add multiple memory allocation options for memtables ( CASSANDRA - 6689 ) 
 + * Remove adjusted op rate from stress output ( CASSANDRA - 6921 ) 
 Merged from 2 . 0 : 
 * Restrict Windows to parallel repairs ( CASSANDRA - 6907 ) 
 * ( Hadoop ) Allow manually specifying start / end tokens in CFIF ( CASSANDRA - 6436 ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 index c31665b . . 54a1e2c 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressMetrics . java 
 @ @ - 26 , 11 + 26 , 12 @ @ import java . util . List ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ThreadFactory ; 
 
 + import org . apache . commons . lang3 . time . DurationFormatUtils ; 
 + 
 import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . stress . util . Timing ; 
 import org . apache . cassandra . stress . util . TimingInterval ; 
 import org . apache . cassandra . stress . util . Uncertainty ; 
 - import org . apache . commons . lang3 . time . DurationFormatUtils ; 
 
 public class StressMetrics 
 { 
 @ @ - 126 , 12 + 127 , 12 @ @ public class StressMetrics 
 
 / / PRINT FORMATTING 
 
 - public static final String HEADFORMAT = " % - 10s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 7s , % 9s " ; 
 - public static final String ROWFORMAT = " % - 10d , % 8 . 0f , % 8 . 0f , % 8 . 0f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 7 . 1f , % 9 . 5f " ; 
 + public static final String HEADFORMAT = " % - 10s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 8s , % 7s , % 9s " ; 
 + public static final String ROWFORMAT = " % - 10d , % 8 . 0f , % 8 . 0f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 8 . 1f , % 7 . 1f , % 9 . 5f " ; 
 
 private static void printHeader ( String prefix , PrintStream output ) 
 { 
 - output . println ( prefix + String . format ( HEADFORMAT , " ops " , " op / s " , " adj op / s " , " key / s " , " mean " , " med " , " . 95 " , " . 99 " , " . 999 " , " max " , " time " , " stderr " ) ) ; 
 + output . println ( prefix + String . format ( HEADFORMAT , " ops " , " op / s " , " key / s " , " mean " , " med " , " . 95 " , " . 99 " , " . 999 " , " max " , " time " , " stderr " ) ) ; 
 } 
 
 private static void printRow ( String prefix , TimingInterval interval , TimingInterval total , Uncertainty opRateUncertainty , PrintStream output ) 
 @ @ - 139 , 7 + 140 , 6 @ @ public class StressMetrics 
 output . println ( prefix + String . format ( ROWFORMAT , 
 total . operationCount , 
 interval . realOpRate ( ) , 
 - interval . adjustedOpRate ( ) , 
 interval . keyRate ( ) , 
 interval . meanLatency ( ) , 
 interval . medianLatency ( ) , 
 @ @ - 157 , 7 + 157 , 6 @ @ public class StressMetrics 
 output . println ( " Results : " ) ; 
 TimingInterval history = timing . getHistory ( ) ; 
 output . println ( String . format ( " real op rate : % . 0f " , history . realOpRate ( ) ) ) ; 
 - output . println ( String . format ( " adjusted op rate : % . 0f " , history . adjustedOpRate ( ) ) ) ; 
 output . println ( String . format ( " adjusted op rate stderr : % . 0f " , opRateUncertainty . getUncertainty ( ) ) ) ; 
 output . println ( String . format ( " key rate : % . 0f " , history . keyRate ( ) ) ) ; 
 output . println ( String . format ( " latency mean : % . 1f " , history . meanLatency ( ) ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7c5a752 . . d0e485b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 8 @ @ 
 * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) 
 * ( HADOOP ) add old - style api support for CFIF and CFRR ( CASSANDRA - 2799 ) 
 * Support TimeUUIDType column names in Stress . java tool ( CASSANDRA - 3541 ) 
 + * ( CQL ) INSERT / UPDATE / DELETE / TRUNCATE commands should allow CF names to 
 + be qualified by keyspace ( CASSANDRA - 3419 ) 
 
 
 1 . 0 . 5 
 diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 index d5503c1 . . 3af10cc 100644 
 - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java 
 + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 @ @ - 31 , 19 + 31 , 21 @ @ public abstract class AbstractModification 
 { 
 public static final ConsistencyLevel defaultConsistency = ConsistencyLevel . ONE ; 
 
 + protected final String keyspace ; 
 protected final String columnFamily ; 
 protected final ConsistencyLevel cLevel ; 
 protected final Long timestamp ; 
 protected final int timeToLive ; 
 protected final String keyName ; 
 
 - public AbstractModification ( String columnFamily , String keyAlias , Attributes attrs ) 
 + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , Attributes attrs ) 
 { 
 - this ( columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; 
 + this ( keyspace , columnFamily , keyAlias , attrs . getConsistencyLevel ( ) , attrs . getTimestamp ( ) , attrs . getTimeToLive ( ) ) ; 
 } 
 
 - public AbstractModification ( String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) 
 + public AbstractModification ( String keyspace , String columnFamily , String keyAlias , ConsistencyLevel cLevel , Long timestamp , int timeToLive ) 
 { 
 + this . keyspace = keyspace ; 
 this . columnFamily = columnFamily ; 
 this . cLevel = cLevel ; 
 this . timestamp = timestamp ; 
 @ @ - 51 , 6 + 53 , 11 @ @ public abstract class AbstractModification 
 this . keyName = keyAlias . toUpperCase ( ) ; 
 } 
 
 + public String getKeyspace ( ) 
 + { 
 + return keyspace ; 
 + } 
 + 
 public String getColumnFamily ( ) 
 { 
 return columnFamily ; 
 diff - - git a / src / java / org / apache / cassandra / cql / Cql . g b / src / java / org / apache / cassandra / cql / Cql . g 
 index 4e83392 . . 6971381 100644 
 - - - a / src / java / org / apache / cassandra / cql / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql / Cql . g 
 @ @ - 33 , 6 + 33 , 7 @ @ options { 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . ArrayList ; 
 + import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . thrift . ConsistencyLevel ; 
 import org . apache . cassandra . thrift . InvalidRequestException ; 
 
 @ @ - 115 , 7 + 116 , 7 @ @ query returns [ CQLStatement stmnt ] 
 | updateStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . UPDATE , $ updateStatement . expr ) ; } 
 | batchStatement { $ stmnt = new CQLStatement ( StatementType . BATCH , $ batchStatement . expr ) ; } 
 | useStatement { $ stmnt = new CQLStatement ( StatementType . USE , $ useStatement . keyspace ) ; } 
 - | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cfam ) ; } 
 + | truncateStatement { $ stmnt = new CQLStatement ( StatementType . TRUNCATE , $ truncateStatement . cf ) ; } 
 | deleteStatement endStmnt { $ stmnt = new CQLStatement ( StatementType . DELETE , $ deleteStatement . expr ) ; } 
 | createKeyspaceStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ KEYSPACE , $ createKeyspaceStatement . expr ) ; } 
 | createColumnFamilyStatement { $ stmnt = new CQLStatement ( StatementType . CREATE _ COLUMNFAMILY , $ createColumnFamilyStatement . expr ) ; } 
 @ @ - 219 , 13 + 220 , 13 @ @ insertStatement returns [ UpdateStatement expr ] 
 List < Term > columnNames = new ArrayList < Term > ( ) ; 
 List < Term > columnValues = new ArrayList < Term > ( ) ; 
 } 
 - K _ INSERT K _ INTO columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ INSERT K _ INTO ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ' ( ' key _ alias = term ( ' , ' column _ name = term { columnNames . add ( $ column _ name . item ) ; } ) + ' ) ' 
 K _ VALUES 
 ' ( ' key = term ( ' , ' column _ value = term { columnValues . add ( $ column _ value . item ) ; } ) + ' ) ' 
 ( usingClause [ attrs ] ) ? 
 { 
 - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; 
 + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columnNames , columnValues , Collections . singletonList ( key ) , attrs ) ; 
 } 
 ; 
 
 @ @ - 311 , 14 + 312 , 14 @ @ updateStatement returns [ UpdateStatement expr ] 
 Map < Term , Operation > columns = new HashMap < Term , Operation > ( ) ; 
 List < Term > keyList = null ; 
 } 
 - K _ UPDATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ UPDATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ( usingClause [ attrs ] ) ? 
 K _ SET termPairWithOperation [ columns ] ( ' , ' termPairWithOperation [ columns ] ) * 
 K _ WHERE ( key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } 
 | 
 K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) ) 
 { 
 - return new UpdateStatement ( $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; 
 + return new UpdateStatement ( $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , columns , keyList , attrs ) ; 
 } 
 ; 
 
 @ @ - 340 , 13 + 341 , 13 @ @ deleteStatement returns [ DeleteStatement expr ] 
 } 
 K _ DELETE 
 ( cols = termList { columnsList = $ cols . items ; } ) ? 
 - K _ FROM columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 + K _ FROM ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) 
 ( usingClauseDelete [ attrs ] ) ? 
 ( K _ WHERE key _ alias = term ( ' = ' key = term { keyList = Collections . singletonList ( key ) ; } 
 | K _ IN ' ( ' keys = termList { keyList = $ keys . items ; } ' ) ' ) 
 ) ? 
 { 
 - return new DeleteStatement ( columnsList , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; 
 + return new DeleteStatement ( columnsList , $ keyspace . text , $ columnFamily . text , key _ alias . getText ( ) , keyList , attrs ) ; 
 } 
 ; 
 
 @ @ - 481 , 8 + 482 , 8 @ @ relation returns [ Relation rel ] 
 ; 
 
 / / TRUNCATE < CF > ; 
 - truncateStatement returns [ String cfam ] 
 - : K _ TRUNCATE columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cfam = $ columnFamily . text ; } endStmnt 
 + truncateStatement returns [ Pair < String , String > cf ] 
 + : K _ TRUNCATE ( keyspace = ( IDENT | STRING _ LITERAL | INTEGER ) ' . ' ) ? columnFamily = ( IDENT | STRING _ LITERAL | INTEGER ) { $ cf = new Pair < String , String > ( $ keyspace . text , $ columnFamily . text ) ; } endStmnt 
 ; 
 
 endStmnt 
 diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 index 630a242 . . eb46076 100644 
 - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 @ @ - 46 , 9 + 46 , 9 @ @ public class DeleteStatement extends AbstractModification 
 private List < Term > columns ; 
 private List < Term > keys ; 
 
 - public DeleteStatement ( List < Term > columns , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) 
 + public DeleteStatement ( List < Term > columns , String keyspace , String columnFamily , String keyName , List < Term > keys , Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columns = columns ; 
 this . keys = keys ; 
 @ @ - 118 , 8 + 118 , 9 @ @ public class DeleteStatement extends AbstractModification 
 
 public String toString ( ) 
 { 
 - return String . format ( " DeleteStatement ( columns = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 + return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 columns , 
 + keyspace , 
 columnFamily , 
 cLevel , 
 keys ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index a221e24 . . abc999a 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 53 , 6 + 53 , 7 @ @ import org . apache . cassandra . thrift . * ; 
 import org . apache . cassandra . thrift . Column ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 + import org . apache . cassandra . utils . Pair ; 
 
 import com . google . common . base . Predicates ; 
 import com . google . common . collect . Maps ; 
 @ @ - 265 , 16 + 266 , 18 @ @ public class QueryProcessor 
 private static void batchUpdate ( ClientState clientState , List < UpdateStatement > updateStatements , ConsistencyLevel consistency ) 
 throws InvalidRequestException , UnavailableException , TimedOutException 
 { 
 - String keyspace = clientState . getKeyspace ( ) ; 
 + String globalKeyspace = clientState . getKeyspace ( ) ; 
 List < IMutation > rowMutations = new ArrayList < IMutation > ( ) ; 
 List < String > cfamsSeen = new ArrayList < String > ( ) ; 
 
 for ( UpdateStatement update : updateStatements ) 
 { 
 + String keyspace = update . keyspace = = null ? globalKeyspace : update . keyspace ; 
 + 
 / / Avoid unnecessary authorizations . 
 if ( ! ( cfamsSeen . contains ( update . getColumnFamily ( ) ) ) ) 
 { 
 - clientState . hasColumnFamilyAccess ( update . getColumnFamily ( ) , Permission . WRITE ) ; 
 + clientState . hasColumnFamilyAccess ( keyspace , update . getColumnFamily ( ) , Permission . WRITE ) ; 
 cfamsSeen . add ( update . getColumnFamily ( ) ) ; 
 } 
 
 @ @ - 705 , 13 + 708 , 15 @ @ public class QueryProcessor 
 return result ; 
 
 case TRUNCATE : 
 - String columnFamily = ( String ) statement . statement ; 
 - validateColumnFamily ( keyspace , columnFamily ) ; 
 - clientState . hasColumnFamilyAccess ( columnFamily , Permission . WRITE ) ; 
 + Pair < String , String > columnFamily = ( Pair < String , String > ) statement . statement ; 
 + keyspace = columnFamily . left = = null ? clientState . getKeyspace ( ) : columnFamily . left ; 
 + 
 + validateColumnFamily ( keyspace , columnFamily . right ) ; 
 + clientState . hasColumnFamilyAccess ( keyspace , columnFamily . right , Permission . WRITE ) ; 
 
 try 
 { 
 - StorageProxy . truncateBlocking ( keyspace , columnFamily ) ; 
 + StorageProxy . truncateBlocking ( keyspace , columnFamily . right ) ; 
 } 
 catch ( TimeoutException e ) 
 { 
 @ @ - 727 , 6 + 732 , 9 @ @ public class QueryProcessor 
 
 case DELETE : 
 DeleteStatement delete = ( DeleteStatement ) statement . statement ; 
 + 
 + keyspace = delete . keyspace = = null ? clientState . getKeyspace ( ) : delete . keyspace ; 
 + 
 try 
 { 
 StorageProxy . mutate ( delete . prepareRowMutations ( keyspace , clientState ) , delete . getConsistencyLevel ( ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 index 7783198 . . 128b261 100644 
 - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import org . apache . cassandra . thrift . InvalidRequestException ; 
 
 import static org . apache . cassandra . cql . QueryProcessor . validateColumn ; 
 
 - import static org . apache . cassandra . cql . Operation . OperationType ; 
 import static org . apache . cassandra . thrift . ThriftValidation . validateColumnFamily ; 
 import static org . apache . cassandra . thrift . ThriftValidation . validateCommutativeForWrite ; 
 
 @ @ - 54 , 20 + 53 , 22 @ @ public class UpdateStatement extends AbstractModification 
 / * * 
 * Creates a new UpdateStatement from a column family name , columns map , consistency 
 * level , and key term . 
 - * 
 + * 
 + * @ param keyspace Keyspace ( optional ) 
 * @ param columnFamily column family name 
 * @ param keyName alias key name 
 * @ param columns a map of column name / values pairs 
 * @ param keys the keys to update 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public UpdateStatement ( String columnFamily , 
 + public UpdateStatement ( String keyspace , 
 + String columnFamily , 
 String keyName , 
 Map < Term , Operation > columns , 
 List < Term > keys , 
 Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columns = columns ; 
 this . keys = keys ; 
 @ @ - 77 , 7 + 78 , 8 @ @ public class UpdateStatement extends AbstractModification 
 * Creates a new UpdateStatement from a column family name , a consistency level , 
 * key , and lists of column names and values . It is intended for use with the 
 * alternate update format , < code > INSERT < / code > . 
 - * 
 + * 
 + * @ param keyspace Keyspace ( optional ) 
 * @ param columnFamily column family name 
 * @ param keyName alias key name 
 * @ param columnNames list of column names 
 @ @ - 85 , 14 + 87 , 15 @ @ public class UpdateStatement extends AbstractModification 
 * @ param keys the keys to update 
 * @ param attrs additional attributes for statement ( CL , timestamp , timeToLive ) 
 * / 
 - public UpdateStatement ( String columnFamily , 
 + public UpdateStatement ( String keyspace , 
 + String columnFamily , 
 String keyName , 
 List < Term > columnNames , 
 List < Term > columnValues , 
 List < Term > keys , 
 Attributes attrs ) 
 { 
 - super ( columnFamily , keyName , attrs ) ; 
 + super ( keyspace , columnFamily , keyName , attrs ) ; 
 
 this . columnNames = columnNames ; 
 this . columnValues = columnValues ; 
 @ @ - 266 , 7 + 269 , 8 @ @ public class UpdateStatement extends AbstractModification 
 
 public String toString ( ) 
 { 
 - return String . format ( " UpdateStatement ( columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , 
 + return String . format ( " UpdateStatement ( keyspace = % s , columnFamily = % s , keys = % s , columns = % s , consistency = % s , timestamp = % s , timeToLive = % s ) " , 
 + keyspace , 
 columnFamily , 
 keys , 
 columns ,
