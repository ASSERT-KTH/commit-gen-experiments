BLEU SCORE: 0.06772997136689071

TEST MSG: Don ' t update system table for unknown nodes / dead states
GENERATED MSG: Save EC2Snitch topology information in system table - take 2

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 102e0d8 . . 1ab97b2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1307 , 48 + 1307 , 59 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> * / <nl> public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) <nl> { <nl> - switch ( state ) <nl> - { <nl> - case STATUS : <nl> - String apStateValue = value . value ; <nl> - String [ ] pieces = apStateValue . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> - assert ( pieces . length > 0 ) ; <nl> - <nl> - String moveName = pieces [ 0 ] ; <nl> - <nl> - if ( moveName . equals ( VersionedValue . STATUS _ BOOTSTRAPPING ) ) <nl> - handleStateBootstrap ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) ) <nl> - handleStateNormal ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . REMOVING _ TOKEN ) | | moveName . equals ( VersionedValue . REMOVED _ TOKEN ) ) <nl> - handleStateRemoving ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . STATUS _ LEAVING ) ) <nl> - handleStateLeaving ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . STATUS _ LEFT ) ) <nl> - handleStateLeft ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . STATUS _ MOVING ) ) <nl> - handleStateMoving ( endpoint , pieces ) ; <nl> - else if ( moveName . equals ( VersionedValue . STATUS _ RELOCATING ) ) <nl> - handleStateRelocating ( endpoint , pieces ) ; <nl> - break ; <nl> - case RELEASE _ VERSION : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , quote ( value . value ) ) ; <nl> - break ; <nl> - case DC : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , quote ( value . value ) ) ; <nl> - break ; <nl> - case RACK : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " rack " , quote ( value . value ) ) ; <nl> - break ; <nl> - case RPC _ ADDRESS : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , quote ( value . value ) ) ; <nl> - break ; <nl> - case SCHEMA : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , value . value ) ; <nl> - break ; <nl> - case HOST _ ID : <nl> - SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , value . value ) ; <nl> - break ; <nl> + if ( state . equals ( ApplicationState . STATUS ) ) <nl> + { <nl> + String apStateValue = value . value ; <nl> + String [ ] pieces = apStateValue . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; <nl> + assert ( pieces . length > 0 ) ; <nl> + <nl> + String moveName = pieces [ 0 ] ; <nl> + <nl> + if ( moveName . equals ( VersionedValue . STATUS _ BOOTSTRAPPING ) ) <nl> + handleStateBootstrap ( endpoint , pieces ) ; <nl> + else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) ) <nl> + handleStateNormal ( endpoint , pieces ) ; <nl> + else if ( moveName . equals ( VersionedValue . REMOVING _ TOKEN ) | | moveName . equals ( VersionedValue . REMOVED _ TOKEN ) ) <nl> + handleStateRemoving ( endpoint , pieces ) ; <nl> + else if ( moveName . equals ( VersionedValue . STATUS _ LEAVING ) ) <nl> + handleStateLeaving ( endpoint , pieces ) ; <nl> + else if ( moveName . equals ( VersionedValue . STATUS _ LEFT ) ) <nl> + handleStateLeft ( endpoint , pieces ) ; <nl> + else if ( moveName . equals ( VersionedValue . STATUS _ MOVING ) ) <nl> + handleStateMoving ( endpoint , pieces ) ; <nl> + else if ( moveName . equals ( VersionedValue . STATUS _ RELOCATING ) ) <nl> + handleStateRelocating ( endpoint , pieces ) ; <nl> + } <nl> + else <nl> + { <nl> + EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; <nl> + if ( epState = = null | | Gossiper . instance . isDeadState ( epState ) ) <nl> + { <nl> + logger . debug ( " Ignoring state change for dead or unknown endpoint : { } " , endpoint ) ; <nl> + return ; <nl> + } <nl> + <nl> + switch ( state ) <nl> + { <nl> + case RELEASE _ VERSION : <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , quote ( value . value ) ) ; <nl> + break ; <nl> + case DC : <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , quote ( value . value ) ) ; <nl> + break ; <nl> + case RACK : <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " rack " , quote ( value . value ) ) ; <nl> + break ; <nl> + case RPC _ ADDRESS : <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , quote ( value . value ) ) ; <nl> + break ; <nl> + case SCHEMA : <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , value . value ) ; <nl> + break ; <nl> + case HOST _ ID : <nl> + SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , value . value ) ; <nl> + break ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> index 44b3400 . . a9d8057 100644 <nl> - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . junit . Test ; <nl> @ @ - 650 , 6 + 651 , 36 @ @ public class LeaveAndBootstrapTest <nl> assertFalse ( tmd . isLeaving ( hosts . get ( 2 ) ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Tests that the system . peers table is not updated after a node has been removed . ( See CASSANDRA - 6053 ) <nl> + * / <nl> + @ Test <nl> + public void testStateChangeOnRemovedNode ( ) throws UnknownHostException <nl> + { <nl> + StorageService ss = StorageService . instance ; <nl> + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; <nl> + <nl> + / / create a ring of 2 nodes <nl> + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; <nl> + List < InetAddress > hosts = new ArrayList < > ( ) ; <nl> + Util . createInitialRing ( ss , partitioner , endpointTokens , new ArrayList < Token > ( ) , hosts , new ArrayList < UUID > ( ) , 2 ) ; <nl> + <nl> + InetAddress toRemove = hosts . get ( 1 ) ; <nl> + SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " ' dc42 ' " ) ; <nl> + SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " ' rack42 ' " ) ; <nl> + assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> + <nl> + / / mark the node as removed <nl> + Gossiper . instance . injectApplicationState ( toRemove , ApplicationState . STATUS , <nl> + valueFactory . left ( Collections . singleton ( endpointTokens . get ( 1 ) ) , Gossiper . computeExpireTime ( ) ) ) ; <nl> + assertTrue ( Gossiper . instance . isDeadState ( Gossiper . instance . getEndpointStateForEndpoint ( hosts . get ( 1 ) ) ) ) ; <nl> + <nl> + / / state changes made after the endpoint has left should be ignored <nl> + ss . onChange ( hosts . get ( 1 ) , ApplicationState . RACK , <nl> + valueFactory . rack ( " rack9999 " ) ) ; <nl> + assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; <nl> + } <nl> + <nl> private static Collection < InetAddress > makeAddrs ( String . . . hosts ) throws UnknownHostException <nl> { <nl> ArrayList < InetAddress > addrs = new ArrayList < InetAddress > ( hosts . length ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index deb37ba . . 4ede198 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 73 , 7 + 73 , 7 @ @ <nl> * Auto paging in binary protocol ( CASSANDRA - 4415 , 5714 ) <nl> * Don ' t tie client side use of AbstractType to JDBC ( CASSANDRA - 4495 ) <nl> * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 , CASSANDRA - 5729 ) <nl> - <nl> + * Allow nodetool with no args , and with help to run without a server ( CASSANDRA - 5734 ) <nl> <nl> 1 . 2 . 7 <nl> * make starting native protocol server idempotent ( CASSANDRA - 5728 ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 825c8d1 . . 57c641a 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 969 , 46 + 969 , 53 @ @ public class NodeCmd <nl> } <nl> } <nl> <nl> - String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; <nl> - String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; <nl> + NodeCommand command = null ; <nl> <nl> - NodeProbe probe = null ; <nl> try <nl> { <nl> - probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; <nl> + command = cmd . getCommand ( ) ; <nl> } <nl> - catch ( IOException ioe ) <nl> + catch ( IllegalArgumentException e ) <nl> { <nl> - Throwable inner = findInnermostThrowable ( ioe ) ; <nl> - if ( inner instanceof ConnectException ) <nl> - { <nl> - System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - else if ( inner instanceof UnknownHostException ) <nl> - { <nl> - System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; <nl> - System . exit ( 1 ) ; <nl> - } <nl> - else <nl> - { <nl> - err ( ioe , " Error connecting to remote JMX agent ! " ) ; <nl> - } <nl> + badUse ( e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + if ( NodeCommand . HELP . equals ( command ) ) <nl> + { <nl> + printUsage ( ) ; <nl> + System . exit ( 0 ) ; <nl> } <nl> + <nl> + NodeProbe probe = null ; <nl> + <nl> try <nl> { <nl> - NodeCommand command = null ; <nl> + String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; <nl> + String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; <nl> <nl> try <nl> { <nl> - command = cmd . getCommand ( ) ; <nl> + probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; <nl> } <nl> - catch ( IllegalArgumentException e ) <nl> + catch ( IOException ioe ) <nl> { <nl> - badUse ( e . getMessage ( ) ) ; <nl> + Throwable inner = findInnermostThrowable ( ioe ) ; <nl> + if ( inner instanceof ConnectException ) <nl> + { <nl> + System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + else if ( inner instanceof UnknownHostException ) <nl> + { <nl> + System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + else <nl> + { <nl> + err ( ioe , " Error connecting to remote JMX agent ! " ) ; <nl> + } <nl> } <nl> <nl> - <nl> NodeCmd nodeCmd = new NodeCmd ( probe ) ; <nl> <nl> / / Execute the requested command . <nl> @ @ - 1018 , 7 + 1025 , 6 @ @ public class NodeCmd <nl> <nl> switch ( command ) <nl> { <nl> - case HELP : printUsage ( ) ; break ; <nl> case RING : <nl> if ( arguments . length > 0 ) { nodeCmd . printRing ( System . out , arguments [ 0 ] ) ; } <nl> else { nodeCmd . printRing ( System . out , null ) ; } ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 102e0d8 . . 1ab97b2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1307 , 48 + 1307 , 59 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 * / 
 public void onChange ( InetAddress endpoint , ApplicationState state , VersionedValue value ) 
 { 
 - switch ( state ) 
 - { 
 - case STATUS : 
 - String apStateValue = value . value ; 
 - String [ ] pieces = apStateValue . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 - assert ( pieces . length > 0 ) ; 
 - 
 - String moveName = pieces [ 0 ] ; 
 - 
 - if ( moveName . equals ( VersionedValue . STATUS _ BOOTSTRAPPING ) ) 
 - handleStateBootstrap ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) ) 
 - handleStateNormal ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . REMOVING _ TOKEN ) | | moveName . equals ( VersionedValue . REMOVED _ TOKEN ) ) 
 - handleStateRemoving ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . STATUS _ LEAVING ) ) 
 - handleStateLeaving ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . STATUS _ LEFT ) ) 
 - handleStateLeft ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . STATUS _ MOVING ) ) 
 - handleStateMoving ( endpoint , pieces ) ; 
 - else if ( moveName . equals ( VersionedValue . STATUS _ RELOCATING ) ) 
 - handleStateRelocating ( endpoint , pieces ) ; 
 - break ; 
 - case RELEASE _ VERSION : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , quote ( value . value ) ) ; 
 - break ; 
 - case DC : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , quote ( value . value ) ) ; 
 - break ; 
 - case RACK : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " rack " , quote ( value . value ) ) ; 
 - break ; 
 - case RPC _ ADDRESS : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , quote ( value . value ) ) ; 
 - break ; 
 - case SCHEMA : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , value . value ) ; 
 - break ; 
 - case HOST _ ID : 
 - SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , value . value ) ; 
 - break ; 
 + if ( state . equals ( ApplicationState . STATUS ) ) 
 + { 
 + String apStateValue = value . value ; 
 + String [ ] pieces = apStateValue . split ( VersionedValue . DELIMITER _ STR , - 1 ) ; 
 + assert ( pieces . length > 0 ) ; 
 + 
 + String moveName = pieces [ 0 ] ; 
 + 
 + if ( moveName . equals ( VersionedValue . STATUS _ BOOTSTRAPPING ) ) 
 + handleStateBootstrap ( endpoint , pieces ) ; 
 + else if ( moveName . equals ( VersionedValue . STATUS _ NORMAL ) ) 
 + handleStateNormal ( endpoint , pieces ) ; 
 + else if ( moveName . equals ( VersionedValue . REMOVING _ TOKEN ) | | moveName . equals ( VersionedValue . REMOVED _ TOKEN ) ) 
 + handleStateRemoving ( endpoint , pieces ) ; 
 + else if ( moveName . equals ( VersionedValue . STATUS _ LEAVING ) ) 
 + handleStateLeaving ( endpoint , pieces ) ; 
 + else if ( moveName . equals ( VersionedValue . STATUS _ LEFT ) ) 
 + handleStateLeft ( endpoint , pieces ) ; 
 + else if ( moveName . equals ( VersionedValue . STATUS _ MOVING ) ) 
 + handleStateMoving ( endpoint , pieces ) ; 
 + else if ( moveName . equals ( VersionedValue . STATUS _ RELOCATING ) ) 
 + handleStateRelocating ( endpoint , pieces ) ; 
 + } 
 + else 
 + { 
 + EndpointState epState = Gossiper . instance . getEndpointStateForEndpoint ( endpoint ) ; 
 + if ( epState = = null | | Gossiper . instance . isDeadState ( epState ) ) 
 + { 
 + logger . debug ( " Ignoring state change for dead or unknown endpoint : { } " , endpoint ) ; 
 + return ; 
 + } 
 + 
 + switch ( state ) 
 + { 
 + case RELEASE _ VERSION : 
 + SystemKeyspace . updatePeerInfo ( endpoint , " release _ version " , quote ( value . value ) ) ; 
 + break ; 
 + case DC : 
 + SystemKeyspace . updatePeerInfo ( endpoint , " data _ center " , quote ( value . value ) ) ; 
 + break ; 
 + case RACK : 
 + SystemKeyspace . updatePeerInfo ( endpoint , " rack " , quote ( value . value ) ) ; 
 + break ; 
 + case RPC _ ADDRESS : 
 + SystemKeyspace . updatePeerInfo ( endpoint , " rpc _ address " , quote ( value . value ) ) ; 
 + break ; 
 + case SCHEMA : 
 + SystemKeyspace . updatePeerInfo ( endpoint , " schema _ version " , value . value ) ; 
 + break ; 
 + case HOST _ ID : 
 + SystemKeyspace . updatePeerInfo ( endpoint , " host _ id " , value . value ) ; 
 + break ; 
 + } 
 } 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 index 44b3400 . . a9d8057 100644 
 - - - a / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 + + + b / test / unit / org / apache / cassandra / service / LeaveAndBootstrapTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . config . Schema ; 
 import org . junit . Test ; 
 @ @ - 650 , 6 + 651 , 36 @ @ public class LeaveAndBootstrapTest 
 assertFalse ( tmd . isLeaving ( hosts . get ( 2 ) ) ) ; 
 } 
 
 + / * * 
 + * Tests that the system . peers table is not updated after a node has been removed . ( See CASSANDRA - 6053 ) 
 + * / 
 + @ Test 
 + public void testStateChangeOnRemovedNode ( ) throws UnknownHostException 
 + { 
 + StorageService ss = StorageService . instance ; 
 + VersionedValue . VersionedValueFactory valueFactory = new VersionedValue . VersionedValueFactory ( partitioner ) ; 
 + 
 + / / create a ring of 2 nodes 
 + ArrayList < Token > endpointTokens = new ArrayList < > ( ) ; 
 + List < InetAddress > hosts = new ArrayList < > ( ) ; 
 + Util . createInitialRing ( ss , partitioner , endpointTokens , new ArrayList < Token > ( ) , hosts , new ArrayList < UUID > ( ) , 2 ) ; 
 + 
 + InetAddress toRemove = hosts . get ( 1 ) ; 
 + SystemKeyspace . updatePeerInfo ( toRemove , " data _ center " , " ' dc42 ' " ) ; 
 + SystemKeyspace . updatePeerInfo ( toRemove , " rack " , " ' rack42 ' " ) ; 
 + assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 + 
 + / / mark the node as removed 
 + Gossiper . instance . injectApplicationState ( toRemove , ApplicationState . STATUS , 
 + valueFactory . left ( Collections . singleton ( endpointTokens . get ( 1 ) ) , Gossiper . computeExpireTime ( ) ) ) ; 
 + assertTrue ( Gossiper . instance . isDeadState ( Gossiper . instance . getEndpointStateForEndpoint ( hosts . get ( 1 ) ) ) ) ; 
 + 
 + / / state changes made after the endpoint has left should be ignored 
 + ss . onChange ( hosts . get ( 1 ) , ApplicationState . RACK , 
 + valueFactory . rack ( " rack9999 " ) ) ; 
 + assertEquals ( " rack42 " , SystemKeyspace . loadDcRackInfo ( ) . get ( toRemove ) . get ( " rack " ) ) ; 
 + } 
 + 
 private static Collection < InetAddress > makeAddrs ( String . . . hosts ) throws UnknownHostException 
 { 
 ArrayList < InetAddress > addrs = new ArrayList < InetAddress > ( hosts . length ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index deb37ba . . 4ede198 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 73 , 7 + 73 , 7 @ @ 
 * Auto paging in binary protocol ( CASSANDRA - 4415 , 5714 ) 
 * Don ' t tie client side use of AbstractType to JDBC ( CASSANDRA - 4495 ) 
 * Adds new TimestampType to replace DateType ( CASSANDRA - 5723 , CASSANDRA - 5729 ) 
 - 
 + * Allow nodetool with no args , and with help to run without a server ( CASSANDRA - 5734 ) 
 
 1 . 2 . 7 
 * make starting native protocol server idempotent ( CASSANDRA - 5728 ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 825c8d1 . . 57c641a 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 969 , 46 + 969 , 53 @ @ public class NodeCmd 
 } 
 } 
 
 - String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; 
 - String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; 
 + NodeCommand command = null ; 
 
 - NodeProbe probe = null ; 
 try 
 { 
 - probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; 
 + command = cmd . getCommand ( ) ; 
 } 
 - catch ( IOException ioe ) 
 + catch ( IllegalArgumentException e ) 
 { 
 - Throwable inner = findInnermostThrowable ( ioe ) ; 
 - if ( inner instanceof ConnectException ) 
 - { 
 - System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - else if ( inner instanceof UnknownHostException ) 
 - { 
 - System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; 
 - System . exit ( 1 ) ; 
 - } 
 - else 
 - { 
 - err ( ioe , " Error connecting to remote JMX agent ! " ) ; 
 - } 
 + badUse ( e . getMessage ( ) ) ; 
 + } 
 + 
 + if ( NodeCommand . HELP . equals ( command ) ) 
 + { 
 + printUsage ( ) ; 
 + System . exit ( 0 ) ; 
 } 
 + 
 + NodeProbe probe = null ; 
 + 
 try 
 { 
 - NodeCommand command = null ; 
 + String username = cmd . getOptionValue ( USERNAME _ OPT . left ) ; 
 + String password = cmd . getOptionValue ( PASSWORD _ OPT . left ) ; 
 
 try 
 { 
 - command = cmd . getCommand ( ) ; 
 + probe = username = = null ? new NodeProbe ( host , port ) : new NodeProbe ( host , port , username , password ) ; 
 } 
 - catch ( IllegalArgumentException e ) 
 + catch ( IOException ioe ) 
 { 
 - badUse ( e . getMessage ( ) ) ; 
 + Throwable inner = findInnermostThrowable ( ioe ) ; 
 + if ( inner instanceof ConnectException ) 
 + { 
 + System . err . printf ( " Failed to connect to ' % s : % d ' : % s % n " , host , port , inner . getMessage ( ) ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + else if ( inner instanceof UnknownHostException ) 
 + { 
 + System . err . printf ( " Cannot resolve ' % s ' : unknown host % n " , host ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + else 
 + { 
 + err ( ioe , " Error connecting to remote JMX agent ! " ) ; 
 + } 
 } 
 
 - 
 NodeCmd nodeCmd = new NodeCmd ( probe ) ; 
 
 / / Execute the requested command . 
 @ @ - 1018 , 7 + 1025 , 6 @ @ public class NodeCmd 
 
 switch ( command ) 
 { 
 - case HELP : printUsage ( ) ; break ; 
 case RING : 
 if ( arguments . length > 0 ) { nodeCmd . printRing ( System . out , arguments [ 0 ] ) ; } 
 else { nodeCmd . printRing ( System . out , null ) ; } ;
