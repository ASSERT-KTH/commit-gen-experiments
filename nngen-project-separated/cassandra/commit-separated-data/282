BLEU SCORE: 0.006821697104452585

TEST MSG: Ignore large IndexSummaryTest tests on Circle CI
GENERATED MSG: implement a compaction benchmark . Patch by Stu Hood , reviewed by Gary Dusbabek . CASSANDRA - 767

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> index ad08ba0 . . 6f37d8f 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . * ; <nl> import com . google . common . collect . Lists ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> + import org . junit . Assume ; <nl> <nl> import org . apache . cassandra . Util ; <nl> import org . apache . cassandra . db . * ; <nl> @ @ - 58 , 6 + 59 , 9 @ @ public class IndexSummaryTest <nl> @ Test <nl> public void testIndexSummaryKeySizes ( ) throws IOException <nl> { <nl> + / / On Circle CI we normally don ' t have enough off - heap memory for this test so ignore it <nl> + Assume . assumeTrue ( System . getenv ( " CIRCLECI " ) = = null ) ; <nl> + <nl> testIndexSummaryProperties ( 32 , 100 ) ; <nl> testIndexSummaryProperties ( 64 , 100 ) ; <nl> testIndexSummaryProperties ( 100 , 100 ) ; <nl> @ @ - 100 , 8 + 104 , 11 @ @ public class IndexSummaryTest <nl> * create an index summary , albeit one that does not cover the entire sstable . <nl> * / <nl> @ Test <nl> - public void tesLargeIndexSummary ( ) throws IOException <nl> + public void testLargeIndexSummary ( ) throws IOException <nl> { <nl> + / / On Circle CI we normally don ' t have enough off - heap memory for this test so ignore it <nl> + Assume . assumeTrue ( System . getenv ( " CIRCLECI " ) = = null ) ; <nl> + <nl> final int numKeys = 1000000 ; <nl> final int keySize = 3000 ; <nl> final int minIndexInterval = 1 ; <nl> @ @ - 131 , 8 + 138 , 11 @ @ public class IndexSummaryTest <nl> * the index summary should be downsampled automatically . <nl> * / <nl> @ Test <nl> - public void tesLargeIndexSummaryWithExpectedSizeMatching ( ) throws IOException <nl> + public void testLargeIndexSummaryWithExpectedSizeMatching ( ) throws IOException <nl> { <nl> + / / On Circle CI we normally don ' t have enough off - heap memory for this test so ignore it <nl> + Assume . assumeTrue ( System . getenv ( " CIRCLECI " ) = = null ) ; <nl> + <nl> final int numKeys = 1000000 ; <nl> final int keySize = 3000 ; <nl> final int minIndexInterval = 1 ;
NEAREST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / CompactionSpeedTest . java b / test / unit / org / apache / cassandra / db / CompactionSpeedTest . java <nl> new file mode 100644 <nl> index 0000000 . . c8b4e05 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / CompactionSpeedTest . java <nl> @ @ - 0 , 0 + 1 , 109 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . net . InetAddress ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . Future ; <nl> + import java . util . * ; <nl> + <nl> + import org . apache . cassandra . Util ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . io . sstable . SSTableReader ; <nl> + import org . apache . cassandra . io . sstable . SSTableUtils ; <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . db . filter . QueryPath ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> + import static junit . framework . Assert . assertEquals ; <nl> + <nl> + public class CompactionSpeedTest extends CleanupHelper <nl> + { <nl> + public static final String TABLE1 = " Keyspace1 " ; <nl> + public static final InetAddress LOCAL = FBUtilities . getLocalAddress ( ) ; <nl> + <nl> + / * * <nl> + * Test compaction with a very wide row . <nl> + * / <nl> + @ Test <nl> + public void testCompactionWide ( ) throws Exception <nl> + { <nl> + testCompaction ( 2 , 1 , 200000 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Test compaction with lots of skinny rows . <nl> + * / <nl> + @ Test <nl> + public void testCompactionSlim ( ) throws Exception <nl> + { <nl> + testCompaction ( 2 , 200000 , 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Test compaction with lots of small sstables . <nl> + * / <nl> + @ Test <nl> + public void testCompactionMany ( ) throws Exception <nl> + { <nl> + testCompaction ( 100 , 800 , 5 ) ; <nl> + } <nl> + <nl> + protected void testCompaction ( int sstableCount , int rowsPerSSTable , int colsPerRow ) throws Exception <nl> + { <nl> + CompactionManager . instance . disableAutoCompaction ( ) ; <nl> + <nl> + Table table = Table . open ( TABLE1 ) ; <nl> + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard1 " ) ; <nl> + <nl> + ArrayList < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; <nl> + for ( int k = 0 ; k < sstableCount ; k + + ) <nl> + { <nl> + SortedMap < String , ColumnFamily > rows = new TreeMap < String , ColumnFamily > ( ) ; <nl> + for ( int j = 0 ; j < rowsPerSSTable ; j + + ) <nl> + { <nl> + String key = String . valueOf ( j ) ; <nl> + IColumn [ ] cols = new IColumn [ colsPerRow ] ; <nl> + for ( int i = 0 ; i < colsPerRow ; i + + ) <nl> + { <nl> + / / last sstable has highest timestamps <nl> + cols [ i ] = Util . column ( String . valueOf ( i ) , String . valueOf ( i ) , k ) ; <nl> + } <nl> + rows . put ( key , SSTableUtils . createCF ( Long . MIN _ VALUE , Integer . MIN _ VALUE , cols ) ) ; <nl> + } <nl> + SSTableReader sstable = SSTableUtils . writeSSTable ( rows ) ; <nl> + sstables . add ( sstable ) ; <nl> + store . addSSTable ( sstable ) ; <nl> + } <nl> + <nl> + / / give garbage collection a bit of time to catch up <nl> + Thread . sleep ( 1000 ) ; <nl> + <nl> + long start = System . currentTimeMillis ( ) ; <nl> + CompactionManager . instance . doCompaction ( store , sstables , CompactionManager . getDefaultGCBefore ( ) ) ; <nl> + System . out . println ( String . format ( " % s : sstables = % d rowsper = % d colsper = % d : % d ms " , <nl> + this . getClass ( ) . getName ( ) , <nl> + sstableCount , <nl> + rowsPerSSTable , <nl> + colsPerRow , <nl> + System . currentTimeMillis ( ) - start ) ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> index 80625d7 . . 4961c1f 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> @ @ - 29 , 15 + 29 , 12 @ @ import java . util . TreeMap ; <nl> <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . Column ; <nl> + import org . apache . cassandra . db . IColumn ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> <nl> - / * * <nl> - * TODO : These methods imitate Memtable . writeSortedKeys to some degree , but <nl> - * because it is so monolithic , we can ' t reuse much . <nl> - * / <nl> public class SSTableUtils <nl> { <nl> / / first configured table and cf <nl> @ @ - 49 , 6 + 46 , 15 @ @ public class SSTableUtils <nl> CFNAME = Table . open ( TABLENAME ) . getColumnFamilies ( ) . iterator ( ) . next ( ) ; <nl> } <nl> <nl> + public static ColumnFamily createCF ( long mfda , int ldt , IColumn . . . cols ) <nl> + { <nl> + ColumnFamily cf = ColumnFamily . create ( TABLENAME , CFNAME ) ; <nl> + cf . delete ( ldt , mfda ) ; <nl> + for ( IColumn col : cols ) <nl> + cf . addColumn ( col ) ; <nl> + return cf ; <nl> + } <nl> + <nl> public static File tempSSTableFile ( String tablename , String cfname ) throws IOException <nl> { <nl> File tempdir = File . createTempFile ( tablename , cfname ) ;

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 index ad08ba0 . . 6f37d8f 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / IndexSummaryTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . * ; 
 import com . google . common . collect . Lists ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 + import org . junit . Assume ; 
 
 import org . apache . cassandra . Util ; 
 import org . apache . cassandra . db . * ; 
 @ @ - 58 , 6 + 59 , 9 @ @ public class IndexSummaryTest 
 @ Test 
 public void testIndexSummaryKeySizes ( ) throws IOException 
 { 
 + / / On Circle CI we normally don ' t have enough off - heap memory for this test so ignore it 
 + Assume . assumeTrue ( System . getenv ( " CIRCLECI " ) = = null ) ; 
 + 
 testIndexSummaryProperties ( 32 , 100 ) ; 
 testIndexSummaryProperties ( 64 , 100 ) ; 
 testIndexSummaryProperties ( 100 , 100 ) ; 
 @ @ - 100 , 8 + 104 , 11 @ @ public class IndexSummaryTest 
 * create an index summary , albeit one that does not cover the entire sstable . 
 * / 
 @ Test 
 - public void tesLargeIndexSummary ( ) throws IOException 
 + public void testLargeIndexSummary ( ) throws IOException 
 { 
 + / / On Circle CI we normally don ' t have enough off - heap memory for this test so ignore it 
 + Assume . assumeTrue ( System . getenv ( " CIRCLECI " ) = = null ) ; 
 + 
 final int numKeys = 1000000 ; 
 final int keySize = 3000 ; 
 final int minIndexInterval = 1 ; 
 @ @ - 131 , 8 + 138 , 11 @ @ public class IndexSummaryTest 
 * the index summary should be downsampled automatically . 
 * / 
 @ Test 
 - public void tesLargeIndexSummaryWithExpectedSizeMatching ( ) throws IOException 
 + public void testLargeIndexSummaryWithExpectedSizeMatching ( ) throws IOException 
 { 
 + / / On Circle CI we normally don ' t have enough off - heap memory for this test so ignore it 
 + Assume . assumeTrue ( System . getenv ( " CIRCLECI " ) = = null ) ; 
 + 
 final int numKeys = 1000000 ; 
 final int keySize = 3000 ; 
 final int minIndexInterval = 1 ;

NEAREST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / CompactionSpeedTest . java b / test / unit / org / apache / cassandra / db / CompactionSpeedTest . java 
 new file mode 100644 
 index 0000000 . . c8b4e05 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / CompactionSpeedTest . java 
 @ @ - 0 , 0 + 1 , 109 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . db ; 
 + 
 + import java . io . IOException ; 
 + import java . net . InetAddress ; 
 + import java . util . concurrent . ExecutionException ; 
 + import java . util . concurrent . Future ; 
 + import java . util . * ; 
 + 
 + import org . apache . cassandra . Util ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . io . sstable . SSTableReader ; 
 + import org . apache . cassandra . io . sstable . SSTableUtils ; 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . db . filter . QueryPath ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 + import static junit . framework . Assert . assertEquals ; 
 + 
 + public class CompactionSpeedTest extends CleanupHelper 
 + { 
 + public static final String TABLE1 = " Keyspace1 " ; 
 + public static final InetAddress LOCAL = FBUtilities . getLocalAddress ( ) ; 
 + 
 + / * * 
 + * Test compaction with a very wide row . 
 + * / 
 + @ Test 
 + public void testCompactionWide ( ) throws Exception 
 + { 
 + testCompaction ( 2 , 1 , 200000 ) ; 
 + } 
 + 
 + / * * 
 + * Test compaction with lots of skinny rows . 
 + * / 
 + @ Test 
 + public void testCompactionSlim ( ) throws Exception 
 + { 
 + testCompaction ( 2 , 200000 , 1 ) ; 
 + } 
 + 
 + / * * 
 + * Test compaction with lots of small sstables . 
 + * / 
 + @ Test 
 + public void testCompactionMany ( ) throws Exception 
 + { 
 + testCompaction ( 100 , 800 , 5 ) ; 
 + } 
 + 
 + protected void testCompaction ( int sstableCount , int rowsPerSSTable , int colsPerRow ) throws Exception 
 + { 
 + CompactionManager . instance . disableAutoCompaction ( ) ; 
 + 
 + Table table = Table . open ( TABLE1 ) ; 
 + ColumnFamilyStore store = table . getColumnFamilyStore ( " Standard1 " ) ; 
 + 
 + ArrayList < SSTableReader > sstables = new ArrayList < SSTableReader > ( ) ; 
 + for ( int k = 0 ; k < sstableCount ; k + + ) 
 + { 
 + SortedMap < String , ColumnFamily > rows = new TreeMap < String , ColumnFamily > ( ) ; 
 + for ( int j = 0 ; j < rowsPerSSTable ; j + + ) 
 + { 
 + String key = String . valueOf ( j ) ; 
 + IColumn [ ] cols = new IColumn [ colsPerRow ] ; 
 + for ( int i = 0 ; i < colsPerRow ; i + + ) 
 + { 
 + / / last sstable has highest timestamps 
 + cols [ i ] = Util . column ( String . valueOf ( i ) , String . valueOf ( i ) , k ) ; 
 + } 
 + rows . put ( key , SSTableUtils . createCF ( Long . MIN _ VALUE , Integer . MIN _ VALUE , cols ) ) ; 
 + } 
 + SSTableReader sstable = SSTableUtils . writeSSTable ( rows ) ; 
 + sstables . add ( sstable ) ; 
 + store . addSSTable ( sstable ) ; 
 + } 
 + 
 + / / give garbage collection a bit of time to catch up 
 + Thread . sleep ( 1000 ) ; 
 + 
 + long start = System . currentTimeMillis ( ) ; 
 + CompactionManager . instance . doCompaction ( store , sstables , CompactionManager . getDefaultGCBefore ( ) ) ; 
 + System . out . println ( String . format ( " % s : sstables = % d rowsper = % d colsper = % d : % d ms " , 
 + this . getClass ( ) . getName ( ) , 
 + sstableCount , 
 + rowsPerSSTable , 
 + colsPerRow , 
 + System . currentTimeMillis ( ) - start ) ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 index 80625d7 . . 4961c1f 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 @ @ - 29 , 15 + 29 , 12 @ @ import java . util . TreeMap ; 
 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . Column ; 
 + import org . apache . cassandra . db . IColumn ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 
 - / * * 
 - * TODO : These methods imitate Memtable . writeSortedKeys to some degree , but 
 - * because it is so monolithic , we can ' t reuse much . 
 - * / 
 public class SSTableUtils 
 { 
 / / first configured table and cf 
 @ @ - 49 , 6 + 46 , 15 @ @ public class SSTableUtils 
 CFNAME = Table . open ( TABLENAME ) . getColumnFamilies ( ) . iterator ( ) . next ( ) ; 
 } 
 
 + public static ColumnFamily createCF ( long mfda , int ldt , IColumn . . . cols ) 
 + { 
 + ColumnFamily cf = ColumnFamily . create ( TABLENAME , CFNAME ) ; 
 + cf . delete ( ldt , mfda ) ; 
 + for ( IColumn col : cols ) 
 + cf . addColumn ( col ) ; 
 + return cf ; 
 + } 
 + 
 public static File tempSSTableFile ( String tablename , String cfname ) throws IOException 
 { 
 File tempdir = File . createTempFile ( tablename , cfname ) ;
