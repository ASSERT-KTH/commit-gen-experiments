BLEU SCORE: 0.03283637368030199

TEST MSG: Add cardinality estimator for key count estimation
GENERATED MSG: Fix cassandra handing on stop

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c368787 . . ac6c53a 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> * SSTable metadata ( Stats . db ) format change ( CASSANDRA - 6356 ) <nl> * Push composites support in the storage engine ( CASSANDRA - 5417 ) <nl> * Add snapshot space used to cfstats ( CASSANDRA - 6231 ) <nl> + * Add cardinality estimator for key count estimation ( CASSANDRA - 5906 ) <nl> <nl> <nl> 2 . 0 . 4 <nl> diff - - git a / lib / licenses / stream - 2 . 5 . 1 . txt b / lib / licenses / stream - 2 . 5 . 1 . txt <nl> new file mode 100644 <nl> index 0000000 . . c8dc677 <nl> - - - / dev / null <nl> + + + b / lib / licenses / stream - 2 . 5 . 1 . txt <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright 2011 Clearspring Technologies <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License . <nl> diff - - git a / lib / stream - 2 . 5 . 1 . jar b / lib / stream - 2 . 5 . 1 . jar <nl> new file mode 100644 <nl> index 0000000 . . 17f0014 <nl> Binary files / dev / null and b / lib / stream - 2 . 5 . 1 . jar differ <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index b72f91c . . e4f5237 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 550 , 7 + 550 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> long totalkeysWritten = 0 ; <nl> <nl> int expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , <nl> - ( int ) ( SSTableReader . getApproximateKeyCount ( Arrays . asList ( sstable ) , cfs . metadata ) ) ) ; <nl> + ( int ) ( SSTableReader . getApproximateKeyCount ( Arrays . asList ( sstable ) ) ) ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Expected bloom filter size : { } " , expectedBloomFilterSize ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index cabe486 . . 61f98f0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 118 , 7 + 118 , 7 @ @ public class CompactionTask extends AbstractCompactionTask <nl> long start = System . nanoTime ( ) ; <nl> long totalkeysWritten = 0 ; <nl> <nl> - long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( actuallyCompact , cfs . metadata ) ) ; <nl> + long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( actuallyCompact ) ) ; <nl> long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( actuallyCompact ) / strategy . getMaxSSTableBytes ( ) ) ; <nl> long keysPerSSTable = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index bec29d5 . . eabfdbc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 85 , 7 + 85 , 7 @ @ public class Scrubber implements Closeable <nl> ? new ScrubController ( cfs ) <nl> : new CompactionController ( cfs , Collections . singleton ( sstable ) , CompactionManager . getDefaultGcBefore ( cfs ) ) ; <nl> this . isCommutative = cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ; <nl> - this . expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , ( int ) ( SSTableReader . getApproximateKeyCount ( toScrub , cfs . metadata ) ) ) ; <nl> + this . expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , ( int ) ( SSTableReader . getApproximateKeyCount ( toScrub ) ) ) ; <nl> <nl> / / loop through each row , deserializing to check for damage . <nl> / / we ' ll also loop through the index at the same time , using the position from the index to recover if the <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> index e4d29e9 . . de96668 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class Upgrader <nl> this . controller = new UpgradeController ( cfs ) ; <nl> <nl> this . strategy = cfs . getCompactionStrategy ( ) ; <nl> - long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( toUpgrade , cfs . metadata ) ) ; <nl> + long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( toUpgrade ) ) ; <nl> long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( this . toUpgrade ) / strategy . getMaxSSTableBytes ( ) ) ; <nl> this . estimatedRows = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index de877bc . . 30bfd77 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 20 , 16 + 20 , 16 @ @ package org . apache . cassandra . io . sstable ; <nl> import java . io . * ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> - import java . util . concurrent . ExecutorService ; <nl> - import java . util . concurrent . LinkedBlockingQueue ; <nl> - import java . util . concurrent . ScheduledFuture ; <nl> - import java . util . concurrent . ScheduledThreadPoolExecutor ; <nl> - import java . util . concurrent . TimeUnit ; <nl> + import java . util . concurrent . * ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> + import com . clearspring . analytics . stream . cardinality . CardinalityMergeException ; <nl> + import com . clearspring . analytics . stream . cardinality . ICardinality ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> + import com . google . common . base . Predicate ; <nl> + import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . Ordering ; <nl> import com . google . common . primitives . Longs ; <nl> import com . google . common . util . concurrent . RateLimiter ; <nl> @ @ - 46 , 7 + 46 , 6 @ @ import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . compaction . ICompactionScanner ; <nl> import org . apache . cassandra . db . index . SecondaryIndex ; <nl> import org . apache . cassandra . dht . * ; <nl> - import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; <nl> import org . apache . cassandra . io . compress . CompressedThrottledReader ; <nl> import org . apache . cassandra . io . compress . CompressionMetadata ; <nl> @ @ - 134 , 18 + 133 , 69 @ @ public class SSTableReader extends SSTable implements Closeable <nl> public RestorableMeter readMeter ; <nl> private ScheduledFuture readMeterSyncFuture ; <nl> <nl> - public static long getApproximateKeyCount ( Iterable < SSTableReader > sstables , CFMetaData metadata ) <nl> + / * * <nl> + * Calculate approximate key count . <nl> + * If cardinality estimator is available on all given sstables , then this method use them to estimate <nl> + * key count . <nl> + * If not , then this uses index summaries . <nl> + * <nl> + * @ param sstables SSTables to calculate key count <nl> + * @ return estimated key count <nl> + * / <nl> + public static long getApproximateKeyCount ( Collection < SSTableReader > sstables ) <nl> { <nl> - long count = 0 ; <nl> + long count = - 1 ; <nl> <nl> - for ( SSTableReader sstable : sstables ) <nl> + / / check if cardinality estimator is available for all SSTables <nl> + boolean cardinalityAvailable = ! sstables . isEmpty ( ) & & Iterators . all ( sstables . iterator ( ) , new Predicate < SSTableReader > ( ) <nl> { <nl> - / / using getMaxIndexSummarySize ( ) lets us ignore the current sampling level <nl> - count + = ( sstable . getMaxIndexSummarySize ( ) + 1 ) * sstable . indexSummary . getSamplingLevel ( ) ; <nl> - if ( logger . isDebugEnabled ( ) ) <nl> - logger . debug ( " index size for bloom filter calc for file : { } : { } " , sstable . getFilename ( ) , count ) ; <nl> + public boolean apply ( SSTableReader sstable ) <nl> + { <nl> + return sstable . descriptor . version . newStatsFile ; <nl> + } <nl> + } ) ; <nl> + <nl> + / / if it is , load them to estimate key count <nl> + if ( cardinalityAvailable ) <nl> + { <nl> + boolean failed = false ; <nl> + ICardinality cardinality = null ; <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + try <nl> + { <nl> + CompactionMetadata metadata = ( CompactionMetadata ) sstable . descriptor . getMetadataSerializer ( ) . deserialize ( sstable . descriptor , MetadataType . COMPACTION ) ; <nl> + if ( cardinality = = null ) <nl> + cardinality = metadata . cardinalityEstimator ; <nl> + else <nl> + cardinality = cardinality . merge ( metadata . cardinalityEstimator ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger . warn ( " Reading cardinality from Statistics . db failed . " , e ) ; <nl> + failed = true ; <nl> + break ; <nl> + } <nl> + catch ( CardinalityMergeException e ) <nl> + { <nl> + logger . warn ( " Cardinality merge failed . " , e ) ; <nl> + failed = true ; <nl> + break ; <nl> + } <nl> + } <nl> + if ( cardinality ! = null & & ! failed ) <nl> + count = cardinality . cardinality ( ) ; <nl> } <nl> <nl> + / / if something went wrong above or cardinality is not available , calculate using index summary <nl> + if ( count < 0 ) <nl> + { <nl> + for ( SSTableReader sstable : sstables ) <nl> + { <nl> + / / using getMaxIndexSummarySize ( ) lets us ignore the current sampling level <nl> + count + = ( sstable . getMaxIndexSummarySize ( ) + 1 ) * sstable . indexSummary . getSamplingLevel ( ) ; <nl> + } <nl> + } <nl> return count ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index ac8e2b2 . . 7b03428 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 149 , 6 + 149 , 7 @ @ public class SSTableWriter extends SSTable <nl> <nl> private void afterAppend ( DecoratedKey decoratedKey , long dataPosition , RowIndexEntry index ) <nl> { <nl> + sstableMetadataCollector . addKey ( decoratedKey . key ) ; <nl> lastWrittenKey = decoratedKey ; <nl> last = lastWrittenKey ; <nl> if ( first = = null ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java b / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java <nl> index fd0e626 . . 1dd33e8 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java <nl> @ @ - 23 , 8 + 23 , 12 @ @ import java . io . IOException ; <nl> import java . util . HashSet ; <nl> import java . util . Set ; <nl> <nl> + import com . clearspring . analytics . stream . cardinality . HyperLogLogPlus ; <nl> + import com . clearspring . analytics . stream . cardinality . ICardinality ; <nl> + <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> * Compaction related SSTable metadata . <nl> @ @ - 37 , 9 + 41 , 12 @ @ public class CompactionMetadata extends MetadataComponent <nl> <nl> public final Set < Integer > ancestors ; <nl> <nl> - public CompactionMetadata ( Set < Integer > ancestors ) <nl> + public final ICardinality cardinalityEstimator ; <nl> + <nl> + public CompactionMetadata ( Set < Integer > ancestors , ICardinality cardinalityEstimator ) <nl> { <nl> this . ancestors = ancestors ; <nl> + this . cardinalityEstimator = cardinalityEstimator ; <nl> } <nl> <nl> public MetadataType getType ( ) <nl> @ @ - 71 , 6 + 78 , 8 @ @ public class CompactionMetadata extends MetadataComponent <nl> size + = TypeSizes . NATIVE . sizeof ( component . ancestors . size ( ) ) ; <nl> for ( int g : component . ancestors ) <nl> size + = TypeSizes . NATIVE . sizeof ( g ) ; <nl> + byte [ ] serializedCardinality = component . cardinalityEstimator . getBytes ( ) ; <nl> + size + = TypeSizes . NATIVE . sizeof ( serializedCardinality . length ) + serializedCardinality . length ; <nl> return size ; <nl> } <nl> <nl> @ @ - 79 , 6 + 88 , 7 @ @ public class CompactionMetadata extends MetadataComponent <nl> out . writeInt ( component . ancestors . size ( ) ) ; <nl> for ( int g : component . ancestors ) <nl> out . writeInt ( g ) ; <nl> + ByteBufferUtil . writeWithLength ( component . cardinalityEstimator . getBytes ( ) , out ) ; <nl> } <nl> <nl> public CompactionMetadata deserialize ( Descriptor . Version version , DataInput in ) throws IOException <nl> @ @ - 87 , 7 + 97 , 8 @ @ public class CompactionMetadata extends MetadataComponent <nl> Set < Integer > ancestors = new HashSet < > ( nbAncestors ) ; <nl> for ( int i = 0 ; i < nbAncestors ; i + + ) <nl> ancestors . add ( in . readInt ( ) ) ; <nl> - return new CompactionMetadata ( ancestors ) ; <nl> + ICardinality cardinality = HyperLogLogPlus . Builder . build ( ByteBufferUtil . readBytes ( in , in . readInt ( ) ) ) ; <nl> + return new CompactionMetadata ( ancestors , cardinality ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java b / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java <nl> index a691591 . . 33d4f16 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java <nl> @ @ - 148 , 7 + 148 , 7 @ @ public class LegacyMetadataSerializer extends MetadataSerializer <nl> maxColumnNames ) ) ; <nl> if ( types . contains ( MetadataType . COMPACTION ) ) <nl> components . put ( MetadataType . COMPACTION , <nl> - new CompactionMetadata ( ancestors ) ) ; <nl> + new CompactionMetadata ( ancestors , null ) ) ; <nl> } <nl> } <nl> return components ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> index c125a98 . . e20015d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java <nl> @ @ - 21 , 12 + 21 , 15 @ @ import java . io . File ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import com . clearspring . analytics . stream . cardinality . HyperLogLogPlus ; <nl> + import com . clearspring . analytics . stream . cardinality . ICardinality ; <nl> import com . google . common . collect . Maps ; <nl> <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . composites . CellNameType ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . utils . EstimatedHistogram ; <nl> + import org . apache . cassandra . utils . MurmurHash ; <nl> import org . apache . cassandra . utils . StreamingHistogram ; <nl> <nl> public class MetadataCollector <nl> @ @ - 77 , 6 + 80 , 13 @ @ public class MetadataCollector <nl> protected int sstableLevel ; <nl> protected List < ByteBuffer > minColumnNames = Collections . emptyList ( ) ; <nl> protected List < ByteBuffer > maxColumnNames = Collections . emptyList ( ) ; <nl> + / * * <nl> + * Default cardinality estimation method is to use HyperLogLog + + . <nl> + * Parameter here ( p = 13 , sp = 25 ) should give reasonable estimation <nl> + * while lowering bytes required to hold information . <nl> + * See CASSANDRA - 5906 for detail . <nl> + * / <nl> + protected ICardinality cardinality = new HyperLogLogPlus ( 13 , 25 ) ; <nl> private final CellNameType columnNameComparator ; <nl> <nl> public MetadataCollector ( CellNameType columnNameComparator ) <nl> @ @ - 103 , 6 + 113 , 12 @ @ public class MetadataCollector <nl> } <nl> } <nl> <nl> + public void addKey ( ByteBuffer key ) <nl> + { <nl> + long hashed = MurmurHash . hash2 _ 64 ( key , key . position ( ) , key . remaining ( ) , 0 ) ; <nl> + cardinality . offerHashed ( hashed ) ; <nl> + } <nl> + <nl> public void addRowSize ( long rowSize ) <nl> { <nl> estimatedRowSize . add ( rowSize ) ; <nl> @ @ - 213 , 7 + 229 , 7 @ @ public class MetadataCollector <nl> sstableLevel , <nl> minColumnNames , <nl> maxColumnNames ) ) ; <nl> - components . put ( MetadataType . COMPACTION , new CompactionMetadata ( ancestors ) ) ; <nl> + components . put ( MetadataType . COMPACTION , new CompactionMetadata ( ancestors , cardinality ) ) ; <nl> return components ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> index d8166ad . . a2f7b89 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java <nl> @ @ - 66 , 6 + 66 , 11 @ @ public class SSTableMetadataViewer <nl> out . println ( stats . replayPosition ) ; <nl> printHistograms ( stats , out ) ; <nl> } <nl> + if ( compaction ! = null ) <nl> + { <nl> + out . printf ( " Ancestors : % s % n " , compaction . ancestors . toString ( ) ) ; <nl> + out . printf ( " Estimated cardinality : % s % n " , compaction . cardinalityEstimator . cardinality ( ) ) ; <nl> + } <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6e9c555 . . aac28cc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 26 , 6 + 26 , 7 @ @ <nl> ( CASSANDRA - 2997 ) <nl> * Break bloom filters up to avoid heap fragmentation ( CASSANDRA - 2466 ) <nl> * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) <nl> + * Avoid leveled compaction getting blocked on errors ( CASSANDRA - 3408 ) <nl> Merged from 0 . 8 : <nl> * ( CQL ) update grammar to require key clause in DELETE statement <nl> ( CASSANDRA - 3349 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> index bbc6701 . . dbcd8cd 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java <nl> @ @ - 67 , 7 + 67 , 10 @ @ public abstract class AbstractCompactionTask <nl> Set < SSTableReader > marked = cfs . getDataTracker ( ) . markCompacting ( sstables , min , max ) ; <nl> <nl> if ( marked = = null | | marked . isEmpty ( ) ) <nl> + { <nl> + cancel ( ) ; <nl> return false ; <nl> + } <nl> <nl> this . sstables = marked ; <nl> return true ; <nl> @ @ - 77 , 4 + 80 , 8 @ @ public abstract class AbstractCompactionTask <nl> { <nl> cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; <nl> } <nl> + <nl> + / / Can be overriden for action that need to be performed if the task won ' t <nl> + / / execute ( if sstable can ' t be marked successfully ) <nl> + protected void cancel ( ) { } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> index 2571d93 . . b0b605a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java <nl> @ @ - 52 , 9 + 52 , 15 @ @ public class LeveledCompactionTask extends CompactionTask <nl> @ Override <nl> public int execute ( CompactionManager . CompactionExecutorStatsCollector collector ) throws IOException <nl> { <nl> - int n = super . execute ( collector ) ; <nl> - latch . countDown ( ) ; <nl> - return n ; <nl> + try <nl> + { <nl> + int n = super . execute ( collector ) ; <nl> + return n ; <nl> + } <nl> + finally <nl> + { <nl> + latch . countDown ( ) ; <nl> + } <nl> } <nl> <nl> public boolean isDone ( ) <nl> @ @ - 79 , 4 + 85 , 10 @ @ public class LeveledCompactionTask extends CompactionTask <nl> { <nl> return false ; <nl> } <nl> + <nl> + @ Override <nl> + protected void cancel ( ) <nl> + { <nl> + latch . countDown ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c368787 . . ac6c53a 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 * SSTable metadata ( Stats . db ) format change ( CASSANDRA - 6356 ) 
 * Push composites support in the storage engine ( CASSANDRA - 5417 ) 
 * Add snapshot space used to cfstats ( CASSANDRA - 6231 ) 
 + * Add cardinality estimator for key count estimation ( CASSANDRA - 5906 ) 
 
 
 2 . 0 . 4 
 diff - - git a / lib / licenses / stream - 2 . 5 . 1 . txt b / lib / licenses / stream - 2 . 5 . 1 . txt 
 new file mode 100644 
 index 0000000 . . c8dc677 
 - - - / dev / null 
 + + + b / lib / licenses / stream - 2 . 5 . 1 . txt 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright 2011 Clearspring Technologies 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License . 
 diff - - git a / lib / stream - 2 . 5 . 1 . jar b / lib / stream - 2 . 5 . 1 . jar 
 new file mode 100644 
 index 0000000 . . 17f0014 
 Binary files / dev / null and b / lib / stream - 2 . 5 . 1 . jar differ 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index b72f91c . . e4f5237 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 550 , 7 + 550 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 long totalkeysWritten = 0 ; 
 
 int expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , 
 - ( int ) ( SSTableReader . getApproximateKeyCount ( Arrays . asList ( sstable ) , cfs . metadata ) ) ) ; 
 + ( int ) ( SSTableReader . getApproximateKeyCount ( Arrays . asList ( sstable ) ) ) ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Expected bloom filter size : { } " , expectedBloomFilterSize ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index cabe486 . . 61f98f0 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 118 , 7 + 118 , 7 @ @ public class CompactionTask extends AbstractCompactionTask 
 long start = System . nanoTime ( ) ; 
 long totalkeysWritten = 0 ; 
 
 - long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( actuallyCompact , cfs . metadata ) ) ; 
 + long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( actuallyCompact ) ) ; 
 long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( actuallyCompact ) / strategy . getMaxSSTableBytes ( ) ) ; 
 long keysPerSSTable = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index bec29d5 . . eabfdbc 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 85 , 7 + 85 , 7 @ @ public class Scrubber implements Closeable 
 ? new ScrubController ( cfs ) 
 : new CompactionController ( cfs , Collections . singleton ( sstable ) , CompactionManager . getDefaultGcBefore ( cfs ) ) ; 
 this . isCommutative = cfs . metadata . getDefaultValidator ( ) . isCommutative ( ) ; 
 - this . expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , ( int ) ( SSTableReader . getApproximateKeyCount ( toScrub , cfs . metadata ) ) ) ; 
 + this . expectedBloomFilterSize = Math . max ( cfs . metadata . getIndexInterval ( ) , ( int ) ( SSTableReader . getApproximateKeyCount ( toScrub ) ) ) ; 
 
 / / loop through each row , deserializing to check for damage . 
 / / we ' ll also loop through the index at the same time , using the position from the index to recover if the 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 index e4d29e9 . . de96668 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class Upgrader 
 this . controller = new UpgradeController ( cfs ) ; 
 
 this . strategy = cfs . getCompactionStrategy ( ) ; 
 - long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( toUpgrade , cfs . metadata ) ) ; 
 + long estimatedTotalKeys = Math . max ( cfs . metadata . getIndexInterval ( ) , SSTableReader . getApproximateKeyCount ( toUpgrade ) ) ; 
 long estimatedSSTables = Math . max ( 1 , SSTableReader . getTotalBytes ( this . toUpgrade ) / strategy . getMaxSSTableBytes ( ) ) ; 
 this . estimatedRows = ( long ) Math . ceil ( ( double ) estimatedTotalKeys / estimatedSSTables ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index de877bc . . 30bfd77 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 20 , 16 + 20 , 16 @ @ package org . apache . cassandra . io . sstable ; 
 import java . io . * ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 - import java . util . concurrent . ExecutorService ; 
 - import java . util . concurrent . LinkedBlockingQueue ; 
 - import java . util . concurrent . ScheduledFuture ; 
 - import java . util . concurrent . ScheduledThreadPoolExecutor ; 
 - import java . util . concurrent . TimeUnit ; 
 + import java . util . concurrent . * ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 
 + import com . clearspring . analytics . stream . cardinality . CardinalityMergeException ; 
 + import com . clearspring . analytics . stream . cardinality . ICardinality ; 
 import com . google . common . annotations . VisibleForTesting ; 
 + import com . google . common . base . Predicate ; 
 + import com . google . common . collect . Iterators ; 
 import com . google . common . collect . Ordering ; 
 import com . google . common . primitives . Longs ; 
 import com . google . common . util . concurrent . RateLimiter ; 
 @ @ - 46 , 7 + 46 , 6 @ @ import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . compaction . ICompactionScanner ; 
 import org . apache . cassandra . db . index . SecondaryIndex ; 
 import org . apache . cassandra . dht . * ; 
 - import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . compress . CompressedRandomAccessReader ; 
 import org . apache . cassandra . io . compress . CompressedThrottledReader ; 
 import org . apache . cassandra . io . compress . CompressionMetadata ; 
 @ @ - 134 , 18 + 133 , 69 @ @ public class SSTableReader extends SSTable implements Closeable 
 public RestorableMeter readMeter ; 
 private ScheduledFuture readMeterSyncFuture ; 
 
 - public static long getApproximateKeyCount ( Iterable < SSTableReader > sstables , CFMetaData metadata ) 
 + / * * 
 + * Calculate approximate key count . 
 + * If cardinality estimator is available on all given sstables , then this method use them to estimate 
 + * key count . 
 + * If not , then this uses index summaries . 
 + * 
 + * @ param sstables SSTables to calculate key count 
 + * @ return estimated key count 
 + * / 
 + public static long getApproximateKeyCount ( Collection < SSTableReader > sstables ) 
 { 
 - long count = 0 ; 
 + long count = - 1 ; 
 
 - for ( SSTableReader sstable : sstables ) 
 + / / check if cardinality estimator is available for all SSTables 
 + boolean cardinalityAvailable = ! sstables . isEmpty ( ) & & Iterators . all ( sstables . iterator ( ) , new Predicate < SSTableReader > ( ) 
 { 
 - / / using getMaxIndexSummarySize ( ) lets us ignore the current sampling level 
 - count + = ( sstable . getMaxIndexSummarySize ( ) + 1 ) * sstable . indexSummary . getSamplingLevel ( ) ; 
 - if ( logger . isDebugEnabled ( ) ) 
 - logger . debug ( " index size for bloom filter calc for file : { } : { } " , sstable . getFilename ( ) , count ) ; 
 + public boolean apply ( SSTableReader sstable ) 
 + { 
 + return sstable . descriptor . version . newStatsFile ; 
 + } 
 + } ) ; 
 + 
 + / / if it is , load them to estimate key count 
 + if ( cardinalityAvailable ) 
 + { 
 + boolean failed = false ; 
 + ICardinality cardinality = null ; 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + try 
 + { 
 + CompactionMetadata metadata = ( CompactionMetadata ) sstable . descriptor . getMetadataSerializer ( ) . deserialize ( sstable . descriptor , MetadataType . COMPACTION ) ; 
 + if ( cardinality = = null ) 
 + cardinality = metadata . cardinalityEstimator ; 
 + else 
 + cardinality = cardinality . merge ( metadata . cardinalityEstimator ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger . warn ( " Reading cardinality from Statistics . db failed . " , e ) ; 
 + failed = true ; 
 + break ; 
 + } 
 + catch ( CardinalityMergeException e ) 
 + { 
 + logger . warn ( " Cardinality merge failed . " , e ) ; 
 + failed = true ; 
 + break ; 
 + } 
 + } 
 + if ( cardinality ! = null & & ! failed ) 
 + count = cardinality . cardinality ( ) ; 
 } 
 
 + / / if something went wrong above or cardinality is not available , calculate using index summary 
 + if ( count < 0 ) 
 + { 
 + for ( SSTableReader sstable : sstables ) 
 + { 
 + / / using getMaxIndexSummarySize ( ) lets us ignore the current sampling level 
 + count + = ( sstable . getMaxIndexSummarySize ( ) + 1 ) * sstable . indexSummary . getSamplingLevel ( ) ; 
 + } 
 + } 
 return count ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index ac8e2b2 . . 7b03428 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 149 , 6 + 149 , 7 @ @ public class SSTableWriter extends SSTable 
 
 private void afterAppend ( DecoratedKey decoratedKey , long dataPosition , RowIndexEntry index ) 
 { 
 + sstableMetadataCollector . addKey ( decoratedKey . key ) ; 
 lastWrittenKey = decoratedKey ; 
 last = lastWrittenKey ; 
 if ( first = = null ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java b / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java 
 index fd0e626 . . 1dd33e8 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / metadata / CompactionMetadata . java 
 @ @ - 23 , 8 + 23 , 12 @ @ import java . io . IOException ; 
 import java . util . HashSet ; 
 import java . util . Set ; 
 
 + import com . clearspring . analytics . stream . cardinality . HyperLogLogPlus ; 
 + import com . clearspring . analytics . stream . cardinality . ICardinality ; 
 + 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 * Compaction related SSTable metadata . 
 @ @ - 37 , 9 + 41 , 12 @ @ public class CompactionMetadata extends MetadataComponent 
 
 public final Set < Integer > ancestors ; 
 
 - public CompactionMetadata ( Set < Integer > ancestors ) 
 + public final ICardinality cardinalityEstimator ; 
 + 
 + public CompactionMetadata ( Set < Integer > ancestors , ICardinality cardinalityEstimator ) 
 { 
 this . ancestors = ancestors ; 
 + this . cardinalityEstimator = cardinalityEstimator ; 
 } 
 
 public MetadataType getType ( ) 
 @ @ - 71 , 6 + 78 , 8 @ @ public class CompactionMetadata extends MetadataComponent 
 size + = TypeSizes . NATIVE . sizeof ( component . ancestors . size ( ) ) ; 
 for ( int g : component . ancestors ) 
 size + = TypeSizes . NATIVE . sizeof ( g ) ; 
 + byte [ ] serializedCardinality = component . cardinalityEstimator . getBytes ( ) ; 
 + size + = TypeSizes . NATIVE . sizeof ( serializedCardinality . length ) + serializedCardinality . length ; 
 return size ; 
 } 
 
 @ @ - 79 , 6 + 88 , 7 @ @ public class CompactionMetadata extends MetadataComponent 
 out . writeInt ( component . ancestors . size ( ) ) ; 
 for ( int g : component . ancestors ) 
 out . writeInt ( g ) ; 
 + ByteBufferUtil . writeWithLength ( component . cardinalityEstimator . getBytes ( ) , out ) ; 
 } 
 
 public CompactionMetadata deserialize ( Descriptor . Version version , DataInput in ) throws IOException 
 @ @ - 87 , 7 + 97 , 8 @ @ public class CompactionMetadata extends MetadataComponent 
 Set < Integer > ancestors = new HashSet < > ( nbAncestors ) ; 
 for ( int i = 0 ; i < nbAncestors ; i + + ) 
 ancestors . add ( in . readInt ( ) ) ; 
 - return new CompactionMetadata ( ancestors ) ; 
 + ICardinality cardinality = HyperLogLogPlus . Builder . build ( ByteBufferUtil . readBytes ( in , in . readInt ( ) ) ) ; 
 + return new CompactionMetadata ( ancestors , cardinality ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java b / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java 
 index a691591 . . 33d4f16 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / metadata / LegacyMetadataSerializer . java 
 @ @ - 148 , 7 + 148 , 7 @ @ public class LegacyMetadataSerializer extends MetadataSerializer 
 maxColumnNames ) ) ; 
 if ( types . contains ( MetadataType . COMPACTION ) ) 
 components . put ( MetadataType . COMPACTION , 
 - new CompactionMetadata ( ancestors ) ) ; 
 + new CompactionMetadata ( ancestors , null ) ) ; 
 } 
 } 
 return components ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 index c125a98 . . e20015d 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / metadata / MetadataCollector . java 
 @ @ - 21 , 12 + 21 , 15 @ @ import java . io . File ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import com . clearspring . analytics . stream . cardinality . HyperLogLogPlus ; 
 + import com . clearspring . analytics . stream . cardinality . ICardinality ; 
 import com . google . common . collect . Maps ; 
 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . composites . CellNameType ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . utils . EstimatedHistogram ; 
 + import org . apache . cassandra . utils . MurmurHash ; 
 import org . apache . cassandra . utils . StreamingHistogram ; 
 
 public class MetadataCollector 
 @ @ - 77 , 6 + 80 , 13 @ @ public class MetadataCollector 
 protected int sstableLevel ; 
 protected List < ByteBuffer > minColumnNames = Collections . emptyList ( ) ; 
 protected List < ByteBuffer > maxColumnNames = Collections . emptyList ( ) ; 
 + / * * 
 + * Default cardinality estimation method is to use HyperLogLog + + . 
 + * Parameter here ( p = 13 , sp = 25 ) should give reasonable estimation 
 + * while lowering bytes required to hold information . 
 + * See CASSANDRA - 5906 for detail . 
 + * / 
 + protected ICardinality cardinality = new HyperLogLogPlus ( 13 , 25 ) ; 
 private final CellNameType columnNameComparator ; 
 
 public MetadataCollector ( CellNameType columnNameComparator ) 
 @ @ - 103 , 6 + 113 , 12 @ @ public class MetadataCollector 
 } 
 } 
 
 + public void addKey ( ByteBuffer key ) 
 + { 
 + long hashed = MurmurHash . hash2 _ 64 ( key , key . position ( ) , key . remaining ( ) , 0 ) ; 
 + cardinality . offerHashed ( hashed ) ; 
 + } 
 + 
 public void addRowSize ( long rowSize ) 
 { 
 estimatedRowSize . add ( rowSize ) ; 
 @ @ - 213 , 7 + 229 , 7 @ @ public class MetadataCollector 
 sstableLevel , 
 minColumnNames , 
 maxColumnNames ) ) ; 
 - components . put ( MetadataType . COMPACTION , new CompactionMetadata ( ancestors ) ) ; 
 + components . put ( MetadataType . COMPACTION , new CompactionMetadata ( ancestors , cardinality ) ) ; 
 return components ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 index d8166ad . . a2f7b89 100644 
 - - - a / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 + + + b / src / java / org / apache / cassandra / tools / SSTableMetadataViewer . java 
 @ @ - 66 , 6 + 66 , 11 @ @ public class SSTableMetadataViewer 
 out . println ( stats . replayPosition ) ; 
 printHistograms ( stats , out ) ; 
 } 
 + if ( compaction ! = null ) 
 + { 
 + out . printf ( " Ancestors : % s % n " , compaction . ancestors . toString ( ) ) ; 
 + out . printf ( " Estimated cardinality : % s % n " , compaction . cardinalityEstimator . cardinality ( ) ) ; 
 + } 
 } 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6e9c555 . . aac28cc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 26 , 6 + 26 , 7 @ @ 
 ( CASSANDRA - 2997 ) 
 * Break bloom filters up to avoid heap fragmentation ( CASSANDRA - 2466 ) 
 * fix cassandra hanging on jsvc stop ( CASSANDRA - 3302 ) 
 + * Avoid leveled compaction getting blocked on errors ( CASSANDRA - 3408 ) 
 Merged from 0 . 8 : 
 * ( CQL ) update grammar to require key clause in DELETE statement 
 ( CASSANDRA - 3349 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 index bbc6701 . . dbcd8cd 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionTask . java 
 @ @ - 67 , 7 + 67 , 10 @ @ public abstract class AbstractCompactionTask 
 Set < SSTableReader > marked = cfs . getDataTracker ( ) . markCompacting ( sstables , min , max ) ; 
 
 if ( marked = = null | | marked . isEmpty ( ) ) 
 + { 
 + cancel ( ) ; 
 return false ; 
 + } 
 
 this . sstables = marked ; 
 return true ; 
 @ @ - 77 , 4 + 80 , 8 @ @ public abstract class AbstractCompactionTask 
 { 
 cfs . getDataTracker ( ) . unmarkCompacting ( sstables ) ; 
 } 
 + 
 + / / Can be overriden for action that need to be performed if the task won ' t 
 + / / execute ( if sstable can ' t be marked successfully ) 
 + protected void cancel ( ) { } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 index 2571d93 . . b0b605a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LeveledCompactionTask . java 
 @ @ - 52 , 9 + 52 , 15 @ @ public class LeveledCompactionTask extends CompactionTask 
 @ Override 
 public int execute ( CompactionManager . CompactionExecutorStatsCollector collector ) throws IOException 
 { 
 - int n = super . execute ( collector ) ; 
 - latch . countDown ( ) ; 
 - return n ; 
 + try 
 + { 
 + int n = super . execute ( collector ) ; 
 + return n ; 
 + } 
 + finally 
 + { 
 + latch . countDown ( ) ; 
 + } 
 } 
 
 public boolean isDone ( ) 
 @ @ - 79 , 4 + 85 , 10 @ @ public class LeveledCompactionTask extends CompactionTask 
 { 
 return false ; 
 } 
 + 
 + @ Override 
 + protected void cancel ( ) 
 + { 
 + latch . countDown ( ) ; 
 + } 
 }
