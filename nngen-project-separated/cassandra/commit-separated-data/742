BLEU SCORE: 0.7916963878457504

TEST MSG: Revert " Range tombstones that are masked by row tombstones should not be written out "
GENERATED MSG: Range tombstones that are masked by row tombstones should not be written out

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 7fa995d . . b1dcbe1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 4 @ @ <nl> 2 . 1 . 16 <nl> - * Don ' t write shadowed range tombstone ( CASSANDRA - 12030 ) <nl> * Fix filtering on clustering columns when 2i is used ( CASSANDRA - 11907 ) <nl> * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) <nl> * Improve digest calculation in the presence of overlapping tombstones ( CASSANDRA - 11349 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> index dab5eeb . . f912da2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> @ @ - 286 , 8 + 286 , 7 @ @ public class LazilyCompactedRow extends AbstractCompactedRow <nl> RangeTombstone t = tombstone ; <nl> tombstone = null ; <nl> <nl> - if ( t . data . isGcAble ( controller . gcBefore ) & & t . timestamp ( ) < getMaxPurgeableTimestamp ( ) | | <nl> - maxRowTombstone . markedForDeleteAt > = t . timestamp ( ) ) <nl> + if ( t . data . isGcAble ( controller . gcBefore ) & & t . timestamp ( ) < getMaxPurgeableTimestamp ( ) ) <nl> { <nl> indexBuilder . tombstoneTracker ( ) . update ( t , true ) ; <nl> return null ; <nl> diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> index dfd6960 . . 3292422 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java <nl> @ @ - 39 , 7 + 39 , 6 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . IndexType ; <nl> import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> - import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; <nl> import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . composites . CellNames ; <nl> @ @ - 544 , 45 + 543 , 6 @ @ public class RangeTombstoneTest extends SchemaLoader <nl> } <nl> <nl> @ Test <nl> - public void testCompactionOfRangeTombstonesCoveredByRowTombstone ( ) throws Exception <nl> - { <nl> - long testTimeStamp = 1451606400L ; / / 01 / 01 / 2016 : 00 : 00 : 00 GMT <nl> - Keyspace table = Keyspace . open ( KSNAME ) ; <nl> - ColumnFamilyStore cfs = table . getColumnFamilyStore ( CFNAME ) ; <nl> - ByteBuffer key = ByteBufferUtil . bytes ( " k4 " ) ; <nl> - <nl> - / / remove any existing sstables before starting <nl> - cfs . truncateBlocking ( ) ; <nl> - cfs . disableAutoCompaction ( ) ; <nl> - cfs . setCompactionStrategyClass ( LeveledCompactionStrategy . class . getCanonicalName ( ) ) ; <nl> - <nl> - Mutation rm = new Mutation ( KSNAME , key ) ; <nl> - for ( int i = 1 ; i < 11 ; i + = 2 , testTimeStamp + = i * 10 ) <nl> - add ( rm , i , testTimeStamp ) ; <nl> - rm . apply ( ) ; <nl> - cfs . forceBlockingFlush ( ) ; <nl> - <nl> - rm = new Mutation ( KSNAME , key ) ; <nl> - ColumnFamily cf = rm . addOrGet ( CFNAME ) ; <nl> - <nl> - / / Write the covering row tombstone <nl> - cf . delete ( new DeletionTime ( + + testTimeStamp , ( int ) testTimeStamp ) ) ; <nl> - <nl> - / / Create range tombstones covered by row tombstone above . <nl> - for ( int i = 1 ; i < 11 ; i + = 2 , testTimeStamp - = i * 5 ) <nl> - delete ( cf , 0 , 7 , testTimeStamp ) ; <nl> - rm . apply ( ) ; <nl> - cfs . forceBlockingFlush ( ) ; <nl> - <nl> - / / there should be 2 sstables <nl> - assertEquals ( 2 , cfs . getSSTables ( ) . size ( ) ) ; <nl> - <nl> - / / compact down to nothing <nl> - CompactionManager . instance . performMaximal ( cfs ) ; <nl> - assertEquals ( 0 , cfs . getSSTables ( ) . size ( ) ) ; <nl> - } <nl> - <nl> - @ Test <nl> public void testOverwritesToDeletedColumns ( ) throws Exception <nl> { <nl> Keyspace table = Keyspace . open ( KSNAME ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 7fa995d . . b1dcbe1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 4 @ @ 
 2 . 1 . 16 
 - * Don ' t write shadowed range tombstone ( CASSANDRA - 12030 ) 
 * Fix filtering on clustering columns when 2i is used ( CASSANDRA - 11907 ) 
 * Reduce contention getting instances of CompositeType ( CASSANDRA - 10433 ) 
 * Improve digest calculation in the presence of overlapping tombstones ( CASSANDRA - 11349 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 index dab5eeb . . f912da2 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 @ @ - 286 , 8 + 286 , 7 @ @ public class LazilyCompactedRow extends AbstractCompactedRow 
 RangeTombstone t = tombstone ; 
 tombstone = null ; 
 
 - if ( t . data . isGcAble ( controller . gcBefore ) & & t . timestamp ( ) < getMaxPurgeableTimestamp ( ) | | 
 - maxRowTombstone . markedForDeleteAt > = t . timestamp ( ) ) 
 + if ( t . data . isGcAble ( controller . gcBefore ) & & t . timestamp ( ) < getMaxPurgeableTimestamp ( ) ) 
 { 
 indexBuilder . tombstoneTracker ( ) . update ( t , true ) ; 
 return null ; 
 diff - - git a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 index dfd6960 . . 3292422 100644 
 - - - a / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 + + + b / test / unit / org / apache / cassandra / db / RangeTombstoneTest . java 
 @ @ - 39 , 7 + 39 , 6 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . IndexType ; 
 import org . apache . cassandra . db . columniterator . OnDiskAtomIterator ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 - import org . apache . cassandra . db . compaction . LeveledCompactionStrategy ; 
 import org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . composites . CellNames ; 
 @ @ - 544 , 45 + 543 , 6 @ @ public class RangeTombstoneTest extends SchemaLoader 
 } 
 
 @ Test 
 - public void testCompactionOfRangeTombstonesCoveredByRowTombstone ( ) throws Exception 
 - { 
 - long testTimeStamp = 1451606400L ; / / 01 / 01 / 2016 : 00 : 00 : 00 GMT 
 - Keyspace table = Keyspace . open ( KSNAME ) ; 
 - ColumnFamilyStore cfs = table . getColumnFamilyStore ( CFNAME ) ; 
 - ByteBuffer key = ByteBufferUtil . bytes ( " k4 " ) ; 
 - 
 - / / remove any existing sstables before starting 
 - cfs . truncateBlocking ( ) ; 
 - cfs . disableAutoCompaction ( ) ; 
 - cfs . setCompactionStrategyClass ( LeveledCompactionStrategy . class . getCanonicalName ( ) ) ; 
 - 
 - Mutation rm = new Mutation ( KSNAME , key ) ; 
 - for ( int i = 1 ; i < 11 ; i + = 2 , testTimeStamp + = i * 10 ) 
 - add ( rm , i , testTimeStamp ) ; 
 - rm . apply ( ) ; 
 - cfs . forceBlockingFlush ( ) ; 
 - 
 - rm = new Mutation ( KSNAME , key ) ; 
 - ColumnFamily cf = rm . addOrGet ( CFNAME ) ; 
 - 
 - / / Write the covering row tombstone 
 - cf . delete ( new DeletionTime ( + + testTimeStamp , ( int ) testTimeStamp ) ) ; 
 - 
 - / / Create range tombstones covered by row tombstone above . 
 - for ( int i = 1 ; i < 11 ; i + = 2 , testTimeStamp - = i * 5 ) 
 - delete ( cf , 0 , 7 , testTimeStamp ) ; 
 - rm . apply ( ) ; 
 - cfs . forceBlockingFlush ( ) ; 
 - 
 - / / there should be 2 sstables 
 - assertEquals ( 2 , cfs . getSSTables ( ) . size ( ) ) ; 
 - 
 - / / compact down to nothing 
 - CompactionManager . instance . performMaximal ( cfs ) ; 
 - assertEquals ( 0 , cfs . getSSTables ( ) . size ( ) ) ; 
 - } 
 - 
 - @ Test 
 public void testOverwritesToDeletedColumns ( ) throws Exception 
 { 
 Keyspace table = Keyspace . open ( KSNAME ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
