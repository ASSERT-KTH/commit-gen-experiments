BLEU SCORE: 0.03283637368030199

TEST MSG: Avoid memory allocation when searching index summary
GENERATED MSG: Introduce SafeMemory for CompressionMetadata . Writer

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d326313 . . a6adfe0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 <nl> + * Avoid memory allocation when searching index summary ( CASSANDRA - 8793 ) <nl> * Optimise ( Time ) ? UUIDType Comparisons ( CASSANDRA - 8730 ) <nl> * Make CRC32Ex into a separate maven dependency ( CASSANDRA - 8836 ) <nl> * Use preloaded jemalloc w / Unsafe ( CASSANDRA - 8714 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> index 7e4619e . . c590d1a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . io . util . Memory ; <nl> import org . apache . cassandra . io . util . MemoryOutputStream ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . concurrent . WrappedSharedCloseable ; <nl> + import org . apache . cassandra . utils . memory . MemoryUtil ; <nl> <nl> import static org . apache . cassandra . io . sstable . Downsampling . BASE _ SAMPLING _ LEVEL ; <nl> <nl> @ @ - 105 , 11 + 106 , 13 @ @ public class IndexSummary extends WrappedSharedCloseable <nl> / / Harmony ' s Collections implementation <nl> public int binarySearch ( RowPosition key ) <nl> { <nl> + ByteBuffer hollow = MemoryUtil . getHollowDirectByteBuffer ( ) ; <nl> int low = 0 , mid = offsetCount , high = mid - 1 , result = - 1 ; <nl> while ( low < = high ) <nl> { <nl> mid = ( low + high ) > > 1 ; <nl> - result = - DecoratedKey . compareTo ( partitioner , ByteBuffer . wrap ( getKey ( mid ) ) , key ) ; <nl> + fillTemporaryKey ( mid , hollow ) ; <nl> + result = - DecoratedKey . compareTo ( partitioner , hollow , key ) ; <nl> if ( result > 0 ) <nl> { <nl> low = mid + 1 ; <nl> @ @ - 147 , 6 + 150 , 13 @ @ public class IndexSummary extends WrappedSharedCloseable <nl> return key ; <nl> } <nl> <nl> + private void fillTemporaryKey ( int index , ByteBuffer buffer ) <nl> + { <nl> + long start = getPositionInSummary ( index ) ; <nl> + int keySize = ( int ) ( calculateEnd ( index ) - start - 8L ) ; <nl> + entries . setByteBuffer ( buffer , start , keySize ) ; <nl> + } <nl> + <nl> public long getPosition ( int index ) <nl> { <nl> return entries . getLong ( calculateEnd ( index ) - 8 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java <nl> index 892e240 . . 2e96d03 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java <nl> @ @ - 107 , 8 + 107 , 8 @ @ public class IndexSummaryBuilder implements AutoCloseable <nl> <nl> / / for initializing data structures , adjust our estimates based on the sampling level <nl> maxExpectedEntries = Math . max ( 1 , ( maxExpectedEntries * samplingLevel ) / BASE _ SAMPLING _ LEVEL ) ; <nl> - offsets = new SafeMemoryWriter ( 4 * maxExpectedEntries ) . withByteOrder ( ByteOrder . nativeOrder ( ) ) ; <nl> - entries = new SafeMemoryWriter ( 40 * maxExpectedEntries ) . withByteOrder ( ByteOrder . nativeOrder ( ) ) ; <nl> + offsets = new SafeMemoryWriter ( 4 * maxExpectedEntries ) . order ( ByteOrder . nativeOrder ( ) ) ; <nl> + entries = new SafeMemoryWriter ( 40 * maxExpectedEntries ) . order ( ByteOrder . nativeOrder ( ) ) ; <nl> setNextSamplePosition ( - minIndexInterval ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java <nl> index e12064d . . 78a3ea5 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / Memory . java <nl> + + + b / src / java / org / apache / cassandra / io / util / Memory . java <nl> @ @ - 182 , 7 + 182 , 7 @ @ public class Memory implements AutoCloseable <nl> <nl> public void setShort ( long offset , short l ) <nl> { <nl> - checkBounds ( offset , offset + 4 ) ; <nl> + checkBounds ( offset , offset + 2 ) ; <nl> if ( unaligned ) <nl> { <nl> unsafe . putShort ( peer + offset , l ) ; <nl> @ @ - 245 , 9 + 245 , 7 @ @ public class Memory implements AutoCloseable <nl> else if ( count = = 0 ) <nl> return ; <nl> <nl> - long end = memoryOffset + count ; <nl> - checkBounds ( memoryOffset , end ) ; <nl> - <nl> + checkBounds ( memoryOffset , memoryOffset + count ) ; <nl> unsafe . copyMemory ( buffer , BYTE _ ARRAY _ BASE _ OFFSET + bufferOffset , null , peer + memoryOffset , count ) ; <nl> } <nl> <nl> @ @ - 343 , 6 + 341 , 8 @ @ public class Memory implements AutoCloseable <nl> <nl> public void put ( long trgOffset , Memory memory , long srcOffset , long size ) <nl> { <nl> + checkBounds ( trgOffset , trgOffset + size ) ; <nl> + memory . checkBounds ( srcOffset , srcOffset + size ) ; <nl> unsafe . copyMemory ( memory . peer + srcOffset , peer + trgOffset , size ) ; <nl> } <nl> <nl> @ @ - 401 , 6 + 401 , 19 @ @ public class Memory implements AutoCloseable <nl> return result ; <nl> } <nl> <nl> + public ByteBuffer asByteBuffer ( long offset , int length ) <nl> + { <nl> + checkBounds ( offset , offset + length ) ; <nl> + return MemoryUtil . getByteBuffer ( peer + offset , length ) ; <nl> + } <nl> + <nl> + / / MUST provide a buffer created via MemoryUtil . getHollowDirectByteBuffer ( ) <nl> + public void setByteBuffer ( ByteBuffer buffer , long offset , int length ) <nl> + { <nl> + checkBounds ( offset , offset + length ) ; <nl> + MemoryUtil . setByteBuffer ( buffer , peer + offset , length ) ; <nl> + } <nl> + <nl> public String toString ( ) <nl> { <nl> return toString ( peer , size ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java b / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java <nl> index 1998cc6 . . 6c87cf9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> buffer = new SafeMemory ( initialCapacity ) ; <nl> } <nl> <nl> + @ Override <nl> public void write ( byte [ ] buffer , int offset , int count ) <nl> { <nl> long newLength = ensureCapacity ( count ) ; <nl> @ @ - 40 , 6 + 41 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> this . length = newLength ; <nl> } <nl> <nl> + @ Override <nl> public void write ( int oneByte ) <nl> { <nl> long newLength = ensureCapacity ( 1 ) ; <nl> @ @ - 47 , 6 + 49 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> length = newLength ; <nl> } <nl> <nl> + @ Override <nl> public void writeShort ( int val ) throws IOException <nl> { <nl> if ( order ! = ByteOrder . nativeOrder ( ) ) <nl> @ @ - 56 , 6 + 59 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> length = newLength ; <nl> } <nl> <nl> + @ Override <nl> public void writeInt ( int val ) <nl> { <nl> if ( order ! = ByteOrder . nativeOrder ( ) ) <nl> @ @ - 65 , 6 + 69 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> length = newLength ; <nl> } <nl> <nl> + @ Override <nl> public void writeLong ( long val ) <nl> { <nl> if ( order ! = ByteOrder . nativeOrder ( ) ) <nl> @ @ - 74 , 6 + 79 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> length = newLength ; <nl> } <nl> <nl> + @ Override <nl> public void write ( ByteBuffer buffer ) <nl> { <nl> long newLength = ensureCapacity ( buffer . remaining ( ) ) ; <nl> @ @ - 81 , 10 + 87 , 11 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> length = newLength ; <nl> } <nl> <nl> - public void write ( Memory memory ) <nl> + @ Override <nl> + public void write ( Memory memory , long offset , long size ) <nl> { <nl> - long newLength = ensureCapacity ( memory . size ( ) ) ; <nl> - buffer . put ( length , memory , 0 , memory . size ( ) ) ; <nl> + long newLength = ensureCapacity ( size ) ; <nl> + buffer . put ( length , memory , offset , size ) ; <nl> length = newLength ; <nl> } <nl> <nl> @ @ - 128 , 7 + 135 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl <nl> <nl> / / TODO : consider hoisting this into DataOutputPlus , since most implementations can copy with this gracefully <nl> / / this would simplify IndexSummary . IndexSummarySerializer . serialize ( ) <nl> - public SafeMemoryWriter withByteOrder ( ByteOrder order ) <nl> + public SafeMemoryWriter order ( ByteOrder order ) <nl> { <nl> this . order = order ; <nl> return this ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> index 60b2b7f . . 8304bd5 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java <nl> @ @ - 124 , 6 + 124 , 13 @ @ public abstract class MemoryUtil <nl> <nl> public static ByteBuffer getByteBuffer ( long address , int length ) <nl> { <nl> + ByteBuffer instance = getHollowDirectByteBuffer ( ) ; <nl> + setByteBuffer ( instance , address , length ) ; <nl> + return instance ; <nl> + } <nl> + <nl> + public static ByteBuffer getHollowDirectByteBuffer ( ) <nl> + { <nl> ByteBuffer instance ; <nl> try <nl> { <nl> @ @ - 133 , 12 + 140 , 15 @ @ public abstract class MemoryUtil <nl> { <nl> throw new AssertionError ( e ) ; <nl> } <nl> + instance . order ( ByteOrder . nativeOrder ( ) ) ; <nl> + return instance ; <nl> + } <nl> <nl> + public static void setByteBuffer ( ByteBuffer instance , long address , int length ) <nl> + { <nl> unsafe . putLong ( instance , DIRECT _ BYTE _ BUFFER _ ADDRESS _ OFFSET , address ) ; <nl> unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ CAPACITY _ OFFSET , length ) ; <nl> unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ LIMIT _ OFFSET , length ) ; <nl> - instance . order ( ByteOrder . nativeOrder ( ) ) ; <nl> - return instance ; <nl> } <nl> <nl> public static long getLongByByte ( long address )
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d326313 . . a6adfe0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 
 + * Avoid memory allocation when searching index summary ( CASSANDRA - 8793 ) 
 * Optimise ( Time ) ? UUIDType Comparisons ( CASSANDRA - 8730 ) 
 * Make CRC32Ex into a separate maven dependency ( CASSANDRA - 8836 ) 
 * Use preloaded jemalloc w / Unsafe ( CASSANDRA - 8714 ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 index 7e4619e . . c590d1a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import org . apache . cassandra . io . util . Memory ; 
 import org . apache . cassandra . io . util . MemoryOutputStream ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . concurrent . WrappedSharedCloseable ; 
 + import org . apache . cassandra . utils . memory . MemoryUtil ; 
 
 import static org . apache . cassandra . io . sstable . Downsampling . BASE _ SAMPLING _ LEVEL ; 
 
 @ @ - 105 , 11 + 106 , 13 @ @ public class IndexSummary extends WrappedSharedCloseable 
 / / Harmony ' s Collections implementation 
 public int binarySearch ( RowPosition key ) 
 { 
 + ByteBuffer hollow = MemoryUtil . getHollowDirectByteBuffer ( ) ; 
 int low = 0 , mid = offsetCount , high = mid - 1 , result = - 1 ; 
 while ( low < = high ) 
 { 
 mid = ( low + high ) > > 1 ; 
 - result = - DecoratedKey . compareTo ( partitioner , ByteBuffer . wrap ( getKey ( mid ) ) , key ) ; 
 + fillTemporaryKey ( mid , hollow ) ; 
 + result = - DecoratedKey . compareTo ( partitioner , hollow , key ) ; 
 if ( result > 0 ) 
 { 
 low = mid + 1 ; 
 @ @ - 147 , 6 + 150 , 13 @ @ public class IndexSummary extends WrappedSharedCloseable 
 return key ; 
 } 
 
 + private void fillTemporaryKey ( int index , ByteBuffer buffer ) 
 + { 
 + long start = getPositionInSummary ( index ) ; 
 + int keySize = ( int ) ( calculateEnd ( index ) - start - 8L ) ; 
 + entries . setByteBuffer ( buffer , start , keySize ) ; 
 + } 
 + 
 public long getPosition ( int index ) 
 { 
 return entries . getLong ( calculateEnd ( index ) - 8 ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java b / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java 
 index 892e240 . . 2e96d03 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummaryBuilder . java 
 @ @ - 107 , 8 + 107 , 8 @ @ public class IndexSummaryBuilder implements AutoCloseable 
 
 / / for initializing data structures , adjust our estimates based on the sampling level 
 maxExpectedEntries = Math . max ( 1 , ( maxExpectedEntries * samplingLevel ) / BASE _ SAMPLING _ LEVEL ) ; 
 - offsets = new SafeMemoryWriter ( 4 * maxExpectedEntries ) . withByteOrder ( ByteOrder . nativeOrder ( ) ) ; 
 - entries = new SafeMemoryWriter ( 40 * maxExpectedEntries ) . withByteOrder ( ByteOrder . nativeOrder ( ) ) ; 
 + offsets = new SafeMemoryWriter ( 4 * maxExpectedEntries ) . order ( ByteOrder . nativeOrder ( ) ) ; 
 + entries = new SafeMemoryWriter ( 40 * maxExpectedEntries ) . order ( ByteOrder . nativeOrder ( ) ) ; 
 setNextSamplePosition ( - minIndexInterval ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / Memory . java b / src / java / org / apache / cassandra / io / util / Memory . java 
 index e12064d . . 78a3ea5 100644 
 - - - a / src / java / org / apache / cassandra / io / util / Memory . java 
 + + + b / src / java / org / apache / cassandra / io / util / Memory . java 
 @ @ - 182 , 7 + 182 , 7 @ @ public class Memory implements AutoCloseable 
 
 public void setShort ( long offset , short l ) 
 { 
 - checkBounds ( offset , offset + 4 ) ; 
 + checkBounds ( offset , offset + 2 ) ; 
 if ( unaligned ) 
 { 
 unsafe . putShort ( peer + offset , l ) ; 
 @ @ - 245 , 9 + 245 , 7 @ @ public class Memory implements AutoCloseable 
 else if ( count = = 0 ) 
 return ; 
 
 - long end = memoryOffset + count ; 
 - checkBounds ( memoryOffset , end ) ; 
 - 
 + checkBounds ( memoryOffset , memoryOffset + count ) ; 
 unsafe . copyMemory ( buffer , BYTE _ ARRAY _ BASE _ OFFSET + bufferOffset , null , peer + memoryOffset , count ) ; 
 } 
 
 @ @ - 343 , 6 + 341 , 8 @ @ public class Memory implements AutoCloseable 
 
 public void put ( long trgOffset , Memory memory , long srcOffset , long size ) 
 { 
 + checkBounds ( trgOffset , trgOffset + size ) ; 
 + memory . checkBounds ( srcOffset , srcOffset + size ) ; 
 unsafe . copyMemory ( memory . peer + srcOffset , peer + trgOffset , size ) ; 
 } 
 
 @ @ - 401 , 6 + 401 , 19 @ @ public class Memory implements AutoCloseable 
 return result ; 
 } 
 
 + public ByteBuffer asByteBuffer ( long offset , int length ) 
 + { 
 + checkBounds ( offset , offset + length ) ; 
 + return MemoryUtil . getByteBuffer ( peer + offset , length ) ; 
 + } 
 + 
 + / / MUST provide a buffer created via MemoryUtil . getHollowDirectByteBuffer ( ) 
 + public void setByteBuffer ( ByteBuffer buffer , long offset , int length ) 
 + { 
 + checkBounds ( offset , offset + length ) ; 
 + MemoryUtil . setByteBuffer ( buffer , peer + offset , length ) ; 
 + } 
 + 
 public String toString ( ) 
 { 
 return toString ( peer , size ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java b / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java 
 index 1998cc6 . . 6c87cf9 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java 
 + + + b / src / java / org / apache / cassandra / io / util / SafeMemoryWriter . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 buffer = new SafeMemory ( initialCapacity ) ; 
 } 
 
 + @ Override 
 public void write ( byte [ ] buffer , int offset , int count ) 
 { 
 long newLength = ensureCapacity ( count ) ; 
 @ @ - 40 , 6 + 41 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 this . length = newLength ; 
 } 
 
 + @ Override 
 public void write ( int oneByte ) 
 { 
 long newLength = ensureCapacity ( 1 ) ; 
 @ @ - 47 , 6 + 49 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 length = newLength ; 
 } 
 
 + @ Override 
 public void writeShort ( int val ) throws IOException 
 { 
 if ( order ! = ByteOrder . nativeOrder ( ) ) 
 @ @ - 56 , 6 + 59 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 length = newLength ; 
 } 
 
 + @ Override 
 public void writeInt ( int val ) 
 { 
 if ( order ! = ByteOrder . nativeOrder ( ) ) 
 @ @ - 65 , 6 + 69 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 length = newLength ; 
 } 
 
 + @ Override 
 public void writeLong ( long val ) 
 { 
 if ( order ! = ByteOrder . nativeOrder ( ) ) 
 @ @ - 74 , 6 + 79 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 length = newLength ; 
 } 
 
 + @ Override 
 public void write ( ByteBuffer buffer ) 
 { 
 long newLength = ensureCapacity ( buffer . remaining ( ) ) ; 
 @ @ - 81 , 10 + 87 , 11 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 length = newLength ; 
 } 
 
 - public void write ( Memory memory ) 
 + @ Override 
 + public void write ( Memory memory , long offset , long size ) 
 { 
 - long newLength = ensureCapacity ( memory . size ( ) ) ; 
 - buffer . put ( length , memory , 0 , memory . size ( ) ) ; 
 + long newLength = ensureCapacity ( size ) ; 
 + buffer . put ( length , memory , offset , size ) ; 
 length = newLength ; 
 } 
 
 @ @ - 128 , 7 + 135 , 7 @ @ public class SafeMemoryWriter extends AbstractDataOutput implements DataOutputPl 
 
 / / TODO : consider hoisting this into DataOutputPlus , since most implementations can copy with this gracefully 
 / / this would simplify IndexSummary . IndexSummarySerializer . serialize ( ) 
 - public SafeMemoryWriter withByteOrder ( ByteOrder order ) 
 + public SafeMemoryWriter order ( ByteOrder order ) 
 { 
 this . order = order ; 
 return this ; 
 diff - - git a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 index 60b2b7f . . 8304bd5 100644 
 - - - a / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / memory / MemoryUtil . java 
 @ @ - 124 , 6 + 124 , 13 @ @ public abstract class MemoryUtil 
 
 public static ByteBuffer getByteBuffer ( long address , int length ) 
 { 
 + ByteBuffer instance = getHollowDirectByteBuffer ( ) ; 
 + setByteBuffer ( instance , address , length ) ; 
 + return instance ; 
 + } 
 + 
 + public static ByteBuffer getHollowDirectByteBuffer ( ) 
 + { 
 ByteBuffer instance ; 
 try 
 { 
 @ @ - 133 , 12 + 140 , 15 @ @ public abstract class MemoryUtil 
 { 
 throw new AssertionError ( e ) ; 
 } 
 + instance . order ( ByteOrder . nativeOrder ( ) ) ; 
 + return instance ; 
 + } 
 
 + public static void setByteBuffer ( ByteBuffer instance , long address , int length ) 
 + { 
 unsafe . putLong ( instance , DIRECT _ BYTE _ BUFFER _ ADDRESS _ OFFSET , address ) ; 
 unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ CAPACITY _ OFFSET , length ) ; 
 unsafe . putInt ( instance , DIRECT _ BYTE _ BUFFER _ LIMIT _ OFFSET , length ) ; 
 - instance . order ( ByteOrder . nativeOrder ( ) ) ; 
 - return instance ; 
 } 
 
 public static long getLongByByte ( long address )

NEAREST DIFF:
ELIMINATEDSENTENCE
