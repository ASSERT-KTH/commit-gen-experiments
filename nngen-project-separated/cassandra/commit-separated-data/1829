BLEU SCORE: 2.820893212548129E-4

TEST MSG: simplify
GENERATED MSG: re - clone slab - allocated keys in indexsummary

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> index 2e28d0b . . b270b2d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java <nl> @ @ - 267 , 19 + 267 , 16 @ @ public class BigTableScanner implements ISSTableScanner <nl> currentEntry = nextEntry ; <nl> } <nl> <nl> - long readEnd ; <nl> if ( ifile . isEOF ( ) ) <nl> { <nl> nextEntry = null ; <nl> nextKey = null ; <nl> - readEnd = dfile . length ( ) ; <nl> } <nl> else <nl> { <nl> / / we need the position of the start of the next key , regardless of whether it falls in the current range <nl> nextKey = sstable . partitioner . decorateKey ( ByteBufferUtil . readWithShortLength ( ifile ) ) ; <nl> nextEntry = rowIndexEntrySerializer . deserialize ( ifile , sstable . descriptor . version ) ; <nl> - readEnd = nextEntry . position ; <nl> <nl> if ( ! currentRange . contains ( nextKey ) ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0dae2d4 . . 92b023e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 70 , 7 + 70 , 7 @ @ <nl> * fix inconsistency of the CLI syntax when { } should be used instead of [ { } ] <nl> ( CASSANDRA - 3119 ) <nl> * rename CQL type names to match expected SQL behavior ( CASSANDRA - 3149 , 3031 ) <nl> - * Arena - based allocation for memtables ( CASSANDRA - 2252 , 3162 ) <nl> + * Arena - based allocation for memtables ( CASSANDRA - 2252 , 3162 , 3163 ) <nl> <nl> <nl> 0 . 8 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / db / MeteredFlusher . java b / src / java / org / apache / cassandra / db / MeteredFlusher . java <nl> index 62f270b . . 3960cd7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / MeteredFlusher . java <nl> + + + b / src / java / org / apache / cassandra / db / MeteredFlusher . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ class MeteredFlusher implements Runnable <nl> / ( 1 + cfs . indexManager . getIndexedColumns ( ) . size ( ) ) ) ; <nl> if ( size > ( DatabaseDescriptor . getTotalMemtableSpaceInMB ( ) * 1048576L - flushingBytes ) / maxInFlight ) <nl> { <nl> - logger . info ( " flushing high - traffic column family { } " , cfs ) ; <nl> + logger . info ( " flushing high - traffic column family { } ( estimated { } bytes ) " , cfs , size ) ; <nl> cfs . forceFlush ( ) ; <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> index ee354f9 . . c5bacdb 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java <nl> @ @ - 56 , 9 + 56 , 9 @ @ public class IndexSummary <nl> return keysWritten % DatabaseDescriptor . getIndexInterval ( ) = = 0 ; <nl> } <nl> <nl> - public void addEntry ( DecoratedKey < ? > decoratedKey , long indexPosition ) <nl> + public void addEntry ( DecoratedKey < ? > key , long indexPosition ) <nl> { <nl> - indexPositions . add ( new KeyPosition ( decoratedKey , indexPosition ) ) ; <nl> + indexPositions . add ( new KeyPosition ( SSTable . getMinimalKey ( key ) , indexPosition ) ) ; <nl> } <nl> <nl> public void maybeAddEntry ( DecoratedKey < ? > decoratedKey , long indexPosition ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index bbe8f30 . . 5b7576b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . RandomAccessReader ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + import org . apache . cassandra . utils . HeapAllocator ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> @ @ - 143 , 6 + 144 , 17 @ @ public abstract class SSTable <nl> return true ; <nl> } <nl> <nl> + / * * <nl> + * If the given @ param key occupies only part of a larger buffer , allocate a new buffer that is only <nl> + * as large as necessary . <nl> + * / <nl> + public static DecoratedKey < ? > getMinimalKey ( DecoratedKey < ? > key ) <nl> + { <nl> + return key . key . position ( ) > 0 | | key . key . hasRemaining ( ) <nl> + ? new DecoratedKey ( key . token , HeapAllocator . instance . clone ( key . key ) ) <nl> + : key ; <nl> + } <nl> + <nl> public String getFilename ( ) <nl> { <nl> return descriptor . filenameFor ( COMPONENT _ DATA ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index f5082df . . cdd763d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class SSTableReader extends SSTable <nl> assert components . contains ( Component . PRIMARY _ INDEX ) ; <nl> <nl> long start = System . currentTimeMillis ( ) ; <nl> - logger . info ( " Opening " + descriptor ) ; <nl> + logger . info ( " Opening { } ( { } bytes ) " , descriptor , new File ( descriptor . filenameFor ( COMPONENT _ DATA ) ) . length ( ) ) ; <nl> <nl> SSTableMetadata sstableMetadata = components . contains ( Component . STATS ) <nl> ? SSTableMetadata . serializer . deserialize ( descriptor ) <nl> @ @ - 315 , 8 + 315 , 8 @ @ public class SSTableReader extends SSTable <nl> { <nl> FileUtils . closeQuietly ( input ) ; <nl> } <nl> - this . first = left ; <nl> - this . last = right ; <nl> + this . first = getMinimalKey ( left ) ; <nl> + this . last = getMinimalKey ( right ) ; <nl> <nl> / / finalize the state of the reader <nl> ifile = ibuilder . complete ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index c2b72ff . . ff2e2df 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 316 , 8 + 316 , 8 @ @ public class SSTableWriter extends SSTable <nl> iwriter . bf , <nl> maxDataAge , <nl> sstableMetadata ) ; <nl> - sstable . first = this . first ; <nl> - sstable . last = this . last ; <nl> + sstable . first = getMinimalKey ( first ) ; <nl> + sstable . last = getMinimalKey ( last ) ; <nl> iwriter = null ; <nl> dbuilder = null ; <nl> return sstable ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 index 2e28d0b . . b270b2d 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableScanner . java 
 @ @ - 267 , 19 + 267 , 16 @ @ public class BigTableScanner implements ISSTableScanner 
 currentEntry = nextEntry ; 
 } 
 
 - long readEnd ; 
 if ( ifile . isEOF ( ) ) 
 { 
 nextEntry = null ; 
 nextKey = null ; 
 - readEnd = dfile . length ( ) ; 
 } 
 else 
 { 
 / / we need the position of the start of the next key , regardless of whether it falls in the current range 
 nextKey = sstable . partitioner . decorateKey ( ByteBufferUtil . readWithShortLength ( ifile ) ) ; 
 nextEntry = rowIndexEntrySerializer . deserialize ( ifile , sstable . descriptor . version ) ; 
 - readEnd = nextEntry . position ; 
 
 if ( ! currentRange . contains ( nextKey ) ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0dae2d4 . . 92b023e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 70 , 7 + 70 , 7 @ @ 
 * fix inconsistency of the CLI syntax when { } should be used instead of [ { } ] 
 ( CASSANDRA - 3119 ) 
 * rename CQL type names to match expected SQL behavior ( CASSANDRA - 3149 , 3031 ) 
 - * Arena - based allocation for memtables ( CASSANDRA - 2252 , 3162 ) 
 + * Arena - based allocation for memtables ( CASSANDRA - 2252 , 3162 , 3163 ) 
 
 
 0 . 8 . 6 
 diff - - git a / src / java / org / apache / cassandra / db / MeteredFlusher . java b / src / java / org / apache / cassandra / db / MeteredFlusher . java 
 index 62f270b . . 3960cd7 100644 
 - - - a / src / java / org / apache / cassandra / db / MeteredFlusher . java 
 + + + b / src / java / org / apache / cassandra / db / MeteredFlusher . java 
 @ @ - 59 , 7 + 59 , 7 @ @ class MeteredFlusher implements Runnable 
 / ( 1 + cfs . indexManager . getIndexedColumns ( ) . size ( ) ) ) ; 
 if ( size > ( DatabaseDescriptor . getTotalMemtableSpaceInMB ( ) * 1048576L - flushingBytes ) / maxInFlight ) 
 { 
 - logger . info ( " flushing high - traffic column family { } " , cfs ) ; 
 + logger . info ( " flushing high - traffic column family { } ( estimated { } bytes ) " , cfs , size ) ; 
 cfs . forceFlush ( ) ; 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 index ee354f9 . . c5bacdb 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / IndexSummary . java 
 @ @ - 56 , 9 + 56 , 9 @ @ public class IndexSummary 
 return keysWritten % DatabaseDescriptor . getIndexInterval ( ) = = 0 ; 
 } 
 
 - public void addEntry ( DecoratedKey < ? > decoratedKey , long indexPosition ) 
 + public void addEntry ( DecoratedKey < ? > key , long indexPosition ) 
 { 
 - indexPositions . add ( new KeyPosition ( decoratedKey , indexPosition ) ) ; 
 + indexPositions . add ( new KeyPosition ( SSTable . getMinimalKey ( key ) , indexPosition ) ) ; 
 } 
 
 public void maybeAddEntry ( DecoratedKey < ? > decoratedKey , long indexPosition ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index bbe8f30 . . 5b7576b 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . RandomAccessReader ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 + import org . apache . cassandra . utils . HeapAllocator ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 @ @ - 143 , 6 + 144 , 17 @ @ public abstract class SSTable 
 return true ; 
 } 
 
 + / * * 
 + * If the given @ param key occupies only part of a larger buffer , allocate a new buffer that is only 
 + * as large as necessary . 
 + * / 
 + public static DecoratedKey < ? > getMinimalKey ( DecoratedKey < ? > key ) 
 + { 
 + return key . key . position ( ) > 0 | | key . key . hasRemaining ( ) 
 + ? new DecoratedKey ( key . token , HeapAllocator . instance . clone ( key . key ) ) 
 + : key ; 
 + } 
 + 
 public String getFilename ( ) 
 { 
 return descriptor . filenameFor ( COMPONENT _ DATA ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index f5082df . . cdd763d 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 127 , 7 + 127 , 7 @ @ public class SSTableReader extends SSTable 
 assert components . contains ( Component . PRIMARY _ INDEX ) ; 
 
 long start = System . currentTimeMillis ( ) ; 
 - logger . info ( " Opening " + descriptor ) ; 
 + logger . info ( " Opening { } ( { } bytes ) " , descriptor , new File ( descriptor . filenameFor ( COMPONENT _ DATA ) ) . length ( ) ) ; 
 
 SSTableMetadata sstableMetadata = components . contains ( Component . STATS ) 
 ? SSTableMetadata . serializer . deserialize ( descriptor ) 
 @ @ - 315 , 8 + 315 , 8 @ @ public class SSTableReader extends SSTable 
 { 
 FileUtils . closeQuietly ( input ) ; 
 } 
 - this . first = left ; 
 - this . last = right ; 
 + this . first = getMinimalKey ( left ) ; 
 + this . last = getMinimalKey ( right ) ; 
 
 / / finalize the state of the reader 
 ifile = ibuilder . complete ( descriptor . filenameFor ( Component . PRIMARY _ INDEX ) ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index c2b72ff . . ff2e2df 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 316 , 8 + 316 , 8 @ @ public class SSTableWriter extends SSTable 
 iwriter . bf , 
 maxDataAge , 
 sstableMetadata ) ; 
 - sstable . first = this . first ; 
 - sstable . last = this . last ; 
 + sstable . first = getMinimalKey ( first ) ; 
 + sstable . last = getMinimalKey ( last ) ; 
 iwriter = null ; 
 dbuilder = null ; 
 return sstable ;
