BLEU SCORE: 0.02383853510228548

TEST MSG: Make = optional in CREATE / ALTER ROLE statements
GENERATED MSG: update cql consistency levels

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 07f3448 . . 6a3d059 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> 3 . 0 <nl> - * Add role based access control ( CASSANDRA - 7653 , 8650 , 7216 ) <nl> + * Add role based access control ( CASSANDRA - 7653 , 8650 , 7216 , 8760 ) <nl> * Avoid accessing partitioner through StorageProxy ( CASSANDRA - 8244 , 8268 ) <nl> * Upgrade Metrics library and remove depricated metrics ( CASSANDRA - 5657 ) <nl> * Serializing Row cache alternative , fully off heap ( CASSANDRA - 7438 ) <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index 9c4e633 . . 6837439 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 1191 , 8 + 1191 , 8 @ @ syntax _ rules + = r ' ' ' <nl> ( " SUPERUSER " | " NOSUPERUSER " ) ? <nl> ( " LOGIN " | " NOLOGIN " ) ? <nl> ; <nl> - < roleProperty > : : = " PASSWORD " < stringLiteral > <nl> - | " OPTIONS " < mapLiteral > <nl> + < roleProperty > : : = " PASSWORD " " = " ? < stringLiteral > <nl> + | " OPTIONS " " = " ? < mapLiteral > <nl> ; <nl> <nl> < dropRoleStatement > : : = " DROP " " ROLE " < rolename > <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> index 5d5c868 . . d941bc6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / Cql . g <nl> + + + b / src / java / org / apache / cassandra / cql3 / Cql . g <nl> @ @ - 1023 , 8 + 1023 , 8 @ @ roleOptions [ RoleOptions opts ] <nl> ; <nl> <nl> roleOption [ RoleOptions opts ] <nl> - : k = K _ PASSWORD v = STRING _ LITERAL { opts . put ( $ k . text , $ v . text ) ; } <nl> - | k = K _ OPTIONS m = mapLiteral { opts . put ( IRoleManager . Option . OPTIONS . name ( ) , convertPropertyMap ( m ) ) ; } <nl> + : k = K _ PASSWORD ' = ' ? v = STRING _ LITERAL { opts . put ( $ k . text , $ v . text ) ; } <nl> + | k = K _ OPTIONS ' = ' ? m = mapLiteral { opts . put ( IRoleManager . Option . OPTIONS . name ( ) , convertPropertyMap ( m ) ) ; } <nl> ; <nl> <nl> / * * DEFINITIONS * * /
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / ReversedType . java b / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> index 8963b7b . . e9135d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / ReversedType . java <nl> @ @ - 21 , 6 + 21 , 9 @ @ package org . apache . cassandra . db . marshal ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> + import java . util . List ; <nl> + <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> <nl> public class ReversedType < T > extends AbstractType < T > <nl> { <nl> @ @ - 30 , 6 + 33 , 14 @ @ public class ReversedType < T > extends AbstractType < T > <nl> / / package protected for unit tests sake <nl> final AbstractType < T > baseType ; <nl> <nl> + public static < T > ReversedType < T > getInstance ( TypeParser parser ) throws ConfigurationException <nl> + { <nl> + List < AbstractType > types = parser . getTypeParameters ( ) ; <nl> + if ( types . size ( ) ! = 1 ) <nl> + throw new ConfigurationException ( " ReversedType takes exactly one argument , " + types . size ( ) + " given " ) ; <nl> + return getInstance ( types . get ( 0 ) ) ; <nl> + } <nl> + <nl> public static synchronized < T > ReversedType < T > getInstance ( AbstractType < T > baseType ) <nl> { <nl> ReversedType type = instances . get ( baseType ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 07f3448 . . 6a3d059 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 3 . 0 
 - * Add role based access control ( CASSANDRA - 7653 , 8650 , 7216 ) 
 + * Add role based access control ( CASSANDRA - 7653 , 8650 , 7216 , 8760 ) 
 * Avoid accessing partitioner through StorageProxy ( CASSANDRA - 8244 , 8268 ) 
 * Upgrade Metrics library and remove depricated metrics ( CASSANDRA - 5657 ) 
 * Serializing Row cache alternative , fully off heap ( CASSANDRA - 7438 ) 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index 9c4e633 . . 6837439 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 1191 , 8 + 1191 , 8 @ @ syntax _ rules + = r ' ' ' 
 ( " SUPERUSER " | " NOSUPERUSER " ) ? 
 ( " LOGIN " | " NOLOGIN " ) ? 
 ; 
 - < roleProperty > : : = " PASSWORD " < stringLiteral > 
 - | " OPTIONS " < mapLiteral > 
 + < roleProperty > : : = " PASSWORD " " = " ? < stringLiteral > 
 + | " OPTIONS " " = " ? < mapLiteral > 
 ; 
 
 < dropRoleStatement > : : = " DROP " " ROLE " < rolename > 
 diff - - git a / src / java / org / apache / cassandra / cql3 / Cql . g b / src / java / org / apache / cassandra / cql3 / Cql . g 
 index 5d5c868 . . d941bc6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / Cql . g 
 + + + b / src / java / org / apache / cassandra / cql3 / Cql . g 
 @ @ - 1023 , 8 + 1023 , 8 @ @ roleOptions [ RoleOptions opts ] 
 ; 
 
 roleOption [ RoleOptions opts ] 
 - : k = K _ PASSWORD v = STRING _ LITERAL { opts . put ( $ k . text , $ v . text ) ; } 
 - | k = K _ OPTIONS m = mapLiteral { opts . put ( IRoleManager . Option . OPTIONS . name ( ) , convertPropertyMap ( m ) ) ; } 
 + : k = K _ PASSWORD ' = ' ? v = STRING _ LITERAL { opts . put ( $ k . text , $ v . text ) ; } 
 + | k = K _ OPTIONS ' = ' ? m = mapLiteral { opts . put ( IRoleManager . Option . OPTIONS . name ( ) , convertPropertyMap ( m ) ) ; } 
 ; 
 
 / * * DEFINITIONS * * /

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / ReversedType . java b / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 index 8963b7b . . e9135d7 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / ReversedType . java 
 @ @ - 21 , 6 + 21 , 9 @ @ package org . apache . cassandra . db . marshal ; 
 import java . nio . ByteBuffer ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 + import java . util . List ; 
 + 
 + import org . apache . cassandra . config . ConfigurationException ; 
 
 public class ReversedType < T > extends AbstractType < T > 
 { 
 @ @ - 30 , 6 + 33 , 14 @ @ public class ReversedType < T > extends AbstractType < T > 
 / / package protected for unit tests sake 
 final AbstractType < T > baseType ; 
 
 + public static < T > ReversedType < T > getInstance ( TypeParser parser ) throws ConfigurationException 
 + { 
 + List < AbstractType > types = parser . getTypeParameters ( ) ; 
 + if ( types . size ( ) ! = 1 ) 
 + throw new ConfigurationException ( " ReversedType takes exactly one argument , " + types . size ( ) + " given " ) ; 
 + return getInstance ( types . get ( 0 ) ) ; 
 + } 
 + 
 public static synchronized < T > ReversedType < T > getInstance ( AbstractType < T > baseType ) 
 { 
 ReversedType type = instances . get ( baseType ) ;
