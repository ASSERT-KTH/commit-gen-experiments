BLEU SCORE: 0.08116697886877475

TEST MSG: ninja fix heap usage ratio logging
GENERATED MSG: fix typo

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index ec747b3 . . aec5f35 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1200 , 7 + 1200 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> private static String ratio ( float onHeap , float offHeap ) <nl> { <nl> - return String . format ( " % . 0f / % . 0f " , onHeap , offHeap ) ; <nl> + return String . format ( " % . 2f / % . 2f " , onHeap , offHeap ) ; <nl> } <nl> <nl> public void maybeUpdateRowCache ( DecoratedKey key )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b937a61 . . c3e4cb1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 7 @ @ <nl> used for creating row keys ( CASSANDRA - 2108 ) <nl> * validate index names for \ w + ( CASSANDRA - 2196 ) <nl> * Fix Cassandra cli to respect timeout if schema does not settle ( CASSANDRA - 2187 ) <nl> + * update memtable _ throughput to be a long ( CASSANDRA - 2158 ) <nl> <nl> <nl> 0 . 7 . 2 <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index e64ccb3 . . e8c414e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 207 , 6 + 207 , 7 @ @ public final class CFMetaData <nl> this . memtableThroughputInMb = memtableThroughputInMb = = null <nl> ? DEFAULT _ MEMTABLE _ THROUGHPUT _ IN _ MB <nl> : memtableThroughputInMb ; <nl> + <nl> this . memtableOperationsInMillions = memtableOperationsInMillions = = null <nl> ? DEFAULT _ MEMTABLE _ OPERATIONS _ IN _ MILLIONS <nl> : memtableOperationsInMillions ; <nl> @ @ - 881 , 28 + 882 , 22 @ @ public final class CFMetaData <nl> <nl> public static void validateMemtableSettings ( org . apache . cassandra . thrift . CfDef cf _ def ) throws ConfigurationException <nl> { <nl> - if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) & & cf _ def . memtable _ flush _ after _ mins < = 0 ) { <nl> - throw new ConfigurationException ( " memtable _ flush _ after _ mins cannot be non - positive " ) ; <nl> - } <nl> - if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) & & cf _ def . memtable _ throughput _ in _ mb < = 0 ) { <nl> - throw new ConfigurationException ( " memtable _ throughput _ in _ mb cannot be non - positive . " ) ; <nl> - } <nl> - if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) & & cf _ def . memtable _ operations _ in _ millions < = 0 ) { <nl> - throw new ConfigurationException ( " memtable _ operations _ in _ millions cannot be non - positive " ) ; <nl> - } <nl> + if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) ) <nl> + DatabaseDescriptor . validateMemtableFlushPeriod ( cf _ def . memtable _ flush _ after _ mins ) ; <nl> + if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) ) <nl> + DatabaseDescriptor . validateMemtableThroughput ( cf _ def . memtable _ throughput _ in _ mb ) ; <nl> + if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) ) <nl> + DatabaseDescriptor . validateMemtableOperations ( cf _ def . memtable _ operations _ in _ millions ) ; <nl> } <nl> <nl> public static void validateMemtableSettings ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException <nl> { <nl> - if ( cf _ def . memtable _ flush _ after _ mins ! = null & & cf _ def . memtable _ flush _ after _ mins < = 0 ) { <nl> - throw new ConfigurationException ( " memtable _ flush _ after _ mins cannot be non - positive " ) ; <nl> - } <nl> - if ( cf _ def . memtable _ throughput _ in _ mb ! = null & & cf _ def . memtable _ throughput _ in _ mb < = 0 ) { <nl> - throw new ConfigurationException ( " memtable _ throughput _ in _ mb cannot be non - positive . " ) ; <nl> - } <nl> - if ( cf _ def . memtable _ operations _ in _ millions ! = null & & cf _ def . memtable _ operations _ in _ millions < = 0 ) { <nl> - throw new ConfigurationException ( " memtable _ operations _ in _ millions cannot be non - positive " ) ; <nl> - } <nl> + if ( cf _ def . memtable _ flush _ after _ mins ! = null ) <nl> + DatabaseDescriptor . validateMemtableFlushPeriod ( cf _ def . memtable _ flush _ after _ mins ) ; <nl> + if ( cf _ def . memtable _ throughput _ in _ mb ! = null ) <nl> + DatabaseDescriptor . validateMemtableThroughput ( cf _ def . memtable _ throughput _ in _ mb ) ; <nl> + if ( cf _ def . memtable _ operations _ in _ millions ! = null ) <nl> + DatabaseDescriptor . validateMemtableOperations ( cf _ def . memtable _ operations _ in _ millions ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index a0747e9 . . 99313bb 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 1179 , 4 + 1179 , 24 @ @ public class DatabaseDescriptor <nl> { <nl> return conf . compaction _ preheat _ key _ cache ; <nl> } <nl> + <nl> + public static void validateMemtableThroughput ( int sizeInMB ) throws ConfigurationException <nl> + { <nl> + if ( sizeInMB < = 0 ) <nl> + throw new ConfigurationException ( " memtable _ throughput _ in _ mb must be greater than 0 . " ) ; <nl> + } <nl> + <nl> + public static void validateMemtableOperations ( double operationsInMillions ) throws ConfigurationException <nl> + { <nl> + if ( operationsInMillions < = 0 ) <nl> + throw new ConfigurationException ( " memtable _ operations _ in _ millions must be greater than 0 . 0 . " ) ; <nl> + if ( operationsInMillions > Long . MAX _ VALUE / 1024 * 1024 ) <nl> + throw new ConfigurationException ( " memtable _ operations _ in _ millions must be less than " + Long . MAX _ VALUE / 1024 * 1024 ) ; <nl> + } <nl> + <nl> + public static void validateMemtableFlushPeriod ( int minutes ) throws ConfigurationException <nl> + { <nl> + if ( minutes < = 0 ) <nl> + throw new ConfigurationException ( " memtable _ flush _ after _ mins must be greater than 0 . " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index bfa74f3 . . c082758 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> import org . apache . cassandra . db . commitlog . CommitLog ; <nl> @ @ - 971 , 12 + 972 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> flushable . flushAndSignal ( latch , flushSorter , flushWriter ) ; <nl> } <nl> <nl> - public int getMemtableColumnsCount ( ) <nl> + public long getMemtableColumnsCount ( ) <nl> { <nl> return getMemtableThreadSafe ( ) . getCurrentOperations ( ) ; <nl> } <nl> <nl> - public int getMemtableDataSize ( ) <nl> + public long getMemtableDataSize ( ) <nl> { <nl> return getMemtableThreadSafe ( ) . getCurrentThroughput ( ) ; <nl> } <nl> @ @ - 1944 , 24 + 1945 , 20 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> return memsize . value ( ) ; <nl> } <nl> - public void setMemtableThroughputInMB ( int size ) <nl> + public void setMemtableThroughputInMB ( int size ) throws ConfigurationException <nl> { <nl> - if ( size < = 0 ) { <nl> - throw new RuntimeException ( " MemtableThroughputInMB must be greater than 0 . " ) ; <nl> - } <nl> - this . memsize . set ( size ) ; <nl> + DatabaseDescriptor . validateMemtableThroughput ( size ) ; <nl> + memsize . set ( size ) ; <nl> } <nl> <nl> public double getMemtableOperationsInMillions ( ) <nl> { <nl> return memops . value ( ) ; <nl> } <nl> - public void setMemtableOperationsInMillions ( double ops ) <nl> + public void setMemtableOperationsInMillions ( double ops ) throws ConfigurationException <nl> { <nl> - if ( ops < = 0 ) { <nl> - throw new RuntimeException ( " MemtableOperationsInMillions must be greater than 0 . 0 . " ) ; <nl> - } <nl> - this . memops . set ( ops ) ; <nl> + DatabaseDescriptor . validateMemtableOperations ( ops ) ; <nl> + memops . set ( ops ) ; <nl> } <nl> <nl> public long estimateKeys ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> index f261fc3 . . 2c886d1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; <nl> import java . util . List ; <nl> import java . util . concurrent . ExecutionException ; <nl> <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> + <nl> / * * <nl> * The MBean interface for ColumnFamilyStore <nl> * / <nl> @ @ - 38 , 14 + 40 , 14 @ @ public interface ColumnFamilyStoreMBean <nl> * <nl> * @ return The size in bytes . <nl> * / <nl> - public int getMemtableDataSize ( ) ; <nl> + public long getMemtableDataSize ( ) ; <nl> <nl> / * * <nl> * Returns the total number of columns present in the memtable . <nl> * <nl> * @ return The number of columns . <nl> * / <nl> - public int getMemtableColumnsCount ( ) ; <nl> + public long getMemtableColumnsCount ( ) ; <nl> <nl> / * * <nl> * Returns the number of times that a flush has resulted in the <nl> @ @ - 211 , 10 + 213 , 10 @ @ public interface ColumnFamilyStoreMBean <nl> public void setMemtableFlushAfterMins ( int time ) ; <nl> <nl> public int getMemtableThroughputInMB ( ) ; <nl> - public void setMemtableThroughputInMB ( int size ) ; <nl> + public void setMemtableThroughputInMB ( int size ) throws ConfigurationException ; <nl> <nl> public double getMemtableOperationsInMillions ( ) ; <nl> - public void setMemtableOperationsInMillions ( double ops ) ; <nl> + public void setMemtableOperationsInMillions ( double ops ) throws ConfigurationException ; <nl> <nl> public long estimateKeys ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 1b13e46 . . 1e6b2d6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 30 , 12 + 30 , 14 @ @ import java . util . concurrent . ConcurrentSkipListMap ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> + import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . PeekingIterator ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> import org . apache . cassandra . db . columniterator . IColumnIterator ; <nl> import org . apache . cassandra . db . columniterator . SimpleAbstractColumnIterator ; <nl> import org . apache . cassandra . db . filter . AbstractColumnIterator ; <nl> @ @ - 52 , 23 + 54 , 23 @ @ public class Memtable implements Comparable < Memtable > , IFlushable <nl> <nl> private boolean isFrozen ; <nl> <nl> - private final AtomicInteger currentThroughput = new AtomicInteger ( 0 ) ; <nl> - private final AtomicInteger currentOperations = new AtomicInteger ( 0 ) ; <nl> + private final AtomicLong currentThroughput = new AtomicLong ( 0 ) ; <nl> + private final AtomicLong currentOperations = new AtomicLong ( 0 ) ; <nl> <nl> private final long creationTime ; <nl> private final ConcurrentNavigableMap < DecoratedKey , ColumnFamily > columnFamilies = new ConcurrentSkipListMap < DecoratedKey , ColumnFamily > ( ) ; <nl> public final ColumnFamilyStore cfs ; <nl> <nl> - private final int THRESHOLD ; <nl> - private final int THRESHOLD _ COUNT ; <nl> + private final long THRESHOLD ; <nl> + private final long THRESHOLD _ COUNT ; <nl> <nl> public Memtable ( ColumnFamilyStore cfs ) <nl> { <nl> <nl> this . cfs = cfs ; <nl> creationTime = System . currentTimeMillis ( ) ; <nl> - this . THRESHOLD = cfs . getMemtableThroughputInMB ( ) * 1024 * 1024 ; <nl> - this . THRESHOLD _ COUNT = ( int ) ( cfs . getMemtableOperationsInMillions ( ) * 1024 * 1024 ) ; <nl> + THRESHOLD = cfs . getMemtableThroughputInMB ( ) * 1024 * 1024 ; <nl> + THRESHOLD _ COUNT = ( long ) ( cfs . getMemtableOperationsInMillions ( ) * 1024 * 1024 ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 88 , 12 + 90 , 12 @ @ public class Memtable implements Comparable < Memtable > , IFlushable <nl> 	 	 return 0 ; <nl> } <nl> <nl> - public int getCurrentThroughput ( ) <nl> + public long getCurrentThroughput ( ) <nl> { <nl> return currentThroughput . get ( ) ; <nl> } <nl> <nl> - public int getCurrentOperations ( ) <nl> + public long getCurrentOperations ( ) <nl> { <nl> return currentOperations . get ( ) ; <nl> }

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index ec747b3 . . aec5f35 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1200 , 7 + 1200 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 private static String ratio ( float onHeap , float offHeap ) 
 { 
 - return String . format ( " % . 0f / % . 0f " , onHeap , offHeap ) ; 
 + return String . format ( " % . 2f / % . 2f " , onHeap , offHeap ) ; 
 } 
 
 public void maybeUpdateRowCache ( DecoratedKey key )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b937a61 . . c3e4cb1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 7 @ @ 
 used for creating row keys ( CASSANDRA - 2108 ) 
 * validate index names for \ w + ( CASSANDRA - 2196 ) 
 * Fix Cassandra cli to respect timeout if schema does not settle ( CASSANDRA - 2187 ) 
 + * update memtable _ throughput to be a long ( CASSANDRA - 2158 ) 
 
 
 0 . 7 . 2 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index e64ccb3 . . e8c414e 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 207 , 6 + 207 , 7 @ @ public final class CFMetaData 
 this . memtableThroughputInMb = memtableThroughputInMb = = null 
 ? DEFAULT _ MEMTABLE _ THROUGHPUT _ IN _ MB 
 : memtableThroughputInMb ; 
 + 
 this . memtableOperationsInMillions = memtableOperationsInMillions = = null 
 ? DEFAULT _ MEMTABLE _ OPERATIONS _ IN _ MILLIONS 
 : memtableOperationsInMillions ; 
 @ @ - 881 , 28 + 882 , 22 @ @ public final class CFMetaData 
 
 public static void validateMemtableSettings ( org . apache . cassandra . thrift . CfDef cf _ def ) throws ConfigurationException 
 { 
 - if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) & & cf _ def . memtable _ flush _ after _ mins < = 0 ) { 
 - throw new ConfigurationException ( " memtable _ flush _ after _ mins cannot be non - positive " ) ; 
 - } 
 - if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) & & cf _ def . memtable _ throughput _ in _ mb < = 0 ) { 
 - throw new ConfigurationException ( " memtable _ throughput _ in _ mb cannot be non - positive . " ) ; 
 - } 
 - if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) & & cf _ def . memtable _ operations _ in _ millions < = 0 ) { 
 - throw new ConfigurationException ( " memtable _ operations _ in _ millions cannot be non - positive " ) ; 
 - } 
 + if ( cf _ def . isSetMemtable _ flush _ after _ mins ( ) ) 
 + DatabaseDescriptor . validateMemtableFlushPeriod ( cf _ def . memtable _ flush _ after _ mins ) ; 
 + if ( cf _ def . isSetMemtable _ throughput _ in _ mb ( ) ) 
 + DatabaseDescriptor . validateMemtableThroughput ( cf _ def . memtable _ throughput _ in _ mb ) ; 
 + if ( cf _ def . isSetMemtable _ operations _ in _ millions ( ) ) 
 + DatabaseDescriptor . validateMemtableOperations ( cf _ def . memtable _ operations _ in _ millions ) ; 
 } 
 
 public static void validateMemtableSettings ( org . apache . cassandra . avro . CfDef cf _ def ) throws ConfigurationException 
 { 
 - if ( cf _ def . memtable _ flush _ after _ mins ! = null & & cf _ def . memtable _ flush _ after _ mins < = 0 ) { 
 - throw new ConfigurationException ( " memtable _ flush _ after _ mins cannot be non - positive " ) ; 
 - } 
 - if ( cf _ def . memtable _ throughput _ in _ mb ! = null & & cf _ def . memtable _ throughput _ in _ mb < = 0 ) { 
 - throw new ConfigurationException ( " memtable _ throughput _ in _ mb cannot be non - positive . " ) ; 
 - } 
 - if ( cf _ def . memtable _ operations _ in _ millions ! = null & & cf _ def . memtable _ operations _ in _ millions < = 0 ) { 
 - throw new ConfigurationException ( " memtable _ operations _ in _ millions cannot be non - positive " ) ; 
 - } 
 + if ( cf _ def . memtable _ flush _ after _ mins ! = null ) 
 + DatabaseDescriptor . validateMemtableFlushPeriod ( cf _ def . memtable _ flush _ after _ mins ) ; 
 + if ( cf _ def . memtable _ throughput _ in _ mb ! = null ) 
 + DatabaseDescriptor . validateMemtableThroughput ( cf _ def . memtable _ throughput _ in _ mb ) ; 
 + if ( cf _ def . memtable _ operations _ in _ millions ! = null ) 
 + DatabaseDescriptor . validateMemtableOperations ( cf _ def . memtable _ operations _ in _ millions ) ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index a0747e9 . . 99313bb 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 1179 , 4 + 1179 , 24 @ @ public class DatabaseDescriptor 
 { 
 return conf . compaction _ preheat _ key _ cache ; 
 } 
 + 
 + public static void validateMemtableThroughput ( int sizeInMB ) throws ConfigurationException 
 + { 
 + if ( sizeInMB < = 0 ) 
 + throw new ConfigurationException ( " memtable _ throughput _ in _ mb must be greater than 0 . " ) ; 
 + } 
 + 
 + public static void validateMemtableOperations ( double operationsInMillions ) throws ConfigurationException 
 + { 
 + if ( operationsInMillions < = 0 ) 
 + throw new ConfigurationException ( " memtable _ operations _ in _ millions must be greater than 0 . 0 . " ) ; 
 + if ( operationsInMillions > Long . MAX _ VALUE / 1024 * 1024 ) 
 + throw new ConfigurationException ( " memtable _ operations _ in _ millions must be less than " + Long . MAX _ VALUE / 1024 * 1024 ) ; 
 + } 
 + 
 + public static void validateMemtableFlushPeriod ( int minutes ) throws ConfigurationException 
 + { 
 + if ( minutes < = 0 ) 
 + throw new ConfigurationException ( " memtable _ flush _ after _ mins must be greater than 0 . " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index bfa74f3 . . c082758 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 import org . apache . cassandra . db . commitlog . CommitLog ; 
 @ @ - 971 , 12 + 972 , 12 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 flushable . flushAndSignal ( latch , flushSorter , flushWriter ) ; 
 } 
 
 - public int getMemtableColumnsCount ( ) 
 + public long getMemtableColumnsCount ( ) 
 { 
 return getMemtableThreadSafe ( ) . getCurrentOperations ( ) ; 
 } 
 
 - public int getMemtableDataSize ( ) 
 + public long getMemtableDataSize ( ) 
 { 
 return getMemtableThreadSafe ( ) . getCurrentThroughput ( ) ; 
 } 
 @ @ - 1944 , 24 + 1945 , 20 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 return memsize . value ( ) ; 
 } 
 - public void setMemtableThroughputInMB ( int size ) 
 + public void setMemtableThroughputInMB ( int size ) throws ConfigurationException 
 { 
 - if ( size < = 0 ) { 
 - throw new RuntimeException ( " MemtableThroughputInMB must be greater than 0 . " ) ; 
 - } 
 - this . memsize . set ( size ) ; 
 + DatabaseDescriptor . validateMemtableThroughput ( size ) ; 
 + memsize . set ( size ) ; 
 } 
 
 public double getMemtableOperationsInMillions ( ) 
 { 
 return memops . value ( ) ; 
 } 
 - public void setMemtableOperationsInMillions ( double ops ) 
 + public void setMemtableOperationsInMillions ( double ops ) throws ConfigurationException 
 { 
 - if ( ops < = 0 ) { 
 - throw new RuntimeException ( " MemtableOperationsInMillions must be greater than 0 . 0 . " ) ; 
 - } 
 - this . memops . set ( ops ) ; 
 + DatabaseDescriptor . validateMemtableOperations ( ops ) ; 
 + memops . set ( ops ) ; 
 } 
 
 public long estimateKeys ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 index f261fc3 . . 2c886d1 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStoreMBean . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . io . IOException ; 
 import java . util . List ; 
 import java . util . concurrent . ExecutionException ; 
 
 + import org . apache . cassandra . config . ConfigurationException ; 
 + 
 / * * 
 * The MBean interface for ColumnFamilyStore 
 * / 
 @ @ - 38 , 14 + 40 , 14 @ @ public interface ColumnFamilyStoreMBean 
 * 
 * @ return The size in bytes . 
 * / 
 - public int getMemtableDataSize ( ) ; 
 + public long getMemtableDataSize ( ) ; 
 
 / * * 
 * Returns the total number of columns present in the memtable . 
 * 
 * @ return The number of columns . 
 * / 
 - public int getMemtableColumnsCount ( ) ; 
 + public long getMemtableColumnsCount ( ) ; 
 
 / * * 
 * Returns the number of times that a flush has resulted in the 
 @ @ - 211 , 10 + 213 , 10 @ @ public interface ColumnFamilyStoreMBean 
 public void setMemtableFlushAfterMins ( int time ) ; 
 
 public int getMemtableThroughputInMB ( ) ; 
 - public void setMemtableThroughputInMB ( int size ) ; 
 + public void setMemtableThroughputInMB ( int size ) throws ConfigurationException ; 
 
 public double getMemtableOperationsInMillions ( ) ; 
 - public void setMemtableOperationsInMillions ( double ops ) ; 
 + public void setMemtableOperationsInMillions ( double ops ) throws ConfigurationException ; 
 
 public long estimateKeys ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 1b13e46 . . 1e6b2d6 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 30 , 12 + 30 , 14 @ @ import java . util . concurrent . ConcurrentSkipListMap ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 + import java . util . concurrent . atomic . AtomicLong ; 
 
 import com . google . common . collect . Iterators ; 
 import com . google . common . collect . PeekingIterator ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . ConfigurationException ; 
 import org . apache . cassandra . db . columniterator . IColumnIterator ; 
 import org . apache . cassandra . db . columniterator . SimpleAbstractColumnIterator ; 
 import org . apache . cassandra . db . filter . AbstractColumnIterator ; 
 @ @ - 52 , 23 + 54 , 23 @ @ public class Memtable implements Comparable < Memtable > , IFlushable 
 
 private boolean isFrozen ; 
 
 - private final AtomicInteger currentThroughput = new AtomicInteger ( 0 ) ; 
 - private final AtomicInteger currentOperations = new AtomicInteger ( 0 ) ; 
 + private final AtomicLong currentThroughput = new AtomicLong ( 0 ) ; 
 + private final AtomicLong currentOperations = new AtomicLong ( 0 ) ; 
 
 private final long creationTime ; 
 private final ConcurrentNavigableMap < DecoratedKey , ColumnFamily > columnFamilies = new ConcurrentSkipListMap < DecoratedKey , ColumnFamily > ( ) ; 
 public final ColumnFamilyStore cfs ; 
 
 - private final int THRESHOLD ; 
 - private final int THRESHOLD _ COUNT ; 
 + private final long THRESHOLD ; 
 + private final long THRESHOLD _ COUNT ; 
 
 public Memtable ( ColumnFamilyStore cfs ) 
 { 
 
 this . cfs = cfs ; 
 creationTime = System . currentTimeMillis ( ) ; 
 - this . THRESHOLD = cfs . getMemtableThroughputInMB ( ) * 1024 * 1024 ; 
 - this . THRESHOLD _ COUNT = ( int ) ( cfs . getMemtableOperationsInMillions ( ) * 1024 * 1024 ) ; 
 + THRESHOLD = cfs . getMemtableThroughputInMB ( ) * 1024 * 1024 ; 
 + THRESHOLD _ COUNT = ( long ) ( cfs . getMemtableOperationsInMillions ( ) * 1024 * 1024 ) ; 
 } 
 
 / * * 
 @ @ - 88 , 12 + 90 , 12 @ @ public class Memtable implements Comparable < Memtable > , IFlushable 
 	 	 return 0 ; 
 } 
 
 - public int getCurrentThroughput ( ) 
 + public long getCurrentThroughput ( ) 
 { 
 return currentThroughput . get ( ) ; 
 } 
 
 - public int getCurrentOperations ( ) 
 + public long getCurrentOperations ( ) 
 { 
 return currentOperations . get ( ) ; 
 }
