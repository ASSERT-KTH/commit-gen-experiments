BLEU SCORE: 0.026279617104084448

TEST MSG: cqlsh : Accept and execute CQL statement ( s ) from command - line parameter
GENERATED MSG: don ' t use cqlsh color on Windows

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2712398 . . 9e6f173 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 7 , 6 + 7 , 7 @ @ <nl> * Fix disabling autocompaction ( CASSANDRA - 7187 ) <nl> * Fix potential NumberFormatException when deserializing IntegerType ( CASSANDRA - 7088 ) <nl> * cqlsh can ' t tab - complete disabling compaction ( CASSANDRA - 7185 ) <nl> + * cqlsh : Accept and execute CQL statement ( s ) from command - line parameter ( CASSANDRA - 7172 ) <nl> <nl> <nl> 2 . 0 . 8 <nl> diff - - git a / bin / cqlsh b / bin / cqlsh <nl> index ba02e83 . . 6575387 100755 <nl> - - - a / bin / cqlsh <nl> + + + b / bin / cqlsh <nl> @ @ - 170 , 6 + 170 , 7 @ @ parser . add _ option ( ' - - debug ' , action = ' store _ true ' , <nl> parser . add _ option ( ' - - cqlversion ' , default = DEFAULT _ CQLVER , <nl> help = ' Specify a particular CQL version ( default : % default ) . ' <nl> ' Examples : " 3 . 0 . 3 " , " 3 . 1 . 0 " ' ) <nl> + parser . add _ option ( " - e " , " - - execute " , help = ' Execute the statement and quit . ' ) <nl> <nl> CQL _ ERRORS = ( cql . Error , ) <nl> try : <nl> @ @ - 463 , 7 + 464 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> cqlver = DEFAULT _ CQLVER , keyspace = None , <nl> tracing _ enabled = False , expand _ enabled = False , <nl> display _ time _ format = DEFAULT _ TIME _ FORMAT , <nl> - display _ float _ precision = DEFAULT _ FLOAT _ PRECISION ) : <nl> + display _ float _ precision = DEFAULT _ FLOAT _ PRECISION , <nl> + single _ statement = None ) : <nl> cmd . Cmd . _ _ init _ _ ( self , completekey = completekey ) <nl> self . hostname = hostname <nl> self . port = port <nl> @ @ - 521 , 6 + 523 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> self . query _ out = sys . stdout <nl> self . empty _ lines = 0 <nl> self . statement _ error = False <nl> + self . single _ statement = single _ statement <nl> <nl> def set _ expanded _ cql _ version ( self , ver ) : <nl> ver , vertuple = full _ cql _ version ( ver ) <nl> @ @ - 777 , 7 + 780 , 11 @ @ class Shell ( cmd . Cmd ) : <nl> with self . prepare _ loop ( ) : <nl> while not self . stop : <nl> try : <nl> - line = self . get _ input _ line ( self . prompt ) <nl> + if self . single _ statement : <nl> + line = self . single _ statement <nl> + self . stop = True <nl> + else : <nl> + line = self . get _ input _ line ( self . prompt ) <nl> self . statement . write ( line ) <nl> if self . onecmd ( self . statement . getvalue ( ) ) : <nl> self . reset _ statement ( ) <nl> @ @ - 1944 , 6 + 1951 , 7 @ @ def read _ options ( cmdlineargs , environment ) : <nl> optvalues . file = None <nl> optvalues . tty = sys . stdin . isatty ( ) <nl> optvalues . cqlversion = option _ with _ default ( configs . get , ' cql ' , ' version ' , DEFAULT _ CQLVER ) <nl> + optvalues . execute = None <nl> <nl> ( options , arguments ) = parser . parse _ args ( cmdlineargs , values = optvalues ) <nl> <nl> @ @ - 1958 , 9 + 1966 , 12 @ @ def read _ options ( cmdlineargs , environment ) : <nl> if len ( arguments ) > 1 : <nl> port = arguments [ 1 ] <nl> <nl> - if options . file is not None : <nl> + if options . file or options . execute : <nl> options . tty = False <nl> <nl> + if options . execute and not options . execute . endswith ( ' ; ' ) : <nl> + options . execute + = ' ; ' <nl> + <nl> options . transport _ factory = load _ factory ( options . transport _ factory ) <nl> <nl> if optvalues . color in ( True , False ) : <nl> @ @ - 2045 , 7 + 2056 , 8 @ @ def main ( options , hostname , port ) : <nl> cqlver = options . cqlversion , <nl> keyspace = options . keyspace , <nl> display _ time _ format = options . time _ format , <nl> - display _ float _ precision = options . float _ precision ) <nl> + display _ float _ precision = options . float _ precision , <nl> + single _ statement = options . execute ) <nl> except KeyboardInterrupt : <nl> sys . exit ( ' Connection aborted . ' ) <nl> except CQL _ ERRORS , e : <nl> @ @ - 2057 , 7 + 2069 , 8 @ @ def main ( options , hostname , port ) : <nl> <nl> shell . cmdloop ( ) <nl> save _ history ( ) <nl> - if options . file and shell . statement _ error : <nl> + batch _ mode = options . file or options . execute <nl> + if batch _ mode and shell . statement _ error : <nl> sys . exit ( 2 ) <nl> <nl> if _ _ name _ _ = = ' _ _ main _ _ ' :
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f785f9b . . 83b6209 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 5 , 6 + 5 , 7 @ @ <nl> * replace compactionlock use in schema migration by checking CFS . isValid <nl> ( CASSANDRA - 3116 ) <nl> * recognize that " SELECT first . . . * " isn ' t really " SELECT * " ( CASSANDRA - 3445 ) <nl> + * Use faster bytes comparison ( CASSANDRA - 3434 ) <nl> <nl> <nl> 1 . 0 . 3 <nl> diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> index 8d33155 . . bdf39b5 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java <nl> @ @ - 80 , 23 + 80 , 25 @ @ public class ByteBufferUtil <nl> { <nl> assert o1 ! = null ; <nl> assert o2 ! = null ; <nl> + if ( o1 = = o2 ) <nl> + return 0 ; <nl> <nl> if ( o1 . hasArray ( ) & & o2 . hasArray ( ) ) <nl> { <nl> return FBUtilities . compareUnsigned ( o1 . array ( ) , o2 . array ( ) , o1 . position ( ) + o1 . arrayOffset ( ) , <nl> o2 . position ( ) + o2 . arrayOffset ( ) , o1 . remaining ( ) , o2 . remaining ( ) ) ; <nl> } <nl> - <nl> - int minLength = Math . min ( o1 . remaining ( ) , o2 . remaining ( ) ) ; <nl> - for ( int x = 0 , i = o1 . position ( ) , j = o2 . position ( ) ; x < minLength ; x + + , i + + , j + + ) <nl> + <nl> + int end1 = o1 . position ( ) + o1 . remaining ( ) ; <nl> + int end2 = o2 . position ( ) + o2 . remaining ( ) ; <nl> + for ( int i = o1 . position ( ) , j = o2 . position ( ) ; i < end1 & & j < end2 ; i + + , j + + ) <nl> { <nl> - if ( o1 . get ( i ) = = o2 . get ( j ) ) <nl> - continue ; <nl> - / / compare non - equal bytes as unsigned <nl> - return ( o1 . get ( i ) & 0xFF ) < ( o2 . get ( j ) & 0xFF ) ? - 1 : 1 ; <nl> + int a = ( o1 . get ( i ) & 0xff ) ; <nl> + int b = ( o2 . get ( j ) & 0xff ) ; <nl> + if ( a ! = b ) <nl> + return a - b ; <nl> } <nl> - <nl> - return ( o1 . remaining ( ) = = o2 . remaining ( ) ) ? 0 : ( ( o1 . remaining ( ) < o2 . remaining ( ) ) ? - 1 : 1 ) ; <nl> + return o1 . remaining ( ) - o2 . remaining ( ) ; <nl> } <nl> <nl> public static int compare ( byte [ ] o1 , ByteBuffer o2 ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index b261635 . . 2cdff22 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 288 , 22 + 288 , 7 @ @ public class FBUtilities <nl> <nl> public static int compareUnsigned ( byte [ ] bytes1 , byte [ ] bytes2 , int offset1 , int offset2 , int len1 , int len2 ) <nl> { <nl> - if ( bytes1 = = null ) <nl> - { <nl> - return bytes2 = = null ? 0 : - 1 ; <nl> - } <nl> - if ( bytes2 = = null ) return 1 ; <nl> - <nl> - int minLength = Math . min ( len1 , len2 ) ; <nl> - for ( int x = 0 , i = offset1 , j = offset2 ; x < minLength ; x + + , i + + , j + + ) <nl> - { <nl> - if ( bytes1 [ i ] = = bytes2 [ j ] ) <nl> - continue ; <nl> - / / compare non - equal bytes as unsigned <nl> - return ( bytes1 [ i ] & 0xFF ) < ( bytes2 [ j ] & 0xFF ) ? - 1 : 1 ; <nl> - } <nl> - if ( len1 = = len2 ) return 0 ; <nl> - else return ( len1 < len2 ) ? - 1 : 1 ; <nl> + return FastByteComparisons . compareTo ( bytes1 , offset1 , len1 , bytes2 , offset2 , len2 ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java <nl> index fc1cfae . . 1553a20 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java <nl> @ @ - 30 , 11 + 30 , 11 @ @ public class ReversedTypeTest <nl> { <nl> ReversedType < Long > t = ReversedType . getInstance ( LongType . instance ) ; <nl> <nl> - assert t . compare ( bytes ( 2L ) , bytes ( 4L ) ) = = 1 ; <nl> - assert t . compare ( bytes ( 4L ) , bytes ( 2L ) ) = = - 1 ; <nl> + assert t . compare ( bytes ( 2L ) , bytes ( 4L ) ) > 0 ; <nl> + assert t . compare ( bytes ( 4L ) , bytes ( 2L ) ) < 0 ; <nl> <nl> / / the empty byte buffer is always the smaller <nl> - assert t . compare ( EMPTY _ BYTE _ BUFFER , bytes ( 2L ) ) = = - 1 ; <nl> - assert t . compare ( bytes ( 2L ) , EMPTY _ BYTE _ BUFFER ) = = 1 ; <nl> + assert t . compare ( EMPTY _ BYTE _ BUFFER , bytes ( 2L ) ) < 0 ; <nl> + assert t . compare ( bytes ( 2L ) , EMPTY _ BYTE _ BUFFER ) > 0 ; <nl> } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / dht / RangeTest . java b / test / unit / org / apache / cassandra / dht / RangeTest . java <nl> index 5506f54 . . d2c19b5 100644 <nl> - - - a / test / unit / org / apache / cassandra / dht / RangeTest . java <nl> + + + b / test / unit / org / apache / cassandra / dht / RangeTest . java <nl> @ @ - 308 , 8 + 308 , 8 @ @ public class RangeTest <nl> Token t4 = new BytesToken ( new byte [ ] { 1 , 2 , 3 } ) ; <nl> Token t5 = new BytesToken ( new byte [ ] { 4 , 5 , 6 , 7 } ) ; <nl> <nl> - assert Range . compare ( t4 , t5 ) = = - 1 ; <nl> - assert Range . compare ( t5 , t4 ) = = 1 ; <nl> + assert Range . compare ( t4 , t5 ) < 0 ; <nl> + assert Range . compare ( t5 , t4 ) > 0 ; <nl> assert Range . compare ( t1 , t4 ) = = 0 ; <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2712398 . . 9e6f173 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 7 , 6 + 7 , 7 @ @ 
 * Fix disabling autocompaction ( CASSANDRA - 7187 ) 
 * Fix potential NumberFormatException when deserializing IntegerType ( CASSANDRA - 7088 ) 
 * cqlsh can ' t tab - complete disabling compaction ( CASSANDRA - 7185 ) 
 + * cqlsh : Accept and execute CQL statement ( s ) from command - line parameter ( CASSANDRA - 7172 ) 
 
 
 2 . 0 . 8 
 diff - - git a / bin / cqlsh b / bin / cqlsh 
 index ba02e83 . . 6575387 100755 
 - - - a / bin / cqlsh 
 + + + b / bin / cqlsh 
 @ @ - 170 , 6 + 170 , 7 @ @ parser . add _ option ( ' - - debug ' , action = ' store _ true ' , 
 parser . add _ option ( ' - - cqlversion ' , default = DEFAULT _ CQLVER , 
 help = ' Specify a particular CQL version ( default : % default ) . ' 
 ' Examples : " 3 . 0 . 3 " , " 3 . 1 . 0 " ' ) 
 + parser . add _ option ( " - e " , " - - execute " , help = ' Execute the statement and quit . ' ) 
 
 CQL _ ERRORS = ( cql . Error , ) 
 try : 
 @ @ - 463 , 7 + 464 , 8 @ @ class Shell ( cmd . Cmd ) : 
 cqlver = DEFAULT _ CQLVER , keyspace = None , 
 tracing _ enabled = False , expand _ enabled = False , 
 display _ time _ format = DEFAULT _ TIME _ FORMAT , 
 - display _ float _ precision = DEFAULT _ FLOAT _ PRECISION ) : 
 + display _ float _ precision = DEFAULT _ FLOAT _ PRECISION , 
 + single _ statement = None ) : 
 cmd . Cmd . _ _ init _ _ ( self , completekey = completekey ) 
 self . hostname = hostname 
 self . port = port 
 @ @ - 521 , 6 + 523 , 7 @ @ class Shell ( cmd . Cmd ) : 
 self . query _ out = sys . stdout 
 self . empty _ lines = 0 
 self . statement _ error = False 
 + self . single _ statement = single _ statement 
 
 def set _ expanded _ cql _ version ( self , ver ) : 
 ver , vertuple = full _ cql _ version ( ver ) 
 @ @ - 777 , 7 + 780 , 11 @ @ class Shell ( cmd . Cmd ) : 
 with self . prepare _ loop ( ) : 
 while not self . stop : 
 try : 
 - line = self . get _ input _ line ( self . prompt ) 
 + if self . single _ statement : 
 + line = self . single _ statement 
 + self . stop = True 
 + else : 
 + line = self . get _ input _ line ( self . prompt ) 
 self . statement . write ( line ) 
 if self . onecmd ( self . statement . getvalue ( ) ) : 
 self . reset _ statement ( ) 
 @ @ - 1944 , 6 + 1951 , 7 @ @ def read _ options ( cmdlineargs , environment ) : 
 optvalues . file = None 
 optvalues . tty = sys . stdin . isatty ( ) 
 optvalues . cqlversion = option _ with _ default ( configs . get , ' cql ' , ' version ' , DEFAULT _ CQLVER ) 
 + optvalues . execute = None 
 
 ( options , arguments ) = parser . parse _ args ( cmdlineargs , values = optvalues ) 
 
 @ @ - 1958 , 9 + 1966 , 12 @ @ def read _ options ( cmdlineargs , environment ) : 
 if len ( arguments ) > 1 : 
 port = arguments [ 1 ] 
 
 - if options . file is not None : 
 + if options . file or options . execute : 
 options . tty = False 
 
 + if options . execute and not options . execute . endswith ( ' ; ' ) : 
 + options . execute + = ' ; ' 
 + 
 options . transport _ factory = load _ factory ( options . transport _ factory ) 
 
 if optvalues . color in ( True , False ) : 
 @ @ - 2045 , 7 + 2056 , 8 @ @ def main ( options , hostname , port ) : 
 cqlver = options . cqlversion , 
 keyspace = options . keyspace , 
 display _ time _ format = options . time _ format , 
 - display _ float _ precision = options . float _ precision ) 
 + display _ float _ precision = options . float _ precision , 
 + single _ statement = options . execute ) 
 except KeyboardInterrupt : 
 sys . exit ( ' Connection aborted . ' ) 
 except CQL _ ERRORS , e : 
 @ @ - 2057 , 7 + 2069 , 8 @ @ def main ( options , hostname , port ) : 
 
 shell . cmdloop ( ) 
 save _ history ( ) 
 - if options . file and shell . statement _ error : 
 + batch _ mode = options . file or options . execute 
 + if batch _ mode and shell . statement _ error : 
 sys . exit ( 2 ) 
 
 if _ _ name _ _ = = ' _ _ main _ _ ' :

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f785f9b . . 83b6209 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 5 , 6 + 5 , 7 @ @ 
 * replace compactionlock use in schema migration by checking CFS . isValid 
 ( CASSANDRA - 3116 ) 
 * recognize that " SELECT first . . . * " isn ' t really " SELECT * " ( CASSANDRA - 3445 ) 
 + * Use faster bytes comparison ( CASSANDRA - 3434 ) 
 
 
 1 . 0 . 3 
 diff - - git a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 index 8d33155 . . bdf39b5 100644 
 - - - a / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 + + + b / src / java / org / apache / cassandra / utils / ByteBufferUtil . java 
 @ @ - 80 , 23 + 80 , 25 @ @ public class ByteBufferUtil 
 { 
 assert o1 ! = null ; 
 assert o2 ! = null ; 
 + if ( o1 = = o2 ) 
 + return 0 ; 
 
 if ( o1 . hasArray ( ) & & o2 . hasArray ( ) ) 
 { 
 return FBUtilities . compareUnsigned ( o1 . array ( ) , o2 . array ( ) , o1 . position ( ) + o1 . arrayOffset ( ) , 
 o2 . position ( ) + o2 . arrayOffset ( ) , o1 . remaining ( ) , o2 . remaining ( ) ) ; 
 } 
 - 
 - int minLength = Math . min ( o1 . remaining ( ) , o2 . remaining ( ) ) ; 
 - for ( int x = 0 , i = o1 . position ( ) , j = o2 . position ( ) ; x < minLength ; x + + , i + + , j + + ) 
 + 
 + int end1 = o1 . position ( ) + o1 . remaining ( ) ; 
 + int end2 = o2 . position ( ) + o2 . remaining ( ) ; 
 + for ( int i = o1 . position ( ) , j = o2 . position ( ) ; i < end1 & & j < end2 ; i + + , j + + ) 
 { 
 - if ( o1 . get ( i ) = = o2 . get ( j ) ) 
 - continue ; 
 - / / compare non - equal bytes as unsigned 
 - return ( o1 . get ( i ) & 0xFF ) < ( o2 . get ( j ) & 0xFF ) ? - 1 : 1 ; 
 + int a = ( o1 . get ( i ) & 0xff ) ; 
 + int b = ( o2 . get ( j ) & 0xff ) ; 
 + if ( a ! = b ) 
 + return a - b ; 
 } 
 - 
 - return ( o1 . remaining ( ) = = o2 . remaining ( ) ) ? 0 : ( ( o1 . remaining ( ) < o2 . remaining ( ) ) ? - 1 : 1 ) ; 
 + return o1 . remaining ( ) - o2 . remaining ( ) ; 
 } 
 
 public static int compare ( byte [ ] o1 , ByteBuffer o2 ) 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index b261635 . . 2cdff22 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 288 , 22 + 288 , 7 @ @ public class FBUtilities 
 
 public static int compareUnsigned ( byte [ ] bytes1 , byte [ ] bytes2 , int offset1 , int offset2 , int len1 , int len2 ) 
 { 
 - if ( bytes1 = = null ) 
 - { 
 - return bytes2 = = null ? 0 : - 1 ; 
 - } 
 - if ( bytes2 = = null ) return 1 ; 
 - 
 - int minLength = Math . min ( len1 , len2 ) ; 
 - for ( int x = 0 , i = offset1 , j = offset2 ; x < minLength ; x + + , i + + , j + + ) 
 - { 
 - if ( bytes1 [ i ] = = bytes2 [ j ] ) 
 - continue ; 
 - / / compare non - equal bytes as unsigned 
 - return ( bytes1 [ i ] & 0xFF ) < ( bytes2 [ j ] & 0xFF ) ? - 1 : 1 ; 
 - } 
 - if ( len1 = = len2 ) return 0 ; 
 - else return ( len1 < len2 ) ? - 1 : 1 ; 
 + return FastByteComparisons . compareTo ( bytes1 , offset1 , len1 , bytes2 , offset2 , len2 ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java b / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java 
 index fc1cfae . . 1553a20 100644 
 - - - a / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java 
 + + + b / test / unit / org / apache / cassandra / db / marshal / ReversedTypeTest . java 
 @ @ - 30 , 11 + 30 , 11 @ @ public class ReversedTypeTest 
 { 
 ReversedType < Long > t = ReversedType . getInstance ( LongType . instance ) ; 
 
 - assert t . compare ( bytes ( 2L ) , bytes ( 4L ) ) = = 1 ; 
 - assert t . compare ( bytes ( 4L ) , bytes ( 2L ) ) = = - 1 ; 
 + assert t . compare ( bytes ( 2L ) , bytes ( 4L ) ) > 0 ; 
 + assert t . compare ( bytes ( 4L ) , bytes ( 2L ) ) < 0 ; 
 
 / / the empty byte buffer is always the smaller 
 - assert t . compare ( EMPTY _ BYTE _ BUFFER , bytes ( 2L ) ) = = - 1 ; 
 - assert t . compare ( bytes ( 2L ) , EMPTY _ BYTE _ BUFFER ) = = 1 ; 
 + assert t . compare ( EMPTY _ BYTE _ BUFFER , bytes ( 2L ) ) < 0 ; 
 + assert t . compare ( bytes ( 2L ) , EMPTY _ BYTE _ BUFFER ) > 0 ; 
 } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / dht / RangeTest . java b / test / unit / org / apache / cassandra / dht / RangeTest . java 
 index 5506f54 . . d2c19b5 100644 
 - - - a / test / unit / org / apache / cassandra / dht / RangeTest . java 
 + + + b / test / unit / org / apache / cassandra / dht / RangeTest . java 
 @ @ - 308 , 8 + 308 , 8 @ @ public class RangeTest 
 Token t4 = new BytesToken ( new byte [ ] { 1 , 2 , 3 } ) ; 
 Token t5 = new BytesToken ( new byte [ ] { 4 , 5 , 6 , 7 } ) ; 
 
 - assert Range . compare ( t4 , t5 ) = = - 1 ; 
 - assert Range . compare ( t5 , t4 ) = = 1 ; 
 + assert Range . compare ( t4 , t5 ) < 0 ; 
 + assert Range . compare ( t5 , t4 ) > 0 ; 
 assert Range . compare ( t1 , t4 ) = = 0 ; 
 } 

