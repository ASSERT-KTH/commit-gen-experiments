BLEU SCORE: 0.03377156414337854

TEST MSG: Fix handling FS errors on writing and reading flat files - LogTransaction and hints
GENERATED MSG: add FileUtils . closeQuietly and finally - close blocks

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 0ea7e9e . . e00d11c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 19 <nl> + * Fix handling FS errors on writing and reading flat files - LogTransaction and hints ( CASSANDRA - 15053 ) <nl> * Avoid double closing the iterator to avoid overcounting the number of requests ( CASSANDRA - 15058 ) <nl> * Improve ` nodetool status - r ` speed ( CASSANDRA - 14847 ) <nl> * Improve merkle tree size and time on heap ( CASSANDRA - 14096 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java b / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java <nl> index 44400d1 . . 26fa82c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java <nl> @ @ - 19 , 7 + 19 , 13 @ @ <nl> package org . apache . cassandra . db . lifecycle ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . io . FSError ; <nl> + import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . NativeLibrary ; <nl> <nl> @ @ - 36 , 17 + 42 , 27 @ @ import org . apache . cassandra . utils . NativeLibrary ; <nl> * / <nl> final class LogReplica implements AutoCloseable <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( LogReplica . class ) ; <nl> + <nl> private final File file ; <nl> private int folderDescriptor ; <nl> <nl> static LogReplica create ( File folder , String fileName ) <nl> { <nl> - return new LogReplica ( new File ( fileName ) , NativeLibrary . tryOpenDirectory ( folder . getPath ( ) ) ) ; <nl> + int folderFD = NativeLibrary . tryOpenDirectory ( folder . getPath ( ) ) ; <nl> + if ( folderFD = = - 1 ) <nl> + throw new FSReadError ( new IOException ( String . format ( " Invalid folder descriptor trying to create log replica % s " , folder . getPath ( ) ) ) , folder . getPath ( ) ) ; <nl> + <nl> + return new LogReplica ( new File ( fileName ) , folderFD ) ; <nl> } <nl> <nl> static LogReplica open ( File file ) <nl> { <nl> - return new LogReplica ( file , NativeLibrary . tryOpenDirectory ( file . getParentFile ( ) . getPath ( ) ) ) ; <nl> + int folderFD = NativeLibrary . tryOpenDirectory ( file . getParentFile ( ) . getPath ( ) ) ; <nl> + if ( folderFD = = - 1 ) <nl> + throw new FSReadError ( new IOException ( String . format ( " Invalid folder descriptor trying to create log replica % s " , file . getParentFile ( ) . getPath ( ) ) ) , file . getParentFile ( ) . getPath ( ) ) ; <nl> + <nl> + return new LogReplica ( file , folderFD ) ; <nl> } <nl> <nl> LogReplica ( File file , int folderDescriptor ) <nl> @ @ - 63 , 7 + 79 , 15 @ @ final class LogReplica implements AutoCloseable <nl> void append ( LogRecord record ) <nl> { <nl> boolean existed = exists ( ) ; <nl> - FileUtils . appendAndSync ( file , record . toString ( ) ) ; <nl> + try <nl> + { <nl> + FileUtils . appendAndSync ( file , record . toString ( ) ) ; <nl> + } <nl> + catch ( FSError e ) <nl> + { <nl> + logger . error ( " Failed to sync file { } " , file , e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( e ) ; <nl> + } <nl> <nl> / / If the file did not exist before appending the first <nl> / / line , then sync the folder as well since now it must exist <nl> @ @ - 73 , 8 + 97 , 16 @ @ final class LogReplica implements AutoCloseable <nl> <nl> void syncFolder ( ) <nl> { <nl> - if ( folderDescriptor > = 0 ) <nl> - NativeLibrary . trySync ( folderDescriptor ) ; <nl> + try <nl> + { <nl> + if ( folderDescriptor > = 0 ) <nl> + NativeLibrary . trySync ( folderDescriptor ) ; <nl> + } <nl> + catch ( FSError e ) <nl> + { <nl> + logger . error ( " Failed to sync directory descriptor { } " , folderDescriptor , e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( e ) ; <nl> + } <nl> } <nl> <nl> void delete ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java b / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java <nl> index d8b2141 . . 0bf20e5 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java <nl> @ @ - 15 , 7 + 15 , 6 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . db . lifecycle ; <nl> <nl> import java . io . File ; <nl> @ @ - 32 , 6 + 31 , 7 @ @ import com . google . common . annotations . VisibleForTesting ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . io . FSError ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . Throwables ; <nl> <nl> @ @ - 61 , 7 + 61 , 15 @ @ public class LogReplicaSet implements AutoCloseable <nl> { <nl> File folder = file . getParentFile ( ) ; <nl> assert ! replicasByFile . containsKey ( folder ) ; <nl> - replicasByFile . put ( folder , LogReplica . open ( file ) ) ; <nl> + try <nl> + { <nl> + replicasByFile . put ( folder , LogReplica . open ( file ) ) ; <nl> + } <nl> + catch ( FSError e ) <nl> + { <nl> + logger . error ( " Failed to open log replica { } " , file , e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( e ) ; <nl> + } <nl> <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( " Added log file replica { } " , file ) ; <nl> @ @ - 72 , 14 + 80 , 21 @ @ public class LogReplicaSet implements AutoCloseable <nl> if ( replicasByFile . containsKey ( folder ) ) <nl> return ; <nl> <nl> - @ SuppressWarnings ( " resource " ) / / LogReplicas are closed in LogReplicaSet : : close <nl> - final LogReplica replica = LogReplica . create ( folder , fileName ) ; <nl> - <nl> - records . forEach ( replica : : append ) ; <nl> - replicasByFile . put ( folder , replica ) ; <nl> + try <nl> + { <nl> + @ SuppressWarnings ( " resource " ) / / LogReplicas are closed in LogReplicaSet : : close <nl> + final LogReplica replica = LogReplica . create ( folder , fileName ) ; <nl> + records . forEach ( replica : : append ) ; <nl> + replicasByFile . put ( folder , replica ) ; <nl> <nl> - if ( logger . isTraceEnabled ( ) ) <nl> - logger . trace ( " Created new file replica { } " , replica ) ; <nl> + if ( logger . isTraceEnabled ( ) ) <nl> + logger . trace ( " Created new file replica { } " , replica ) ; <nl> + } <nl> + catch ( FSError e ) <nl> + { <nl> + logger . error ( " Failed to create log replica { } / { } " , folder , fileName , e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( e ) ; <nl> + } <nl> } <nl> <nl> Throwable syncFolder ( Throwable accumulate ) <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> index 00a222a . . 9bbf69d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> @ @ - 37 , 11 + 37 , 13 @ @ import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . db . lifecycle . LogRecord . Type ; <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTable ; <nl> import org . apache . cassandra . io . sstable . SnapshotDeletingTask ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . * ; <nl> import org . apache . cassandra . utils . concurrent . Ref ; <nl> import org . apache . cassandra . utils . concurrent . RefCounted ; <nl> @ @ - 222 , 7 + 224 , 7 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran <nl> catch ( IOException e ) <nl> { <nl> logger . error ( " Unable to delete { } " , file , e ) ; <nl> - throw new RuntimeException ( e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( new FSWriteError ( e , file ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 256 , 8 + 258 , 10 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( " Removing files for transaction { } " , name ( ) ) ; <nl> <nl> + / / this happens if we forget to close a txn and the garbage collector closes it for us <nl> + / / or if the transaction journal was never properly created in the first place <nl> if ( ! data . completed ( ) ) <nl> - { / / this happens if we forget to close a txn and the garbage collector closes it for us <nl> + { <nl> logger . error ( " { } was not completed , trying to abort it now " , data ) ; <nl> Throwable err = Throwables . perform ( ( Throwable ) null , data : : abort ) ; <nl> if ( err ! = null ) <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsCatalog . java b / src / java / org / apache / cassandra / hints / HintsCatalog . java <nl> index d1f6fba . . 7d5c8e6 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsCatalog . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsCatalog . java <nl> @ @ - 26 , 8 + 26 , 13 @ @ import java . util . stream . Stream ; <nl> import javax . annotation . Nullable ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . io . FSError ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . NativeLibrary ; <nl> import org . apache . cassandra . utils . SyncUtil ; <nl> <nl> @ @ - 38 , 6 + 43 , 8 @ @ import static java . util . stream . Collectors . groupingBy ; <nl> * / <nl> final class HintsCatalog <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( HintsCatalog . class ) ; <nl> + <nl> private final File hintsDirectory ; <nl> private final Map < UUID , HintsStore > stores ; <nl> private final ImmutableMap < String , Object > writerParams ; <nl> @ @ - 142 , 8 + 149 , 21 @ @ final class HintsCatalog <nl> int fd = NativeLibrary . tryOpenDirectory ( hintsDirectory . getAbsolutePath ( ) ) ; <nl> if ( fd ! = - 1 ) <nl> { <nl> - SyncUtil . trySync ( fd ) ; <nl> - NativeLibrary . tryCloseFD ( fd ) ; <nl> + try <nl> + { <nl> + SyncUtil . trySync ( fd ) ; <nl> + NativeLibrary . tryCloseFD ( fd ) ; <nl> + } <nl> + catch ( FSError e ) / / trySync failed <nl> + { <nl> + logger . error ( " Unable to sync directory { } " , hintsDirectory . getAbsolutePath ( ) , e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( e ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + logger . error ( " Unable to open directory { } " , hintsDirectory . getAbsolutePath ( ) ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( new FSWriteError ( new IOException ( String . format ( " Unable to open hint directory % s " , hintsDirectory . getAbsolutePath ( ) ) ) , hintsDirectory . getAbsolutePath ( ) ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java b / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java <nl> index eb1bffe . . 51a5362 100644 <nl> - - - a / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java <nl> + + + b / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java <nl> @ @ - 22 , 9 + 22 , 14 @ @ import java . nio . ByteBuffer ; <nl> import java . util . Iterator ; <nl> import java . util . concurrent . * ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . FSError ; <nl> import org . apache . cassandra . io . FSWriteError ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> / * * <nl> * A single threaded executor that exclusively writes all the hints and otherwise manipulate the writers . <nl> @ @ - 35 , 6 + 40 , 8 @ @ import org . apache . cassandra . io . FSWriteError ; <nl> * / <nl> final class HintsWriteExecutor <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( HintsWriteExecutor . class ) ; <nl> + <nl> static final int WRITE _ BUFFER _ SIZE = 256 < < 10 ; <nl> <nl> private final HintsCatalog catalog ; <nl> @ @ - 151 , 7 + 158 , 15 @ @ final class HintsWriteExecutor <nl> { <nl> HintsBuffer buffer = bufferPool . currentBuffer ( ) ; <nl> buffer . waitForModifications ( ) ; <nl> - flush ( buffer ) ; <nl> + try <nl> + { <nl> + flush ( buffer ) ; <nl> + } <nl> + catch ( FSError e ) <nl> + { <nl> + logger . error ( " Unable to flush hint buffer : { } " , e . getLocalizedMessage ( ) , e ) ; <nl> + FileUtils . handleFSErrorAndPropagate ( e ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index 80df67b . . ed683d0 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ import org . apache . cassandra . io . FSWriteError ; <nl> import org . apache . cassandra . io . sstable . CorruptSSTableException ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> <nl> + import static com . google . common . base . Throwables . propagate ; <nl> import static org . apache . cassandra . utils . Throwables . maybeFail ; <nl> import static org . apache . cassandra . utils . Throwables . merge ; <nl> <nl> @ @ - 497 , 6 + 498 , 21 @ @ public final class FileUtils <nl> if ( handler ! = null ) <nl> handler . handleFSError ( e ) ; <nl> } <nl> + <nl> + / * * <nl> + * handleFSErrorAndPropagate will invoke the disk failure policy error handler , <nl> + * which may or may not stop the daemon or transports . However , if we don ' t exit , <nl> + * we still want to propagate the exception to the caller in case they have custom <nl> + * exception handling <nl> + * <nl> + * @ param e A filesystem error <nl> + * / <nl> + public static void handleFSErrorAndPropagate ( FSError e ) <nl> + { <nl> + handleFSError ( e ) ; <nl> + throw propagate ( e ) ; <nl> + } <nl> + <nl> / * * <nl> * Get the size of a directory in bytes <nl> * @ param directory The directory for which we need size . <nl> diff - - git a / src / java / org / apache / cassandra / utils / NativeLibrary . java b / src / java / org / apache / cassandra / utils / NativeLibrary . java <nl> index f96859e . . 0cc690e 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / NativeLibrary . java <nl> + + + b / src / java / org / apache / cassandra / utils / NativeLibrary . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import com . sun . jna . LastErrorException ; <nl> <nl> + import org . apache . cassandra . io . FSWriteError ; <nl> + <nl> import static org . apache . cassandra . utils . NativeLibrary . OSType . LINUX ; <nl> import static org . apache . cassandra . utils . NativeLibrary . OSType . MAC ; <nl> import static org . apache . cassandra . utils . NativeLibrary . OSType . WINDOWS ; <nl> @ @ - 318 , 7 + 320 , 9 @ @ public final class NativeLibrary <nl> if ( ! ( e instanceof LastErrorException ) ) <nl> throw e ; <nl> <nl> - logger . warn ( " fsync ( { } ) failed , errorno ( { } ) { } " , fd , errno ( e ) , e ) ; <nl> + String errMsg = String . format ( " fsync ( % s ) failed , errno % s " , fd , errno ( e ) ) ; <nl> + logger . warn ( errMsg ) ; <nl> + throw new FSWriteError ( e , errMsg ) ; <nl> } <nl> } <nl> <nl> @ @ - 340 , 7 + 344 , 9 @ @ public final class NativeLibrary <nl> if ( ! ( e instanceof LastErrorException ) ) <nl> throw e ; <nl> <nl> - logger . warn ( String . format ( " close ( % d ) failed , errno ( % d ) . " , fd , errno ( e ) ) ) ; <nl> + String errMsg = String . format ( " close ( % d ) failed , errno ( % d ) . " , fd , errno ( e ) ) ; <nl> + logger . warn ( errMsg ) ; <nl> + throw new FSWriteError ( e , errMsg ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java <nl> index 66c236c . . a8bfc5f 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java <nl> + + + b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Properties ; <nl> import java . util . Map ; <nl> <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . thrift . AuthenticationException ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> @ @ - 92 , 12 + 93 , 12 @ @ public class SimpleAuthenticator implements IAuthenticator <nl> <nl> boolean authenticated = false ; <nl> <nl> + InputStream in = null ; <nl> try <nl> { <nl> - FileInputStream in = new FileInputStream ( pfilename ) ; <nl> + in = new BufferedInputStream ( new FileInputStream ( pfilename ) ) ; <nl> Properties props = new Properties ( ) ; <nl> props . load ( in ) ; <nl> - in . close ( ) ; <nl> <nl> / / note we keep the message here and for the wrong password exactly the same to prevent attackers from guessing what users are valid <nl> if ( null = = props . getProperty ( username ) ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; <nl> @ @ - 125 , 6 + 126 , 10 @ @ public class SimpleAuthenticator implements IAuthenticator <nl> { <nl> throw new RuntimeException ( " Unexpected authentication problem " , e ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( in ) ; <nl> + } <nl> <nl> if ( ! authenticated ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index a128cfa . . a1ba4fa 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 266 , 12 + 266 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> Set < DecoratedKey > keys = new TreeSet < DecoratedKey > ( ) ; <nl> if ( path . exists ( ) ) <nl> { <nl> + ObjectInputStream in = null ; <nl> try <nl> { <nl> long start = System . currentTimeMillis ( ) ; <nl> <nl> logger . info ( String . format ( " reading saved cache % s " , path ) ) ; <nl> - ObjectInputStream in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> + in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; <nl> while ( in . available ( ) > 0 ) <nl> { <nl> int size = in . readInt ( ) ; <nl> @ @ - 279 , 7 + 280 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> in . readFully ( bytes ) ; <nl> keys . add ( StorageService . getPartitioner ( ) . decorateKey ( ByteBuffer . wrap ( bytes ) ) ) ; <nl> } <nl> - in . close ( ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , <nl> System . currentTimeMillis ( ) - start , keys . size ( ) , path ) ) ; <nl> @ @ - 288 , 6 + 288 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> { <nl> logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , ioe ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( in ) ; <nl> + } <nl> } <nl> return keys ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> index 8e6ced5 . . 1e4e403 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . io . sstable . IndexHelper ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> import org . apache . cassandra . io . util . FileMark ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . slf4j . Logger ; <nl> @ @ - 78 , 14 + 79 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - file . close ( ) ; <nl> - } <nl> - catch ( IOException ioe ) <nl> - { <nl> - logger . warn ( " error closing " + file . getPath ( ) ) ; <nl> - } <nl> + FileUtils . closeQuietly ( file ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> index 553c10e . . ff62aec 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java <nl> @ @ - 339 , 7 + 339 , 7 @ @ public class CommitLog <nl> } <nl> finally <nl> { <nl> - reader . close ( ) ; <nl> + FileUtils . closeQuietly ( reader ) ; <nl> logger . info ( " Finished reading " + file ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java <nl> index 3efdc99 . . 538cbb9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ import java . util . Map ; <nl> import java . util . zip . CRC32 ; <nl> import java . util . zip . Checksum ; <nl> <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . io . ICompactSerializer2 ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> public class CommitLogHeader <nl> { <nl> @ @ - 132 , 13 + 132 , 12 @ @ public class CommitLogHeader <nl> DataInputStream reader = null ; <nl> try <nl> { <nl> - reader = new DataInputStream ( new FileInputStream ( headerFile ) ) ; <nl> + reader = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( headerFile ) ) ) ; <nl> return serializer . deserialize ( reader ) ; <nl> } <nl> finally <nl> { <nl> - if ( reader ! = null ) <nl> - reader . close ( ) ; <nl> + FileUtils . closeQuietly ( reader ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> index e1212b4 . . 1c7d4dc 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java <nl> @ @ - 18 , 10 + 18 , 12 @ @ <nl> <nl> package org . apache . cassandra . gms ; <nl> <nl> + import java . io . BufferedOutputStream ; <nl> import java . io . File ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . IOError ; <nl> + import java . io . OutputStream ; <nl> import java . lang . management . ManagementFactory ; <nl> import java . util . * ; <nl> import javax . management . MBeanServer ; <nl> @ @ - 31 , 6 + 33 , 7 @ @ import org . apache . commons . lang . StringUtils ; <nl> <nl> import java . net . InetAddress ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . BoundedStatsDeque ; <nl> import org . slf4j . Logger ; <nl> @ @ - 83 , 17 + 86 , 21 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean <nl> * / <nl> public void dumpInterArrivalTimes ( ) <nl> { <nl> + OutputStream os = null ; <nl> try <nl> { <nl> File file = File . createTempFile ( " failuredetector - " , " . dat " ) ; <nl> - FileOutputStream fos = new FileOutputStream ( file , true ) ; <nl> - fos . write ( toString ( ) . getBytes ( ) ) ; <nl> - fos . close ( ) ; <nl> + os = new BufferedOutputStream ( new FileOutputStream ( file , true ) ) ; <nl> + os . write ( toString ( ) . getBytes ( ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> throw new IOError ( e ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( os ) ; <nl> + } <nl> } <nl> <nl> public void setPhiConvictThreshold ( int phi ) <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index a697b89 . . d3d3ac0 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> + import java . io . BufferedInputStream ; <nl> import java . io . DataInput ; <nl> import java . io . DataInputStream ; <nl> import java . io . File ; <nl> @ @ - 53 , 6 + 54 , 7 @ @ import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . io . ICompactSerializer2 ; <nl> import org . apache . cassandra . io . util . BufferedRandomAccessFile ; <nl> import org . apache . cassandra . io . util . FileDataInput ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . SegmentedFile ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . * ; <nl> @ @ - 174 , 11 + 176 , 18 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> File statsFile = new File ( descriptor . filenameFor ( SSTable . COMPONENT _ STATS ) ) ; <nl> if ( statsFile . exists ( ) ) <nl> { <nl> - logger . debug ( " Load statistics for { } " , descriptor ) ; <nl> - DataInputStream dis = new DataInputStream ( new FileInputStream ( statsFile ) ) ; <nl> - rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> - columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> - dis . close ( ) ; <nl> + DataInputStream dis = null ; <nl> + try <nl> + { <nl> + logger . debug ( " Load statistics for { } " , descriptor ) ; <nl> + dis = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( statsFile ) ) ) ; <nl> + rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> + columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; <nl> + } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( dis ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 253 , 14 + 262 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> <nl> void loadBloomFilter ( ) throws IOException <nl> { <nl> - DataInputStream stream = new DataInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ; <nl> + DataInputStream stream = null ; <nl> try <nl> { <nl> + stream = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ) ; <nl> bf = BloomFilter . serializer ( ) . deserialize ( stream ) ; <nl> } <nl> finally <nl> { <nl> - stream . close ( ) ; <nl> + FileUtils . closeQuietly ( stream ) ; <nl> } <nl> } <nl> <nl> @ @ - 316 , 7 + 326 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> } <nl> finally <nl> { <nl> - input . close ( ) ; <nl> + FileUtils . closeQuietly ( input ) ; <nl> } <nl> <nl> / / finalize the state of the reader <nl> @ @ - 497 , 14 + 507 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - input . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - logger . error ( " error closing file " , e ) ; <nl> - } <nl> + FileUtils . closeQuietly ( input ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> index 6090030 . . cb04c31 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ import org . apache . cassandra . cache . JMXInstrumentedCache ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . Pair ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 75 , 19 + 77 , 29 @ @ public class SSTableTracker implements Iterable < SSTableReader > <nl> logger . info ( " saving " + msgSuffix ) ; <nl> int count = 0 ; <nl> File tmpFile = File . createTempFile ( savedCachePath . getName ( ) , null , savedCachePath . getParentFile ( ) ) ; <nl> - FileOutputStream fout = new FileOutputStream ( tmpFile ) ; <nl> - ObjectOutputStream out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; <nl> - FileDescriptor fd = fout . getFD ( ) ; <nl> - for ( K key : cache . getKeySet ( ) ) <nl> + <nl> + FileOutputStream fout = null ; <nl> + ObjectOutputStream out = null ; <nl> + try <nl> + { <nl> + fout = new FileOutputStream ( tmpFile ) ; <nl> + out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; <nl> + FileDescriptor fd = fout . getFD ( ) ; <nl> + for ( K key : cache . getKeySet ( ) ) <nl> + { <nl> + ByteBuffer bytes = converter . apply ( key ) ; <nl> + out . writeInt ( bytes . remaining ( ) ) ; <nl> + out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; <nl> + + + count ; <nl> + } <nl> + out . flush ( ) ; <nl> + fd . sync ( ) ; <nl> + } <nl> + finally <nl> { <nl> - ByteBuffer bytes = converter . apply ( key ) ; <nl> - out . writeInt ( bytes . remaining ( ) ) ; <nl> - out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; <nl> - + + count ; <nl> + FileUtils . closeQuietly ( out ) ; <nl> + FileUtils . closeQuietly ( fout ) ; <nl> } <nl> - out . flush ( ) ; <nl> - fd . sync ( ) ; <nl> - out . close ( ) ; <nl> if ( ! tmpFile . renameTo ( savedCachePath ) ) <nl> throw new IOException ( " Unable to rename cache to " + savedCachePath ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> index 42bc06a . . 6bd8537 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java <nl> @ @ - 18 , 14 + 18 , 12 @ @ <nl> <nl> package org . apache . cassandra . io . util ; <nl> <nl> - import java . io . File ; <nl> - import java . io . FileNotFoundException ; <nl> - import java . io . IOException ; <nl> - import java . io . RandomAccessFile ; <nl> + import java . io . * ; <nl> import java . text . DecimalFormat ; <nl> import java . util . Comparator ; <nl> import java . util . List ; <nl> <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 85 , 6 + 83 , 19 @ @ public class FileUtils <nl> } <nl> } <nl> <nl> + public static void closeQuietly ( Closeable c ) <nl> + { <nl> + try <nl> + { <nl> + if ( c ! = null ) <nl> + c . close ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + logger _ . warn ( " Failed closing stream " , e ) ; <nl> + } <nl> + } <nl> + <nl> public static class FileComparator implements Comparator < File > <nl> { <nl> public int compare ( File f , File f2 ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> index 693d850 . . 7b58802 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java <nl> @ @ - 173 , 14 + 173 , 7 @ @ public class MmappedSegmentedFile extends SegmentedFile <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - if ( raf ! = null ) raf . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new IOError ( e ) ; <nl> - } <nl> + FileUtils . closeQuietly ( raf ) ; <nl> } <nl> return segments ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> index cedb5fa . . 9982e54 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java <nl> @ @ - 18 , 22 + 18 , 24 @ @ <nl> <nl> package org . apache . cassandra . locator ; <nl> <nl> + import java . io . BufferedReader ; <nl> import java . io . FileReader ; <nl> import java . io . IOException ; <nl> + import java . io . Reader ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . ResourceWatcher ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> / * * <nl> * Used to determine if two IP ' s are in the same datacenter or on the same rack . <nl> @ @ - 112 , 14 + 114 , 20 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch <nl> <nl> String rackPropertyFilename = FBUtilities . resourceToFile ( RACK _ PROPERTY _ FILENAME ) ; <nl> Properties properties = new Properties ( ) ; <nl> + Reader reader = null ; <nl> try <nl> { <nl> - properties . load ( new FileReader ( rackPropertyFilename ) ) ; <nl> + reader = new BufferedReader ( new FileReader ( rackPropertyFilename ) ) ; <nl> + properties . load ( reader ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> throw new ConfigurationException ( " Unable to read " + RACK _ PROPERTY _ FILENAME , e ) ; <nl> } <nl> + finally <nl> + { <nl> + FileUtils . closeQuietly ( reader ) ; <nl> + } <nl> <nl> for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> index 647fd4a . . e4d32c5 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . channels . FileChannel ; <nl> import java . nio . channels . SocketChannel ; <nl> <nl> - import org . apache . cassandra . streaming . StreamHeader ; <nl> + import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . utils . Pair ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> <nl> + <nl> public class FileStreamTask extends WrappedRunnable <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( FileStreamTask . class ) ; <nl> @ @ - 109 , 14 + 110 , 7 @ @ public class FileStreamTask extends WrappedRunnable <nl> } <nl> finally <nl> { <nl> - try <nl> - { <nl> - raf . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new AssertionError ( e ) ; <nl> - } <nl> + FileUtils . closeQuietly ( raf ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 0ea7e9e . . e00d11c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 19 
 + * Fix handling FS errors on writing and reading flat files - LogTransaction and hints ( CASSANDRA - 15053 ) 
 * Avoid double closing the iterator to avoid overcounting the number of requests ( CASSANDRA - 15058 ) 
 * Improve ` nodetool status - r ` speed ( CASSANDRA - 14847 ) 
 * Improve merkle tree size and time on heap ( CASSANDRA - 14096 ) 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java b / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java 
 index 44400d1 . . 26fa82c 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogReplica . java 
 @ @ - 19 , 7 + 19 , 13 @ @ 
 package org . apache . cassandra . db . lifecycle ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . io . FSError ; 
 + import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . NativeLibrary ; 
 
 @ @ - 36 , 17 + 42 , 27 @ @ import org . apache . cassandra . utils . NativeLibrary ; 
 * / 
 final class LogReplica implements AutoCloseable 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( LogReplica . class ) ; 
 + 
 private final File file ; 
 private int folderDescriptor ; 
 
 static LogReplica create ( File folder , String fileName ) 
 { 
 - return new LogReplica ( new File ( fileName ) , NativeLibrary . tryOpenDirectory ( folder . getPath ( ) ) ) ; 
 + int folderFD = NativeLibrary . tryOpenDirectory ( folder . getPath ( ) ) ; 
 + if ( folderFD = = - 1 ) 
 + throw new FSReadError ( new IOException ( String . format ( " Invalid folder descriptor trying to create log replica % s " , folder . getPath ( ) ) ) , folder . getPath ( ) ) ; 
 + 
 + return new LogReplica ( new File ( fileName ) , folderFD ) ; 
 } 
 
 static LogReplica open ( File file ) 
 { 
 - return new LogReplica ( file , NativeLibrary . tryOpenDirectory ( file . getParentFile ( ) . getPath ( ) ) ) ; 
 + int folderFD = NativeLibrary . tryOpenDirectory ( file . getParentFile ( ) . getPath ( ) ) ; 
 + if ( folderFD = = - 1 ) 
 + throw new FSReadError ( new IOException ( String . format ( " Invalid folder descriptor trying to create log replica % s " , file . getParentFile ( ) . getPath ( ) ) ) , file . getParentFile ( ) . getPath ( ) ) ; 
 + 
 + return new LogReplica ( file , folderFD ) ; 
 } 
 
 LogReplica ( File file , int folderDescriptor ) 
 @ @ - 63 , 7 + 79 , 15 @ @ final class LogReplica implements AutoCloseable 
 void append ( LogRecord record ) 
 { 
 boolean existed = exists ( ) ; 
 - FileUtils . appendAndSync ( file , record . toString ( ) ) ; 
 + try 
 + { 
 + FileUtils . appendAndSync ( file , record . toString ( ) ) ; 
 + } 
 + catch ( FSError e ) 
 + { 
 + logger . error ( " Failed to sync file { } " , file , e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( e ) ; 
 + } 
 
 / / If the file did not exist before appending the first 
 / / line , then sync the folder as well since now it must exist 
 @ @ - 73 , 8 + 97 , 16 @ @ final class LogReplica implements AutoCloseable 
 
 void syncFolder ( ) 
 { 
 - if ( folderDescriptor > = 0 ) 
 - NativeLibrary . trySync ( folderDescriptor ) ; 
 + try 
 + { 
 + if ( folderDescriptor > = 0 ) 
 + NativeLibrary . trySync ( folderDescriptor ) ; 
 + } 
 + catch ( FSError e ) 
 + { 
 + logger . error ( " Failed to sync directory descriptor { } " , folderDescriptor , e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( e ) ; 
 + } 
 } 
 
 void delete ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java b / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java 
 index d8b2141 . . 0bf20e5 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogReplicaSet . java 
 @ @ - 15 , 7 + 15 , 6 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . db . lifecycle ; 
 
 import java . io . File ; 
 @ @ - 32 , 6 + 31 , 7 @ @ import com . google . common . annotations . VisibleForTesting ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . io . FSError ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . Throwables ; 
 
 @ @ - 61 , 7 + 61 , 15 @ @ public class LogReplicaSet implements AutoCloseable 
 { 
 File folder = file . getParentFile ( ) ; 
 assert ! replicasByFile . containsKey ( folder ) ; 
 - replicasByFile . put ( folder , LogReplica . open ( file ) ) ; 
 + try 
 + { 
 + replicasByFile . put ( folder , LogReplica . open ( file ) ) ; 
 + } 
 + catch ( FSError e ) 
 + { 
 + logger . error ( " Failed to open log replica { } " , file , e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( e ) ; 
 + } 
 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( " Added log file replica { } " , file ) ; 
 @ @ - 72 , 14 + 80 , 21 @ @ public class LogReplicaSet implements AutoCloseable 
 if ( replicasByFile . containsKey ( folder ) ) 
 return ; 
 
 - @ SuppressWarnings ( " resource " ) / / LogReplicas are closed in LogReplicaSet : : close 
 - final LogReplica replica = LogReplica . create ( folder , fileName ) ; 
 - 
 - records . forEach ( replica : : append ) ; 
 - replicasByFile . put ( folder , replica ) ; 
 + try 
 + { 
 + @ SuppressWarnings ( " resource " ) / / LogReplicas are closed in LogReplicaSet : : close 
 + final LogReplica replica = LogReplica . create ( folder , fileName ) ; 
 + records . forEach ( replica : : append ) ; 
 + replicasByFile . put ( folder , replica ) ; 
 
 - if ( logger . isTraceEnabled ( ) ) 
 - logger . trace ( " Created new file replica { } " , replica ) ; 
 + if ( logger . isTraceEnabled ( ) ) 
 + logger . trace ( " Created new file replica { } " , replica ) ; 
 + } 
 + catch ( FSError e ) 
 + { 
 + logger . error ( " Failed to create log replica { } / { } " , folder , fileName , e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( e ) ; 
 + } 
 } 
 
 Throwable syncFolder ( Throwable accumulate ) 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 index 00a222a . . 9bbf69d 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 @ @ - 37 , 11 + 37 , 13 @ @ import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . db . lifecycle . LogRecord . Type ; 
 + import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTable ; 
 import org . apache . cassandra . io . sstable . SnapshotDeletingTask ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . * ; 
 import org . apache . cassandra . utils . concurrent . Ref ; 
 import org . apache . cassandra . utils . concurrent . RefCounted ; 
 @ @ - 222 , 7 + 224 , 7 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran 
 catch ( IOException e ) 
 { 
 logger . error ( " Unable to delete { } " , file , e ) ; 
 - throw new RuntimeException ( e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( new FSWriteError ( e , file ) ) ; 
 } 
 } 
 
 @ @ - 256 , 8 + 258 , 10 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( " Removing files for transaction { } " , name ( ) ) ; 
 
 + / / this happens if we forget to close a txn and the garbage collector closes it for us 
 + / / or if the transaction journal was never properly created in the first place 
 if ( ! data . completed ( ) ) 
 - { / / this happens if we forget to close a txn and the garbage collector closes it for us 
 + { 
 logger . error ( " { } was not completed , trying to abort it now " , data ) ; 
 Throwable err = Throwables . perform ( ( Throwable ) null , data : : abort ) ; 
 if ( err ! = null ) 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsCatalog . java b / src / java / org / apache / cassandra / hints / HintsCatalog . java 
 index d1f6fba . . 7d5c8e6 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsCatalog . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsCatalog . java 
 @ @ - 26 , 8 + 26 , 13 @ @ import java . util . stream . Stream ; 
 import javax . annotation . Nullable ; 
 
 import com . google . common . collect . ImmutableMap ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . io . FSError ; 
 import org . apache . cassandra . io . FSReadError ; 
 + import org . apache . cassandra . io . FSWriteError ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . NativeLibrary ; 
 import org . apache . cassandra . utils . SyncUtil ; 
 
 @ @ - 38 , 6 + 43 , 8 @ @ import static java . util . stream . Collectors . groupingBy ; 
 * / 
 final class HintsCatalog 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( HintsCatalog . class ) ; 
 + 
 private final File hintsDirectory ; 
 private final Map < UUID , HintsStore > stores ; 
 private final ImmutableMap < String , Object > writerParams ; 
 @ @ - 142 , 8 + 149 , 21 @ @ final class HintsCatalog 
 int fd = NativeLibrary . tryOpenDirectory ( hintsDirectory . getAbsolutePath ( ) ) ; 
 if ( fd ! = - 1 ) 
 { 
 - SyncUtil . trySync ( fd ) ; 
 - NativeLibrary . tryCloseFD ( fd ) ; 
 + try 
 + { 
 + SyncUtil . trySync ( fd ) ; 
 + NativeLibrary . tryCloseFD ( fd ) ; 
 + } 
 + catch ( FSError e ) / / trySync failed 
 + { 
 + logger . error ( " Unable to sync directory { } " , hintsDirectory . getAbsolutePath ( ) , e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( e ) ; 
 + } 
 + } 
 + else 
 + { 
 + logger . error ( " Unable to open directory { } " , hintsDirectory . getAbsolutePath ( ) ) ; 
 + FileUtils . handleFSErrorAndPropagate ( new FSWriteError ( new IOException ( String . format ( " Unable to open hint directory % s " , hintsDirectory . getAbsolutePath ( ) ) ) , hintsDirectory . getAbsolutePath ( ) ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java b / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java 
 index eb1bffe . . 51a5362 100644 
 - - - a / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java 
 + + + b / src / java / org / apache / cassandra / hints / HintsWriteExecutor . java 
 @ @ - 22 , 9 + 22 , 14 @ @ import java . nio . ByteBuffer ; 
 import java . util . Iterator ; 
 import java . util . concurrent . * ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . concurrent . DebuggableThreadPoolExecutor ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . FSError ; 
 import org . apache . cassandra . io . FSWriteError ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 
 / * * 
 * A single threaded executor that exclusively writes all the hints and otherwise manipulate the writers . 
 @ @ - 35 , 6 + 40 , 8 @ @ import org . apache . cassandra . io . FSWriteError ; 
 * / 
 final class HintsWriteExecutor 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( HintsWriteExecutor . class ) ; 
 + 
 static final int WRITE _ BUFFER _ SIZE = 256 < < 10 ; 
 
 private final HintsCatalog catalog ; 
 @ @ - 151 , 7 + 158 , 15 @ @ final class HintsWriteExecutor 
 { 
 HintsBuffer buffer = bufferPool . currentBuffer ( ) ; 
 buffer . waitForModifications ( ) ; 
 - flush ( buffer ) ; 
 + try 
 + { 
 + flush ( buffer ) ; 
 + } 
 + catch ( FSError e ) 
 + { 
 + logger . error ( " Unable to flush hint buffer : { } " , e . getLocalizedMessage ( ) , e ) ; 
 + FileUtils . handleFSErrorAndPropagate ( e ) ; 
 + } 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index 80df67b . . ed683d0 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 46 , 6 + 46 , 7 @ @ import org . apache . cassandra . io . FSWriteError ; 
 import org . apache . cassandra . io . sstable . CorruptSSTableException ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 
 + import static com . google . common . base . Throwables . propagate ; 
 import static org . apache . cassandra . utils . Throwables . maybeFail ; 
 import static org . apache . cassandra . utils . Throwables . merge ; 
 
 @ @ - 497 , 6 + 498 , 21 @ @ public final class FileUtils 
 if ( handler ! = null ) 
 handler . handleFSError ( e ) ; 
 } 
 + 
 + / * * 
 + * handleFSErrorAndPropagate will invoke the disk failure policy error handler , 
 + * which may or may not stop the daemon or transports . However , if we don ' t exit , 
 + * we still want to propagate the exception to the caller in case they have custom 
 + * exception handling 
 + * 
 + * @ param e A filesystem error 
 + * / 
 + public static void handleFSErrorAndPropagate ( FSError e ) 
 + { 
 + handleFSError ( e ) ; 
 + throw propagate ( e ) ; 
 + } 
 + 
 / * * 
 * Get the size of a directory in bytes 
 * @ param directory The directory for which we need size . 
 diff - - git a / src / java / org / apache / cassandra / utils / NativeLibrary . java b / src / java / org / apache / cassandra / utils / NativeLibrary . java 
 index f96859e . . 0cc690e 100644 
 - - - a / src / java / org / apache / cassandra / utils / NativeLibrary . java 
 + + + b / src / java / org / apache / cassandra / utils / NativeLibrary . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import org . slf4j . LoggerFactory ; 
 
 import com . sun . jna . LastErrorException ; 
 
 + import org . apache . cassandra . io . FSWriteError ; 
 + 
 import static org . apache . cassandra . utils . NativeLibrary . OSType . LINUX ; 
 import static org . apache . cassandra . utils . NativeLibrary . OSType . MAC ; 
 import static org . apache . cassandra . utils . NativeLibrary . OSType . WINDOWS ; 
 @ @ - 318 , 7 + 320 , 9 @ @ public final class NativeLibrary 
 if ( ! ( e instanceof LastErrorException ) ) 
 throw e ; 
 
 - logger . warn ( " fsync ( { } ) failed , errorno ( { } ) { } " , fd , errno ( e ) , e ) ; 
 + String errMsg = String . format ( " fsync ( % s ) failed , errno % s " , fd , errno ( e ) ) ; 
 + logger . warn ( errMsg ) ; 
 + throw new FSWriteError ( e , errMsg ) ; 
 } 
 } 
 
 @ @ - 340 , 7 + 344 , 9 @ @ public final class NativeLibrary 
 if ( ! ( e instanceof LastErrorException ) ) 
 throw e ; 
 
 - logger . warn ( String . format ( " close ( % d ) failed , errno ( % d ) . " , fd , errno ( e ) ) ) ; 
 + String errMsg = String . format ( " close ( % d ) failed , errno ( % d ) . " , fd , errno ( e ) ) ; 
 + logger . warn ( errMsg ) ; 
 + throw new FSWriteError ( e , errMsg ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java 
 index 66c236c . . a8bfc5f 100644 
 - - - a / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java 
 + + + b / src / java / org / apache / cassandra / auth / SimpleAuthenticator . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Properties ; 
 import java . util . Map ; 
 
 import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . thrift . AuthenticationException ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 
 @ @ - 92 , 12 + 93 , 12 @ @ public class SimpleAuthenticator implements IAuthenticator 
 
 boolean authenticated = false ; 
 
 + InputStream in = null ; 
 try 
 { 
 - FileInputStream in = new FileInputStream ( pfilename ) ; 
 + in = new BufferedInputStream ( new FileInputStream ( pfilename ) ) ; 
 Properties props = new Properties ( ) ; 
 props . load ( in ) ; 
 - in . close ( ) ; 
 
 / / note we keep the message here and for the wrong password exactly the same to prevent attackers from guessing what users are valid 
 if ( null = = props . getProperty ( username ) ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; 
 @ @ - 125 , 6 + 126 , 10 @ @ public class SimpleAuthenticator implements IAuthenticator 
 { 
 throw new RuntimeException ( " Unexpected authentication problem " , e ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( in ) ; 
 + } 
 
 if ( ! authenticated ) throw new AuthenticationException ( authenticationErrorMessage ( mode , username ) ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index a128cfa . . a1ba4fa 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 266 , 12 + 266 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 Set < DecoratedKey > keys = new TreeSet < DecoratedKey > ( ) ; 
 if ( path . exists ( ) ) 
 { 
 + ObjectInputStream in = null ; 
 try 
 { 
 long start = System . currentTimeMillis ( ) ; 
 
 logger . info ( String . format ( " reading saved cache % s " , path ) ) ; 
 - ObjectInputStream in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 + in = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( path ) ) ) ; 
 while ( in . available ( ) > 0 ) 
 { 
 int size = in . readInt ( ) ; 
 @ @ - 279 , 7 + 280 , 6 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 in . readFully ( bytes ) ; 
 keys . add ( StorageService . getPartitioner ( ) . decorateKey ( ByteBuffer . wrap ( bytes ) ) ) ; 
 } 
 - in . close ( ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( String . format ( " completed reading ( % d ms ; % d keys ) saved cache % s " , 
 System . currentTimeMillis ( ) - start , keys . size ( ) , path ) ) ; 
 @ @ - 288 , 6 + 288 , 10 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 { 
 logger . warn ( String . format ( " error reading saved cache % s " , path . getAbsolutePath ( ) ) , ioe ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( in ) ; 
 + } 
 } 
 return keys ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 index 8e6ced5 . . 1e4e403 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import org . apache . cassandra . io . sstable . IndexHelper ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 import org . apache . cassandra . io . util . FileMark ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . slf4j . Logger ; 
 @ @ - 78 , 14 + 79 , 7 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 } 
 finally 
 { 
 - try 
 - { 
 - file . close ( ) ; 
 - } 
 - catch ( IOException ioe ) 
 - { 
 - logger . warn ( " error closing " + file . getPath ( ) ) ; 
 - } 
 + FileUtils . closeQuietly ( file ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 index 553c10e . . ff62aec 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLog . java 
 @ @ - 339 , 7 + 339 , 7 @ @ public class CommitLog 
 } 
 finally 
 { 
 - reader . close ( ) ; 
 + FileUtils . closeQuietly ( reader ) ; 
 logger . info ( " Finished reading " + file ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java 
 index 3efdc99 . . 538cbb9 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogHeader . java 
 @ @ - 25 , 8 + 25 , 8 @ @ import java . util . Map ; 
 import java . util . zip . CRC32 ; 
 import java . util . zip . Checksum ; 
 
 - import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . io . ICompactSerializer2 ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 
 public class CommitLogHeader 
 { 
 @ @ - 132 , 13 + 132 , 12 @ @ public class CommitLogHeader 
 DataInputStream reader = null ; 
 try 
 { 
 - reader = new DataInputStream ( new FileInputStream ( headerFile ) ) ; 
 + reader = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( headerFile ) ) ) ; 
 return serializer . deserialize ( reader ) ; 
 } 
 finally 
 { 
 - if ( reader ! = null ) 
 - reader . close ( ) ; 
 + FileUtils . closeQuietly ( reader ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / gms / FailureDetector . java b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 index e1212b4 . . 1c7d4dc 100644 
 - - - a / src / java / org / apache / cassandra / gms / FailureDetector . java 
 + + + b / src / java / org / apache / cassandra / gms / FailureDetector . java 
 @ @ - 18 , 10 + 18 , 12 @ @ 
 
 package org . apache . cassandra . gms ; 
 
 + import java . io . BufferedOutputStream ; 
 import java . io . File ; 
 import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . IOError ; 
 + import java . io . OutputStream ; 
 import java . lang . management . ManagementFactory ; 
 import java . util . * ; 
 import javax . management . MBeanServer ; 
 @ @ - 31 , 6 + 33 , 7 @ @ import org . apache . commons . lang . StringUtils ; 
 
 import java . net . InetAddress ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . BoundedStatsDeque ; 
 import org . slf4j . Logger ; 
 @ @ - 83 , 17 + 86 , 21 @ @ public class FailureDetector implements IFailureDetector , FailureDetectorMBean 
 * / 
 public void dumpInterArrivalTimes ( ) 
 { 
 + OutputStream os = null ; 
 try 
 { 
 File file = File . createTempFile ( " failuredetector - " , " . dat " ) ; 
 - FileOutputStream fos = new FileOutputStream ( file , true ) ; 
 - fos . write ( toString ( ) . getBytes ( ) ) ; 
 - fos . close ( ) ; 
 + os = new BufferedOutputStream ( new FileOutputStream ( file , true ) ) ; 
 + os . write ( toString ( ) . getBytes ( ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 throw new IOError ( e ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( os ) ; 
 + } 
 } 
 
 public void setPhiConvictThreshold ( int phi ) 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index a697b89 . . d3d3ac0 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package org . apache . cassandra . io . sstable ; 
 
 + import java . io . BufferedInputStream ; 
 import java . io . DataInput ; 
 import java . io . DataInputStream ; 
 import java . io . File ; 
 @ @ - 53 , 6 + 54 , 7 @ @ import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . io . ICompactSerializer2 ; 
 import org . apache . cassandra . io . util . BufferedRandomAccessFile ; 
 import org . apache . cassandra . io . util . FileDataInput ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . SegmentedFile ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . * ; 
 @ @ - 174 , 11 + 176 , 18 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 File statsFile = new File ( descriptor . filenameFor ( SSTable . COMPONENT _ STATS ) ) ; 
 if ( statsFile . exists ( ) ) 
 { 
 - logger . debug ( " Load statistics for { } " , descriptor ) ; 
 - DataInputStream dis = new DataInputStream ( new FileInputStream ( statsFile ) ) ; 
 - rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 - columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 - dis . close ( ) ; 
 + DataInputStream dis = null ; 
 + try 
 + { 
 + logger . debug ( " Load statistics for { } " , descriptor ) ; 
 + dis = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( statsFile ) ) ) ; 
 + rowSizes = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 + columnCounts = EstimatedHistogram . serializer . deserialize ( dis ) ; 
 + } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( dis ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 253 , 14 + 262 , 15 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 
 void loadBloomFilter ( ) throws IOException 
 { 
 - DataInputStream stream = new DataInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ; 
 + DataInputStream stream = null ; 
 try 
 { 
 + stream = new DataInputStream ( new BufferedInputStream ( new FileInputStream ( descriptor . filenameFor ( Component . FILTER ) ) ) ) ; 
 bf = BloomFilter . serializer ( ) . deserialize ( stream ) ; 
 } 
 finally 
 { 
 - stream . close ( ) ; 
 + FileUtils . closeQuietly ( stream ) ; 
 } 
 } 
 
 @ @ - 316 , 7 + 326 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 } 
 finally 
 { 
 - input . close ( ) ; 
 + FileUtils . closeQuietly ( input ) ; 
 } 
 
 / / finalize the state of the reader 
 @ @ - 497 , 14 + 507 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 } 
 finally 
 { 
 - try 
 - { 
 - input . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - logger . error ( " error closing file " , e ) ; 
 - } 
 + FileUtils . closeQuietly ( input ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 index 6090030 . . cb04c31 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableTracker . java 
 @ @ - 37 , 7 + 37 , 9 @ @ import org . apache . cassandra . cache . JMXInstrumentedCache ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . Pair ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 75 , 19 + 77 , 29 @ @ public class SSTableTracker implements Iterable < SSTableReader > 
 logger . info ( " saving " + msgSuffix ) ; 
 int count = 0 ; 
 File tmpFile = File . createTempFile ( savedCachePath . getName ( ) , null , savedCachePath . getParentFile ( ) ) ; 
 - FileOutputStream fout = new FileOutputStream ( tmpFile ) ; 
 - ObjectOutputStream out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; 
 - FileDescriptor fd = fout . getFD ( ) ; 
 - for ( K key : cache . getKeySet ( ) ) 
 + 
 + FileOutputStream fout = null ; 
 + ObjectOutputStream out = null ; 
 + try 
 + { 
 + fout = new FileOutputStream ( tmpFile ) ; 
 + out = new ObjectOutputStream ( new BufferedOutputStream ( fout ) ) ; 
 + FileDescriptor fd = fout . getFD ( ) ; 
 + for ( K key : cache . getKeySet ( ) ) 
 + { 
 + ByteBuffer bytes = converter . apply ( key ) ; 
 + out . writeInt ( bytes . remaining ( ) ) ; 
 + out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; 
 + + + count ; 
 + } 
 + out . flush ( ) ; 
 + fd . sync ( ) ; 
 + } 
 + finally 
 { 
 - ByteBuffer bytes = converter . apply ( key ) ; 
 - out . writeInt ( bytes . remaining ( ) ) ; 
 - out . write ( bytes . array ( ) , bytes . position ( ) + bytes . arrayOffset ( ) , bytes . remaining ( ) ) ; 
 - + + count ; 
 + FileUtils . closeQuietly ( out ) ; 
 + FileUtils . closeQuietly ( fout ) ; 
 } 
 - out . flush ( ) ; 
 - fd . sync ( ) ; 
 - out . close ( ) ; 
 if ( ! tmpFile . renameTo ( savedCachePath ) ) 
 throw new IOException ( " Unable to rename cache to " + savedCachePath ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / FileUtils . java b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 index 42bc06a . . 6bd8537 100644 
 - - - a / src / java / org / apache / cassandra / io / util / FileUtils . java 
 + + + b / src / java / org / apache / cassandra / io / util / FileUtils . java 
 @ @ - 18 , 14 + 18 , 12 @ @ 
 
 package org . apache . cassandra . io . util ; 
 
 - import java . io . File ; 
 - import java . io . FileNotFoundException ; 
 - import java . io . IOException ; 
 - import java . io . RandomAccessFile ; 
 + import java . io . * ; 
 import java . text . DecimalFormat ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 
 + import org . apache . cassandra . utils . FBUtilities ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 85 , 6 + 83 , 19 @ @ public class FileUtils 
 } 
 } 
 
 + public static void closeQuietly ( Closeable c ) 
 + { 
 + try 
 + { 
 + if ( c ! = null ) 
 + c . close ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + logger _ . warn ( " Failed closing stream " , e ) ; 
 + } 
 + } 
 + 
 public static class FileComparator implements Comparator < File > 
 { 
 public int compare ( File f , File f2 ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 index 693d850 . . 7b58802 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / MmappedSegmentedFile . java 
 @ @ - 173 , 14 + 173 , 7 @ @ public class MmappedSegmentedFile extends SegmentedFile 
 } 
 finally 
 { 
 - try 
 - { 
 - if ( raf ! = null ) raf . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new IOError ( e ) ; 
 - } 
 + FileUtils . closeQuietly ( raf ) ; 
 } 
 return segments ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 index cedb5fa . . 9982e54 100644 
 - - - a / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / PropertyFileSnitch . java 
 @ @ - 18 , 22 + 18 , 24 @ @ 
 
 package org . apache . cassandra . locator ; 
 
 + import java . io . BufferedReader ; 
 import java . io . FileReader ; 
 import java . io . IOException ; 
 + import java . io . Reader ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . ResourceWatcher ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 / * * 
 * Used to determine if two IP ' s are in the same datacenter or on the same rack . 
 @ @ - 112 , 14 + 114 , 20 @ @ public class PropertyFileSnitch extends AbstractNetworkTopologySnitch 
 
 String rackPropertyFilename = FBUtilities . resourceToFile ( RACK _ PROPERTY _ FILENAME ) ; 
 Properties properties = new Properties ( ) ; 
 + Reader reader = null ; 
 try 
 { 
 - properties . load ( new FileReader ( rackPropertyFilename ) ) ; 
 + reader = new BufferedReader ( new FileReader ( rackPropertyFilename ) ) ; 
 + properties . load ( reader ) ; 
 } 
 catch ( IOException e ) 
 { 
 throw new ConfigurationException ( " Unable to read " + RACK _ PROPERTY _ FILENAME , e ) ; 
 } 
 + finally 
 + { 
 + FileUtils . closeQuietly ( reader ) ; 
 + } 
 
 for ( Map . Entry < Object , Object > entry : properties . entrySet ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / FileStreamTask . java b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 index 647fd4a . . e4d32c5 100644 
 - - - a / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / FileStreamTask . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . nio . channels . FileChannel ; 
 import java . nio . channels . SocketChannel ; 
 
 - import org . apache . cassandra . streaming . StreamHeader ; 
 + import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . utils . Pair ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 
 + 
 public class FileStreamTask extends WrappedRunnable 
 { 
 private static Logger logger = LoggerFactory . getLogger ( FileStreamTask . class ) ; 
 @ @ - 109 , 14 + 110 , 7 @ @ public class FileStreamTask extends WrappedRunnable 
 } 
 finally 
 { 
 - try 
 - { 
 - raf . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new AssertionError ( e ) ; 
 - } 
 + FileUtils . closeQuietly ( raf ) ; 
 } 
 } 

