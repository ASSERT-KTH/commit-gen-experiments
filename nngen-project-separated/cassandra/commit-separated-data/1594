BLEU SCORE: 0.05341087579952926

TEST MSG: Let CassandraVersion handle SNAPSHOT version
GENERATED MSG: Add sstable bulk loading utility

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d4a8150 . . 2a242c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 4 , 6 + 4 , 7 @ @ <nl> * Ensure that UDF and UDAs are keyspace - isolated ( CASSANDRA - 9409 ) <nl> * Revert CASSANDRA - 7807 ( tracing completion client notifications ) ( CASSANDRA - 9429 ) <nl> * Add ability to stop compaction by ID ( CASSANDRA - 7207 ) <nl> + * Let CassandraVersion handle SNAPSHOT version ( CASSANDRA - 9438 ) <nl> Merged from 2 . 1 : <nl> * ( cqlsh ) Better float precision by default ( CASSANDRA - 9224 ) <nl> * Improve estimated row count ( CASSANDRA - 9107 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index 2698a8f . . 7b9261c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ import org . github . jamm . MemoryMeter ; <nl> <nl> public class QueryProcessor implements QueryHandler <nl> { <nl> - public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 2 . 0 " ) ; <nl> + public static final CassandraVersion CQL _ VERSION = new CassandraVersion ( " 3 . 2 . 0 " ) ; <nl> <nl> public static final QueryProcessor instance = new QueryProcessor ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 6e754a4 . . 67a3162 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 70 , 11 + 70 , 11 @ @ public final class SystemKeyspace <nl> / / Used to indicate that there was a previous version written to the legacy ( pre 1 . 2 ) <nl> / / system . Versions table , but that we cannot read it . Suffice to say , any upgrade should <nl> / / proceed through 1 . 2 . x before upgrading to the current version . <nl> - public static final SemanticVersion UNREADABLE _ VERSION = new SemanticVersion ( " 0 . 0 . 0 - unknown " ) ; <nl> + public static final CassandraVersion UNREADABLE _ VERSION = new CassandraVersion ( " 0 . 0 . 0 - unknown " ) ; <nl> <nl> / / Used to indicate that no previous version information was found . When encountered , we assume that <nl> / / Cassandra was not previously installed and we ' re in the process of starting a fresh node . <nl> - public static final SemanticVersion NULL _ VERSION = new SemanticVersion ( " 0 . 0 . 0 - absent " ) ; <nl> + public static final CassandraVersion NULL _ VERSION = new CassandraVersion ( " 0 . 0 . 0 - absent " ) ; <nl> <nl> public static final String NAME = " system " ; <nl> <nl> @ @ - 679 , 19 + 679 , 19 @ @ public final class SystemKeyspace <nl> * @ param ep endpoint address to check <nl> * @ return Release version or null if version is unknown . <nl> * / <nl> - public static SemanticVersion getReleaseVersion ( InetAddress ep ) <nl> + public static CassandraVersion getReleaseVersion ( InetAddress ep ) <nl> { <nl> try <nl> { <nl> if ( FBUtilities . getBroadcastAddress ( ) . equals ( ep ) ) <nl> { <nl> - return new SemanticVersion ( FBUtilities . getReleaseVersionString ( ) ) ; <nl> + return new CassandraVersion ( FBUtilities . getReleaseVersionString ( ) ) ; <nl> } <nl> String req = " SELECT release _ version FROM system . % s WHERE peer = ? " ; <nl> UntypedResultSet result = executeInternal ( String . format ( req , PEERS ) , ep ) ; <nl> if ( result ! = null & & result . one ( ) . has ( " release _ version " ) ) <nl> { <nl> - return new SemanticVersion ( result . one ( ) . getString ( " release _ version " ) ) ; <nl> + return new CassandraVersion ( result . one ( ) . getString ( " release _ version " ) ) ; <nl> } <nl> / / version is unknown <nl> return null ; <nl> diff - - git a / src / java / org / apache / cassandra / repair / AnticompactionTask . java b / src / java / org / apache / cassandra / repair / AnticompactionTask . java <nl> index d1bbb82 . . 16de071 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / AnticompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / repair / AnticompactionTask . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import org . apache . cassandra . net . IAsyncCallbackWithFailure ; <nl> import org . apache . cassandra . net . MessageIn ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . repair . messages . AnticompactionRequest ; <nl> - import org . apache . cassandra . utils . SemanticVersion ; <nl> + import org . apache . cassandra . utils . CassandraVersion ; <nl> <nl> public class AnticompactionTask extends AbstractFuture < InetAddress > implements Runnable <nl> { <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class AnticompactionTask extends AbstractFuture < InetAddress > implements R <nl> * Version that anticompaction response is not supported up to . <nl> * If Cassandra version is more than this , we need to wait for anticompaction response . <nl> * / <nl> - private static final SemanticVersion VERSION _ CHECKER = new SemanticVersion ( " 2 . 1 . 5 " ) ; <nl> + private static final CassandraVersion VERSION _ CHECKER = new CassandraVersion ( " 2 . 1 . 5 " ) ; <nl> <nl> private final UUID parentSession ; <nl> private final InetAddress neighbor ; <nl> @ @ - 55 , 7 + 55 , 7 @ @ public class AnticompactionTask extends AbstractFuture < InetAddress > implements R <nl> public void run ( ) <nl> { <nl> AnticompactionRequest acr = new AnticompactionRequest ( parentSession , successfulRanges ) ; <nl> - SemanticVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; <nl> + CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; <nl> if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION _ CHECKER ) > 0 ) <nl> { <nl> MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; <nl> diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java <nl> index b171f08 . . b9e89f5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ClientState . java <nl> + + + b / src / java / org / apache / cassandra / service / ClientState . java <nl> @ @ - 43 , 7 + 43 , 7 @ @ import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . tracing . TraceKeyspace ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> - import org . apache . cassandra . utils . SemanticVersion ; <nl> + import org . apache . cassandra . utils . CassandraVersion ; <nl> <nl> / * * <nl> * State related to a client connection . <nl> @ @ - 51 , 7 + 51 , 7 @ @ import org . apache . cassandra . utils . SemanticVersion ; <nl> public class ClientState <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( ClientState . class ) ; <nl> - public static final SemanticVersion DEFAULT _ CQL _ VERSION = org . apache . cassandra . cql3 . QueryProcessor . CQL _ VERSION ; <nl> + public static final CassandraVersion DEFAULT _ CQL _ VERSION = org . apache . cassandra . cql3 . QueryProcessor . CQL _ VERSION ; <nl> <nl> private static final Set < IResource > READABLE _ SYSTEM _ RESOURCES = new HashSet < > ( ) ; <nl> private static final Set < IResource > PROTECTED _ AUTH _ RESOURCES = new HashSet < > ( ) ; <nl> @ @ - 352 , 9 + 352 , 9 @ @ public class ClientState <nl> return user ; <nl> } <nl> <nl> - public static SemanticVersion [ ] getCQLSupportedVersion ( ) <nl> + public static CassandraVersion [ ] getCQLSupportedVersion ( ) <nl> { <nl> - return new SemanticVersion [ ] { QueryProcessor . CQL _ VERSION } ; <nl> + return new CassandraVersion [ ] { QueryProcessor . CQL _ VERSION } ; <nl> } <nl> <nl> private Set < Permission > authorize ( IResource resource ) <nl> diff - - git a / src / java / org / apache / cassandra / transport / messages / StartupMessage . java b / src / java / org / apache / cassandra / transport / messages / StartupMessage . java <nl> index ac7a1f2 . . 04d8e62 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / messages / StartupMessage . java <nl> + + + b / src / java / org / apache / cassandra / transport / messages / StartupMessage . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import io . netty . buffer . ByteBuf ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . transport . * ; <nl> - import org . apache . cassandra . utils . SemanticVersion ; <nl> + import org . apache . cassandra . utils . CassandraVersion ; <nl> <nl> / * * <nl> * The initial message of the protocol . <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class StartupMessage extends Message . Request <nl> <nl> try <nl> { <nl> - if ( new SemanticVersion ( cqlVersion ) . compareTo ( new SemanticVersion ( " 2 . 99 . 0 " ) ) < 0 ) <nl> + if ( new CassandraVersion ( cqlVersion ) . compareTo ( new CassandraVersion ( " 2 . 99 . 0 " ) ) < 0 ) <nl> throw new ProtocolException ( String . format ( " CQL version % s is not supported by the binary protocol ( supported version are > = 3 . 0 . 0 ) " , cqlVersion ) ) ; <nl> } <nl> catch ( IllegalArgumentException e ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / CassandraVersion . java b / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> new file mode 100644 <nl> index 0000000 . . 62d68be <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / CassandraVersion . java <nl> @ @ - 0 , 0 + 1 , 231 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> + import com . google . common . base . Objects ; <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> + <nl> + / * * <nl> + * Implements versioning used in Cassandra and CQL . <nl> + * < p / > <nl> + * Note : The following code uses a slight variation from the semver document ( http : / / semver . org ) . <nl> + * / <nl> + public class CassandraVersion implements Comparable < CassandraVersion > <nl> + { <nl> + private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) \ \ . ( \ \ d + ) ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; <nl> + private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; <nl> + private static final Pattern SNAPSHOT = Pattern . compile ( " - SNAPSHOT " ) ; <nl> + <nl> + public final int major ; <nl> + public final int minor ; <nl> + public final int patch ; <nl> + <nl> + private final String [ ] preRelease ; <nl> + private final String [ ] build ; <nl> + <nl> + private CassandraVersion ( int major , int minor , int patch , String [ ] preRelease , String [ ] build ) <nl> + { <nl> + this . major = major ; <nl> + this . minor = minor ; <nl> + this . patch = patch ; <nl> + this . preRelease = preRelease ; <nl> + this . build = build ; <nl> + } <nl> + <nl> + / * * <nl> + * Parse a version from a string . <nl> + * <nl> + * @ param version the string to parse <nl> + * @ throws IllegalArgumentException if the provided string does not <nl> + * represent a version <nl> + * / <nl> + public CassandraVersion ( String version ) <nl> + { <nl> + String stripped = SNAPSHOT . matcher ( version ) . replaceFirst ( " " ) ; <nl> + Matcher matcher = pattern . matcher ( stripped ) ; <nl> + if ( ! matcher . matches ( ) ) <nl> + throw new IllegalArgumentException ( " Invalid version value : " + version ) ; <nl> + <nl> + try <nl> + { <nl> + this . major = Integer . parseInt ( matcher . group ( 1 ) ) ; <nl> + this . minor = Integer . parseInt ( matcher . group ( 2 ) ) ; <nl> + this . patch = Integer . parseInt ( matcher . group ( 3 ) ) ; <nl> + <nl> + String pr = matcher . group ( 4 ) ; <nl> + String bld = matcher . group ( 5 ) ; <nl> + <nl> + this . preRelease = pr = = null | | pr . isEmpty ( ) ? null : parseIdentifiers ( stripped , pr ) ; <nl> + this . build = bld = = null | | bld . isEmpty ( ) ? null : parseIdentifiers ( stripped , bld ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + throw new IllegalArgumentException ( " Invalid version value : " + version ) ; <nl> + } <nl> + } <nl> + <nl> + private static String [ ] parseIdentifiers ( String version , String str ) <nl> + { <nl> + / / Drop initial - or + <nl> + str = str . substring ( 1 ) ; <nl> + String [ ] parts = str . split ( " \ \ . " ) ; <nl> + for ( String part : parts ) <nl> + { <nl> + if ( ! part . matches ( " \ \ w + " ) ) <nl> + throw new IllegalArgumentException ( " Invalid version value : " + version ) ; <nl> + } <nl> + return parts ; <nl> + } <nl> + <nl> + public int compareTo ( CassandraVersion other ) <nl> + { <nl> + if ( major < other . major ) <nl> + return - 1 ; <nl> + if ( major > other . major ) <nl> + return 1 ; <nl> + <nl> + if ( minor < other . minor ) <nl> + return - 1 ; <nl> + if ( minor > other . minor ) <nl> + return 1 ; <nl> + <nl> + if ( patch < other . patch ) <nl> + return - 1 ; <nl> + if ( patch > other . patch ) <nl> + return 1 ; <nl> + <nl> + int c = compareIdentifiers ( preRelease , other . preRelease , 1 ) ; <nl> + if ( c ! = 0 ) <nl> + return c ; <nl> + <nl> + return compareIdentifiers ( build , other . build , - 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns a version that is backward compatible with this version amongst a list <nl> + * of provided version , or null if none can be found . <nl> + * < p / > <nl> + * For instance : <nl> + * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " , " 3 . 0 . 0 " ) = = " 2 . 0 . 0 " <nl> + * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 1 . 3 " , " 3 . 0 . 0 " ) = = " 2 . 1 . 3 " <nl> + * " 2 . 0 . 0 " . findSupportingVersion ( " 3 . 0 . 0 " ) = = null <nl> + * " 2 . 0 . 3 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = " 2 . 0 . 0 " <nl> + * " 2 . 1 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = null <nl> + * / <nl> + public CassandraVersion findSupportingVersion ( CassandraVersion . . . versions ) <nl> + { <nl> + for ( CassandraVersion version : versions ) <nl> + { <nl> + if ( isSupportedBy ( version ) ) <nl> + return version ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + public boolean isSupportedBy ( CassandraVersion version ) <nl> + { <nl> + return major = = version . major & & this . compareTo ( version ) < = 0 ; <nl> + } <nl> + <nl> + private static int compareIdentifiers ( String [ ] ids1 , String [ ] ids2 , int defaultPred ) <nl> + { <nl> + if ( ids1 = = null ) <nl> + return ids2 = = null ? 0 : defaultPred ; <nl> + else if ( ids2 = = null ) <nl> + return - defaultPred ; <nl> + <nl> + int min = Math . min ( ids1 . length , ids2 . length ) ; <nl> + for ( int i = 0 ; i < min ; i + + ) <nl> + { <nl> + Integer i1 = tryParseInt ( ids1 [ i ] ) ; <nl> + Integer i2 = tryParseInt ( ids2 [ i ] ) ; <nl> + <nl> + if ( i1 ! = null ) <nl> + { <nl> + / / integer have precedence <nl> + if ( i2 = = null | | i1 < i2 ) <nl> + return - 1 ; <nl> + else if ( i1 > i2 ) <nl> + return 1 ; <nl> + } <nl> + else <nl> + { <nl> + / / integer have precedence <nl> + if ( i2 ! = null ) <nl> + return 1 ; <nl> + <nl> + int c = ids1 [ i ] . compareTo ( ids2 [ i ] ) ; <nl> + if ( c ! = 0 ) <nl> + return c ; <nl> + } <nl> + } <nl> + <nl> + if ( ids1 . length < ids2 . length ) <nl> + return - 1 ; <nl> + if ( ids1 . length > ids2 . length ) <nl> + return 1 ; <nl> + return 0 ; <nl> + } <nl> + <nl> + private static Integer tryParseInt ( String str ) <nl> + { <nl> + try <nl> + { <nl> + return Integer . valueOf ( str ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object o ) <nl> + { <nl> + if ( ! ( o instanceof CassandraVersion ) ) <nl> + return false ; <nl> + CassandraVersion that = ( CassandraVersion ) o ; <nl> + return major = = that . major <nl> + & & minor = = that . minor <nl> + & & patch = = that . patch <nl> + & & Arrays . equals ( preRelease , that . preRelease ) <nl> + & & Arrays . equals ( build , that . build ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hashCode ( major , minor , patch , preRelease , build ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + StringBuilder sb = new StringBuilder ( ) ; <nl> + sb . append ( major ) . append ( ' . ' ) . append ( minor ) . append ( ' . ' ) . append ( patch ) ; <nl> + if ( preRelease ! = null ) <nl> + sb . append ( ' - ' ) . append ( StringUtils . join ( preRelease , " . " ) ) ; <nl> + if ( build ! = null ) <nl> + sb . append ( ' + ' ) . append ( StringUtils . join ( build , " . " ) ) ; <nl> + return sb . toString ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / utils / SemanticVersion . java b / src / java / org / apache / cassandra / utils / SemanticVersion . java <nl> deleted file mode 100644 <nl> index 858029d . . 0000000 <nl> - - - a / src / java / org / apache / cassandra / utils / SemanticVersion . java <nl> + + + / dev / null <nl> @ @ - 1 , 231 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import java . util . regex . Pattern ; <nl> - import java . util . regex . Matcher ; <nl> - import java . util . Arrays ; <nl> - <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> - import com . google . common . base . Objects ; <nl> - <nl> - / * * <nl> - * Implements semantic versioning as defined at http : / / semver . org / . <nl> - * <nl> - * Note : The following code uses a slight variation from the document above in <nl> - * that it doesn ' t allow dashes in pre - release and build identifier . <nl> - * / <nl> - public class SemanticVersion implements Comparable < SemanticVersion > <nl> - { <nl> - private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) \ \ . ( \ \ d + ) ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; <nl> - private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; <nl> - <nl> - public final int major ; <nl> - public final int minor ; <nl> - public final int patch ; <nl> - <nl> - private final String [ ] preRelease ; <nl> - private final String [ ] build ; <nl> - <nl> - private SemanticVersion ( int major , int minor , int patch , String [ ] preRelease , String [ ] build ) <nl> - { <nl> - this . major = major ; <nl> - this . minor = minor ; <nl> - this . patch = patch ; <nl> - this . preRelease = preRelease ; <nl> - this . build = build ; <nl> - } <nl> - <nl> - / * * <nl> - * Parse a semantic version from a string . <nl> - * <nl> - * @ param version the string to parse <nl> - * @ throws IllegalArgumentException if the provided string does not <nl> - * represent a semantic version <nl> - * / <nl> - public SemanticVersion ( String version ) <nl> - { <nl> - Matcher matcher = pattern . matcher ( version ) ; <nl> - if ( ! matcher . matches ( ) ) <nl> - throw new IllegalArgumentException ( " Invalid version value : " + version + " ( see http : / / semver . org / for details ) " ) ; <nl> - <nl> - try <nl> - { <nl> - this . major = Integer . parseInt ( matcher . group ( 1 ) ) ; <nl> - this . minor = Integer . parseInt ( matcher . group ( 2 ) ) ; <nl> - this . patch = Integer . parseInt ( matcher . group ( 3 ) ) ; <nl> - <nl> - String pr = matcher . group ( 4 ) ; <nl> - String bld = matcher . group ( 5 ) ; <nl> - <nl> - this . preRelease = pr = = null | | pr . isEmpty ( ) ? null : parseIdentifiers ( version , pr ) ; <nl> - this . build = bld = = null | | bld . isEmpty ( ) ? null : parseIdentifiers ( version , bld ) ; <nl> - <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - throw new IllegalArgumentException ( " Invalid version value : " + version + " ( see http : / / semver . org / for details ) " ) ; <nl> - } <nl> - } <nl> - <nl> - private static String [ ] parseIdentifiers ( String version , String str ) <nl> - { <nl> - / / Drop initial - or + <nl> - str = str . substring ( 1 ) ; <nl> - String [ ] parts = str . split ( " \ \ . " ) ; <nl> - for ( String part : parts ) <nl> - { <nl> - if ( ! part . matches ( " \ \ w + " ) ) <nl> - throw new IllegalArgumentException ( " Invalid version value : " + version + " ( see http : / / semver . org / for details ) " ) ; <nl> - } <nl> - return parts ; <nl> - } <nl> - <nl> - public int compareTo ( SemanticVersion other ) <nl> - { <nl> - if ( major < other . major ) <nl> - return - 1 ; <nl> - if ( major > other . major ) <nl> - return 1 ; <nl> - <nl> - if ( minor < other . minor ) <nl> - return - 1 ; <nl> - if ( minor > other . minor ) <nl> - return 1 ; <nl> - <nl> - if ( patch < other . patch ) <nl> - return - 1 ; <nl> - if ( patch > other . patch ) <nl> - return 1 ; <nl> - <nl> - int c = compareIdentifiers ( preRelease , other . preRelease , 1 ) ; <nl> - if ( c ! = 0 ) <nl> - return c ; <nl> - <nl> - return compareIdentifiers ( build , other . build , - 1 ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Returns a version that is backward compatible with this version amongst a list <nl> - * of provided version , or null if none can be found . <nl> - * <nl> - * For instance : <nl> - * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " , " 3 . 0 . 0 " ) = = " 2 . 0 . 0 " <nl> - * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 1 . 3 " , " 3 . 0 . 0 " ) = = " 2 . 1 . 3 " <nl> - * " 2 . 0 . 0 " . findSupportingVersion ( " 3 . 0 . 0 " ) = = null <nl> - * " 2 . 0 . 3 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = " 2 . 0 . 0 " <nl> - * " 2 . 1 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = null <nl> - * / <nl> - public SemanticVersion findSupportingVersion ( SemanticVersion . . . versions ) <nl> - { <nl> - for ( SemanticVersion version : versions ) <nl> - { <nl> - if ( isSupportedBy ( version ) ) <nl> - return version ; <nl> - } <nl> - return null ; <nl> - } <nl> - <nl> - public boolean isSupportedBy ( SemanticVersion version ) <nl> - { <nl> - return major = = version . major & & this . compareTo ( version ) < = 0 ; <nl> - } <nl> - <nl> - private static int compareIdentifiers ( String [ ] ids1 , String [ ] ids2 , int defaultPred ) <nl> - { <nl> - if ( ids1 = = null ) <nl> - return ids2 = = null ? 0 : defaultPred ; <nl> - else if ( ids2 = = null ) <nl> - return - defaultPred ; <nl> - <nl> - int min = Math . min ( ids1 . length , ids2 . length ) ; <nl> - for ( int i = 0 ; i < min ; i + + ) <nl> - { <nl> - Integer i1 = tryParseInt ( ids1 [ i ] ) ; <nl> - Integer i2 = tryParseInt ( ids2 [ i ] ) ; <nl> - <nl> - if ( i1 ! = null ) <nl> - { <nl> - / / integer have precedence <nl> - if ( i2 = = null | | i1 < i2 ) <nl> - return - 1 ; <nl> - else if ( i1 > i2 ) <nl> - return 1 ; <nl> - } <nl> - else <nl> - { <nl> - / / integer have precedence <nl> - if ( i2 ! = null ) <nl> - return 1 ; <nl> - <nl> - int c = ids1 [ i ] . compareTo ( ids2 [ i ] ) ; <nl> - if ( c ! = 0 ) <nl> - return c ; <nl> - } <nl> - } <nl> - <nl> - if ( ids1 . length < ids2 . length ) <nl> - return - 1 ; <nl> - if ( ids1 . length > ids2 . length ) <nl> - return 1 ; <nl> - return 0 ; <nl> - } <nl> - <nl> - private static Integer tryParseInt ( String str ) <nl> - { <nl> - try <nl> - { <nl> - return Integer . valueOf ( str ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - return null ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public boolean equals ( Object o ) <nl> - { <nl> - if ( ! ( o instanceof SemanticVersion ) ) <nl> - return false ; <nl> - SemanticVersion that = ( SemanticVersion ) o ; <nl> - return major = = that . major <nl> - & & minor = = that . minor <nl> - & & patch = = that . patch <nl> - & & Arrays . equals ( preRelease , that . preRelease ) <nl> - & & Arrays . equals ( build , that . build ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int hashCode ( ) <nl> - { <nl> - return Objects . hashCode ( major , minor , patch , preRelease , build ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) <nl> - { <nl> - StringBuilder sb = new StringBuilder ( ) ; <nl> - sb . append ( major ) . append ( ' . ' ) . append ( minor ) . append ( ' . ' ) . append ( patch ) ; <nl> - if ( preRelease ! = null ) <nl> - sb . append ( ' - ' ) . append ( StringUtils . join ( preRelease , " . " ) ) ; <nl> - if ( build ! = null ) <nl> - sb . append ( ' + ' ) . append ( StringUtils . join ( build , " . " ) ) ; <nl> - return sb . toString ( ) ; <nl> - } <nl> - } <nl> diff - - git a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java <nl> index 7531b06 . . 093f359 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import org . apache . cassandra . dht . ByteOrderedPartitioner . BytesToken ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> - import org . apache . cassandra . utils . SemanticVersion ; <nl> + import org . apache . cassandra . utils . CassandraVersion ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertTrue ; <nl> @ @ - 110 , 7 + 110 , 7 @ @ public class SystemKeyspaceTest <nl> private String getOlderVersionString ( ) <nl> { <nl> String version = FBUtilities . getReleaseVersionString ( ) ; <nl> - SemanticVersion semver = new SemanticVersion ( version . contains ( " - " ) ? version . substring ( 0 , version . indexOf ( ' - ' ) ) <nl> + CassandraVersion semver = new CassandraVersion ( version . contains ( " - " ) ? version . substring ( 0 , version . indexOf ( ' - ' ) ) <nl> : version ) ; <nl> return ( String . format ( " % s . % s . % s " , semver . major - 1 , semver . minor , semver . patch ) ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> new file mode 100644 <nl> index 0000000 . . 145b735 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java <nl> @ @ - 0 , 0 + 1 , 146 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class CassandraVersionTest <nl> + { <nl> + @ Test <nl> + public void testParsing ( ) <nl> + { <nl> + CassandraVersion version ; <nl> + <nl> + version = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> + <nl> + version = new CassandraVersion ( " 1 . 2 . 3 - foo . 2 + Bar " ) ; <nl> + assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> + <nl> + / / CassandraVersion can parse 4th ' . ' as build number <nl> + version = new CassandraVersion ( " 1 . 2 . 3 . 456 " ) ; <nl> + assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testComparison ( ) <nl> + { <nl> + CassandraVersion v1 , v2 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; <nl> + assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + assert v1 . compareTo ( v2 ) = = 0 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 2 . 0 . 0 " ) ; <nl> + assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + assert v2 . compareTo ( v1 ) = = 1 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha " ) ; <nl> + assert v1 . compareTo ( v2 ) = = 1 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 3 + foo " ) ; <nl> + assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + foo " ) ; <nl> + assert v1 . compareTo ( v2 ) = = 1 ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 1 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 2 " ) ; <nl> + assert v1 . compareTo ( v2 ) = = - 1 ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIsSupportedBy ( ) <nl> + { <nl> + CassandraVersion v1 , v2 ; <nl> + <nl> + v1 = new CassandraVersion ( " 3 . 0 . 2 " ) ; <nl> + assert v1 . isSupportedBy ( v1 ) ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; <nl> + assert v1 . isSupportedBy ( v2 ) ; <nl> + assert ! v2 . isSupportedBy ( v1 ) ; <nl> + <nl> + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; <nl> + assert v1 . isSupportedBy ( v2 ) ; <nl> + assert ! v2 . isSupportedBy ( v1 ) ; <nl> + <nl> + v1 = new CassandraVersion ( " 2 . 2 . 3 " ) ; <nl> + v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; <nl> + assert ! v1 . isSupportedBy ( v2 ) ; <nl> + assert ! v2 . isSupportedBy ( v1 ) ; <nl> + <nl> + v1 = new CassandraVersion ( " 3 . 1 . 0 " ) ; <nl> + v2 = new CassandraVersion ( " 3 . 0 . 1 " ) ; <nl> + assert ! v1 . isSupportedBy ( v2 ) ; <nl> + assert v2 . isSupportedBy ( v1 ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testInvalid ( ) <nl> + { <nl> + assertThrows ( " 1 . 0 " ) ; <nl> + assertThrows ( " 1 . 0 . 0a " ) ; <nl> + assertThrows ( " 1 . a . 4 " ) ; <nl> + assertThrows ( " 1 . 0 . 0 - foo & " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSnapshot ( ) <nl> + { <nl> + CassandraVersion prev , next ; <nl> + <nl> + prev = new CassandraVersion ( " 2 . 1 . 5 " ) ; <nl> + next = new CassandraVersion ( " 2 . 1 . 5 . 123 " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = next ; <nl> + next = new CassandraVersion ( " 2 . 2 . 0 - beta1 - SNAPSHOT " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = new CassandraVersion ( " 2 . 2 . 0 - beta1 " ) ; <nl> + next = new CassandraVersion ( " 2 . 2 . 0 - rc1 - SNAPSHOT " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + <nl> + prev = next ; <nl> + next = new CassandraVersion ( " 2 . 2 . 0 " ) ; <nl> + assertTrue ( prev . compareTo ( next ) < 0 ) ; <nl> + } <nl> + <nl> + private static void assertThrows ( String str ) <nl> + { <nl> + try <nl> + { <nl> + new CassandraVersion ( str ) ; <nl> + assert false ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java b / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java <nl> deleted file mode 100644 <nl> index 4ead709 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 113 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - public class SemanticVersionTest <nl> - { <nl> - @ Test <nl> - public void testParsing ( ) <nl> - { <nl> - SemanticVersion version ; <nl> - <nl> - version = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> - <nl> - version = new SemanticVersion ( " 1 . 2 . 3 - foo . 2 + Bar " ) ; <nl> - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testComparison ( ) <nl> - { <nl> - SemanticVersion v1 , v2 ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 2 . 4 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = 0 ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 2 . 0 . 0 " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 2 . 3 - alpha " ) ; <nl> - assert v1 . compareTo ( v2 ) = = 1 ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 2 . 3 + foo " ) ; <nl> - assert v1 . compareTo ( v2 ) = = - 1 ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 2 . 3 - alpha + foo " ) ; <nl> - assert v1 . compareTo ( v2 ) = = 1 ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testIsSupportedBy ( ) <nl> - { <nl> - SemanticVersion v1 , v2 ; <nl> - <nl> - v1 = new SemanticVersion ( " 3 . 0 . 2 " ) ; <nl> - assert v1 . isSupportedBy ( v1 ) ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 2 . 4 " ) ; <nl> - assert v1 . isSupportedBy ( v2 ) ; <nl> - assert ! v2 . isSupportedBy ( v1 ) ; <nl> - <nl> - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 3 . 3 " ) ; <nl> - assert v1 . isSupportedBy ( v2 ) ; <nl> - assert ! v2 . isSupportedBy ( v1 ) ; <nl> - <nl> - v1 = new SemanticVersion ( " 2 . 2 . 3 " ) ; <nl> - v2 = new SemanticVersion ( " 1 . 3 . 3 " ) ; <nl> - assert ! v1 . isSupportedBy ( v2 ) ; <nl> - assert ! v2 . isSupportedBy ( v1 ) ; <nl> - <nl> - v1 = new SemanticVersion ( " 3 . 1 . 0 " ) ; <nl> - v2 = new SemanticVersion ( " 3 . 0 . 1 " ) ; <nl> - assert ! v1 . isSupportedBy ( v2 ) ; <nl> - assert v2 . isSupportedBy ( v1 ) ; <nl> - } <nl> - <nl> - @ Test <nl> - public void testInvalid ( ) <nl> - { <nl> - assertThrows ( " 1 . 0 " ) ; <nl> - assertThrows ( " 1 . 0 . 0a " ) ; <nl> - assertThrows ( " 1 . a . 4 " ) ; <nl> - assertThrows ( " 1 . 0 . 0 - foo & " ) ; <nl> - } <nl> - <nl> - private static void assertThrows ( String str ) <nl> - { <nl> - try <nl> - { <nl> - new SemanticVersion ( str ) ; <nl> - assert false ; <nl> - } <nl> - catch ( IllegalArgumentException e ) { } <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> index 6077e38 . . 84b91e9 100644 <nl> - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro <nl> return reply . rows ; <nl> } <nl> <nl> - / / Note : this deserializes the response a 2nd time if getData was called first <nl> + / / Note : this would deserialize the response a 2nd time if getData was called first . <nl> / / ( this is not currently an issue since we don ' t do read repair for range queries . ) <nl> public Iterable < Row > resolve ( ) throws IOException <nl> { <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro <nl> return o1 . left . key . compareTo ( o2 . left . key ) ; <nl> } <nl> } ) ; <nl> - <nl> + <nl> int n = 0 ; <nl> for ( Message response : responses ) <nl> { <nl> @ @ - 83 , 7 + 83 , 6 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro <nl> } <nl> <nl> / / for each row , compute the combination of all different versions seen , and repair incomplete versions <nl> - <nl> return new ReducingIterator < Pair < Row , InetAddress > , Row > ( collator ) <nl> { <nl> List < ColumnFamily > versions = new ArrayList < ColumnFamily > ( sources . size ( ) ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d4a8150 . . 2a242c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 4 , 6 + 4 , 7 @ @ 
 * Ensure that UDF and UDAs are keyspace - isolated ( CASSANDRA - 9409 ) 
 * Revert CASSANDRA - 7807 ( tracing completion client notifications ) ( CASSANDRA - 9429 ) 
 * Add ability to stop compaction by ID ( CASSANDRA - 7207 ) 
 + * Let CassandraVersion handle SNAPSHOT version ( CASSANDRA - 9438 ) 
 Merged from 2 . 1 : 
 * ( cqlsh ) Better float precision by default ( CASSANDRA - 9224 ) 
 * Improve estimated row count ( CASSANDRA - 9107 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index 2698a8f . . 7b9261c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 56 , 7 + 56 , 7 @ @ import org . github . jamm . MemoryMeter ; 
 
 public class QueryProcessor implements QueryHandler 
 { 
 - public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 2 . 0 " ) ; 
 + public static final CassandraVersion CQL _ VERSION = new CassandraVersion ( " 3 . 2 . 0 " ) ; 
 
 public static final QueryProcessor instance = new QueryProcessor ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 6e754a4 . . 67a3162 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 70 , 11 + 70 , 11 @ @ public final class SystemKeyspace 
 / / Used to indicate that there was a previous version written to the legacy ( pre 1 . 2 ) 
 / / system . Versions table , but that we cannot read it . Suffice to say , any upgrade should 
 / / proceed through 1 . 2 . x before upgrading to the current version . 
 - public static final SemanticVersion UNREADABLE _ VERSION = new SemanticVersion ( " 0 . 0 . 0 - unknown " ) ; 
 + public static final CassandraVersion UNREADABLE _ VERSION = new CassandraVersion ( " 0 . 0 . 0 - unknown " ) ; 
 
 / / Used to indicate that no previous version information was found . When encountered , we assume that 
 / / Cassandra was not previously installed and we ' re in the process of starting a fresh node . 
 - public static final SemanticVersion NULL _ VERSION = new SemanticVersion ( " 0 . 0 . 0 - absent " ) ; 
 + public static final CassandraVersion NULL _ VERSION = new CassandraVersion ( " 0 . 0 . 0 - absent " ) ; 
 
 public static final String NAME = " system " ; 
 
 @ @ - 679 , 19 + 679 , 19 @ @ public final class SystemKeyspace 
 * @ param ep endpoint address to check 
 * @ return Release version or null if version is unknown . 
 * / 
 - public static SemanticVersion getReleaseVersion ( InetAddress ep ) 
 + public static CassandraVersion getReleaseVersion ( InetAddress ep ) 
 { 
 try 
 { 
 if ( FBUtilities . getBroadcastAddress ( ) . equals ( ep ) ) 
 { 
 - return new SemanticVersion ( FBUtilities . getReleaseVersionString ( ) ) ; 
 + return new CassandraVersion ( FBUtilities . getReleaseVersionString ( ) ) ; 
 } 
 String req = " SELECT release _ version FROM system . % s WHERE peer = ? " ; 
 UntypedResultSet result = executeInternal ( String . format ( req , PEERS ) , ep ) ; 
 if ( result ! = null & & result . one ( ) . has ( " release _ version " ) ) 
 { 
 - return new SemanticVersion ( result . one ( ) . getString ( " release _ version " ) ) ; 
 + return new CassandraVersion ( result . one ( ) . getString ( " release _ version " ) ) ; 
 } 
 / / version is unknown 
 return null ; 
 diff - - git a / src / java / org / apache / cassandra / repair / AnticompactionTask . java b / src / java / org / apache / cassandra / repair / AnticompactionTask . java 
 index d1bbb82 . . 16de071 100644 
 - - - a / src / java / org / apache / cassandra / repair / AnticompactionTask . java 
 + + + b / src / java / org / apache / cassandra / repair / AnticompactionTask . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import org . apache . cassandra . net . IAsyncCallbackWithFailure ; 
 import org . apache . cassandra . net . MessageIn ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . repair . messages . AnticompactionRequest ; 
 - import org . apache . cassandra . utils . SemanticVersion ; 
 + import org . apache . cassandra . utils . CassandraVersion ; 
 
 public class AnticompactionTask extends AbstractFuture < InetAddress > implements Runnable 
 { 
 @ @ - 39 , 7 + 39 , 7 @ @ public class AnticompactionTask extends AbstractFuture < InetAddress > implements R 
 * Version that anticompaction response is not supported up to . 
 * If Cassandra version is more than this , we need to wait for anticompaction response . 
 * / 
 - private static final SemanticVersion VERSION _ CHECKER = new SemanticVersion ( " 2 . 1 . 5 " ) ; 
 + private static final CassandraVersion VERSION _ CHECKER = new CassandraVersion ( " 2 . 1 . 5 " ) ; 
 
 private final UUID parentSession ; 
 private final InetAddress neighbor ; 
 @ @ - 55 , 7 + 55 , 7 @ @ public class AnticompactionTask extends AbstractFuture < InetAddress > implements R 
 public void run ( ) 
 { 
 AnticompactionRequest acr = new AnticompactionRequest ( parentSession , successfulRanges ) ; 
 - SemanticVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; 
 + CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbor ) ; 
 if ( peerVersion ! = null & & peerVersion . compareTo ( VERSION _ CHECKER ) > 0 ) 
 { 
 MessagingService . instance ( ) . sendRR ( acr . createMessage ( ) , neighbor , new AnticompactionCallback ( this ) , TimeUnit . DAYS . toMillis ( 1 ) , true ) ; 
 diff - - git a / src / java / org / apache / cassandra / service / ClientState . java b / src / java / org / apache / cassandra / service / ClientState . java 
 index b171f08 . . b9e89f5 100644 
 - - - a / src / java / org / apache / cassandra / service / ClientState . java 
 + + + b / src / java / org / apache / cassandra / service / ClientState . java 
 @ @ - 43 , 7 + 43 , 7 @ @ import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . tracing . TraceKeyspace ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 - import org . apache . cassandra . utils . SemanticVersion ; 
 + import org . apache . cassandra . utils . CassandraVersion ; 
 
 / * * 
 * State related to a client connection . 
 @ @ - 51 , 7 + 51 , 7 @ @ import org . apache . cassandra . utils . SemanticVersion ; 
 public class ClientState 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( ClientState . class ) ; 
 - public static final SemanticVersion DEFAULT _ CQL _ VERSION = org . apache . cassandra . cql3 . QueryProcessor . CQL _ VERSION ; 
 + public static final CassandraVersion DEFAULT _ CQL _ VERSION = org . apache . cassandra . cql3 . QueryProcessor . CQL _ VERSION ; 
 
 private static final Set < IResource > READABLE _ SYSTEM _ RESOURCES = new HashSet < > ( ) ; 
 private static final Set < IResource > PROTECTED _ AUTH _ RESOURCES = new HashSet < > ( ) ; 
 @ @ - 352 , 9 + 352 , 9 @ @ public class ClientState 
 return user ; 
 } 
 
 - public static SemanticVersion [ ] getCQLSupportedVersion ( ) 
 + public static CassandraVersion [ ] getCQLSupportedVersion ( ) 
 { 
 - return new SemanticVersion [ ] { QueryProcessor . CQL _ VERSION } ; 
 + return new CassandraVersion [ ] { QueryProcessor . CQL _ VERSION } ; 
 } 
 
 private Set < Permission > authorize ( IResource resource ) 
 diff - - git a / src / java / org / apache / cassandra / transport / messages / StartupMessage . java b / src / java / org / apache / cassandra / transport / messages / StartupMessage . java 
 index ac7a1f2 . . 04d8e62 100644 
 - - - a / src / java / org / apache / cassandra / transport / messages / StartupMessage . java 
 + + + b / src / java / org / apache / cassandra / transport / messages / StartupMessage . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import io . netty . buffer . ByteBuf ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . transport . * ; 
 - import org . apache . cassandra . utils . SemanticVersion ; 
 + import org . apache . cassandra . utils . CassandraVersion ; 
 
 / * * 
 * The initial message of the protocol . 
 @ @ - 70 , 7 + 70 , 7 @ @ public class StartupMessage extends Message . Request 
 
 try 
 { 
 - if ( new SemanticVersion ( cqlVersion ) . compareTo ( new SemanticVersion ( " 2 . 99 . 0 " ) ) < 0 ) 
 + if ( new CassandraVersion ( cqlVersion ) . compareTo ( new CassandraVersion ( " 2 . 99 . 0 " ) ) < 0 ) 
 throw new ProtocolException ( String . format ( " CQL version % s is not supported by the binary protocol ( supported version are > = 3 . 0 . 0 ) " , cqlVersion ) ) ; 
 } 
 catch ( IllegalArgumentException e ) 
 diff - - git a / src / java / org / apache / cassandra / utils / CassandraVersion . java b / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 new file mode 100644 
 index 0000000 . . 62d68be 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / CassandraVersion . java 
 @ @ - 0 , 0 + 1 , 231 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 + 
 + import com . google . common . base . Objects ; 
 + import org . apache . commons . lang3 . StringUtils ; 
 + 
 + / * * 
 + * Implements versioning used in Cassandra and CQL . 
 + * < p / > 
 + * Note : The following code uses a slight variation from the semver document ( http : / / semver . org ) . 
 + * / 
 + public class CassandraVersion implements Comparable < CassandraVersion > 
 + { 
 + private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) \ \ . ( \ \ d + ) ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; 
 + private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; 
 + private static final Pattern SNAPSHOT = Pattern . compile ( " - SNAPSHOT " ) ; 
 + 
 + public final int major ; 
 + public final int minor ; 
 + public final int patch ; 
 + 
 + private final String [ ] preRelease ; 
 + private final String [ ] build ; 
 + 
 + private CassandraVersion ( int major , int minor , int patch , String [ ] preRelease , String [ ] build ) 
 + { 
 + this . major = major ; 
 + this . minor = minor ; 
 + this . patch = patch ; 
 + this . preRelease = preRelease ; 
 + this . build = build ; 
 + } 
 + 
 + / * * 
 + * Parse a version from a string . 
 + * 
 + * @ param version the string to parse 
 + * @ throws IllegalArgumentException if the provided string does not 
 + * represent a version 
 + * / 
 + public CassandraVersion ( String version ) 
 + { 
 + String stripped = SNAPSHOT . matcher ( version ) . replaceFirst ( " " ) ; 
 + Matcher matcher = pattern . matcher ( stripped ) ; 
 + if ( ! matcher . matches ( ) ) 
 + throw new IllegalArgumentException ( " Invalid version value : " + version ) ; 
 + 
 + try 
 + { 
 + this . major = Integer . parseInt ( matcher . group ( 1 ) ) ; 
 + this . minor = Integer . parseInt ( matcher . group ( 2 ) ) ; 
 + this . patch = Integer . parseInt ( matcher . group ( 3 ) ) ; 
 + 
 + String pr = matcher . group ( 4 ) ; 
 + String bld = matcher . group ( 5 ) ; 
 + 
 + this . preRelease = pr = = null | | pr . isEmpty ( ) ? null : parseIdentifiers ( stripped , pr ) ; 
 + this . build = bld = = null | | bld . isEmpty ( ) ? null : parseIdentifiers ( stripped , bld ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + throw new IllegalArgumentException ( " Invalid version value : " + version ) ; 
 + } 
 + } 
 + 
 + private static String [ ] parseIdentifiers ( String version , String str ) 
 + { 
 + / / Drop initial - or + 
 + str = str . substring ( 1 ) ; 
 + String [ ] parts = str . split ( " \ \ . " ) ; 
 + for ( String part : parts ) 
 + { 
 + if ( ! part . matches ( " \ \ w + " ) ) 
 + throw new IllegalArgumentException ( " Invalid version value : " + version ) ; 
 + } 
 + return parts ; 
 + } 
 + 
 + public int compareTo ( CassandraVersion other ) 
 + { 
 + if ( major < other . major ) 
 + return - 1 ; 
 + if ( major > other . major ) 
 + return 1 ; 
 + 
 + if ( minor < other . minor ) 
 + return - 1 ; 
 + if ( minor > other . minor ) 
 + return 1 ; 
 + 
 + if ( patch < other . patch ) 
 + return - 1 ; 
 + if ( patch > other . patch ) 
 + return 1 ; 
 + 
 + int c = compareIdentifiers ( preRelease , other . preRelease , 1 ) ; 
 + if ( c ! = 0 ) 
 + return c ; 
 + 
 + return compareIdentifiers ( build , other . build , - 1 ) ; 
 + } 
 + 
 + / * * 
 + * Returns a version that is backward compatible with this version amongst a list 
 + * of provided version , or null if none can be found . 
 + * < p / > 
 + * For instance : 
 + * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " , " 3 . 0 . 0 " ) = = " 2 . 0 . 0 " 
 + * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 1 . 3 " , " 3 . 0 . 0 " ) = = " 2 . 1 . 3 " 
 + * " 2 . 0 . 0 " . findSupportingVersion ( " 3 . 0 . 0 " ) = = null 
 + * " 2 . 0 . 3 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = " 2 . 0 . 0 " 
 + * " 2 . 1 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = null 
 + * / 
 + public CassandraVersion findSupportingVersion ( CassandraVersion . . . versions ) 
 + { 
 + for ( CassandraVersion version : versions ) 
 + { 
 + if ( isSupportedBy ( version ) ) 
 + return version ; 
 + } 
 + return null ; 
 + } 
 + 
 + public boolean isSupportedBy ( CassandraVersion version ) 
 + { 
 + return major = = version . major & & this . compareTo ( version ) < = 0 ; 
 + } 
 + 
 + private static int compareIdentifiers ( String [ ] ids1 , String [ ] ids2 , int defaultPred ) 
 + { 
 + if ( ids1 = = null ) 
 + return ids2 = = null ? 0 : defaultPred ; 
 + else if ( ids2 = = null ) 
 + return - defaultPred ; 
 + 
 + int min = Math . min ( ids1 . length , ids2 . length ) ; 
 + for ( int i = 0 ; i < min ; i + + ) 
 + { 
 + Integer i1 = tryParseInt ( ids1 [ i ] ) ; 
 + Integer i2 = tryParseInt ( ids2 [ i ] ) ; 
 + 
 + if ( i1 ! = null ) 
 + { 
 + / / integer have precedence 
 + if ( i2 = = null | | i1 < i2 ) 
 + return - 1 ; 
 + else if ( i1 > i2 ) 
 + return 1 ; 
 + } 
 + else 
 + { 
 + / / integer have precedence 
 + if ( i2 ! = null ) 
 + return 1 ; 
 + 
 + int c = ids1 [ i ] . compareTo ( ids2 [ i ] ) ; 
 + if ( c ! = 0 ) 
 + return c ; 
 + } 
 + } 
 + 
 + if ( ids1 . length < ids2 . length ) 
 + return - 1 ; 
 + if ( ids1 . length > ids2 . length ) 
 + return 1 ; 
 + return 0 ; 
 + } 
 + 
 + private static Integer tryParseInt ( String str ) 
 + { 
 + try 
 + { 
 + return Integer . valueOf ( str ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object o ) 
 + { 
 + if ( ! ( o instanceof CassandraVersion ) ) 
 + return false ; 
 + CassandraVersion that = ( CassandraVersion ) o ; 
 + return major = = that . major 
 + & & minor = = that . minor 
 + & & patch = = that . patch 
 + & & Arrays . equals ( preRelease , that . preRelease ) 
 + & & Arrays . equals ( build , that . build ) ; 
 + } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hashCode ( major , minor , patch , preRelease , build ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + StringBuilder sb = new StringBuilder ( ) ; 
 + sb . append ( major ) . append ( ' . ' ) . append ( minor ) . append ( ' . ' ) . append ( patch ) ; 
 + if ( preRelease ! = null ) 
 + sb . append ( ' - ' ) . append ( StringUtils . join ( preRelease , " . " ) ) ; 
 + if ( build ! = null ) 
 + sb . append ( ' + ' ) . append ( StringUtils . join ( build , " . " ) ) ; 
 + return sb . toString ( ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / utils / SemanticVersion . java b / src / java / org / apache / cassandra / utils / SemanticVersion . java 
 deleted file mode 100644 
 index 858029d . . 0000000 
 - - - a / src / java / org / apache / cassandra / utils / SemanticVersion . java 
 + + + / dev / null 
 @ @ - 1 , 231 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import java . util . regex . Pattern ; 
 - import java . util . regex . Matcher ; 
 - import java . util . Arrays ; 
 - 
 - import org . apache . commons . lang3 . StringUtils ; 
 - import com . google . common . base . Objects ; 
 - 
 - / * * 
 - * Implements semantic versioning as defined at http : / / semver . org / . 
 - * 
 - * Note : The following code uses a slight variation from the document above in 
 - * that it doesn ' t allow dashes in pre - release and build identifier . 
 - * / 
 - public class SemanticVersion implements Comparable < SemanticVersion > 
 - { 
 - private static final String VERSION _ REGEXP = " ( \ \ d + ) \ \ . ( \ \ d + ) \ \ . ( \ \ d + ) ( \ \ - [ . \ \ w ] + ) ? ( [ . + ] [ . \ \ w ] + ) ? " ; 
 - private static final Pattern pattern = Pattern . compile ( VERSION _ REGEXP ) ; 
 - 
 - public final int major ; 
 - public final int minor ; 
 - public final int patch ; 
 - 
 - private final String [ ] preRelease ; 
 - private final String [ ] build ; 
 - 
 - private SemanticVersion ( int major , int minor , int patch , String [ ] preRelease , String [ ] build ) 
 - { 
 - this . major = major ; 
 - this . minor = minor ; 
 - this . patch = patch ; 
 - this . preRelease = preRelease ; 
 - this . build = build ; 
 - } 
 - 
 - / * * 
 - * Parse a semantic version from a string . 
 - * 
 - * @ param version the string to parse 
 - * @ throws IllegalArgumentException if the provided string does not 
 - * represent a semantic version 
 - * / 
 - public SemanticVersion ( String version ) 
 - { 
 - Matcher matcher = pattern . matcher ( version ) ; 
 - if ( ! matcher . matches ( ) ) 
 - throw new IllegalArgumentException ( " Invalid version value : " + version + " ( see http : / / semver . org / for details ) " ) ; 
 - 
 - try 
 - { 
 - this . major = Integer . parseInt ( matcher . group ( 1 ) ) ; 
 - this . minor = Integer . parseInt ( matcher . group ( 2 ) ) ; 
 - this . patch = Integer . parseInt ( matcher . group ( 3 ) ) ; 
 - 
 - String pr = matcher . group ( 4 ) ; 
 - String bld = matcher . group ( 5 ) ; 
 - 
 - this . preRelease = pr = = null | | pr . isEmpty ( ) ? null : parseIdentifiers ( version , pr ) ; 
 - this . build = bld = = null | | bld . isEmpty ( ) ? null : parseIdentifiers ( version , bld ) ; 
 - 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - throw new IllegalArgumentException ( " Invalid version value : " + version + " ( see http : / / semver . org / for details ) " ) ; 
 - } 
 - } 
 - 
 - private static String [ ] parseIdentifiers ( String version , String str ) 
 - { 
 - / / Drop initial - or + 
 - str = str . substring ( 1 ) ; 
 - String [ ] parts = str . split ( " \ \ . " ) ; 
 - for ( String part : parts ) 
 - { 
 - if ( ! part . matches ( " \ \ w + " ) ) 
 - throw new IllegalArgumentException ( " Invalid version value : " + version + " ( see http : / / semver . org / for details ) " ) ; 
 - } 
 - return parts ; 
 - } 
 - 
 - public int compareTo ( SemanticVersion other ) 
 - { 
 - if ( major < other . major ) 
 - return - 1 ; 
 - if ( major > other . major ) 
 - return 1 ; 
 - 
 - if ( minor < other . minor ) 
 - return - 1 ; 
 - if ( minor > other . minor ) 
 - return 1 ; 
 - 
 - if ( patch < other . patch ) 
 - return - 1 ; 
 - if ( patch > other . patch ) 
 - return 1 ; 
 - 
 - int c = compareIdentifiers ( preRelease , other . preRelease , 1 ) ; 
 - if ( c ! = 0 ) 
 - return c ; 
 - 
 - return compareIdentifiers ( build , other . build , - 1 ) ; 
 - } 
 - 
 - / * * 
 - * Returns a version that is backward compatible with this version amongst a list 
 - * of provided version , or null if none can be found . 
 - * 
 - * For instance : 
 - * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " , " 3 . 0 . 0 " ) = = " 2 . 0 . 0 " 
 - * " 2 . 0 . 0 " . findSupportingVersion ( " 2 . 1 . 3 " , " 3 . 0 . 0 " ) = = " 2 . 1 . 3 " 
 - * " 2 . 0 . 0 " . findSupportingVersion ( " 3 . 0 . 0 " ) = = null 
 - * " 2 . 0 . 3 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = " 2 . 0 . 0 " 
 - * " 2 . 1 . 0 " . findSupportingVersion ( " 2 . 0 . 0 " ) = = null 
 - * / 
 - public SemanticVersion findSupportingVersion ( SemanticVersion . . . versions ) 
 - { 
 - for ( SemanticVersion version : versions ) 
 - { 
 - if ( isSupportedBy ( version ) ) 
 - return version ; 
 - } 
 - return null ; 
 - } 
 - 
 - public boolean isSupportedBy ( SemanticVersion version ) 
 - { 
 - return major = = version . major & & this . compareTo ( version ) < = 0 ; 
 - } 
 - 
 - private static int compareIdentifiers ( String [ ] ids1 , String [ ] ids2 , int defaultPred ) 
 - { 
 - if ( ids1 = = null ) 
 - return ids2 = = null ? 0 : defaultPred ; 
 - else if ( ids2 = = null ) 
 - return - defaultPred ; 
 - 
 - int min = Math . min ( ids1 . length , ids2 . length ) ; 
 - for ( int i = 0 ; i < min ; i + + ) 
 - { 
 - Integer i1 = tryParseInt ( ids1 [ i ] ) ; 
 - Integer i2 = tryParseInt ( ids2 [ i ] ) ; 
 - 
 - if ( i1 ! = null ) 
 - { 
 - / / integer have precedence 
 - if ( i2 = = null | | i1 < i2 ) 
 - return - 1 ; 
 - else if ( i1 > i2 ) 
 - return 1 ; 
 - } 
 - else 
 - { 
 - / / integer have precedence 
 - if ( i2 ! = null ) 
 - return 1 ; 
 - 
 - int c = ids1 [ i ] . compareTo ( ids2 [ i ] ) ; 
 - if ( c ! = 0 ) 
 - return c ; 
 - } 
 - } 
 - 
 - if ( ids1 . length < ids2 . length ) 
 - return - 1 ; 
 - if ( ids1 . length > ids2 . length ) 
 - return 1 ; 
 - return 0 ; 
 - } 
 - 
 - private static Integer tryParseInt ( String str ) 
 - { 
 - try 
 - { 
 - return Integer . valueOf ( str ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - return null ; 
 - } 
 - } 
 - 
 - @ Override 
 - public boolean equals ( Object o ) 
 - { 
 - if ( ! ( o instanceof SemanticVersion ) ) 
 - return false ; 
 - SemanticVersion that = ( SemanticVersion ) o ; 
 - return major = = that . major 
 - & & minor = = that . minor 
 - & & patch = = that . patch 
 - & & Arrays . equals ( preRelease , that . preRelease ) 
 - & & Arrays . equals ( build , that . build ) ; 
 - } 
 - 
 - @ Override 
 - public int hashCode ( ) 
 - { 
 - return Objects . hashCode ( major , minor , patch , preRelease , build ) ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) 
 - { 
 - StringBuilder sb = new StringBuilder ( ) ; 
 - sb . append ( major ) . append ( ' . ' ) . append ( minor ) . append ( ' . ' ) . append ( patch ) ; 
 - if ( preRelease ! = null ) 
 - sb . append ( ' - ' ) . append ( StringUtils . join ( preRelease , " . " ) ) ; 
 - if ( build ! = null ) 
 - sb . append ( ' + ' ) . append ( StringUtils . join ( build , " . " ) ) ; 
 - return sb . toString ( ) ; 
 - } 
 - } 
 diff - - git a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java 
 index 7531b06 . . 093f359 100644 
 - - - a / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java 
 + + + b / test / unit / org / apache / cassandra / db / SystemKeyspaceTest . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import org . apache . cassandra . dht . ByteOrderedPartitioner . BytesToken ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 - import org . apache . cassandra . utils . SemanticVersion ; 
 + import org . apache . cassandra . utils . CassandraVersion ; 
 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertTrue ; 
 @ @ - 110 , 7 + 110 , 7 @ @ public class SystemKeyspaceTest 
 private String getOlderVersionString ( ) 
 { 
 String version = FBUtilities . getReleaseVersionString ( ) ; 
 - SemanticVersion semver = new SemanticVersion ( version . contains ( " - " ) ? version . substring ( 0 , version . indexOf ( ' - ' ) ) 
 + CassandraVersion semver = new CassandraVersion ( version . contains ( " - " ) ? version . substring ( 0 , version . indexOf ( ' - ' ) ) 
 : version ) ; 
 return ( String . format ( " % s . % s . % s " , semver . major - 1 , semver . minor , semver . patch ) ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 new file mode 100644 
 index 0000000 . . 145b735 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / utils / CassandraVersionTest . java 
 @ @ - 0 , 0 + 1 , 146 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import org . junit . Test ; 
 + 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class CassandraVersionTest 
 + { 
 + @ Test 
 + public void testParsing ( ) 
 + { 
 + CassandraVersion version ; 
 + 
 + version = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 + 
 + version = new CassandraVersion ( " 1 . 2 . 3 - foo . 2 + Bar " ) ; 
 + assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 + 
 + / / CassandraVersion can parse 4th ' . ' as build number 
 + version = new CassandraVersion ( " 1 . 2 . 3 . 456 " ) ; 
 + assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 + } 
 + 
 + @ Test 
 + public void testComparison ( ) 
 + { 
 + CassandraVersion v1 , v2 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; 
 + assert v1 . compareTo ( v2 ) = = - 1 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + assert v1 . compareTo ( v2 ) = = 0 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 2 . 0 . 0 " ) ; 
 + assert v1 . compareTo ( v2 ) = = - 1 ; 
 + assert v2 . compareTo ( v1 ) = = 1 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha " ) ; 
 + assert v1 . compareTo ( v2 ) = = 1 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 3 + foo " ) ; 
 + assert v1 . compareTo ( v2 ) = = - 1 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + foo " ) ; 
 + assert v1 . compareTo ( v2 ) = = 1 ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 1 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 3 - alpha + 2 " ) ; 
 + assert v1 . compareTo ( v2 ) = = - 1 ; 
 + } 
 + 
 + @ Test 
 + public void testIsSupportedBy ( ) 
 + { 
 + CassandraVersion v1 , v2 ; 
 + 
 + v1 = new CassandraVersion ( " 3 . 0 . 2 " ) ; 
 + assert v1 . isSupportedBy ( v1 ) ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 2 . 4 " ) ; 
 + assert v1 . isSupportedBy ( v2 ) ; 
 + assert ! v2 . isSupportedBy ( v1 ) ; 
 + 
 + v1 = new CassandraVersion ( " 1 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; 
 + assert v1 . isSupportedBy ( v2 ) ; 
 + assert ! v2 . isSupportedBy ( v1 ) ; 
 + 
 + v1 = new CassandraVersion ( " 2 . 2 . 3 " ) ; 
 + v2 = new CassandraVersion ( " 1 . 3 . 3 " ) ; 
 + assert ! v1 . isSupportedBy ( v2 ) ; 
 + assert ! v2 . isSupportedBy ( v1 ) ; 
 + 
 + v1 = new CassandraVersion ( " 3 . 1 . 0 " ) ; 
 + v2 = new CassandraVersion ( " 3 . 0 . 1 " ) ; 
 + assert ! v1 . isSupportedBy ( v2 ) ; 
 + assert v2 . isSupportedBy ( v1 ) ; 
 + } 
 + 
 + @ Test 
 + public void testInvalid ( ) 
 + { 
 + assertThrows ( " 1 . 0 " ) ; 
 + assertThrows ( " 1 . 0 . 0a " ) ; 
 + assertThrows ( " 1 . a . 4 " ) ; 
 + assertThrows ( " 1 . 0 . 0 - foo & " ) ; 
 + } 
 + 
 + @ Test 
 + public void testSnapshot ( ) 
 + { 
 + CassandraVersion prev , next ; 
 + 
 + prev = new CassandraVersion ( " 2 . 1 . 5 " ) ; 
 + next = new CassandraVersion ( " 2 . 1 . 5 . 123 " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = next ; 
 + next = new CassandraVersion ( " 2 . 2 . 0 - beta1 - SNAPSHOT " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = new CassandraVersion ( " 2 . 2 . 0 - beta1 " ) ; 
 + next = new CassandraVersion ( " 2 . 2 . 0 - rc1 - SNAPSHOT " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + 
 + prev = next ; 
 + next = new CassandraVersion ( " 2 . 2 . 0 " ) ; 
 + assertTrue ( prev . compareTo ( next ) < 0 ) ; 
 + } 
 + 
 + private static void assertThrows ( String str ) 
 + { 
 + try 
 + { 
 + new CassandraVersion ( str ) ; 
 + assert false ; 
 + } 
 + catch ( IllegalArgumentException e ) { } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java b / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java 
 deleted file mode 100644 
 index 4ead709 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / utils / SemanticVersionTest . java 
 + + + / dev / null 
 @ @ - 1 , 113 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import org . junit . Test ; 
 - 
 - public class SemanticVersionTest 
 - { 
 - @ Test 
 - public void testParsing ( ) 
 - { 
 - SemanticVersion version ; 
 - 
 - version = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 - 
 - version = new SemanticVersion ( " 1 . 2 . 3 - foo . 2 + Bar " ) ; 
 - assert version . major = = 1 & & version . minor = = 2 & & version . patch = = 3 ; 
 - } 
 - 
 - @ Test 
 - public void testComparison ( ) 
 - { 
 - SemanticVersion v1 , v2 ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 2 . 4 " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - assert v1 . compareTo ( v2 ) = = 0 ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 2 . 0 . 0 " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 2 . 3 - alpha " ) ; 
 - assert v1 . compareTo ( v2 ) = = 1 ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 2 . 3 + foo " ) ; 
 - assert v1 . compareTo ( v2 ) = = - 1 ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 2 . 3 - alpha + foo " ) ; 
 - assert v1 . compareTo ( v2 ) = = 1 ; 
 - } 
 - 
 - @ Test 
 - public void testIsSupportedBy ( ) 
 - { 
 - SemanticVersion v1 , v2 ; 
 - 
 - v1 = new SemanticVersion ( " 3 . 0 . 2 " ) ; 
 - assert v1 . isSupportedBy ( v1 ) ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 2 . 4 " ) ; 
 - assert v1 . isSupportedBy ( v2 ) ; 
 - assert ! v2 . isSupportedBy ( v1 ) ; 
 - 
 - v1 = new SemanticVersion ( " 1 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 3 . 3 " ) ; 
 - assert v1 . isSupportedBy ( v2 ) ; 
 - assert ! v2 . isSupportedBy ( v1 ) ; 
 - 
 - v1 = new SemanticVersion ( " 2 . 2 . 3 " ) ; 
 - v2 = new SemanticVersion ( " 1 . 3 . 3 " ) ; 
 - assert ! v1 . isSupportedBy ( v2 ) ; 
 - assert ! v2 . isSupportedBy ( v1 ) ; 
 - 
 - v1 = new SemanticVersion ( " 3 . 1 . 0 " ) ; 
 - v2 = new SemanticVersion ( " 3 . 0 . 1 " ) ; 
 - assert ! v1 . isSupportedBy ( v2 ) ; 
 - assert v2 . isSupportedBy ( v1 ) ; 
 - } 
 - 
 - @ Test 
 - public void testInvalid ( ) 
 - { 
 - assertThrows ( " 1 . 0 " ) ; 
 - assertThrows ( " 1 . 0 . 0a " ) ; 
 - assertThrows ( " 1 . a . 4 " ) ; 
 - assertThrows ( " 1 . 0 . 0 - foo & " ) ; 
 - } 
 - 
 - private static void assertThrows ( String str ) 
 - { 
 - try 
 - { 
 - new SemanticVersion ( str ) ; 
 - assert false ; 
 - } 
 - catch ( IllegalArgumentException e ) { } 
 - } 
 - }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 index 6077e38 . . 84b91e9 100644 
 - - - a / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 + + + b / src / java / org / apache / cassandra / service / RangeSliceResponseResolver . java 
 @ @ - 62 , 7 + 62 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro 
 return reply . rows ; 
 } 
 
 - / / Note : this deserializes the response a 2nd time if getData was called first 
 + / / Note : this would deserialize the response a 2nd time if getData was called first . 
 / / ( this is not currently an issue since we don ' t do read repair for range queries . ) 
 public Iterable < Row > resolve ( ) throws IOException 
 { 
 @ @ - 73 , 7 + 73 , 7 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro 
 return o1 . left . key . compareTo ( o2 . left . key ) ; 
 } 
 } ) ; 
 - 
 + 
 int n = 0 ; 
 for ( Message response : responses ) 
 { 
 @ @ - 83 , 7 + 83 , 6 @ @ public class RangeSliceResponseResolver implements IResponseResolver < Iterable < Ro 
 } 
 
 / / for each row , compute the combination of all different versions seen , and repair incomplete versions 
 - 
 return new ReducingIterator < Pair < Row , InetAddress > , Row > ( collator ) 
 { 
 List < ColumnFamily > versions = new ArrayList < ColumnFamily > ( sources . size ( ) ) ;
