BLEU SCORE: 0.027611988917697356

TEST MSG: Clean up parsing speculative retry params from string
GENERATED MSG: range query support

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c123e6f . . 650f740 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 12 + 1 , 12 @ @ <nl> 4 . 0 <nl> + * Add support for hybrid MIN ( ) , MAX ( ) speculative retry policies <nl> + ( CASSANDRA - 14293 , CASSANDRA - 14338 , CASSANDRA - 14352 ) <nl> * Fix some regressions caused by 14058 ( CASSANDRA - 14353 ) <nl> * Abstract repair for pluggable storage ( CASSANDRA - 14116 ) <nl> * Add meaningful toString ( ) impls ( CASSANDRA - 13653 ) <nl> * Add sstableloader option to accept target keyspace name ( CASSANDRA - 13884 ) <nl> * Move processing of EchoMessage response to gossip stage ( CASSANDRA - 13713 ) <nl> * Add coordinator write metric per CF ( CASSANDRA - 14232 ) <nl> - * Fix scheduling of speculative retry threshold recalculation ( CASSANDRA - 14338 ) <nl> - * Add support for hybrid MIN ( ) , MAX ( ) speculative retry policies ( CASSANDRA - 14293 ) <nl> * Correct and clarify SSLFactory . getSslContext method and call sites ( CASSANDRA - 14314 ) <nl> * Handle static and partition deletion properly on ThrottledUnfilteredIterator ( CASSANDRA - 14315 ) <nl> * NodeTool clientstats should show SSL Cipher ( CASSANDRA - 14322 ) <nl> diff - - git a / src / java / org / apache / cassandra / schema / TableParams . java b / src / java / org / apache / cassandra / schema / TableParams . java <nl> index ffa310e . . 895e3a7 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / TableParams . java <nl> + + + b / src / java / org / apache / cassandra / schema / TableParams . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> <nl> import org . apache . cassandra . cql3 . Attributes ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . service . reads . PercentileSpeculativeRetryPolicy ; <nl> import org . apache . cassandra . service . reads . SpeculativeRetryPolicy ; <nl> import org . apache . cassandra . utils . BloomCalculations ; <nl> <nl> @ @ - 70 , 6 + 71 , 7 @ @ public final class TableParams <nl> public static final int DEFAULT _ MIN _ INDEX _ INTERVAL = 128 ; <nl> public static final int DEFAULT _ MAX _ INDEX _ INTERVAL = 2048 ; <nl> public static final double DEFAULT _ CRC _ CHECK _ CHANCE = 1 . 0 ; <nl> + public static final SpeculativeRetryPolicy DEFAULT _ SPECULATIVE _ RETRY = new PercentileSpeculativeRetryPolicy ( 99 . 0 ) ; <nl> <nl> public final String comment ; <nl> public final double readRepairChance ; <nl> @ @ - 290 , 7 + 292 , 7 @ @ public final class TableParams <nl> private int memtableFlushPeriodInMs = DEFAULT _ MEMTABLE _ FLUSH _ PERIOD _ IN _ MS ; <nl> private int minIndexInterval = DEFAULT _ MIN _ INDEX _ INTERVAL ; <nl> private int maxIndexInterval = DEFAULT _ MAX _ INDEX _ INTERVAL ; <nl> - private SpeculativeRetryPolicy speculativeRetry = SpeculativeRetryPolicy . DEFAULT ; <nl> + private SpeculativeRetryPolicy speculativeRetry = DEFAULT _ SPECULATIVE _ RETRY ; <nl> private CachingParams caching = CachingParams . DEFAULT ; <nl> private CompactionParams compaction = CompactionParams . DEFAULT ; <nl> private CompressionParams compression = CompressionParams . DEFAULT ; <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java <nl> index 4623cb1 . . daf1ec5 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java <nl> @ @ - 15 , 7 + 15 , 6 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . service . reads ; <nl> <nl> import com . google . common . base . Objects ; <nl> @ @ - 59 , 4 + 58 , 9 @ @ public class AlwaysSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> return Kind . ALWAYS . toString ( ) ; <nl> } <nl> + <nl> + static boolean stringMatches ( String str ) <nl> + { <nl> + return str . equalsIgnoreCase ( " ALWAYS " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java <nl> index 2cd9788 . . b38b986 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java <nl> @ @ - 15 , 20 + 15 , 25 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . service . reads ; <nl> <nl> import java . util . concurrent . TimeUnit ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import com . google . common . base . Objects ; <nl> <nl> import com . codahale . metrics . Timer ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . schema . TableParams ; <nl> <nl> public class FixedSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> + private static final Pattern PATTERN = Pattern . compile ( " ^ ( ? < val > [ 0 - 9 . ] + ) ms $ " , Pattern . CASE _ INSENSITIVE ) ; <nl> + <nl> private final int speculateAtMilliseconds ; <nl> <nl> - public FixedSpeculativeRetryPolicy ( int speculateAtMilliseconds ) <nl> + FixedSpeculativeRetryPolicy ( int speculateAtMilliseconds ) <nl> { <nl> this . speculateAtMilliseconds = speculateAtMilliseconds ; <nl> } <nl> @ @ - 65 , 4 + 70 , 28 @ @ public class FixedSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> return String . format ( " % dms " , speculateAtMilliseconds ) ; <nl> } <nl> + <nl> + static FixedSpeculativeRetryPolicy fromString ( String str ) <nl> + { <nl> + Matcher matcher = PATTERN . matcher ( str ) ; <nl> + <nl> + if ( ! matcher . matches ( ) ) <nl> + throw new IllegalArgumentException ( ) ; <nl> + <nl> + String val = matcher . group ( " val " ) ; <nl> + try <nl> + { <nl> + / / historically we ' ve always parsed this as double , but treated as int ; so we keep doing it for compatibility <nl> + return new FixedSpeculativeRetryPolicy ( ( int ) Double . parseDouble ( val ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; <nl> + } <nl> + } <nl> + <nl> + static boolean stringMatches ( String str ) <nl> + { <nl> + return PATTERN . matcher ( str ) . matches ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java <nl> index d49cfe4 . . 7920ac7 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java <nl> @ @ - 15 , 27 + 15 , 40 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . service . reads ; <nl> <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> import com . google . common . base . Objects ; <nl> <nl> import com . codahale . metrics . Timer ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . schema . TableParams ; <nl> <nl> public class HybridSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> + private static final Pattern PATTERN = <nl> + Pattern . compile ( " ^ ( ? < fun > MIN | MAX ) \ \ ( ( ? < val1 > [ 0 - 9 . ] + [ a - z ] + ) \ \ s * , \ \ s * ( ? < val2 > [ 0 - 9 . ] + [ a - z ] + ) \ \ ) $ " , <nl> + Pattern . CASE _ INSENSITIVE ) ; <nl> + <nl> public enum Function <nl> { <nl> - MIN , MAX <nl> + MIN , MAX ; <nl> + <nl> + long call ( long val1 , long val2 ) <nl> + { <nl> + return this = = MIN ? Math . min ( val1 , val2 ) : Math . max ( val1 , val2 ) ; <nl> + } <nl> } <nl> <nl> private final PercentileSpeculativeRetryPolicy percentilePolicy ; <nl> private final FixedSpeculativeRetryPolicy fixedPolicy ; <nl> private final Function function ; <nl> <nl> - public HybridSpeculativeRetryPolicy ( PercentileSpeculativeRetryPolicy percentilePolicy , <nl> - FixedSpeculativeRetryPolicy fixedPolicy , <nl> - Function function ) <nl> + HybridSpeculativeRetryPolicy ( PercentileSpeculativeRetryPolicy percentilePolicy , <nl> + FixedSpeculativeRetryPolicy fixedPolicy , <nl> + Function function ) <nl> { <nl> this . percentilePolicy = percentilePolicy ; <nl> this . fixedPolicy = fixedPolicy ; <nl> @ @ - 45 , 12 + 58 , 7 @ @ public class HybridSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> @ Override <nl> public long calculateThreshold ( Timer readLatency ) <nl> { <nl> - long percentileThreshold = percentilePolicy . calculateThreshold ( readLatency ) ; <nl> - long fixedThreshold = fixedPolicy . calculateThreshold ( readLatency ) ; <nl> - <nl> - return function = = Function . MIN <nl> - ? Math . min ( percentileThreshold , fixedThreshold ) <nl> - : Math . max ( percentileThreshold , fixedThreshold ) ; <nl> + return function . call ( percentilePolicy . calculateThreshold ( readLatency ) , fixedPolicy . calculateThreshold ( readLatency ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 81 , 4 + 89 , 44 @ @ public class HybridSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> return String . format ( " % s ( % s , % s ) " , function , percentilePolicy , fixedPolicy ) ; <nl> } <nl> + <nl> + static HybridSpeculativeRetryPolicy fromString ( String str ) <nl> + { <nl> + Matcher matcher = PATTERN . matcher ( str ) ; <nl> + <nl> + if ( ! matcher . matches ( ) ) <nl> + throw new IllegalArgumentException ( ) ; <nl> + <nl> + String val1 = matcher . group ( " val1 " ) ; <nl> + String val2 = matcher . group ( " val2 " ) ; <nl> + <nl> + SpeculativeRetryPolicy value1 , value2 ; <nl> + try <nl> + { <nl> + value1 = SpeculativeRetryPolicy . fromString ( val1 ) ; <nl> + value2 = SpeculativeRetryPolicy . fromString ( val2 ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; <nl> + } <nl> + <nl> + if ( value1 . kind ( ) = = value2 . kind ( ) ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' : MIN ( ) / MAX ( ) arguments " + <nl> + " should be of different types , but both are of type % s " , <nl> + str , TableParams . Option . SPECULATIVE _ RETRY , value1 . kind ( ) ) ) ; <nl> + } <nl> + <nl> + SpeculativeRetryPolicy policy1 = value1 instanceof PercentileSpeculativeRetryPolicy ? value1 : value2 ; <nl> + SpeculativeRetryPolicy policy2 = value1 instanceof FixedSpeculativeRetryPolicy ? value1 : value2 ; <nl> + <nl> + Function function = Function . valueOf ( matcher . group ( " fun " ) . toUpperCase ( ) ) ; <nl> + return new HybridSpeculativeRetryPolicy ( ( PercentileSpeculativeRetryPolicy ) policy1 , ( FixedSpeculativeRetryPolicy ) policy2 , function ) ; <nl> + } <nl> + <nl> + static boolean stringMatches ( String str ) <nl> + { <nl> + return PATTERN . matcher ( str ) . matches ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java <nl> index c46a899 . . 0b9a861 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java <nl> @ @ - 15 , 7 + 15 , 6 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . service . reads ; <nl> <nl> import com . google . common . base . Objects ; <nl> @ @ - 59 , 4 + 58 , 9 @ @ public class NeverSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> return Kind . NEVER . toString ( ) ; <nl> } <nl> + <nl> + static boolean stringMatches ( String str ) <nl> + { <nl> + return str . equalsIgnoreCase ( " NEVER " ) | | str . equalsIgnoreCase ( " NONE " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java <nl> index 172cc0c . . b7ccd4c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java <nl> @ @ - 15 , 15 + 15 , 23 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . service . reads ; <nl> <nl> + import java . text . DecimalFormat ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> + <nl> import com . google . common . base . Objects ; <nl> <nl> import com . codahale . metrics . Timer ; <nl> + import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . schema . TableParams ; <nl> <nl> public class PercentileSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> { <nl> + private static final Pattern PATTERN = Pattern . compile ( " ^ ( ? < val > [ 0 - 9 . ] + ) p ( ercentile ) ? $ " , Pattern . CASE _ INSENSITIVE ) ; <nl> + private static final DecimalFormat FORMATTER = new DecimalFormat ( " # . # # # # " ) ; <nl> + <nl> private final double percentile ; <nl> <nl> public PercentileSpeculativeRetryPolicy ( double percentile ) <nl> @ @ - 61 , 6 + 69 , 39 @ @ public class PercentileSpeculativeRetryPolicy implements SpeculativeRetryPolicy <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - return String . format ( " % . 2fp " , percentile ) ; <nl> + return String . format ( " % sp " , FORMATTER . format ( percentile ) ) ; <nl> + } <nl> + <nl> + static PercentileSpeculativeRetryPolicy fromString ( String str ) <nl> + { <nl> + Matcher matcher = PATTERN . matcher ( str ) ; <nl> + <nl> + if ( ! matcher . matches ( ) ) <nl> + throw new IllegalArgumentException ( ) ; <nl> + <nl> + String val = matcher . group ( " val " ) ; <nl> + <nl> + double percentile ; <nl> + try <nl> + { <nl> + percentile = Double . parseDouble ( val ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; <nl> + } <nl> + <nl> + if ( percentile < = 0 . 0 | | percentile > = 100 . 0 ) <nl> + { <nl> + throw new ConfigurationException ( String . format ( " Invalid value % s for PERCENTILE option ' % s ' : must be between ( 0 . 0 and 100 . 0 ) " , <nl> + str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; <nl> + } <nl> + <nl> + return new PercentileSpeculativeRetryPolicy ( percentile ) ; <nl> + } <nl> + <nl> + static boolean stringMatches ( String str ) <nl> + { <nl> + return PATTERN . matcher ( str ) . matches ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java <nl> index 225ab26 . . 9bf3a35 100644 <nl> - - - a / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java <nl> + + + b / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java <nl> @ @ - 15 , 134 + 15 , 40 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . service . reads ; <nl> <nl> - import java . util . Locale ; <nl> - import java . util . regex . Matcher ; <nl> - import java . util . regex . Pattern ; <nl> - <nl> import com . codahale . metrics . Timer ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - <nl> - import org . apache . cassandra . service . reads . HybridSpeculativeRetryPolicy . Function ; <nl> + import org . apache . cassandra . schema . TableParams ; <nl> <nl> public interface SpeculativeRetryPolicy <nl> { <nl> public enum Kind <nl> { <nl> - / / we need to keep NONE around for legacy tables , but going <nl> - / / forward we can use the better named NEVER Kind instead <nl> - NEVER , NONE , FIXED , PERCENTILE , HYBRID , ALWAYS <nl> + NEVER , FIXED , PERCENTILE , HYBRID , ALWAYS <nl> } <nl> <nl> - static final Pattern RETRY _ PATTERN = Pattern . compile ( " ^ ( ? < function > MIN | MAX | NEVER | NONE | ALWAYS ) ? \ \ ( ? " + <nl> - " ( ? < val1 > [ 0 - 9 . ] + ) ? ( ? < op1 > P | PERCENTILE | MS ) ? ( [ , \ \ s ] * ) " + <nl> - " ( ? < val2 > [ 0 - 9 . ] + ) ? ( ? < op2 > P | PERCENTILE | MS ) ? \ \ ) ? $ " , <nl> - Pattern . CASE _ INSENSITIVE ) ; <nl> - public static final SpeculativeRetryPolicy DEFAULT = new PercentileSpeculativeRetryPolicy ( 99 . 0 ) ; <nl> - <nl> long calculateThreshold ( Timer readLatency ) ; <nl> <nl> Kind kind ( ) ; <nl> <nl> - public static SpeculativeRetryPolicy nonHybridPolicyFromString ( String typeStr , String valueStr ) throws ConfigurationException <nl> + public static SpeculativeRetryPolicy fromString ( String str ) <nl> { <nl> - switch ( typeStr . toLowerCase ( ) ) <nl> - { <nl> - case " p " : <nl> - case " percentile " : <nl> - { <nl> - double value = Double . parseDouble ( valueStr ) ; <nl> - if ( value > = 100 . 0 | | value < = 0 ) <nl> - throw new ConfigurationException ( String . format ( " PERCENTILE should be between 0 and 100 " + <nl> - " ( not % s ) " , valueStr ) ) ; <nl> - return new PercentileSpeculativeRetryPolicy ( value ) ; <nl> - } <nl> - case " ms " : <nl> - { <nl> - / / we ' ve always treated this as long , but let ' s parse as double for compatibility for now <nl> - double value = Double . parseDouble ( valueStr ) ; <nl> - return new FixedSpeculativeRetryPolicy ( ( int ) value ) ; <nl> - } <nl> - default : <nl> - throw new ConfigurationException ( String . format ( " invalid speculative _ retry type : % s " , typeStr ) ) ; <nl> - } <nl> - } <nl> + if ( AlwaysSpeculativeRetryPolicy . stringMatches ( str ) ) <nl> + return AlwaysSpeculativeRetryPolicy . INSTANCE ; <nl> <nl> - public static SpeculativeRetryPolicy fromString ( String schemaStrValue ) throws ConfigurationException <nl> - { <nl> - Matcher matcher = RETRY _ PATTERN . matcher ( schemaStrValue ) ; <nl> - if ( matcher . find ( ) ) <nl> - { <nl> - String functionStr = matcher . group ( " function " ) ; <nl> - String val1 = matcher . group ( " val1 " ) ; <nl> - String op1 = matcher . group ( " op1 " ) ; <nl> - String val2 = matcher . group ( " val2 " ) ; <nl> - String op2 = matcher . group ( " op2 " ) ; <nl> + if ( NeverSpeculativeRetryPolicy . stringMatches ( str ) ) <nl> + return NeverSpeculativeRetryPolicy . INSTANCE ; <nl> <nl> - String normalizedFunction = ( functionStr ! = null ) ? functionStr . toUpperCase ( Locale . ENGLISH ) : null ; <nl> - if ( normalizedFunction ! = null & & val1 ! = null & & val2 ! = null ) <nl> - { <nl> - Function hybridFunction ; <nl> - try <nl> - { <nl> - hybridFunction = Function . valueOf ( normalizedFunction ) ; <nl> - } <nl> - catch ( IllegalArgumentException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Specified comparator [ % s ] is not supported " , normalizedFunction ) ) ; <nl> - } <nl> + if ( PercentileSpeculativeRetryPolicy . stringMatches ( str ) ) <nl> + return PercentileSpeculativeRetryPolicy . fromString ( str ) ; <nl> <nl> - SpeculativeRetryPolicy leftPolicy = nonHybridPolicyFromString ( op1 , val1 ) ; <nl> - SpeculativeRetryPolicy rightPolicy = nonHybridPolicyFromString ( op2 , val2 ) ; <nl> + if ( FixedSpeculativeRetryPolicy . stringMatches ( str ) ) <nl> + return FixedSpeculativeRetryPolicy . fromString ( str ) ; <nl> <nl> - if ( leftPolicy . kind ( ) = = rightPolicy . kind ( ) ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Speculative Retry Parameters must be " + <nl> - " unique types . Both were found to be % s " , <nl> - leftPolicy . kind ( ) . toString ( ) ) ) ; <nl> - } <nl> + if ( HybridSpeculativeRetryPolicy . stringMatches ( str ) ) <nl> + return HybridSpeculativeRetryPolicy . fromString ( str ) ; <nl> <nl> - return ( leftPolicy . kind ( ) = = Kind . PERCENTILE ) <nl> - ? new HybridSpeculativeRetryPolicy ( ( PercentileSpeculativeRetryPolicy ) leftPolicy , <nl> - ( FixedSpeculativeRetryPolicy ) rightPolicy , hybridFunction ) <nl> - : new HybridSpeculativeRetryPolicy ( ( PercentileSpeculativeRetryPolicy ) rightPolicy , <nl> - ( FixedSpeculativeRetryPolicy ) leftPolicy , hybridFunction ) ; <nl> - } <nl> - else if ( normalizedFunction ! = null & & val1 = = null & & op1 = = null ) <nl> - { <nl> - try <nl> - { <nl> - Kind kind = Kind . valueOf ( normalizedFunction ) ; <nl> - switch ( kind ) <nl> - { <nl> - case NONE : <nl> - case NEVER : return NeverSpeculativeRetryPolicy . INSTANCE ; <nl> - case ALWAYS : return AlwaysSpeculativeRetryPolicy . INSTANCE ; <nl> - default : throw new ConfigurationException ( String . format ( " Specified comparator [ % s ] is not supported " , normalizedFunction ) ) ; <nl> - } <nl> - } <nl> - catch ( IllegalArgumentException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Specified comparator [ % s ] is not supported " , normalizedFunction ) ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - if ( op1 = = null | | val1 = = null ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Specified Speculative Retry Policy [ % s ] is not supported " , schemaStrValue ) ) ; <nl> - } <nl> - else <nl> - { <nl> - return nonHybridPolicyFromString ( op1 , val1 ) ; <nl> - } <nl> - } <nl> - } <nl> - else <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Specified Speculative Retry Policy [ % s ] is not supported " , schemaStrValue ) ) ; <nl> - } <nl> + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 683009c . . 73cf3a6 100644 <nl> - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 18 , 21 + 18 , 24 @ @ <nl> <nl> package org . apache . cassandra . config ; <nl> <nl> - import java . util . * ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> - import java . io . * ; <nl> <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . SystemTable ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . TypeInfo ; <nl> - import org . apache . cassandra . db . DBManager ; <nl> - import org . apache . cassandra . db . SystemTable ; <nl> - import org . apache . cassandra . db . Table . TableMetadata ; <nl> import org . apache . cassandra . utils . FileUtils ; <nl> import org . apache . cassandra . utils . XMLUtils ; <nl> import org . w3c . dom . Node ; <nl> import org . w3c . dom . NodeList ; <nl> - import org . apache . cassandra . io . * ; <nl> <nl> <nl> / * * <nl> @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor <nl> / * Read the table related stuff from config * / <nl> NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; <nl> int size = tables . getLength ( ) ; <nl> + if ( size = = 0 ) { <nl> + throw new UnsupportedOperationException ( " A Table must be configured " ) ; <nl> + } <nl> for ( int i = 0 ; i < size ; + + i ) <nl> { <nl> Node table = tables . item ( i ) ; <nl> @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor <nl> { <nl> return tableToCFMetaDataMap _ ; <nl> } <nl> + <nl> + public static String getTableName ( ) <nl> + { <nl> + return tables _ . get ( 0 ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java <nl> index 51ac744 . . a2ac3a2 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily <nl> return columns _ . getSortedColumns ( ) ; <nl> } <nl> <nl> - Map < String , IColumn > getColumns ( ) <nl> + public Map < String , IColumn > getColumns ( ) <nl> { <nl> return columns _ . getColumns ( ) ; <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index be7c245 . . 28bb3f7 100644 <nl> - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore <nl> { <nl> memtable _ . get ( ) . flushOnRecovery ( ) ; <nl> } <nl> + <nl> + public Object getMemtable ( ) <nl> + { <nl> + return memtable _ . get ( ) ; <nl> + } <nl> + <nl> + public Set < String > getSSTableFilenames ( ) <nl> + { <nl> + return Collections . unmodifiableSet ( ssTables _ ) ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java <nl> index 2bdad37 . . 567b829 100644 <nl> - - - a / src / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / org / apache / cassandra / db / Memtable . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ExecutorService ; <nl> @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; <nl> import org . apache . cassandra . io . SSTable ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . utils . LogUtil ; <nl> + import org . apache . cassandra . utils . DestructivePQIterator ; <nl> <nl> / * * <nl> * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) <nl> @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > <nl> columnFamilies _ . clear ( ) ; <nl> } <nl> <nl> + public Iterator < String > sortedKeyIterator ( ) <nl> + { <nl> + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java <nl> index 997bbd3 . . 54242d1 100644 <nl> - - - a / src / org / apache / cassandra / db / MemtableManager . java <nl> + + + b / src / org / apache / cassandra / db / MemtableManager . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager <nl> private static Lock lock _ = new ReentrantLock ( ) ; <nl> private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; <nl> private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; <nl> - static MemtableManager instance ( ) <nl> + public static MemtableManager instance ( ) <nl> { <nl> if ( instance _ = = null ) <nl> { <nl> @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager <nl> 	 } <nl> } <nl> <nl> - <nl> - <nl> + public List < Memtable > getUnflushedMemtables ( String cfName ) <nl> + { <nl> + rwLock _ . readLock ( ) . lock ( ) ; <nl> + try <nl> + { <nl> + List < Memtable > memtables = history _ . get ( cfName ) ; <nl> + if ( memtables ! = null ) <nl> + { <nl> + return new ArrayList < Memtable > ( memtables ) ; <nl> + } <nl> + return Arrays . asList ( new Memtable [ 0 ] ) ; <nl> + } <nl> + finally <nl> + { <nl> + rwLock _ . readLock ( ) . unlock ( ) ; <nl> + } <nl> + } <nl> <nl> } <nl> diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java <nl> index 9c84b42 . . f1b260a 100644 <nl> - - - a / src / org / apache / cassandra / db / Table . java <nl> + + + b / src / org / apache / cassandra / db / Table . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class Table <nl> * is basically the column family name and the ID associated with <nl> * this column family . We use this ID in the Commit Log header to <nl> * determine when a log file that has been rolled can be deleted . <nl> - * / <nl> + * / <nl> public static class TableMetadata <nl> { <nl> / * Name of the column family * / <nl> @ @ - 454 , 7 + 454 , 7 @ @ public class Table <nl> return columnFamilyStores _ ; <nl> } <nl> <nl> - ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) <nl> { <nl> return columnFamilyStores _ . get ( cfName ) ; <nl> } <nl> @ @ - 875 , 4 + 875 , 17 @ @ public class Table <nl> long timeTaken = System . currentTimeMillis ( ) - start ; <nl> dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; <nl> } <nl> + <nl> + public Set < String > getApplicationColumnFamilies ( ) <nl> + { <nl> + Set < String > set = new HashSet < String > ( ) ; <nl> + for ( String cfName : getColumnFamilies ( ) ) <nl> + { <nl> + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) <nl> + { <nl> + set . add ( cfName ) ; <nl> + } <nl> + } <nl> + return set ; <nl> + } <nl> } <nl> diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java <nl> index 93b62e7 . . c2d5f66 100644 <nl> - - - a / src / org / apache / cassandra / service / CassandraServer . java <nl> + + + b / src / org / apache / cassandra / service / CassandraServer . java <nl> @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements <nl> return result ; <nl> } <nl> <nl> + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException <nl> + { <nl> + logger _ . debug ( " get _ range " ) ; <nl> + <nl> + / / send request <nl> + Message message ; <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + try <nl> + { <nl> + dob . writeUTF ( startkey ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " unable to write startkey " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , <nl> + StorageService . readStage _ , <nl> + StorageService . rangeVerbHandler _ , <nl> + messageBody ) ; <nl> + EndPoint endPoint ; <nl> + try <nl> + { <nl> + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; <nl> + } <nl> + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; <nl> + <nl> + / / read response <nl> + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , <nl> + / / since they have to handle multiple requests anyway ? ) <nl> + byte [ ] responseBody ; <nl> + try <nl> + { <nl> + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; <nl> + } <nl> + catch ( TimeoutException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + DataInputBuffer bufIn = new DataInputBuffer ( ) ; <nl> + bufIn . reset ( responseBody , responseBody . length ) ; <nl> + <nl> + / / turn into List <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + while ( bufIn . getPosition ( ) < responseBody . length ) <nl> + { <nl> + try <nl> + { <nl> + keys . add ( bufIn . readUTF ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + logger _ . error ( " bad utf " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + return keys ; <nl> + } <nl> + <nl> / * <nl> * This method is used to ensure that all keys <nl> * prior to the specified key , as dtermined by <nl> diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 3587907 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java <nl> @ @ - 0 , 0 + 1 , 152 @ @ <nl> + package org . apache . cassandra . service ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + import java . util . Iterator ; <nl> + import java . util . Comparator ; <nl> + import java . util . Arrays ; <nl> + import java . io . FileNotFoundException ; <nl> + import java . io . IOException ; <nl> + <nl> + import org . apache . commons . collections . IteratorUtils ; <nl> + import org . apache . commons . collections . Predicate ; <nl> + <nl> + import org . apache . cassandra . net . MessagingService ; <nl> + import org . apache . cassandra . net . IVerbHandler ; <nl> + import org . apache . cassandra . net . Message ; <nl> + import org . apache . cassandra . db . IdentityFilter ; <nl> + import org . apache . cassandra . db . ColumnFamily ; <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . FileStruct ; <nl> + import org . apache . cassandra . db . Table ; <nl> + import org . apache . cassandra . db . Memtable ; <nl> + import org . apache . cassandra . db . MemtableManager ; <nl> + import org . apache . cassandra . io . SequenceFile ; <nl> + import org . apache . cassandra . io . DataInputBuffer ; <nl> + import org . apache . cassandra . io . DataOutputBuffer ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + <nl> + public class RangeVerbHandler implements IVerbHandler <nl> + { <nl> + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) <nl> + { <nl> + public int compare ( String o1 , String o2 ) <nl> + { <nl> + return o1 . compareTo ( o2 ) ; <nl> + } <nl> + } ; <nl> + <nl> + public void doVerb ( Message message ) <nl> + { <nl> + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; <nl> + final String startkey ; <nl> + if ( bytes . length = = 0 ) <nl> + { <nl> + startkey = " " ; <nl> + } <nl> + else <nl> + { <nl> + DataInputBuffer dib = new DataInputBuffer ( ) ; <nl> + dib . reset ( bytes , bytes . length ) ; <nl> + try <nl> + { <nl> + startkey = dib . readUTF ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; <nl> + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + <nl> + / / memtable keys : current and historical <nl> + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( <nl> + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , <nl> + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; <nl> + while ( it . hasNext ( ) ) <nl> + { <nl> + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) <nl> + { <nl> + public boolean evaluate ( Object key ) <nl> + { <nl> + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; <nl> + } <nl> + } ) ) ; <nl> + } <nl> + <nl> + / / sstables <nl> + for ( String filename : cfs . getSSTableFilenames ( ) ) <nl> + { <nl> + try <nl> + { <nl> + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; <nl> + fs . seekTo ( startkey ) ; <nl> + iterators . add ( fs . iterator ( ) ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + String last = null , current = null ; <nl> + <nl> + while ( keys . size ( ) < 1000 ) <nl> + { <nl> + if ( ! iter . hasNext ( ) ) <nl> + { <nl> + break ; <nl> + } <nl> + current = iter . next ( ) ; <nl> + if ( ! current . equals ( last ) ) <nl> + { <nl> + last = current ; <nl> + for ( String cfName : table . getApplicationColumnFamilies ( ) ) <nl> + { <nl> + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; <nl> + try <nl> + { <nl> + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; <nl> + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) <nl> + { <nl> + keys . add ( current ) ; <nl> + break ; <nl> + } <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + DataOutputBuffer dob = new DataOutputBuffer ( ) ; <nl> + for ( String key : keys ) <nl> + { <nl> + try <nl> + { <nl> + dob . writeUTF ( key ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; <nl> + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; <nl> + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java <nl> index 409cd5f . . 95de5c6 100644 <nl> - - - a / src / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / org / apache / cassandra / service / StorageService . java <nl> @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto <nl> public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; <nl> public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; <nl> public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; <nl> + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; <nl> <nl> public static enum ConsistencyLevel <nl> { <nl> diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed96f8 <nl> - - - / dev / null <nl> + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . util . Iterator ; <nl> + import java . util . PriorityQueue ; <nl> + <nl> + public class DestructivePQIterator < T > implements Iterator < T > { <nl> + private PriorityQueue < T > pq ; <nl> + <nl> + public DestructivePQIterator ( PriorityQueue < T > pq ) { <nl> + this . pq = pq ; <nl> + } <nl> + <nl> + public boolean hasNext ( ) { <nl> + return pq . size ( ) > 0 ; <nl> + } <nl> + <nl> + public T next ( ) { <nl> + return pq . poll ( ) ; <nl> + } <nl> + <nl> + public void remove ( ) { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> index 07c7dfe . . 762bbb5 100644 <nl> - - - a / test / org / apache / cassandra / service / CassandraServerTest . java <nl> + + + b / test / org / apache / cassandra / service / CassandraServerTest . java <nl> @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; <nl> import java . io . IOException ; <nl> import java . util . * ; <nl> <nl> + import com . facebook . thrift . TException ; <nl> + <nl> public class CassandraServerTest extends ServerTest { <nl> / * <nl> + TODO fix resetting server so this works <nl> + @ Test <nl> + public void test _ get _ range _ empty ( ) throws IOException , TException { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + server . start ( ) ; <nl> + <nl> + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; <nl> + } <nl> + * / <nl> + <nl> + / * <nl> + @ Test <nl> + public void test _ get _ range ( ) throws IOException , TException , CassandraException <nl> + { <nl> + CassandraServer server = new CassandraServer ( ) ; <nl> + try <nl> + { <nl> + server . start ( ) ; <nl> + } <nl> + catch ( Throwable throwable ) <nl> + { <nl> + throw new RuntimeException ( throwable ) ; <nl> + } <nl> + <nl> + / / TODO insert some data <nl> + try { <nl> + String last = null ; <nl> + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { <nl> + if ( last ! = null ) { <nl> + assert last . compareTo ( key ) < 0 ; <nl> + } <nl> + last = key ; <nl> + } <nl> + } finally { <nl> + server . shutdown ( ) ; <nl> + } <nl> + } <nl> + * / <nl> + <nl> + / * <nl> @ Test <nl> public void test _ get _ column ( ) throws Throwable { <nl> CassandraServer server = new CassandraServer ( ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c123e6f . . 650f740 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 12 + 1 , 12 @ @ 
 4 . 0 
 + * Add support for hybrid MIN ( ) , MAX ( ) speculative retry policies 
 + ( CASSANDRA - 14293 , CASSANDRA - 14338 , CASSANDRA - 14352 ) 
 * Fix some regressions caused by 14058 ( CASSANDRA - 14353 ) 
 * Abstract repair for pluggable storage ( CASSANDRA - 14116 ) 
 * Add meaningful toString ( ) impls ( CASSANDRA - 13653 ) 
 * Add sstableloader option to accept target keyspace name ( CASSANDRA - 13884 ) 
 * Move processing of EchoMessage response to gossip stage ( CASSANDRA - 13713 ) 
 * Add coordinator write metric per CF ( CASSANDRA - 14232 ) 
 - * Fix scheduling of speculative retry threshold recalculation ( CASSANDRA - 14338 ) 
 - * Add support for hybrid MIN ( ) , MAX ( ) speculative retry policies ( CASSANDRA - 14293 ) 
 * Correct and clarify SSLFactory . getSslContext method and call sites ( CASSANDRA - 14314 ) 
 * Handle static and partition deletion properly on ThrottledUnfilteredIterator ( CASSANDRA - 14315 ) 
 * NodeTool clientstats should show SSL Cipher ( CASSANDRA - 14322 ) 
 diff - - git a / src / java / org / apache / cassandra / schema / TableParams . java b / src / java / org / apache / cassandra / schema / TableParams . java 
 index ffa310e . . 895e3a7 100644 
 - - - a / src / java / org / apache / cassandra / schema / TableParams . java 
 + + + b / src / java / org / apache / cassandra / schema / TableParams . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 
 import org . apache . cassandra . cql3 . Attributes ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . service . reads . PercentileSpeculativeRetryPolicy ; 
 import org . apache . cassandra . service . reads . SpeculativeRetryPolicy ; 
 import org . apache . cassandra . utils . BloomCalculations ; 
 
 @ @ - 70 , 6 + 71 , 7 @ @ public final class TableParams 
 public static final int DEFAULT _ MIN _ INDEX _ INTERVAL = 128 ; 
 public static final int DEFAULT _ MAX _ INDEX _ INTERVAL = 2048 ; 
 public static final double DEFAULT _ CRC _ CHECK _ CHANCE = 1 . 0 ; 
 + public static final SpeculativeRetryPolicy DEFAULT _ SPECULATIVE _ RETRY = new PercentileSpeculativeRetryPolicy ( 99 . 0 ) ; 
 
 public final String comment ; 
 public final double readRepairChance ; 
 @ @ - 290 , 7 + 292 , 7 @ @ public final class TableParams 
 private int memtableFlushPeriodInMs = DEFAULT _ MEMTABLE _ FLUSH _ PERIOD _ IN _ MS ; 
 private int minIndexInterval = DEFAULT _ MIN _ INDEX _ INTERVAL ; 
 private int maxIndexInterval = DEFAULT _ MAX _ INDEX _ INTERVAL ; 
 - private SpeculativeRetryPolicy speculativeRetry = SpeculativeRetryPolicy . DEFAULT ; 
 + private SpeculativeRetryPolicy speculativeRetry = DEFAULT _ SPECULATIVE _ RETRY ; 
 private CachingParams caching = CachingParams . DEFAULT ; 
 private CompactionParams compaction = CompactionParams . DEFAULT ; 
 private CompressionParams compression = CompressionParams . DEFAULT ; 
 diff - - git a / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java 
 index 4623cb1 . . daf1ec5 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java 
 + + + b / src / java / org / apache / cassandra / service / reads / AlwaysSpeculativeRetryPolicy . java 
 @ @ - 15 , 7 + 15 , 6 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . service . reads ; 
 
 import com . google . common . base . Objects ; 
 @ @ - 59 , 4 + 58 , 9 @ @ public class AlwaysSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 return Kind . ALWAYS . toString ( ) ; 
 } 
 + 
 + static boolean stringMatches ( String str ) 
 + { 
 + return str . equalsIgnoreCase ( " ALWAYS " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java 
 index 2cd9788 . . b38b986 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java 
 + + + b / src / java / org / apache / cassandra / service / reads / FixedSpeculativeRetryPolicy . java 
 @ @ - 15 , 20 + 15 , 25 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . service . reads ; 
 
 import java . util . concurrent . TimeUnit ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 
 import com . google . common . base . Objects ; 
 
 import com . codahale . metrics . Timer ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . schema . TableParams ; 
 
 public class FixedSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 + private static final Pattern PATTERN = Pattern . compile ( " ^ ( ? < val > [ 0 - 9 . ] + ) ms $ " , Pattern . CASE _ INSENSITIVE ) ; 
 + 
 private final int speculateAtMilliseconds ; 
 
 - public FixedSpeculativeRetryPolicy ( int speculateAtMilliseconds ) 
 + FixedSpeculativeRetryPolicy ( int speculateAtMilliseconds ) 
 { 
 this . speculateAtMilliseconds = speculateAtMilliseconds ; 
 } 
 @ @ - 65 , 4 + 70 , 28 @ @ public class FixedSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 return String . format ( " % dms " , speculateAtMilliseconds ) ; 
 } 
 + 
 + static FixedSpeculativeRetryPolicy fromString ( String str ) 
 + { 
 + Matcher matcher = PATTERN . matcher ( str ) ; 
 + 
 + if ( ! matcher . matches ( ) ) 
 + throw new IllegalArgumentException ( ) ; 
 + 
 + String val = matcher . group ( " val " ) ; 
 + try 
 + { 
 + / / historically we ' ve always parsed this as double , but treated as int ; so we keep doing it for compatibility 
 + return new FixedSpeculativeRetryPolicy ( ( int ) Double . parseDouble ( val ) ) ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; 
 + } 
 + } 
 + 
 + static boolean stringMatches ( String str ) 
 + { 
 + return PATTERN . matcher ( str ) . matches ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java 
 index d49cfe4 . . 7920ac7 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java 
 + + + b / src / java / org / apache / cassandra / service / reads / HybridSpeculativeRetryPolicy . java 
 @ @ - 15 , 27 + 15 , 40 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . service . reads ; 
 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 + 
 import com . google . common . base . Objects ; 
 
 import com . codahale . metrics . Timer ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . schema . TableParams ; 
 
 public class HybridSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 + private static final Pattern PATTERN = 
 + Pattern . compile ( " ^ ( ? < fun > MIN | MAX ) \ \ ( ( ? < val1 > [ 0 - 9 . ] + [ a - z ] + ) \ \ s * , \ \ s * ( ? < val2 > [ 0 - 9 . ] + [ a - z ] + ) \ \ ) $ " , 
 + Pattern . CASE _ INSENSITIVE ) ; 
 + 
 public enum Function 
 { 
 - MIN , MAX 
 + MIN , MAX ; 
 + 
 + long call ( long val1 , long val2 ) 
 + { 
 + return this = = MIN ? Math . min ( val1 , val2 ) : Math . max ( val1 , val2 ) ; 
 + } 
 } 
 
 private final PercentileSpeculativeRetryPolicy percentilePolicy ; 
 private final FixedSpeculativeRetryPolicy fixedPolicy ; 
 private final Function function ; 
 
 - public HybridSpeculativeRetryPolicy ( PercentileSpeculativeRetryPolicy percentilePolicy , 
 - FixedSpeculativeRetryPolicy fixedPolicy , 
 - Function function ) 
 + HybridSpeculativeRetryPolicy ( PercentileSpeculativeRetryPolicy percentilePolicy , 
 + FixedSpeculativeRetryPolicy fixedPolicy , 
 + Function function ) 
 { 
 this . percentilePolicy = percentilePolicy ; 
 this . fixedPolicy = fixedPolicy ; 
 @ @ - 45 , 12 + 58 , 7 @ @ public class HybridSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 @ Override 
 public long calculateThreshold ( Timer readLatency ) 
 { 
 - long percentileThreshold = percentilePolicy . calculateThreshold ( readLatency ) ; 
 - long fixedThreshold = fixedPolicy . calculateThreshold ( readLatency ) ; 
 - 
 - return function = = Function . MIN 
 - ? Math . min ( percentileThreshold , fixedThreshold ) 
 - : Math . max ( percentileThreshold , fixedThreshold ) ; 
 + return function . call ( percentilePolicy . calculateThreshold ( readLatency ) , fixedPolicy . calculateThreshold ( readLatency ) ) ; 
 } 
 
 @ Override 
 @ @ - 81 , 4 + 89 , 44 @ @ public class HybridSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 return String . format ( " % s ( % s , % s ) " , function , percentilePolicy , fixedPolicy ) ; 
 } 
 + 
 + static HybridSpeculativeRetryPolicy fromString ( String str ) 
 + { 
 + Matcher matcher = PATTERN . matcher ( str ) ; 
 + 
 + if ( ! matcher . matches ( ) ) 
 + throw new IllegalArgumentException ( ) ; 
 + 
 + String val1 = matcher . group ( " val1 " ) ; 
 + String val2 = matcher . group ( " val2 " ) ; 
 + 
 + SpeculativeRetryPolicy value1 , value2 ; 
 + try 
 + { 
 + value1 = SpeculativeRetryPolicy . fromString ( val1 ) ; 
 + value2 = SpeculativeRetryPolicy . fromString ( val2 ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; 
 + } 
 + 
 + if ( value1 . kind ( ) = = value2 . kind ( ) ) 
 + { 
 + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' : MIN ( ) / MAX ( ) arguments " + 
 + " should be of different types , but both are of type % s " , 
 + str , TableParams . Option . SPECULATIVE _ RETRY , value1 . kind ( ) ) ) ; 
 + } 
 + 
 + SpeculativeRetryPolicy policy1 = value1 instanceof PercentileSpeculativeRetryPolicy ? value1 : value2 ; 
 + SpeculativeRetryPolicy policy2 = value1 instanceof FixedSpeculativeRetryPolicy ? value1 : value2 ; 
 + 
 + Function function = Function . valueOf ( matcher . group ( " fun " ) . toUpperCase ( ) ) ; 
 + return new HybridSpeculativeRetryPolicy ( ( PercentileSpeculativeRetryPolicy ) policy1 , ( FixedSpeculativeRetryPolicy ) policy2 , function ) ; 
 + } 
 + 
 + static boolean stringMatches ( String str ) 
 + { 
 + return PATTERN . matcher ( str ) . matches ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java 
 index c46a899 . . 0b9a861 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java 
 + + + b / src / java / org / apache / cassandra / service / reads / NeverSpeculativeRetryPolicy . java 
 @ @ - 15 , 7 + 15 , 6 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . service . reads ; 
 
 import com . google . common . base . Objects ; 
 @ @ - 59 , 4 + 58 , 9 @ @ public class NeverSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 return Kind . NEVER . toString ( ) ; 
 } 
 + 
 + static boolean stringMatches ( String str ) 
 + { 
 + return str . equalsIgnoreCase ( " NEVER " ) | | str . equalsIgnoreCase ( " NONE " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java 
 index 172cc0c . . b7ccd4c 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java 
 + + + b / src / java / org / apache / cassandra / service / reads / PercentileSpeculativeRetryPolicy . java 
 @ @ - 15 , 15 + 15 , 23 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . service . reads ; 
 
 + import java . text . DecimalFormat ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 + 
 import com . google . common . base . Objects ; 
 
 import com . codahale . metrics . Timer ; 
 + import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . schema . TableParams ; 
 
 public class PercentileSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 { 
 + private static final Pattern PATTERN = Pattern . compile ( " ^ ( ? < val > [ 0 - 9 . ] + ) p ( ercentile ) ? $ " , Pattern . CASE _ INSENSITIVE ) ; 
 + private static final DecimalFormat FORMATTER = new DecimalFormat ( " # . # # # # " ) ; 
 + 
 private final double percentile ; 
 
 public PercentileSpeculativeRetryPolicy ( double percentile ) 
 @ @ - 61 , 6 + 69 , 39 @ @ public class PercentileSpeculativeRetryPolicy implements SpeculativeRetryPolicy 
 @ Override 
 public String toString ( ) 
 { 
 - return String . format ( " % . 2fp " , percentile ) ; 
 + return String . format ( " % sp " , FORMATTER . format ( percentile ) ) ; 
 + } 
 + 
 + static PercentileSpeculativeRetryPolicy fromString ( String str ) 
 + { 
 + Matcher matcher = PATTERN . matcher ( str ) ; 
 + 
 + if ( ! matcher . matches ( ) ) 
 + throw new IllegalArgumentException ( ) ; 
 + 
 + String val = matcher . group ( " val " ) ; 
 + 
 + double percentile ; 
 + try 
 + { 
 + percentile = Double . parseDouble ( val ) ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; 
 + } 
 + 
 + if ( percentile < = 0 . 0 | | percentile > = 100 . 0 ) 
 + { 
 + throw new ConfigurationException ( String . format ( " Invalid value % s for PERCENTILE option ' % s ' : must be between ( 0 . 0 and 100 . 0 ) " , 
 + str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; 
 + } 
 + 
 + return new PercentileSpeculativeRetryPolicy ( percentile ) ; 
 + } 
 + 
 + static boolean stringMatches ( String str ) 
 + { 
 + return PATTERN . matcher ( str ) . matches ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java b / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java 
 index 225ab26 . . 9bf3a35 100644 
 - - - a / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java 
 + + + b / src / java / org / apache / cassandra / service / reads / SpeculativeRetryPolicy . java 
 @ @ - 15 , 134 + 15 , 40 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . service . reads ; 
 
 - import java . util . Locale ; 
 - import java . util . regex . Matcher ; 
 - import java . util . regex . Pattern ; 
 - 
 import com . codahale . metrics . Timer ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 - 
 - import org . apache . cassandra . service . reads . HybridSpeculativeRetryPolicy . Function ; 
 + import org . apache . cassandra . schema . TableParams ; 
 
 public interface SpeculativeRetryPolicy 
 { 
 public enum Kind 
 { 
 - / / we need to keep NONE around for legacy tables , but going 
 - / / forward we can use the better named NEVER Kind instead 
 - NEVER , NONE , FIXED , PERCENTILE , HYBRID , ALWAYS 
 + NEVER , FIXED , PERCENTILE , HYBRID , ALWAYS 
 } 
 
 - static final Pattern RETRY _ PATTERN = Pattern . compile ( " ^ ( ? < function > MIN | MAX | NEVER | NONE | ALWAYS ) ? \ \ ( ? " + 
 - " ( ? < val1 > [ 0 - 9 . ] + ) ? ( ? < op1 > P | PERCENTILE | MS ) ? ( [ , \ \ s ] * ) " + 
 - " ( ? < val2 > [ 0 - 9 . ] + ) ? ( ? < op2 > P | PERCENTILE | MS ) ? \ \ ) ? $ " , 
 - Pattern . CASE _ INSENSITIVE ) ; 
 - public static final SpeculativeRetryPolicy DEFAULT = new PercentileSpeculativeRetryPolicy ( 99 . 0 ) ; 
 - 
 long calculateThreshold ( Timer readLatency ) ; 
 
 Kind kind ( ) ; 
 
 - public static SpeculativeRetryPolicy nonHybridPolicyFromString ( String typeStr , String valueStr ) throws ConfigurationException 
 + public static SpeculativeRetryPolicy fromString ( String str ) 
 { 
 - switch ( typeStr . toLowerCase ( ) ) 
 - { 
 - case " p " : 
 - case " percentile " : 
 - { 
 - double value = Double . parseDouble ( valueStr ) ; 
 - if ( value > = 100 . 0 | | value < = 0 ) 
 - throw new ConfigurationException ( String . format ( " PERCENTILE should be between 0 and 100 " + 
 - " ( not % s ) " , valueStr ) ) ; 
 - return new PercentileSpeculativeRetryPolicy ( value ) ; 
 - } 
 - case " ms " : 
 - { 
 - / / we ' ve always treated this as long , but let ' s parse as double for compatibility for now 
 - double value = Double . parseDouble ( valueStr ) ; 
 - return new FixedSpeculativeRetryPolicy ( ( int ) value ) ; 
 - } 
 - default : 
 - throw new ConfigurationException ( String . format ( " invalid speculative _ retry type : % s " , typeStr ) ) ; 
 - } 
 - } 
 + if ( AlwaysSpeculativeRetryPolicy . stringMatches ( str ) ) 
 + return AlwaysSpeculativeRetryPolicy . INSTANCE ; 
 
 - public static SpeculativeRetryPolicy fromString ( String schemaStrValue ) throws ConfigurationException 
 - { 
 - Matcher matcher = RETRY _ PATTERN . matcher ( schemaStrValue ) ; 
 - if ( matcher . find ( ) ) 
 - { 
 - String functionStr = matcher . group ( " function " ) ; 
 - String val1 = matcher . group ( " val1 " ) ; 
 - String op1 = matcher . group ( " op1 " ) ; 
 - String val2 = matcher . group ( " val2 " ) ; 
 - String op2 = matcher . group ( " op2 " ) ; 
 + if ( NeverSpeculativeRetryPolicy . stringMatches ( str ) ) 
 + return NeverSpeculativeRetryPolicy . INSTANCE ; 
 
 - String normalizedFunction = ( functionStr ! = null ) ? functionStr . toUpperCase ( Locale . ENGLISH ) : null ; 
 - if ( normalizedFunction ! = null & & val1 ! = null & & val2 ! = null ) 
 - { 
 - Function hybridFunction ; 
 - try 
 - { 
 - hybridFunction = Function . valueOf ( normalizedFunction ) ; 
 - } 
 - catch ( IllegalArgumentException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Specified comparator [ % s ] is not supported " , normalizedFunction ) ) ; 
 - } 
 + if ( PercentileSpeculativeRetryPolicy . stringMatches ( str ) ) 
 + return PercentileSpeculativeRetryPolicy . fromString ( str ) ; 
 
 - SpeculativeRetryPolicy leftPolicy = nonHybridPolicyFromString ( op1 , val1 ) ; 
 - SpeculativeRetryPolicy rightPolicy = nonHybridPolicyFromString ( op2 , val2 ) ; 
 + if ( FixedSpeculativeRetryPolicy . stringMatches ( str ) ) 
 + return FixedSpeculativeRetryPolicy . fromString ( str ) ; 
 
 - if ( leftPolicy . kind ( ) = = rightPolicy . kind ( ) ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Speculative Retry Parameters must be " + 
 - " unique types . Both were found to be % s " , 
 - leftPolicy . kind ( ) . toString ( ) ) ) ; 
 - } 
 + if ( HybridSpeculativeRetryPolicy . stringMatches ( str ) ) 
 + return HybridSpeculativeRetryPolicy . fromString ( str ) ; 
 
 - return ( leftPolicy . kind ( ) = = Kind . PERCENTILE ) 
 - ? new HybridSpeculativeRetryPolicy ( ( PercentileSpeculativeRetryPolicy ) leftPolicy , 
 - ( FixedSpeculativeRetryPolicy ) rightPolicy , hybridFunction ) 
 - : new HybridSpeculativeRetryPolicy ( ( PercentileSpeculativeRetryPolicy ) rightPolicy , 
 - ( FixedSpeculativeRetryPolicy ) leftPolicy , hybridFunction ) ; 
 - } 
 - else if ( normalizedFunction ! = null & & val1 = = null & & op1 = = null ) 
 - { 
 - try 
 - { 
 - Kind kind = Kind . valueOf ( normalizedFunction ) ; 
 - switch ( kind ) 
 - { 
 - case NONE : 
 - case NEVER : return NeverSpeculativeRetryPolicy . INSTANCE ; 
 - case ALWAYS : return AlwaysSpeculativeRetryPolicy . INSTANCE ; 
 - default : throw new ConfigurationException ( String . format ( " Specified comparator [ % s ] is not supported " , normalizedFunction ) ) ; 
 - } 
 - } 
 - catch ( IllegalArgumentException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Specified comparator [ % s ] is not supported " , normalizedFunction ) ) ; 
 - } 
 - } 
 - else 
 - { 
 - if ( op1 = = null | | val1 = = null ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Specified Speculative Retry Policy [ % s ] is not supported " , schemaStrValue ) ) ; 
 - } 
 - else 
 - { 
 - return nonHybridPolicyFromString ( op1 , val1 ) ; 
 - } 
 - } 
 - } 
 - else 
 - { 
 - throw new ConfigurationException ( String . format ( " Specified Speculative Retry Policy [ % s ] is not supported " , schemaStrValue ) ) ; 
 - } 
 + throw new ConfigurationException ( String . format ( " Invalid value % s for option ' % s ' " , str , TableParams . Option . SPECULATIVE _ RETRY ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / org / apache / cassandra / config / DatabaseDescriptor . java b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 683009c . . 73cf3a6 100644 
 - - - a / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 18 , 21 + 18 , 24 @ @ 
 
 package org . apache . cassandra . config ; 
 
 - import java . util . * ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 - import java . io . * ; 
 
 import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . SystemTable ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . TypeInfo ; 
 - import org . apache . cassandra . db . DBManager ; 
 - import org . apache . cassandra . db . SystemTable ; 
 - import org . apache . cassandra . db . Table . TableMetadata ; 
 import org . apache . cassandra . utils . FileUtils ; 
 import org . apache . cassandra . utils . XMLUtils ; 
 import org . w3c . dom . Node ; 
 import org . w3c . dom . NodeList ; 
 - import org . apache . cassandra . io . * ; 
 
 
 / * * 
 @ @ - 306 , 6 + 309 , 9 @ @ public class DatabaseDescriptor 
 / * Read the table related stuff from config * / 
 NodeList tables = xmlUtils . getRequestedNodeList ( " / Storage / Tables / Table " ) ; 
 int size = tables . getLength ( ) ; 
 + if ( size = = 0 ) { 
 + throw new UnsupportedOperationException ( " A Table must be configured " ) ; 
 + } 
 for ( int i = 0 ; i < size ; + + i ) 
 { 
 Node table = tables . item ( i ) ; 
 @ @ - 785 , 4 + 791 , 9 @ @ public class DatabaseDescriptor 
 { 
 return tableToCFMetaDataMap _ ; 
 } 
 + 
 + public static String getTableName ( ) 
 + { 
 + return tables _ . get ( 0 ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamily . java b / src / org / apache / cassandra / db / ColumnFamily . java 
 index 51ac744 . . a2ac3a2 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 288 , 7 + 288 , 7 @ @ public final class ColumnFamily 
 return columns _ . getSortedColumns ( ) ; 
 } 
 
 - Map < String , IColumn > getColumns ( ) 
 + public Map < String , IColumn > getColumns ( ) 
 { 
 return columns _ . getColumns ( ) ; 
 } 
 diff - - git a / src / org / apache / cassandra / db / ColumnFamilyStore . java b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 index be7c245 . . 28bb3f7 100644 
 - - - a / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1384 , 4 + 1384 , 14 @ @ public class ColumnFamilyStore 
 { 
 memtable _ . get ( ) . flushOnRecovery ( ) ; 
 } 
 + 
 + public Object getMemtable ( ) 
 + { 
 + return memtable _ . get ( ) ; 
 + } 
 + 
 + public Set < String > getSSTableFilenames ( ) 
 + { 
 + return Collections . unmodifiableSet ( ssTables _ ) ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / db / Memtable . java b / src / org / apache / cassandra / db / Memtable . java 
 index 2bdad37 . . 567b829 100644 
 - - - a / src / org / apache / cassandra / db / Memtable . java 
 + + + b / src / org / apache / cassandra / db / Memtable . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ExecutorService ; 
 @ @ - 45 , 6 + 47 , 7 @ @ import org . apache . cassandra . io . DataOutputBuffer ; 
 import org . apache . cassandra . io . SSTable ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . utils . LogUtil ; 
 + import org . apache . cassandra . utils . DestructivePQIterator ; 
 
 / * * 
 * Author : Avinash Lakshman ( alakshman @ facebook . com ) & Prashant Malik ( pmalik @ facebook . com ) 
 @ @ - 419 , 4 + 422 , 9 @ @ public class Memtable implements MemtableMBean , Comparable < Memtable > 
 columnFamilies _ . clear ( ) ; 
 } 
 
 + public Iterator < String > sortedKeyIterator ( ) 
 + { 
 + return new DestructivePQIterator < String > ( new PriorityQueue < String > ( columnFamilies _ . keySet ( ) ) ) ; 
 + } 
 + 
 } 
 diff - - git a / src / org / apache / cassandra / db / MemtableManager . java b / src / org / apache / cassandra / db / MemtableManager . java 
 index 997bbd3 . . 54242d1 100644 
 - - - a / src / org / apache / cassandra / db / MemtableManager . java 
 + + + b / src / org / apache / cassandra / db / MemtableManager . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class MemtableManager 
 private static Lock lock _ = new ReentrantLock ( ) ; 
 private static Logger logger _ = Logger . getLogger ( MemtableManager . class ) ; 
 private ReentrantReadWriteLock rwLock _ = new ReentrantReadWriteLock ( true ) ; 
 - static MemtableManager instance ( ) 
 + public static MemtableManager instance ( ) 
 { 
 if ( instance _ = = null ) 
 { 
 @ @ - 157 , 7 + 157 , 22 @ @ public class MemtableManager 
 	 } 
 } 
 
 - 
 - 
 + public List < Memtable > getUnflushedMemtables ( String cfName ) 
 + { 
 + rwLock _ . readLock ( ) . lock ( ) ; 
 + try 
 + { 
 + List < Memtable > memtables = history _ . get ( cfName ) ; 
 + if ( memtables ! = null ) 
 + { 
 + return new ArrayList < Memtable > ( memtables ) ; 
 + } 
 + return Arrays . asList ( new Memtable [ 0 ] ) ; 
 + } 
 + finally 
 + { 
 + rwLock _ . readLock ( ) . unlock ( ) ; 
 + } 
 + } 
 
 } 
 diff - - git a / src / org / apache / cassandra / db / Table . java b / src / org / apache / cassandra / db / Table . java 
 index 9c84b42 . . f1b260a 100644 
 - - - a / src / org / apache / cassandra / db / Table . java 
 + + + b / src / org / apache / cassandra / db / Table . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class Table 
 * is basically the column family name and the ID associated with 
 * this column family . We use this ID in the Commit Log header to 
 * determine when a log file that has been rolled can be deleted . 
 - * / 
 + * / 
 public static class TableMetadata 
 { 
 / * Name of the column family * / 
 @ @ - 454 , 7 + 454 , 7 @ @ public class Table 
 return columnFamilyStores _ ; 
 } 
 
 - ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 + public ColumnFamilyStore getColumnFamilyStore ( String cfName ) 
 { 
 return columnFamilyStores _ . get ( cfName ) ; 
 } 
 @ @ - 875 , 4 + 875 , 17 @ @ public class Table 
 long timeTaken = System . currentTimeMillis ( ) - start ; 
 dbAnalyticsSource _ . updateWriteStatistics ( timeTaken ) ; 
 } 
 + 
 + public Set < String > getApplicationColumnFamilies ( ) 
 + { 
 + Set < String > set = new HashSet < String > ( ) ; 
 + for ( String cfName : getColumnFamilies ( ) ) 
 + { 
 + if ( DatabaseDescriptor . isApplicationColumnFamily ( cfName ) ) 
 + { 
 + set . add ( cfName ) ; 
 + } 
 + } 
 + return set ; 
 + } 
 } 
 diff - - git a / src / org / apache / cassandra / service / CassandraServer . java b / src / org / apache / cassandra / service / CassandraServer . java 
 index 93b62e7 . . c2d5f66 100644 
 - - - a / src / org / apache / cassandra / service / CassandraServer . java 
 + + + b / src / org / apache / cassandra / service / CassandraServer . java 
 @ @ - 817 , 6 + 817 , 71 @ @ public class CassandraServer extends FacebookBase implements 
 return result ; 
 } 
 
 + public List < String > get _ range ( String tablename , final String startkey ) throws CassandraException 
 + { 
 + logger _ . debug ( " get _ range " ) ; 
 + 
 + / / send request 
 + Message message ; 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + try 
 + { 
 + dob . writeUTF ( startkey ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " unable to write startkey " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + byte [ ] messageBody = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + message = new Message ( StorageService . getLocalStorageEndPoint ( ) , 
 + StorageService . readStage _ , 
 + StorageService . rangeVerbHandler _ , 
 + messageBody ) ; 
 + EndPoint endPoint ; 
 + try 
 + { 
 + endPoint = StorageService . instance ( ) . findSuitableEndPoint ( startkey ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new CassandraException ( " Unable to find endpoint for " + startkey ) ; 
 + } 
 + IAsyncResult iar = MessagingService . getMessagingInstance ( ) . sendRR ( message , endPoint ) ; 
 + 
 + / / read response 
 + / / TODO send more requests if we need to span multiple nodes ( or can we just let client worry about that , 
 + / / since they have to handle multiple requests anyway ? ) 
 + byte [ ] responseBody ; 
 + try 
 + { 
 + responseBody = ( byte [ ] ) iar . get ( 2 * DatabaseDescriptor . getRpcTimeout ( ) , TimeUnit . MILLISECONDS ) [ 0 ] ; 
 + } 
 + catch ( TimeoutException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + DataInputBuffer bufIn = new DataInputBuffer ( ) ; 
 + bufIn . reset ( responseBody , responseBody . length ) ; 
 + 
 + / / turn into List 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + while ( bufIn . getPosition ( ) < responseBody . length ) 
 + { 
 + try 
 + { 
 + keys . add ( bufIn . readUTF ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + logger _ . error ( " bad utf " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + return keys ; 
 + } 
 + 
 / * 
 * This method is used to ensure that all keys 
 * prior to the specified key , as dtermined by 
 diff - - git a / src / org / apache / cassandra / service / RangeVerbHandler . java b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 new file mode 100644 
 index 0000000 . . 3587907 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / service / RangeVerbHandler . java 
 @ @ - 0 , 0 + 1 , 152 @ @ 
 + package org . apache . cassandra . service ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + import java . util . Iterator ; 
 + import java . util . Comparator ; 
 + import java . util . Arrays ; 
 + import java . io . FileNotFoundException ; 
 + import java . io . IOException ; 
 + 
 + import org . apache . commons . collections . IteratorUtils ; 
 + import org . apache . commons . collections . Predicate ; 
 + 
 + import org . apache . cassandra . net . MessagingService ; 
 + import org . apache . cassandra . net . IVerbHandler ; 
 + import org . apache . cassandra . net . Message ; 
 + import org . apache . cassandra . db . IdentityFilter ; 
 + import org . apache . cassandra . db . ColumnFamily ; 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . FileStruct ; 
 + import org . apache . cassandra . db . Table ; 
 + import org . apache . cassandra . db . Memtable ; 
 + import org . apache . cassandra . db . MemtableManager ; 
 + import org . apache . cassandra . io . SequenceFile ; 
 + import org . apache . cassandra . io . DataInputBuffer ; 
 + import org . apache . cassandra . io . DataOutputBuffer ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + 
 + public class RangeVerbHandler implements IVerbHandler 
 + { 
 + public static final Comparator < String > STRING _ COMPARATOR = new Comparator < String > ( ) 
 + { 
 + public int compare ( String o1 , String o2 ) 
 + { 
 + return o1 . compareTo ( o2 ) ; 
 + } 
 + } ; 
 + 
 + public void doVerb ( Message message ) 
 + { 
 + byte [ ] bytes = ( byte [ ] ) message . getMessageBody ( ) [ 0 ] ; 
 + final String startkey ; 
 + if ( bytes . length = = 0 ) 
 + { 
 + startkey = " " ; 
 + } 
 + else 
 + { 
 + DataInputBuffer dib = new DataInputBuffer ( ) ; 
 + dib . reset ( bytes , bytes . length ) ; 
 + try 
 + { 
 + startkey = dib . readUTF ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + List < Iterator < String > > iterators = new ArrayList < Iterator < String > > ( ) ; 
 + Table table = Table . open ( DatabaseDescriptor . getTableName ( ) ) ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + 
 + / / memtable keys : current and historical 
 + Iterator < Memtable > it = ( Iterator < Memtable > ) IteratorUtils . chainedIterator ( 
 + IteratorUtils . singletonIterator ( cfs . getMemtable ( ) ) , 
 + MemtableManager . instance ( ) . getUnflushedMemtables ( cfName ) . iterator ( ) ) ; 
 + while ( it . hasNext ( ) ) 
 + { 
 + iterators . add ( IteratorUtils . filteredIterator ( it . next ( ) . sortedKeyIterator ( ) , new Predicate ( ) 
 + { 
 + public boolean evaluate ( Object key ) 
 + { 
 + return ( ( String ) key ) . compareTo ( startkey ) > = 0 ; 
 + } 
 + } ) ) ; 
 + } 
 + 
 + / / sstables 
 + for ( String filename : cfs . getSSTableFilenames ( ) ) 
 + { 
 + try 
 + { 
 + FileStruct fs = new FileStruct ( SequenceFile . reader ( filename ) ) ; 
 + fs . seekTo ( startkey ) ; 
 + iterators . add ( fs . iterator ( ) ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + Iterator < String > iter = IteratorUtils . collatedIterator ( STRING _ COMPARATOR , iterators ) ; 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + String last = null , current = null ; 
 + 
 + while ( keys . size ( ) < 1000 ) 
 + { 
 + if ( ! iter . hasNext ( ) ) 
 + { 
 + break ; 
 + } 
 + current = iter . next ( ) ; 
 + if ( ! current . equals ( last ) ) 
 + { 
 + last = current ; 
 + for ( String cfName : table . getApplicationColumnFamilies ( ) ) 
 + { 
 + ColumnFamilyStore cfs = table . getColumnFamilyStore ( cfName ) ; 
 + try 
 + { 
 + ColumnFamily cf = cfs . getColumnFamily ( current , cfName , new IdentityFilter ( ) ) ; 
 + if ( cf ! = null & & cf . getColumns ( ) . size ( ) > 0 ) 
 + { 
 + keys . add ( current ) ; 
 + break ; 
 + } 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + DataOutputBuffer dob = new DataOutputBuffer ( ) ; 
 + for ( String key : keys ) 
 + { 
 + try 
 + { 
 + dob . writeUTF ( key ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + byte [ ] data = Arrays . copyOf ( dob . getData ( ) , dob . getLength ( ) ) ; 
 + Message response = message . getReply ( StorageService . getLocalStorageEndPoint ( ) , data ) ; 
 + MessagingService . getMessagingInstance ( ) . sendOneWay ( response , message . getFrom ( ) ) ; 
 + } 
 + } 
 diff - - git a / src / org / apache / cassandra / service / StorageService . java b / src / org / apache / cassandra / service / StorageService . java 
 index 409cd5f . . 95de5c6 100644 
 - - - a / src / org / apache / cassandra / service / StorageService . java 
 + + + b / src / org / apache / cassandra / service / StorageService . java 
 @ @ - 138 , 6 + 138 , 7 @ @ public final class StorageService implements IEndPointStateChangeSubscriber , Sto 
 public final static String bsMetadataVerbHandler _ = " BS - METADATA - VERB - HANDLER " ; 
 public final static String calloutDeployVerbHandler _ = " CALLOUT - DEPLOY - VERB - HANDLER " ; 
 public final static String touchVerbHandler _ = " TOUCH - VERB - HANDLER " ; 
 + public static String rangeVerbHandler _ = " RANGE - VERB - HANDLER " ; 
 
 public static enum ConsistencyLevel 
 { 
 diff - - git a / src / org / apache / cassandra / utils / DestructivePQIterator . java b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 new file mode 100644 
 index 0000000 . . 0ed96f8 
 - - - / dev / null 
 + + + b / src / org / apache / cassandra / utils / DestructivePQIterator . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . util . Iterator ; 
 + import java . util . PriorityQueue ; 
 + 
 + public class DestructivePQIterator < T > implements Iterator < T > { 
 + private PriorityQueue < T > pq ; 
 + 
 + public DestructivePQIterator ( PriorityQueue < T > pq ) { 
 + this . pq = pq ; 
 + } 
 + 
 + public boolean hasNext ( ) { 
 + return pq . size ( ) > 0 ; 
 + } 
 + 
 + public T next ( ) { 
 + return pq . poll ( ) ; 
 + } 
 + 
 + public void remove ( ) { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + } 
 + 
 diff - - git a / test / org / apache / cassandra / service / CassandraServerTest . java b / test / org / apache / cassandra / service / CassandraServerTest . java 
 index 07c7dfe . . 762bbb5 100644 
 - - - a / test / org / apache / cassandra / service / CassandraServerTest . java 
 + + + b / test / org / apache / cassandra / service / CassandraServerTest . java 
 @ @ - 9 , 8 + 9 , 50 @ @ import org . testng . annotations . Test ; 
 import java . io . IOException ; 
 import java . util . * ; 
 
 + import com . facebook . thrift . TException ; 
 + 
 public class CassandraServerTest extends ServerTest { 
 / * 
 + TODO fix resetting server so this works 
 + @ Test 
 + public void test _ get _ range _ empty ( ) throws IOException , TException { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + server . start ( ) ; 
 + 
 + assert CollectionUtils . EMPTY _ COLLECTION . equals ( server . get _ range ( DatabaseDescriptor . getTableName ( ) , " " ) ) ; 
 + } 
 + * / 
 + 
 + / * 
 + @ Test 
 + public void test _ get _ range ( ) throws IOException , TException , CassandraException 
 + { 
 + CassandraServer server = new CassandraServer ( ) ; 
 + try 
 + { 
 + server . start ( ) ; 
 + } 
 + catch ( Throwable throwable ) 
 + { 
 + throw new RuntimeException ( throwable ) ; 
 + } 
 + 
 + / / TODO insert some data 
 + try { 
 + String last = null ; 
 + for ( String key : server . get _ range ( DatabaseDescriptor . getTableName ( ) , " key1 " ) ) { 
 + if ( last ! = null ) { 
 + assert last . compareTo ( key ) < 0 ; 
 + } 
 + last = key ; 
 + } 
 + } finally { 
 + server . shutdown ( ) ; 
 + } 
 + } 
 + * / 
 + 
 + / * 
 @ Test 
 public void test _ get _ column ( ) throws Throwable { 
 CassandraServer server = new CassandraServer ( ) ;
