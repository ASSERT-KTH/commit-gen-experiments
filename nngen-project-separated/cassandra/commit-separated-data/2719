BLEU SCORE: 0.11598118436136108

TEST MSG: Update NOTICE file
GENERATED MSG: increase memlock at daemon startup

TEST DIFF (one line): diff - - git a / NOTICE . txt b / NOTICE . txt <nl> index 03cf45a . . 14ffad2 100644 <nl> - - - a / NOTICE . txt <nl> + + + b / NOTICE . txt <nl> @ @ - 52 , 3 + 52 , 11 @ @ Written by Pavel Yaskevich . <nl> LMAX Disruptor <nl> ( http : / / lmax - exchange . github . io / disruptor / ) <nl> Copyright 2011 LMAX Ltd . <nl> + <nl> + Airline <nl> + ( https : / / github . com / airlift / airline ) <nl> + Copyright 2011 , Dain Sundstrom dain @ iq80 . com <nl> + Copyright 2010 , Cedric Beust cedric @ beust . com <nl> + <nl> + HLL + + support provided by stream - lib <nl> + ( https : / / github . com / addthis / stream - lib )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index bd858a6 . . c046538 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 699 , 4 + 699 , 9 @ @ public class Table <nl> cfs . truncate ( ) . get ( ) ; <nl> logger . debug ( " Truncation done . " ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( name = ' " + name + " ' ) " ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> index 0db6901 . . fa37b85 100644 <nl> - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> + import org . apache . cassandra . db . ColumnFamilySerializer ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 108 , 7 + 109 , 13 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement <nl> <nl> / / we can stop early if bloom filter says none of the columns actually exist - - but , <nl> / / we can ' t stop before initializing the cf above , in case there ' s a relevant tombstone <nl> - cf = ColumnFamily . serializer ( ) . deserializeFromSSTableNoColumns ( ColumnFamily . create ( sstable . metadata ) , file ) ; <nl> + ColumnFamilySerializer serializer = ColumnFamily . serializer ( ) ; <nl> + try { <nl> + cf = serializer . deserializeFromSSTableNoColumns ( ColumnFamily . create ( sstable . metadata ) , file ) ; <nl> + } catch ( Exception e ) { <nl> + throw new IOException <nl> + ( serializer + " failed to deserialize " + sstable . getColumnFamilyName ( ) + " with " + sstable . metadata + " from " + file , e ) ; <nl> + } <nl> <nl> List < ByteBuffer > filteredColumnNames = new ArrayList < ByteBuffer > ( columns . size ( ) ) ; <nl> for ( ByteBuffer name : columns ) <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> index ad36907 . . 2d000fc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java <nl> @ @ - 210 , 4 + 210 , 13 @ @ public class QueryFilter <nl> { <nl> return new QueryFilter ( key , path , new NamesQueryFilter ( column ) ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( key = " + key + <nl> + " , path = " + path + <nl> + ( filter = = null ? " " : " , filter = " + filter ) + <nl> + ( superFilter = = null ? " " : " , superFilter = " + superFilter ) + <nl> + " ) " ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / QueryPath . java b / src / java / org / apache / cassandra / db / filter / QueryPath . java <nl> index 722eb17 . . fe6ddf6 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / QueryPath . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / QueryPath . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class QueryPath <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - return " QueryPath ( " + <nl> + return getClass ( ) . getSimpleName ( ) + " ( " + <nl> " columnFamilyName = ' " + columnFamilyName + ' \ ' ' + <nl> " , superColumnName = ' " + superColumnName + ' \ ' ' + <nl> " , columnName = ' " + columnName + ' \ ' ' + <nl> diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> index 1f6b1a3 . . aed4676 100644 <nl> - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java <nl> @ @ - 143 , 4 + 143 , 13 @ @ public class SliceQueryFilter implements IFilter <nl> container . addColumn ( column ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( " + <nl> + " start = " + start + <nl> + " , finish = " + finish + <nl> + " , reversed = " + reversed + <nl> + " , count = " + count + " ] " ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> index effeb82 . . f010abb 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java <nl> @ @ - 186 , 9 + 186 , 20 @ @ public class Descriptor <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) <nl> - { <nl> - return baseFilename ( ) ; <nl> + public String toString ( ) { <nl> + return " Descriptor ( baseFilename = " + baseFilename ( ) + <nl> + " , directory = " + directory + <nl> + " , ksname = ' " + ksname + ' \ ' ' + <nl> + " , cfname = ' " + cfname + ' \ ' ' + <nl> + " , version = ' " + version + ' \ ' ' + <nl> + " , generation = " + generation + <nl> + " , temporary = " + temporary + <nl> + " , usesOldBloomFilter = " + usesOldBloomFilter + <nl> + " , isLatestVersion = " + isLatestVersion + <nl> + " , hasStringsInBloomFilter = " + hasStringsInBloomFilter + <nl> + " , hasIntRowSize = " + hasIntRowSize + <nl> + " , hasEncodedKeys = " + hasEncodedKeys + <nl> + " ) " ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> index 96005d1 . . 81b93c4 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java <nl> @ @ - 257 , 10 + 257 , 15 @ @ public abstract class SSTable <nl> } <nl> <nl> @ Override <nl> - public String toString ( ) <nl> - { <nl> - return getClass ( ) . getName ( ) + " ( " + <nl> - " path = ' " + getFilename ( ) + ' \ ' ' + <nl> - ' ) ' ; <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( descriptor = " + descriptor + <nl> + " , path = ' " + getFilename ( ) + ' \ ' ' + <nl> + " , metadata = " + metadata + <nl> + toSubString ( ) + <nl> + " ) " ; <nl> + } <nl> + <nl> + protected String toSubString ( ) { <nl> + return " " ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> index feb53df . . c180ef1 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> * maxDataAge is a timestamp in local server time ( e . g . System . currentTimeMilli ) which represents an uppper bound <nl> * to the newest piece of data stored in the sstable . In other words , this sstable does not contain items created <nl> * later than maxDataAge . <nl> - * <nl> + * <nl> * The field is not serialized to disk , so relying on it for more than what truncate does is not advised . <nl> * <nl> * When a new sstable is flushed , maxDataAge is set to the time of creation . <nl> @ @ - 678 , 4 + 678 , 11 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> { <nl> return bloomFilterTracker . getRecentTruePositiveCount ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + protected String toSubString ( ) { <nl> + return " , ifile = " + ifile + <nl> + " , dfile = " + dfile + <nl> + " , maxDataAge = " + maxDataAge ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> index e28f7b3 . . fa7075b 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java <nl> @ @ - 186 , 7 + 186 , 7 @ @ public class SSTableScanner implements Iterator < IColumnIterator > , Closeable <nl> } <nl> catch ( IOException e ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + throw new RuntimeException ( SSTableScanner . this + " failed to provide next columns from " + this , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 194 , 5 + 194 , 21 @ @ public class SSTableScanner implements Iterator < IColumnIterator > , Closeable <nl> { <nl> throw new UnsupportedOperationException ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( " + <nl> + " finishedAt : " + finishedAt + <nl> + " ) " ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( " + <nl> + " file = " + file + <nl> + " sstable = " + sstable + <nl> + " exhausted = " + exhausted + <nl> + " ) " ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> index 3e52ad7 . . 1afbd2a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java <nl> @ @ - 230 , 6 + 230 , 11 @ @ public class SSTableWriter extends SSTable <nl> return new Builder ( desc ) ; <nl> } <nl> <nl> + @ Override <nl> + protected String toSubString ( ) { <nl> + return " , dataFile = " + dataFile ; <nl> + } <nl> + <nl> / * * <nl> * Removes the given SSTable from temporary status and opens it , rebuilding the <nl> * bloom filter and row index from the data file . <nl> diff - - git a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java <nl> index 9f21d15 . . 018354e 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java <nl> @ @ - 479 , 4 + 479 , 12 @ @ public class BufferedRandomAccessFile extends RandomAccessFile implements FileDa <nl> this . pointer = pointer ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( " + <nl> + " filePath = ' " + filePath + " ' " + <nl> + " , length = " + fileLength + <nl> + " , skipCache = " + skipCache + " ) " ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> index cd8d3ba . . 23070f9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> + + + b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java <nl> @ @ - 157 , 4 + 157 , 12 @ @ public class MappedFileDataInput extends AbstractDataInput implements FileDataIn <nl> this . position = position ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( " + <nl> + " filename = ' " + filename + " ' " + <nl> + " , position = " + position + <nl> + " ) " ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> index e4c4ebb . . cf76dcc 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java <nl> @ @ - 141 , 4 + 141 , 11 @ @ public abstract class SegmentedFile <nl> <nl> public void remove ( ) { throw new UnsupportedOperationException ( ) ; } <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return getClass ( ) . getSimpleName ( ) + " ( path = ' " + path + " ' " + <nl> + " , length = " + length + <nl> + " ) " ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / NOTICE . txt b / NOTICE . txt 
 index 03cf45a . . 14ffad2 100644 
 - - - a / NOTICE . txt 
 + + + b / NOTICE . txt 
 @ @ - 52 , 3 + 52 , 11 @ @ Written by Pavel Yaskevich . 
 LMAX Disruptor 
 ( http : / / lmax - exchange . github . io / disruptor / ) 
 Copyright 2011 LMAX Ltd . 
 + 
 + Airline 
 + ( https : / / github . com / airlift / airline ) 
 + Copyright 2011 , Dain Sundstrom dain @ iq80 . com 
 + Copyright 2010 , Cedric Beust cedric @ beust . com 
 + 
 + HLL + + support provided by stream - lib 
 + ( https : / / github . com / addthis / stream - lib )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index bd858a6 . . c046538 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 699 , 4 + 699 , 9 @ @ public class Table 
 cfs . truncate ( ) . get ( ) ; 
 logger . debug ( " Truncation done . " ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( name = ' " + name + " ' ) " ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 index 0db6901 . . fa37b85 100644 
 - - - a / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 + + + b / src / java / org / apache / cassandra / db / columniterator / SSTableNamesIterator . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 + import org . apache . cassandra . db . ColumnFamilySerializer ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 108 , 7 + 109 , 13 @ @ public class SSTableNamesIterator extends SimpleAbstractColumnIterator implement 
 
 / / we can stop early if bloom filter says none of the columns actually exist - - but , 
 / / we can ' t stop before initializing the cf above , in case there ' s a relevant tombstone 
 - cf = ColumnFamily . serializer ( ) . deserializeFromSSTableNoColumns ( ColumnFamily . create ( sstable . metadata ) , file ) ; 
 + ColumnFamilySerializer serializer = ColumnFamily . serializer ( ) ; 
 + try { 
 + cf = serializer . deserializeFromSSTableNoColumns ( ColumnFamily . create ( sstable . metadata ) , file ) ; 
 + } catch ( Exception e ) { 
 + throw new IOException 
 + ( serializer + " failed to deserialize " + sstable . getColumnFamilyName ( ) + " with " + sstable . metadata + " from " + file , e ) ; 
 + } 
 
 List < ByteBuffer > filteredColumnNames = new ArrayList < ByteBuffer > ( columns . size ( ) ) ; 
 for ( ByteBuffer name : columns ) 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryFilter . java b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 index ad36907 . . 2d000fc 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryFilter . java 
 @ @ - 210 , 4 + 210 , 13 @ @ public class QueryFilter 
 { 
 return new QueryFilter ( key , path , new NamesQueryFilter ( column ) ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( key = " + key + 
 + " , path = " + path + 
 + ( filter = = null ? " " : " , filter = " + filter ) + 
 + ( superFilter = = null ? " " : " , superFilter = " + superFilter ) + 
 + " ) " ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / filter / QueryPath . java b / src / java / org / apache / cassandra / db / filter / QueryPath . java 
 index 722eb17 . . fe6ddf6 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / QueryPath . java 
 + + + b / src / java / org / apache / cassandra / db / filter / QueryPath . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class QueryPath 
 @ Override 
 public String toString ( ) 
 { 
 - return " QueryPath ( " + 
 + return getClass ( ) . getSimpleName ( ) + " ( " + 
 " columnFamilyName = ' " + columnFamilyName + ' \ ' ' + 
 " , superColumnName = ' " + superColumnName + ' \ ' ' + 
 " , columnName = ' " + columnName + ' \ ' ' + 
 diff - - git a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 index 1f6b1a3 . . aed4676 100644 
 - - - a / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 + + + b / src / java / org / apache / cassandra / db / filter / SliceQueryFilter . java 
 @ @ - 143 , 4 + 143 , 13 @ @ public class SliceQueryFilter implements IFilter 
 container . addColumn ( column ) ; 
 } 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( " + 
 + " start = " + start + 
 + " , finish = " + finish + 
 + " , reversed = " + reversed + 
 + " , count = " + count + " ] " ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / Descriptor . java b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 index effeb82 . . f010abb 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / Descriptor . java 
 @ @ - 186 , 9 + 186 , 20 @ @ public class Descriptor 
 } 
 
 @ Override 
 - public String toString ( ) 
 - { 
 - return baseFilename ( ) ; 
 + public String toString ( ) { 
 + return " Descriptor ( baseFilename = " + baseFilename ( ) + 
 + " , directory = " + directory + 
 + " , ksname = ' " + ksname + ' \ ' ' + 
 + " , cfname = ' " + cfname + ' \ ' ' + 
 + " , version = ' " + version + ' \ ' ' + 
 + " , generation = " + generation + 
 + " , temporary = " + temporary + 
 + " , usesOldBloomFilter = " + usesOldBloomFilter + 
 + " , isLatestVersion = " + isLatestVersion + 
 + " , hasStringsInBloomFilter = " + hasStringsInBloomFilter + 
 + " , hasIntRowSize = " + hasIntRowSize + 
 + " , hasEncodedKeys = " + hasEncodedKeys + 
 + " ) " ; 
 } 
 
 @ Override 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTable . java b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 index 96005d1 . . 81b93c4 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTable . java 
 @ @ - 257 , 10 + 257 , 15 @ @ public abstract class SSTable 
 } 
 
 @ Override 
 - public String toString ( ) 
 - { 
 - return getClass ( ) . getName ( ) + " ( " + 
 - " path = ' " + getFilename ( ) + ' \ ' ' + 
 - ' ) ' ; 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( descriptor = " + descriptor + 
 + " , path = ' " + getFilename ( ) + ' \ ' ' + 
 + " , metadata = " + metadata + 
 + toSubString ( ) + 
 + " ) " ; 
 + } 
 + 
 + protected String toSubString ( ) { 
 + return " " ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 index feb53df . . c180ef1 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableReader . java 
 @ @ - 97 , 7 + 97 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 * maxDataAge is a timestamp in local server time ( e . g . System . currentTimeMilli ) which represents an uppper bound 
 * to the newest piece of data stored in the sstable . In other words , this sstable does not contain items created 
 * later than maxDataAge . 
 - * 
 + * 
 * The field is not serialized to disk , so relying on it for more than what truncate does is not advised . 
 * 
 * When a new sstable is flushed , maxDataAge is set to the time of creation . 
 @ @ - 678 , 4 + 678 , 11 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 { 
 return bloomFilterTracker . getRecentTruePositiveCount ( ) ; 
 } 
 + 
 + @ Override 
 + protected String toSubString ( ) { 
 + return " , ifile = " + ifile + 
 + " , dfile = " + dfile + 
 + " , maxDataAge = " + maxDataAge ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 index e28f7b3 . . fa7075b 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableScanner . java 
 @ @ - 186 , 7 + 186 , 7 @ @ public class SSTableScanner implements Iterator < IColumnIterator > , Closeable 
 } 
 catch ( IOException e ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + throw new RuntimeException ( SSTableScanner . this + " failed to provide next columns from " + this , e ) ; 
 } 
 } 
 
 @ @ - 194 , 5 + 194 , 21 @ @ public class SSTableScanner implements Iterator < IColumnIterator > , Closeable 
 { 
 throw new UnsupportedOperationException ( ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( " + 
 + " finishedAt : " + finishedAt + 
 + " ) " ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( " + 
 + " file = " + file + 
 + " sstable = " + sstable + 
 + " exhausted = " + exhausted + 
 + " ) " ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 index 3e52ad7 . . 1afbd2a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SSTableWriter . java 
 @ @ - 230 , 6 + 230 , 11 @ @ public class SSTableWriter extends SSTable 
 return new Builder ( desc ) ; 
 } 
 
 + @ Override 
 + protected String toSubString ( ) { 
 + return " , dataFile = " + dataFile ; 
 + } 
 + 
 / * * 
 * Removes the given SSTable from temporary status and opens it , rebuilding the 
 * bloom filter and row index from the data file . 
 diff - - git a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java 
 index 9f21d15 . . 018354e 100644 
 - - - a / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / BufferedRandomAccessFile . java 
 @ @ - 479 , 4 + 479 , 12 @ @ public class BufferedRandomAccessFile extends RandomAccessFile implements FileDa 
 this . pointer = pointer ; 
 } 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( " + 
 + " filePath = ' " + filePath + " ' " + 
 + " , length = " + fileLength + 
 + " , skipCache = " + skipCache + " ) " ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 index cd8d3ba . . 23070f9 100644 
 - - - a / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 + + + b / src / java / org / apache / cassandra / io / util / MappedFileDataInput . java 
 @ @ - 157 , 4 + 157 , 12 @ @ public class MappedFileDataInput extends AbstractDataInput implements FileDataIn 
 this . position = position ; 
 } 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( " + 
 + " filename = ' " + filename + " ' " + 
 + " , position = " + position + 
 + " ) " ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / util / SegmentedFile . java b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 index e4c4ebb . . cf76dcc 100644 
 - - - a / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 + + + b / src / java / org / apache / cassandra / io / util / SegmentedFile . java 
 @ @ - 141 , 4 + 141 , 11 @ @ public abstract class SegmentedFile 
 
 public void remove ( ) { throw new UnsupportedOperationException ( ) ; } 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return getClass ( ) . getSimpleName ( ) + " ( path = ' " + path + " ' " + 
 + " , length = " + length + 
 + " ) " ; 
 + } 
 }
