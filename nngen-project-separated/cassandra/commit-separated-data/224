BLEU SCORE: 0.020943469770777077

TEST MSG: Rely on the JVM to handle OutOfMemoryErrors
GENERATED MSG: Produce a heap dump when exiting on OO a heap dump when exiting on OOM

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c1e81fd . . 5200eb1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 12 <nl> + * Rely on the JVM to handle OutOfMemoryErrors ( CASSANDRA - 13006 ) <nl> * Grab refs during scrub / index redistribution / cleanup ( CASSANDRA - 13873 ) <nl> <nl> 2 . 2 . 11 <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 3bff458 . . 5747941 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 18 , 8 + 18 , 13 @ @ using the provided ' sstableupgrade ' tool . <nl> <nl> Upgrading <nl> - - - - - - - - - <nl> - - Nothing specific to this release , but please see 2 . 2 if you are upgrading <nl> - from a previous version . <nl> + - Cassandra is now relying on the JVM options to properly shutdown on OutOfMemoryError . By default it will <nl> + rely on the OnOutOfMemoryError option as the ExitOnOutOfMemoryError and CrashOnOutOfMemoryError options <nl> + are not supported by the older 1 . 7 and 1 . 8 JVMs . A warning will be logged at startup if none of those JVM <nl> + options are used . See CASSANDRA - 13006 for more details . <nl> + - Cassandra is not logging anymore by default an Heap histogram on OutOfMemoryError . To enable that behavior <nl> + set the ' cassandra . printHeapHistogramOnOutOfMemoryError ' System property to ' true ' . See CASSANDRA - 13006 <nl> + for more details . <nl> <nl> 2 . 2 . 11 <nl> = = = = = = <nl> diff - - git a / bin / cassandra b / bin / cassandra <nl> index 2dd0fe1 . . 0e337e8 100755 <nl> - - - a / bin / cassandra <nl> + + + b / bin / cassandra <nl> @ @ - 28 , 6 + 28 , 7 @ @ <nl> # <nl> # CLASSPATH - - A Java classpath containing everything necessary to run . <nl> # JVM _ OPTS - - Additional arguments to the JVM for heap size , etc <nl> + # JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT - - The OnOutOfMemoryError JVM option if specified <nl> # CASSANDRA _ CONF - - Directory containing Cassandra configuration files . <nl> # <nl> # As a convenience , a fragment of shell is sourced in order to set one or <nl> @ @ - 199 , 12 + 200 , 22 @ @ launch _ service ( ) <nl> # to close stdout / stderr , but it ' s up to us not to background . <nl> if [ " x $ foreground " ! = " x " ] ; then <nl> cassandra _ parms = " $ cassandra _ parms - Dcassandra - foreground = yes " <nl> - exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " <nl> + if [ " x $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " ! = " x " ] ; then <nl> + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS " $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " <nl> + else <nl> + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " <nl> + fi <nl> # Startup CassandraDaemon , background it , and write the pid . <nl> else <nl> - exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & <nl> - [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " <nl> - true <nl> + if [ " x $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " ! = " x " ] ; then <nl> + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS " $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & <nl> + [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " <nl> + true <nl> + else <nl> + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & <nl> + [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " <nl> + true <nl> + fi <nl> fi <nl> <nl> return $ ? <nl> diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 <nl> index 321a9ca . . 7b4a632 100644 <nl> - - - a / conf / cassandra - env . ps1 <nl> + + + b / conf / cassandra - env . ps1 <nl> @ @ - 390 , 6 + 390 , 16 @ @ Function SetCassandraEnvironment <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmn $ env : HEAP _ NEWSIZE " <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + HeapDumpOnOutOfMemoryError " <nl> <nl> + # stop the jvm on OutOfMemoryError as it can result in some data corruption <nl> + # uncomment the preferred option <nl> + # ExitOnOutOfMemoryError and CrashOnOutOfMemoryError require a JRE greater or equals to 1 . 7 update 101 or 1 . 8 update 92 <nl> + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + ExitOnOutOfMemoryError " <nl> + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + CrashOnOutOfMemoryError " <nl> + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : OnOutOfMemoryError = " " taskkill / F / PID % p " " " <nl> + <nl> + # print an heap histogram on OutOfMemoryError <nl> + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcassandra . printHeapHistogramOnOutOfMemoryError = true " <nl> + <nl> # Per - thread stack size . <nl> $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xss256k " <nl> <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index b519b76 . . 7b1b8d3 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 204 , 6 + 204 , 18 @ @ fi <nl> <nl> startswith ( ) { [ " $ { 1 # $ 2 } " ! = " $ 1 " ] ; } <nl> <nl> + # stop the jvm on OutOfMemoryError as it can result in some data corruption <nl> + # uncomment the preferred option <nl> + # For OnOutOfMemoryError we cannot use the JVM _ OPTS variables because bash commands split words <nl> + # on white spaces without taking quotes into account <nl> + # ExitOnOutOfMemoryError and CrashOnOutOfMemoryError require a JRE greater or equals to 1 . 7 update 101 or 1 . 8 update 92 <nl> + # JVM _ OPTS = " $ JVM _ OPTS - XX : + ExitOnOutOfMemoryError " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - XX : + CrashOnOutOfMemoryError " <nl> + JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT = " - XX : OnOutOfMemoryError = kill - 9 % p " <nl> + <nl> + # print an heap histogram on OutOfMemoryError <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Dcassandra . printHeapHistogramOnOutOfMemoryError = true " <nl> + <nl> # Per - thread stack size . <nl> JVM _ OPTS = " $ JVM _ OPTS - Xss256k " <nl> <nl> diff - - git a / src / java / org / apache / cassandra / service / StartupChecks . java b / src / java / org / apache / cassandra / service / StartupChecks . java <nl> index 34bc824 . . 7ec16d1 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StartupChecks . java <nl> + + + b / src / java / org / apache / cassandra / service / StartupChecks . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ package org . apache . cassandra . service ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . lang . management . ManagementFactory ; <nl> + import java . lang . management . RuntimeMXBean ; <nl> import java . nio . file . * ; <nl> import java . nio . file . attribute . BasicFileAttributes ; <nl> import java . util . * ; <nl> @ @ - 178 , 6 + 180 , 78 @ @ public class StartupChecks <nl> { <nl> logger . warn ( " Non - Oracle JVM detected . Some features , such as immediate unmap of compacted SSTables , may not work as intended " ) ; <nl> } <nl> + else <nl> + { <nl> + checkOutOfMemoryHandling ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks that the JVM is configured to handle OutOfMemoryError <nl> + * / <nl> + private void checkOutOfMemoryHandling ( ) <nl> + { <nl> + int version = getJavaVersion ( ) ; <nl> + int update = getUpdate ( ) ; <nl> + / / The ExitOnOutOfMemory and CrashOnOutOfMemory are supported since the version 7u101 and 8u92 <nl> + boolean jreSupportExitOnOutOfMemory = version > 8 <nl> + | | ( version = = 7 & & update > = 101 ) <nl> + | | ( version = = 8 & & update > = 92 ) ; <nl> + if ( jreSupportExitOnOutOfMemory ) <nl> + { <nl> + if ( ! jvmOptionsContainsOneOf ( " - XX : OnOutOfMemoryError = " , " - XX : + ExitOnOutOfMemoryError " , " - XX : + CrashOnOutOfMemoryError " ) ) <nl> + logger . warn ( " The JVM is not configured to stop on OutOfMemoryError which can cause data corruption . " <nl> + + " Use one of the following JVM options to configure the behavior on OutOfMemoryError : " <nl> + + " - XX : + ExitOnOutOfMemoryError , - XX : + CrashOnOutOfMemoryError , or - XX : OnOutOfMemoryError = \ " < cmd args > ; < cmd args > \ " " ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( ! jvmOptionsContainsOneOf ( " - XX : OnOutOfMemoryError = " ) ) <nl> + logger . warn ( " The JVM is not configured to stop on OutOfMemoryError which can cause data corruption . " <nl> + + " Either upgrade your JRE to a version greater or equal to 8u92 and use - XX : + ExitOnOutOfMemoryError / - XX : + CrashOnOutOfMemoryError " <nl> + + " or use - XX : OnOutOfMemoryError = \ " < cmd args > ; < cmd args > \ " on your current JRE . " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Returns the java version number for an Oracle JVM . <nl> + * @ return the java version number <nl> + * / <nl> + private int getJavaVersion ( ) <nl> + { <nl> + String jreVersion = System . getProperty ( " java . version " ) ; <nl> + String version = jreVersion . startsWith ( " 1 . " ) ? jreVersion . substring ( 2 , 3 ) / / Pre 9 version <nl> + : jreVersion . substring ( 0 , jreVersion . indexOf ( ' . ' ) ) ; <nl> + return Integer . parseInt ( version ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Return the update number for an Oracle JVM . <nl> + * @ return the update number <nl> + * / <nl> + private int getUpdate ( ) <nl> + { <nl> + String jreVersion = System . getProperty ( " java . version " ) ; <nl> + int updateSeparatorIndex = jreVersion . indexOf ( ' _ ' ) ; <nl> + return Integer . parseInt ( jreVersion . substring ( updateSeparatorIndex + 1 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if one of the specified options is being used . <nl> + * @ param optionNames The name of the options to check <nl> + * @ return { @ code true } if one of the specified options is being used , { @ code false } otherwise . <nl> + * / <nl> + private boolean jvmOptionsContainsOneOf ( String . . . optionNames ) <nl> + { <nl> + RuntimeMXBean runtimeMxBean = ManagementFactory . getRuntimeMXBean ( ) ; <nl> + List < String > inputArguments = runtimeMxBean . getInputArguments ( ) ; <nl> + for ( String argument : inputArguments ) <nl> + { <nl> + for ( String optionName : optionNames ) <nl> + if ( argument . startsWith ( optionName ) ) <nl> + return true ; <nl> + } <nl> + return false ; <nl> } <nl> } ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / HeapUtils . java b / src / java / org / apache / cassandra / utils / HeapUtils . java <nl> index bfc8a0b . . 2d068de 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / HeapUtils . java <nl> + + + b / src / java / org / apache / cassandra / utils / HeapUtils . java <nl> @ @ - 19 , 11 + 19 , 6 @ @ package org . apache . cassandra . utils ; <nl> <nl> import java . io . * ; <nl> import java . lang . management . ManagementFactory ; <nl> - import java . lang . management . RuntimeMXBean ; <nl> - import java . nio . file . FileSystems ; <nl> - import java . nio . file . Files ; <nl> - import java . nio . file . Path ; <nl> - import java . util . List ; <nl> <nl> import org . apache . commons . lang3 . ArrayUtils ; <nl> import org . apache . commons . lang3 . text . StrBuilder ; <nl> @ @ - 32 , 7 + 27 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> / * * <nl> - * Utility to generate heap dumps . <nl> + * Utility to log heap histogram . <nl> * <nl> * / <nl> public final class HeapUtils <nl> @ @ - 43 , 54 + 38 , 33 @ @ public final class HeapUtils <nl> * Generates a HEAP dump in the directory specified by the < code > HeapDumpPath < / code > JVM option <nl> * or in the < code > CASSANDRA _ HOME < / code > directory . <nl> * / <nl> - public static void generateHeapDump ( ) <nl> + public static void logHeapHistogram ( ) <nl> { <nl> - Long processId = getProcessId ( ) ; <nl> - if ( processId = = null ) <nl> + try <nl> { <nl> - logger . error ( " The process ID could not be retrieved . Skipping heap dump generation . " ) ; <nl> - return ; <nl> - } <nl> + logger . info ( " Trying to log the heap histogram using jmap " ) ; <nl> <nl> - String heapDumpPath = getHeapDumpPathOption ( ) ; <nl> - if ( heapDumpPath = = null ) <nl> - { <nl> - String cassandraHome = System . getenv ( " CASSANDRA _ HOME " ) ; <nl> - if ( cassandraHome = = null ) <nl> + Long processId = getProcessId ( ) ; <nl> + if ( processId = = null ) <nl> { <nl> + logger . error ( " The process ID could not be retrieved . Skipping heap histogram generation . " ) ; <nl> return ; <nl> } <nl> <nl> - heapDumpPath = cassandraHome ; <nl> - } <nl> + String jmapPath = getJmapPath ( ) ; <nl> <nl> - Path dumpPath = FileSystems . getDefault ( ) . getPath ( heapDumpPath ) ; <nl> - if ( Files . isDirectory ( dumpPath ) ) <nl> - { <nl> - dumpPath = dumpPath . resolve ( " java _ pid " + processId + " . hprof " ) ; <nl> - } <nl> + / / The jmap file could not be found . In this case let ' s default to jmap in the hope that it is in the path . <nl> + String jmapCommand = jmapPath = = null ? " jmap " : jmapPath ; <nl> <nl> - String jmapPath = getJmapPath ( ) ; <nl> + String [ ] histoCommands = new String [ ] { jmapCommand , <nl> + " - histo " , <nl> + processId . toString ( ) } ; <nl> <nl> - / / The jmap file could not be found . In this case let ' s default to jmap in the hope that it is in the path . <nl> - String jmapCommand = jmapPath = = null ? " jmap " : jmapPath ; <nl> - <nl> - String [ ] dumpCommands = new String [ ] { jmapCommand , <nl> - " - dump : format = b , file = " + dumpPath , <nl> - processId . toString ( ) } ; <nl> - <nl> - / / Lets also log the Heap histogram <nl> - String [ ] histoCommands = new String [ ] { jmapCommand , <nl> - " - histo " , <nl> - processId . toString ( ) } ; <nl> - try <nl> - { <nl> - logProcessOutput ( Runtime . getRuntime ( ) . exec ( dumpCommands ) ) ; <nl> logProcessOutput ( Runtime . getRuntime ( ) . exec ( histoCommands ) ) ; <nl> } <nl> - catch ( IOException e ) <nl> + catch ( Throwable e ) <nl> { <nl> - logger . error ( " The heap dump could not be generated due to the following error : " , e ) ; <nl> + logger . error ( " The heap histogram could not be generated due to the following error : " , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 137 , 32 + 111 , 6 @ @ public final class HeapUtils <nl> } <nl> <nl> / * * <nl> - * Retrieves the value of the < code > HeapDumpPath < / code > JVM option . <nl> - * @ return the value of the < code > HeapDumpPath < / code > JVM option or < code > null < / code > if the value has not been <nl> - * specified . <nl> - * / <nl> - private static String getHeapDumpPathOption ( ) <nl> - { <nl> - RuntimeMXBean runtimeMxBean = ManagementFactory . getRuntimeMXBean ( ) ; <nl> - List < String > inputArguments = runtimeMxBean . getInputArguments ( ) ; <nl> - String heapDumpPathOption = null ; <nl> - for ( String argument : inputArguments ) <nl> - { <nl> - if ( argument . startsWith ( " - XX : HeapDumpPath = " ) ) <nl> - { <nl> - heapDumpPathOption = argument ; <nl> - / / We do not break in case the option has been specified several times . <nl> - / / In general it seems that JVMs use the right - most argument as the winner . <nl> - } <nl> - } <nl> - <nl> - if ( heapDumpPathOption = = null ) <nl> - return null ; <nl> - <nl> - return heapDumpPathOption . substring ( 17 , heapDumpPathOption . length ( ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Retrieves the process ID or < code > null < / code > if the process ID cannot be retrieved . <nl> * @ return the process ID or < code > null < / code > if the process ID cannot be retrieved . <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java b / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java <nl> index f8cb775 . . 0196b04 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java <nl> + + + b / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . FileNotFoundException ; <nl> import java . net . SocketException ; <nl> <nl> import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 38 , 6 + 39 , 8 @ @ public final class JVMStabilityInspector <nl> private static final Logger logger = LoggerFactory . getLogger ( JVMStabilityInspector . class ) ; <nl> private static Killer killer = new Killer ( ) ; <nl> <nl> + private static Object lock = new Object ( ) ; <nl> + private static boolean printingHeapHistogram ; <nl> <nl> private JVMStabilityInspector ( ) { } <nl> <nl> @ @ - 52 , 8 + 55 , 25 @ @ public final class JVMStabilityInspector <nl> boolean isUnstable = false ; <nl> if ( t instanceof OutOfMemoryError ) <nl> { <nl> - isUnstable = true ; <nl> - HeapUtils . generateHeapDump ( ) ; <nl> + if ( Boolean . getBoolean ( " cassandra . printHeapHistogramOnOutOfMemoryError " ) ) <nl> + { <nl> + / / We want to avoid printing multiple time the heap histogram if multiple OOM errors happen in a short <nl> + / / time span . <nl> + synchronized ( lock ) <nl> + { <nl> + if ( printingHeapHistogram ) <nl> + return ; <nl> + printingHeapHistogram = true ; <nl> + } <nl> + HeapUtils . logHeapHistogram ( ) ; <nl> + } <nl> + <nl> + logger . error ( " OutOfMemory error letting the JVM handle the error : " , t ) ; <nl> + <nl> + StorageService . instance . removeShutdownHook ( ) ; <nl> + / / We let the JVM handle the error . The startup checks should have warned the user if it did not configure <nl> + / / the JVM behavior in case of OOM ( CASSANDRA - 13006 ) . <nl> + throw ( OutOfMemoryError ) t ; <nl> } <nl> <nl> if ( DatabaseDescriptor . getDiskFailurePolicy ( ) = = Config . DiskFailurePolicy . die ) <nl> diff - - git a / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java b / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java <nl> index 7142f97 . . f96ac6e 100644 <nl> - - - a / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java <nl> + + + b / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java <nl> @ @ - 20 , 14 + 20 , 19 @ @ package org . apache . cassandra . utils ; <nl> import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . io . FSReadError ; <nl> + <nl> + import static java . util . Arrays . asList ; <nl> + <nl> import org . junit . Test ; <nl> <nl> import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . net . SocketException ; <nl> + import java . util . Arrays ; <nl> <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . fail ; <nl> <nl> public class JVMStabilityInspectorTest <nl> { <nl> @ @ - 45 , 10 + 50 , 6 @ @ public class JVMStabilityInspectorTest <nl> JVMStabilityInspector . inspectThrowable ( new IOException ( ) ) ; <nl> assertFalse ( killerForTests . wasKilled ( ) ) ; <nl> <nl> - killerForTests . reset ( ) ; <nl> - JVMStabilityInspector . inspectThrowable ( new OutOfMemoryError ( ) ) ; <nl> - assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> - <nl> DatabaseDescriptor . setDiskFailurePolicy ( Config . DiskFailurePolicy . die ) ; <nl> killerForTests . reset ( ) ; <nl> JVMStabilityInspector . inspectThrowable ( new FSReadError ( new IOException ( ) , " blah " ) ) ; <nl> @ @ - 62 , 11 + 63 , 6 @ @ public class JVMStabilityInspectorTest <nl> killerForTests . reset ( ) ; <nl> JVMStabilityInspector . inspectThrowable ( new Exception ( new IOException ( ) ) ) ; <nl> assertFalse ( killerForTests . wasKilled ( ) ) ; <nl> - <nl> - killerForTests . reset ( ) ; <nl> - JVMStabilityInspector . inspectThrowable ( new Exception ( new OutOfMemoryError ( ) ) ) ; <nl> - assertTrue ( killerForTests . wasKilled ( ) ) ; <nl> - <nl> } <nl> finally <nl> { <nl> @ @ - 77 , 6 + 73 , 23 @ @ public class JVMStabilityInspectorTest <nl> } <nl> <nl> @ Test <nl> + public void testOutOfMemoryHandling ( ) <nl> + { <nl> + for ( Throwable oom : asList ( new OutOfMemoryError ( ) , new Exception ( new OutOfMemoryError ( ) ) ) ) <nl> + { <nl> + try <nl> + { <nl> + JVMStabilityInspector . inspectThrowable ( oom ) ; <nl> + fail ( " The JVMStabilityInspector should delegate the handling of OutOfMemoryErrors to the JVM " ) ; <nl> + } <nl> + catch ( OutOfMemoryError e ) <nl> + { <nl> + assertTrue ( true ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Test <nl> public void fileHandleTest ( ) <nl> { <nl> KillerForTests killerForTests = new KillerForTests ( ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c1e81fd . . 5200eb1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 12 
 + * Rely on the JVM to handle OutOfMemoryErrors ( CASSANDRA - 13006 ) 
 * Grab refs during scrub / index redistribution / cleanup ( CASSANDRA - 13873 ) 
 
 2 . 2 . 11 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 3bff458 . . 5747941 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 18 , 8 + 18 , 13 @ @ using the provided ' sstableupgrade ' tool . 
 
 Upgrading 
 - - - - - - - - - 
 - - Nothing specific to this release , but please see 2 . 2 if you are upgrading 
 - from a previous version . 
 + - Cassandra is now relying on the JVM options to properly shutdown on OutOfMemoryError . By default it will 
 + rely on the OnOutOfMemoryError option as the ExitOnOutOfMemoryError and CrashOnOutOfMemoryError options 
 + are not supported by the older 1 . 7 and 1 . 8 JVMs . A warning will be logged at startup if none of those JVM 
 + options are used . See CASSANDRA - 13006 for more details . 
 + - Cassandra is not logging anymore by default an Heap histogram on OutOfMemoryError . To enable that behavior 
 + set the ' cassandra . printHeapHistogramOnOutOfMemoryError ' System property to ' true ' . See CASSANDRA - 13006 
 + for more details . 
 
 2 . 2 . 11 
 = = = = = = 
 diff - - git a / bin / cassandra b / bin / cassandra 
 index 2dd0fe1 . . 0e337e8 100755 
 - - - a / bin / cassandra 
 + + + b / bin / cassandra 
 @ @ - 28 , 6 + 28 , 7 @ @ 
 # 
 # CLASSPATH - - A Java classpath containing everything necessary to run . 
 # JVM _ OPTS - - Additional arguments to the JVM for heap size , etc 
 + # JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT - - The OnOutOfMemoryError JVM option if specified 
 # CASSANDRA _ CONF - - Directory containing Cassandra configuration files . 
 # 
 # As a convenience , a fragment of shell is sourced in order to set one or 
 @ @ - 199 , 12 + 200 , 22 @ @ launch _ service ( ) 
 # to close stdout / stderr , but it ' s up to us not to background . 
 if [ " x $ foreground " ! = " x " ] ; then 
 cassandra _ parms = " $ cassandra _ parms - Dcassandra - foreground = yes " 
 - exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " 
 + if [ " x $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " ! = " x " ] ; then 
 + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS " $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " 
 + else 
 + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " 
 + fi 
 # Startup CassandraDaemon , background it , and write the pid . 
 else 
 - exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & 
 - [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " 
 - true 
 + if [ " x $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " ! = " x " ] ; then 
 + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS " $ JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT " $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & 
 + [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " 
 + true 
 + else 
 + exec $ NUMACTL " $ JAVA " $ JVM _ OPTS $ cassandra _ parms - cp " $ CLASSPATH " $ props " $ class " < & - & 
 + [ ! - z " $ pidpath " ] & & printf " % d " $ ! > " $ pidpath " 
 + true 
 + fi 
 fi 
 
 return $ ? 
 diff - - git a / conf / cassandra - env . ps1 b / conf / cassandra - env . ps1 
 index 321a9ca . . 7b4a632 100644 
 - - - a / conf / cassandra - env . ps1 
 + + + b / conf / cassandra - env . ps1 
 @ @ - 390 , 6 + 390 , 16 @ @ Function SetCassandraEnvironment 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xmn $ env : HEAP _ NEWSIZE " 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + HeapDumpOnOutOfMemoryError " 
 
 + # stop the jvm on OutOfMemoryError as it can result in some data corruption 
 + # uncomment the preferred option 
 + # ExitOnOutOfMemoryError and CrashOnOutOfMemoryError require a JRE greater or equals to 1 . 7 update 101 or 1 . 8 update 92 
 + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + ExitOnOutOfMemoryError " 
 + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : + CrashOnOutOfMemoryError " 
 + $ env : JVM _ OPTS = " $ env : JVM _ OPTS - XX : OnOutOfMemoryError = " " taskkill / F / PID % p " " " 
 + 
 + # print an heap histogram on OutOfMemoryError 
 + # $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Dcassandra . printHeapHistogramOnOutOfMemoryError = true " 
 + 
 # Per - thread stack size . 
 $ env : JVM _ OPTS = " $ env : JVM _ OPTS - Xss256k " 
 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index b519b76 . . 7b1b8d3 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 204 , 6 + 204 , 18 @ @ fi 
 
 startswith ( ) { [ " $ { 1 # $ 2 } " ! = " $ 1 " ] ; } 
 
 + # stop the jvm on OutOfMemoryError as it can result in some data corruption 
 + # uncomment the preferred option 
 + # For OnOutOfMemoryError we cannot use the JVM _ OPTS variables because bash commands split words 
 + # on white spaces without taking quotes into account 
 + # ExitOnOutOfMemoryError and CrashOnOutOfMemoryError require a JRE greater or equals to 1 . 7 update 101 or 1 . 8 update 92 
 + # JVM _ OPTS = " $ JVM _ OPTS - XX : + ExitOnOutOfMemoryError " 
 + # JVM _ OPTS = " $ JVM _ OPTS - XX : + CrashOnOutOfMemoryError " 
 + JVM _ ON _ OUT _ OF _ MEMORY _ ERROR _ OPT = " - XX : OnOutOfMemoryError = kill - 9 % p " 
 + 
 + # print an heap histogram on OutOfMemoryError 
 + # JVM _ OPTS = " $ JVM _ OPTS - Dcassandra . printHeapHistogramOnOutOfMemoryError = true " 
 + 
 # Per - thread stack size . 
 JVM _ OPTS = " $ JVM _ OPTS - Xss256k " 
 
 diff - - git a / src / java / org / apache / cassandra / service / StartupChecks . java b / src / java / org / apache / cassandra / service / StartupChecks . java 
 index 34bc824 . . 7ec16d1 100644 
 - - - a / src / java / org / apache / cassandra / service / StartupChecks . java 
 + + + b / src / java / org / apache / cassandra / service / StartupChecks . java 
 @ @ - 19 , 6 + 19 , 8 @ @ package org . apache . cassandra . service ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . lang . management . ManagementFactory ; 
 + import java . lang . management . RuntimeMXBean ; 
 import java . nio . file . * ; 
 import java . nio . file . attribute . BasicFileAttributes ; 
 import java . util . * ; 
 @ @ - 178 , 6 + 180 , 78 @ @ public class StartupChecks 
 { 
 logger . warn ( " Non - Oracle JVM detected . Some features , such as immediate unmap of compacted SSTables , may not work as intended " ) ; 
 } 
 + else 
 + { 
 + checkOutOfMemoryHandling ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks that the JVM is configured to handle OutOfMemoryError 
 + * / 
 + private void checkOutOfMemoryHandling ( ) 
 + { 
 + int version = getJavaVersion ( ) ; 
 + int update = getUpdate ( ) ; 
 + / / The ExitOnOutOfMemory and CrashOnOutOfMemory are supported since the version 7u101 and 8u92 
 + boolean jreSupportExitOnOutOfMemory = version > 8 
 + | | ( version = = 7 & & update > = 101 ) 
 + | | ( version = = 8 & & update > = 92 ) ; 
 + if ( jreSupportExitOnOutOfMemory ) 
 + { 
 + if ( ! jvmOptionsContainsOneOf ( " - XX : OnOutOfMemoryError = " , " - XX : + ExitOnOutOfMemoryError " , " - XX : + CrashOnOutOfMemoryError " ) ) 
 + logger . warn ( " The JVM is not configured to stop on OutOfMemoryError which can cause data corruption . " 
 + + " Use one of the following JVM options to configure the behavior on OutOfMemoryError : " 
 + + " - XX : + ExitOnOutOfMemoryError , - XX : + CrashOnOutOfMemoryError , or - XX : OnOutOfMemoryError = \ " < cmd args > ; < cmd args > \ " " ) ; 
 + } 
 + else 
 + { 
 + if ( ! jvmOptionsContainsOneOf ( " - XX : OnOutOfMemoryError = " ) ) 
 + logger . warn ( " The JVM is not configured to stop on OutOfMemoryError which can cause data corruption . " 
 + + " Either upgrade your JRE to a version greater or equal to 8u92 and use - XX : + ExitOnOutOfMemoryError / - XX : + CrashOnOutOfMemoryError " 
 + + " or use - XX : OnOutOfMemoryError = \ " < cmd args > ; < cmd args > \ " on your current JRE . " ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Returns the java version number for an Oracle JVM . 
 + * @ return the java version number 
 + * / 
 + private int getJavaVersion ( ) 
 + { 
 + String jreVersion = System . getProperty ( " java . version " ) ; 
 + String version = jreVersion . startsWith ( " 1 . " ) ? jreVersion . substring ( 2 , 3 ) / / Pre 9 version 
 + : jreVersion . substring ( 0 , jreVersion . indexOf ( ' . ' ) ) ; 
 + return Integer . parseInt ( version ) ; 
 + } 
 + 
 + / * * 
 + * Return the update number for an Oracle JVM . 
 + * @ return the update number 
 + * / 
 + private int getUpdate ( ) 
 + { 
 + String jreVersion = System . getProperty ( " java . version " ) ; 
 + int updateSeparatorIndex = jreVersion . indexOf ( ' _ ' ) ; 
 + return Integer . parseInt ( jreVersion . substring ( updateSeparatorIndex + 1 ) ) ; 
 + } 
 + 
 + / * * 
 + * Checks if one of the specified options is being used . 
 + * @ param optionNames The name of the options to check 
 + * @ return { @ code true } if one of the specified options is being used , { @ code false } otherwise . 
 + * / 
 + private boolean jvmOptionsContainsOneOf ( String . . . optionNames ) 
 + { 
 + RuntimeMXBean runtimeMxBean = ManagementFactory . getRuntimeMXBean ( ) ; 
 + List < String > inputArguments = runtimeMxBean . getInputArguments ( ) ; 
 + for ( String argument : inputArguments ) 
 + { 
 + for ( String optionName : optionNames ) 
 + if ( argument . startsWith ( optionName ) ) 
 + return true ; 
 + } 
 + return false ; 
 } 
 } ; 
 
 diff - - git a / src / java / org / apache / cassandra / utils / HeapUtils . java b / src / java / org / apache / cassandra / utils / HeapUtils . java 
 index bfc8a0b . . 2d068de 100644 
 - - - a / src / java / org / apache / cassandra / utils / HeapUtils . java 
 + + + b / src / java / org / apache / cassandra / utils / HeapUtils . java 
 @ @ - 19 , 11 + 19 , 6 @ @ package org . apache . cassandra . utils ; 
 
 import java . io . * ; 
 import java . lang . management . ManagementFactory ; 
 - import java . lang . management . RuntimeMXBean ; 
 - import java . nio . file . FileSystems ; 
 - import java . nio . file . Files ; 
 - import java . nio . file . Path ; 
 - import java . util . List ; 
 
 import org . apache . commons . lang3 . ArrayUtils ; 
 import org . apache . commons . lang3 . text . StrBuilder ; 
 @ @ - 32 , 7 + 27 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 / * * 
 - * Utility to generate heap dumps . 
 + * Utility to log heap histogram . 
 * 
 * / 
 public final class HeapUtils 
 @ @ - 43 , 54 + 38 , 33 @ @ public final class HeapUtils 
 * Generates a HEAP dump in the directory specified by the < code > HeapDumpPath < / code > JVM option 
 * or in the < code > CASSANDRA _ HOME < / code > directory . 
 * / 
 - public static void generateHeapDump ( ) 
 + public static void logHeapHistogram ( ) 
 { 
 - Long processId = getProcessId ( ) ; 
 - if ( processId = = null ) 
 + try 
 { 
 - logger . error ( " The process ID could not be retrieved . Skipping heap dump generation . " ) ; 
 - return ; 
 - } 
 + logger . info ( " Trying to log the heap histogram using jmap " ) ; 
 
 - String heapDumpPath = getHeapDumpPathOption ( ) ; 
 - if ( heapDumpPath = = null ) 
 - { 
 - String cassandraHome = System . getenv ( " CASSANDRA _ HOME " ) ; 
 - if ( cassandraHome = = null ) 
 + Long processId = getProcessId ( ) ; 
 + if ( processId = = null ) 
 { 
 + logger . error ( " The process ID could not be retrieved . Skipping heap histogram generation . " ) ; 
 return ; 
 } 
 
 - heapDumpPath = cassandraHome ; 
 - } 
 + String jmapPath = getJmapPath ( ) ; 
 
 - Path dumpPath = FileSystems . getDefault ( ) . getPath ( heapDumpPath ) ; 
 - if ( Files . isDirectory ( dumpPath ) ) 
 - { 
 - dumpPath = dumpPath . resolve ( " java _ pid " + processId + " . hprof " ) ; 
 - } 
 + / / The jmap file could not be found . In this case let ' s default to jmap in the hope that it is in the path . 
 + String jmapCommand = jmapPath = = null ? " jmap " : jmapPath ; 
 
 - String jmapPath = getJmapPath ( ) ; 
 + String [ ] histoCommands = new String [ ] { jmapCommand , 
 + " - histo " , 
 + processId . toString ( ) } ; 
 
 - / / The jmap file could not be found . In this case let ' s default to jmap in the hope that it is in the path . 
 - String jmapCommand = jmapPath = = null ? " jmap " : jmapPath ; 
 - 
 - String [ ] dumpCommands = new String [ ] { jmapCommand , 
 - " - dump : format = b , file = " + dumpPath , 
 - processId . toString ( ) } ; 
 - 
 - / / Lets also log the Heap histogram 
 - String [ ] histoCommands = new String [ ] { jmapCommand , 
 - " - histo " , 
 - processId . toString ( ) } ; 
 - try 
 - { 
 - logProcessOutput ( Runtime . getRuntime ( ) . exec ( dumpCommands ) ) ; 
 logProcessOutput ( Runtime . getRuntime ( ) . exec ( histoCommands ) ) ; 
 } 
 - catch ( IOException e ) 
 + catch ( Throwable e ) 
 { 
 - logger . error ( " The heap dump could not be generated due to the following error : " , e ) ; 
 + logger . error ( " The heap histogram could not be generated due to the following error : " , e ) ; 
 } 
 } 
 
 @ @ - 137 , 32 + 111 , 6 @ @ public final class HeapUtils 
 } 
 
 / * * 
 - * Retrieves the value of the < code > HeapDumpPath < / code > JVM option . 
 - * @ return the value of the < code > HeapDumpPath < / code > JVM option or < code > null < / code > if the value has not been 
 - * specified . 
 - * / 
 - private static String getHeapDumpPathOption ( ) 
 - { 
 - RuntimeMXBean runtimeMxBean = ManagementFactory . getRuntimeMXBean ( ) ; 
 - List < String > inputArguments = runtimeMxBean . getInputArguments ( ) ; 
 - String heapDumpPathOption = null ; 
 - for ( String argument : inputArguments ) 
 - { 
 - if ( argument . startsWith ( " - XX : HeapDumpPath = " ) ) 
 - { 
 - heapDumpPathOption = argument ; 
 - / / We do not break in case the option has been specified several times . 
 - / / In general it seems that JVMs use the right - most argument as the winner . 
 - } 
 - } 
 - 
 - if ( heapDumpPathOption = = null ) 
 - return null ; 
 - 
 - return heapDumpPathOption . substring ( 17 , heapDumpPathOption . length ( ) ) ; 
 - } 
 - 
 - / * * 
 * Retrieves the process ID or < code > null < / code > if the process ID cannot be retrieved . 
 * @ return the process ID or < code > null < / code > if the process ID cannot be retrieved . 
 * / 
 diff - - git a / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java b / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java 
 index f8cb775 . . 0196b04 100644 
 - - - a / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java 
 + + + b / src / java / org / apache / cassandra / utils / JVMStabilityInspector . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . FileNotFoundException ; 
 import java . net . SocketException ; 
 
 import com . google . common . annotations . VisibleForTesting ; 
 + 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 38 , 6 + 39 , 8 @ @ public final class JVMStabilityInspector 
 private static final Logger logger = LoggerFactory . getLogger ( JVMStabilityInspector . class ) ; 
 private static Killer killer = new Killer ( ) ; 
 
 + private static Object lock = new Object ( ) ; 
 + private static boolean printingHeapHistogram ; 
 
 private JVMStabilityInspector ( ) { } 
 
 @ @ - 52 , 8 + 55 , 25 @ @ public final class JVMStabilityInspector 
 boolean isUnstable = false ; 
 if ( t instanceof OutOfMemoryError ) 
 { 
 - isUnstable = true ; 
 - HeapUtils . generateHeapDump ( ) ; 
 + if ( Boolean . getBoolean ( " cassandra . printHeapHistogramOnOutOfMemoryError " ) ) 
 + { 
 + / / We want to avoid printing multiple time the heap histogram if multiple OOM errors happen in a short 
 + / / time span . 
 + synchronized ( lock ) 
 + { 
 + if ( printingHeapHistogram ) 
 + return ; 
 + printingHeapHistogram = true ; 
 + } 
 + HeapUtils . logHeapHistogram ( ) ; 
 + } 
 + 
 + logger . error ( " OutOfMemory error letting the JVM handle the error : " , t ) ; 
 + 
 + StorageService . instance . removeShutdownHook ( ) ; 
 + / / We let the JVM handle the error . The startup checks should have warned the user if it did not configure 
 + / / the JVM behavior in case of OOM ( CASSANDRA - 13006 ) . 
 + throw ( OutOfMemoryError ) t ; 
 } 
 
 if ( DatabaseDescriptor . getDiskFailurePolicy ( ) = = Config . DiskFailurePolicy . die ) 
 diff - - git a / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java b / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java 
 index 7142f97 . . f96ac6e 100644 
 - - - a / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java 
 + + + b / test / unit / org / apache / cassandra / utils / JVMStabilityInspectorTest . java 
 @ @ - 20 , 14 + 20 , 19 @ @ package org . apache . cassandra . utils ; 
 import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . io . FSReadError ; 
 + 
 + import static java . util . Arrays . asList ; 
 + 
 import org . junit . Test ; 
 
 import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 import java . net . SocketException ; 
 + import java . util . Arrays ; 
 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . fail ; 
 
 public class JVMStabilityInspectorTest 
 { 
 @ @ - 45 , 10 + 50 , 6 @ @ public class JVMStabilityInspectorTest 
 JVMStabilityInspector . inspectThrowable ( new IOException ( ) ) ; 
 assertFalse ( killerForTests . wasKilled ( ) ) ; 
 
 - killerForTests . reset ( ) ; 
 - JVMStabilityInspector . inspectThrowable ( new OutOfMemoryError ( ) ) ; 
 - assertTrue ( killerForTests . wasKilled ( ) ) ; 
 - 
 DatabaseDescriptor . setDiskFailurePolicy ( Config . DiskFailurePolicy . die ) ; 
 killerForTests . reset ( ) ; 
 JVMStabilityInspector . inspectThrowable ( new FSReadError ( new IOException ( ) , " blah " ) ) ; 
 @ @ - 62 , 11 + 63 , 6 @ @ public class JVMStabilityInspectorTest 
 killerForTests . reset ( ) ; 
 JVMStabilityInspector . inspectThrowable ( new Exception ( new IOException ( ) ) ) ; 
 assertFalse ( killerForTests . wasKilled ( ) ) ; 
 - 
 - killerForTests . reset ( ) ; 
 - JVMStabilityInspector . inspectThrowable ( new Exception ( new OutOfMemoryError ( ) ) ) ; 
 - assertTrue ( killerForTests . wasKilled ( ) ) ; 
 - 
 } 
 finally 
 { 
 @ @ - 77 , 6 + 73 , 23 @ @ public class JVMStabilityInspectorTest 
 } 
 
 @ Test 
 + public void testOutOfMemoryHandling ( ) 
 + { 
 + for ( Throwable oom : asList ( new OutOfMemoryError ( ) , new Exception ( new OutOfMemoryError ( ) ) ) ) 
 + { 
 + try 
 + { 
 + JVMStabilityInspector . inspectThrowable ( oom ) ; 
 + fail ( " The JVMStabilityInspector should delegate the handling of OutOfMemoryErrors to the JVM " ) ; 
 + } 
 + catch ( OutOfMemoryError e ) 
 + { 
 + assertTrue ( true ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Test 
 public void fileHandleTest ( ) 
 { 
 KillerForTests killerForTests = new KillerForTests ( ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
