BLEU SCORE: 0.08310415003234632

TEST MSG: remove dead parms
GENERATED MSG: Fix detected leaks in unit tests

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> index 971e8f2 . . 4031304 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java <nl> @ @ - 427 , 7 + 427 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> : new BufferedSegmentedFile . Builder ( ) ) <nl> { <nl> if ( ! sstable . loadSummary ( ibuilder , dbuilder ) ) <nl> - sstable . buildSummary ( false , ibuilder , dbuilder , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> + sstable . buildSummary ( false , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> sstable . ifile = ibuilder . buildIndex ( sstable . descriptor , sstable . indexSummary ) ; <nl> sstable . dfile = dbuilder . buildData ( sstable . descriptor , statsMetadata ) ; <nl> sstable . bf = FilterFactory . AlwaysPresent ; <nl> @ @ - 726 , 7 + 726 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> boolean builtSummary = false ; <nl> if ( recreateBloomFilter | | ! summaryLoaded ) <nl> { <nl> - buildSummary ( recreateBloomFilter , ibuilder , dbuilder , summaryLoaded , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> + buildSummary ( recreateBloomFilter , summaryLoaded , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> builtSummary = true ; <nl> } <nl> <nl> @ @ - 749 , 7 + 749 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> try ( SegmentedFile . Builder ibuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; <nl> SegmentedFile . Builder dbuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) <nl> { <nl> - buildSummary ( false , ibuilderRebuild , dbuilderRebuild , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> + buildSummary ( false , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; <nl> ifile = ibuilderRebuild . buildIndex ( descriptor , indexSummary ) ; <nl> dfile = dbuilderRebuild . buildData ( descriptor , sstableMetadata ) ; <nl> saveSummary ( ibuilderRebuild , dbuilderRebuild ) ; <nl> @ @ - 788 , 12 + 788 , 10 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS <nl> * Build index summary ( and optionally bloom filter ) by reading through Index . db file . <nl> * <nl> * @ param recreateBloomFilter true if recreate bloom filter <nl> - * @ param ibuilder <nl> - * @ param dbuilder <nl> * @ param summaryLoaded true if index summary is already loaded and not need to build again <nl> * @ throws IOException <nl> * / <nl> - private void buildSummary ( boolean recreateBloomFilter , SegmentedFile . Builder ibuilder , SegmentedFile . Builder dbuilder , boolean summaryLoaded , int samplingLevel ) throws IOException <nl> + private void buildSummary ( boolean recreateBloomFilter , boolean summaryLoaded , int samplingLevel ) throws IOException <nl> { <nl> if ( ! components . contains ( Component . PRIMARY _ INDEX ) ) <nl> return ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 index 971e8f2 . . 4031304 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableReader . java 
 @ @ - 427 , 7 + 427 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 : new BufferedSegmentedFile . Builder ( ) ) 
 { 
 if ( ! sstable . loadSummary ( ibuilder , dbuilder ) ) 
 - sstable . buildSummary ( false , ibuilder , dbuilder , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 + sstable . buildSummary ( false , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 sstable . ifile = ibuilder . buildIndex ( sstable . descriptor , sstable . indexSummary ) ; 
 sstable . dfile = dbuilder . buildData ( sstable . descriptor , statsMetadata ) ; 
 sstable . bf = FilterFactory . AlwaysPresent ; 
 @ @ - 726 , 7 + 726 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 boolean builtSummary = false ; 
 if ( recreateBloomFilter | | ! summaryLoaded ) 
 { 
 - buildSummary ( recreateBloomFilter , ibuilder , dbuilder , summaryLoaded , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 + buildSummary ( recreateBloomFilter , summaryLoaded , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 builtSummary = true ; 
 } 
 
 @ @ - 749 , 7 + 749 , 7 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 try ( SegmentedFile . Builder ibuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getIndexAccessMode ( ) , false ) ; 
 SegmentedFile . Builder dbuilderRebuild = SegmentedFile . getBuilder ( DatabaseDescriptor . getDiskAccessMode ( ) , compression ) ) 
 { 
 - buildSummary ( false , ibuilderRebuild , dbuilderRebuild , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 + buildSummary ( false , false , Downsampling . BASE _ SAMPLING _ LEVEL ) ; 
 ifile = ibuilderRebuild . buildIndex ( descriptor , indexSummary ) ; 
 dfile = dbuilderRebuild . buildData ( descriptor , sstableMetadata ) ; 
 saveSummary ( ibuilderRebuild , dbuilderRebuild ) ; 
 @ @ - 788 , 12 + 788 , 10 @ @ public abstract class SSTableReader extends SSTable implements SelfRefCounted < SS 
 * Build index summary ( and optionally bloom filter ) by reading through Index . db file . 
 * 
 * @ param recreateBloomFilter true if recreate bloom filter 
 - * @ param ibuilder 
 - * @ param dbuilder 
 * @ param summaryLoaded true if index summary is already loaded and not need to build again 
 * @ throws IOException 
 * / 
 - private void buildSummary ( boolean recreateBloomFilter , SegmentedFile . Builder ibuilder , SegmentedFile . Builder dbuilder , boolean summaryLoaded , int samplingLevel ) throws IOException 
 + private void buildSummary ( boolean recreateBloomFilter , boolean summaryLoaded , int samplingLevel ) throws IOException 
 { 
 if ( ! components . contains ( Component . PRIMARY _ INDEX ) ) 
 return ;

NEAREST DIFF:
ELIMINATEDSENTENCE
