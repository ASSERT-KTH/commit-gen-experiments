BLEU SCORE: 0.03283637368030199

TEST MSG: fix test broken by CASSANDRA - 11844
GENERATED MSG: Fix CQLSSTableWriterTest

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> index 877ca11 . . fb1de7c 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> @ @ - 503 , 7 + 503 , 7 @ @ public class CQLSSTableWriterTest <nl> writer . addRow ( 5 , 5 , 5 , " 5 " ) ; <nl> <nl> writer . close ( ) ; <nl> - loadSSTables ( dataDir , KS ) ; <nl> + loadSSTables ( writer . getInnermostDirectory ( ) , KS ) ; <nl> <nl> UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; <nl> Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java <nl> index ea5c2f4 . . 0c8f1d9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Directories . java <nl> + + + b / src / java / org / apache / cassandra / db / Directories . java <nl> @ @ - 88 , 6 + 88 , 80 @ @ public class Directories <nl> dataFileLocations [ i ] = new DataDirectory ( new File ( locations [ i ] ) ) ; <nl> } <nl> <nl> + <nl> + / * * <nl> + * Checks whether Cassandra has RWX permissions to the specified directory . Logs an error with <nl> + * the details if it does not . <nl> + * <nl> + * @ param dir File object of the directory . <nl> + * @ param dataDir String representation of the directory ' s location <nl> + * @ return status representing Cassandra ' s RWX permissions to the supplied folder location . <nl> + * / <nl> + public static boolean verifyFullPermissions ( File dir , String dataDir ) <nl> + { <nl> + if ( ! dir . isDirectory ( ) ) <nl> + { <nl> + logger . error ( " Not a directory { } " , dataDir ) ; <nl> + return false ; <nl> + } <nl> + else if ( ! FileAction . hasPrivilege ( dir , FileAction . X ) ) <nl> + { <nl> + logger . error ( " Doesn ' t have execute permissions for { } directory " , dataDir ) ; <nl> + return false ; <nl> + } <nl> + else if ( ! FileAction . hasPrivilege ( dir , FileAction . R ) ) <nl> + { <nl> + logger . error ( " Doesn ' t have read permissions for { } directory " , dataDir ) ; <nl> + return false ; <nl> + } <nl> + else if ( dir . exists ( ) & & ! FileAction . hasPrivilege ( dir , FileAction . W ) ) <nl> + { <nl> + logger . error ( " Doesn ' t have write permissions for { } directory " , dataDir ) ; <nl> + return false ; <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> + <nl> + public enum FileAction <nl> + { <nl> + X , W , XW , R , XR , RW , XRW ; <nl> + <nl> + private FileAction ( ) <nl> + { <nl> + } <nl> + <nl> + public static boolean hasPrivilege ( File file , FileAction action ) <nl> + { <nl> + boolean privilege = false ; <nl> + <nl> + switch ( action ) { <nl> + case X : <nl> + privilege = file . canExecute ( ) ; <nl> + break ; <nl> + case W : <nl> + privilege = file . canWrite ( ) ; <nl> + break ; <nl> + case XW : <nl> + privilege = file . canExecute ( ) & & file . canWrite ( ) ; <nl> + break ; <nl> + case R : <nl> + privilege = file . canRead ( ) ; <nl> + break ; <nl> + case XR : <nl> + privilege = file . canExecute ( ) & & file . canRead ( ) ; <nl> + break ; <nl> + case RW : <nl> + privilege = file . canRead ( ) & & file . canWrite ( ) ; <nl> + break ; <nl> + case XRW : <nl> + privilege = file . canExecute ( ) & & file . canRead ( ) & & file . canWrite ( ) ; <nl> + break ; <nl> + } <nl> + return privilege ; <nl> + } <nl> + } <nl> + <nl> private final String keyspacename ; <nl> private final String cfname ; <nl> private final File [ ] sstableDirectories ; <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index cb3cc88 . . ffff006 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . MeteredFlusher ; <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> @ @ - 157 , 9 + 158 , 24 @ @ public class CassandraDaemon <nl> { <nl> logger . debug ( " Checking directory { } " , dataDir ) ; <nl> File dir = new File ( dataDir ) ; <nl> - if ( dir . exists ( ) ) <nl> - assert dir . isDirectory ( ) & & dir . canRead ( ) & & dir . canWrite ( ) & & dir . canExecute ( ) <nl> - : String . format ( " Directory % s is not accessible . " , dataDir ) ; <nl> + <nl> + / / check that directories exist . <nl> + if ( ! dir . exists ( ) ) <nl> + { <nl> + logger . error ( " Directory { } doesn ' t exist " , dataDir ) ; <nl> + / / if they don ' t , failing their creation , stop cassandra . <nl> + if ( ! dir . mkdirs ( ) ) <nl> + { <nl> + logger . error ( " Has no permission to create { } directory " , dataDir ) ; <nl> + System . exit ( 3 ) ; <nl> + } <nl> + } <nl> + / / if directories exist verify their permissions <nl> + if ( ! Directories . verifyFullPermissions ( dir , dataDir ) ) <nl> + { <nl> + / / if permissions aren ' t sufficient , stop cassandra . <nl> + System . exit ( 3 ) ; <nl> + } <nl> } <nl> <nl> if ( CacheService . instance = = null ) / / should never happen

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 index 877ca11 . . fb1de7c 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 @ @ - 503 , 7 + 503 , 7 @ @ public class CQLSSTableWriterTest 
 writer . addRow ( 5 , 5 , 5 , " 5 " ) ; 
 
 writer . close ( ) ; 
 - loadSSTables ( dataDir , KS ) ; 
 + loadSSTables ( writer . getInnermostDirectory ( ) , KS ) ; 
 
 UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; 
 Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / Directories . java b / src / java / org / apache / cassandra / db / Directories . java 
 index ea5c2f4 . . 0c8f1d9 100644 
 - - - a / src / java / org / apache / cassandra / db / Directories . java 
 + + + b / src / java / org / apache / cassandra / db / Directories . java 
 @ @ - 88 , 6 + 88 , 80 @ @ public class Directories 
 dataFileLocations [ i ] = new DataDirectory ( new File ( locations [ i ] ) ) ; 
 } 
 
 + 
 + / * * 
 + * Checks whether Cassandra has RWX permissions to the specified directory . Logs an error with 
 + * the details if it does not . 
 + * 
 + * @ param dir File object of the directory . 
 + * @ param dataDir String representation of the directory ' s location 
 + * @ return status representing Cassandra ' s RWX permissions to the supplied folder location . 
 + * / 
 + public static boolean verifyFullPermissions ( File dir , String dataDir ) 
 + { 
 + if ( ! dir . isDirectory ( ) ) 
 + { 
 + logger . error ( " Not a directory { } " , dataDir ) ; 
 + return false ; 
 + } 
 + else if ( ! FileAction . hasPrivilege ( dir , FileAction . X ) ) 
 + { 
 + logger . error ( " Doesn ' t have execute permissions for { } directory " , dataDir ) ; 
 + return false ; 
 + } 
 + else if ( ! FileAction . hasPrivilege ( dir , FileAction . R ) ) 
 + { 
 + logger . error ( " Doesn ' t have read permissions for { } directory " , dataDir ) ; 
 + return false ; 
 + } 
 + else if ( dir . exists ( ) & & ! FileAction . hasPrivilege ( dir , FileAction . W ) ) 
 + { 
 + logger . error ( " Doesn ' t have write permissions for { } directory " , dataDir ) ; 
 + return false ; 
 + } 
 + 
 + return true ; 
 + } 
 + 
 + public enum FileAction 
 + { 
 + X , W , XW , R , XR , RW , XRW ; 
 + 
 + private FileAction ( ) 
 + { 
 + } 
 + 
 + public static boolean hasPrivilege ( File file , FileAction action ) 
 + { 
 + boolean privilege = false ; 
 + 
 + switch ( action ) { 
 + case X : 
 + privilege = file . canExecute ( ) ; 
 + break ; 
 + case W : 
 + privilege = file . canWrite ( ) ; 
 + break ; 
 + case XW : 
 + privilege = file . canExecute ( ) & & file . canWrite ( ) ; 
 + break ; 
 + case R : 
 + privilege = file . canRead ( ) ; 
 + break ; 
 + case XR : 
 + privilege = file . canExecute ( ) & & file . canRead ( ) ; 
 + break ; 
 + case RW : 
 + privilege = file . canRead ( ) & & file . canWrite ( ) ; 
 + break ; 
 + case XRW : 
 + privilege = file . canExecute ( ) & & file . canRead ( ) & & file . canWrite ( ) ; 
 + break ; 
 + } 
 + return privilege ; 
 + } 
 + } 
 + 
 private final String keyspacename ; 
 private final String cfname ; 
 private final File [ ] sstableDirectories ; 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index cb3cc88 . . ffff006 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . MeteredFlusher ; 
 import org . apache . cassandra . db . SystemKeyspace ; 
 @ @ - 157 , 9 + 158 , 24 @ @ public class CassandraDaemon 
 { 
 logger . debug ( " Checking directory { } " , dataDir ) ; 
 File dir = new File ( dataDir ) ; 
 - if ( dir . exists ( ) ) 
 - assert dir . isDirectory ( ) & & dir . canRead ( ) & & dir . canWrite ( ) & & dir . canExecute ( ) 
 - : String . format ( " Directory % s is not accessible . " , dataDir ) ; 
 + 
 + / / check that directories exist . 
 + if ( ! dir . exists ( ) ) 
 + { 
 + logger . error ( " Directory { } doesn ' t exist " , dataDir ) ; 
 + / / if they don ' t , failing their creation , stop cassandra . 
 + if ( ! dir . mkdirs ( ) ) 
 + { 
 + logger . error ( " Has no permission to create { } directory " , dataDir ) ; 
 + System . exit ( 3 ) ; 
 + } 
 + } 
 + / / if directories exist verify their permissions 
 + if ( ! Directories . verifyFullPermissions ( dir , dataDir ) ) 
 + { 
 + / / if permissions aren ' t sufficient , stop cassandra . 
 + System . exit ( 3 ) ; 
 + } 
 } 
 
 if ( CacheService . instance = = null ) / / should never happen
