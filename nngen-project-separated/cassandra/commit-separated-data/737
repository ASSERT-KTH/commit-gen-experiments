BLEU SCORE: 0.026757454896417534

TEST MSG: fail fast if the system property ' legacy - sstable - root ' is not set properly
GENERATED MSG: implement a legacy sstable test . Patch by Stu Hood , reviewed by Gary Dusbabek . CASSANDRA - 767

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> index 9a37f66 . . cc2011f 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 90 , 6 + 90 , 12 @ @ public class LegacySSTableTest <nl> @ BeforeClass <nl> public static void defineSchema ( ) throws ConfigurationException <nl> { <nl> + String scp = System . getProperty ( LEGACY _ SSTABLE _ PROP ) ; <nl> + Assert . assertNotNull ( " System property " + LEGACY _ SSTABLE _ ROOT + " not set " , scp ) ; <nl> + <nl> + LEGACY _ SSTABLE _ ROOT = new File ( scp ) . getAbsoluteFile ( ) ; <nl> + Assert . assertTrue ( " System property " + LEGACY _ SSTABLE _ ROOT + " does not specify a directory " , LEGACY _ SSTABLE _ ROOT . isDirectory ( ) ) ; <nl> + <nl> SchemaLoader . prepareServer ( ) ; <nl> StorageService . instance . initServer ( ) ; <nl> Keyspace . setInitialized ( ) ; <nl> @ @ - 98 , 10 + 104 , 7 @ @ public class LegacySSTableTest <nl> { <nl> createTables ( legacyVersion ) ; <nl> } <nl> - String scp = System . getProperty ( LEGACY _ SSTABLE _ PROP ) ; <nl> - assert scp ! = null ; <nl> - LEGACY _ SSTABLE _ ROOT = new File ( scp ) . getAbsoluteFile ( ) ; <nl> - assert LEGACY _ SSTABLE _ ROOT . isDirectory ( ) ; <nl> + <nl> } <nl> <nl> @ After <nl> @ @ - 454 , 7 + 457 , 9 @ @ public class LegacySSTableTest <nl> <nl> private static void copySstablesToTestData ( String legacyVersion , String table , File cfDir ) throws IOException <nl> { <nl> - for ( File file : getTableDir ( legacyVersion , table ) . listFiles ( ) ) <nl> + File tableDir = getTableDir ( legacyVersion , table ) ; <nl> + Assert . assertTrue ( " The table directory " + tableDir + " was not found " , tableDir . isDirectory ( ) ) ; <nl> + for ( File file : tableDir . listFiles ( ) ) <nl> { <nl> copyFile ( cfDir , file ) ; <nl> } <nl> @ @ - 472 , 10 + 477 , 11 @ @ public class LegacySSTableTest <nl> { <nl> File target = new File ( cfDir , file . getName ( ) ) ; <nl> int rd ; <nl> - FileInputStream is = new FileInputStream ( file ) ; <nl> - FileOutputStream os = new FileOutputStream ( target ) ; <nl> - while ( ( rd = is . read ( buf ) ) > = 0 ) <nl> - os . write ( buf , 0 , rd ) ; <nl> + try ( FileInputStream is = new FileInputStream ( file ) ; <nl> + FileOutputStream os = new FileOutputStream ( target ) ; ) { <nl> + while ( ( rd = is . read ( buf ) ) > = 0 ) <nl> + os . write ( buf , 0 , rd ) ; <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 1a09910 . . d2fc678 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 39 , 6 + 39 , 7 @ @ <nl> < property name = " test . resources " value = " $ { test . dir } / resources " / > <nl> < property name = " test . classes " value = " $ { build . dir } / test / classes " / > <nl> < property name = " test . conf " value = " $ { test . dir } / conf " / > <nl> + < property name = " test . data " value = " $ { test . dir } / data " / > <nl> < property name = " test . name " value = " * Test " / > <nl> < property name = " test . unit . src " value = " $ { test . dir } / unit " / > <nl> < property name = " dist . dir " value = " $ { build . dir } / dist " / > <nl> @ @ - 369 , 6 + 370 , 7 @ @ <nl> < formatter type = " brief " usefile = " false " / > <nl> < jvmarg value = " - Dstorage - config = $ { test . conf } " / > <nl> < jvmarg value = " - Dlog4j . configuration = log4j - junit . properties " / > <nl> + < jvmarg value = " - Dlegacy - sstable - root = $ { test . data } / legacy - sstables " / > <nl> < jvmarg value = " - ea " / > <nl> < classpath > <nl> < path refid = " cassandra . classpath " / > <nl> diff - - git a / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Data . db b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Data . db <nl> new file mode 100644 <nl> index 0000000 . . 962ed01 <nl> Binary files / dev / null and b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Data . db differ <nl> diff - - git a / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Filter . db b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Filter . db <nl> new file mode 100644 <nl> index 0000000 . . 64d8c5d <nl> Binary files / dev / null and b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Filter . db differ <nl> diff - - git a / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Index . db b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Index . db <nl> new file mode 100644 <nl> index 0000000 . . 8fb5706 <nl> Binary files / dev / null and b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Index . db differ <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> new file mode 100644 <nl> index 0000000 . . d37585c <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java <nl> @ @ - 0 , 0 + 1 , 113 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . io . sstable ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . util . * ; <nl> + <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + import static org . junit . Assert . * ; <nl> + <nl> + import org . apache . cassandra . CleanupHelper ; <nl> + import org . apache . cassandra . io . util . BufferedRandomAccessFile ; <nl> + import org . apache . cassandra . db . DecoratedKey ; <nl> + <nl> + import com . google . common . base . Predicate ; <nl> + import com . google . common . base . Predicates ; <nl> + <nl> + / * * <nl> + * Tests backwards compatibility for SSTables . Requires that older SSTables match up with the existing config file , <nl> + * and currently only tests specific cases for specific upgrades . <nl> + * / <nl> + public class LegacySSTableTest extends CleanupHelper <nl> + { <nl> + public static final String LEGACY _ SSTABLE _ PROP = " legacy - sstable - root " ; <nl> + public static final String KSNAME = " Keyspace1 " ; <nl> + public static final String CFNAME = " Standard1 " ; <nl> + <nl> + public static SortedMap < String , byte [ ] > TEST _ DATA ; <nl> + public static File LEGACY _ SSTABLE _ ROOT ; <nl> + <nl> + @ BeforeClass <nl> + public static void beforeClass ( ) <nl> + { <nl> + String scp = System . getProperty ( LEGACY _ SSTABLE _ PROP ) ; <nl> + assert scp ! = null ; <nl> + LEGACY _ SSTABLE _ ROOT = new File ( scp ) ; <nl> + assert LEGACY _ SSTABLE _ ROOT . isDirectory ( ) ; <nl> + <nl> + TEST _ DATA = new TreeMap < String , byte [ ] > ( ) ; <nl> + for ( int i = 100 ; i < 1000 ; + + i ) <nl> + { <nl> + TEST _ DATA . put ( Integer . toString ( i ) , ( " Avinash Lakshman is a good man : " + i ) . getBytes ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Get a descriptor for the legacy sstable at the given version . <nl> + * / <nl> + protected SSTable . Descriptor getDescriptor ( String ver ) throws IOException <nl> + { <nl> + File directory = new File ( LEGACY _ SSTABLE _ ROOT + File . separator + ver + File . separator + KSNAME ) ; <nl> + return new SSTable . Descriptor ( ver , directory , KSNAME , CFNAME , 0 , false ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Generates a test SSTable for use in this classes ' tests . Uncomment and run against an older build <nl> + * and the output will be copied to a version subdirectory in ' LEGACY _ SSTABLE _ ROOT ' <nl> + * <nl> + @ Test <nl> + public void buildTestSSTable ( ) throws IOException <nl> + { <nl> + / / write the output in a version specific directory <nl> + SSTable . Descriptor dest = getDescriptor ( SSTable . Descriptor . CURRENT _ VERSION ) ; <nl> + assert dest . directory . mkdirs ( ) : " Could not create " + dest . directory + " . Might it already exist ? " ; <nl> + <nl> + SSTableReader ssTable = SSTableUtils . writeRawSSTable ( new File ( dest . filenameFor ( SSTable . COMPONENT _ DATA ) ) , <nl> + KSNAME , <nl> + CFNAME , <nl> + TEST _ DATA ) ; <nl> + assert ssTable . desc . generation = = 0 : <nl> + " In order to create a generation 0 sstable , please run this test alone . " ; <nl> + System . out . println ( " > > > Wrote " + dest ) ; <nl> + } <nl> + * / <nl> + <nl> + / * * <nl> + * Between version b and c , on disk bloom filters became incompatible , and needed to be regenerated . <nl> + * / <nl> + @ Test <nl> + public void testVerB ( ) throws IOException <nl> + { <nl> + SSTableReader reader = SSTableReader . open ( getDescriptor ( " b " ) ) ; <nl> + <nl> + List < String > keys = new ArrayList < String > ( TEST _ DATA . keySet ( ) ) ; <nl> + Collections . shuffle ( keys ) ; <nl> + BufferedRandomAccessFile file = new BufferedRandomAccessFile ( reader . getFilename ( ) , " r " ) ; <nl> + for ( String key : keys ) <nl> + { <nl> + / / confirm that the bloom filter does not reject any keys <nl> + file . seek ( reader . getPosition ( reader . partitioner . decorateKey ( key ) ) . position ) ; <nl> + assert key . equals ( file . readUTF ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> index 4961c1f . . 8ed14e3 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java <nl> @ @ - 38 , 13 + 38 , 8 @ @ import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> public class SSTableUtils <nl> { <nl> / / first configured table and cf <nl> - public static String TABLENAME ; <nl> - public static String CFNAME ; <nl> - static <nl> - { <nl> - TABLENAME = DatabaseDescriptor . getTables ( ) . iterator ( ) . next ( ) ; <nl> - CFNAME = Table . open ( TABLENAME ) . getColumnFamilies ( ) . iterator ( ) . next ( ) ; <nl> - } <nl> + public static String TABLENAME = " Keyspace1 " ; <nl> + public static String CFNAME = " Standard1 " ; <nl> <nl> public static ColumnFamily createCF ( long mfda , int ldt , IColumn . . . cols ) <nl> { <nl> @ @ - 97 , 13 + 92 , 26 @ @ public class SSTableUtils <nl> <nl> public static SSTableReader writeRawSSTable ( String tablename , String cfname , SortedMap < String , byte [ ] > entries ) throws IOException <nl> { <nl> - File f = tempSSTableFile ( tablename , cfname ) ; <nl> - SSTableWriter writer = new SSTableWriter ( f . getAbsolutePath ( ) , entries . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> + return writeRawSSTable ( null , tablename , cfname , entries ) ; <nl> + } <nl> + <nl> + public static SSTableReader writeRawSSTable ( File datafile , String tablename , String cfname , SortedMap < String , byte [ ] > entries ) throws IOException <nl> + { <nl> + boolean temporary = false ; <nl> + if ( datafile = = null ) <nl> + { <nl> + datafile = tempSSTableFile ( tablename , cfname ) ; <nl> + temporary = true ; <nl> + } <nl> + SSTableWriter writer = new SSTableWriter ( datafile . getAbsolutePath ( ) , entries . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> for ( Map . Entry < String , byte [ ] > entry : entries . entrySet ( ) ) <nl> writer . append ( writer . partitioner . decorateKey ( entry . getKey ( ) ) , <nl> entry . getValue ( ) ) ; <nl> - new File ( writer . indexFilename ( ) ) . deleteOnExit ( ) ; <nl> - new File ( writer . filterFilename ( ) ) . deleteOnExit ( ) ; <nl> + if ( temporary ) <nl> + { <nl> + new File ( writer . indexFilename ( ) ) . deleteOnExit ( ) ; <nl> + new File ( writer . filterFilename ( ) ) . deleteOnExit ( ) ; <nl> + } <nl> return writer . closeAndOpenReader ( ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 index 9a37f66 . . cc2011f 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 90 , 6 + 90 , 12 @ @ public class LegacySSTableTest 
 @ BeforeClass 
 public static void defineSchema ( ) throws ConfigurationException 
 { 
 + String scp = System . getProperty ( LEGACY _ SSTABLE _ PROP ) ; 
 + Assert . assertNotNull ( " System property " + LEGACY _ SSTABLE _ ROOT + " not set " , scp ) ; 
 + 
 + LEGACY _ SSTABLE _ ROOT = new File ( scp ) . getAbsoluteFile ( ) ; 
 + Assert . assertTrue ( " System property " + LEGACY _ SSTABLE _ ROOT + " does not specify a directory " , LEGACY _ SSTABLE _ ROOT . isDirectory ( ) ) ; 
 + 
 SchemaLoader . prepareServer ( ) ; 
 StorageService . instance . initServer ( ) ; 
 Keyspace . setInitialized ( ) ; 
 @ @ - 98 , 10 + 104 , 7 @ @ public class LegacySSTableTest 
 { 
 createTables ( legacyVersion ) ; 
 } 
 - String scp = System . getProperty ( LEGACY _ SSTABLE _ PROP ) ; 
 - assert scp ! = null ; 
 - LEGACY _ SSTABLE _ ROOT = new File ( scp ) . getAbsoluteFile ( ) ; 
 - assert LEGACY _ SSTABLE _ ROOT . isDirectory ( ) ; 
 + 
 } 
 
 @ After 
 @ @ - 454 , 7 + 457 , 9 @ @ public class LegacySSTableTest 
 
 private static void copySstablesToTestData ( String legacyVersion , String table , File cfDir ) throws IOException 
 { 
 - for ( File file : getTableDir ( legacyVersion , table ) . listFiles ( ) ) 
 + File tableDir = getTableDir ( legacyVersion , table ) ; 
 + Assert . assertTrue ( " The table directory " + tableDir + " was not found " , tableDir . isDirectory ( ) ) ; 
 + for ( File file : tableDir . listFiles ( ) ) 
 { 
 copyFile ( cfDir , file ) ; 
 } 
 @ @ - 472 , 10 + 477 , 11 @ @ public class LegacySSTableTest 
 { 
 File target = new File ( cfDir , file . getName ( ) ) ; 
 int rd ; 
 - FileInputStream is = new FileInputStream ( file ) ; 
 - FileOutputStream os = new FileOutputStream ( target ) ; 
 - while ( ( rd = is . read ( buf ) ) > = 0 ) 
 - os . write ( buf , 0 , rd ) ; 
 + try ( FileInputStream is = new FileInputStream ( file ) ; 
 + FileOutputStream os = new FileOutputStream ( target ) ; ) { 
 + while ( ( rd = is . read ( buf ) ) > = 0 ) 
 + os . write ( buf , 0 , rd ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 1a09910 . . d2fc678 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 39 , 6 + 39 , 7 @ @ 
 < property name = " test . resources " value = " $ { test . dir } / resources " / > 
 < property name = " test . classes " value = " $ { build . dir } / test / classes " / > 
 < property name = " test . conf " value = " $ { test . dir } / conf " / > 
 + < property name = " test . data " value = " $ { test . dir } / data " / > 
 < property name = " test . name " value = " * Test " / > 
 < property name = " test . unit . src " value = " $ { test . dir } / unit " / > 
 < property name = " dist . dir " value = " $ { build . dir } / dist " / > 
 @ @ - 369 , 6 + 370 , 7 @ @ 
 < formatter type = " brief " usefile = " false " / > 
 < jvmarg value = " - Dstorage - config = $ { test . conf } " / > 
 < jvmarg value = " - Dlog4j . configuration = log4j - junit . properties " / > 
 + < jvmarg value = " - Dlegacy - sstable - root = $ { test . data } / legacy - sstables " / > 
 < jvmarg value = " - ea " / > 
 < classpath > 
 < path refid = " cassandra . classpath " / > 
 diff - - git a / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Data . db b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Data . db 
 new file mode 100644 
 index 0000000 . . 962ed01 
 Binary files / dev / null and b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Data . db differ 
 diff - - git a / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Filter . db b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Filter . db 
 new file mode 100644 
 index 0000000 . . 64d8c5d 
 Binary files / dev / null and b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Filter . db differ 
 diff - - git a / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Index . db b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Index . db 
 new file mode 100644 
 index 0000000 . . 8fb5706 
 Binary files / dev / null and b / test / data / legacy - sstables / b / Keyspace1 / Standard1 - b - 0 - Index . db differ 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 new file mode 100644 
 index 0000000 . . d37585c 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LegacySSTableTest . java 
 @ @ - 0 , 0 + 1 , 113 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + 
 + package org . apache . cassandra . io . sstable ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . util . * ; 
 + 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + import static org . junit . Assert . * ; 
 + 
 + import org . apache . cassandra . CleanupHelper ; 
 + import org . apache . cassandra . io . util . BufferedRandomAccessFile ; 
 + import org . apache . cassandra . db . DecoratedKey ; 
 + 
 + import com . google . common . base . Predicate ; 
 + import com . google . common . base . Predicates ; 
 + 
 + / * * 
 + * Tests backwards compatibility for SSTables . Requires that older SSTables match up with the existing config file , 
 + * and currently only tests specific cases for specific upgrades . 
 + * / 
 + public class LegacySSTableTest extends CleanupHelper 
 + { 
 + public static final String LEGACY _ SSTABLE _ PROP = " legacy - sstable - root " ; 
 + public static final String KSNAME = " Keyspace1 " ; 
 + public static final String CFNAME = " Standard1 " ; 
 + 
 + public static SortedMap < String , byte [ ] > TEST _ DATA ; 
 + public static File LEGACY _ SSTABLE _ ROOT ; 
 + 
 + @ BeforeClass 
 + public static void beforeClass ( ) 
 + { 
 + String scp = System . getProperty ( LEGACY _ SSTABLE _ PROP ) ; 
 + assert scp ! = null ; 
 + LEGACY _ SSTABLE _ ROOT = new File ( scp ) ; 
 + assert LEGACY _ SSTABLE _ ROOT . isDirectory ( ) ; 
 + 
 + TEST _ DATA = new TreeMap < String , byte [ ] > ( ) ; 
 + for ( int i = 100 ; i < 1000 ; + + i ) 
 + { 
 + TEST _ DATA . put ( Integer . toString ( i ) , ( " Avinash Lakshman is a good man : " + i ) . getBytes ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Get a descriptor for the legacy sstable at the given version . 
 + * / 
 + protected SSTable . Descriptor getDescriptor ( String ver ) throws IOException 
 + { 
 + File directory = new File ( LEGACY _ SSTABLE _ ROOT + File . separator + ver + File . separator + KSNAME ) ; 
 + return new SSTable . Descriptor ( ver , directory , KSNAME , CFNAME , 0 , false ) ; 
 + } 
 + 
 + / * * 
 + * Generates a test SSTable for use in this classes ' tests . Uncomment and run against an older build 
 + * and the output will be copied to a version subdirectory in ' LEGACY _ SSTABLE _ ROOT ' 
 + * 
 + @ Test 
 + public void buildTestSSTable ( ) throws IOException 
 + { 
 + / / write the output in a version specific directory 
 + SSTable . Descriptor dest = getDescriptor ( SSTable . Descriptor . CURRENT _ VERSION ) ; 
 + assert dest . directory . mkdirs ( ) : " Could not create " + dest . directory + " . Might it already exist ? " ; 
 + 
 + SSTableReader ssTable = SSTableUtils . writeRawSSTable ( new File ( dest . filenameFor ( SSTable . COMPONENT _ DATA ) ) , 
 + KSNAME , 
 + CFNAME , 
 + TEST _ DATA ) ; 
 + assert ssTable . desc . generation = = 0 : 
 + " In order to create a generation 0 sstable , please run this test alone . " ; 
 + System . out . println ( " > > > Wrote " + dest ) ; 
 + } 
 + * / 
 + 
 + / * * 
 + * Between version b and c , on disk bloom filters became incompatible , and needed to be regenerated . 
 + * / 
 + @ Test 
 + public void testVerB ( ) throws IOException 
 + { 
 + SSTableReader reader = SSTableReader . open ( getDescriptor ( " b " ) ) ; 
 + 
 + List < String > keys = new ArrayList < String > ( TEST _ DATA . keySet ( ) ) ; 
 + Collections . shuffle ( keys ) ; 
 + BufferedRandomAccessFile file = new BufferedRandomAccessFile ( reader . getFilename ( ) , " r " ) ; 
 + for ( String key : keys ) 
 + { 
 + / / confirm that the bloom filter does not reject any keys 
 + file . seek ( reader . getPosition ( reader . partitioner . decorateKey ( key ) ) . position ) ; 
 + assert key . equals ( file . readUTF ( ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 index 4961c1f . . 8ed14e3 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / SSTableUtils . java 
 @ @ - 38 , 13 + 38 , 8 @ @ import org . apache . cassandra . io . util . DataOutputBuffer ; 
 public class SSTableUtils 
 { 
 / / first configured table and cf 
 - public static String TABLENAME ; 
 - public static String CFNAME ; 
 - static 
 - { 
 - TABLENAME = DatabaseDescriptor . getTables ( ) . iterator ( ) . next ( ) ; 
 - CFNAME = Table . open ( TABLENAME ) . getColumnFamilies ( ) . iterator ( ) . next ( ) ; 
 - } 
 + public static String TABLENAME = " Keyspace1 " ; 
 + public static String CFNAME = " Standard1 " ; 
 
 public static ColumnFamily createCF ( long mfda , int ldt , IColumn . . . cols ) 
 { 
 @ @ - 97 , 13 + 92 , 26 @ @ public class SSTableUtils 
 
 public static SSTableReader writeRawSSTable ( String tablename , String cfname , SortedMap < String , byte [ ] > entries ) throws IOException 
 { 
 - File f = tempSSTableFile ( tablename , cfname ) ; 
 - SSTableWriter writer = new SSTableWriter ( f . getAbsolutePath ( ) , entries . size ( ) , StorageService . getPartitioner ( ) ) ; 
 + return writeRawSSTable ( null , tablename , cfname , entries ) ; 
 + } 
 + 
 + public static SSTableReader writeRawSSTable ( File datafile , String tablename , String cfname , SortedMap < String , byte [ ] > entries ) throws IOException 
 + { 
 + boolean temporary = false ; 
 + if ( datafile = = null ) 
 + { 
 + datafile = tempSSTableFile ( tablename , cfname ) ; 
 + temporary = true ; 
 + } 
 + SSTableWriter writer = new SSTableWriter ( datafile . getAbsolutePath ( ) , entries . size ( ) , StorageService . getPartitioner ( ) ) ; 
 for ( Map . Entry < String , byte [ ] > entry : entries . entrySet ( ) ) 
 writer . append ( writer . partitioner . decorateKey ( entry . getKey ( ) ) , 
 entry . getValue ( ) ) ; 
 - new File ( writer . indexFilename ( ) ) . deleteOnExit ( ) ; 
 - new File ( writer . filterFilename ( ) ) . deleteOnExit ( ) ; 
 + if ( temporary ) 
 + { 
 + new File ( writer . indexFilename ( ) ) . deleteOnExit ( ) ; 
 + new File ( writer . filterFilename ( ) ) . deleteOnExit ( ) ; 
 + } 
 return writer . closeAndOpenReader ( ) ; 
 } 
 }
