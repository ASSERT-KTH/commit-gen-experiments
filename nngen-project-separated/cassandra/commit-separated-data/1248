BLEU SCORE: 0.13976396370981378

TEST MSG: Fix cqlsh rules
GENERATED MSG: Update cqlsh tests for latest trunk

TEST DIFF (one line): diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py <nl> index 5fe311f . . 9ea30cd 100644 <nl> - - - a / pylib / cqlshlib / cqlhandling . py <nl> + + + b / pylib / cqlshlib / cqlhandling . py <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> # i . e . , stuff that ' s not necessarily cqlsh - specific <nl> <nl> import traceback <nl> + from cassandra . metadata import cql _ keywords _ reserved <nl> from . import pylexotron , util <nl> <nl> Hint = pylexotron . Hint <nl> @ @ - 55 , 6 + 56 , 15 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : <nl> <nl> # note : commands _ end _ with _ newline may be extended by callers . <nl> self . commands _ end _ with _ newline = set ( ) <nl> + self . set _ reserved _ keywords ( cql _ keywords _ reserved ) <nl> + <nl> + def set _ reserved _ keywords ( self , keywords ) : <nl> + " " " <nl> + We cannot let resreved cql keywords be simple ' identifier ' since this caused <nl> + problems with completion , see CASSANDRA - 10415 <nl> + " " " <nl> + syntax = ' < reserved _ identifier > : : = / ( ' + ' | ' . join ( r ' \ b { } \ b ' . format ( k ) for k in keywords ) + ' ) / ; ' <nl> + self . append _ rules ( syntax ) <nl> <nl> def completer _ for ( self , rulename , symname ) : <nl> def registrator ( f ) : <nl> diff - - git a / pylib / cqlshlib / test / cassconnect . py b / pylib / cqlshlib / test / cassconnect . py <nl> index 21dddcd . . a67407b 100644 <nl> - - - a / pylib / cqlshlib / test / cassconnect . py <nl> + + + b / pylib / cqlshlib / test / cassconnect . py <nl> @ @ - 20 , 6 + 20 , 7 @ @ import contextlib <nl> import tempfile <nl> import os . path <nl> from . basecase import cql , cqlsh , cqlshlog , TEST _ HOST , TEST _ PORT , rundir <nl> + from cassandra . metadata import maybe _ escape _ name <nl> from . run _ cqlsh import run _ cqlsh , call _ cqlsh <nl> <nl> test _ keyspace _ init = os . path . join ( rundir , ' test _ keyspace _ init . cql ' ) <nl> @ @ - 126 , 7 + 127 , 7 @ @ def cql _ rule _ set ( ) : <nl> return cqlsh . cql3handling . CqlRuleSet <nl> <nl> def quote _ name ( name ) : <nl> - return cql _ rule _ set ( ) . maybe _ escape _ name ( name ) <nl> + return maybe _ escape _ name ( name ) <nl> <nl> class DEFAULTVAL : pass <nl> <nl> diff - - git a / pylib / cqlshlib / test / run _ cqlsh . py b / pylib / cqlshlib / test / run _ cqlsh . py <nl> index 6ae295c . . 88b0ca6 100644 <nl> - - - a / pylib / cqlshlib / test / run _ cqlsh . py <nl> + + + b / pylib / cqlshlib / test / run _ cqlsh . py <nl> @ @ - 231 , 7 + 231 , 7 @ @ class CqlshRunner ( ProcRunner ) : <nl> self . output _ header = self . read _ to _ next _ prompt ( ) <nl> <nl> def read _ to _ next _ prompt ( self ) : <nl> - return self . read _ until ( self . prompt , timeout = 4 . 0 ) <nl> + return self . read _ until ( self . prompt , timeout = 10 . 0 ) <nl> <nl> def read _ up _ to _ timeout ( self , timeout , blksize = 4096 ) : <nl> output = ProcRunner . read _ up _ to _ timeout ( self , timeout , blksize = blksize ) <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> index 97bd96b . . 5f7b6e4 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py <nl> @ @ - 142 , 8 + 142 , 8 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> def test _ complete _ on _ empty _ string ( self ) : <nl> self . trycompletions ( ' ' , choices = ( ' ? ' , ' ALTER ' , ' BEGIN ' , ' CAPTURE ' , ' CONSISTENCY ' , <nl> ' COPY ' , ' CREATE ' , ' DEBUG ' , ' DELETE ' , ' DESC ' , ' DESCRIBE ' , <nl> - ' DROP ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' PAGING ' , ' REVOKE ' , <nl> - ' SELECT ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , ' EXPAND ' , ' TRUNCATE ' , <nl> + ' DROP ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' LOGIN ' , ' PAGING ' , ' REVOKE ' , <nl> + ' SELECT ' , ' SERIAL ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , ' EXPAND ' , ' TRUNCATE ' , <nl> ' UPDATE ' , ' USE ' , ' exit ' , ' quit ' ) ) <nl> <nl> def test _ complete _ command _ words ( self ) : <nl> @ @ - 228 , 8 + 228 , 8 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> " VALUES ( ' eggs ' , ' sausage ' , ' spam ' ) ; " ) , <nl> choices = [ ' ? ' , ' ALTER ' , ' BEGIN ' , ' CAPTURE ' , ' CONSISTENCY ' , ' COPY ' , <nl> ' CREATE ' , ' DEBUG ' , ' DELETE ' , ' DESC ' , ' DESCRIBE ' , ' DROP ' , <nl> - ' EXPAND ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' PAGING ' , <nl> - ' REVOKE ' , ' SELECT ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , <nl> + ' EXPAND ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' LOGIN ' , ' PAGING ' , <nl> + ' REVOKE ' , ' SELECT ' , ' SERIAL ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , <nl> ' TRUNCATE ' , ' UPDATE ' , ' USE ' , ' exit ' , ' quit ' ] ) <nl> <nl> self . trycompletions ( <nl> @ @ - 422 , 9 + 422 , 6 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : <nl> def test _ complete _ in _ string _ literals ( self ) : <nl> # would be great if we could get a space after this sort of completion , <nl> # but readline really wants to make things difficult for us <nl> - self . trycompletions ( ' insert into system . " Index ' , ' Info " ' ) <nl> - self . trycompletions ( ' USE " ' , choices = ( ' system ' , self . cqlsh . keyspace ) , <nl> - other _ choices _ ok = True ) <nl> self . trycompletions ( " create keyspace blah with replication = { ' class ' : ' Sim " , <nl> " pleStrategy ' " ) <nl> <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index 60ef3a4 . . 64950e2 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 609 , 7 + 609 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> ) WITH bloom _ filter _ fp _ chance = 0 . 01 <nl> AND caching = ' { " keys " : " ALL " , " rows _ per _ partition " : " NONE " } ' <nl> AND comment = ' ' <nl> - AND compaction = { ' min _ threshold ' : ' 4 ' , ' class ' : ' org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ' , ' max _ threshold ' : ' 32 ' } <nl> + AND compaction = { ' class ' : ' org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ' } <nl> AND compression = { ' sstable _ compression ' : ' org . apache . cassandra . io . compress . LZ4Compressor ' } <nl> AND dclocal _ read _ repair _ chance = 0 . 1 <nl> AND default _ time _ to _ live = 0 <nl> @ @ - 627 , 7 + 627 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> for semicolon in ( ' ; ' , ' ' ) : <nl> output = c . cmd _ and _ response ( ' % s has _ all _ types % s ' % ( cmdword , semicolon ) ) <nl> self . assertNoHasColors ( output ) <nl> - self . assertEqual ( output , table _ desc3 ) <nl> + self . assertSequenceEqual ( output . split ( ' \ n ' ) , table _ desc3 . split ( ' \ n ' ) ) <nl> <nl> def test _ describe _ columnfamilies _ output ( self ) : <nl> output _ re = r ' ' ' <nl> diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init . cql b / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> index cd5ac75 . . 9a13918 100644 <nl> - - - a / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> + + + b / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> @ @ - 26 , 7 + 26 , 7 @ @ INSERT INTO has _ all _ types ( num , intcol , asciicol , bigintcol , blobcol , booleancol <nl> decimalcol , doublecol , floatcol , textcol , <nl> timestampcol , uuidcol , varcharcol , varintcol ) <nl> VALUES ( 1 , 2147483647 , ' _ _ ! ' ' $ # @ ! ~ " ' , 9223372036854775807 , 0xffffffffffffffffff , true , <nl> - 0 . 00000000000001 , 9999999 . 999 , 99999 . 99 , ' ∭ Ƕ ⑮ ฑ ➳ ❏ ' ' ' , ' 1900 - 01 - 01 + 0000 ' , <nl> + 0 . 00000000000001 , 9999999 . 999 , 99999 . 999 , ' ∭ Ƕ ⑮ ฑ ➳ ❏ ' ' ' , ' 1900 - 01 - 01 + 0000 ' , <nl> ffffffff - ffff - ffff - ffff - ffffffffffff , ' newline - > <nl> < - ' , 9 ) ; <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / pylib / cqlshlib / cqlhandling . py b / pylib / cqlshlib / cqlhandling . py 
 index 5fe311f . . 9ea30cd 100644 
 - - - a / pylib / cqlshlib / cqlhandling . py 
 + + + b / pylib / cqlshlib / cqlhandling . py 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 # i . e . , stuff that ' s not necessarily cqlsh - specific 
 
 import traceback 
 + from cassandra . metadata import cql _ keywords _ reserved 
 from . import pylexotron , util 
 
 Hint = pylexotron . Hint 
 @ @ - 55 , 6 + 56 , 15 @ @ class CqlParsingRuleSet ( pylexotron . ParsingRuleSet ) : 
 
 # note : commands _ end _ with _ newline may be extended by callers . 
 self . commands _ end _ with _ newline = set ( ) 
 + self . set _ reserved _ keywords ( cql _ keywords _ reserved ) 
 + 
 + def set _ reserved _ keywords ( self , keywords ) : 
 + " " " 
 + We cannot let resreved cql keywords be simple ' identifier ' since this caused 
 + problems with completion , see CASSANDRA - 10415 
 + " " " 
 + syntax = ' < reserved _ identifier > : : = / ( ' + ' | ' . join ( r ' \ b { } \ b ' . format ( k ) for k in keywords ) + ' ) / ; ' 
 + self . append _ rules ( syntax ) 
 
 def completer _ for ( self , rulename , symname ) : 
 def registrator ( f ) : 
 diff - - git a / pylib / cqlshlib / test / cassconnect . py b / pylib / cqlshlib / test / cassconnect . py 
 index 21dddcd . . a67407b 100644 
 - - - a / pylib / cqlshlib / test / cassconnect . py 
 + + + b / pylib / cqlshlib / test / cassconnect . py 
 @ @ - 20 , 6 + 20 , 7 @ @ import contextlib 
 import tempfile 
 import os . path 
 from . basecase import cql , cqlsh , cqlshlog , TEST _ HOST , TEST _ PORT , rundir 
 + from cassandra . metadata import maybe _ escape _ name 
 from . run _ cqlsh import run _ cqlsh , call _ cqlsh 
 
 test _ keyspace _ init = os . path . join ( rundir , ' test _ keyspace _ init . cql ' ) 
 @ @ - 126 , 7 + 127 , 7 @ @ def cql _ rule _ set ( ) : 
 return cqlsh . cql3handling . CqlRuleSet 
 
 def quote _ name ( name ) : 
 - return cql _ rule _ set ( ) . maybe _ escape _ name ( name ) 
 + return maybe _ escape _ name ( name ) 
 
 class DEFAULTVAL : pass 
 
 diff - - git a / pylib / cqlshlib / test / run _ cqlsh . py b / pylib / cqlshlib / test / run _ cqlsh . py 
 index 6ae295c . . 88b0ca6 100644 
 - - - a / pylib / cqlshlib / test / run _ cqlsh . py 
 + + + b / pylib / cqlshlib / test / run _ cqlsh . py 
 @ @ - 231 , 7 + 231 , 7 @ @ class CqlshRunner ( ProcRunner ) : 
 self . output _ header = self . read _ to _ next _ prompt ( ) 
 
 def read _ to _ next _ prompt ( self ) : 
 - return self . read _ until ( self . prompt , timeout = 4 . 0 ) 
 + return self . read _ until ( self . prompt , timeout = 10 . 0 ) 
 
 def read _ up _ to _ timeout ( self , timeout , blksize = 4096 ) : 
 output = ProcRunner . read _ up _ to _ timeout ( self , timeout , blksize = blksize ) 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ completion . py b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 index 97bd96b . . 5f7b6e4 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ completion . py 
 @ @ - 142 , 8 + 142 , 8 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 def test _ complete _ on _ empty _ string ( self ) : 
 self . trycompletions ( ' ' , choices = ( ' ? ' , ' ALTER ' , ' BEGIN ' , ' CAPTURE ' , ' CONSISTENCY ' , 
 ' COPY ' , ' CREATE ' , ' DEBUG ' , ' DELETE ' , ' DESC ' , ' DESCRIBE ' , 
 - ' DROP ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' PAGING ' , ' REVOKE ' , 
 - ' SELECT ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , ' EXPAND ' , ' TRUNCATE ' , 
 + ' DROP ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' LOGIN ' , ' PAGING ' , ' REVOKE ' , 
 + ' SELECT ' , ' SERIAL ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , ' EXPAND ' , ' TRUNCATE ' , 
 ' UPDATE ' , ' USE ' , ' exit ' , ' quit ' ) ) 
 
 def test _ complete _ command _ words ( self ) : 
 @ @ - 228 , 8 + 228 , 8 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 " VALUES ( ' eggs ' , ' sausage ' , ' spam ' ) ; " ) , 
 choices = [ ' ? ' , ' ALTER ' , ' BEGIN ' , ' CAPTURE ' , ' CONSISTENCY ' , ' COPY ' , 
 ' CREATE ' , ' DEBUG ' , ' DELETE ' , ' DESC ' , ' DESCRIBE ' , ' DROP ' , 
 - ' EXPAND ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' PAGING ' , 
 - ' REVOKE ' , ' SELECT ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , 
 + ' EXPAND ' , ' GRANT ' , ' HELP ' , ' INSERT ' , ' LIST ' , ' LOGIN ' , ' PAGING ' , 
 + ' REVOKE ' , ' SELECT ' , ' SERIAL ' , ' SHOW ' , ' SOURCE ' , ' TRACING ' , 
 ' TRUNCATE ' , ' UPDATE ' , ' USE ' , ' exit ' , ' quit ' ] ) 
 
 self . trycompletions ( 
 @ @ - 422 , 9 + 422 , 6 @ @ class TestCqlshCompletion ( CqlshCompletionCase ) : 
 def test _ complete _ in _ string _ literals ( self ) : 
 # would be great if we could get a space after this sort of completion , 
 # but readline really wants to make things difficult for us 
 - self . trycompletions ( ' insert into system . " Index ' , ' Info " ' ) 
 - self . trycompletions ( ' USE " ' , choices = ( ' system ' , self . cqlsh . keyspace ) , 
 - other _ choices _ ok = True ) 
 self . trycompletions ( " create keyspace blah with replication = { ' class ' : ' Sim " , 
 " pleStrategy ' " ) 
 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index 60ef3a4 . . 64950e2 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 609 , 7 + 609 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 ) WITH bloom _ filter _ fp _ chance = 0 . 01 
 AND caching = ' { " keys " : " ALL " , " rows _ per _ partition " : " NONE " } ' 
 AND comment = ' ' 
 - AND compaction = { ' min _ threshold ' : ' 4 ' , ' class ' : ' org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ' , ' max _ threshold ' : ' 32 ' } 
 + AND compaction = { ' class ' : ' org . apache . cassandra . db . compaction . SizeTieredCompactionStrategy ' } 
 AND compression = { ' sstable _ compression ' : ' org . apache . cassandra . io . compress . LZ4Compressor ' } 
 AND dclocal _ read _ repair _ chance = 0 . 1 
 AND default _ time _ to _ live = 0 
 @ @ - 627 , 7 + 627 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 for semicolon in ( ' ; ' , ' ' ) : 
 output = c . cmd _ and _ response ( ' % s has _ all _ types % s ' % ( cmdword , semicolon ) ) 
 self . assertNoHasColors ( output ) 
 - self . assertEqual ( output , table _ desc3 ) 
 + self . assertSequenceEqual ( output . split ( ' \ n ' ) , table _ desc3 . split ( ' \ n ' ) ) 
 
 def test _ describe _ columnfamilies _ output ( self ) : 
 output _ re = r ' ' ' 
 diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init . cql b / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 index cd5ac75 . . 9a13918 100644 
 - - - a / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 + + + b / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 @ @ - 26 , 7 + 26 , 7 @ @ INSERT INTO has _ all _ types ( num , intcol , asciicol , bigintcol , blobcol , booleancol 
 decimalcol , doublecol , floatcol , textcol , 
 timestampcol , uuidcol , varcharcol , varintcol ) 
 VALUES ( 1 , 2147483647 , ' _ _ ! ' ' $ # @ ! ~ " ' , 9223372036854775807 , 0xffffffffffffffffff , true , 
 - 0 . 00000000000001 , 9999999 . 999 , 99999 . 99 , ' ∭ Ƕ ⑮ ฑ ➳ ❏ ' ' ' , ' 1900 - 01 - 01 + 0000 ' , 
 + 0 . 00000000000001 , 9999999 . 999 , 99999 . 999 , ' ∭ Ƕ ⑮ ฑ ➳ ❏ ' ' ' , ' 1900 - 01 - 01 + 0000 ' , 
 ffffffff - ffff - ffff - ffff - ffffffffffff , ' newline - > 
 < - ' , 9 ) ; 


NEAREST DIFF:
ELIMINATEDSENTENCE
