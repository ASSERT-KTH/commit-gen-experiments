BLEU SCORE: 0.0167475178542289

TEST MSG: Make CQLTester . createIndex return the index name
GENERATED MSG: Forbid SELECT restrictions and CREATE INDEX over non - frozen UDT columns

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> index 26437c9 . . 5a73c8d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java <nl> @ @ - 29 , 9 + 29 , 12 @ @ import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . concurrent . atomic . AtomicInteger ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> <nl> import com . google . common . base . Objects ; <nl> + import com . google . common . base . Strings ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import org . junit . * ; <nl> import org . slf4j . Logger ; <nl> @ @ - 96 , 6 + 99 , 14 @ @ public abstract class CQLTester <nl> <nl> public static final List < ProtocolVersion > PROTOCOL _ VERSIONS = new ArrayList < > ( ProtocolVersion . SUPPORTED . size ( ) ) ; <nl> <nl> + private static final String CREATE _ INDEX _ NAME _ REGEX = " ( \ \ s * ( \ \ w * | \ " \ \ w * \ " ) \ \ s * ) " ; <nl> + private static final String CREATE _ INDEX _ REGEX = String . format ( " \ \ A \ \ s * CREATE ( ? : \ \ s + CUSTOM ) ? \ \ s + INDEX " + <nl> + " ( ? : \ \ s + IF \ \ s + NOT \ \ s + EXISTS ) ? \ \ s * " + <nl> + " % s ? \ \ s * ON \ \ s + ( % < s \ \ . ) ? % < s \ \ s * " + <nl> + " ( \ \ ( ( ? : \ \ s * \ \ w + \ \ s * \ \ ( ) ? % < s \ \ ) ) ? " , <nl> + CREATE _ INDEX _ NAME _ REGEX ) ; <nl> + private static final Pattern CREATE _ INDEX _ PATTERN = Pattern . compile ( CREATE _ INDEX _ REGEX , Pattern . CASE _ INSENSITIVE ) ; <nl> + <nl> / * * Return the current server version if supported by the driver , else <nl> * the latest that is supported . <nl> * <nl> @ @ - 634 , 15 + 645 , 40 @ @ public abstract class CQLTester <nl> schemaChange ( formattedQuery ) ; <nl> } <nl> <nl> - protected void createIndex ( String query ) <nl> + protected String createIndex ( String query ) <nl> { <nl> - createFormattedIndex ( formatQuery ( query ) ) ; <nl> + String formattedQuery = formatQuery ( query ) ; <nl> + return createFormattedIndex ( formattedQuery ) ; <nl> } <nl> <nl> - protected void createFormattedIndex ( String formattedQuery ) <nl> + protected String createFormattedIndex ( String formattedQuery ) <nl> { <nl> logger . info ( formattedQuery ) ; <nl> + String indexName = getCreateIndexName ( formattedQuery ) ; <nl> schemaChange ( formattedQuery ) ; <nl> + return indexName ; <nl> + } <nl> + <nl> + protected static String getCreateIndexName ( String formattedQuery ) <nl> + { <nl> + Matcher matcher = CREATE _ INDEX _ PATTERN . matcher ( formattedQuery ) ; <nl> + if ( ! matcher . find ( ) ) <nl> + throw new IllegalArgumentException ( " Expected valid create index query but found : " + formattedQuery ) ; <nl> + <nl> + String index = matcher . group ( 2 ) ; <nl> + if ( ! Strings . isNullOrEmpty ( index ) ) <nl> + return index ; <nl> + <nl> + String keyspace = matcher . group ( 5 ) ; <nl> + if ( Strings . isNullOrEmpty ( keyspace ) ) <nl> + throw new IllegalArgumentException ( " Keyspace name should be specified : " + formattedQuery ) ; <nl> + <nl> + String table = matcher . group ( 7 ) ; <nl> + if ( Strings . isNullOrEmpty ( table ) ) <nl> + throw new IllegalArgumentException ( " Table name should be specified : " + formattedQuery ) ; <nl> + <nl> + String column = matcher . group ( 9 ) ; <nl> + return Indexes . getAvailableIndexName ( keyspace , table , Strings . isNullOrEmpty ( column ) ? null : column ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java <nl> index 79cb497 . . b76cc78 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java <nl> @ @ - 119 , 9 + 119 , 9 @ @ public class KeyCacheCqlTest extends CQLTester <nl> } <nl> <nl> @ Override <nl> - protected void createIndex ( String query ) <nl> + protected String createIndex ( String query ) <nl> { <nl> - createFormattedIndex ( formatQuery ( KEYSPACE _ PER _ TEST , query ) ) ; <nl> + return createFormattedIndex ( formatQuery ( KEYSPACE _ PER _ TEST , query ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 246 , 8 + 246 , 8 @ @ public class KeyCacheCqlTest extends CQLTester <nl> String table = createTable ( " CREATE TABLE % s ( " <nl> + commonColumnsDef <nl> + " PRIMARY KEY ( ( part _ key _ a , part _ key _ b ) , clust _ key _ a , clust _ key _ b , clust _ key _ c ) ) " ) ; <nl> - createIndex ( " CREATE INDEX some _ index ON % s ( col _ int ) " ) ; <nl> - insertData ( table , " some _ index " , true ) ; <nl> + String indexName = createIndex ( " CREATE INDEX ON % s ( col _ int ) " ) ; <nl> + insertData ( table , indexName , true ) ; <nl> clearCache ( ) ; <nl> <nl> CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; <nl> @ @ - 331 , 8 + 331 , 8 @ @ public class KeyCacheCqlTest extends CQLTester <nl> String table = createTable ( " CREATE TABLE % s ( " <nl> + commonColumnsDef <nl> + " PRIMARY KEY ( ( part _ key _ a , part _ key _ b ) , clust _ key _ a , clust _ key _ b , clust _ key _ c ) ) " ) ; <nl> - createIndex ( " CREATE INDEX some _ index ON % s ( col _ int ) " ) ; <nl> - insertData ( table , " some _ index " , true ) ; <nl> + String indexName = createIndex ( " CREATE INDEX ON % s ( col _ int ) " ) ; <nl> + insertData ( table , indexName , true ) ; <nl> clearCache ( ) ; <nl> <nl> CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> index 2dbf5ec . . c5fb45d 100644 <nl> - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java <nl> @ @ - 1090 , 12 + 1090 , 12 @ @ public class SecondaryIndexTest extends CQLTester <nl> public void droppingIndexInvalidatesPreparedStatements ( ) throws Throwable <nl> { <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( ( a ) , b ) ) " ) ; <nl> - createIndex ( " CREATE INDEX c _ idx ON % s ( c ) " ) ; <nl> + String indexName = createIndex ( " CREATE INDEX ON % s ( c ) " ) ; <nl> MD5Digest cqlId = prepareStatement ( " SELECT * FROM % s . % s WHERE c = ? " ) . statementId ; <nl> <nl> assertNotNull ( QueryProcessor . instance . getPrepared ( cqlId ) ) ; <nl> <nl> - dropIndex ( " DROP INDEX % s . c _ idx " ) ; <nl> + dropIndex ( " DROP INDEX % s . " + indexName ) ; <nl> <nl> assertNull ( QueryProcessor . instance . getPrepared ( cqlId ) ) ; <nl> } <nl> @ @ - 1428 , 10 + 1428 , 10 @ @ public class SecondaryIndexTest extends CQLTester <nl> Object udt2 = userType ( " a " , 2 ) ; <nl> <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 0 , udt1 ) ; <nl> - execute ( " CREATE INDEX idx ON % s ( v ) " ) ; <nl> + String indexName = createIndex ( " CREATE INDEX ON % s ( v ) " ) ; <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , udt2 ) ; <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , udt1 ) ; <nl> - assertTrue ( waitForIndex ( keyspace ( ) , tableName , " idx " ) ) ; <nl> + assertTrue ( waitForIndex ( keyspace ( ) , tableName , indexName ) ) ; <nl> <nl> assertRows ( execute ( " SELECT * FROM % s WHERE v = ? " , udt1 ) , row ( 1 , udt1 ) , row ( 0 , udt1 ) ) ; <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE v = ? " , udt2 ) ) ; <nl> @ @ - 1439 , 8 + 1439 , 9 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " DELETE FROM % s WHERE k = 0 " ) ; <nl> assertRows ( execute ( " SELECT * FROM % s WHERE v = ? " , udt1 ) , row ( 1 , udt1 ) ) ; <nl> <nl> - dropIndex ( " DROP INDEX % s . idx " ) ; <nl> - assertInvalidMessage ( " Index ' idx ' could not be found " , " DROP INDEX " + KEYSPACE + " . idx " ) ; <nl> + dropIndex ( " DROP INDEX % s . " + indexName ) ; <nl> + assertInvalidMessage ( String . format ( " Index ' % s ' could not be found " , indexName ) , <nl> + String . format ( " DROP INDEX % s . % s " , KEYSPACE , indexName ) ) ; <nl> assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> " SELECT * FROM % s WHERE v = ? " , udt1 ) ; <nl> } <nl> @ @ - 1457 , 10 + 1458 , 10 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , set ( udt1 , udt2 ) ) ; <nl> assertInvalidMessage ( " Frozen collections only support full ( ) " , " CREATE INDEX idx ON % s ( keys ( v ) ) " ) ; <nl> assertInvalidMessage ( " Frozen collections only support full ( ) " , " CREATE INDEX idx ON % s ( values ( v ) ) " ) ; <nl> - execute ( " CREATE INDEX idx ON % s ( full ( v ) ) " ) ; <nl> + String indexName = createIndex ( " CREATE INDEX ON % s ( full ( v ) ) " ) ; <nl> <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 2 , set ( udt2 ) ) ; <nl> - assertTrue ( waitForIndex ( keyspace ( ) , tableName , " idx " ) ) ; <nl> + assertTrue ( waitForIndex ( keyspace ( ) , tableName , indexName ) ) ; <nl> <nl> assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ; <nl> @ @ - 1471 , 8 + 1472 , 9 @ @ public class SecondaryIndexTest extends CQLTester <nl> execute ( " DELETE FROM % s WHERE k = 2 " ) ; <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE v = ? " , set ( udt2 ) ) ) ; <nl> <nl> - dropIndex ( " DROP INDEX % s . idx " ) ; <nl> - assertInvalidMessage ( " Index ' idx ' could not be found " , " DROP INDEX " + KEYSPACE + " . idx " ) ; <nl> + dropIndex ( " DROP INDEX % s . " + indexName ) ; <nl> + assertInvalidMessage ( String . format ( " Index ' % s ' could not be found " , indexName ) , <nl> + String . format ( " DROP INDEX % s . % s " , KEYSPACE , indexName ) ) ; <nl> assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ; <nl> } <nl> @ @ - 1488 , 14 + 1490 , 14 @ @ public class SecondaryIndexTest extends CQLTester <nl> <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , set ( udt1 ) ) ; <nl> assertInvalidMessage ( " Cannot create index on keys of column v with non - map type " , <nl> - " CREATE INDEX idx ON % s ( keys ( v ) ) " ) ; <nl> + " CREATE INDEX ON % s ( keys ( v ) ) " ) ; <nl> assertInvalidMessage ( " full ( ) indexes can only be created on frozen collections " , <nl> - " CREATE INDEX idx ON % s ( full ( v ) ) " ) ; <nl> - execute ( " CREATE INDEX idx ON % s ( values ( v ) ) " ) ; <nl> + " CREATE INDEX ON % s ( full ( v ) ) " ) ; <nl> + String indexName = createIndex ( " CREATE INDEX ON % s ( values ( v ) ) " ) ; <nl> <nl> execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 2 , set ( udt2 ) ) ; <nl> execute ( " UPDATE % s SET v = v + ? WHERE k = ? " , set ( udt2 ) , 1 ) ; <nl> - assertTrue ( waitForIndex ( keyspace ( ) , tableName , " idx " ) ) ; <nl> + assertTrue ( waitForIndex ( keyspace ( ) , tableName , indexName ) ) ; <nl> <nl> assertRows ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) , row ( 1 , set ( udt1 , udt2 ) ) ) ; <nl> assertRows ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt2 ) , row ( 1 , set ( udt1 , udt2 ) ) , row ( 2 , set ( udt2 ) ) ) ; <nl> @ @ - 1504 , 8 + 1506 , 9 @ @ public class SecondaryIndexTest extends CQLTester <nl> assertEmpty ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ) ; <nl> assertRows ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt2 ) , row ( 2 , set ( udt2 ) ) ) ; <nl> <nl> - dropIndex ( " DROP INDEX % s . idx " ) ; <nl> - assertInvalidMessage ( " Index ' idx ' could not be found " , " DROP INDEX " + KEYSPACE + " . idx " ) ; <nl> + dropIndex ( " DROP INDEX % s . " + indexName ) ; <nl> + assertInvalidMessage ( String . format ( " Index ' % s ' could not be found " , indexName ) , <nl> + String . format ( " DROP INDEX % s . % s " , KEYSPACE , indexName ) ) ; <nl> assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , <nl> " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ; <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> index b6b401d . . ed999fa 100644 <nl> - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class CustomIndexTest extends CQLTester <nl> / / test to ensure that we don ' t deadlock when flushing CFS backed custom indexers <nl> / / see CASSANDRA - 10181 <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; <nl> - createIndex ( " CREATE CUSTOM INDEX myindex ON % s ( c ) USING ' org . apache . cassandra . index . internal . CustomCassandraIndex ' " ) ; <nl> + createIndex ( " CREATE CUSTOM INDEX ON % s ( c ) USING ' org . apache . cassandra . index . internal . CustomCassandraIndex ' " ) ; <nl> <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 0 , 2 ) ; <nl> execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 0 , 1 ) ; <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class CustomIndexTest extends CQLTester <nl> / / deadlocks and times out the test in the face of the synchronisation <nl> / / issues described in the comments on CASSANDRA - 9669 <nl> createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a ) ) " ) ; <nl> - createIndex ( " CREATE CUSTOM INDEX b _ index ON % s ( b ) USING ' org . apache . cassandra . index . StubIndex ' " ) ; <nl> + createIndex ( " CREATE CUSTOM INDEX ON % s ( b ) USING ' org . apache . cassandra . index . StubIndex ' " ) ; <nl> execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 0 , 1 , 2 ) ; <nl> getCurrentColumnFamilyStore ( ) . truncateBlocking ( ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cql3 / CQLTester . java b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 index 26437c9 . . 5a73c8d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / CQLTester . java 
 @ @ - 29 , 9 + 29 , 12 @ @ import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . concurrent . atomic . AtomicInteger ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 
 import com . google . common . base . Objects ; 
 + import com . google . common . base . Strings ; 
 import com . google . common . collect . ImmutableSet ; 
 import org . junit . * ; 
 import org . slf4j . Logger ; 
 @ @ - 96 , 6 + 99 , 14 @ @ public abstract class CQLTester 
 
 public static final List < ProtocolVersion > PROTOCOL _ VERSIONS = new ArrayList < > ( ProtocolVersion . SUPPORTED . size ( ) ) ; 
 
 + private static final String CREATE _ INDEX _ NAME _ REGEX = " ( \ \ s * ( \ \ w * | \ " \ \ w * \ " ) \ \ s * ) " ; 
 + private static final String CREATE _ INDEX _ REGEX = String . format ( " \ \ A \ \ s * CREATE ( ? : \ \ s + CUSTOM ) ? \ \ s + INDEX " + 
 + " ( ? : \ \ s + IF \ \ s + NOT \ \ s + EXISTS ) ? \ \ s * " + 
 + " % s ? \ \ s * ON \ \ s + ( % < s \ \ . ) ? % < s \ \ s * " + 
 + " ( \ \ ( ( ? : \ \ s * \ \ w + \ \ s * \ \ ( ) ? % < s \ \ ) ) ? " , 
 + CREATE _ INDEX _ NAME _ REGEX ) ; 
 + private static final Pattern CREATE _ INDEX _ PATTERN = Pattern . compile ( CREATE _ INDEX _ REGEX , Pattern . CASE _ INSENSITIVE ) ; 
 + 
 / * * Return the current server version if supported by the driver , else 
 * the latest that is supported . 
 * 
 @ @ - 634 , 15 + 645 , 40 @ @ public abstract class CQLTester 
 schemaChange ( formattedQuery ) ; 
 } 
 
 - protected void createIndex ( String query ) 
 + protected String createIndex ( String query ) 
 { 
 - createFormattedIndex ( formatQuery ( query ) ) ; 
 + String formattedQuery = formatQuery ( query ) ; 
 + return createFormattedIndex ( formattedQuery ) ; 
 } 
 
 - protected void createFormattedIndex ( String formattedQuery ) 
 + protected String createFormattedIndex ( String formattedQuery ) 
 { 
 logger . info ( formattedQuery ) ; 
 + String indexName = getCreateIndexName ( formattedQuery ) ; 
 schemaChange ( formattedQuery ) ; 
 + return indexName ; 
 + } 
 + 
 + protected static String getCreateIndexName ( String formattedQuery ) 
 + { 
 + Matcher matcher = CREATE _ INDEX _ PATTERN . matcher ( formattedQuery ) ; 
 + if ( ! matcher . find ( ) ) 
 + throw new IllegalArgumentException ( " Expected valid create index query but found : " + formattedQuery ) ; 
 + 
 + String index = matcher . group ( 2 ) ; 
 + if ( ! Strings . isNullOrEmpty ( index ) ) 
 + return index ; 
 + 
 + String keyspace = matcher . group ( 5 ) ; 
 + if ( Strings . isNullOrEmpty ( keyspace ) ) 
 + throw new IllegalArgumentException ( " Keyspace name should be specified : " + formattedQuery ) ; 
 + 
 + String table = matcher . group ( 7 ) ; 
 + if ( Strings . isNullOrEmpty ( table ) ) 
 + throw new IllegalArgumentException ( " Table name should be specified : " + formattedQuery ) ; 
 + 
 + String column = matcher . group ( 9 ) ; 
 + return Indexes . getAvailableIndexName ( keyspace , table , Strings . isNullOrEmpty ( column ) ? null : column ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java 
 index 79cb497 . . b76cc78 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / KeyCacheCqlTest . java 
 @ @ - 119 , 9 + 119 , 9 @ @ public class KeyCacheCqlTest extends CQLTester 
 } 
 
 @ Override 
 - protected void createIndex ( String query ) 
 + protected String createIndex ( String query ) 
 { 
 - createFormattedIndex ( formatQuery ( KEYSPACE _ PER _ TEST , query ) ) ; 
 + return createFormattedIndex ( formatQuery ( KEYSPACE _ PER _ TEST , query ) ) ; 
 } 
 
 @ Override 
 @ @ - 246 , 8 + 246 , 8 @ @ public class KeyCacheCqlTest extends CQLTester 
 String table = createTable ( " CREATE TABLE % s ( " 
 + commonColumnsDef 
 + " PRIMARY KEY ( ( part _ key _ a , part _ key _ b ) , clust _ key _ a , clust _ key _ b , clust _ key _ c ) ) " ) ; 
 - createIndex ( " CREATE INDEX some _ index ON % s ( col _ int ) " ) ; 
 - insertData ( table , " some _ index " , true ) ; 
 + String indexName = createIndex ( " CREATE INDEX ON % s ( col _ int ) " ) ; 
 + insertData ( table , indexName , true ) ; 
 clearCache ( ) ; 
 
 CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; 
 @ @ - 331 , 8 + 331 , 8 @ @ public class KeyCacheCqlTest extends CQLTester 
 String table = createTable ( " CREATE TABLE % s ( " 
 + commonColumnsDef 
 + " PRIMARY KEY ( ( part _ key _ a , part _ key _ b ) , clust _ key _ a , clust _ key _ b , clust _ key _ c ) ) " ) ; 
 - createIndex ( " CREATE INDEX some _ index ON % s ( col _ int ) " ) ; 
 - insertData ( table , " some _ index " , true ) ; 
 + String indexName = createIndex ( " CREATE INDEX ON % s ( col _ int ) " ) ; 
 + insertData ( table , indexName , true ) ; 
 clearCache ( ) ; 
 
 CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 index 2dbf5ec . . c5fb45d 100644 
 - - - a / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / cql3 / validation / entities / SecondaryIndexTest . java 
 @ @ - 1090 , 12 + 1090 , 12 @ @ public class SecondaryIndexTest extends CQLTester 
 public void droppingIndexInvalidatesPreparedStatements ( ) throws Throwable 
 { 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( ( a ) , b ) ) " ) ; 
 - createIndex ( " CREATE INDEX c _ idx ON % s ( c ) " ) ; 
 + String indexName = createIndex ( " CREATE INDEX ON % s ( c ) " ) ; 
 MD5Digest cqlId = prepareStatement ( " SELECT * FROM % s . % s WHERE c = ? " ) . statementId ; 
 
 assertNotNull ( QueryProcessor . instance . getPrepared ( cqlId ) ) ; 
 
 - dropIndex ( " DROP INDEX % s . c _ idx " ) ; 
 + dropIndex ( " DROP INDEX % s . " + indexName ) ; 
 
 assertNull ( QueryProcessor . instance . getPrepared ( cqlId ) ) ; 
 } 
 @ @ - 1428 , 10 + 1428 , 10 @ @ public class SecondaryIndexTest extends CQLTester 
 Object udt2 = userType ( " a " , 2 ) ; 
 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 0 , udt1 ) ; 
 - execute ( " CREATE INDEX idx ON % s ( v ) " ) ; 
 + String indexName = createIndex ( " CREATE INDEX ON % s ( v ) " ) ; 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , udt2 ) ; 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , udt1 ) ; 
 - assertTrue ( waitForIndex ( keyspace ( ) , tableName , " idx " ) ) ; 
 + assertTrue ( waitForIndex ( keyspace ( ) , tableName , indexName ) ) ; 
 
 assertRows ( execute ( " SELECT * FROM % s WHERE v = ? " , udt1 ) , row ( 1 , udt1 ) , row ( 0 , udt1 ) ) ; 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE v = ? " , udt2 ) ) ; 
 @ @ - 1439 , 8 + 1439 , 9 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " DELETE FROM % s WHERE k = 0 " ) ; 
 assertRows ( execute ( " SELECT * FROM % s WHERE v = ? " , udt1 ) , row ( 1 , udt1 ) ) ; 
 
 - dropIndex ( " DROP INDEX % s . idx " ) ; 
 - assertInvalidMessage ( " Index ' idx ' could not be found " , " DROP INDEX " + KEYSPACE + " . idx " ) ; 
 + dropIndex ( " DROP INDEX % s . " + indexName ) ; 
 + assertInvalidMessage ( String . format ( " Index ' % s ' could not be found " , indexName ) , 
 + String . format ( " DROP INDEX % s . % s " , KEYSPACE , indexName ) ) ; 
 assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 " SELECT * FROM % s WHERE v = ? " , udt1 ) ; 
 } 
 @ @ - 1457 , 10 + 1458 , 10 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , set ( udt1 , udt2 ) ) ; 
 assertInvalidMessage ( " Frozen collections only support full ( ) " , " CREATE INDEX idx ON % s ( keys ( v ) ) " ) ; 
 assertInvalidMessage ( " Frozen collections only support full ( ) " , " CREATE INDEX idx ON % s ( values ( v ) ) " ) ; 
 - execute ( " CREATE INDEX idx ON % s ( full ( v ) ) " ) ; 
 + String indexName = createIndex ( " CREATE INDEX ON % s ( full ( v ) ) " ) ; 
 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 2 , set ( udt2 ) ) ; 
 - assertTrue ( waitForIndex ( keyspace ( ) , tableName , " idx " ) ) ; 
 + assertTrue ( waitForIndex ( keyspace ( ) , tableName , indexName ) ) ; 
 
 assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ; 
 @ @ - 1471 , 8 + 1472 , 9 @ @ public class SecondaryIndexTest extends CQLTester 
 execute ( " DELETE FROM % s WHERE k = 2 " ) ; 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE v = ? " , set ( udt2 ) ) ) ; 
 
 - dropIndex ( " DROP INDEX % s . idx " ) ; 
 - assertInvalidMessage ( " Index ' idx ' could not be found " , " DROP INDEX " + KEYSPACE + " . idx " ) ; 
 + dropIndex ( " DROP INDEX % s . " + indexName ) ; 
 + assertInvalidMessage ( String . format ( " Index ' % s ' could not be found " , indexName ) , 
 + String . format ( " DROP INDEX % s . % s " , KEYSPACE , indexName ) ) ; 
 assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ; 
 } 
 @ @ - 1488 , 14 + 1490 , 14 @ @ public class SecondaryIndexTest extends CQLTester 
 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 1 , set ( udt1 ) ) ; 
 assertInvalidMessage ( " Cannot create index on keys of column v with non - map type " , 
 - " CREATE INDEX idx ON % s ( keys ( v ) ) " ) ; 
 + " CREATE INDEX ON % s ( keys ( v ) ) " ) ; 
 assertInvalidMessage ( " full ( ) indexes can only be created on frozen collections " , 
 - " CREATE INDEX idx ON % s ( full ( v ) ) " ) ; 
 - execute ( " CREATE INDEX idx ON % s ( values ( v ) ) " ) ; 
 + " CREATE INDEX ON % s ( full ( v ) ) " ) ; 
 + String indexName = createIndex ( " CREATE INDEX ON % s ( values ( v ) ) " ) ; 
 
 execute ( " INSERT INTO % s ( k , v ) VALUES ( ? , ? ) " , 2 , set ( udt2 ) ) ; 
 execute ( " UPDATE % s SET v = v + ? WHERE k = ? " , set ( udt2 ) , 1 ) ; 
 - assertTrue ( waitForIndex ( keyspace ( ) , tableName , " idx " ) ) ; 
 + assertTrue ( waitForIndex ( keyspace ( ) , tableName , indexName ) ) ; 
 
 assertRows ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) , row ( 1 , set ( udt1 , udt2 ) ) ) ; 
 assertRows ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt2 ) , row ( 1 , set ( udt1 , udt2 ) ) , row ( 2 , set ( udt2 ) ) ) ; 
 @ @ - 1504 , 8 + 1506 , 9 @ @ public class SecondaryIndexTest extends CQLTester 
 assertEmpty ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ) ; 
 assertRows ( execute ( " SELECT * FROM % s WHERE v CONTAINS ? " , udt2 ) , row ( 2 , set ( udt2 ) ) ) ; 
 
 - dropIndex ( " DROP INDEX % s . idx " ) ; 
 - assertInvalidMessage ( " Index ' idx ' could not be found " , " DROP INDEX " + KEYSPACE + " . idx " ) ; 
 + dropIndex ( " DROP INDEX % s . " + indexName ) ; 
 + assertInvalidMessage ( String . format ( " Index ' % s ' could not be found " , indexName ) , 
 + String . format ( " DROP INDEX % s . % s " , KEYSPACE , indexName ) ) ; 
 assertInvalidMessage ( StatementRestrictions . REQUIRES _ ALLOW _ FILTERING _ MESSAGE , 
 " SELECT * FROM % s WHERE v CONTAINS ? " , udt1 ) ; 
 } 
 diff - - git a / test / unit / org / apache / cassandra / index / CustomIndexTest . java b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 index b6b401d . . ed999fa 100644 
 - - - a / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 + + + b / test / unit / org / apache / cassandra / index / CustomIndexTest . java 
 @ @ - 68 , 7 + 68 , 7 @ @ public class CustomIndexTest extends CQLTester 
 / / test to ensure that we don ' t deadlock when flushing CFS backed custom indexers 
 / / see CASSANDRA - 10181 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , d int , PRIMARY KEY ( a , b ) ) " ) ; 
 - createIndex ( " CREATE CUSTOM INDEX myindex ON % s ( c ) USING ' org . apache . cassandra . index . internal . CustomCassandraIndex ' " ) ; 
 + createIndex ( " CREATE CUSTOM INDEX ON % s ( c ) USING ' org . apache . cassandra . index . internal . CustomCassandraIndex ' " ) ; 
 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 0 , 0 , 2 ) ; 
 execute ( " INSERT INTO % s ( a , b , c , d ) VALUES ( ? , ? , ? , ? ) " , 0 , 1 , 0 , 1 ) ; 
 @ @ - 81 , 7 + 81 , 7 @ @ public class CustomIndexTest extends CQLTester 
 / / deadlocks and times out the test in the face of the synchronisation 
 / / issues described in the comments on CASSANDRA - 9669 
 createTable ( " CREATE TABLE % s ( a int , b int , c int , PRIMARY KEY ( a ) ) " ) ; 
 - createIndex ( " CREATE CUSTOM INDEX b _ index ON % s ( b ) USING ' org . apache . cassandra . index . StubIndex ' " ) ; 
 + createIndex ( " CREATE CUSTOM INDEX ON % s ( b ) USING ' org . apache . cassandra . index . StubIndex ' " ) ; 
 execute ( " INSERT INTO % s ( a , b , c ) VALUES ( ? , ? , ? ) " , 0 , 1 , 2 ) ; 
 getCurrentColumnFamilyStore ( ) . truncateBlocking ( ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
