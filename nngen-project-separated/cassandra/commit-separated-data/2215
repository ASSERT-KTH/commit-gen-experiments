BLEU SCORE: 0.038261660656802664

TEST MSG: Fix failing cqlsh formatting tests
GENERATED MSG: Ninja : Adjust cqlsh unit - tests for 2 . 1

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d42c100 . . ae88957 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 0 . 10 <nl> + * ( cqlsh ) Fix failing cqlsh formatting tests ( CASSANDRA - 7703 ) <nl> * Fix MS expiring map timeout for Paxos messages ( CASSANDRA - 7752 ) <nl> * Do not flush on truncate if durable _ writes is false ( CASSANDRA - 7750 ) <nl> * Give CRR a default input _ cql Statement ( CASSANDRA - 7226 ) <nl> diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> index f89127d . . e680cab 100644 <nl> - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py <nl> @ @ - 21 , 7 + 21 , 7 @ @ from _ _ future _ _ import with _ statement <nl> <nl> import re <nl> from itertools import izip <nl> - from . basecase import ( BaseTestCase , cqlshlog , dedent , at _ a _ time , cql , <nl> + from . basecase import ( BaseTestCase , cqlshlog , dedent , at _ a _ time , <nl> TEST _ HOST , TEST _ PORT ) <nl> from . cassconnect import ( get _ test _ keyspace , testrun _ cqlsh , testcall _ cqlsh , <nl> cassandra _ cursor , split _ cql _ commands , quote _ name ) <nl> @ @ - 31 , 7 + 31 , 9 @ @ from . ansi _ colors import ( ColoredText , lookup _ colorcode , lookup _ colorname , <nl> CONTROL _ C = ' \ x03 ' <nl> CONTROL _ D = ' \ x04 ' <nl> <nl> + <nl> class TestCqlshOutput ( BaseTestCase ) : <nl> + <nl> def setUp ( self ) : <nl> pass <nl> <nl> @ @ - 93 , 33 + 95 , 28 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> with testrun _ cqlsh ( tty = True , env = { ' TERM ' : termname } ) as c : <nl> c . send ( ' select * from has _ all _ types ; \ n ' ) <nl> self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> - c . send ( ' select * from has _ value _ encoding _ errors ; \ n ' ) <nl> - self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> c . send ( ' select count ( * ) from has _ all _ types ; \ n ' ) <nl> self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> c . send ( ' totally invalid cql ; \ n ' ) <nl> self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> <nl> def test _ no _ prompt _ or _ colors _ output ( self ) : <nl> - # CQL queries and number of lines expected in output : <nl> - queries = ( ( ' select * from has _ all _ types limit 1 ; ' , 7 ) , <nl> - ( ' select * from has _ value _ encoding _ errors limit 1 ; ' , 8 ) ) <nl> for termname in ( ' ' , ' dumb ' , ' vt100 ' , ' xterm ' ) : <nl> cqlshlog . debug ( ' TERM = % r ' % termname ) <nl> - for cql , lines _ expected in queries : <nl> - output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , <nl> - tty = False , input = cql + ' \ n ' ) <nl> - output = output . splitlines ( ) <nl> - for line in output : <nl> - self . assertNoHasColors ( line ) <nl> - self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) <nl> - self . assertEqual ( len ( output ) , lines _ expected , <nl> - msg = ' output : % r ' % ' \ n ' . join ( output ) ) <nl> - self . assertEqual ( output [ 0 ] , ' ' ) <nl> - self . assertNicelyFormattedTableHeader ( output [ 1 ] ) <nl> - self . assertNicelyFormattedTableRule ( output [ 2 ] ) <nl> - self . assertNicelyFormattedTableData ( output [ 3 ] ) <nl> - self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) <nl> + query = ' select * from has _ all _ types limit 1 ; ' <nl> + output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , <nl> + tty = False , input = query + ' \ n ' ) <nl> + output = output . splitlines ( ) <nl> + for line in output : <nl> + self . assertNoHasColors ( line ) <nl> + self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) <nl> + self . assertTrue ( 6 < = len ( output ) < = 8 , <nl> + msg = ' output : % r ' % ' \ n ' . join ( output ) ) <nl> + self . assertEqual ( output [ 0 ] , ' ' ) <nl> + self . assertNicelyFormattedTableHeader ( output [ 1 ] ) <nl> + self . assertNicelyFormattedTableRule ( output [ 2 ] ) <nl> + self . assertNicelyFormattedTableData ( output [ 3 ] ) <nl> + self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) <nl> <nl> def test _ color _ output ( self ) : <nl> for termname in ( ' xterm ' , ' unknown - garbage ' ) : <nl> @ @ - 127 , 8 + 124 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> with testrun _ cqlsh ( tty = True , env = { ' TERM ' : termname } ) as c : <nl> c . send ( ' select * from has _ all _ types ; \ n ' ) <nl> self . assertHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> - c . send ( ' select * from has _ value _ encoding _ errors ; \ n ' ) <nl> - self . assertHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> c . send ( ' select count ( * ) from has _ all _ types ; \ n ' ) <nl> self . assertHasColors ( c . read _ to _ next _ prompt ( ) ) <nl> c . send ( ' totally invalid cql ; \ n ' ) <nl> @ @ - 438 , 7 + 433 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> <nl> def test _ string _ output _ ascii ( self ) : <nl> self . assertCqlverQueriesGiveColoredOutput ( ( <nl> - ( " select * from ascii _ with _ invalid _ and _ special _ chars where k in ( 0 , 1 , 2 , 3 , 4 ) ; " , r " " " <nl> + ( " select * from ascii _ with _ special _ chars where k in ( 0 , 1 , 2 , 3 ) ; " , r " " " <nl> k | val <nl> M MMM <nl> - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> @ @ - 449 , 13 + 444 , 11 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> G YYYYYYmmYYYYYYYYmmmmY <nl> 2 | \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 <nl> G mmmmmmmmmmmmmmmmmmmmmmmmYYYYYYYYYYYYYmmmmmmmm <nl> - 3 | \ xfe \ xffbyte order mark <nl> - G mmmmmmmmYYYYYYYYYYYYYYY <nl> - 4 | fake special chars \ x00 \ n <nl> + 3 | fake special chars \ x00 \ n <nl> G YYYYYYYYYYYYYYYYYYYYYYYY <nl> <nl> <nl> - ( 5 rows ) <nl> + ( 4 rows ) <nl> nnnnnnnn <nl> " " " ) , <nl> ) , cqlver = 3 ) <nl> @ @ - 516 , 55 + 509 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> " " " ) , <nl> ) , cqlver = 3 ) <nl> <nl> - def test _ colname _ decoding _ errors ( self ) : <nl> - # not clear how to achieve this situation in the first place . the <nl> - # validator works pretty well , and we can ' t change the comparator <nl> - # after insertion . <nl> - # <nl> - # guess we could monkey - patch cqlsh or python - cql source to <nl> - # explicitly generate an exception on the deserialization of type X . . <nl> - pass <nl> - <nl> - def test _ colval _ decoding _ errors ( self ) : <nl> - self . assertCqlverQueriesGiveColoredOutput ( ( <nl> - ( " select * from has _ value _ encoding _ errors ; " , r " " " <nl> - pkey | utf8col <nl> - MMMM MMMMMMM <nl> - - - - - - - + - - - - - - - - - - - - - - - - - - - - <nl> - <nl> - A | ' \ x00 \ xff \ x00 \ xff ' <nl> - Y RRRRRRRRRRRRRRRRRR <nl> - <nl> - <nl> - ( 1 rows ) <nl> - nnnnnnnn <nl> - <nl> - <nl> - Failed to decode value ' \ x00 \ xff \ x00 \ xff ' ( for column ' utf8col ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte <nl> - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR <nl> - " " " ) , <nl> - ) , cqlver = 3 ) <nl> - <nl> - def test _ key _ decoding _ errors ( self ) : <nl> - self . assertCqlverQueriesGiveColoredOutput ( ( <nl> - ( " select * from has _ key _ encoding _ errors ; " , r " " " <nl> - pkey | col <nl> - MMMM MMM <nl> - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - <nl> - <nl> - ' \ x00 \ xff \ x02 \ x8f ' | whatever <nl> - RRRRRRRRRRRRRRRRRR YYYYYYYY <nl> - <nl> - <nl> - ( 1 rows ) <nl> - nnnnnnnn <nl> - <nl> - <nl> - Failed to decode value ' \ x00 \ xff \ x02 \ x8f ' ( for column ' pkey ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte <nl> - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR <nl> - " " " ) , <nl> - ) , cqlver = 3 ) <nl> - <nl> def test _ prompt ( self ) : <nl> with testrun _ cqlsh ( tty = True , keyspace = None , cqlver = 3 ) as c : <nl> self . assertEqual ( c . output _ header . splitlines ( ) [ - 1 ] , ' cqlsh > ' ) <nl> @ @ - 652 , 19 + 596 , 19 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> uuidcol uuid , <nl> varcharcol text , <nl> varintcol varint , <nl> - PRIMARY KEY ( num ) <nl> + PRIMARY KEY ( ( num ) ) <nl> ) WITH <nl> bloom _ filter _ fp _ chance = 0 . 010000 AND <nl> caching = ' KEYS _ ONLY ' AND <nl> comment = ' ' AND <nl> - dclocal _ read _ repair _ chance = 0 . 000000 AND <nl> + dclocal _ read _ repair _ chance = 0 . 100000 AND <nl> gc _ grace _ seconds = 864000 AND <nl> index _ interval = 128 AND <nl> - read _ repair _ chance = 0 . 100000 AND <nl> + read _ repair _ chance = 0 . 000000 AND <nl> replicate _ on _ write = ' true ' AND <nl> populate _ io _ cache _ on _ flush = ' false ' AND <nl> default _ time _ to _ live = 0 AND <nl> - speculative _ retry = ' NONE ' AND <nl> + speculative _ retry = ' 99 . 0PERCENTILE ' AND <nl> memtable _ flush _ period _ in _ ms = 0 AND <nl> compaction = { ' class ' : ' SizeTieredCompactionStrategy ' } AND <nl> compression = { ' sstable _ compression ' : ' LZ4Compressor ' } ; <nl> @ @ - 705 , 7 + 649 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> cfnames = section . group ( ' cfnames ' ) <nl> self . assertNotIn ( ' \ n \ n ' , cfnames ) <nl> if ksname = = ks : <nl> - self . assertIn ( ' ascii _ with _ invalid _ and _ special _ chars ' , cfnames ) <nl> + self . assertIn ( ' ascii _ with _ special _ chars ' , cfnames ) <nl> <nl> self . assertIn ( ' system ' , ksnames ) <nl> self . assertIn ( quote _ name ( ' 3 . 0 . 0 ' , ks ) , ksnames ) <nl> @ @ - 721 , 7 + 665 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> self . assertEqual ( output [ 0 ] , ' \ n ' ) <nl> self . assertEqual ( output [ - 1 ] , ' \ n ' ) <nl> self . assertNotIn ( ' Keyspace % s ' % quote _ name ( ' 3 . 0 . 0 ' , ks ) , output ) <nl> - self . assertIn ( ' has _ value _ encoding _ errors ' , output ) <nl> self . assertIn ( ' undefined _ values _ table ' , output ) <nl> <nl> def test _ describe _ cluster _ output ( self ) : <nl> @ @ - 801 , 8 + 744 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : <nl> <nl> def test _ help _ types ( self ) : <nl> with testrun _ cqlsh ( tty = True ) as c : <nl> - output = c . cmd _ and _ response ( ' help types ' ) <nl> - <nl> + c . cmd _ and _ response ( ' help types ' ) <nl> <nl> def test _ help ( self ) : <nl> pass <nl> diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init . cql b / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> index e92d5d0 . . f63811f 100644 <nl> - - - a / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> + + + b / pylib / cqlshlib / test / test _ keyspace _ init . cql <nl> @ @ - 52 , 24 + 52 , 6 @ @ VALUES ( 4 , blobAsInt ( 0x ) , ' ' , blobAsBigint ( 0x ) , 0x , blobAsBoolean ( 0x ) , blobAsDec <nl> blobAsVarint ( 0x ) ) ; <nl> <nl> <nl> - CREATE TABLE has _ value _ encoding _ errors ( <nl> - pkey ascii PRIMARY KEY , <nl> - utf8col blob <nl> - ) ; <nl> - <nl> - INSERT INTO has _ value _ encoding _ errors ( pkey , utf8col ) VALUES ( ' A ' , 0x00ff00ff ) ; <nl> - ALTER TABLE has _ value _ encoding _ errors ALTER utf8col TYPE text ; <nl> - <nl> - CREATE TABLE has _ key _ encoding _ errors ( <nl> - pkey blob PRIMARY KEY , <nl> - col text <nl> - ) ; <nl> - <nl> - INSERT INTO has _ key _ encoding _ errors ( pkey , col ) VALUES ( 0x00ff028f , ' whatever ' ) ; <nl> - ALTER TABLE has _ key _ encoding _ errors ALTER pkey TYPE text ; <nl> - <nl> - <nl> - <nl> CREATE TABLE empty _ table ( <nl> lonelykey float primary key , <nl> lonelycol text <nl> @ @ - 130 , 23 + 112 , 19 @ @ INSERT INTO undefined _ values _ table ( k , c ) VALUES ( ' k2 ' , ' c2 ' ) ; <nl> <nl> <nl> <nl> - CREATE TABLE ascii _ with _ invalid _ and _ special _ chars ( <nl> + CREATE TABLE ascii _ with _ special _ chars ( <nl> k int PRIMARY KEY , <nl> - val blob <nl> + val ascii <nl> ) ; <nl> <nl> - - " newline : \ n " <nl> - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 0 , 0x6e65776c696e653a0a ) ; <nl> + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 0 , blobAsAscii ( 0x6e65776c696e653a0a ) ) ; <nl> - - " return \ rand null \ 0 ! " <nl> - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 1 , 0x72657475726e0d616e64206e756c6c0021 ) ; <nl> + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 1 , blobAsAscii ( 0x72657475726e0d616e64206e756c6c0021 ) ) ; <nl> - - " \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 " <nl> - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 2 , 0x000102030405636f6e74726f6c2063686172730607 ) ; <nl> - - - " \ xfe \ xffbyte order mark " <nl> - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 3 , 0xfeff62797465206f72646572206d61726b ) ; <nl> + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 2 , blobAsAscii ( 0x000102030405636f6e74726f6c2063686172730607 ) ) ; <nl> - - " fake special chars \ \ x00 \ \ n " <nl> - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 4 , 0x66616b65207370656369616c2063686172735c7830305c6e ) ; <nl> - <nl> - ALTER TABLE ascii _ with _ invalid _ and _ special _ chars ALTER val TYPE ascii ; <nl> + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 3 , blobAsAscii ( 0x66616b65207370656369616c2063686172735c7830305c6e ) ) ; <nl> <nl> <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d42c100 . . ae88957 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 0 . 10 
 + * ( cqlsh ) Fix failing cqlsh formatting tests ( CASSANDRA - 7703 ) 
 * Fix MS expiring map timeout for Paxos messages ( CASSANDRA - 7752 ) 
 * Do not flush on truncate if durable _ writes is false ( CASSANDRA - 7750 ) 
 * Give CRR a default input _ cql Statement ( CASSANDRA - 7226 ) 
 diff - - git a / pylib / cqlshlib / test / test _ cqlsh _ output . py b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 index f89127d . . e680cab 100644 
 - - - a / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 + + + b / pylib / cqlshlib / test / test _ cqlsh _ output . py 
 @ @ - 21 , 7 + 21 , 7 @ @ from _ _ future _ _ import with _ statement 
 
 import re 
 from itertools import izip 
 - from . basecase import ( BaseTestCase , cqlshlog , dedent , at _ a _ time , cql , 
 + from . basecase import ( BaseTestCase , cqlshlog , dedent , at _ a _ time , 
 TEST _ HOST , TEST _ PORT ) 
 from . cassconnect import ( get _ test _ keyspace , testrun _ cqlsh , testcall _ cqlsh , 
 cassandra _ cursor , split _ cql _ commands , quote _ name ) 
 @ @ - 31 , 7 + 31 , 9 @ @ from . ansi _ colors import ( ColoredText , lookup _ colorcode , lookup _ colorname , 
 CONTROL _ C = ' \ x03 ' 
 CONTROL _ D = ' \ x04 ' 
 
 + 
 class TestCqlshOutput ( BaseTestCase ) : 
 + 
 def setUp ( self ) : 
 pass 
 
 @ @ - 93 , 33 + 95 , 28 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 with testrun _ cqlsh ( tty = True , env = { ' TERM ' : termname } ) as c : 
 c . send ( ' select * from has _ all _ types ; \ n ' ) 
 self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) 
 - c . send ( ' select * from has _ value _ encoding _ errors ; \ n ' ) 
 - self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) 
 c . send ( ' select count ( * ) from has _ all _ types ; \ n ' ) 
 self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) 
 c . send ( ' totally invalid cql ; \ n ' ) 
 self . assertNoHasColors ( c . read _ to _ next _ prompt ( ) ) 
 
 def test _ no _ prompt _ or _ colors _ output ( self ) : 
 - # CQL queries and number of lines expected in output : 
 - queries = ( ( ' select * from has _ all _ types limit 1 ; ' , 7 ) , 
 - ( ' select * from has _ value _ encoding _ errors limit 1 ; ' , 8 ) ) 
 for termname in ( ' ' , ' dumb ' , ' vt100 ' , ' xterm ' ) : 
 cqlshlog . debug ( ' TERM = % r ' % termname ) 
 - for cql , lines _ expected in queries : 
 - output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , 
 - tty = False , input = cql + ' \ n ' ) 
 - output = output . splitlines ( ) 
 - for line in output : 
 - self . assertNoHasColors ( line ) 
 - self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) 
 - self . assertEqual ( len ( output ) , lines _ expected , 
 - msg = ' output : % r ' % ' \ n ' . join ( output ) ) 
 - self . assertEqual ( output [ 0 ] , ' ' ) 
 - self . assertNicelyFormattedTableHeader ( output [ 1 ] ) 
 - self . assertNicelyFormattedTableRule ( output [ 2 ] ) 
 - self . assertNicelyFormattedTableData ( output [ 3 ] ) 
 - self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) 
 + query = ' select * from has _ all _ types limit 1 ; ' 
 + output , result = testcall _ cqlsh ( prompt = None , env = { ' TERM ' : termname } , 
 + tty = False , input = query + ' \ n ' ) 
 + output = output . splitlines ( ) 
 + for line in output : 
 + self . assertNoHasColors ( line ) 
 + self . assertNotRegexpMatches ( line , r ' ^ cqlsh \ S * > ' ) 
 + self . assertTrue ( 6 < = len ( output ) < = 8 , 
 + msg = ' output : % r ' % ' \ n ' . join ( output ) ) 
 + self . assertEqual ( output [ 0 ] , ' ' ) 
 + self . assertNicelyFormattedTableHeader ( output [ 1 ] ) 
 + self . assertNicelyFormattedTableRule ( output [ 2 ] ) 
 + self . assertNicelyFormattedTableData ( output [ 3 ] ) 
 + self . assertEqual ( output [ 4 ] . strip ( ) , ' ' ) 
 
 def test _ color _ output ( self ) : 
 for termname in ( ' xterm ' , ' unknown - garbage ' ) : 
 @ @ - 127 , 8 + 124 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 with testrun _ cqlsh ( tty = True , env = { ' TERM ' : termname } ) as c : 
 c . send ( ' select * from has _ all _ types ; \ n ' ) 
 self . assertHasColors ( c . read _ to _ next _ prompt ( ) ) 
 - c . send ( ' select * from has _ value _ encoding _ errors ; \ n ' ) 
 - self . assertHasColors ( c . read _ to _ next _ prompt ( ) ) 
 c . send ( ' select count ( * ) from has _ all _ types ; \ n ' ) 
 self . assertHasColors ( c . read _ to _ next _ prompt ( ) ) 
 c . send ( ' totally invalid cql ; \ n ' ) 
 @ @ - 438 , 7 + 433 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 
 def test _ string _ output _ ascii ( self ) : 
 self . assertCqlverQueriesGiveColoredOutput ( ( 
 - ( " select * from ascii _ with _ invalid _ and _ special _ chars where k in ( 0 , 1 , 2 , 3 , 4 ) ; " , r " " " 
 + ( " select * from ascii _ with _ special _ chars where k in ( 0 , 1 , 2 , 3 ) ; " , r " " " 
 k | val 
 M MMM 
 - - - + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 @ @ - 449 , 13 + 444 , 11 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 G YYYYYYmmYYYYYYYYmmmmY 
 2 | \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 
 G mmmmmmmmmmmmmmmmmmmmmmmmYYYYYYYYYYYYYmmmmmmmm 
 - 3 | \ xfe \ xffbyte order mark 
 - G mmmmmmmmYYYYYYYYYYYYYYY 
 - 4 | fake special chars \ x00 \ n 
 + 3 | fake special chars \ x00 \ n 
 G YYYYYYYYYYYYYYYYYYYYYYYY 
 
 
 - ( 5 rows ) 
 + ( 4 rows ) 
 nnnnnnnn 
 " " " ) , 
 ) , cqlver = 3 ) 
 @ @ - 516 , 55 + 509 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 " " " ) , 
 ) , cqlver = 3 ) 
 
 - def test _ colname _ decoding _ errors ( self ) : 
 - # not clear how to achieve this situation in the first place . the 
 - # validator works pretty well , and we can ' t change the comparator 
 - # after insertion . 
 - # 
 - # guess we could monkey - patch cqlsh or python - cql source to 
 - # explicitly generate an exception on the deserialization of type X . . 
 - pass 
 - 
 - def test _ colval _ decoding _ errors ( self ) : 
 - self . assertCqlverQueriesGiveColoredOutput ( ( 
 - ( " select * from has _ value _ encoding _ errors ; " , r " " " 
 - pkey | utf8col 
 - MMMM MMMMMMM 
 - - - - - - - + - - - - - - - - - - - - - - - - - - - - 
 - 
 - A | ' \ x00 \ xff \ x00 \ xff ' 
 - Y RRRRRRRRRRRRRRRRRR 
 - 
 - 
 - ( 1 rows ) 
 - nnnnnnnn 
 - 
 - 
 - Failed to decode value ' \ x00 \ xff \ x00 \ xff ' ( for column ' utf8col ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte 
 - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR 
 - " " " ) , 
 - ) , cqlver = 3 ) 
 - 
 - def test _ key _ decoding _ errors ( self ) : 
 - self . assertCqlverQueriesGiveColoredOutput ( ( 
 - ( " select * from has _ key _ encoding _ errors ; " , r " " " 
 - pkey | col 
 - MMMM MMM 
 - - - - - - - - - - - - - - - - - - - - - + - - - - - - - - - - 
 - 
 - ' \ x00 \ xff \ x02 \ x8f ' | whatever 
 - RRRRRRRRRRRRRRRRRR YYYYYYYY 
 - 
 - 
 - ( 1 rows ) 
 - nnnnnnnn 
 - 
 - 
 - Failed to decode value ' \ x00 \ xff \ x02 \ x8f ' ( for column ' pkey ' ) as text : ' utf8 ' codec can ' t decode byte 0xff in position 1 : invalid start byte 
 - RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR 
 - " " " ) , 
 - ) , cqlver = 3 ) 
 - 
 def test _ prompt ( self ) : 
 with testrun _ cqlsh ( tty = True , keyspace = None , cqlver = 3 ) as c : 
 self . assertEqual ( c . output _ header . splitlines ( ) [ - 1 ] , ' cqlsh > ' ) 
 @ @ - 652 , 19 + 596 , 19 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 uuidcol uuid , 
 varcharcol text , 
 varintcol varint , 
 - PRIMARY KEY ( num ) 
 + PRIMARY KEY ( ( num ) ) 
 ) WITH 
 bloom _ filter _ fp _ chance = 0 . 010000 AND 
 caching = ' KEYS _ ONLY ' AND 
 comment = ' ' AND 
 - dclocal _ read _ repair _ chance = 0 . 000000 AND 
 + dclocal _ read _ repair _ chance = 0 . 100000 AND 
 gc _ grace _ seconds = 864000 AND 
 index _ interval = 128 AND 
 - read _ repair _ chance = 0 . 100000 AND 
 + read _ repair _ chance = 0 . 000000 AND 
 replicate _ on _ write = ' true ' AND 
 populate _ io _ cache _ on _ flush = ' false ' AND 
 default _ time _ to _ live = 0 AND 
 - speculative _ retry = ' NONE ' AND 
 + speculative _ retry = ' 99 . 0PERCENTILE ' AND 
 memtable _ flush _ period _ in _ ms = 0 AND 
 compaction = { ' class ' : ' SizeTieredCompactionStrategy ' } AND 
 compression = { ' sstable _ compression ' : ' LZ4Compressor ' } ; 
 @ @ - 705 , 7 + 649 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 cfnames = section . group ( ' cfnames ' ) 
 self . assertNotIn ( ' \ n \ n ' , cfnames ) 
 if ksname = = ks : 
 - self . assertIn ( ' ascii _ with _ invalid _ and _ special _ chars ' , cfnames ) 
 + self . assertIn ( ' ascii _ with _ special _ chars ' , cfnames ) 
 
 self . assertIn ( ' system ' , ksnames ) 
 self . assertIn ( quote _ name ( ' 3 . 0 . 0 ' , ks ) , ksnames ) 
 @ @ - 721 , 7 + 665 , 6 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 self . assertEqual ( output [ 0 ] , ' \ n ' ) 
 self . assertEqual ( output [ - 1 ] , ' \ n ' ) 
 self . assertNotIn ( ' Keyspace % s ' % quote _ name ( ' 3 . 0 . 0 ' , ks ) , output ) 
 - self . assertIn ( ' has _ value _ encoding _ errors ' , output ) 
 self . assertIn ( ' undefined _ values _ table ' , output ) 
 
 def test _ describe _ cluster _ output ( self ) : 
 @ @ - 801 , 8 + 744 , 7 @ @ class TestCqlshOutput ( BaseTestCase ) : 
 
 def test _ help _ types ( self ) : 
 with testrun _ cqlsh ( tty = True ) as c : 
 - output = c . cmd _ and _ response ( ' help types ' ) 
 - 
 + c . cmd _ and _ response ( ' help types ' ) 
 
 def test _ help ( self ) : 
 pass 
 diff - - git a / pylib / cqlshlib / test / test _ keyspace _ init . cql b / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 index e92d5d0 . . f63811f 100644 
 - - - a / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 + + + b / pylib / cqlshlib / test / test _ keyspace _ init . cql 
 @ @ - 52 , 24 + 52 , 6 @ @ VALUES ( 4 , blobAsInt ( 0x ) , ' ' , blobAsBigint ( 0x ) , 0x , blobAsBoolean ( 0x ) , blobAsDec 
 blobAsVarint ( 0x ) ) ; 
 
 
 - CREATE TABLE has _ value _ encoding _ errors ( 
 - pkey ascii PRIMARY KEY , 
 - utf8col blob 
 - ) ; 
 - 
 - INSERT INTO has _ value _ encoding _ errors ( pkey , utf8col ) VALUES ( ' A ' , 0x00ff00ff ) ; 
 - ALTER TABLE has _ value _ encoding _ errors ALTER utf8col TYPE text ; 
 - 
 - CREATE TABLE has _ key _ encoding _ errors ( 
 - pkey blob PRIMARY KEY , 
 - col text 
 - ) ; 
 - 
 - INSERT INTO has _ key _ encoding _ errors ( pkey , col ) VALUES ( 0x00ff028f , ' whatever ' ) ; 
 - ALTER TABLE has _ key _ encoding _ errors ALTER pkey TYPE text ; 
 - 
 - 
 - 
 CREATE TABLE empty _ table ( 
 lonelykey float primary key , 
 lonelycol text 
 @ @ - 130 , 23 + 112 , 19 @ @ INSERT INTO undefined _ values _ table ( k , c ) VALUES ( ' k2 ' , ' c2 ' ) ; 
 
 
 
 - CREATE TABLE ascii _ with _ invalid _ and _ special _ chars ( 
 + CREATE TABLE ascii _ with _ special _ chars ( 
 k int PRIMARY KEY , 
 - val blob 
 + val ascii 
 ) ; 
 
 - - " newline : \ n " 
 - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 0 , 0x6e65776c696e653a0a ) ; 
 + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 0 , blobAsAscii ( 0x6e65776c696e653a0a ) ) ; 
 - - " return \ rand null \ 0 ! " 
 - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 1 , 0x72657475726e0d616e64206e756c6c0021 ) ; 
 + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 1 , blobAsAscii ( 0x72657475726e0d616e64206e756c6c0021 ) ) ; 
 - - " \ x00 \ x01 \ x02 \ x03 \ x04 \ x05control chars \ x06 \ x07 " 
 - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 2 , 0x000102030405636f6e74726f6c2063686172730607 ) ; 
 - - - " \ xfe \ xffbyte order mark " 
 - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 3 , 0xfeff62797465206f72646572206d61726b ) ; 
 + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 2 , blobAsAscii ( 0x000102030405636f6e74726f6c2063686172730607 ) ) ; 
 - - " fake special chars \ \ x00 \ \ n " 
 - INSERT INTO ascii _ with _ invalid _ and _ special _ chars ( k , val ) VALUES ( 4 , 0x66616b65207370656369616c2063686172735c7830305c6e ) ; 
 - 
 - ALTER TABLE ascii _ with _ invalid _ and _ special _ chars ALTER val TYPE ascii ; 
 + INSERT INTO ascii _ with _ special _ chars ( k , val ) VALUES ( 3 , blobAsAscii ( 0x66616b65207370656369616c2063686172735c7830305c6e ) ) ; 
 
 


NEAREST DIFF:
ELIMINATEDSENTENCE
