BLEU SCORE: 0.12605968092174913

TEST MSG: Add instructions for upgrade to 2 . 2 in NEWS . txt
GENERATED MSG: Fix trunk NEWS . txt

TEST DIFF (one line): diff - - git a / NEWS . txt b / NEWS . txt <nl> index 7c6af4c . . 3876c43 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 104 , 6 + 104 , 29 @ @ New features <nl> 2 . 2 <nl> = = = <nl> <nl> + Upgrading <nl> + - - - - - - - - - <nl> + - The authentication & authorization subsystems have been redesigned to <nl> + support role based access control ( RBAC ) , resulting in a change to the <nl> + schema of the system _ auth keyspace . See below for more detail . <nl> + For systems already using the internal auth implementations , the process <nl> + for converting existing data during a rolling upgrade is straightforward . <nl> + As each node is restarted , it will attempt to convert any data in the <nl> + legacy tables into the new schema . Until enough nodes to satisfy the <nl> + replication strategy for the system _ auth keyspace are upgraded and so have <nl> + the new schema , this conversion will fail with the failure being reported <nl> + in the system log . <nl> + During the upgrade , Cassandra ' s internal auth classes will continue to use <nl> + the legacy tables , so clients experience no disruption . Issuing DCL <nl> + statements during an upgrade is not supported . <nl> + Once all nodes are upgraded , an operator with superuser privileges should <nl> + drop the legacy tables , system _ auth . users , system _ auth . credentials and <nl> + system _ auth . permissions . Doing so will prompt Cassandra to switch over to <nl> + the new tables without requiring any further intervention . <nl> + While the legacy tables are present a restarted node will re - run the data <nl> + conversion and report the outcome so that operators can verify that it is <nl> + safe to drop them . <nl> + <nl> New features <nl> - - - - - - - - - - - - <nl> - The LIMIT clause applies now only to the number of rows returned to the user ,
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d27c495 . . 0532a45 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> * Remove blocking flushes in gossip thread ( CASSANDRA - 6297 ) <nl> * Fix potential socket leak in connectionpool creation ( CASSANDRA - 6308 ) <nl> * Allow LOCAL _ ONE / LOCAL _ QUORUM to work with SimpleSrrategy ( CASSANDRA - 6238 ) <nl> + * cqlsh : handle ' null ' as session duration ( CASSANDRA - 6317 ) <nl> <nl> <nl> 1 . 2 . 11 <nl> diff - - git a / pylib / cqlshlib / tracing . py b / pylib / cqlshlib / tracing . py <nl> index fb8525d . . 3dc0ba7 100644 <nl> - - - a / pylib / cqlshlib / tracing . py <nl> + + + b / pylib / cqlshlib / tracing . py <nl> @ @ - 43 , 7 + 43 , 6 @ @ def fetch _ trace _ session ( cursor , session _ id ) : <nl> " WHERE session _ id = % s " % ( TRACING _ KS , SESSIONS _ CF , session _ id ) , <nl> consistency _ level = ' ONE ' ) <nl> ( request , coordinator , started _ at , duration ) = cursor . fetchone ( ) <nl> - <nl> cursor . execute ( " SELECT activity , event _ id , source , source _ elapsed " <nl> " FROM % s . % s " <nl> " WHERE session _ id = % s " % ( TRACING _ KS , EVENTS _ CF , session _ id ) , <nl> @ @ - 57 , 8 + 56 , 12 @ @ def fetch _ trace _ session ( cursor , session _ id ) : <nl> for activity , event _ id , source , source _ elapsed in events : <nl> rows . append ( [ activity , format _ timeuuid ( event _ id ) , source , source _ elapsed ] ) <nl> # append footer row ( from sessions table ) . <nl> - finished _ at = started _ at + ( duration / 1000000 . ) <nl> - rows . append ( [ ' Request complete ' , format _ timestamp ( finished _ at ) , coordinator , duration ] ) <nl> + if duration : <nl> + finished _ at = format _ timestamp ( started _ at + ( duration / 1000000 . ) ) <nl> + else : <nl> + finished _ at = duration = " - - " <nl> + <nl> + rows . append ( [ ' Request complete ' , finished _ at , coordinator , duration ] ) <nl> <nl> return rows <nl>

TEST DIFF:
diff - - git a / NEWS . txt b / NEWS . txt 
 index 7c6af4c . . 3876c43 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 104 , 6 + 104 , 29 @ @ New features 
 2 . 2 
 = = = 
 
 + Upgrading 
 + - - - - - - - - - 
 + - The authentication & authorization subsystems have been redesigned to 
 + support role based access control ( RBAC ) , resulting in a change to the 
 + schema of the system _ auth keyspace . See below for more detail . 
 + For systems already using the internal auth implementations , the process 
 + for converting existing data during a rolling upgrade is straightforward . 
 + As each node is restarted , it will attempt to convert any data in the 
 + legacy tables into the new schema . Until enough nodes to satisfy the 
 + replication strategy for the system _ auth keyspace are upgraded and so have 
 + the new schema , this conversion will fail with the failure being reported 
 + in the system log . 
 + During the upgrade , Cassandra ' s internal auth classes will continue to use 
 + the legacy tables , so clients experience no disruption . Issuing DCL 
 + statements during an upgrade is not supported . 
 + Once all nodes are upgraded , an operator with superuser privileges should 
 + drop the legacy tables , system _ auth . users , system _ auth . credentials and 
 + system _ auth . permissions . Doing so will prompt Cassandra to switch over to 
 + the new tables without requiring any further intervention . 
 + While the legacy tables are present a restarted node will re - run the data 
 + conversion and report the outcome so that operators can verify that it is 
 + safe to drop them . 
 + 
 New features 
 - - - - - - - - - - - - 
 - The LIMIT clause applies now only to the number of rows returned to the user ,

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d27c495 . . 0532a45 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 * Remove blocking flushes in gossip thread ( CASSANDRA - 6297 ) 
 * Fix potential socket leak in connectionpool creation ( CASSANDRA - 6308 ) 
 * Allow LOCAL _ ONE / LOCAL _ QUORUM to work with SimpleSrrategy ( CASSANDRA - 6238 ) 
 + * cqlsh : handle ' null ' as session duration ( CASSANDRA - 6317 ) 
 
 
 1 . 2 . 11 
 diff - - git a / pylib / cqlshlib / tracing . py b / pylib / cqlshlib / tracing . py 
 index fb8525d . . 3dc0ba7 100644 
 - - - a / pylib / cqlshlib / tracing . py 
 + + + b / pylib / cqlshlib / tracing . py 
 @ @ - 43 , 7 + 43 , 6 @ @ def fetch _ trace _ session ( cursor , session _ id ) : 
 " WHERE session _ id = % s " % ( TRACING _ KS , SESSIONS _ CF , session _ id ) , 
 consistency _ level = ' ONE ' ) 
 ( request , coordinator , started _ at , duration ) = cursor . fetchone ( ) 
 - 
 cursor . execute ( " SELECT activity , event _ id , source , source _ elapsed " 
 " FROM % s . % s " 
 " WHERE session _ id = % s " % ( TRACING _ KS , EVENTS _ CF , session _ id ) , 
 @ @ - 57 , 8 + 56 , 12 @ @ def fetch _ trace _ session ( cursor , session _ id ) : 
 for activity , event _ id , source , source _ elapsed in events : 
 rows . append ( [ activity , format _ timeuuid ( event _ id ) , source , source _ elapsed ] ) 
 # append footer row ( from sessions table ) . 
 - finished _ at = started _ at + ( duration / 1000000 . ) 
 - rows . append ( [ ' Request complete ' , format _ timestamp ( finished _ at ) , coordinator , duration ] ) 
 + if duration : 
 + finished _ at = format _ timestamp ( started _ at + ( duration / 1000000 . ) ) 
 + else : 
 + finished _ at = duration = " - - " 
 + 
 + rows . append ( [ ' Request complete ' , finished _ at , coordinator , duration ] ) 
 
 return rows 

