BLEU SCORE: 0.022882533035912193

TEST MSG: Fix unreleased resource sockets
GENERATED MSG: Filter out unavailable cipher suites when using encryption .

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 749a3b0 . . ec32945 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 10 <nl> + * Fix potential socket leak ( CASSANDRA - 12329 ) <nl> * Fix ViewTest . testCompaction ( CASSANDRA - 12789 ) <nl> * Improve avg aggregate functions ( CASSANDRA - 12417 ) <nl> * Preserve quoted reserved keyword column names in MV creation ( CASSANDRA - 11803 ) <nl> diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> index a327de9 . . 56a3a3f 100644 <nl> - - - a / src / java / org / apache / cassandra / security / SSLFactory . java <nl> + + + b / src / java / org / apache / cassandra / security / SSLFactory . java <nl> @ @ - 59 , 14 + 59 , 22 @ @ public final class SSLFactory <nl> public static SSLServerSocket getServerSocket ( EncryptionOptions options , InetAddress address , int port ) throws IOException <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> - SSLServerSocket serverSocket = ( SSLServerSocket ) ctx . getServerSocketFactory ( ) . createServerSocket ( ) ; <nl> - serverSocket . setReuseAddress ( true ) ; <nl> - String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - serverSocket . setEnabledCipherSuites ( suites ) ; <nl> - serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; <nl> - serverSocket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> - serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; <nl> - return serverSocket ; <nl> + SSLServerSocket serverSocket = ( SSLServerSocket ) ctx . getServerSocketFactory ( ) . createServerSocket ( ) ; <nl> + try <nl> + { <nl> + serverSocket . setReuseAddress ( true ) ; <nl> + String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> + serverSocket . setEnabledCipherSuites ( suites ) ; <nl> + serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; <nl> + serverSocket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> + serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; <nl> + return serverSocket ; <nl> + } <nl> + catch ( IllegalArgumentException | SecurityException | IOException e ) <nl> + { <nl> + serverSocket . close ( ) ; <nl> + throw e ; <nl> + } <nl> } <nl> <nl> / * * Create a socket and connect * / <nl> @ @ - 74 , 10 + 82 , 18 @ @ public final class SSLFactory <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port , localAddress , localPort ) ; <nl> - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - socket . setEnabledCipherSuites ( suites ) ; <nl> - socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> - return socket ; <nl> + try <nl> + { <nl> + String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> + socket . setEnabledCipherSuites ( suites ) ; <nl> + socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> + return socket ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + socket . close ( ) ; <nl> + throw e ; <nl> + } <nl> } <nl> <nl> / * * Create a socket and connect , using any local address * / <nl> @ @ - 85 , 10 + 101 , 18 @ @ public final class SSLFactory <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port ) ; <nl> - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - socket . setEnabledCipherSuites ( suites ) ; <nl> - socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> - return socket ; <nl> + try <nl> + { <nl> + String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> + socket . setEnabledCipherSuites ( suites ) ; <nl> + socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> + return socket ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + socket . close ( ) ; <nl> + throw e ; <nl> + } <nl> } <nl> <nl> / * * Just create a socket * / <nl> @ @ - 96 , 10 + 120 , 18 @ @ public final class SSLFactory <nl> { <nl> SSLContext ctx = createSSLContext ( options , true ) ; <nl> SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( ) ; <nl> - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> - socket . setEnabledCipherSuites ( suites ) ; <nl> - socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> - return socket ; <nl> + try <nl> + { <nl> + String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; <nl> + socket . setEnabledCipherSuites ( suites ) ; <nl> + socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; <nl> + return socket ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + socket . close ( ) ; <nl> + throw e ; <nl> + } <nl> } <nl> <nl> @ SuppressWarnings ( " resource " )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e317097 . . 3e12c5c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 1 . 0 . 5 <nl> * add command to stop compactions ( CASSANDRA - 1740 ) <nl> * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) <nl> + * fix assertion error when forwarding to local nodes ( CASSANDRA - 3539 ) <nl> <nl> 1 . 0 . 4 <nl> * fix self - hinting of timed out read repair updates and make hinted handoff <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 3560b9e . . a8af00c 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 411 , 14 + 411 , 17 @ @ public class StorageProxy implements StorageProxyMBean <nl> Iterator < InetAddress > iter = messages . getValue ( ) . iterator ( ) ; <nl> InetAddress target = iter . next ( ) ; <nl> / / Add all the other destinations of the same message as a header in the primary message . <nl> - FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; <nl> - DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> - while ( iter . hasNext ( ) ) <nl> + if ( iter . hasNext ( ) ) <nl> { <nl> - InetAddress destination = iter . next ( ) ; <nl> - dos . write ( destination . getAddress ( ) ) ; <nl> + FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; <nl> + DataOutputStream dos = new DataOutputStream ( bos ) ; <nl> + while ( iter . hasNext ( ) ) <nl> + { <nl> + InetAddress destination = iter . next ( ) ; <nl> + dos . write ( destination . getAddress ( ) ) ; <nl> + } <nl> + message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; <nl> } <nl> - message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; <nl> / / send the combined message + forward headers <nl> MessagingService . instance ( ) . sendRR ( message , target , handler ) ; <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 749a3b0 . . ec32945 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 10 
 + * Fix potential socket leak ( CASSANDRA - 12329 ) 
 * Fix ViewTest . testCompaction ( CASSANDRA - 12789 ) 
 * Improve avg aggregate functions ( CASSANDRA - 12417 ) 
 * Preserve quoted reserved keyword column names in MV creation ( CASSANDRA - 11803 ) 
 diff - - git a / src / java / org / apache / cassandra / security / SSLFactory . java b / src / java / org / apache / cassandra / security / SSLFactory . java 
 index a327de9 . . 56a3a3f 100644 
 - - - a / src / java / org / apache / cassandra / security / SSLFactory . java 
 + + + b / src / java / org / apache / cassandra / security / SSLFactory . java 
 @ @ - 59 , 14 + 59 , 22 @ @ public final class SSLFactory 
 public static SSLServerSocket getServerSocket ( EncryptionOptions options , InetAddress address , int port ) throws IOException 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 - SSLServerSocket serverSocket = ( SSLServerSocket ) ctx . getServerSocketFactory ( ) . createServerSocket ( ) ; 
 - serverSocket . setReuseAddress ( true ) ; 
 - String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - serverSocket . setEnabledCipherSuites ( suites ) ; 
 - serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; 
 - serverSocket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 - serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; 
 - return serverSocket ; 
 + SSLServerSocket serverSocket = ( SSLServerSocket ) ctx . getServerSocketFactory ( ) . createServerSocket ( ) ; 
 + try 
 + { 
 + serverSocket . setReuseAddress ( true ) ; 
 + String [ ] suites = filterCipherSuites ( serverSocket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 + serverSocket . setEnabledCipherSuites ( suites ) ; 
 + serverSocket . setNeedClientAuth ( options . require _ client _ auth ) ; 
 + serverSocket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 + serverSocket . bind ( new InetSocketAddress ( address , port ) , 500 ) ; 
 + return serverSocket ; 
 + } 
 + catch ( IllegalArgumentException | SecurityException | IOException e ) 
 + { 
 + serverSocket . close ( ) ; 
 + throw e ; 
 + } 
 } 
 
 / * * Create a socket and connect * / 
 @ @ - 74 , 10 + 82 , 18 @ @ public final class SSLFactory 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port , localAddress , localPort ) ; 
 - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - socket . setEnabledCipherSuites ( suites ) ; 
 - socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 - return socket ; 
 + try 
 + { 
 + String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 + socket . setEnabledCipherSuites ( suites ) ; 
 + socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 + return socket ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + socket . close ( ) ; 
 + throw e ; 
 + } 
 } 
 
 / * * Create a socket and connect , using any local address * / 
 @ @ - 85 , 10 + 101 , 18 @ @ public final class SSLFactory 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( address , port ) ; 
 - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - socket . setEnabledCipherSuites ( suites ) ; 
 - socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 - return socket ; 
 + try 
 + { 
 + String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 + socket . setEnabledCipherSuites ( suites ) ; 
 + socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 + return socket ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + socket . close ( ) ; 
 + throw e ; 
 + } 
 } 
 
 / * * Just create a socket * / 
 @ @ - 96 , 10 + 120 , 18 @ @ public final class SSLFactory 
 { 
 SSLContext ctx = createSSLContext ( options , true ) ; 
 SSLSocket socket = ( SSLSocket ) ctx . getSocketFactory ( ) . createSocket ( ) ; 
 - String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 - socket . setEnabledCipherSuites ( suites ) ; 
 - socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 - return socket ; 
 + try 
 + { 
 + String [ ] suites = filterCipherSuites ( socket . getSupportedCipherSuites ( ) , options . cipher _ suites ) ; 
 + socket . setEnabledCipherSuites ( suites ) ; 
 + socket . setEnabledProtocols ( ACCEPTED _ PROTOCOLS ) ; 
 + return socket ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + socket . close ( ) ; 
 + throw e ; 
 + } 
 } 
 
 @ SuppressWarnings ( " resource " )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e317097 . . 3e12c5c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 1 . 0 . 5 
 * add command to stop compactions ( CASSANDRA - 1740 ) 
 * filter out unavailable cipher suites when using encryption ( CASSANDRA - 3178 ) 
 + * fix assertion error when forwarding to local nodes ( CASSANDRA - 3539 ) 
 
 1 . 0 . 4 
 * fix self - hinting of timed out read repair updates and make hinted handoff 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 3560b9e . . a8af00c 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 411 , 14 + 411 , 17 @ @ public class StorageProxy implements StorageProxyMBean 
 Iterator < InetAddress > iter = messages . getValue ( ) . iterator ( ) ; 
 InetAddress target = iter . next ( ) ; 
 / / Add all the other destinations of the same message as a header in the primary message . 
 - FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; 
 - DataOutputStream dos = new DataOutputStream ( bos ) ; 
 - while ( iter . hasNext ( ) ) 
 + if ( iter . hasNext ( ) ) 
 { 
 - InetAddress destination = iter . next ( ) ; 
 - dos . write ( destination . getAddress ( ) ) ; 
 + FastByteArrayOutputStream bos = new FastByteArrayOutputStream ( ) ; 
 + DataOutputStream dos = new DataOutputStream ( bos ) ; 
 + while ( iter . hasNext ( ) ) 
 + { 
 + InetAddress destination = iter . next ( ) ; 
 + dos . write ( destination . getAddress ( ) ) ; 
 + } 
 + message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; 
 } 
 - message = message . withHeaderAdded ( RowMutation . FORWARD _ HEADER , bos . toByteArray ( ) ) ; 
 / / send the combined message + forward headers 
 MessagingService . instance ( ) . sendRR ( message , target , handler ) ; 
 }
