BLEU SCORE: 0.7577395672414201

TEST MSG: Revert " Explicitly use Long . MAX _ VALUE timestamp for counter deletions "
GENERATED MSG: Explicitly use Long . MAX _ VALUE timestamp for counter deletions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 680c2f8 . . cc968c3 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 2 , 8 + 2 , 6 @ @ <nl> * Fix exception when querying a composite - keyed table with a collection index <nl> ( CASSANDRA - 7372 ) <nl> * Use node ' s host id in place of counter ids ( CASSANDRA - 7366 ) <nl> - * Explicitly use Long . MAX _ VALUE timestamp for counter deletions <nl> - ( CASSANDRA - 7346 ) <nl> * Fix native protocol CAS batches ( CASSANDRA - 7337 ) <nl> * Reduce likelihood of contention on local paxos locking ( CASSANDRA - 7359 ) <nl> * Upgrade to Pig 0 . 12 . 1 ( CASSANDRA - 6556 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> index 9b88b5e . . 8da2611 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java <nl> @ @ - 107 , 11 + 107 , 8 @ @ public abstract class AbstractModification <nl> * <nl> * @ throws InvalidRequestException on the wrong request <nl> * / <nl> - public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) <nl> - throws InvalidRequestException , UnauthorizedException <nl> - { <nl> - return prepareRowMutations ( keyspace , clientState , null , variables ) ; <nl> - } <nl> + public abstract List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) <nl> + throws InvalidRequestException , UnauthorizedException ; <nl> <nl> / * * <nl> * Convert statement into a list of mutations to apply on the server <nl> @ @ - 124 , 6 + 121 , 6 @ @ public abstract class AbstractModification <nl> * <nl> * @ throws InvalidRequestException on the wrong request <nl> * / <nl> - public abstract List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long batchTimestamp , List < ByteBuffer > variables ) <nl> + public abstract List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long timestamp , List < ByteBuffer > variables ) <nl> throws InvalidRequestException , UnauthorizedException ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> index e00ffc7 . . 71942e4 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . util . List ; <nl> import org . apache . cassandra . auth . Permission ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . db . CounterMutation ; <nl> import org . apache . cassandra . db . Mutation ; <nl> import org . apache . cassandra . db . composites . CellName ; <nl> import org . apache . cassandra . db . IMutation ; <nl> @ @ - 63 , 7 + 62 , 13 @ @ public class DeleteStatement extends AbstractModification <nl> return keys ; <nl> } <nl> <nl> - public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long batchTimestamp , List < ByteBuffer > variables ) <nl> + public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) <nl> + throws InvalidRequestException , UnauthorizedException <nl> + { <nl> + return prepareRowMutations ( keyspace , clientState , null , variables ) ; <nl> + } <nl> + <nl> + public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long timestamp , List < ByteBuffer > variables ) <nl> throws InvalidRequestException , UnauthorizedException <nl> { <nl> CFMetaData metadata = validateColumnFamily ( keyspace , columnFamily ) ; <nl> @ @ - 74 , 22 + 79 , 22 @ @ public class DeleteStatement extends AbstractModification <nl> List < IMutation > mutations = new ArrayList < IMutation > ( keys . size ( ) ) ; <nl> <nl> for ( Term key : keys ) <nl> - mutations . add ( mutationForKey ( key . getByteBuffer ( keyType , variables ) , keyspace , batchTimestamp , clientState , variables , metadata ) ) ; <nl> + mutations . add ( mutationForKey ( key . getByteBuffer ( keyType , variables ) , keyspace , timestamp , clientState , variables , metadata ) ) ; <nl> <nl> return mutations ; <nl> } <nl> <nl> - public Mutation mutationForKey ( ByteBuffer key , String keyspace , Long batchTimestamp , ThriftClientState clientState , List < ByteBuffer > variables , CFMetaData metadata ) <nl> + public Mutation mutationForKey ( ByteBuffer key , String keyspace , Long timestamp , ThriftClientState clientState , List < ByteBuffer > variables , CFMetaData metadata ) <nl> throws InvalidRequestException <nl> { <nl> Mutation mutation = new Mutation ( keyspace , key ) ; <nl> <nl> QueryProcessor . validateKeyAlias ( metadata , keyName ) ; <nl> <nl> - if ( columns . isEmpty ( ) ) <nl> + if ( columns . size ( ) < 1 ) <nl> { <nl> / / No columns , delete the partition <nl> - mutation . delete ( columnFamily , batchTimestamp = = null ? getTimestamp ( clientState ) : batchTimestamp ) ; <nl> + mutation . delete ( columnFamily , ( timestamp = = null ) ? getTimestamp ( clientState ) : timestamp ) ; <nl> } <nl> else <nl> { <nl> @ @ - 99 , 21 + 104 , 13 @ @ public class DeleteStatement extends AbstractModification <nl> { <nl> CellName columnName = metadata . comparator . cellFromByteBuffer ( column . getByteBuffer ( at , variables ) ) ; <nl> validateColumnName ( columnName ) ; <nl> - mutation . delete ( columnFamily , columnName , batchTimestamp = = null ? getTimestamp ( clientState ) : batchTimestamp ) ; <nl> + mutation . delete ( columnFamily , columnName , ( timestamp = = null ) ? getTimestamp ( clientState ) : timestamp ) ; <nl> } <nl> } <nl> <nl> return mutation ; <nl> } <nl> <nl> - @ Override <nl> - public long getTimestamp ( ThriftClientState clientState ) <nl> - { <nl> - return Schema . instance . getCFMetaData ( keyspace , columnFamily ) . isCounter ( ) <nl> - ? CounterMutation . TOMBSTONE _ TIMESTAMP <nl> - : super . getTimestamp ( clientState ) ; <nl> - } <nl> - <nl> public String toString ( ) <nl> { <nl> return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , <nl> diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> index 8a995d2 . . 16a0d76 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java <nl> @ @ - 119 , 6 + 119 , 13 @ @ public class UpdateStatement extends AbstractModification <nl> } <nl> <nl> / * * { @ inheritDoc } * / <nl> + public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) <nl> + throws InvalidRequestException , UnauthorizedException <nl> + { <nl> + return prepareRowMutations ( keyspace , clientState , null , variables ) ; <nl> + } <nl> + <nl> + / * * { @ inheritDoc } * / <nl> public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long timestamp , List < ByteBuffer > variables ) <nl> throws InvalidRequestException , UnauthorizedException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / UpdateParameters . java b / src / java / org / apache / cassandra / cql3 / UpdateParameters . java <nl> index 3f0c2b9 . . 8a47536 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / UpdateParameters . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / UpdateParameters . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . db . filter . ColumnSlice ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> <nl> / * * <nl> - * A simple container that simplifies passing parameters for ( mostly ) collections methods . <nl> + * A simple container that simplify passing parameters for collections methods . <nl> * / <nl> public class UpdateParameters <nl> { <nl> @ @ - 61 , 27 + 61 , 21 @ @ public class UpdateParameters <nl> public Cell makeTombstone ( CellName name ) throws InvalidRequestException <nl> { <nl> QueryProcessor . validateCellName ( name , metadata . comparator ) ; <nl> - return new BufferDeletedCell ( name , localDeletionTime , tombstoneTimestamp ( ) ) ; <nl> + return new BufferDeletedCell ( name , localDeletionTime , timestamp ) ; <nl> } <nl> <nl> public RangeTombstone makeRangeTombstone ( ColumnSlice slice ) throws InvalidRequestException <nl> { <nl> QueryProcessor . validateComposite ( slice . start , metadata . comparator ) ; <nl> QueryProcessor . validateComposite ( slice . finish , metadata . comparator ) ; <nl> - return new RangeTombstone ( slice . start , slice . finish , tombstoneTimestamp ( ) , localDeletionTime ) ; <nl> + return new RangeTombstone ( slice . start , slice . finish , timestamp , localDeletionTime ) ; <nl> } <nl> <nl> public RangeTombstone makeTombstoneForOverwrite ( ColumnSlice slice ) throws InvalidRequestException <nl> { <nl> QueryProcessor . validateComposite ( slice . start , metadata . comparator ) ; <nl> QueryProcessor . validateComposite ( slice . finish , metadata . comparator ) ; <nl> - / / As of 2 . 1 , will never be called for a counter table . However , in 3 . 0 , CASSANDRA - 6506 might change that , so play safe . <nl> - return new RangeTombstone ( slice . start , slice . finish , tombstoneTimestamp ( ) - 1 , localDeletionTime ) ; <nl> - } <nl> - <nl> - public DeletionInfo makeDeletionInfo ( ) <nl> - { <nl> - return new DeletionInfo ( tombstoneTimestamp ( ) , localDeletionTime ) ; <nl> + return new RangeTombstone ( slice . start , slice . finish , timestamp - 1 , localDeletionTime ) ; <nl> } <nl> <nl> public List < Cell > getPrefetchedList ( ByteBuffer rowKey , ColumnIdentifier cql3ColumnName ) <nl> @ @ - 92 , 9 + 86 , 4 @ @ public class UpdateParameters <nl> CQL3Row row = prefetchedLists . get ( rowKey ) ; <nl> return row = = null ? Collections . < Cell > emptyList ( ) : row . getCollection ( cql3ColumnName ) ; <nl> } <nl> - <nl> - private long tombstoneTimestamp ( ) <nl> - { <nl> - return metadata . isCounter ( ) ? CounterMutation . TOMBSTONE _ TIMESTAMP : timestamp ; <nl> - } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> index 1569ae4 . . 49fdfc2 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class DeleteStatement extends ModificationStatement <nl> if ( prefix . isEmpty ( ) ) <nl> { <nl> / / No columns specified , delete the row <nl> - cf . delete ( params . makeDeletionInfo ( ) ) ; <nl> + cf . delete ( new DeletionInfo ( params . timestamp , params . localDeletionTime ) ) ; <nl> } <nl> else if ( cfm . comparator . isDense ( ) & & prefix . size ( ) = = cfm . clusteringColumns ( ) . size ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> index 848e4db . . 2bfdd4e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CounterMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / CounterMutation . java <nl> @ @ - 44 , 9 + 44 , 6 @ @ import org . apache . cassandra . utils . * ; <nl> <nl> public class CounterMutation implements IMutation <nl> { <nl> - / / Counter deletions are final in C * , because there is no way to provide reliable deletion otherwise . <nl> - public static final long TOMBSTONE _ TIMESTAMP = Long . MAX _ VALUE ; <nl> - <nl> public static final CounterMutationSerializer serializer = new CounterMutationSerializer ( ) ; <nl> <nl> private static final Striped < Lock > LOCKS = Striped . lazyWeakLock ( DatabaseDescriptor . getConcurrentCounterWriters ( ) * 1024 ) ; <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 49466bd . . 1a77ffa 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 907 , 18 + 907 , 16 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> private void deleteColumnOrSuperColumn ( org . apache . cassandra . db . Mutation mutation , CFMetaData cfm , Deletion del ) <nl> { <nl> - long timestamp = cfm . isCounter ( ) ? CounterMutation . TOMBSTONE _ TIMESTAMP : del . timestamp ; <nl> - <nl> if ( del . predicate ! = null & & del . predicate . column _ names ! = null ) <nl> { <nl> for ( ByteBuffer c : del . predicate . column _ names ) <nl> { <nl> if ( del . super _ column = = null & & cfm . isSuper ( ) ) <nl> - mutation . deleteRange ( cfm . cfName , SuperColumns . startOf ( c ) , SuperColumns . endOf ( c ) , timestamp ) ; <nl> + mutation . deleteRange ( cfm . cfName , SuperColumns . startOf ( c ) , SuperColumns . endOf ( c ) , del . timestamp ) ; <nl> else if ( del . super _ column ! = null ) <nl> - mutation . delete ( cfm . cfName , cfm . comparator . makeCellName ( del . super _ column , c ) , timestamp ) ; <nl> + mutation . delete ( cfm . cfName , cfm . comparator . makeCellName ( del . super _ column , c ) , del . timestamp ) ; <nl> else <nl> - mutation . delete ( cfm . cfName , cfm . comparator . cellFromByteBuffer ( c ) , timestamp ) ; <nl> + mutation . delete ( cfm . cfName , cfm . comparator . cellFromByteBuffer ( c ) , del . timestamp ) ; <nl> } <nl> } <nl> else if ( del . predicate ! = null & & del . predicate . slice _ range ! = null ) <nl> @ @ - 927 , 27 + 925 , 24 @ @ public class CassandraServer implements Cassandra . Iface <nl> mutation . deleteRange ( cfm . cfName , <nl> SuperColumns . startOf ( del . predicate . getSlice _ range ( ) . start ) , <nl> SuperColumns . startOf ( del . predicate . getSlice _ range ( ) . finish ) , <nl> - timestamp ) ; <nl> + del . timestamp ) ; <nl> else if ( del . super _ column ! = null ) <nl> - mutation . deleteRange ( cfm . cfName , <nl> - cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . start ) , <nl> - cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . finish ) , <nl> - timestamp ) ; <nl> + mutation . deleteRange ( cfm . cfName , <nl> + cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . start ) , <nl> + cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . finish ) , <nl> + del . timestamp ) ; <nl> else <nl> mutation . deleteRange ( cfm . cfName , <nl> cfm . comparator . cellFromByteBuffer ( del . predicate . getSlice _ range ( ) . start ) , <nl> cfm . comparator . cellFromByteBuffer ( del . predicate . getSlice _ range ( ) . finish ) , <nl> - timestamp ) ; <nl> + del . timestamp ) ; <nl> } <nl> else <nl> { <nl> if ( del . super _ column ! = null ) <nl> - mutation . deleteRange ( cfm . cfName , <nl> - SuperColumns . startOf ( del . super _ column ) , <nl> - SuperColumns . endOf ( del . super _ column ) , <nl> - timestamp ) ; <nl> + mutation . deleteRange ( cfm . cfName , SuperColumns . startOf ( del . super _ column ) , SuperColumns . endOf ( del . super _ column ) , del . timestamp ) ; <nl> else <nl> - mutation . delete ( cfm . cfName , timestamp ) ; <nl> + mutation . delete ( cfm . cfName , del . timestamp ) ; <nl> } <nl> } <nl> <nl> @ @ - 1835 , 7 + 1830 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> try <nl> { <nl> - internal _ remove ( key , path , CounterMutation . TOMBSTONE _ TIMESTAMP , consistency _ level , true ) ; <nl> + internal _ remove ( key , path , System . currentTimeMillis ( ) , consistency _ level , true ) ; <nl> } <nl> catch ( RequestValidationException e ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 680c2f8 . . cc968c3 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 2 , 8 + 2 , 6 @ @ 
 * Fix exception when querying a composite - keyed table with a collection index 
 ( CASSANDRA - 7372 ) 
 * Use node ' s host id in place of counter ids ( CASSANDRA - 7366 ) 
 - * Explicitly use Long . MAX _ VALUE timestamp for counter deletions 
 - ( CASSANDRA - 7346 ) 
 * Fix native protocol CAS batches ( CASSANDRA - 7337 ) 
 * Reduce likelihood of contention on local paxos locking ( CASSANDRA - 7359 ) 
 * Upgrade to Pig 0 . 12 . 1 ( CASSANDRA - 6556 ) 
 diff - - git a / src / java / org / apache / cassandra / cql / AbstractModification . java b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 index 9b88b5e . . 8da2611 100644 
 - - - a / src / java / org / apache / cassandra / cql / AbstractModification . java 
 + + + b / src / java / org / apache / cassandra / cql / AbstractModification . java 
 @ @ - 107 , 11 + 107 , 8 @ @ public abstract class AbstractModification 
 * 
 * @ throws InvalidRequestException on the wrong request 
 * / 
 - public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) 
 - throws InvalidRequestException , UnauthorizedException 
 - { 
 - return prepareRowMutations ( keyspace , clientState , null , variables ) ; 
 - } 
 + public abstract List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) 
 + throws InvalidRequestException , UnauthorizedException ; 
 
 / * * 
 * Convert statement into a list of mutations to apply on the server 
 @ @ - 124 , 6 + 121 , 6 @ @ public abstract class AbstractModification 
 * 
 * @ throws InvalidRequestException on the wrong request 
 * / 
 - public abstract List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long batchTimestamp , List < ByteBuffer > variables ) 
 + public abstract List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long timestamp , List < ByteBuffer > variables ) 
 throws InvalidRequestException , UnauthorizedException ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql / DeleteStatement . java b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 index e00ffc7 . . 71942e4 100644 
 - - - a / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / DeleteStatement . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . util . List ; 
 import org . apache . cassandra . auth . Permission ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . db . CounterMutation ; 
 import org . apache . cassandra . db . Mutation ; 
 import org . apache . cassandra . db . composites . CellName ; 
 import org . apache . cassandra . db . IMutation ; 
 @ @ - 63 , 7 + 62 , 13 @ @ public class DeleteStatement extends AbstractModification 
 return keys ; 
 } 
 
 - public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long batchTimestamp , List < ByteBuffer > variables ) 
 + public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) 
 + throws InvalidRequestException , UnauthorizedException 
 + { 
 + return prepareRowMutations ( keyspace , clientState , null , variables ) ; 
 + } 
 + 
 + public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long timestamp , List < ByteBuffer > variables ) 
 throws InvalidRequestException , UnauthorizedException 
 { 
 CFMetaData metadata = validateColumnFamily ( keyspace , columnFamily ) ; 
 @ @ - 74 , 22 + 79 , 22 @ @ public class DeleteStatement extends AbstractModification 
 List < IMutation > mutations = new ArrayList < IMutation > ( keys . size ( ) ) ; 
 
 for ( Term key : keys ) 
 - mutations . add ( mutationForKey ( key . getByteBuffer ( keyType , variables ) , keyspace , batchTimestamp , clientState , variables , metadata ) ) ; 
 + mutations . add ( mutationForKey ( key . getByteBuffer ( keyType , variables ) , keyspace , timestamp , clientState , variables , metadata ) ) ; 
 
 return mutations ; 
 } 
 
 - public Mutation mutationForKey ( ByteBuffer key , String keyspace , Long batchTimestamp , ThriftClientState clientState , List < ByteBuffer > variables , CFMetaData metadata ) 
 + public Mutation mutationForKey ( ByteBuffer key , String keyspace , Long timestamp , ThriftClientState clientState , List < ByteBuffer > variables , CFMetaData metadata ) 
 throws InvalidRequestException 
 { 
 Mutation mutation = new Mutation ( keyspace , key ) ; 
 
 QueryProcessor . validateKeyAlias ( metadata , keyName ) ; 
 
 - if ( columns . isEmpty ( ) ) 
 + if ( columns . size ( ) < 1 ) 
 { 
 / / No columns , delete the partition 
 - mutation . delete ( columnFamily , batchTimestamp = = null ? getTimestamp ( clientState ) : batchTimestamp ) ; 
 + mutation . delete ( columnFamily , ( timestamp = = null ) ? getTimestamp ( clientState ) : timestamp ) ; 
 } 
 else 
 { 
 @ @ - 99 , 21 + 104 , 13 @ @ public class DeleteStatement extends AbstractModification 
 { 
 CellName columnName = metadata . comparator . cellFromByteBuffer ( column . getByteBuffer ( at , variables ) ) ; 
 validateColumnName ( columnName ) ; 
 - mutation . delete ( columnFamily , columnName , batchTimestamp = = null ? getTimestamp ( clientState ) : batchTimestamp ) ; 
 + mutation . delete ( columnFamily , columnName , ( timestamp = = null ) ? getTimestamp ( clientState ) : timestamp ) ; 
 } 
 } 
 
 return mutation ; 
 } 
 
 - @ Override 
 - public long getTimestamp ( ThriftClientState clientState ) 
 - { 
 - return Schema . instance . getCFMetaData ( keyspace , columnFamily ) . isCounter ( ) 
 - ? CounterMutation . TOMBSTONE _ TIMESTAMP 
 - : super . getTimestamp ( clientState ) ; 
 - } 
 - 
 public String toString ( ) 
 { 
 return String . format ( " DeleteStatement ( columns = % s , keyspace = % s , columnFamily = % s , consistency = % s keys = % s ) " , 
 diff - - git a / src / java / org / apache / cassandra / cql / UpdateStatement . java b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 index 8a995d2 . . 16a0d76 100644 
 - - - a / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 + + + b / src / java / org / apache / cassandra / cql / UpdateStatement . java 
 @ @ - 119 , 6 + 119 , 13 @ @ public class UpdateStatement extends AbstractModification 
 } 
 
 / * * { @ inheritDoc } * / 
 + public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , List < ByteBuffer > variables ) 
 + throws InvalidRequestException , UnauthorizedException 
 + { 
 + return prepareRowMutations ( keyspace , clientState , null , variables ) ; 
 + } 
 + 
 + / * * { @ inheritDoc } * / 
 public List < IMutation > prepareRowMutations ( String keyspace , ThriftClientState clientState , Long timestamp , List < ByteBuffer > variables ) 
 throws InvalidRequestException , UnauthorizedException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cql3 / UpdateParameters . java b / src / java / org / apache / cassandra / cql3 / UpdateParameters . java 
 index 3f0c2b9 . . 8a47536 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / UpdateParameters . java 
 + + + b / src / java / org / apache / cassandra / cql3 / UpdateParameters . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import org . apache . cassandra . db . filter . ColumnSlice ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 
 / * * 
 - * A simple container that simplifies passing parameters for ( mostly ) collections methods . 
 + * A simple container that simplify passing parameters for collections methods . 
 * / 
 public class UpdateParameters 
 { 
 @ @ - 61 , 27 + 61 , 21 @ @ public class UpdateParameters 
 public Cell makeTombstone ( CellName name ) throws InvalidRequestException 
 { 
 QueryProcessor . validateCellName ( name , metadata . comparator ) ; 
 - return new BufferDeletedCell ( name , localDeletionTime , tombstoneTimestamp ( ) ) ; 
 + return new BufferDeletedCell ( name , localDeletionTime , timestamp ) ; 
 } 
 
 public RangeTombstone makeRangeTombstone ( ColumnSlice slice ) throws InvalidRequestException 
 { 
 QueryProcessor . validateComposite ( slice . start , metadata . comparator ) ; 
 QueryProcessor . validateComposite ( slice . finish , metadata . comparator ) ; 
 - return new RangeTombstone ( slice . start , slice . finish , tombstoneTimestamp ( ) , localDeletionTime ) ; 
 + return new RangeTombstone ( slice . start , slice . finish , timestamp , localDeletionTime ) ; 
 } 
 
 public RangeTombstone makeTombstoneForOverwrite ( ColumnSlice slice ) throws InvalidRequestException 
 { 
 QueryProcessor . validateComposite ( slice . start , metadata . comparator ) ; 
 QueryProcessor . validateComposite ( slice . finish , metadata . comparator ) ; 
 - / / As of 2 . 1 , will never be called for a counter table . However , in 3 . 0 , CASSANDRA - 6506 might change that , so play safe . 
 - return new RangeTombstone ( slice . start , slice . finish , tombstoneTimestamp ( ) - 1 , localDeletionTime ) ; 
 - } 
 - 
 - public DeletionInfo makeDeletionInfo ( ) 
 - { 
 - return new DeletionInfo ( tombstoneTimestamp ( ) , localDeletionTime ) ; 
 + return new RangeTombstone ( slice . start , slice . finish , timestamp - 1 , localDeletionTime ) ; 
 } 
 
 public List < Cell > getPrefetchedList ( ByteBuffer rowKey , ColumnIdentifier cql3ColumnName ) 
 @ @ - 92 , 9 + 86 , 4 @ @ public class UpdateParameters 
 CQL3Row row = prefetchedLists . get ( rowKey ) ; 
 return row = = null ? Collections . < Cell > emptyList ( ) : row . getCollection ( cql3ColumnName ) ; 
 } 
 - 
 - private long tombstoneTimestamp ( ) 
 - { 
 - return metadata . isCounter ( ) ? CounterMutation . TOMBSTONE _ TIMESTAMP : timestamp ; 
 - } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 index 1569ae4 . . 49fdfc2 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / DeleteStatement . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class DeleteStatement extends ModificationStatement 
 if ( prefix . isEmpty ( ) ) 
 { 
 / / No columns specified , delete the row 
 - cf . delete ( params . makeDeletionInfo ( ) ) ; 
 + cf . delete ( new DeletionInfo ( params . timestamp , params . localDeletionTime ) ) ; 
 } 
 else if ( cfm . comparator . isDense ( ) & & prefix . size ( ) = = cfm . clusteringColumns ( ) . size ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / CounterMutation . java b / src / java / org / apache / cassandra / db / CounterMutation . java 
 index 848e4db . . 2bfdd4e 100644 
 - - - a / src / java / org / apache / cassandra / db / CounterMutation . java 
 + + + b / src / java / org / apache / cassandra / db / CounterMutation . java 
 @ @ - 44 , 9 + 44 , 6 @ @ import org . apache . cassandra . utils . * ; 
 
 public class CounterMutation implements IMutation 
 { 
 - / / Counter deletions are final in C * , because there is no way to provide reliable deletion otherwise . 
 - public static final long TOMBSTONE _ TIMESTAMP = Long . MAX _ VALUE ; 
 - 
 public static final CounterMutationSerializer serializer = new CounterMutationSerializer ( ) ; 
 
 private static final Striped < Lock > LOCKS = Striped . lazyWeakLock ( DatabaseDescriptor . getConcurrentCounterWriters ( ) * 1024 ) ; 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 49466bd . . 1a77ffa 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 907 , 18 + 907 , 16 @ @ public class CassandraServer implements Cassandra . Iface 
 
 private void deleteColumnOrSuperColumn ( org . apache . cassandra . db . Mutation mutation , CFMetaData cfm , Deletion del ) 
 { 
 - long timestamp = cfm . isCounter ( ) ? CounterMutation . TOMBSTONE _ TIMESTAMP : del . timestamp ; 
 - 
 if ( del . predicate ! = null & & del . predicate . column _ names ! = null ) 
 { 
 for ( ByteBuffer c : del . predicate . column _ names ) 
 { 
 if ( del . super _ column = = null & & cfm . isSuper ( ) ) 
 - mutation . deleteRange ( cfm . cfName , SuperColumns . startOf ( c ) , SuperColumns . endOf ( c ) , timestamp ) ; 
 + mutation . deleteRange ( cfm . cfName , SuperColumns . startOf ( c ) , SuperColumns . endOf ( c ) , del . timestamp ) ; 
 else if ( del . super _ column ! = null ) 
 - mutation . delete ( cfm . cfName , cfm . comparator . makeCellName ( del . super _ column , c ) , timestamp ) ; 
 + mutation . delete ( cfm . cfName , cfm . comparator . makeCellName ( del . super _ column , c ) , del . timestamp ) ; 
 else 
 - mutation . delete ( cfm . cfName , cfm . comparator . cellFromByteBuffer ( c ) , timestamp ) ; 
 + mutation . delete ( cfm . cfName , cfm . comparator . cellFromByteBuffer ( c ) , del . timestamp ) ; 
 } 
 } 
 else if ( del . predicate ! = null & & del . predicate . slice _ range ! = null ) 
 @ @ - 927 , 27 + 925 , 24 @ @ public class CassandraServer implements Cassandra . Iface 
 mutation . deleteRange ( cfm . cfName , 
 SuperColumns . startOf ( del . predicate . getSlice _ range ( ) . start ) , 
 SuperColumns . startOf ( del . predicate . getSlice _ range ( ) . finish ) , 
 - timestamp ) ; 
 + del . timestamp ) ; 
 else if ( del . super _ column ! = null ) 
 - mutation . deleteRange ( cfm . cfName , 
 - cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . start ) , 
 - cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . finish ) , 
 - timestamp ) ; 
 + mutation . deleteRange ( cfm . cfName , 
 + cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . start ) , 
 + cfm . comparator . makeCellName ( del . super _ column , del . predicate . getSlice _ range ( ) . finish ) , 
 + del . timestamp ) ; 
 else 
 mutation . deleteRange ( cfm . cfName , 
 cfm . comparator . cellFromByteBuffer ( del . predicate . getSlice _ range ( ) . start ) , 
 cfm . comparator . cellFromByteBuffer ( del . predicate . getSlice _ range ( ) . finish ) , 
 - timestamp ) ; 
 + del . timestamp ) ; 
 } 
 else 
 { 
 if ( del . super _ column ! = null ) 
 - mutation . deleteRange ( cfm . cfName , 
 - SuperColumns . startOf ( del . super _ column ) , 
 - SuperColumns . endOf ( del . super _ column ) , 
 - timestamp ) ; 
 + mutation . deleteRange ( cfm . cfName , SuperColumns . startOf ( del . super _ column ) , SuperColumns . endOf ( del . super _ column ) , del . timestamp ) ; 
 else 
 - mutation . delete ( cfm . cfName , timestamp ) ; 
 + mutation . delete ( cfm . cfName , del . timestamp ) ; 
 } 
 } 
 
 @ @ - 1835 , 7 + 1830 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 
 try 
 { 
 - internal _ remove ( key , path , CounterMutation . TOMBSTONE _ TIMESTAMP , consistency _ level , true ) ; 
 + internal _ remove ( key , path , System . currentTimeMillis ( ) , consistency _ level , true ) ; 
 } 
 catch ( RequestValidationException e ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
