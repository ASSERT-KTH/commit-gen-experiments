BLEU SCORE: 0.018738883683389617

TEST MSG: Use node ' s host id in place of counter ids
GENERATED MSG: merge from 0 . 7

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a8a84d8 . . 9dd54f9 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 0 <nl> + * Use node ' s host id in place of counter ids ( CASSANDRA - 7366 ) <nl> * Explicitly use Long . MAX _ VALUE timestamp for counter deletions <nl> ( CASSANDRA - 7346 ) <nl> * Fix native protocol CAS batches ( CASSANDRA - 7337 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index f6935e5 . . de2466c 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 144 , 12 + 144 , 6 @ @ public final class CFMetaData <nl> + " PRIMARY KEY ( table _ name , index _ name ) " <nl> + " ) WITH COMPACT STORAGE AND COMMENT = ' indexes that have been completed ' " ) ; <nl> <nl> - public static final CFMetaData CounterIdCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . COUNTER _ ID _ CF + " \ " ( " <nl> - + " key text , " <nl> - + " id timeuuid , " <nl> - + " PRIMARY KEY ( key , id ) " <nl> - + " ) WITH COMPACT STORAGE AND COMMENT = ' counter node IDs ' " ) ; <nl> - <nl> public static final CFMetaData SchemaKeyspacesCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ KEYSPACES _ CF + " ( " <nl> + " keyspace _ name text PRIMARY KEY , " <nl> + " durable _ writes boolean , " <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index d0cb613 . . 7700394 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 96 , 7 + 96 , 6 @ @ public final class KSMetaData <nl> CFMetaData . PeerEventsCf , <nl> CFMetaData . HintsCf , <nl> CFMetaData . IndexCf , <nl> - CFMetaData . CounterIdCf , <nl> CFMetaData . SchemaKeyspacesCf , <nl> CFMetaData . SchemaColumnFamiliesCf , <nl> CFMetaData . SchemaColumnsCf , <nl> diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> index 9cb6e94 . . 659bc69 100644 <nl> - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java <nl> @ @ - 29 , 7 + 29 , 6 @ @ import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . SetMultimap ; <nl> import com . google . common . collect . Sets ; <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 44 , 7 + 43 , 6 @ @ import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; <nl> import org . apache . cassandra . db . compaction . CompactionHistoryTabularData ; <nl> import org . apache . cassandra . db . commitlog . ReplayPosition ; <nl> import org . apache . cassandra . db . composites . Composite ; <nl> - import org . apache . cassandra . db . composites . Composites ; <nl> import org . apache . cassandra . db . filter . QueryFilter ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> import org . apache . cassandra . dht . Range ; <nl> @ @ - 73 , 7 + 71 , 6 @ @ public class SystemKeyspace <nl> public static final String PEER _ EVENTS _ CF = " peer _ events " ; <nl> public static final String LOCAL _ CF = " local " ; <nl> public static final String INDEX _ CF = " IndexInfo " ; <nl> - public static final String COUNTER _ ID _ CF = " NodeIdInfo " ; <nl> public static final String HINTS _ CF = " hints " ; <nl> public static final String RANGE _ XFERS _ CF = " range _ xfers " ; <nl> public static final String BATCHLOG _ CF = " batchlog " ; <nl> @ @ - 89 , 7 + 86 , 6 @ @ public class SystemKeyspace <nl> public static final String COMPACTION _ HISTORY _ CF = " compaction _ history " ; <nl> <nl> private static final String LOCAL _ KEY = " local " ; <nl> - private static final ByteBuffer ALL _ LOCAL _ NODE _ ID _ KEY = ByteBufferUtil . bytes ( " Local " ) ; <nl> <nl> public static final List < String > allSchemaCfs = Arrays . asList ( SCHEMA _ KEYSPACES _ CF , <nl> SCHEMA _ COLUMNFAMILIES _ CF , <nl> @ @ - 688 , 19 + 684 , 15 @ @ public class SystemKeyspace <nl> * / <nl> public static UUID getLocalHostId ( ) <nl> { <nl> - UUID hostId = null ; <nl> - <nl> String req = " SELECT host _ id FROM system . % s WHERE key = ' % s ' " ; <nl> UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; <nl> <nl> / / Look up the Host UUID ( return it if found ) <nl> if ( ! result . isEmpty ( ) & & result . one ( ) . has ( " host _ id " ) ) <nl> - { <nl> return result . one ( ) . getUUID ( " host _ id " ) ; <nl> - } <nl> <nl> / / ID not found , generate a new one , persist , and then return it . <nl> - hostId = UUID . randomUUID ( ) ; <nl> + UUID hostId = UUID . randomUUID ( ) ; <nl> logger . warn ( " No host ID found , created { } ( Note : This should happen exactly once per node ) . " , hostId ) ; <nl> return setLocalHostId ( hostId ) ; <nl> } <nl> @ @ - 716 , 45 + 708 , 6 @ @ public class SystemKeyspace <nl> } <nl> <nl> / * * <nl> - * Read the current local node id from the system keyspace or null if no <nl> - * such node id is recorded . <nl> - * / <nl> - public static CounterId getCurrentLocalCounterId ( ) <nl> - { <nl> - Keyspace keyspace = Keyspace . open ( Keyspace . SYSTEM _ KS ) ; <nl> - <nl> - / / Get the last CounterId ( since CounterId are timeuuid is thus ordered from the older to the newer one ) <nl> - QueryFilter filter = QueryFilter . getSliceFilter ( decorate ( ALL _ LOCAL _ NODE _ ID _ KEY ) , <nl> - COUNTER _ ID _ CF , <nl> - Composites . EMPTY , <nl> - Composites . EMPTY , <nl> - true , <nl> - 1 , <nl> - System . currentTimeMillis ( ) ) ; <nl> - ColumnFamily cf = keyspace . getColumnFamilyStore ( COUNTER _ ID _ CF ) . getColumnFamily ( filter ) ; <nl> - if ( cf ! = null & & cf . hasColumns ( ) ) <nl> - return CounterId . wrap ( cf . iterator ( ) . next ( ) . name ( ) . toByteBuffer ( ) ) ; <nl> - else <nl> - return null ; <nl> - } <nl> - <nl> - / * * <nl> - * Write a new current local node id to the system keyspace . <nl> - * <nl> - * @ param newCounterId the new current local node id to record <nl> - * @ param now microsecond time stamp . <nl> - * / <nl> - public static void writeCurrentLocalCounterId ( CounterId newCounterId , long now ) <nl> - { <nl> - ByteBuffer ip = ByteBuffer . wrap ( FBUtilities . getBroadcastAddress ( ) . getAddress ( ) ) ; <nl> - <nl> - ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( Keyspace . SYSTEM _ KS , COUNTER _ ID _ CF ) ; <nl> - cf . addColumn ( new BufferCell ( cf . getComparator ( ) . makeCellName ( newCounterId . bytes ( ) ) , ip , now ) ) ; <nl> - new Mutation ( Keyspace . SYSTEM _ KS , ALL _ LOCAL _ NODE _ ID _ KEY , cf ) . apply ( ) ; <nl> - forceBlockingFlush ( COUNTER _ ID _ CF ) ; <nl> - } <nl> - <nl> - / * * <nl> * @ param cfName The name of the ColumnFamily responsible for part of the schema ( keyspace , ColumnFamily , columns ) <nl> * @ return CFS responsible to hold low - level serialized schema <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 90f43ac . . 5611f5b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 560 , 17 + 560 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> } <nl> } <nl> <nl> - if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . renew _ counter _ id " , " false " ) ) ) <nl> - { <nl> - logger . info ( " Renewing local node id ( as requested ) " ) ; <nl> - CounterId . renewLocalId ( ) ; <nl> - } <nl> - <nl> - / / Can ' t do this in CassandraDaemon before the SS start b / c local counter id can be renewed afterwards . <nl> - for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> - if ( cfs . metadata . isCounter ( ) ) <nl> - cfs . initCounterCache ( ) ; <nl> - <nl> / / daemon threads , like our executors ' , continue to run while shutdown hooks are invoked <nl> Thread drainOnShutdown = new Thread ( new WrappedRunnable ( ) <nl> { <nl> @ @ - 626 , 6 + 615 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE <nl> Runtime . getRuntime ( ) . addShutdownHook ( drainOnShutdown ) ; <nl> <nl> prepareToJoin ( ) ; <nl> + <nl> + / / Has to be called after the host id has potentially changed in prepareToJoin ( ) . <nl> + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) <nl> + if ( cfs . metadata . isCounter ( ) ) <nl> + cfs . initCounterCache ( ) ; <nl> + <nl> if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) <nl> { <nl> joinTokenRing ( delay ) ; <nl> diff - - git a / src / java / org / apache / cassandra / utils / CounterId . java b / src / java / org / apache / cassandra / utils / CounterId . java <nl> index b978879 . . 2552178 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / CounterId . java <nl> + + + b / src / java / org / apache / cassandra / utils / CounterId . java <nl> @ @ - 20 , 15 + 20 , 10 @ @ package org . apache . cassandra . utils ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . concurrent . atomic . AtomicReference ; <nl> <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> - <nl> import org . apache . cassandra . db . SystemKeyspace ; <nl> <nl> public class CounterId implements Comparable < CounterId > <nl> { <nl> - private static final Logger logger = LoggerFactory . getLogger ( CounterId . class ) ; <nl> - <nl> public static final int LENGTH = 16 ; / / we assume a fixed length size for all CounterIds <nl> <nl> / / Lazy holder because this opens the system keyspace and we want to avoid <nl> @ @ - 51 , 16 + 46 , 6 @ @ public class CounterId implements Comparable < CounterId > <nl> } <nl> <nl> / * * <nl> - * Renew the local counter id . <nl> - * To use only when this strictly necessary , as using this will make all <nl> - * counter context grow with time . <nl> - * / <nl> - public static synchronized void renewLocalId ( ) <nl> - { <nl> - localId ( ) . renew ( FBUtilities . timestampMicros ( ) ) ; <nl> - } <nl> - <nl> - / * * <nl> * Function for test purposes , do not use otherwise . <nl> * Pack an int in a valid CounterId so that the resulting ids respects the <nl> * numerical ordering . Used for creating handcrafted but easy to <nl> @ @ - 150 , 28 + 135 , 7 @ @ public class CounterId implements Comparable < CounterId > <nl> <nl> LocalCounterIdHolder ( ) <nl> { <nl> - CounterId id = SystemKeyspace . getCurrentLocalCounterId ( ) ; <nl> - <nl> - if ( id = = null ) <nl> - { <nl> - / / no recorded local counter id , generating a new one and saving it <nl> - id = generate ( ) ; <nl> - logger . info ( " No saved local counter id , using newly generated : { } " , id ) ; <nl> - SystemKeyspace . writeCurrentLocalCounterId ( id , FBUtilities . timestampMicros ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - logger . info ( " Using saved local counter id : { } " , id ) ; <nl> - } <nl> - <nl> - current = new AtomicReference < > ( id ) ; <nl> - } <nl> - <nl> - synchronized void renew ( long now ) <nl> - { <nl> - CounterId newCounterId = generate ( ) ; <nl> - SystemKeyspace . writeCurrentLocalCounterId ( newCounterId , now ) ; <nl> - current . set ( newCounterId ) ; <nl> + current = new AtomicReference < > ( wrap ( ByteBufferUtil . bytes ( SystemKeyspace . getLocalHostId ( ) ) ) ) ; <nl> } <nl> <nl> CounterId get ( ) <nl> diff - - git a / test / unit / org / apache / cassandra / utils / CounterIdTest . java b / test / unit / org / apache / cassandra / utils / CounterIdTest . java <nl> deleted file mode 100644 <nl> index 2b6cb32 . . 0000000 <nl> - - - a / test / unit / org / apache / cassandra / utils / CounterIdTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 49 + 0 , 0 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . utils ; <nl> - <nl> - import org . junit . Test ; <nl> - <nl> - import org . apache . cassandra . SchemaLoader ; <nl> - import org . apache . cassandra . db . SystemKeyspace ; <nl> - <nl> - import static org . junit . Assert . assertEquals ; <nl> - import static org . junit . Assert . assertTrue ; <nl> - <nl> - public class CounterIdTest extends SchemaLoader <nl> - { <nl> - @ Test <nl> - public void testGetCurrentIdFromSystemKeyspace ( ) <nl> - { <nl> - / / Renewing a bunch of times and checking we get the same thing from <nl> - / / the system keyspace that what is in memory <nl> - CounterId id0 = CounterId . getLocalId ( ) ; <nl> - assertEquals ( id0 , SystemKeyspace . getCurrentLocalCounterId ( ) ) ; <nl> - <nl> - CounterId . renewLocalId ( ) ; <nl> - CounterId id1 = CounterId . getLocalId ( ) ; <nl> - assertEquals ( id1 , SystemKeyspace . getCurrentLocalCounterId ( ) ) ; <nl> - assertTrue ( id1 . compareTo ( id0 ) = = 1 ) ; <nl> - <nl> - CounterId . renewLocalId ( ) ; <nl> - CounterId id2 = CounterId . getLocalId ( ) ; <nl> - assertEquals ( id2 , SystemKeyspace . getCurrentLocalCounterId ( ) ) ; <nl> - assertTrue ( id2 . compareTo ( id1 ) = = 1 ) ; <nl> - } <nl> - } <nl> -
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index eec904a . . 982454c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 59 , 6 + 59 , 8 @ @ <nl> the old ones ( CASSANDRA - 1644 ) <nl> * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) <nl> * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM <nl> + * cli truncate support ( CASSANDRA - 1653 ) <nl> + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) <nl> <nl> <nl> 0 . 7 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g <nl> index e59c608 . . a9229ee 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / Cli . g <nl> + + + b / src / java / org / apache / cassandra / cli / Cli . g <nl> @ @ - 55 , 6 + 55 , 7 @ @ tokens { <nl> NODE _ UPDATE _ KEYSPACE ; <nl> NODE _ UPDATE _ COLUMN _ FAMILY ; <nl> NODE _ LIST ; <nl> + NODE _ TRUNCATE ; <nl> <nl> / / Internal Nodes . <nl> NODE _ COLUMN _ ACCESS ; <nl> @ @ - 123 , 6 + 124 , 7 @ @ statement <nl> | setStatement <nl> | showStatement <nl> | listStatement <nl> + | truncateStatement <nl> | - > ^ ( NODE _ NO _ OP ) <nl> ; <nl> <nl> @ @ - 174 , 6 + 176 , 8 @ @ helpStatement <nl> - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) <nl> | K _ HELP K _ LIST <nl> - > ^ ( NODE _ HELP NODE _ LIST ) <nl> + | K _ HELP K _ TRUNCATE <nl> + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) <nl> | K _ HELP <nl> - > ^ ( NODE _ HELP ) <nl> | ' ? ' <nl> @ @ - 231 , 6 + 235 , 11 @ @ listStatement <nl> - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) <nl> ; <nl> <nl> + truncateStatement <nl> + : K _ TRUNCATE columnFamily <nl> + - > ^ ( NODE _ TRUNCATE columnFamily ) <nl> + ; <nl> + <nl> showClusterName <nl> : K _ SHOW K _ CLUSTER K _ NAME <nl> - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) <nl> @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; <nl> K _ UPDATE : ' UPDATE ' ; <nl> K _ LIST : ' LIST ' ; <nl> K _ LIMIT : ' LIMIT ' ; <nl> + K _ TRUNCATE : ' TRUNCATE ' ; <nl> <nl> / / private syntactic rules <nl> fragment <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java <nl> index b6ace98 . . b63105a 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliClient . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliClient . java <nl> @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp <nl> case CliParser . NODE _ LIST : <nl> executeList ( tree ) ; <nl> break ; <nl> + case CliParser . NODE _ TRUNCATE : <nl> + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; <nl> + break ; <nl> case CliParser . NODE _ NO _ OP : <nl> / / comment lines come here ; they are treated as no ops . <nl> break ; <nl> @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp <nl> printSliceList ( columnFamilyDef , keySlices ) ; <nl> } <nl> <nl> + / / TRUNCATE < columnFamily > <nl> + private void executeTruncate ( String columnFamily ) <nl> + { <nl> + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) <nl> + return ; <nl> + <nl> + / / getting CfDef , it will fail if there is no such column family in current keySpace . <nl> + CfDef cfDef = getCfDef ( columnFamily ) ; <nl> + <nl> + try <nl> + { <nl> + thriftClient . truncate ( cfDef . getName ( ) ) ; <nl> + sessionState . out . println ( columnFamily + " truncated . " ) ; <nl> + } <nl> + catch ( InvalidRequestException e ) <nl> + { <nl> + throw new RuntimeException ( e . getWhy ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + <nl> / / SHOW API VERSION <nl> private void executeShowVersion ( ) throws TException <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> index f541fe5 . . b033d8f 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java <nl> @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor <nl> " help set " , <nl> " help del " , <nl> " help count " , <nl> + " help list " , <nl> + " help truncate " <nl> } ; <nl> private static String [ ] keyspaceCommands = { <nl> " get " , <nl> " set " , <nl> " count " , <nl> - " del " <nl> + " del " , <nl> + " list " , <nl> + " truncate " <nl> } ; <nl> <nl> public CliCompleter ( ) <nl> diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> index 7c512e2 . . db6a779 100644 <nl> - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java <nl> @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { <nl> state . out . println ( " list Users [ j : ] limit 40 " ) ; <nl> break ; <nl> <nl> + case CliParser . NODE _ TRUNCATE : <nl> + state . out . println ( " truncate < column _ family > " ) ; <nl> + state . out . println ( " Truncate specified column family . \ n " ) ; <nl> + state . out . println ( " example : " ) ; <nl> + state . out . println ( " truncate Category " ) ; <nl> + break ; <nl> + <nl> default : <nl> state . out . println ( " ? " ) ; <nl> break ; <nl> @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { <nl> state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; <nl> state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; <nl> - state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; <nl> + state . out . println ( " list < cf > List all rows in the column family . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : ] " ) ; <nl> state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; <nl> state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 24a3de0 . . eddcafd 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase <nl> " list CF3 [ h : ] " , <nl> " list CF3 limit 10 " , <nl> " list CF3 [ h : g ] limit 10 " , <nl> + " truncate CF1 " , <nl> " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , <nl> " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " <nl> } ; <nl> @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase <nl> assertTrue ( result . startsWith ( " = > ( column = " ) ) ; <nl> } <nl> } <nl> + else if ( statement . startsWith ( " truncate " ) ) <nl> + { <nl> + assertTrue ( result . contains ( " truncated . " ) ) ; <nl> + } <nl> <nl> outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time <nl> errStream . reset ( ) ; / / no errors to the end user .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a8a84d8 . . 9dd54f9 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 0 
 + * Use node ' s host id in place of counter ids ( CASSANDRA - 7366 ) 
 * Explicitly use Long . MAX _ VALUE timestamp for counter deletions 
 ( CASSANDRA - 7346 ) 
 * Fix native protocol CAS batches ( CASSANDRA - 7337 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index f6935e5 . . de2466c 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 144 , 12 + 144 , 6 @ @ public final class CFMetaData 
 + " PRIMARY KEY ( table _ name , index _ name ) " 
 + " ) WITH COMPACT STORAGE AND COMMENT = ' indexes that have been completed ' " ) ; 
 
 - public static final CFMetaData CounterIdCf = compile ( " CREATE TABLE \ " " + SystemKeyspace . COUNTER _ ID _ CF + " \ " ( " 
 - + " key text , " 
 - + " id timeuuid , " 
 - + " PRIMARY KEY ( key , id ) " 
 - + " ) WITH COMPACT STORAGE AND COMMENT = ' counter node IDs ' " ) ; 
 - 
 public static final CFMetaData SchemaKeyspacesCf = compile ( " CREATE TABLE " + SystemKeyspace . SCHEMA _ KEYSPACES _ CF + " ( " 
 + " keyspace _ name text PRIMARY KEY , " 
 + " durable _ writes boolean , " 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index d0cb613 . . 7700394 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 96 , 7 + 96 , 6 @ @ public final class KSMetaData 
 CFMetaData . PeerEventsCf , 
 CFMetaData . HintsCf , 
 CFMetaData . IndexCf , 
 - CFMetaData . CounterIdCf , 
 CFMetaData . SchemaKeyspacesCf , 
 CFMetaData . SchemaColumnFamiliesCf , 
 CFMetaData . SchemaColumnsCf , 
 diff - - git a / src / java / org / apache / cassandra / db / SystemKeyspace . java b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 index 9cb6e94 . . 659bc69 100644 
 - - - a / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / SystemKeyspace . java 
 @ @ - 29 , 7 + 29 , 6 @ @ import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . SetMultimap ; 
 import com . google . common . collect . Sets ; 
 - import org . apache . commons . lang3 . StringUtils ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 44 , 7 + 43 , 6 @ @ import org . apache . cassandra . db . columniterator . IdentityQueryFilter ; 
 import org . apache . cassandra . db . compaction . CompactionHistoryTabularData ; 
 import org . apache . cassandra . db . commitlog . ReplayPosition ; 
 import org . apache . cassandra . db . composites . Composite ; 
 - import org . apache . cassandra . db . composites . Composites ; 
 import org . apache . cassandra . db . filter . QueryFilter ; 
 import org . apache . cassandra . db . marshal . * ; 
 import org . apache . cassandra . dht . Range ; 
 @ @ - 73 , 7 + 71 , 6 @ @ public class SystemKeyspace 
 public static final String PEER _ EVENTS _ CF = " peer _ events " ; 
 public static final String LOCAL _ CF = " local " ; 
 public static final String INDEX _ CF = " IndexInfo " ; 
 - public static final String COUNTER _ ID _ CF = " NodeIdInfo " ; 
 public static final String HINTS _ CF = " hints " ; 
 public static final String RANGE _ XFERS _ CF = " range _ xfers " ; 
 public static final String BATCHLOG _ CF = " batchlog " ; 
 @ @ - 89 , 7 + 86 , 6 @ @ public class SystemKeyspace 
 public static final String COMPACTION _ HISTORY _ CF = " compaction _ history " ; 
 
 private static final String LOCAL _ KEY = " local " ; 
 - private static final ByteBuffer ALL _ LOCAL _ NODE _ ID _ KEY = ByteBufferUtil . bytes ( " Local " ) ; 
 
 public static final List < String > allSchemaCfs = Arrays . asList ( SCHEMA _ KEYSPACES _ CF , 
 SCHEMA _ COLUMNFAMILIES _ CF , 
 @ @ - 688 , 19 + 684 , 15 @ @ public class SystemKeyspace 
 * / 
 public static UUID getLocalHostId ( ) 
 { 
 - UUID hostId = null ; 
 - 
 String req = " SELECT host _ id FROM system . % s WHERE key = ' % s ' " ; 
 UntypedResultSet result = executeInternal ( String . format ( req , LOCAL _ CF , LOCAL _ KEY ) ) ; 
 
 / / Look up the Host UUID ( return it if found ) 
 if ( ! result . isEmpty ( ) & & result . one ( ) . has ( " host _ id " ) ) 
 - { 
 return result . one ( ) . getUUID ( " host _ id " ) ; 
 - } 
 
 / / ID not found , generate a new one , persist , and then return it . 
 - hostId = UUID . randomUUID ( ) ; 
 + UUID hostId = UUID . randomUUID ( ) ; 
 logger . warn ( " No host ID found , created { } ( Note : This should happen exactly once per node ) . " , hostId ) ; 
 return setLocalHostId ( hostId ) ; 
 } 
 @ @ - 716 , 45 + 708 , 6 @ @ public class SystemKeyspace 
 } 
 
 / * * 
 - * Read the current local node id from the system keyspace or null if no 
 - * such node id is recorded . 
 - * / 
 - public static CounterId getCurrentLocalCounterId ( ) 
 - { 
 - Keyspace keyspace = Keyspace . open ( Keyspace . SYSTEM _ KS ) ; 
 - 
 - / / Get the last CounterId ( since CounterId are timeuuid is thus ordered from the older to the newer one ) 
 - QueryFilter filter = QueryFilter . getSliceFilter ( decorate ( ALL _ LOCAL _ NODE _ ID _ KEY ) , 
 - COUNTER _ ID _ CF , 
 - Composites . EMPTY , 
 - Composites . EMPTY , 
 - true , 
 - 1 , 
 - System . currentTimeMillis ( ) ) ; 
 - ColumnFamily cf = keyspace . getColumnFamilyStore ( COUNTER _ ID _ CF ) . getColumnFamily ( filter ) ; 
 - if ( cf ! = null & & cf . hasColumns ( ) ) 
 - return CounterId . wrap ( cf . iterator ( ) . next ( ) . name ( ) . toByteBuffer ( ) ) ; 
 - else 
 - return null ; 
 - } 
 - 
 - / * * 
 - * Write a new current local node id to the system keyspace . 
 - * 
 - * @ param newCounterId the new current local node id to record 
 - * @ param now microsecond time stamp . 
 - * / 
 - public static void writeCurrentLocalCounterId ( CounterId newCounterId , long now ) 
 - { 
 - ByteBuffer ip = ByteBuffer . wrap ( FBUtilities . getBroadcastAddress ( ) . getAddress ( ) ) ; 
 - 
 - ColumnFamily cf = ArrayBackedSortedColumns . factory . create ( Keyspace . SYSTEM _ KS , COUNTER _ ID _ CF ) ; 
 - cf . addColumn ( new BufferCell ( cf . getComparator ( ) . makeCellName ( newCounterId . bytes ( ) ) , ip , now ) ) ; 
 - new Mutation ( Keyspace . SYSTEM _ KS , ALL _ LOCAL _ NODE _ ID _ KEY , cf ) . apply ( ) ; 
 - forceBlockingFlush ( COUNTER _ ID _ CF ) ; 
 - } 
 - 
 - / * * 
 * @ param cfName The name of the ColumnFamily responsible for part of the schema ( keyspace , ColumnFamily , columns ) 
 * @ return CFS responsible to hold low - level serialized schema 
 * / 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 90f43ac . . 5611f5b 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 560 , 17 + 560 , 6 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 } 
 } 
 
 - if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . renew _ counter _ id " , " false " ) ) ) 
 - { 
 - logger . info ( " Renewing local node id ( as requested ) " ) ; 
 - CounterId . renewLocalId ( ) ; 
 - } 
 - 
 - / / Can ' t do this in CassandraDaemon before the SS start b / c local counter id can be renewed afterwards . 
 - for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 - if ( cfs . metadata . isCounter ( ) ) 
 - cfs . initCounterCache ( ) ; 
 - 
 / / daemon threads , like our executors ' , continue to run while shutdown hooks are invoked 
 Thread drainOnShutdown = new Thread ( new WrappedRunnable ( ) 
 { 
 @ @ - 626 , 6 + 615 , 12 @ @ public class StorageService extends NotificationBroadcasterSupport implements IE 
 Runtime . getRuntime ( ) . addShutdownHook ( drainOnShutdown ) ; 
 
 prepareToJoin ( ) ; 
 + 
 + / / Has to be called after the host id has potentially changed in prepareToJoin ( ) . 
 + for ( ColumnFamilyStore cfs : ColumnFamilyStore . all ( ) ) 
 + if ( cfs . metadata . isCounter ( ) ) 
 + cfs . initCounterCache ( ) ; 
 + 
 if ( Boolean . parseBoolean ( System . getProperty ( " cassandra . join _ ring " , " true " ) ) ) 
 { 
 joinTokenRing ( delay ) ; 
 diff - - git a / src / java / org / apache / cassandra / utils / CounterId . java b / src / java / org / apache / cassandra / utils / CounterId . java 
 index b978879 . . 2552178 100644 
 - - - a / src / java / org / apache / cassandra / utils / CounterId . java 
 + + + b / src / java / org / apache / cassandra / utils / CounterId . java 
 @ @ - 20 , 15 + 20 , 10 @ @ package org . apache . cassandra . utils ; 
 import java . nio . ByteBuffer ; 
 import java . util . concurrent . atomic . AtomicReference ; 
 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 - 
 import org . apache . cassandra . db . SystemKeyspace ; 
 
 public class CounterId implements Comparable < CounterId > 
 { 
 - private static final Logger logger = LoggerFactory . getLogger ( CounterId . class ) ; 
 - 
 public static final int LENGTH = 16 ; / / we assume a fixed length size for all CounterIds 
 
 / / Lazy holder because this opens the system keyspace and we want to avoid 
 @ @ - 51 , 16 + 46 , 6 @ @ public class CounterId implements Comparable < CounterId > 
 } 
 
 / * * 
 - * Renew the local counter id . 
 - * To use only when this strictly necessary , as using this will make all 
 - * counter context grow with time . 
 - * / 
 - public static synchronized void renewLocalId ( ) 
 - { 
 - localId ( ) . renew ( FBUtilities . timestampMicros ( ) ) ; 
 - } 
 - 
 - / * * 
 * Function for test purposes , do not use otherwise . 
 * Pack an int in a valid CounterId so that the resulting ids respects the 
 * numerical ordering . Used for creating handcrafted but easy to 
 @ @ - 150 , 28 + 135 , 7 @ @ public class CounterId implements Comparable < CounterId > 
 
 LocalCounterIdHolder ( ) 
 { 
 - CounterId id = SystemKeyspace . getCurrentLocalCounterId ( ) ; 
 - 
 - if ( id = = null ) 
 - { 
 - / / no recorded local counter id , generating a new one and saving it 
 - id = generate ( ) ; 
 - logger . info ( " No saved local counter id , using newly generated : { } " , id ) ; 
 - SystemKeyspace . writeCurrentLocalCounterId ( id , FBUtilities . timestampMicros ( ) ) ; 
 - } 
 - else 
 - { 
 - logger . info ( " Using saved local counter id : { } " , id ) ; 
 - } 
 - 
 - current = new AtomicReference < > ( id ) ; 
 - } 
 - 
 - synchronized void renew ( long now ) 
 - { 
 - CounterId newCounterId = generate ( ) ; 
 - SystemKeyspace . writeCurrentLocalCounterId ( newCounterId , now ) ; 
 - current . set ( newCounterId ) ; 
 + current = new AtomicReference < > ( wrap ( ByteBufferUtil . bytes ( SystemKeyspace . getLocalHostId ( ) ) ) ) ; 
 } 
 
 CounterId get ( ) 
 diff - - git a / test / unit / org / apache / cassandra / utils / CounterIdTest . java b / test / unit / org / apache / cassandra / utils / CounterIdTest . java 
 deleted file mode 100644 
 index 2b6cb32 . . 0000000 
 - - - a / test / unit / org / apache / cassandra / utils / CounterIdTest . java 
 + + + / dev / null 
 @ @ - 1 , 49 + 0 , 0 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . utils ; 
 - 
 - import org . junit . Test ; 
 - 
 - import org . apache . cassandra . SchemaLoader ; 
 - import org . apache . cassandra . db . SystemKeyspace ; 
 - 
 - import static org . junit . Assert . assertEquals ; 
 - import static org . junit . Assert . assertTrue ; 
 - 
 - public class CounterIdTest extends SchemaLoader 
 - { 
 - @ Test 
 - public void testGetCurrentIdFromSystemKeyspace ( ) 
 - { 
 - / / Renewing a bunch of times and checking we get the same thing from 
 - / / the system keyspace that what is in memory 
 - CounterId id0 = CounterId . getLocalId ( ) ; 
 - assertEquals ( id0 , SystemKeyspace . getCurrentLocalCounterId ( ) ) ; 
 - 
 - CounterId . renewLocalId ( ) ; 
 - CounterId id1 = CounterId . getLocalId ( ) ; 
 - assertEquals ( id1 , SystemKeyspace . getCurrentLocalCounterId ( ) ) ; 
 - assertTrue ( id1 . compareTo ( id0 ) = = 1 ) ; 
 - 
 - CounterId . renewLocalId ( ) ; 
 - CounterId id2 = CounterId . getLocalId ( ) ; 
 - assertEquals ( id2 , SystemKeyspace . getCurrentLocalCounterId ( ) ) ; 
 - assertTrue ( id2 . compareTo ( id1 ) = = 1 ) ; 
 - } 
 - } 
 -

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index eec904a . . 982454c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 59 , 6 + 59 , 8 @ @ 
 the old ones ( CASSANDRA - 1644 ) 
 * upgrade to Thrift 0 . 5 ( CASSANDRA - 1367 ) 
 * renamed CL . DCQUORUM to LOCAL _ QUORUM and DCQUORUMSYNC to EACH _ QUORUM 
 + * cli truncate support ( CASSANDRA - 1653 ) 
 + * update GC settings in cassandra . bat ( CASSANDRA - 1636 ) 
 
 
 0 . 7 - beta2 
 diff - - git a / src / java / org / apache / cassandra / cli / Cli . g b / src / java / org / apache / cassandra / cli / Cli . g 
 index e59c608 . . a9229ee 100644 
 - - - a / src / java / org / apache / cassandra / cli / Cli . g 
 + + + b / src / java / org / apache / cassandra / cli / Cli . g 
 @ @ - 55 , 6 + 55 , 7 @ @ tokens { 
 NODE _ UPDATE _ KEYSPACE ; 
 NODE _ UPDATE _ COLUMN _ FAMILY ; 
 NODE _ LIST ; 
 + NODE _ TRUNCATE ; 
 
 / / Internal Nodes . 
 NODE _ COLUMN _ ACCESS ; 
 @ @ - 123 , 6 + 124 , 7 @ @ statement 
 | setStatement 
 | showStatement 
 | listStatement 
 + | truncateStatement 
 | - > ^ ( NODE _ NO _ OP ) 
 ; 
 
 @ @ - 174 , 6 + 176 , 8 @ @ helpStatement 
 - > ^ ( NODE _ HELP NODE _ THRIFT _ COUNT ) 
 | K _ HELP K _ LIST 
 - > ^ ( NODE _ HELP NODE _ LIST ) 
 + | K _ HELP K _ TRUNCATE 
 + - > ^ ( NODE _ HELP NODE _ TRUNCATE ) 
 | K _ HELP 
 - > ^ ( NODE _ HELP ) 
 | ' ? ' 
 @ @ - 231 , 6 + 235 , 11 @ @ listStatement 
 - > ^ ( NODE _ LIST columnFamily keyRangeExpr ? ^ ( NODE _ LIMIT $ limit ) ? ) 
 ; 
 
 + truncateStatement 
 + : K _ TRUNCATE columnFamily 
 + - > ^ ( NODE _ TRUNCATE columnFamily ) 
 + ; 
 + 
 showClusterName 
 : K _ SHOW K _ CLUSTER K _ NAME 
 - > ^ ( NODE _ SHOW _ CLUSTER _ NAME ) 
 @ @ - 430 , 6 + 439 , 7 @ @ K _ AND : ' AND ' ; 
 K _ UPDATE : ' UPDATE ' ; 
 K _ LIST : ' LIST ' ; 
 K _ LIMIT : ' LIMIT ' ; 
 + K _ TRUNCATE : ' TRUNCATE ' ; 
 
 / / private syntactic rules 
 fragment 
 diff - - git a / src / java / org / apache / cassandra / cli / CliClient . java b / src / java / org / apache / cassandra / cli / CliClient . java 
 index b6ace98 . . b63105a 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliClient . java 
 + + + b / src / java / org / apache / cassandra / cli / CliClient . java 
 @ @ - 171 , 6 + 171 , 9 @ @ public class CliClient extends CliUserHelp 
 case CliParser . NODE _ LIST : 
 executeList ( tree ) ; 
 break ; 
 + case CliParser . NODE _ TRUNCATE : 
 + executeTruncate ( tree . getChild ( 0 ) . getText ( ) ) ; 
 + break ; 
 case CliParser . NODE _ NO _ OP : 
 / / comment lines come here ; they are treated as no ops . 
 break ; 
 @ @ - 943 , 6 + 946 , 30 @ @ public class CliClient extends CliUserHelp 
 printSliceList ( columnFamilyDef , keySlices ) ; 
 } 
 
 + / / TRUNCATE < columnFamily > 
 + private void executeTruncate ( String columnFamily ) 
 + { 
 + if ( ! CliMain . isConnected ( ) | | ! hasKeySpace ( ) ) 
 + return ; 
 + 
 + / / getting CfDef , it will fail if there is no such column family in current keySpace . 
 + CfDef cfDef = getCfDef ( columnFamily ) ; 
 + 
 + try 
 + { 
 + thriftClient . truncate ( cfDef . getName ( ) ) ; 
 + sessionState . out . println ( columnFamily + " truncated . " ) ; 
 + } 
 + catch ( InvalidRequestException e ) 
 + { 
 + throw new RuntimeException ( e . getWhy ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e . getMessage ( ) ) ; 
 + } 
 + } 
 + 
 / / SHOW API VERSION 
 private void executeShowVersion ( ) throws TException 
 { 
 diff - - git a / src / java / org / apache / cassandra / cli / CliCompleter . java b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 index f541fe5 . . b033d8f 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliCompleter . java 
 + + + b / src / java / org / apache / cassandra / cli / CliCompleter . java 
 @ @ - 55 , 12 + 55 , 16 @ @ public class CliCompleter extends SimpleCompletor 
 " help set " , 
 " help del " , 
 " help count " , 
 + " help list " , 
 + " help truncate " 
 } ; 
 private static String [ ] keyspaceCommands = { 
 " get " , 
 " set " , 
 " count " , 
 - " del " 
 + " del " , 
 + " list " , 
 + " truncate " 
 } ; 
 
 public CliCompleter ( ) 
 diff - - git a / src / java / org / apache / cassandra / cli / CliUserHelp . java b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 index 7c512e2 . . db6a779 100644 
 - - - a / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 + + + b / src / java / org / apache / cassandra / cli / CliUserHelp . java 
 @ @ - 281 , 6 + 281 , 13 @ @ public class CliUserHelp { 
 state . out . println ( " list Users [ j : ] limit 40 " ) ; 
 break ; 
 
 + case CliParser . NODE _ TRUNCATE : 
 + state . out . println ( " truncate < column _ family > " ) ; 
 + state . out . println ( " Truncate specified column family . \ n " ) ; 
 + state . out . println ( " example : " ) ; 
 + state . out . println ( " truncate Category " ) ; 
 + break ; 
 + 
 default : 
 state . out . println ( " ? " ) ; 
 break ; 
 @ @ - 324 , 7 + 331 , 8 @ @ public class CliUserHelp { 
 state . out . println ( " del < cf > [ ' < key > ' ] [ ' < super > ' ] [ ' < col > ' ] Delete sub column . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] Count columns in record . " ) ; 
 state . out . println ( " count < cf > [ ' < key > ' ] [ ' < super > ' ] Count columns in a super column . " ) ; 
 - state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 + state . out . println ( " truncate < column _ family > Truncate specified column family . " ) ; 
 + state . out . println ( " list < cf > List all rows in the column family . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : ] " ) ; 
 state . out . println ( " List rows in the column family beginning with < startKey > . " ) ; 
 state . out . println ( " list < cf > [ < startKey > : < endKey > ] " ) ; 
 diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 24a3de0 . . eddcafd 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 52 , 6 + 52 , 7 @ @ public class CliTest extends TestCase 
 " list CF3 [ h : ] " , 
 " list CF3 limit 10 " , 
 " list CF3 [ h : g ] limit 10 " , 
 + " truncate CF1 " , 
 " update keyspace TestKeySpace with placement _ strategy = ' org . apache . cassandra . locator . LocalStrategy ' " , 
 " update keyspace TestKeySpace with replication _ factor = 1 and strategy _ options = [ { DC1 : 3 , DC2 : 4 , DC5 : 1 } ] " 
 } ; 
 @ @ - 101 , 6 + 102 , 10 @ @ public class CliTest extends TestCase 
 assertTrue ( result . startsWith ( " = > ( column = " ) ) ; 
 } 
 } 
 + else if ( statement . startsWith ( " truncate " ) ) 
 + { 
 + assertTrue ( result . contains ( " truncated . " ) ) ; 
 + } 
 
 outStream . reset ( ) ; / / reset stream so we have only output from next statement all the time 
 errStream . reset ( ) ; / / no errors to the end user .
