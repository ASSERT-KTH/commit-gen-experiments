BLEU SCORE: 0.05522397783539471

TEST MSG: CASSANDRA - 13418 Allow to skip overlapings checks
GENERATED MSG: Add SSTableSplitter tool to split sstables offline

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1f63ced . . 9218d90 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 11 . 1 <nl> + * Add a compaction option to TWCS to ignore sstables overlapping checks ( CASSANDRA - 13418 ) <nl> * BTree . Builder memory leak ( CASSANDRA - 13754 ) <nl> * Revert CASSANDRA - 10368 of supporting non - pk column filtering due to correctness ( CASSANDRA - 13798 ) <nl> * Fix cassandra - stress hang issues when an error during cluster connection happens ( CASSANDRA - 12938 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> index bf3647a . . 84aac09 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; <nl> import java . util . * ; <nl> import java . util . function . Predicate ; <nl> <nl> + import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . db . Memtable ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> <nl> @ @ - 49 , 7 + 50 , 8 @ @ import static org . apache . cassandra . db . lifecycle . SSTableIntervalTree . buildInterva <nl> public class CompactionController implements AutoCloseable <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( CompactionController . class ) ; <nl> - static final boolean NEVER _ PURGE _ TOMBSTONES = Boolean . getBoolean ( " cassandra . never _ purge _ tombstones " ) ; <nl> + private static final String NEVER _ PURGE _ TOMBSTONES _ PROPERTY = Config . PROPERTY _ PREFIX + " never _ purge _ tombstones " ; <nl> + static final boolean NEVER _ PURGE _ TOMBSTONES = Boolean . getBoolean ( NEVER _ PURGE _ TOMBSTONES _ PROPERTY ) ; <nl> <nl> public final ColumnFamilyStore cfs ; <nl> private final boolean compactingRepaired ; <nl> @ @ - 98 , 7 + 100 , 14 @ @ public class CompactionController implements AutoCloseable <nl> { <nl> if ( NEVER _ PURGE _ TOMBSTONES ) <nl> { <nl> - logger . debug ( " not refreshing overlaps - running with - Dcassandra . never _ purge _ tombstones = true " ) ; <nl> + logger . debug ( " not refreshing overlaps - running with - D { } = true " , <nl> + NEVER _ PURGE _ TOMBSTONES _ PROPERTY ) ; <nl> + return ; <nl> + } <nl> + <nl> + if ( ignoreOverlaps ( ) ) <nl> + { <nl> + logger . debug ( " not refreshing overlaps - running with ignoreOverlaps activated " ) ; <nl> return ; <nl> } <nl> <nl> @ @ - 120 , 7 + 129 , 7 @ @ public class CompactionController implements AutoCloseable <nl> if ( this . overlappingSSTables ! = null ) <nl> close ( ) ; <nl> <nl> - if ( compacting = = null ) <nl> + if ( compacting = = null | | ignoreOverlaps ( ) ) <nl> overlappingSSTables = Refs . tryRef ( Collections . < SSTableReader > emptyList ( ) ) ; <nl> else <nl> overlappingSSTables = cfs . getAndReferenceOverlappingLiveSSTables ( compacting ) ; <nl> @ @ - 129 , 7 + 138 , 7 @ @ public class CompactionController implements AutoCloseable <nl> <nl> public Set < SSTableReader > getFullyExpiredSSTables ( ) <nl> { <nl> - return getFullyExpiredSSTables ( cfs , compacting , overlappingSSTables , gcBefore ) ; <nl> + return getFullyExpiredSSTables ( cfs , compacting , overlappingSSTables , gcBefore , ignoreOverlaps ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 146 , 20 + 155 , 39 @ @ public class CompactionController implements AutoCloseable <nl> * @ param compacting we take the drop - candidates from this set , it is usually the sstables included in the compaction <nl> * @ param overlapping the sstables that overlap the ones in compacting . <nl> * @ param gcBefore <nl> + * @ param ignoreOverlaps don ' t check if data shadows / overlaps any data in other sstables <nl> * @ return <nl> * / <nl> - public static Set < SSTableReader > getFullyExpiredSSTables ( ColumnFamilyStore cfStore , Iterable < SSTableReader > compacting , Iterable < SSTableReader > overlapping , int gcBefore ) <nl> + public static Set < SSTableReader > getFullyExpiredSSTables ( ColumnFamilyStore cfStore , <nl> + Iterable < SSTableReader > compacting , <nl> + Iterable < SSTableReader > overlapping , <nl> + int gcBefore , <nl> + boolean ignoreOverlaps ) <nl> { <nl> logger . trace ( " Checking droppable sstables in { } " , cfStore ) ; <nl> <nl> if ( NEVER _ PURGE _ TOMBSTONES | | compacting = = null ) <nl> - return Collections . < SSTableReader > emptySet ( ) ; <nl> + return Collections . emptySet ( ) ; <nl> <nl> if ( cfStore . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) & & ! Iterables . all ( compacting , SSTableReader : : isRepaired ) ) <nl> return Collections . emptySet ( ) ; <nl> <nl> - List < SSTableReader > candidates = new ArrayList < > ( ) ; <nl> + if ( ignoreOverlaps ) <nl> + { <nl> + Set < SSTableReader > fullyExpired = new HashSet < > ( ) ; <nl> + for ( SSTableReader candidate : compacting ) <nl> + { <nl> + if ( candidate . getSSTableMetadata ( ) . maxLocalDeletionTime < gcBefore ) <nl> + { <nl> + fullyExpired . add ( candidate ) ; <nl> + logger . trace ( " Dropping overlap ignored expired SSTable { } ( maxLocalDeletionTime = { } , gcBefore = { } ) " , <nl> + candidate , candidate . getSSTableMetadata ( ) . maxLocalDeletionTime , gcBefore ) ; <nl> + } <nl> + } <nl> + return fullyExpired ; <nl> + } <nl> <nl> + List < SSTableReader > candidates = new ArrayList < > ( ) ; <nl> long minTimestamp = Long . MAX _ VALUE ; <nl> <nl> for ( SSTableReader sstable : overlapping ) <nl> @ @ - 203 , 6 + 231 , 14 @ @ public class CompactionController implements AutoCloseable <nl> return new HashSet < > ( candidates ) ; <nl> } <nl> <nl> + public static Set < SSTableReader > getFullyExpiredSSTables ( ColumnFamilyStore cfStore , <nl> + Iterable < SSTableReader > compacting , <nl> + Iterable < SSTableReader > overlapping , <nl> + int gcBefore ) <nl> + { <nl> + return getFullyExpiredSSTables ( cfStore , compacting , overlapping , gcBefore , false ) ; <nl> + } <nl> + <nl> public String getKeyspace ( ) <nl> { <nl> return cfs . keyspace . getName ( ) ; <nl> @ @ - 306 , 6 + 342 , 23 @ @ public class CompactionController implements AutoCloseable <nl> return reader . simpleIterator ( dfile , key , position , tombstoneOnly ) ; <nl> } <nl> <nl> + / * * <nl> + * Is overlapped sstables ignored <nl> + * <nl> + * Control whether or not we are taking into account overlapping sstables when looking for fully expired sstables . <nl> + * In order to reduce the amount of work needed , we look for sstables that can be dropped instead of compacted . <nl> + * As a safeguard mechanism , for each time range of data in a sstable , we are checking globally to see if all data <nl> + * of this time range is fully expired before considering to drop the sstable . <nl> + * This strategy can retain for a long time a lot of sstables on disk ( see CASSANDRA - 13418 ) so this option <nl> + * control whether or not this check should be ignored . <nl> + * <nl> + * @ return false by default <nl> + * / <nl> + protected boolean ignoreOverlaps ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> private FileDataInput openDataFile ( SSTableReader reader ) <nl> { <nl> return limiter ! = null ? reader . openDataReader ( limiter ) : reader . openDataReader ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionController . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionController . java <nl> new file mode 100644 <nl> index 0000000 . . cf9e0e6 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionController . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . compaction ; <nl> + <nl> + <nl> + import java . util . Set ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> + <nl> + public class TimeWindowCompactionController extends CompactionController <nl> + { <nl> + private static final Logger logger = LoggerFactory . getLogger ( TimeWindowCompactionController . class ) ; <nl> + <nl> + private final boolean ignoreOverlaps ; <nl> + <nl> + public TimeWindowCompactionController ( ColumnFamilyStore cfs , Set < SSTableReader > compacting , int gcBefore , boolean ignoreOverlaps ) <nl> + { <nl> + super ( cfs , compacting , gcBefore ) ; <nl> + this . ignoreOverlaps = ignoreOverlaps ; <nl> + if ( ignoreOverlaps ) <nl> + logger . warn ( " You are running with sstables overlapping checks disabled , it can result in loss of data " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean ignoreOverlaps ( ) <nl> + { <nl> + return ignoreOverlaps ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java <nl> index 595c46d . . 9532cc4 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java <nl> @ @ - 66 , 7 + 66 , 6 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy <nl> } <nl> else <nl> logger . debug ( " Enabling tombstone compactions for TWCS " ) ; <nl> - <nl> } <nl> <nl> @ Override <nl> @ @ - 82 , 7 + 81 , 7 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy <nl> <nl> LifecycleTransaction modifier = cfs . getTracker ( ) . tryModify ( latestBucket , OperationType . COMPACTION ) ; <nl> if ( modifier ! = null ) <nl> - return new CompactionTask ( cfs , modifier , gcBefore ) ; <nl> + return new TimeWindowCompactionTask ( cfs , modifier , gcBefore , options . ignoreOverlaps ) ; <nl> } <nl> } <nl> <nl> @ @ - 104 , 7 + 103 , 8 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy <nl> if ( System . currentTimeMillis ( ) - lastExpiredCheck > options . expiredSSTableCheckFrequency ) <nl> { <nl> logger . debug ( " TWCS expired check sufficiently far in the past , checking for fully expired SSTables " ) ; <nl> - expired = CompactionController . getFullyExpiredSSTables ( cfs , uncompacting , cfs . getOverlappingLiveSSTables ( uncompacting ) , gcBefore ) ; <nl> + expired = CompactionController . getFullyExpiredSSTables ( cfs , uncompacting , options . ignoreOverlaps ? Collections . emptySet ( ) : cfs . getOverlappingLiveSSTables ( uncompacting ) , <nl> + gcBefore , options . ignoreOverlaps ) ; <nl> lastExpiredCheck = System . currentTimeMillis ( ) ; <nl> } <nl> else <nl> @ @ - 330 , 7 + 330 , 7 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy <nl> LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( filteredSSTables , OperationType . COMPACTION ) ; <nl> if ( txn = = null ) <nl> return null ; <nl> - return Collections . singleton ( new CompactionTask ( cfs , txn , gcBefore ) ) ; <nl> + return Collections . singleton ( new TimeWindowCompactionTask ( cfs , txn , gcBefore , options . ignoreOverlaps ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 346 , 7 + 346 , 7 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy <nl> return null ; <nl> } <nl> <nl> - return new CompactionTask ( cfs , modifier , gcBefore ) . setUserDefined ( true ) ; <nl> + return new TimeWindowCompactionTask ( cfs , modifier , gcBefore , options . ignoreOverlaps ) . setUserDefined ( true ) ; <nl> } <nl> <nl> public int getEstimatedRemainingTasks ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java <nl> index 07df606 . . 24b4fe0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . TimeUnit ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> + import org . apache . cassandra . config . Config ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> <nl> public final class TimeWindowCompactionStrategyOptions <nl> @ @ - 36 , 16 + 37 , 21 @ @ public final class TimeWindowCompactionStrategyOptions <nl> protected static final TimeUnit DEFAULT _ COMPACTION _ WINDOW _ UNIT = TimeUnit . DAYS ; <nl> protected static final int DEFAULT _ COMPACTION _ WINDOW _ SIZE = 1 ; <nl> protected static final int DEFAULT _ EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS = 60 * 10 ; <nl> + protected static final Boolean DEFAULT _ UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION = false ; <nl> <nl> protected static final String TIMESTAMP _ RESOLUTION _ KEY = " timestamp _ resolution " ; <nl> protected static final String COMPACTION _ WINDOW _ UNIT _ KEY = " compaction _ window _ unit " ; <nl> protected static final String COMPACTION _ WINDOW _ SIZE _ KEY = " compaction _ window _ size " ; <nl> protected static final String EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY = " expired _ sstable _ check _ frequency _ seconds " ; <nl> + protected static final String UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY = " unsafe _ aggressive _ sstable _ expiration " ; <nl> + <nl> + static final String UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY = Config . PROPERTY _ PREFIX + " allow _ unsafe _ aggressive _ sstable _ expiration " ; <nl> <nl> protected final int sstableWindowSize ; <nl> protected final TimeUnit sstableWindowUnit ; <nl> protected final TimeUnit timestampResolution ; <nl> protected final long expiredSSTableCheckFrequency ; <nl> + protected final boolean ignoreOverlaps ; <nl> <nl> SizeTieredCompactionStrategyOptions stcsOptions ; <nl> <nl> @ @ - 68 , 6 + 74 , 9 @ @ public final class TimeWindowCompactionStrategyOptions <nl> optionValue = options . get ( EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) ; <nl> expiredSSTableCheckFrequency = TimeUnit . MILLISECONDS . convert ( optionValue = = null ? DEFAULT _ EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS : Long . parseLong ( optionValue ) , TimeUnit . SECONDS ) ; <nl> <nl> + optionValue = options . get ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ; <nl> + ignoreOverlaps = optionValue = = null ? DEFAULT _ UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION : ( Boolean . getBoolean ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY ) & & Boolean . parseBoolean ( optionValue ) ) ; <nl> + <nl> stcsOptions = new SizeTieredCompactionStrategyOptions ( options ) ; <nl> } <nl> <nl> @ @ - 77 , 6 + 86 , 7 @ @ public final class TimeWindowCompactionStrategyOptions <nl> timestampResolution = DEFAULT _ TIMESTAMP _ RESOLUTION ; <nl> sstableWindowSize = DEFAULT _ COMPACTION _ WINDOW _ SIZE ; <nl> expiredSSTableCheckFrequency = TimeUnit . MILLISECONDS . convert ( DEFAULT _ EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS , TimeUnit . SECONDS ) ; <nl> + ignoreOverlaps = DEFAULT _ UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION ; <nl> stcsOptions = new SizeTieredCompactionStrategyOptions ( ) ; <nl> } <nl> <nl> @ @ - 136 , 10 + 146 , 22 @ @ public final class TimeWindowCompactionStrategyOptions <nl> throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) , e ) ; <nl> } <nl> <nl> + <nl> + optionValue = options . get ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ; <nl> + if ( optionValue ! = null ) <nl> + { <nl> + if ( ! ( optionValue . equalsIgnoreCase ( " true " ) | | optionValue . equalsIgnoreCase ( " false " ) ) ) <nl> + throw new ConfigurationException ( String . format ( " % s is not ' true ' or ' false ' ( % s ) " , UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , optionValue ) ) ; <nl> + <nl> + if ( optionValue . equalsIgnoreCase ( " true " ) & & ! Boolean . getBoolean ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY ) ) <nl> + throw new ConfigurationException ( String . format ( " % s is requested but not allowed , restart cassandra with - D % s = true to allow it " , UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY ) ) ; <nl> + } <nl> + <nl> uncheckedOptions . remove ( COMPACTION _ WINDOW _ SIZE _ KEY ) ; <nl> uncheckedOptions . remove ( COMPACTION _ WINDOW _ UNIT _ KEY ) ; <nl> uncheckedOptions . remove ( TIMESTAMP _ RESOLUTION _ KEY ) ; <nl> uncheckedOptions . remove ( EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) ; <nl> + uncheckedOptions . remove ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ; <nl> <nl> uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionTask . java <nl> new file mode 100644 <nl> index 0000000 . . 4f1fe6a <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionTask . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + package org . apache . cassandra . db . compaction ; <nl> + <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> + import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> + <nl> + public class TimeWindowCompactionTask extends CompactionTask <nl> + { <nl> + private final boolean ignoreOverlaps ; <nl> + <nl> + public TimeWindowCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean ignoreOverlaps ) <nl> + { <nl> + super ( cfs , txn , gcBefore ) ; <nl> + this . ignoreOverlaps = ignoreOverlaps ; <nl> + } <nl> + <nl> + @ Override <nl> + public CompactionController getCompactionController ( Set < SSTableReader > toCompact ) <nl> + { <nl> + return new TimeWindowCompactionController ( cfs , toCompact , gcBefore , ignoreOverlaps ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java <nl> index 1b400e8 . . 052206e 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java <nl> @ @ - 177 , 6 + 177 , 11 @ @ public class CompactionControllerTest extends SchemaLoader <nl> expired = CompactionController . getFullyExpiredSSTables ( cfs , compacting , overlapping , gcBefore ) ; <nl> assertNotNull ( expired ) ; <nl> assertEquals ( 0 , expired . size ( ) ) ; <nl> + <nl> + / / Now if we explicitly ask to ignore overlaped sstables , we should get back our expired sstable <nl> + expired = CompactionController . getFullyExpiredSSTables ( cfs , compacting , overlapping , gcBefore , true ) ; <nl> + assertNotNull ( expired ) ; <nl> + assertEquals ( 1 , expired . size ( ) ) ; <nl> } <nl> <nl> private void applyMutation ( CFMetaData cfm , DecoratedKey key , long timestamp ) <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java <nl> index 56d53bd . . 6fff279 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java <nl> @ @ - 60 , 6 + 60 , 7 @ @ public class TimeWindowCompactionStrategyTest extends SchemaLoader <nl> { <nl> / / Disable tombstone histogram rounding for tests <nl> System . setProperty ( " cassandra . streaminghistogram . roundseconds " , " 1 " ) ; <nl> + System . setProperty ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY , " true " ) ; <nl> <nl> SchemaLoader . prepareServer ( ) ; <nl> <nl> @ @ - 100 , 13 + 101 , 24 @ @ public class TimeWindowCompactionStrategyTest extends SchemaLoader <nl> { <nl> options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY , " MONTHS " ) ; <nl> validateOptions ( options ) ; <nl> - fail ( String . format ( " Invalid time units should be rejected " , TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY ) ) ; <nl> + fail ( String . format ( " Invalid % s should be rejected " , TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY ) ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY , " MINUTES " ) ; <nl> } <nl> <nl> + try <nl> + { <nl> + options . put ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , " not - a - boolean " ) ; <nl> + validateOptions ( options ) ; <nl> + fail ( String . format ( " Invalid % s should be rejected " , TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + options . put ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , " true " ) ; <nl> + } <nl> + <nl> options . put ( " bad _ option " , " 1 . 0 " ) ; <nl> unvalidated = validateOptions ( options ) ; <nl> assertTrue ( unvalidated . containsKey ( " bad _ option " ) ) ; <nl> @ @ - 272 , 4 + 284 , 64 @ @ public class TimeWindowCompactionStrategyTest extends SchemaLoader <nl> t . transaction . abort ( ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testDropOverlappingExpiredSSTables ( ) throws InterruptedException <nl> + { <nl> + Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; <nl> + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CF _ STANDARD1 ) ; <nl> + cfs . truncateBlocking ( ) ; <nl> + cfs . disableAutoCompaction ( ) ; <nl> + <nl> + ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 ] ) ; <nl> + <nl> + / / create 2 sstables <nl> + DecoratedKey key = Util . dk ( String . valueOf ( " expired " ) ) ; <nl> + new RowUpdateBuilder ( cfs . metadata , System . currentTimeMillis ( ) , 1 , key . getKey ( ) ) <nl> + . clustering ( " column " ) <nl> + . add ( " val " , value ) . build ( ) . applyUnsafe ( ) ; <nl> + <nl> + cfs . forceBlockingFlush ( ) ; <nl> + SSTableReader expiredSSTable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; <nl> + Thread . sleep ( 10 ) ; <nl> + <nl> + new RowUpdateBuilder ( cfs . metadata , System . currentTimeMillis ( ) - 1000 , key . getKey ( ) ) <nl> + . clustering ( " column " ) <nl> + . add ( " val " , value ) . build ( ) . applyUnsafe ( ) ; <nl> + key = Util . dk ( String . valueOf ( " nonexpired " ) ) ; <nl> + new RowUpdateBuilder ( cfs . metadata , System . currentTimeMillis ( ) , key . getKey ( ) ) <nl> + . clustering ( " column " ) <nl> + . add ( " val " , value ) . build ( ) . applyUnsafe ( ) ; <nl> + <nl> + cfs . forceBlockingFlush ( ) ; <nl> + assertEquals ( cfs . getLiveSSTables ( ) . size ( ) , 2 ) ; <nl> + <nl> + Map < String , String > options = new HashMap < > ( ) ; <nl> + <nl> + options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ SIZE _ KEY , " 30 " ) ; <nl> + options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY , " SECONDS " ) ; <nl> + options . put ( TimeWindowCompactionStrategyOptions . TIMESTAMP _ RESOLUTION _ KEY , " MILLISECONDS " ) ; <nl> + options . put ( TimeWindowCompactionStrategyOptions . EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY , " 0 " ) ; <nl> + TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy ( cfs , options ) ; <nl> + for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) <nl> + twcs . addSSTable ( sstable ) ; <nl> + <nl> + twcs . startup ( ) ; <nl> + assertNull ( twcs . getNextBackgroundTask ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ) ; <nl> + Thread . sleep ( 2000 ) ; <nl> + assertNull ( twcs . getNextBackgroundTask ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ) ; <nl> + <nl> + options . put ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , " true " ) ; <nl> + twcs = new TimeWindowCompactionStrategy ( cfs , options ) ; <nl> + for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) <nl> + twcs . addSSTable ( sstable ) ; <nl> + <nl> + twcs . startup ( ) ; <nl> + AbstractCompactionTask t = twcs . getNextBackgroundTask ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; <nl> + assertNotNull ( t ) ; <nl> + assertEquals ( 1 , Iterables . size ( t . transaction . originals ( ) ) ) ; <nl> + SSTableReader sstable = t . transaction . originals ( ) . iterator ( ) . next ( ) ; <nl> + assertEquals ( sstable , expiredSSTable ) ; <nl> + twcs . shutdown ( ) ; <nl> + t . transaction . abort ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> index 245d824 . . 44cbc33 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import org . apache . cassandra . db . Keyspace ; <nl> import org . apache . cassandra . db . compaction . LeveledManifest ; <nl> import org . apache . cassandra . db . compaction . SSTableSplitter ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> - import org . apache . cassandra . service . CassandraDaemon ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> import static org . apache . cassandra . tools . BulkLoader . CmdLineOptions ; <nl> @ @ - 41 , 11 + 40 , 6 @ @ public class StandaloneSplitter <nl> { <nl> public static final int DEFAULT _ SSTABLE _ SIZE = 50 ; <nl> <nl> - static <nl> - { <nl> - CassandraDaemon . initLog4j ( ) ; <nl> - } <nl> - <nl> private static final String TOOL _ NAME = " sstablessplit " ; <nl> private static final String VERBOSE _ OPTION = " verbose " ; <nl> private static final String DEBUG _ OPTION = " debug " ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1f63ced . . 9218d90 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 11 . 1 
 + * Add a compaction option to TWCS to ignore sstables overlapping checks ( CASSANDRA - 13418 ) 
 * BTree . Builder memory leak ( CASSANDRA - 13754 ) 
 * Revert CASSANDRA - 10368 of supporting non - pk column filtering due to correctness ( CASSANDRA - 13798 ) 
 * Fix cassandra - stress hang issues when an error during cluster connection happens ( CASSANDRA - 12938 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionController . java b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 index bf3647a . . 84aac09 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionController . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; 
 import java . util . * ; 
 import java . util . function . Predicate ; 
 
 + import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . db . Memtable ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 
 @ @ - 49 , 7 + 50 , 8 @ @ import static org . apache . cassandra . db . lifecycle . SSTableIntervalTree . buildInterva 
 public class CompactionController implements AutoCloseable 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( CompactionController . class ) ; 
 - static final boolean NEVER _ PURGE _ TOMBSTONES = Boolean . getBoolean ( " cassandra . never _ purge _ tombstones " ) ; 
 + private static final String NEVER _ PURGE _ TOMBSTONES _ PROPERTY = Config . PROPERTY _ PREFIX + " never _ purge _ tombstones " ; 
 + static final boolean NEVER _ PURGE _ TOMBSTONES = Boolean . getBoolean ( NEVER _ PURGE _ TOMBSTONES _ PROPERTY ) ; 
 
 public final ColumnFamilyStore cfs ; 
 private final boolean compactingRepaired ; 
 @ @ - 98 , 7 + 100 , 14 @ @ public class CompactionController implements AutoCloseable 
 { 
 if ( NEVER _ PURGE _ TOMBSTONES ) 
 { 
 - logger . debug ( " not refreshing overlaps - running with - Dcassandra . never _ purge _ tombstones = true " ) ; 
 + logger . debug ( " not refreshing overlaps - running with - D { } = true " , 
 + NEVER _ PURGE _ TOMBSTONES _ PROPERTY ) ; 
 + return ; 
 + } 
 + 
 + if ( ignoreOverlaps ( ) ) 
 + { 
 + logger . debug ( " not refreshing overlaps - running with ignoreOverlaps activated " ) ; 
 return ; 
 } 
 
 @ @ - 120 , 7 + 129 , 7 @ @ public class CompactionController implements AutoCloseable 
 if ( this . overlappingSSTables ! = null ) 
 close ( ) ; 
 
 - if ( compacting = = null ) 
 + if ( compacting = = null | | ignoreOverlaps ( ) ) 
 overlappingSSTables = Refs . tryRef ( Collections . < SSTableReader > emptyList ( ) ) ; 
 else 
 overlappingSSTables = cfs . getAndReferenceOverlappingLiveSSTables ( compacting ) ; 
 @ @ - 129 , 7 + 138 , 7 @ @ public class CompactionController implements AutoCloseable 
 
 public Set < SSTableReader > getFullyExpiredSSTables ( ) 
 { 
 - return getFullyExpiredSSTables ( cfs , compacting , overlappingSSTables , gcBefore ) ; 
 + return getFullyExpiredSSTables ( cfs , compacting , overlappingSSTables , gcBefore , ignoreOverlaps ( ) ) ; 
 } 
 
 / * * 
 @ @ - 146 , 20 + 155 , 39 @ @ public class CompactionController implements AutoCloseable 
 * @ param compacting we take the drop - candidates from this set , it is usually the sstables included in the compaction 
 * @ param overlapping the sstables that overlap the ones in compacting . 
 * @ param gcBefore 
 + * @ param ignoreOverlaps don ' t check if data shadows / overlaps any data in other sstables 
 * @ return 
 * / 
 - public static Set < SSTableReader > getFullyExpiredSSTables ( ColumnFamilyStore cfStore , Iterable < SSTableReader > compacting , Iterable < SSTableReader > overlapping , int gcBefore ) 
 + public static Set < SSTableReader > getFullyExpiredSSTables ( ColumnFamilyStore cfStore , 
 + Iterable < SSTableReader > compacting , 
 + Iterable < SSTableReader > overlapping , 
 + int gcBefore , 
 + boolean ignoreOverlaps ) 
 { 
 logger . trace ( " Checking droppable sstables in { } " , cfStore ) ; 
 
 if ( NEVER _ PURGE _ TOMBSTONES | | compacting = = null ) 
 - return Collections . < SSTableReader > emptySet ( ) ; 
 + return Collections . emptySet ( ) ; 
 
 if ( cfStore . getCompactionStrategyManager ( ) . onlyPurgeRepairedTombstones ( ) & & ! Iterables . all ( compacting , SSTableReader : : isRepaired ) ) 
 return Collections . emptySet ( ) ; 
 
 - List < SSTableReader > candidates = new ArrayList < > ( ) ; 
 + if ( ignoreOverlaps ) 
 + { 
 + Set < SSTableReader > fullyExpired = new HashSet < > ( ) ; 
 + for ( SSTableReader candidate : compacting ) 
 + { 
 + if ( candidate . getSSTableMetadata ( ) . maxLocalDeletionTime < gcBefore ) 
 + { 
 + fullyExpired . add ( candidate ) ; 
 + logger . trace ( " Dropping overlap ignored expired SSTable { } ( maxLocalDeletionTime = { } , gcBefore = { } ) " , 
 + candidate , candidate . getSSTableMetadata ( ) . maxLocalDeletionTime , gcBefore ) ; 
 + } 
 + } 
 + return fullyExpired ; 
 + } 
 
 + List < SSTableReader > candidates = new ArrayList < > ( ) ; 
 long minTimestamp = Long . MAX _ VALUE ; 
 
 for ( SSTableReader sstable : overlapping ) 
 @ @ - 203 , 6 + 231 , 14 @ @ public class CompactionController implements AutoCloseable 
 return new HashSet < > ( candidates ) ; 
 } 
 
 + public static Set < SSTableReader > getFullyExpiredSSTables ( ColumnFamilyStore cfStore , 
 + Iterable < SSTableReader > compacting , 
 + Iterable < SSTableReader > overlapping , 
 + int gcBefore ) 
 + { 
 + return getFullyExpiredSSTables ( cfStore , compacting , overlapping , gcBefore , false ) ; 
 + } 
 + 
 public String getKeyspace ( ) 
 { 
 return cfs . keyspace . getName ( ) ; 
 @ @ - 306 , 6 + 342 , 23 @ @ public class CompactionController implements AutoCloseable 
 return reader . simpleIterator ( dfile , key , position , tombstoneOnly ) ; 
 } 
 
 + / * * 
 + * Is overlapped sstables ignored 
 + * 
 + * Control whether or not we are taking into account overlapping sstables when looking for fully expired sstables . 
 + * In order to reduce the amount of work needed , we look for sstables that can be dropped instead of compacted . 
 + * As a safeguard mechanism , for each time range of data in a sstable , we are checking globally to see if all data 
 + * of this time range is fully expired before considering to drop the sstable . 
 + * This strategy can retain for a long time a lot of sstables on disk ( see CASSANDRA - 13418 ) so this option 
 + * control whether or not this check should be ignored . 
 + * 
 + * @ return false by default 
 + * / 
 + protected boolean ignoreOverlaps ( ) 
 + { 
 + return false ; 
 + } 
 + 
 private FileDataInput openDataFile ( SSTableReader reader ) 
 { 
 return limiter ! = null ? reader . openDataReader ( limiter ) : reader . openDataReader ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionController . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionController . java 
 new file mode 100644 
 index 0000000 . . cf9e0e6 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionController . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . compaction ; 
 + 
 + 
 + import java . util . Set ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 + 
 + public class TimeWindowCompactionController extends CompactionController 
 + { 
 + private static final Logger logger = LoggerFactory . getLogger ( TimeWindowCompactionController . class ) ; 
 + 
 + private final boolean ignoreOverlaps ; 
 + 
 + public TimeWindowCompactionController ( ColumnFamilyStore cfs , Set < SSTableReader > compacting , int gcBefore , boolean ignoreOverlaps ) 
 + { 
 + super ( cfs , compacting , gcBefore ) ; 
 + this . ignoreOverlaps = ignoreOverlaps ; 
 + if ( ignoreOverlaps ) 
 + logger . warn ( " You are running with sstables overlapping checks disabled , it can result in loss of data " ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean ignoreOverlaps ( ) 
 + { 
 + return ignoreOverlaps ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java 
 index 595c46d . . 9532cc4 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategy . java 
 @ @ - 66 , 7 + 66 , 6 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy 
 } 
 else 
 logger . debug ( " Enabling tombstone compactions for TWCS " ) ; 
 - 
 } 
 
 @ Override 
 @ @ - 82 , 7 + 81 , 7 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy 
 
 LifecycleTransaction modifier = cfs . getTracker ( ) . tryModify ( latestBucket , OperationType . COMPACTION ) ; 
 if ( modifier ! = null ) 
 - return new CompactionTask ( cfs , modifier , gcBefore ) ; 
 + return new TimeWindowCompactionTask ( cfs , modifier , gcBefore , options . ignoreOverlaps ) ; 
 } 
 } 
 
 @ @ - 104 , 7 + 103 , 8 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy 
 if ( System . currentTimeMillis ( ) - lastExpiredCheck > options . expiredSSTableCheckFrequency ) 
 { 
 logger . debug ( " TWCS expired check sufficiently far in the past , checking for fully expired SSTables " ) ; 
 - expired = CompactionController . getFullyExpiredSSTables ( cfs , uncompacting , cfs . getOverlappingLiveSSTables ( uncompacting ) , gcBefore ) ; 
 + expired = CompactionController . getFullyExpiredSSTables ( cfs , uncompacting , options . ignoreOverlaps ? Collections . emptySet ( ) : cfs . getOverlappingLiveSSTables ( uncompacting ) , 
 + gcBefore , options . ignoreOverlaps ) ; 
 lastExpiredCheck = System . currentTimeMillis ( ) ; 
 } 
 else 
 @ @ - 330 , 7 + 330 , 7 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy 
 LifecycleTransaction txn = cfs . getTracker ( ) . tryModify ( filteredSSTables , OperationType . COMPACTION ) ; 
 if ( txn = = null ) 
 return null ; 
 - return Collections . singleton ( new CompactionTask ( cfs , txn , gcBefore ) ) ; 
 + return Collections . singleton ( new TimeWindowCompactionTask ( cfs , txn , gcBefore , options . ignoreOverlaps ) ) ; 
 } 
 
 @ Override 
 @ @ - 346 , 7 + 346 , 7 @ @ public class TimeWindowCompactionStrategy extends AbstractCompactionStrategy 
 return null ; 
 } 
 
 - return new CompactionTask ( cfs , modifier , gcBefore ) . setUserDefined ( true ) ; 
 + return new TimeWindowCompactionTask ( cfs , modifier , gcBefore , options . ignoreOverlaps ) . setUserDefined ( true ) ; 
 } 
 
 public int getEstimatedRemainingTasks ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java 
 index 07df606 . . 24b4fe0 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyOptions . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . TimeUnit ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 + import org . apache . cassandra . config . Config ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 
 public final class TimeWindowCompactionStrategyOptions 
 @ @ - 36 , 16 + 37 , 21 @ @ public final class TimeWindowCompactionStrategyOptions 
 protected static final TimeUnit DEFAULT _ COMPACTION _ WINDOW _ UNIT = TimeUnit . DAYS ; 
 protected static final int DEFAULT _ COMPACTION _ WINDOW _ SIZE = 1 ; 
 protected static final int DEFAULT _ EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS = 60 * 10 ; 
 + protected static final Boolean DEFAULT _ UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION = false ; 
 
 protected static final String TIMESTAMP _ RESOLUTION _ KEY = " timestamp _ resolution " ; 
 protected static final String COMPACTION _ WINDOW _ UNIT _ KEY = " compaction _ window _ unit " ; 
 protected static final String COMPACTION _ WINDOW _ SIZE _ KEY = " compaction _ window _ size " ; 
 protected static final String EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY = " expired _ sstable _ check _ frequency _ seconds " ; 
 + protected static final String UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY = " unsafe _ aggressive _ sstable _ expiration " ; 
 + 
 + static final String UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY = Config . PROPERTY _ PREFIX + " allow _ unsafe _ aggressive _ sstable _ expiration " ; 
 
 protected final int sstableWindowSize ; 
 protected final TimeUnit sstableWindowUnit ; 
 protected final TimeUnit timestampResolution ; 
 protected final long expiredSSTableCheckFrequency ; 
 + protected final boolean ignoreOverlaps ; 
 
 SizeTieredCompactionStrategyOptions stcsOptions ; 
 
 @ @ - 68 , 6 + 74 , 9 @ @ public final class TimeWindowCompactionStrategyOptions 
 optionValue = options . get ( EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) ; 
 expiredSSTableCheckFrequency = TimeUnit . MILLISECONDS . convert ( optionValue = = null ? DEFAULT _ EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS : Long . parseLong ( optionValue ) , TimeUnit . SECONDS ) ; 
 
 + optionValue = options . get ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ; 
 + ignoreOverlaps = optionValue = = null ? DEFAULT _ UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION : ( Boolean . getBoolean ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY ) & & Boolean . parseBoolean ( optionValue ) ) ; 
 + 
 stcsOptions = new SizeTieredCompactionStrategyOptions ( options ) ; 
 } 
 
 @ @ - 77 , 6 + 86 , 7 @ @ public final class TimeWindowCompactionStrategyOptions 
 timestampResolution = DEFAULT _ TIMESTAMP _ RESOLUTION ; 
 sstableWindowSize = DEFAULT _ COMPACTION _ WINDOW _ SIZE ; 
 expiredSSTableCheckFrequency = TimeUnit . MILLISECONDS . convert ( DEFAULT _ EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS , TimeUnit . SECONDS ) ; 
 + ignoreOverlaps = DEFAULT _ UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION ; 
 stcsOptions = new SizeTieredCompactionStrategyOptions ( ) ; 
 } 
 
 @ @ - 136 , 10 + 146 , 22 @ @ public final class TimeWindowCompactionStrategyOptions 
 throw new ConfigurationException ( String . format ( " % s is not a parsable int ( base10 ) for % s " , optionValue , EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) , e ) ; 
 } 
 
 + 
 + optionValue = options . get ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ; 
 + if ( optionValue ! = null ) 
 + { 
 + if ( ! ( optionValue . equalsIgnoreCase ( " true " ) | | optionValue . equalsIgnoreCase ( " false " ) ) ) 
 + throw new ConfigurationException ( String . format ( " % s is not ' true ' or ' false ' ( % s ) " , UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , optionValue ) ) ; 
 + 
 + if ( optionValue . equalsIgnoreCase ( " true " ) & & ! Boolean . getBoolean ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY ) ) 
 + throw new ConfigurationException ( String . format ( " % s is requested but not allowed , restart cassandra with - D % s = true to allow it " , UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY ) ) ; 
 + } 
 + 
 uncheckedOptions . remove ( COMPACTION _ WINDOW _ SIZE _ KEY ) ; 
 uncheckedOptions . remove ( COMPACTION _ WINDOW _ UNIT _ KEY ) ; 
 uncheckedOptions . remove ( TIMESTAMP _ RESOLUTION _ KEY ) ; 
 uncheckedOptions . remove ( EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY ) ; 
 + uncheckedOptions . remove ( UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ; 
 
 uncheckedOptions = SizeTieredCompactionStrategyOptions . validateOptions ( options , uncheckedOptions ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionTask . java b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionTask . java 
 new file mode 100644 
 index 0000000 . . 4f1fe6a 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / compaction / TimeWindowCompactionTask . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + package org . apache . cassandra . db . compaction ; 
 + 
 + import java . util . Set ; 
 + 
 + import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 + import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 + 
 + public class TimeWindowCompactionTask extends CompactionTask 
 + { 
 + private final boolean ignoreOverlaps ; 
 + 
 + public TimeWindowCompactionTask ( ColumnFamilyStore cfs , LifecycleTransaction txn , int gcBefore , boolean ignoreOverlaps ) 
 + { 
 + super ( cfs , txn , gcBefore ) ; 
 + this . ignoreOverlaps = ignoreOverlaps ; 
 + } 
 + 
 + @ Override 
 + public CompactionController getCompactionController ( Set < SSTableReader > toCompact ) 
 + { 
 + return new TimeWindowCompactionController ( cfs , toCompact , gcBefore , ignoreOverlaps ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java b / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java 
 index 1b400e8 . . 052206e 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / CompactionControllerTest . java 
 @ @ - 177 , 6 + 177 , 11 @ @ public class CompactionControllerTest extends SchemaLoader 
 expired = CompactionController . getFullyExpiredSSTables ( cfs , compacting , overlapping , gcBefore ) ; 
 assertNotNull ( expired ) ; 
 assertEquals ( 0 , expired . size ( ) ) ; 
 + 
 + / / Now if we explicitly ask to ignore overlaped sstables , we should get back our expired sstable 
 + expired = CompactionController . getFullyExpiredSSTables ( cfs , compacting , overlapping , gcBefore , true ) ; 
 + assertNotNull ( expired ) ; 
 + assertEquals ( 1 , expired . size ( ) ) ; 
 } 
 
 private void applyMutation ( CFMetaData cfm , DecoratedKey key , long timestamp ) 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java 
 index 56d53bd . . 6fff279 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / TimeWindowCompactionStrategyTest . java 
 @ @ - 60 , 6 + 60 , 7 @ @ public class TimeWindowCompactionStrategyTest extends SchemaLoader 
 { 
 / / Disable tombstone histogram rounding for tests 
 System . setProperty ( " cassandra . streaminghistogram . roundseconds " , " 1 " ) ; 
 + System . setProperty ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ PROPERTY , " true " ) ; 
 
 SchemaLoader . prepareServer ( ) ; 
 
 @ @ - 100 , 13 + 101 , 24 @ @ public class TimeWindowCompactionStrategyTest extends SchemaLoader 
 { 
 options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY , " MONTHS " ) ; 
 validateOptions ( options ) ; 
 - fail ( String . format ( " Invalid time units should be rejected " , TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY ) ) ; 
 + fail ( String . format ( " Invalid % s should be rejected " , TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY ) ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY , " MINUTES " ) ; 
 } 
 
 + try 
 + { 
 + options . put ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , " not - a - boolean " ) ; 
 + validateOptions ( options ) ; 
 + fail ( String . format ( " Invalid % s should be rejected " , TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY ) ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + options . put ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , " true " ) ; 
 + } 
 + 
 options . put ( " bad _ option " , " 1 . 0 " ) ; 
 unvalidated = validateOptions ( options ) ; 
 assertTrue ( unvalidated . containsKey ( " bad _ option " ) ) ; 
 @ @ - 272 , 4 + 284 , 64 @ @ public class TimeWindowCompactionStrategyTest extends SchemaLoader 
 t . transaction . abort ( ) ; 
 } 
 
 + @ Test 
 + public void testDropOverlappingExpiredSSTables ( ) throws InterruptedException 
 + { 
 + Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; 
 + ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( CF _ STANDARD1 ) ; 
 + cfs . truncateBlocking ( ) ; 
 + cfs . disableAutoCompaction ( ) ; 
 + 
 + ByteBuffer value = ByteBuffer . wrap ( new byte [ 100 ] ) ; 
 + 
 + / / create 2 sstables 
 + DecoratedKey key = Util . dk ( String . valueOf ( " expired " ) ) ; 
 + new RowUpdateBuilder ( cfs . metadata , System . currentTimeMillis ( ) , 1 , key . getKey ( ) ) 
 + . clustering ( " column " ) 
 + . add ( " val " , value ) . build ( ) . applyUnsafe ( ) ; 
 + 
 + cfs . forceBlockingFlush ( ) ; 
 + SSTableReader expiredSSTable = cfs . getLiveSSTables ( ) . iterator ( ) . next ( ) ; 
 + Thread . sleep ( 10 ) ; 
 + 
 + new RowUpdateBuilder ( cfs . metadata , System . currentTimeMillis ( ) - 1000 , key . getKey ( ) ) 
 + . clustering ( " column " ) 
 + . add ( " val " , value ) . build ( ) . applyUnsafe ( ) ; 
 + key = Util . dk ( String . valueOf ( " nonexpired " ) ) ; 
 + new RowUpdateBuilder ( cfs . metadata , System . currentTimeMillis ( ) , key . getKey ( ) ) 
 + . clustering ( " column " ) 
 + . add ( " val " , value ) . build ( ) . applyUnsafe ( ) ; 
 + 
 + cfs . forceBlockingFlush ( ) ; 
 + assertEquals ( cfs . getLiveSSTables ( ) . size ( ) , 2 ) ; 
 + 
 + Map < String , String > options = new HashMap < > ( ) ; 
 + 
 + options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ SIZE _ KEY , " 30 " ) ; 
 + options . put ( TimeWindowCompactionStrategyOptions . COMPACTION _ WINDOW _ UNIT _ KEY , " SECONDS " ) ; 
 + options . put ( TimeWindowCompactionStrategyOptions . TIMESTAMP _ RESOLUTION _ KEY , " MILLISECONDS " ) ; 
 + options . put ( TimeWindowCompactionStrategyOptions . EXPIRED _ SSTABLE _ CHECK _ FREQUENCY _ SECONDS _ KEY , " 0 " ) ; 
 + TimeWindowCompactionStrategy twcs = new TimeWindowCompactionStrategy ( cfs , options ) ; 
 + for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) 
 + twcs . addSSTable ( sstable ) ; 
 + 
 + twcs . startup ( ) ; 
 + assertNull ( twcs . getNextBackgroundTask ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ) ; 
 + Thread . sleep ( 2000 ) ; 
 + assertNull ( twcs . getNextBackgroundTask ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ) ; 
 + 
 + options . put ( TimeWindowCompactionStrategyOptions . UNSAFE _ AGGRESSIVE _ SSTABLE _ EXPIRATION _ KEY , " true " ) ; 
 + twcs = new TimeWindowCompactionStrategy ( cfs , options ) ; 
 + for ( SSTableReader sstable : cfs . getLiveSSTables ( ) ) 
 + twcs . addSSTable ( sstable ) ; 
 + 
 + twcs . startup ( ) ; 
 + AbstractCompactionTask t = twcs . getNextBackgroundTask ( ( int ) ( System . currentTimeMillis ( ) / 1000 ) ) ; 
 + assertNotNull ( t ) ; 
 + assertEquals ( 1 , Iterables . size ( t . transaction . originals ( ) ) ) ; 
 + SSTableReader sstable = t . transaction . originals ( ) . iterator ( ) . next ( ) ; 
 + assertEquals ( sstable , expiredSSTable ) ; 
 + twcs . shutdown ( ) ; 
 + t . transaction . abort ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 index 245d824 . . 44cbc33 100644 
 - - - a / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 + + + b / src / java / org / apache / cassandra / tools / StandaloneSplitter . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import org . apache . cassandra . db . Keyspace ; 
 import org . apache . cassandra . db . compaction . LeveledManifest ; 
 import org . apache . cassandra . db . compaction . SSTableSplitter ; 
 import org . apache . cassandra . io . sstable . * ; 
 - import org . apache . cassandra . service . CassandraDaemon ; 
 import org . apache . cassandra . utils . Pair ; 
 
 import static org . apache . cassandra . tools . BulkLoader . CmdLineOptions ; 
 @ @ - 41 , 11 + 40 , 6 @ @ public class StandaloneSplitter 
 { 
 public static final int DEFAULT _ SSTABLE _ SIZE = 50 ; 
 
 - static 
 - { 
 - CassandraDaemon . initLog4j ( ) ; 
 - } 
 - 
 private static final String TOOL _ NAME = " sstablessplit " ; 
 private static final String VERBOSE _ OPTION = " verbose " ; 
 private static final String DEBUG _ OPTION = " debug " ;
