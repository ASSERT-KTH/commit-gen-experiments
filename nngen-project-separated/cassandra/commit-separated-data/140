BLEU SCORE: 0.06567274736060397

TEST MSG: Incorrect counting of pending messages in OutboundTcpConnection
GENERATED MSG: Retry important messages for any IOException

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1055d51 . . 9faf499 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 13 <nl> + * Incorrect counting of pending messages in OutboundTcpConnection ( CASSANDRA - 11551 ) <nl> * CqlRecordReader no longer quotes the keyspace when connecting , as the java driver will ( CASSANDRA - 10751 ) <nl> * Fix compaction failure caused by reading un - flushed data ( CASSANDRA - 12743 ) <nl> * Use Bounds instead of Range for sstables in anticompaction ( CASSANDRA - 14411 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> index 8baac75 . . 4cfe019 100644 <nl> - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java <nl> @ @ - 232 , 6 + 232 , 7 @ @ public class OutboundTcpConnection extends Thread <nl> / / clear out the queue , else gossip messages back up . <nl> drainedMessages . clear ( ) ; <nl> backlog . clear ( ) ; <nl> + currentMsgBufferCount = 0 ; <nl> break inner ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java <nl> index c4f2181 . . 092d6a3 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java <nl> + + + b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java <nl> @ @ - 125 , 7 + 125 , 6 @ @ public class ConnectionHandler <nl> { <nl> try <nl> { <nl> - logger . info ( " Connecting to { } for streaming " , peer ) ; <nl> Socket socket = OutboundTcpConnectionPool . newSocket ( peer ) ; <nl> socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; <nl> return socket ; <nl> @ @ - 151 , 7 + 150 , 7 @ @ public class ConnectionHandler <nl> <nl> public ListenableFuture < ? > close ( ) <nl> { <nl> - logger . debug ( " Closing stream connection handler on { } " , session . peer ) ; <nl> + logger . debug ( " [ Stream # { } ] Closing stream connection handler on { } " , session . planId ( ) , session . peer ) ; <nl> <nl> ListenableFuture < ? > inClosed = incoming = = null ? Futures . immediateFuture ( null ) : incoming . close ( ) ; <nl> ListenableFuture < ? > outClosed = outgoing = = null ? Futures . immediateFuture ( null ) : outgoing . close ( ) ; <nl> @ @ - 290 , 7 + 289 , 7 @ @ public class ConnectionHandler <nl> / / to ignore here since we ' ll have asked for a retry . <nl> if ( message ! = null ) <nl> { <nl> - logger . debug ( " Received { } " , message ) ; <nl> + logger . debug ( " [ Stream # { } ] Received { } " , session . planId ( ) , message ) ; <nl> session . messageReceived ( message ) ; <nl> } <nl> } <nl> @ @ - 354 , 7 + 353 , 7 @ @ public class ConnectionHandler <nl> { <nl> if ( ( next = messageQueue . poll ( 1 , TimeUnit . SECONDS ) ) ! = null ) <nl> { <nl> - logger . debug ( " Sending { } " , next ) ; <nl> + logger . debug ( " [ Stream # { } ] Sending { } " , session . planId ( ) , next ) ; <nl> sendMessage ( next ) ; <nl> if ( next . type = = StreamMessage . Type . SESSION _ FAILED ) <nl> close ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamResultFuture . java b / src / java / org / apache / cassandra / streaming / StreamResultFuture . java <nl> index d9189c5 . . 979c19a 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamResultFuture . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamResultFuture . java <nl> @ @ - 78 , 9 + 78 , 11 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > <nl> { <nl> StreamResultFuture future = createAndRegister ( planId , description , sessions ) ; <nl> <nl> + logger . info ( " [ Stream # { } ] Executing streaming plan for { } " , planId , description ) ; <nl> / / start sessions <nl> for ( final StreamSession session : sessions ) <nl> { <nl> + logger . info ( " [ Stream # { } ] Beginning stream session with { } " , planId , session . peer ) ; <nl> session . init ( future ) ; <nl> session . start ( ) ; <nl> } <nl> @ @ - 110 , 6 + 112 , 7 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > <nl> else <nl> { <nl> future . attachSocket ( from , socket , isForOutgoing , version ) ; <nl> + logger . info ( " [ Stream # { } ] Received streaming plan for { } " , planId , description ) ; <nl> } <nl> return future ; <nl> } <nl> @ @ - 161 , 6 + 164 , 12 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > <nl> void handleSessionPrepared ( StreamSession session ) <nl> { <nl> SessionInfo sessionInfo = session . getSessionInfo ( ) ; <nl> + logger . info ( " [ Stream # { } ] Prepare completed . Receiving { } files ( { } bytes ) , sending { } files ( { } bytes ) " , <nl> + session . planId ( ) , <nl> + sessionInfo . getTotalFilesToReceive ( ) , <nl> + sessionInfo . getTotalSizeToReceive ( ) , <nl> + sessionInfo . getTotalFilesToSend ( ) , <nl> + sessionInfo . getTotalSizeToSend ( ) ) ; <nl> StreamEvent . SessionPreparedEvent event = new StreamEvent . SessionPreparedEvent ( planId , sessionInfo ) ; <nl> sessionStates . put ( sessionInfo . peer , sessionInfo ) ; <nl> fireStreamEvent ( event ) ; <nl> @ @ - 168 , 7 + 177 , 7 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > <nl> <nl> void handleSessionComplete ( StreamSession session ) <nl> { <nl> - logger . debug ( " Session with { } is complete " , session . peer ) ; <nl> + logger . info ( " [ Stream # { } ] Session with { } is complete " , session . planId ( ) , session . peer ) ; <nl> <nl> SessionInfo sessionInfo = session . getSessionInfo ( ) ; <nl> sessionStates . put ( sessionInfo . peer , sessionInfo ) ; <nl> @ @ - 196 , 9 + 205 , 15 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > <nl> { <nl> StreamState finalState = getCurrentState ( ) ; <nl> if ( finalState . hasFailedSession ( ) ) <nl> + { <nl> + logger . warn ( " [ Stream # { } ] Stream failed " , planId ) ; <nl> setException ( new StreamException ( finalState , " Stream failed " ) ) ; <nl> + } <nl> else <nl> + { <nl> + logger . info ( " [ Stream # { } ] All sessions completed " , planId ) ; <nl> set ( finalState ) ; <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index 2c4b47d . . 610fea7 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> { <nl> if ( requests . isEmpty ( ) & & transfers . isEmpty ( ) ) <nl> { <nl> - logger . debug ( " Session does not have any tasks . " ) ; <nl> + logger . info ( " [ Stream # { } ] Session does not have any tasks . " , planId ( ) ) ; <nl> closeSession ( State . COMPLETE ) ; <nl> return ; <nl> } <nl> @ @ - 386 , 8 + 386 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> * / <nl> public void onInitializationComplete ( ) <nl> { <nl> - logger . debug ( " Connected . Sending prepare . . . " ) ; <nl> - <nl> / / send prepare message <nl> state ( State . PREPARING ) ; <nl> PrepareMessage prepare = new PrepareMessage ( ) ; <nl> @ @ - 398 , 10 + 396 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> <nl> / / if we don ' t need to prepare for receiving stream , start sending files immediately <nl> if ( requests . isEmpty ( ) ) <nl> - { <nl> - logger . debug ( " Prepare complete . Start streaming files . " ) ; <nl> startStreamingFiles ( ) ; <nl> - } <nl> } <nl> <nl> / * * <nl> @ @ - 411 , 7 + 406 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> * / <nl> public void onError ( Throwable e ) <nl> { <nl> - logger . error ( " Streaming error occurred " , e ) ; <nl> + logger . error ( " [ Stream # " + planId ( ) + " ] Streaming error occurred " , e ) ; <nl> / / send session failure message <nl> if ( handler . isOutgoingConnected ( ) ) <nl> handler . sendMessage ( new SessionFailedMessage ( ) ) ; <nl> @ @ - 424 , 8 + 419 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> * / <nl> public void prepare ( Collection < StreamRequest > requests , Collection < StreamSummary > summaries ) <nl> { <nl> - logger . debug ( " Start preparing this session ( " + requests . size ( ) + " to send , " + summaries . size ( ) + " to receive ) " ) ; <nl> - <nl> / / prepare tasks <nl> state ( State . PREPARING ) ; <nl> for ( StreamRequest request : requests ) <nl> @ @ - 444 , 10 + 437 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> <nl> / / if there are files to stream <nl> if ( ! maybeCompleted ( ) ) <nl> - { <nl> - logger . debug ( " Prepare complete . Start streaming files . " ) ; <nl> startStreamingFiles ( ) ; <nl> - } <nl> } <nl> <nl> / * * <nl> @ @ - 523 , 7 + 513 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> <nl> public void doRetry ( FileMessageHeader header , Throwable e ) <nl> { <nl> - logger . warn ( " retrying for following error " , e ) ; <nl> + logger . warn ( " [ Stream # " + planId ( ) + " ] Retrying for following error " , e ) ; <nl> / / retry <nl> retries + + ; <nl> if ( retries > DatabaseDescriptor . getMaxStreamingRetries ( ) ) <nl> @ @ - 610 , 7 + 600 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> * / <nl> private void flushSSTables ( Iterable < ColumnFamilyStore > stores ) <nl> { <nl> - logger . info ( " Flushing memtables for { } . . . " , stores ) ; <nl> List < Future < ? > > flushes = new ArrayList < > ( ) ; <nl> for ( ColumnFamilyStore cfs : stores ) <nl> flushes . add ( cfs . forceFlush ( ) ) ; <nl> @ @ - 619 , 7 + 608 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe <nl> <nl> private void prepareReceiving ( StreamSummary summary ) <nl> { <nl> - logger . debug ( " Prepare for receiving " + summary ) ; <nl> if ( summary . files > 0 ) <nl> receivers . put ( summary . cfId , new StreamReceiveTask ( this , summary . cfId , summary . files , summary . totalSize ) ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java b / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java <nl> index b561abc . . 495b88a 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java <nl> @ @ - 39 , 4 + 39 , 10 @ @ public class CompleteMessage extends StreamMessage <nl> { <nl> super ( Type . COMPLETE ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " Complete " ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / FileMessage . java b / src / java / org / apache / cassandra / streaming / messages / FileMessage . java <nl> index 464c35a . . a0543c0 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / FileMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / FileMessage . java <nl> @ @ - 107 , 6 + 107 , 6 @ @ public class FileMessage extends StreamMessage <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - return " FileMessage ( " + sstable + " ) " ; <nl> + return " File ( " + header + " , file : " + sstable . getFilename ( ) + " ) " ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java b / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java <nl> index 761e086 . . 24f1e04 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java <nl> @ @ - 83 , 6 + 83 , 20 @ @ public class FileMessageHeader <nl> } <nl> <nl> @ Override <nl> + public String toString ( ) <nl> + { <nl> + final StringBuilder sb = new StringBuilder ( " Header ( " ) ; <nl> + sb . append ( " cfId : " ) . append ( cfId ) ; <nl> + sb . append ( " , # " ) . append ( sequenceNumber ) ; <nl> + sb . append ( " , version : " ) . append ( version ) ; <nl> + sb . append ( " , estimated keys : " ) . append ( estimatedKeys ) ; <nl> + sb . append ( " , transfer size : " ) . append ( size ( ) ) ; <nl> + sb . append ( " , compressed ? : " ) . append ( compressionInfo ! = null ) ; <nl> + sb . append ( ' ) ' ) ; <nl> + return sb . toString ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public boolean equals ( Object o ) <nl> { <nl> if ( this = = o ) return true ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java b / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java <nl> index ba94592 . . 16d156d 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java <nl> @ @ - 79 , 12 + 79 , 12 @ @ public class PrepareMessage extends StreamMessage <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - final StringBuilder sb = new StringBuilder ( " PrepareMessage { " ) ; <nl> + final StringBuilder sb = new StringBuilder ( " Prepare ( " ) ; <nl> sb . append ( requests . size ( ) ) . append ( " requests , " ) ; <nl> int totalFile = 0 ; <nl> for ( StreamSummary summary : summaries ) <nl> totalFile + = summary . files ; <nl> - sb . append ( totalFile ) . append ( " files receiving " ) ; <nl> + sb . append ( " " ) . append ( totalFile ) . append ( " files " ) ; <nl> sb . append ( ' } ' ) ; <nl> return sb . toString ( ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java b / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java <nl> index daf8bf1 . . a210348 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java <nl> @ @ - 54 , 4 + 54 , 12 @ @ public class ReceivedMessage extends StreamMessage <nl> this . cfId = cfId ; <nl> this . sequenceNumber = sequenceNumber ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + final StringBuilder sb = new StringBuilder ( " Received ( " ) ; <nl> + sb . append ( cfId ) . append ( " , # " ) . append ( sequenceNumber ) . append ( ' ) ' ) ; <nl> + return sb . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java <nl> index 67b4dee . . 666257f 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java <nl> @ @ - 54 , 4 + 54 , 12 @ @ public class RetryMessage extends StreamMessage <nl> this . cfId = cfId ; <nl> this . sequenceNumber = sequenceNumber ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + final StringBuilder sb = new StringBuilder ( " Retry ( " ) ; <nl> + sb . append ( cfId ) . append ( " , # " ) . append ( sequenceNumber ) . append ( ' ) ' ) ; <nl> + return sb . toString ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java b / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java <nl> index 450f67d . . 7144a14 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java <nl> + + + b / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java <nl> @ @ - 39 , 4 + 39 , 10 @ @ public class SessionFailedMessage extends StreamMessage <nl> { <nl> super ( Type . SESSION _ FAILED ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " Session Failed " ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1055d51 . . 9faf499 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 13 
 + * Incorrect counting of pending messages in OutboundTcpConnection ( CASSANDRA - 11551 ) 
 * CqlRecordReader no longer quotes the keyspace when connecting , as the java driver will ( CASSANDRA - 10751 ) 
 * Fix compaction failure caused by reading un - flushed data ( CASSANDRA - 12743 ) 
 * Use Bounds instead of Range for sstables in anticompaction ( CASSANDRA - 14411 ) 
 diff - - git a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 index 8baac75 . . 4cfe019 100644 
 - - - a / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 + + + b / src / java / org / apache / cassandra / net / OutboundTcpConnection . java 
 @ @ - 232 , 6 + 232 , 7 @ @ public class OutboundTcpConnection extends Thread 
 / / clear out the queue , else gossip messages back up . 
 drainedMessages . clear ( ) ; 
 backlog . clear ( ) ; 
 + currentMsgBufferCount = 0 ; 
 break inner ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java 
 index c4f2181 . . 092d6a3 100644 
 - - - a / src / java / org / apache / cassandra / streaming / ConnectionHandler . java 
 + + + b / src / java / org / apache / cassandra / streaming / ConnectionHandler . java 
 @ @ - 125 , 7 + 125 , 6 @ @ public class ConnectionHandler 
 { 
 try 
 { 
 - logger . info ( " Connecting to { } for streaming " , peer ) ; 
 Socket socket = OutboundTcpConnectionPool . newSocket ( peer ) ; 
 socket . setSoTimeout ( DatabaseDescriptor . getStreamingSocketTimeout ( ) ) ; 
 return socket ; 
 @ @ - 151 , 7 + 150 , 7 @ @ public class ConnectionHandler 
 
 public ListenableFuture < ? > close ( ) 
 { 
 - logger . debug ( " Closing stream connection handler on { } " , session . peer ) ; 
 + logger . debug ( " [ Stream # { } ] Closing stream connection handler on { } " , session . planId ( ) , session . peer ) ; 
 
 ListenableFuture < ? > inClosed = incoming = = null ? Futures . immediateFuture ( null ) : incoming . close ( ) ; 
 ListenableFuture < ? > outClosed = outgoing = = null ? Futures . immediateFuture ( null ) : outgoing . close ( ) ; 
 @ @ - 290 , 7 + 289 , 7 @ @ public class ConnectionHandler 
 / / to ignore here since we ' ll have asked for a retry . 
 if ( message ! = null ) 
 { 
 - logger . debug ( " Received { } " , message ) ; 
 + logger . debug ( " [ Stream # { } ] Received { } " , session . planId ( ) , message ) ; 
 session . messageReceived ( message ) ; 
 } 
 } 
 @ @ - 354 , 7 + 353 , 7 @ @ public class ConnectionHandler 
 { 
 if ( ( next = messageQueue . poll ( 1 , TimeUnit . SECONDS ) ) ! = null ) 
 { 
 - logger . debug ( " Sending { } " , next ) ; 
 + logger . debug ( " [ Stream # { } ] Sending { } " , session . planId ( ) , next ) ; 
 sendMessage ( next ) ; 
 if ( next . type = = StreamMessage . Type . SESSION _ FAILED ) 
 close ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamResultFuture . java b / src / java / org / apache / cassandra / streaming / StreamResultFuture . java 
 index d9189c5 . . 979c19a 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamResultFuture . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamResultFuture . java 
 @ @ - 78 , 9 + 78 , 11 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > 
 { 
 StreamResultFuture future = createAndRegister ( planId , description , sessions ) ; 
 
 + logger . info ( " [ Stream # { } ] Executing streaming plan for { } " , planId , description ) ; 
 / / start sessions 
 for ( final StreamSession session : sessions ) 
 { 
 + logger . info ( " [ Stream # { } ] Beginning stream session with { } " , planId , session . peer ) ; 
 session . init ( future ) ; 
 session . start ( ) ; 
 } 
 @ @ - 110 , 6 + 112 , 7 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > 
 else 
 { 
 future . attachSocket ( from , socket , isForOutgoing , version ) ; 
 + logger . info ( " [ Stream # { } ] Received streaming plan for { } " , planId , description ) ; 
 } 
 return future ; 
 } 
 @ @ - 161 , 6 + 164 , 12 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > 
 void handleSessionPrepared ( StreamSession session ) 
 { 
 SessionInfo sessionInfo = session . getSessionInfo ( ) ; 
 + logger . info ( " [ Stream # { } ] Prepare completed . Receiving { } files ( { } bytes ) , sending { } files ( { } bytes ) " , 
 + session . planId ( ) , 
 + sessionInfo . getTotalFilesToReceive ( ) , 
 + sessionInfo . getTotalSizeToReceive ( ) , 
 + sessionInfo . getTotalFilesToSend ( ) , 
 + sessionInfo . getTotalSizeToSend ( ) ) ; 
 StreamEvent . SessionPreparedEvent event = new StreamEvent . SessionPreparedEvent ( planId , sessionInfo ) ; 
 sessionStates . put ( sessionInfo . peer , sessionInfo ) ; 
 fireStreamEvent ( event ) ; 
 @ @ - 168 , 7 + 177 , 7 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > 
 
 void handleSessionComplete ( StreamSession session ) 
 { 
 - logger . debug ( " Session with { } is complete " , session . peer ) ; 
 + logger . info ( " [ Stream # { } ] Session with { } is complete " , session . planId ( ) , session . peer ) ; 
 
 SessionInfo sessionInfo = session . getSessionInfo ( ) ; 
 sessionStates . put ( sessionInfo . peer , sessionInfo ) ; 
 @ @ - 196 , 9 + 205 , 15 @ @ public final class StreamResultFuture extends AbstractFuture < StreamState > 
 { 
 StreamState finalState = getCurrentState ( ) ; 
 if ( finalState . hasFailedSession ( ) ) 
 + { 
 + logger . warn ( " [ Stream # { } ] Stream failed " , planId ) ; 
 setException ( new StreamException ( finalState , " Stream failed " ) ) ; 
 + } 
 else 
 + { 
 + logger . info ( " [ Stream # { } ] All sessions completed " , planId ) ; 
 set ( finalState ) ; 
 + } 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index 2c4b47d . . 610fea7 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 185 , 7 + 185 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 { 
 if ( requests . isEmpty ( ) & & transfers . isEmpty ( ) ) 
 { 
 - logger . debug ( " Session does not have any tasks . " ) ; 
 + logger . info ( " [ Stream # { } ] Session does not have any tasks . " , planId ( ) ) ; 
 closeSession ( State . COMPLETE ) ; 
 return ; 
 } 
 @ @ - 386 , 8 + 386 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 * / 
 public void onInitializationComplete ( ) 
 { 
 - logger . debug ( " Connected . Sending prepare . . . " ) ; 
 - 
 / / send prepare message 
 state ( State . PREPARING ) ; 
 PrepareMessage prepare = new PrepareMessage ( ) ; 
 @ @ - 398 , 10 + 396 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 
 / / if we don ' t need to prepare for receiving stream , start sending files immediately 
 if ( requests . isEmpty ( ) ) 
 - { 
 - logger . debug ( " Prepare complete . Start streaming files . " ) ; 
 startStreamingFiles ( ) ; 
 - } 
 } 
 
 / * * 
 @ @ - 411 , 7 + 406 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 * / 
 public void onError ( Throwable e ) 
 { 
 - logger . error ( " Streaming error occurred " , e ) ; 
 + logger . error ( " [ Stream # " + planId ( ) + " ] Streaming error occurred " , e ) ; 
 / / send session failure message 
 if ( handler . isOutgoingConnected ( ) ) 
 handler . sendMessage ( new SessionFailedMessage ( ) ) ; 
 @ @ - 424 , 8 + 419 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 * / 
 public void prepare ( Collection < StreamRequest > requests , Collection < StreamSummary > summaries ) 
 { 
 - logger . debug ( " Start preparing this session ( " + requests . size ( ) + " to send , " + summaries . size ( ) + " to receive ) " ) ; 
 - 
 / / prepare tasks 
 state ( State . PREPARING ) ; 
 for ( StreamRequest request : requests ) 
 @ @ - 444 , 10 + 437 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 
 / / if there are files to stream 
 if ( ! maybeCompleted ( ) ) 
 - { 
 - logger . debug ( " Prepare complete . Start streaming files . " ) ; 
 startStreamingFiles ( ) ; 
 - } 
 } 
 
 / * * 
 @ @ - 523 , 7 + 513 , 7 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 
 public void doRetry ( FileMessageHeader header , Throwable e ) 
 { 
 - logger . warn ( " retrying for following error " , e ) ; 
 + logger . warn ( " [ Stream # " + planId ( ) + " ] Retrying for following error " , e ) ; 
 / / retry 
 retries + + ; 
 if ( retries > DatabaseDescriptor . getMaxStreamingRetries ( ) ) 
 @ @ - 610 , 7 + 600 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 * / 
 private void flushSSTables ( Iterable < ColumnFamilyStore > stores ) 
 { 
 - logger . info ( " Flushing memtables for { } . . . " , stores ) ; 
 List < Future < ? > > flushes = new ArrayList < > ( ) ; 
 for ( ColumnFamilyStore cfs : stores ) 
 flushes . add ( cfs . forceFlush ( ) ) ; 
 @ @ - 619 , 7 + 608 , 6 @ @ public class StreamSession implements IEndpointStateChangeSubscriber , IFailureDe 
 
 private void prepareReceiving ( StreamSummary summary ) 
 { 
 - logger . debug ( " Prepare for receiving " + summary ) ; 
 if ( summary . files > 0 ) 
 receivers . put ( summary . cfId , new StreamReceiveTask ( this , summary . cfId , summary . files , summary . totalSize ) ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java b / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java 
 index b561abc . . 495b88a 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / CompleteMessage . java 
 @ @ - 39 , 4 + 39 , 10 @ @ public class CompleteMessage extends StreamMessage 
 { 
 super ( Type . COMPLETE ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " Complete " ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / FileMessage . java b / src / java / org / apache / cassandra / streaming / messages / FileMessage . java 
 index 464c35a . . a0543c0 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / FileMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / FileMessage . java 
 @ @ - 107 , 6 + 107 , 6 @ @ public class FileMessage extends StreamMessage 
 @ Override 
 public String toString ( ) 
 { 
 - return " FileMessage ( " + sstable + " ) " ; 
 + return " File ( " + header + " , file : " + sstable . getFilename ( ) + " ) " ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java b / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java 
 index 761e086 . . 24f1e04 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / FileMessageHeader . java 
 @ @ - 83 , 6 + 83 , 20 @ @ public class FileMessageHeader 
 } 
 
 @ Override 
 + public String toString ( ) 
 + { 
 + final StringBuilder sb = new StringBuilder ( " Header ( " ) ; 
 + sb . append ( " cfId : " ) . append ( cfId ) ; 
 + sb . append ( " , # " ) . append ( sequenceNumber ) ; 
 + sb . append ( " , version : " ) . append ( version ) ; 
 + sb . append ( " , estimated keys : " ) . append ( estimatedKeys ) ; 
 + sb . append ( " , transfer size : " ) . append ( size ( ) ) ; 
 + sb . append ( " , compressed ? : " ) . append ( compressionInfo ! = null ) ; 
 + sb . append ( ' ) ' ) ; 
 + return sb . toString ( ) ; 
 + } 
 + 
 + @ Override 
 public boolean equals ( Object o ) 
 { 
 if ( this = = o ) return true ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java b / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java 
 index ba94592 . . 16d156d 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / PrepareMessage . java 
 @ @ - 79 , 12 + 79 , 12 @ @ public class PrepareMessage extends StreamMessage 
 @ Override 
 public String toString ( ) 
 { 
 - final StringBuilder sb = new StringBuilder ( " PrepareMessage { " ) ; 
 + final StringBuilder sb = new StringBuilder ( " Prepare ( " ) ; 
 sb . append ( requests . size ( ) ) . append ( " requests , " ) ; 
 int totalFile = 0 ; 
 for ( StreamSummary summary : summaries ) 
 totalFile + = summary . files ; 
 - sb . append ( totalFile ) . append ( " files receiving " ) ; 
 + sb . append ( " " ) . append ( totalFile ) . append ( " files " ) ; 
 sb . append ( ' } ' ) ; 
 return sb . toString ( ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java b / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java 
 index daf8bf1 . . a210348 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / ReceivedMessage . java 
 @ @ - 54 , 4 + 54 , 12 @ @ public class ReceivedMessage extends StreamMessage 
 this . cfId = cfId ; 
 this . sequenceNumber = sequenceNumber ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + final StringBuilder sb = new StringBuilder ( " Received ( " ) ; 
 + sb . append ( cfId ) . append ( " , # " ) . append ( sequenceNumber ) . append ( ' ) ' ) ; 
 + return sb . toString ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java 
 index 67b4dee . . 666257f 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / RetryMessage . java 
 @ @ - 54 , 4 + 54 , 12 @ @ public class RetryMessage extends StreamMessage 
 this . cfId = cfId ; 
 this . sequenceNumber = sequenceNumber ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + final StringBuilder sb = new StringBuilder ( " Retry ( " ) ; 
 + sb . append ( cfId ) . append ( " , # " ) . append ( sequenceNumber ) . append ( ' ) ' ) ; 
 + return sb . toString ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java b / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java 
 index 450f67d . . 7144a14 100644 
 - - - a / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java 
 + + + b / src / java / org / apache / cassandra / streaming / messages / SessionFailedMessage . java 
 @ @ - 39 , 4 + 39 , 10 @ @ public class SessionFailedMessage extends StreamMessage 
 { 
 super ( Type . SESSION _ FAILED ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " Session Failed " ; 
 + } 
 }
