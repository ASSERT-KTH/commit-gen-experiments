BLEU SCORE: 0.05341087579952926

TEST MSG: r / m equals override
GENERATED MSG: CLHM , fixed version

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 010a277 . . 738627b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 405 , 15 + 405 , 6 @ @ public final class CFMetaData <nl> } <nl> <nl> @ Override <nl> - public boolean equals ( Object obj ) <nl> - { <nl> - if ( ! ( obj instanceof SpeculativeRetry ) ) <nl> - return false ; <nl> - SpeculativeRetry rhs = ( SpeculativeRetry ) obj ; <nl> - return Objects . equal ( type , rhs . type ) & & Objects . equal ( value , rhs . value ) ; <nl> - } <nl> - <nl> - @ Override <nl> public String toString ( ) <nl> { <nl> switch ( type )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ddc3213 . . 4730763 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * Additional JMX metrics ( CASSANDRA - 482 ) <nl> * JSON based export and import tools ( several tickets ) <nl> * Hinted Handoff fixes ( several tickets ) <nl> + * Add key cache to improve read performance ( CASSANDRA - 423 ) <nl> <nl> <nl> 0 . 4 . 2 <nl> diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml <nl> index eabff22 . . 504650d 100644 <nl> - - - a / conf / storage - conf . xml <nl> + + + b / conf / storage - conf . xml <nl> @ @ - 55 , 6 + 55 , 17 @ @ <nl> - - > <nl> < Keyspaces > <nl> < Keyspace Name = " Keyspace1 " > <nl> + < ! - - <nl> + ~ The fraction of keys per sstable whose locations we keep in <nl> + ~ memory in " mostly LRU " order . ( JUST the key locations , NOT any <nl> + ~ column values . ) <nl> + <nl> + ~ The amount of memory used by the default setting of 0 . 01 is <nl> + ~ comparable to the amount used by the internal per - sstable key <nl> + ~ index . Consider increasing this if you have fewer , wider rows . <nl> + ~ Set to 0 to disable entirely . <nl> + - - > <nl> + < KeysCachedFraction > 0 . 01 < / KeysCachedFraction > <nl> < ! - - <nl> ~ The CompareWith attribute tells Cassandra how to sort the columns <nl> ~ for slicing operations . The default is BytesType , which is a <nl> diff - - git a / lib / licenses / clhm - production . jar . LICENSE b / lib / licenses / clhm - production . jar . LICENSE <nl> new file mode 100644 <nl> index 0000000 . . 7a4a3ea <nl> - - - / dev / null <nl> + + + b / lib / licenses / clhm - production . jar . LICENSE <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + <nl> + Apache License <nl> + Version 2 . 0 , January 2004 <nl> + http : / / www . apache . org / licenses / <nl> + <nl> + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION <nl> + <nl> + 1 . Definitions . <nl> + <nl> + " License " shall mean the terms and conditions for use , reproduction , <nl> + and distribution as defined by Sections 1 through 9 of this document . <nl> + <nl> + " Licensor " shall mean the copyright owner or entity authorized by <nl> + the copyright owner that is granting the License . <nl> + <nl> + " Legal Entity " shall mean the union of the acting entity and all <nl> + other entities that control , are controlled by , or are under common <nl> + control with that entity . For the purposes of this definition , <nl> + " control " means ( i ) the power , direct or indirect , to cause the <nl> + direction or management of such entity , whether by contract or <nl> + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the <nl> + outstanding shares , or ( iii ) beneficial ownership of such entity . <nl> + <nl> + " You " ( or " Your " ) shall mean an individual or Legal Entity <nl> + exercising permissions granted by this License . <nl> + <nl> + " Source " form shall mean the preferred form for making modifications , <nl> + including but not limited to software source code , documentation <nl> + source , and configuration files . <nl> + <nl> + " Object " form shall mean any form resulting from mechanical <nl> + transformation or translation of a Source form , including but <nl> + not limited to compiled object code , generated documentation , <nl> + and conversions to other media types . <nl> + <nl> + " Work " shall mean the work of authorship , whether in Source or <nl> + Object form , made available under the License , as indicated by a <nl> + copyright notice that is included in or attached to the work <nl> + ( an example is provided in the Appendix below ) . <nl> + <nl> + " Derivative Works " shall mean any work , whether in Source or Object <nl> + form , that is based on ( or derived from ) the Work and for which the <nl> + editorial revisions , annotations , elaborations , or other modifications <nl> + represent , as a whole , an original work of authorship . For the purposes <nl> + of this License , Derivative Works shall not include works that remain <nl> + separable from , or merely link ( or bind by name ) to the interfaces of , <nl> + the Work and Derivative Works thereof . <nl> + <nl> + " Contribution " shall mean any work of authorship , including <nl> + the original version of the Work and any modifications or additions <nl> + to that Work or Derivative Works thereof , that is intentionally <nl> + submitted to Licensor for inclusion in the Work by the copyright owner <nl> + or by an individual or Legal Entity authorized to submit on behalf of <nl> + the copyright owner . For the purposes of this definition , " submitted " <nl> + means any form of electronic , verbal , or written communication sent <nl> + to the Licensor or its representatives , including but not limited to <nl> + communication on electronic mailing lists , source code control systems , <nl> + and issue tracking systems that are managed by , or on behalf of , the <nl> + Licensor for the purpose of discussing and improving the Work , but <nl> + excluding communication that is conspicuously marked or otherwise <nl> + designated in writing by the copyright owner as " Not a Contribution . " <nl> + <nl> + " Contributor " shall mean Licensor and any individual or Legal Entity <nl> + on behalf of whom a Contribution has been received by Licensor and <nl> + subsequently incorporated within the Work . <nl> + <nl> + 2 . Grant of Copyright License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + copyright license to reproduce , prepare Derivative Works of , <nl> + publicly display , publicly perform , sublicense , and distribute the <nl> + Work and such Derivative Works in Source or Object form . <nl> + <nl> + 3 . Grant of Patent License . Subject to the terms and conditions of <nl> + this License , each Contributor hereby grants to You a perpetual , <nl> + worldwide , non - exclusive , no - charge , royalty - free , irrevocable <nl> + ( except as stated in this section ) patent license to make , have made , <nl> + use , offer to sell , sell , import , and otherwise transfer the Work , <nl> + where such license applies only to those patent claims licensable <nl> + by such Contributor that are necessarily infringed by their <nl> + Contribution ( s ) alone or by combination of their Contribution ( s ) <nl> + with the Work to which such Contribution ( s ) was submitted . If You <nl> + institute patent litigation against any entity ( including a <nl> + cross - claim or counterclaim in a lawsuit ) alleging that the Work <nl> + or a Contribution incorporated within the Work constitutes direct <nl> + or contributory patent infringement , then any patent licenses <nl> + granted to You under this License for that Work shall terminate <nl> + as of the date such litigation is filed . <nl> + <nl> + 4 . Redistribution . You may reproduce and distribute copies of the <nl> + Work or Derivative Works thereof in any medium , with or without <nl> + modifications , and in Source or Object form , provided that You <nl> + meet the following conditions : <nl> + <nl> + ( a ) You must give any other recipients of the Work or <nl> + Derivative Works a copy of this License ; and <nl> + <nl> + ( b ) You must cause any modified files to carry prominent notices <nl> + stating that You changed the files ; and <nl> + <nl> + ( c ) You must retain , in the Source form of any Derivative Works <nl> + that You distribute , all copyright , patent , trademark , and <nl> + attribution notices from the Source form of the Work , <nl> + excluding those notices that do not pertain to any part of <nl> + the Derivative Works ; and <nl> + <nl> + ( d ) If the Work includes a " NOTICE " text file as part of its <nl> + distribution , then any Derivative Works that You distribute must <nl> + include a readable copy of the attribution notices contained <nl> + within such NOTICE file , excluding those notices that do not <nl> + pertain to any part of the Derivative Works , in at least one <nl> + of the following places : within a NOTICE text file distributed <nl> + as part of the Derivative Works ; within the Source form or <nl> + documentation , if provided along with the Derivative Works ; or , <nl> + within a display generated by the Derivative Works , if and <nl> + wherever such third - party notices normally appear . The contents <nl> + of the NOTICE file are for informational purposes only and <nl> + do not modify the License . You may add Your own attribution <nl> + notices within Derivative Works that You distribute , alongside <nl> + or as an addendum to the NOTICE text from the Work , provided <nl> + that such additional attribution notices cannot be construed <nl> + as modifying the License . <nl> + <nl> + You may add Your own copyright statement to Your modifications and <nl> + may provide additional or different license terms and conditions <nl> + for use , reproduction , or distribution of Your modifications , or <nl> + for any such Derivative Works as a whole , provided Your use , <nl> + reproduction , and distribution of the Work otherwise complies with <nl> + the conditions stated in this License . <nl> + <nl> + 5 . Submission of Contributions . Unless You explicitly state otherwise , <nl> + any Contribution intentionally submitted for inclusion in the Work <nl> + by You to the Licensor shall be under the terms and conditions of <nl> + this License , without any additional terms or conditions . <nl> + Notwithstanding the above , nothing herein shall supersede or modify <nl> + the terms of any separate license agreement you may have executed <nl> + with Licensor regarding such Contributions . <nl> + <nl> + 6 . Trademarks . This License does not grant permission to use the trade <nl> + names , trademarks , service marks , or product names of the Licensor , <nl> + except as required for reasonable and customary use in describing the <nl> + origin of the Work and reproducing the content of the NOTICE file . <nl> + <nl> + 7 . Disclaimer of Warranty . Unless required by applicable law or <nl> + agreed to in writing , Licensor provides the Work ( and each <nl> + Contributor provides its Contributions ) on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or <nl> + implied , including , without limitation , any warranties or conditions <nl> + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A <nl> + PARTICULAR PURPOSE . You are solely responsible for determining the <nl> + appropriateness of using or redistributing the Work and assume any <nl> + risks associated with Your exercise of permissions under this License . <nl> + <nl> + 8 . Limitation of Liability . In no event and under no legal theory , <nl> + whether in tort ( including negligence ) , contract , or otherwise , <nl> + unless required by applicable law ( such as deliberate and grossly <nl> + negligent acts ) or agreed to in writing , shall any Contributor be <nl> + liable to You for damages , including any direct , indirect , special , <nl> + incidental , or consequential damages of any character arising as a <nl> + result of this License or out of the use or inability to use the <nl> + Work ( including but not limited to damages for loss of goodwill , <nl> + work stoppage , computer failure or malfunction , or any and all <nl> + other commercial damages or losses ) , even if such Contributor <nl> + has been advised of the possibility of such damages . <nl> + <nl> + 9 . Accepting Warranty or Additional Liability . While redistributing <nl> + the Work or Derivative Works thereof , You may choose to offer , <nl> + and charge a fee for , acceptance of support , warranty , indemnity , <nl> + or other liability obligations and / or rights consistent with this <nl> + License . However , in accepting such obligations , You may act only <nl> + on Your own behalf and on Your sole responsibility , not on behalf <nl> + of any other Contributor , and only if You agree to indemnify , <nl> + defend , and hold each Contributor harmless for any liability <nl> + incurred by , or claims asserted against , such Contributor by reason <nl> + of your accepting any such warranty or additional liability . <nl> + <nl> + END OF TERMS AND CONDITIONS <nl> + <nl> + APPENDIX : How to apply the Apache License to your work . <nl> + <nl> + To apply the Apache License to your work , attach the following <nl> + boilerplate notice , with the fields enclosed by brackets " [ ] " <nl> + replaced with your own identifying information . ( Don ' t include <nl> + the brackets ! ) The text should be enclosed in the appropriate <nl> + comment syntax for the file format . We also recommend that a <nl> + file or class name and description of purpose be included on the <nl> + same " printed page " as the copyright notice for easier <nl> + identification within third - party archives . <nl> + <nl> + Copyright [ yyyy ] [ name of copyright owner ] <nl> + <nl> + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; <nl> + you may not use this file except in compliance with the License . <nl> + You may obtain a copy of the License at <nl> + <nl> + http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + <nl> + Unless required by applicable law or agreed to in writing , software <nl> + distributed under the License is distributed on an " AS IS " BASIS , <nl> + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + See the License for the specific language governing permissions and <nl> + limitations under the License . <nl> \ No newline at end of file <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 23d103e . . 6cb152e 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 76 , 6 + 76 , 7 @ @ public class DatabaseDescriptor <nl> private static Set < String > applicationColumnFamilies _ = new HashSet < String > ( ) ; <nl> private static int bmtThreshold _ = 256 ; <nl> <nl> + private static Map < String , Double > tableKeysCachedFractions _ ; <nl> / * <nl> * A map from table names to the set of column families for the table and the <nl> * corresponding meta data for that column family . <nl> @ @ - 407 , 6 + 408 , 7 @ @ public class DatabaseDescriptor <nl> CommitLog . setSegmentSize ( Integer . parseInt ( value ) * 1024 * 1024 ) ; <nl> <nl> tableToCFMetaDataMap _ = new HashMap < String , Map < String , CFMetaData > > ( ) ; <nl> + tableKeysCachedFractions _ = new HashMap < String , Double > ( ) ; <nl> <nl> / * See which replica placement strategy to use * / <nl> String replicaPlacementStrategyClassName = xmlUtils . getNodeValue ( " / Storage / ReplicaPlacementStrategy " ) ; <nl> @ @ - 443 , 6 + 445 , 17 @ @ public class DatabaseDescriptor <nl> tables _ . add ( tName ) ; <nl> tableToCFMetaDataMap _ . put ( tName , new HashMap < String , CFMetaData > ( ) ) ; <nl> <nl> + String xqlCacheSize = " / Storage / Keyspaces / Keyspace [ @ Name = ' " + tName + " ' ] / KeysCachedFraction " ; <nl> + value = xmlUtils . getNodeValue ( xqlCacheSize ) ; <nl> + if ( value = = null ) <nl> + { <nl> + tableKeysCachedFractions _ . put ( tName , 0 . 01 ) ; <nl> + } <nl> + else <nl> + { <nl> + tableKeysCachedFractions _ . put ( tName , Double . valueOf ( value ) ) ; <nl> + } <nl> + <nl> String xqlTable = " / Storage / Keyspaces / Keyspace [ @ Name = ' " + tName + " ' ] / " ; <nl> NodeList columnFamilies = xmlUtils . getRequestedNodeList ( xqlTable + " ColumnFamily " ) ; <nl> <nl> @ @ - 527 , 6 + 540 , 7 @ @ public class DatabaseDescriptor <nl> systemMetadata . put ( data . cfName , data ) ; <nl> <nl> tableToCFMetaDataMap _ . put ( Table . SYSTEM _ TABLE , systemMetadata ) ; <nl> + tableKeysCachedFractions _ . put ( Table . SYSTEM _ TABLE , 0 . 0 ) ; <nl> <nl> / * make sure we have a directory for each table * / <nl> createTableDirectories ( ) ; <nl> @ @ - 911 , 6 + 925 , 11 @ @ public class DatabaseDescriptor <nl> return tableToCFMetaDataMap _ ; <nl> } <nl> <nl> + public static double getKeysCachedFraction ( String tableName ) <nl> + { <nl> + return tableKeysCachedFractions _ . get ( tableName ) ; <nl> + } <nl> + <nl> private static class ConfigurationException extends Exception <nl> { <nl> public ConfigurationException ( String message ) <nl> diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> index d74a265 . . f73a33b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> @ @ - 144 , 7 + 144 , 7 @ @ public class BinaryMemtable implements IFlushable < DecoratedKey > <nl> assert bytes . length > 0 ; <nl> writer . append ( key , bytes ) ; <nl> } <nl> - SSTableReader sstable = writer . closeAndOpenReader ( ) ; <nl> + SSTableReader sstable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ; <nl> logger _ . info ( " Completed flushing " + writer . getFilename ( ) ) ; <nl> return sstable ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 3e41f1c . . b8170a2 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 814 , 7 + 814 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> <nl> if ( writer ! = null ) <nl> { <nl> - results . add ( writer . closeAndOpenReader ( ) ) ; <nl> + results . add ( writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ) ; <nl> String format = " AntiCompacted to % s . % d / % d bytes for % d keys . Time : % dms . " ; <nl> long dTime = System . currentTimeMillis ( ) - startTime ; <nl> logger _ . info ( String . format ( format , writer . getFilename ( ) , getTotalBytes ( sstables ) , results . get ( 0 ) . length ( ) , totalkeysWritten , dTime ) ) ; <nl> @ @ - 890 , 7 + 890 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> ci . close ( ) ; <nl> } <nl> <nl> - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; <nl> + SSTableReader ssTable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ; <nl> ssTables _ . add ( ssTable ) ; <nl> ssTables _ . markCompacted ( sstables ) ; <nl> CompactionManager . instance ( ) . submit ( ColumnFamilyStore . this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index 218b975 . . 9b477ec1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 217 , 8 + 217 , 8 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > <nl> / * Now write the key and value to disk * / <nl> writer . append ( key , buffer ) ; <nl> } <nl> - buffer . close ( ) ; <nl> - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; <nl> + <nl> + SSTableReader ssTable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ; <nl> isFlushed _ = true ; <nl> logger _ . info ( " Completed flushing " + ssTable . getFilename ( ) ) ; <nl> return ssTable ; <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index c498a7e . . 36f2f1d 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . * ; <nl> import org . apache . cassandra . db . marshal . AbstractType ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> <nl> / * * <nl> * SSTableReaders are open ( ) ed by Table . onStart ; after that they are created by SSTableWriter . renameAndOpen . <nl> @ @ - 133 , 10 + 134 , 10 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> <nl> public static SSTableReader open ( String dataFileName ) throws IOException <nl> { <nl> - return open ( dataFileName , StorageService . getPartitioner ( ) ) ; <nl> + return open ( dataFileName , StorageService . getPartitioner ( ) , DatabaseDescriptor . getKeysCachedFraction ( parseTableName ( dataFileName ) ) ) ; <nl> } <nl> <nl> - public static SSTableReader open ( String dataFileName , IPartitioner partitioner ) throws IOException <nl> + public static SSTableReader open ( String dataFileName , IPartitioner partitioner , double cacheFraction ) throws IOException <nl> { <nl> assert partitioner ! = null ; <nl> assert openedFiles . get ( dataFileName ) = = null ; <nl> @ @ - 145 , 6 + 146 , 10 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> SSTableReader sstable = new SSTableReader ( dataFileName , partitioner ) ; <nl> sstable . loadIndexFile ( ) ; <nl> sstable . loadBloomFilter ( ) ; <nl> + if ( cacheFraction > 0 ) <nl> + { <nl> + sstable . keyCache = createKeyCache ( ( int ) ( ( sstable . getIndexPositions ( ) . size ( ) + 1 ) * INDEX _ INTERVAL * cacheFraction ) ) ; <nl> + } <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " INDEX LOAD TIME for " + dataFileName + " : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; <nl> <nl> @ @ - 153 , 7 + 158 , 14 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> <nl> FileDeletingReference phantomReference ; <nl> <nl> - SSTableReader ( String filename , IPartitioner partitioner , List < KeyPosition > indexPositions , BloomFilter bloomFilter ) <nl> + public static ConcurrentLinkedHashMap < DecoratedKey , Long > createKeyCache ( int size ) <nl> + { <nl> + return ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , size ) ; <nl> + } <nl> + <nl> + private ConcurrentLinkedHashMap < DecoratedKey , Long > keyCache ; <nl> + <nl> + SSTableReader ( String filename , IPartitioner partitioner , List < KeyPosition > indexPositions , BloomFilter bloomFilter , ConcurrentLinkedHashMap < DecoratedKey , Long > keyCache ) <nl> { <nl> super ( filename , partitioner ) ; <nl> this . indexPositions = indexPositions ; <nl> @ @ - 161 , 11 + 173 , 12 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> phantomReference = new FileDeletingReference ( this , finalizerQueue ) ; <nl> finalizers . add ( phantomReference ) ; <nl> openedFiles . put ( filename , this ) ; <nl> + this . keyCache = keyCache ; <nl> } <nl> <nl> private SSTableReader ( String filename , IPartitioner partitioner ) <nl> { <nl> - this ( filename , partitioner , null , null ) ; <nl> + this ( filename , partitioner , null , null , null ) ; <nl> } <nl> <nl> public List < KeyPosition > getIndexPositions ( ) <nl> @ @ - 229 , 6 + 242 , 14 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> { <nl> if ( ! bf . isPresent ( partitioner . convertToDiskFormat ( decoratedKey ) ) ) <nl> return - 1 ; <nl> + if ( keyCache ! = null ) <nl> + { <nl> + Long cachedPosition = keyCache . get ( decoratedKey ) ; <nl> + if ( cachedPosition ! = null ) <nl> + { <nl> + return cachedPosition ; <nl> + } <nl> + } <nl> long start = getIndexScanPosition ( decoratedKey , partitioner ) ; <nl> if ( start < 0 ) <nl> { <nl> @ @ - 256 , 6 + 277 , 8 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> int v = partitioner . getDecoratedKeyComparator ( ) . compare ( indexDecoratedKey , decoratedKey ) ; <nl> if ( v = = 0 ) <nl> { <nl> + if ( keyCache ! = null ) <nl> + keyCache . put ( decoratedKey , position ) ; <nl> return position ; <nl> } <nl> if ( v > 0 ) <nl> @ @ - 335 , 7 + 358 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > <nl> openedFiles . clear ( ) ; <nl> for ( SSTableReader sstable : sstables ) <nl> { <nl> - SSTableReader . open ( sstable . path , sstable . partitioner ) ; <nl> + SSTableReader . open ( sstable . path , sstable . partitioner , 0 . 01 ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableWriter . java b / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> index 1340d2c . . 8562461 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableWriter . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . BloomFilter ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; <nl> <nl> public class SSTableWriter extends SSTable <nl> { <nl> @ @ - 118 , 7 + 119 , 7 @ @ public class SSTableWriter extends SSTable <nl> / * * <nl> * Renames temporary SSTable files to valid data , index , and bloom filter files <nl> * / <nl> - public SSTableReader closeAndOpenReader ( ) throws IOException <nl> + public SSTableReader closeAndOpenReader ( double cacheFraction ) throws IOException <nl> { <nl> / / bloom filter <nl> FileOutputStream fos = new FileOutputStream ( filterFilename ( ) ) ; <nl> @ @ - 139 , 7 + 140 , 10 @ @ public class SSTableWriter extends SSTable <nl> rename ( filterFilename ( ) ) ; <nl> path = rename ( path ) ; / / important to do this last since index & filter file names are derived from it <nl> <nl> - return new SSTableReader ( path , partitioner , indexPositions , bf ) ; <nl> + ConcurrentLinkedHashMap < DecoratedKey , Long > keyCache = cacheFraction > 0 <nl> + ? SSTableReader . createKeyCache ( ( int ) ( cacheFraction * keysWritten ) ) <nl> + : null ; <nl> + return new SSTableReader ( path , partitioner , indexPositions , bf , keyCache ) ; <nl> } <nl> <nl> static String rename ( String tmpFilename ) <nl> @ @ - 154 , 7 + 158 , 7 @ @ public class SSTableWriter extends SSTable <nl> SSTableWriter . rename ( indexFilename ( dataFileName ) ) ; <nl> SSTableWriter . rename ( filterFilename ( dataFileName ) ) ; <nl> dataFileName = SSTableWriter . rename ( dataFileName ) ; <nl> - return SSTableReader . open ( dataFileName , StorageService . getPartitioner ( ) ) ; <nl> + return SSTableReader . open ( dataFileName , StorageService . getPartitioner ( ) , DatabaseDescriptor . getKeysCachedFraction ( parseTableName ( dataFileName ) ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / SSTableTest . java b / test / unit / org / apache / cassandra / io / SSTableTest . java <nl> index 081e27c . . 8c8dc90 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / SSTableTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / SSTableTest . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public class SSTableTest extends CleanupHelper <nl> <nl> String key = Integer . toString ( 1 ) ; <nl> writer . append ( writer . partitioner . decorateKey ( key ) , bytes ) ; <nl> - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; <nl> + SSTableReader ssTable = writer . closeAndOpenReader ( 0 . 01 ) ; <nl> <nl> / / verify <nl> verifySingle ( ssTable , bytes , key ) ; <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class SSTableTest extends CleanupHelper <nl> { <nl> writer . append ( writer . partitioner . decorateKey ( key ) , map . get ( key ) ) ; <nl> } <nl> - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; <nl> + SSTableReader ssTable = writer . closeAndOpenReader ( 0 . 01 ) ; <nl> <nl> / / verify <nl> verifyMany ( ssTable , map ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 010a277 . . 738627b 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 405 , 15 + 405 , 6 @ @ public final class CFMetaData 
 } 
 
 @ Override 
 - public boolean equals ( Object obj ) 
 - { 
 - if ( ! ( obj instanceof SpeculativeRetry ) ) 
 - return false ; 
 - SpeculativeRetry rhs = ( SpeculativeRetry ) obj ; 
 - return Objects . equal ( type , rhs . type ) & & Objects . equal ( value , rhs . value ) ; 
 - } 
 - 
 - @ Override 
 public String toString ( ) 
 { 
 switch ( type )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ddc3213 . . 4730763 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * Additional JMX metrics ( CASSANDRA - 482 ) 
 * JSON based export and import tools ( several tickets ) 
 * Hinted Handoff fixes ( several tickets ) 
 + * Add key cache to improve read performance ( CASSANDRA - 423 ) 
 
 
 0 . 4 . 2 
 diff - - git a / conf / storage - conf . xml b / conf / storage - conf . xml 
 index eabff22 . . 504650d 100644 
 - - - a / conf / storage - conf . xml 
 + + + b / conf / storage - conf . xml 
 @ @ - 55 , 6 + 55 , 17 @ @ 
 - - > 
 < Keyspaces > 
 < Keyspace Name = " Keyspace1 " > 
 + < ! - - 
 + ~ The fraction of keys per sstable whose locations we keep in 
 + ~ memory in " mostly LRU " order . ( JUST the key locations , NOT any 
 + ~ column values . ) 
 + 
 + ~ The amount of memory used by the default setting of 0 . 01 is 
 + ~ comparable to the amount used by the internal per - sstable key 
 + ~ index . Consider increasing this if you have fewer , wider rows . 
 + ~ Set to 0 to disable entirely . 
 + - - > 
 + < KeysCachedFraction > 0 . 01 < / KeysCachedFraction > 
 < ! - - 
 ~ The CompareWith attribute tells Cassandra how to sort the columns 
 ~ for slicing operations . The default is BytesType , which is a 
 diff - - git a / lib / licenses / clhm - production . jar . LICENSE b / lib / licenses / clhm - production . jar . LICENSE 
 new file mode 100644 
 index 0000000 . . 7a4a3ea 
 - - - / dev / null 
 + + + b / lib / licenses / clhm - production . jar . LICENSE 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + 
 + Apache License 
 + Version 2 . 0 , January 2004 
 + http : / / www . apache . org / licenses / 
 + 
 + TERMS AND CONDITIONS FOR USE , REPRODUCTION , AND DISTRIBUTION 
 + 
 + 1 . Definitions . 
 + 
 + " License " shall mean the terms and conditions for use , reproduction , 
 + and distribution as defined by Sections 1 through 9 of this document . 
 + 
 + " Licensor " shall mean the copyright owner or entity authorized by 
 + the copyright owner that is granting the License . 
 + 
 + " Legal Entity " shall mean the union of the acting entity and all 
 + other entities that control , are controlled by , or are under common 
 + control with that entity . For the purposes of this definition , 
 + " control " means ( i ) the power , direct or indirect , to cause the 
 + direction or management of such entity , whether by contract or 
 + otherwise , or ( ii ) ownership of fifty percent ( 50 % ) or more of the 
 + outstanding shares , or ( iii ) beneficial ownership of such entity . 
 + 
 + " You " ( or " Your " ) shall mean an individual or Legal Entity 
 + exercising permissions granted by this License . 
 + 
 + " Source " form shall mean the preferred form for making modifications , 
 + including but not limited to software source code , documentation 
 + source , and configuration files . 
 + 
 + " Object " form shall mean any form resulting from mechanical 
 + transformation or translation of a Source form , including but 
 + not limited to compiled object code , generated documentation , 
 + and conversions to other media types . 
 + 
 + " Work " shall mean the work of authorship , whether in Source or 
 + Object form , made available under the License , as indicated by a 
 + copyright notice that is included in or attached to the work 
 + ( an example is provided in the Appendix below ) . 
 + 
 + " Derivative Works " shall mean any work , whether in Source or Object 
 + form , that is based on ( or derived from ) the Work and for which the 
 + editorial revisions , annotations , elaborations , or other modifications 
 + represent , as a whole , an original work of authorship . For the purposes 
 + of this License , Derivative Works shall not include works that remain 
 + separable from , or merely link ( or bind by name ) to the interfaces of , 
 + the Work and Derivative Works thereof . 
 + 
 + " Contribution " shall mean any work of authorship , including 
 + the original version of the Work and any modifications or additions 
 + to that Work or Derivative Works thereof , that is intentionally 
 + submitted to Licensor for inclusion in the Work by the copyright owner 
 + or by an individual or Legal Entity authorized to submit on behalf of 
 + the copyright owner . For the purposes of this definition , " submitted " 
 + means any form of electronic , verbal , or written communication sent 
 + to the Licensor or its representatives , including but not limited to 
 + communication on electronic mailing lists , source code control systems , 
 + and issue tracking systems that are managed by , or on behalf of , the 
 + Licensor for the purpose of discussing and improving the Work , but 
 + excluding communication that is conspicuously marked or otherwise 
 + designated in writing by the copyright owner as " Not a Contribution . " 
 + 
 + " Contributor " shall mean Licensor and any individual or Legal Entity 
 + on behalf of whom a Contribution has been received by Licensor and 
 + subsequently incorporated within the Work . 
 + 
 + 2 . Grant of Copyright License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + copyright license to reproduce , prepare Derivative Works of , 
 + publicly display , publicly perform , sublicense , and distribute the 
 + Work and such Derivative Works in Source or Object form . 
 + 
 + 3 . Grant of Patent License . Subject to the terms and conditions of 
 + this License , each Contributor hereby grants to You a perpetual , 
 + worldwide , non - exclusive , no - charge , royalty - free , irrevocable 
 + ( except as stated in this section ) patent license to make , have made , 
 + use , offer to sell , sell , import , and otherwise transfer the Work , 
 + where such license applies only to those patent claims licensable 
 + by such Contributor that are necessarily infringed by their 
 + Contribution ( s ) alone or by combination of their Contribution ( s ) 
 + with the Work to which such Contribution ( s ) was submitted . If You 
 + institute patent litigation against any entity ( including a 
 + cross - claim or counterclaim in a lawsuit ) alleging that the Work 
 + or a Contribution incorporated within the Work constitutes direct 
 + or contributory patent infringement , then any patent licenses 
 + granted to You under this License for that Work shall terminate 
 + as of the date such litigation is filed . 
 + 
 + 4 . Redistribution . You may reproduce and distribute copies of the 
 + Work or Derivative Works thereof in any medium , with or without 
 + modifications , and in Source or Object form , provided that You 
 + meet the following conditions : 
 + 
 + ( a ) You must give any other recipients of the Work or 
 + Derivative Works a copy of this License ; and 
 + 
 + ( b ) You must cause any modified files to carry prominent notices 
 + stating that You changed the files ; and 
 + 
 + ( c ) You must retain , in the Source form of any Derivative Works 
 + that You distribute , all copyright , patent , trademark , and 
 + attribution notices from the Source form of the Work , 
 + excluding those notices that do not pertain to any part of 
 + the Derivative Works ; and 
 + 
 + ( d ) If the Work includes a " NOTICE " text file as part of its 
 + distribution , then any Derivative Works that You distribute must 
 + include a readable copy of the attribution notices contained 
 + within such NOTICE file , excluding those notices that do not 
 + pertain to any part of the Derivative Works , in at least one 
 + of the following places : within a NOTICE text file distributed 
 + as part of the Derivative Works ; within the Source form or 
 + documentation , if provided along with the Derivative Works ; or , 
 + within a display generated by the Derivative Works , if and 
 + wherever such third - party notices normally appear . The contents 
 + of the NOTICE file are for informational purposes only and 
 + do not modify the License . You may add Your own attribution 
 + notices within Derivative Works that You distribute , alongside 
 + or as an addendum to the NOTICE text from the Work , provided 
 + that such additional attribution notices cannot be construed 
 + as modifying the License . 
 + 
 + You may add Your own copyright statement to Your modifications and 
 + may provide additional or different license terms and conditions 
 + for use , reproduction , or distribution of Your modifications , or 
 + for any such Derivative Works as a whole , provided Your use , 
 + reproduction , and distribution of the Work otherwise complies with 
 + the conditions stated in this License . 
 + 
 + 5 . Submission of Contributions . Unless You explicitly state otherwise , 
 + any Contribution intentionally submitted for inclusion in the Work 
 + by You to the Licensor shall be under the terms and conditions of 
 + this License , without any additional terms or conditions . 
 + Notwithstanding the above , nothing herein shall supersede or modify 
 + the terms of any separate license agreement you may have executed 
 + with Licensor regarding such Contributions . 
 + 
 + 6 . Trademarks . This License does not grant permission to use the trade 
 + names , trademarks , service marks , or product names of the Licensor , 
 + except as required for reasonable and customary use in describing the 
 + origin of the Work and reproducing the content of the NOTICE file . 
 + 
 + 7 . Disclaimer of Warranty . Unless required by applicable law or 
 + agreed to in writing , Licensor provides the Work ( and each 
 + Contributor provides its Contributions ) on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or 
 + implied , including , without limitation , any warranties or conditions 
 + of TITLE , NON - INFRINGEMENT , MERCHANTABILITY , or FITNESS FOR A 
 + PARTICULAR PURPOSE . You are solely responsible for determining the 
 + appropriateness of using or redistributing the Work and assume any 
 + risks associated with Your exercise of permissions under this License . 
 + 
 + 8 . Limitation of Liability . In no event and under no legal theory , 
 + whether in tort ( including negligence ) , contract , or otherwise , 
 + unless required by applicable law ( such as deliberate and grossly 
 + negligent acts ) or agreed to in writing , shall any Contributor be 
 + liable to You for damages , including any direct , indirect , special , 
 + incidental , or consequential damages of any character arising as a 
 + result of this License or out of the use or inability to use the 
 + Work ( including but not limited to damages for loss of goodwill , 
 + work stoppage , computer failure or malfunction , or any and all 
 + other commercial damages or losses ) , even if such Contributor 
 + has been advised of the possibility of such damages . 
 + 
 + 9 . Accepting Warranty or Additional Liability . While redistributing 
 + the Work or Derivative Works thereof , You may choose to offer , 
 + and charge a fee for , acceptance of support , warranty , indemnity , 
 + or other liability obligations and / or rights consistent with this 
 + License . However , in accepting such obligations , You may act only 
 + on Your own behalf and on Your sole responsibility , not on behalf 
 + of any other Contributor , and only if You agree to indemnify , 
 + defend , and hold each Contributor harmless for any liability 
 + incurred by , or claims asserted against , such Contributor by reason 
 + of your accepting any such warranty or additional liability . 
 + 
 + END OF TERMS AND CONDITIONS 
 + 
 + APPENDIX : How to apply the Apache License to your work . 
 + 
 + To apply the Apache License to your work , attach the following 
 + boilerplate notice , with the fields enclosed by brackets " [ ] " 
 + replaced with your own identifying information . ( Don ' t include 
 + the brackets ! ) The text should be enclosed in the appropriate 
 + comment syntax for the file format . We also recommend that a 
 + file or class name and description of purpose be included on the 
 + same " printed page " as the copyright notice for easier 
 + identification within third - party archives . 
 + 
 + Copyright [ yyyy ] [ name of copyright owner ] 
 + 
 + Licensed under the Apache License , Version 2 . 0 ( the " License " ) ; 
 + you may not use this file except in compliance with the License . 
 + You may obtain a copy of the License at 
 + 
 + http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + 
 + Unless required by applicable law or agreed to in writing , software 
 + distributed under the License is distributed on an " AS IS " BASIS , 
 + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + See the License for the specific language governing permissions and 
 + limitations under the License . 
 \ No newline at end of file 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 23d103e . . 6cb152e 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 76 , 6 + 76 , 7 @ @ public class DatabaseDescriptor 
 private static Set < String > applicationColumnFamilies _ = new HashSet < String > ( ) ; 
 private static int bmtThreshold _ = 256 ; 
 
 + private static Map < String , Double > tableKeysCachedFractions _ ; 
 / * 
 * A map from table names to the set of column families for the table and the 
 * corresponding meta data for that column family . 
 @ @ - 407 , 6 + 408 , 7 @ @ public class DatabaseDescriptor 
 CommitLog . setSegmentSize ( Integer . parseInt ( value ) * 1024 * 1024 ) ; 
 
 tableToCFMetaDataMap _ = new HashMap < String , Map < String , CFMetaData > > ( ) ; 
 + tableKeysCachedFractions _ = new HashMap < String , Double > ( ) ; 
 
 / * See which replica placement strategy to use * / 
 String replicaPlacementStrategyClassName = xmlUtils . getNodeValue ( " / Storage / ReplicaPlacementStrategy " ) ; 
 @ @ - 443 , 6 + 445 , 17 @ @ public class DatabaseDescriptor 
 tables _ . add ( tName ) ; 
 tableToCFMetaDataMap _ . put ( tName , new HashMap < String , CFMetaData > ( ) ) ; 
 
 + String xqlCacheSize = " / Storage / Keyspaces / Keyspace [ @ Name = ' " + tName + " ' ] / KeysCachedFraction " ; 
 + value = xmlUtils . getNodeValue ( xqlCacheSize ) ; 
 + if ( value = = null ) 
 + { 
 + tableKeysCachedFractions _ . put ( tName , 0 . 01 ) ; 
 + } 
 + else 
 + { 
 + tableKeysCachedFractions _ . put ( tName , Double . valueOf ( value ) ) ; 
 + } 
 + 
 String xqlTable = " / Storage / Keyspaces / Keyspace [ @ Name = ' " + tName + " ' ] / " ; 
 NodeList columnFamilies = xmlUtils . getRequestedNodeList ( xqlTable + " ColumnFamily " ) ; 
 
 @ @ - 527 , 6 + 540 , 7 @ @ public class DatabaseDescriptor 
 systemMetadata . put ( data . cfName , data ) ; 
 
 tableToCFMetaDataMap _ . put ( Table . SYSTEM _ TABLE , systemMetadata ) ; 
 + tableKeysCachedFractions _ . put ( Table . SYSTEM _ TABLE , 0 . 0 ) ; 
 
 / * make sure we have a directory for each table * / 
 createTableDirectories ( ) ; 
 @ @ - 911 , 6 + 925 , 11 @ @ public class DatabaseDescriptor 
 return tableToCFMetaDataMap _ ; 
 } 
 
 + public static double getKeysCachedFraction ( String tableName ) 
 + { 
 + return tableKeysCachedFractions _ . get ( tableName ) ; 
 + } 
 + 
 private static class ConfigurationException extends Exception 
 { 
 public ConfigurationException ( String message ) 
 diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 index d74a265 . . f73a33b 100644 
 - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 @ @ - 144 , 7 + 144 , 7 @ @ public class BinaryMemtable implements IFlushable < DecoratedKey > 
 assert bytes . length > 0 ; 
 writer . append ( key , bytes ) ; 
 } 
 - SSTableReader sstable = writer . closeAndOpenReader ( ) ; 
 + SSTableReader sstable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ; 
 logger _ . info ( " Completed flushing " + writer . getFilename ( ) ) ; 
 return sstable ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 3e41f1c . . b8170a2 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 814 , 7 + 814 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 
 if ( writer ! = null ) 
 { 
 - results . add ( writer . closeAndOpenReader ( ) ) ; 
 + results . add ( writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ) ; 
 String format = " AntiCompacted to % s . % d / % d bytes for % d keys . Time : % dms . " ; 
 long dTime = System . currentTimeMillis ( ) - startTime ; 
 logger _ . info ( String . format ( format , writer . getFilename ( ) , getTotalBytes ( sstables ) , results . get ( 0 ) . length ( ) , totalkeysWritten , dTime ) ) ; 
 @ @ - 890 , 7 + 890 , 7 @ @ public final class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 ci . close ( ) ; 
 } 
 
 - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; 
 + SSTableReader ssTable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ; 
 ssTables _ . add ( ssTable ) ; 
 ssTables _ . markCompacted ( sstables ) ; 
 CompactionManager . instance ( ) . submit ( ColumnFamilyStore . this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index 218b975 . . 9b477ec1 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 217 , 8 + 217 , 8 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > 
 / * Now write the key and value to disk * / 
 writer . append ( key , buffer ) ; 
 } 
 - buffer . close ( ) ; 
 - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; 
 + 
 + SSTableReader ssTable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table _ ) ) ; 
 isFlushed _ = true ; 
 logger _ . info ( " Completed flushing " + ssTable . getFilename ( ) ) ; 
 return ssTable ; 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index c498a7e . . 36f2f1d 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . * ; 
 import org . apache . cassandra . db . marshal . AbstractType ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 
 / * * 
 * SSTableReaders are open ( ) ed by Table . onStart ; after that they are created by SSTableWriter . renameAndOpen . 
 @ @ - 133 , 10 + 134 , 10 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 
 public static SSTableReader open ( String dataFileName ) throws IOException 
 { 
 - return open ( dataFileName , StorageService . getPartitioner ( ) ) ; 
 + return open ( dataFileName , StorageService . getPartitioner ( ) , DatabaseDescriptor . getKeysCachedFraction ( parseTableName ( dataFileName ) ) ) ; 
 } 
 
 - public static SSTableReader open ( String dataFileName , IPartitioner partitioner ) throws IOException 
 + public static SSTableReader open ( String dataFileName , IPartitioner partitioner , double cacheFraction ) throws IOException 
 { 
 assert partitioner ! = null ; 
 assert openedFiles . get ( dataFileName ) = = null ; 
 @ @ - 145 , 6 + 146 , 10 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 SSTableReader sstable = new SSTableReader ( dataFileName , partitioner ) ; 
 sstable . loadIndexFile ( ) ; 
 sstable . loadBloomFilter ( ) ; 
 + if ( cacheFraction > 0 ) 
 + { 
 + sstable . keyCache = createKeyCache ( ( int ) ( ( sstable . getIndexPositions ( ) . size ( ) + 1 ) * INDEX _ INTERVAL * cacheFraction ) ) ; 
 + } 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " INDEX LOAD TIME for " + dataFileName + " : " + ( System . currentTimeMillis ( ) - start ) + " ms . " ) ; 
 
 @ @ - 153 , 7 + 158 , 14 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 
 FileDeletingReference phantomReference ; 
 
 - SSTableReader ( String filename , IPartitioner partitioner , List < KeyPosition > indexPositions , BloomFilter bloomFilter ) 
 + public static ConcurrentLinkedHashMap < DecoratedKey , Long > createKeyCache ( int size ) 
 + { 
 + return ConcurrentLinkedHashMap . create ( ConcurrentLinkedHashMap . EvictionPolicy . SECOND _ CHANCE , size ) ; 
 + } 
 + 
 + private ConcurrentLinkedHashMap < DecoratedKey , Long > keyCache ; 
 + 
 + SSTableReader ( String filename , IPartitioner partitioner , List < KeyPosition > indexPositions , BloomFilter bloomFilter , ConcurrentLinkedHashMap < DecoratedKey , Long > keyCache ) 
 { 
 super ( filename , partitioner ) ; 
 this . indexPositions = indexPositions ; 
 @ @ - 161 , 11 + 173 , 12 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 phantomReference = new FileDeletingReference ( this , finalizerQueue ) ; 
 finalizers . add ( phantomReference ) ; 
 openedFiles . put ( filename , this ) ; 
 + this . keyCache = keyCache ; 
 } 
 
 private SSTableReader ( String filename , IPartitioner partitioner ) 
 { 
 - this ( filename , partitioner , null , null ) ; 
 + this ( filename , partitioner , null , null , null ) ; 
 } 
 
 public List < KeyPosition > getIndexPositions ( ) 
 @ @ - 229 , 6 + 242 , 14 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 { 
 if ( ! bf . isPresent ( partitioner . convertToDiskFormat ( decoratedKey ) ) ) 
 return - 1 ; 
 + if ( keyCache ! = null ) 
 + { 
 + Long cachedPosition = keyCache . get ( decoratedKey ) ; 
 + if ( cachedPosition ! = null ) 
 + { 
 + return cachedPosition ; 
 + } 
 + } 
 long start = getIndexScanPosition ( decoratedKey , partitioner ) ; 
 if ( start < 0 ) 
 { 
 @ @ - 256 , 6 + 277 , 8 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 int v = partitioner . getDecoratedKeyComparator ( ) . compare ( indexDecoratedKey , decoratedKey ) ; 
 if ( v = = 0 ) 
 { 
 + if ( keyCache ! = null ) 
 + keyCache . put ( decoratedKey , position ) ; 
 return position ; 
 } 
 if ( v > 0 ) 
 @ @ - 335 , 7 + 358 , 7 @ @ public class SSTableReader extends SSTable implements Comparable < SSTableReader > 
 openedFiles . clear ( ) ; 
 for ( SSTableReader sstable : sstables ) 
 { 
 - SSTableReader . open ( sstable . path , sstable . partitioner ) ; 
 + SSTableReader . open ( sstable . path , sstable . partitioner , 0 . 01 ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableWriter . java b / src / java / org / apache / cassandra / io / SSTableWriter . java 
 index 1340d2c . . 8562461 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableWriter . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . BloomFilter ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import com . reardencommerce . kernel . collections . shared . evictable . ConcurrentLinkedHashMap ; 
 
 public class SSTableWriter extends SSTable 
 { 
 @ @ - 118 , 7 + 119 , 7 @ @ public class SSTableWriter extends SSTable 
 / * * 
 * Renames temporary SSTable files to valid data , index , and bloom filter files 
 * / 
 - public SSTableReader closeAndOpenReader ( ) throws IOException 
 + public SSTableReader closeAndOpenReader ( double cacheFraction ) throws IOException 
 { 
 / / bloom filter 
 FileOutputStream fos = new FileOutputStream ( filterFilename ( ) ) ; 
 @ @ - 139 , 7 + 140 , 10 @ @ public class SSTableWriter extends SSTable 
 rename ( filterFilename ( ) ) ; 
 path = rename ( path ) ; / / important to do this last since index & filter file names are derived from it 
 
 - return new SSTableReader ( path , partitioner , indexPositions , bf ) ; 
 + ConcurrentLinkedHashMap < DecoratedKey , Long > keyCache = cacheFraction > 0 
 + ? SSTableReader . createKeyCache ( ( int ) ( cacheFraction * keysWritten ) ) 
 + : null ; 
 + return new SSTableReader ( path , partitioner , indexPositions , bf , keyCache ) ; 
 } 
 
 static String rename ( String tmpFilename ) 
 @ @ - 154 , 7 + 158 , 7 @ @ public class SSTableWriter extends SSTable 
 SSTableWriter . rename ( indexFilename ( dataFileName ) ) ; 
 SSTableWriter . rename ( filterFilename ( dataFileName ) ) ; 
 dataFileName = SSTableWriter . rename ( dataFileName ) ; 
 - return SSTableReader . open ( dataFileName , StorageService . getPartitioner ( ) ) ; 
 + return SSTableReader . open ( dataFileName , StorageService . getPartitioner ( ) , DatabaseDescriptor . getKeysCachedFraction ( parseTableName ( dataFileName ) ) ) ; 
 } 
 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / SSTableTest . java b / test / unit / org / apache / cassandra / io / SSTableTest . java 
 index 081e27c . . 8c8dc90 100644 
 - - - a / test / unit / org / apache / cassandra / io / SSTableTest . java 
 + + + b / test / unit / org / apache / cassandra / io / SSTableTest . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public class SSTableTest extends CleanupHelper 
 
 String key = Integer . toString ( 1 ) ; 
 writer . append ( writer . partitioner . decorateKey ( key ) , bytes ) ; 
 - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; 
 + SSTableReader ssTable = writer . closeAndOpenReader ( 0 . 01 ) ; 
 
 / / verify 
 verifySingle ( ssTable , bytes , key ) ; 
 @ @ - 82 , 7 + 82 , 7 @ @ public class SSTableTest extends CleanupHelper 
 { 
 writer . append ( writer . partitioner . decorateKey ( key ) , map . get ( key ) ) ; 
 } 
 - SSTableReader ssTable = writer . closeAndOpenReader ( ) ; 
 + SSTableReader ssTable = writer . closeAndOpenReader ( 0 . 01 ) ; 
 
 / / verify 
 verifyMany ( ssTable , map ) ;
