BLEU SCORE: 0.31947155212313627

TEST MSG: fix CliTest on Windows
GENERATED MSG: fix CliTest

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> index 6b7232c . . 5d28c70 100644 <nl> - - - a / test / unit / org / apache / cassandra / cli / CliTest . java <nl> + + + b / test / unit / org / apache / cassandra / cli / CliTest . java <nl> @ @ - 253 , 8 + 253 , 8 @ @ public class CliTest extends SchemaLoader <nl> / / System . out . println ( " Result : \ n " + result ) ; <nl> if ( statement . startsWith ( " show schema " ) ) <nl> assertEquals ( errStream . toString ( ) + " processing " + statement , <nl> - " \ nWARNING : CQL3 tables are intentionally omitted from ' show schema ' output . \ n " <nl> - + " See https : / / issues . apache . org / jira / browse / CASSANDRA - 4377 for details . \ n \ n " , <nl> + " \ nWARNING : CQL3 tables are intentionally omitted from ' show schema ' output . " + String . format ( " % n " ) <nl> + + " See https : / / issues . apache . org / jira / browse / CASSANDRA - 4377 for details . \ n " + String . format ( " % n " ) , <nl> errStream . toString ( ) ) ; <nl> else <nl> assertEquals ( errStream . toString ( ) + " processing " + statement , " " , errStream . toString ( ) ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a135262 . . f4e854b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 12 , 6 + 12 , 8 @ @ <nl> * Include type arguments in Thrift CQLPreparedResult ( CASSANDRA - 5311 ) <nl> * Fix compaction not removing columns when bf _ fp _ ratio is 1 ( CASSANDRA - 5182 ) <nl> * cli : Warn about missing CQL3 tables in schema descriptions ( CASSANDRA - 5309 ) <nl> + * Re - enable unknown option in replication / compaction strategies option for <nl> + backward compatibility ( CASSANDRA - 4795 ) <nl> Merged from 1 . 1 : <nl> * nodetool : ability to repair specific range ( CASSANDRA - 5280 ) <nl> * Fix possible assertion triggered in SliceFromReadCommand ( CASSANDRA - 5284 ) <nl> diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index ae91d23 . . 18cdd93 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 855 , 7 + 855 , 7 @ @ public final class CFMetaData <nl> throw new ConfigurationException ( " subcolumncomparators do not match or are note compatible . " ) ; <nl> } <nl> <nl> - public static void validateCompactionOptions ( Class < ? extends AbstractCompactionStrategy > strategyClass , Map < String , String > options ) throws ConfigurationException <nl> + public static void validateCompactionOptions ( Class < ? extends AbstractCompactionStrategy > strategyClass , Map < String , String > options , boolean checkUnexpected ) throws ConfigurationException <nl> { <nl> try <nl> { <nl> @ @ - 864 , 7 + 864 , 7 @ @ public final class CFMetaData <nl> <nl> Method validateMethod = strategyClass . getMethod ( " validateOptions " , Map . class ) ; <nl> Map < String , String > unknownOptions = ( Map < String , String > ) validateMethod . invoke ( null , options ) ; <nl> - if ( ! unknownOptions . isEmpty ( ) ) <nl> + if ( checkUnexpected & & ! unknownOptions . isEmpty ( ) ) <nl> throw new ConfigurationException ( String . format ( " Properties specified % s are not understood by % s " , unknownOptions . keySet ( ) , strategyClass . getSimpleName ( ) ) ) ; <nl> } <nl> catch ( NoSuchMethodException e ) <nl> diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> index 9522aa0 . . 138e24b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / KSMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / KSMetaData . java <nl> @ @ - 206 , 7 + 206 , 7 @ @ public final class KSMetaData <nl> / / Attempt to instantiate the ARS , which will throw a ConfigException if the strategy _ options aren ' t fully formed <nl> TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; <nl> IEndpointSnitch eps = DatabaseDescriptor . getEndpointSnitch ( ) ; <nl> - AbstractReplicationStrategy . createReplicationStrategy ( name , strategyClass , tmd , eps , strategyOptions ) ; <nl> + AbstractReplicationStrategy . validateReplicationStrategyIgnoreUnexpected ( name , strategyClass , tmd , eps , strategyOptions ) ; <nl> <nl> for ( CFMetaData cfm : cfMetaData . values ( ) ) <nl> cfm . validate ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / cql / CFPropDefs . java b / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> index 7185b52 . . 7178995 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> + + + b / src / java / org / apache / cassandra / cql / CFPropDefs . java <nl> @ @ - 174 , 7 + 174 , 7 @ @ public class CFPropDefs { <nl> CFMetaData . DEFAULT _ MIN _ COMPACTION _ THRESHOLD ) ) ; <nl> } <nl> <nl> - CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionStrategyOptions ) ; <nl> + CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionStrategyOptions , false ) ; <nl> } <nl> <nl> / * * Map a keyword to the corresponding value * / <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / CFPropDefs . java <nl> index ccef5f8 . . 8ad29fd 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / CFPropDefs . java <nl> @ @ - 88 , 7 + 88 , 7 @ @ public class CFPropDefs extends PropertyDefinitions <nl> compactionStrategyClass = CFMetaData . createCompactionStrategy ( strategy ) ; <nl> compactionOptions . remove ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; <nl> <nl> - CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions ) ; <nl> + CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions , true ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> index 52c422a . . ef96997 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java <nl> @ @ - 72 , 12 + 72 , 14 @ @ public class AlterKeyspaceStatement extends SchemaAlteringStatement <nl> } <nl> else if ( attrs . getReplicationStrategyClass ( ) ! = null ) <nl> { <nl> - / / trial run to let ARS validate class + per - class options <nl> - AbstractReplicationStrategy . createReplicationStrategy ( name , <nl> - AbstractReplicationStrategy . getClass ( attrs . getReplicationStrategyClass ( ) ) , <nl> - StorageService . instance . getTokenMetadata ( ) , <nl> - DatabaseDescriptor . getEndpointSnitch ( ) , <nl> - attrs . getReplicationOptions ( ) ) ; <nl> + / / The strategy is validated through KSMetaData . validate ( ) in announceKeyspaceUpdate below . <nl> + / / However , for backward compatibility with thrift , this doesn ' t validate unexpected options yet , <nl> + / / so doing proper validation here . <nl> + AbstractReplicationStrategy . validateReplicationStrategy ( name , <nl> + attrs . getReplicationStrategyClass ( ) , <nl> + StorageService . instance . getTokenMetadata ( ) , <nl> + DatabaseDescriptor . getEndpointSnitch ( ) , <nl> + attrs . getReplicationOptions ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> index 0a12f97 . . 26e255d 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> @ @ - 87 , 12 + 87 , 14 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement <nl> if ( attrs . getReplicationStrategyClass ( ) = = null ) <nl> throw new ConfigurationException ( " Missing mandatory replication strategy class " ) ; <nl> <nl> - / / trial run to let ARS validate class + per - class options <nl> - AbstractReplicationStrategy . createReplicationStrategy ( name , <nl> - AbstractReplicationStrategy . getClass ( attrs . getReplicationStrategyClass ( ) ) , <nl> - StorageService . instance . getTokenMetadata ( ) , <nl> - DatabaseDescriptor . getEndpointSnitch ( ) , <nl> - attrs . getReplicationOptions ( ) ) ; <nl> + / / The strategy is validated through KSMetaData . validate ( ) in announceNewKeyspace below . <nl> + / / However , for backward compatibility with thrift , this doesn ' t validate unexpected options yet , <nl> + / / so doing proper validation here . <nl> + AbstractReplicationStrategy . validateReplicationStrategy ( name , <nl> + attrs . getReplicationStrategyClass ( ) , <nl> + StorageService . instance . getTokenMetadata ( ) , <nl> + DatabaseDescriptor . getEndpointSnitch ( ) , <nl> + attrs . getReplicationOptions ( ) ) ; <nl> } <nl> <nl> public void announceMigration ( ) throws RequestValidationException <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index 30614b7 . . 914789b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 532 , 18 + 532 , 10 @ @ public class DefsTable <nl> <nl> Schema . instance . setTableDefinition ( newKsm ) ; <nl> <nl> - try <nl> - { <nl> - if ( ! StorageService . instance . isClientMode ( ) ) <nl> - { <nl> - Table . open ( newState . name ) . createReplicationStrategy ( newKsm ) ; <nl> - MigrationManager . instance . notifyUpdateKeyspace ( newKsm ) ; <nl> - } <nl> - } <nl> - catch ( ConfigurationException e ) <nl> + if ( ! StorageService . instance . isClientMode ( ) ) <nl> { <nl> - / / It ' s too late to throw a configuration exception , we should have catch those previously <nl> - throw new RuntimeException ( e ) ; <nl> + Table . open ( newState . name ) . createReplicationStrategy ( newKsm ) ; <nl> + MigrationManager . instance . notifyUpdateKeyspace ( newKsm ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index d923081 . . 3a73f43 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 261 , 14 + 261 , 7 @ @ public class Table <nl> name = table ; <nl> KSMetaData ksm = Schema . instance . getKSMetaData ( table ) ; <nl> assert ksm ! = null : " Unknown keyspace " + table ; <nl> - try <nl> - { <nl> - createReplicationStrategy ( ksm ) ; <nl> - } <nl> - catch ( ConfigurationException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + createReplicationStrategy ( ksm ) ; <nl> <nl> indexLocks = new Object [ DatabaseDescriptor . getConcurrentWriters ( ) * 128 ] ; <nl> for ( int i = 0 ; i < indexLocks . length ; i + + ) <nl> @ @ - 281 , 7 + 274 , 7 @ @ public class Table <nl> } <nl> } <nl> <nl> - public void createReplicationStrategy ( KSMetaData ksm ) throws ConfigurationException <nl> + public void createReplicationStrategy ( KSMetaData ksm ) <nl> { <nl> if ( replicationStrategy ! = null ) <nl> StorageService . instance . getTokenMetadata ( ) . unregister ( replicationStrategy ) ; <nl> diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> index 4b54d94 . . 5ebebcd 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java <nl> @ @ - 211 , 12 + 211 , 23 @ @ public abstract class AbstractReplicationStrategy <nl> <nl> public abstract void validateOptions ( ) throws ConfigurationException ; <nl> <nl> - public static AbstractReplicationStrategy createReplicationStrategy ( String table , <nl> - Class < ? extends AbstractReplicationStrategy > strategyClass , <nl> - TokenMetadata tokenMetadata , <nl> - IEndpointSnitch snitch , <nl> - Map < String , String > strategyOptions ) <nl> - throws ConfigurationException <nl> + / * <nl> + * The options recognized by the strategy . <nl> + * The empty collection means that no options are accepted , but null means <nl> + * that any option is accepted . <nl> + * / <nl> + public Collection < String > recognizedOptions ( ) <nl> + { <nl> + / / We default to null for backward compatibility sake <nl> + return null ; <nl> + } <nl> + <nl> + private static AbstractReplicationStrategy createInternal ( String table , <nl> + Class < ? extends AbstractReplicationStrategy > strategyClass , <nl> + TokenMetadata tokenMetadata , <nl> + IEndpointSnitch snitch , <nl> + Map < String , String > strategyOptions ) <nl> + throws ConfigurationException <nl> { <nl> AbstractReplicationStrategy strategy ; <nl> Class [ ] parameterTypes = new Class [ ] { String . class , TokenMetadata . class , IEndpointSnitch . class , Map . class } ; <nl> @ @ - 227 , 24 + 238 , 61 @ @ public abstract class AbstractReplicationStrategy <nl> } <nl> catch ( Exception e ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + throw new ConfigurationException ( " Error constructing replication strategy class " , e ) ; <nl> } <nl> - <nl> - / / Throws Config Exception if strat _ opts don ' t contain required info <nl> - strategy . validateOptions ( ) ; <nl> - <nl> return strategy ; <nl> } <nl> <nl> public static AbstractReplicationStrategy createReplicationStrategy ( String table , <nl> - String strategyClassName , <nl> + Class < ? extends AbstractReplicationStrategy > strategyClass , <nl> TokenMetadata tokenMetadata , <nl> IEndpointSnitch snitch , <nl> Map < String , String > strategyOptions ) <nl> - throws ConfigurationException <nl> { <nl> - Class < AbstractReplicationStrategy > c = getClass ( strategyClassName ) ; <nl> - return createReplicationStrategy ( table , c , tokenMetadata , snitch , strategyOptions ) ; <nl> + try <nl> + { <nl> + AbstractReplicationStrategy strategy = createInternal ( table , strategyClass , tokenMetadata , snitch , strategyOptions ) ; <nl> + <nl> + / / Because we used to not properly validate unrecognized options , we only log a warning if we find one . <nl> + try <nl> + { <nl> + strategy . validateExpectedOptions ( ) ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + logger . warn ( " Ignoring { } " , e . getMessage ( ) ) ; <nl> + } <nl> + <nl> + strategy . validateOptions ( ) ; <nl> + return strategy ; <nl> + } <nl> + catch ( ConfigurationException e ) <nl> + { <nl> + / / If that happens at this point , there is nothing we can do about it . <nl> + throw new RuntimeException ( ) ; <nl> + } <nl> + } <nl> + <nl> + public static void validateReplicationStrategy ( String table , <nl> + String strategyClassName , <nl> + TokenMetadata tokenMetadata , <nl> + IEndpointSnitch snitch , <nl> + Map < String , String > strategyOptions ) throws ConfigurationException <nl> + { <nl> + AbstractReplicationStrategy strategy = createInternal ( table , getClass ( strategyClassName ) , tokenMetadata , snitch , strategyOptions ) ; <nl> + strategy . validateExpectedOptions ( ) ; <nl> + strategy . validateOptions ( ) ; <nl> + } <nl> + <nl> + / / For backward compatibility sake on the thrift side <nl> + public static void validateReplicationStrategyIgnoreUnexpected ( String table , <nl> + Class < ? extends AbstractReplicationStrategy > strategyClass , <nl> + TokenMetadata tokenMetadata , <nl> + IEndpointSnitch snitch , <nl> + Map < String , String > strategyOptions ) throws ConfigurationException <nl> + { <nl> + AbstractReplicationStrategy strategy = createInternal ( table , strategyClass , tokenMetadata , snitch , strategyOptions ) ; <nl> + strategy . validateOptions ( ) ; <nl> } <nl> <nl> public static Class < AbstractReplicationStrategy > getClass ( String cls ) throws ConfigurationException <nl> @ @ - 273 , 8 + 321 , 12 @ @ public abstract class AbstractReplicationStrategy <nl> } <nl> } <nl> <nl> - protected void validateExpectedOptions ( Collection < String > expectedOptions ) throws ConfigurationException <nl> + private void validateExpectedOptions ( ) throws ConfigurationException <nl> { <nl> + Collection expectedOptions = recognizedOptions ( ) ; <nl> + if ( expectedOptions = = null ) <nl> + return ; <nl> + <nl> for ( String key : configOptions . keySet ( ) ) <nl> { <nl> if ( ! expectedOptions . contains ( key ) ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / LocalStrategy . java b / src / java / org / apache / cassandra / locator / LocalStrategy . java <nl> index ab580f1 . . 0e95820 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / LocalStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / LocalStrategy . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . locator ; <nl> import java . net . InetAddress ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> + import java . util . Collection ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 61 , 7 + 62 , 11 @ @ public class LocalStrategy extends AbstractReplicationStrategy <nl> <nl> public void validateOptions ( ) throws ConfigurationException <nl> { <nl> + } <nl> + <nl> + public Collection < String > recognizedOptions ( ) <nl> + { <nl> / / LocalStrategy doesn ' t expect any options . <nl> - validateExpectedOptions ( Collections . < String > emptySet ( ) ) ; <nl> + return Collections . < String > emptySet ( ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> index ad43197 . . c64c792 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java <nl> @ @ - 188 , 7 + 188 , 15 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy <nl> { <nl> for ( Entry < String , String > e : this . configOptions . entrySet ( ) ) <nl> { <nl> + if ( e . getKey ( ) . equalsIgnoreCase ( " replication _ factor " ) ) <nl> + throw new ConfigurationException ( " replication _ factor is an option for SimpleStrategy , not NetworkTopologyStrategy " ) ; <nl> validateReplicationFactor ( e . getValue ( ) ) ; <nl> } <nl> } <nl> + <nl> + public Collection < String > recognizedOptions ( ) <nl> + { <nl> + / / We explicitely allow all options <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java <nl> index 2e3e3e8 . . a46197e 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ package org . apache . cassandra . locator ; <nl> <nl> import java . net . InetAddress ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Collection ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 113 , 4 + 115 , 9 @ @ public class OldNetworkTopologyStrategy extends AbstractReplicationStrategy <nl> } <nl> validateReplicationFactor ( configOptions . get ( " replication _ factor " ) ) ; <nl> } <nl> + <nl> + public Collection < String > recognizedOptions ( ) <nl> + { <nl> + return Collections . < String > singleton ( " replication _ factor " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / locator / SimpleStrategy . java b / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> index 17d171e . . c310875 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> + + + b / src / java / org / apache / cassandra / locator / SimpleStrategy . java <nl> @ @ - 19 , 7 + 19 , 8 @ @ package org . apache . cassandra . locator ; <nl> <nl> import java . net . InetAddress ; <nl> import java . util . ArrayList ; <nl> - import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . Collection ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 69 , 10 + 70 , 14 @ @ public class SimpleStrategy extends AbstractReplicationStrategy <nl> <nl> public void validateOptions ( ) throws ConfigurationException <nl> { <nl> - validateExpectedOptions ( Arrays . < String > asList ( " replication _ factor " ) ) ; <nl> String rf = configOptions . get ( " replication _ factor " ) ; <nl> if ( rf = = null ) <nl> throw new ConfigurationException ( " SimpleStrategy requires a replication _ factor strategy option . " ) ; <nl> validateReplicationFactor ( rf ) ; <nl> } <nl> + <nl> + public Collection < String > recognizedOptions ( ) <nl> + { <nl> + return Collections . < String > singleton ( " replication _ factor " ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 7edaf2b . . 7002436 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 1295 , 7 + 1295 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> cState . hasKeyspaceAccess ( keyspace , Permission . CREATE ) ; <nl> cf _ def . unsetId ( ) ; / / explicitly ignore any id set by client ( Hector likes to set zero ) <nl> CFMetaData cfm = CFMetaData . fromThrift ( cf _ def ) ; <nl> - CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions ) ; <nl> + CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions , false ) ; <nl> <nl> cfm . addDefaultIndexNames ( ) ; <nl> MigrationManager . announceNewColumnFamily ( cfm ) ; <nl> @ @ - 1338 , 13 + 1338 , 6 @ @ public class CassandraServer implements Cassandra . Iface <nl> state ( ) . hasAllKeyspacesAccess ( Permission . CREATE ) ; <nl> ThriftValidation . validateKeyspaceNotYetExisting ( ks _ def . name ) ; <nl> <nl> - / / trial run to let ARS validate class + per - class options <nl> - AbstractReplicationStrategy . createReplicationStrategy ( ks _ def . name , <nl> - AbstractReplicationStrategy . getClass ( ks _ def . strategy _ class ) , <nl> - StorageService . instance . getTokenMetadata ( ) , <nl> - DatabaseDescriptor . getEndpointSnitch ( ) , <nl> - ks _ def . getStrategy _ options ( ) ) ; <nl> - <nl> / / generate a meaningful error if the user setup keyspace and / or column definition incorrectly <nl> for ( CfDef cf : ks _ def . cf _ defs ) <nl> { <nl> @ @ - 1432 , 7 + 1425 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> <nl> CFMetaData . applyImplicitDefaults ( cf _ def ) ; <nl> CFMetaData cfm = CFMetaData . fromThrift ( cf _ def ) ; <nl> - CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions ) ; <nl> + CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions , false ) ; <nl> cfm . addDefaultIndexNames ( ) ; <nl> MigrationManager . announceColumnFamilyUpdate ( cfm ) ; <nl> return Schema . instance . getVersion ( ) . toString ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java b / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java <nl> index 8212468 . . 277677f 100644 <nl> - - - a / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java <nl> + + + b / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java <nl> @ @ - 165 , 7 + 165 , 7 @ @ public class ReplicationStrategyEndpointCacheTest extends SchemaLoader <nl> { <nl> return AbstractReplicationStrategy . createReplicationStrategy ( <nl> strategy . tableName , <nl> - strategy . getClass ( ) . getName ( ) , <nl> + AbstractReplicationStrategy . getClass ( strategy . getClass ( ) . getName ( ) ) , <nl> newTmd , <nl> strategy . snitch , <nl> strategy . configOptions ) ;

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / cli / CliTest . java b / test / unit / org / apache / cassandra / cli / CliTest . java 
 index 6b7232c . . 5d28c70 100644 
 - - - a / test / unit / org / apache / cassandra / cli / CliTest . java 
 + + + b / test / unit / org / apache / cassandra / cli / CliTest . java 
 @ @ - 253 , 8 + 253 , 8 @ @ public class CliTest extends SchemaLoader 
 / / System . out . println ( " Result : \ n " + result ) ; 
 if ( statement . startsWith ( " show schema " ) ) 
 assertEquals ( errStream . toString ( ) + " processing " + statement , 
 - " \ nWARNING : CQL3 tables are intentionally omitted from ' show schema ' output . \ n " 
 - + " See https : / / issues . apache . org / jira / browse / CASSANDRA - 4377 for details . \ n \ n " , 
 + " \ nWARNING : CQL3 tables are intentionally omitted from ' show schema ' output . " + String . format ( " % n " ) 
 + + " See https : / / issues . apache . org / jira / browse / CASSANDRA - 4377 for details . \ n " + String . format ( " % n " ) , 
 errStream . toString ( ) ) ; 
 else 
 assertEquals ( errStream . toString ( ) + " processing " + statement , " " , errStream . toString ( ) ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a135262 . . f4e854b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 12 , 6 + 12 , 8 @ @ 
 * Include type arguments in Thrift CQLPreparedResult ( CASSANDRA - 5311 ) 
 * Fix compaction not removing columns when bf _ fp _ ratio is 1 ( CASSANDRA - 5182 ) 
 * cli : Warn about missing CQL3 tables in schema descriptions ( CASSANDRA - 5309 ) 
 + * Re - enable unknown option in replication / compaction strategies option for 
 + backward compatibility ( CASSANDRA - 4795 ) 
 Merged from 1 . 1 : 
 * nodetool : ability to repair specific range ( CASSANDRA - 5280 ) 
 * Fix possible assertion triggered in SliceFromReadCommand ( CASSANDRA - 5284 ) 
 diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index ae91d23 . . 18cdd93 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 855 , 7 + 855 , 7 @ @ public final class CFMetaData 
 throw new ConfigurationException ( " subcolumncomparators do not match or are note compatible . " ) ; 
 } 
 
 - public static void validateCompactionOptions ( Class < ? extends AbstractCompactionStrategy > strategyClass , Map < String , String > options ) throws ConfigurationException 
 + public static void validateCompactionOptions ( Class < ? extends AbstractCompactionStrategy > strategyClass , Map < String , String > options , boolean checkUnexpected ) throws ConfigurationException 
 { 
 try 
 { 
 @ @ - 864 , 7 + 864 , 7 @ @ public final class CFMetaData 
 
 Method validateMethod = strategyClass . getMethod ( " validateOptions " , Map . class ) ; 
 Map < String , String > unknownOptions = ( Map < String , String > ) validateMethod . invoke ( null , options ) ; 
 - if ( ! unknownOptions . isEmpty ( ) ) 
 + if ( checkUnexpected & & ! unknownOptions . isEmpty ( ) ) 
 throw new ConfigurationException ( String . format ( " Properties specified % s are not understood by % s " , unknownOptions . keySet ( ) , strategyClass . getSimpleName ( ) ) ) ; 
 } 
 catch ( NoSuchMethodException e ) 
 diff - - git a / src / java / org / apache / cassandra / config / KSMetaData . java b / src / java / org / apache / cassandra / config / KSMetaData . java 
 index 9522aa0 . . 138e24b 100644 
 - - - a / src / java / org / apache / cassandra / config / KSMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / KSMetaData . java 
 @ @ - 206 , 7 + 206 , 7 @ @ public final class KSMetaData 
 / / Attempt to instantiate the ARS , which will throw a ConfigException if the strategy _ options aren ' t fully formed 
 TokenMetadata tmd = StorageService . instance . getTokenMetadata ( ) ; 
 IEndpointSnitch eps = DatabaseDescriptor . getEndpointSnitch ( ) ; 
 - AbstractReplicationStrategy . createReplicationStrategy ( name , strategyClass , tmd , eps , strategyOptions ) ; 
 + AbstractReplicationStrategy . validateReplicationStrategyIgnoreUnexpected ( name , strategyClass , tmd , eps , strategyOptions ) ; 
 
 for ( CFMetaData cfm : cfMetaData . values ( ) ) 
 cfm . validate ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / cql / CFPropDefs . java b / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 index 7185b52 . . 7178995 100644 
 - - - a / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 + + + b / src / java / org / apache / cassandra / cql / CFPropDefs . java 
 @ @ - 174 , 7 + 174 , 7 @ @ public class CFPropDefs { 
 CFMetaData . DEFAULT _ MIN _ COMPACTION _ THRESHOLD ) ) ; 
 } 
 
 - CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionStrategyOptions ) ; 
 + CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionStrategyOptions , false ) ; 
 } 
 
 / * * Map a keyword to the corresponding value * / 
 diff - - git a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java b / src / java / org / apache / cassandra / cql3 / CFPropDefs . java 
 index ccef5f8 . . 8ad29fd 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / CFPropDefs . java 
 + + + b / src / java / org / apache / cassandra / cql3 / CFPropDefs . java 
 @ @ - 88 , 7 + 88 , 7 @ @ public class CFPropDefs extends PropertyDefinitions 
 compactionStrategyClass = CFMetaData . createCompactionStrategy ( strategy ) ; 
 compactionOptions . remove ( COMPACTION _ STRATEGY _ CLASS _ KEY ) ; 
 
 - CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions ) ; 
 + CFMetaData . validateCompactionOptions ( compactionStrategyClass , compactionOptions , true ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 index 52c422a . . ef96997 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / AlterKeyspaceStatement . java 
 @ @ - 72 , 12 + 72 , 14 @ @ public class AlterKeyspaceStatement extends SchemaAlteringStatement 
 } 
 else if ( attrs . getReplicationStrategyClass ( ) ! = null ) 
 { 
 - / / trial run to let ARS validate class + per - class options 
 - AbstractReplicationStrategy . createReplicationStrategy ( name , 
 - AbstractReplicationStrategy . getClass ( attrs . getReplicationStrategyClass ( ) ) , 
 - StorageService . instance . getTokenMetadata ( ) , 
 - DatabaseDescriptor . getEndpointSnitch ( ) , 
 - attrs . getReplicationOptions ( ) ) ; 
 + / / The strategy is validated through KSMetaData . validate ( ) in announceKeyspaceUpdate below . 
 + / / However , for backward compatibility with thrift , this doesn ' t validate unexpected options yet , 
 + / / so doing proper validation here . 
 + AbstractReplicationStrategy . validateReplicationStrategy ( name , 
 + attrs . getReplicationStrategyClass ( ) , 
 + StorageService . instance . getTokenMetadata ( ) , 
 + DatabaseDescriptor . getEndpointSnitch ( ) , 
 + attrs . getReplicationOptions ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 index 0a12f97 . . 26e255d 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 @ @ - 87 , 12 + 87 , 14 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement 
 if ( attrs . getReplicationStrategyClass ( ) = = null ) 
 throw new ConfigurationException ( " Missing mandatory replication strategy class " ) ; 
 
 - / / trial run to let ARS validate class + per - class options 
 - AbstractReplicationStrategy . createReplicationStrategy ( name , 
 - AbstractReplicationStrategy . getClass ( attrs . getReplicationStrategyClass ( ) ) , 
 - StorageService . instance . getTokenMetadata ( ) , 
 - DatabaseDescriptor . getEndpointSnitch ( ) , 
 - attrs . getReplicationOptions ( ) ) ; 
 + / / The strategy is validated through KSMetaData . validate ( ) in announceNewKeyspace below . 
 + / / However , for backward compatibility with thrift , this doesn ' t validate unexpected options yet , 
 + / / so doing proper validation here . 
 + AbstractReplicationStrategy . validateReplicationStrategy ( name , 
 + attrs . getReplicationStrategyClass ( ) , 
 + StorageService . instance . getTokenMetadata ( ) , 
 + DatabaseDescriptor . getEndpointSnitch ( ) , 
 + attrs . getReplicationOptions ( ) ) ; 
 } 
 
 public void announceMigration ( ) throws RequestValidationException 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index 30614b7 . . 914789b 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 532 , 18 + 532 , 10 @ @ public class DefsTable 
 
 Schema . instance . setTableDefinition ( newKsm ) ; 
 
 - try 
 - { 
 - if ( ! StorageService . instance . isClientMode ( ) ) 
 - { 
 - Table . open ( newState . name ) . createReplicationStrategy ( newKsm ) ; 
 - MigrationManager . instance . notifyUpdateKeyspace ( newKsm ) ; 
 - } 
 - } 
 - catch ( ConfigurationException e ) 
 + if ( ! StorageService . instance . isClientMode ( ) ) 
 { 
 - / / It ' s too late to throw a configuration exception , we should have catch those previously 
 - throw new RuntimeException ( e ) ; 
 + Table . open ( newState . name ) . createReplicationStrategy ( newKsm ) ; 
 + MigrationManager . instance . notifyUpdateKeyspace ( newKsm ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index d923081 . . 3a73f43 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 261 , 14 + 261 , 7 @ @ public class Table 
 name = table ; 
 KSMetaData ksm = Schema . instance . getKSMetaData ( table ) ; 
 assert ksm ! = null : " Unknown keyspace " + table ; 
 - try 
 - { 
 - createReplicationStrategy ( ksm ) ; 
 - } 
 - catch ( ConfigurationException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + createReplicationStrategy ( ksm ) ; 
 
 indexLocks = new Object [ DatabaseDescriptor . getConcurrentWriters ( ) * 128 ] ; 
 for ( int i = 0 ; i < indexLocks . length ; i + + ) 
 @ @ - 281 , 7 + 274 , 7 @ @ public class Table 
 } 
 } 
 
 - public void createReplicationStrategy ( KSMetaData ksm ) throws ConfigurationException 
 + public void createReplicationStrategy ( KSMetaData ksm ) 
 { 
 if ( replicationStrategy ! = null ) 
 StorageService . instance . getTokenMetadata ( ) . unregister ( replicationStrategy ) ; 
 diff - - git a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 index 4b54d94 . . 5ebebcd 100644 
 - - - a / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / AbstractReplicationStrategy . java 
 @ @ - 211 , 12 + 211 , 23 @ @ public abstract class AbstractReplicationStrategy 
 
 public abstract void validateOptions ( ) throws ConfigurationException ; 
 
 - public static AbstractReplicationStrategy createReplicationStrategy ( String table , 
 - Class < ? extends AbstractReplicationStrategy > strategyClass , 
 - TokenMetadata tokenMetadata , 
 - IEndpointSnitch snitch , 
 - Map < String , String > strategyOptions ) 
 - throws ConfigurationException 
 + / * 
 + * The options recognized by the strategy . 
 + * The empty collection means that no options are accepted , but null means 
 + * that any option is accepted . 
 + * / 
 + public Collection < String > recognizedOptions ( ) 
 + { 
 + / / We default to null for backward compatibility sake 
 + return null ; 
 + } 
 + 
 + private static AbstractReplicationStrategy createInternal ( String table , 
 + Class < ? extends AbstractReplicationStrategy > strategyClass , 
 + TokenMetadata tokenMetadata , 
 + IEndpointSnitch snitch , 
 + Map < String , String > strategyOptions ) 
 + throws ConfigurationException 
 { 
 AbstractReplicationStrategy strategy ; 
 Class [ ] parameterTypes = new Class [ ] { String . class , TokenMetadata . class , IEndpointSnitch . class , Map . class } ; 
 @ @ - 227 , 24 + 238 , 61 @ @ public abstract class AbstractReplicationStrategy 
 } 
 catch ( Exception e ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + throw new ConfigurationException ( " Error constructing replication strategy class " , e ) ; 
 } 
 - 
 - / / Throws Config Exception if strat _ opts don ' t contain required info 
 - strategy . validateOptions ( ) ; 
 - 
 return strategy ; 
 } 
 
 public static AbstractReplicationStrategy createReplicationStrategy ( String table , 
 - String strategyClassName , 
 + Class < ? extends AbstractReplicationStrategy > strategyClass , 
 TokenMetadata tokenMetadata , 
 IEndpointSnitch snitch , 
 Map < String , String > strategyOptions ) 
 - throws ConfigurationException 
 { 
 - Class < AbstractReplicationStrategy > c = getClass ( strategyClassName ) ; 
 - return createReplicationStrategy ( table , c , tokenMetadata , snitch , strategyOptions ) ; 
 + try 
 + { 
 + AbstractReplicationStrategy strategy = createInternal ( table , strategyClass , tokenMetadata , snitch , strategyOptions ) ; 
 + 
 + / / Because we used to not properly validate unrecognized options , we only log a warning if we find one . 
 + try 
 + { 
 + strategy . validateExpectedOptions ( ) ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + logger . warn ( " Ignoring { } " , e . getMessage ( ) ) ; 
 + } 
 + 
 + strategy . validateOptions ( ) ; 
 + return strategy ; 
 + } 
 + catch ( ConfigurationException e ) 
 + { 
 + / / If that happens at this point , there is nothing we can do about it . 
 + throw new RuntimeException ( ) ; 
 + } 
 + } 
 + 
 + public static void validateReplicationStrategy ( String table , 
 + String strategyClassName , 
 + TokenMetadata tokenMetadata , 
 + IEndpointSnitch snitch , 
 + Map < String , String > strategyOptions ) throws ConfigurationException 
 + { 
 + AbstractReplicationStrategy strategy = createInternal ( table , getClass ( strategyClassName ) , tokenMetadata , snitch , strategyOptions ) ; 
 + strategy . validateExpectedOptions ( ) ; 
 + strategy . validateOptions ( ) ; 
 + } 
 + 
 + / / For backward compatibility sake on the thrift side 
 + public static void validateReplicationStrategyIgnoreUnexpected ( String table , 
 + Class < ? extends AbstractReplicationStrategy > strategyClass , 
 + TokenMetadata tokenMetadata , 
 + IEndpointSnitch snitch , 
 + Map < String , String > strategyOptions ) throws ConfigurationException 
 + { 
 + AbstractReplicationStrategy strategy = createInternal ( table , strategyClass , tokenMetadata , snitch , strategyOptions ) ; 
 + strategy . validateOptions ( ) ; 
 } 
 
 public static Class < AbstractReplicationStrategy > getClass ( String cls ) throws ConfigurationException 
 @ @ - 273 , 8 + 321 , 12 @ @ public abstract class AbstractReplicationStrategy 
 } 
 } 
 
 - protected void validateExpectedOptions ( Collection < String > expectedOptions ) throws ConfigurationException 
 + private void validateExpectedOptions ( ) throws ConfigurationException 
 { 
 + Collection expectedOptions = recognizedOptions ( ) ; 
 + if ( expectedOptions = = null ) 
 + return ; 
 + 
 for ( String key : configOptions . keySet ( ) ) 
 { 
 if ( ! expectedOptions . contains ( key ) ) 
 diff - - git a / src / java / org / apache / cassandra / locator / LocalStrategy . java b / src / java / org / apache / cassandra / locator / LocalStrategy . java 
 index ab580f1 . . 0e95820 100644 
 - - - a / src / java / org / apache / cassandra / locator / LocalStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / LocalStrategy . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . locator ; 
 import java . net . InetAddress ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 + import java . util . Collection ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 61 , 7 + 62 , 11 @ @ public class LocalStrategy extends AbstractReplicationStrategy 
 
 public void validateOptions ( ) throws ConfigurationException 
 { 
 + } 
 + 
 + public Collection < String > recognizedOptions ( ) 
 + { 
 / / LocalStrategy doesn ' t expect any options . 
 - validateExpectedOptions ( Collections . < String > emptySet ( ) ) ; 
 + return Collections . < String > emptySet ( ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 index ad43197 . . c64c792 100644 
 - - - a / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / NetworkTopologyStrategy . java 
 @ @ - 188 , 7 + 188 , 15 @ @ public class NetworkTopologyStrategy extends AbstractReplicationStrategy 
 { 
 for ( Entry < String , String > e : this . configOptions . entrySet ( ) ) 
 { 
 + if ( e . getKey ( ) . equalsIgnoreCase ( " replication _ factor " ) ) 
 + throw new ConfigurationException ( " replication _ factor is an option for SimpleStrategy , not NetworkTopologyStrategy " ) ; 
 validateReplicationFactor ( e . getValue ( ) ) ; 
 } 
 } 
 + 
 + public Collection < String > recognizedOptions ( ) 
 + { 
 + / / We explicitely allow all options 
 + return null ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java 
 index 2e3e3e8 . . a46197e 100644 
 - - - a / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / OldNetworkTopologyStrategy . java 
 @ @ - 19 , 6 + 19 , 8 @ @ package org . apache . cassandra . locator ; 
 
 import java . net . InetAddress ; 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . Collection ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 113 , 4 + 115 , 9 @ @ public class OldNetworkTopologyStrategy extends AbstractReplicationStrategy 
 } 
 validateReplicationFactor ( configOptions . get ( " replication _ factor " ) ) ; 
 } 
 + 
 + public Collection < String > recognizedOptions ( ) 
 + { 
 + return Collections . < String > singleton ( " replication _ factor " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / locator / SimpleStrategy . java b / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 index 17d171e . . c310875 100644 
 - - - a / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 + + + b / src / java / org / apache / cassandra / locator / SimpleStrategy . java 
 @ @ - 19 , 7 + 19 , 8 @ @ package org . apache . cassandra . locator ; 
 
 import java . net . InetAddress ; 
 import java . util . ArrayList ; 
 - import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . Collection ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 69 , 10 + 70 , 14 @ @ public class SimpleStrategy extends AbstractReplicationStrategy 
 
 public void validateOptions ( ) throws ConfigurationException 
 { 
 - validateExpectedOptions ( Arrays . < String > asList ( " replication _ factor " ) ) ; 
 String rf = configOptions . get ( " replication _ factor " ) ; 
 if ( rf = = null ) 
 throw new ConfigurationException ( " SimpleStrategy requires a replication _ factor strategy option . " ) ; 
 validateReplicationFactor ( rf ) ; 
 } 
 + 
 + public Collection < String > recognizedOptions ( ) 
 + { 
 + return Collections . < String > singleton ( " replication _ factor " ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 7edaf2b . . 7002436 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 1295 , 7 + 1295 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 cState . hasKeyspaceAccess ( keyspace , Permission . CREATE ) ; 
 cf _ def . unsetId ( ) ; / / explicitly ignore any id set by client ( Hector likes to set zero ) 
 CFMetaData cfm = CFMetaData . fromThrift ( cf _ def ) ; 
 - CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions ) ; 
 + CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions , false ) ; 
 
 cfm . addDefaultIndexNames ( ) ; 
 MigrationManager . announceNewColumnFamily ( cfm ) ; 
 @ @ - 1338 , 13 + 1338 , 6 @ @ public class CassandraServer implements Cassandra . Iface 
 state ( ) . hasAllKeyspacesAccess ( Permission . CREATE ) ; 
 ThriftValidation . validateKeyspaceNotYetExisting ( ks _ def . name ) ; 
 
 - / / trial run to let ARS validate class + per - class options 
 - AbstractReplicationStrategy . createReplicationStrategy ( ks _ def . name , 
 - AbstractReplicationStrategy . getClass ( ks _ def . strategy _ class ) , 
 - StorageService . instance . getTokenMetadata ( ) , 
 - DatabaseDescriptor . getEndpointSnitch ( ) , 
 - ks _ def . getStrategy _ options ( ) ) ; 
 - 
 / / generate a meaningful error if the user setup keyspace and / or column definition incorrectly 
 for ( CfDef cf : ks _ def . cf _ defs ) 
 { 
 @ @ - 1432 , 7 + 1425 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 
 CFMetaData . applyImplicitDefaults ( cf _ def ) ; 
 CFMetaData cfm = CFMetaData . fromThrift ( cf _ def ) ; 
 - CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions ) ; 
 + CFMetaData . validateCompactionOptions ( cfm . compactionStrategyClass , cfm . compactionStrategyOptions , false ) ; 
 cfm . addDefaultIndexNames ( ) ; 
 MigrationManager . announceColumnFamilyUpdate ( cfm ) ; 
 return Schema . instance . getVersion ( ) . toString ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java b / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java 
 index 8212468 . . 277677f 100644 
 - - - a / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java 
 + + + b / test / unit / org / apache / cassandra / locator / ReplicationStrategyEndpointCacheTest . java 
 @ @ - 165 , 7 + 165 , 7 @ @ public class ReplicationStrategyEndpointCacheTest extends SchemaLoader 
 { 
 return AbstractReplicationStrategy . createReplicationStrategy ( 
 strategy . tableName , 
 - strategy . getClass ( ) . getName ( ) , 
 + AbstractReplicationStrategy . getClass ( strategy . getClass ( ) . getName ( ) ) , 
 newTmd , 
 strategy . snitch , 
 strategy . configOptions ) ;
