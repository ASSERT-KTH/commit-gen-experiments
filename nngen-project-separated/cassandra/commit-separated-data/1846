BLEU SCORE: 0.015542791893293221

TEST MSG: Automatically grant permissions to creators of new objects & roles
GENERATED MSG: avoid flushing everyone on truncate ; save truncation position in system table instead

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e1ae69b . . 70166c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> 3 . 0 <nl> - * Add role based access control ( CASSANDRA - 7653 , 8650 ) <nl> + * Add role based access control ( CASSANDRA - 7653 , 8650 , 7216 ) <nl> * Avoid accessing partitioner through StorageProxy ( CASSANDRA - 8244 , 8268 ) <nl> * Upgrade Metrics library and remove depricated metrics ( CASSANDRA - 5657 ) <nl> * Serializing Row cache alternative , fully off heap ( CASSANDRA - 7438 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 801cea7 . . fc5b514 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 30 , 6 + 30 , 9 @ @ New features <nl> subject of permissions . Users ( roles ) can now be granted permissions on other <nl> roles , including CREATE , ALTER , DROP & AUTHORIZE , which removesthe need for <nl> superuser privileges in order to perform user / role management operations . <nl> + - Creators of database resources ( Keyspaces , Tables , Roles ) are now automatically <nl> + granted all permissions on them ( if the IAuthorizer implementation supports <nl> + this ) . <nl> - SSTable file name is changed . Now you don ' t have Keyspace / CF name <nl> in file name . Also , secondary index has its own directory under parent ' s <nl> directory . <nl> diff - - git a / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java b / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java <nl> index 7a60a14 . . bc6fee4 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java <nl> + + + b / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java <nl> @ @ - 20 , 25 + 20 , 21 @ @ package org . apache . cassandra . auth ; <nl> import java . util . Collections ; <nl> import java . util . Set ; <nl> <nl> - import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> - <nl> public class AllowAllAuthorizer implements IAuthorizer <nl> { <nl> public Set < Permission > authorize ( AuthenticatedUser user , IResource resource ) <nl> { <nl> - return Permission . ALL ; <nl> + return resource . applicablePermissions ( ) ; <nl> } <nl> <nl> public void grant ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource to ) <nl> - throws InvalidRequestException <nl> { <nl> - throw new InvalidRequestException ( " GRANT operation is not supported by AllowAllAuthorizer " ) ; <nl> + throw new UnsupportedOperationException ( " GRANT operation is not supported by AllowAllAuthorizer " ) ; <nl> } <nl> <nl> public void revoke ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource from ) <nl> - throws InvalidRequestException <nl> { <nl> - throw new InvalidRequestException ( " REVOKE operation is not supported by AllowAllAuthorizer " ) ; <nl> + throw new UnsupportedOperationException ( " REVOKE operation is not supported by AllowAllAuthorizer " ) ; <nl> } <nl> <nl> public void revokeAllFrom ( RoleResource droppedRole ) <nl> @ @ - 50 , 9 + 46 , 8 @ @ public class AllowAllAuthorizer implements IAuthorizer <nl> } <nl> <nl> public Set < PermissionDetails > list ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource of ) <nl> - throws InvalidRequestException <nl> { <nl> - throw new InvalidRequestException ( " LIST PERMISSIONS operation is not supported by AllowAllAuthorizer " ) ; <nl> + throw new UnsupportedOperationException ( " LIST PERMISSIONS operation is not supported by AllowAllAuthorizer " ) ; <nl> } <nl> <nl> public Set < IResource > protectedResources ( ) <nl> diff - - git a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java <nl> index 25d2ed4 . . e4a065d 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java <nl> + + + b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java <nl> @ @ - 27 , 8 + 27 , 6 @ @ import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> import com . google . common . util . concurrent . ListenableFuture ; <nl> import com . google . common . util . concurrent . ListenableFutureTask ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . concurrent . ScheduledExecutors ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> @ @ - 43 , 7 + 41 , 8 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; <nl> * / <nl> public class AuthenticatedUser <nl> { <nl> - private static final Logger logger = LoggerFactory . getLogger ( AuthenticatedUser . class ) ; <nl> + public static final String SYSTEM _ USERNAME = " system " ; <nl> + public static final AuthenticatedUser SYSTEM _ USER = new AuthenticatedUser ( SYSTEM _ USERNAME ) ; <nl> <nl> public static final String ANONYMOUS _ USERNAME = " anonymous " ; <nl> public static final AuthenticatedUser ANONYMOUS _ USER = new AuthenticatedUser ( ANONYMOUS _ USERNAME ) ; <nl> @ @ - 106 , 6 + 105 , 16 @ @ public class AuthenticatedUser <nl> } <nl> <nl> / * * <nl> + * Some internal operations are performed on behalf of Cassandra itself , in those cases <nl> + * the system user should be used where an identity is required <nl> + * see CreateRoleStatement # execute ( ) and overrides of SchemaAlteringStatement # grantPermissionsToCreator ( ) <nl> + * / <nl> + public boolean isSystem ( ) <nl> + { <nl> + return this = = SYSTEM _ USER ; <nl> + } <nl> + <nl> + / * * <nl> * Get the roles that have been granted to the user via the IRoleManager <nl> * <nl> * @ return a list of roles that have been granted to the user <nl> diff - - git a / src / java / org / apache / cassandra / auth / IAuthorizer . java b / src / java / org / apache / cassandra / auth / IAuthorizer . java <nl> index c3e98e2 . . 21b64dc 100644 <nl> - - - a / src / java / org / apache / cassandra / auth / IAuthorizer . java <nl> + + + b / src / java / org / apache / cassandra / auth / IAuthorizer . java <nl> @ @ - 45 , 6 + 45 , 8 @ @ public interface IAuthorizer <nl> / * * <nl> * Grants a set of permissions on a resource to a role . <nl> * The opposite of revoke ( ) . <nl> + * This method is optional and may be called internally , so implementations which do <nl> + * not support it should be sure to throw UnsupportedOperationException . <nl> * <nl> * @ param performer User who grants the permissions . <nl> * @ param permissions Set of permissions to grant . <nl> @ @ - 53 , 6 + 55 , 7 @ @ public interface IAuthorizer <nl> * <nl> * @ throws RequestValidationException <nl> * @ throws RequestExecutionException <nl> + * @ throws java . lang . UnsupportedOperationException <nl> * / <nl> void grant ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource grantee ) <nl> throws RequestValidationException , RequestExecutionException ; <nl> @ @ - 60 , 6 + 63 , 8 @ @ public interface IAuthorizer <nl> / * * <nl> * Revokes a set of permissions on a resource from a user . <nl> * The opposite of grant ( ) . <nl> + * This method is optional and may be called internally , so implementations which do <nl> + * not support it should be sure to throw UnsupportedOperationException . <nl> * <nl> * @ param performer User who revokes the permissions . <nl> * @ param permissions Set of permissions to revoke . <nl> @ @ - 68 , 12 + 73 , 15 @ @ public interface IAuthorizer <nl> * <nl> * @ throws RequestValidationException <nl> * @ throws RequestExecutionException <nl> + * @ throws java . lang . UnsupportedOperationException <nl> * / <nl> void revoke ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource revokee ) <nl> throws RequestValidationException , RequestExecutionException ; <nl> <nl> / * * <nl> * Returns a list of permissions on a resource granted to a role . <nl> + * This method is optional and may be called internally , so implementations which do <nl> + * not support it should be sure to throw UnsupportedOperationException . <nl> * <nl> * @ param performer User who wants to see the permissions . <nl> * @ param permissions Set of Permission values the user is interested in . The result should only include the <nl> @ @ - 87 , 6 + 95 , 7 @ @ public interface IAuthorizer <nl> * <nl> * @ throws RequestValidationException <nl> * @ throws RequestExecutionException <nl> + * @ throws java . lang . UnsupportedOperationException <nl> * / <nl> Set < PermissionDetails > list ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource grantee ) <nl> throws RequestValidationException , RequestExecutionException ; <nl> @ @ - 95 , 16 + 104 , 22 @ @ public interface IAuthorizer <nl> * Called before deleting a role with DROP ROLE statement ( or the alias provided for compatibility , <nl> * DROP USER ) so that a new role with the same name wouldn ' t inherit permissions of the deleted one in the future . <nl> * This removes all permissions granted to the Role in question . <nl> + * This method is optional and may be called internally , so implementations which do <nl> + * not support it should be sure to throw UnsupportedOperationException . <nl> * <nl> * @ param revokee The role to revoke all permissions from . <nl> + * @ throws java . lang . UnsupportedOperationException <nl> * / <nl> void revokeAllFrom ( RoleResource revokee ) ; <nl> <nl> / * * <nl> * This method is called after a resource is removed ( i . e . keyspace , table or role is dropped ) and revokes all <nl> * permissions granted on the IResource in question . <nl> + * This method is optional and may be called internally , so implementations which do <nl> + * not support it should be sure to throw UnsupportedOperationException . <nl> * <nl> * @ param droppedResource The resource to revoke all permissions on . <nl> + * @ throws java . lang . UnsupportedOperationException <nl> * / <nl> void revokeAllOn ( IResource droppedResource ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> index 8281cbd . . 2dc9c44 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java <nl> @ @ - 17 , 18 + 17 , 12 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> - import org . apache . cassandra . exceptions . ConfigurationException ; <nl> - import org . apache . cassandra . auth . Permission ; <nl> + import org . apache . cassandra . auth . * ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . exceptions . AlreadyExistsException ; <nl> - import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> - import org . apache . cassandra . exceptions . RequestValidationException ; <nl> - import org . apache . cassandra . exceptions . UnauthorizedException ; <nl> + import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> - import org . apache . cassandra . service . ClientState ; <nl> - import org . apache . cassandra . service . MigrationManager ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . thrift . ThriftValidation ; <nl> import org . apache . cassandra . transport . Event ; <nl> <nl> @ @ - 116 , 4 + 110 , 20 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement <nl> { <nl> return new Event . SchemaChange ( Event . SchemaChange . Change . CREATED , keyspace ( ) ) ; <nl> } <nl> + <nl> + protected void grantPermissionsToCreator ( QueryState state ) <nl> + { <nl> + try <nl> + { <nl> + DataResource resource = DataResource . keyspace ( keyspace ( ) ) ; <nl> + DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM _ USER , <nl> + resource . applicablePermissions ( ) , <nl> + resource , <nl> + RoleResource . role ( state . getClientState ( ) . getUser ( ) . getName ( ) ) ) ; <nl> + } <nl> + catch ( RequestExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java <nl> index 65d588b . . 347d20a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java <nl> @ @ - 17 , 8 + 17 , 10 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> - import org . apache . cassandra . auth . * ; <nl> + import org . apache . cassandra . auth . AuthenticatedUser ; <nl> import org . apache . cassandra . auth . IRoleManager . Option ; <nl> + import org . apache . cassandra . auth . Permission ; <nl> + import org . apache . cassandra . auth . RoleResource ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . cql3 . RoleName ; <nl> import org . apache . cassandra . cql3 . RoleOptions ; <nl> @ @ - 76 , 6 + 78 , 35 @ @ public class CreateRoleStatement extends AuthenticationStatement <nl> return null ; <nl> <nl> DatabaseDescriptor . getRoleManager ( ) . createRole ( state . getUser ( ) , role , opts . getOptions ( ) ) ; <nl> + grantPermissionsToCreator ( state ) ; <nl> return null ; <nl> } <nl> + <nl> + / * * <nl> + * Grant all applicable permissions on the newly created role to the user performing the request <nl> + * see also : SchemaAlteringStatement # grantPermissionsToCreator and the overridden implementations <nl> + * of it in subclasses CreateKeyspaceStatement & CreateTableStatement . <nl> + * @ param state <nl> + * / <nl> + private void grantPermissionsToCreator ( ClientState state ) <nl> + { <nl> + / / The creator of a Role automatically gets ALTER / DROP / AUTHORIZE permissions on it if : <nl> + / / * the user is not anonymous <nl> + / / * the configured IAuthorizer supports granting of permissions ( not all do , AllowAllAuthorizer doesn ' t and <nl> + / / custom external implementations may not ) <nl> + if ( ! state . getUser ( ) . isAnonymous ( ) ) <nl> + { <nl> + try <nl> + { <nl> + DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM _ USER , <nl> + role . applicablePermissions ( ) , <nl> + role , <nl> + RoleResource . role ( state . getUser ( ) . getName ( ) ) ) ; <nl> + } <nl> + catch ( UnsupportedOperationException e ) <nl> + { <nl> + / / not a problem , grant is an optional method on IAuthorizer <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> index 4ec656b . . 3be20a6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java <nl> @ @ - 20 , 23 + 20 , 23 @ @ package org . apache . cassandra . cql3 . statements ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> - import org . apache . cassandra . exceptions . * ; <nl> - import org . apache . commons . lang3 . StringUtils ; <nl> import com . google . common . collect . HashMultiset ; <nl> import com . google . common . collect . Multiset ; <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> <nl> - import org . apache . cassandra . auth . Permission ; <nl> - import org . apache . cassandra . config . ColumnDefinition ; <nl> - import org . apache . cassandra . config . CFMetaData ; <nl> - import org . apache . cassandra . config . Schema ; <nl> - import org . apache . cassandra . cql3 . * ; <nl> - import org . apache . cassandra . db . composites . * ; <nl> + import org . apache . cassandra . auth . * ; <nl> + import org . apache . cassandra . config . * ; <nl> + import org . apache . cassandra . cql3 . CFName ; <nl> + import org . apache . cassandra . cql3 . CQL3Type ; <nl> + import org . apache . cassandra . cql3 . ColumnIdentifier ; <nl> import org . apache . cassandra . db . ColumnFamilyType ; <nl> + import org . apache . cassandra . db . composites . * ; <nl> import org . apache . cassandra . db . marshal . * ; <nl> - import org . apache . cassandra . exceptions . AlreadyExistsException ; <nl> + import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . io . compress . CompressionParameters ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> + import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . transport . Event ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> @ @ - 119 , 6 + 119 , 22 @ @ public class CreateTableStatement extends SchemaAlteringStatement <nl> return new Event . SchemaChange ( Event . SchemaChange . Change . CREATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; <nl> } <nl> <nl> + protected void grantPermissionsToCreator ( QueryState state ) <nl> + { <nl> + try <nl> + { <nl> + IResource resource = DataResource . table ( keyspace ( ) , columnFamily ( ) ) ; <nl> + DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM _ USER , <nl> + resource . applicablePermissions ( ) , <nl> + resource , <nl> + RoleResource . role ( state . getClientState ( ) . getUser ( ) . getName ( ) ) ) ; <nl> + } <nl> + catch ( RequestExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Returns a CFMetaData instance based on the parameters parsed from this <nl> * < code > CREATE < / code > statement , or defaults where applicable . <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java <nl> index 375d160 . . 58f8e9c 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java <nl> @ @ - 102 , 7 + 102 , 14 @ @ public class ListPermissionsStatement extends AuthorizationStatement <nl> private Set < PermissionDetails > list ( ClientState state , IResource resource ) <nl> throws RequestValidationException , RequestExecutionException <nl> { <nl> - return DatabaseDescriptor . getAuthorizer ( ) . list ( state . getUser ( ) , permissions , resource , grantee ) ; <nl> + try <nl> + { <nl> + return DatabaseDescriptor . getAuthorizer ( ) . list ( state . getUser ( ) , permissions , resource , grantee ) ; <nl> + } <nl> + catch ( UnsupportedOperationException e ) <nl> + { <nl> + throw new InvalidRequestException ( e . getMessage ( ) ) ; <nl> + } <nl> } <nl> <nl> private ResultMessage resultMessage ( List < PermissionDetails > details ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> index b0d67ac . . a477df6 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java <nl> @ @ - 17 , 10 + 17 , 12 @ @ <nl> * / <nl> package org . apache . cassandra . cql3 . statements ; <nl> <nl> + import org . apache . cassandra . auth . AuthenticatedUser ; <nl> import org . apache . cassandra . cql3 . CFName ; <nl> import org . apache . cassandra . cql3 . CQLStatement ; <nl> import org . apache . cassandra . cql3 . QueryOptions ; <nl> - import org . apache . cassandra . exceptions . * ; <nl> + import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> + import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . QueryState ; <nl> import org . apache . cassandra . transport . Event ; <nl> @ @ - 66 , 6 + 68 , 17 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL <nl> public abstract Event . SchemaChange changeEvent ( ) ; <nl> <nl> / * * <nl> + * Schema alteration may result in a new database object ( keyspace , table , role , function ) being created capable of <nl> + * having permissions GRANTed on it . The creator of the object ( the primary role assigned to the AuthenticatedUser <nl> + * performing the operation ) is automatically granted ALL applicable permissions on the object . This is a hook for <nl> + * subclasses to override in order to perform that grant when the statement is executed . <nl> + * / <nl> + protected void grantPermissionsToCreator ( QueryState state ) <nl> + { <nl> + / / no - op by default <nl> + } <nl> + <nl> + / * * <nl> * Announces the migration to other nodes in the cluster . <nl> * @ return true if the execution of this statement resulted in a schema change , false otherwise ( when IF NOT EXISTS <nl> * is used , for example ) <nl> @ @ - 82 , 6 + 95 , 25 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL <nl> return new ResultMessage . Void ( ) ; <nl> <nl> Event . SchemaChange ce = changeEvent ( ) ; <nl> + <nl> + / / when a schema alteration results in a new db object being created , we grant permissions on the new <nl> + / / object to the user performing the request if : <nl> + / / * the user is not anonymous <nl> + / / * the configured IAuthorizer supports granting of permissions ( not all do , AllowAllAuthorizer doesn ' t and <nl> + / / custom external implementations may not ) <nl> + AuthenticatedUser user = state . getClientState ( ) . getUser ( ) ; <nl> + if ( user ! = null & & ! user . isAnonymous ( ) & & ce ! = null & & ce . change = = Event . SchemaChange . Change . CREATED ) <nl> + { <nl> + try <nl> + { <nl> + grantPermissionsToCreator ( state ) ; <nl> + } <nl> + catch ( UnsupportedOperationException e ) <nl> + { <nl> + / / not a problem , grant is an optional method on IAuthorizer <nl> + } <nl> + } <nl> + <nl> return ce = = null ? new ResultMessage . Void ( ) : new ResultMessage . SchemaChange ( ce ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 088daa7 . . b80c60f 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 1 . 1 . 7 <nl> + * reset getRangeSlice filter after finishing a row for get _ paged _ slice <nl> + ( CASSANDRA - 4919 ) <nl> * expunge row cache post - truncate ( CASSANDRA - 4940 ) <nl> * remove IAuthority2 ( CASSANDRA - 4875 ) <nl> * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 14466ee . . 453e2b2 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 845 , 6 + 845 , 9 @ @ public class StorageProxy implements StorageProxyMBean <nl> / / now scan until we have enough results <nl> try <nl> { <nl> + final SlicePredicate emptyPredicate = getEmptySlicePredicate ( ) ; <nl> + SlicePredicate commandPredicate = command . predicate ; <nl> + <nl> int columnsCount = 0 ; <nl> rows = new ArrayList < Row > ( ) ; <nl> List < AbstractBounds < RowPosition > > ranges = getRestrictedRanges ( command . range ) ; <nl> @ @ - 853 , 7 + 856 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> RangeSliceCommand nodeCmd = new RangeSliceCommand ( command . keyspace , <nl> command . column _ family , <nl> command . super _ column , <nl> - command . predicate , <nl> + commandPredicate , <nl> range , <nl> command . row _ filter , <nl> command . maxResults , <nl> @ @ - 923 , 6 + 926 , 11 @ @ public class StorageProxy implements StorageProxyMBean <nl> int count = nodeCmd . maxIsColumns ? columnsCount : rows . size ( ) ; <nl> if ( count > = nodeCmd . maxResults ) <nl> break ; <nl> + <nl> + / / if we are paging and already got some rows , reset the column filter predicate , <nl> + / / so we start iterating the next row from the first column <nl> + if ( ! rows . isEmpty ( ) & & command . isPaging ) <nl> + commandPredicate = emptyPredicate ; <nl> } <nl> } <nl> finally <nl> @ @ - 932 , 6 + 940 , 13 @ @ public class StorageProxy implements StorageProxyMBean <nl> return trim ( command , rows ) ; <nl> } <nl> <nl> + private static SlicePredicate getEmptySlicePredicate ( ) <nl> + { <nl> + final SliceRange emptySliceRange = <nl> + new SliceRange ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , false , - 1 ) ; <nl> + return new SlicePredicate ( ) . setSlice _ range ( emptySliceRange ) ; <nl> + } <nl> + <nl> private static List < Row > trim ( RangeSliceCommand command , List < Row > rows ) <nl> { <nl> / / When maxIsColumns , we let the caller trim the result .

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e1ae69b . . 70166c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 3 . 0 
 - * Add role based access control ( CASSANDRA - 7653 , 8650 ) 
 + * Add role based access control ( CASSANDRA - 7653 , 8650 , 7216 ) 
 * Avoid accessing partitioner through StorageProxy ( CASSANDRA - 8244 , 8268 ) 
 * Upgrade Metrics library and remove depricated metrics ( CASSANDRA - 5657 ) 
 * Serializing Row cache alternative , fully off heap ( CASSANDRA - 7438 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 801cea7 . . fc5b514 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 30 , 6 + 30 , 9 @ @ New features 
 subject of permissions . Users ( roles ) can now be granted permissions on other 
 roles , including CREATE , ALTER , DROP & AUTHORIZE , which removesthe need for 
 superuser privileges in order to perform user / role management operations . 
 + - Creators of database resources ( Keyspaces , Tables , Roles ) are now automatically 
 + granted all permissions on them ( if the IAuthorizer implementation supports 
 + this ) . 
 - SSTable file name is changed . Now you don ' t have Keyspace / CF name 
 in file name . Also , secondary index has its own directory under parent ' s 
 directory . 
 diff - - git a / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java b / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java 
 index 7a60a14 . . bc6fee4 100644 
 - - - a / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java 
 + + + b / src / java / org / apache / cassandra / auth / AllowAllAuthorizer . java 
 @ @ - 20 , 25 + 20 , 21 @ @ package org . apache . cassandra . auth ; 
 import java . util . Collections ; 
 import java . util . Set ; 
 
 - import org . apache . cassandra . exceptions . InvalidRequestException ; 
 - 
 public class AllowAllAuthorizer implements IAuthorizer 
 { 
 public Set < Permission > authorize ( AuthenticatedUser user , IResource resource ) 
 { 
 - return Permission . ALL ; 
 + return resource . applicablePermissions ( ) ; 
 } 
 
 public void grant ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource to ) 
 - throws InvalidRequestException 
 { 
 - throw new InvalidRequestException ( " GRANT operation is not supported by AllowAllAuthorizer " ) ; 
 + throw new UnsupportedOperationException ( " GRANT operation is not supported by AllowAllAuthorizer " ) ; 
 } 
 
 public void revoke ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource from ) 
 - throws InvalidRequestException 
 { 
 - throw new InvalidRequestException ( " REVOKE operation is not supported by AllowAllAuthorizer " ) ; 
 + throw new UnsupportedOperationException ( " REVOKE operation is not supported by AllowAllAuthorizer " ) ; 
 } 
 
 public void revokeAllFrom ( RoleResource droppedRole ) 
 @ @ - 50 , 9 + 46 , 8 @ @ public class AllowAllAuthorizer implements IAuthorizer 
 } 
 
 public Set < PermissionDetails > list ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource of ) 
 - throws InvalidRequestException 
 { 
 - throw new InvalidRequestException ( " LIST PERMISSIONS operation is not supported by AllowAllAuthorizer " ) ; 
 + throw new UnsupportedOperationException ( " LIST PERMISSIONS operation is not supported by AllowAllAuthorizer " ) ; 
 } 
 
 public Set < IResource > protectedResources ( ) 
 diff - - git a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java 
 index 25d2ed4 . . e4a065d 100644 
 - - - a / src / java / org / apache / cassandra / auth / AuthenticatedUser . java 
 + + + b / src / java / org / apache / cassandra / auth / AuthenticatedUser . java 
 @ @ - 27 , 8 + 27 , 6 @ @ import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 import com . google . common . util . concurrent . ListenableFuture ; 
 import com . google . common . util . concurrent . ListenableFutureTask ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . concurrent . ScheduledExecutors ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 @ @ - 43 , 7 + 41 , 8 @ @ import org . apache . cassandra . exceptions . RequestValidationException ; 
 * / 
 public class AuthenticatedUser 
 { 
 - private static final Logger logger = LoggerFactory . getLogger ( AuthenticatedUser . class ) ; 
 + public static final String SYSTEM _ USERNAME = " system " ; 
 + public static final AuthenticatedUser SYSTEM _ USER = new AuthenticatedUser ( SYSTEM _ USERNAME ) ; 
 
 public static final String ANONYMOUS _ USERNAME = " anonymous " ; 
 public static final AuthenticatedUser ANONYMOUS _ USER = new AuthenticatedUser ( ANONYMOUS _ USERNAME ) ; 
 @ @ - 106 , 6 + 105 , 16 @ @ public class AuthenticatedUser 
 } 
 
 / * * 
 + * Some internal operations are performed on behalf of Cassandra itself , in those cases 
 + * the system user should be used where an identity is required 
 + * see CreateRoleStatement # execute ( ) and overrides of SchemaAlteringStatement # grantPermissionsToCreator ( ) 
 + * / 
 + public boolean isSystem ( ) 
 + { 
 + return this = = SYSTEM _ USER ; 
 + } 
 + 
 + / * * 
 * Get the roles that have been granted to the user via the IRoleManager 
 * 
 * @ return a list of roles that have been granted to the user 
 diff - - git a / src / java / org / apache / cassandra / auth / IAuthorizer . java b / src / java / org / apache / cassandra / auth / IAuthorizer . java 
 index c3e98e2 . . 21b64dc 100644 
 - - - a / src / java / org / apache / cassandra / auth / IAuthorizer . java 
 + + + b / src / java / org / apache / cassandra / auth / IAuthorizer . java 
 @ @ - 45 , 6 + 45 , 8 @ @ public interface IAuthorizer 
 / * * 
 * Grants a set of permissions on a resource to a role . 
 * The opposite of revoke ( ) . 
 + * This method is optional and may be called internally , so implementations which do 
 + * not support it should be sure to throw UnsupportedOperationException . 
 * 
 * @ param performer User who grants the permissions . 
 * @ param permissions Set of permissions to grant . 
 @ @ - 53 , 6 + 55 , 7 @ @ public interface IAuthorizer 
 * 
 * @ throws RequestValidationException 
 * @ throws RequestExecutionException 
 + * @ throws java . lang . UnsupportedOperationException 
 * / 
 void grant ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource grantee ) 
 throws RequestValidationException , RequestExecutionException ; 
 @ @ - 60 , 6 + 63 , 8 @ @ public interface IAuthorizer 
 / * * 
 * Revokes a set of permissions on a resource from a user . 
 * The opposite of grant ( ) . 
 + * This method is optional and may be called internally , so implementations which do 
 + * not support it should be sure to throw UnsupportedOperationException . 
 * 
 * @ param performer User who revokes the permissions . 
 * @ param permissions Set of permissions to revoke . 
 @ @ - 68 , 12 + 73 , 15 @ @ public interface IAuthorizer 
 * 
 * @ throws RequestValidationException 
 * @ throws RequestExecutionException 
 + * @ throws java . lang . UnsupportedOperationException 
 * / 
 void revoke ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource revokee ) 
 throws RequestValidationException , RequestExecutionException ; 
 
 / * * 
 * Returns a list of permissions on a resource granted to a role . 
 + * This method is optional and may be called internally , so implementations which do 
 + * not support it should be sure to throw UnsupportedOperationException . 
 * 
 * @ param performer User who wants to see the permissions . 
 * @ param permissions Set of Permission values the user is interested in . The result should only include the 
 @ @ - 87 , 6 + 95 , 7 @ @ public interface IAuthorizer 
 * 
 * @ throws RequestValidationException 
 * @ throws RequestExecutionException 
 + * @ throws java . lang . UnsupportedOperationException 
 * / 
 Set < PermissionDetails > list ( AuthenticatedUser performer , Set < Permission > permissions , IResource resource , RoleResource grantee ) 
 throws RequestValidationException , RequestExecutionException ; 
 @ @ - 95 , 16 + 104 , 22 @ @ public interface IAuthorizer 
 * Called before deleting a role with DROP ROLE statement ( or the alias provided for compatibility , 
 * DROP USER ) so that a new role with the same name wouldn ' t inherit permissions of the deleted one in the future . 
 * This removes all permissions granted to the Role in question . 
 + * This method is optional and may be called internally , so implementations which do 
 + * not support it should be sure to throw UnsupportedOperationException . 
 * 
 * @ param revokee The role to revoke all permissions from . 
 + * @ throws java . lang . UnsupportedOperationException 
 * / 
 void revokeAllFrom ( RoleResource revokee ) ; 
 
 / * * 
 * This method is called after a resource is removed ( i . e . keyspace , table or role is dropped ) and revokes all 
 * permissions granted on the IResource in question . 
 + * This method is optional and may be called internally , so implementations which do 
 + * not support it should be sure to throw UnsupportedOperationException . 
 * 
 * @ param droppedResource The resource to revoke all permissions on . 
 + * @ throws java . lang . UnsupportedOperationException 
 * / 
 void revokeAllOn ( IResource droppedResource ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 index 8281cbd . . 2dc9c44 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateKeyspaceStatement . java 
 @ @ - 17 , 18 + 17 , 12 @ @ 
 * / 
 package org . apache . cassandra . cql3 . statements ; 
 
 - import org . apache . cassandra . exceptions . ConfigurationException ; 
 - import org . apache . cassandra . auth . Permission ; 
 + import org . apache . cassandra . auth . * ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . exceptions . AlreadyExistsException ; 
 - import org . apache . cassandra . exceptions . InvalidRequestException ; 
 - import org . apache . cassandra . exceptions . RequestValidationException ; 
 - import org . apache . cassandra . exceptions . UnauthorizedException ; 
 + import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 - import org . apache . cassandra . service . ClientState ; 
 - import org . apache . cassandra . service . MigrationManager ; 
 - import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . thrift . ThriftValidation ; 
 import org . apache . cassandra . transport . Event ; 
 
 @ @ - 116 , 4 + 110 , 20 @ @ public class CreateKeyspaceStatement extends SchemaAlteringStatement 
 { 
 return new Event . SchemaChange ( Event . SchemaChange . Change . CREATED , keyspace ( ) ) ; 
 } 
 + 
 + protected void grantPermissionsToCreator ( QueryState state ) 
 + { 
 + try 
 + { 
 + DataResource resource = DataResource . keyspace ( keyspace ( ) ) ; 
 + DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM _ USER , 
 + resource . applicablePermissions ( ) , 
 + resource , 
 + RoleResource . role ( state . getClientState ( ) . getUser ( ) . getName ( ) ) ) ; 
 + } 
 + catch ( RequestExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java 
 index 65d588b . . 347d20a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateRoleStatement . java 
 @ @ - 17 , 8 + 17 , 10 @ @ 
 * / 
 package org . apache . cassandra . cql3 . statements ; 
 
 - import org . apache . cassandra . auth . * ; 
 + import org . apache . cassandra . auth . AuthenticatedUser ; 
 import org . apache . cassandra . auth . IRoleManager . Option ; 
 + import org . apache . cassandra . auth . Permission ; 
 + import org . apache . cassandra . auth . RoleResource ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . cql3 . RoleName ; 
 import org . apache . cassandra . cql3 . RoleOptions ; 
 @ @ - 76 , 6 + 78 , 35 @ @ public class CreateRoleStatement extends AuthenticationStatement 
 return null ; 
 
 DatabaseDescriptor . getRoleManager ( ) . createRole ( state . getUser ( ) , role , opts . getOptions ( ) ) ; 
 + grantPermissionsToCreator ( state ) ; 
 return null ; 
 } 
 + 
 + / * * 
 + * Grant all applicable permissions on the newly created role to the user performing the request 
 + * see also : SchemaAlteringStatement # grantPermissionsToCreator and the overridden implementations 
 + * of it in subclasses CreateKeyspaceStatement & CreateTableStatement . 
 + * @ param state 
 + * / 
 + private void grantPermissionsToCreator ( ClientState state ) 
 + { 
 + / / The creator of a Role automatically gets ALTER / DROP / AUTHORIZE permissions on it if : 
 + / / * the user is not anonymous 
 + / / * the configured IAuthorizer supports granting of permissions ( not all do , AllowAllAuthorizer doesn ' t and 
 + / / custom external implementations may not ) 
 + if ( ! state . getUser ( ) . isAnonymous ( ) ) 
 + { 
 + try 
 + { 
 + DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM _ USER , 
 + role . applicablePermissions ( ) , 
 + role , 
 + RoleResource . role ( state . getUser ( ) . getName ( ) ) ) ; 
 + } 
 + catch ( UnsupportedOperationException e ) 
 + { 
 + / / not a problem , grant is an optional method on IAuthorizer 
 + } 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 index 4ec656b . . 3be20a6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / CreateTableStatement . java 
 @ @ - 20 , 23 + 20 , 23 @ @ package org . apache . cassandra . cql3 . statements ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 - import org . apache . cassandra . exceptions . * ; 
 - import org . apache . commons . lang3 . StringUtils ; 
 import com . google . common . collect . HashMultiset ; 
 import com . google . common . collect . Multiset ; 
 + import org . apache . commons . lang3 . StringUtils ; 
 
 - import org . apache . cassandra . auth . Permission ; 
 - import org . apache . cassandra . config . ColumnDefinition ; 
 - import org . apache . cassandra . config . CFMetaData ; 
 - import org . apache . cassandra . config . Schema ; 
 - import org . apache . cassandra . cql3 . * ; 
 - import org . apache . cassandra . db . composites . * ; 
 + import org . apache . cassandra . auth . * ; 
 + import org . apache . cassandra . config . * ; 
 + import org . apache . cassandra . cql3 . CFName ; 
 + import org . apache . cassandra . cql3 . CQL3Type ; 
 + import org . apache . cassandra . cql3 . ColumnIdentifier ; 
 import org . apache . cassandra . db . ColumnFamilyType ; 
 + import org . apache . cassandra . db . composites . * ; 
 import org . apache . cassandra . db . marshal . * ; 
 - import org . apache . cassandra . exceptions . AlreadyExistsException ; 
 + import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . io . compress . CompressionParameters ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . MigrationManager ; 
 + import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . transport . Event ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 @ @ - 119 , 6 + 119 , 22 @ @ public class CreateTableStatement extends SchemaAlteringStatement 
 return new Event . SchemaChange ( Event . SchemaChange . Change . CREATED , Event . SchemaChange . Target . TABLE , keyspace ( ) , columnFamily ( ) ) ; 
 } 
 
 + protected void grantPermissionsToCreator ( QueryState state ) 
 + { 
 + try 
 + { 
 + IResource resource = DataResource . table ( keyspace ( ) , columnFamily ( ) ) ; 
 + DatabaseDescriptor . getAuthorizer ( ) . grant ( AuthenticatedUser . SYSTEM _ USER , 
 + resource . applicablePermissions ( ) , 
 + resource , 
 + RoleResource . role ( state . getClientState ( ) . getUser ( ) . getName ( ) ) ) ; 
 + } 
 + catch ( RequestExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 / * * 
 * Returns a CFMetaData instance based on the parameters parsed from this 
 * < code > CREATE < / code > statement , or defaults where applicable . 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java b / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java 
 index 375d160 . . 58f8e9c 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / ListPermissionsStatement . java 
 @ @ - 102 , 7 + 102 , 14 @ @ public class ListPermissionsStatement extends AuthorizationStatement 
 private Set < PermissionDetails > list ( ClientState state , IResource resource ) 
 throws RequestValidationException , RequestExecutionException 
 { 
 - return DatabaseDescriptor . getAuthorizer ( ) . list ( state . getUser ( ) , permissions , resource , grantee ) ; 
 + try 
 + { 
 + return DatabaseDescriptor . getAuthorizer ( ) . list ( state . getUser ( ) , permissions , resource , grantee ) ; 
 + } 
 + catch ( UnsupportedOperationException e ) 
 + { 
 + throw new InvalidRequestException ( e . getMessage ( ) ) ; 
 + } 
 } 
 
 private ResultMessage resultMessage ( List < PermissionDetails > details ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 index b0d67ac . . a477df6 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 + + + b / src / java / org / apache / cassandra / cql3 / statements / SchemaAlteringStatement . java 
 @ @ - 17 , 10 + 17 , 12 @ @ 
 * / 
 package org . apache . cassandra . cql3 . statements ; 
 
 + import org . apache . cassandra . auth . AuthenticatedUser ; 
 import org . apache . cassandra . cql3 . CFName ; 
 import org . apache . cassandra . cql3 . CQLStatement ; 
 import org . apache . cassandra . cql3 . QueryOptions ; 
 - import org . apache . cassandra . exceptions . * ; 
 + import org . apache . cassandra . exceptions . InvalidRequestException ; 
 + import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . QueryState ; 
 import org . apache . cassandra . transport . Event ; 
 @ @ - 66 , 6 + 68 , 17 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL 
 public abstract Event . SchemaChange changeEvent ( ) ; 
 
 / * * 
 + * Schema alteration may result in a new database object ( keyspace , table , role , function ) being created capable of 
 + * having permissions GRANTed on it . The creator of the object ( the primary role assigned to the AuthenticatedUser 
 + * performing the operation ) is automatically granted ALL applicable permissions on the object . This is a hook for 
 + * subclasses to override in order to perform that grant when the statement is executed . 
 + * / 
 + protected void grantPermissionsToCreator ( QueryState state ) 
 + { 
 + / / no - op by default 
 + } 
 + 
 + / * * 
 * Announces the migration to other nodes in the cluster . 
 * @ return true if the execution of this statement resulted in a schema change , false otherwise ( when IF NOT EXISTS 
 * is used , for example ) 
 @ @ - 82 , 6 + 95 , 25 @ @ public abstract class SchemaAlteringStatement extends CFStatement implements CQL 
 return new ResultMessage . Void ( ) ; 
 
 Event . SchemaChange ce = changeEvent ( ) ; 
 + 
 + / / when a schema alteration results in a new db object being created , we grant permissions on the new 
 + / / object to the user performing the request if : 
 + / / * the user is not anonymous 
 + / / * the configured IAuthorizer supports granting of permissions ( not all do , AllowAllAuthorizer doesn ' t and 
 + / / custom external implementations may not ) 
 + AuthenticatedUser user = state . getClientState ( ) . getUser ( ) ; 
 + if ( user ! = null & & ! user . isAnonymous ( ) & & ce ! = null & & ce . change = = Event . SchemaChange . Change . CREATED ) 
 + { 
 + try 
 + { 
 + grantPermissionsToCreator ( state ) ; 
 + } 
 + catch ( UnsupportedOperationException e ) 
 + { 
 + / / not a problem , grant is an optional method on IAuthorizer 
 + } 
 + } 
 + 
 return ce = = null ? new ResultMessage . Void ( ) : new ResultMessage . SchemaChange ( ce ) ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 088daa7 . . b80c60f 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 1 . 1 . 7 
 + * reset getRangeSlice filter after finishing a row for get _ paged _ slice 
 + ( CASSANDRA - 4919 ) 
 * expunge row cache post - truncate ( CASSANDRA - 4940 ) 
 * remove IAuthority2 ( CASSANDRA - 4875 ) 
 * add get [ Row | Key ] CacheEntries to CacheServiceMBean ( CASSANDRA - 4859 ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 14466ee . . 453e2b2 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 845 , 6 + 845 , 9 @ @ public class StorageProxy implements StorageProxyMBean 
 / / now scan until we have enough results 
 try 
 { 
 + final SlicePredicate emptyPredicate = getEmptySlicePredicate ( ) ; 
 + SlicePredicate commandPredicate = command . predicate ; 
 + 
 int columnsCount = 0 ; 
 rows = new ArrayList < Row > ( ) ; 
 List < AbstractBounds < RowPosition > > ranges = getRestrictedRanges ( command . range ) ; 
 @ @ - 853 , 7 + 856 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 RangeSliceCommand nodeCmd = new RangeSliceCommand ( command . keyspace , 
 command . column _ family , 
 command . super _ column , 
 - command . predicate , 
 + commandPredicate , 
 range , 
 command . row _ filter , 
 command . maxResults , 
 @ @ - 923 , 6 + 926 , 11 @ @ public class StorageProxy implements StorageProxyMBean 
 int count = nodeCmd . maxIsColumns ? columnsCount : rows . size ( ) ; 
 if ( count > = nodeCmd . maxResults ) 
 break ; 
 + 
 + / / if we are paging and already got some rows , reset the column filter predicate , 
 + / / so we start iterating the next row from the first column 
 + if ( ! rows . isEmpty ( ) & & command . isPaging ) 
 + commandPredicate = emptyPredicate ; 
 } 
 } 
 finally 
 @ @ - 932 , 6 + 940 , 13 @ @ public class StorageProxy implements StorageProxyMBean 
 return trim ( command , rows ) ; 
 } 
 
 + private static SlicePredicate getEmptySlicePredicate ( ) 
 + { 
 + final SliceRange emptySliceRange = 
 + new SliceRange ( ByteBufferUtil . EMPTY _ BYTE _ BUFFER , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , false , - 1 ) ; 
 + return new SlicePredicate ( ) . setSlice _ range ( emptySliceRange ) ; 
 + } 
 + 
 private static List < Row > trim ( RangeSliceCommand command , List < Row > rows ) 
 { 
 / / When maxIsColumns , we let the caller trim the result .
