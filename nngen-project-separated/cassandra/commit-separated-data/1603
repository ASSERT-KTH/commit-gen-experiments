BLEU SCORE: 0.13134549472120793

TEST MSG: Add ability to stop compaction by ID
GENERATED MSG: New command to stop running compactions

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 5642cd4 . . 1912372 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> 3 . 0 : <nl> * Decommissioned nodes will not rejoin the cluster ( CASSANDRA - 8801 ) <nl> * Change gossip stabilization to use endpoit size ( CASSANDRA - 9401 ) <nl> + * Add ability to stop compaction by ID ( CASSANDRA - 7207 ) <nl> <nl> 2 . 2 <nl> * Ensure that UDF and UDAs are keyspace - isolated ( CASSANDRA - 9409 ) <nl> diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 7a9c3da . . b381224 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import org . apache . cassandra . io . util . * ; <nl> import org . apache . cassandra . service . CacheService ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . Pair ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K , V > <nl> { <nl> @ @ - 210 , 7 + 211 , 8 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K <nl> type , <nl> 0 , <nl> keysEstimate , <nl> - " keys " ) ; <nl> + " keys " , <nl> + UUIDGen . getTimeUUID ( ) ) ; <nl> } <nl> <nl> public CacheService . CacheType cacheType ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> index 5ac2c8b . . 9fe8fd9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ <nl> package org . apache . cassandra . db . compaction ; <nl> <nl> import java . util . List ; <nl> + import java . util . UUID ; <nl> import java . util . concurrent . atomic . AtomicLong ; <nl> <nl> import org . apache . cassandra . io . sstable . ISSTableScanner ; <nl> @ @ - 30 , 6 + 31 , 7 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i <nl> protected final long totalBytes ; <nl> protected volatile long bytesRead ; <nl> protected final List < ISSTableScanner > scanners ; <nl> + protected final UUID compactionId ; <nl> / * <nl> * counters for merged rows . <nl> * array index represents ( number of merged rows - 1 ) , so index 0 is counter for no merge ( 1 row ) , <nl> @ @ - 37 , 12 + 39 , 13 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i <nl> * / <nl> protected final AtomicLong [ ] mergeCounters ; <nl> <nl> - public AbstractCompactionIterable ( CompactionController controller , OperationType type , List < ISSTableScanner > scanners ) <nl> + public AbstractCompactionIterable ( CompactionController controller , OperationType type , List < ISSTableScanner > scanners , UUID compactionId ) <nl> { <nl> this . controller = controller ; <nl> this . type = type ; <nl> this . scanners = scanners ; <nl> this . bytesRead = 0 ; <nl> + this . compactionId = compactionId ; <nl> <nl> long bytes = 0 ; <nl> for ( ISSTableScanner scanner : scanners ) <nl> @ @ - 58 , 7 + 61 , 8 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i <nl> return new CompactionInfo ( controller . cfs . metadata , <nl> type , <nl> bytesRead , <nl> - totalBytes ) ; <nl> + totalBytes , <nl> + compactionId ) ; <nl> } <nl> <nl> protected void updateCounterFor ( int rows ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> index 3ee3a68 . . ff8c022 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> @ @ - 35 , 30 + 35 , 32 @ @ public final class CompactionInfo implements Serializable <nl> private final long completed ; <nl> private final long total ; <nl> private final String unit ; <nl> + private final UUID compactionId ; <nl> <nl> - public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long bytesComplete , long totalBytes ) <nl> + public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long bytesComplete , long totalBytes , UUID compactionId ) <nl> { <nl> - this ( cfm , tasktype , bytesComplete , totalBytes , " bytes " ) ; <nl> + this ( cfm , tasktype , bytesComplete , totalBytes , " bytes " , compactionId ) ; <nl> } <nl> <nl> - public CompactionInfo ( OperationType tasktype , long completed , long total , String unit ) <nl> + public CompactionInfo ( OperationType tasktype , long completed , long total , String unit , UUID compactionId ) <nl> { <nl> - this ( null , tasktype , completed , total , unit ) ; <nl> + this ( null , tasktype , completed , total , unit , compactionId ) ; <nl> } <nl> <nl> - public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long completed , long total , String unit ) <nl> + public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long completed , long total , String unit , UUID compactionId ) <nl> { <nl> this . tasktype = tasktype ; <nl> this . completed = completed ; <nl> this . total = total ; <nl> this . cfm = cfm ; <nl> this . unit = unit ; <nl> + this . compactionId = compactionId ; <nl> } <nl> <nl> / * * @ return A copy of this CompactionInfo with updated progress . * / <nl> public CompactionInfo forProgress ( long complete , long total ) <nl> { <nl> - return new CompactionInfo ( cfm , tasktype , complete , total , unit ) ; <nl> + return new CompactionInfo ( cfm , tasktype , complete , total , unit , compactionId ) ; <nl> } <nl> <nl> public UUID getId ( ) <nl> @ @ - 96 , 6 + 98 , 11 @ @ public final class CompactionInfo implements Serializable <nl> return tasktype ; <nl> } <nl> <nl> + public UUID compactionId ( ) <nl> + { <nl> + return compactionId ; <nl> + } <nl> + <nl> public String toString ( ) <nl> { <nl> StringBuilder buff = new StringBuilder ( ) ; <nl> @ @ - 115 , 6 + 122 , 7 @ @ public final class CompactionInfo implements Serializable <nl> ret . put ( " total " , Long . toString ( total ) ) ; <nl> ret . put ( " taskType " , tasktype . toString ( ) ) ; <nl> ret . put ( " unit " , unit ) ; <nl> + ret . put ( " compactionId " , compactionId = = null ? " " : compactionId . toString ( ) ) ; <nl> return ret ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java <nl> index cd08b81 . . 23d8a4a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; <nl> import java . util . ArrayList ; <nl> import java . util . Comparator ; <nl> import java . util . List ; <nl> + import java . util . UUID ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> @ @ - 41 , 9 + 42 , 13 @ @ public class CompactionIterable extends AbstractCompactionIterable <nl> } <nl> } ; <nl> <nl> - public CompactionIterable ( OperationType type , List < ISSTableScanner > scanners , CompactionController controller , SSTableFormat . Type formatType ) <nl> + public CompactionIterable ( OperationType type , <nl> + List < ISSTableScanner > scanners , <nl> + CompactionController controller , <nl> + SSTableFormat . Type formatType , <nl> + UUID compactionId ) <nl> { <nl> - super ( controller , type , scanners ) ; <nl> + super ( controller , type , scanners , compactionId ) ; <nl> this . format = formatType . info ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index cda6915 . . d79b835 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . UUID ; <nl> import java . util . concurrent . BlockingQueue ; <nl> import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> @ @ - 77 , 6 + 78 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . MerkleTree ; <nl> import org . apache . cassandra . utils . WrappedRunnable ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . cassandra . utils . concurrent . OpOrder ; <nl> import org . apache . cassandra . utils . concurrent . Refs ; <nl> <nl> @ @ - 1184 , 7 + 1186 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> repairedSSTableWriter . switchWriter ( CompactionManager . createWriterForAntiCompaction ( cfs , destination , expectedBloomFilterSize , repairedAt , sstableAsSet ) ) ; <nl> unRepairedSSTableWriter . switchWriter ( CompactionManager . createWriterForAntiCompaction ( cfs , destination , expectedBloomFilterSize , ActiveRepairService . UNREPAIRED _ SSTABLE , sstableAsSet ) ) ; <nl> <nl> - CompactionIterable ci = new CompactionIterable ( OperationType . ANTICOMPACTION , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) ) ; <nl> + CompactionIterable ci = new CompactionIterable ( OperationType . ANTICOMPACTION , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) , UUIDGen . getTimeUUID ( ) ) ; <nl> Iterator < AbstractCompactedRow > iter = ci . iterator ( ) ; <nl> metrics . beginCompaction ( ci ) ; <nl> try <nl> @ @ - 1309 , 7 + 1311 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> public ValidationCompactionIterable ( ColumnFamilyStore cfs , List < ISSTableScanner > scanners , int gcBefore ) <nl> { <nl> - super ( OperationType . VALIDATION , scanners , new ValidationCompactionController ( cfs , gcBefore ) , DatabaseDescriptor . getSSTableFormat ( ) ) ; <nl> + super ( OperationType . VALIDATION , scanners , new ValidationCompactionController ( cfs , gcBefore ) , DatabaseDescriptor . getSSTableFormat ( ) , UUIDGen . getTimeUUID ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 1477 , 11 + 1479 , 13 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> private final SSTableReader sstable ; <nl> private final ISSTableScanner scanner ; <nl> + private final UUID cleanupCompactionId ; <nl> <nl> public CleanupInfo ( SSTableReader sstable , ISSTableScanner scanner ) <nl> { <nl> this . sstable = sstable ; <nl> this . scanner = scanner ; <nl> + cleanupCompactionId = UUIDGen . getTimeUUID ( ) ; <nl> } <nl> <nl> public CompactionInfo getCompactionInfo ( ) <nl> @ @ - 1491 , 7 + 1495 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> return new CompactionInfo ( sstable . metadata , <nl> OperationType . CLEANUP , <nl> scanner . getCurrentPosition ( ) , <nl> - scanner . getLengthInBytes ( ) ) ; <nl> + scanner . getLengthInBytes ( ) , <nl> + cleanupCompactionId ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 1510 , 6 + 1515 , 16 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> <nl> + public void stopCompactionById ( String compactionId ) <nl> + { <nl> + for ( Holder holder : CompactionMetrics . getCompactions ( ) ) <nl> + { <nl> + UUID holderId = holder . getCompactionInfo ( ) . compactionId ( ) ; <nl> + if ( holderId ! = null & & holderId . equals ( UUID . fromString ( compactionId ) ) ) <nl> + holder . stop ( ) ; <nl> + } <nl> + } <nl> + <nl> public int getCoreCompactorThreads ( ) <nl> { <nl> return executor . getCorePoolSize ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> index 9c36192 . . 8e200a1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . compaction ; <nl> <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . UUID ; <nl> import javax . management . openmbean . TabularData ; <nl> <nl> public interface CompactionManagerMBean <nl> @ @ - 55 , 6 + 56 , 13 @ @ public interface CompactionManagerMBean <nl> public void stopCompaction ( String type ) ; <nl> <nl> / * * <nl> + * Stop an individual running compaction using the compactionId . <nl> + * @ param compactionId Compaction ID of compaction to stop . Such IDs can be found in <nl> + * the compactions _ in _ progress table of the system keyspace . <nl> + * / <nl> + public void stopCompactionById ( String compactionId ) ; <nl> + <nl> + / * * <nl> * Returns core size of compaction thread pool <nl> * / <nl> public int getCoreCompactorThreads ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index c397d9a . . 34f57c1 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 162 , 7 + 162 , 7 @ @ public class CompactionTask extends AbstractCompactionTask <nl> / / See CASSANDRA - 8019 and CASSANDRA - 8399 <nl> try ( AbstractCompactionStrategy . ScannerList scanners = strategy . getScanners ( actuallyCompact ) ) <nl> { <nl> - ci = new CompactionIterable ( compactionType , scanners . scanners , controller , sstableFormat ) ; <nl> + ci = new CompactionIterable ( compactionType , scanners . scanners , controller , sstableFormat , taskId ) ; <nl> Iterator < AbstractCompactedRow > iter = ci . iterator ( ) ; <nl> if ( collector ! = null ) <nl> collector . beginCompaction ( ci ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> index 310d58a . . 1e014ed 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . service . ActiveRepairService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . OutputHandler ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> public class Scrubber implements Closeable <nl> { <nl> @ @ - 419 , 11 + 420 , 13 @ @ public class Scrubber implements Closeable <nl> { <nl> private final RandomAccessReader dataFile ; <nl> private final SSTableReader sstable ; <nl> + private final UUID scrubCompactionId ; <nl> <nl> public ScrubInfo ( RandomAccessReader dataFile , SSTableReader sstable ) <nl> { <nl> this . dataFile = dataFile ; <nl> this . sstable = sstable ; <nl> + scrubCompactionId = UUIDGen . getTimeUUID ( ) ; <nl> } <nl> <nl> public CompactionInfo getCompactionInfo ( ) <nl> @ @ - 433 , 7 + 436 , 8 @ @ public class Scrubber implements Closeable <nl> return new CompactionInfo ( sstable . metadata , <nl> OperationType . SCRUB , <nl> dataFile . getFilePointer ( ) , <nl> - dataFile . length ( ) ) ; <nl> + dataFile . length ( ) , <nl> + scrubCompactionId ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> index 30584fd . . 5bb1530 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . format . SSTableWriter ; <nl> import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; <nl> import org . apache . cassandra . utils . OutputHandler ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> public class Upgrader <nl> { <nl> @ @ - 85 , 7 + 86 , 7 @ @ public class Upgrader <nl> try ( SSTableRewriter writer = new SSTableRewriter ( cfs , toUpgrade , CompactionTask . getMaxDataAge ( toUpgrade ) , true ) ; <nl> AbstractCompactionStrategy . ScannerList scanners = strategy . getScanners ( toUpgrade ) ) <nl> { <nl> - Iterator < AbstractCompactedRow > iter = new CompactionIterable ( compactionType , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) ) . iterator ( ) ; <nl> + Iterator < AbstractCompactedRow > iter = new CompactionIterable ( compactionType , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) , UUIDGen . getTimeUUID ( ) ) . iterator ( ) ; <nl> writer . switchWriter ( createCompactionWriter ( sstable . getSSTableMetadata ( ) . repairedAt ) ) ; <nl> while ( iter . hasNext ( ) ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / Verifier . java b / src / java / org / apache / cassandra / db / compaction / Verifier . java <nl> index 1d37c6f . . 0177819 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / Verifier . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / Verifier . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . service . ActiveRepairService ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> import org . apache . cassandra . utils . OutputHandler ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> import java . io . Closeable ; <nl> import java . io . File ; <nl> @ @ - 241 , 11 + 242 , 13 @ @ public class Verifier implements Closeable <nl> { <nl> private final RandomAccessReader dataFile ; <nl> private final SSTableReader sstable ; <nl> + private final UUID verificationCompactionId ; <nl> <nl> public VerifyInfo ( RandomAccessReader dataFile , SSTableReader sstable ) <nl> { <nl> this . dataFile = dataFile ; <nl> this . sstable = sstable ; <nl> + verificationCompactionId = UUIDGen . getTimeUUID ( ) ; <nl> } <nl> <nl> public CompactionInfo getCompactionInfo ( ) <nl> @ @ - 255 , 7 + 258 , 8 @ @ public class Verifier implements Closeable <nl> return new CompactionInfo ( sstable . metadata , <nl> OperationType . VERIFY , <nl> dataFile . getFilePointer ( ) , <nl> - dataFile . length ( ) ) ; <nl> + dataFile . length ( ) , <nl> + verificationCompactionId ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> index eb09e43 . . 916c286 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . index ; <nl> <nl> import java . io . IOException ; <nl> import java . util . Set ; <nl> + import java . util . UUID ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> @ @ - 27 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionInfo ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . db . compaction . CompactionInterruptedException ; <nl> import org . apache . cassandra . io . sstable . ReducingKeyIterator ; <nl> + import org . apache . cassandra . utils . UUIDGen ; <nl> <nl> / * * <nl> * Manages building an entire index from column family data . Runs on to compaction manager . <nl> @ @ - 36 , 12 + 38 , 14 @ @ public class SecondaryIndexBuilder extends CompactionInfo . Holder <nl> private final ColumnFamilyStore cfs ; <nl> private final Set < String > idxNames ; <nl> private final ReducingKeyIterator iter ; <nl> + private final UUID compactionId ; <nl> <nl> public SecondaryIndexBuilder ( ColumnFamilyStore cfs , Set < String > idxNames , ReducingKeyIterator iter ) <nl> { <nl> this . cfs = cfs ; <nl> this . idxNames = idxNames ; <nl> this . iter = iter ; <nl> + compactionId = UUIDGen . getTimeUUID ( ) ; <nl> } <nl> <nl> public CompactionInfo getCompactionInfo ( ) <nl> @ @ - 49 , 7 + 53 , 8 @ @ public class SecondaryIndexBuilder extends CompactionInfo . Holder <nl> return new CompactionInfo ( cfs . metadata , <nl> OperationType . INDEX _ BUILD , <nl> iter . getBytesRead ( ) , <nl> - iter . getTotalBytes ( ) ) ; <nl> + iter . getTotalBytes ( ) , <nl> + compactionId ) ; <nl> } <nl> <nl> public void build ( ) <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 1341c68 . . f10a4b6 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 957 , 6 + 957 , 11 @ @ public class NodeProbe implements AutoCloseable <nl> compactionProxy . stopCompaction ( string ) ; <nl> } <nl> <nl> + public void stopById ( String compactionId ) <nl> + { <nl> + compactionProxy . stopCompactionById ( compactionId ) ; <nl> + } <nl> + <nl> public void setStreamThroughput ( int value ) <nl> { <nl> ssProxy . setStreamThroughputMbPerSec ( value ) ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java <nl> index 154ef49 . . e57d2ee 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java <nl> @ @ - 52 , 9 + 52 , 9 @ @ public class CompactionStats extends NodeToolCmd <nl> { <nl> int compactionThroughput = probe . getCompactionThroughput ( ) ; <nl> List < String [ ] > lines = new ArrayList < > ( ) ; <nl> - int [ ] columnSizes = new int [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; <nl> + int [ ] columnSizes = new int [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; <nl> <nl> - addLine ( lines , columnSizes , " compaction type " , " keyspace " , " table " , " completed " , " total " , " unit " , " progress " ) ; <nl> + addLine ( lines , columnSizes , " id " , " compaction type " , " keyspace " , " table " , " completed " , " total " , " unit " , " progress " ) ; <nl> for ( Map < String , String > c : compactions ) <nl> { <nl> long total = Long . parseLong ( c . get ( " total " ) ) ; <nl> @ @ - 66 , 7 + 66 , 8 @ @ public class CompactionStats extends NodeToolCmd <nl> String totalStr = humanReadable ? FileUtils . stringifyFileSize ( total ) : Long . toString ( total ) ; <nl> String unit = c . get ( " unit " ) ; <nl> String percentComplete = total = = 0 ? " n / a " : new DecimalFormat ( " 0 . 00 " ) . format ( ( double ) completed / total * 100 ) + " % " ; <nl> - addLine ( lines , columnSizes , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; <nl> + String id = c . get ( " compactionId " ) ; <nl> + addLine ( lines , columnSizes , id , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; <nl> if ( taskType . equals ( OperationType . COMPACTION . toString ( ) ) ) <nl> remainingBytes + = total - completed ; <nl> } <nl> @ @ - 82 , 7 + 83 , 7 @ @ public class CompactionStats extends NodeToolCmd <nl> <nl> for ( String [ ] line : lines ) <nl> { <nl> - System . out . printf ( format , line [ 0 ] , line [ 1 ] , line [ 2 ] , line [ 3 ] , line [ 4 ] , line [ 5 ] , line [ 6 ] ) ; <nl> + System . out . printf ( format , line [ 0 ] , line [ 1 ] , line [ 2 ] , line [ 3 ] , line [ 4 ] , line [ 5 ] , line [ 6 ] , line [ 7 ] ) ; <nl> } <nl> <nl> String remainingTime = " n / a " ; <nl> diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Stop . java b / src / java / org / apache / cassandra / tools / nodetool / Stop . java <nl> index b3bb2b8 . . ad1fc27 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / nodetool / Stop . java <nl> + + + b / src / java / org / apache / cassandra / tools / nodetool / Stop . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . tools . nodetool ; <nl> <nl> import io . airlift . command . Arguments ; <nl> import io . airlift . command . Command ; <nl> + import io . airlift . command . Option ; <nl> <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> import org . apache . cassandra . tools . NodeProbe ; <nl> @ @ - 27 , 12 + 28 , 24 @ @ import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; <nl> @ Command ( name = " stop " , description = " Stop compaction " ) <nl> public class Stop extends NodeToolCmd <nl> { <nl> - @ Arguments ( title = " compaction _ type " , usage = " < compaction type > " , description = " Supported types are COMPACTION , VALIDATION , CLEANUP , SCRUB , VERIFY , INDEX _ BUILD " , required = true ) <nl> + @ Arguments ( title = " compaction _ type " , <nl> + usage = " < compaction type > " , <nl> + description = " Supported types are COMPACTION , VALIDATION , CLEANUP , SCRUB , VERIFY , INDEX _ BUILD " , <nl> + required = false ) <nl> private OperationType compactionType = OperationType . UNKNOWN ; <nl> <nl> + @ Option ( title = " compactionId " , <nl> + name = { " - id " , " - - compaction - id " } , <nl> + description = " Use - id to stop a compaction by the specified id . Ids can be found in the system . compactions _ in _ progress table . " , <nl> + required = false ) <nl> + private String compactionId = " " ; <nl> + <nl> @ Override <nl> public void execute ( NodeProbe probe ) <nl> { <nl> - probe . stop ( compactionType . name ( ) ) ; <nl> + if ( ! compactionId . isEmpty ( ) ) <nl> + probe . stopById ( compactionId ) ; <nl> + else <nl> + probe . stop ( compactionType . name ( ) ) ; <nl> } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 35c75bf . . 5550f95 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 11 , 6 + 11 , 10 @ @ <nl> * Use faster bytes comparison ( CASSANDRA - 3434 ) <nl> <nl> <nl> + 1 . 0 . 5 <nl> + * add command to stop compactions ( CASSANDRA - 1740 ) <nl> + <nl> + <nl> 1 . 0 . 4 <nl> * fix self - hinting of timed out read repair updates and make hinted handoff <nl> less prone to OOMing a coordinator ( CASSANDRA - 3440 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index e44c6a6 . . 9f6762d 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 29 , 6 + 29 , 17 @ @ Upgrading <nl> want to use such large batches . <nl> <nl> <nl> + 1 . 0 . 5 <nl> + = = = = = <nl> + <nl> + JMX <nl> + - - - <nl> + - A command has been added to stop running compaction . It is available <nl> + through JMX and through nodetool stop < type > ( see the nodetool help for <nl> + details ) . Please note that stopped compaction are terminated and cannot <nl> + be restarted afterwards . <nl> + <nl> + <nl> 1 . 0 . 4 <nl> = = = = = <nl> <nl> diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> index 38b7778 . . 1006331 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . compaction . CompactionInfo ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> + import org . apache . cassandra . db . compaction . UserInterruptedException ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> import org . apache . cassandra . io . util . SequentialWriter ; <nl> import org . apache . cassandra . service . StorageService ; <nl> @ @ - 190 , 7 + 191 , 7 @ @ public abstract class AutoSavingCache < K , V > extends InstrumentingCache < K , V > <nl> } <nl> } <nl> <nl> - public class Writer implements CompactionInfo . Holder <nl> + public class Writer extends CompactionInfo . Holder <nl> { <nl> private final Set < K > keys ; <nl> private final CompactionInfo info ; <nl> @ @ - 247 , 27 + 248 , 30 @ @ public abstract class AutoSavingCache < K , V > extends InstrumentingCache < K , V > <nl> <nl> logger . debug ( " Saving { } " , path ) ; <nl> File tmpFile = File . createTempFile ( path . getName ( ) , null , path . getParentFile ( ) ) ; <nl> - <nl> DataOutputStream out = SequentialWriter . open ( tmpFile , true ) . stream ; <nl> try <nl> { <nl> for ( K key : keys ) <nl> { <nl> + if ( isStopped ( ) ) <nl> + throw new UserInterruptedException ( getCompactionInfo ( ) ) ; <nl> ByteBuffer bytes = translateKey ( key ) ; <nl> ByteBufferUtil . writeWithLength ( bytes , out ) ; <nl> bytesWritten + = bytes . remaining ( ) ; <nl> } <nl> + out . flush ( ) ; <nl> + path . delete ( ) ; / / ignore error if it didn ' t exist <nl> + if ( ! tmpFile . renameTo ( path ) ) <nl> + throw new IOException ( " Unable to rename " + tmpFile + " to " + path ) ; <nl> + logger . info ( String . format ( " Saved % s ( % d items ) in % d ms " , <nl> + path . getName ( ) , keys . size ( ) , ( System . currentTimeMillis ( ) - start ) ) ) ; <nl> } <nl> finally <nl> { <nl> - out . close ( ) ; <nl> + FileUtils . closeQuietly ( out ) ; <nl> + if ( tmpFile . exists ( ) ) <nl> + tmpFile . delete ( ) ; <nl> } <nl> - <nl> - path . delete ( ) ; / / ignore error if it didn ' t exist <nl> - if ( ! tmpFile . renameTo ( path ) ) <nl> - throw new IOException ( " Unable to rename " + tmpFile + " to " + path ) ; <nl> - logger . info ( String . format ( " Saved % s ( % d items ) in % d ms " , <nl> - path . getName ( ) , keys . size ( ) , ( System . currentTimeMillis ( ) - start ) ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> index 7a344d8 . . bbf10c0 100644 <nl> - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . concurrent ; <nl> <nl> import java . util . concurrent . * ; <nl> <nl> + import org . apache . cassandra . db . compaction . UserInterruptedException ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 137 , 10 + 138 , 13 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor <nl> } <nl> catch ( ExecutionException e ) <nl> { <nl> - if ( Thread . getDefaultUncaughtExceptionHandler ( ) = = null ) <nl> - logger . error ( " Error in ThreadPoolExecutor " , e . getCause ( ) ) ; <nl> + Throwable actualException = e . getCause ( ) ; <nl> + if ( actualException instanceof UserInterruptedException ) <nl> + logger . info ( " Task interrupted by user : " + actualException ) ; <nl> + else if ( Thread . getDefaultUncaughtExceptionHandler ( ) = = null ) <nl> + logger . error ( " Error in ThreadPoolExecutor " , actualException ) ; <nl> else <nl> - Thread . getDefaultUncaughtExceptionHandler ( ) . uncaughtException ( Thread . currentThread ( ) , e . getCause ( ) ) ; <nl> + Thread . getDefaultUncaughtExceptionHandler ( ) . uncaughtException ( Thread . currentThread ( ) , actualException ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> index 53b1ba9 . . 21a3a2c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java <nl> @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . CloseableIterator ; <nl> import org . apache . cassandra . utils . Throttle ; <nl> <nl> - public abstract class AbstractCompactionIterable implements Iterable < AbstractCompactedRow > , CompactionInfo . Holder <nl> + public abstract class AbstractCompactionIterable extends CompactionInfo . Holder implements Iterable < AbstractCompactedRow > <nl> { <nl> private static Logger logger = LoggerFactory . getLogger ( AbstractCompactionIterable . class ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> index 890d31d . . 40244c0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import java . io . Serializable ; <nl> public final class CompactionInfo implements Serializable <nl> { <nl> private static final long serialVersionUID = 3695381572726744816L ; <nl> - <nl> private final int id ; <nl> private final String ksname ; <nl> private final String cfname ; <nl> @ @ - 87 , 8 + 86 , 19 @ @ public final class CompactionInfo implements Serializable <nl> return buff . append ( ' ) ' ) . toString ( ) ; <nl> } <nl> <nl> - public interface Holder <nl> + public static abstract class Holder <nl> { <nl> - public CompactionInfo getCompactionInfo ( ) ; <nl> + private volatile boolean isStopped = false ; <nl> + public abstract CompactionInfo getCompactionInfo ( ) ; <nl> + <nl> + public void stop ( ) <nl> + { <nl> + isStopped = true ; <nl> + } <nl> + <nl> + public boolean isStopped ( ) <nl> + { <nl> + return isStopped ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index b172e91 . . c9d8fcb 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . compaction . CompactionInfo . Holder ; <nl> import org . apache . cassandra . db . index . SecondaryIndexBuilder ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> @ @ - 485 , 6 + 486 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> while ( ! dataFile . isEOF ( ) ) <nl> { <nl> + if ( scrubInfo . isStopped ( ) ) <nl> + throw new UserInterruptedException ( scrubInfo . getCompactionInfo ( ) ) ; <nl> long rowStart = dataFile . getFilePointer ( ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Reading row at " + rowStart ) ; <nl> @ @ - 687 , 6 + 690 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> while ( scanner . hasNext ( ) ) <nl> { <nl> + if ( ci . isStopped ( ) ) <nl> + throw new UserInterruptedException ( ci . getCompactionInfo ( ) ) ; <nl> SSTableIdentityIterator row = ( SSTableIdentityIterator ) scanner . next ( ) ; <nl> if ( Range . isTokenInRanges ( row . getKey ( ) . token , ranges ) ) <nl> { <nl> @ @ - 812 , 6 + 817 , 8 @ @ public class CompactionManager implements CompactionManagerMBean <nl> validator . prepare ( cfs ) ; <nl> while ( nni . hasNext ( ) ) <nl> { <nl> + if ( ci . isStopped ( ) ) <nl> + throw new UserInterruptedException ( ci . getCompactionInfo ( ) ) ; <nl> AbstractCompactedRow row = nni . next ( ) ; <nl> validator . add ( row ) ; <nl> } <nl> @ @ - 1079 , 7 + 1086 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> <nl> - private static class CleanupInfo implements CompactionInfo . Holder <nl> + private static class CleanupInfo extends CompactionInfo . Holder <nl> { <nl> private final SSTableReader sstable ; <nl> private final SSTableScanner scanner ; <nl> @ @ - 1107 , 7 + 1114 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> <nl> - private static class ScrubInfo implements CompactionInfo . Holder <nl> + private static class ScrubInfo extends CompactionInfo . Holder <nl> { <nl> private final RandomAccessReader dataFile ; <nl> private final SSTableReader sstable ; <nl> @ @ - 1134 , 4 + 1141 , 14 @ @ public class CompactionManager implements CompactionManagerMBean <nl> } <nl> } <nl> } <nl> + <nl> + public void stopCompaction ( String type ) <nl> + { <nl> + OperationType operation = OperationType . valueOf ( type ) ; <nl> + for ( Holder holder : CompactionExecutor . getCompactions ( ) ) <nl> + { <nl> + if ( holder . getCompactionInfo ( ) . getTaskType ( ) = = operation ) <nl> + holder . stop ( ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> index eefe46e . . e67957d 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java <nl> @ @ - 45 , 4 + 45 , 17 @ @ public interface CompactionManagerMBean <nl> * @ param dataFiles a comma separated list of sstable filename to compact <nl> * / <nl> public void forceUserDefinedCompaction ( String ksname , String dataFiles ) ; <nl> + <nl> + / * * <nl> + * Stop all running compaction - like tasks having the provided { @ code type } . <nl> + * @ param type the type of compaction to stop . Can be one of : <nl> + * - COMPACTION <nl> + * - VALIDATION <nl> + * - KEY _ CACHE _ SAVE <nl> + * - ROW _ CACHE _ SAVE <nl> + * - CLEANUP <nl> + * - SCRUB <nl> + * - INDEX _ BUILD <nl> + * / <nl> + public void stopCompaction ( String type ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> index 55db10c . . 11f5bc7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java <nl> @ @ - 151 , 6 + 151 , 9 @ @ public class CompactionTask extends AbstractCompactionTask <nl> writers . add ( writer ) ; <nl> while ( nni . hasNext ( ) ) <nl> { <nl> + if ( ci . isStopped ( ) ) <nl> + throw new UserInterruptedException ( ci . getCompactionInfo ( ) ) ; <nl> + <nl> AbstractCompactedRow row = nni . next ( ) ; <nl> if ( row . isEmpty ( ) ) <nl> continue ; <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> index 75447c7 . . 434ca90 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java <nl> @ @ - 26 , 14 + 26 , 14 @ @ import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . Table ; <nl> import org . apache . cassandra . db . compaction . CompactionInfo ; <nl> import org . apache . cassandra . db . compaction . OperationType ; <nl> + import org . apache . cassandra . db . compaction . UserInterruptedException ; <nl> import org . apache . cassandra . io . sstable . ReducingKeyIterator ; <nl> <nl> / * * <nl> * Manages building an entire index from column family data . Runs on to compaction manager . <nl> * / <nl> - public class SecondaryIndexBuilder implements CompactionInfo . Holder <nl> + public class SecondaryIndexBuilder extends CompactionInfo . Holder <nl> { <nl> - <nl> private final ColumnFamilyStore cfs ; <nl> private final SortedSet < ByteBuffer > columns ; <nl> private final ReducingKeyIterator iter ; <nl> @ @ - 59 , 6 + 59 , 8 @ @ public class SecondaryIndexBuilder implements CompactionInfo . Holder <nl> { <nl> while ( iter . hasNext ( ) ) <nl> { <nl> + if ( isStopped ( ) ) <nl> + throw new UserInterruptedException ( getCompactionInfo ( ) ) ; <nl> DecoratedKey < ? > key = iter . next ( ) ; <nl> Table . indexRow ( key , cfs , columns ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> index 023b63a . . caa2b30 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class NodeCmd <nl> SETCACHECAPACITY , GETCOMPACTIONTHRESHOLD , SETCOMPACTIONTHRESHOLD , NETSTATS , CFHISTOGRAMS , <nl> COMPACTIONSTATS , DISABLEGOSSIP , ENABLEGOSSIP , INVALIDATEKEYCACHE , INVALIDATEROWCACHE , <nl> DISABLETHRIFT , ENABLETHRIFT , STATUSTHRIFT , JOIN , SETCOMPACTIONTHROUGHPUT , GETENDPOINTS , <nl> - REFRESH , GOSSIPINFO , UPGRADESSTABLES <nl> + REFRESH , GOSSIPINFO , UPGRADESSTABLES , STOP <nl> } <nl> <nl> <nl> @ @ - 138 , 6 + 138 , 7 @ @ public class NodeCmd <nl> / / Four args <nl> addCmdHelp ( header , " setcachecapacity < keyspace > < cfname > < keycachecapacity > < rowcachecapacity > " , " Set the key and row cache capacities of a given column family " ) ; <nl> addCmdHelp ( header , " setcompactionthreshold < keyspace > < cfname > < minthreshold > < maxthreshold > " , " Set the min and max compaction thresholds for a given column family " ) ; <nl> + addCmdHelp ( header , " stop < compaction _ type > " , " Supported types are COMPACTION , VALIDATION , KEY _ CACHE _ SAVE , ROW _ CACHE _ SAVE , CLEANUP , SCRUB , INDEX _ BUILD " ) ; <nl> <nl> String usage = String . format ( " java % s - - host < arg > < command > % n " , NodeCmd . class . getName ( ) ) ; <nl> hf . printHelp ( usage , " " , options , " " ) ; <nl> @ @ - 717 , 6 + 718 , 11 @ @ public class NodeCmd <nl> <nl> case GOSSIPINFO : nodeCmd . printGossipInfo ( System . out ) ; break ; <nl> <nl> + case STOP : <nl> + if ( arguments . length ! = 1 ) { badUse ( " stop requires a type . " ) ; } <nl> + probe . stop ( arguments [ 0 ] . toUpperCase ( ) ) ; <nl> + break ; <nl> + <nl> default : <nl> throw new RuntimeException ( " Unreachable code . " ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index 8a87349 . . dc1fe8e 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 616 , 6 + 616 , 11 @ @ public class NodeProbe <nl> { <nl> return fdProxy . getAllEndpointStates ( ) ; <nl> } <nl> + <nl> + public void stop ( String string ) <nl> + { <nl> + compactionProxy . stopCompaction ( string ) ; <nl> + } <nl> } <nl> <nl> class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > <nl> diff - - git a / src / java / org / apache / cassandra / utils / WrappedRunnable . java b / src / java / org / apache / cassandra / utils / WrappedRunnable . java <nl> index 6d2ce29 . . dfbec11 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / WrappedRunnable . java <nl> + + + b / src / java / org / apache / cassandra / utils / WrappedRunnable . java <nl> @ @ - 31 , 7 + 31 , 10 @ @ public abstract class WrappedRunnable implements Runnable <nl> } <nl> catch ( Exception e ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + if ( e instanceof RuntimeException ) <nl> + throw ( RuntimeException ) e ; <nl> + else <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 5642cd4 . . 1912372 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 3 . 0 : 
 * Decommissioned nodes will not rejoin the cluster ( CASSANDRA - 8801 ) 
 * Change gossip stabilization to use endpoit size ( CASSANDRA - 9401 ) 
 + * Add ability to stop compaction by ID ( CASSANDRA - 7207 ) 
 
 2 . 2 
 * Ensure that UDF and UDAs are keyspace - isolated ( CASSANDRA - 9409 ) 
 diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 7a9c3da . . b381224 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import org . apache . cassandra . io . util . * ; 
 import org . apache . cassandra . service . CacheService ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . Pair ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K , V > 
 { 
 @ @ - 210 , 7 + 211 , 8 @ @ public class AutoSavingCache < K extends CacheKey , V > extends InstrumentingCache < K 
 type , 
 0 , 
 keysEstimate , 
 - " keys " ) ; 
 + " keys " , 
 + UUIDGen . getTimeUUID ( ) ) ; 
 } 
 
 public CacheService . CacheType cacheType ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 index 5ac2c8b . . 9fe8fd9 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 @ @ - 18 , 6 + 18 , 7 @ @ 
 package org . apache . cassandra . db . compaction ; 
 
 import java . util . List ; 
 + import java . util . UUID ; 
 import java . util . concurrent . atomic . AtomicLong ; 
 
 import org . apache . cassandra . io . sstable . ISSTableScanner ; 
 @ @ - 30 , 6 + 31 , 7 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i 
 protected final long totalBytes ; 
 protected volatile long bytesRead ; 
 protected final List < ISSTableScanner > scanners ; 
 + protected final UUID compactionId ; 
 / * 
 * counters for merged rows . 
 * array index represents ( number of merged rows - 1 ) , so index 0 is counter for no merge ( 1 row ) , 
 @ @ - 37 , 12 + 39 , 13 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i 
 * / 
 protected final AtomicLong [ ] mergeCounters ; 
 
 - public AbstractCompactionIterable ( CompactionController controller , OperationType type , List < ISSTableScanner > scanners ) 
 + public AbstractCompactionIterable ( CompactionController controller , OperationType type , List < ISSTableScanner > scanners , UUID compactionId ) 
 { 
 this . controller = controller ; 
 this . type = type ; 
 this . scanners = scanners ; 
 this . bytesRead = 0 ; 
 + this . compactionId = compactionId ; 
 
 long bytes = 0 ; 
 for ( ISSTableScanner scanner : scanners ) 
 @ @ - 58 , 7 + 61 , 8 @ @ public abstract class AbstractCompactionIterable extends CompactionInfo . Holder i 
 return new CompactionInfo ( controller . cfs . metadata , 
 type , 
 bytesRead , 
 - totalBytes ) ; 
 + totalBytes , 
 + compactionId ) ; 
 } 
 
 protected void updateCounterFor ( int rows ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 index 3ee3a68 . . ff8c022 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 @ @ - 35 , 30 + 35 , 32 @ @ public final class CompactionInfo implements Serializable 
 private final long completed ; 
 private final long total ; 
 private final String unit ; 
 + private final UUID compactionId ; 
 
 - public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long bytesComplete , long totalBytes ) 
 + public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long bytesComplete , long totalBytes , UUID compactionId ) 
 { 
 - this ( cfm , tasktype , bytesComplete , totalBytes , " bytes " ) ; 
 + this ( cfm , tasktype , bytesComplete , totalBytes , " bytes " , compactionId ) ; 
 } 
 
 - public CompactionInfo ( OperationType tasktype , long completed , long total , String unit ) 
 + public CompactionInfo ( OperationType tasktype , long completed , long total , String unit , UUID compactionId ) 
 { 
 - this ( null , tasktype , completed , total , unit ) ; 
 + this ( null , tasktype , completed , total , unit , compactionId ) ; 
 } 
 
 - public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long completed , long total , String unit ) 
 + public CompactionInfo ( CFMetaData cfm , OperationType tasktype , long completed , long total , String unit , UUID compactionId ) 
 { 
 this . tasktype = tasktype ; 
 this . completed = completed ; 
 this . total = total ; 
 this . cfm = cfm ; 
 this . unit = unit ; 
 + this . compactionId = compactionId ; 
 } 
 
 / * * @ return A copy of this CompactionInfo with updated progress . * / 
 public CompactionInfo forProgress ( long complete , long total ) 
 { 
 - return new CompactionInfo ( cfm , tasktype , complete , total , unit ) ; 
 + return new CompactionInfo ( cfm , tasktype , complete , total , unit , compactionId ) ; 
 } 
 
 public UUID getId ( ) 
 @ @ - 96 , 6 + 98 , 11 @ @ public final class CompactionInfo implements Serializable 
 return tasktype ; 
 } 
 
 + public UUID compactionId ( ) 
 + { 
 + return compactionId ; 
 + } 
 + 
 public String toString ( ) 
 { 
 StringBuilder buff = new StringBuilder ( ) ; 
 @ @ - 115 , 6 + 122 , 7 @ @ public final class CompactionInfo implements Serializable 
 ret . put ( " total " , Long . toString ( total ) ) ; 
 ret . put ( " taskType " , tasktype . toString ( ) ) ; 
 ret . put ( " unit " , unit ) ; 
 + ret . put ( " compactionId " , compactionId = = null ? " " : compactionId . toString ( ) ) ; 
 return ret ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java 
 index cd08b81 . . 23d8a4a 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionIterable . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package org . apache . cassandra . db . compaction ; 
 import java . util . ArrayList ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 + import java . util . UUID ; 
 
 import com . google . common . collect . ImmutableList ; 
 
 @ @ - 41 , 9 + 42 , 13 @ @ public class CompactionIterable extends AbstractCompactionIterable 
 } 
 } ; 
 
 - public CompactionIterable ( OperationType type , List < ISSTableScanner > scanners , CompactionController controller , SSTableFormat . Type formatType ) 
 + public CompactionIterable ( OperationType type , 
 + List < ISSTableScanner > scanners , 
 + CompactionController controller , 
 + SSTableFormat . Type formatType , 
 + UUID compactionId ) 
 { 
 - super ( controller , type , scanners ) ; 
 + super ( controller , type , scanners , compactionId ) ; 
 this . format = formatType . info ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index cda6915 . . d79b835 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . UUID ; 
 import java . util . concurrent . BlockingQueue ; 
 import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 @ @ - 77 , 6 + 78 , 7 @ @ import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . MerkleTree ; 
 import org . apache . cassandra . utils . WrappedRunnable ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . cassandra . utils . concurrent . OpOrder ; 
 import org . apache . cassandra . utils . concurrent . Refs ; 
 
 @ @ - 1184 , 7 + 1186 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 repairedSSTableWriter . switchWriter ( CompactionManager . createWriterForAntiCompaction ( cfs , destination , expectedBloomFilterSize , repairedAt , sstableAsSet ) ) ; 
 unRepairedSSTableWriter . switchWriter ( CompactionManager . createWriterForAntiCompaction ( cfs , destination , expectedBloomFilterSize , ActiveRepairService . UNREPAIRED _ SSTABLE , sstableAsSet ) ) ; 
 
 - CompactionIterable ci = new CompactionIterable ( OperationType . ANTICOMPACTION , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) ) ; 
 + CompactionIterable ci = new CompactionIterable ( OperationType . ANTICOMPACTION , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) , UUIDGen . getTimeUUID ( ) ) ; 
 Iterator < AbstractCompactedRow > iter = ci . iterator ( ) ; 
 metrics . beginCompaction ( ci ) ; 
 try 
 @ @ - 1309 , 7 + 1311 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 public ValidationCompactionIterable ( ColumnFamilyStore cfs , List < ISSTableScanner > scanners , int gcBefore ) 
 { 
 - super ( OperationType . VALIDATION , scanners , new ValidationCompactionController ( cfs , gcBefore ) , DatabaseDescriptor . getSSTableFormat ( ) ) ; 
 + super ( OperationType . VALIDATION , scanners , new ValidationCompactionController ( cfs , gcBefore ) , DatabaseDescriptor . getSSTableFormat ( ) , UUIDGen . getTimeUUID ( ) ) ; 
 } 
 } 
 
 @ @ - 1477 , 11 + 1479 , 13 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 private final SSTableReader sstable ; 
 private final ISSTableScanner scanner ; 
 + private final UUID cleanupCompactionId ; 
 
 public CleanupInfo ( SSTableReader sstable , ISSTableScanner scanner ) 
 { 
 this . sstable = sstable ; 
 this . scanner = scanner ; 
 + cleanupCompactionId = UUIDGen . getTimeUUID ( ) ; 
 } 
 
 public CompactionInfo getCompactionInfo ( ) 
 @ @ - 1491 , 7 + 1495 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 return new CompactionInfo ( sstable . metadata , 
 OperationType . CLEANUP , 
 scanner . getCurrentPosition ( ) , 
 - scanner . getLengthInBytes ( ) ) ; 
 + scanner . getLengthInBytes ( ) , 
 + cleanupCompactionId ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 1510 , 6 + 1515 , 16 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 
 + public void stopCompactionById ( String compactionId ) 
 + { 
 + for ( Holder holder : CompactionMetrics . getCompactions ( ) ) 
 + { 
 + UUID holderId = holder . getCompactionInfo ( ) . compactionId ( ) ; 
 + if ( holderId ! = null & & holderId . equals ( UUID . fromString ( compactionId ) ) ) 
 + holder . stop ( ) ; 
 + } 
 + } 
 + 
 public int getCoreCompactorThreads ( ) 
 { 
 return executor . getCorePoolSize ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 index 9c36192 . . 8e200a1 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . compaction ; 
 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . UUID ; 
 import javax . management . openmbean . TabularData ; 
 
 public interface CompactionManagerMBean 
 @ @ - 55 , 6 + 56 , 13 @ @ public interface CompactionManagerMBean 
 public void stopCompaction ( String type ) ; 
 
 / * * 
 + * Stop an individual running compaction using the compactionId . 
 + * @ param compactionId Compaction ID of compaction to stop . Such IDs can be found in 
 + * the compactions _ in _ progress table of the system keyspace . 
 + * / 
 + public void stopCompactionById ( String compactionId ) ; 
 + 
 + / * * 
 * Returns core size of compaction thread pool 
 * / 
 public int getCoreCompactorThreads ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index c397d9a . . 34f57c1 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 162 , 7 + 162 , 7 @ @ public class CompactionTask extends AbstractCompactionTask 
 / / See CASSANDRA - 8019 and CASSANDRA - 8399 
 try ( AbstractCompactionStrategy . ScannerList scanners = strategy . getScanners ( actuallyCompact ) ) 
 { 
 - ci = new CompactionIterable ( compactionType , scanners . scanners , controller , sstableFormat ) ; 
 + ci = new CompactionIterable ( compactionType , scanners . scanners , controller , sstableFormat , taskId ) ; 
 Iterator < AbstractCompactedRow > iter = ci . iterator ( ) ; 
 if ( collector ! = null ) 
 collector . beginCompaction ( ci ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Scrubber . java b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 index 310d58a . . 1e014ed 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Scrubber . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import org . apache . cassandra . service . ActiveRepairService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . OutputHandler ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 public class Scrubber implements Closeable 
 { 
 @ @ - 419 , 11 + 420 , 13 @ @ public class Scrubber implements Closeable 
 { 
 private final RandomAccessReader dataFile ; 
 private final SSTableReader sstable ; 
 + private final UUID scrubCompactionId ; 
 
 public ScrubInfo ( RandomAccessReader dataFile , SSTableReader sstable ) 
 { 
 this . dataFile = dataFile ; 
 this . sstable = sstable ; 
 + scrubCompactionId = UUIDGen . getTimeUUID ( ) ; 
 } 
 
 public CompactionInfo getCompactionInfo ( ) 
 @ @ - 433 , 7 + 436 , 8 @ @ public class Scrubber implements Closeable 
 return new CompactionInfo ( sstable . metadata , 
 OperationType . SCRUB , 
 dataFile . getFilePointer ( ) , 
 - dataFile . length ( ) ) ; 
 + dataFile . length ( ) , 
 + scrubCompactionId ) ; 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Upgrader . java b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 index 30584fd . . 5bb1530 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Upgrader . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . sstable . format . SSTableWriter ; 
 import org . apache . cassandra . io . sstable . metadata . MetadataCollector ; 
 import org . apache . cassandra . utils . OutputHandler ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 public class Upgrader 
 { 
 @ @ - 85 , 7 + 86 , 7 @ @ public class Upgrader 
 try ( SSTableRewriter writer = new SSTableRewriter ( cfs , toUpgrade , CompactionTask . getMaxDataAge ( toUpgrade ) , true ) ; 
 AbstractCompactionStrategy . ScannerList scanners = strategy . getScanners ( toUpgrade ) ) 
 { 
 - Iterator < AbstractCompactedRow > iter = new CompactionIterable ( compactionType , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) ) . iterator ( ) ; 
 + Iterator < AbstractCompactedRow > iter = new CompactionIterable ( compactionType , scanners . scanners , controller , DatabaseDescriptor . getSSTableFormat ( ) , UUIDGen . getTimeUUID ( ) ) . iterator ( ) ; 
 writer . switchWriter ( createCompactionWriter ( sstable . getSSTableMetadata ( ) . repairedAt ) ) ; 
 while ( iter . hasNext ( ) ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / Verifier . java b / src / java / org / apache / cassandra / db / compaction / Verifier . java 
 index 1d37c6f . . 0177819 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / Verifier . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / Verifier . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . cassandra . service . ActiveRepairService ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 import org . apache . cassandra . utils . OutputHandler ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 import java . io . Closeable ; 
 import java . io . File ; 
 @ @ - 241 , 11 + 242 , 13 @ @ public class Verifier implements Closeable 
 { 
 private final RandomAccessReader dataFile ; 
 private final SSTableReader sstable ; 
 + private final UUID verificationCompactionId ; 
 
 public VerifyInfo ( RandomAccessReader dataFile , SSTableReader sstable ) 
 { 
 this . dataFile = dataFile ; 
 this . sstable = sstable ; 
 + verificationCompactionId = UUIDGen . getTimeUUID ( ) ; 
 } 
 
 public CompactionInfo getCompactionInfo ( ) 
 @ @ - 255 , 7 + 258 , 8 @ @ public class Verifier implements Closeable 
 return new CompactionInfo ( sstable . metadata , 
 OperationType . VERIFY , 
 dataFile . getFilePointer ( ) , 
 - dataFile . length ( ) ) ; 
 + dataFile . length ( ) , 
 + verificationCompactionId ) ; 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 index eb09e43 . . 916c286 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . db . index ; 
 
 import java . io . IOException ; 
 import java . util . Set ; 
 + import java . util . UUID ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 @ @ - 27 , 6 + 28 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionInfo ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . db . compaction . CompactionInterruptedException ; 
 import org . apache . cassandra . io . sstable . ReducingKeyIterator ; 
 + import org . apache . cassandra . utils . UUIDGen ; 
 
 / * * 
 * Manages building an entire index from column family data . Runs on to compaction manager . 
 @ @ - 36 , 12 + 38 , 14 @ @ public class SecondaryIndexBuilder extends CompactionInfo . Holder 
 private final ColumnFamilyStore cfs ; 
 private final Set < String > idxNames ; 
 private final ReducingKeyIterator iter ; 
 + private final UUID compactionId ; 
 
 public SecondaryIndexBuilder ( ColumnFamilyStore cfs , Set < String > idxNames , ReducingKeyIterator iter ) 
 { 
 this . cfs = cfs ; 
 this . idxNames = idxNames ; 
 this . iter = iter ; 
 + compactionId = UUIDGen . getTimeUUID ( ) ; 
 } 
 
 public CompactionInfo getCompactionInfo ( ) 
 @ @ - 49 , 7 + 53 , 8 @ @ public class SecondaryIndexBuilder extends CompactionInfo . Holder 
 return new CompactionInfo ( cfs . metadata , 
 OperationType . INDEX _ BUILD , 
 iter . getBytesRead ( ) , 
 - iter . getTotalBytes ( ) ) ; 
 + iter . getTotalBytes ( ) , 
 + compactionId ) ; 
 } 
 
 public void build ( ) 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 1341c68 . . f10a4b6 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 957 , 6 + 957 , 11 @ @ public class NodeProbe implements AutoCloseable 
 compactionProxy . stopCompaction ( string ) ; 
 } 
 
 + public void stopById ( String compactionId ) 
 + { 
 + compactionProxy . stopCompactionById ( compactionId ) ; 
 + } 
 + 
 public void setStreamThroughput ( int value ) 
 { 
 ssProxy . setStreamThroughputMbPerSec ( value ) ; 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java 
 index 154ef49 . . e57d2ee 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / CompactionStats . java 
 @ @ - 52 , 9 + 52 , 9 @ @ public class CompactionStats extends NodeToolCmd 
 { 
 int compactionThroughput = probe . getCompactionThroughput ( ) ; 
 List < String [ ] > lines = new ArrayList < > ( ) ; 
 - int [ ] columnSizes = new int [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; 
 + int [ ] columnSizes = new int [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; 
 
 - addLine ( lines , columnSizes , " compaction type " , " keyspace " , " table " , " completed " , " total " , " unit " , " progress " ) ; 
 + addLine ( lines , columnSizes , " id " , " compaction type " , " keyspace " , " table " , " completed " , " total " , " unit " , " progress " ) ; 
 for ( Map < String , String > c : compactions ) 
 { 
 long total = Long . parseLong ( c . get ( " total " ) ) ; 
 @ @ - 66 , 7 + 66 , 8 @ @ public class CompactionStats extends NodeToolCmd 
 String totalStr = humanReadable ? FileUtils . stringifyFileSize ( total ) : Long . toString ( total ) ; 
 String unit = c . get ( " unit " ) ; 
 String percentComplete = total = = 0 ? " n / a " : new DecimalFormat ( " 0 . 00 " ) . format ( ( double ) completed / total * 100 ) + " % " ; 
 - addLine ( lines , columnSizes , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; 
 + String id = c . get ( " compactionId " ) ; 
 + addLine ( lines , columnSizes , id , taskType , keyspace , columnFamily , completedStr , totalStr , unit , percentComplete ) ; 
 if ( taskType . equals ( OperationType . COMPACTION . toString ( ) ) ) 
 remainingBytes + = total - completed ; 
 } 
 @ @ - 82 , 7 + 83 , 7 @ @ public class CompactionStats extends NodeToolCmd 
 
 for ( String [ ] line : lines ) 
 { 
 - System . out . printf ( format , line [ 0 ] , line [ 1 ] , line [ 2 ] , line [ 3 ] , line [ 4 ] , line [ 5 ] , line [ 6 ] ) ; 
 + System . out . printf ( format , line [ 0 ] , line [ 1 ] , line [ 2 ] , line [ 3 ] , line [ 4 ] , line [ 5 ] , line [ 6 ] , line [ 7 ] ) ; 
 } 
 
 String remainingTime = " n / a " ; 
 diff - - git a / src / java / org / apache / cassandra / tools / nodetool / Stop . java b / src / java / org / apache / cassandra / tools / nodetool / Stop . java 
 index b3bb2b8 . . ad1fc27 100644 
 - - - a / src / java / org / apache / cassandra / tools / nodetool / Stop . java 
 + + + b / src / java / org / apache / cassandra / tools / nodetool / Stop . java 
 @ @ - 19 , 6 + 19 , 7 @ @ package org . apache . cassandra . tools . nodetool ; 
 
 import io . airlift . command . Arguments ; 
 import io . airlift . command . Command ; 
 + import io . airlift . command . Option ; 
 
 import org . apache . cassandra . db . compaction . OperationType ; 
 import org . apache . cassandra . tools . NodeProbe ; 
 @ @ - 27 , 12 + 28 , 24 @ @ import org . apache . cassandra . tools . NodeTool . NodeToolCmd ; 
 @ Command ( name = " stop " , description = " Stop compaction " ) 
 public class Stop extends NodeToolCmd 
 { 
 - @ Arguments ( title = " compaction _ type " , usage = " < compaction type > " , description = " Supported types are COMPACTION , VALIDATION , CLEANUP , SCRUB , VERIFY , INDEX _ BUILD " , required = true ) 
 + @ Arguments ( title = " compaction _ type " , 
 + usage = " < compaction type > " , 
 + description = " Supported types are COMPACTION , VALIDATION , CLEANUP , SCRUB , VERIFY , INDEX _ BUILD " , 
 + required = false ) 
 private OperationType compactionType = OperationType . UNKNOWN ; 
 
 + @ Option ( title = " compactionId " , 
 + name = { " - id " , " - - compaction - id " } , 
 + description = " Use - id to stop a compaction by the specified id . Ids can be found in the system . compactions _ in _ progress table . " , 
 + required = false ) 
 + private String compactionId = " " ; 
 + 
 @ Override 
 public void execute ( NodeProbe probe ) 
 { 
 - probe . stop ( compactionType . name ( ) ) ; 
 + if ( ! compactionId . isEmpty ( ) ) 
 + probe . stopById ( compactionId ) ; 
 + else 
 + probe . stop ( compactionType . name ( ) ) ; 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 35c75bf . . 5550f95 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 11 , 6 + 11 , 10 @ @ 
 * Use faster bytes comparison ( CASSANDRA - 3434 ) 
 
 
 + 1 . 0 . 5 
 + * add command to stop compactions ( CASSANDRA - 1740 ) 
 + 
 + 
 1 . 0 . 4 
 * fix self - hinting of timed out read repair updates and make hinted handoff 
 less prone to OOMing a coordinator ( CASSANDRA - 3440 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index e44c6a6 . . 9f6762d 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 29 , 6 + 29 , 17 @ @ Upgrading 
 want to use such large batches . 
 
 
 + 1 . 0 . 5 
 + = = = = = 
 + 
 + JMX 
 + - - - 
 + - A command has been added to stop running compaction . It is available 
 + through JMX and through nodetool stop < type > ( see the nodetool help for 
 + details ) . Please note that stopped compaction are terminated and cannot 
 + be restarted afterwards . 
 + 
 + 
 1 . 0 . 4 
 = = = = = 
 
 diff - - git a / src / java / org / apache / cassandra / cache / AutoSavingCache . java b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 index 38b7778 . . 1006331 100644 
 - - - a / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 + + + b / src / java / org / apache / cassandra / cache / AutoSavingCache . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . compaction . CompactionInfo ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 + import org . apache . cassandra . db . compaction . UserInterruptedException ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 import org . apache . cassandra . io . util . SequentialWriter ; 
 import org . apache . cassandra . service . StorageService ; 
 @ @ - 190 , 7 + 191 , 7 @ @ public abstract class AutoSavingCache < K , V > extends InstrumentingCache < K , V > 
 } 
 } 
 
 - public class Writer implements CompactionInfo . Holder 
 + public class Writer extends CompactionInfo . Holder 
 { 
 private final Set < K > keys ; 
 private final CompactionInfo info ; 
 @ @ - 247 , 27 + 248 , 30 @ @ public abstract class AutoSavingCache < K , V > extends InstrumentingCache < K , V > 
 
 logger . debug ( " Saving { } " , path ) ; 
 File tmpFile = File . createTempFile ( path . getName ( ) , null , path . getParentFile ( ) ) ; 
 - 
 DataOutputStream out = SequentialWriter . open ( tmpFile , true ) . stream ; 
 try 
 { 
 for ( K key : keys ) 
 { 
 + if ( isStopped ( ) ) 
 + throw new UserInterruptedException ( getCompactionInfo ( ) ) ; 
 ByteBuffer bytes = translateKey ( key ) ; 
 ByteBufferUtil . writeWithLength ( bytes , out ) ; 
 bytesWritten + = bytes . remaining ( ) ; 
 } 
 + out . flush ( ) ; 
 + path . delete ( ) ; / / ignore error if it didn ' t exist 
 + if ( ! tmpFile . renameTo ( path ) ) 
 + throw new IOException ( " Unable to rename " + tmpFile + " to " + path ) ; 
 + logger . info ( String . format ( " Saved % s ( % d items ) in % d ms " , 
 + path . getName ( ) , keys . size ( ) , ( System . currentTimeMillis ( ) - start ) ) ) ; 
 } 
 finally 
 { 
 - out . close ( ) ; 
 + FileUtils . closeQuietly ( out ) ; 
 + if ( tmpFile . exists ( ) ) 
 + tmpFile . delete ( ) ; 
 } 
 - 
 - path . delete ( ) ; / / ignore error if it didn ' t exist 
 - if ( ! tmpFile . renameTo ( path ) ) 
 - throw new IOException ( " Unable to rename " + tmpFile + " to " + path ) ; 
 - logger . info ( String . format ( " Saved % s ( % d items ) in % d ms " , 
 - path . getName ( ) , keys . size ( ) , ( System . currentTimeMillis ( ) - start ) ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 index 7a344d8 . . bbf10c0 100644 
 - - - a / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 + + + b / src / java / org / apache / cassandra / concurrent / DebuggableThreadPoolExecutor . java 
 @ @ - 23 , 6 + 23 , 7 @ @ package org . apache . cassandra . concurrent ; 
 
 import java . util . concurrent . * ; 
 
 + import org . apache . cassandra . db . compaction . UserInterruptedException ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 137 , 10 + 138 , 13 @ @ public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor 
 } 
 catch ( ExecutionException e ) 
 { 
 - if ( Thread . getDefaultUncaughtExceptionHandler ( ) = = null ) 
 - logger . error ( " Error in ThreadPoolExecutor " , e . getCause ( ) ) ; 
 + Throwable actualException = e . getCause ( ) ; 
 + if ( actualException instanceof UserInterruptedException ) 
 + logger . info ( " Task interrupted by user : " + actualException ) ; 
 + else if ( Thread . getDefaultUncaughtExceptionHandler ( ) = = null ) 
 + logger . error ( " Error in ThreadPoolExecutor " , actualException ) ; 
 else 
 - Thread . getDefaultUncaughtExceptionHandler ( ) . uncaughtException ( Thread . currentThread ( ) , e . getCause ( ) ) ; 
 + Thread . getDefaultUncaughtExceptionHandler ( ) . uncaughtException ( Thread . currentThread ( ) , actualException ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 index 53b1ba9 . . 21a3a2c 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionIterable . java 
 @ @ - 35 , 7 + 35 , 7 @ @ import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . CloseableIterator ; 
 import org . apache . cassandra . utils . Throttle ; 
 
 - public abstract class AbstractCompactionIterable implements Iterable < AbstractCompactedRow > , CompactionInfo . Holder 
 + public abstract class AbstractCompactionIterable extends CompactionInfo . Holder implements Iterable < AbstractCompactedRow > 
 { 
 private static Logger logger = LoggerFactory . getLogger ( AbstractCompactionIterable . class ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 index 890d31d . . 40244c0 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionInfo . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import java . io . Serializable ; 
 public final class CompactionInfo implements Serializable 
 { 
 private static final long serialVersionUID = 3695381572726744816L ; 
 - 
 private final int id ; 
 private final String ksname ; 
 private final String cfname ; 
 @ @ - 87 , 8 + 86 , 19 @ @ public final class CompactionInfo implements Serializable 
 return buff . append ( ' ) ' ) . toString ( ) ; 
 } 
 
 - public interface Holder 
 + public static abstract class Holder 
 { 
 - public CompactionInfo getCompactionInfo ( ) ; 
 + private volatile boolean isStopped = false ; 
 + public abstract CompactionInfo getCompactionInfo ( ) ; 
 + 
 + public void stop ( ) 
 + { 
 + isStopped = true ; 
 + } 
 + 
 + public boolean isStopped ( ) 
 + { 
 + return isStopped ; 
 + } 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index b172e91 . . c9d8fcb 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import org . apache . cassandra . concurrent . NamedThreadFactory ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . compaction . CompactionInfo . Holder ; 
 import org . apache . cassandra . db . index . SecondaryIndexBuilder ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . io . sstable . * ; 
 @ @ - 485 , 6 + 486 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 while ( ! dataFile . isEOF ( ) ) 
 { 
 + if ( scrubInfo . isStopped ( ) ) 
 + throw new UserInterruptedException ( scrubInfo . getCompactionInfo ( ) ) ; 
 long rowStart = dataFile . getFilePointer ( ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Reading row at " + rowStart ) ; 
 @ @ - 687 , 6 + 690 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 while ( scanner . hasNext ( ) ) 
 { 
 + if ( ci . isStopped ( ) ) 
 + throw new UserInterruptedException ( ci . getCompactionInfo ( ) ) ; 
 SSTableIdentityIterator row = ( SSTableIdentityIterator ) scanner . next ( ) ; 
 if ( Range . isTokenInRanges ( row . getKey ( ) . token , ranges ) ) 
 { 
 @ @ - 812 , 6 + 817 , 8 @ @ public class CompactionManager implements CompactionManagerMBean 
 validator . prepare ( cfs ) ; 
 while ( nni . hasNext ( ) ) 
 { 
 + if ( ci . isStopped ( ) ) 
 + throw new UserInterruptedException ( ci . getCompactionInfo ( ) ) ; 
 AbstractCompactedRow row = nni . next ( ) ; 
 validator . add ( row ) ; 
 } 
 @ @ - 1079 , 7 + 1086 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 
 - private static class CleanupInfo implements CompactionInfo . Holder 
 + private static class CleanupInfo extends CompactionInfo . Holder 
 { 
 private final SSTableReader sstable ; 
 private final SSTableScanner scanner ; 
 @ @ - 1107 , 7 + 1114 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 
 - private static class ScrubInfo implements CompactionInfo . Holder 
 + private static class ScrubInfo extends CompactionInfo . Holder 
 { 
 private final RandomAccessReader dataFile ; 
 private final SSTableReader sstable ; 
 @ @ - 1134 , 4 + 1141 , 14 @ @ public class CompactionManager implements CompactionManagerMBean 
 } 
 } 
 } 
 + 
 + public void stopCompaction ( String type ) 
 + { 
 + OperationType operation = OperationType . valueOf ( type ) ; 
 + for ( Holder holder : CompactionExecutor . getCompactions ( ) ) 
 + { 
 + if ( holder . getCompactionInfo ( ) . getTaskType ( ) = = operation ) 
 + holder . stop ( ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 index eefe46e . . e67957d 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManagerMBean . java 
 @ @ - 45 , 4 + 45 , 17 @ @ public interface CompactionManagerMBean 
 * @ param dataFiles a comma separated list of sstable filename to compact 
 * / 
 public void forceUserDefinedCompaction ( String ksname , String dataFiles ) ; 
 + 
 + / * * 
 + * Stop all running compaction - like tasks having the provided { @ code type } . 
 + * @ param type the type of compaction to stop . Can be one of : 
 + * - COMPACTION 
 + * - VALIDATION 
 + * - KEY _ CACHE _ SAVE 
 + * - ROW _ CACHE _ SAVE 
 + * - CLEANUP 
 + * - SCRUB 
 + * - INDEX _ BUILD 
 + * / 
 + public void stopCompaction ( String type ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 index 55db10c . . 11f5bc7 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionTask . java 
 @ @ - 151 , 6 + 151 , 9 @ @ public class CompactionTask extends AbstractCompactionTask 
 writers . add ( writer ) ; 
 while ( nni . hasNext ( ) ) 
 { 
 + if ( ci . isStopped ( ) ) 
 + throw new UserInterruptedException ( ci . getCompactionInfo ( ) ) ; 
 + 
 AbstractCompactedRow row = nni . next ( ) ; 
 if ( row . isEmpty ( ) ) 
 continue ; 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 index 75447c7 . . 434ca90 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexBuilder . java 
 @ @ - 26 , 14 + 26 , 14 @ @ import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . Table ; 
 import org . apache . cassandra . db . compaction . CompactionInfo ; 
 import org . apache . cassandra . db . compaction . OperationType ; 
 + import org . apache . cassandra . db . compaction . UserInterruptedException ; 
 import org . apache . cassandra . io . sstable . ReducingKeyIterator ; 
 
 / * * 
 * Manages building an entire index from column family data . Runs on to compaction manager . 
 * / 
 - public class SecondaryIndexBuilder implements CompactionInfo . Holder 
 + public class SecondaryIndexBuilder extends CompactionInfo . Holder 
 { 
 - 
 private final ColumnFamilyStore cfs ; 
 private final SortedSet < ByteBuffer > columns ; 
 private final ReducingKeyIterator iter ; 
 @ @ - 59 , 6 + 59 , 8 @ @ public class SecondaryIndexBuilder implements CompactionInfo . Holder 
 { 
 while ( iter . hasNext ( ) ) 
 { 
 + if ( isStopped ( ) ) 
 + throw new UserInterruptedException ( getCompactionInfo ( ) ) ; 
 DecoratedKey < ? > key = iter . next ( ) ; 
 Table . indexRow ( key , cfs , columns ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeCmd . java b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 index 023b63a . . caa2b30 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeCmd . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeCmd . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public class NodeCmd 
 SETCACHECAPACITY , GETCOMPACTIONTHRESHOLD , SETCOMPACTIONTHRESHOLD , NETSTATS , CFHISTOGRAMS , 
 COMPACTIONSTATS , DISABLEGOSSIP , ENABLEGOSSIP , INVALIDATEKEYCACHE , INVALIDATEROWCACHE , 
 DISABLETHRIFT , ENABLETHRIFT , STATUSTHRIFT , JOIN , SETCOMPACTIONTHROUGHPUT , GETENDPOINTS , 
 - REFRESH , GOSSIPINFO , UPGRADESSTABLES 
 + REFRESH , GOSSIPINFO , UPGRADESSTABLES , STOP 
 } 
 
 
 @ @ - 138 , 6 + 138 , 7 @ @ public class NodeCmd 
 / / Four args 
 addCmdHelp ( header , " setcachecapacity < keyspace > < cfname > < keycachecapacity > < rowcachecapacity > " , " Set the key and row cache capacities of a given column family " ) ; 
 addCmdHelp ( header , " setcompactionthreshold < keyspace > < cfname > < minthreshold > < maxthreshold > " , " Set the min and max compaction thresholds for a given column family " ) ; 
 + addCmdHelp ( header , " stop < compaction _ type > " , " Supported types are COMPACTION , VALIDATION , KEY _ CACHE _ SAVE , ROW _ CACHE _ SAVE , CLEANUP , SCRUB , INDEX _ BUILD " ) ; 
 
 String usage = String . format ( " java % s - - host < arg > < command > % n " , NodeCmd . class . getName ( ) ) ; 
 hf . printHelp ( usage , " " , options , " " ) ; 
 @ @ - 717 , 6 + 718 , 11 @ @ public class NodeCmd 
 
 case GOSSIPINFO : nodeCmd . printGossipInfo ( System . out ) ; break ; 
 
 + case STOP : 
 + if ( arguments . length ! = 1 ) { badUse ( " stop requires a type . " ) ; } 
 + probe . stop ( arguments [ 0 ] . toUpperCase ( ) ) ; 
 + break ; 
 + 
 default : 
 throw new RuntimeException ( " Unreachable code . " ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index 8a87349 . . dc1fe8e 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 616 , 6 + 616 , 11 @ @ public class NodeProbe 
 { 
 return fdProxy . getAllEndpointStates ( ) ; 
 } 
 + 
 + public void stop ( String string ) 
 + { 
 + compactionProxy . stopCompaction ( string ) ; 
 + } 
 } 
 
 class ColumnFamilyStoreMBeanIterator implements Iterator < Map . Entry < String , ColumnFamilyStoreMBean > > 
 diff - - git a / src / java / org / apache / cassandra / utils / WrappedRunnable . java b / src / java / org / apache / cassandra / utils / WrappedRunnable . java 
 index 6d2ce29 . . dfbec11 100644 
 - - - a / src / java / org / apache / cassandra / utils / WrappedRunnable . java 
 + + + b / src / java / org / apache / cassandra / utils / WrappedRunnable . java 
 @ @ - 31 , 7 + 31 , 10 @ @ public abstract class WrappedRunnable implements Runnable 
 } 
 catch ( Exception e ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + if ( e instanceof RuntimeException ) 
 + throw ( RuntimeException ) e ; 
 + else 
 + throw new RuntimeException ( e ) ; 
 } 
 } 

