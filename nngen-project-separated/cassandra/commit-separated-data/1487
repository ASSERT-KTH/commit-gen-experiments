BLEU SCORE: 0.0114347838903095

TEST MSG: For CASSANDRA - 9499 , update to OHC 0 . 4 that allow deserialization directly from ByteBuffers
GENERATED MSG: fix typo in SICST class name

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 88c2e94 . . 0362eb4 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 406 , 7 + 406 , 8 @ @ <nl> < dependency groupId = " com . datastax . cassandra " artifactId = " cassandra - driver - core " version = " 2 . 1 . 5 " classifier = " shaded " / > <nl> - - > <nl> < dependency groupId = " org . eclipse . jdt . core . compiler " artifactId = " ecj " version = " 4 . 4 . 2 " / > <nl> - < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " version = " 0 . 3 . 4 " / > <nl> + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " version = " 0 . 4 " / > <nl> + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core - j8 " version = " 0 . 4 " / > <nl> < dependency groupId = " net . ju - n . compile - command - annotations " artifactId = " compile - command - annotations " version = " 1 . 2 . 0 " / > <nl> < dependency groupId = " org . fusesource " artifactId = " sigar " version = " 1 . 6 . 4 " > <nl> 	 < exclusion groupId = " log4j " artifactId = " log4j " / > <nl> @ @ - 460 , 7 + 461 , 8 @ @ <nl> < dependency groupId = " com . datastax . cassandra " artifactId = " cassandra - driver - core " classifier = " shaded " / > <nl> - - > <nl> < dependency groupId = " org . eclipse . jdt . core . compiler " artifactId = " ecj " / > <nl> - < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " / > <nl> + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " version = " 0 . 4 " / > <nl> + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core - j8 " version = " 0 . 4 " / > <nl> < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " / > <nl> < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " / > <nl> < dependency groupId = " net . ju - n . compile - command - annotations " artifactId = " compile - command - annotations " / > <nl> diff - - git a / lib / ohc - core - 0 . 3 . 4 . jar b / lib / ohc - core - 0 . 3 . 4 . jar <nl> deleted file mode 100644 <nl> index 0773e78 . . 0000000 <nl> Binary files a / lib / ohc - core - 0 . 3 . 4 . jar and / dev / null differ <nl> diff - - git a / lib / ohc - core - 0 . 4 . jar b / lib / ohc - core - 0 . 4 . jar <nl> new file mode 100644 <nl> index 0000000 . . 1b1b939 <nl> Binary files / dev / null and b / lib / ohc - core - 0 . 4 . jar differ <nl> diff - - git a / lib / ohc - core - j8 - 0 . 3 . 4 . jar b / lib / ohc - core - j8 - 0 . 3 . 4 . jar <nl> deleted file mode 100644 <nl> index faa102f . . 0000000 <nl> Binary files a / lib / ohc - core - j8 - 0 . 3 . 4 . jar and / dev / null differ <nl> diff - - git a / lib / ohc - core - j8 - 0 . 4 . jar b / lib / ohc - core - j8 - 0 . 4 . jar <nl> new file mode 100644 <nl> index 0000000 . . f97ddf5 <nl> Binary files / dev / null and b / lib / ohc - core - j8 - 0 . 4 . jar differ <nl> diff - - git a / src / java / org / apache / cassandra / cache / OHCProvider . java b / src / java / org / apache / cassandra / cache / OHCProvider . java <nl> index 46cbb8b . . 21fc7c7 100644 <nl> - - - a / src / java / org / apache / cassandra / cache / OHCProvider . java <nl> + + + b / src / java / org / apache / cassandra / cache / OHCProvider . java <nl> @ @ - 17 , 18 + 17 , 16 @ @ <nl> * / <nl> package org . apache . cassandra . cache ; <nl> <nl> - import java . io . DataInput ; <nl> - import java . io . DataOutput ; <nl> import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> import java . util . Iterator ; <nl> import java . util . UUID ; <nl> <nl> - <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . db . TypeSizes ; <nl> import org . apache . cassandra . db . partitions . CachedPartition ; <nl> - import org . apache . cassandra . io . util . DataInputPlus . DataInputPlusAdapter ; <nl> - import org . apache . cassandra . io . util . DataOutputPlus ; <nl> + import org . apache . cassandra . io . util . DataOutputBufferFixed ; <nl> + import org . apache . cassandra . io . util . NIODataInputStream ; <nl> import org . caffinitas . ohc . OHCache ; <nl> import org . caffinitas . ohc . OHCacheBuilder ; <nl> <nl> @ @ - 123 , 20 + 121 , 20 @ @ public class OHCProvider implements CacheProvider < RowCacheKey , IRowCacheEntry > <nl> private static class KeySerializer implements org . caffinitas . ohc . CacheSerializer < RowCacheKey > <nl> { <nl> private static KeySerializer instance = new KeySerializer ( ) ; <nl> - public void serialize ( RowCacheKey rowCacheKey , DataOutput dataOutput ) throws IOException <nl> + public void serialize ( RowCacheKey rowCacheKey , ByteBuffer buf ) <nl> { <nl> - dataOutput . writeLong ( rowCacheKey . cfId . getMostSignificantBits ( ) ) ; <nl> - dataOutput . writeLong ( rowCacheKey . cfId . getLeastSignificantBits ( ) ) ; <nl> - dataOutput . writeInt ( rowCacheKey . key . length ) ; <nl> - dataOutput . write ( rowCacheKey . key ) ; <nl> + buf . putLong ( rowCacheKey . cfId . getMostSignificantBits ( ) ) ; <nl> + buf . putLong ( rowCacheKey . cfId . getLeastSignificantBits ( ) ) ; <nl> + buf . putInt ( rowCacheKey . key . length ) ; <nl> + buf . put ( rowCacheKey . key ) ; <nl> } <nl> <nl> - public RowCacheKey deserialize ( DataInput dataInput ) throws IOException <nl> + public RowCacheKey deserialize ( ByteBuffer buf ) <nl> { <nl> - long msb = dataInput . readLong ( ) ; <nl> - long lsb = dataInput . readLong ( ) ; <nl> - byte [ ] key = new byte [ dataInput . readInt ( ) ] ; <nl> - dataInput . readFully ( key ) ; <nl> + long msb = buf . getLong ( ) ; <nl> + long lsb = buf . getLong ( ) ; <nl> + byte [ ] key = new byte [ buf . getInt ( ) ] ; <nl> + buf . get ( key ) ; <nl> return new RowCacheKey ( new UUID ( msb , lsb ) , key ) ; <nl> } <nl> <nl> @ @ - 149 , 23 + 147 , 40 @ @ public class OHCProvider implements CacheProvider < RowCacheKey , IRowCacheEntry > <nl> private static class ValueSerializer implements org . caffinitas . ohc . CacheSerializer < IRowCacheEntry > <nl> { <nl> private static ValueSerializer instance = new ValueSerializer ( ) ; <nl> - public void serialize ( IRowCacheEntry entry , DataOutput out ) throws IOException <nl> + public void serialize ( IRowCacheEntry entry , ByteBuffer buf ) <nl> { <nl> assert entry ! = null ; / / unlike CFS we don ' t support nulls , since there is no need for that in the cache <nl> - boolean isSentinel = entry instanceof RowCacheSentinel ; <nl> - out . writeBoolean ( isSentinel ) ; <nl> - if ( isSentinel ) <nl> - out . writeLong ( ( ( RowCacheSentinel ) entry ) . sentinelId ) ; <nl> - else <nl> - CachedPartition . cacheSerializer . serialize ( ( CachedPartition ) entry , new DataOutputPlus . DataOutputPlusAdapter ( out ) ) ; <nl> - } <nl> - <nl> - public IRowCacheEntry deserialize ( DataInput in ) throws IOException <nl> - { <nl> - boolean isSentinel = in . readBoolean ( ) ; <nl> - if ( isSentinel ) <nl> - return new RowCacheSentinel ( in . readLong ( ) ) ; <nl> - return CachedPartition . cacheSerializer . deserialize ( new DataInputPlusAdapter ( in ) ) ; <nl> + DataOutputBufferFixed out = new DataOutputBufferFixed ( buf ) ; <nl> + try <nl> + { <nl> + boolean isSentinel = entry instanceof RowCacheSentinel ; <nl> + out . writeBoolean ( isSentinel ) ; <nl> + if ( isSentinel ) <nl> + out . writeLong ( ( ( RowCacheSentinel ) entry ) . sentinelId ) ; <nl> + else <nl> + CachedPartition . cacheSerializer . serialize ( ( CachedPartition ) entry , out ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + @ SuppressWarnings ( " resource " ) <nl> + public IRowCacheEntry deserialize ( ByteBuffer buf ) <nl> + { <nl> + try <nl> + { <nl> + NIODataInputStream in = new NIODataInputStream ( buf , false ) ; <nl> + boolean isSentinel = in . readBoolean ( ) ; <nl> + if ( isSentinel ) <nl> + return new RowCacheSentinel ( in . readLong ( ) ) ; <nl> + return CachedPartition . cacheSerializer . deserialize ( in ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> <nl> public int serializedSize ( IRowCacheEntry entry ) <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataInputPlus . java b / src / java / org / apache / cassandra / io / util / DataInputPlus . java <nl> index d4e25d6 . . a029427 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataInputPlus . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataInputPlus . java <nl> @ @ - 47 , 114 + 47 , 6 @ @ public interface DataInputPlus extends DataInput <nl> return VIntCoding . readUnsignedVInt ( this ) ; <nl> } <nl> <nl> - public static class ForwardingDataInput implements DataInput <nl> - { <nl> - protected final DataInput in ; <nl> - <nl> - public ForwardingDataInput ( DataInput in ) <nl> - { <nl> - this . in = in ; <nl> - } <nl> - <nl> - @ Override <nl> - public void readFully ( byte [ ] b ) throws IOException <nl> - { <nl> - in . readFully ( b ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void readFully ( byte [ ] b , int off , int len ) throws IOException <nl> - { <nl> - in . readFully ( b , off , len ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int skipBytes ( int n ) throws IOException <nl> - { <nl> - return in . skipBytes ( n ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean readBoolean ( ) throws IOException <nl> - { <nl> - return in . readBoolean ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public byte readByte ( ) throws IOException <nl> - { <nl> - return in . readByte ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int readUnsignedByte ( ) throws IOException <nl> - { <nl> - return in . readUnsignedByte ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public short readShort ( ) throws IOException <nl> - { <nl> - return in . readShort ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int readUnsignedShort ( ) throws IOException <nl> - { <nl> - return in . readUnsignedShort ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public char readChar ( ) throws IOException <nl> - { <nl> - return in . readChar ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public int readInt ( ) throws IOException <nl> - { <nl> - return in . readInt ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public long readLong ( ) throws IOException <nl> - { <nl> - return in . readLong ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public float readFloat ( ) throws IOException <nl> - { <nl> - return in . readFloat ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public double readDouble ( ) throws IOException <nl> - { <nl> - return in . readDouble ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String readLine ( ) throws IOException <nl> - { <nl> - return in . readLine ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String readUTF ( ) throws IOException <nl> - { <nl> - return in . readUTF ( ) ; <nl> - } <nl> - } <nl> - <nl> - public static class DataInputPlusAdapter extends ForwardingDataInput implements DataInputPlus <nl> - { <nl> - public DataInputPlusAdapter ( DataInput in ) <nl> - { <nl> - super ( in ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Wrapper around an InputStream that provides no buffering but can decode varints <nl> * / <nl> diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java <nl> index b46d23a . . 5f3f384 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java <nl> + + + b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java <nl> @ @ - 60 , 112 + 60 , 4 @ @ public interface DataOutputPlus extends DataOutput <nl> VIntCoding . writeUnsignedVInt ( i , this ) ; <nl> } <nl> <nl> - <nl> - public static class ForwardingDataOutput implements DataOutput <nl> - { <nl> - protected final DataOutput out ; <nl> - <nl> - public ForwardingDataOutput ( DataOutput out ) <nl> - { <nl> - this . out = out ; <nl> - } <nl> - <nl> - public void write ( byte [ ] b ) throws IOException <nl> - { <nl> - out . write ( b ) ; <nl> - } <nl> - <nl> - public void write ( byte [ ] b , int off , int len ) throws IOException <nl> - { <nl> - out . write ( b , off , len ) ; <nl> - } <nl> - <nl> - public void write ( int b ) throws IOException <nl> - { <nl> - out . write ( b ) ; <nl> - } <nl> - <nl> - public void writeBoolean ( boolean v ) throws IOException <nl> - { <nl> - out . writeBoolean ( v ) ; <nl> - } <nl> - <nl> - public void writeByte ( int v ) throws IOException <nl> - { <nl> - out . writeByte ( v ) ; <nl> - } <nl> - <nl> - public void writeBytes ( String s ) throws IOException <nl> - { <nl> - out . writeBytes ( s ) ; <nl> - } <nl> - <nl> - public void writeChar ( int v ) throws IOException <nl> - { <nl> - out . writeChar ( v ) ; <nl> - } <nl> - <nl> - public void writeChars ( String s ) throws IOException <nl> - { <nl> - out . writeChars ( s ) ; <nl> - } <nl> - <nl> - public void writeDouble ( double v ) throws IOException <nl> - { <nl> - out . writeDouble ( v ) ; <nl> - } <nl> - <nl> - public void writeFloat ( float v ) throws IOException <nl> - { <nl> - out . writeFloat ( v ) ; <nl> - } <nl> - <nl> - public void writeInt ( int v ) throws IOException <nl> - { <nl> - out . writeInt ( v ) ; <nl> - } <nl> - <nl> - public void writeLong ( long v ) throws IOException <nl> - { <nl> - out . writeLong ( v ) ; <nl> - } <nl> - <nl> - public void writeShort ( int v ) throws IOException <nl> - { <nl> - out . writeShort ( v ) ; <nl> - } <nl> - <nl> - public void writeUTF ( String s ) throws IOException <nl> - { <nl> - out . writeUTF ( s ) ; <nl> - } <nl> - <nl> - } <nl> - <nl> - public static class DataOutputPlusAdapter extends ForwardingDataOutput implements DataOutputPlus <nl> - { <nl> - <nl> - public DataOutputPlusAdapter ( DataOutput out ) <nl> - { <nl> - super ( out ) ; <nl> - } <nl> - <nl> - public void write ( ByteBuffer buffer ) throws IOException <nl> - { <nl> - if ( buffer . hasArray ( ) ) <nl> - out . write ( buffer . array ( ) , buffer . arrayOffset ( ) + buffer . position ( ) , buffer . remaining ( ) ) ; <nl> - else <nl> - throw new UnsupportedOperationException ( " IMPLEMENT ME " ) ; <nl> - } <nl> - <nl> - public void write ( Memory memory , long offset , long length ) throws IOException <nl> - { <nl> - throw new UnsupportedOperationException ( " IMPLEMENT ME " ) ; <nl> - } <nl> - <nl> - public < R > R applyToChannel ( Function < WritableByteChannel , R > c ) throws IOException <nl> - { <nl> - throw new UnsupportedOperationException ( " IMPLEMENT ME " ) ; <nl> - } <nl> - } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 84db73d . . bcf56b7 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 21 , 6 + 21 , 7 @ @ <nl> * fix nodetool ' s setcompactionthreshold command ( CASSANDRA - 4455 ) <nl> * Ensure compacted files are never used , to avoid counter overcount ( CASSANDRA - 4436 ) <nl> Merged from 1 . 0 : <nl> + * Push the validation of secondary index values to the SecondaryIndexManager ( CASSANDRA - 4240 ) <nl> * allow dropping columns shadowed by not - yet - expired supercolumn or row <nl> tombstones in PrecompactedRow ( CASSANDRA - 4396 ) <nl> * fix 1 . 0 . x node join to mixed version cluster , other nodes > = 1 . 1 ( CASSANDRA - 4195 ) <nl> @ @ - 156 , 6 + 157 , 8 @ @ Merged from 1 . 0 : <nl> * improve ability of STCS . getBuckets to deal with 100s of 1000s of <nl> sstables , such as when convertinb back from LCS ( CASSANDRA - 4287 ) <nl> * Oversize integer in CQL throws NumberFormatException ( CASSANDRA - 4291 ) <nl> + * fix 1 . 0 . x node join to mixed version cluster , other nodes > = 1 . 1 ( CASSANDRA - 4195 ) <nl> + * Fix LCS splitting sstable base on uncompressed size ( CASSANDRA - 4419 ) <nl> <nl> <nl> 1 . 1 . 0 - final <nl> diff - - git a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java <nl> index ba7360d . . 05fa70b 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . ByteBuffer ; <nl> <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . IColumn ; <nl> + import org . apache . cassandra . thrift . Column ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> / * * <nl> * Base class for Secondary indexes that implement a unique index per column <nl> @ @ - 60 , 4 + 62 , 10 @ @ public abstract class PerColumnSecondaryIndex extends SecondaryIndex <nl> { <nl> return getIndexName ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean validate ( Column column ) <nl> + { <nl> + return column . value . remaining ( ) < FBUtilities . MAX _ UNSIGNED _ SHORT ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java <nl> index df5a41d . . 2b05bee 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . SortedSet ; <nl> import org . apache . cassandra . db . ColumnFamily ; <nl> import org . apache . cassandra . db . DecoratedKey ; <nl> import org . apache . cassandra . db . IColumn ; <nl> + import org . apache . cassandra . thrift . Column ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> <nl> / * * <nl> @ @ - 70 , 4 + 71 , 10 @ @ public abstract class PerRowSecondaryIndex extends SecondaryIndex <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public boolean validate ( Column column ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> index 64a696d . . 3732086 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . db . index . keys . KeysIndex ; <nl> import org . apache . cassandra . io . sstable . ReducingKeyIterator ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> + import org . apache . cassandra . thrift . Column ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> import org . apache . commons . lang . StringUtils ; <nl> import org . slf4j . Logger ; <nl> @ @ - 330 , 4 + 331 , 6 @ @ public abstract class SecondaryIndex <nl> <nl> return index ; <nl> } <nl> + <nl> + public abstract boolean validate ( Column column ) ; <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index ba066e2 . . e923575 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 20 , 7 + 20 , 14 @ @ package org . apache . cassandra . db . index ; <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> - import java . util . concurrent . * ; <nl> + import java . util . concurrent . ConcurrentNavigableMap ; <nl> + import java . util . concurrent . ConcurrentSkipListMap ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . Future ; <nl> + <nl> + import org . apache . commons . lang . StringUtils ; <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . config . ConfigurationException ; <nl> @ @ - 31 , 11 + 38 , 9 @ @ import org . apache . cassandra . dht . AbstractBounds ; <nl> import org . apache . cassandra . dht . LocalToken ; <nl> import org . apache . cassandra . io . sstable . ReducingKeyIterator ; <nl> import org . apache . cassandra . io . sstable . SSTableReader ; <nl> + import org . apache . cassandra . thrift . Column ; <nl> import org . apache . cassandra . thrift . IndexExpression ; <nl> import org . apache . cassandra . utils . ByteBufferUtil ; <nl> - import org . apache . commons . lang . StringUtils ; <nl> - import org . slf4j . Logger ; <nl> - import org . slf4j . LoggerFactory ; <nl> <nl> / * * <nl> * Manages all the indexes associated with a given CFS <nl> @ @ - 606 , 4 + 611 , 10 @ @ public class SecondaryIndexManager <nl> for ( ByteBuffer colName : indexes ) <nl> indexesByColumn . get ( colName ) . setIndexRemoved ( colName ) ; <nl> } <nl> + <nl> + public boolean validate ( Column column ) <nl> + { <nl> + SecondaryIndex index = getIndexForColumn ( column . name ) ; <nl> + return index ! = null ? index . validate ( column ) : true ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> index a77bfb6 . . fe53060 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java <nl> @ @ - 441 , 13 + 441 , 13 @ @ public class ThriftValidation <nl> ( isSubColumn ? metadata . subcolumnComparator : metadata . comparator ) . getString ( column . name ) ) ) ; <nl> } <nl> <nl> - / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 for more details <nl> - if ( columnDef ! = null & & columnDef . getIndexType ( ) ! = null & & column . value . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) <nl> - throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s in CF % s of KS % s " , <nl> - column . value . remaining ( ) , <nl> - columnDef . getIndexName ( ) , <nl> - metadata . cfName , <nl> - metadata . ksName ) ) ; <nl> + / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 / 4240 for more details <nl> + if ( ! Table . open ( metadata . ksName ) . getColumnFamilyStore ( metadata . cfName ) . indexManager . validate ( column ) ) <nl> + throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s in CF % s of KS % s " , <nl> + column . value . remaining ( ) , <nl> + columnDef . getIndexName ( ) , <nl> + metadata . cfName , <nl> + metadata . ksName ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / db / SecondaryIndexColumnSizeTest . java b / test / unit / org / apache / cassandra / db / SecondaryIndexColumnSizeTest . java <nl> new file mode 100644 <nl> index 0000000 . . 89479e9 <nl> - - - / dev / null <nl> + + + b / test / unit / org / apache / cassandra / db / SecondaryIndexColumnSizeTest . java <nl> @ @ - 0 , 0 + 1 , 215 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . List ; <nl> + import java . util . Set ; <nl> + import java . util . SortedSet ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import org . apache . cassandra . config . ConfigurationException ; <nl> + import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; <nl> + import org . apache . cassandra . db . index . PerRowSecondaryIndex ; <nl> + import org . apache . cassandra . db . index . SecondaryIndexSearcher ; <nl> + import org . apache . cassandra . thrift . Column ; <nl> + import org . apache . cassandra . utils . ByteBufferUtil ; <nl> + <nl> + import static org . junit . Assert . assertFalse ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + public class SecondaryIndexColumnSizeTest <nl> + { <nl> + @ Test <nl> + public void test64kColumn ( ) <nl> + { <nl> + Column column = new Column ( ) ; <nl> + column . name = ByteBufferUtil . bytes ( " test " ) ; <nl> + <nl> + / / a byte buffer more than 64k <nl> + ByteBuffer buffer = ByteBuffer . allocate ( 1024 * 65 ) ; <nl> + buffer . clear ( ) ; <nl> + <nl> + / / read more than 64k <nl> + for ( int i = 0 ; i < 1024 * 64 / 4 + 1 ; i + + ) <nl> + buffer . putInt ( 0 ) ; <nl> + <nl> + / / for read <nl> + buffer . flip ( ) ; <nl> + column . value = buffer ; <nl> + <nl> + MockRowIndex mockRowIndex = new MockRowIndex ( ) ; <nl> + MockColumnIndex mockColumnIndex = new MockColumnIndex ( ) ; <nl> + <nl> + assertTrue ( mockRowIndex . validate ( column ) ) ; <nl> + assertFalse ( mockColumnIndex . validate ( column ) ) ; <nl> + <nl> + / / test less than 64k value <nl> + buffer . flip ( ) ; <nl> + buffer . clear ( ) ; <nl> + buffer . putInt ( 20 ) ; <nl> + buffer . flip ( ) ; <nl> + <nl> + assertTrue ( mockRowIndex . validate ( column ) ) ; <nl> + assertTrue ( mockColumnIndex . validate ( column ) ) ; <nl> + } <nl> + <nl> + private class MockRowIndex extends PerRowSecondaryIndex <nl> + { <nl> + @ Override <nl> + public void applyIndexUpdates ( ByteBuffer rowKey , ColumnFamily cf , SortedSet < ByteBuffer > mutatedIndexedColumns , ColumnFamily oldIndexedColumns ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void init ( ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void validateOptions ( ) throws ConfigurationException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public String getIndexName ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + protected SecondaryIndexSearcher createSecondaryIndexSearcher ( Set < ByteBuffer > columns ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void forceBlockingFlush ( ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public long getLiveSize ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public ColumnFamilyStore getIndexCfs ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void removeIndex ( ByteBuffer columnName ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void invalidate ( ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void truncate ( long truncatedAt ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void deleteFromIndex ( DecoratedKey < ? > key , List < IColumn > indexedColumnsInRow ) <nl> + { <nl> + } <nl> + <nl> + } <nl> + <nl> + <nl> + private class MockColumnIndex extends PerColumnSecondaryIndex <nl> + { <nl> + @ Override <nl> + public void init ( ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void validateOptions ( ) throws ConfigurationException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public String getIndexName ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + protected SecondaryIndexSearcher createSecondaryIndexSearcher ( Set < ByteBuffer > columns ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void forceBlockingFlush ( ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public long getLiveSize ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public ColumnFamilyStore getIndexCfs ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void removeIndex ( ByteBuffer columnName ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void invalidate ( ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void truncate ( long truncatedAt ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void deleteColumn ( DecoratedKey valueKey , ByteBuffer rowKey , IColumn col ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void insertColumn ( DecoratedKey valueKey , ByteBuffer rowKey , IColumn col ) throws IOException <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public void updateColumn ( DecoratedKey valueKey , ByteBuffer rowKey , IColumn col ) throws IOException <nl> + { <nl> + } <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java <nl> index 9c131f9 . . af0e668 100644 <nl> - - - a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java <nl> + + + b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java <nl> @ @ - 21 , 8 + 21 , 6 @ @ package org . apache . cassandra . thrift ; <nl> * / <nl> <nl> <nl> - import java . nio . ByteBuffer ; <nl> - <nl> import org . junit . Test ; <nl> <nl> import org . apache . cassandra . SchemaLoader ; <nl> @ @ - 35 , 7 + 33 , 6 @ @ import org . apache . cassandra . db . marshal . AsciiType ; <nl> import org . apache . cassandra . db . marshal . UTF8Type ; <nl> import org . apache . cassandra . locator . LocalStrategy ; <nl> import org . apache . cassandra . locator . NetworkTopologyStrategy ; <nl> - import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class ThriftValidationTest extends SchemaLoader <nl> { <nl> @ @ - 52 , 55 + 49 , 6 @ @ public class ThriftValidationTest extends SchemaLoader <nl> } <nl> <nl> @ Test <nl> - public void testColumnValueSizeForIndexedColumn ( ) throws ConfigurationException , InvalidRequestException <nl> - { <nl> - CfDef cfDef = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) . toThrift ( ) ; <nl> - ByteBuffer columnName = AsciiType . instance . fromString ( " indexed " ) ; <nl> - <nl> - / / add an indexed column definition <nl> - cfDef . addToColumn _ metadata ( new ColumnDef ( columnName , UTF8Type . class . getCanonicalName ( ) ) <nl> - . setIndex _ type ( IndexType . KEYS ) <nl> - . setIndex _ name ( " indexed _ col " ) ) ; <nl> - <nl> - CFMetaData metaData = CFMetaData . fromThrift ( cfDef ) ; <nl> - <nl> - Column column = new Column ( columnName ) <nl> - . setValue ( new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 1 ] ) <nl> - . setTimestamp ( System . currentTimeMillis ( ) ) ; <nl> - <nl> - boolean gotException = false ; <nl> - <nl> - try <nl> - { <nl> - / / this run should throw an exception <nl> - ThriftValidation . validateColumnData ( metaData , column , false ) ; <nl> - } <nl> - catch ( InvalidRequestException e ) <nl> - { <nl> - gotException = true ; <nl> - } <nl> - <nl> - assert gotException : " expected InvalidRequestException but not received . " ; <nl> - <nl> - / / change value to be less than unsigned short size <nl> - column . setValue ( new byte [ 12 ] ) ; <nl> - <nl> - gotException = false ; / / reset flag <nl> - <nl> - try <nl> - { <nl> - / / this run should run clean <nl> - ThriftValidation . validateColumnData ( metaData , column , false ) ; <nl> - } <nl> - catch ( InvalidRequestException e ) <nl> - { <nl> - gotException = true ; <nl> - } <nl> - <nl> - assert ! gotException : " got unexpected InvalidRequestException " ; <nl> - } <nl> - <nl> - @ Test <nl> public void testColumnNameEqualToKeyAlias ( ) <nl> { <nl> CFMetaData metaData = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) ;

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index 88c2e94 . . 0362eb4 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 406 , 7 + 406 , 8 @ @ 
 < dependency groupId = " com . datastax . cassandra " artifactId = " cassandra - driver - core " version = " 2 . 1 . 5 " classifier = " shaded " / > 
 - - > 
 < dependency groupId = " org . eclipse . jdt . core . compiler " artifactId = " ecj " version = " 4 . 4 . 2 " / > 
 - < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " version = " 0 . 3 . 4 " / > 
 + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " version = " 0 . 4 " / > 
 + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core - j8 " version = " 0 . 4 " / > 
 < dependency groupId = " net . ju - n . compile - command - annotations " artifactId = " compile - command - annotations " version = " 1 . 2 . 0 " / > 
 < dependency groupId = " org . fusesource " artifactId = " sigar " version = " 1 . 6 . 4 " > 
 	 < exclusion groupId = " log4j " artifactId = " log4j " / > 
 @ @ - 460 , 7 + 461 , 8 @ @ 
 < dependency groupId = " com . datastax . cassandra " artifactId = " cassandra - driver - core " classifier = " shaded " / > 
 - - > 
 < dependency groupId = " org . eclipse . jdt . core . compiler " artifactId = " ecj " / > 
 - < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " / > 
 + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core " version = " 0 . 4 " / > 
 + < dependency groupId = " org . caffinitas . ohc " artifactId = " ohc - core - j8 " version = " 0 . 4 " / > 
 < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - core " / > 
 < dependency groupId = " org . openjdk . jmh " artifactId = " jmh - generator - annprocess " / > 
 < dependency groupId = " net . ju - n . compile - command - annotations " artifactId = " compile - command - annotations " / > 
 diff - - git a / lib / ohc - core - 0 . 3 . 4 . jar b / lib / ohc - core - 0 . 3 . 4 . jar 
 deleted file mode 100644 
 index 0773e78 . . 0000000 
 Binary files a / lib / ohc - core - 0 . 3 . 4 . jar and / dev / null differ 
 diff - - git a / lib / ohc - core - 0 . 4 . jar b / lib / ohc - core - 0 . 4 . jar 
 new file mode 100644 
 index 0000000 . . 1b1b939 
 Binary files / dev / null and b / lib / ohc - core - 0 . 4 . jar differ 
 diff - - git a / lib / ohc - core - j8 - 0 . 3 . 4 . jar b / lib / ohc - core - j8 - 0 . 3 . 4 . jar 
 deleted file mode 100644 
 index faa102f . . 0000000 
 Binary files a / lib / ohc - core - j8 - 0 . 3 . 4 . jar and / dev / null differ 
 diff - - git a / lib / ohc - core - j8 - 0 . 4 . jar b / lib / ohc - core - j8 - 0 . 4 . jar 
 new file mode 100644 
 index 0000000 . . f97ddf5 
 Binary files / dev / null and b / lib / ohc - core - j8 - 0 . 4 . jar differ 
 diff - - git a / src / java / org / apache / cassandra / cache / OHCProvider . java b / src / java / org / apache / cassandra / cache / OHCProvider . java 
 index 46cbb8b . . 21fc7c7 100644 
 - - - a / src / java / org / apache / cassandra / cache / OHCProvider . java 
 + + + b / src / java / org / apache / cassandra / cache / OHCProvider . java 
 @ @ - 17 , 18 + 17 , 16 @ @ 
 * / 
 package org . apache . cassandra . cache ; 
 
 - import java . io . DataInput ; 
 - import java . io . DataOutput ; 
 import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 import java . util . Iterator ; 
 import java . util . UUID ; 
 
 - 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . db . TypeSizes ; 
 import org . apache . cassandra . db . partitions . CachedPartition ; 
 - import org . apache . cassandra . io . util . DataInputPlus . DataInputPlusAdapter ; 
 - import org . apache . cassandra . io . util . DataOutputPlus ; 
 + import org . apache . cassandra . io . util . DataOutputBufferFixed ; 
 + import org . apache . cassandra . io . util . NIODataInputStream ; 
 import org . caffinitas . ohc . OHCache ; 
 import org . caffinitas . ohc . OHCacheBuilder ; 
 
 @ @ - 123 , 20 + 121 , 20 @ @ public class OHCProvider implements CacheProvider < RowCacheKey , IRowCacheEntry > 
 private static class KeySerializer implements org . caffinitas . ohc . CacheSerializer < RowCacheKey > 
 { 
 private static KeySerializer instance = new KeySerializer ( ) ; 
 - public void serialize ( RowCacheKey rowCacheKey , DataOutput dataOutput ) throws IOException 
 + public void serialize ( RowCacheKey rowCacheKey , ByteBuffer buf ) 
 { 
 - dataOutput . writeLong ( rowCacheKey . cfId . getMostSignificantBits ( ) ) ; 
 - dataOutput . writeLong ( rowCacheKey . cfId . getLeastSignificantBits ( ) ) ; 
 - dataOutput . writeInt ( rowCacheKey . key . length ) ; 
 - dataOutput . write ( rowCacheKey . key ) ; 
 + buf . putLong ( rowCacheKey . cfId . getMostSignificantBits ( ) ) ; 
 + buf . putLong ( rowCacheKey . cfId . getLeastSignificantBits ( ) ) ; 
 + buf . putInt ( rowCacheKey . key . length ) ; 
 + buf . put ( rowCacheKey . key ) ; 
 } 
 
 - public RowCacheKey deserialize ( DataInput dataInput ) throws IOException 
 + public RowCacheKey deserialize ( ByteBuffer buf ) 
 { 
 - long msb = dataInput . readLong ( ) ; 
 - long lsb = dataInput . readLong ( ) ; 
 - byte [ ] key = new byte [ dataInput . readInt ( ) ] ; 
 - dataInput . readFully ( key ) ; 
 + long msb = buf . getLong ( ) ; 
 + long lsb = buf . getLong ( ) ; 
 + byte [ ] key = new byte [ buf . getInt ( ) ] ; 
 + buf . get ( key ) ; 
 return new RowCacheKey ( new UUID ( msb , lsb ) , key ) ; 
 } 
 
 @ @ - 149 , 23 + 147 , 40 @ @ public class OHCProvider implements CacheProvider < RowCacheKey , IRowCacheEntry > 
 private static class ValueSerializer implements org . caffinitas . ohc . CacheSerializer < IRowCacheEntry > 
 { 
 private static ValueSerializer instance = new ValueSerializer ( ) ; 
 - public void serialize ( IRowCacheEntry entry , DataOutput out ) throws IOException 
 + public void serialize ( IRowCacheEntry entry , ByteBuffer buf ) 
 { 
 assert entry ! = null ; / / unlike CFS we don ' t support nulls , since there is no need for that in the cache 
 - boolean isSentinel = entry instanceof RowCacheSentinel ; 
 - out . writeBoolean ( isSentinel ) ; 
 - if ( isSentinel ) 
 - out . writeLong ( ( ( RowCacheSentinel ) entry ) . sentinelId ) ; 
 - else 
 - CachedPartition . cacheSerializer . serialize ( ( CachedPartition ) entry , new DataOutputPlus . DataOutputPlusAdapter ( out ) ) ; 
 - } 
 - 
 - public IRowCacheEntry deserialize ( DataInput in ) throws IOException 
 - { 
 - boolean isSentinel = in . readBoolean ( ) ; 
 - if ( isSentinel ) 
 - return new RowCacheSentinel ( in . readLong ( ) ) ; 
 - return CachedPartition . cacheSerializer . deserialize ( new DataInputPlusAdapter ( in ) ) ; 
 + DataOutputBufferFixed out = new DataOutputBufferFixed ( buf ) ; 
 + try 
 + { 
 + boolean isSentinel = entry instanceof RowCacheSentinel ; 
 + out . writeBoolean ( isSentinel ) ; 
 + if ( isSentinel ) 
 + out . writeLong ( ( ( RowCacheSentinel ) entry ) . sentinelId ) ; 
 + else 
 + CachedPartition . cacheSerializer . serialize ( ( CachedPartition ) entry , out ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + @ SuppressWarnings ( " resource " ) 
 + public IRowCacheEntry deserialize ( ByteBuffer buf ) 
 + { 
 + try 
 + { 
 + NIODataInputStream in = new NIODataInputStream ( buf , false ) ; 
 + boolean isSentinel = in . readBoolean ( ) ; 
 + if ( isSentinel ) 
 + return new RowCacheSentinel ( in . readLong ( ) ) ; 
 + return CachedPartition . cacheSerializer . deserialize ( in ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 
 public int serializedSize ( IRowCacheEntry entry ) 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataInputPlus . java b / src / java / org / apache / cassandra / io / util / DataInputPlus . java 
 index d4e25d6 . . a029427 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataInputPlus . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataInputPlus . java 
 @ @ - 47 , 114 + 47 , 6 @ @ public interface DataInputPlus extends DataInput 
 return VIntCoding . readUnsignedVInt ( this ) ; 
 } 
 
 - public static class ForwardingDataInput implements DataInput 
 - { 
 - protected final DataInput in ; 
 - 
 - public ForwardingDataInput ( DataInput in ) 
 - { 
 - this . in = in ; 
 - } 
 - 
 - @ Override 
 - public void readFully ( byte [ ] b ) throws IOException 
 - { 
 - in . readFully ( b ) ; 
 - } 
 - 
 - @ Override 
 - public void readFully ( byte [ ] b , int off , int len ) throws IOException 
 - { 
 - in . readFully ( b , off , len ) ; 
 - } 
 - 
 - @ Override 
 - public int skipBytes ( int n ) throws IOException 
 - { 
 - return in . skipBytes ( n ) ; 
 - } 
 - 
 - @ Override 
 - public boolean readBoolean ( ) throws IOException 
 - { 
 - return in . readBoolean ( ) ; 
 - } 
 - 
 - @ Override 
 - public byte readByte ( ) throws IOException 
 - { 
 - return in . readByte ( ) ; 
 - } 
 - 
 - @ Override 
 - public int readUnsignedByte ( ) throws IOException 
 - { 
 - return in . readUnsignedByte ( ) ; 
 - } 
 - 
 - @ Override 
 - public short readShort ( ) throws IOException 
 - { 
 - return in . readShort ( ) ; 
 - } 
 - 
 - @ Override 
 - public int readUnsignedShort ( ) throws IOException 
 - { 
 - return in . readUnsignedShort ( ) ; 
 - } 
 - 
 - @ Override 
 - public char readChar ( ) throws IOException 
 - { 
 - return in . readChar ( ) ; 
 - } 
 - 
 - @ Override 
 - public int readInt ( ) throws IOException 
 - { 
 - return in . readInt ( ) ; 
 - } 
 - 
 - @ Override 
 - public long readLong ( ) throws IOException 
 - { 
 - return in . readLong ( ) ; 
 - } 
 - 
 - @ Override 
 - public float readFloat ( ) throws IOException 
 - { 
 - return in . readFloat ( ) ; 
 - } 
 - 
 - @ Override 
 - public double readDouble ( ) throws IOException 
 - { 
 - return in . readDouble ( ) ; 
 - } 
 - 
 - @ Override 
 - public String readLine ( ) throws IOException 
 - { 
 - return in . readLine ( ) ; 
 - } 
 - 
 - @ Override 
 - public String readUTF ( ) throws IOException 
 - { 
 - return in . readUTF ( ) ; 
 - } 
 - } 
 - 
 - public static class DataInputPlusAdapter extends ForwardingDataInput implements DataInputPlus 
 - { 
 - public DataInputPlusAdapter ( DataInput in ) 
 - { 
 - super ( in ) ; 
 - } 
 - } 
 - 
 / * * 
 * Wrapper around an InputStream that provides no buffering but can decode varints 
 * / 
 diff - - git a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java 
 index b46d23a . . 5f3f384 100644 
 - - - a / src / java / org / apache / cassandra / io / util / DataOutputPlus . java 
 + + + b / src / java / org / apache / cassandra / io / util / DataOutputPlus . java 
 @ @ - 60 , 112 + 60 , 4 @ @ public interface DataOutputPlus extends DataOutput 
 VIntCoding . writeUnsignedVInt ( i , this ) ; 
 } 
 
 - 
 - public static class ForwardingDataOutput implements DataOutput 
 - { 
 - protected final DataOutput out ; 
 - 
 - public ForwardingDataOutput ( DataOutput out ) 
 - { 
 - this . out = out ; 
 - } 
 - 
 - public void write ( byte [ ] b ) throws IOException 
 - { 
 - out . write ( b ) ; 
 - } 
 - 
 - public void write ( byte [ ] b , int off , int len ) throws IOException 
 - { 
 - out . write ( b , off , len ) ; 
 - } 
 - 
 - public void write ( int b ) throws IOException 
 - { 
 - out . write ( b ) ; 
 - } 
 - 
 - public void writeBoolean ( boolean v ) throws IOException 
 - { 
 - out . writeBoolean ( v ) ; 
 - } 
 - 
 - public void writeByte ( int v ) throws IOException 
 - { 
 - out . writeByte ( v ) ; 
 - } 
 - 
 - public void writeBytes ( String s ) throws IOException 
 - { 
 - out . writeBytes ( s ) ; 
 - } 
 - 
 - public void writeChar ( int v ) throws IOException 
 - { 
 - out . writeChar ( v ) ; 
 - } 
 - 
 - public void writeChars ( String s ) throws IOException 
 - { 
 - out . writeChars ( s ) ; 
 - } 
 - 
 - public void writeDouble ( double v ) throws IOException 
 - { 
 - out . writeDouble ( v ) ; 
 - } 
 - 
 - public void writeFloat ( float v ) throws IOException 
 - { 
 - out . writeFloat ( v ) ; 
 - } 
 - 
 - public void writeInt ( int v ) throws IOException 
 - { 
 - out . writeInt ( v ) ; 
 - } 
 - 
 - public void writeLong ( long v ) throws IOException 
 - { 
 - out . writeLong ( v ) ; 
 - } 
 - 
 - public void writeShort ( int v ) throws IOException 
 - { 
 - out . writeShort ( v ) ; 
 - } 
 - 
 - public void writeUTF ( String s ) throws IOException 
 - { 
 - out . writeUTF ( s ) ; 
 - } 
 - 
 - } 
 - 
 - public static class DataOutputPlusAdapter extends ForwardingDataOutput implements DataOutputPlus 
 - { 
 - 
 - public DataOutputPlusAdapter ( DataOutput out ) 
 - { 
 - super ( out ) ; 
 - } 
 - 
 - public void write ( ByteBuffer buffer ) throws IOException 
 - { 
 - if ( buffer . hasArray ( ) ) 
 - out . write ( buffer . array ( ) , buffer . arrayOffset ( ) + buffer . position ( ) , buffer . remaining ( ) ) ; 
 - else 
 - throw new UnsupportedOperationException ( " IMPLEMENT ME " ) ; 
 - } 
 - 
 - public void write ( Memory memory , long offset , long length ) throws IOException 
 - { 
 - throw new UnsupportedOperationException ( " IMPLEMENT ME " ) ; 
 - } 
 - 
 - public < R > R applyToChannel ( Function < WritableByteChannel , R > c ) throws IOException 
 - { 
 - throw new UnsupportedOperationException ( " IMPLEMENT ME " ) ; 
 - } 
 - } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 84db73d . . bcf56b7 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 21 , 6 + 21 , 7 @ @ 
 * fix nodetool ' s setcompactionthreshold command ( CASSANDRA - 4455 ) 
 * Ensure compacted files are never used , to avoid counter overcount ( CASSANDRA - 4436 ) 
 Merged from 1 . 0 : 
 + * Push the validation of secondary index values to the SecondaryIndexManager ( CASSANDRA - 4240 ) 
 * allow dropping columns shadowed by not - yet - expired supercolumn or row 
 tombstones in PrecompactedRow ( CASSANDRA - 4396 ) 
 * fix 1 . 0 . x node join to mixed version cluster , other nodes > = 1 . 1 ( CASSANDRA - 4195 ) 
 @ @ - 156 , 6 + 157 , 8 @ @ Merged from 1 . 0 : 
 * improve ability of STCS . getBuckets to deal with 100s of 1000s of 
 sstables , such as when convertinb back from LCS ( CASSANDRA - 4287 ) 
 * Oversize integer in CQL throws NumberFormatException ( CASSANDRA - 4291 ) 
 + * fix 1 . 0 . x node join to mixed version cluster , other nodes > = 1 . 1 ( CASSANDRA - 4195 ) 
 + * Fix LCS splitting sstable base on uncompressed size ( CASSANDRA - 4419 ) 
 
 
 1 . 1 . 0 - final 
 diff - - git a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java 
 index ba7360d . . 05fa70b 100644 
 - - - a / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / PerColumnSecondaryIndex . java 
 @ @ - 22 , 6 + 22 , 8 @ @ import java . nio . ByteBuffer ; 
 
 import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . IColumn ; 
 + import org . apache . cassandra . thrift . Column ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 / * * 
 * Base class for Secondary indexes that implement a unique index per column 
 @ @ - 60 , 4 + 62 , 10 @ @ public abstract class PerColumnSecondaryIndex extends SecondaryIndex 
 { 
 return getIndexName ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean validate ( Column column ) 
 + { 
 + return column . value . remaining ( ) < FBUtilities . MAX _ UNSIGNED _ SHORT ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java 
 index df5a41d . . 2b05bee 100644 
 - - - a / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / PerRowSecondaryIndex . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . SortedSet ; 
 import org . apache . cassandra . db . ColumnFamily ; 
 import org . apache . cassandra . db . DecoratedKey ; 
 import org . apache . cassandra . db . IColumn ; 
 + import org . apache . cassandra . thrift . Column ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 
 / * * 
 @ @ - 70 , 4 + 71 , 10 @ @ public abstract class PerRowSecondaryIndex extends SecondaryIndex 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 + 
 + @ Override 
 + public boolean validate ( Column column ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 index 64a696d . . 3732086 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndex . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . db . index . keys . KeysIndex ; 
 import org . apache . cassandra . io . sstable . ReducingKeyIterator ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 + import org . apache . cassandra . thrift . Column ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 import org . apache . commons . lang . StringUtils ; 
 import org . slf4j . Logger ; 
 @ @ - 330 , 4 + 331 , 6 @ @ public abstract class SecondaryIndex 
 
 return index ; 
 } 
 + 
 + public abstract boolean validate ( Column column ) ; 
 } 
 diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index ba066e2 . . e923575 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 20 , 7 + 20 , 14 @ @ package org . apache . cassandra . db . index ; 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 - import java . util . concurrent . * ; 
 + import java . util . concurrent . ConcurrentNavigableMap ; 
 + import java . util . concurrent . ConcurrentSkipListMap ; 
 + import java . util . concurrent . ExecutionException ; 
 + import java . util . concurrent . Future ; 
 + 
 + import org . apache . commons . lang . StringUtils ; 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . config . ConfigurationException ; 
 @ @ - 31 , 11 + 38 , 9 @ @ import org . apache . cassandra . dht . AbstractBounds ; 
 import org . apache . cassandra . dht . LocalToken ; 
 import org . apache . cassandra . io . sstable . ReducingKeyIterator ; 
 import org . apache . cassandra . io . sstable . SSTableReader ; 
 + import org . apache . cassandra . thrift . Column ; 
 import org . apache . cassandra . thrift . IndexExpression ; 
 import org . apache . cassandra . utils . ByteBufferUtil ; 
 - import org . apache . commons . lang . StringUtils ; 
 - import org . slf4j . Logger ; 
 - import org . slf4j . LoggerFactory ; 
 
 / * * 
 * Manages all the indexes associated with a given CFS 
 @ @ - 606 , 4 + 611 , 10 @ @ public class SecondaryIndexManager 
 for ( ByteBuffer colName : indexes ) 
 indexesByColumn . get ( colName ) . setIndexRemoved ( colName ) ; 
 } 
 + 
 + public boolean validate ( Column column ) 
 + { 
 + SecondaryIndex index = getIndexForColumn ( column . name ) ; 
 + return index ! = null ? index . validate ( column ) : true ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftValidation . java b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 index a77bfb6 . . fe53060 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftValidation . java 
 @ @ - 441 , 13 + 441 , 13 @ @ public class ThriftValidation 
 ( isSubColumn ? metadata . subcolumnComparator : metadata . comparator ) . getString ( column . name ) ) ) ; 
 } 
 
 - / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 for more details 
 - if ( columnDef ! = null & & columnDef . getIndexType ( ) ! = null & & column . value . remaining ( ) > FBUtilities . MAX _ UNSIGNED _ SHORT ) 
 - throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s in CF % s of KS % s " , 
 - column . value . remaining ( ) , 
 - columnDef . getIndexName ( ) , 
 - metadata . cfName , 
 - metadata . ksName ) ) ; 
 + / / Indexed column values cannot be larger than 64K . See CASSANDRA - 3057 / 4240 for more details 
 + if ( ! Table . open ( metadata . ksName ) . getColumnFamilyStore ( metadata . cfName ) . indexManager . validate ( column ) ) 
 + throw new InvalidRequestException ( String . format ( " Can ' t index column value of size % d for index % s in CF % s of KS % s " , 
 + column . value . remaining ( ) , 
 + columnDef . getIndexName ( ) , 
 + metadata . cfName , 
 + metadata . ksName ) ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / db / SecondaryIndexColumnSizeTest . java b / test / unit / org / apache / cassandra / db / SecondaryIndexColumnSizeTest . java 
 new file mode 100644 
 index 0000000 . . 89479e9 
 - - - / dev / null 
 + + + b / test / unit / org / apache / cassandra / db / SecondaryIndexColumnSizeTest . java 
 @ @ - 0 , 0 + 1 , 215 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . db ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . ByteBuffer ; 
 + import java . util . List ; 
 + import java . util . Set ; 
 + import java . util . SortedSet ; 
 + 
 + import org . junit . Test ; 
 + 
 + import org . apache . cassandra . config . ConfigurationException ; 
 + import org . apache . cassandra . db . index . PerColumnSecondaryIndex ; 
 + import org . apache . cassandra . db . index . PerRowSecondaryIndex ; 
 + import org . apache . cassandra . db . index . SecondaryIndexSearcher ; 
 + import org . apache . cassandra . thrift . Column ; 
 + import org . apache . cassandra . utils . ByteBufferUtil ; 
 + 
 + import static org . junit . Assert . assertFalse ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + public class SecondaryIndexColumnSizeTest 
 + { 
 + @ Test 
 + public void test64kColumn ( ) 
 + { 
 + Column column = new Column ( ) ; 
 + column . name = ByteBufferUtil . bytes ( " test " ) ; 
 + 
 + / / a byte buffer more than 64k 
 + ByteBuffer buffer = ByteBuffer . allocate ( 1024 * 65 ) ; 
 + buffer . clear ( ) ; 
 + 
 + / / read more than 64k 
 + for ( int i = 0 ; i < 1024 * 64 / 4 + 1 ; i + + ) 
 + buffer . putInt ( 0 ) ; 
 + 
 + / / for read 
 + buffer . flip ( ) ; 
 + column . value = buffer ; 
 + 
 + MockRowIndex mockRowIndex = new MockRowIndex ( ) ; 
 + MockColumnIndex mockColumnIndex = new MockColumnIndex ( ) ; 
 + 
 + assertTrue ( mockRowIndex . validate ( column ) ) ; 
 + assertFalse ( mockColumnIndex . validate ( column ) ) ; 
 + 
 + / / test less than 64k value 
 + buffer . flip ( ) ; 
 + buffer . clear ( ) ; 
 + buffer . putInt ( 20 ) ; 
 + buffer . flip ( ) ; 
 + 
 + assertTrue ( mockRowIndex . validate ( column ) ) ; 
 + assertTrue ( mockColumnIndex . validate ( column ) ) ; 
 + } 
 + 
 + private class MockRowIndex extends PerRowSecondaryIndex 
 + { 
 + @ Override 
 + public void applyIndexUpdates ( ByteBuffer rowKey , ColumnFamily cf , SortedSet < ByteBuffer > mutatedIndexedColumns , ColumnFamily oldIndexedColumns ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public void init ( ) 
 + { 
 + } 
 + 
 + @ Override 
 + public void validateOptions ( ) throws ConfigurationException 
 + { 
 + } 
 + 
 + @ Override 
 + public String getIndexName ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + protected SecondaryIndexSearcher createSecondaryIndexSearcher ( Set < ByteBuffer > columns ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void forceBlockingFlush ( ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public long getLiveSize ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + @ Override 
 + public ColumnFamilyStore getIndexCfs ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void removeIndex ( ByteBuffer columnName ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public void invalidate ( ) 
 + { 
 + } 
 + 
 + @ Override 
 + public void truncate ( long truncatedAt ) 
 + { 
 + } 
 + 
 + @ Override 
 + public void deleteFromIndex ( DecoratedKey < ? > key , List < IColumn > indexedColumnsInRow ) 
 + { 
 + } 
 + 
 + } 
 + 
 + 
 + private class MockColumnIndex extends PerColumnSecondaryIndex 
 + { 
 + @ Override 
 + public void init ( ) 
 + { 
 + } 
 + 
 + @ Override 
 + public void validateOptions ( ) throws ConfigurationException 
 + { 
 + } 
 + 
 + @ Override 
 + public String getIndexName ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + protected SecondaryIndexSearcher createSecondaryIndexSearcher ( Set < ByteBuffer > columns ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void forceBlockingFlush ( ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public long getLiveSize ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + @ Override 
 + public ColumnFamilyStore getIndexCfs ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void removeIndex ( ByteBuffer columnName ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public void invalidate ( ) 
 + { 
 + } 
 + 
 + @ Override 
 + public void truncate ( long truncatedAt ) 
 + { 
 + } 
 + 
 + @ Override 
 + public void deleteColumn ( DecoratedKey valueKey , ByteBuffer rowKey , IColumn col ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public void insertColumn ( DecoratedKey valueKey , ByteBuffer rowKey , IColumn col ) throws IOException 
 + { 
 + } 
 + 
 + @ Override 
 + public void updateColumn ( DecoratedKey valueKey , ByteBuffer rowKey , IColumn col ) throws IOException 
 + { 
 + } 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java 
 index 9c131f9 . . af0e668 100644 
 - - - a / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java 
 + + + b / test / unit / org / apache / cassandra / thrift / ThriftValidationTest . java 
 @ @ - 21 , 8 + 21 , 6 @ @ package org . apache . cassandra . thrift ; 
 * / 
 
 
 - import java . nio . ByteBuffer ; 
 - 
 import org . junit . Test ; 
 
 import org . apache . cassandra . SchemaLoader ; 
 @ @ - 35 , 7 + 33 , 6 @ @ import org . apache . cassandra . db . marshal . AsciiType ; 
 import org . apache . cassandra . db . marshal . UTF8Type ; 
 import org . apache . cassandra . locator . LocalStrategy ; 
 import org . apache . cassandra . locator . NetworkTopologyStrategy ; 
 - import org . apache . cassandra . utils . FBUtilities ; 
 
 public class ThriftValidationTest extends SchemaLoader 
 { 
 @ @ - 52 , 55 + 49 , 6 @ @ public class ThriftValidationTest extends SchemaLoader 
 } 
 
 @ Test 
 - public void testColumnValueSizeForIndexedColumn ( ) throws ConfigurationException , InvalidRequestException 
 - { 
 - CfDef cfDef = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) . toThrift ( ) ; 
 - ByteBuffer columnName = AsciiType . instance . fromString ( " indexed " ) ; 
 - 
 - / / add an indexed column definition 
 - cfDef . addToColumn _ metadata ( new ColumnDef ( columnName , UTF8Type . class . getCanonicalName ( ) ) 
 - . setIndex _ type ( IndexType . KEYS ) 
 - . setIndex _ name ( " indexed _ col " ) ) ; 
 - 
 - CFMetaData metaData = CFMetaData . fromThrift ( cfDef ) ; 
 - 
 - Column column = new Column ( columnName ) 
 - . setValue ( new byte [ FBUtilities . MAX _ UNSIGNED _ SHORT + 1 ] ) 
 - . setTimestamp ( System . currentTimeMillis ( ) ) ; 
 - 
 - boolean gotException = false ; 
 - 
 - try 
 - { 
 - / / this run should throw an exception 
 - ThriftValidation . validateColumnData ( metaData , column , false ) ; 
 - } 
 - catch ( InvalidRequestException e ) 
 - { 
 - gotException = true ; 
 - } 
 - 
 - assert gotException : " expected InvalidRequestException but not received . " ; 
 - 
 - / / change value to be less than unsigned short size 
 - column . setValue ( new byte [ 12 ] ) ; 
 - 
 - gotException = false ; / / reset flag 
 - 
 - try 
 - { 
 - / / this run should run clean 
 - ThriftValidation . validateColumnData ( metaData , column , false ) ; 
 - } 
 - catch ( InvalidRequestException e ) 
 - { 
 - gotException = true ; 
 - } 
 - 
 - assert ! gotException : " got unexpected InvalidRequestException " ; 
 - } 
 - 
 - @ Test 
 public void testColumnNameEqualToKeyAlias ( ) 
 { 
 CFMetaData metaData = Schema . instance . getCFMetaData ( " Keyspace1 " , " Standard1 " ) ;
