BLEU SCORE: 0.03283637368030199

TEST MSG: Avoid anticompaction after non - global repairs
GENERATED MSG: Wait for all repair sessions to finish

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> index c0855c4 . . 796f135 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> import org . apache . cassandra . db . Keyspace ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . dht . Bounds ; <nl> import org . apache . cassandra . dht . LocalPartitioner ; <nl> @ @ - 41 , 6 + 42 , 7 @ @ import org . apache . cassandra . net . MessageOut ; <nl> import org . apache . cassandra . net . MessagingService ; <nl> import org . apache . cassandra . repair . messages . * ; <nl> import org . apache . cassandra . service . ActiveRepairService ; <nl> + import org . apache . cassandra . utils . CassandraVersion ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> / * * <nl> @ @ - 59 , 6 + 61 , 7 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > <nl> { <nl> switch ( message . payload . messageType ) <nl> { <nl> + case PREPARE _ GLOBAL _ MESSAGE : <nl> case PREPARE _ MESSAGE : <nl> PrepareMessage prepareMessage = ( PrepareMessage ) message . payload ; <nl> logger . debug ( " Preparing , { } " , prepareMessage ) ; <nl> @ @ - 69 , 10 + 72 , 17 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > <nl> ColumnFamilyStore columnFamilyStore = Keyspace . open ( kscf . left ) . getColumnFamilyStore ( kscf . right ) ; <nl> columnFamilyStores . add ( columnFamilyStore ) ; <nl> } <nl> + CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( message . from ) ; <nl> + / / note that we default isGlobal to true since old version always default to true : <nl> + boolean isGlobal = peerVersion = = null | | <nl> + peerVersion . compareTo ( ActiveRepairService . SUPPORTS _ GLOBAL _ PREPARE _ FLAG _ VERSION ) < 0 | | <nl> + message . payload . messageType . equals ( RepairMessage . Type . PREPARE _ GLOBAL _ MESSAGE ) ; <nl> + logger . debug ( " Received prepare message : global message = { } , peerVersion = { } , " , message . payload . messageType . equals ( RepairMessage . Type . PREPARE _ GLOBAL _ MESSAGE ) , peerVersion ) ; <nl> ActiveRepairService . instance . registerParentRepairSession ( prepareMessage . parentRepairSession , <nl> columnFamilyStores , <nl> prepareMessage . ranges , <nl> - prepareMessage . isIncremental ) ; <nl> + prepareMessage . isIncremental , <nl> + isGlobal ) ; <nl> MessagingService . instance ( ) . sendReply ( new MessageOut ( MessagingService . Verb . INTERNAL _ RESPONSE ) , id , message . from ) ; <nl> break ; <nl> <nl> @ @ - 117 , 7 + 127 , 7 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > <nl> logger . debug ( " Syncing { } " , request ) ; <nl> long repairedAt = ActiveRepairService . UNREPAIRED _ SSTABLE ; <nl> if ( desc . parentSessionId ! = null & & ActiveRepairService . instance . getParentRepairSession ( desc . parentSessionId ) ! = null ) <nl> - repairedAt = ActiveRepairService . instance . getParentRepairSession ( desc . parentSessionId ) . repairedAt ; <nl> + repairedAt = ActiveRepairService . instance . getParentRepairSession ( desc . parentSessionId ) . getRepairedAt ( ) ; <nl> <nl> StreamingRepairTask task = new StreamingRepairTask ( desc , request , repairedAt ) ; <nl> task . run ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / repair / RepairRunnable . java b / src / java / org / apache / cassandra / repair / RepairRunnable . java <nl> index 28511db . . 91ac82a 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / RepairRunnable . java <nl> + + + b / src / java / org / apache / cassandra / repair / RepairRunnable . java <nl> @ @ - 191 , 7 + 191 , 7 @ @ public class RepairRunnable extends WrappedRunnable implements ProgressEventNoti <nl> try <nl> { <nl> ActiveRepairService . instance . prepareForRepair ( parentSession , allNeighbors , options , columnFamilyStores ) ; <nl> - repairedAt = ActiveRepairService . instance . getParentRepairSession ( parentSession ) . repairedAt ; <nl> + repairedAt = ActiveRepairService . instance . getParentRepairSession ( parentSession ) . getRepairedAt ( ) ; <nl> progress . incrementAndGet ( ) ; <nl> } <nl> catch ( Throwable t ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> index 37dc07c . . a57c27e 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java <nl> @ @ - 41 , 9 + 41 , 9 @ @ public class PrepareMessage extends RepairMessage <nl> public final UUID parentRepairSession ; <nl> public final boolean isIncremental ; <nl> <nl> - public PrepareMessage ( UUID parentRepairSession , List < UUID > cfIds , Collection < Range < Token > > ranges , boolean isIncremental ) <nl> + public PrepareMessage ( UUID parentRepairSession , List < UUID > cfIds , Collection < Range < Token > > ranges , boolean isIncremental , boolean isGlobal ) <nl> { <nl> - super ( Type . PREPARE _ MESSAGE , null ) ; <nl> + super ( isGlobal ? Type . PREPARE _ GLOBAL _ MESSAGE : Type . PREPARE _ MESSAGE , null ) ; <nl> this . parentRepairSession = parentRepairSession ; <nl> this . cfIds = cfIds ; <nl> this . ranges = ranges ; <nl> @ @ - 79 , 7 + 79 , 8 @ @ public class PrepareMessage extends RepairMessage <nl> for ( int i = 0 ; i < rangeCount ; i + + ) <nl> ranges . add ( ( Range < Token > ) Range . tokenSerializer . deserialize ( in , MessagingService . globalPartitioner ( ) , version ) ) ; <nl> boolean isIncremental = in . readBoolean ( ) ; <nl> - return new PrepareMessage ( parentRepairSession , cfIds , ranges , isIncremental ) ; <nl> + <nl> + return new PrepareMessage ( parentRepairSession , cfIds , ranges , isIncremental , false ) ; <nl> } <nl> <nl> public long serializedSize ( PrepareMessage message , int version ) <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java <nl> index 6b5226d . . d78c2fd 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ public abstract class RepairMessage <nl> SYNC _ COMPLETE ( 3 , SyncComplete . serializer ) , <nl> ANTICOMPACTION _ REQUEST ( 4 , AnticompactionRequest . serializer ) , <nl> PREPARE _ MESSAGE ( 5 , PrepareMessage . serializer ) , <nl> + PREPARE _ GLOBAL _ MESSAGE ( 8 , PrepareMessage . serializer ) , <nl> SNAPSHOT ( 6 , SnapshotMessage . serializer ) , <nl> CLEANUP ( 7 , CleanupMessage . serializer ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairOption . java b / src / java / org / apache / cassandra / repair / messages / RepairOption . java <nl> index 7b9a9af . . f3e452c 100644 <nl> - - - a / src / java / org / apache / cassandra / repair / messages / RepairOption . java <nl> + + + b / src / java / org / apache / cassandra / repair / messages / RepairOption . java <nl> @ @ - 287 , 6 + 287 , 10 @ @ public class RepairOption <nl> return hosts ; <nl> } <nl> <nl> + public boolean isGlobal ( ) <nl> + { <nl> + return dataCenters . isEmpty ( ) & & hosts . isEmpty ( ) ; <nl> + } <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> index 213edeb . . a6389ea 100644 <nl> - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . db . ColumnFamilyStore ; <nl> + import org . apache . cassandra . db . SystemKeyspace ; <nl> import org . apache . cassandra . db . compaction . CompactionManager ; <nl> import org . apache . cassandra . dht . Range ; <nl> import org . apache . cassandra . dht . Token ; <nl> @ @ - 54 , 6 + 55 , 7 @ @ import org . apache . cassandra . repair . RepairJobDesc ; <nl> import org . apache . cassandra . repair . RepairParallelism ; <nl> import org . apache . cassandra . repair . RepairSession ; <nl> import org . apache . cassandra . repair . messages . * ; <nl> + import org . apache . cassandra . utils . CassandraVersion ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . UUIDGen ; <nl> import org . apache . cassandra . utils . concurrent . Ref ; <nl> @ @ - 75 , 6 + 77 , 8 @ @ import org . apache . cassandra . utils . concurrent . Refs ; <nl> * / <nl> public class ActiveRepairService <nl> { <nl> + public static CassandraVersion SUPPORTS _ GLOBAL _ PREPARE _ FLAG _ VERSION = new CassandraVersion ( " 2 . 2 . 1 " ) ; <nl> + <nl> private static final Logger logger = LoggerFactory . getLogger ( ActiveRepairService . class ) ; <nl> / / singleton enforcement <nl> public static final ActiveRepairService instance = new ActiveRepairService ( FailureDetector . instance , Gossiper . instance ) ; <nl> @ @ - 233 , 7 + 237 , 7 @ @ public class ActiveRepairService <nl> <nl> public synchronized UUID prepareForRepair ( UUID parentRepairSession , Set < InetAddress > endpoints , RepairOption options , List < ColumnFamilyStore > columnFamilyStores ) <nl> { <nl> - registerParentRepairSession ( parentRepairSession , columnFamilyStores , options . getRanges ( ) , options . isIncremental ( ) ) ; <nl> + registerParentRepairSession ( parentRepairSession , columnFamilyStores , options . getRanges ( ) , options . isIncremental ( ) , options . isGlobal ( ) ) ; <nl> final CountDownLatch prepareLatch = new CountDownLatch ( endpoints . size ( ) ) ; <nl> final AtomicBoolean status = new AtomicBoolean ( true ) ; <nl> final Set < String > failedNodes = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; <nl> @ @ - 263 , 7 + 267 , 10 @ @ public class ActiveRepairService <nl> <nl> for ( InetAddress neighbour : endpoints ) <nl> { <nl> - PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , options . getRanges ( ) , options . isIncremental ( ) ) ; <nl> + CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbour ) ; <nl> + boolean isGlobal = options . isGlobal ( ) & & peerVersion ! = null & & peerVersion . compareTo ( SUPPORTS _ GLOBAL _ PREPARE _ FLAG _ VERSION ) > = 0 ; <nl> + logger . debug ( " Sending prepare message : options . isGlobal = { } , peerVersion = { } " , options . isGlobal ( ) , peerVersion ) ; <nl> + PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , options . getRanges ( ) , options . isIncremental ( ) , isGlobal ) ; <nl> MessageOut < RepairMessage > msg = message . createMessage ( ) ; <nl> MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( 1 ) , true ) ; <nl> } <nl> @ @ - 286 , 9 + 293 , 9 @ @ public class ActiveRepairService <nl> return parentRepairSession ; <nl> } <nl> <nl> - public void registerParentRepairSession ( UUID parentRepairSession , List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental ) <nl> + public void registerParentRepairSession ( UUID parentRepairSession , List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , boolean isGlobal ) <nl> { <nl> - parentRepairSessions . put ( parentRepairSession , new ParentRepairSession ( columnFamilyStores , ranges , isIncremental , System . currentTimeMillis ( ) ) ) ; <nl> + parentRepairSessions . put ( parentRepairSession , new ParentRepairSession ( columnFamilyStores , ranges , isIncremental , isGlobal , System . currentTimeMillis ( ) ) ) ; <nl> } <nl> <nl> public Set < SSTableReader > currentlyRepairing ( UUID cfId , UUID parentRepairSession ) <nl> @ @ - 313 , 15 + 320 , 15 @ @ public class ActiveRepairService <nl> * / <nl> public synchronized ListenableFuture finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , Collection < Range < Token > > successfulRanges ) <nl> { <nl> - List < ListenableFuture < ? > > tasks = new ArrayList < > ( neighbors . size ( ) + 1 ) ; <nl> - for ( InetAddress neighbor : neighbors ) <nl> - { <nl> - AnticompactionTask task = new AnticompactionTask ( parentSession , neighbor , successfulRanges ) ; <nl> - tasks . add ( task ) ; <nl> - task . run ( ) ; / / ' run ' is just sending message <nl> - } <nl> - tasks . add ( doAntiCompaction ( parentSession , successfulRanges ) ) ; <nl> - return Futures . successfulAsList ( tasks ) ; <nl> + List < ListenableFuture < ? > > tasks = new ArrayList < > ( neighbors . size ( ) + 1 ) ; <nl> + for ( InetAddress neighbor : neighbors ) <nl> + { <nl> + AnticompactionTask task = new AnticompactionTask ( parentSession , neighbor , successfulRanges ) ; <nl> + tasks . add ( task ) ; <nl> + task . run ( ) ; / / ' run ' is just sending message <nl> + } <nl> + tasks . add ( doAntiCompaction ( parentSession , successfulRanges ) ) ; <nl> + return Futures . successfulAsList ( tasks ) ; <nl> } <nl> <nl> public ParentRepairSession getParentRepairSession ( UUID parentSessionId ) <nl> @ @ - 346 , 6 + 353 , 12 @ @ public class ActiveRepairService <nl> { <nl> assert parentRepairSession ! = null ; <nl> ParentRepairSession prs = getParentRepairSession ( parentRepairSession ) ; <nl> + if ( ! prs . isGlobal ) <nl> + { <nl> + logger . info ( " Not a global repair , will not do anticompaction " ) ; <nl> + removeParentRepairSession ( parentRepairSession ) ; <nl> + return Futures . immediateFuture ( Collections . emptyList ( ) ) ; <nl> + } <nl> assert prs . ranges . containsAll ( successfulRanges ) : " Trying to perform anticompaction on unknown ranges " ; <nl> <nl> List < ListenableFuture < ? > > futures = new ArrayList < > ( ) ; <nl> @ @ - 400 , 15 + 413 , 17 @ @ public class ActiveRepairService <nl> private final Map < UUID , ColumnFamilyStore > columnFamilyStores = new HashMap < > ( ) ; <nl> private final Collection < Range < Token > > ranges ; <nl> private final Map < UUID , Set < SSTableReader > > sstableMap = new HashMap < > ( ) ; <nl> - public final long repairedAt ; <nl> + private final long repairedAt ; <nl> public final boolean isIncremental ; <nl> + private final boolean isGlobal ; <nl> <nl> - public ParentRepairSession ( List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , long repairedAt ) <nl> + public ParentRepairSession ( List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , boolean isGlobal , long repairedAt ) <nl> { <nl> for ( ColumnFamilyStore cfs : columnFamilyStores ) <nl> this . columnFamilyStores . put ( cfs . metadata . cfId , cfs ) ; <nl> this . ranges = ranges ; <nl> this . repairedAt = repairedAt ; <nl> + this . isGlobal = isGlobal ; <nl> this . isIncremental = isIncremental ; <nl> } <nl> <nl> @ @ - 445 , 7 + 460 , 12 @ @ public class ActiveRepairService <nl> } <nl> return new Refs < > ( references . build ( ) ) ; <nl> } <nl> - <nl> + public long getRepairedAt ( ) <nl> + { <nl> + if ( isGlobal ) <nl> + return repairedAt ; <nl> + return ActiveRepairService . UNREPAIRED _ SSTABLE ; <nl> + } <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> index 03aaf03 . . 63fd0e7 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java <nl> @ @ - 197 , 7 + 197 , 7 @ @ public class LeveledCompactionStrategyTest <nl> Range < Token > range = new Range < > ( Util . token ( " " ) , Util . token ( " " ) ) ; <nl> int gcBefore = keyspace . getColumnFamilyStore ( CF _ STANDARDDLEVELED ) . gcBefore ( System . currentTimeMillis ( ) ) ; <nl> UUID parentRepSession = UUID . randomUUID ( ) ; <nl> - ActiveRepairService . instance . registerParentRepairSession ( parentRepSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false ) ; <nl> + ActiveRepairService . instance . registerParentRepairSession ( parentRepSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false , true ) ; <nl> RepairJobDesc desc = new RepairJobDesc ( parentRepSession , UUID . randomUUID ( ) , KEYSPACE1 , CF _ STANDARDDLEVELED , range ) ; <nl> Validator validator = new Validator ( desc , FBUtilities . getBroadcastAddress ( ) , gcBefore ) ; <nl> CompactionManager . instance . submitValidation ( cfs , validator ) . get ( ) ; <nl> diff - - git a / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java b / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java <nl> index 3a16262 . . e5c03b9 100644 <nl> - - - a / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java <nl> + + + b / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class LocalSyncTaskTest extends SchemaLoader <nl> Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; <nl> ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; <nl> <nl> - ActiveRepairService . instance . registerParentRepairSession ( parentRepairSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false ) ; <nl> + ActiveRepairService . instance . registerParentRepairSession ( parentRepairSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false , false ) ; <nl> <nl> RepairJobDesc desc = new RepairJobDesc ( parentRepairSession , UUID . randomUUID ( ) , KEYSPACE1 , " Standard1 " , range ) ; <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 index c0855c4 . . 796f135 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairMessageVerbHandler . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 import org . apache . cassandra . db . Keyspace ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . dht . Bounds ; 
 import org . apache . cassandra . dht . LocalPartitioner ; 
 @ @ - 41 , 6 + 42 , 7 @ @ import org . apache . cassandra . net . MessageOut ; 
 import org . apache . cassandra . net . MessagingService ; 
 import org . apache . cassandra . repair . messages . * ; 
 import org . apache . cassandra . service . ActiveRepairService ; 
 + import org . apache . cassandra . utils . CassandraVersion ; 
 import org . apache . cassandra . utils . Pair ; 
 
 / * * 
 @ @ - 59 , 6 + 61 , 7 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > 
 { 
 switch ( message . payload . messageType ) 
 { 
 + case PREPARE _ GLOBAL _ MESSAGE : 
 case PREPARE _ MESSAGE : 
 PrepareMessage prepareMessage = ( PrepareMessage ) message . payload ; 
 logger . debug ( " Preparing , { } " , prepareMessage ) ; 
 @ @ - 69 , 10 + 72 , 17 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > 
 ColumnFamilyStore columnFamilyStore = Keyspace . open ( kscf . left ) . getColumnFamilyStore ( kscf . right ) ; 
 columnFamilyStores . add ( columnFamilyStore ) ; 
 } 
 + CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( message . from ) ; 
 + / / note that we default isGlobal to true since old version always default to true : 
 + boolean isGlobal = peerVersion = = null | | 
 + peerVersion . compareTo ( ActiveRepairService . SUPPORTS _ GLOBAL _ PREPARE _ FLAG _ VERSION ) < 0 | | 
 + message . payload . messageType . equals ( RepairMessage . Type . PREPARE _ GLOBAL _ MESSAGE ) ; 
 + logger . debug ( " Received prepare message : global message = { } , peerVersion = { } , " , message . payload . messageType . equals ( RepairMessage . Type . PREPARE _ GLOBAL _ MESSAGE ) , peerVersion ) ; 
 ActiveRepairService . instance . registerParentRepairSession ( prepareMessage . parentRepairSession , 
 columnFamilyStores , 
 prepareMessage . ranges , 
 - prepareMessage . isIncremental ) ; 
 + prepareMessage . isIncremental , 
 + isGlobal ) ; 
 MessagingService . instance ( ) . sendReply ( new MessageOut ( MessagingService . Verb . INTERNAL _ RESPONSE ) , id , message . from ) ; 
 break ; 
 
 @ @ - 117 , 7 + 127 , 7 @ @ public class RepairMessageVerbHandler implements IVerbHandler < RepairMessage > 
 logger . debug ( " Syncing { } " , request ) ; 
 long repairedAt = ActiveRepairService . UNREPAIRED _ SSTABLE ; 
 if ( desc . parentSessionId ! = null & & ActiveRepairService . instance . getParentRepairSession ( desc . parentSessionId ) ! = null ) 
 - repairedAt = ActiveRepairService . instance . getParentRepairSession ( desc . parentSessionId ) . repairedAt ; 
 + repairedAt = ActiveRepairService . instance . getParentRepairSession ( desc . parentSessionId ) . getRepairedAt ( ) ; 
 
 StreamingRepairTask task = new StreamingRepairTask ( desc , request , repairedAt ) ; 
 task . run ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / repair / RepairRunnable . java b / src / java / org / apache / cassandra / repair / RepairRunnable . java 
 index 28511db . . 91ac82a 100644 
 - - - a / src / java / org / apache / cassandra / repair / RepairRunnable . java 
 + + + b / src / java / org / apache / cassandra / repair / RepairRunnable . java 
 @ @ - 191 , 7 + 191 , 7 @ @ public class RepairRunnable extends WrappedRunnable implements ProgressEventNoti 
 try 
 { 
 ActiveRepairService . instance . prepareForRepair ( parentSession , allNeighbors , options , columnFamilyStores ) ; 
 - repairedAt = ActiveRepairService . instance . getParentRepairSession ( parentSession ) . repairedAt ; 
 + repairedAt = ActiveRepairService . instance . getParentRepairSession ( parentSession ) . getRepairedAt ( ) ; 
 progress . incrementAndGet ( ) ; 
 } 
 catch ( Throwable t ) 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 index 37dc07c . . a57c27e 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / PrepareMessage . java 
 @ @ - 41 , 9 + 41 , 9 @ @ public class PrepareMessage extends RepairMessage 
 public final UUID parentRepairSession ; 
 public final boolean isIncremental ; 
 
 - public PrepareMessage ( UUID parentRepairSession , List < UUID > cfIds , Collection < Range < Token > > ranges , boolean isIncremental ) 
 + public PrepareMessage ( UUID parentRepairSession , List < UUID > cfIds , Collection < Range < Token > > ranges , boolean isIncremental , boolean isGlobal ) 
 { 
 - super ( Type . PREPARE _ MESSAGE , null ) ; 
 + super ( isGlobal ? Type . PREPARE _ GLOBAL _ MESSAGE : Type . PREPARE _ MESSAGE , null ) ; 
 this . parentRepairSession = parentRepairSession ; 
 this . cfIds = cfIds ; 
 this . ranges = ranges ; 
 @ @ - 79 , 7 + 79 , 8 @ @ public class PrepareMessage extends RepairMessage 
 for ( int i = 0 ; i < rangeCount ; i + + ) 
 ranges . add ( ( Range < Token > ) Range . tokenSerializer . deserialize ( in , MessagingService . globalPartitioner ( ) , version ) ) ; 
 boolean isIncremental = in . readBoolean ( ) ; 
 - return new PrepareMessage ( parentRepairSession , cfIds , ranges , isIncremental ) ; 
 + 
 + return new PrepareMessage ( parentRepairSession , cfIds , ranges , isIncremental , false ) ; 
 } 
 
 public long serializedSize ( PrepareMessage message , int version ) 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java 
 index 6b5226d . . d78c2fd 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / RepairMessage . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / RepairMessage . java 
 @ @ - 45 , 6 + 45 , 7 @ @ public abstract class RepairMessage 
 SYNC _ COMPLETE ( 3 , SyncComplete . serializer ) , 
 ANTICOMPACTION _ REQUEST ( 4 , AnticompactionRequest . serializer ) , 
 PREPARE _ MESSAGE ( 5 , PrepareMessage . serializer ) , 
 + PREPARE _ GLOBAL _ MESSAGE ( 8 , PrepareMessage . serializer ) , 
 SNAPSHOT ( 6 , SnapshotMessage . serializer ) , 
 CLEANUP ( 7 , CleanupMessage . serializer ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / repair / messages / RepairOption . java b / src / java / org / apache / cassandra / repair / messages / RepairOption . java 
 index 7b9a9af . . f3e452c 100644 
 - - - a / src / java / org / apache / cassandra / repair / messages / RepairOption . java 
 + + + b / src / java / org / apache / cassandra / repair / messages / RepairOption . java 
 @ @ - 287 , 6 + 287 , 10 @ @ public class RepairOption 
 return hosts ; 
 } 
 
 + public boolean isGlobal ( ) 
 + { 
 + return dataCenters . isEmpty ( ) & & hosts . isEmpty ( ) ; 
 + } 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / service / ActiveRepairService . java b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 index 213edeb . . a6389ea 100644 
 - - - a / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 + + + b / src / java / org / apache / cassandra / service / ActiveRepairService . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . db . ColumnFamilyStore ; 
 + import org . apache . cassandra . db . SystemKeyspace ; 
 import org . apache . cassandra . db . compaction . CompactionManager ; 
 import org . apache . cassandra . dht . Range ; 
 import org . apache . cassandra . dht . Token ; 
 @ @ - 54 , 6 + 55 , 7 @ @ import org . apache . cassandra . repair . RepairJobDesc ; 
 import org . apache . cassandra . repair . RepairParallelism ; 
 import org . apache . cassandra . repair . RepairSession ; 
 import org . apache . cassandra . repair . messages . * ; 
 + import org . apache . cassandra . utils . CassandraVersion ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . UUIDGen ; 
 import org . apache . cassandra . utils . concurrent . Ref ; 
 @ @ - 75 , 6 + 77 , 8 @ @ import org . apache . cassandra . utils . concurrent . Refs ; 
 * / 
 public class ActiveRepairService 
 { 
 + public static CassandraVersion SUPPORTS _ GLOBAL _ PREPARE _ FLAG _ VERSION = new CassandraVersion ( " 2 . 2 . 1 " ) ; 
 + 
 private static final Logger logger = LoggerFactory . getLogger ( ActiveRepairService . class ) ; 
 / / singleton enforcement 
 public static final ActiveRepairService instance = new ActiveRepairService ( FailureDetector . instance , Gossiper . instance ) ; 
 @ @ - 233 , 7 + 237 , 7 @ @ public class ActiveRepairService 
 
 public synchronized UUID prepareForRepair ( UUID parentRepairSession , Set < InetAddress > endpoints , RepairOption options , List < ColumnFamilyStore > columnFamilyStores ) 
 { 
 - registerParentRepairSession ( parentRepairSession , columnFamilyStores , options . getRanges ( ) , options . isIncremental ( ) ) ; 
 + registerParentRepairSession ( parentRepairSession , columnFamilyStores , options . getRanges ( ) , options . isIncremental ( ) , options . isGlobal ( ) ) ; 
 final CountDownLatch prepareLatch = new CountDownLatch ( endpoints . size ( ) ) ; 
 final AtomicBoolean status = new AtomicBoolean ( true ) ; 
 final Set < String > failedNodes = Collections . synchronizedSet ( new HashSet < String > ( ) ) ; 
 @ @ - 263 , 7 + 267 , 10 @ @ public class ActiveRepairService 
 
 for ( InetAddress neighbour : endpoints ) 
 { 
 - PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , options . getRanges ( ) , options . isIncremental ( ) ) ; 
 + CassandraVersion peerVersion = SystemKeyspace . getReleaseVersion ( neighbour ) ; 
 + boolean isGlobal = options . isGlobal ( ) & & peerVersion ! = null & & peerVersion . compareTo ( SUPPORTS _ GLOBAL _ PREPARE _ FLAG _ VERSION ) > = 0 ; 
 + logger . debug ( " Sending prepare message : options . isGlobal = { } , peerVersion = { } " , options . isGlobal ( ) , peerVersion ) ; 
 + PrepareMessage message = new PrepareMessage ( parentRepairSession , cfIds , options . getRanges ( ) , options . isIncremental ( ) , isGlobal ) ; 
 MessageOut < RepairMessage > msg = message . createMessage ( ) ; 
 MessagingService . instance ( ) . sendRR ( msg , neighbour , callback , TimeUnit . HOURS . toMillis ( 1 ) , true ) ; 
 } 
 @ @ - 286 , 9 + 293 , 9 @ @ public class ActiveRepairService 
 return parentRepairSession ; 
 } 
 
 - public void registerParentRepairSession ( UUID parentRepairSession , List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental ) 
 + public void registerParentRepairSession ( UUID parentRepairSession , List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , boolean isGlobal ) 
 { 
 - parentRepairSessions . put ( parentRepairSession , new ParentRepairSession ( columnFamilyStores , ranges , isIncremental , System . currentTimeMillis ( ) ) ) ; 
 + parentRepairSessions . put ( parentRepairSession , new ParentRepairSession ( columnFamilyStores , ranges , isIncremental , isGlobal , System . currentTimeMillis ( ) ) ) ; 
 } 
 
 public Set < SSTableReader > currentlyRepairing ( UUID cfId , UUID parentRepairSession ) 
 @ @ - 313 , 15 + 320 , 15 @ @ public class ActiveRepairService 
 * / 
 public synchronized ListenableFuture finishParentSession ( UUID parentSession , Set < InetAddress > neighbors , Collection < Range < Token > > successfulRanges ) 
 { 
 - List < ListenableFuture < ? > > tasks = new ArrayList < > ( neighbors . size ( ) + 1 ) ; 
 - for ( InetAddress neighbor : neighbors ) 
 - { 
 - AnticompactionTask task = new AnticompactionTask ( parentSession , neighbor , successfulRanges ) ; 
 - tasks . add ( task ) ; 
 - task . run ( ) ; / / ' run ' is just sending message 
 - } 
 - tasks . add ( doAntiCompaction ( parentSession , successfulRanges ) ) ; 
 - return Futures . successfulAsList ( tasks ) ; 
 + List < ListenableFuture < ? > > tasks = new ArrayList < > ( neighbors . size ( ) + 1 ) ; 
 + for ( InetAddress neighbor : neighbors ) 
 + { 
 + AnticompactionTask task = new AnticompactionTask ( parentSession , neighbor , successfulRanges ) ; 
 + tasks . add ( task ) ; 
 + task . run ( ) ; / / ' run ' is just sending message 
 + } 
 + tasks . add ( doAntiCompaction ( parentSession , successfulRanges ) ) ; 
 + return Futures . successfulAsList ( tasks ) ; 
 } 
 
 public ParentRepairSession getParentRepairSession ( UUID parentSessionId ) 
 @ @ - 346 , 6 + 353 , 12 @ @ public class ActiveRepairService 
 { 
 assert parentRepairSession ! = null ; 
 ParentRepairSession prs = getParentRepairSession ( parentRepairSession ) ; 
 + if ( ! prs . isGlobal ) 
 + { 
 + logger . info ( " Not a global repair , will not do anticompaction " ) ; 
 + removeParentRepairSession ( parentRepairSession ) ; 
 + return Futures . immediateFuture ( Collections . emptyList ( ) ) ; 
 + } 
 assert prs . ranges . containsAll ( successfulRanges ) : " Trying to perform anticompaction on unknown ranges " ; 
 
 List < ListenableFuture < ? > > futures = new ArrayList < > ( ) ; 
 @ @ - 400 , 15 + 413 , 17 @ @ public class ActiveRepairService 
 private final Map < UUID , ColumnFamilyStore > columnFamilyStores = new HashMap < > ( ) ; 
 private final Collection < Range < Token > > ranges ; 
 private final Map < UUID , Set < SSTableReader > > sstableMap = new HashMap < > ( ) ; 
 - public final long repairedAt ; 
 + private final long repairedAt ; 
 public final boolean isIncremental ; 
 + private final boolean isGlobal ; 
 
 - public ParentRepairSession ( List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , long repairedAt ) 
 + public ParentRepairSession ( List < ColumnFamilyStore > columnFamilyStores , Collection < Range < Token > > ranges , boolean isIncremental , boolean isGlobal , long repairedAt ) 
 { 
 for ( ColumnFamilyStore cfs : columnFamilyStores ) 
 this . columnFamilyStores . put ( cfs . metadata . cfId , cfs ) ; 
 this . ranges = ranges ; 
 this . repairedAt = repairedAt ; 
 + this . isGlobal = isGlobal ; 
 this . isIncremental = isIncremental ; 
 } 
 
 @ @ - 445 , 7 + 460 , 12 @ @ public class ActiveRepairService 
 } 
 return new Refs < > ( references . build ( ) ) ; 
 } 
 - 
 + public long getRepairedAt ( ) 
 + { 
 + if ( isGlobal ) 
 + return repairedAt ; 
 + return ActiveRepairService . UNREPAIRED _ SSTABLE ; 
 + } 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 index 03aaf03 . . 63fd0e7 100644 
 - - - a / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 + + + b / test / unit / org / apache / cassandra / db / compaction / LeveledCompactionStrategyTest . java 
 @ @ - 197 , 7 + 197 , 7 @ @ public class LeveledCompactionStrategyTest 
 Range < Token > range = new Range < > ( Util . token ( " " ) , Util . token ( " " ) ) ; 
 int gcBefore = keyspace . getColumnFamilyStore ( CF _ STANDARDDLEVELED ) . gcBefore ( System . currentTimeMillis ( ) ) ; 
 UUID parentRepSession = UUID . randomUUID ( ) ; 
 - ActiveRepairService . instance . registerParentRepairSession ( parentRepSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false ) ; 
 + ActiveRepairService . instance . registerParentRepairSession ( parentRepSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false , true ) ; 
 RepairJobDesc desc = new RepairJobDesc ( parentRepSession , UUID . randomUUID ( ) , KEYSPACE1 , CF _ STANDARDDLEVELED , range ) ; 
 Validator validator = new Validator ( desc , FBUtilities . getBroadcastAddress ( ) , gcBefore ) ; 
 CompactionManager . instance . submitValidation ( cfs , validator ) . get ( ) ; 
 diff - - git a / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java b / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java 
 index 3a16262 . . e5c03b9 100644 
 - - - a / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java 
 + + + b / test / unit / org / apache / cassandra / repair / LocalSyncTaskTest . java 
 @ @ - 89 , 7 + 89 , 7 @ @ public class LocalSyncTaskTest extends SchemaLoader 
 Keyspace keyspace = Keyspace . open ( KEYSPACE1 ) ; 
 ColumnFamilyStore cfs = keyspace . getColumnFamilyStore ( " Standard1 " ) ; 
 
 - ActiveRepairService . instance . registerParentRepairSession ( parentRepairSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false ) ; 
 + ActiveRepairService . instance . registerParentRepairSession ( parentRepairSession , Arrays . asList ( cfs ) , Arrays . asList ( range ) , false , false ) ; 
 
 RepairJobDesc desc = new RepairJobDesc ( parentRepairSession , UUID . randomUUID ( ) , KEYSPACE1 , " Standard1 " , range ) ; 


NEAREST DIFF:
ELIMINATEDSENTENCE
