BLEU SCORE: 0.018738883683389617

TEST MSG: ( cqlsh ) show correct column names for empty result sets
GENERATED MSG: Follow - up to CASSANDRA - 10513

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1480960 . . 88ef42e 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 5 <nl> + * ( cqlsh ) show correct column names for empty result sets ( CASSANDRA - 9813 ) <nl> * Add new types to Stress ( CASSANDRA - 9556 ) <nl> * Add property to allow listening on broadcast interface ( CASSANDRA - 9748 ) <nl> * Fix regression in split size on CqlInputFormat ( CASSANDRA - 10835 ) <nl> diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 1119289 . . 427fc29 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 1242 , 7 + 1242 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> elif result : <nl> # CAS INSERT / UPDATE <nl> self . writeresult ( " " ) <nl> - self . print _ static _ result ( list ( result ) , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> + self . print _ static _ result ( result . column _ names , list ( result ) , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> self . flush _ output ( ) <nl> return True , future <nl> <nl> @ @ - 1256 , 7 + 1256 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> page = result . current _ rows <nl> if page : <nl> num _ rows + = len ( page ) <nl> - self . print _ static _ result ( page , table _ meta ) <nl> + self . print _ static _ result ( result . column _ names , page , table _ meta ) <nl> if result . has _ more _ pages : <nl> raw _ input ( " - - - MORE - - - " ) <nl> result . fetch _ next _ page ( ) <nl> @ @ - 1265 , 7 + 1265 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> else : <nl> rows = list ( result ) <nl> num _ rows = len ( rows ) <nl> - self . print _ static _ result ( rows , table _ meta ) <nl> + self . print _ static _ result ( result . column _ names , rows , table _ meta ) <nl> self . writeresult ( " ( % d rows ) " % num _ rows ) <nl> <nl> if self . decoding _ errors : <nl> @ @ - 1275 , 18 + 1275 , 11 @ @ class Shell ( cmd . Cmd ) : <nl> self . writeresult ( ' % d more decoding errors suppressed . ' <nl> % ( len ( self . decoding _ errors ) - 2 ) , color = RED ) <nl> <nl> - def print _ static _ result ( self , rows , table _ meta ) : <nl> - if not rows : <nl> - if not table _ meta : <nl> - return <nl> - # print header only <nl> - colnames = table _ meta . columns . keys ( ) # full header <nl> - formatted _ names = [ self . myformat _ colname ( name , table _ meta ) for name in colnames ] <nl> - self . print _ formatted _ result ( formatted _ names , None ) <nl> + def print _ static _ result ( self , column _ names , rows , table _ meta ) : <nl> + if not column _ names and not table _ meta : <nl> return <nl> - <nl> - colnames = rows [ 0 ] . keys ( ) <nl> - formatted _ names = [ self . myformat _ colname ( name , table _ meta ) for name in colnames ] <nl> + column _ names = column _ names or table _ meta . columns . keys ( ) <nl> + formatted _ names = [ self . myformat _ colname ( name , table _ meta ) for name in column _ names ] <nl> formatted _ values = [ map ( self . myformat _ value , row . values ( ) ) for row in rows ] <nl> <nl> if self . expand _ enabled :
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1480960 . . 88ef42e 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 5 
 + * ( cqlsh ) show correct column names for empty result sets ( CASSANDRA - 9813 ) 
 * Add new types to Stress ( CASSANDRA - 9556 ) 
 * Add property to allow listening on broadcast interface ( CASSANDRA - 9748 ) 
 * Fix regression in split size on CqlInputFormat ( CASSANDRA - 10835 ) 
 diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 1119289 . . 427fc29 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 1242 , 7 + 1242 , 7 @ @ class Shell ( cmd . Cmd ) : 
 elif result : 
 # CAS INSERT / UPDATE 
 self . writeresult ( " " ) 
 - self . print _ static _ result ( list ( result ) , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 + self . print _ static _ result ( result . column _ names , list ( result ) , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 self . flush _ output ( ) 
 return True , future 
 
 @ @ - 1256 , 7 + 1256 , 7 @ @ class Shell ( cmd . Cmd ) : 
 page = result . current _ rows 
 if page : 
 num _ rows + = len ( page ) 
 - self . print _ static _ result ( page , table _ meta ) 
 + self . print _ static _ result ( result . column _ names , page , table _ meta ) 
 if result . has _ more _ pages : 
 raw _ input ( " - - - MORE - - - " ) 
 result . fetch _ next _ page ( ) 
 @ @ - 1265 , 7 + 1265 , 7 @ @ class Shell ( cmd . Cmd ) : 
 else : 
 rows = list ( result ) 
 num _ rows = len ( rows ) 
 - self . print _ static _ result ( rows , table _ meta ) 
 + self . print _ static _ result ( result . column _ names , rows , table _ meta ) 
 self . writeresult ( " ( % d rows ) " % num _ rows ) 
 
 if self . decoding _ errors : 
 @ @ - 1275 , 18 + 1275 , 11 @ @ class Shell ( cmd . Cmd ) : 
 self . writeresult ( ' % d more decoding errors suppressed . ' 
 % ( len ( self . decoding _ errors ) - 2 ) , color = RED ) 
 
 - def print _ static _ result ( self , rows , table _ meta ) : 
 - if not rows : 
 - if not table _ meta : 
 - return 
 - # print header only 
 - colnames = table _ meta . columns . keys ( ) # full header 
 - formatted _ names = [ self . myformat _ colname ( name , table _ meta ) for name in colnames ] 
 - self . print _ formatted _ result ( formatted _ names , None ) 
 + def print _ static _ result ( self , column _ names , rows , table _ meta ) : 
 + if not column _ names and not table _ meta : 
 return 
 - 
 - colnames = rows [ 0 ] . keys ( ) 
 - formatted _ names = [ self . myformat _ colname ( name , table _ meta ) for name in colnames ] 
 + column _ names = column _ names or table _ meta . columns . keys ( ) 
 + formatted _ names = [ self . myformat _ colname ( name , table _ meta ) for name in column _ names ] 
 formatted _ values = [ map ( self . myformat _ value , row . values ( ) ) for row in rows ] 
 
 if self . expand _ enabled :

NEAREST DIFF:
ELIMINATEDSENTENCE
