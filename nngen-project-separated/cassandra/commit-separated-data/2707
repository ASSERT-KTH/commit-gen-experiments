BLEU SCORE: 0.03435488317233918

TEST MSG: Fast ABSC . addAll ( ) path + ASPCSI optimization
GENERATED MSG: add decompose methods to new - since - 0 . 7 AbstractTypes

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index 0ce36e2 . . 1fdebd8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 52 , 18 + 52 , 18 @ @ public class ArrayBackedSortedColumns extends ColumnFamily <nl> <nl> public static final ColumnFamily . Factory < ArrayBackedSortedColumns > factory = new Factory < ArrayBackedSortedColumns > ( ) <nl> { <nl> - public ArrayBackedSortedColumns create ( CFMetaData metadata , boolean insertReversed ) <nl> + public ArrayBackedSortedColumns create ( CFMetaData metadata , boolean insertReversed , int initialCapacity ) <nl> { <nl> - return new ArrayBackedSortedColumns ( metadata , insertReversed ) ; <nl> + return new ArrayBackedSortedColumns ( metadata , insertReversed , initialCapacity ) ; <nl> } <nl> } ; <nl> <nl> - private ArrayBackedSortedColumns ( CFMetaData metadata , boolean reversed ) <nl> + private ArrayBackedSortedColumns ( CFMetaData metadata , boolean reversed , int initialCapacity ) <nl> { <nl> super ( metadata ) ; <nl> this . reversed = reversed ; <nl> this . deletionInfo = DeletionInfo . live ( ) ; <nl> - this . cells = EMPTY _ ARRAY ; <nl> + this . cells = initialCapacity = = 0 ? EMPTY _ ARRAY : new Cell [ initialCapacity ] ; <nl> this . size = 0 ; <nl> this . sortedSize = 0 ; <nl> this . isSorted = true ; <nl> @ @ - 235 , 9 + 235 , 39 @ @ public class ArrayBackedSortedColumns extends ColumnFamily <nl> if ( other . getColumnCount ( ) = = 0 ) <nl> return ; <nl> <nl> - Iterator < Cell > iterator = reversed ? other . reverseIterator ( ) : other . iterator ( ) ; <nl> - while ( iterator . hasNext ( ) ) <nl> - addColumn ( iterator . next ( ) ) ; <nl> + / / In reality , with ABSC being the only remaining container ( aside from ABTC ) , other will aways be ABSC . <nl> + if ( size = = 0 & & other instanceof ArrayBackedSortedColumns ) <nl> + { <nl> + fastAddAll ( ( ArrayBackedSortedColumns ) other ) ; <nl> + } <nl> + else <nl> + { <nl> + Iterator < Cell > iterator = reversed ? other . reverseIterator ( ) : other . iterator ( ) ; <nl> + while ( iterator . hasNext ( ) ) <nl> + addColumn ( iterator . next ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / Fast path , when this ABSC is empty . <nl> + private void fastAddAll ( ArrayBackedSortedColumns other ) <nl> + { <nl> + if ( other . isInsertReversed ( ) = = isInsertReversed ( ) ) <nl> + { <nl> + cells = Arrays . copyOf ( other . cells , other . cells . length ) ; <nl> + size = other . size ; <nl> + sortedSize = other . sortedSize ; <nl> + isSorted = other . isSorted ; <nl> + } <nl> + else <nl> + { <nl> + if ( cells . length < other . getColumnCount ( ) ) <nl> + cells = new Cell [ Math . max ( MINIMAL _ CAPACITY , other . getColumnCount ( ) ) ] ; <nl> + Iterator < Cell > iterator = reversed ? other . reverseIterator ( ) : other . iterator ( ) ; <nl> + while ( iterator . hasNext ( ) ) <nl> + cells [ size + + ] = iterator . next ( ) ; <nl> + sortedSize = size ; <nl> + isSorted = true ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> index f75efd2 . . 5cc43d9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily <nl> <nl> public static final Factory < AtomicBTreeColumns > factory = new Factory < AtomicBTreeColumns > ( ) <nl> { <nl> - public AtomicBTreeColumns create ( CFMetaData metadata , boolean insertReversed ) <nl> + public AtomicBTreeColumns create ( CFMetaData metadata , boolean insertReversed , int initialCapacity ) <nl> { <nl> if ( insertReversed ) <nl> throw new IllegalArgumentException ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 3437410 . . 8762462 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 493 , 7 + 493 , 12 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry <nl> * allow optimizing for both forward and reversed slices . This does not matter for ThreadSafeSortedColumns . <nl> * Note that this is only an hint on how we expect to do insertion , this does not change the map sorting . <nl> * / <nl> - public abstract T create ( CFMetaData metadata , boolean insertReversed ) ; <nl> + public abstract T create ( CFMetaData metadata , boolean insertReversed , int initialCapacity ) ; <nl> + <nl> + public T create ( CFMetaData metadata , boolean insertReversed ) <nl> + { <nl> + return create ( metadata , insertReversed , 0 ) ; <nl> + } <nl> <nl> public T create ( CFMetaData metadata ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> index e2a6608 . . 9788168 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java <nl> @ @ - 86 , 21 + 86 , 6 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> baseCfs . metadata . getColumnDefinition ( expr . column ) . type . getString ( expr . value ) ) ; <nl> } <nl> <nl> - public void delete ( ByteBuffer rowKey , Cell cell ) <nl> - { <nl> - throw new IllegalStateException ( ) ; <nl> - } <nl> - <nl> - public void insert ( ByteBuffer rowKey , Cell cell ) <nl> - { <nl> - throw new IllegalStateException ( ) ; <nl> - } <nl> - <nl> - public void update ( ByteBuffer rowKey , Cell cell ) <nl> - { <nl> - throw new IllegalStateException ( ) ; <nl> - } <nl> - <nl> public void delete ( ByteBuffer rowKey , Cell cell , OpOrder . Group opGroup ) <nl> { <nl> if ( cell . isMarkedForDelete ( System . currentTimeMillis ( ) ) ) <nl> @ @ - 108 , 7 + 93 , 7 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> <nl> DecoratedKey valueKey = getIndexKeyFor ( getIndexedValue ( rowKey , cell ) ) ; <nl> int localDeletionTime = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; <nl> - ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata ) ; <nl> + ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata , false , 1 ) ; <nl> cfi . addTombstone ( makeIndexColumnName ( rowKey , cell ) , localDeletionTime , cell . timestamp ( ) ) ; <nl> indexCfs . apply ( valueKey , cfi , SecondaryIndexManager . nullUpdater , opGroup , null ) ; <nl> if ( logger . isDebugEnabled ( ) ) <nl> @ @ - 118 , 7 + 103 , 7 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec <nl> public void insert ( ByteBuffer rowKey , Cell cell , OpOrder . Group opGroup ) <nl> { <nl> DecoratedKey valueKey = getIndexKeyFor ( getIndexedValue ( rowKey , cell ) ) ; <nl> - ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata ) ; <nl> + ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata , false , 1 ) ; <nl> CellName name = makeIndexColumnName ( rowKey , cell ) ; <nl> if ( cell instanceof ExpiringCell ) <nl> {
NEAREST DIFF (one line): diff - - git a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> index 8969bfd . . 0506b66 100644 <nl> - - - a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> + + + b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java <nl> @ @ - 179 , 8 + 179 , 8 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface <nl> AbstractType default _ validator = null ; <nl> try <nl> { <nl> - comparator = FBUtilities . getInstance ( cfDef . comparator _ type , " comparator " ) ; <nl> - default _ validator = FBUtilities . getInstance ( cfDef . default _ validation _ class , " validator " ) ; <nl> + comparator = FBUtilities . getComparator ( cfDef . comparator _ type ) ; <nl> + default _ validator = FBUtilities . getComparator ( cfDef . default _ validation _ class ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> { <nl> @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface <nl> AbstractType validator = null ; <nl> try <nl> { <nl> - validator = FBUtilities . getInstance ( cd . getValidation _ class ( ) , " validator " ) ; <nl> + validator = FBUtilities . getComparator ( cd . getValidation _ class ( ) ) ; <nl> validators . put ( cd . name , validator ) ; <nl> } <nl> catch ( ConfigurationException e ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> index 1d0f24d . . b838a06 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java <nl> @ @ - 32 , 11 + 32 , 6 @ @ public class AsciiType extends AbstractType < String > <nl> { <nl> public static final AsciiType instance = new AsciiType ( ) ; <nl> <nl> - public static AsciiType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> AsciiType ( ) { } / / singleton <nl> <nl> public String compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> index d6f9bfa . . 41d147a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java <nl> @ @ - 29 , 11 + 29 , 6 @ @ public class BytesType extends AbstractType < ByteBuffer > <nl> { <nl> public static final BytesType instance = new BytesType ( ) ; <nl> <nl> - public static BytesType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> BytesType ( ) { } / / singleton <nl> <nl> public ByteBuffer compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> index 4c14ab6 . . de23446 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java <nl> @ @ - 29 , 12 + 29 , 6 @ @ public final class IntegerType extends AbstractType < BigInteger > <nl> { <nl> public static final IntegerType instance = new IntegerType ( ) ; <nl> <nl> - public static IntegerType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> - <nl> private static int findMostSignificantByte ( ByteBuffer bytes ) <nl> { <nl> int len = bytes . remaining ( ) - 1 ; <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> index d4e27e3 . . a4ec39f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class LexicalUUIDType extends AbstractType < UUID > <nl> { <nl> public static final LexicalUUIDType instance = new LexicalUUIDType ( ) ; <nl> <nl> - public static LexicalUUIDType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> LexicalUUIDType ( ) { } / / singleton <nl> <nl> public UUID compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> index dc0ddb2 . . 34c6f37 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java <nl> @ @ - 29 , 11 + 29 , 6 @ @ public class LongType extends AbstractType < Long > <nl> { <nl> public static final LongType instance = new LongType ( ) ; <nl> <nl> - public static LongType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> LongType ( ) { } / / singleton <nl> <nl> public Long compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> index 47d59b2 . . 078479f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class TimeUUIDType extends AbstractType < UUID > <nl> { <nl> public static final TimeUUIDType instance = new TimeUUIDType ( ) ; <nl> <nl> - public static TimeUUIDType getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> TimeUUIDType ( ) { } / / singleton <nl> <nl> public UUID compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> index 87c8937 . . 116a2ed 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java <nl> @ @ - 30 , 11 + 30 , 6 @ @ public class UTF8Type extends AbstractType < String > <nl> { <nl> public static final UTF8Type instance = new UTF8Type ( ) ; <nl> <nl> - public static UTF8Type getInstance ( ) <nl> - { <nl> - return instance ; <nl> - } <nl> - <nl> UTF8Type ( ) { } / / singleton <nl> <nl> public String compose ( ByteBuffer bytes ) <nl> diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> index 87bed53 . . 1f33a05 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java <nl> @ @ - 511 , 7 + 511 , 6 @ @ public class FBUtilities <nl> <nl> / * * <nl> * Constructs an instance of the given class , which must have a no - arg constructor . <nl> - * TODO : Similar method for our ' instance member ' singleton pattern would be nice . <nl> * @ param classname Fully qualified classname . <nl> * @ param readable Descriptive noun for the role the class plays . <nl> * @ throws ConfigurationException If the class cannot be found . <nl> @ @ - 543 , 31 + 542 , 6 @ @ public class FBUtilities <nl> } <nl> } <nl> <nl> - public static < T > T getInstance ( String classname , String readable ) throws ConfigurationException <nl> - { <nl> - Class cls = classForName ( classname , readable ) ; <nl> - T rval = null ; <nl> - try <nl> - { <nl> - rval = ( T ) cls . getDeclaredMethod ( " getInstance " ) . invoke ( new Object [ ] { null , null } ) ; <nl> - <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - throw new ConfigurationException ( " Class does not have the getInstance method with no arguments " ) ; <nl> - } <nl> - catch ( InvocationTargetException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; <nl> - } <nl> - catch ( IllegalAccessException e ) <nl> - { <nl> - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; <nl> - } <nl> - <nl> - return rval ; <nl> - } <nl> - <nl> public static < T extends Comparable > SortedSet < T > singleton ( T column ) <nl> { <nl> return new TreeSet < T > ( Arrays . asList ( column ) ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index 0ce36e2 . . 1fdebd8 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 52 , 18 + 52 , 18 @ @ public class ArrayBackedSortedColumns extends ColumnFamily 
 
 public static final ColumnFamily . Factory < ArrayBackedSortedColumns > factory = new Factory < ArrayBackedSortedColumns > ( ) 
 { 
 - public ArrayBackedSortedColumns create ( CFMetaData metadata , boolean insertReversed ) 
 + public ArrayBackedSortedColumns create ( CFMetaData metadata , boolean insertReversed , int initialCapacity ) 
 { 
 - return new ArrayBackedSortedColumns ( metadata , insertReversed ) ; 
 + return new ArrayBackedSortedColumns ( metadata , insertReversed , initialCapacity ) ; 
 } 
 } ; 
 
 - private ArrayBackedSortedColumns ( CFMetaData metadata , boolean reversed ) 
 + private ArrayBackedSortedColumns ( CFMetaData metadata , boolean reversed , int initialCapacity ) 
 { 
 super ( metadata ) ; 
 this . reversed = reversed ; 
 this . deletionInfo = DeletionInfo . live ( ) ; 
 - this . cells = EMPTY _ ARRAY ; 
 + this . cells = initialCapacity = = 0 ? EMPTY _ ARRAY : new Cell [ initialCapacity ] ; 
 this . size = 0 ; 
 this . sortedSize = 0 ; 
 this . isSorted = true ; 
 @ @ - 235 , 9 + 235 , 39 @ @ public class ArrayBackedSortedColumns extends ColumnFamily 
 if ( other . getColumnCount ( ) = = 0 ) 
 return ; 
 
 - Iterator < Cell > iterator = reversed ? other . reverseIterator ( ) : other . iterator ( ) ; 
 - while ( iterator . hasNext ( ) ) 
 - addColumn ( iterator . next ( ) ) ; 
 + / / In reality , with ABSC being the only remaining container ( aside from ABTC ) , other will aways be ABSC . 
 + if ( size = = 0 & & other instanceof ArrayBackedSortedColumns ) 
 + { 
 + fastAddAll ( ( ArrayBackedSortedColumns ) other ) ; 
 + } 
 + else 
 + { 
 + Iterator < Cell > iterator = reversed ? other . reverseIterator ( ) : other . iterator ( ) ; 
 + while ( iterator . hasNext ( ) ) 
 + addColumn ( iterator . next ( ) ) ; 
 + } 
 + } 
 + 
 + / / Fast path , when this ABSC is empty . 
 + private void fastAddAll ( ArrayBackedSortedColumns other ) 
 + { 
 + if ( other . isInsertReversed ( ) = = isInsertReversed ( ) ) 
 + { 
 + cells = Arrays . copyOf ( other . cells , other . cells . length ) ; 
 + size = other . size ; 
 + sortedSize = other . sortedSize ; 
 + isSorted = other . isSorted ; 
 + } 
 + else 
 + { 
 + if ( cells . length < other . getColumnCount ( ) ) 
 + cells = new Cell [ Math . max ( MINIMAL _ CAPACITY , other . getColumnCount ( ) ) ] ; 
 + Iterator < Cell > iterator = reversed ? other . reverseIterator ( ) : other . iterator ( ) ; 
 + while ( iterator . hasNext ( ) ) 
 + cells [ size + + ] = iterator . next ( ) ; 
 + sortedSize = size ; 
 + isSorted = true ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 index f75efd2 . . 5cc43d9 100644 
 - - - a / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 + + + b / src / java / org / apache / cassandra / db / AtomicBTreeColumns . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class AtomicBTreeColumns extends ColumnFamily 
 
 public static final Factory < AtomicBTreeColumns > factory = new Factory < AtomicBTreeColumns > ( ) 
 { 
 - public AtomicBTreeColumns create ( CFMetaData metadata , boolean insertReversed ) 
 + public AtomicBTreeColumns create ( CFMetaData metadata , boolean insertReversed , int initialCapacity ) 
 { 
 if ( insertReversed ) 
 throw new IllegalArgumentException ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 3437410 . . 8762462 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 493 , 7 + 493 , 12 @ @ public abstract class ColumnFamily implements Iterable < Cell > , IRowCacheEntry 
 * allow optimizing for both forward and reversed slices . This does not matter for ThreadSafeSortedColumns . 
 * Note that this is only an hint on how we expect to do insertion , this does not change the map sorting . 
 * / 
 - public abstract T create ( CFMetaData metadata , boolean insertReversed ) ; 
 + public abstract T create ( CFMetaData metadata , boolean insertReversed , int initialCapacity ) ; 
 + 
 + public T create ( CFMetaData metadata , boolean insertReversed ) 
 + { 
 + return create ( metadata , insertReversed , 0 ) ; 
 + } 
 
 public T create ( CFMetaData metadata ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 index e2a6608 . . 9788168 100644 
 - - - a / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 + + + b / src / java / org / apache / cassandra / db / index / AbstractSimplePerColumnSecondaryIndex . java 
 @ @ - 86 , 21 + 86 , 6 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 baseCfs . metadata . getColumnDefinition ( expr . column ) . type . getString ( expr . value ) ) ; 
 } 
 
 - public void delete ( ByteBuffer rowKey , Cell cell ) 
 - { 
 - throw new IllegalStateException ( ) ; 
 - } 
 - 
 - public void insert ( ByteBuffer rowKey , Cell cell ) 
 - { 
 - throw new IllegalStateException ( ) ; 
 - } 
 - 
 - public void update ( ByteBuffer rowKey , Cell cell ) 
 - { 
 - throw new IllegalStateException ( ) ; 
 - } 
 - 
 public void delete ( ByteBuffer rowKey , Cell cell , OpOrder . Group opGroup ) 
 { 
 if ( cell . isMarkedForDelete ( System . currentTimeMillis ( ) ) ) 
 @ @ - 108 , 7 + 93 , 7 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 
 DecoratedKey valueKey = getIndexKeyFor ( getIndexedValue ( rowKey , cell ) ) ; 
 int localDeletionTime = ( int ) ( System . currentTimeMillis ( ) / 1000 ) ; 
 - ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata ) ; 
 + ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata , false , 1 ) ; 
 cfi . addTombstone ( makeIndexColumnName ( rowKey , cell ) , localDeletionTime , cell . timestamp ( ) ) ; 
 indexCfs . apply ( valueKey , cfi , SecondaryIndexManager . nullUpdater , opGroup , null ) ; 
 if ( logger . isDebugEnabled ( ) ) 
 @ @ - 118 , 7 + 103 , 7 @ @ public abstract class AbstractSimplePerColumnSecondaryIndex extends PerColumnSec 
 public void insert ( ByteBuffer rowKey , Cell cell , OpOrder . Group opGroup ) 
 { 
 DecoratedKey valueKey = getIndexKeyFor ( getIndexedValue ( rowKey , cell ) ) ; 
 - ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata ) ; 
 + ColumnFamily cfi = ArrayBackedSortedColumns . factory . create ( indexCfs . metadata , false , 1 ) ; 
 CellName name = makeIndexColumnName ( rowKey , cell ) ; 
 if ( cell instanceof ExpiringCell ) 
 {

NEAREST DIFF:
diff - - git a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 index 8969bfd . . 0506b66 100644 
 - - - a / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 + + + b / contrib / pig / src / java / org / apache / cassandra / hadoop / pig / CassandraStorage . java 
 @ @ - 179 , 8 + 179 , 8 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface 
 AbstractType default _ validator = null ; 
 try 
 { 
 - comparator = FBUtilities . getInstance ( cfDef . comparator _ type , " comparator " ) ; 
 - default _ validator = FBUtilities . getInstance ( cfDef . default _ validation _ class , " validator " ) ; 
 + comparator = FBUtilities . getComparator ( cfDef . comparator _ type ) ; 
 + default _ validator = FBUtilities . getComparator ( cfDef . default _ validation _ class ) ; 
 } 
 catch ( ConfigurationException e ) 
 { 
 @ @ - 202 , 7 + 202 , 7 @ @ public class CassandraStorage extends LoadFunc implements StoreFuncInterface 
 AbstractType validator = null ; 
 try 
 { 
 - validator = FBUtilities . getInstance ( cd . getValidation _ class ( ) , " validator " ) ; 
 + validator = FBUtilities . getComparator ( cd . getValidation _ class ( ) ) ; 
 validators . put ( cd . name , validator ) ; 
 } 
 catch ( ConfigurationException e ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / AsciiType . java b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 index 1d0f24d . . b838a06 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / AsciiType . java 
 @ @ - 32 , 11 + 32 , 6 @ @ public class AsciiType extends AbstractType < String > 
 { 
 public static final AsciiType instance = new AsciiType ( ) ; 
 
 - public static AsciiType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 AsciiType ( ) { } / / singleton 
 
 public String compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / BytesType . java b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 index d6f9bfa . . 41d147a 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / BytesType . java 
 @ @ - 29 , 11 + 29 , 6 @ @ public class BytesType extends AbstractType < ByteBuffer > 
 { 
 public static final BytesType instance = new BytesType ( ) ; 
 
 - public static BytesType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 BytesType ( ) { } / / singleton 
 
 public ByteBuffer compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / IntegerType . java b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 index 4c14ab6 . . de23446 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / IntegerType . java 
 @ @ - 29 , 12 + 29 , 6 @ @ public final class IntegerType extends AbstractType < BigInteger > 
 { 
 public static final IntegerType instance = new IntegerType ( ) ; 
 
 - public static IntegerType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 - 
 private static int findMostSignificantByte ( ByteBuffer bytes ) 
 { 
 int len = bytes . remaining ( ) - 1 ; 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 index d4e27e3 . . a4ec39f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LexicalUUIDType . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class LexicalUUIDType extends AbstractType < UUID > 
 { 
 public static final LexicalUUIDType instance = new LexicalUUIDType ( ) ; 
 
 - public static LexicalUUIDType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 LexicalUUIDType ( ) { } / / singleton 
 
 public UUID compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / LongType . java b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 index dc0ddb2 . . 34c6f37 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / LongType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / LongType . java 
 @ @ - 29 , 11 + 29 , 6 @ @ public class LongType extends AbstractType < Long > 
 { 
 public static final LongType instance = new LongType ( ) ; 
 
 - public static LongType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 LongType ( ) { } / / singleton 
 
 public Long compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 index 47d59b2 . . 078479f 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / TimeUUIDType . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class TimeUUIDType extends AbstractType < UUID > 
 { 
 public static final TimeUUIDType instance = new TimeUUIDType ( ) ; 
 
 - public static TimeUUIDType getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 TimeUUIDType ( ) { } / / singleton 
 
 public UUID compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 index 87c8937 . . 116a2ed 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / UTF8Type . java 
 @ @ - 30 , 11 + 30 , 6 @ @ public class UTF8Type extends AbstractType < String > 
 { 
 public static final UTF8Type instance = new UTF8Type ( ) ; 
 
 - public static UTF8Type getInstance ( ) 
 - { 
 - return instance ; 
 - } 
 - 
 UTF8Type ( ) { } / / singleton 
 
 public String compose ( ByteBuffer bytes ) 
 diff - - git a / src / java / org / apache / cassandra / utils / FBUtilities . java b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 index 87bed53 . . 1f33a05 100644 
 - - - a / src / java / org / apache / cassandra / utils / FBUtilities . java 
 + + + b / src / java / org / apache / cassandra / utils / FBUtilities . java 
 @ @ - 511 , 7 + 511 , 6 @ @ public class FBUtilities 
 
 / * * 
 * Constructs an instance of the given class , which must have a no - arg constructor . 
 - * TODO : Similar method for our ' instance member ' singleton pattern would be nice . 
 * @ param classname Fully qualified classname . 
 * @ param readable Descriptive noun for the role the class plays . 
 * @ throws ConfigurationException If the class cannot be found . 
 @ @ - 543 , 31 + 542 , 6 @ @ public class FBUtilities 
 } 
 } 
 
 - public static < T > T getInstance ( String classname , String readable ) throws ConfigurationException 
 - { 
 - Class cls = classForName ( classname , readable ) ; 
 - T rval = null ; 
 - try 
 - { 
 - rval = ( T ) cls . getDeclaredMethod ( " getInstance " ) . invoke ( new Object [ ] { null , null } ) ; 
 - 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - throw new ConfigurationException ( " Class does not have the getInstance method with no arguments " ) ; 
 - } 
 - catch ( InvocationTargetException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; 
 - } 
 - catch ( IllegalAccessException e ) 
 - { 
 - throw new ConfigurationException ( String . format ( " Could not call method getInstance on % s class % s " , readable , classname ) ) ; 
 - } 
 - 
 - return rval ; 
 - } 
 - 
 public static < T extends Comparable > SortedSet < T > singleton ( T column ) 
 { 
 return new TreeSet < T > ( Arrays . asList ( column ) ) ;
