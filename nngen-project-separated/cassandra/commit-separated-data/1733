BLEU SCORE: 0.04515183688171632

TEST MSG: Digest will now always updated for non - empty rows
GENERATED MSG: remove unnecessary BB allocatetion ; follow up for CASSANDRA - 8979

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> index b562ba5 . . 9962d3f 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java <nl> @ @ - 134 , 6 + 134 , 9 @ @ public class LazilyCompactedRow extends AbstractCompactedRow implements Iterable <nl> { <nl> assert ! closed ; <nl> <nl> + / / create merge iterator for reduced rows <nl> + Iterator < OnDiskAtom > iter = iterator ( ) ; <nl> + <nl> / / no special - case for rows . size = = 1 , we ' re actually skipping some bytes here so just <nl> / / blindly updating everything wouldn ' t be correct <nl> DataOutputBuffer out = new DataOutputBuffer ( ) ; <nl> @ @ - 142 , 7 + 145 , 10 @ @ public class LazilyCompactedRow extends AbstractCompactedRow implements Iterable <nl> { <nl> DeletionTime . serializer . serialize ( emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) , out ) ; <nl> / / do not update digest in case of missing or purged row level tombstones , see CASSANDRA - 8979 <nl> - if ( emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) ! = DeletionTime . LIVE ) <nl> + / / - digest for non - empty rows needs to be updated with deletion in any case to match digest with versions before patch <nl> + / / - empty rows must not update digest in case of LIVE delete status to avoid mismatches with non - existing rows <nl> + / / this will however introduce in return a digest mismatch for versions before patch ( which would update digest in any case ) <nl> + if ( iter . hasNext ( ) | | emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) ! = DeletionTime . LIVE ) <nl> { <nl> digest . update ( out . getData ( ) , 0 , out . getLength ( ) ) ; <nl> } <nl> @ @ - 154 , 7 + 160 , 6 @ @ public class LazilyCompactedRow extends AbstractCompactedRow implements Iterable <nl> <nl> / / initialize indexBuilder for the benefit of its tombstoneTracker , used by our reducing iterator <nl> indexBuilder = new ColumnIndex . Builder ( emptyColumnFamily , key . key , out ) ; <nl> - Iterator < OnDiskAtom > iter = iterator ( ) ; <nl> while ( iter . hasNext ( ) ) <nl> iter . next ( ) . updateDigest ( digest ) ; <nl> close ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> index f41e073 . . db72847 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java <nl> @ @ - 157 , 20 + 157 , 15 @ @ public class PrecompactedRow extends AbstractCompactedRow <nl> if ( compactedCf = = null ) <nl> return ; <nl> <nl> - / / do not update digest in case of missing or purged row level tombstones , see CASSANDRA - 8979 <nl> - if ( compactedCf . deletionInfo ( ) . getTopLevelDeletion ( ) ! = DeletionTime . LIVE ) <nl> + DataOutputBuffer buffer = new DataOutputBuffer ( ) ; <nl> + try <nl> { <nl> - DataOutputBuffer buffer = new DataOutputBuffer ( ) ; <nl> - try <nl> - { <nl> - DeletionTime . serializer . serialize ( compactedCf . deletionInfo ( ) . getTopLevelDeletion ( ) , buffer ) ; <nl> - <nl> - digest . update ( buffer . getData ( ) , 0 , buffer . getLength ( ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + DeletionTime . serializer . serialize ( compactedCf . deletionInfo ( ) . getTopLevelDeletion ( ) , buffer ) ; <nl> + digest . update ( buffer . getData ( ) , 0 , buffer . getLength ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> compactedCf . updateDigest ( digest ) ; <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 index b562ba5 . . 9962d3f 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / LazilyCompactedRow . java 
 @ @ - 134 , 6 + 134 , 9 @ @ public class LazilyCompactedRow extends AbstractCompactedRow implements Iterable 
 { 
 assert ! closed ; 
 
 + / / create merge iterator for reduced rows 
 + Iterator < OnDiskAtom > iter = iterator ( ) ; 
 + 
 / / no special - case for rows . size = = 1 , we ' re actually skipping some bytes here so just 
 / / blindly updating everything wouldn ' t be correct 
 DataOutputBuffer out = new DataOutputBuffer ( ) ; 
 @ @ - 142 , 7 + 145 , 10 @ @ public class LazilyCompactedRow extends AbstractCompactedRow implements Iterable 
 { 
 DeletionTime . serializer . serialize ( emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) , out ) ; 
 / / do not update digest in case of missing or purged row level tombstones , see CASSANDRA - 8979 
 - if ( emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) ! = DeletionTime . LIVE ) 
 + / / - digest for non - empty rows needs to be updated with deletion in any case to match digest with versions before patch 
 + / / - empty rows must not update digest in case of LIVE delete status to avoid mismatches with non - existing rows 
 + / / this will however introduce in return a digest mismatch for versions before patch ( which would update digest in any case ) 
 + if ( iter . hasNext ( ) | | emptyColumnFamily . deletionInfo ( ) . getTopLevelDeletion ( ) ! = DeletionTime . LIVE ) 
 { 
 digest . update ( out . getData ( ) , 0 , out . getLength ( ) ) ; 
 } 
 @ @ - 154 , 7 + 160 , 6 @ @ public class LazilyCompactedRow extends AbstractCompactedRow implements Iterable 
 
 / / initialize indexBuilder for the benefit of its tombstoneTracker , used by our reducing iterator 
 indexBuilder = new ColumnIndex . Builder ( emptyColumnFamily , key . key , out ) ; 
 - Iterator < OnDiskAtom > iter = iterator ( ) ; 
 while ( iter . hasNext ( ) ) 
 iter . next ( ) . updateDigest ( digest ) ; 
 close ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 index f41e073 . . db72847 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / PrecompactedRow . java 
 @ @ - 157 , 20 + 157 , 15 @ @ public class PrecompactedRow extends AbstractCompactedRow 
 if ( compactedCf = = null ) 
 return ; 
 
 - / / do not update digest in case of missing or purged row level tombstones , see CASSANDRA - 8979 
 - if ( compactedCf . deletionInfo ( ) . getTopLevelDeletion ( ) ! = DeletionTime . LIVE ) 
 + DataOutputBuffer buffer = new DataOutputBuffer ( ) ; 
 + try 
 { 
 - DataOutputBuffer buffer = new DataOutputBuffer ( ) ; 
 - try 
 - { 
 - DeletionTime . serializer . serialize ( compactedCf . deletionInfo ( ) . getTopLevelDeletion ( ) , buffer ) ; 
 - 
 - digest . update ( buffer . getData ( ) , 0 , buffer . getLength ( ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + DeletionTime . serializer . serialize ( compactedCf . deletionInfo ( ) . getTopLevelDeletion ( ) , buffer ) ; 
 + digest . update ( buffer . getData ( ) , 0 , buffer . getLength ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 } 
 compactedCf . updateDigest ( digest ) ; 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
