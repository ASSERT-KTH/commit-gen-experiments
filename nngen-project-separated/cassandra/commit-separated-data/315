BLEU SCORE: 0.03772691894380681

TEST MSG: force minumum timeout value
GENERATED MSG: merge from 1 . 2 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a14e390 . . d0ec78d 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * force minumum timeout value ( CASSANDRA - 9375 ) <nl> * use netty for streaming ( CASSANDRA - 12229 ) <nl> * Use netty for internode messaging ( CASSANDRA - 8457 ) <nl> * Add bytes repaired / unrepaired to nodetool tablestats ( CASSANDRA - 13774 ) <nl> diff - - git a / NEWS . txt b / NEWS . txt <nl> index 4d30631 . . 253d773 100644 <nl> - - - a / NEWS . txt <nl> + + + b / NEWS . txt <nl> @ @ - 60 , 6 + 60 , 9 @ @ Upgrading <nl> - Config option index _ interval has been removed ( it was deprecated since 2 . 0 ) <nl> - Deprecated repair JMX APIs are removed . <nl> - The version of snappy - java has been upgraded to 1 . 1 . 2 . 6 <nl> + 	 - the miniumum value for internode message timeouts is 10ms . Previously , any <nl> + 	 positive value was allowed . See cassandra . yaml entries like <nl> + 	 read _ request _ timeout _ in _ ms for more details . <nl> <nl> 3 . 11 . 0 <nl> = = = = = = <nl> diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index bdc68d1 . . 3db82a1 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 780 , 22 + 780 , 29 @ @ sstable _ preemptive _ open _ interval _ in _ mb : 50 <nl> # When unset , the default is 200 Mbps or 25 MB / s <nl> # inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec : 200 <nl> <nl> - # How long the coordinator should wait for read operations to complete <nl> + # How long the coordinator should wait for read operations to complete . <nl> + # Lowest acceptable value is 10 ms . <nl> read _ request _ timeout _ in _ ms : 5000 <nl> - # How long the coordinator should wait for seq or index scans to complete <nl> + # How long the coordinator should wait for seq or index scans to complete . <nl> + # Lowest acceptable value is 10 ms . <nl> range _ request _ timeout _ in _ ms : 10000 <nl> - # How long the coordinator should wait for writes to complete <nl> + # How long the coordinator should wait for writes to complete . <nl> + # Lowest acceptable value is 10 ms . <nl> write _ request _ timeout _ in _ ms : 2000 <nl> - # How long the coordinator should wait for counter writes to complete <nl> + # How long the coordinator should wait for counter writes to complete . <nl> + # Lowest acceptable value is 10 ms . <nl> counter _ write _ request _ timeout _ in _ ms : 5000 <nl> # How long a coordinator should continue to retry a CAS operation <nl> - # that contends with other proposals for the same row <nl> + # that contends with other proposals for the same row . <nl> + # Lowest acceptable value is 10 ms . <nl> cas _ contention _ timeout _ in _ ms : 1000 <nl> # How long the coordinator should wait for truncates to complete <nl> # ( This can be much longer , because unless auto _ snapshot is disabled <nl> # we need to flush first so we can snapshot before removing the data . ) <nl> + # Lowest acceptable value is 10 ms . <nl> truncate _ request _ timeout _ in _ ms : 60000 <nl> - # The default timeout for other , miscellaneous operations <nl> + # The default timeout for other , miscellaneous operations . <nl> + # Lowest acceptable value is 10 ms . <nl> request _ timeout _ in _ ms : 10000 <nl> <nl> # How long before a node logs slow queries . Select queries that take longer than <nl> diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> index 302a528 . . a839224 100644 <nl> - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java <nl> @ @ - 77 , 6 + 77 , 11 @ @ public class DatabaseDescriptor <nl> <nl> private static Config conf ; <nl> <nl> + / * * <nl> + * Request timeouts can not be less than below defined value ( see CASSANDRA - 9375 ) <nl> + * / <nl> + static final long LOWEST _ ACCEPTED _ TIMEOUT = 10L ; <nl> + <nl> private static IEndpointSnitch snitch ; <nl> private static InetAddress listenAddress ; / / leave null so we can fall through to getLocalHost <nl> private static InetAddress broadcastAddress ; <nl> @ @ - 414 , 6 + 419 , 8 @ @ public class DatabaseDescriptor <nl> else <nl> logger . info ( " Global memtable off - heap threshold is enabled at { } MB " , conf . memtable _ offheap _ space _ in _ mb ) ; <nl> <nl> + checkForLowestAcceptedTimeouts ( conf ) ; <nl> + <nl> if ( conf . native _ transport _ max _ frame _ size _ in _ mb < = 0 ) <nl> throw new ConfigurationException ( " native _ transport _ max _ frame _ size _ in _ mb must be positive , but was " + conf . native _ transport _ max _ frame _ size _ in _ mb , false ) ; <nl> <nl> @ @ - 838 , 6 + 845 , 57 @ @ public class DatabaseDescriptor <nl> throw new ConfigurationException ( " The seed provider lists no seeds . " , false ) ; <nl> } <nl> <nl> + @ VisibleForTesting <nl> + static void checkForLowestAcceptedTimeouts ( Config conf ) <nl> + { <nl> + if ( conf . read _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " read _ request _ timeout _ in _ ms " , conf . read _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . read _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + <nl> + if ( conf . range _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " range _ request _ timeout _ in _ ms " , conf . range _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . range _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + <nl> + if ( conf . request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " request _ timeout _ in _ ms " , conf . request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + <nl> + if ( conf . write _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " write _ request _ timeout _ in _ ms " , conf . write _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . write _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + <nl> + if ( conf . cas _ contention _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " cas _ contention _ timeout _ in _ ms " , conf . cas _ contention _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . cas _ contention _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + <nl> + if ( conf . counter _ write _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " counter _ write _ request _ timeout _ in _ ms " , conf . counter _ cache _ keys _ to _ save , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . counter _ write _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + <nl> + if ( conf . truncate _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) <nl> + { <nl> + logInfo ( " truncate _ request _ timeout _ in _ ms " , conf . truncate _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + conf . truncate _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; <nl> + } <nl> + } <nl> + <nl> + private static void logInfo ( String property , long actualValue , long lowestAcceptedValue ) <nl> + { <nl> + logger . info ( " found { } : : { } less than lowest acceptable value { } , continuing with { } " , property , actualValue , lowestAcceptedValue , lowestAcceptedValue ) ; <nl> + } <nl> + <nl> public static void applyInitialTokens ( ) <nl> { <nl> if ( conf . initial _ token ! = null ) <nl> diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> index c1dc268 . . 3d88164 100644 <nl> - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java <nl> @ @ - 210 , 4 + 210 , 44 @ @ public class DatabaseDescriptorTest <nl> assertEquals ( 7 , tokens . size ( ) ) ; <nl> assertTrue ( tokens . containsAll ( Arrays . asList ( new String [ ] { " a " , " b " , " c " , " d " , " f " , " g " , " h " } ) ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testLowestAcceptableTimeouts ( ) throws ConfigurationException <nl> + { <nl> + Config testConfig = new Config ( ) ; <nl> + testConfig . read _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + testConfig . range _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + testConfig . write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + testConfig . truncate _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + testConfig . cas _ contention _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + testConfig . counter _ write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + testConfig . request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; <nl> + <nl> + assertTrue ( testConfig . read _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . range _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . write _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . truncate _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . cas _ contention _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . counter _ write _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + <nl> + / / set less than Lowest acceptable value <nl> + testConfig . read _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + testConfig . range _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + testConfig . write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + testConfig . truncate _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + testConfig . cas _ contention _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + testConfig . counter _ write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + testConfig . request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; <nl> + <nl> + DatabaseDescriptor . checkForLowestAcceptedTimeouts ( testConfig ) ; <nl> + <nl> + assertTrue ( testConfig . read _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . range _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . write _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . truncate _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . cas _ contention _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . counter _ write _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + assertTrue ( testConfig . request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a758fdb . . a5662d8 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 30 , 6 + 30 , 9 @ @ Merged from 1 . 1 : <nl> * reset getRangeSlice filter after finishing a row for get _ paged _ slice <nl> ( CASSANDRA - 4919 ) <nl> * expunge row cache post - truncate ( CASSANDRA - 4940 ) <nl> + * remove IAuthority2 ( CASSANDRA - 4875 ) <nl> + * Allow static CF definition with compact storage ( CASSANDRA - 4910 ) <nl> + * Fix endless loop / compaction of schema _ * CFs due to broken timestamps ( CASSANDRA - 4880 ) <nl> <nl> <nl> 1 . 2 - beta2 <nl> diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java <nl> index 5c85530 . . fdce853 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java <nl> + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java <nl> @ @ - 47 , 9 + 47 , 9 @ @ public class DefinitionsUpdateVerbHandler implements IVerbHandler < Collection < Row <nl> { <nl> public void runMayThrow ( ) throws Exception <nl> { <nl> - if ( message . version < MessagingService . VERSION _ 11 ) <nl> + if ( message . version < MessagingService . VERSION _ 117 ) <nl> { <nl> - logger . error ( " Can ' t accept schema migrations from Cassandra versions previous to 1 . 1 , please upgrade first " ) ; <nl> + logger . error ( " Can ' t accept schema migrations from Cassandra versions previous to 1 . 1 . 7 , please upgrade first " ) ; <nl> return ; <nl> } <nl> DefsTable . mergeSchema ( message . payload ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java <nl> index f1b2b4f . . 8569553 100644 <nl> - - - a / src / java / org / apache / cassandra / db / DefsTable . java <nl> + + + b / src / java / org / apache / cassandra / db / DefsTable . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . db ; <nl> <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . nio . charset . CharacterCodingException ; <nl> import java . util . * ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . Future ; <nl> @ @ - 172 , 7 + 171 , 7 @ @ public class DefsTable <nl> ColumnFamilyStore cfs = Table . open ( Table . SYSTEM _ KS ) . getColumnFamilyStore ( columnFamily ) ; <nl> <nl> boolean needsCleanup = false ; <nl> - long timestamp = FBUtilities . timestampMicros ( ) ; <nl> + Date now = new Date ( ) ; <nl> <nl> List < Row > rows = SystemTable . serializedSchema ( columnFamily ) ; <nl> <nl> @ @ - 184 , 11 + 183 , 24 @ @ public class DefsTable <nl> <nl> for ( IColumn column : row . cf . columns ) <nl> { <nl> - if ( column . timestamp ( ) > timestamp ) <nl> + Date columnDate = new Date ( column . timestamp ( ) ) ; <nl> + <nl> + if ( columnDate . after ( now ) ) <nl> + { <nl> + Date micros = new Date ( column . timestamp ( ) / 1000 ) ; / / assume that it was in micros <nl> + <nl> + Calendar calendar = Calendar . getInstance ( ) ; <nl> + calendar . setTime ( micros ) ; <nl> + <nl> + if ( ( micros . before ( now ) & & calendar . get ( Calendar . YEAR ) = = 1970 ) | | micros . after ( now ) ) <nl> + { <nl> + needsCleanup = true ; <nl> + break row _ check _ loop ; <nl> + } <nl> + } <nl> + else / / millis and we have to fix it to micros <nl> { <nl> needsCleanup = true ; <nl> - / / exit the loop on first found timestamp mismatch as we know that it <nl> - / / wouldn ' t be only one column / row that we would have to fix anyway <nl> break row _ check _ loop ; <nl> } <nl> } <nl> @ @ - 212 , 6 + 224 , 8 @ @ public class DefsTable <nl> throw new AssertionError ( e ) ; <nl> } <nl> <nl> + long microTimestamp = now . getTime ( ) * 1000 ; <nl> + <nl> for ( Row row : rows ) <nl> { <nl> if ( Schema . invalidSchemaRow ( row ) ) <nl> @ @ - 222 , 7 + 236 , 7 @ @ public class DefsTable <nl> for ( IColumn column : row . cf . columns ) <nl> { <nl> if ( column . isLive ( ) ) <nl> - mutation . add ( new QueryPath ( columnFamily , null , column . name ( ) ) , column . value ( ) , timestamp ) ; <nl> + mutation . add ( new QueryPath ( columnFamily , null , column . name ( ) ) , column . value ( ) , microTimestamp ) ; <nl> } <nl> <nl> mutation . apply ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java <nl> index c37bcfb . . b8bec1e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowMutation . java <nl> + + + b / src / java / org / apache / cassandra / db / RowMutation . java <nl> @ @ - 460 , 6 + 460 , 9 @ @ public class RowMutation implements IMutation <nl> cf . addColumn ( new Column ( column . name ( ) , column . value ( ) , now ) ) ; <nl> } <nl> <nl> + if ( cf . isMarkedForDelete ( ) & & cf . isEmpty ( ) ) <nl> + continue ; <nl> + <nl> fixedModifications . put ( modification . getKey ( ) , cf ) ; <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java <nl> index d5aae5c . . cce3925 100644 <nl> - - - a / src / java / org / apache / cassandra / net / MessagingService . java <nl> + + + b / src / java / org / apache / cassandra / net / MessagingService . java <nl> @ @ - 69 , 10 + 69 , 10 @ @ public final class MessagingService implements MessagingServiceMBean <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = MessagingService " ; <nl> <nl> / / 8 bits version , so don ' t waste versions <nl> - / / We are no longer compatible with versions older than 1 . 0 <nl> - public static final int VERSION _ 10 = 3 ; <nl> - public static final int VERSION _ 11 = 4 ; <nl> - public static final int VERSION _ 12 = 5 ; <nl> + public static final int VERSION _ 10 = 3 ; <nl> + public static final int VERSION _ 11 = 4 ; <nl> + public static final int VERSION _ 117 = 5 ; <nl> + public static final int VERSION _ 12 = 6 ; <nl> public static final int current _ version = VERSION _ 12 ; <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> index d1987c2 . . 76250a4 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationManager . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationManager . java <nl> @ @ - 102 , 8 + 102 , 8 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> <nl> private static void rectifySchema ( UUID theirVersion , final InetAddress endpoint ) <nl> { <nl> - / / Can ' t request migrations from nodes with versions younger than 1 . 1 <nl> - if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) <nl> + / / Can ' t request migrations from nodes with versions younger than 1 . 1 . 7 <nl> + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 117 ) <nl> return ; <nl> <nl> if ( Schema . instance . getVersion ( ) . equals ( theirVersion ) ) <nl> @ @ - 317 , 11 + 317 , 12 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber <nl> liveEndpoints . remove ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> <nl> / / force migration is there are nodes around , first of all <nl> - / / check if there are nodes with versions > = 1 . 1 to request migrations from , <nl> + / / check if there are nodes with versions > = 1 . 1 . 7 to request migrations from , <nl> / / because migration format of the nodes with versions < 1 . 1 is incompatible with older versions <nl> + / / and due to broken timestamps in versions prior to 1 . 1 . 7 <nl> for ( InetAddress node : liveEndpoints ) <nl> { <nl> - if ( MessagingService . instance ( ) . getVersion ( node ) > = MessagingService . VERSION _ 11 ) <nl> + if ( MessagingService . instance ( ) . getVersion ( node ) > = MessagingService . VERSION _ 117 ) <nl> { <nl> if ( logger . isDebugEnabled ( ) ) <nl> logger . debug ( " Requesting schema from " + node ) ; <nl> diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> index 343e874 . . 5c9684a 100644 <nl> - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml <nl> @ @ - 130 , 7 + 130 , 7 @ @ commands : <nl> describe ; - Describes current authenticated keyspace <nl> describe < keyspace > ; - Describe this keyspace <nl> describe < column _ family > ; - Describe the colum family in the current authenticated keyspace <nl> - - name : <nl> + - name : NODE _ DESCRIBE _ CLUSTER <nl> help : | <nl> describe cluster ; <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a14e390 . . d0ec78d 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * force minumum timeout value ( CASSANDRA - 9375 ) 
 * use netty for streaming ( CASSANDRA - 12229 ) 
 * Use netty for internode messaging ( CASSANDRA - 8457 ) 
 * Add bytes repaired / unrepaired to nodetool tablestats ( CASSANDRA - 13774 ) 
 diff - - git a / NEWS . txt b / NEWS . txt 
 index 4d30631 . . 253d773 100644 
 - - - a / NEWS . txt 
 + + + b / NEWS . txt 
 @ @ - 60 , 6 + 60 , 9 @ @ Upgrading 
 - Config option index _ interval has been removed ( it was deprecated since 2 . 0 ) 
 - Deprecated repair JMX APIs are removed . 
 - The version of snappy - java has been upgraded to 1 . 1 . 2 . 6 
 + 	 - the miniumum value for internode message timeouts is 10ms . Previously , any 
 + 	 positive value was allowed . See cassandra . yaml entries like 
 + 	 read _ request _ timeout _ in _ ms for more details . 
 
 3 . 11 . 0 
 = = = = = = 
 diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index bdc68d1 . . 3db82a1 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 780 , 22 + 780 , 29 @ @ sstable _ preemptive _ open _ interval _ in _ mb : 50 
 # When unset , the default is 200 Mbps or 25 MB / s 
 # inter _ dc _ stream _ throughput _ outbound _ megabits _ per _ sec : 200 
 
 - # How long the coordinator should wait for read operations to complete 
 + # How long the coordinator should wait for read operations to complete . 
 + # Lowest acceptable value is 10 ms . 
 read _ request _ timeout _ in _ ms : 5000 
 - # How long the coordinator should wait for seq or index scans to complete 
 + # How long the coordinator should wait for seq or index scans to complete . 
 + # Lowest acceptable value is 10 ms . 
 range _ request _ timeout _ in _ ms : 10000 
 - # How long the coordinator should wait for writes to complete 
 + # How long the coordinator should wait for writes to complete . 
 + # Lowest acceptable value is 10 ms . 
 write _ request _ timeout _ in _ ms : 2000 
 - # How long the coordinator should wait for counter writes to complete 
 + # How long the coordinator should wait for counter writes to complete . 
 + # Lowest acceptable value is 10 ms . 
 counter _ write _ request _ timeout _ in _ ms : 5000 
 # How long a coordinator should continue to retry a CAS operation 
 - # that contends with other proposals for the same row 
 + # that contends with other proposals for the same row . 
 + # Lowest acceptable value is 10 ms . 
 cas _ contention _ timeout _ in _ ms : 1000 
 # How long the coordinator should wait for truncates to complete 
 # ( This can be much longer , because unless auto _ snapshot is disabled 
 # we need to flush first so we can snapshot before removing the data . ) 
 + # Lowest acceptable value is 10 ms . 
 truncate _ request _ timeout _ in _ ms : 60000 
 - # The default timeout for other , miscellaneous operations 
 + # The default timeout for other , miscellaneous operations . 
 + # Lowest acceptable value is 10 ms . 
 request _ timeout _ in _ ms : 10000 
 
 # How long before a node logs slow queries . Select queries that take longer than 
 diff - - git a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 index 302a528 . . a839224 100644 
 - - - a / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 + + + b / src / java / org / apache / cassandra / config / DatabaseDescriptor . java 
 @ @ - 77 , 6 + 77 , 11 @ @ public class DatabaseDescriptor 
 
 private static Config conf ; 
 
 + / * * 
 + * Request timeouts can not be less than below defined value ( see CASSANDRA - 9375 ) 
 + * / 
 + static final long LOWEST _ ACCEPTED _ TIMEOUT = 10L ; 
 + 
 private static IEndpointSnitch snitch ; 
 private static InetAddress listenAddress ; / / leave null so we can fall through to getLocalHost 
 private static InetAddress broadcastAddress ; 
 @ @ - 414 , 6 + 419 , 8 @ @ public class DatabaseDescriptor 
 else 
 logger . info ( " Global memtable off - heap threshold is enabled at { } MB " , conf . memtable _ offheap _ space _ in _ mb ) ; 
 
 + checkForLowestAcceptedTimeouts ( conf ) ; 
 + 
 if ( conf . native _ transport _ max _ frame _ size _ in _ mb < = 0 ) 
 throw new ConfigurationException ( " native _ transport _ max _ frame _ size _ in _ mb must be positive , but was " + conf . native _ transport _ max _ frame _ size _ in _ mb , false ) ; 
 
 @ @ - 838 , 6 + 845 , 57 @ @ public class DatabaseDescriptor 
 throw new ConfigurationException ( " The seed provider lists no seeds . " , false ) ; 
 } 
 
 + @ VisibleForTesting 
 + static void checkForLowestAcceptedTimeouts ( Config conf ) 
 + { 
 + if ( conf . read _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " read _ request _ timeout _ in _ ms " , conf . read _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . read _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + 
 + if ( conf . range _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " range _ request _ timeout _ in _ ms " , conf . range _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . range _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + 
 + if ( conf . request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " request _ timeout _ in _ ms " , conf . request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + 
 + if ( conf . write _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " write _ request _ timeout _ in _ ms " , conf . write _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . write _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + 
 + if ( conf . cas _ contention _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " cas _ contention _ timeout _ in _ ms " , conf . cas _ contention _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . cas _ contention _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + 
 + if ( conf . counter _ write _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " counter _ write _ request _ timeout _ in _ ms " , conf . counter _ cache _ keys _ to _ save , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . counter _ write _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + 
 + if ( conf . truncate _ request _ timeout _ in _ ms < LOWEST _ ACCEPTED _ TIMEOUT ) 
 + { 
 + logInfo ( " truncate _ request _ timeout _ in _ ms " , conf . truncate _ request _ timeout _ in _ ms , LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + conf . truncate _ request _ timeout _ in _ ms = LOWEST _ ACCEPTED _ TIMEOUT ; 
 + } 
 + } 
 + 
 + private static void logInfo ( String property , long actualValue , long lowestAcceptedValue ) 
 + { 
 + logger . info ( " found { } : : { } less than lowest acceptable value { } , continuing with { } " , property , actualValue , lowestAcceptedValue , lowestAcceptedValue ) ; 
 + } 
 + 
 public static void applyInitialTokens ( ) 
 { 
 if ( conf . initial _ token ! = null ) 
 diff - - git a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 index c1dc268 . . 3d88164 100644 
 - - - a / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 + + + b / test / unit / org / apache / cassandra / config / DatabaseDescriptorTest . java 
 @ @ - 210 , 4 + 210 , 44 @ @ public class DatabaseDescriptorTest 
 assertEquals ( 7 , tokens . size ( ) ) ; 
 assertTrue ( tokens . containsAll ( Arrays . asList ( new String [ ] { " a " , " b " , " c " , " d " , " f " , " g " , " h " } ) ) ) ; 
 } 
 + 
 + @ Test 
 + public void testLowestAcceptableTimeouts ( ) throws ConfigurationException 
 + { 
 + Config testConfig = new Config ( ) ; 
 + testConfig . read _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + testConfig . range _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + testConfig . write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + testConfig . truncate _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + testConfig . cas _ contention _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + testConfig . counter _ write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + testConfig . request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT + 1 ; 
 + 
 + assertTrue ( testConfig . read _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . range _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . write _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . truncate _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . cas _ contention _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . counter _ write _ request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . request _ timeout _ in _ ms > DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + 
 + / / set less than Lowest acceptable value 
 + testConfig . read _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + testConfig . range _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + testConfig . write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + testConfig . truncate _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + testConfig . cas _ contention _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + testConfig . counter _ write _ request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + testConfig . request _ timeout _ in _ ms = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT - 1 ; 
 + 
 + DatabaseDescriptor . checkForLowestAcceptedTimeouts ( testConfig ) ; 
 + 
 + assertTrue ( testConfig . read _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . range _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . write _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . truncate _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . cas _ contention _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . counter _ write _ request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + assertTrue ( testConfig . request _ timeout _ in _ ms = = DatabaseDescriptor . LOWEST _ ACCEPTED _ TIMEOUT ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a758fdb . . a5662d8 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 30 , 6 + 30 , 9 @ @ Merged from 1 . 1 : 
 * reset getRangeSlice filter after finishing a row for get _ paged _ slice 
 ( CASSANDRA - 4919 ) 
 * expunge row cache post - truncate ( CASSANDRA - 4940 ) 
 + * remove IAuthority2 ( CASSANDRA - 4875 ) 
 + * Allow static CF definition with compact storage ( CASSANDRA - 4910 ) 
 + * Fix endless loop / compaction of schema _ * CFs due to broken timestamps ( CASSANDRA - 4880 ) 
 
 
 1 . 2 - beta2 
 diff - - git a / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java 
 index 5c85530 . . fdce853 100644 
 - - - a / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java 
 + + + b / src / java / org / apache / cassandra / db / DefinitionsUpdateVerbHandler . java 
 @ @ - 47 , 9 + 47 , 9 @ @ public class DefinitionsUpdateVerbHandler implements IVerbHandler < Collection < Row 
 { 
 public void runMayThrow ( ) throws Exception 
 { 
 - if ( message . version < MessagingService . VERSION _ 11 ) 
 + if ( message . version < MessagingService . VERSION _ 117 ) 
 { 
 - logger . error ( " Can ' t accept schema migrations from Cassandra versions previous to 1 . 1 , please upgrade first " ) ; 
 + logger . error ( " Can ' t accept schema migrations from Cassandra versions previous to 1 . 1 . 7 , please upgrade first " ) ; 
 return ; 
 } 
 DefsTable . mergeSchema ( message . payload ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / DefsTable . java b / src / java / org / apache / cassandra / db / DefsTable . java 
 index f1b2b4f . . 8569553 100644 
 - - - a / src / java / org / apache / cassandra / db / DefsTable . java 
 + + + b / src / java / org / apache / cassandra / db / DefsTable . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . db ; 
 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 - import java . nio . charset . CharacterCodingException ; 
 import java . util . * ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . Future ; 
 @ @ - 172 , 7 + 171 , 7 @ @ public class DefsTable 
 ColumnFamilyStore cfs = Table . open ( Table . SYSTEM _ KS ) . getColumnFamilyStore ( columnFamily ) ; 
 
 boolean needsCleanup = false ; 
 - long timestamp = FBUtilities . timestampMicros ( ) ; 
 + Date now = new Date ( ) ; 
 
 List < Row > rows = SystemTable . serializedSchema ( columnFamily ) ; 
 
 @ @ - 184 , 11 + 183 , 24 @ @ public class DefsTable 
 
 for ( IColumn column : row . cf . columns ) 
 { 
 - if ( column . timestamp ( ) > timestamp ) 
 + Date columnDate = new Date ( column . timestamp ( ) ) ; 
 + 
 + if ( columnDate . after ( now ) ) 
 + { 
 + Date micros = new Date ( column . timestamp ( ) / 1000 ) ; / / assume that it was in micros 
 + 
 + Calendar calendar = Calendar . getInstance ( ) ; 
 + calendar . setTime ( micros ) ; 
 + 
 + if ( ( micros . before ( now ) & & calendar . get ( Calendar . YEAR ) = = 1970 ) | | micros . after ( now ) ) 
 + { 
 + needsCleanup = true ; 
 + break row _ check _ loop ; 
 + } 
 + } 
 + else / / millis and we have to fix it to micros 
 { 
 needsCleanup = true ; 
 - / / exit the loop on first found timestamp mismatch as we know that it 
 - / / wouldn ' t be only one column / row that we would have to fix anyway 
 break row _ check _ loop ; 
 } 
 } 
 @ @ - 212 , 6 + 224 , 8 @ @ public class DefsTable 
 throw new AssertionError ( e ) ; 
 } 
 
 + long microTimestamp = now . getTime ( ) * 1000 ; 
 + 
 for ( Row row : rows ) 
 { 
 if ( Schema . invalidSchemaRow ( row ) ) 
 @ @ - 222 , 7 + 236 , 7 @ @ public class DefsTable 
 for ( IColumn column : row . cf . columns ) 
 { 
 if ( column . isLive ( ) ) 
 - mutation . add ( new QueryPath ( columnFamily , null , column . name ( ) ) , column . value ( ) , timestamp ) ; 
 + mutation . add ( new QueryPath ( columnFamily , null , column . name ( ) ) , column . value ( ) , microTimestamp ) ; 
 } 
 
 mutation . apply ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / RowMutation . java b / src / java / org / apache / cassandra / db / RowMutation . java 
 index c37bcfb . . b8bec1e 100644 
 - - - a / src / java / org / apache / cassandra / db / RowMutation . java 
 + + + b / src / java / org / apache / cassandra / db / RowMutation . java 
 @ @ - 460 , 6 + 460 , 9 @ @ public class RowMutation implements IMutation 
 cf . addColumn ( new Column ( column . name ( ) , column . value ( ) , now ) ) ; 
 } 
 
 + if ( cf . isMarkedForDelete ( ) & & cf . isEmpty ( ) ) 
 + continue ; 
 + 
 fixedModifications . put ( modification . getKey ( ) , cf ) ; 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / net / MessagingService . java b / src / java / org / apache / cassandra / net / MessagingService . java 
 index d5aae5c . . cce3925 100644 
 - - - a / src / java / org / apache / cassandra / net / MessagingService . java 
 + + + b / src / java / org / apache / cassandra / net / MessagingService . java 
 @ @ - 69 , 10 + 69 , 10 @ @ public final class MessagingService implements MessagingServiceMBean 
 public static final String MBEAN _ NAME = " org . apache . cassandra . net : type = MessagingService " ; 
 
 / / 8 bits version , so don ' t waste versions 
 - / / We are no longer compatible with versions older than 1 . 0 
 - public static final int VERSION _ 10 = 3 ; 
 - public static final int VERSION _ 11 = 4 ; 
 - public static final int VERSION _ 12 = 5 ; 
 + public static final int VERSION _ 10 = 3 ; 
 + public static final int VERSION _ 11 = 4 ; 
 + public static final int VERSION _ 117 = 5 ; 
 + public static final int VERSION _ 12 = 6 ; 
 public static final int current _ version = VERSION _ 12 ; 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationManager . java b / src / java / org / apache / cassandra / service / MigrationManager . java 
 index d1987c2 . . 76250a4 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationManager . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationManager . java 
 @ @ - 102 , 8 + 102 , 8 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 
 private static void rectifySchema ( UUID theirVersion , final InetAddress endpoint ) 
 { 
 - / / Can ' t request migrations from nodes with versions younger than 1 . 1 
 - if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 11 ) 
 + / / Can ' t request migrations from nodes with versions younger than 1 . 1 . 7 
 + if ( MessagingService . instance ( ) . getVersion ( endpoint ) < MessagingService . VERSION _ 117 ) 
 return ; 
 
 if ( Schema . instance . getVersion ( ) . equals ( theirVersion ) ) 
 @ @ - 317 , 11 + 317 , 12 @ @ public class MigrationManager implements IEndpointStateChangeSubscriber 
 liveEndpoints . remove ( FBUtilities . getBroadcastAddress ( ) ) ; 
 
 / / force migration is there are nodes around , first of all 
 - / / check if there are nodes with versions > = 1 . 1 to request migrations from , 
 + / / check if there are nodes with versions > = 1 . 1 . 7 to request migrations from , 
 / / because migration format of the nodes with versions < 1 . 1 is incompatible with older versions 
 + / / and due to broken timestamps in versions prior to 1 . 1 . 7 
 for ( InetAddress node : liveEndpoints ) 
 { 
 - if ( MessagingService . instance ( ) . getVersion ( node ) > = MessagingService . VERSION _ 11 ) 
 + if ( MessagingService . instance ( ) . getVersion ( node ) > = MessagingService . VERSION _ 117 ) 
 { 
 if ( logger . isDebugEnabled ( ) ) 
 logger . debug ( " Requesting schema from " + node ) ; 
 diff - - git a / src / resources / org / apache / cassandra / cli / CliHelp . yaml b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 index 343e874 . . 5c9684a 100644 
 - - - a / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 + + + b / src / resources / org / apache / cassandra / cli / CliHelp . yaml 
 @ @ - 130 , 7 + 130 , 7 @ @ commands : 
 describe ; - Describes current authenticated keyspace 
 describe < keyspace > ; - Describe this keyspace 
 describe < column _ family > ; - Describe the colum family in the current authenticated keyspace 
 - - name : 
 + - name : NODE _ DESCRIBE _ CLUSTER 
 help : | 
 describe cluster ; 

