BLEU SCORE: 0.0043542900280071906

TEST MSG: fix yaml comment for 6059
GENERATED MSG: replace gc after each compaction w / gc before compaction / flush only if we need it for the file space

TEST DIFF (one line): diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml <nl> index e10afb6 . . db924bb 100644 <nl> - - - a / conf / cassandra . yaml <nl> + + + b / conf / cassandra . yaml <nl> @ @ - 248 , 7 + 248 , 7 @ @ concurrent _ writes : 32 <nl> <nl> # Total memory to use for memtables . Cassandra will flush the largest <nl> # memtable when this much memory is used . <nl> - # If omitted , Cassandra will set it to 1 / 3 of the heap . <nl> + # If omitted , Cassandra will set it to 1 / 4 of the heap . <nl> # memtable _ total _ space _ in _ mb : 2048 <nl> <nl> # Total space to use for commitlogs . Since commitlog segments are
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> index 7f01866 . . 7ab7c78 100644 <nl> - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public class BinaryMemtable implements IFlushable < DecoratedKey > <nl> public SSTableReader writeSortedContents ( List < DecoratedKey > sortedKeys ) throws IOException <nl> { <nl> logger . info ( " Writing " + this ) ; <nl> - String path = cfs . getTempSSTablePath ( ) ; <nl> + String path = cfs . getFlushPath ( ) ; <nl> SSTableWriter writer = new SSTableWriter ( path , sortedKeys . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> <nl> for ( DecoratedKey key : sortedKeys ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index b93542f . . d0e2ef7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 335 , 10 + 335 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> * When the sstable object is closed , it will be renamed to a non - temporary <nl> * format , so incomplete sstables can be recognized and removed on startup . <nl> * / <nl> - synchronized String getTempSSTablePath ( ) <nl> + public String getFlushPath ( ) <nl> { <nl> - String fname = getTempSSTableFileName ( ) ; <nl> - return new File ( DatabaseDescriptor . getNextAvailableDataLocation ( ) + File . separator + table _ , fname ) . getAbsolutePath ( ) ; <nl> + long guessedSize = 2 * DatabaseDescriptor . getMemtableThroughput ( ) * 1024 * 1024 ; / / 2 * adds room for keys , column indexes <nl> + String location = DatabaseDescriptor . getDataFileLocationForTable ( table _ , guessedSize ) ; <nl> + if ( location = = null ) <nl> + throw new RuntimeException ( " Insufficient disk space to flush " ) ; <nl> + return new File ( location , getTempSSTableFileName ( ) ) . getAbsolutePath ( ) ; <nl> } <nl> <nl> public String getTempSSTableFileName ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> index 88e3bd9 . . 96b2f98 100644 <nl> - - - a / src / java / org / apache / cassandra / db / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / CompactionManager . java <nl> @ @ - 51 , 8 + 51 , 6 @ @ public class CompactionManager implements CompactionManagerMBean <nl> private static final Logger logger = Logger . getLogger ( CompactionManager . class ) ; <nl> public static final CompactionManager instance ; <nl> <nl> - private static volatile boolean gcRequested ; <nl> - <nl> private int minimumCompactionThreshold = 4 ; / / compact this many sstables min at a time <nl> private int maximumCompactionThreshold = 32 ; / / compact this many sstables max at a time <nl> <nl> @ @ - 68 , 36 + 66 , 6 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> throw new RuntimeException ( e ) ; <nl> } <nl> - <nl> - / * * <nl> - * thread that requests GCs to clean out obsolete sstables , sleeping rpc timeout first so that most in - progress ops can complete <nl> - * ( thus , no longer reference the sstables in question ) <nl> - * / <nl> - new Thread ( new Runnable ( ) <nl> - { <nl> - final long gcDelay = DatabaseDescriptor . getRpcTimeout ( ) ; <nl> - <nl> - public void run ( ) <nl> - { <nl> - while ( true ) <nl> - { <nl> - try <nl> - { <nl> - Thread . sleep ( gcDelay * 10 ) ; <nl> - if ( gcRequested ) <nl> - { <nl> - Thread . sleep ( gcDelay ) ; <nl> - System . gc ( ) ; <nl> - gcRequested = false ; <nl> - } <nl> - } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - throw new AssertionError ( e ) ; <nl> - } <nl> - } <nl> - } <nl> - } , " COMPACTION - GC - INVOKER " ) . start ( ) ; <nl> } <nl> <nl> private CompactionExecutor executor = new CompactionExecutor ( ) ; <nl> @ @ - 337 , 7 + 305 , 6 @ @ public class CompactionManager implements CompactionManagerMBean <nl> <nl> SSTableReader ssTable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table . name , cfs . getColumnFamilyName ( ) ) ) ; <nl> cfs . replaceCompactedSSTables ( sstables , Arrays . asList ( ssTable ) ) ; <nl> - gcRequested = true ; <nl> submitMinorIfNeeded ( cfs ) ; <nl> <nl> String format = " Compacted to % s . % d / % d bytes for % d keys . Time : % dms . " ; <nl> @ @ - 364 , 7 + 331 , 7 @ @ public class CompactionManager implements CompactionManagerMBean <nl> logger . info ( " AntiCompacting [ " + StringUtils . join ( sstables , " , " ) + " ] " ) ; <nl> / / Calculate the expected compacted filesize <nl> long expectedRangeFileSize = cfs . getExpectedCompactedFileSize ( sstables ) / 2 ; <nl> - String compactionFileLocation = DatabaseDescriptor . getDataFileLocationForTable ( table . name , expectedRangeFileSize ) ; <nl> + String compactionFileLocation = table . getDataFileLocation ( expectedRangeFileSize ) ; <nl> if ( compactionFileLocation = = null ) <nl> { <nl> throw new UnsupportedOperationException ( " disk full " ) ; <nl> @ @ - 438 , 7 + 405 , 6 @ @ public class CompactionManager implements CompactionManagerMBean <nl> { <nl> cfs . replaceCompactedSSTables ( originalSSTables , sstables ) ; <nl> } <nl> - gcRequested = true ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java <nl> index fd21598 . . 8d8e364 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Memtable . java <nl> + + + b / src / java / org / apache / cassandra / db / Memtable . java <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > <nl> { <nl> logger . info ( " Writing " + this ) ; <nl> ColumnFamilyStore cfStore = Table . open ( table ) . getColumnFamilyStore ( columnfamilyName ) ; <nl> - SSTableWriter writer = new SSTableWriter ( cfStore . getTempSSTablePath ( ) , columnFamilies . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> + SSTableWriter writer = new SSTableWriter ( cfStore . getFlushPath ( ) , columnFamilies . size ( ) , StorageService . getPartitioner ( ) ) ; <nl> <nl> DataOutputBuffer buffer = new DataOutputBuffer ( ) ; <nl> for ( DecoratedKey key : sortedKeys ) <nl> diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java <nl> index 80b887a . . 0be0dbf 100644 <nl> - - - a / src / java / org / apache / cassandra / db / Table . java <nl> + + + b / src / java / org / apache / cassandra / db / Table . java <nl> @ @ - 21 , 9 + 21 , 6 @ @ package org . apache . cassandra . db ; <nl> import java . util . * ; <nl> import java . io . IOException ; <nl> import java . io . File ; <nl> - import java . util . concurrent . ExecutionException ; <nl> - import java . util . concurrent . locks . Lock ; <nl> - import java . util . concurrent . locks . ReentrantLock ; <nl> import java . util . concurrent . locks . ReentrantReadWriteLock ; <nl> import java . util . concurrent . Future ; <nl> <nl> @ @ - 32 , 11 + 29 , 13 @ @ import com . google . common . collect . AbstractIterator ; <nl> import com . google . common . collect . Iterables ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . dht . Range ; <nl> + import org . apache . cassandra . io . SSTableDeletingReference ; <nl> import org . apache . cassandra . io . SSTableReader ; <nl> import org . apache . cassandra . io . util . FileUtils ; <nl> <nl> import java . net . InetAddress ; <nl> <nl> + import org . apache . cassandra . service . StorageService ; <nl> import org . apache . cassandra . utils . * ; <nl> import org . apache . cassandra . db . filter . * ; <nl> import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; <nl> @ @ - 476 , 7 + 475 , 22 @ @ public class Table <nl> <nl> public String getDataFileLocation ( long expectedCompactedFileSize ) <nl> { <nl> - return DatabaseDescriptor . getDataFileLocationForTable ( name , expectedCompactedFileSize ) ; <nl> + String path = DatabaseDescriptor . getDataFileLocationForTable ( name , expectedCompactedFileSize ) ; <nl> + if ( path = = null ) <nl> + { <nl> + / / retry after GCing to force unmap of compacted SSTables so they can be deleted <nl> + StorageService . requestGC ( ) ; <nl> + try <nl> + { <nl> + Thread . sleep ( SSTableDeletingReference . RETRY _ DELAY * 2 ) ; <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + throw new AssertionError ( e ) ; <nl> + } <nl> + path = DatabaseDescriptor . getDataFileLocationForTable ( name , expectedCompactedFileSize ) ; <nl> + } <nl> + return path ; <nl> } <nl> <nl> public static String getSnapshotPath ( String dataDirPath , String tableName , String snapshotName ) <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> index e425727 . . b123161 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java <nl> @ @ - 9 , 12 + 9 , 12 @ @ import java . util . TimerTask ; <nl> <nl> import org . apache . log4j . Logger ; <nl> <nl> - class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> + public class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> { <nl> private static final Logger logger = Logger . getLogger ( SSTableDeletingReference . class ) ; <nl> <nl> private static final Timer timer = new Timer ( " SSTABLE - CLEANUP - TIMER " ) ; <nl> - private static final int RETRY _ DELAY = 10000 ; <nl> + public static final int RETRY _ DELAY = 10000 ; <nl> <nl> public final String path ; <nl> private boolean deleteOnCleanup ; <nl> @ @ - 54 , 7 + 54 , 7 @ @ class SSTableDeletingReference extends PhantomReference < SSTableReader > <nl> { <nl> if ( attempts + + < DeletionService . MAX _ RETRIES ) <nl> { <nl> - timer . schedule ( this , 10000 ) ; <nl> + timer . schedule ( this , RETRY _ DELAY ) ; <nl> return ; <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> index bbc1c48 . . 01e8d07 100644 <nl> - - - a / src / java / org / apache / cassandra / io / SSTableReader . java <nl> + + + b / src / java / org / apache / cassandra / io / SSTableReader . java <nl> @ @ - 564 , 4 + 564 , 3 @ @ class FileSSTableMap <nl> return " FileSSTableMap { " + StringUtils . join ( map . keySet ( ) , " , " ) + " } " ; <nl> } <nl> } <nl> - <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java <nl> index 558bdda . . 4971133 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageService . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageService . java <nl> @ @ - 1472 , 6 + 1472 , 12 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> return isClientMode ; <nl> } <nl> <nl> + public static void requestGC ( ) <nl> + { <nl> + logger _ . info ( " requesting GC to free disk space " ) ; <nl> + System . gc ( ) ; <nl> + } <nl> + <nl> / / Never ever do this at home . Used by tests . <nl> Map < String , AbstractReplicationStrategy > setReplicationStrategyUnsafe ( Map < String , AbstractReplicationStrategy > replacement ) <nl> { <nl> @ @ - 1494 , 5 + 1500 , 4 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe <nl> tokenMetadata _ = tmd ; <nl> return old ; <nl> } <nl> - <nl> }

TEST DIFF:
diff - - git a / conf / cassandra . yaml b / conf / cassandra . yaml 
 index e10afb6 . . db924bb 100644 
 - - - a / conf / cassandra . yaml 
 + + + b / conf / cassandra . yaml 
 @ @ - 248 , 7 + 248 , 7 @ @ concurrent _ writes : 32 
 
 # Total memory to use for memtables . Cassandra will flush the largest 
 # memtable when this much memory is used . 
 - # If omitted , Cassandra will set it to 1 / 3 of the heap . 
 + # If omitted , Cassandra will set it to 1 / 4 of the heap . 
 # memtable _ total _ space _ in _ mb : 2048 
 
 # Total space to use for commitlogs . Since commitlog segments are

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / BinaryMemtable . java b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 index 7f01866 . . 7ab7c78 100644 
 - - - a / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 + + + b / src / java / org / apache / cassandra / db / BinaryMemtable . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public class BinaryMemtable implements IFlushable < DecoratedKey > 
 public SSTableReader writeSortedContents ( List < DecoratedKey > sortedKeys ) throws IOException 
 { 
 logger . info ( " Writing " + this ) ; 
 - String path = cfs . getTempSSTablePath ( ) ; 
 + String path = cfs . getFlushPath ( ) ; 
 SSTableWriter writer = new SSTableWriter ( path , sortedKeys . size ( ) , StorageService . getPartitioner ( ) ) ; 
 
 for ( DecoratedKey key : sortedKeys ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index b93542f . . d0e2ef7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 335 , 10 + 335 , 13 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 * When the sstable object is closed , it will be renamed to a non - temporary 
 * format , so incomplete sstables can be recognized and removed on startup . 
 * / 
 - synchronized String getTempSSTablePath ( ) 
 + public String getFlushPath ( ) 
 { 
 - String fname = getTempSSTableFileName ( ) ; 
 - return new File ( DatabaseDescriptor . getNextAvailableDataLocation ( ) + File . separator + table _ , fname ) . getAbsolutePath ( ) ; 
 + long guessedSize = 2 * DatabaseDescriptor . getMemtableThroughput ( ) * 1024 * 1024 ; / / 2 * adds room for keys , column indexes 
 + String location = DatabaseDescriptor . getDataFileLocationForTable ( table _ , guessedSize ) ; 
 + if ( location = = null ) 
 + throw new RuntimeException ( " Insufficient disk space to flush " ) ; 
 + return new File ( location , getTempSSTableFileName ( ) ) . getAbsolutePath ( ) ; 
 } 
 
 public String getTempSSTableFileName ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / CompactionManager . java b / src / java / org / apache / cassandra / db / CompactionManager . java 
 index 88e3bd9 . . 96b2f98 100644 
 - - - a / src / java / org / apache / cassandra / db / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / CompactionManager . java 
 @ @ - 51 , 8 + 51 , 6 @ @ public class CompactionManager implements CompactionManagerMBean 
 private static final Logger logger = Logger . getLogger ( CompactionManager . class ) ; 
 public static final CompactionManager instance ; 
 
 - private static volatile boolean gcRequested ; 
 - 
 private int minimumCompactionThreshold = 4 ; / / compact this many sstables min at a time 
 private int maximumCompactionThreshold = 32 ; / / compact this many sstables max at a time 
 
 @ @ - 68 , 36 + 66 , 6 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 throw new RuntimeException ( e ) ; 
 } 
 - 
 - / * * 
 - * thread that requests GCs to clean out obsolete sstables , sleeping rpc timeout first so that most in - progress ops can complete 
 - * ( thus , no longer reference the sstables in question ) 
 - * / 
 - new Thread ( new Runnable ( ) 
 - { 
 - final long gcDelay = DatabaseDescriptor . getRpcTimeout ( ) ; 
 - 
 - public void run ( ) 
 - { 
 - while ( true ) 
 - { 
 - try 
 - { 
 - Thread . sleep ( gcDelay * 10 ) ; 
 - if ( gcRequested ) 
 - { 
 - Thread . sleep ( gcDelay ) ; 
 - System . gc ( ) ; 
 - gcRequested = false ; 
 - } 
 - } 
 - catch ( InterruptedException e ) 
 - { 
 - throw new AssertionError ( e ) ; 
 - } 
 - } 
 - } 
 - } , " COMPACTION - GC - INVOKER " ) . start ( ) ; 
 } 
 
 private CompactionExecutor executor = new CompactionExecutor ( ) ; 
 @ @ - 337 , 7 + 305 , 6 @ @ public class CompactionManager implements CompactionManagerMBean 
 
 SSTableReader ssTable = writer . closeAndOpenReader ( DatabaseDescriptor . getKeysCachedFraction ( table . name , cfs . getColumnFamilyName ( ) ) ) ; 
 cfs . replaceCompactedSSTables ( sstables , Arrays . asList ( ssTable ) ) ; 
 - gcRequested = true ; 
 submitMinorIfNeeded ( cfs ) ; 
 
 String format = " Compacted to % s . % d / % d bytes for % d keys . Time : % dms . " ; 
 @ @ - 364 , 7 + 331 , 7 @ @ public class CompactionManager implements CompactionManagerMBean 
 logger . info ( " AntiCompacting [ " + StringUtils . join ( sstables , " , " ) + " ] " ) ; 
 / / Calculate the expected compacted filesize 
 long expectedRangeFileSize = cfs . getExpectedCompactedFileSize ( sstables ) / 2 ; 
 - String compactionFileLocation = DatabaseDescriptor . getDataFileLocationForTable ( table . name , expectedRangeFileSize ) ; 
 + String compactionFileLocation = table . getDataFileLocation ( expectedRangeFileSize ) ; 
 if ( compactionFileLocation = = null ) 
 { 
 throw new UnsupportedOperationException ( " disk full " ) ; 
 @ @ - 438 , 7 + 405 , 6 @ @ public class CompactionManager implements CompactionManagerMBean 
 { 
 cfs . replaceCompactedSSTables ( originalSSTables , sstables ) ; 
 } 
 - gcRequested = true ; 
 } 
 
 / * * 
 diff - - git a / src / java / org / apache / cassandra / db / Memtable . java b / src / java / org / apache / cassandra / db / Memtable . java 
 index fd21598 . . 8d8e364 100644 
 - - - a / src / java / org / apache / cassandra / db / Memtable . java 
 + + + b / src / java / org / apache / cassandra / db / Memtable . java 
 @ @ - 154 , 7 + 154 , 7 @ @ public class Memtable implements Comparable < Memtable > , IFlushable < DecoratedKey > 
 { 
 logger . info ( " Writing " + this ) ; 
 ColumnFamilyStore cfStore = Table . open ( table ) . getColumnFamilyStore ( columnfamilyName ) ; 
 - SSTableWriter writer = new SSTableWriter ( cfStore . getTempSSTablePath ( ) , columnFamilies . size ( ) , StorageService . getPartitioner ( ) ) ; 
 + SSTableWriter writer = new SSTableWriter ( cfStore . getFlushPath ( ) , columnFamilies . size ( ) , StorageService . getPartitioner ( ) ) ; 
 
 DataOutputBuffer buffer = new DataOutputBuffer ( ) ; 
 for ( DecoratedKey key : sortedKeys ) 
 diff - - git a / src / java / org / apache / cassandra / db / Table . java b / src / java / org / apache / cassandra / db / Table . java 
 index 80b887a . . 0be0dbf 100644 
 - - - a / src / java / org / apache / cassandra / db / Table . java 
 + + + b / src / java / org / apache / cassandra / db / Table . java 
 @ @ - 21 , 9 + 21 , 6 @ @ package org . apache . cassandra . db ; 
 import java . util . * ; 
 import java . io . IOException ; 
 import java . io . File ; 
 - import java . util . concurrent . ExecutionException ; 
 - import java . util . concurrent . locks . Lock ; 
 - import java . util . concurrent . locks . ReentrantLock ; 
 import java . util . concurrent . locks . ReentrantReadWriteLock ; 
 import java . util . concurrent . Future ; 
 
 @ @ - 32 , 11 + 29 , 13 @ @ import com . google . common . collect . AbstractIterator ; 
 import com . google . common . collect . Iterables ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . dht . Range ; 
 + import org . apache . cassandra . io . SSTableDeletingReference ; 
 import org . apache . cassandra . io . SSTableReader ; 
 import org . apache . cassandra . io . util . FileUtils ; 
 
 import java . net . InetAddress ; 
 
 + import org . apache . cassandra . service . StorageService ; 
 import org . apache . cassandra . utils . * ; 
 import org . apache . cassandra . db . filter . * ; 
 import org . cliffc . high _ scale _ lib . NonBlockingHashMap ; 
 @ @ - 476 , 7 + 475 , 22 @ @ public class Table 
 
 public String getDataFileLocation ( long expectedCompactedFileSize ) 
 { 
 - return DatabaseDescriptor . getDataFileLocationForTable ( name , expectedCompactedFileSize ) ; 
 + String path = DatabaseDescriptor . getDataFileLocationForTable ( name , expectedCompactedFileSize ) ; 
 + if ( path = = null ) 
 + { 
 + / / retry after GCing to force unmap of compacted SSTables so they can be deleted 
 + StorageService . requestGC ( ) ; 
 + try 
 + { 
 + Thread . sleep ( SSTableDeletingReference . RETRY _ DELAY * 2 ) ; 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + throw new AssertionError ( e ) ; 
 + } 
 + path = DatabaseDescriptor . getDataFileLocationForTable ( name , expectedCompactedFileSize ) ; 
 + } 
 + return path ; 
 } 
 
 public static String getSnapshotPath ( String dataDirPath , String tableName , String snapshotName ) 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 index e425727 . . b123161 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableDeletingReference . java 
 @ @ - 9 , 12 + 9 , 12 @ @ import java . util . TimerTask ; 
 
 import org . apache . log4j . Logger ; 
 
 - class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 + public class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 { 
 private static final Logger logger = Logger . getLogger ( SSTableDeletingReference . class ) ; 
 
 private static final Timer timer = new Timer ( " SSTABLE - CLEANUP - TIMER " ) ; 
 - private static final int RETRY _ DELAY = 10000 ; 
 + public static final int RETRY _ DELAY = 10000 ; 
 
 public final String path ; 
 private boolean deleteOnCleanup ; 
 @ @ - 54 , 7 + 54 , 7 @ @ class SSTableDeletingReference extends PhantomReference < SSTableReader > 
 { 
 if ( attempts + + < DeletionService . MAX _ RETRIES ) 
 { 
 - timer . schedule ( this , 10000 ) ; 
 + timer . schedule ( this , RETRY _ DELAY ) ; 
 return ; 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / io / SSTableReader . java b / src / java / org / apache / cassandra / io / SSTableReader . java 
 index bbc1c48 . . 01e8d07 100644 
 - - - a / src / java / org / apache / cassandra / io / SSTableReader . java 
 + + + b / src / java / org / apache / cassandra / io / SSTableReader . java 
 @ @ - 564 , 4 + 564 , 3 @ @ class FileSSTableMap 
 return " FileSSTableMap { " + StringUtils . join ( map . keySet ( ) , " , " ) + " } " ; 
 } 
 } 
 - 
 diff - - git a / src / java / org / apache / cassandra / service / StorageService . java b / src / java / org / apache / cassandra / service / StorageService . java 
 index 558bdda . . 4971133 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageService . java 
 + + + b / src / java / org / apache / cassandra / service / StorageService . java 
 @ @ - 1472 , 6 + 1472 , 12 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 return isClientMode ; 
 } 
 
 + public static void requestGC ( ) 
 + { 
 + logger _ . info ( " requesting GC to free disk space " ) ; 
 + System . gc ( ) ; 
 + } 
 + 
 / / Never ever do this at home . Used by tests . 
 Map < String , AbstractReplicationStrategy > setReplicationStrategyUnsafe ( Map < String , AbstractReplicationStrategy > replacement ) 
 { 
 @ @ - 1494 , 5 + 1500 , 4 @ @ public class StorageService implements IEndPointStateChangeSubscriber , StorageSe 
 tokenMetadata _ = tmd ; 
 return old ; 
 } 
 - 
 }
