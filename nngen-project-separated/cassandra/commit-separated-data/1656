BLEU SCORE: 0.041961149062965476

TEST MSG: Ninja - remove section to create directories below / var
GENERATED MSG: merged with cassandra - 0 . 4 branch

TEST DIFF (one line): diff - - git a / README . asc b / README . asc <nl> index 2e0a0e6 . . 6360fe9 100644 <nl> - - - a / README . asc <nl> + + + b / README . asc <nl> @ @ - 25 , 14 + 25 , 7 @ @ First , we ' ll unpack our archive : <nl> $ tar - zxvf apache - cassandra - $ VERSION . tar . gz <nl> $ cd apache - cassandra - $ VERSION <nl> <nl> - and create the log and data directories . These correspond to the defaults from conf / and may be adjusted to suit your own environment : <nl> - <nl> - $ sudo mkdir - p / var / log / cassandra <nl> - $ sudo chown - R ` whoami ` / var / log / cassandra <nl> - $ sudo mkdir - p / var / lib / cassandra <nl> - $ sudo chown - R ` whoami ` / var / lib / cassandra <nl> - <nl> - Finally , we start the server . Running the startup script with the - f argument will cause <nl> + After that we start the server . Running the startup script with the - f argument will cause <nl> Cassandra to remain in the foreground and log to standard out ; it can be stopped with ctrl - C . <nl> <nl> $ bin / cassandra - f
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / client / RingCache . java b / src / java / org / apache / cassandra / client / RingCache . java <nl> index 137eea6 . . e455634 100644 <nl> - - - a / src / java / org / apache / cassandra / client / RingCache . java <nl> + + + b / src / java / org / apache / cassandra / client / RingCache . java <nl> @ @ - 1 , 107 + 1 , 107 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . client ; <nl> - <nl> - import java . util . HashMap ; <nl> - import java . util . HashSet ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> - import org . apache . cassandra . config . DatabaseDescriptor ; <nl> - import org . apache . cassandra . dht . IPartitioner ; <nl> - import org . apache . cassandra . dht . Token ; <nl> - import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> - import org . apache . cassandra . locator . TokenMetadata ; <nl> - import org . apache . cassandra . net . EndPoint ; <nl> - import org . apache . cassandra . service . Cassandra ; <nl> - import org . apache . cassandra . service . CassandraServer ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> - import org . apache . log4j . Logger ; <nl> - import org . apache . thrift . TException ; <nl> - import org . apache . thrift . protocol . TBinaryProtocol ; <nl> - import org . apache . thrift . transport . TSocket ; <nl> - <nl> - import flexjson . JSONTokener ; <nl> - <nl> - / * * <nl> - * A class for caching the ring map at the client . For usage example , see <nl> - * test / unit / org . apache . cassandra . client . TestRingCache . java . <nl> - * / <nl> - public class RingCache <nl> - { <nl> - final private static Logger logger _ = Logger . getLogger ( RingCache . class ) ; <nl> - <nl> - private Set < String > seeds _ = new HashSet < String > ( ) ; <nl> - final private int port _ = DatabaseDescriptor . getThriftPort ( ) ; <nl> - private volatile AbstractReplicationStrategy nodePicker _ ; <nl> - final private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; <nl> - <nl> - public RingCache ( ) <nl> - { <nl> - seeds _ = DatabaseDescriptor . getSeeds ( ) ; <nl> - refreshEndPointMap ( ) ; <nl> - } <nl> - <nl> - public void refreshEndPointMap ( ) <nl> - { <nl> - for ( String seed : seeds _ ) <nl> - { <nl> - try <nl> - { <nl> - TSocket socket = new TSocket ( seed , port _ ) ; <nl> - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( socket , false , false ) ; <nl> - Cassandra . Client client = new Cassandra . Client ( binaryProtocol ) ; <nl> - socket . open ( ) ; <nl> - <nl> - Map < String , String > tokenToHostMap = ( Map < String , String > ) new JSONTokener ( client . get _ string _ property ( CassandraServer . TOKEN _ MAP ) ) . nextValue ( ) ; <nl> - <nl> - HashMap < Token , EndPoint > tokenEndpointMap = new HashMap < Token , EndPoint > ( ) ; <nl> - Map < EndPoint , Token > endpointTokenMap = new HashMap < EndPoint , Token > ( ) ; <nl> - for ( Map . Entry < String , String > entry : tokenToHostMap . entrySet ( ) ) <nl> - { <nl> - Token token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromString ( entry . getKey ( ) ) ; <nl> - String host = entry . getValue ( ) ; <nl> - tokenEndpointMap . put ( token , new EndPoint ( host , port _ ) ) ; <nl> - endpointTokenMap . put ( new EndPoint ( host , port _ ) , token ) ; <nl> - } <nl> - <nl> - TokenMetadata tokenMetadata = new TokenMetadata ( tokenEndpointMap , endpointTokenMap , null ) ; <nl> - Class cls = DatabaseDescriptor . getReplicaPlacementStrategyClass ( ) ; <nl> - Class [ ] parameterTypes = new Class [ ] { TokenMetadata . class , IPartitioner . class , int . class , int . class } ; <nl> - try <nl> - { <nl> - nodePicker _ = ( AbstractReplicationStrategy ) cls . getConstructor ( parameterTypes ) . newInstance ( tokenMetadata , partitioner _ , DatabaseDescriptor . getReplicationFactor ( ) , port _ ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - break ; <nl> - } <nl> - catch ( TException e ) <nl> - { <nl> - / * let the Exception go and try another seed . log this though * / <nl> - logger _ . debug ( " Error contacting seed " + seed + " " + e . getMessage ( ) ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - public EndPoint [ ] getEndPoint ( String key ) <nl> - { <nl> - return nodePicker _ . getReadStorageEndPoints ( partitioner _ . getToken ( key ) ) ; <nl> - } <nl> - } <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . client ; <nl> + <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import org . apache . cassandra . config . DatabaseDescriptor ; <nl> + import org . apache . cassandra . dht . IPartitioner ; <nl> + import org . apache . cassandra . dht . Token ; <nl> + import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> + import org . apache . cassandra . locator . TokenMetadata ; <nl> + import org . apache . cassandra . net . EndPoint ; <nl> + import org . apache . cassandra . service . Cassandra ; <nl> + import org . apache . cassandra . service . CassandraServer ; <nl> + import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . log4j . Logger ; <nl> + import org . apache . thrift . TException ; <nl> + import org . apache . thrift . protocol . TBinaryProtocol ; <nl> + import org . apache . thrift . transport . TSocket ; <nl> + <nl> + import flexjson . JSONTokener ; <nl> + <nl> + / * * <nl> + * A class for caching the ring map at the client . For usage example , see <nl> + * test / unit / org . apache . cassandra . client . TestRingCache . java . <nl> + * / <nl> + public class RingCache <nl> + { <nl> + final private static Logger logger _ = Logger . getLogger ( RingCache . class ) ; <nl> + <nl> + private Set < String > seeds _ = new HashSet < String > ( ) ; <nl> + final private int port _ = DatabaseDescriptor . getThriftPort ( ) ; <nl> + private volatile AbstractReplicationStrategy nodePicker _ ; <nl> + final private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; <nl> + <nl> + public RingCache ( ) <nl> + { <nl> + seeds _ = DatabaseDescriptor . getSeeds ( ) ; <nl> + refreshEndPointMap ( ) ; <nl> + } <nl> + <nl> + public void refreshEndPointMap ( ) <nl> + { <nl> + for ( String seed : seeds _ ) <nl> + { <nl> + try <nl> + { <nl> + TSocket socket = new TSocket ( seed , port _ ) ; <nl> + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( socket , false , false ) ; <nl> + Cassandra . Client client = new Cassandra . Client ( binaryProtocol ) ; <nl> + socket . open ( ) ; <nl> + <nl> + Map < String , String > tokenToHostMap = ( Map < String , String > ) new JSONTokener ( client . get _ string _ property ( CassandraServer . TOKEN _ MAP ) ) . nextValue ( ) ; <nl> + <nl> + HashMap < Token , EndPoint > tokenEndpointMap = new HashMap < Token , EndPoint > ( ) ; <nl> + Map < EndPoint , Token > endpointTokenMap = new HashMap < EndPoint , Token > ( ) ; <nl> + for ( Map . Entry < String , String > entry : tokenToHostMap . entrySet ( ) ) <nl> + { <nl> + Token token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromString ( entry . getKey ( ) ) ; <nl> + String host = entry . getValue ( ) ; <nl> + tokenEndpointMap . put ( token , new EndPoint ( host , port _ ) ) ; <nl> + endpointTokenMap . put ( new EndPoint ( host , port _ ) , token ) ; <nl> + } <nl> + <nl> + TokenMetadata tokenMetadata = new TokenMetadata ( tokenEndpointMap , endpointTokenMap , null ) ; <nl> + Class cls = DatabaseDescriptor . getReplicaPlacementStrategyClass ( ) ; <nl> + Class [ ] parameterTypes = new Class [ ] { TokenMetadata . class , IPartitioner . class , int . class , int . class } ; <nl> + try <nl> + { <nl> + nodePicker _ = ( AbstractReplicationStrategy ) cls . getConstructor ( parameterTypes ) . newInstance ( tokenMetadata , partitioner _ , DatabaseDescriptor . getReplicationFactor ( ) , port _ ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + break ; <nl> + } <nl> + catch ( TException e ) <nl> + { <nl> + / * let the Exception go and try another seed . log this though * / <nl> + logger _ . debug ( " Error contacting seed " + seed + " " + e . getMessage ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public EndPoint [ ] getEndPoint ( String key ) <nl> + { <nl> + return nodePicker _ . getReadStorageEndPoints ( partitioner _ . getToken ( key ) ) ; <nl> + } <nl> + } <nl> diff - - git a / test / unit / org / apache / cassandra / client / TestRingCache . java b / test / unit / org / apache / cassandra / client / TestRingCache . java <nl> index 62293ef . . e56a5f1 100644 <nl> - - - a / test / unit / org / apache / cassandra / client / TestRingCache . java <nl> + + + b / test / unit / org / apache / cassandra / client / TestRingCache . java <nl> @ @ - 1 , 81 + 1 , 81 @ @ <nl> - / * * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package org . apache . cassandra . client ; <nl> - <nl> - import org . apache . cassandra . net . EndPoint ; <nl> - import org . apache . cassandra . service . Cassandra ; <nl> - import org . apache . cassandra . service . Column ; <nl> - import org . apache . cassandra . service . ColumnPath ; <nl> - import org . apache . thrift . protocol . TBinaryProtocol ; <nl> - import org . apache . thrift . transport . TSocket ; <nl> - import org . apache . thrift . transport . TTransport ; <nl> - <nl> - / * * <nl> - * Sample code that uses RingCache in the client . <nl> - * / <nl> - public class TestRingCache <nl> - { <nl> - private static RingCache ringCache ; <nl> - private static Cassandra . Client thriftClient ; <nl> - <nl> - static <nl> - { <nl> - ringCache = new RingCache ( ) ; <nl> - } <nl> - <nl> - private static void setup ( String server , int port ) throws Exception <nl> - { <nl> - / * Establish a thrift connection to the cassandra instance * / <nl> - TSocket socket = new TSocket ( server , port ) ; <nl> - TTransport transport ; <nl> - System . out . println ( " connected to " + server + " : " + port + " . " ) ; <nl> - transport = socket ; <nl> - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , false , false ) ; <nl> - Cassandra . Client cassandraClient = new Cassandra . Client ( binaryProtocol ) ; <nl> - transport . open ( ) ; <nl> - thriftClient = cassandraClient ; <nl> - } <nl> - <nl> - / * * <nl> - * usage : java - Dstorage - config = " confpath " org . apache . cassandra . client . TestRingCache <nl> - * @ param args <nl> - * @ throws Exception <nl> - * / <nl> - public static void main ( String [ ] args ) throws Throwable <nl> - { <nl> - String table = " Keyspace1 " ; <nl> - for ( int nRows = 1 ; nRows < 10 ; nRows + + ) <nl> - { <nl> - String row = " row " + nRows ; <nl> - ColumnPath col = new ColumnPath ( " Standard1 " , null , " col1 " . getBytes ( ) ) ; <nl> - <nl> - EndPoint endPoints [ ] = ringCache . getEndPoint ( row ) ; <nl> - String hosts = " " ; <nl> - for ( int i = 0 ; i < endPoints . length ; i + + ) <nl> - hosts = hosts + ( ( i > 0 ) ? " , " : " " ) + endPoints [ i ] . getHost ( ) ; <nl> - System . out . println ( " hosts with key " + row + " : " + hosts + " ; choose " + endPoints [ 0 ] . getHost ( ) ) ; <nl> - <nl> - / / now , read the row back directly from the host owning the row locally <nl> - setup ( endPoints [ 0 ] . getHost ( ) , endPoints [ 0 ] . getPort ( ) ) ; <nl> - thriftClient . insert ( table , row , col , " val1 " . getBytes ( ) , 1 , 1 ) ; <nl> - Column column = thriftClient . get ( table , row , col , 1 ) . column ; <nl> - System . out . println ( " read row " + row + " " + new String ( column . name ) + " : " + new String ( column . value ) + " : " + column . timestamp ) ; <nl> - } <nl> - System . exit ( 1 ) ; <nl> - } <nl> - } <nl> + / * * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . client ; <nl> + <nl> + import org . apache . cassandra . net . EndPoint ; <nl> + import org . apache . cassandra . service . Cassandra ; <nl> + import org . apache . cassandra . service . Column ; <nl> + import org . apache . cassandra . service . ColumnPath ; <nl> + import org . apache . thrift . protocol . TBinaryProtocol ; <nl> + import org . apache . thrift . transport . TSocket ; <nl> + import org . apache . thrift . transport . TTransport ; <nl> + <nl> + / * * <nl> + * Sample code that uses RingCache in the client . <nl> + * / <nl> + public class TestRingCache <nl> + { <nl> + private static RingCache ringCache ; <nl> + private static Cassandra . Client thriftClient ; <nl> + <nl> + static <nl> + { <nl> + ringCache = new RingCache ( ) ; <nl> + } <nl> + <nl> + private static void setup ( String server , int port ) throws Exception <nl> + { <nl> + / * Establish a thrift connection to the cassandra instance * / <nl> + TSocket socket = new TSocket ( server , port ) ; <nl> + TTransport transport ; <nl> + System . out . println ( " connected to " + server + " : " + port + " . " ) ; <nl> + transport = socket ; <nl> + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , false , false ) ; <nl> + Cassandra . Client cassandraClient = new Cassandra . Client ( binaryProtocol ) ; <nl> + transport . open ( ) ; <nl> + thriftClient = cassandraClient ; <nl> + } <nl> + <nl> + / * * <nl> + * usage : java - Dstorage - config = " confpath " org . apache . cassandra . client . TestRingCache <nl> + * @ param args <nl> + * @ throws Exception <nl> + * / <nl> + public static void main ( String [ ] args ) throws Throwable <nl> + { <nl> + String table = " Keyspace1 " ; <nl> + for ( int nRows = 1 ; nRows < 10 ; nRows + + ) <nl> + { <nl> + String row = " row " + nRows ; <nl> + ColumnPath col = new ColumnPath ( " Standard1 " , null , " col1 " . getBytes ( ) ) ; <nl> + <nl> + EndPoint endPoints [ ] = ringCache . getEndPoint ( row ) ; <nl> + String hosts = " " ; <nl> + for ( int i = 0 ; i < endPoints . length ; i + + ) <nl> + hosts = hosts + ( ( i > 0 ) ? " , " : " " ) + endPoints [ i ] . getHost ( ) ; <nl> + System . out . println ( " hosts with key " + row + " : " + hosts + " ; choose " + endPoints [ 0 ] . getHost ( ) ) ; <nl> + <nl> + / / now , read the row back directly from the host owning the row locally <nl> + setup ( endPoints [ 0 ] . getHost ( ) , endPoints [ 0 ] . getPort ( ) ) ; <nl> + thriftClient . insert ( table , row , col , " val1 " . getBytes ( ) , 1 , 1 ) ; <nl> + Column column = thriftClient . get ( table , row , col , 1 ) . column ; <nl> + System . out . println ( " read row " + row + " " + new String ( column . name ) + " : " + new String ( column . value ) + " : " + column . timestamp ) ; <nl> + } <nl> + System . exit ( 1 ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / README . asc b / README . asc 
 index 2e0a0e6 . . 6360fe9 100644 
 - - - a / README . asc 
 + + + b / README . asc 
 @ @ - 25 , 14 + 25 , 7 @ @ First , we ' ll unpack our archive : 
 $ tar - zxvf apache - cassandra - $ VERSION . tar . gz 
 $ cd apache - cassandra - $ VERSION 
 
 - and create the log and data directories . These correspond to the defaults from conf / and may be adjusted to suit your own environment : 
 - 
 - $ sudo mkdir - p / var / log / cassandra 
 - $ sudo chown - R ` whoami ` / var / log / cassandra 
 - $ sudo mkdir - p / var / lib / cassandra 
 - $ sudo chown - R ` whoami ` / var / lib / cassandra 
 - 
 - Finally , we start the server . Running the startup script with the - f argument will cause 
 + After that we start the server . Running the startup script with the - f argument will cause 
 Cassandra to remain in the foreground and log to standard out ; it can be stopped with ctrl - C . 
 
 $ bin / cassandra - f

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / client / RingCache . java b / src / java / org / apache / cassandra / client / RingCache . java 
 index 137eea6 . . e455634 100644 
 - - - a / src / java / org / apache / cassandra / client / RingCache . java 
 + + + b / src / java / org / apache / cassandra / client / RingCache . java 
 @ @ - 1 , 107 + 1 , 107 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . client ; 
 - 
 - import java . util . HashMap ; 
 - import java . util . HashSet ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 - import org . apache . cassandra . config . DatabaseDescriptor ; 
 - import org . apache . cassandra . dht . IPartitioner ; 
 - import org . apache . cassandra . dht . Token ; 
 - import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 - import org . apache . cassandra . locator . TokenMetadata ; 
 - import org . apache . cassandra . net . EndPoint ; 
 - import org . apache . cassandra . service . Cassandra ; 
 - import org . apache . cassandra . service . CassandraServer ; 
 - import org . apache . cassandra . service . StorageService ; 
 - import org . apache . log4j . Logger ; 
 - import org . apache . thrift . TException ; 
 - import org . apache . thrift . protocol . TBinaryProtocol ; 
 - import org . apache . thrift . transport . TSocket ; 
 - 
 - import flexjson . JSONTokener ; 
 - 
 - / * * 
 - * A class for caching the ring map at the client . For usage example , see 
 - * test / unit / org . apache . cassandra . client . TestRingCache . java . 
 - * / 
 - public class RingCache 
 - { 
 - final private static Logger logger _ = Logger . getLogger ( RingCache . class ) ; 
 - 
 - private Set < String > seeds _ = new HashSet < String > ( ) ; 
 - final private int port _ = DatabaseDescriptor . getThriftPort ( ) ; 
 - private volatile AbstractReplicationStrategy nodePicker _ ; 
 - final private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; 
 - 
 - public RingCache ( ) 
 - { 
 - seeds _ = DatabaseDescriptor . getSeeds ( ) ; 
 - refreshEndPointMap ( ) ; 
 - } 
 - 
 - public void refreshEndPointMap ( ) 
 - { 
 - for ( String seed : seeds _ ) 
 - { 
 - try 
 - { 
 - TSocket socket = new TSocket ( seed , port _ ) ; 
 - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( socket , false , false ) ; 
 - Cassandra . Client client = new Cassandra . Client ( binaryProtocol ) ; 
 - socket . open ( ) ; 
 - 
 - Map < String , String > tokenToHostMap = ( Map < String , String > ) new JSONTokener ( client . get _ string _ property ( CassandraServer . TOKEN _ MAP ) ) . nextValue ( ) ; 
 - 
 - HashMap < Token , EndPoint > tokenEndpointMap = new HashMap < Token , EndPoint > ( ) ; 
 - Map < EndPoint , Token > endpointTokenMap = new HashMap < EndPoint , Token > ( ) ; 
 - for ( Map . Entry < String , String > entry : tokenToHostMap . entrySet ( ) ) 
 - { 
 - Token token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromString ( entry . getKey ( ) ) ; 
 - String host = entry . getValue ( ) ; 
 - tokenEndpointMap . put ( token , new EndPoint ( host , port _ ) ) ; 
 - endpointTokenMap . put ( new EndPoint ( host , port _ ) , token ) ; 
 - } 
 - 
 - TokenMetadata tokenMetadata = new TokenMetadata ( tokenEndpointMap , endpointTokenMap , null ) ; 
 - Class cls = DatabaseDescriptor . getReplicaPlacementStrategyClass ( ) ; 
 - Class [ ] parameterTypes = new Class [ ] { TokenMetadata . class , IPartitioner . class , int . class , int . class } ; 
 - try 
 - { 
 - nodePicker _ = ( AbstractReplicationStrategy ) cls . getConstructor ( parameterTypes ) . newInstance ( tokenMetadata , partitioner _ , DatabaseDescriptor . getReplicationFactor ( ) , port _ ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 - break ; 
 - } 
 - catch ( TException e ) 
 - { 
 - / * let the Exception go and try another seed . log this though * / 
 - logger _ . debug ( " Error contacting seed " + seed + " " + e . getMessage ( ) ) ; 
 - } 
 - } 
 - } 
 - 
 - public EndPoint [ ] getEndPoint ( String key ) 
 - { 
 - return nodePicker _ . getReadStorageEndPoints ( partitioner _ . getToken ( key ) ) ; 
 - } 
 - } 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . client ; 
 + 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + import org . apache . cassandra . config . DatabaseDescriptor ; 
 + import org . apache . cassandra . dht . IPartitioner ; 
 + import org . apache . cassandra . dht . Token ; 
 + import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 + import org . apache . cassandra . locator . TokenMetadata ; 
 + import org . apache . cassandra . net . EndPoint ; 
 + import org . apache . cassandra . service . Cassandra ; 
 + import org . apache . cassandra . service . CassandraServer ; 
 + import org . apache . cassandra . service . StorageService ; 
 + import org . apache . log4j . Logger ; 
 + import org . apache . thrift . TException ; 
 + import org . apache . thrift . protocol . TBinaryProtocol ; 
 + import org . apache . thrift . transport . TSocket ; 
 + 
 + import flexjson . JSONTokener ; 
 + 
 + / * * 
 + * A class for caching the ring map at the client . For usage example , see 
 + * test / unit / org . apache . cassandra . client . TestRingCache . java . 
 + * / 
 + public class RingCache 
 + { 
 + final private static Logger logger _ = Logger . getLogger ( RingCache . class ) ; 
 + 
 + private Set < String > seeds _ = new HashSet < String > ( ) ; 
 + final private int port _ = DatabaseDescriptor . getThriftPort ( ) ; 
 + private volatile AbstractReplicationStrategy nodePicker _ ; 
 + final private static IPartitioner partitioner _ = DatabaseDescriptor . getPartitioner ( ) ; 
 + 
 + public RingCache ( ) 
 + { 
 + seeds _ = DatabaseDescriptor . getSeeds ( ) ; 
 + refreshEndPointMap ( ) ; 
 + } 
 + 
 + public void refreshEndPointMap ( ) 
 + { 
 + for ( String seed : seeds _ ) 
 + { 
 + try 
 + { 
 + TSocket socket = new TSocket ( seed , port _ ) ; 
 + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( socket , false , false ) ; 
 + Cassandra . Client client = new Cassandra . Client ( binaryProtocol ) ; 
 + socket . open ( ) ; 
 + 
 + Map < String , String > tokenToHostMap = ( Map < String , String > ) new JSONTokener ( client . get _ string _ property ( CassandraServer . TOKEN _ MAP ) ) . nextValue ( ) ; 
 + 
 + HashMap < Token , EndPoint > tokenEndpointMap = new HashMap < Token , EndPoint > ( ) ; 
 + Map < EndPoint , Token > endpointTokenMap = new HashMap < EndPoint , Token > ( ) ; 
 + for ( Map . Entry < String , String > entry : tokenToHostMap . entrySet ( ) ) 
 + { 
 + Token token = StorageService . getPartitioner ( ) . getTokenFactory ( ) . fromString ( entry . getKey ( ) ) ; 
 + String host = entry . getValue ( ) ; 
 + tokenEndpointMap . put ( token , new EndPoint ( host , port _ ) ) ; 
 + endpointTokenMap . put ( new EndPoint ( host , port _ ) , token ) ; 
 + } 
 + 
 + TokenMetadata tokenMetadata = new TokenMetadata ( tokenEndpointMap , endpointTokenMap , null ) ; 
 + Class cls = DatabaseDescriptor . getReplicaPlacementStrategyClass ( ) ; 
 + Class [ ] parameterTypes = new Class [ ] { TokenMetadata . class , IPartitioner . class , int . class , int . class } ; 
 + try 
 + { 
 + nodePicker _ = ( AbstractReplicationStrategy ) cls . getConstructor ( parameterTypes ) . newInstance ( tokenMetadata , partitioner _ , DatabaseDescriptor . getReplicationFactor ( ) , port _ ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + break ; 
 + } 
 + catch ( TException e ) 
 + { 
 + / * let the Exception go and try another seed . log this though * / 
 + logger _ . debug ( " Error contacting seed " + seed + " " + e . getMessage ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + public EndPoint [ ] getEndPoint ( String key ) 
 + { 
 + return nodePicker _ . getReadStorageEndPoints ( partitioner _ . getToken ( key ) ) ; 
 + } 
 + } 
 diff - - git a / test / unit / org / apache / cassandra / client / TestRingCache . java b / test / unit / org / apache / cassandra / client / TestRingCache . java 
 index 62293ef . . e56a5f1 100644 
 - - - a / test / unit / org / apache / cassandra / client / TestRingCache . java 
 + + + b / test / unit / org / apache / cassandra / client / TestRingCache . java 
 @ @ - 1 , 81 + 1 , 81 @ @ 
 - / * * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package org . apache . cassandra . client ; 
 - 
 - import org . apache . cassandra . net . EndPoint ; 
 - import org . apache . cassandra . service . Cassandra ; 
 - import org . apache . cassandra . service . Column ; 
 - import org . apache . cassandra . service . ColumnPath ; 
 - import org . apache . thrift . protocol . TBinaryProtocol ; 
 - import org . apache . thrift . transport . TSocket ; 
 - import org . apache . thrift . transport . TTransport ; 
 - 
 - / * * 
 - * Sample code that uses RingCache in the client . 
 - * / 
 - public class TestRingCache 
 - { 
 - private static RingCache ringCache ; 
 - private static Cassandra . Client thriftClient ; 
 - 
 - static 
 - { 
 - ringCache = new RingCache ( ) ; 
 - } 
 - 
 - private static void setup ( String server , int port ) throws Exception 
 - { 
 - / * Establish a thrift connection to the cassandra instance * / 
 - TSocket socket = new TSocket ( server , port ) ; 
 - TTransport transport ; 
 - System . out . println ( " connected to " + server + " : " + port + " . " ) ; 
 - transport = socket ; 
 - TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , false , false ) ; 
 - Cassandra . Client cassandraClient = new Cassandra . Client ( binaryProtocol ) ; 
 - transport . open ( ) ; 
 - thriftClient = cassandraClient ; 
 - } 
 - 
 - / * * 
 - * usage : java - Dstorage - config = " confpath " org . apache . cassandra . client . TestRingCache 
 - * @ param args 
 - * @ throws Exception 
 - * / 
 - public static void main ( String [ ] args ) throws Throwable 
 - { 
 - String table = " Keyspace1 " ; 
 - for ( int nRows = 1 ; nRows < 10 ; nRows + + ) 
 - { 
 - String row = " row " + nRows ; 
 - ColumnPath col = new ColumnPath ( " Standard1 " , null , " col1 " . getBytes ( ) ) ; 
 - 
 - EndPoint endPoints [ ] = ringCache . getEndPoint ( row ) ; 
 - String hosts = " " ; 
 - for ( int i = 0 ; i < endPoints . length ; i + + ) 
 - hosts = hosts + ( ( i > 0 ) ? " , " : " " ) + endPoints [ i ] . getHost ( ) ; 
 - System . out . println ( " hosts with key " + row + " : " + hosts + " ; choose " + endPoints [ 0 ] . getHost ( ) ) ; 
 - 
 - / / now , read the row back directly from the host owning the row locally 
 - setup ( endPoints [ 0 ] . getHost ( ) , endPoints [ 0 ] . getPort ( ) ) ; 
 - thriftClient . insert ( table , row , col , " val1 " . getBytes ( ) , 1 , 1 ) ; 
 - Column column = thriftClient . get ( table , row , col , 1 ) . column ; 
 - System . out . println ( " read row " + row + " " + new String ( column . name ) + " : " + new String ( column . value ) + " : " + column . timestamp ) ; 
 - } 
 - System . exit ( 1 ) ; 
 - } 
 - } 
 + / * * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . client ; 
 + 
 + import org . apache . cassandra . net . EndPoint ; 
 + import org . apache . cassandra . service . Cassandra ; 
 + import org . apache . cassandra . service . Column ; 
 + import org . apache . cassandra . service . ColumnPath ; 
 + import org . apache . thrift . protocol . TBinaryProtocol ; 
 + import org . apache . thrift . transport . TSocket ; 
 + import org . apache . thrift . transport . TTransport ; 
 + 
 + / * * 
 + * Sample code that uses RingCache in the client . 
 + * / 
 + public class TestRingCache 
 + { 
 + private static RingCache ringCache ; 
 + private static Cassandra . Client thriftClient ; 
 + 
 + static 
 + { 
 + ringCache = new RingCache ( ) ; 
 + } 
 + 
 + private static void setup ( String server , int port ) throws Exception 
 + { 
 + / * Establish a thrift connection to the cassandra instance * / 
 + TSocket socket = new TSocket ( server , port ) ; 
 + TTransport transport ; 
 + System . out . println ( " connected to " + server + " : " + port + " . " ) ; 
 + transport = socket ; 
 + TBinaryProtocol binaryProtocol = new TBinaryProtocol ( transport , false , false ) ; 
 + Cassandra . Client cassandraClient = new Cassandra . Client ( binaryProtocol ) ; 
 + transport . open ( ) ; 
 + thriftClient = cassandraClient ; 
 + } 
 + 
 + / * * 
 + * usage : java - Dstorage - config = " confpath " org . apache . cassandra . client . TestRingCache 
 + * @ param args 
 + * @ throws Exception 
 + * / 
 + public static void main ( String [ ] args ) throws Throwable 
 + { 
 + String table = " Keyspace1 " ; 
 + for ( int nRows = 1 ; nRows < 10 ; nRows + + ) 
 + { 
 + String row = " row " + nRows ; 
 + ColumnPath col = new ColumnPath ( " Standard1 " , null , " col1 " . getBytes ( ) ) ; 
 + 
 + EndPoint endPoints [ ] = ringCache . getEndPoint ( row ) ; 
 + String hosts = " " ; 
 + for ( int i = 0 ; i < endPoints . length ; i + + ) 
 + hosts = hosts + ( ( i > 0 ) ? " , " : " " ) + endPoints [ i ] . getHost ( ) ; 
 + System . out . println ( " hosts with key " + row + " : " + hosts + " ; choose " + endPoints [ 0 ] . getHost ( ) ) ; 
 + 
 + / / now , read the row back directly from the host owning the row locally 
 + setup ( endPoints [ 0 ] . getHost ( ) , endPoints [ 0 ] . getPort ( ) ) ; 
 + thriftClient . insert ( table , row , col , " val1 " . getBytes ( ) , 1 , 1 ) ; 
 + Column column = thriftClient . get ( table , row , col , 1 ) . column ; 
 + System . out . println ( " read row " + row + " " + new String ( column . name ) + " : " + new String ( column . value ) + " : " + column . timestamp ) ; 
 + } 
 + System . exit ( 1 ) ; 
 + } 
 + }
