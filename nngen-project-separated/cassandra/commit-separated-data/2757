BLEU SCORE: 0.020943469770777077

TEST MSG: Don ' t swallow useful exceptions .
GENERATED MSG: Fix unwanted schema pull while upgrading nodes from 1 . 2 to 2 . 0

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> index 35e6e33 . . faa1955 100644 <nl> - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java <nl> @ @ - 22 , 6 + 22 , 9 @ @ import java . nio . ByteBuffer ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> + <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . serializers . TypeSerializer ; <nl> @ @ - 49 , 6 + 52 , 8 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; <nl> * / <nl> public class DynamicCompositeType extends AbstractCompositeType <nl> { <nl> + private static final Logger logger = LoggerFactory . getLogger ( DynamicCompositeType . class ) ; <nl> + <nl> private final Map < Byte , AbstractType < ? > > aliases ; <nl> <nl> / / interning instances <nl> @ @ - 185 , 13 + 190 , 25 @ @ public class DynamicCompositeType extends AbstractCompositeType <nl> throw new MarshalException ( " Not enough bytes to read comparator name of component " + i ) ; <nl> <nl> ByteBuffer value = getBytes ( bb , header ) ; <nl> + String valueStr = null ; <nl> try <nl> { <nl> - comparator = TypeParser . parse ( ByteBufferUtil . string ( value ) ) ; <nl> + valueStr = ByteBufferUtil . string ( value ) ; <nl> + comparator = TypeParser . parse ( valueStr ) ; <nl> + } <nl> + catch ( CharacterCodingException ce ) <nl> + { <nl> + / / ByteBufferUtil . string failed . <nl> + / / Log it here and we ' ll further throw an exception below since comparator = = null <nl> + logger . error ( " Failed with [ { } ] when decoding the byte buffer in ByteBufferUtil . string ( ) " , <nl> + ce . toString ( ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - / / we ' ll deal with this below since comparator = = null <nl> + / / parse failed . <nl> + / / Log it here and we ' ll further throw an exception below since comparator = = null <nl> + logger . error ( " Failed to parse value string \ " { } \ " with exception : [ { } ] " , <nl> + valueStr , e . toString ( ) ) ; <nl> } <nl> } <nl> else <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index d874ef0 . . a342866 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 237 , 7 + 237 , 10 @ @ public class NodeProbe implements AutoCloseable <nl> ssProxy . removeNotificationListener ( runner ) ; <nl> jmxc . removeConnectionNotificationListener ( runner ) ; <nl> } <nl> - catch ( Throwable ignored ) { } <nl> + catch ( Throwable e ) <nl> + { <nl> + out . println ( " Exception occurred during clean - up . " + e ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 262 , 7 + 265 , 10 @ @ public class NodeProbe implements AutoCloseable <nl> ssProxy . removeNotificationListener ( runner ) ; <nl> jmxc . removeConnectionNotificationListener ( runner ) ; <nl> } <nl> - catch ( Throwable ignored ) { } <nl> + catch ( Throwable e ) <nl> + { <nl> + out . println ( " Exception occurred during clean - up . " + e ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / utils / Hex . java b / src / java / org / apache / cassandra / utils / Hex . java <nl> index 463c49a . . 5ba0b1a 100644 <nl> - - - a / src / java / org / apache / cassandra / utils / Hex . java <nl> + + + b / src / java / org / apache / cassandra / utils / Hex . java <nl> @ @ - 18 , 11 + 18 , 16 @ @ <nl> package org . apache . cassandra . utils ; <nl> <nl> import java . lang . reflect . Constructor ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + <nl> + import org . slf4j . Logger ; <nl> + import org . slf4j . LoggerFactory ; <nl> <nl> public class Hex <nl> { <nl> private static final Constructor < String > stringConstructor = getProtectedConstructor ( String . class , int . class , int . class , char [ ] . class ) ; <nl> private final static byte [ ] charToByte = new byte [ 256 ] ; <nl> + private static final Logger logger = LoggerFactory . getLogger ( Hex . class ) ; <nl> <nl> / / package protected for use by ByteBufferUtil . Do not modify this array ! ! <nl> static final char [ ] byteToChar = new char [ 16 ] ; <nl> @ @ - 91 , 6 + 96 , 12 @ @ public class Hex <nl> try <nl> { <nl> s = stringConstructor . newInstance ( 0 , c . length , c ) ; <nl> + } <nl> + catch ( InvocationTargetException ite ) { <nl> + / / The underlying constructor failed . Unwrapping the exception . <nl> + Throwable cause = ite . getCause ( ) ; <nl> + logger . error ( " Underlying string constructor threw an error : { } " , <nl> + cause = = null ? ite . getMessage ( ) : cause . getMessage ( ) ) ; <nl> } <nl> catch ( Exception e ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 index 35e6e33 . . faa1955 100644 
 - - - a / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 + + + b / src / java / org / apache / cassandra / db / marshal / DynamicCompositeType . java 
 @ @ - 22 , 6 + 22 , 9 @ @ import java . nio . ByteBuffer ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 + 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . serializers . TypeSerializer ; 
 @ @ - 49 , 6 + 52 , 8 @ @ import org . apache . cassandra . utils . ByteBufferUtil ; 
 * / 
 public class DynamicCompositeType extends AbstractCompositeType 
 { 
 + private static final Logger logger = LoggerFactory . getLogger ( DynamicCompositeType . class ) ; 
 + 
 private final Map < Byte , AbstractType < ? > > aliases ; 
 
 / / interning instances 
 @ @ - 185 , 13 + 190 , 25 @ @ public class DynamicCompositeType extends AbstractCompositeType 
 throw new MarshalException ( " Not enough bytes to read comparator name of component " + i ) ; 
 
 ByteBuffer value = getBytes ( bb , header ) ; 
 + String valueStr = null ; 
 try 
 { 
 - comparator = TypeParser . parse ( ByteBufferUtil . string ( value ) ) ; 
 + valueStr = ByteBufferUtil . string ( value ) ; 
 + comparator = TypeParser . parse ( valueStr ) ; 
 + } 
 + catch ( CharacterCodingException ce ) 
 + { 
 + / / ByteBufferUtil . string failed . 
 + / / Log it here and we ' ll further throw an exception below since comparator = = null 
 + logger . error ( " Failed with [ { } ] when decoding the byte buffer in ByteBufferUtil . string ( ) " , 
 + ce . toString ( ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 - / / we ' ll deal with this below since comparator = = null 
 + / / parse failed . 
 + / / Log it here and we ' ll further throw an exception below since comparator = = null 
 + logger . error ( " Failed to parse value string \ " { } \ " with exception : [ { } ] " , 
 + valueStr , e . toString ( ) ) ; 
 } 
 } 
 else 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index d874ef0 . . a342866 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 237 , 7 + 237 , 10 @ @ public class NodeProbe implements AutoCloseable 
 ssProxy . removeNotificationListener ( runner ) ; 
 jmxc . removeConnectionNotificationListener ( runner ) ; 
 } 
 - catch ( Throwable ignored ) { } 
 + catch ( Throwable e ) 
 + { 
 + out . println ( " Exception occurred during clean - up . " + e ) ; 
 + } 
 } 
 } 
 
 @ @ - 262 , 7 + 265 , 10 @ @ public class NodeProbe implements AutoCloseable 
 ssProxy . removeNotificationListener ( runner ) ; 
 jmxc . removeConnectionNotificationListener ( runner ) ; 
 } 
 - catch ( Throwable ignored ) { } 
 + catch ( Throwable e ) 
 + { 
 + out . println ( " Exception occurred during clean - up . " + e ) ; 
 + } 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / utils / Hex . java b / src / java / org / apache / cassandra / utils / Hex . java 
 index 463c49a . . 5ba0b1a 100644 
 - - - a / src / java / org / apache / cassandra / utils / Hex . java 
 + + + b / src / java / org / apache / cassandra / utils / Hex . java 
 @ @ - 18 , 11 + 18 , 16 @ @ 
 package org . apache . cassandra . utils ; 
 
 import java . lang . reflect . Constructor ; 
 + import java . lang . reflect . InvocationTargetException ; 
 + 
 + import org . slf4j . Logger ; 
 + import org . slf4j . LoggerFactory ; 
 
 public class Hex 
 { 
 private static final Constructor < String > stringConstructor = getProtectedConstructor ( String . class , int . class , int . class , char [ ] . class ) ; 
 private final static byte [ ] charToByte = new byte [ 256 ] ; 
 + private static final Logger logger = LoggerFactory . getLogger ( Hex . class ) ; 
 
 / / package protected for use by ByteBufferUtil . Do not modify this array ! ! 
 static final char [ ] byteToChar = new char [ 16 ] ; 
 @ @ - 91 , 6 + 96 , 12 @ @ public class Hex 
 try 
 { 
 s = stringConstructor . newInstance ( 0 , c . length , c ) ; 
 + } 
 + catch ( InvocationTargetException ite ) { 
 + / / The underlying constructor failed . Unwrapping the exception . 
 + Throwable cause = ite . getCause ( ) ; 
 + logger . error ( " Underlying string constructor threw an error : { } " , 
 + cause = = null ? ite . getMessage ( ) : cause . getMessage ( ) ) ; 
 } 
 catch ( Exception e ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
