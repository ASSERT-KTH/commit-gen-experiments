BLEU SCORE: 0.02378850384826639

TEST MSG: Ninja : add assertions for missing partition keys when loading table
GENERATED MSG: Add schema _ version to local table ( since local node is not in peers )

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> index 4708033 . . 4de4f7b 100644 <nl> - - - a / src / java / org / apache / cassandra / config / CFMetaData . java <nl> + + + b / src / java / org / apache / cassandra / config / CFMetaData . java <nl> @ @ - 286 , 6 + 286 , 9 @ @ public final class CFMetaData <nl> / / A compact table should always have a clustering <nl> assert isCQLTable ( ) | | ! clusteringColumns . isEmpty ( ) : String . format ( " For table % s . % s , isDense = % b , isCompound = % b , clustering = % s " , ksName , cfName , isDense , isCompound , clusteringColumns ) ; <nl> <nl> + / / All tables should have a partition key <nl> + assert ! partitionKeyColumns . isEmpty ( ) : String . format ( " Have no partition keys for table % s . % s " , ksName , cfName ) ; <nl> + <nl> this . partitionKeyColumns = partitionKeyColumns ; <nl> this . clusteringColumns = clusteringColumns ; <nl> this . partitionColumns = partitionColumns ; <nl> diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> index dd0bb46 . . 8e3961e 100644 <nl> - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java <nl> @ @ - 951 , 6 + 951 , 12 @ @ public final class SchemaKeyspace <nl> boolean isCompound = flags . contains ( CFMetaData . Flag . COMPOUND ) ; <nl> <nl> List < ColumnDefinition > columns = fetchColumns ( keyspaceName , tableName , types ) ; <nl> + if ( ! columns . stream ( ) . anyMatch ( ColumnDefinition : : isPartitionKey ) ) <nl> + { <nl> + String msg = String . format ( " Table % s . % s did not have any partition key columns in the schema tables " , keyspaceName , tableName ) ; <nl> + throw new AssertionError ( msg ) ; <nl> + } <nl> + <nl> Map < ByteBuffer , CFMetaData . DroppedColumn > droppedColumns = fetchDroppedColumns ( keyspaceName , tableName ) ; <nl> Indexes indexes = fetchIndexes ( keyspaceName , tableName ) ; <nl> Triggers triggers = fetchTriggers ( keyspaceName , tableName ) ;
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> index ba7587f . . 06778d9 100644 <nl> - - - a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> + + + b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ import java . io . * ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . channels . FileChannel ; <nl> <nl> + import com . google . common . annotations . VisibleForTesting ; <nl> + <nl> import org . apache . cassandra . io . FSReadError ; <nl> import org . apache . cassandra . utils . CLibrary ; <nl> <nl> @ @ - 94 , 22 + 96 , 18 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> validBufferBytes = - 1 ; / / that will trigger reBuffer ( ) on demand by read / seek operations <nl> } <nl> <nl> - public static RandomAccessReader open ( File file , boolean skipIOCache ) <nl> - { <nl> - return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache ) ; <nl> - } <nl> - <nl> public static RandomAccessReader open ( File file ) <nl> { <nl> - return open ( file , DEFAULT _ BUFFER _ SIZE , false ) ; <nl> + return open ( file , false ) ; <nl> } <nl> <nl> - public static RandomAccessReader open ( File file , int bufferSize ) <nl> + public static RandomAccessReader open ( File file , boolean skipIOCache ) <nl> { <nl> - return open ( file , bufferSize , false ) ; <nl> + return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache ) ; <nl> } <nl> <nl> - public static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache ) <nl> + @ VisibleForTesting <nl> + static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache ) <nl> { <nl> try <nl> { <nl> @ @ - 121 , 10 + 119 , 10 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu <nl> } <nl> } <nl> <nl> - / / convert open into open <nl> + @ VisibleForTesting <nl> public static RandomAccessReader open ( SequentialWriter writer ) <nl> { <nl> - return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE ) ; <nl> + return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , false ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> index e38850d . . e7fa8e3 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java <nl> @ @ - 337 , 7 + 337 , 8 @ @ public class BufferedRandomAccessFileTest <nl> / / single too - large read <nl> for ( final int offset : Arrays . asList ( 0 , 8 ) ) <nl> { <nl> - final RandomAccessReader file = RandomAccessReader . open ( writeTemporaryFile ( new byte [ 16 ] ) , bufferSize ) ; <nl> + File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; <nl> + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; <nl> expectEOF ( new Callable < Object > ( ) <nl> { <nl> public Object call ( ) throws IOException <nl> @ @ - 351 , 7 + 352 , 8 @ @ public class BufferedRandomAccessFileTest <nl> / / first read is ok but eventually EOFs <nl> for ( final int n : Arrays . asList ( 1 , 2 , 4 , 8 ) ) <nl> { <nl> - final RandomAccessReader file = RandomAccessReader . open ( writeTemporaryFile ( new byte [ 16 ] ) , bufferSize ) ; <nl> + File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; <nl> + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; <nl> expectEOF ( new Callable < Object > ( ) <nl> { <nl> public Object call ( ) throws IOException

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / config / CFMetaData . java b / src / java / org / apache / cassandra / config / CFMetaData . java 
 index 4708033 . . 4de4f7b 100644 
 - - - a / src / java / org / apache / cassandra / config / CFMetaData . java 
 + + + b / src / java / org / apache / cassandra / config / CFMetaData . java 
 @ @ - 286 , 6 + 286 , 9 @ @ public final class CFMetaData 
 / / A compact table should always have a clustering 
 assert isCQLTable ( ) | | ! clusteringColumns . isEmpty ( ) : String . format ( " For table % s . % s , isDense = % b , isCompound = % b , clustering = % s " , ksName , cfName , isDense , isCompound , clusteringColumns ) ; 
 
 + / / All tables should have a partition key 
 + assert ! partitionKeyColumns . isEmpty ( ) : String . format ( " Have no partition keys for table % s . % s " , ksName , cfName ) ; 
 + 
 this . partitionKeyColumns = partitionKeyColumns ; 
 this . clusteringColumns = clusteringColumns ; 
 this . partitionColumns = partitionColumns ; 
 diff - - git a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 index dd0bb46 . . 8e3961e 100644 
 - - - a / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 + + + b / src / java / org / apache / cassandra / schema / SchemaKeyspace . java 
 @ @ - 951 , 6 + 951 , 12 @ @ public final class SchemaKeyspace 
 boolean isCompound = flags . contains ( CFMetaData . Flag . COMPOUND ) ; 
 
 List < ColumnDefinition > columns = fetchColumns ( keyspaceName , tableName , types ) ; 
 + if ( ! columns . stream ( ) . anyMatch ( ColumnDefinition : : isPartitionKey ) ) 
 + { 
 + String msg = String . format ( " Table % s . % s did not have any partition key columns in the schema tables " , keyspaceName , tableName ) ; 
 + throw new AssertionError ( msg ) ; 
 + } 
 + 
 Map < ByteBuffer , CFMetaData . DroppedColumn > droppedColumns = fetchDroppedColumns ( keyspaceName , tableName ) ; 
 Indexes indexes = fetchIndexes ( keyspaceName , tableName ) ; 
 Triggers triggers = fetchTriggers ( keyspaceName , tableName ) ;

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 index ba7587f . . 06778d9 100644 
 - - - a / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 + + + b / src / java / org / apache / cassandra / io / util / RandomAccessReader . java 
 @ @ - 21 , 6 + 21 , 8 @ @ import java . io . * ; 
 import java . nio . ByteBuffer ; 
 import java . nio . channels . FileChannel ; 
 
 + import com . google . common . annotations . VisibleForTesting ; 
 + 
 import org . apache . cassandra . io . FSReadError ; 
 import org . apache . cassandra . utils . CLibrary ; 
 
 @ @ - 94 , 22 + 96 , 18 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 validBufferBytes = - 1 ; / / that will trigger reBuffer ( ) on demand by read / seek operations 
 } 
 
 - public static RandomAccessReader open ( File file , boolean skipIOCache ) 
 - { 
 - return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache ) ; 
 - } 
 - 
 public static RandomAccessReader open ( File file ) 
 { 
 - return open ( file , DEFAULT _ BUFFER _ SIZE , false ) ; 
 + return open ( file , false ) ; 
 } 
 
 - public static RandomAccessReader open ( File file , int bufferSize ) 
 + public static RandomAccessReader open ( File file , boolean skipIOCache ) 
 { 
 - return open ( file , bufferSize , false ) ; 
 + return open ( file , DEFAULT _ BUFFER _ SIZE , skipIOCache ) ; 
 } 
 
 - public static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache ) 
 + @ VisibleForTesting 
 + static RandomAccessReader open ( File file , int bufferSize , boolean skipIOCache ) 
 { 
 try 
 { 
 @ @ - 121 , 10 + 119 , 10 @ @ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu 
 } 
 } 
 
 - / / convert open into open 
 + @ VisibleForTesting 
 public static RandomAccessReader open ( SequentialWriter writer ) 
 { 
 - return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE ) ; 
 + return open ( new File ( writer . getPath ( ) ) , DEFAULT _ BUFFER _ SIZE , false ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 index e38850d . . e7fa8e3 100644 
 - - - a / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 + + + b / test / unit / org / apache / cassandra / io / util / BufferedRandomAccessFileTest . java 
 @ @ - 337 , 7 + 337 , 8 @ @ public class BufferedRandomAccessFileTest 
 / / single too - large read 
 for ( final int offset : Arrays . asList ( 0 , 8 ) ) 
 { 
 - final RandomAccessReader file = RandomAccessReader . open ( writeTemporaryFile ( new byte [ 16 ] ) , bufferSize ) ; 
 + File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; 
 + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; 
 expectEOF ( new Callable < Object > ( ) 
 { 
 public Object call ( ) throws IOException 
 @ @ - 351 , 7 + 352 , 8 @ @ public class BufferedRandomAccessFileTest 
 / / first read is ok but eventually EOFs 
 for ( final int n : Arrays . asList ( 1 , 2 , 4 , 8 ) ) 
 { 
 - final RandomAccessReader file = RandomAccessReader . open ( writeTemporaryFile ( new byte [ 16 ] ) , bufferSize ) ; 
 + File file1 = writeTemporaryFile ( new byte [ 16 ] ) ; 
 + final RandomAccessReader file = RandomAccessReader . open ( file1 , bufferSize , false ) ; 
 expectEOF ( new Callable < Object > ( ) 
 { 
 public Object call ( ) throws IOException
