BLEU SCORE: 0.866397551781362

TEST MSG: Assert the local node is never hinted and make PAXOS commit not hint ( 3 . 3 version )
GENERATED MSG: Assert the local node is never hinted and make PAXOS commit not hint ( 3 . 0 version )

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index a9202ce . . dfa073b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 14 , 6 + 14 , 7 @ @ Merged from 2 . 2 : <nl> * Skip commit log and saved cache directories in SSTable version startup check ( CASSANDRA - 10902 ) <nl> * drop / alter user should be case sensitive ( CASSANDRA - 10817 ) <nl> Merged from 2 . 1 : <nl> + * Avoid AssertionError while submitting hint with LWT ( CASSANDRA - 10477 ) <nl> * If CompactionMetadata is not in stats file , use index summary instead ( CASSANDRA - 10676 ) <nl> * Retry sending gossip syn multiple times during shadow round ( CASSANDRA - 8072 ) <nl> * Fix pending range calculation during moves ( CASSANDRA - 10887 ) <nl> diff - - git a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java <nl> index bf7cc3a . . 9ecc385 100644 <nl> - - - a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java <nl> + + + b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . db . Mutation ; <nl> import org . apache . cassandra . io . IVersionedSerializer ; <nl> import org . apache . cassandra . service . StorageProxy ; <nl> import org . apache . cassandra . service . paxos . Commit ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class WriteCallbackInfo extends CallbackInfo <nl> { <nl> @ @ - 41 , 6 + 42 , 8 @ @ public class WriteCallbackInfo extends CallbackInfo <nl> super ( target , callback , serializer , true ) ; <nl> assert message ! = null ; <nl> this . mutation = shouldHint ( allowHints , message , consistencyLevel ) ; <nl> + / / Local writes shouldn ' t go through messaging service ( https : / / issues . apache . org / jira / browse / CASSANDRA - 10477 ) <nl> + assert ( ! target . equals ( FBUtilities . getBroadcastAddress ( ) ) ) ; <nl> } <nl> <nl> public boolean shouldHint ( ) <nl> diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> index 2e32f16 . . cafc224 100644 <nl> - - - a / src / java / org / apache / cassandra / service / StorageProxy . java <nl> + + + b / src / java / org / apache / cassandra / service / StorageProxy . java <nl> @ @ - 63 , 8 + 63 , 10 @ @ import org . apache . cassandra . locator . * ; <nl> import org . apache . cassandra . metrics . * ; <nl> import org . apache . cassandra . net . * ; <nl> import org . apache . cassandra . service . paxos . Commit ; <nl> + import org . apache . cassandra . service . paxos . PaxosState ; <nl> import org . apache . cassandra . service . paxos . PrepareCallback ; <nl> import org . apache . cassandra . service . paxos . ProposeCallback ; <nl> + import org . apache . cassandra . net . MessagingService . Verb ; <nl> import org . apache . cassandra . tracing . Tracing ; <nl> import org . apache . cassandra . triggers . TriggerExecutor ; <nl> import org . apache . cassandra . utils . * ; <nl> @ @ - 511 , 12 + 513 , 21 @ @ public class StorageProxy implements StorageProxyMBean <nl> MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ COMMIT , proposal , Commit . serializer ) ; <nl> for ( InetAddress destination : Iterables . concat ( naturalEndpoints , pendingEndpoints ) ) <nl> { <nl> + checkHintOverload ( destination ) ; <nl> + <nl> if ( FailureDetector . instance . isAlive ( destination ) ) <nl> { <nl> if ( shouldBlock ) <nl> - MessagingService . instance ( ) . sendRR ( message , destination , responseHandler , shouldHint ) ; <nl> + { <nl> + if ( canDoLocalRequest ( destination ) ) <nl> + commitPaxosLocal ( message , responseHandler ) ; <nl> + else <nl> + MessagingService . instance ( ) . sendRR ( message , destination , responseHandler , shouldHint ) ; <nl> + } <nl> else <nl> + { <nl> MessagingService . instance ( ) . sendOneWay ( message , destination ) ; <nl> + } <nl> } <nl> else if ( shouldHint ) <nl> { <nl> @ @ - 529 , 6 + 540 , 39 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> <nl> / * * <nl> + * Commit a PAXOS task locally , and if the task times out rather then submitting a real hint <nl> + * submit a fake one that executes immediately on the mutation stage , but generates the necessary backpressure <nl> + * signal for hints <nl> + * / <nl> + private static void commitPaxosLocal ( final MessageOut < Commit > message , final AbstractWriteResponseHandler < ? > responseHandler ) <nl> + { <nl> + StageManager . getStage ( MessagingService . verbStages . get ( MessagingService . Verb . PAXOS _ COMMIT ) ) . maybeExecuteImmediately ( new LocalMutationRunnable ( ) <nl> + { <nl> + public void runMayThrow ( ) <nl> + { <nl> + try <nl> + { <nl> + PaxosState . commit ( message . payload ) ; <nl> + if ( responseHandler ! = null ) <nl> + responseHandler . response ( null ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + if ( ! ( ex instanceof WriteTimeoutException ) ) <nl> + logger . error ( " Failed to apply paxos commit locally : { } " , ex ) ; <nl> + responseHandler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected Verb verb ( ) <nl> + { <nl> + return MessagingService . Verb . PAXOS _ COMMIT ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + / * * <nl> * Use this method to have these Mutations applied <nl> * across all replicas . This method will take care <nl> * of the possibility of a replica being down and hint <nl> @ @ - 1140 , 16 + 1184 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> for ( InetAddress destination : targets ) <nl> { <nl> - / / avoid OOMing due to excess hints . we need to do this check even for " live " nodes , since we can <nl> - / / still generate hints for those if it ' s overloaded or simply dead but not yet known - to - be - dead . <nl> - / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to <nl> - / / a small number of nodes causing problems , so we should avoid shutting down writes completely to <nl> - / / healthy nodes . Any node with no hintsInProgress is considered healthy . <nl> - if ( StorageMetrics . totalHintsInProgress . getCount ( ) > maxHintsInProgress <nl> - & & ( getHintsInProgressFor ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) <nl> - { <nl> - throw new OverloadedException ( " Too many in flight hints : " + StorageMetrics . totalHintsInProgress . getCount ( ) ) ; <nl> - } <nl> + checkHintOverload ( destination ) ; <nl> <nl> if ( FailureDetector . instance . isAlive ( destination ) ) <nl> { <nl> @ @ - 1211 , 6 + 1246 , 22 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> } <nl> <nl> + private static void checkHintOverload ( InetAddress destination ) <nl> + { <nl> + / / avoid OOMing due to excess hints . we need to do this check even for " live " nodes , since we can <nl> + / / still generate hints for those if it ' s overloaded or simply dead but not yet known - to - be - dead . <nl> + / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to <nl> + / / a small number of nodes causing problems , so we should avoid shutting down writes completely to <nl> + / / healthy nodes . Any node with no hintsInProgress is considered healthy . <nl> + if ( StorageMetrics . totalHintsInProgress . getCount ( ) > maxHintsInProgress <nl> + & & ( getHintsInProgressFor ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) <nl> + { <nl> + throw new OverloadedException ( " Too many in flight hints : " + StorageMetrics . totalHintsInProgress . getCount ( ) + <nl> + " destination : " + destination + <nl> + " destination hints : " + getHintsInProgressFor ( destination ) . get ( ) ) ; <nl> + } <nl> + } <nl> + <nl> private static void sendMessagesToNonlocalDC ( MessageOut < ? extends IMutation > message , <nl> Collection < InetAddress > targets , <nl> AbstractWriteResponseHandler < IMutation > handler ) <nl> @ @ - 1262 , 6 + 1313 , 12 @ @ public class StorageProxy implements StorageProxyMBean <nl> logger . error ( " Failed to apply mutation locally : { } " , ex ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + protected Verb verb ( ) <nl> + { <nl> + return MessagingService . Verb . MUTATION ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> @ @ - 1283 , 6 + 1340 , 12 @ @ public class StorageProxy implements StorageProxyMBean <nl> handler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + protected Verb verb ( ) <nl> + { <nl> + return MessagingService . Verb . MUTATION ; <nl> + } <nl> } ) ; <nl> } <nl> <nl> @ @ - 2412 , 11 + 2475 , 13 @ @ public class StorageProxy implements StorageProxyMBean <nl> <nl> public final void run ( ) <nl> { <nl> - long mutationTimeout = DatabaseDescriptor . getTimeout ( MessagingService . Verb . MUTATION ) ; <nl> + final MessagingService . Verb verb = verb ( ) ; <nl> + long mutationTimeout = DatabaseDescriptor . getTimeout ( verb ) ; <nl> long timeTaken = System . currentTimeMillis ( ) - constructionTime ; <nl> if ( timeTaken > mutationTimeout ) <nl> { <nl> - MessagingService . instance ( ) . incrementDroppedMessages ( MessagingService . Verb . MUTATION , timeTaken ) ; <nl> + if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) ) <nl> + MessagingService . instance ( ) . incrementDroppedMessages ( verb , timeTaken ) ; <nl> HintRunnable runnable = new HintRunnable ( Collections . singleton ( FBUtilities . getBroadcastAddress ( ) ) ) <nl> { <nl> protected void runMayThrow ( ) throws Exception <nl> @ @ - 2438 , 6 + 2503 , 7 @ @ public class StorageProxy implements StorageProxyMBean <nl> } <nl> } <nl> <nl> + abstract protected MessagingService . Verb verb ( ) ; <nl> abstract protected void runMayThrow ( ) throws Exception ; <nl> } <nl> <nl> diff - - git a / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java <nl> index ac726d5 . . a994a99 100644 <nl> - - - a / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java <nl> + + + b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class WriteCallbackInfoTest <nl> { <nl> <nl> @ Test <nl> - public void testShouldHint ( ) <nl> + public void testShouldHint ( ) throws Exception <nl> { <nl> testShouldHint ( Verb . COUNTER _ MUTATION , ConsistencyLevel . ALL , true , false ) ; <nl> for ( Verb verb : new Verb [ ] { Verb . PAXOS _ COMMIT , Verb . MUTATION } ) <nl> @ @ - 50 , 13 + 50 , 13 @ @ public class WriteCallbackInfoTest <nl> } <nl> } <nl> <nl> - private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) <nl> + private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) throws Exception <nl> { <nl> Object payload = verb = = Verb . PAXOS _ COMMIT <nl> ? new Commit ( UUID . randomUUID ( ) , new PartitionUpdate ( MockSchema . newCFMetaData ( " " , " " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , PartitionColumns . NONE , 1 ) ) <nl> : new Mutation ( " " , new BufferDecoratedKey ( new Murmur3Partitioner . LongToken ( 0 ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; <nl> <nl> - WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getLoopbackAddress ( ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; <nl> + WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getByName ( " 192 . 168 . 1 . 1 " ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; <nl> Assert . assertEquals ( expectHint , wcbi . shouldHint ( ) ) ; <nl> if ( expectHint ) <nl> {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index a9202ce . . dfa073b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 14 , 6 + 14 , 7 @ @ Merged from 2 . 2 : 
 * Skip commit log and saved cache directories in SSTable version startup check ( CASSANDRA - 10902 ) 
 * drop / alter user should be case sensitive ( CASSANDRA - 10817 ) 
 Merged from 2 . 1 : 
 + * Avoid AssertionError while submitting hint with LWT ( CASSANDRA - 10477 ) 
 * If CompactionMetadata is not in stats file , use index summary instead ( CASSANDRA - 10676 ) 
 * Retry sending gossip syn multiple times during shadow round ( CASSANDRA - 8072 ) 
 * Fix pending range calculation during moves ( CASSANDRA - 10887 ) 
 diff - - git a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java 
 index bf7cc3a . . 9ecc385 100644 
 - - - a / src / java / org / apache / cassandra / net / WriteCallbackInfo . java 
 + + + b / src / java / org / apache / cassandra / net / WriteCallbackInfo . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . cassandra . db . Mutation ; 
 import org . apache . cassandra . io . IVersionedSerializer ; 
 import org . apache . cassandra . service . StorageProxy ; 
 import org . apache . cassandra . service . paxos . Commit ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 public class WriteCallbackInfo extends CallbackInfo 
 { 
 @ @ - 41 , 6 + 42 , 8 @ @ public class WriteCallbackInfo extends CallbackInfo 
 super ( target , callback , serializer , true ) ; 
 assert message ! = null ; 
 this . mutation = shouldHint ( allowHints , message , consistencyLevel ) ; 
 + / / Local writes shouldn ' t go through messaging service ( https : / / issues . apache . org / jira / browse / CASSANDRA - 10477 ) 
 + assert ( ! target . equals ( FBUtilities . getBroadcastAddress ( ) ) ) ; 
 } 
 
 public boolean shouldHint ( ) 
 diff - - git a / src / java / org / apache / cassandra / service / StorageProxy . java b / src / java / org / apache / cassandra / service / StorageProxy . java 
 index 2e32f16 . . cafc224 100644 
 - - - a / src / java / org / apache / cassandra / service / StorageProxy . java 
 + + + b / src / java / org / apache / cassandra / service / StorageProxy . java 
 @ @ - 63 , 8 + 63 , 10 @ @ import org . apache . cassandra . locator . * ; 
 import org . apache . cassandra . metrics . * ; 
 import org . apache . cassandra . net . * ; 
 import org . apache . cassandra . service . paxos . Commit ; 
 + import org . apache . cassandra . service . paxos . PaxosState ; 
 import org . apache . cassandra . service . paxos . PrepareCallback ; 
 import org . apache . cassandra . service . paxos . ProposeCallback ; 
 + import org . apache . cassandra . net . MessagingService . Verb ; 
 import org . apache . cassandra . tracing . Tracing ; 
 import org . apache . cassandra . triggers . TriggerExecutor ; 
 import org . apache . cassandra . utils . * ; 
 @ @ - 511 , 12 + 513 , 21 @ @ public class StorageProxy implements StorageProxyMBean 
 MessageOut < Commit > message = new MessageOut < Commit > ( MessagingService . Verb . PAXOS _ COMMIT , proposal , Commit . serializer ) ; 
 for ( InetAddress destination : Iterables . concat ( naturalEndpoints , pendingEndpoints ) ) 
 { 
 + checkHintOverload ( destination ) ; 
 + 
 if ( FailureDetector . instance . isAlive ( destination ) ) 
 { 
 if ( shouldBlock ) 
 - MessagingService . instance ( ) . sendRR ( message , destination , responseHandler , shouldHint ) ; 
 + { 
 + if ( canDoLocalRequest ( destination ) ) 
 + commitPaxosLocal ( message , responseHandler ) ; 
 + else 
 + MessagingService . instance ( ) . sendRR ( message , destination , responseHandler , shouldHint ) ; 
 + } 
 else 
 + { 
 MessagingService . instance ( ) . sendOneWay ( message , destination ) ; 
 + } 
 } 
 else if ( shouldHint ) 
 { 
 @ @ - 529 , 6 + 540 , 39 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 
 / * * 
 + * Commit a PAXOS task locally , and if the task times out rather then submitting a real hint 
 + * submit a fake one that executes immediately on the mutation stage , but generates the necessary backpressure 
 + * signal for hints 
 + * / 
 + private static void commitPaxosLocal ( final MessageOut < Commit > message , final AbstractWriteResponseHandler < ? > responseHandler ) 
 + { 
 + StageManager . getStage ( MessagingService . verbStages . get ( MessagingService . Verb . PAXOS _ COMMIT ) ) . maybeExecuteImmediately ( new LocalMutationRunnable ( ) 
 + { 
 + public void runMayThrow ( ) 
 + { 
 + try 
 + { 
 + PaxosState . commit ( message . payload ) ; 
 + if ( responseHandler ! = null ) 
 + responseHandler . response ( null ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + if ( ! ( ex instanceof WriteTimeoutException ) ) 
 + logger . error ( " Failed to apply paxos commit locally : { } " , ex ) ; 
 + responseHandler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + protected Verb verb ( ) 
 + { 
 + return MessagingService . Verb . PAXOS _ COMMIT ; 
 + } 
 + } ) ; 
 + } 
 + 
 + / * * 
 * Use this method to have these Mutations applied 
 * across all replicas . This method will take care 
 * of the possibility of a replica being down and hint 
 @ @ - 1140 , 16 + 1184 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 
 for ( InetAddress destination : targets ) 
 { 
 - / / avoid OOMing due to excess hints . we need to do this check even for " live " nodes , since we can 
 - / / still generate hints for those if it ' s overloaded or simply dead but not yet known - to - be - dead . 
 - / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to 
 - / / a small number of nodes causing problems , so we should avoid shutting down writes completely to 
 - / / healthy nodes . Any node with no hintsInProgress is considered healthy . 
 - if ( StorageMetrics . totalHintsInProgress . getCount ( ) > maxHintsInProgress 
 - & & ( getHintsInProgressFor ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) 
 - { 
 - throw new OverloadedException ( " Too many in flight hints : " + StorageMetrics . totalHintsInProgress . getCount ( ) ) ; 
 - } 
 + checkHintOverload ( destination ) ; 
 
 if ( FailureDetector . instance . isAlive ( destination ) ) 
 { 
 @ @ - 1211 , 6 + 1246 , 22 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 } 
 
 + private static void checkHintOverload ( InetAddress destination ) 
 + { 
 + / / avoid OOMing due to excess hints . we need to do this check even for " live " nodes , since we can 
 + / / still generate hints for those if it ' s overloaded or simply dead but not yet known - to - be - dead . 
 + / / The idea is that if we have over maxHintsInProgress hints in flight , this is probably due to 
 + / / a small number of nodes causing problems , so we should avoid shutting down writes completely to 
 + / / healthy nodes . Any node with no hintsInProgress is considered healthy . 
 + if ( StorageMetrics . totalHintsInProgress . getCount ( ) > maxHintsInProgress 
 + & & ( getHintsInProgressFor ( destination ) . get ( ) > 0 & & shouldHint ( destination ) ) ) 
 + { 
 + throw new OverloadedException ( " Too many in flight hints : " + StorageMetrics . totalHintsInProgress . getCount ( ) + 
 + " destination : " + destination + 
 + " destination hints : " + getHintsInProgressFor ( destination ) . get ( ) ) ; 
 + } 
 + } 
 + 
 private static void sendMessagesToNonlocalDC ( MessageOut < ? extends IMutation > message , 
 Collection < InetAddress > targets , 
 AbstractWriteResponseHandler < IMutation > handler ) 
 @ @ - 1262 , 6 + 1313 , 12 @ @ public class StorageProxy implements StorageProxyMBean 
 logger . error ( " Failed to apply mutation locally : { } " , ex ) ; 
 } 
 } 
 + 
 + @ Override 
 + protected Verb verb ( ) 
 + { 
 + return MessagingService . Verb . MUTATION ; 
 + } 
 } ) ; 
 } 
 
 @ @ - 1283 , 6 + 1340 , 12 @ @ public class StorageProxy implements StorageProxyMBean 
 handler . onFailure ( FBUtilities . getBroadcastAddress ( ) ) ; 
 } 
 } 
 + 
 + @ Override 
 + protected Verb verb ( ) 
 + { 
 + return MessagingService . Verb . MUTATION ; 
 + } 
 } ) ; 
 } 
 
 @ @ - 2412 , 11 + 2475 , 13 @ @ public class StorageProxy implements StorageProxyMBean 
 
 public final void run ( ) 
 { 
 - long mutationTimeout = DatabaseDescriptor . getTimeout ( MessagingService . Verb . MUTATION ) ; 
 + final MessagingService . Verb verb = verb ( ) ; 
 + long mutationTimeout = DatabaseDescriptor . getTimeout ( verb ) ; 
 long timeTaken = System . currentTimeMillis ( ) - constructionTime ; 
 if ( timeTaken > mutationTimeout ) 
 { 
 - MessagingService . instance ( ) . incrementDroppedMessages ( MessagingService . Verb . MUTATION , timeTaken ) ; 
 + if ( MessagingService . DROPPABLE _ VERBS . contains ( verb ) ) 
 + MessagingService . instance ( ) . incrementDroppedMessages ( verb , timeTaken ) ; 
 HintRunnable runnable = new HintRunnable ( Collections . singleton ( FBUtilities . getBroadcastAddress ( ) ) ) 
 { 
 protected void runMayThrow ( ) throws Exception 
 @ @ - 2438 , 6 + 2503 , 7 @ @ public class StorageProxy implements StorageProxyMBean 
 } 
 } 
 
 + abstract protected MessagingService . Verb verb ( ) ; 
 abstract protected void runMayThrow ( ) throws Exception ; 
 } 
 
 diff - - git a / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java 
 index ac726d5 . . a994a99 100644 
 - - - a / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java 
 + + + b / test / unit / org / apache / cassandra / net / WriteCallbackInfoTest . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class WriteCallbackInfoTest 
 { 
 
 @ Test 
 - public void testShouldHint ( ) 
 + public void testShouldHint ( ) throws Exception 
 { 
 testShouldHint ( Verb . COUNTER _ MUTATION , ConsistencyLevel . ALL , true , false ) ; 
 for ( Verb verb : new Verb [ ] { Verb . PAXOS _ COMMIT , Verb . MUTATION } ) 
 @ @ - 50 , 13 + 50 , 13 @ @ public class WriteCallbackInfoTest 
 } 
 } 
 
 - private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) 
 + private void testShouldHint ( Verb verb , ConsistencyLevel cl , boolean allowHints , boolean expectHint ) throws Exception 
 { 
 Object payload = verb = = Verb . PAXOS _ COMMIT 
 ? new Commit ( UUID . randomUUID ( ) , new PartitionUpdate ( MockSchema . newCFMetaData ( " " , " " ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER , PartitionColumns . NONE , 1 ) ) 
 : new Mutation ( " " , new BufferDecoratedKey ( new Murmur3Partitioner . LongToken ( 0 ) , ByteBufferUtil . EMPTY _ BYTE _ BUFFER ) ) ; 
 
 - WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getLoopbackAddress ( ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; 
 + WriteCallbackInfo wcbi = new WriteCallbackInfo ( InetAddress . getByName ( " 192 . 168 . 1 . 1 " ) , null , new MessageOut ( verb , payload , null ) , null , cl , allowHints ) ; 
 Assert . assertEquals ( expectHint , wcbi . shouldHint ( ) ) ; 
 if ( expectHint ) 
 {

NEAREST DIFF:
ELIMINATEDSENTENCE
