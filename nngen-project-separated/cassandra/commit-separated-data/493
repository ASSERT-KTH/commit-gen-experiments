BLEU SCORE: 0.05341087579952926

TEST MSG: More fixes to the TokenAllocation
GENERATED MSG: merge from 2 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 1851e62 . . 65efebc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 3 , 6 + 3 , 7 @ @ <nl> * nodetool stopdaemon errors out ( CASSANDRA - 13030 ) <nl> * Tables in system _ distributed should not use gcgs of 0 ( CASSANDRA - 12954 ) <nl> * Fix primary index calculation for SASI ( CASSANDRA - 12910 ) <nl> + * More fixes to the TokenAllocator ( CASSANDRA - 12990 ) <nl> * NoReplicationTokenAllocator should work with zero replication factor ( CASSANDRA - 12983 ) <nl> Merged from 3 . 0 : <nl> * Fix handling of partition with partition - level deletion plus <nl> diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> index 36824a1 . . 15d7868 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> @ @ - 35 , 12 + 35 , 14 @ @ import org . slf4j . LoggerFactory ; <nl> <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . exceptions . ConfigurationException ; <nl> + import org . apache . cassandra . gms . Gossiper ; <nl> import org . apache . cassandra . locator . AbstractReplicationStrategy ; <nl> import org . apache . cassandra . locator . IEndpointSnitch ; <nl> import org . apache . cassandra . locator . NetworkTopologyStrategy ; <nl> import org . apache . cassandra . locator . SimpleStrategy ; <nl> import org . apache . cassandra . locator . TokenMetadata ; <nl> import org . apache . cassandra . locator . TokenMetadata . Topology ; <nl> + import org . apache . cassandra . utils . FBUtilities ; <nl> <nl> public class TokenAllocation <nl> { <nl> @ @ - 51 , 6 + 53 , 9 @ @ public class TokenAllocation <nl> final InetAddress endpoint , <nl> int numTokens ) <nl> { <nl> + if ( ! FBUtilities . getBroadcastAddress ( ) . equals ( InetAddress . getLoopbackAddress ( ) ) ) <nl> + Gossiper . waitToSettle ( ) ; <nl> + <nl> TokenMetadata tokenMetadataCopy = tokenMetadata . cloneOnlyTokenMap ( ) ; <nl> StrategyAdapter strategy = getStrategy ( tokenMetadataCopy , rs , endpoint ) ; <nl> Collection < Token > tokens = create ( tokenMetadata , strategy ) . addUnit ( endpoint , numTokens ) ; <nl> @ @ - 198 , 6 + 203 , 31 @ @ public class TokenAllocation <nl> final String dc = snitch . getDatacenter ( endpoint ) ; <nl> final int replicas = rs . getReplicationFactor ( dc ) ; <nl> <nl> + if ( replicas = = 0 | | replicas = = 1 ) <nl> + { <nl> + / / No replication , each node is treated as separate . <nl> + return new StrategyAdapter ( ) <nl> + { <nl> + @ Override <nl> + public int replicas ( ) <nl> + { <nl> + return 1 ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object getGroup ( InetAddress unit ) <nl> + { <nl> + return unit ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean inAllocationRing ( InetAddress other ) <nl> + { <nl> + return dc . equals ( snitch . getDatacenter ( other ) ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> Topology topology = tokenMetadata . getTopology ( ) ; <nl> int racks = topology . getDatacenterRacks ( ) . get ( dc ) . asMap ( ) . size ( ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java <nl> index d20de8f . . 58acb56 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java <nl> + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java <nl> @ @ - 34 , 7 + 34 , 7 @ @ public class TokenAllocatorFactory <nl> ReplicationStrategy < InetAddress > strategy , <nl> IPartitioner partitioner ) <nl> { <nl> - if ( strategy . replicas ( ) = = 1 | | strategy . replicas ( ) = = 0 ) <nl> + if ( strategy . replicas ( ) = = 1 ) <nl> { <nl> logger . info ( " Using NoReplicationTokenAllocator . " ) ; <nl> return new NoReplicationTokenAllocator < > ( sortedTokens , strategy , partitioner ) ; <nl> diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> index 7f0f85b . . ebfd66d 100644 <nl> - - - a / src / java / org / apache / cassandra / gms / Gossiper . java <nl> + + + b / src / java / org / apache / cassandra / gms / Gossiper . java <nl> @ @ - 1614 , 4 + 1614 , 49 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean <nl> return null ; <nl> } <nl> <nl> + public static void waitToSettle ( ) <nl> + { <nl> + int forceAfter = Integer . getInteger ( " cassandra . skip _ wait _ for _ gossip _ to _ settle " , - 1 ) ; <nl> + if ( forceAfter = = 0 ) <nl> + { <nl> + return ; <nl> + } <nl> + final int GOSSIP _ SETTLE _ MIN _ WAIT _ MS = 5000 ; <nl> + final int GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS = 1000 ; <nl> + final int GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED = 3 ; <nl> + <nl> + logger . info ( " Waiting for gossip to settle . . . " ) ; <nl> + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ MIN _ WAIT _ MS , TimeUnit . MILLISECONDS ) ; <nl> + int totalPolls = 0 ; <nl> + int numOkay = 0 ; <nl> + int epSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; <nl> + while ( numOkay < GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) <nl> + { <nl> + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS , TimeUnit . MILLISECONDS ) ; <nl> + int currentSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; <nl> + totalPolls + + ; <nl> + if ( currentSize = = epSize ) <nl> + { <nl> + logger . debug ( " Gossip looks settled . " ) ; <nl> + numOkay + + ; <nl> + } <nl> + else <nl> + { <nl> + logger . info ( " Gossip not settled after { } polls . " , totalPolls ) ; <nl> + numOkay = 0 ; <nl> + } <nl> + epSize = currentSize ; <nl> + if ( forceAfter > 0 & & totalPolls > forceAfter ) <nl> + { <nl> + logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip total polls : { } " , <nl> + totalPolls ) ; <nl> + break ; <nl> + } <nl> + } <nl> + if ( totalPolls > GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) <nl> + logger . info ( " Gossip settled after { } extra polls ; proceeding " , totalPolls - GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) ; <nl> + else <nl> + logger . info ( " No gossip backlog ; proceeding " ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 5a97dfe . . 851330b 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 42 , 7 + 42 , 6 @ @ import com . codahale . metrics . jvm . MemoryUsageGaugeSet ; <nl> import com . google . common . annotations . VisibleForTesting ; <nl> import com . google . common . util . concurrent . Futures ; <nl> import com . google . common . util . concurrent . ListenableFuture ; <nl> - import com . google . common . util . concurrent . Uninterruptibles ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 412 , 7 + 411 , 7 @ @ public class CassandraDaemon <nl> ScheduledExecutors . optionalTasks . schedule ( viewRebuild , StorageService . RING _ DELAY , TimeUnit . MILLISECONDS ) ; <nl> <nl> if ( ! FBUtilities . getBroadcastAddress ( ) . equals ( InetAddress . getLoopbackAddress ( ) ) ) <nl> - waitForGossipToSettle ( ) ; <nl> + Gossiper . waitToSettle ( ) ; <nl> <nl> / / schedule periodic background compaction task submission . this is simply a backstop against compactions stalling <nl> / / due to scheduling errors or race conditions <nl> @ @ - 680 , 51 + 679 , 6 @ @ public class CassandraDaemon <nl> } <nl> } <nl> <nl> - private void waitForGossipToSettle ( ) <nl> - { <nl> - int forceAfter = Integer . getInteger ( " cassandra . skip _ wait _ for _ gossip _ to _ settle " , - 1 ) ; <nl> - if ( forceAfter = = 0 ) <nl> - { <nl> - return ; <nl> - } <nl> - final int GOSSIP _ SETTLE _ MIN _ WAIT _ MS = 5000 ; <nl> - final int GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS = 1000 ; <nl> - final int GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED = 3 ; <nl> - <nl> - logger . info ( " Waiting for gossip to settle before accepting client requests . . . " ) ; <nl> - Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ MIN _ WAIT _ MS , TimeUnit . MILLISECONDS ) ; <nl> - int totalPolls = 0 ; <nl> - int numOkay = 0 ; <nl> - int epSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; <nl> - while ( numOkay < GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) <nl> - { <nl> - Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS , TimeUnit . MILLISECONDS ) ; <nl> - int currentSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; <nl> - totalPolls + + ; <nl> - if ( currentSize = = epSize ) <nl> - { <nl> - logger . debug ( " Gossip looks settled . " ) ; <nl> - numOkay + + ; <nl> - } <nl> - else <nl> - { <nl> - logger . info ( " Gossip not settled after { } polls . " , totalPolls ) ; <nl> - numOkay = 0 ; <nl> - } <nl> - epSize = currentSize ; <nl> - if ( forceAfter > 0 & & totalPolls > forceAfter ) <nl> - { <nl> - logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip total polls : { } " , <nl> - totalPolls ) ; <nl> - break ; <nl> - } <nl> - } <nl> - if ( totalPolls > GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) <nl> - logger . info ( " Gossip settled after { } extra polls ; proceeding " , totalPolls - GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) ; <nl> - else <nl> - logger . info ( " No gossip backlog ; proceeding " ) ; <nl> - } <nl> - <nl> public static void stop ( String [ ] args ) <nl> { <nl> instance . deactivate ( ) ;
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 4d8ae14 . . 254cc2d 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 340 , 7 + 340 , 7 @ @ <nl> < dependency groupId = " com . google . guava " artifactId = " guava " version = " 13 . 0 . 1 " / > <nl> < dependency groupId = " commons - cli " artifactId = " commons - cli " version = " 1 . 1 " / > <nl> < dependency groupId = " commons - codec " artifactId = " commons - codec " version = " 1 . 2 " / > <nl> - < dependency groupId = " commons - lang " artifactId = " commons - lang " version = " 3 . 1 " / > <nl> + < dependency groupId = " org . apache . commons " artifactId = " commons - lang3 " version = " 3 . 1 " / > <nl> < dependency groupId = " com . googlecode . concurrentlinkedhashmap " artifactId = " concurrentlinkedhashmap - lru " version = " 1 . 3 " / > <nl> < dependency groupId = " org . antlr " artifactId = " antlr " version = " 3 . 2 " / > <nl> < dependency groupId = " org . slf4j " artifactId = " slf4j - api " version = " 1 . 7 . 2 " / > <nl> @ @ - 438 , 7 + 438 , 7 @ @ <nl> < dependency groupId = " com . google . guava " artifactId = " guava " / > <nl> < dependency groupId = " commons - cli " artifactId = " commons - cli " / > <nl> < dependency groupId = " commons - codec " artifactId = " commons - codec " / > <nl> - < dependency groupId = " commons - lang " artifactId = " commons - lang " / > <nl> + < dependency groupId = " org . apache . commons " artifactId = " commons - lang3 " / > <nl> < dependency groupId = " com . googlecode . concurrentlinkedhashmap " artifactId = " concurrentlinkedhashmap - lru " / > <nl> < dependency groupId = " org . antlr " artifactId = " antlr " / > <nl> < dependency groupId = " org . slf4j " artifactId = " slf4j - api " / > <nl> @ @ - 479 , 7 + 479 , 7 @ @ <nl> artifactId = " cassandra - parent " <nl> version = " $ { version } " / > <nl> < scm connection = " $ { scm . connection } " developerConnection = " $ { scm . developerConnection } " url = " $ { scm . url } " / > <nl> - < dependency groupId = " commons - lang " artifactId = " commons - lang " / > <nl> + < dependency groupId = " org . apache . commons " artifactId = " commons - lang3 " / > <nl> < dependency groupId = " org . slf4j " artifactId = " slf4j - api " / > <nl> < dependency groupId = " org . apache . thrift " artifactId = " libthrift " / > <nl> < / artifact : pom >

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 1851e62 . . 65efebc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 3 , 6 + 3 , 7 @ @ 
 * nodetool stopdaemon errors out ( CASSANDRA - 13030 ) 
 * Tables in system _ distributed should not use gcgs of 0 ( CASSANDRA - 12954 ) 
 * Fix primary index calculation for SASI ( CASSANDRA - 12910 ) 
 + * More fixes to the TokenAllocator ( CASSANDRA - 12990 ) 
 * NoReplicationTokenAllocator should work with zero replication factor ( CASSANDRA - 12983 ) 
 Merged from 3 . 0 : 
 * Fix handling of partition with partition - level deletion plus 
 diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 index 36824a1 . . 15d7868 100644 
 - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 @ @ - 35 , 12 + 35 , 14 @ @ import org . slf4j . LoggerFactory ; 
 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . exceptions . ConfigurationException ; 
 + import org . apache . cassandra . gms . Gossiper ; 
 import org . apache . cassandra . locator . AbstractReplicationStrategy ; 
 import org . apache . cassandra . locator . IEndpointSnitch ; 
 import org . apache . cassandra . locator . NetworkTopologyStrategy ; 
 import org . apache . cassandra . locator . SimpleStrategy ; 
 import org . apache . cassandra . locator . TokenMetadata ; 
 import org . apache . cassandra . locator . TokenMetadata . Topology ; 
 + import org . apache . cassandra . utils . FBUtilities ; 
 
 public class TokenAllocation 
 { 
 @ @ - 51 , 6 + 53 , 9 @ @ public class TokenAllocation 
 final InetAddress endpoint , 
 int numTokens ) 
 { 
 + if ( ! FBUtilities . getBroadcastAddress ( ) . equals ( InetAddress . getLoopbackAddress ( ) ) ) 
 + Gossiper . waitToSettle ( ) ; 
 + 
 TokenMetadata tokenMetadataCopy = tokenMetadata . cloneOnlyTokenMap ( ) ; 
 StrategyAdapter strategy = getStrategy ( tokenMetadataCopy , rs , endpoint ) ; 
 Collection < Token > tokens = create ( tokenMetadata , strategy ) . addUnit ( endpoint , numTokens ) ; 
 @ @ - 198 , 6 + 203 , 31 @ @ public class TokenAllocation 
 final String dc = snitch . getDatacenter ( endpoint ) ; 
 final int replicas = rs . getReplicationFactor ( dc ) ; 
 
 + if ( replicas = = 0 | | replicas = = 1 ) 
 + { 
 + / / No replication , each node is treated as separate . 
 + return new StrategyAdapter ( ) 
 + { 
 + @ Override 
 + public int replicas ( ) 
 + { 
 + return 1 ; 
 + } 
 + 
 + @ Override 
 + public Object getGroup ( InetAddress unit ) 
 + { 
 + return unit ; 
 + } 
 + 
 + @ Override 
 + public boolean inAllocationRing ( InetAddress other ) 
 + { 
 + return dc . equals ( snitch . getDatacenter ( other ) ) ; 
 + } 
 + } ; 
 + } 
 + 
 Topology topology = tokenMetadata . getTopology ( ) ; 
 int racks = topology . getDatacenterRacks ( ) . get ( dc ) . asMap ( ) . size ( ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java 
 index d20de8f . . 58acb56 100644 
 - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java 
 + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocatorFactory . java 
 @ @ - 34 , 7 + 34 , 7 @ @ public class TokenAllocatorFactory 
 ReplicationStrategy < InetAddress > strategy , 
 IPartitioner partitioner ) 
 { 
 - if ( strategy . replicas ( ) = = 1 | | strategy . replicas ( ) = = 0 ) 
 + if ( strategy . replicas ( ) = = 1 ) 
 { 
 logger . info ( " Using NoReplicationTokenAllocator . " ) ; 
 return new NoReplicationTokenAllocator < > ( sortedTokens , strategy , partitioner ) ; 
 diff - - git a / src / java / org / apache / cassandra / gms / Gossiper . java b / src / java / org / apache / cassandra / gms / Gossiper . java 
 index 7f0f85b . . ebfd66d 100644 
 - - - a / src / java / org / apache / cassandra / gms / Gossiper . java 
 + + + b / src / java / org / apache / cassandra / gms / Gossiper . java 
 @ @ - 1614 , 4 + 1614 , 49 @ @ public class Gossiper implements IFailureDetectionEventListener , GossiperMBean 
 return null ; 
 } 
 
 + public static void waitToSettle ( ) 
 + { 
 + int forceAfter = Integer . getInteger ( " cassandra . skip _ wait _ for _ gossip _ to _ settle " , - 1 ) ; 
 + if ( forceAfter = = 0 ) 
 + { 
 + return ; 
 + } 
 + final int GOSSIP _ SETTLE _ MIN _ WAIT _ MS = 5000 ; 
 + final int GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS = 1000 ; 
 + final int GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED = 3 ; 
 + 
 + logger . info ( " Waiting for gossip to settle . . . " ) ; 
 + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ MIN _ WAIT _ MS , TimeUnit . MILLISECONDS ) ; 
 + int totalPolls = 0 ; 
 + int numOkay = 0 ; 
 + int epSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; 
 + while ( numOkay < GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) 
 + { 
 + Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS , TimeUnit . MILLISECONDS ) ; 
 + int currentSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; 
 + totalPolls + + ; 
 + if ( currentSize = = epSize ) 
 + { 
 + logger . debug ( " Gossip looks settled . " ) ; 
 + numOkay + + ; 
 + } 
 + else 
 + { 
 + logger . info ( " Gossip not settled after { } polls . " , totalPolls ) ; 
 + numOkay = 0 ; 
 + } 
 + epSize = currentSize ; 
 + if ( forceAfter > 0 & & totalPolls > forceAfter ) 
 + { 
 + logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip total polls : { } " , 
 + totalPolls ) ; 
 + break ; 
 + } 
 + } 
 + if ( totalPolls > GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) 
 + logger . info ( " Gossip settled after { } extra polls ; proceeding " , totalPolls - GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) ; 
 + else 
 + logger . info ( " No gossip backlog ; proceeding " ) ; 
 + } 
 + 
 } 
 diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 5a97dfe . . 851330b 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 42 , 7 + 42 , 6 @ @ import com . codahale . metrics . jvm . MemoryUsageGaugeSet ; 
 import com . google . common . annotations . VisibleForTesting ; 
 import com . google . common . util . concurrent . Futures ; 
 import com . google . common . util . concurrent . ListenableFuture ; 
 - import com . google . common . util . concurrent . Uninterruptibles ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 412 , 7 + 411 , 7 @ @ public class CassandraDaemon 
 ScheduledExecutors . optionalTasks . schedule ( viewRebuild , StorageService . RING _ DELAY , TimeUnit . MILLISECONDS ) ; 
 
 if ( ! FBUtilities . getBroadcastAddress ( ) . equals ( InetAddress . getLoopbackAddress ( ) ) ) 
 - waitForGossipToSettle ( ) ; 
 + Gossiper . waitToSettle ( ) ; 
 
 / / schedule periodic background compaction task submission . this is simply a backstop against compactions stalling 
 / / due to scheduling errors or race conditions 
 @ @ - 680 , 51 + 679 , 6 @ @ public class CassandraDaemon 
 } 
 } 
 
 - private void waitForGossipToSettle ( ) 
 - { 
 - int forceAfter = Integer . getInteger ( " cassandra . skip _ wait _ for _ gossip _ to _ settle " , - 1 ) ; 
 - if ( forceAfter = = 0 ) 
 - { 
 - return ; 
 - } 
 - final int GOSSIP _ SETTLE _ MIN _ WAIT _ MS = 5000 ; 
 - final int GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS = 1000 ; 
 - final int GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED = 3 ; 
 - 
 - logger . info ( " Waiting for gossip to settle before accepting client requests . . . " ) ; 
 - Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ MIN _ WAIT _ MS , TimeUnit . MILLISECONDS ) ; 
 - int totalPolls = 0 ; 
 - int numOkay = 0 ; 
 - int epSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; 
 - while ( numOkay < GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) 
 - { 
 - Uninterruptibles . sleepUninterruptibly ( GOSSIP _ SETTLE _ POLL _ INTERVAL _ MS , TimeUnit . MILLISECONDS ) ; 
 - int currentSize = Gossiper . instance . getEndpointStates ( ) . size ( ) ; 
 - totalPolls + + ; 
 - if ( currentSize = = epSize ) 
 - { 
 - logger . debug ( " Gossip looks settled . " ) ; 
 - numOkay + + ; 
 - } 
 - else 
 - { 
 - logger . info ( " Gossip not settled after { } polls . " , totalPolls ) ; 
 - numOkay = 0 ; 
 - } 
 - epSize = currentSize ; 
 - if ( forceAfter > 0 & & totalPolls > forceAfter ) 
 - { 
 - logger . warn ( " Gossip not settled but startup forced by cassandra . skip _ wait _ for _ gossip _ to _ settle . Gossip total polls : { } " , 
 - totalPolls ) ; 
 - break ; 
 - } 
 - } 
 - if ( totalPolls > GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) 
 - logger . info ( " Gossip settled after { } extra polls ; proceeding " , totalPolls - GOSSIP _ SETTLE _ POLL _ SUCCESSES _ REQUIRED ) ; 
 - else 
 - logger . info ( " No gossip backlog ; proceeding " ) ; 
 - } 
 - 
 public static void stop ( String [ ] args ) 
 { 
 instance . deactivate ( ) ;

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 4d8ae14 . . 254cc2d 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 340 , 7 + 340 , 7 @ @ 
 < dependency groupId = " com . google . guava " artifactId = " guava " version = " 13 . 0 . 1 " / > 
 < dependency groupId = " commons - cli " artifactId = " commons - cli " version = " 1 . 1 " / > 
 < dependency groupId = " commons - codec " artifactId = " commons - codec " version = " 1 . 2 " / > 
 - < dependency groupId = " commons - lang " artifactId = " commons - lang " version = " 3 . 1 " / > 
 + < dependency groupId = " org . apache . commons " artifactId = " commons - lang3 " version = " 3 . 1 " / > 
 < dependency groupId = " com . googlecode . concurrentlinkedhashmap " artifactId = " concurrentlinkedhashmap - lru " version = " 1 . 3 " / > 
 < dependency groupId = " org . antlr " artifactId = " antlr " version = " 3 . 2 " / > 
 < dependency groupId = " org . slf4j " artifactId = " slf4j - api " version = " 1 . 7 . 2 " / > 
 @ @ - 438 , 7 + 438 , 7 @ @ 
 < dependency groupId = " com . google . guava " artifactId = " guava " / > 
 < dependency groupId = " commons - cli " artifactId = " commons - cli " / > 
 < dependency groupId = " commons - codec " artifactId = " commons - codec " / > 
 - < dependency groupId = " commons - lang " artifactId = " commons - lang " / > 
 + < dependency groupId = " org . apache . commons " artifactId = " commons - lang3 " / > 
 < dependency groupId = " com . googlecode . concurrentlinkedhashmap " artifactId = " concurrentlinkedhashmap - lru " / > 
 < dependency groupId = " org . antlr " artifactId = " antlr " / > 
 < dependency groupId = " org . slf4j " artifactId = " slf4j - api " / > 
 @ @ - 479 , 7 + 479 , 7 @ @ 
 artifactId = " cassandra - parent " 
 version = " $ { version } " / > 
 < scm connection = " $ { scm . connection } " developerConnection = " $ { scm . developerConnection } " url = " $ { scm . url } " / > 
 - < dependency groupId = " commons - lang " artifactId = " commons - lang " / > 
 + < dependency groupId = " org . apache . commons " artifactId = " commons - lang3 " / > 
 < dependency groupId = " org . slf4j " artifactId = " slf4j - api " / > 
 < dependency groupId = " org . apache . thrift " artifactId = " libthrift " / > 
 < / artifact : pom >
