BLEU SCORE: 0.03283637368030199

TEST MSG: Workaround Netty bug by not use CompositeByteBuf
GENERATED MSG: Expose connected thrift + native client counts

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> index 5c88cb1 . . 7c85f81 100644 <nl> - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> import com . addthis . metrics . reporter . config . ReporterConfig ; <nl> - import io . netty . util . internal . PlatformDependent ; <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; <nl> import org . apache . cassandra . concurrent . Stage ; <nl> import org . apache . cassandra . concurrent . StageManager ; <nl> @ @ - 70 , 14 + 69 , 6 @ @ import org . apache . cassandra . utils . Pair ; <nl> * / <nl> public class CassandraDaemon <nl> { <nl> - <nl> - / / Workaround for netty issue <nl> - static <nl> - { <nl> - System . setProperty ( " io . netty . noUnsafe " , " true " ) ; <nl> - assert ! PlatformDependent . hasUnsafe ( ) ; <nl> - } <nl> - <nl> public static final String MBEAN _ NAME = " org . apache . cassandra . db : type = NativeAccess " ; <nl> <nl> / / Have a dedicated thread to call exit to avoid deadlock in the case where the thread that wants to invoke exit <nl> diff - - git a / src / java / org / apache / cassandra / transport / Frame . java b / src / java / org / apache / cassandra / transport / Frame . java <nl> index 7ca1115 . . 01bee10 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Frame . java <nl> + + + b / src / java / org / apache / cassandra / transport / Frame . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import java . util . EnumSet ; <nl> import java . util . List ; <nl> <nl> import io . netty . buffer . ByteBuf ; <nl> - import io . netty . buffer . Unpooled ; <nl> import io . netty . channel . * ; <nl> import io . netty . handler . codec . ByteToMessageDecoder ; <nl> import io . netty . handler . codec . MessageToMessageDecoder ; <nl> @ @ - 296 , 7 + 295 , 8 @ @ public class Frame <nl> header . writeByte ( type . opcode ) ; <nl> header . writeInt ( frame . body . readableBytes ( ) ) ; <nl> <nl> - results . add ( Unpooled . wrappedBuffer ( header , frame . body ) ) ; <nl> + results . add ( header ) ; <nl> + results . add ( frame . body ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 6a7c3fe . . 1590dd0 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 34 , 6 + 34 , 7 @ @ Merged from 1 . 2 : <nl> * Fix fat client schema pull NPE ( CASSANDRA - 6089 ) <nl> * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) <nl> * Fix skipping columns with multiple slices ( CASSANDRA - 6119 ) <nl> + * Expose connected thrift + native client counts ( CASSANDRA - 5084 ) <nl> <nl> <nl> 2 . 0 . 1 <nl> diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> new file mode 100644 <nl> index 0000000 . . cb10ad5 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + package org . apache . cassandra . metrics ; <nl> + <nl> + import java . util . concurrent . Callable ; <nl> + <nl> + import com . yammer . metrics . Metrics ; <nl> + import com . yammer . metrics . core . Gauge ; <nl> + <nl> + public class ClientMetrics <nl> + { <nl> + private static final MetricNameFactory factory = new DefaultNameFactory ( " Client " ) ; <nl> + <nl> + public static final ClientMetrics instance = new ClientMetrics ( ) ; <nl> + <nl> + private ClientMetrics ( ) <nl> + { <nl> + } <nl> + <nl> + public void addCounter ( String name , final Callable < Integer > provider ) <nl> + { <nl> + Metrics . newGauge ( factory . createMetricName ( name ) , new Gauge < Integer > ( ) <nl> + { <nl> + public Integer value ( ) <nl> + { <nl> + try <nl> + { <nl> + return provider . call ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> index 3d77743 . . 12176b7 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . UnsupportedEncodingException ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . charset . CharacterCodingException ; <nl> import java . util . * ; <nl> + import java . util . concurrent . Callable ; <nl> import java . util . concurrent . TimeoutException ; <nl> import java . util . zip . DataFormatException ; <nl> import java . util . zip . Inflater ; <nl> @ @ - 50 , 13 + 51 , 14 @ @ import org . apache . cassandra . db . filter . IDiskAtomFilter ; <nl> import org . apache . cassandra . db . filter . NamesQueryFilter ; <nl> import org . apache . cassandra . db . filter . SliceQueryFilter ; <nl> import org . apache . cassandra . db . marshal . CompositeType ; <nl> - import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . db . marshal . TimeUUIDType ; <nl> import org . apache . cassandra . dht . * ; <nl> import org . apache . cassandra . exceptions . * ; <nl> import org . apache . cassandra . io . util . DataOutputBuffer ; <nl> import org . apache . cassandra . locator . DynamicEndpointSnitch ; <nl> + import org . apache . cassandra . metrics . ClientMetrics ; <nl> import org . apache . cassandra . scheduler . IRequestScheduler ; <nl> + import org . apache . cassandra . serializers . MarshalException ; <nl> import org . apache . cassandra . service . ClientState ; <nl> import org . apache . cassandra . service . MigrationManager ; <nl> import org . apache . cassandra . service . StorageProxy ; <nl> @ @ - 87 , 6 + 89 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> public CassandraServer ( ) <nl> { <nl> requestScheduler = DatabaseDescriptor . getRequestScheduler ( ) ; <nl> + registerMetrics ( ) ; <nl> } <nl> <nl> public ThriftClientState state ( ) <nl> @ @ - 1958 , 7 + 1961 , 7 @ @ public class CassandraServer implements Cassandra . Iface <nl> try <nl> { <nl> ThriftClientState cState = state ( ) ; <nl> - String queryString = uncompress ( query , compression ) ; <nl> + String queryString = uncompress ( query , compression ) ; <nl> return QueryProcessor . prepare ( queryString , cState ) ; <nl> } <nl> catch ( RequestValidationException e ) <nl> @ @ - 2118 , 5 + 2121 , 16 @ @ public class CassandraServer implements Cassandra . Iface <nl> return false ; <nl> } <nl> <nl> + private void registerMetrics ( ) <nl> + { <nl> + ClientMetrics . instance . addCounter ( " connectedThriftClients " , new Callable < Integer > ( ) <nl> + { <nl> + @ Override <nl> + public Integer call ( ) throws Exception <nl> + { <nl> + return ThriftSessionManager . instance . getConnectedClients ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> / / main method moved to CassandraDaemon <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java <nl> index daf2f9c . . ed3df6d 100644 <nl> - - - a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java <nl> + + + b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java <nl> @ @ - 73 , 4 + 73 , 9 @ @ public class ThriftSessionManager <nl> if ( logger . isTraceEnabled ( ) ) <nl> logger . trace ( " ClientState removed for socket addr { } " , socket ) ; <nl> } <nl> + <nl> + public int getConnectedClients ( ) <nl> + { <nl> + return activeSocketSessions . size ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java <nl> index 5ac4a70 . . bd403fe 100644 <nl> - - - a / src / java / org / apache / cassandra / transport / Server . java <nl> + + + b / src / java / org / apache / cassandra / transport / Server . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; <nl> import java . net . InetSocketAddress ; <nl> import java . net . UnknownHostException ; <nl> import java . util . EnumMap ; <nl> + import java . util . concurrent . Callable ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> import javax . net . ssl . SSLContext ; <nl> @ @ - 34 , 19 + 35 , 12 @ @ import org . apache . cassandra . auth . IAuthenticator ; <nl> import org . apache . cassandra . auth . ISaslAwareAuthenticator ; <nl> import org . apache . cassandra . config . DatabaseDescriptor ; <nl> import org . apache . cassandra . config . EncryptionOptions ; <nl> + import org . apache . cassandra . metrics . ClientMetrics ; <nl> import org . apache . cassandra . security . SSLFactory ; <nl> - import org . apache . cassandra . service . CassandraDaemon ; <nl> - import org . apache . cassandra . service . IEndpointLifecycleSubscriber ; <nl> - import org . apache . cassandra . service . IMigrationListener ; <nl> - import org . apache . cassandra . service . MigrationManager ; <nl> - import org . apache . cassandra . service . StorageService ; <nl> + import org . apache . cassandra . service . * ; <nl> import org . apache . cassandra . transport . messages . EventMessage ; <nl> import org . jboss . netty . bootstrap . ServerBootstrap ; <nl> - import org . jboss . netty . channel . Channel ; <nl> - import org . jboss . netty . channel . ChannelFactory ; <nl> - import org . jboss . netty . channel . ChannelPipeline ; <nl> - import org . jboss . netty . channel . ChannelPipelineFactory ; <nl> - import org . jboss . netty . channel . Channels ; <nl> + import org . jboss . netty . channel . * ; <nl> import org . jboss . netty . channel . group . ChannelGroup ; <nl> import org . jboss . netty . channel . group . DefaultChannelGroup ; <nl> import org . jboss . netty . channel . socket . nio . NioServerSocketChannelFactory ; <nl> @ @ - 89 , 6 + 83 , 7 @ @ public class Server implements CassandraDaemon . Server <nl> EventNotifier notifier = new EventNotifier ( this ) ; <nl> StorageService . instance . register ( notifier ) ; <nl> MigrationManager . instance . register ( notifier ) ; <nl> + registerMetrics ( ) ; <nl> } <nl> <nl> public Server ( String hostname , int port ) <nl> @ @ - 163 , 6 + 158 , 18 @ @ public class Server implements CassandraDaemon . Server <nl> connectionTracker . allChannels . add ( channel ) ; <nl> } <nl> <nl> + private void registerMetrics ( ) <nl> + { <nl> + ClientMetrics . instance . addCounter ( " connectedNativeClients " , new Callable < Integer > ( ) <nl> + { <nl> + @ Override <nl> + public Integer call ( ) throws Exception <nl> + { <nl> + return connectionTracker . getConnectedClients ( ) ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> private void close ( ) <nl> { <nl> / / Close opened connections <nl> @ @ - 211 , 6 + 218 , 16 @ @ public class Server implements CassandraDaemon . Server <nl> { <nl> allChannels . close ( ) . awaitUninterruptibly ( ) ; <nl> } <nl> + <nl> + public int getConnectedClients ( ) <nl> + { <nl> + / * <nl> + - When server is running : allChannels contains all clients ' connections ( channels ) <nl> + plus one additional channel used for the server ' s own bootstrap . <nl> + - When server is stopped : the size is 0 <nl> + * / <nl> + return allChannels . size ( ) ! = 0 ? allChannels . size ( ) - 1 : 0 ; <nl> + } <nl> } <nl> <nl> private static class PipelineFactory implements ChannelPipelineFactory

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / service / CassandraDaemon . java b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 index 5c88cb1 . . 7c85f81 100644 
 - - - a / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 + + + b / src / java / org / apache / cassandra / service / CassandraDaemon . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 import com . addthis . metrics . reporter . config . ReporterConfig ; 
 - import io . netty . util . internal . PlatformDependent ; 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutor ; 
 import org . apache . cassandra . concurrent . Stage ; 
 import org . apache . cassandra . concurrent . StageManager ; 
 @ @ - 70 , 14 + 69 , 6 @ @ import org . apache . cassandra . utils . Pair ; 
 * / 
 public class CassandraDaemon 
 { 
 - 
 - / / Workaround for netty issue 
 - static 
 - { 
 - System . setProperty ( " io . netty . noUnsafe " , " true " ) ; 
 - assert ! PlatformDependent . hasUnsafe ( ) ; 
 - } 
 - 
 public static final String MBEAN _ NAME = " org . apache . cassandra . db : type = NativeAccess " ; 
 
 / / Have a dedicated thread to call exit to avoid deadlock in the case where the thread that wants to invoke exit 
 diff - - git a / src / java / org / apache / cassandra / transport / Frame . java b / src / java / org / apache / cassandra / transport / Frame . java 
 index 7ca1115 . . 01bee10 100644 
 - - - a / src / java / org / apache / cassandra / transport / Frame . java 
 + + + b / src / java / org / apache / cassandra / transport / Frame . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import java . util . EnumSet ; 
 import java . util . List ; 
 
 import io . netty . buffer . ByteBuf ; 
 - import io . netty . buffer . Unpooled ; 
 import io . netty . channel . * ; 
 import io . netty . handler . codec . ByteToMessageDecoder ; 
 import io . netty . handler . codec . MessageToMessageDecoder ; 
 @ @ - 296 , 7 + 295 , 8 @ @ public class Frame 
 header . writeByte ( type . opcode ) ; 
 header . writeInt ( frame . body . readableBytes ( ) ) ; 
 
 - results . add ( Unpooled . wrappedBuffer ( header , frame . body ) ) ; 
 + results . add ( header ) ; 
 + results . add ( frame . body ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 6a7c3fe . . 1590dd0 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 34 , 6 + 34 , 7 @ @ Merged from 1 . 2 : 
 * Fix fat client schema pull NPE ( CASSANDRA - 6089 ) 
 * Fix memtable flushing for indexed tables ( CASSANDRA - 6112 ) 
 * Fix skipping columns with multiple slices ( CASSANDRA - 6119 ) 
 + * Expose connected thrift + native client counts ( CASSANDRA - 5084 ) 
 
 
 2 . 0 . 1 
 diff - - git a / src / java / org / apache / cassandra / metrics / ClientMetrics . java b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 new file mode 100644 
 index 0000000 . . cb10ad5 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / metrics / ClientMetrics . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + package org . apache . cassandra . metrics ; 
 + 
 + import java . util . concurrent . Callable ; 
 + 
 + import com . yammer . metrics . Metrics ; 
 + import com . yammer . metrics . core . Gauge ; 
 + 
 + public class ClientMetrics 
 + { 
 + private static final MetricNameFactory factory = new DefaultNameFactory ( " Client " ) ; 
 + 
 + public static final ClientMetrics instance = new ClientMetrics ( ) ; 
 + 
 + private ClientMetrics ( ) 
 + { 
 + } 
 + 
 + public void addCounter ( String name , final Callable < Integer > provider ) 
 + { 
 + Metrics . newGauge ( factory . createMetricName ( name ) , new Gauge < Integer > ( ) 
 + { 
 + public Integer value ( ) 
 + { 
 + try 
 + { 
 + return provider . call ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + } ) ; 
 + } 
 + } 
 diff - - git a / src / java / org / apache / cassandra / thrift / CassandraServer . java b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 index 3d77743 . . 12176b7 100644 
 - - - a / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 + + + b / src / java / org / apache / cassandra / thrift / CassandraServer . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . UnsupportedEncodingException ; 
 import java . nio . ByteBuffer ; 
 import java . nio . charset . CharacterCodingException ; 
 import java . util . * ; 
 + import java . util . concurrent . Callable ; 
 import java . util . concurrent . TimeoutException ; 
 import java . util . zip . DataFormatException ; 
 import java . util . zip . Inflater ; 
 @ @ - 50 , 13 + 51 , 14 @ @ import org . apache . cassandra . db . filter . IDiskAtomFilter ; 
 import org . apache . cassandra . db . filter . NamesQueryFilter ; 
 import org . apache . cassandra . db . filter . SliceQueryFilter ; 
 import org . apache . cassandra . db . marshal . CompositeType ; 
 - import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . db . marshal . TimeUUIDType ; 
 import org . apache . cassandra . dht . * ; 
 import org . apache . cassandra . exceptions . * ; 
 import org . apache . cassandra . io . util . DataOutputBuffer ; 
 import org . apache . cassandra . locator . DynamicEndpointSnitch ; 
 + import org . apache . cassandra . metrics . ClientMetrics ; 
 import org . apache . cassandra . scheduler . IRequestScheduler ; 
 + import org . apache . cassandra . serializers . MarshalException ; 
 import org . apache . cassandra . service . ClientState ; 
 import org . apache . cassandra . service . MigrationManager ; 
 import org . apache . cassandra . service . StorageProxy ; 
 @ @ - 87 , 6 + 89 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 public CassandraServer ( ) 
 { 
 requestScheduler = DatabaseDescriptor . getRequestScheduler ( ) ; 
 + registerMetrics ( ) ; 
 } 
 
 public ThriftClientState state ( ) 
 @ @ - 1958 , 7 + 1961 , 7 @ @ public class CassandraServer implements Cassandra . Iface 
 try 
 { 
 ThriftClientState cState = state ( ) ; 
 - String queryString = uncompress ( query , compression ) ; 
 + String queryString = uncompress ( query , compression ) ; 
 return QueryProcessor . prepare ( queryString , cState ) ; 
 } 
 catch ( RequestValidationException e ) 
 @ @ - 2118 , 5 + 2121 , 16 @ @ public class CassandraServer implements Cassandra . Iface 
 return false ; 
 } 
 
 + private void registerMetrics ( ) 
 + { 
 + ClientMetrics . instance . addCounter ( " connectedThriftClients " , new Callable < Integer > ( ) 
 + { 
 + @ Override 
 + public Integer call ( ) throws Exception 
 + { 
 + return ThriftSessionManager . instance . getConnectedClients ( ) ; 
 + } 
 + } ) ; 
 + } 
 / / main method moved to CassandraDaemon 
 } 
 diff - - git a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java 
 index daf2f9c . . ed3df6d 100644 
 - - - a / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java 
 + + + b / src / java / org / apache / cassandra / thrift / ThriftSessionManager . java 
 @ @ - 73 , 4 + 73 , 9 @ @ public class ThriftSessionManager 
 if ( logger . isTraceEnabled ( ) ) 
 logger . trace ( " ClientState removed for socket addr { } " , socket ) ; 
 } 
 + 
 + public int getConnectedClients ( ) 
 + { 
 + return activeSocketSessions . size ( ) ; 
 + } 
 } 
 diff - - git a / src / java / org / apache / cassandra / transport / Server . java b / src / java / org / apache / cassandra / transport / Server . java 
 index 5ac4a70 . . bd403fe 100644 
 - - - a / src / java / org / apache / cassandra / transport / Server . java 
 + + + b / src / java / org / apache / cassandra / transport / Server . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . net . InetAddress ; 
 import java . net . InetSocketAddress ; 
 import java . net . UnknownHostException ; 
 import java . util . EnumMap ; 
 + import java . util . concurrent . Callable ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 import javax . net . ssl . SSLContext ; 
 @ @ - 34 , 19 + 35 , 12 @ @ import org . apache . cassandra . auth . IAuthenticator ; 
 import org . apache . cassandra . auth . ISaslAwareAuthenticator ; 
 import org . apache . cassandra . config . DatabaseDescriptor ; 
 import org . apache . cassandra . config . EncryptionOptions ; 
 + import org . apache . cassandra . metrics . ClientMetrics ; 
 import org . apache . cassandra . security . SSLFactory ; 
 - import org . apache . cassandra . service . CassandraDaemon ; 
 - import org . apache . cassandra . service . IEndpointLifecycleSubscriber ; 
 - import org . apache . cassandra . service . IMigrationListener ; 
 - import org . apache . cassandra . service . MigrationManager ; 
 - import org . apache . cassandra . service . StorageService ; 
 + import org . apache . cassandra . service . * ; 
 import org . apache . cassandra . transport . messages . EventMessage ; 
 import org . jboss . netty . bootstrap . ServerBootstrap ; 
 - import org . jboss . netty . channel . Channel ; 
 - import org . jboss . netty . channel . ChannelFactory ; 
 - import org . jboss . netty . channel . ChannelPipeline ; 
 - import org . jboss . netty . channel . ChannelPipelineFactory ; 
 - import org . jboss . netty . channel . Channels ; 
 + import org . jboss . netty . channel . * ; 
 import org . jboss . netty . channel . group . ChannelGroup ; 
 import org . jboss . netty . channel . group . DefaultChannelGroup ; 
 import org . jboss . netty . channel . socket . nio . NioServerSocketChannelFactory ; 
 @ @ - 89 , 6 + 83 , 7 @ @ public class Server implements CassandraDaemon . Server 
 EventNotifier notifier = new EventNotifier ( this ) ; 
 StorageService . instance . register ( notifier ) ; 
 MigrationManager . instance . register ( notifier ) ; 
 + registerMetrics ( ) ; 
 } 
 
 public Server ( String hostname , int port ) 
 @ @ - 163 , 6 + 158 , 18 @ @ public class Server implements CassandraDaemon . Server 
 connectionTracker . allChannels . add ( channel ) ; 
 } 
 
 + private void registerMetrics ( ) 
 + { 
 + ClientMetrics . instance . addCounter ( " connectedNativeClients " , new Callable < Integer > ( ) 
 + { 
 + @ Override 
 + public Integer call ( ) throws Exception 
 + { 
 + return connectionTracker . getConnectedClients ( ) ; 
 + } 
 + } ) ; 
 + } 
 + 
 private void close ( ) 
 { 
 / / Close opened connections 
 @ @ - 211 , 6 + 218 , 16 @ @ public class Server implements CassandraDaemon . Server 
 { 
 allChannels . close ( ) . awaitUninterruptibly ( ) ; 
 } 
 + 
 + public int getConnectedClients ( ) 
 + { 
 + / * 
 + - When server is running : allChannels contains all clients ' connections ( channels ) 
 + plus one additional channel used for the server ' s own bootstrap . 
 + - When server is stopped : the size is 0 
 + * / 
 + return allChannels . size ( ) ! = 0 ? allChannels . size ( ) - 1 : 0 ; 
 + } 
 } 
 
 private static class PipelineFactory implements ChannelPipelineFactory
