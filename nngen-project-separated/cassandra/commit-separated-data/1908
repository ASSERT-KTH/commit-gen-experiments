BLEU SCORE: 0.02383853510228548

TEST MSG: Fix slice size calculation for 2ary index table slices
GENERATED MSG: Correctly handle limits in CompositesSearcher

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 92bf422 . . 45b2b9c 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 6 @ @ <nl> 2 . 0 . 12 : <nl> + * Use more efficient slice size for querying internal secondary <nl> + index tables ( CASSANDRA - 8550 ) <nl> * Fix potentially returning deleted rows with range tombstone ( CASSANDRA - 8558 ) <nl> * Make sure we unmark compacting after scrub / cleanup etc ( CASSANDRA - 8548 ) <nl> * Check for available disk space before starting a compaction ( CASSANDRA - 8562 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> index b978021 . . 9370133 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> @ @ - 107 , 9 + 107 , 8 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> private int limit = filter . currentLimit ( ) ; <nl> private int columnsCount = 0 ; <nl> <nl> - private int meanColumns = Math . max ( index . getIndexCfs ( ) . getMeanColumns ( ) , 1 ) ; <nl> - / / We shouldn ' t fetch only 1 row as this provides buggy paging in case the first row doesn ' t satisfy all clauses <nl> - private int rowsPerQuery = Math . max ( Math . min ( filter . maxRows ( ) , filter . maxColumns ( ) / meanColumns ) , 2 ) ; <nl> + / / We have to fetch at least two rows to avoid breaking paging if the first row doesn ' t satisfy all clauses <nl> + private int indexCellsPerQuery = Math . max ( 2 , Math . min ( filter . maxColumns ( ) , filter . maxRows ( ) ) ) ; <nl> <nl> public boolean needsFiltering ( ) <nl> { <nl> @ @ - 144 , 9 + 143 , 9 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> <nl> if ( indexColumns = = null | | indexColumns . isEmpty ( ) ) <nl> { <nl> - if ( columnsRead < rowsPerQuery ) <nl> + if ( columnsRead < indexCellsPerQuery ) <nl> { <nl> - logger . trace ( " Read only { } ( < { } ) last page through , must be done " , columnsRead , rowsPerQuery ) ; <nl> + logger . trace ( " Read only { } ( < { } ) last page through , must be done " , columnsRead , indexCellsPerQuery ) ; <nl> return makeReturn ( currentKey , data ) ; <nl> } <nl> <nl> @ @ - 159 , 7 + 158 , 7 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> lastSeenPrefix , <nl> endPrefix , <nl> false , <nl> - rowsPerQuery , <nl> + indexCellsPerQuery , <nl> filter . timestamp ) ; <nl> ColumnFamily indexRow = index . getIndexCfs ( ) . getColumnFamily ( indexFilter ) ; <nl> if ( indexRow = = null | | indexRow . getColumnCount ( ) = = 0 )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> index 011839e . . 0c2cfbc 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java <nl> @ @ - 138 , 7 + 138 , 7 @ @ public class CompositesSearcher extends SecondaryIndexSearcher <nl> { <nl> / / Did we get more columns that needed to respect the user limit ? <nl> / / ( but we still need to return what has been fetched already ) <nl> - if ( columnsCount > limit ) <nl> + if ( columnsCount > = limit ) <nl> return makeReturn ( currentKey , data ) ; <nl> <nl> if ( indexColumns = = null | | indexColumns . isEmpty ( ) )

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 92bf422 . . 45b2b9c 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 6 @ @ 
 2 . 0 . 12 : 
 + * Use more efficient slice size for querying internal secondary 
 + index tables ( CASSANDRA - 8550 ) 
 * Fix potentially returning deleted rows with range tombstone ( CASSANDRA - 8558 ) 
 * Make sure we unmark compacting after scrub / cleanup etc ( CASSANDRA - 8548 ) 
 * Check for available disk space before starting a compaction ( CASSANDRA - 8562 ) 
 diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 index b978021 . . 9370133 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 @ @ - 107 , 9 + 107 , 8 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 private int limit = filter . currentLimit ( ) ; 
 private int columnsCount = 0 ; 
 
 - private int meanColumns = Math . max ( index . getIndexCfs ( ) . getMeanColumns ( ) , 1 ) ; 
 - / / We shouldn ' t fetch only 1 row as this provides buggy paging in case the first row doesn ' t satisfy all clauses 
 - private int rowsPerQuery = Math . max ( Math . min ( filter . maxRows ( ) , filter . maxColumns ( ) / meanColumns ) , 2 ) ; 
 + / / We have to fetch at least two rows to avoid breaking paging if the first row doesn ' t satisfy all clauses 
 + private int indexCellsPerQuery = Math . max ( 2 , Math . min ( filter . maxColumns ( ) , filter . maxRows ( ) ) ) ; 
 
 public boolean needsFiltering ( ) 
 { 
 @ @ - 144 , 9 + 143 , 9 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 
 if ( indexColumns = = null | | indexColumns . isEmpty ( ) ) 
 { 
 - if ( columnsRead < rowsPerQuery ) 
 + if ( columnsRead < indexCellsPerQuery ) 
 { 
 - logger . trace ( " Read only { } ( < { } ) last page through , must be done " , columnsRead , rowsPerQuery ) ; 
 + logger . trace ( " Read only { } ( < { } ) last page through , must be done " , columnsRead , indexCellsPerQuery ) ; 
 return makeReturn ( currentKey , data ) ; 
 } 
 
 @ @ - 159 , 7 + 158 , 7 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 lastSeenPrefix , 
 endPrefix , 
 false , 
 - rowsPerQuery , 
 + indexCellsPerQuery , 
 filter . timestamp ) ; 
 ColumnFamily indexRow = index . getIndexCfs ( ) . getColumnFamily ( indexFilter ) ; 
 if ( indexRow = = null | | indexRow . getColumnCount ( ) = = 0 )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 index 011839e . . 0c2cfbc 100644 
 - - - a / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 + + + b / src / java / org / apache / cassandra / db / index / composites / CompositesSearcher . java 
 @ @ - 138 , 7 + 138 , 7 @ @ public class CompositesSearcher extends SecondaryIndexSearcher 
 { 
 / / Did we get more columns that needed to respect the user limit ? 
 / / ( but we still need to return what has been fetched already ) 
 - if ( columnsCount > limit ) 
 + if ( columnsCount > = limit ) 
 return makeReturn ( currentKey , data ) ; 
 
 if ( indexColumns = = null | | indexColumns . isEmpty ( ) )
