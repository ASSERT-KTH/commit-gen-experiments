BLEU SCORE: 0.06567274736060397

TEST MSG: Allow JMX over SSL directly from nodetool
GENERATED MSG: merge from 1 . 0

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index e8ac3e7 . . fded5fc 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 1 . 7 <nl> + * Allow JMX over SSL directly from nodetool ( CASSANDRA - 9090 ) <nl> * Fix incorrect result for IN queries where column not found ( CASSANDRA - 9540 ) <nl> * ColumnFamilyStore . selectAndReference may block during compaction ( CASSANDRA - 9637 ) <nl> * Fix bug in cardinality check when compacting ( CASSANDRA - 9580 ) <nl> diff - - git a / bin / nodetool b / bin / nodetool <nl> index e81c59b . . d211459 100755 <nl> - - - a / bin / nodetool <nl> + + + b / bin / nodetool <nl> @ @ - 56 , 6 + 56 , 8 @ @ fi <nl> # JMX Port passed via cmd line args ( - p 9999 / - - port 9999 / - - port = 9999 ) <nl> # should override the value from cassandra - env . sh <nl> ARGS = " " <nl> + JVM _ ARGS = " " <nl> + SSL _ FILE = $ HOME / . cassandra / nodetool - ssl . properties <nl> while true <nl> do <nl> if [ ! $ 1 ] ; then break ; fi <nl> @ @ - 71 , 6 + 73 , 16 @ @ do <nl> JMX _ PORT = $ 2 <nl> shift <nl> ; ; <nl> + - - ssl ) <nl> + if [ - f $ SSL _ FILE ] <nl> + then <nl> + SSL _ ARGS = $ ( cat $ SSL _ FILE | tr ' \ n ' ' ' ) <nl> + fi <nl> + JVM _ ARGS = " $ JVM _ ARGS - Dssl . enable = true $ SSL _ ARGS " <nl> + ; ; <nl> + - D * ) <nl> + JVM _ ARGS = " $ JVM _ ARGS $ 1 " <nl> + ; ; <nl> * ) <nl> ARGS = " $ ARGS $ 1 " <nl> ; ; <nl> @ @ - 91 , 6 + 103 , 7 @ @ esac <nl> - Dcassandra . storagedir = " $ cassandra _ storagedir " \ <nl> - Dlogback . configurationFile = logback - tools . xml \ <nl> - Dstorage - config = " $ CASSANDRA _ CONF " \ <nl> + $ JVM _ ARGS \ <nl> org . apache . cassandra . tools . NodeTool - p $ JMX _ PORT $ ARGS <nl> <nl> # vi : ai sw = 4 ts = 4 tw = 0 et <nl> diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh <nl> index 2e22f7f . . 73217bb 100644 <nl> - - - a / conf / cassandra - env . sh <nl> + + + b / conf / cassandra - env . sh <nl> @ @ - 286 , 6 + 286 , 14 @ @ else <nl> JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " <nl> JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = true " <nl> JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = / etc / cassandra / jmxremote . password " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . keyStore = / path / to / keystore " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . keyStorePassword = < keystore - password > " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . trustStore = / path / to / truststore " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . trustStorePassword = < truststore - password > " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl . need . client . auth = true " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . registry . ssl = true " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl . enabled . protocols = < enabled - protocols > " <nl> + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl . enabled . cipher . suites = < enabled - cipher - suites > " <nl> fi <nl> <nl> # To use mx4j , an HTML interface for JMX , add mx4j - tools . jar to the lib / <nl> diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> index da1fca0 . . d3bce4d 100644 <nl> - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java <nl> @ @ - 27 , 6 + 27 , 8 @ @ import java . lang . management . MemoryUsage ; <nl> import java . lang . management . RuntimeMXBean ; <nl> import java . net . InetAddress ; <nl> import java . net . UnknownHostException ; <nl> + import java . rmi . server . RMIClientSocketFactory ; <nl> + import java . rmi . server . RMISocketFactory ; <nl> import java . text . SimpleDateFormat ; <nl> import java . util . AbstractMap ; <nl> import java . util . ArrayList ; <nl> @ @ - 58 , 6 + 60 , 7 @ @ import javax . management . remote . JMXConnectionNotification ; <nl> import javax . management . remote . JMXConnector ; <nl> import javax . management . remote . JMXConnectorFactory ; <nl> import javax . management . remote . JMXServiceURL ; <nl> + import javax . rmi . ssl . SslRMIClientSocketFactory ; <nl> <nl> import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; <nl> import org . apache . cassandra . db . ColumnFamilyStoreMBean ; <nl> @ @ - 182 , 6 + 185 , 9 @ @ public class NodeProbe implements AutoCloseable <nl> String [ ] creds = { username , password } ; <nl> env . put ( JMXConnector . CREDENTIALS , creds ) ; <nl> } <nl> + <nl> + env . put ( " com . sun . jndi . rmi . factory . socket " , getRMIClientSocketFactory ( ) ) ; <nl> + <nl> jmxc = JMXConnectorFactory . connect ( jmxUrl , env ) ; <nl> mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; <nl> <nl> @ @ - 218 , 6 + 224 , 14 @ @ public class NodeProbe implements AutoCloseable <nl> mbeanServerConn , ManagementFactory . RUNTIME _ MXBEAN _ NAME , RuntimeMXBean . class ) ; <nl> } <nl> <nl> + private RMIClientSocketFactory getRMIClientSocketFactory ( ) throws IOException <nl> + { <nl> + if ( Boolean . parseBoolean ( System . getProperty ( " ssl . enable " ) ) ) <nl> + return new SslRMIClientSocketFactory ( ) ; <nl> + else <nl> + return RMISocketFactory . getDefaultSocketFactory ( ) ; <nl> + } <nl> + <nl> public void close ( ) throws IOException <nl> { <nl> jmxc . close ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d518830 . . 52cc2c1 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 29 , 7 + 29 , 7 @ @ <nl> * add scheduler JMX metrics ( CASSANDRA - 2962 ) <nl> * add block level checksum for compressed data ( CASSANDRA - 1717 ) <nl> * make column family backed column map pluggable and introduce unsynchronized <nl> - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) <nl> + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) <nl> * refactoring of the secondary index api ( CASSANDRA - 2982 ) <nl> * make CL > ONE reads wait for digest reconciliation before returning <nl> ( CASSANDRA - 2494 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> index c316a85 . . 71c7213 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java <nl> @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor <nl> this . reversed = reversed ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public AbstractType < ? > getComparator ( ) <nl> { <nl> return comparator ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> index 1239d1c . . 38bc0d7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java <nl> @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer <nl> this . cfm = cfm ; <nl> } <nl> <nl> - public ColumnFamily cloneMeShallow ( ) <nl> + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) <nl> { <nl> - ColumnFamily cf = ColumnFamily . create ( cfm ) ; <nl> + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; <nl> / / since deletion info is immutable , aliasing it is fine <nl> cf . deletionInfo . set ( deletionInfo . get ( ) ) ; <nl> return cf ; <nl> } <nl> <nl> + public ColumnFamily cloneMeShallow ( ) <nl> + { <nl> + return cloneMeShallow ( columns . getFactory ( ) ) ; <nl> + } <nl> + <nl> public AbstractType getSubComparator ( ) <nl> { <nl> IColumnSerializer s = getColumnSerializer ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 0bfd1c5 . . 552d3e9 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> } <nl> <nl> - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> - * tombstones that are no longer relevant . * / <nl> + / * * <nl> + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out <nl> + * tombstones that are no longer relevant . <nl> + * The returned column family won ' t be thread safe . <nl> + * / <nl> ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) <nl> { <nl> / / special case slicing the entire row : <nl> @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; <nl> if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) <nl> { <nl> - ColumnFamily cf = cached . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> if ( sc ! = null ) <nl> cf . addColumn ( sc , HeapAllocator . instance ) ; <nl> return removeDeleted ( cf , gcBefore ) ; <nl> @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> } <nl> <nl> IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; <nl> - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; <nl> + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; <nl> filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; <nl> / / TODO this is necessary because when we collate supercolumns together , we don ' t check <nl> / / their subcolumns for relevance , so we need to do a second prune post facto here . <nl> diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> index 37f5a60 . . 624dec7 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java <nl> @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns <nl> public ISortedColumns cloneMe ( ) ; <nl> <nl> / * * <nl> + * Returns the factory used for this ISortedColumns implementation . <nl> + * / <nl> + public Factory getFactory ( ) ; <nl> + <nl> + / * * <nl> * Adds a column to this column map . <nl> * If a column with the same name is already present in the map , it will <nl> * be replaced by the newly added column . <nl> diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> index cd2488a . . 13a111a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new ThreadSafeSortedColumns ( this ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> index 34e83dc . . 6c3fc42 100644 <nl> - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java <nl> @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp <nl> super ( columns ) ; <nl> } <nl> <nl> + public ISortedColumns . Factory getFactory ( ) <nl> + { <nl> + return factory ( ) ; <nl> + } <nl> + <nl> public ISortedColumns cloneMe ( ) <nl> { <nl> return new TreeMapBackedSortedColumns ( this ) ;

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index e8ac3e7 . . fded5fc 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 1 . 7 
 + * Allow JMX over SSL directly from nodetool ( CASSANDRA - 9090 ) 
 * Fix incorrect result for IN queries where column not found ( CASSANDRA - 9540 ) 
 * ColumnFamilyStore . selectAndReference may block during compaction ( CASSANDRA - 9637 ) 
 * Fix bug in cardinality check when compacting ( CASSANDRA - 9580 ) 
 diff - - git a / bin / nodetool b / bin / nodetool 
 index e81c59b . . d211459 100755 
 - - - a / bin / nodetool 
 + + + b / bin / nodetool 
 @ @ - 56 , 6 + 56 , 8 @ @ fi 
 # JMX Port passed via cmd line args ( - p 9999 / - - port 9999 / - - port = 9999 ) 
 # should override the value from cassandra - env . sh 
 ARGS = " " 
 + JVM _ ARGS = " " 
 + SSL _ FILE = $ HOME / . cassandra / nodetool - ssl . properties 
 while true 
 do 
 if [ ! $ 1 ] ; then break ; fi 
 @ @ - 71 , 6 + 73 , 16 @ @ do 
 JMX _ PORT = $ 2 
 shift 
 ; ; 
 + - - ssl ) 
 + if [ - f $ SSL _ FILE ] 
 + then 
 + SSL _ ARGS = $ ( cat $ SSL _ FILE | tr ' \ n ' ' ' ) 
 + fi 
 + JVM _ ARGS = " $ JVM _ ARGS - Dssl . enable = true $ SSL _ ARGS " 
 + ; ; 
 + - D * ) 
 + JVM _ ARGS = " $ JVM _ ARGS $ 1 " 
 + ; ; 
 * ) 
 ARGS = " $ ARGS $ 1 " 
 ; ; 
 @ @ - 91 , 6 + 103 , 7 @ @ esac 
 - Dcassandra . storagedir = " $ cassandra _ storagedir " \ 
 - Dlogback . configurationFile = logback - tools . xml \ 
 - Dstorage - config = " $ CASSANDRA _ CONF " \ 
 + $ JVM _ ARGS \ 
 org . apache . cassandra . tools . NodeTool - p $ JMX _ PORT $ ARGS 
 
 # vi : ai sw = 4 ts = 4 tw = 0 et 
 diff - - git a / conf / cassandra - env . sh b / conf / cassandra - env . sh 
 index 2e22f7f . . 73217bb 100644 
 - - - a / conf / cassandra - env . sh 
 + + + b / conf / cassandra - env . sh 
 @ @ - 286 , 6 + 286 , 14 @ @ else 
 JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl = false " 
 JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . authenticate = true " 
 JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . password . file = / etc / cassandra / jmxremote . password " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . keyStore = / path / to / keystore " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . keyStorePassword = < keystore - password > " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . trustStore = / path / to / truststore " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Djavax . net . ssl . trustStorePassword = < truststore - password > " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl . need . client . auth = true " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . registry . ssl = true " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl . enabled . protocols = < enabled - protocols > " 
 + # JVM _ OPTS = " $ JVM _ OPTS - Dcom . sun . management . jmxremote . ssl . enabled . cipher . suites = < enabled - cipher - suites > " 
 fi 
 
 # To use mx4j , an HTML interface for JMX , add mx4j - tools . jar to the lib / 
 diff - - git a / src / java / org / apache / cassandra / tools / NodeProbe . java b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 index da1fca0 . . d3bce4d 100644 
 - - - a / src / java / org / apache / cassandra / tools / NodeProbe . java 
 + + + b / src / java / org / apache / cassandra / tools / NodeProbe . java 
 @ @ - 27 , 6 + 27 , 8 @ @ import java . lang . management . MemoryUsage ; 
 import java . lang . management . RuntimeMXBean ; 
 import java . net . InetAddress ; 
 import java . net . UnknownHostException ; 
 + import java . rmi . server . RMIClientSocketFactory ; 
 + import java . rmi . server . RMISocketFactory ; 
 import java . text . SimpleDateFormat ; 
 import java . util . AbstractMap ; 
 import java . util . ArrayList ; 
 @ @ - 58 , 6 + 60 , 7 @ @ import javax . management . remote . JMXConnectionNotification ; 
 import javax . management . remote . JMXConnector ; 
 import javax . management . remote . JMXConnectorFactory ; 
 import javax . management . remote . JMXServiceURL ; 
 + import javax . rmi . ssl . SslRMIClientSocketFactory ; 
 
 import org . apache . cassandra . concurrent . JMXEnabledThreadPoolExecutorMBean ; 
 import org . apache . cassandra . db . ColumnFamilyStoreMBean ; 
 @ @ - 182 , 6 + 185 , 9 @ @ public class NodeProbe implements AutoCloseable 
 String [ ] creds = { username , password } ; 
 env . put ( JMXConnector . CREDENTIALS , creds ) ; 
 } 
 + 
 + env . put ( " com . sun . jndi . rmi . factory . socket " , getRMIClientSocketFactory ( ) ) ; 
 + 
 jmxc = JMXConnectorFactory . connect ( jmxUrl , env ) ; 
 mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; 
 
 @ @ - 218 , 6 + 224 , 14 @ @ public class NodeProbe implements AutoCloseable 
 mbeanServerConn , ManagementFactory . RUNTIME _ MXBEAN _ NAME , RuntimeMXBean . class ) ; 
 } 
 
 + private RMIClientSocketFactory getRMIClientSocketFactory ( ) throws IOException 
 + { 
 + if ( Boolean . parseBoolean ( System . getProperty ( " ssl . enable " ) ) ) 
 + return new SslRMIClientSocketFactory ( ) ; 
 + else 
 + return RMISocketFactory . getDefaultSocketFactory ( ) ; 
 + } 
 + 
 public void close ( ) throws IOException 
 { 
 jmxc . close ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d518830 . . 52cc2c1 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 29 , 7 + 29 , 7 @ @ 
 * add scheduler JMX metrics ( CASSANDRA - 2962 ) 
 * add block level checksum for compressed data ( CASSANDRA - 1717 ) 
 * make column family backed column map pluggable and introduce unsynchronized 
 - ArrayList backed one to speedup reads ( CASSANDRA - 2843 ) 
 + ArrayList backed one to speedup reads ( CASSANDRA - 2843 , 3165 ) 
 * refactoring of the secondary index api ( CASSANDRA - 2982 ) 
 * make CL > ONE reads wait for digest reconciliation before returning 
 ( CASSANDRA - 2494 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 index c316a85 . . 71c7213 100644 
 - - - a / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ArrayBackedSortedColumns . java 
 @ @ - 67 , 6 + 67 , 11 @ @ public class ArrayBackedSortedColumns extends ArrayList < IColumn > implements ISor 
 this . reversed = reversed ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public AbstractType < ? > getComparator ( ) 
 { 
 return comparator ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamily . java b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 index 1239d1c . . 38bc0d7 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamily . java 
 @ @ - 81 , 14 + 81 , 19 @ @ public class ColumnFamily extends AbstractColumnContainer 
 this . cfm = cfm ; 
 } 
 
 - public ColumnFamily cloneMeShallow ( ) 
 + public ColumnFamily cloneMeShallow ( ISortedColumns . Factory factory ) 
 { 
 - ColumnFamily cf = ColumnFamily . create ( cfm ) ; 
 + ColumnFamily cf = ColumnFamily . create ( cfm , factory ) ; 
 / / since deletion info is immutable , aliasing it is fine 
 cf . deletionInfo . set ( deletionInfo . get ( ) ) ; 
 return cf ; 
 } 
 
 + public ColumnFamily cloneMeShallow ( ) 
 + { 
 + return cloneMeShallow ( columns . getFactory ( ) ) ; 
 + } 
 + 
 public AbstractType getSubComparator ( ) 
 { 
 IColumnSerializer s = getColumnSerializer ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 0bfd1c5 . . 552d3e9 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 1162 , 8 + 1162 , 11 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 } 
 
 - / * * filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 - * tombstones that are no longer relevant . * / 
 + / * * 
 + * Filter a cached row , which will not be modified by the filter , but may be modified by throwing out 
 + * tombstones that are no longer relevant . 
 + * The returned column family won ' t be thread safe . 
 + * / 
 ColumnFamily filterColumnFamily ( ColumnFamily cached , QueryFilter filter , int gcBefore ) 
 { 
 / / special case slicing the entire row : 
 @ @ - 1184 , 7 + 1187 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 IColumn sc = cached . getColumn ( filter . path . superColumnName ) ; 
 if ( sc = = null | | sliceFilter . count > = sc . getSubColumns ( ) . size ( ) ) 
 { 
 - ColumnFamily cf = cached . cloneMeShallow ( ) ; 
 + ColumnFamily cf = cached . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 if ( sc ! = null ) 
 cf . addColumn ( sc , HeapAllocator . instance ) ; 
 return removeDeleted ( cf , gcBefore ) ; 
 @ @ - 1203 , 7 + 1206 , 7 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 } 
 
 IColumnIterator ci = filter . getMemtableColumnIterator ( cached , null , getComparator ( ) ) ; 
 - ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ) ; 
 + ColumnFamily cf = ci . getColumnFamily ( ) . cloneMeShallow ( ArrayBackedSortedColumns . factory ( ) ) ; 
 filter . collateColumns ( cf , Collections . singletonList ( ci ) , getComparator ( ) , gcBefore ) ; 
 / / TODO this is necessary because when we collate supercolumns together , we don ' t check 
 / / their subcolumns for relevance , so we need to do a second prune post facto here . 
 diff - - git a / src / java / org / apache / cassandra / db / ISortedColumns . java b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 index 37f5a60 . . 624dec7 100644 
 - - - a / src / java / org / apache / cassandra / db / ISortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ISortedColumns . java 
 @ @ - 42 , 6 + 42 , 11 @ @ public interface ISortedColumns extends IIterableColumns 
 public ISortedColumns cloneMe ( ) ; 
 
 / * * 
 + * Returns the factory used for this ISortedColumns implementation . 
 + * / 
 + public Factory getFactory ( ) ; 
 + 
 + / * * 
 * Adds a column to this column map . 
 * If a column with the same name is already present in the map , it will 
 * be replaced by the newly added column . 
 diff - - git a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 index cd2488a . . 13a111a 100644 
 - - - a / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / ThreadSafeSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class ThreadSafeSortedColumns extends ConcurrentSkipListMap < ByteBuffer , I 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new ThreadSafeSortedColumns ( this ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 index 34e83dc . . 6c3fc42 100644 
 - - - a / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 + + + b / src / java / org / apache / cassandra / db / TreeMapBackedSortedColumns . java 
 @ @ - 62 , 6 + 62 , 11 @ @ public class TreeMapBackedSortedColumns extends TreeMap < ByteBuffer , IColumn > imp 
 super ( columns ) ; 
 } 
 
 + public ISortedColumns . Factory getFactory ( ) 
 + { 
 + return factory ( ) ; 
 + } 
 + 
 public ISortedColumns cloneMe ( ) 
 { 
 return new TreeMapBackedSortedColumns ( this ) ;
