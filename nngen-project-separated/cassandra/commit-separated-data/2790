BLEU SCORE: 0.033864985683445356

TEST MSG: revert CASSANDRA - 6107 , and cut max cached statements to 50k
GENERATED MSG: single - pass streaming

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index d88bb26 . . 110bf50 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 . 14 <nl> + * Reverted code to limit CQL prepared statement cache by size ( CASSANDRA - 6592 ) <nl> * add cassandra . default _ messaging _ version property to allow easier <nl> upgrading from 1 . 1 ( CASSANDRA - 6619 ) <nl> * Allow executing CREATE statements multiple times ( CASSANDRA - 6471 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index dc94a18 . . 67ecefc 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 20 , 12 + 20 , 8 @ @ package org . apache . cassandra . cql3 ; <nl> import java . nio . ByteBuffer ; <nl> import java . util . * ; <nl> <nl> - import com . google . common . primitives . Ints ; <nl> - <nl> import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; <nl> - import com . googlecode . concurrentlinkedhashmap . EntryWeigher ; <nl> import org . antlr . runtime . * ; <nl> - import org . github . jamm . MemoryMeter ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 45 , 56 + 41 , 15 @ @ public class QueryProcessor <nl> public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 0 . 5 " ) ; <nl> <nl> private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; <nl> - private static final MemoryMeter meter = new MemoryMeter ( ) ; <nl> - private static final long MAX _ CACHE _ PREPARED _ MEMORY = Runtime . getRuntime ( ) . maxMemory ( ) / 256 ; <nl> - private static final int MAX _ CACHE _ PREPARED _ COUNT = 10000 ; <nl> - <nl> - private static EntryWeigher < MD5Digest , CQLStatement > cqlMemoryUsageWeigher = new EntryWeigher < MD5Digest , CQLStatement > ( ) <nl> - { <nl> - @ Override <nl> - public int weightOf ( MD5Digest key , CQLStatement value ) <nl> - { <nl> - return Ints . checkedCast ( measure ( key ) + measure ( value ) ) ; <nl> - } <nl> - } ; <nl> <nl> - private static EntryWeigher < Integer , CQLStatement > thriftMemoryUsageWeigher = new EntryWeigher < Integer , CQLStatement > ( ) <nl> - { <nl> - @ Override <nl> - public int weightOf ( Integer key , CQLStatement value ) <nl> - { <nl> - return Ints . checkedCast ( measure ( key ) + measure ( value ) ) ; <nl> - } <nl> - } ; <nl> + public static final int MAX _ CACHE _ PREPARED = 50000 ; / / Enough to keep buggy clients from OOM ' ing us <nl> + private static final Map < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) <nl> + . build ( ) ; <nl> <nl> - private static final ConcurrentLinkedHashMap < MD5Digest , CQLStatement > preparedStatements ; <nl> - private static final ConcurrentLinkedHashMap < Integer , CQLStatement > thriftPreparedStatements ; <nl> - <nl> - static <nl> - { <nl> - if ( MemoryMeter . isInitialized ( ) ) <nl> - { <nl> - preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) <nl> - . weigher ( cqlMemoryUsageWeigher ) <nl> - . build ( ) ; <nl> - thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) <nl> - . weigher ( thriftMemoryUsageWeigher ) <nl> - . build ( ) ; <nl> - } <nl> - else <nl> - { <nl> - logger . error ( " Unable to initialize MemoryMeter ( jamm not specified as javaagent ) . This means " <nl> - + " Cassandra will be unable to measure object sizes accurately and may consequently OOM . " ) ; <nl> - preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) <nl> - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ COUNT ) <nl> - . build ( ) ; <nl> - thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ COUNT ) <nl> - . build ( ) ; <nl> - } <nl> - } <nl> + private static final Map < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) <nl> + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) <nl> + . build ( ) ; <nl> <nl> public static CQLStatement getPrepared ( MD5Digest id ) <nl> { <nl> @ @ - 228 , 18 + 183 , 10 @ @ public class QueryProcessor <nl> } <nl> <nl> private static ResultMessage . Prepared storePreparedStatement ( String queryString , String keyspace , ParsedStatement . Prepared prepared , boolean forThrift ) <nl> - throws InvalidRequestException <nl> { <nl> / / Concatenate the current keyspace so we don ' t mix prepared statements between keyspace
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / utils / BytesReadTracker . java b / src / java / org / apache / cassandra / utils / BytesReadTracker . java <nl> new file mode 100644 <nl> index 0000000 . . 8e7f15c <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / utils / BytesReadTracker . java <nl> @ @ - 0 , 0 + 1 , 167 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> + package org . apache . cassandra . utils ; <nl> + <nl> + import java . io . DataInput ; <nl> + import java . io . DataInputStream ; <nl> + import java . io . IOException ; <nl> + <nl> + / * * <nl> + * This class is to track bytes read from given DataInput <nl> + * / <nl> + public class BytesReadTracker implements DataInput <nl> + { <nl> + <nl> + private long bytesRead ; <nl> + private DataInput source ; <nl> + <nl> + public BytesReadTracker ( DataInput source ) <nl> + { <nl> + this . source = source ; <nl> + } <nl> + <nl> + public long getBytesRead ( ) <nl> + { <nl> + return bytesRead ; <nl> + } <nl> + <nl> + / * * <nl> + * reset counter to 0 <nl> + * / <nl> + public void reset ( ) <nl> + { <nl> + bytesRead = 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean readBoolean ( ) throws IOException <nl> + { <nl> + boolean bool = source . readBoolean ( ) ; <nl> + bytesRead + = 1 ; <nl> + return bool ; <nl> + } <nl> + <nl> + @ Override <nl> + public byte readByte ( ) throws IOException <nl> + { <nl> + byte b = source . readByte ( ) ; <nl> + bytesRead + = 1 ; <nl> + return b ; <nl> + } <nl> + <nl> + @ Override <nl> + public char readChar ( ) throws IOException <nl> + { <nl> + char c = source . readChar ( ) ; <nl> + bytesRead + = 1 ; <nl> + return c ; <nl> + } <nl> + <nl> + @ Override <nl> + public double readDouble ( ) throws IOException <nl> + { <nl> + double d = source . readDouble ( ) ; <nl> + bytesRead + = 8 ; <nl> + return d ; <nl> + } <nl> + <nl> + @ Override <nl> + public float readFloat ( ) throws IOException <nl> + { <nl> + float f = source . readFloat ( ) ; <nl> + bytesRead + = 4 ; <nl> + return f ; <nl> + } <nl> + <nl> + @ Override <nl> + public void readFully ( byte [ ] b , int off , int len ) throws IOException <nl> + { <nl> + source . readFully ( b , off , len ) ; <nl> + bytesRead + = len ; <nl> + } <nl> + <nl> + @ Override <nl> + public void readFully ( byte [ ] b ) throws IOException <nl> + { <nl> + source . readFully ( b ) ; <nl> + bytesRead + = b . length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int readInt ( ) throws IOException <nl> + { <nl> + int i = source . readInt ( ) ; <nl> + bytesRead + = 4 ; <nl> + return i ; <nl> + } <nl> + <nl> + @ Override <nl> + public String readLine ( ) throws IOException <nl> + { <nl> + / / since this method is deprecated and cannot track bytes read <nl> + / / just throw exception <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public long readLong ( ) throws IOException <nl> + { <nl> + long l = source . readLong ( ) ; <nl> + bytesRead + = 8 ; <nl> + return l ; <nl> + } <nl> + <nl> + @ Override <nl> + public short readShort ( ) throws IOException <nl> + { <nl> + short s = source . readShort ( ) ; <nl> + bytesRead + = 2 ; <nl> + return s ; <nl> + } <nl> + <nl> + @ Override <nl> + public String readUTF ( ) throws IOException <nl> + { <nl> + return DataInputStream . readUTF ( this ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int readUnsignedByte ( ) throws IOException <nl> + { <nl> + int i = source . readUnsignedByte ( ) ; <nl> + bytesRead + = 1 ; <nl> + return i ; <nl> + } <nl> + <nl> + @ Override <nl> + public int readUnsignedShort ( ) throws IOException <nl> + { <nl> + int i = source . readUnsignedShort ( ) ; <nl> + bytesRead + = 2 ; <nl> + return i ; <nl> + } <nl> + <nl> + @ Override <nl> + public int skipBytes ( int n ) throws IOException <nl> + { <nl> + int skipped = source . skipBytes ( n ) ; <nl> + bytesRead + = n ; <nl> + return skipped ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index d88bb26 . . 110bf50 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 . 14 
 + * Reverted code to limit CQL prepared statement cache by size ( CASSANDRA - 6592 ) 
 * add cassandra . default _ messaging _ version property to allow easier 
 upgrading from 1 . 1 ( CASSANDRA - 6619 ) 
 * Allow executing CREATE statements multiple times ( CASSANDRA - 6471 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index dc94a18 . . 67ecefc 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 20 , 12 + 20 , 8 @ @ package org . apache . cassandra . cql3 ; 
 import java . nio . ByteBuffer ; 
 import java . util . * ; 
 
 - import com . google . common . primitives . Ints ; 
 - 
 import com . googlecode . concurrentlinkedhashmap . ConcurrentLinkedHashMap ; 
 - import com . googlecode . concurrentlinkedhashmap . EntryWeigher ; 
 import org . antlr . runtime . * ; 
 - import org . github . jamm . MemoryMeter ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 45 , 56 + 41 , 15 @ @ public class QueryProcessor 
 public static final SemanticVersion CQL _ VERSION = new SemanticVersion ( " 3 . 0 . 5 " ) ; 
 
 private static final Logger logger = LoggerFactory . getLogger ( QueryProcessor . class ) ; 
 - private static final MemoryMeter meter = new MemoryMeter ( ) ; 
 - private static final long MAX _ CACHE _ PREPARED _ MEMORY = Runtime . getRuntime ( ) . maxMemory ( ) / 256 ; 
 - private static final int MAX _ CACHE _ PREPARED _ COUNT = 10000 ; 
 - 
 - private static EntryWeigher < MD5Digest , CQLStatement > cqlMemoryUsageWeigher = new EntryWeigher < MD5Digest , CQLStatement > ( ) 
 - { 
 - @ Override 
 - public int weightOf ( MD5Digest key , CQLStatement value ) 
 - { 
 - return Ints . checkedCast ( measure ( key ) + measure ( value ) ) ; 
 - } 
 - } ; 
 
 - private static EntryWeigher < Integer , CQLStatement > thriftMemoryUsageWeigher = new EntryWeigher < Integer , CQLStatement > ( ) 
 - { 
 - @ Override 
 - public int weightOf ( Integer key , CQLStatement value ) 
 - { 
 - return Ints . checkedCast ( measure ( key ) + measure ( value ) ) ; 
 - } 
 - } ; 
 + public static final int MAX _ CACHE _ PREPARED = 50000 ; / / Enough to keep buggy clients from OOM ' ing us 
 + private static final Map < MD5Digest , CQLStatement > preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) 
 + . build ( ) ; 
 
 - private static final ConcurrentLinkedHashMap < MD5Digest , CQLStatement > preparedStatements ; 
 - private static final ConcurrentLinkedHashMap < Integer , CQLStatement > thriftPreparedStatements ; 
 - 
 - static 
 - { 
 - if ( MemoryMeter . isInitialized ( ) ) 
 - { 
 - preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) 
 - . weigher ( cqlMemoryUsageWeigher ) 
 - . build ( ) ; 
 - thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ MEMORY ) 
 - . weigher ( thriftMemoryUsageWeigher ) 
 - . build ( ) ; 
 - } 
 - else 
 - { 
 - logger . error ( " Unable to initialize MemoryMeter ( jamm not specified as javaagent ) . This means " 
 - + " Cassandra will be unable to measure object sizes accurately and may consequently OOM . " ) ; 
 - preparedStatements = new ConcurrentLinkedHashMap . Builder < MD5Digest , CQLStatement > ( ) 
 - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ COUNT ) 
 - . build ( ) ; 
 - thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 - . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED _ COUNT ) 
 - . build ( ) ; 
 - } 
 - } 
 + private static final Map < Integer , CQLStatement > thriftPreparedStatements = new ConcurrentLinkedHashMap . Builder < Integer , CQLStatement > ( ) 
 + . maximumWeightedCapacity ( MAX _ CACHE _ PREPARED ) 
 + . build ( ) ; 
 
 public static CQLStatement getPrepared ( MD5Digest id ) 
 { 
 @ @ - 228 , 18 + 183 , 10 @ @ public class QueryProcessor 
 } 
 
 private static ResultMessage . Prepared storePreparedStatement ( String queryString , String keyspace , ParsedStatement . Prepared prepared , boolean forThrift ) 
 - throws InvalidRequestException 
 { 
 / / Concatenate the current keyspace so we don ' t mix prepared statements between keyspace

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / utils / BytesReadTracker . java b / src / java / org / apache / cassandra / utils / BytesReadTracker . java 
 new file mode 100644 
 index 0000000 . . 8e7f15c 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / utils / BytesReadTracker . java 
 @ @ - 0 , 0 + 1 , 167 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 + package org . apache . cassandra . utils ; 
 + 
 + import java . io . DataInput ; 
 + import java . io . DataInputStream ; 
 + import java . io . IOException ; 
 + 
 + / * * 
 + * This class is to track bytes read from given DataInput 
 + * / 
 + public class BytesReadTracker implements DataInput 
 + { 
 + 
 + private long bytesRead ; 
 + private DataInput source ; 
 + 
 + public BytesReadTracker ( DataInput source ) 
 + { 
 + this . source = source ; 
 + } 
 + 
 + public long getBytesRead ( ) 
 + { 
 + return bytesRead ; 
 + } 
 + 
 + / * * 
 + * reset counter to 0 
 + * / 
 + public void reset ( ) 
 + { 
 + bytesRead = 0 ; 
 + } 
 + 
 + @ Override 
 + public boolean readBoolean ( ) throws IOException 
 + { 
 + boolean bool = source . readBoolean ( ) ; 
 + bytesRead + = 1 ; 
 + return bool ; 
 + } 
 + 
 + @ Override 
 + public byte readByte ( ) throws IOException 
 + { 
 + byte b = source . readByte ( ) ; 
 + bytesRead + = 1 ; 
 + return b ; 
 + } 
 + 
 + @ Override 
 + public char readChar ( ) throws IOException 
 + { 
 + char c = source . readChar ( ) ; 
 + bytesRead + = 1 ; 
 + return c ; 
 + } 
 + 
 + @ Override 
 + public double readDouble ( ) throws IOException 
 + { 
 + double d = source . readDouble ( ) ; 
 + bytesRead + = 8 ; 
 + return d ; 
 + } 
 + 
 + @ Override 
 + public float readFloat ( ) throws IOException 
 + { 
 + float f = source . readFloat ( ) ; 
 + bytesRead + = 4 ; 
 + return f ; 
 + } 
 + 
 + @ Override 
 + public void readFully ( byte [ ] b , int off , int len ) throws IOException 
 + { 
 + source . readFully ( b , off , len ) ; 
 + bytesRead + = len ; 
 + } 
 + 
 + @ Override 
 + public void readFully ( byte [ ] b ) throws IOException 
 + { 
 + source . readFully ( b ) ; 
 + bytesRead + = b . length ; 
 + } 
 + 
 + @ Override 
 + public int readInt ( ) throws IOException 
 + { 
 + int i = source . readInt ( ) ; 
 + bytesRead + = 4 ; 
 + return i ; 
 + } 
 + 
 + @ Override 
 + public String readLine ( ) throws IOException 
 + { 
 + / / since this method is deprecated and cannot track bytes read 
 + / / just throw exception 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + @ Override 
 + public long readLong ( ) throws IOException 
 + { 
 + long l = source . readLong ( ) ; 
 + bytesRead + = 8 ; 
 + return l ; 
 + } 
 + 
 + @ Override 
 + public short readShort ( ) throws IOException 
 + { 
 + short s = source . readShort ( ) ; 
 + bytesRead + = 2 ; 
 + return s ; 
 + } 
 + 
 + @ Override 
 + public String readUTF ( ) throws IOException 
 + { 
 + return DataInputStream . readUTF ( this ) ; 
 + } 
 + 
 + @ Override 
 + public int readUnsignedByte ( ) throws IOException 
 + { 
 + int i = source . readUnsignedByte ( ) ; 
 + bytesRead + = 1 ; 
 + return i ; 
 + } 
 + 
 + @ Override 
 + public int readUnsignedShort ( ) throws IOException 
 + { 
 + int i = source . readUnsignedShort ( ) ; 
 + bytesRead + = 2 ; 
 + return i ; 
 + } 
 + 
 + @ Override 
 + public int skipBytes ( int n ) throws IOException 
 + { 
 + int skipped = source . skipBytes ( n ) ; 
 + bytesRead + = n ; 
 + return skipped ; 
 + } 
 + }
