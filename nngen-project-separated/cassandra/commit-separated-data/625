BLEU SCORE: 0.10682175159905853

TEST MSG: Remove IndexInfo cache from FileIndexInfoRetriever
GENERATED MSG: merge from 1 . 2

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b503fd9 . . 64743b4 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * Remove IndexInfo cache from FileIndexInfoRetriever ( CASSANDRA - 12731 ) <nl> * ColumnIndex does not reuse buffer ( CASSANDRA - 12502 ) <nl> * cdc column addition still breaks schema migration tasks ( CASSANDRA - 12697 ) <nl> * Upgrade metrics - reporter dependencies ( CASSANDRA - 12089 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> index 317b2bd . . e620dc0 100644 <nl> - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java <nl> @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . db ; <nl> <nl> import java . io . IOException ; <nl> import java . nio . ByteBuffer ; <nl> - import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import com . codahale . metrics . Histogram ; <nl> @ @ - 556 , 7 + 555 , 7 @ @ public class RowIndexEntry < T > implements IMeasurableMemory <nl> <nl> private LegacyIndexInfoRetriever ( long indexFilePosition , int [ ] offsets , FileDataInput reader , IndexInfo . Serializer idxInfoSerializer ) <nl> { <nl> - super ( indexFilePosition , offsets . length , reader , idxInfoSerializer ) ; <nl> + super ( indexFilePosition , reader , idxInfoSerializer ) ; <nl> this . offsets = offsets ; <nl> } <nl> <nl> @ @ - 889 , 7 + 888 , 7 @ @ public class RowIndexEntry < T > implements IMeasurableMemory <nl> VIntCoding . computeUnsignedVIntSize ( indexedPartSize + fieldsSerializedSize ) + <nl> fieldsSerializedSize , <nl> offsetsOffset - fieldsSerializedSize , <nl> - columnsIndexCount , indexFile . createReader ( ) , idxInfoSerializer ) ; <nl> + indexFile . createReader ( ) , idxInfoSerializer ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 954 , 17 + 953 , 15 @ @ public class RowIndexEntry < T > implements IMeasurableMemory <nl> { <nl> private final int offsetsOffset ; <nl> <nl> - private ShallowInfoRetriever ( long indexInfoFilePosition , int offsetsOffset , int indexCount , <nl> + private ShallowInfoRetriever ( long indexInfoFilePosition , int offsetsOffset , <nl> FileDataInput indexReader , ISerializer < IndexInfo > idxInfoSerializer ) <nl> { <nl> - super ( indexInfoFilePosition , indexCount , indexReader , idxInfoSerializer ) ; <nl> + super ( indexInfoFilePosition , indexReader , idxInfoSerializer ) ; <nl> this . offsetsOffset = offsetsOffset ; <nl> } <nl> <nl> IndexInfo fetchIndex ( int index ) throws IOException <nl> { <nl> - assert index > = 0 & & index < indexCount ; <nl> - <nl> retrievals + + ; <nl> <nl> / / seek to position in " offsets to IndexInfo " table <nl> @ @ - 998 , 46 + 995 , 26 @ @ public class RowIndexEntry < T > implements IMeasurableMemory <nl> private abstract static class FileIndexInfoRetriever implements IndexInfoRetriever <nl> { <nl> final long indexInfoFilePosition ; <nl> - final int indexCount ; <nl> final ISerializer < IndexInfo > idxInfoSerializer ; <nl> final FileDataInput indexReader ; <nl> int retrievals ; <nl> <nl> - private IndexInfo [ ] lastIndexes ; <nl> - <nl> / * * <nl> * <nl> * @ param indexInfoFilePosition offset of first serialized { @ link IndexInfo } object <nl> - * @ param indexCount number of { @ link IndexInfo } objects <nl> * @ param indexReader file data input to access the index file , closed by this instance <nl> * @ param idxInfoSerializer the index serializer to deserialize { @ link IndexInfo } objects <nl> * / <nl> - FileIndexInfoRetriever ( long indexInfoFilePosition , int indexCount , FileDataInput indexReader , ISerializer < IndexInfo > idxInfoSerializer ) <nl> + FileIndexInfoRetriever ( long indexInfoFilePosition , FileDataInput indexReader , ISerializer < IndexInfo > idxInfoSerializer ) <nl> { <nl> this . indexInfoFilePosition = indexInfoFilePosition ; <nl> - this . indexCount = indexCount ; <nl> this . idxInfoSerializer = idxInfoSerializer ; <nl> this . indexReader = indexReader ; <nl> } <nl> <nl> public final IndexInfo columnsIndex ( int index ) throws IOException <nl> { <nl> - if ( lastIndexes ! = null <nl> - & & lastIndexes . length > index & & lastIndexes [ index ] ! = null ) <nl> - { <nl> - / / return a previously read / deserialized IndexInfo <nl> - return lastIndexes [ index ] ; <nl> - } <nl> - <nl> - if ( lastIndexes = = null ) <nl> - lastIndexes = new IndexInfo [ index + 1 ] ; <nl> - else if ( lastIndexes . length < = index ) <nl> - lastIndexes = Arrays . copyOf ( lastIndexes , index + 1 ) ; <nl> - <nl> - IndexInfo indexInfo = fetchIndex ( index ) ; <nl> - lastIndexes [ index ] = indexInfo ; <nl> - <nl> - return indexInfo ; <nl> + return fetchIndex ( index ) ; <nl> } <nl> <nl> abstract IndexInfo fetchIndex ( int index ) throws IOException ; <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java b / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java <nl> index 5536efd . . 45fd712 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java <nl> @ @ - 15 , 9 + 15 , 9 @ @ <nl> * See the License for the specific language governing permissions and <nl> * limitations under the License . <nl> * / <nl> - <nl> package org . apache . cassandra . io . sstable ; <nl> <nl> + import java . util . Iterator ; <nl> import java . util . concurrent . ThreadLocalRandom ; <nl> <nl> import org . junit . Ignore ; <nl> @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . runner . RunWith ; <nl> <nl> import org . apache . cassandra . OrderedJUnit4ClassRunner ; <nl> import org . apache . cassandra . cql3 . CQLTester ; <nl> + import org . apache . cassandra . cql3 . UntypedResultSet ; <nl> import org . apache . cassandra . metrics . CacheMetrics ; <nl> import org . apache . cassandra . service . CacheService ; <nl> <nl> @ @ - 49 , 7 + 50 , 7 @ @ public class LargePartitionsTest extends CQLTester <nl> long t0 = System . currentTimeMillis ( ) ; <nl> measured . measure ( ) ; <nl> long t = System . currentTimeMillis ( ) - t0 ; <nl> - System . out . println ( name + " took " + t + " ms " ) ; <nl> + System . out . println ( " LargePartitionsTest - measured : " + name + " took " + t + " ms " ) ; <nl> } <nl> <nl> private static String randomText ( int bytes ) <nl> @ @ - 96 , 6 + 97 , 9 @ @ public class LargePartitionsTest extends CQLTester <nl> measured ( " SELECTs 1 for " + name , ( ) - > selects ( partitionKBytes , totalKBytes ) ) ; <nl> <nl> measured ( " SELECTs 2 for " + name , ( ) - > selects ( partitionKBytes , totalKBytes ) ) ; <nl> + <nl> + CacheService . instance . keyCache . clear ( ) ; <nl> + measured ( " Scan for " + name , ( ) - > scan ( partitionKBytes , totalKBytes ) ) ; <nl> } <nl> <nl> private void selects ( long partitionKBytes , long totalKBytes ) throws Throwable <nl> @ @ - 113 , 6 + 117 , 20 @ @ public class LargePartitionsTest extends CQLTester <nl> keyCacheMetrics ( " after all selects " ) ; <nl> } <nl> <nl> + private void scan ( long partitionKBytes , long totalKBytes ) throws Throwable <nl> + { <nl> + long pk = ThreadLocalRandom . current ( ) . nextLong ( totalKBytes / partitionKBytes ) * partitionKBytes ; <nl> + Iterator < UntypedResultSet . Row > iter = execute ( " SELECT val FROM % s WHERE pk = ? " , Long . toBinaryString ( pk ) ) . iterator ( ) ; <nl> + int i = 0 ; <nl> + while ( iter . hasNext ( ) ) <nl> + { <nl> + iter . next ( ) ; <nl> + if ( i + + % 1000 = = 0 ) <nl> + keyCacheMetrics ( " after " + i + " iteration " ) ; <nl> + } <nl> + keyCacheMetrics ( " after all iteration " ) ; <nl> + } <nl> + <nl> private static void keyCacheMetrics ( String title ) <nl> { <nl> CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ;
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index b935425 . . 7f5a487 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 1 . 2 - rc1 <nl> + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) <nl> * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) <nl> * save truncation position in system table ( CASSANDRA - 4906 ) <nl> * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) <nl> diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py <nl> index d15c083 . . bab3506 100644 <nl> - - - a / pylib / cqlshlib / formatting . py <nl> + + + b / pylib / cqlshlib / formatting . py <nl> @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : <nl> return f <nl> return registrator <nl> <nl> - @ formatter _ for ( ' bytes ' ) <nl> - def format _ value _ bytes ( val , colormap , * * _ ) : <nl> + @ formatter _ for ( ' blob ' ) <nl> + def format _ value _ blob ( val , colormap , * * _ ) : <nl> bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) <nl> return colorme ( bval , colormap , ' hex ' ) <nl>

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b503fd9 . . 64743b4 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * Remove IndexInfo cache from FileIndexInfoRetriever ( CASSANDRA - 12731 ) 
 * ColumnIndex does not reuse buffer ( CASSANDRA - 12502 ) 
 * cdc column addition still breaks schema migration tasks ( CASSANDRA - 12697 ) 
 * Upgrade metrics - reporter dependencies ( CASSANDRA - 12089 ) 
 diff - - git a / src / java / org / apache / cassandra / db / RowIndexEntry . java b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 index 317b2bd . . e620dc0 100644 
 - - - a / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 + + + b / src / java / org / apache / cassandra / db / RowIndexEntry . java 
 @ @ - 19 , 7 + 19 , 6 @ @ package org . apache . cassandra . db ; 
 
 import java . io . IOException ; 
 import java . nio . ByteBuffer ; 
 - import java . util . Arrays ; 
 import java . util . List ; 
 
 import com . codahale . metrics . Histogram ; 
 @ @ - 556 , 7 + 555 , 7 @ @ public class RowIndexEntry < T > implements IMeasurableMemory 
 
 private LegacyIndexInfoRetriever ( long indexFilePosition , int [ ] offsets , FileDataInput reader , IndexInfo . Serializer idxInfoSerializer ) 
 { 
 - super ( indexFilePosition , offsets . length , reader , idxInfoSerializer ) ; 
 + super ( indexFilePosition , reader , idxInfoSerializer ) ; 
 this . offsets = offsets ; 
 } 
 
 @ @ - 889 , 7 + 888 , 7 @ @ public class RowIndexEntry < T > implements IMeasurableMemory 
 VIntCoding . computeUnsignedVIntSize ( indexedPartSize + fieldsSerializedSize ) + 
 fieldsSerializedSize , 
 offsetsOffset - fieldsSerializedSize , 
 - columnsIndexCount , indexFile . createReader ( ) , idxInfoSerializer ) ; 
 + indexFile . createReader ( ) , idxInfoSerializer ) ; 
 } 
 
 @ Override 
 @ @ - 954 , 17 + 953 , 15 @ @ public class RowIndexEntry < T > implements IMeasurableMemory 
 { 
 private final int offsetsOffset ; 
 
 - private ShallowInfoRetriever ( long indexInfoFilePosition , int offsetsOffset , int indexCount , 
 + private ShallowInfoRetriever ( long indexInfoFilePosition , int offsetsOffset , 
 FileDataInput indexReader , ISerializer < IndexInfo > idxInfoSerializer ) 
 { 
 - super ( indexInfoFilePosition , indexCount , indexReader , idxInfoSerializer ) ; 
 + super ( indexInfoFilePosition , indexReader , idxInfoSerializer ) ; 
 this . offsetsOffset = offsetsOffset ; 
 } 
 
 IndexInfo fetchIndex ( int index ) throws IOException 
 { 
 - assert index > = 0 & & index < indexCount ; 
 - 
 retrievals + + ; 
 
 / / seek to position in " offsets to IndexInfo " table 
 @ @ - 998 , 46 + 995 , 26 @ @ public class RowIndexEntry < T > implements IMeasurableMemory 
 private abstract static class FileIndexInfoRetriever implements IndexInfoRetriever 
 { 
 final long indexInfoFilePosition ; 
 - final int indexCount ; 
 final ISerializer < IndexInfo > idxInfoSerializer ; 
 final FileDataInput indexReader ; 
 int retrievals ; 
 
 - private IndexInfo [ ] lastIndexes ; 
 - 
 / * * 
 * 
 * @ param indexInfoFilePosition offset of first serialized { @ link IndexInfo } object 
 - * @ param indexCount number of { @ link IndexInfo } objects 
 * @ param indexReader file data input to access the index file , closed by this instance 
 * @ param idxInfoSerializer the index serializer to deserialize { @ link IndexInfo } objects 
 * / 
 - FileIndexInfoRetriever ( long indexInfoFilePosition , int indexCount , FileDataInput indexReader , ISerializer < IndexInfo > idxInfoSerializer ) 
 + FileIndexInfoRetriever ( long indexInfoFilePosition , FileDataInput indexReader , ISerializer < IndexInfo > idxInfoSerializer ) 
 { 
 this . indexInfoFilePosition = indexInfoFilePosition ; 
 - this . indexCount = indexCount ; 
 this . idxInfoSerializer = idxInfoSerializer ; 
 this . indexReader = indexReader ; 
 } 
 
 public final IndexInfo columnsIndex ( int index ) throws IOException 
 { 
 - if ( lastIndexes ! = null 
 - & & lastIndexes . length > index & & lastIndexes [ index ] ! = null ) 
 - { 
 - / / return a previously read / deserialized IndexInfo 
 - return lastIndexes [ index ] ; 
 - } 
 - 
 - if ( lastIndexes = = null ) 
 - lastIndexes = new IndexInfo [ index + 1 ] ; 
 - else if ( lastIndexes . length < = index ) 
 - lastIndexes = Arrays . copyOf ( lastIndexes , index + 1 ) ; 
 - 
 - IndexInfo indexInfo = fetchIndex ( index ) ; 
 - lastIndexes [ index ] = indexInfo ; 
 - 
 - return indexInfo ; 
 + return fetchIndex ( index ) ; 
 } 
 
 abstract IndexInfo fetchIndex ( int index ) throws IOException ; 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java b / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java 
 index 5536efd . . 45fd712 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / LargePartitionsTest . java 
 @ @ - 15 , 9 + 15 , 9 @ @ 
 * See the License for the specific language governing permissions and 
 * limitations under the License . 
 * / 
 - 
 package org . apache . cassandra . io . sstable ; 
 
 + import java . util . Iterator ; 
 import java . util . concurrent . ThreadLocalRandom ; 
 
 import org . junit . Ignore ; 
 @ @ - 26 , 6 + 26 , 7 @ @ import org . junit . runner . RunWith ; 
 
 import org . apache . cassandra . OrderedJUnit4ClassRunner ; 
 import org . apache . cassandra . cql3 . CQLTester ; 
 + import org . apache . cassandra . cql3 . UntypedResultSet ; 
 import org . apache . cassandra . metrics . CacheMetrics ; 
 import org . apache . cassandra . service . CacheService ; 
 
 @ @ - 49 , 7 + 50 , 7 @ @ public class LargePartitionsTest extends CQLTester 
 long t0 = System . currentTimeMillis ( ) ; 
 measured . measure ( ) ; 
 long t = System . currentTimeMillis ( ) - t0 ; 
 - System . out . println ( name + " took " + t + " ms " ) ; 
 + System . out . println ( " LargePartitionsTest - measured : " + name + " took " + t + " ms " ) ; 
 } 
 
 private static String randomText ( int bytes ) 
 @ @ - 96 , 6 + 97 , 9 @ @ public class LargePartitionsTest extends CQLTester 
 measured ( " SELECTs 1 for " + name , ( ) - > selects ( partitionKBytes , totalKBytes ) ) ; 
 
 measured ( " SELECTs 2 for " + name , ( ) - > selects ( partitionKBytes , totalKBytes ) ) ; 
 + 
 + CacheService . instance . keyCache . clear ( ) ; 
 + measured ( " Scan for " + name , ( ) - > scan ( partitionKBytes , totalKBytes ) ) ; 
 } 
 
 private void selects ( long partitionKBytes , long totalKBytes ) throws Throwable 
 @ @ - 113 , 6 + 117 , 20 @ @ public class LargePartitionsTest extends CQLTester 
 keyCacheMetrics ( " after all selects " ) ; 
 } 
 
 + private void scan ( long partitionKBytes , long totalKBytes ) throws Throwable 
 + { 
 + long pk = ThreadLocalRandom . current ( ) . nextLong ( totalKBytes / partitionKBytes ) * partitionKBytes ; 
 + Iterator < UntypedResultSet . Row > iter = execute ( " SELECT val FROM % s WHERE pk = ? " , Long . toBinaryString ( pk ) ) . iterator ( ) ; 
 + int i = 0 ; 
 + while ( iter . hasNext ( ) ) 
 + { 
 + iter . next ( ) ; 
 + if ( i + + % 1000 = = 0 ) 
 + keyCacheMetrics ( " after " + i + " iteration " ) ; 
 + } 
 + keyCacheMetrics ( " after all iteration " ) ; 
 + } 
 + 
 private static void keyCacheMetrics ( String title ) 
 { 
 CacheMetrics metrics = CacheService . instance . keyCache . getMetrics ( ) ;

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index b935425 . . 7f5a487 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 1 . 2 - rc1 
 + * fix cqlsh rendering of blob fields ( CASSANDRA - 4970 ) 
 * fix cqlsh DESCRIBE command ( CASSANDRA - 4913 ) 
 * save truncation position in system table ( CASSANDRA - 4906 ) 
 * Move CompressionMetadata off - heap ( CASSANDRA - 4937 ) 
 diff - - git a / pylib / cqlshlib / formatting . py b / pylib / cqlshlib / formatting . py 
 index d15c083 . . bab3506 100644 
 - - - a / pylib / cqlshlib / formatting . py 
 + + + b / pylib / cqlshlib / formatting . py 
 @ @ - 88 , 8 + 88 , 8 @ @ def formatter _ for ( typname ) : 
 return f 
 return registrator 
 
 - @ formatter _ for ( ' bytes ' ) 
 - def format _ value _ bytes ( val , colormap , * * _ ) : 
 + @ formatter _ for ( ' blob ' ) 
 + def format _ value _ blob ( val , colormap , * * _ ) : 
 bval = ' ' . join ( ' % 02x ' % ord ( c ) for c in val ) 
 return colorme ( bval , colormap , ' hex ' ) 

