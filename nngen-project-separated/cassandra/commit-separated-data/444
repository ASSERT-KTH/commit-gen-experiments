BLEU SCORE: 0.034353182138500235

TEST MSG: Avoid anti - compacting repaired sstables
GENERATED MSG: Fix assertion error in getOverlappingSSTable during repair

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 2a8330e . . 27dd343 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 2 . 2 . 10 <nl> + * Don ' t anti - compact repaired data to avoid inconsistencies ( CASSANDRA - 13153 ) <nl> * Wrong logger name in AnticompactionTask ( CASSANDRA - 13343 ) <nl> * Fix queries updating multiple time the same list ( CASSANDRA - 13130 ) <nl> * Fix GRANT / REVOKE when keyspace isn ' t specified ( CASSANDRA - 13053 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> index 8a3c11e . . d21f1e8 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java <nl> @ @ - 1212 , 7 + 1212 , 21 @ @ public class CompactionManager implements CompactionManagerMBean <nl> logger . info ( " Performing anticompaction on { } sstables " , repaired . originals ( ) . size ( ) ) ; <nl> <nl> / / Group SSTables <nl> - Collection < Collection < SSTableReader > > groupedSSTables = cfs . getCompactionStrategy ( ) . groupSSTablesForAntiCompaction ( repaired . originals ( ) ) ; <nl> + Set < SSTableReader > sstables = repaired . originals ( ) ; <nl> + <nl> + / / Repairs can take place on both unrepaired ( incremental + full ) and repaired ( full ) data . <nl> + / / Although anti - compaction could work on repaired sstables as well and would result in having more accurate <nl> + / / repairedAt values for these , we still avoid anti - compacting already repaired sstables , as we currently don ' t <nl> + / / make use of any actual repairedAt value and splitting up sstables just for that is not worth it at this point . <nl> + Set < SSTableReader > unrepairedSSTables = ImmutableSet . copyOf ( Iterables . filter ( sstables , new Predicate < SSTableReader > ( ) <nl> + { <nl> + public boolean apply ( SSTableReader input ) <nl> + { <nl> + return ! input . isRepaired ( ) ; <nl> + } <nl> + } ) ) ; <nl> + <nl> + Collection < Collection < SSTableReader > > groupedSSTables = cfs . getCompactionStrategy ( ) . groupSSTablesForAntiCompaction ( unrepairedSSTables ) ; <nl> / / iterate over sstables to check if the repaired / unrepaired ranges intersect them . <nl> int antiCompactedSSTableCount = 0 ; <nl> for ( Collection < SSTableReader > sstableGroup : groupedSSTables )
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> index f1d6268 . . c57f580 100644 <nl> - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java <nl> @ @ - 205 , 7 + 205 , 6 @ @ public class SecondaryIndexManager <nl> return null ; <nl> <nl> assert cdef . getIndexType ( ) ! = null ; <nl> - logger . info ( " Creating new index : { } " , cdef ) ; <nl> <nl> SecondaryIndex index ; <nl> try <nl> @ @ - 231 , 6 + 230 , 7 @ @ public class SecondaryIndexManager <nl> { <nl> index = currentIndex ; <nl> index . addColumnDef ( cdef ) ; <nl> + logger . info ( " Creating new index : { } " , cdef ) ; <nl> } <nl> } <nl> else

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 2a8330e . . 27dd343 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 2 . 2 . 10 
 + * Don ' t anti - compact repaired data to avoid inconsistencies ( CASSANDRA - 13153 ) 
 * Wrong logger name in AnticompactionTask ( CASSANDRA - 13343 ) 
 * Fix queries updating multiple time the same list ( CASSANDRA - 13130 ) 
 * Fix GRANT / REVOKE when keyspace isn ' t specified ( CASSANDRA - 13053 ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 index 8a3c11e . . d21f1e8 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionManager . java 
 @ @ - 1212 , 7 + 1212 , 21 @ @ public class CompactionManager implements CompactionManagerMBean 
 logger . info ( " Performing anticompaction on { } sstables " , repaired . originals ( ) . size ( ) ) ; 
 
 / / Group SSTables 
 - Collection < Collection < SSTableReader > > groupedSSTables = cfs . getCompactionStrategy ( ) . groupSSTablesForAntiCompaction ( repaired . originals ( ) ) ; 
 + Set < SSTableReader > sstables = repaired . originals ( ) ; 
 + 
 + / / Repairs can take place on both unrepaired ( incremental + full ) and repaired ( full ) data . 
 + / / Although anti - compaction could work on repaired sstables as well and would result in having more accurate 
 + / / repairedAt values for these , we still avoid anti - compacting already repaired sstables , as we currently don ' t 
 + / / make use of any actual repairedAt value and splitting up sstables just for that is not worth it at this point . 
 + Set < SSTableReader > unrepairedSSTables = ImmutableSet . copyOf ( Iterables . filter ( sstables , new Predicate < SSTableReader > ( ) 
 + { 
 + public boolean apply ( SSTableReader input ) 
 + { 
 + return ! input . isRepaired ( ) ; 
 + } 
 + } ) ) ; 
 + 
 + Collection < Collection < SSTableReader > > groupedSSTables = cfs . getCompactionStrategy ( ) . groupSSTablesForAntiCompaction ( unrepairedSSTables ) ; 
 / / iterate over sstables to check if the repaired / unrepaired ranges intersect them . 
 int antiCompactedSSTableCount = 0 ; 
 for ( Collection < SSTableReader > sstableGroup : groupedSSTables )

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 index f1d6268 . . c57f580 100644 
 - - - a / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 + + + b / src / java / org / apache / cassandra / db / index / SecondaryIndexManager . java 
 @ @ - 205 , 7 + 205 , 6 @ @ public class SecondaryIndexManager 
 return null ; 
 
 assert cdef . getIndexType ( ) ! = null ; 
 - logger . info ( " Creating new index : { } " , cdef ) ; 
 
 SecondaryIndex index ; 
 try 
 @ @ - 231 , 6 + 230 , 7 @ @ public class SecondaryIndexManager 
 { 
 index = currentIndex ; 
 index . addColumnDef ( cdef ) ; 
 + logger . info ( " Creating new index : { } " , cdef ) ; 
 } 
 } 
 else
