BLEU SCORE: 0.04844232281716619

TEST MSG: Ninja fix exception message
GENERATED MSG: add explicit serialVersionUID to Token subclasses

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> index a357cb4 . . f8a17dc 100644 <nl> - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java <nl> @ @ - 252 , 8 + 252 , 8 @ @ public class TokenAllocation <nl> } <nl> else <nl> throw new ConfigurationException ( <nl> - String . format ( " Token allocation failed : the number of racks % d in datacentre % s is lower than its replication factor % d . " , <nl> - replicas , dc , racks ) ) ; <nl> + String . format ( " Token allocation failed : the number of racks % d in datacenter % s is lower than its replication factor % d . " , <nl> + racks , dc , replicas ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> index 4c4bd2e . . 5a01e8a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java <nl> @ @ - 366 , 7 + 366 , 6 @ @ public class QueryProcessor <nl> private static void validateColumnNames ( String keyspace , String columnFamily , Iterable < ByteBuffer > columns ) <nl> throws InvalidRequestException <nl> { <nl> - AbstractType < ? > comparator = ColumnFamily . getComparatorFor ( keyspace , columnFamily , null ) ; <nl> for ( ByteBuffer name : columns ) <nl> { <nl> if ( name . remaining ( ) > IColumn . MAX _ NAME _ LENGTH ) <nl> @ @ - 375 , 14 + 374 , 6 @ @ public class QueryProcessor <nl> IColumn . MAX _ NAME _ LENGTH ) ) ; <nl> if ( name . remaining ( ) = = 0 ) <nl> throw new InvalidRequestException ( " zero - length column name " ) ; <nl> - try <nl> - { <nl> - comparator . validate ( name ) ; <nl> - } <nl> - catch ( MarshalException e ) <nl> - { <nl> - throw new InvalidRequestException ( e . getMessage ( ) ) ; <nl> - } <nl> } <nl> } <nl> <nl> @ @ - 430 , 16 + 421 , 6 @ @ public class QueryProcessor <nl> throws InvalidRequestException <nl> { <nl> AbstractType < ? > comparator = ColumnFamily . getComparatorFor ( keyspace , columnFamily , null ) ; <nl> - try <nl> - { <nl> - comparator . validate ( start ) ; <nl> - comparator . validate ( finish ) ; <nl> - } <nl> - catch ( MarshalException e ) <nl> - { <nl> - throw new InvalidRequestException ( e . getMessage ( ) ) ; <nl> - } <nl> - <nl> Comparator < ByteBuffer > orderedComparator = reversed ? comparator . reverseComparator : comparator ; <nl> if ( start . remaining ( ) > 0 & & finish . remaining ( ) > 0 & & orderedComparator . compare ( start , finish ) > 0 ) <nl> throw new InvalidRequestException ( " range finish must come after start in traversal order " ) ;

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 index a357cb4 . . f8a17dc 100644 
 - - - a / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 + + + b / src / java / org / apache / cassandra / dht / tokenallocator / TokenAllocation . java 
 @ @ - 252 , 8 + 252 , 8 @ @ public class TokenAllocation 
 } 
 else 
 throw new ConfigurationException ( 
 - String . format ( " Token allocation failed : the number of racks % d in datacentre % s is lower than its replication factor % d . " , 
 - replicas , dc , racks ) ) ; 
 + String . format ( " Token allocation failed : the number of racks % d in datacenter % s is lower than its replication factor % d . " , 
 + racks , dc , replicas ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / cql / QueryProcessor . java b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 index 4c4bd2e . . 5a01e8a 100644 
 - - - a / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql / QueryProcessor . java 
 @ @ - 366 , 7 + 366 , 6 @ @ public class QueryProcessor 
 private static void validateColumnNames ( String keyspace , String columnFamily , Iterable < ByteBuffer > columns ) 
 throws InvalidRequestException 
 { 
 - AbstractType < ? > comparator = ColumnFamily . getComparatorFor ( keyspace , columnFamily , null ) ; 
 for ( ByteBuffer name : columns ) 
 { 
 if ( name . remaining ( ) > IColumn . MAX _ NAME _ LENGTH ) 
 @ @ - 375 , 14 + 374 , 6 @ @ public class QueryProcessor 
 IColumn . MAX _ NAME _ LENGTH ) ) ; 
 if ( name . remaining ( ) = = 0 ) 
 throw new InvalidRequestException ( " zero - length column name " ) ; 
 - try 
 - { 
 - comparator . validate ( name ) ; 
 - } 
 - catch ( MarshalException e ) 
 - { 
 - throw new InvalidRequestException ( e . getMessage ( ) ) ; 
 - } 
 } 
 } 
 
 @ @ - 430 , 16 + 421 , 6 @ @ public class QueryProcessor 
 throws InvalidRequestException 
 { 
 AbstractType < ? > comparator = ColumnFamily . getComparatorFor ( keyspace , columnFamily , null ) ; 
 - try 
 - { 
 - comparator . validate ( start ) ; 
 - comparator . validate ( finish ) ; 
 - } 
 - catch ( MarshalException e ) 
 - { 
 - throw new InvalidRequestException ( e . getMessage ( ) ) ; 
 - } 
 - 
 Comparator < ByteBuffer > orderedComparator = reversed ? comparator . reverseComparator : comparator ; 
 if ( start . remaining ( ) > 0 & & finish . remaining ( ) > 0 & & orderedComparator . compare ( start , finish ) > 0 ) 
 throw new InvalidRequestException ( " range finish must come after start in traversal order " ) ;
