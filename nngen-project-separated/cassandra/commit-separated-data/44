BLEU SCORE: 0.11386050660556932

TEST MSG: Streaming needs to synchronise access to LifecycleTransaction
GENERATED MSG: Prevent concurrent access to lifecycle txn when streaming

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f9b59df . . 01d4789 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 0 . 18 <nl> + * Streaming needs to synchronise access to LifecycleTransaction ( CASSANDRA - 14554 ) <nl> * Fix cassandra - stress write hang with default options ( CASSANDRA - 14616 ) <nl> * Differentiate between slices and RTs when decoding legacy bounds ( CASSANDRA - 14919 ) <nl> * CommitLogReplayer . handleReplayError should print stack traces ( CASSANDRA - 14589 ) <nl> diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> index 4c7bc46 . . c455c4c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java <nl> @ @ - 475 , 15 + 475 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean <nl> return directories ; <nl> } <nl> <nl> - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleTransaction txn ) <nl> + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( sstableLevel ) ; <nl> - return createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; <nl> + return createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector metadataCollector , SerializationHeader header , LifecycleTransaction txn ) <nl> + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector metadataCollector , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - return getCompactionStrategyManager ( ) . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , metadataCollector , header , txn ) ; <nl> + return getCompactionStrategyManager ( ) . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , metadataCollector , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> public boolean supportsEarlyOpen ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> index a80a6f4 . . 9f07691 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import com . google . common . util . concurrent . RateLimiter ; <nl> <nl> import org . apache . cassandra . db . Directories ; <nl> import org . apache . cassandra . db . SerializationHeader ; <nl> - import org . apache . cassandra . db . lifecycle . SSTableSet ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTableMultiWriter ; <nl> import org . apache . cassandra . io . sstable . SimpleSSTableMultiWriter ; <nl> @ @ - 514 , 9 + 514 , 9 @ @ public abstract class AbstractCompactionStrategy <nl> return groupedSSTables ; <nl> } <nl> <nl> - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector meta , SerializationHeader header , LifecycleTransaction txn ) <nl> + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector meta , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - return SimpleSSTableMultiWriter . create ( descriptor , keyCount , repairedAt , cfs . metadata , meta , header , txn ) ; <nl> + return SimpleSSTableMultiWriter . create ( descriptor , keyCount , repairedAt , cfs . metadata , meta , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> public boolean supportsEarlyOpen ( ) <nl> diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> index a9bfbd2 . . 1d3d18c 100644 <nl> - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java <nl> @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . db . compaction ; <nl> import java . util . * ; <nl> import java . util . concurrent . Callable ; <nl> <nl> - import com . google . common . collect . Iterables ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 490 , 15 + 490 , 15 @ @ public class CompactionStrategyManager implements INotificationConsumer <nl> return Boolean . parseBoolean ( params . options ( ) . get ( AbstractCompactionStrategy . ONLY _ PURGE _ REPAIRED _ TOMBSTONES ) ) ; <nl> } <nl> <nl> - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector collector , SerializationHeader header , LifecycleTransaction txn ) <nl> + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector collector , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> if ( repairedAt = = ActiveRepairService . UNREPAIRED _ SSTABLE ) <nl> { <nl> - return unrepaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; <nl> + return unrepaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , lifecycleNewTracker ) ; <nl> } <nl> else <nl> { <nl> - return repaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; <nl> + return repaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , lifecycleNewTracker ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleNewTracker . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleNewTracker . java <nl> new file mode 100644 <nl> index 0000000 . . 9a0785c <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleNewTracker . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + <nl> + <nl> + package org . apache . cassandra . db . lifecycle ; <nl> + <nl> + import org . apache . cassandra . db . compaction . OperationType ; <nl> + import org . apache . cassandra . io . sstable . SSTable ; <nl> + <nl> + / * * <nl> + * An interface for tracking new sstables added to a LifecycleTransaction , possibly through some proxy . <nl> + * / <nl> + public interface LifecycleNewTracker <nl> + { <nl> + / * * <nl> + * Called when a new table is about to be created , so that this table can be tracked by a transaction . <nl> + * @ param table - the new table to be tracked <nl> + * / <nl> + void trackNew ( SSTable table ) ; <nl> + <nl> + <nl> + / * * <nl> + * Called when a new table is no longer required , so that this table can be untracked by a transaction . <nl> + * @ param table - the table to be untracked <nl> + * / <nl> + void untrackNew ( SSTable table ) ; <nl> + <nl> + / * * <nl> + * @ return the type of operation tracking these sstables <nl> + * / <nl> + OperationType opType ( ) ; <nl> + } <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> index 582c9d8 . . af9a80a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java <nl> @ @ - 55 , 7 + 55 , 7 @ @ import static org . apache . cassandra . utils . concurrent . Refs . selfRefs ; <nl> * action to occur at the beginning of the commit phase , but also * requires * that the prepareToCommit ( ) phase only take <nl> * actions that can be rolled back . <nl> * / <nl> - public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> + public class LifecycleTransaction extends Transactional . AbstractTransactional implements LifecycleNewTracker <nl> { <nl> private static final Logger logger = LoggerFactory . getLogger ( LifecycleTransaction . class ) ; <nl> <nl> @ @ - 176 , 6 + 176 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> return log ; <nl> } <nl> <nl> + @ Override / / LifecycleNewTracker <nl> public OperationType opType ( ) <nl> { <nl> return log . type ( ) ; <nl> @ @ - 523 , 11 + 524 , 15 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional <nl> return getFirst ( originals , null ) ; <nl> } <nl> <nl> + / / LifecycleNewTracker <nl> + <nl> + @ Override <nl> public void trackNew ( SSTable table ) <nl> { <nl> log . trackNew ( table ) ; <nl> } <nl> <nl> + @ Override <nl> public void untrackNew ( SSTable table ) <nl> { <nl> log . untrackNew ( table ) ; <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java <nl> index 8425a6d . . e9047ad 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java <nl> @ @ - 246 , 13 + 246 , 11 @ @ final class LogFile implements AutoCloseable <nl> <nl> void commit ( ) <nl> { <nl> - assert ! completed ( ) : " Already completed ! " ; <nl> addRecord ( LogRecord . makeCommit ( System . currentTimeMillis ( ) ) ) ; <nl> } <nl> <nl> void abort ( ) <nl> { <nl> - assert ! completed ( ) : " Already completed ! " ; <nl> addRecord ( LogRecord . makeAbort ( System . currentTimeMillis ( ) ) ) ; <nl> } <nl> <nl> @ @ - 281 , 20 + 279 , 13 @ @ final class LogFile implements AutoCloseable <nl> <nl> void add ( Type type , SSTable table ) <nl> { <nl> - add ( makeRecord ( type , table ) ) ; <nl> - } <nl> - <nl> - void add ( LogRecord record ) <nl> - { <nl> - if ( ! addRecord ( record ) ) <nl> - throw new IllegalStateException ( ) ; <nl> + addRecord ( makeRecord ( type , table ) ) ; <nl> } <nl> <nl> public void addAll ( Type type , Iterable < SSTableReader > toBulkAdd ) <nl> { <nl> for ( LogRecord record : makeRecords ( type , toBulkAdd ) . values ( ) ) <nl> - if ( ! addRecord ( record ) ) <nl> - throw new IllegalStateException ( ) ; <nl> + addRecord ( record ) ; <nl> } <nl> <nl> Map < SSTable , LogRecord > makeRecords ( Type type , Iterable < SSTableReader > tables ) <nl> @ @ - 332 , 14 + 323 , 17 @ @ final class LogFile implements AutoCloseable <nl> return record . asType ( type ) ; <nl> } <nl> <nl> - private boolean addRecord ( LogRecord record ) <nl> + void addRecord ( LogRecord record ) <nl> { <nl> + if ( completed ( ) ) <nl> + throw new IllegalStateException ( " Transaction already completed " ) ; <nl> + <nl> if ( records . contains ( record ) ) <nl> - return false ; <nl> + throw new IllegalStateException ( " Record already exists " ) ; <nl> <nl> replicas . append ( record ) ; <nl> - <nl> - return records . add ( record ) ; <nl> + if ( ! records . add ( record ) ) <nl> + throw new IllegalStateException ( " Failed to add record " ) ; <nl> } <nl> <nl> void remove ( Type type , SSTable table ) <nl> diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> index a10bcd2 . . 00a222a 100644 <nl> - - - a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> + + + b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java <nl> @ @ - 164 , 7 + 164 , 7 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran <nl> return new SSTableTidier ( reader , true , this ) ; <nl> } <nl> <nl> - txnFile . add ( logRecord ) ; <nl> + txnFile . addRecord ( logRecord ) ; <nl> <nl> if ( tracker ! = null ) <nl> tracker . notifyDeleting ( reader ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java <nl> index fd1b9a7 . . ded070e 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ import java . util . UUID ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . RowIndexEntry ; <nl> import org . apache . cassandra . db . SerializationHeader ; <nl> - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . format . SSTableWriter ; <nl> @ @ - 109 , 9 + 109 , 9 @ @ public class SimpleSSTableMultiWriter implements SSTableMultiWriter <nl> CFMetaData cfm , <nl> MetadataCollector metadataCollector , <nl> SerializationHeader header , <nl> - LifecycleTransaction txn ) <nl> + LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - SSTableWriter writer = SSTableWriter . create ( descriptor , keyCount , repairedAt , cfm , metadataCollector , header , txn ) ; <nl> + SSTableWriter writer = SSTableWriter . create ( descriptor , keyCount , repairedAt , cfm , metadataCollector , header , lifecycleNewTracker ) ; <nl> return new SimpleSSTableMultiWriter ( writer ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java <nl> index 5f35029 . . fcc23a2 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . RowIndexEntry ; <nl> import org . apache . cassandra . db . SerializationHeader ; <nl> - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . apache . cassandra . db . rows . UnfilteredRowIterator ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> @ @ - 90 , 16 + 90 , 16 @ @ public abstract class SSTableWriter extends SSTable implements Transactional <nl> CFMetaData metadata , <nl> MetadataCollector metadataCollector , <nl> SerializationHeader header , <nl> - LifecycleTransaction txn ) <nl> + LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> Factory writerFactory = descriptor . getFormat ( ) . getWriterFactory ( ) ; <nl> - return writerFactory . open ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , txn ) ; <nl> + return writerFactory . open ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> - public static SSTableWriter create ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleTransaction txn ) <nl> + public static SSTableWriter create ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> CFMetaData metadata = Schema . instance . getCFMetaData ( descriptor ) ; <nl> - return create ( metadata , descriptor , keyCount , repairedAt , sstableLevel , header , txn ) ; <nl> + return create ( metadata , descriptor , keyCount , repairedAt , sstableLevel , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> public static SSTableWriter create ( CFMetaData metadata , <nl> @ @ - 108 , 21 + 108 , 21 @ @ public abstract class SSTableWriter extends SSTable implements Transactional <nl> long repairedAt , <nl> int sstableLevel , <nl> SerializationHeader header , <nl> - LifecycleTransaction txn ) <nl> + LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( sstableLevel ) ; <nl> - return create ( descriptor , keyCount , repairedAt , metadata , collector , header , txn ) ; <nl> + return create ( descriptor , keyCount , repairedAt , metadata , collector , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> - public static SSTableWriter create ( String filename , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleTransaction txn ) <nl> + public static SSTableWriter create ( String filename , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , sstableLevel , header , txn ) ; <nl> + return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , sstableLevel , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> @ VisibleForTesting <nl> - public static SSTableWriter create ( String filename , long keyCount , long repairedAt , SerializationHeader header , LifecycleTransaction txn ) <nl> + public static SSTableWriter create ( String filename , long keyCount , long repairedAt , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , 0 , header , txn ) ; <nl> + return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , 0 , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> private static Set < Component > components ( CFMetaData metadata ) <nl> @ @ - 285 , 6 + 285 , 6 @ @ public abstract class SSTableWriter extends SSTable implements Transactional <nl> CFMetaData metadata , <nl> MetadataCollector metadataCollector , <nl> SerializationHeader header , <nl> - LifecycleTransaction txn ) ; <nl> + LifecycleNewTracker lifecycleNewTracker ) ; <nl> } <nl> } <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java <nl> index ae93c5f . . 360ef8a 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import java . util . Set ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . db . RowIndexEntry ; <nl> import org . apache . cassandra . db . SerializationHeader ; <nl> - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . apache . cassandra . io . sstable . Component ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . format . SSTableFormat ; <nl> @ @ - 88 , 9 + 88 , 9 @ @ public class BigFormat implements SSTableFormat <nl> CFMetaData metadata , <nl> MetadataCollector metadataCollector , <nl> SerializationHeader header , <nl> - LifecycleTransaction txn ) <nl> + LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - return new BigTableWriter ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , txn ) ; <nl> + return new BigTableWriter ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , lifecycleNewTracker ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> index 0d500c1 . . f733619 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java <nl> @ @ - 21 , 12 + 21 , 12 @ @ import java . io . * ; <nl> import java . util . Map ; <nl> <nl> import org . apache . cassandra . db . * ; <nl> - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; <nl> import org . apache . cassandra . db . transform . Transformation ; <nl> import org . apache . cassandra . io . sstable . * ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . io . sstable . format . SSTableWriter ; <nl> <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> @ @ - 63 , 10 + 63 , 10 @ @ public class BigTableWriter extends SSTableWriter <nl> CFMetaData metadata , <nl> MetadataCollector metadataCollector , <nl> SerializationHeader header , <nl> - LifecycleTransaction txn ) <nl> + LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> super ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header ) ; <nl> - txn . trackNew ( this ) ; / / must track before any files are created <nl> + lifecycleNewTracker . trackNew ( this ) ; / / must track before any files are created <nl> <nl> if ( compression ) <nl> { <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamReader . java b / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> index 4ca7937 . . 07278cb 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamReader . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import com . ning . compress . lzf . LZFInputStream ; <nl> import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . Schema ; <nl> import org . apache . cassandra . db . * ; <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . apache . cassandra . db . rows . * ; <nl> import org . apache . cassandra . io . sstable . Descriptor ; <nl> import org . apache . cassandra . io . sstable . SSTableMultiWriter ; <nl> @ @ - 49 , 8 + 50 , 6 @ @ import org . apache . cassandra . io . util . TrackedInputStream ; <nl> import org . apache . cassandra . utils . FBUtilities ; <nl> import org . apache . cassandra . utils . Pair ; <nl> <nl> - import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; <nl> - <nl> / * * <nl> * StreamReader reads from stream and writes to SSTable . <nl> * / <nl> @ @ - 156 , 7 + 155 , 8 @ @ public class StreamReader <nl> throw new IOException ( " Insufficient disk space to store " + totalSize + " bytes " ) ; <nl> desc = Descriptor . fromFilename ( cfs . getSSTablePath ( cfs . getDirectories ( ) . getLocationForDisk ( localDir ) , format ) ) ; <nl> <nl> - return cfs . createSSTableMultiWriter ( desc , estimatedKeys , repairedAt , sstableLevel , getHeader ( cfs . metadata ) , session . getTransaction ( cfId ) ) ; <nl> + return cfs . createSSTableMultiWriter ( desc , estimatedKeys , repairedAt , sstableLevel , getHeader ( cfs . metadata ) , <nl> + session . getReceivingTask ( cfId ) . createLifecycleNewTracker ( ) ) ; <nl> } <nl> <nl> protected long totalSize ( ) <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java b / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java <nl> index 9e65d34 . . ea82d9b 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java <nl> @ @ - 26 , 6 + 26 , 8 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> <nl> import com . google . common . collect . Iterables ; <nl> + <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . slf4j . Logger ; <nl> import org . slf4j . LoggerFactory ; <nl> <nl> @ @ - 42 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . view . View ; <nl> import org . apache . cassandra . dht . Bounds ; <nl> import org . apache . cassandra . dht . Token ; <nl> import org . apache . cassandra . io . sstable . ISSTableScanner ; <nl> + import org . apache . cassandra . io . sstable . SSTable ; <nl> import org . apache . cassandra . io . sstable . SSTableMultiWriter ; <nl> import org . apache . cassandra . io . sstable . format . SSTableReader ; <nl> import org . apache . cassandra . utils . JVMStabilityInspector ; <nl> @ @ - 132 , 11 + 135 , 39 @ @ public class StreamReceiveTask extends StreamTask <nl> return totalSize ; <nl> } <nl> <nl> - public synchronized LifecycleTransaction getTransaction ( ) <nl> + / * * <nl> + * @ return a LifecycleNewTracker whose operations are synchronised on this StreamReceiveTask . <nl> + * / <nl> + public synchronized LifecycleNewTracker createLifecycleNewTracker ( ) <nl> { <nl> if ( done ) <nl> - throw new RuntimeException ( String . format ( " Stream receive task { } of cf { } already finished . " , session . planId ( ) , cfId ) ) ; <nl> - return txn ; <nl> + throw new RuntimeException ( String . format ( " Stream receive task % s of cf % s already finished . " , session . planId ( ) , cfId ) ) ; <nl> + <nl> + return new LifecycleNewTracker ( ) <nl> + { <nl> + @ Override <nl> + public void trackNew ( SSTable table ) <nl> + { <nl> + synchronized ( StreamReceiveTask . this ) <nl> + { <nl> + txn . trackNew ( table ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void untrackNew ( SSTable table ) <nl> + { <nl> + synchronized ( StreamReceiveTask . this ) <nl> + { <nl> + txn . untrackNew ( table ) ; <nl> + } <nl> + } <nl> + <nl> + public OperationType opType ( ) <nl> + { <nl> + return txn . opType ( ) ; <nl> + } <nl> + } ; <nl> } <nl> <nl> private static class OnCompletionRunnable implements Runnable <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> index d57fae8 . . c79a711 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java <nl> @ @ - 208 , 10 + 208 , 10 @ @ public class StreamSession implements IEndpointStateChangeSubscriber <nl> } <nl> <nl> <nl> - public LifecycleTransaction getTransaction ( UUID cfId ) <nl> + StreamReceiveTask getReceivingTask ( UUID cfId ) <nl> { <nl> assert receivers . containsKey ( cfId ) ; <nl> - return receivers . get ( cfId ) . getTransaction ( ) ; <nl> + return receivers . get ( cfId ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> index fc2faea . . 757add9 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . nio . file . Paths ; <nl> import java . util . * ; <nl> import java . util . concurrent . ExecutionException ; <nl> <nl> + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> @ @ - 632 , 11 + 633 , 11 @ @ public class ScrubTest <nl> assertOrdered ( Util . cmd ( cfs ) . filterOn ( colName , Operator . EQ , 1L ) . build ( ) , numRows / 2 ) ; <nl> } <nl> <nl> - private static SSTableMultiWriter createTestWriter ( Descriptor descriptor , long keyCount , CFMetaData metadata , LifecycleTransaction txn ) <nl> + private static SSTableMultiWriter createTestWriter ( Descriptor descriptor , long keyCount , CFMetaData metadata , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> SerializationHeader header = new SerializationHeader ( true , metadata , metadata . partitionColumns ( ) , EncodingStats . NO _ STATS ) ; <nl> MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( 0 ) ; <nl> - return new TestMultiWriter ( new TestWriter ( descriptor , keyCount , 0 , metadata , collector , header , txn ) ) ; <nl> + return new TestMultiWriter ( new TestWriter ( descriptor , keyCount , 0 , metadata , collector , header , lifecycleNewTracker ) ) ; <nl> } <nl> <nl> private static class TestMultiWriter extends SimpleSSTableMultiWriter <nl> @ @ - 653 , 9 + 654 , 9 @ @ public class ScrubTest <nl> private static class TestWriter extends BigTableWriter <nl> { <nl> TestWriter ( Descriptor descriptor , long keyCount , long repairedAt , CFMetaData metadata , <nl> - MetadataCollector collector , SerializationHeader header , LifecycleTransaction txn ) <nl> + MetadataCollector collector , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) <nl> { <nl> - super ( descriptor , keyCount , repairedAt , metadata , collector , header , txn ) ; <nl> + super ( descriptor , keyCount , repairedAt , metadata , collector , header , lifecycleNewTracker ) ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f9b59df . . 01d4789 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 0 . 18 
 + * Streaming needs to synchronise access to LifecycleTransaction ( CASSANDRA - 14554 ) 
 * Fix cassandra - stress write hang with default options ( CASSANDRA - 14616 ) 
 * Differentiate between slices and RTs when decoding legacy bounds ( CASSANDRA - 14919 ) 
 * CommitLogReplayer . handleReplayError should print stack traces ( CASSANDRA - 14589 ) 
 diff - - git a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 index 4c7bc46 . . c455c4c 100644 
 - - - a / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 + + + b / src / java / org / apache / cassandra / db / ColumnFamilyStore . java 
 @ @ - 475 , 15 + 475 , 15 @ @ public class ColumnFamilyStore implements ColumnFamilyStoreMBean 
 return directories ; 
 } 
 
 - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleTransaction txn ) 
 + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( sstableLevel ) ; 
 - return createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; 
 + return createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , lifecycleNewTracker ) ; 
 } 
 
 - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector metadataCollector , SerializationHeader header , LifecycleTransaction txn ) 
 + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector metadataCollector , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - return getCompactionStrategyManager ( ) . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , metadataCollector , header , txn ) ; 
 + return getCompactionStrategyManager ( ) . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , metadataCollector , header , lifecycleNewTracker ) ; 
 } 
 
 public boolean supportsEarlyOpen ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 index a80a6f4 . . 9f07691 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / AbstractCompactionStrategy . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import com . google . common . util . concurrent . RateLimiter ; 
 
 import org . apache . cassandra . db . Directories ; 
 import org . apache . cassandra . db . SerializationHeader ; 
 - import org . apache . cassandra . db . lifecycle . SSTableSet ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTableMultiWriter ; 
 import org . apache . cassandra . io . sstable . SimpleSSTableMultiWriter ; 
 @ @ - 514 , 9 + 514 , 9 @ @ public abstract class AbstractCompactionStrategy 
 return groupedSSTables ; 
 } 
 
 - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector meta , SerializationHeader header , LifecycleTransaction txn ) 
 + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector meta , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - return SimpleSSTableMultiWriter . create ( descriptor , keyCount , repairedAt , cfs . metadata , meta , header , txn ) ; 
 + return SimpleSSTableMultiWriter . create ( descriptor , keyCount , repairedAt , cfs . metadata , meta , header , lifecycleNewTracker ) ; 
 } 
 
 public boolean supportsEarlyOpen ( ) 
 diff - - git a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 index a9bfbd2 . . 1d3d18c 100644 
 - - - a / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 + + + b / src / java / org / apache / cassandra / db / compaction / CompactionStrategyManager . java 
 @ @ - 21 , 7 + 21 , 7 @ @ package org . apache . cassandra . db . compaction ; 
 import java . util . * ; 
 import java . util . concurrent . Callable ; 
 
 - import com . google . common . collect . Iterables ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 490 , 15 + 490 , 15 @ @ public class CompactionStrategyManager implements INotificationConsumer 
 return Boolean . parseBoolean ( params . options ( ) . get ( AbstractCompactionStrategy . ONLY _ PURGE _ REPAIRED _ TOMBSTONES ) ) ; 
 } 
 
 - public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector collector , SerializationHeader header , LifecycleTransaction txn ) 
 + public SSTableMultiWriter createSSTableMultiWriter ( Descriptor descriptor , long keyCount , long repairedAt , MetadataCollector collector , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 if ( repairedAt = = ActiveRepairService . UNREPAIRED _ SSTABLE ) 
 { 
 - return unrepaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; 
 + return unrepaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , lifecycleNewTracker ) ; 
 } 
 else 
 { 
 - return repaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , txn ) ; 
 + return repaired . createSSTableMultiWriter ( descriptor , keyCount , repairedAt , collector , header , lifecycleNewTracker ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleNewTracker . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleNewTracker . java 
 new file mode 100644 
 index 0000000 . . 9a0785c 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleNewTracker . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + 
 + 
 + package org . apache . cassandra . db . lifecycle ; 
 + 
 + import org . apache . cassandra . db . compaction . OperationType ; 
 + import org . apache . cassandra . io . sstable . SSTable ; 
 + 
 + / * * 
 + * An interface for tracking new sstables added to a LifecycleTransaction , possibly through some proxy . 
 + * / 
 + public interface LifecycleNewTracker 
 + { 
 + / * * 
 + * Called when a new table is about to be created , so that this table can be tracked by a transaction . 
 + * @ param table - the new table to be tracked 
 + * / 
 + void trackNew ( SSTable table ) ; 
 + 
 + 
 + / * * 
 + * Called when a new table is no longer required , so that this table can be untracked by a transaction . 
 + * @ param table - the table to be untracked 
 + * / 
 + void untrackNew ( SSTable table ) ; 
 + 
 + / * * 
 + * @ return the type of operation tracking these sstables 
 + * / 
 + OperationType opType ( ) ; 
 + } 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 index 582c9d8 . . af9a80a 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LifecycleTransaction . java 
 @ @ - 55 , 7 + 55 , 7 @ @ import static org . apache . cassandra . utils . concurrent . Refs . selfRefs ; 
 * action to occur at the beginning of the commit phase , but also * requires * that the prepareToCommit ( ) phase only take 
 * actions that can be rolled back . 
 * / 
 - public class LifecycleTransaction extends Transactional . AbstractTransactional 
 + public class LifecycleTransaction extends Transactional . AbstractTransactional implements LifecycleNewTracker 
 { 
 private static final Logger logger = LoggerFactory . getLogger ( LifecycleTransaction . class ) ; 
 
 @ @ - 176 , 6 + 176 , 7 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 return log ; 
 } 
 
 + @ Override / / LifecycleNewTracker 
 public OperationType opType ( ) 
 { 
 return log . type ( ) ; 
 @ @ - 523 , 11 + 524 , 15 @ @ public class LifecycleTransaction extends Transactional . AbstractTransactional 
 return getFirst ( originals , null ) ; 
 } 
 
 + / / LifecycleNewTracker 
 + 
 + @ Override 
 public void trackNew ( SSTable table ) 
 { 
 log . trackNew ( table ) ; 
 } 
 
 + @ Override 
 public void untrackNew ( SSTable table ) 
 { 
 log . untrackNew ( table ) ; 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java 
 index 8425a6d . . e9047ad 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogFile . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogFile . java 
 @ @ - 246 , 13 + 246 , 11 @ @ final class LogFile implements AutoCloseable 
 
 void commit ( ) 
 { 
 - assert ! completed ( ) : " Already completed ! " ; 
 addRecord ( LogRecord . makeCommit ( System . currentTimeMillis ( ) ) ) ; 
 } 
 
 void abort ( ) 
 { 
 - assert ! completed ( ) : " Already completed ! " ; 
 addRecord ( LogRecord . makeAbort ( System . currentTimeMillis ( ) ) ) ; 
 } 
 
 @ @ - 281 , 20 + 279 , 13 @ @ final class LogFile implements AutoCloseable 
 
 void add ( Type type , SSTable table ) 
 { 
 - add ( makeRecord ( type , table ) ) ; 
 - } 
 - 
 - void add ( LogRecord record ) 
 - { 
 - if ( ! addRecord ( record ) ) 
 - throw new IllegalStateException ( ) ; 
 + addRecord ( makeRecord ( type , table ) ) ; 
 } 
 
 public void addAll ( Type type , Iterable < SSTableReader > toBulkAdd ) 
 { 
 for ( LogRecord record : makeRecords ( type , toBulkAdd ) . values ( ) ) 
 - if ( ! addRecord ( record ) ) 
 - throw new IllegalStateException ( ) ; 
 + addRecord ( record ) ; 
 } 
 
 Map < SSTable , LogRecord > makeRecords ( Type type , Iterable < SSTableReader > tables ) 
 @ @ - 332 , 14 + 323 , 17 @ @ final class LogFile implements AutoCloseable 
 return record . asType ( type ) ; 
 } 
 
 - private boolean addRecord ( LogRecord record ) 
 + void addRecord ( LogRecord record ) 
 { 
 + if ( completed ( ) ) 
 + throw new IllegalStateException ( " Transaction already completed " ) ; 
 + 
 if ( records . contains ( record ) ) 
 - return false ; 
 + throw new IllegalStateException ( " Record already exists " ) ; 
 
 replicas . append ( record ) ; 
 - 
 - return records . add ( record ) ; 
 + if ( ! records . add ( record ) ) 
 + throw new IllegalStateException ( " Failed to add record " ) ; 
 } 
 
 void remove ( Type type , SSTable table ) 
 diff - - git a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 index a10bcd2 . . 00a222a 100644 
 - - - a / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 + + + b / src / java / org / apache / cassandra / db / lifecycle / LogTransaction . java 
 @ @ - 164 , 7 + 164 , 7 @ @ class LogTransaction extends Transactional . AbstractTransactional implements Tran 
 return new SSTableTidier ( reader , true , this ) ; 
 } 
 
 - txnFile . add ( logRecord ) ; 
 + txnFile . addRecord ( logRecord ) ; 
 
 if ( tracker ! = null ) 
 tracker . notifyDeleting ( reader ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java 
 index fd1b9a7 . . ded070e 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / SimpleSSTableMultiWriter . java 
 @ @ - 25 , 7 + 25 , 7 @ @ import java . util . UUID ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . RowIndexEntry ; 
 import org . apache . cassandra . db . SerializationHeader ; 
 - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . sstable . format . SSTableWriter ; 
 @ @ - 109 , 9 + 109 , 9 @ @ public class SimpleSSTableMultiWriter implements SSTableMultiWriter 
 CFMetaData cfm , 
 MetadataCollector metadataCollector , 
 SerializationHeader header , 
 - LifecycleTransaction txn ) 
 + LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - SSTableWriter writer = SSTableWriter . create ( descriptor , keyCount , repairedAt , cfm , metadataCollector , header , txn ) ; 
 + SSTableWriter writer = SSTableWriter . create ( descriptor , keyCount , repairedAt , cfm , metadataCollector , header , lifecycleNewTracker ) ; 
 return new SimpleSSTableMultiWriter ( writer ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java 
 index 5f35029 . . fcc23a2 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / SSTableWriter . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . RowIndexEntry ; 
 import org . apache . cassandra . db . SerializationHeader ; 
 - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . apache . cassandra . db . rows . UnfilteredRowIterator ; 
 import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 @ @ - 90 , 16 + 90 , 16 @ @ public abstract class SSTableWriter extends SSTable implements Transactional 
 CFMetaData metadata , 
 MetadataCollector metadataCollector , 
 SerializationHeader header , 
 - LifecycleTransaction txn ) 
 + LifecycleNewTracker lifecycleNewTracker ) 
 { 
 Factory writerFactory = descriptor . getFormat ( ) . getWriterFactory ( ) ; 
 - return writerFactory . open ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , txn ) ; 
 + return writerFactory . open ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , lifecycleNewTracker ) ; 
 } 
 
 - public static SSTableWriter create ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleTransaction txn ) 
 + public static SSTableWriter create ( Descriptor descriptor , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 CFMetaData metadata = Schema . instance . getCFMetaData ( descriptor ) ; 
 - return create ( metadata , descriptor , keyCount , repairedAt , sstableLevel , header , txn ) ; 
 + return create ( metadata , descriptor , keyCount , repairedAt , sstableLevel , header , lifecycleNewTracker ) ; 
 } 
 
 public static SSTableWriter create ( CFMetaData metadata , 
 @ @ - 108 , 21 + 108 , 21 @ @ public abstract class SSTableWriter extends SSTable implements Transactional 
 long repairedAt , 
 int sstableLevel , 
 SerializationHeader header , 
 - LifecycleTransaction txn ) 
 + LifecycleNewTracker lifecycleNewTracker ) 
 { 
 MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( sstableLevel ) ; 
 - return create ( descriptor , keyCount , repairedAt , metadata , collector , header , txn ) ; 
 + return create ( descriptor , keyCount , repairedAt , metadata , collector , header , lifecycleNewTracker ) ; 
 } 
 
 - public static SSTableWriter create ( String filename , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleTransaction txn ) 
 + public static SSTableWriter create ( String filename , long keyCount , long repairedAt , int sstableLevel , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , sstableLevel , header , txn ) ; 
 + return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , sstableLevel , header , lifecycleNewTracker ) ; 
 } 
 
 @ VisibleForTesting 
 - public static SSTableWriter create ( String filename , long keyCount , long repairedAt , SerializationHeader header , LifecycleTransaction txn ) 
 + public static SSTableWriter create ( String filename , long keyCount , long repairedAt , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , 0 , header , txn ) ; 
 + return create ( Descriptor . fromFilename ( filename ) , keyCount , repairedAt , 0 , header , lifecycleNewTracker ) ; 
 } 
 
 private static Set < Component > components ( CFMetaData metadata ) 
 @ @ - 285 , 6 + 285 , 6 @ @ public abstract class SSTableWriter extends SSTable implements Transactional 
 CFMetaData metadata , 
 MetadataCollector metadataCollector , 
 SerializationHeader header , 
 - LifecycleTransaction txn ) ; 
 + LifecycleNewTracker lifecycleNewTracker ) ; 
 } 
 } 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java 
 index ae93c5f . . 360ef8a 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigFormat . java 
 @ @ - 22 , 7 + 22 , 7 @ @ import java . util . Set ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . db . RowIndexEntry ; 
 import org . apache . cassandra . db . SerializationHeader ; 
 - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . apache . cassandra . io . sstable . Component ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . format . SSTableFormat ; 
 @ @ - 88 , 9 + 88 , 9 @ @ public class BigFormat implements SSTableFormat 
 CFMetaData metadata , 
 MetadataCollector metadataCollector , 
 SerializationHeader header , 
 - LifecycleTransaction txn ) 
 + LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - return new BigTableWriter ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , txn ) ; 
 + return new BigTableWriter ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header , lifecycleNewTracker ) ; 
 } 
 } 
 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 index 0d500c1 . . f733619 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / format / big / BigTableWriter . java 
 @ @ - 21 , 12 + 21 , 12 @ @ import java . io . * ; 
 import java . util . Map ; 
 
 import org . apache . cassandra . db . * ; 
 - import org . apache . cassandra . db . lifecycle . LifecycleTransaction ; 
 import org . apache . cassandra . db . transform . Transformation ; 
 import org . apache . cassandra . io . sstable . * ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . io . sstable . format . SSTableWriter ; 
 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 import org . apache . cassandra . config . CFMetaData ; 
 @ @ - 63 , 10 + 63 , 10 @ @ public class BigTableWriter extends SSTableWriter 
 CFMetaData metadata , 
 MetadataCollector metadataCollector , 
 SerializationHeader header , 
 - LifecycleTransaction txn ) 
 + LifecycleNewTracker lifecycleNewTracker ) 
 { 
 super ( descriptor , keyCount , repairedAt , metadata , metadataCollector , header ) ; 
 - txn . trackNew ( this ) ; / / must track before any files are created 
 + lifecycleNewTracker . trackNew ( this ) ; / / must track before any files are created 
 
 if ( compression ) 
 { 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamReader . java b / src / java / org / apache / cassandra / streaming / StreamReader . java 
 index 4ca7937 . . 07278cb 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamReader . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamReader . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import com . ning . compress . lzf . LZFInputStream ; 
 import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . Schema ; 
 import org . apache . cassandra . db . * ; 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . apache . cassandra . db . rows . * ; 
 import org . apache . cassandra . io . sstable . Descriptor ; 
 import org . apache . cassandra . io . sstable . SSTableMultiWriter ; 
 @ @ - 49 , 8 + 50 , 6 @ @ import org . apache . cassandra . io . util . TrackedInputStream ; 
 import org . apache . cassandra . utils . FBUtilities ; 
 import org . apache . cassandra . utils . Pair ; 
 
 - import static org . apache . cassandra . utils . Throwables . extractIOExceptionCause ; 
 - 
 / * * 
 * StreamReader reads from stream and writes to SSTable . 
 * / 
 @ @ - 156 , 7 + 155 , 8 @ @ public class StreamReader 
 throw new IOException ( " Insufficient disk space to store " + totalSize + " bytes " ) ; 
 desc = Descriptor . fromFilename ( cfs . getSSTablePath ( cfs . getDirectories ( ) . getLocationForDisk ( localDir ) , format ) ) ; 
 
 - return cfs . createSSTableMultiWriter ( desc , estimatedKeys , repairedAt , sstableLevel , getHeader ( cfs . metadata ) , session . getTransaction ( cfId ) ) ; 
 + return cfs . createSSTableMultiWriter ( desc , estimatedKeys , repairedAt , sstableLevel , getHeader ( cfs . metadata ) , 
 + session . getReceivingTask ( cfId ) . createLifecycleNewTracker ( ) ) ; 
 } 
 
 protected long totalSize ( ) 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java b / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java 
 index 9e65d34 . . ea82d9b 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamReceiveTask . java 
 @ @ - 26 , 6 + 26 , 8 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 
 import com . google . common . collect . Iterables ; 
 + 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . slf4j . Logger ; 
 import org . slf4j . LoggerFactory ; 
 
 @ @ - 42 , 6 + 44 , 7 @ @ import org . apache . cassandra . db . view . View ; 
 import org . apache . cassandra . dht . Bounds ; 
 import org . apache . cassandra . dht . Token ; 
 import org . apache . cassandra . io . sstable . ISSTableScanner ; 
 + import org . apache . cassandra . io . sstable . SSTable ; 
 import org . apache . cassandra . io . sstable . SSTableMultiWriter ; 
 import org . apache . cassandra . io . sstable . format . SSTableReader ; 
 import org . apache . cassandra . utils . JVMStabilityInspector ; 
 @ @ - 132 , 11 + 135 , 39 @ @ public class StreamReceiveTask extends StreamTask 
 return totalSize ; 
 } 
 
 - public synchronized LifecycleTransaction getTransaction ( ) 
 + / * * 
 + * @ return a LifecycleNewTracker whose operations are synchronised on this StreamReceiveTask . 
 + * / 
 + public synchronized LifecycleNewTracker createLifecycleNewTracker ( ) 
 { 
 if ( done ) 
 - throw new RuntimeException ( String . format ( " Stream receive task { } of cf { } already finished . " , session . planId ( ) , cfId ) ) ; 
 - return txn ; 
 + throw new RuntimeException ( String . format ( " Stream receive task % s of cf % s already finished . " , session . planId ( ) , cfId ) ) ; 
 + 
 + return new LifecycleNewTracker ( ) 
 + { 
 + @ Override 
 + public void trackNew ( SSTable table ) 
 + { 
 + synchronized ( StreamReceiveTask . this ) 
 + { 
 + txn . trackNew ( table ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void untrackNew ( SSTable table ) 
 + { 
 + synchronized ( StreamReceiveTask . this ) 
 + { 
 + txn . untrackNew ( table ) ; 
 + } 
 + } 
 + 
 + public OperationType opType ( ) 
 + { 
 + return txn . opType ( ) ; 
 + } 
 + } ; 
 } 
 
 private static class OnCompletionRunnable implements Runnable 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamSession . java b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 index d57fae8 . . c79a711 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamSession . java 
 @ @ - 208 , 10 + 208 , 10 @ @ public class StreamSession implements IEndpointStateChangeSubscriber 
 } 
 
 
 - public LifecycleTransaction getTransaction ( UUID cfId ) 
 + StreamReceiveTask getReceivingTask ( UUID cfId ) 
 { 
 assert receivers . containsKey ( cfId ) ; 
 - return receivers . get ( cfId ) . getTransaction ( ) ; 
 + return receivers . get ( cfId ) ; 
 } 
 
 / * * 
 diff - - git a / test / unit / org / apache / cassandra / db / ScrubTest . java b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 index fc2faea . . 757add9 100644 
 - - - a / test / unit / org / apache / cassandra / db / ScrubTest . java 
 + + + b / test / unit / org / apache / cassandra / db / ScrubTest . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . nio . file . Paths ; 
 import java . util . * ; 
 import java . util . concurrent . ExecutionException ; 
 
 + import org . apache . cassandra . db . lifecycle . LifecycleNewTracker ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 @ @ - 632 , 11 + 633 , 11 @ @ public class ScrubTest 
 assertOrdered ( Util . cmd ( cfs ) . filterOn ( colName , Operator . EQ , 1L ) . build ( ) , numRows / 2 ) ; 
 } 
 
 - private static SSTableMultiWriter createTestWriter ( Descriptor descriptor , long keyCount , CFMetaData metadata , LifecycleTransaction txn ) 
 + private static SSTableMultiWriter createTestWriter ( Descriptor descriptor , long keyCount , CFMetaData metadata , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 SerializationHeader header = new SerializationHeader ( true , metadata , metadata . partitionColumns ( ) , EncodingStats . NO _ STATS ) ; 
 MetadataCollector collector = new MetadataCollector ( metadata . comparator ) . sstableLevel ( 0 ) ; 
 - return new TestMultiWriter ( new TestWriter ( descriptor , keyCount , 0 , metadata , collector , header , txn ) ) ; 
 + return new TestMultiWriter ( new TestWriter ( descriptor , keyCount , 0 , metadata , collector , header , lifecycleNewTracker ) ) ; 
 } 
 
 private static class TestMultiWriter extends SimpleSSTableMultiWriter 
 @ @ - 653 , 9 + 654 , 9 @ @ public class ScrubTest 
 private static class TestWriter extends BigTableWriter 
 { 
 TestWriter ( Descriptor descriptor , long keyCount , long repairedAt , CFMetaData metadata , 
 - MetadataCollector collector , SerializationHeader header , LifecycleTransaction txn ) 
 + MetadataCollector collector , SerializationHeader header , LifecycleNewTracker lifecycleNewTracker ) 
 { 
 - super ( descriptor , keyCount , repairedAt , metadata , collector , header , txn ) ; 
 + super ( descriptor , keyCount , repairedAt , metadata , collector , header , lifecycleNewTracker ) ; 
 } 
 
 @ Override

NEAREST DIFF:
ELIMINATEDSENTENCE
