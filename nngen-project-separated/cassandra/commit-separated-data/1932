BLEU SCORE: 0.018738883683389617

TEST MSG: ninja fix CommitLogAllocator error suppression on shutdown for CASSANDRA - 8474
GENERATED MSG: use waitOnFuture more often

TEST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> index 0771b7a . . 3f7e793 100644 <nl> - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java <nl> @ @ - 145 , 8 + 145 , 7 @ @ public class CommitLogSegmentManager <nl> } <nl> catch ( InterruptedException e ) <nl> { <nl> - / / shutdown signal ; exit cleanly <nl> - continue ; <nl> + throw new AssertionError ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 536 , 7 + 535 , 7 @ @ public class CommitLogSegmentManager <nl> public void shutdown ( ) <nl> { <nl> run = false ; <nl> - managerThread . interrupt ( ) ; <nl> + segmentManagementTasks . add ( Callables . < CommitLogSegment > returning ( null ) ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> index 1094a00 . . 978c2e2 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java <nl> @ @ - 229 , 7 + 229 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa <nl> } <nl> double maxLatency = 1 ; <nl> long maxPenalty = 1 ; <nl> - HashMap < InetAddress , Long > penalties = new HashMap < InetAddress , Long > ( ) ; <nl> + HashMap < InetAddress , Long > penalties = new HashMap < InetAddress , Long > ( samples . size ( ) ) ; <nl> / / We ' re going to weight the latency and time since last reply for each host against the worst one we see , to arrive at sort of a ' badness percentage ' for both of them . <nl> / / first , find the worst for each . <nl> for ( Map . Entry < InetAddress , ExponentiallyDecayingSample > entry : samples . entrySet ( ) )

TEST DIFF:
diff - - git a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 index 0771b7a . . 3f7e793 100644 
 - - - a / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 + + + b / src / java / org / apache / cassandra / db / commitlog / CommitLogSegmentManager . java 
 @ @ - 145 , 8 + 145 , 7 @ @ public class CommitLogSegmentManager 
 } 
 catch ( InterruptedException e ) 
 { 
 - / / shutdown signal ; exit cleanly 
 - continue ; 
 + throw new AssertionError ( ) ; 
 } 
 } 
 
 @ @ - 536 , 7 + 535 , 7 @ @ public class CommitLogSegmentManager 
 public void shutdown ( ) 
 { 
 run = false ; 
 - managerThread . interrupt ( ) ; 
 + segmentManagementTasks . add ( Callables . < CommitLogSegment > returning ( null ) ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 index 1094a00 . . 978c2e2 100644 
 - - - a / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 + + + b / src / java / org / apache / cassandra / locator / DynamicEndpointSnitch . java 
 @ @ - 229 , 7 + 229 , 7 @ @ public class DynamicEndpointSnitch extends AbstractEndpointSnitch implements ILa 
 } 
 double maxLatency = 1 ; 
 long maxPenalty = 1 ; 
 - HashMap < InetAddress , Long > penalties = new HashMap < InetAddress , Long > ( ) ; 
 + HashMap < InetAddress , Long > penalties = new HashMap < InetAddress , Long > ( samples . size ( ) ) ; 
 / / We ' re going to weight the latency and time since last reply for each host against the worst one we see , to arrive at sort of a ' badness percentage ' for both of them . 
 / / first , find the worst for each . 
 for ( Map . Entry < InetAddress , ExponentiallyDecayingSample > entry : samples . entrySet ( ) )
