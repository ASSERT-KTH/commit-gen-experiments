BLEU SCORE: 0.18393972058572117

TEST MSG: fix merges
GENERATED MSG: add missing WeightedQueue files

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index a3e524b . . 0b9d1a2 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 721 , 6 + 721 , 7 @ @ <nl> < src path = " $ { build . src . java } " / > <nl> < src path = " $ { build . src . gen - java } " / > <nl> 	 < compilerarg value = " - XDignore . symbol . file " / > <nl> + < compilerarg value = " - Xbootclasspath / p : $ { build . src . jdkoverride } " / > <nl> < classpath refid = " cassandra . classpath " / > <nl> < / javac > <nl> < antcall target = " createVersionPropFile " / > <nl> diff - - git a / src / java / org / apache / cassandra / db / PreHashedDecoratedKey . java b / src / java / org / apache / cassandra / db / PreHashedDecoratedKey . java <nl> new file mode 100644 <nl> index 0000000 . . 472cc19 <nl> - - - / dev / null <nl> + + + b / src / java / org / apache / cassandra / db / PreHashedDecoratedKey . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , software <nl> + * distributed under the License is distributed on an " AS IS " BASIS , <nl> + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> + * See the License for the specific language governing permissions and <nl> + * limitations under the License . <nl> + * / <nl> + package org . apache . cassandra . db ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + <nl> + import org . apache . cassandra . dht . Token ; <nl> + <nl> + public class PreHashedDecoratedKey extends BufferDecoratedKey <nl> + { <nl> + final long hash0 ; <nl> + final long hash1 ; <nl> + <nl> + public PreHashedDecoratedKey ( Token token , ByteBuffer key , long hash0 , long hash1 ) <nl> + { <nl> + super ( token , key ) ; <nl> + this . hash0 = hash0 ; <nl> + this . hash1 = hash1 ; <nl> + } <nl> + <nl> + @ Override <nl> + public void filterHash ( long [ ] dest ) <nl> + { <nl> + dest [ 0 ] = hash0 ; <nl> + dest [ 1 ] = hash1 ; <nl> + } <nl> + } <nl> diff - - git a / src / jdkoverride / java / util / zip / CRC32 . java b / src / jdkoverride / java / util / zip / CRC32 . java <nl> deleted file mode 100644 <nl> index 93e1e6f . . 0000000 <nl> - - - a / src / jdkoverride / java / util / zip / CRC32 . java <nl> + + + / dev / null <nl> @ @ - 1 , 42 + 0 , 0 @ @ <nl> - / * <nl> - * Licensed to the Apache Software Foundation ( ASF ) under one <nl> - * or more contributor license agreements . See the NOTICE file <nl> - * distributed with this work for additional information <nl> - * regarding copyright ownership . The ASF licenses this file <nl> - * to you under the Apache License , Version 2 . 0 ( the <nl> - * " License " ) ; you may not use this file except in compliance <nl> - * with the License . You may obtain a copy of the License at <nl> - * <nl> - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> - * <nl> - * Unless required by applicable law or agreed to in writing , software <nl> - * distributed under the License is distributed on an " AS IS " BASIS , <nl> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . <nl> - * See the License for the specific language governing permissions and <nl> - * limitations under the License . <nl> - * / <nl> - package java . util . zip ; <nl> - <nl> - import java . nio . ByteBuffer ; <nl> - <nl> - / * * <nl> - * A fake implementation of java . util . zip . CRC32 with the additonal JDK 8 methods so <nl> - * that when compiling using Java 7 we can link against those new methods and then <nl> - * avoid calling them at runtime if running with Java 7 . <nl> - * / <nl> - public class CRC32 implements Checksum <nl> - { <nl> - public CRC32 ( ) { } <nl> - <nl> - public void update ( int b ) { } <nl> - <nl> - public void update ( byte [ ] b , int off , int len ) { } <nl> - <nl> - public void update ( byte [ ] b ) { } <nl> - <nl> - public void update ( ByteBuffer buffer ) { } <nl> - <nl> - public void reset ( ) { } <nl> - <nl> - public long getValue ( ) { return 0L ; } <nl> - }
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index f98337e . . 513f5d5 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 34 , 6 + 34 , 7 @ @ <nl> * add asynchronous and half - sync / half - async thrift servers ( CASSANDRA - 1405 ) <nl> * fix potential use of free ' d native memory in SerializingCache <nl> ( CASSANDRA - 2951 ) <nl> + * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) <nl> <nl> <nl> 0 . 8 . 2 <nl> diff - - git a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java <nl> index cc2c7cd . . b9bbacb 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java <nl> + + + b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java <nl> @ @ - 108 , 11 + 108 , 11 @ @ public class IncomingStreamReader <nl> { <nl> long toRead = Math . min ( FileStreamTask . CHUNK _ SIZE , length - bytesRead ) ; <nl> long lastRead = fc . transferFrom ( socketChannel , offset + bytesRead , toRead ) ; <nl> - 	 / / if the other side fails , we will not get an exception , but instead transferFrom will constantly return 0 byte read <nl> - 	 / / and we would thus enter an infinite loop . So intead , if no bytes are tranferred we assume the other side is dead and <nl> - 	 / / raise an exception ( that will be catch belove and ' the right thing ' will be done ) . <nl> - 	 if ( lastRead = = 0 ) <nl> - 	 	 throw new IOException ( " Transfer failed for remote file " + remoteFile ) ; <nl> + / / if the other side fails , we will not get an exception , but instead transferFrom will constantly return 0 byte read <nl> + / / and we would thus enter an infinite loop . So intead , if no bytes are tranferred we assume the other side is dead and <nl> + / / raise an exception ( that will be catch belove and ' the right thing ' will be done ) . <nl> + if ( lastRead = = 0 ) <nl> + throw new IOException ( " Transfer failed for remote file " + remoteFile ) ; <nl> bytesRead + = lastRead ; <nl> remoteFile . progress + = lastRead ; <nl> return bytesRead ; <nl> diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> index 4c32a40 . . 713f2b8 100644 <nl> - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java <nl> @ @ - 203 , 10 + 203 , 9 @ @ public class StreamInSession <nl> if ( entry . getKey ( ) . left . equals ( host ) ) <nl> { <nl> StreamInSession session = entry . getValue ( ) ; <nl> - set . addAll ( session . files ) ; <nl> - if ( session . current ! = null ) { <nl> + if ( session . current ! = null ) <nl> set . add ( session . current ) ; <nl> - } <nl> + set . addAll ( session . files ) ; <nl> } <nl> } <nl> return set ;

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index a3e524b . . 0b9d1a2 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 721 , 6 + 721 , 7 @ @ 
 < src path = " $ { build . src . java } " / > 
 < src path = " $ { build . src . gen - java } " / > 
 	 < compilerarg value = " - XDignore . symbol . file " / > 
 + < compilerarg value = " - Xbootclasspath / p : $ { build . src . jdkoverride } " / > 
 < classpath refid = " cassandra . classpath " / > 
 < / javac > 
 < antcall target = " createVersionPropFile " / > 
 diff - - git a / src / java / org / apache / cassandra / db / PreHashedDecoratedKey . java b / src / java / org / apache / cassandra / db / PreHashedDecoratedKey . java 
 new file mode 100644 
 index 0000000 . . 472cc19 
 - - - / dev / null 
 + + + b / src / java / org / apache / cassandra / db / PreHashedDecoratedKey . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , software 
 + * distributed under the License is distributed on an " AS IS " BASIS , 
 + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 + * See the License for the specific language governing permissions and 
 + * limitations under the License . 
 + * / 
 + package org . apache . cassandra . db ; 
 + 
 + import java . nio . ByteBuffer ; 
 + 
 + import org . apache . cassandra . dht . Token ; 
 + 
 + public class PreHashedDecoratedKey extends BufferDecoratedKey 
 + { 
 + final long hash0 ; 
 + final long hash1 ; 
 + 
 + public PreHashedDecoratedKey ( Token token , ByteBuffer key , long hash0 , long hash1 ) 
 + { 
 + super ( token , key ) ; 
 + this . hash0 = hash0 ; 
 + this . hash1 = hash1 ; 
 + } 
 + 
 + @ Override 
 + public void filterHash ( long [ ] dest ) 
 + { 
 + dest [ 0 ] = hash0 ; 
 + dest [ 1 ] = hash1 ; 
 + } 
 + } 
 diff - - git a / src / jdkoverride / java / util / zip / CRC32 . java b / src / jdkoverride / java / util / zip / CRC32 . java 
 deleted file mode 100644 
 index 93e1e6f . . 0000000 
 - - - a / src / jdkoverride / java / util / zip / CRC32 . java 
 + + + / dev / null 
 @ @ - 1 , 42 + 0 , 0 @ @ 
 - / * 
 - * Licensed to the Apache Software Foundation ( ASF ) under one 
 - * or more contributor license agreements . See the NOTICE file 
 - * distributed with this work for additional information 
 - * regarding copyright ownership . The ASF licenses this file 
 - * to you under the Apache License , Version 2 . 0 ( the 
 - * " License " ) ; you may not use this file except in compliance 
 - * with the License . You may obtain a copy of the License at 
 - * 
 - * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 - * 
 - * Unless required by applicable law or agreed to in writing , software 
 - * distributed under the License is distributed on an " AS IS " BASIS , 
 - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND , either express or implied . 
 - * See the License for the specific language governing permissions and 
 - * limitations under the License . 
 - * / 
 - package java . util . zip ; 
 - 
 - import java . nio . ByteBuffer ; 
 - 
 - / * * 
 - * A fake implementation of java . util . zip . CRC32 with the additonal JDK 8 methods so 
 - * that when compiling using Java 7 we can link against those new methods and then 
 - * avoid calling them at runtime if running with Java 7 . 
 - * / 
 - public class CRC32 implements Checksum 
 - { 
 - public CRC32 ( ) { } 
 - 
 - public void update ( int b ) { } 
 - 
 - public void update ( byte [ ] b , int off , int len ) { } 
 - 
 - public void update ( byte [ ] b ) { } 
 - 
 - public void update ( ByteBuffer buffer ) { } 
 - 
 - public void reset ( ) { } 
 - 
 - public long getValue ( ) { return 0L ; } 
 - }

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index f98337e . . 513f5d5 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 34 , 6 + 34 , 7 @ @ 
 * add asynchronous and half - sync / half - async thrift servers ( CASSANDRA - 1405 ) 
 * fix potential use of free ' d native memory in SerializingCache 
 ( CASSANDRA - 2951 ) 
 + * include files - to - be - streamed in StreamInSession . getSources ( CASSANDRA - 2972 ) 
 
 
 0 . 8 . 2 
 diff - - git a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java 
 index cc2c7cd . . b9bbacb 100644 
 - - - a / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java 
 + + + b / src / java / org / apache / cassandra / streaming / IncomingStreamReader . java 
 @ @ - 108 , 11 + 108 , 11 @ @ public class IncomingStreamReader 
 { 
 long toRead = Math . min ( FileStreamTask . CHUNK _ SIZE , length - bytesRead ) ; 
 long lastRead = fc . transferFrom ( socketChannel , offset + bytesRead , toRead ) ; 
 - 	 / / if the other side fails , we will not get an exception , but instead transferFrom will constantly return 0 byte read 
 - 	 / / and we would thus enter an infinite loop . So intead , if no bytes are tranferred we assume the other side is dead and 
 - 	 / / raise an exception ( that will be catch belove and ' the right thing ' will be done ) . 
 - 	 if ( lastRead = = 0 ) 
 - 	 	 throw new IOException ( " Transfer failed for remote file " + remoteFile ) ; 
 + / / if the other side fails , we will not get an exception , but instead transferFrom will constantly return 0 byte read 
 + / / and we would thus enter an infinite loop . So intead , if no bytes are tranferred we assume the other side is dead and 
 + / / raise an exception ( that will be catch belove and ' the right thing ' will be done ) . 
 + if ( lastRead = = 0 ) 
 + throw new IOException ( " Transfer failed for remote file " + remoteFile ) ; 
 bytesRead + = lastRead ; 
 remoteFile . progress + = lastRead ; 
 return bytesRead ; 
 diff - - git a / src / java / org / apache / cassandra / streaming / StreamInSession . java b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 index 4c32a40 . . 713f2b8 100644 
 - - - a / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 + + + b / src / java / org / apache / cassandra / streaming / StreamInSession . java 
 @ @ - 203 , 10 + 203 , 9 @ @ public class StreamInSession 
 if ( entry . getKey ( ) . left . equals ( host ) ) 
 { 
 StreamInSession session = entry . getValue ( ) ; 
 - set . addAll ( session . files ) ; 
 - if ( session . current ! = null ) { 
 + if ( session . current ! = null ) 
 set . add ( session . current ) ; 
 - } 
 + set . addAll ( session . files ) ; 
 } 
 } 
 return set ;
