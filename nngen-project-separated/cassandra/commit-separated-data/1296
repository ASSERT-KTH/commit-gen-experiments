BLEU SCORE: 0.03550932348642478

TEST MSG: Add DESCRIBE MATERIALIZED VIEW to cqlsh
GENERATED MSG: cqlsh : add COPY command to load data from CSV flat files

TEST DIFF (one line): diff - - git a / bin / cqlsh . py b / bin / cqlsh . py <nl> index 529b1c8 . . 41fa4fd 100644 <nl> - - - a / bin / cqlsh . py <nl> + + + b / bin / cqlsh . py <nl> @ @ - 289 , 12 + 289 , 13 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' <nl> | " KEYSPACE " ksname = < keyspaceName > ? <nl> | ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > <nl> | " INDEX " idx = < indexName > <nl> + | " MATERIALIZED " " VIEW " mv = < materializedViewName > <nl> | ( " COLUMNFAMILIES " | " TABLES " ) <nl> | " FULL " ? " SCHEMA " <nl> | " CLUSTER " <nl> | " TYPES " <nl> | " TYPE " ut = < userTypeName > <nl> - | ( ksname = < keyspaceName > | cf = < columnFamilyName > | idx = < indexName > ) ) <nl> + | ( ksname = < keyspaceName > | cf = < columnFamilyName > | idx = < indexName > | mv = < materializedViewName > ) ) <nl> ; <nl> <nl> < consistencyCommand > : : = " CONSISTENCY " ( level = < consistencyLevel > ) ? <nl> @ @ - 459 , 6 + 460 , 10 @ @ class IndexNotFound ( Exception ) : <nl> pass <nl> <nl> <nl> + class MaterializedViewNotFound ( Exception ) : <nl> + pass <nl> + <nl> + <nl> class ObjectNotFound ( Exception ) : <nl> pass <nl> <nl> @ @ - 792 , 6 + 797 , 12 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> return map ( str , self . get _ keyspace _ meta ( ksname ) . tables . keys ( ) ) <nl> <nl> + def get _ materialized _ view _ names ( self , ksname = None ) : <nl> + if ksname is None : <nl> + ksname = self . current _ keyspace <nl> + <nl> + return map ( str , self . get _ keyspace _ meta ( ksname ) . views . keys ( ) ) <nl> + <nl> def get _ index _ names ( self , ksname = None ) : <nl> if ksname is None : <nl> ksname = self . current _ keyspace <nl> @ @ - 898 , 6 + 909 , 15 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> return ksmeta . indexes [ idxname ] <nl> <nl> + def get _ view _ meta ( self , ksname , viewname ) : <nl> + if ksname is None : <nl> + ksname = self . current _ keyspace <nl> + ksmeta = self . get _ keyspace _ meta ( ksname ) <nl> + <nl> + if viewname not in ksmeta . views : <nl> + raise MaterializedViewNotFound ( " Materialized view % r not found " % viewname ) <nl> + return ksmeta . views [ viewname ] <nl> + <nl> def get _ object _ meta ( self , ks , name ) : <nl> if name is None : <nl> if ks and ks in self . conn . metadata . keyspaces : <nl> @ @ - 917 , 6 + 937 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> return ksmeta . tables [ name ] <nl> elif name in ksmeta . indexes : <nl> return ksmeta . indexes [ name ] <nl> + elif name in ksmeta . views : <nl> + return ksmeta . views [ name ] <nl> <nl> raise ObjectNotFound ( " % r not found in keyspace % r " % ( name , ks ) ) <nl> <nl> @ @ - 1151 , 7 + 1173 , 22 @ @ class Shell ( cmd . Cmd ) : <nl> <nl> return result <nl> <nl> - def parse _ for _ table _ meta ( self , query _ string ) : <nl> + def parse _ for _ select _ meta ( self , query _ string ) : <nl> + try : <nl> + parsed = cqlruleset . cql _ parse ( query _ string ) [ 1 ] <nl> + except IndexError : <nl> + return None <nl> + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' , None ) ) <nl> + try : <nl> + return self . get _ table _ meta ( ks , name ) <nl> + except ColumnFamilyNotFound : <nl> + try : <nl> + return self . get _ view _ meta ( ks , name ) <nl> + except MaterializedViewNotFound : <nl> + raise ObjectNotFound ( " % r not found in keyspace % r " % ( name , ks ) ) <nl> + <nl> + def parse _ for _ update _ meta ( self , query _ string ) : <nl> try : <nl> parsed = cqlruleset . cql _ parse ( query _ string ) [ 1 ] <nl> except IndexError : <nl> @ @ - 1182 , 7 + 1219 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> return False , None <nl> <nl> if statement . query _ string [ : 6 ] . lower ( ) = = ' select ' : <nl> - self . print _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> + self . print _ result ( rows , self . parse _ for _ select _ meta ( statement . query _ string ) ) <nl> elif statement . query _ string . lower ( ) . startswith ( " list users " ) or statement . query _ string . lower ( ) . startswith ( " list roles " ) : <nl> self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' roles ' ) ) <nl> elif statement . query _ string . lower ( ) . startswith ( " list " ) : <nl> @ @ - 1190 , 7 + 1227 , 7 @ @ class Shell ( cmd . Cmd ) : <nl> elif rows : <nl> # CAS INSERT / UPDATE <nl> self . writeresult ( " " ) <nl> - self . print _ static _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) <nl> + self . print _ static _ result ( rows , self . parse _ for _ update _ meta ( statement . query _ string ) ) <nl> self . flush _ output ( ) <nl> return True , future <nl> <nl> @ @ - 1369 , 6 + 1406 , 16 @ @ class Shell ( cmd . Cmd ) : <nl> out . write ( self . get _ index _ meta ( ksname , idxname ) . export _ as _ string ( ) ) <nl> out . write ( " \ n " ) <nl> <nl> + def print _ recreate _ materialized _ view ( self , ksname , viewname , out ) : <nl> + " " " <nl> + Output CQL commands which should be pasteable back into a CQL session <nl> + to recreate the given materialized view . <nl> + <nl> + Writes output to the given out stream . <nl> + " " " <nl> + out . write ( self . get _ view _ meta ( ksname , viewname ) . export _ as _ string ( ) ) <nl> + out . write ( " \ n " ) <nl> + <nl> def print _ recreate _ object ( self , ks , name , out ) : <nl> " " " <nl> Output CQL commands which should be pasteable back into a CQL session <nl> @ @ - 1403 , 6 + 1450 , 15 @ @ class Shell ( cmd . Cmd ) : <nl> self . print _ recreate _ index ( ksname , idxname , sys . stdout ) <nl> print <nl> <nl> + def describe _ materialized _ view ( self , ksname , viewname ) : <nl> + if ksname is None : <nl> + ksname = self . current _ keyspace <nl> + if ksname is None : <nl> + raise NoKeyspaceError ( " No keyspace specified and no current keyspace " ) <nl> + print <nl> + self . print _ recreate _ materialized _ view ( ksname , viewname , sys . stdout ) <nl> + print <nl> + <nl> def describe _ object ( self , ks , name ) : <nl> print <nl> self . print _ recreate _ object ( ks , name , sys . stdout ) <nl> @ @ - 1564 , 6 + 1620 , 12 @ @ class Shell ( cmd . Cmd ) : <nl> In some cases , there may be index metadata which is not representable <nl> and which will not be shown . <nl> <nl> + DESCRIBE MATERIALIZED VIEW < viewname > <nl> + <nl> + Output CQL commands that could be used to recreate the given materialized view . <nl> + In some cases , there may be materialized view metadata which is not representable <nl> + and which will not be shown . <nl> + <nl> DESCRIBE CLUSTER <nl> <nl> Output information about the connected Cassandra cluster , such as the <nl> @ @ - 1596 , 7 + 1658 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> DESCRIBE < objname > <nl> <nl> Output CQL commands that could be used to recreate the entire object schema , <nl> - where object can be either a keyspace or a table or an index ( in this order ) . <nl> + where object can be either a keyspace or a table or an index or a materialized <nl> + view ( in this order ) . <nl> " " " <nl> what = parsed . matched [ 1 ] [ 1 ] . lower ( ) <nl> if what = = ' functions ' : <nl> @ @ - 1631 , 6 + 1694 , 10 @ @ class Shell ( cmd . Cmd ) : <nl> ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> idx = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) <nl> self . describe _ index ( ks , idx ) <nl> + elif what = = ' materialized ' and parsed . matched [ 2 ] [ 1 ] . lower ( ) = = ' view ' : <nl> + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) <nl> + mv = self . cql _ unprotect _ name ( parsed . get _ binding ( ' mvname ' ) ) <nl> + self . describe _ materialized _ view ( ks , mv ) <nl> elif what in ( ' columnfamilies ' , ' tables ' ) : <nl> self . describe _ columnfamilies ( self . current _ keyspace ) <nl> elif what = = ' types ' : <nl> @ @ - 1650 , 6 + 1717 , 8 @ @ class Shell ( cmd . Cmd ) : <nl> name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) <nl> if not name : <nl> name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) <nl> + if not name : <nl> + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' mvname ' , None ) ) <nl> self . describe _ object ( ks , name ) <nl> do _ desc = do _ describe <nl> <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 03085e6 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 03085e6 . zip <nl> new file mode 100644 <nl> index 0000000 . . e672bd9 <nl> Binary files / dev / null and b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 03085e6 . zip differ <nl> diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 9f91a6d . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 9f91a6d . zip <nl> deleted file mode 100644 <nl> index ff4d150 . . 0000000 <nl> Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 9f91a6d . zip and / dev / null differ <nl> diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py <nl> index e4b2bfa . . 94b132f 100644 <nl> - - - a / pylib / cqlshlib / cql3handling . py <nl> + + + b / pylib / cqlshlib / cql3handling . py <nl> @ @ - 283 , 6 + 283 , 8 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; <nl> <nl> < columnFamilyName > : : = ( ksname = < cfOrKsName > dot = " . " ) ? cfname = < cfOrKsName > ; <nl> <nl> + < materializedViewName > : : = ( ksname = < cfOrKsName > dot = " . " ) ? mvname = < cfOrKsName > ; <nl> + <nl> < userTypeName > : : = ( ksname = < cfOrKsName > dot = " . " ) ? utname = < cfOrKsName > ; <nl> <nl> < keyspaceName > : : = ksname = < cfOrKsName > ; <nl> @ @ - 559 , 6 + 561 , 7 @ @ def cf _ ks _ name _ completer ( ctxt , cass ) : <nl> return [ maybe _ escape _ name ( ks ) + ' . ' for ks in cass . get _ keyspace _ names ( ) ] <nl> <nl> completer _ for ( ' columnFamilyName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) <nl> + completer _ for ( ' materializedViewName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) <nl> <nl> <nl> def cf _ ks _ dot _ completer ( ctxt , cass ) : <nl> @ @ - 568 , 6 + 571 , 7 @ @ def cf _ ks _ dot _ completer ( ctxt , cass ) : <nl> return [ ] <nl> <nl> completer _ for ( ' columnFamilyName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) <nl> + completer _ for ( ' materializedViewName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) <nl> <nl> <nl> @ completer _ for ( ' columnFamilyName ' , ' cfname ' ) <nl> @ @ - 583 , 6 + 587 , 20 @ @ def cf _ name _ completer ( ctxt , cass ) : <nl> raise <nl> return map ( maybe _ escape _ name , cfnames ) <nl> <nl> + <nl> + @ completer _ for ( ' materializedViewName ' , ' mvname ' ) <nl> + def mv _ name _ completer ( ctxt , cass ) : <nl> + ks = ctxt . get _ binding ( ' ksname ' , None ) <nl> + if ks is not None : <nl> + ks = dequote _ name ( ks ) <nl> + try : <nl> + mvnames = cass . get _ materialized _ view _ names ( ks ) <nl> + except Exception : <nl> + if ks is None : <nl> + return ( ) <nl> + raise <nl> + return map ( maybe _ escape _ name , mvnames ) <nl> + <nl> completer _ for ( ' userTypeName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) <nl> <nl> completer _ for ( ' userTypeName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) <nl> @ @ - 639 , 7 + 657 , 7 @ @ syntax _ rules + = r ' ' ' <nl> < useStatement > : : = " USE " < keyspaceName > <nl> ; <nl> < selectStatement > : : = " SELECT " ( " JSON " ) ? < selectClause > <nl> - " FROM " cf = < columnFamilyName > <nl> + " FROM " ( cf = < columnFamilyName > | mv = < materializedViewName > ) <nl> ( " WHERE " < whereClause > ) ? <nl> ( " ORDER " " BY " < orderByClause > ( " , " < orderByClause > ) * ) ? <nl> ( " LIMIT " limit = < wholenumber > ) ? <nl> @ @ - 1133 , 7 + 1151 , 7 @ @ syntax _ rules + = r ' ' ' <nl> ( " USING " < stringLiteral > ( " WITH " " OPTIONS " " = " < mapLiteral > ) ? ) ? <nl> ; <nl> <nl> - < createMaterializedViewStatement > : : = " CREATE " " MATERIALIZED " " VIEW " ( " IF " " NOT " " EXISTS " ) ? < columnFamilyName > ? <nl> + < createMaterializedViewStatement > : : = " CREATE " " MATERIALIZED " " VIEW " ( " IF " " NOT " " EXISTS " ) ? < materializedViewName > ? <nl> " AS " < selectStatement > <nl> " PRIMARY " " KEY " < pkDef > <nl> ; <nl> @ @ - 1195 , 7 + 1213 , 7 @ @ syntax _ rules + = r ' ' ' <nl> < dropIndexStatement > : : = " DROP " " INDEX " ( " IF " " EXISTS " ) ? idx = < indexName > <nl> ; <nl> <nl> - < dropMaterializedViewStatement > : : = " DROP " " MATERIALIZED " " VIEW " ( " IF " " EXISTS " ) ? mv = < columnFamilyName > <nl> + < dropMaterializedViewStatement > : : = " DROP " " MATERIALIZED " " VIEW " ( " IF " " EXISTS " ) ? mv = < materializedViewName > <nl> ; <nl> <nl> < dropUserTypeStatement > : : = " DROP " " TYPE " ut = < userTypeName > <nl> diff - - git a / src / java / org / apache / cassandra / service / MigrationListener . java b / src / java / org / apache / cassandra / service / MigrationListener . java <nl> index f4b3e7c . . 9e240ea 100644 <nl> - - - a / src / java / org / apache / cassandra / service / MigrationListener . java <nl> + + + b / src / java / org / apache / cassandra / service / MigrationListener . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public abstract class MigrationListener <nl> <nl> public void onDropView ( String ksName , String viewName ) <nl> { <nl> + onDropColumnFamily ( ksName , viewName ) ; <nl> } <nl> <nl> public void onDropUserType ( String ksName , String typeName )
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ae1ce7a . . 7943112 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 7 + 15 , 7 @ @ <nl> * Add support for range tombstones ( CASSANDRA - 3708 ) <nl> * Improve MessagingService efficiency ( CASSANDRA - 3617 ) <nl> * Avoid ID conflicts from concurrent schema changes ( CASSANDRA - 3794 ) <nl> - * Set thrift HSHA server thread limit to unlimet by default ( CASSANDRA - 4277 ) <nl> + * Set thrift HSHA server thread limit to unlimited by default ( CASSANDRA - 4277 ) <nl> * Avoids double serialization of CF id in RowMutation messages <nl> ( CASSANDRA - 4293 ) <nl> * fix Summary component and caches to use correct partitioner ( CASSANDRA - 4289 )

TEST DIFF:
diff - - git a / bin / cqlsh . py b / bin / cqlsh . py 
 index 529b1c8 . . 41fa4fd 100644 
 - - - a / bin / cqlsh . py 
 + + + b / bin / cqlsh . py 
 @ @ - 289 , 12 + 289 , 13 @ @ cqlsh _ extra _ syntax _ rules = r ' ' ' 
 | " KEYSPACE " ksname = < keyspaceName > ? 
 | ( " COLUMNFAMILY " | " TABLE " ) cf = < columnFamilyName > 
 | " INDEX " idx = < indexName > 
 + | " MATERIALIZED " " VIEW " mv = < materializedViewName > 
 | ( " COLUMNFAMILIES " | " TABLES " ) 
 | " FULL " ? " SCHEMA " 
 | " CLUSTER " 
 | " TYPES " 
 | " TYPE " ut = < userTypeName > 
 - | ( ksname = < keyspaceName > | cf = < columnFamilyName > | idx = < indexName > ) ) 
 + | ( ksname = < keyspaceName > | cf = < columnFamilyName > | idx = < indexName > | mv = < materializedViewName > ) ) 
 ; 
 
 < consistencyCommand > : : = " CONSISTENCY " ( level = < consistencyLevel > ) ? 
 @ @ - 459 , 6 + 460 , 10 @ @ class IndexNotFound ( Exception ) : 
 pass 
 
 
 + class MaterializedViewNotFound ( Exception ) : 
 + pass 
 + 
 + 
 class ObjectNotFound ( Exception ) : 
 pass 
 
 @ @ - 792 , 6 + 797 , 12 @ @ class Shell ( cmd . Cmd ) : 
 
 return map ( str , self . get _ keyspace _ meta ( ksname ) . tables . keys ( ) ) 
 
 + def get _ materialized _ view _ names ( self , ksname = None ) : 
 + if ksname is None : 
 + ksname = self . current _ keyspace 
 + 
 + return map ( str , self . get _ keyspace _ meta ( ksname ) . views . keys ( ) ) 
 + 
 def get _ index _ names ( self , ksname = None ) : 
 if ksname is None : 
 ksname = self . current _ keyspace 
 @ @ - 898 , 6 + 909 , 15 @ @ class Shell ( cmd . Cmd ) : 
 
 return ksmeta . indexes [ idxname ] 
 
 + def get _ view _ meta ( self , ksname , viewname ) : 
 + if ksname is None : 
 + ksname = self . current _ keyspace 
 + ksmeta = self . get _ keyspace _ meta ( ksname ) 
 + 
 + if viewname not in ksmeta . views : 
 + raise MaterializedViewNotFound ( " Materialized view % r not found " % viewname ) 
 + return ksmeta . views [ viewname ] 
 + 
 def get _ object _ meta ( self , ks , name ) : 
 if name is None : 
 if ks and ks in self . conn . metadata . keyspaces : 
 @ @ - 917 , 6 + 937 , 8 @ @ class Shell ( cmd . Cmd ) : 
 return ksmeta . tables [ name ] 
 elif name in ksmeta . indexes : 
 return ksmeta . indexes [ name ] 
 + elif name in ksmeta . views : 
 + return ksmeta . views [ name ] 
 
 raise ObjectNotFound ( " % r not found in keyspace % r " % ( name , ks ) ) 
 
 @ @ - 1151 , 7 + 1173 , 22 @ @ class Shell ( cmd . Cmd ) : 
 
 return result 
 
 - def parse _ for _ table _ meta ( self , query _ string ) : 
 + def parse _ for _ select _ meta ( self , query _ string ) : 
 + try : 
 + parsed = cqlruleset . cql _ parse ( query _ string ) [ 1 ] 
 + except IndexError : 
 + return None 
 + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' , None ) ) 
 + try : 
 + return self . get _ table _ meta ( ks , name ) 
 + except ColumnFamilyNotFound : 
 + try : 
 + return self . get _ view _ meta ( ks , name ) 
 + except MaterializedViewNotFound : 
 + raise ObjectNotFound ( " % r not found in keyspace % r " % ( name , ks ) ) 
 + 
 + def parse _ for _ update _ meta ( self , query _ string ) : 
 try : 
 parsed = cqlruleset . cql _ parse ( query _ string ) [ 1 ] 
 except IndexError : 
 @ @ - 1182 , 7 + 1219 , 7 @ @ class Shell ( cmd . Cmd ) : 
 return False , None 
 
 if statement . query _ string [ : 6 ] . lower ( ) = = ' select ' : 
 - self . print _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 + self . print _ result ( rows , self . parse _ for _ select _ meta ( statement . query _ string ) ) 
 elif statement . query _ string . lower ( ) . startswith ( " list users " ) or statement . query _ string . lower ( ) . startswith ( " list roles " ) : 
 self . print _ result ( rows , self . get _ table _ meta ( ' system _ auth ' , ' roles ' ) ) 
 elif statement . query _ string . lower ( ) . startswith ( " list " ) : 
 @ @ - 1190 , 7 + 1227 , 7 @ @ class Shell ( cmd . Cmd ) : 
 elif rows : 
 # CAS INSERT / UPDATE 
 self . writeresult ( " " ) 
 - self . print _ static _ result ( rows , self . parse _ for _ table _ meta ( statement . query _ string ) ) 
 + self . print _ static _ result ( rows , self . parse _ for _ update _ meta ( statement . query _ string ) ) 
 self . flush _ output ( ) 
 return True , future 
 
 @ @ - 1369 , 6 + 1406 , 16 @ @ class Shell ( cmd . Cmd ) : 
 out . write ( self . get _ index _ meta ( ksname , idxname ) . export _ as _ string ( ) ) 
 out . write ( " \ n " ) 
 
 + def print _ recreate _ materialized _ view ( self , ksname , viewname , out ) : 
 + " " " 
 + Output CQL commands which should be pasteable back into a CQL session 
 + to recreate the given materialized view . 
 + 
 + Writes output to the given out stream . 
 + " " " 
 + out . write ( self . get _ view _ meta ( ksname , viewname ) . export _ as _ string ( ) ) 
 + out . write ( " \ n " ) 
 + 
 def print _ recreate _ object ( self , ks , name , out ) : 
 " " " 
 Output CQL commands which should be pasteable back into a CQL session 
 @ @ - 1403 , 6 + 1450 , 15 @ @ class Shell ( cmd . Cmd ) : 
 self . print _ recreate _ index ( ksname , idxname , sys . stdout ) 
 print 
 
 + def describe _ materialized _ view ( self , ksname , viewname ) : 
 + if ksname is None : 
 + ksname = self . current _ keyspace 
 + if ksname is None : 
 + raise NoKeyspaceError ( " No keyspace specified and no current keyspace " ) 
 + print 
 + self . print _ recreate _ materialized _ view ( ksname , viewname , sys . stdout ) 
 + print 
 + 
 def describe _ object ( self , ks , name ) : 
 print 
 self . print _ recreate _ object ( ks , name , sys . stdout ) 
 @ @ - 1564 , 6 + 1620 , 12 @ @ class Shell ( cmd . Cmd ) : 
 In some cases , there may be index metadata which is not representable 
 and which will not be shown . 
 
 + DESCRIBE MATERIALIZED VIEW < viewname > 
 + 
 + Output CQL commands that could be used to recreate the given materialized view . 
 + In some cases , there may be materialized view metadata which is not representable 
 + and which will not be shown . 
 + 
 DESCRIBE CLUSTER 
 
 Output information about the connected Cassandra cluster , such as the 
 @ @ - 1596 , 7 + 1658 , 8 @ @ class Shell ( cmd . Cmd ) : 
 DESCRIBE < objname > 
 
 Output CQL commands that could be used to recreate the entire object schema , 
 - where object can be either a keyspace or a table or an index ( in this order ) . 
 + where object can be either a keyspace or a table or an index or a materialized 
 + view ( in this order ) . 
 " " " 
 what = parsed . matched [ 1 ] [ 1 ] . lower ( ) 
 if what = = ' functions ' : 
 @ @ - 1631 , 6 + 1694 , 10 @ @ class Shell ( cmd . Cmd ) : 
 ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 idx = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) 
 self . describe _ index ( ks , idx ) 
 + elif what = = ' materialized ' and parsed . matched [ 2 ] [ 1 ] . lower ( ) = = ' view ' : 
 + ks = self . cql _ unprotect _ name ( parsed . get _ binding ( ' ksname ' , None ) ) 
 + mv = self . cql _ unprotect _ name ( parsed . get _ binding ( ' mvname ' ) ) 
 + self . describe _ materialized _ view ( ks , mv ) 
 elif what in ( ' columnfamilies ' , ' tables ' ) : 
 self . describe _ columnfamilies ( self . current _ keyspace ) 
 elif what = = ' types ' : 
 @ @ - 1650 , 6 + 1717 , 8 @ @ class Shell ( cmd . Cmd ) : 
 name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' cfname ' ) ) 
 if not name : 
 name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' idxname ' , None ) ) 
 + if not name : 
 + name = self . cql _ unprotect _ name ( parsed . get _ binding ( ' mvname ' , None ) ) 
 self . describe _ object ( ks , name ) 
 do _ desc = do _ describe 
 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 03085e6 . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 03085e6 . zip 
 new file mode 100644 
 index 0000000 . . e672bd9 
 Binary files / dev / null and b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 03085e6 . zip differ 
 diff - - git a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 9f91a6d . zip b / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 9f91a6d . zip 
 deleted file mode 100644 
 index ff4d150 . . 0000000 
 Binary files a / lib / cassandra - driver - internal - only - 3 . 0 . 0a2 . post0 - 9f91a6d . zip and / dev / null differ 
 diff - - git a / pylib / cqlshlib / cql3handling . py b / pylib / cqlshlib / cql3handling . py 
 index e4b2bfa . . 94b132f 100644 
 - - - a / pylib / cqlshlib / cql3handling . py 
 + + + b / pylib / cqlshlib / cql3handling . py 
 @ @ - 283 , 6 + 283 , 8 @ @ JUNK : : = / ( [ \ t \ r \ f \ v ] + | ( - - | [ / ] [ / ] ) [ ^ \ n \ r ] * ( [ \ n \ r ] | $ ) | [ / ] [ * ] . * ? [ * ] [ / ] ) / ; 
 
 < columnFamilyName > : : = ( ksname = < cfOrKsName > dot = " . " ) ? cfname = < cfOrKsName > ; 
 
 + < materializedViewName > : : = ( ksname = < cfOrKsName > dot = " . " ) ? mvname = < cfOrKsName > ; 
 + 
 < userTypeName > : : = ( ksname = < cfOrKsName > dot = " . " ) ? utname = < cfOrKsName > ; 
 
 < keyspaceName > : : = ksname = < cfOrKsName > ; 
 @ @ - 559 , 6 + 561 , 7 @ @ def cf _ ks _ name _ completer ( ctxt , cass ) : 
 return [ maybe _ escape _ name ( ks ) + ' . ' for ks in cass . get _ keyspace _ names ( ) ] 
 
 completer _ for ( ' columnFamilyName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) 
 + completer _ for ( ' materializedViewName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) 
 
 
 def cf _ ks _ dot _ completer ( ctxt , cass ) : 
 @ @ - 568 , 6 + 571 , 7 @ @ def cf _ ks _ dot _ completer ( ctxt , cass ) : 
 return [ ] 
 
 completer _ for ( ' columnFamilyName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) 
 + completer _ for ( ' materializedViewName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) 
 
 
 @ completer _ for ( ' columnFamilyName ' , ' cfname ' ) 
 @ @ - 583 , 6 + 587 , 20 @ @ def cf _ name _ completer ( ctxt , cass ) : 
 raise 
 return map ( maybe _ escape _ name , cfnames ) 
 
 + 
 + @ completer _ for ( ' materializedViewName ' , ' mvname ' ) 
 + def mv _ name _ completer ( ctxt , cass ) : 
 + ks = ctxt . get _ binding ( ' ksname ' , None ) 
 + if ks is not None : 
 + ks = dequote _ name ( ks ) 
 + try : 
 + mvnames = cass . get _ materialized _ view _ names ( ks ) 
 + except Exception : 
 + if ks is None : 
 + return ( ) 
 + raise 
 + return map ( maybe _ escape _ name , mvnames ) 
 + 
 completer _ for ( ' userTypeName ' , ' ksname ' ) ( cf _ ks _ name _ completer ) 
 
 completer _ for ( ' userTypeName ' , ' dot ' ) ( cf _ ks _ dot _ completer ) 
 @ @ - 639 , 7 + 657 , 7 @ @ syntax _ rules + = r ' ' ' 
 < useStatement > : : = " USE " < keyspaceName > 
 ; 
 < selectStatement > : : = " SELECT " ( " JSON " ) ? < selectClause > 
 - " FROM " cf = < columnFamilyName > 
 + " FROM " ( cf = < columnFamilyName > | mv = < materializedViewName > ) 
 ( " WHERE " < whereClause > ) ? 
 ( " ORDER " " BY " < orderByClause > ( " , " < orderByClause > ) * ) ? 
 ( " LIMIT " limit = < wholenumber > ) ? 
 @ @ - 1133 , 7 + 1151 , 7 @ @ syntax _ rules + = r ' ' ' 
 ( " USING " < stringLiteral > ( " WITH " " OPTIONS " " = " < mapLiteral > ) ? ) ? 
 ; 
 
 - < createMaterializedViewStatement > : : = " CREATE " " MATERIALIZED " " VIEW " ( " IF " " NOT " " EXISTS " ) ? < columnFamilyName > ? 
 + < createMaterializedViewStatement > : : = " CREATE " " MATERIALIZED " " VIEW " ( " IF " " NOT " " EXISTS " ) ? < materializedViewName > ? 
 " AS " < selectStatement > 
 " PRIMARY " " KEY " < pkDef > 
 ; 
 @ @ - 1195 , 7 + 1213 , 7 @ @ syntax _ rules + = r ' ' ' 
 < dropIndexStatement > : : = " DROP " " INDEX " ( " IF " " EXISTS " ) ? idx = < indexName > 
 ; 
 
 - < dropMaterializedViewStatement > : : = " DROP " " MATERIALIZED " " VIEW " ( " IF " " EXISTS " ) ? mv = < columnFamilyName > 
 + < dropMaterializedViewStatement > : : = " DROP " " MATERIALIZED " " VIEW " ( " IF " " EXISTS " ) ? mv = < materializedViewName > 
 ; 
 
 < dropUserTypeStatement > : : = " DROP " " TYPE " ut = < userTypeName > 
 diff - - git a / src / java / org / apache / cassandra / service / MigrationListener . java b / src / java / org / apache / cassandra / service / MigrationListener . java 
 index f4b3e7c . . 9e240ea 100644 
 - - - a / src / java / org / apache / cassandra / service / MigrationListener . java 
 + + + b / src / java / org / apache / cassandra / service / MigrationListener . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public abstract class MigrationListener 
 
 public void onDropView ( String ksName , String viewName ) 
 { 
 + onDropColumnFamily ( ksName , viewName ) ; 
 } 
 
 public void onDropUserType ( String ksName , String typeName )

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ae1ce7a . . 7943112 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 7 + 15 , 7 @ @ 
 * Add support for range tombstones ( CASSANDRA - 3708 ) 
 * Improve MessagingService efficiency ( CASSANDRA - 3617 ) 
 * Avoid ID conflicts from concurrent schema changes ( CASSANDRA - 3794 ) 
 - * Set thrift HSHA server thread limit to unlimet by default ( CASSANDRA - 4277 ) 
 + * Set thrift HSHA server thread limit to unlimited by default ( CASSANDRA - 4277 ) 
 * Avoids double serialization of CF id in RowMutation messages 
 ( CASSANDRA - 4293 ) 
 * fix Summary component and caches to use correct partitioner ( CASSANDRA - 4289 )
