BLEU SCORE: 0.01960062953647315

TEST MSG: ninja fix : CASSANDRA - 14592 CellsTest . testExpiringCellReconcile
GENERATED MSG: snapshot must be performed before flushlock must be acquired , or we deadlock . See # 2381

TEST DIFF (one line): diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java <nl> index ae22816 . . 14d05c6 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / CellTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / CellTest . java <nl> @ @ - 244 , 11 + 244 , 13 @ @ public class CellTest <nl> Assert . assertEquals ( - 1 , testExpiring ( " val " , " a " , 2 , 1 , null , " val " , 1L , 2 ) ) ; <nl> <nl> Assert . assertEquals ( - 1 , testExpiring ( " val " , " a " , 1 , 2 , null , null , null , 1 ) ) ; <nl> - Assert . assertEquals ( 1 , testExpiring ( " val " , " a " , 1 , 2 , null , " val " , null , 1 ) ) ; <nl> + Assert . assertEquals ( - 1 , testExpiring ( " val " , " a " , 1 , 2 , null , " val " , null , 1 ) ) ; <nl> + Assert . assertEquals ( 1 , testExpiring ( " val " , " a " , 1 , 1 , null , " val " , null , 2 ) ) ; <nl> + Assert . assertEquals ( 1 , testExpiring ( " val " , " a " , 1 , 1 , null , " val " , null , 1 ) ) ; <nl> <nl> / / newer value <nl> Assert . assertEquals ( - 1 , testExpiring ( " val " , " b " , 2 , 1 , null , " a " , null , null ) ) ; <nl> - Assert . assertEquals ( - 1 , testExpiring ( " val " , " b " , 2 , 1 , null , " a " , null , 2 ) ) ; <nl> + Assert . assertEquals ( - 1 , testExpiring ( " val " , " b " , 2 , 1 , null , " a " , null , 1 ) ) ; <nl> } <nl> <nl> class SimplePurger implements DeletionPurger
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index c416594 . . ac08148 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 79 , 8 + 79 , 7 @ @ <nl> * fixes for cache save / load ( CASSANDRA - 2172 , - 2174 ) <nl> * Handle whole - row deletions in CFOutputFormat ( CASSANDRA - 2014 ) <nl> * Make memtable _ flush _ writers flush in parallel ( CASSANDRA - 2178 ) <nl> - * make key cache preheating default to false ; enable with <nl> - - Dcompaction _ preheat _ key _ cache = true ( CASSANDRA - 2175 ) <nl> + * Add compaction _ preheat _ key _ cache option ( CASSANDRA - 2175 ) <nl> * refactor stress . py to have only one copy of the format string <nl> used for creating row keys ( CASSANDRA - 2108 ) <nl> * validate index names for \ w + ( CASSANDRA - 2196 ) <nl> diff - - git a / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java b / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java <nl> index 6025622 . . da59438 100644 <nl> - - - a / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java <nl> + + + b / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java <nl> @ @ - 119 , 6 + 119 , 12 @ @ public class Session <nl> { <nl> CommandLine cmd = parser . parse ( availableOptions , arguments ) ; <nl> <nl> + if ( cmd . getArgs ( ) . length > 0 ) <nl> + { <nl> + System . err . println ( " Application does not allow arbitrary arguments : " + StringUtils . join ( cmd . getArgList ( ) , " , " ) ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + <nl> if ( cmd . hasOption ( " h " ) ) <nl> throw new IllegalArgumentException ( " help " ) ; <nl> <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> index d80b145 . . fc0352e 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java <nl> @ @ - 80 , 11 + 80 , 12 @ @ public class DropColumnFamily extends Migration <nl> <nl> if ( ! clientMode ) <nl> { <nl> + cfs . snapshot ( Table . getTimestampedSnapshotName ( null ) ) ; <nl> + <nl> CompactionManager . instance . getCompactionLock ( ) . lock ( ) ; <nl> cfs . flushLock . lock ( ) ; <nl> try <nl> { <nl> - cfs . snapshot ( Table . getTimestampedSnapshotName ( null ) ) ; <nl> Table . open ( ksm . name ) . dropCf ( cfm . cfId ) ; <nl> } <nl> finally <nl> diff - - git a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> index 1fefbda . . cdfcc23 100644 <nl> - - - a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> + + + b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java <nl> @ @ - 63 , 10 + 63 , 10 @ @ public class DropKeyspace extends Migration <nl> CFMetaData . purge ( cfm ) ; <nl> if ( ! clientMode ) <nl> { <nl> + cfs . snapshot ( snapshotName ) ; <nl> cfs . flushLock . lock ( ) ; <nl> try <nl> { <nl> - cfs . snapshot ( snapshotName ) ; <nl> Table . open ( ksm . name ) . dropCf ( cfm . cfId ) ; <nl> } <nl> finally <nl> diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> index ea9dd53 . . 0461a95 100644 <nl> - - - a / test / unit / org / apache / cassandra / db / DefsTest . java <nl> + + + b / test / unit / org / apache / cassandra / db / DefsTest . java <nl> @ @ - 430 , 7 + 430 , 7 @ @ public class DefsTest extends CleanupHelper <nl> assert ks ! = null ; <nl> final CFMetaData cfm = ks . cfMetaData ( ) . get ( " Standard2 " ) ; <nl> assert cfm ! = null ; <nl> - <nl> + <nl> / / write some data , force a flush , then verify that files exist on disk . <nl> RowMutation rm = new RowMutation ( ks . name , dk . key ) ; <nl> for ( int i = 0 ; i < 100 ; i + + ) <nl> @ @ - 471 , 7 + 471 , 28 @ @ public class DefsTest extends CleanupHelper <nl> } <nl> assert threw ; <nl> } <nl> - <nl> + <nl> + @ Test <nl> + public void dropKSUnflushed ( ) throws ConfigurationException , IOException , ExecutionException , InterruptedException <nl> + { <nl> + DecoratedKey dk = Util . dk ( " dropKs " ) ; <nl> + / / sanity <nl> + final KSMetaData ks = DatabaseDescriptor . getTableDefinition ( " Keyspace3 " ) ; <nl> + assert ks ! = null ; <nl> + final CFMetaData cfm = ks . cfMetaData ( ) . get ( " Standard1 " ) ; <nl> + assert cfm ! = null ; <nl> + <nl> + / / write some data <nl> + RowMutation rm = new RowMutation ( ks . name , dk . key ) ; <nl> + for ( int i = 0 ; i < 100 ; i + + ) <nl> + rm . add ( new QueryPath ( cfm . cfName , null , ByteBufferUtil . bytes ( ( " col " + i ) ) ) , ByteBufferUtil . bytes ( " anyvalue " ) , 1L ) ; <nl> + rm . apply ( ) ; <nl> + <nl> + new DropKeyspace ( ks . name ) . apply ( ) ; <nl> + <nl> + assert DatabaseDescriptor . getTableDefinition ( ks . name ) = = null ; <nl> + } <nl> + <nl> @ Test <nl> public void renameKs ( ) throws ConfigurationException , IOException , ExecutionException , InterruptedException <nl> {

TEST DIFF:
diff - - git a / test / unit / org / apache / cassandra / db / CellTest . java b / test / unit / org / apache / cassandra / db / CellTest . java 
 index ae22816 . . 14d05c6 100644 
 - - - a / test / unit / org / apache / cassandra / db / CellTest . java 
 + + + b / test / unit / org / apache / cassandra / db / CellTest . java 
 @ @ - 244 , 11 + 244 , 13 @ @ public class CellTest 
 Assert . assertEquals ( - 1 , testExpiring ( " val " , " a " , 2 , 1 , null , " val " , 1L , 2 ) ) ; 
 
 Assert . assertEquals ( - 1 , testExpiring ( " val " , " a " , 1 , 2 , null , null , null , 1 ) ) ; 
 - Assert . assertEquals ( 1 , testExpiring ( " val " , " a " , 1 , 2 , null , " val " , null , 1 ) ) ; 
 + Assert . assertEquals ( - 1 , testExpiring ( " val " , " a " , 1 , 2 , null , " val " , null , 1 ) ) ; 
 + Assert . assertEquals ( 1 , testExpiring ( " val " , " a " , 1 , 1 , null , " val " , null , 2 ) ) ; 
 + Assert . assertEquals ( 1 , testExpiring ( " val " , " a " , 1 , 1 , null , " val " , null , 1 ) ) ; 
 
 / / newer value 
 Assert . assertEquals ( - 1 , testExpiring ( " val " , " b " , 2 , 1 , null , " a " , null , null ) ) ; 
 - Assert . assertEquals ( - 1 , testExpiring ( " val " , " b " , 2 , 1 , null , " a " , null , 2 ) ) ; 
 + Assert . assertEquals ( - 1 , testExpiring ( " val " , " b " , 2 , 1 , null , " a " , null , 1 ) ) ; 
 } 
 
 class SimplePurger implements DeletionPurger

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index c416594 . . ac08148 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 79 , 8 + 79 , 7 @ @ 
 * fixes for cache save / load ( CASSANDRA - 2172 , - 2174 ) 
 * Handle whole - row deletions in CFOutputFormat ( CASSANDRA - 2014 ) 
 * Make memtable _ flush _ writers flush in parallel ( CASSANDRA - 2178 ) 
 - * make key cache preheating default to false ; enable with 
 - - Dcompaction _ preheat _ key _ cache = true ( CASSANDRA - 2175 ) 
 + * Add compaction _ preheat _ key _ cache option ( CASSANDRA - 2175 ) 
 * refactor stress . py to have only one copy of the format string 
 used for creating row keys ( CASSANDRA - 2108 ) 
 * validate index names for \ w + ( CASSANDRA - 2196 ) 
 diff - - git a / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java b / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java 
 index 6025622 . . da59438 100644 
 - - - a / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java 
 + + + b / contrib / stress / src / org / apache / cassandra / contrib / stress / Session . java 
 @ @ - 119 , 6 + 119 , 12 @ @ public class Session 
 { 
 CommandLine cmd = parser . parse ( availableOptions , arguments ) ; 
 
 + if ( cmd . getArgs ( ) . length > 0 ) 
 + { 
 + System . err . println ( " Application does not allow arbitrary arguments : " + StringUtils . join ( cmd . getArgList ( ) , " , " ) ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + 
 if ( cmd . hasOption ( " h " ) ) 
 throw new IllegalArgumentException ( " help " ) ; 
 
 diff - - git a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 index d80b145 . . fc0352e 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 + + + b / src / java / org / apache / cassandra / db / migration / DropColumnFamily . java 
 @ @ - 80 , 11 + 80 , 12 @ @ public class DropColumnFamily extends Migration 
 
 if ( ! clientMode ) 
 { 
 + cfs . snapshot ( Table . getTimestampedSnapshotName ( null ) ) ; 
 + 
 CompactionManager . instance . getCompactionLock ( ) . lock ( ) ; 
 cfs . flushLock . lock ( ) ; 
 try 
 { 
 - cfs . snapshot ( Table . getTimestampedSnapshotName ( null ) ) ; 
 Table . open ( ksm . name ) . dropCf ( cfm . cfId ) ; 
 } 
 finally 
 diff - - git a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 index 1fefbda . . cdfcc23 100644 
 - - - a / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 + + + b / src / java / org / apache / cassandra / db / migration / DropKeyspace . java 
 @ @ - 63 , 10 + 63 , 10 @ @ public class DropKeyspace extends Migration 
 CFMetaData . purge ( cfm ) ; 
 if ( ! clientMode ) 
 { 
 + cfs . snapshot ( snapshotName ) ; 
 cfs . flushLock . lock ( ) ; 
 try 
 { 
 - cfs . snapshot ( snapshotName ) ; 
 Table . open ( ksm . name ) . dropCf ( cfm . cfId ) ; 
 } 
 finally 
 diff - - git a / test / unit / org / apache / cassandra / db / DefsTest . java b / test / unit / org / apache / cassandra / db / DefsTest . java 
 index ea9dd53 . . 0461a95 100644 
 - - - a / test / unit / org / apache / cassandra / db / DefsTest . java 
 + + + b / test / unit / org / apache / cassandra / db / DefsTest . java 
 @ @ - 430 , 7 + 430 , 7 @ @ public class DefsTest extends CleanupHelper 
 assert ks ! = null ; 
 final CFMetaData cfm = ks . cfMetaData ( ) . get ( " Standard2 " ) ; 
 assert cfm ! = null ; 
 - 
 + 
 / / write some data , force a flush , then verify that files exist on disk . 
 RowMutation rm = new RowMutation ( ks . name , dk . key ) ; 
 for ( int i = 0 ; i < 100 ; i + + ) 
 @ @ - 471 , 7 + 471 , 28 @ @ public class DefsTest extends CleanupHelper 
 } 
 assert threw ; 
 } 
 - 
 + 
 + @ Test 
 + public void dropKSUnflushed ( ) throws ConfigurationException , IOException , ExecutionException , InterruptedException 
 + { 
 + DecoratedKey dk = Util . dk ( " dropKs " ) ; 
 + / / sanity 
 + final KSMetaData ks = DatabaseDescriptor . getTableDefinition ( " Keyspace3 " ) ; 
 + assert ks ! = null ; 
 + final CFMetaData cfm = ks . cfMetaData ( ) . get ( " Standard1 " ) ; 
 + assert cfm ! = null ; 
 + 
 + / / write some data 
 + RowMutation rm = new RowMutation ( ks . name , dk . key ) ; 
 + for ( int i = 0 ; i < 100 ; i + + ) 
 + rm . add ( new QueryPath ( cfm . cfName , null , ByteBufferUtil . bytes ( ( " col " + i ) ) ) , ByteBufferUtil . bytes ( " anyvalue " ) , 1L ) ; 
 + rm . apply ( ) ; 
 + 
 + new DropKeyspace ( ks . name ) . apply ( ) ; 
 + 
 + assert DatabaseDescriptor . getTableDefinition ( ks . name ) = = null ; 
 + } 
 + 
 @ Test 
 public void renameKs ( ) throws ConfigurationException , IOException , ExecutionException , InterruptedException 
 {
