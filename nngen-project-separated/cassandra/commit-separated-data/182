BLEU SCORE: 0.033864985683445356

TEST MSG: Comma at the end of the seed list is interpretated as localhost
GENERATED MSG: tolerate whitespace in seed CDL

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index ae0c7b2 . . f52aceb 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 4 . 0 <nl> + * Comma at the end of the seed list is interpretated as localhost ( CASSANDRA - 14285 ) <nl> * Refactor read executor and response resolver , abstract read repair ( CASSANDRA - 14058 ) <nl> * Add optional startup delay to wait until peers are ready ( CASSANDRA - 13993 ) <nl> * Add a few options to nodetool verify ( CASSANDRA - 14201 ) <nl> diff - - git a / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java b / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java <nl> index 47401a0 . . fe500b4 100644 <nl> - - - a / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java <nl> + + + b / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java <nl> @ @ - 52 , 7 + 52 , 9 @ @ public class SimpleSeedProvider implements SeedProvider <nl> { <nl> try <nl> { <nl> - seeds . add ( InetAddressAndPort . getByName ( host . trim ( ) ) ) ; <nl> + if ( ! host . trim ( ) . isEmpty ( ) ) { <nl> + seeds . add ( InetAddressAndPort . getByName ( host . trim ( ) ) ) ; <nl> + } <nl> } <nl> catch ( UnknownHostException ex ) <nl> {
NEAREST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 21cb394 . . 3ce7479 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 15 , 6 + 15 , 7 @ @ <nl> * fix Scrub compaction finishing ( CASSANDRA - 3255 ) <nl> * Fix tool . bat files when CASSANDRA _ HOME contains spaces ( CASSANDRA - 3258 ) <nl> * Evict gossip state immediately when a token is taken over by a new IP ( CASSANDRA - 3259 ) <nl> + * allow wrapping ranges in Hadoop queries ( CASSANDRA - 3137 ) <nl> <nl> <nl> 0 . 8 . 6 <nl> diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java <nl> index 51c8fca . . 8fd3f53 100644 <nl> - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java <nl> + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java <nl> @ @ - 134 , 13 + 134 , 13 @ @ public class ColumnFamilyInputFormat extends InputFormat < ByteBuffer , SortedMap < B <nl> <nl> if ( dhtRange . intersects ( jobRange ) ) <nl> { <nl> - Set < Range > intersections = dhtRange . intersectionWith ( jobRange ) ; <nl> - assert intersections . size ( ) = = 1 : " wrapping ranges not yet supported " ; <nl> - Range intersection = intersections . iterator ( ) . next ( ) ; <nl> - range . start _ token = partitioner . getTokenFactory ( ) . toString ( intersection . left ) ; <nl> - range . end _ token = partitioner . getTokenFactory ( ) . toString ( intersection . right ) ; <nl> - / / for each range , pick a live owner and ask it to compute bite - sized splits <nl> - splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; <nl> + for ( Range intersection : dhtRange . intersectionWith ( jobRange ) ) <nl> + { <nl> + range . start _ token = partitioner . getTokenFactory ( ) . toString ( intersection . left ) ; <nl> + range . end _ token = partitioner . getTokenFactory ( ) . toString ( intersection . right ) ; <nl> + / / for each range , pick a live owner and ask it to compute bite - sized splits <nl> + splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; <nl> + } <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index ae0c7b2 . . f52aceb 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 4 . 0 
 + * Comma at the end of the seed list is interpretated as localhost ( CASSANDRA - 14285 ) 
 * Refactor read executor and response resolver , abstract read repair ( CASSANDRA - 14058 ) 
 * Add optional startup delay to wait until peers are ready ( CASSANDRA - 13993 ) 
 * Add a few options to nodetool verify ( CASSANDRA - 14201 ) 
 diff - - git a / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java b / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java 
 index 47401a0 . . fe500b4 100644 
 - - - a / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java 
 + + + b / src / java / org / apache / cassandra / locator / SimpleSeedProvider . java 
 @ @ - 52 , 7 + 52 , 9 @ @ public class SimpleSeedProvider implements SeedProvider 
 { 
 try 
 { 
 - seeds . add ( InetAddressAndPort . getByName ( host . trim ( ) ) ) ; 
 + if ( ! host . trim ( ) . isEmpty ( ) ) { 
 + seeds . add ( InetAddressAndPort . getByName ( host . trim ( ) ) ) ; 
 + } 
 } 
 catch ( UnknownHostException ex ) 
 {

NEAREST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 21cb394 . . 3ce7479 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 15 , 6 + 15 , 7 @ @ 
 * fix Scrub compaction finishing ( CASSANDRA - 3255 ) 
 * Fix tool . bat files when CASSANDRA _ HOME contains spaces ( CASSANDRA - 3258 ) 
 * Evict gossip state immediately when a token is taken over by a new IP ( CASSANDRA - 3259 ) 
 + * allow wrapping ranges in Hadoop queries ( CASSANDRA - 3137 ) 
 
 
 0 . 8 . 6 
 diff - - git a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java 
 index 51c8fca . . 8fd3f53 100644 
 - - - a / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java 
 + + + b / src / java / org / apache / cassandra / hadoop / ColumnFamilyInputFormat . java 
 @ @ - 134 , 13 + 134 , 13 @ @ public class ColumnFamilyInputFormat extends InputFormat < ByteBuffer , SortedMap < B 
 
 if ( dhtRange . intersects ( jobRange ) ) 
 { 
 - Set < Range > intersections = dhtRange . intersectionWith ( jobRange ) ; 
 - assert intersections . size ( ) = = 1 : " wrapping ranges not yet supported " ; 
 - Range intersection = intersections . iterator ( ) . next ( ) ; 
 - range . start _ token = partitioner . getTokenFactory ( ) . toString ( intersection . left ) ; 
 - range . end _ token = partitioner . getTokenFactory ( ) . toString ( intersection . right ) ; 
 - / / for each range , pick a live owner and ask it to compute bite - sized splits 
 - splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; 
 + for ( Range intersection : dhtRange . intersectionWith ( jobRange ) ) 
 + { 
 + range . start _ token = partitioner . getTokenFactory ( ) . toString ( intersection . left ) ; 
 + range . end _ token = partitioner . getTokenFactory ( ) . toString ( intersection . right ) ; 
 + / / for each range , pick a live owner and ask it to compute bite - sized splits 
 + splitfutures . add ( executor . submit ( new SplitCallable ( range , conf ) ) ) ; 
 + } 
 } 
 } 
 }
