BLEU SCORE: 0.06870636427700047

TEST MSG: CQLSSTableWriter does not allow Update statement
GENERATED MSG: Fix CQLSSTableWriter throwing exception and spawning threads

TEST DIFF (one line): diff - - git a / CHANGES . txt b / CHANGES . txt <nl> index 08de041 . . f566b1b 100644 <nl> - - - a / CHANGES . txt <nl> + + + b / CHANGES . txt <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> 3 . 10 <nl> + * CQLSSTableWriter does not allow Update statement ( CASSANDRA - 12450 ) <nl> * Config class uses boxed types but DD exposes primitive types ( CASSANDRA - 12199 ) <nl> * Add pre - and post - shutdown hooks to Storage Service ( CASSANDRA - 12461 ) <nl> * Add hint delivery metrics ( CASSANDRA - 12693 ) <nl> diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> index c91105e . . 5313a1a 100644 <nl> - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java <nl> @ @ - 546 , 6 + 546 , 22 @ @ public class QueryProcessor implements QueryHandler <nl> return statement . prepare ( ) ; <nl> } <nl> <nl> + public static < T extends ParsedStatement > T parseStatement ( String queryStr , Class < T > klass , String type ) throws SyntaxException <nl> + { <nl> + try <nl> + { <nl> + ParsedStatement stmt = parseStatement ( queryStr ) ; <nl> + <nl> + if ( ! klass . isAssignableFrom ( stmt . getClass ( ) ) ) <nl> + throw new IllegalArgumentException ( " Invalid query , must be a " + type + " statement but was : " + stmt . getClass ( ) ) ; <nl> + <nl> + return klass . cast ( stmt ) ; <nl> + } <nl> + catch ( RequestValidationException e ) <nl> + { <nl> + throw new IllegalArgumentException ( e . getMessage ( ) , e ) ; <nl> + } <nl> + } <nl> public static ParsedStatement parseStatement ( String queryStr ) throws SyntaxException <nl> { <nl> try <nl> @ @ - 622 , 7 + 638 , 7 @ @ public class QueryProcessor implements QueryHandler <nl> while ( iterator . hasNext ( ) ) <nl> { <nl> Map . Entry < MD5Digest , ParsedStatement . Prepared > entry = iterator . next ( ) ; <nl> - if ( shouldInvalidate ( ksName , cfName , entry . getValue ( ) . statement ) ) <nl> + if ( shouldInvalidate ( ksName , cfName , entry . getValue ( ) . statement ) ) <nl> { <nl> SystemKeyspace . removePreparedStatement ( entry . getKey ( ) ) ; <nl> iterator . remove ( ) ; <nl> diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> index 8a9d01d . . a195235 100644 <nl> - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . cql3 . UpdateParameters ; <nl> import org . apache . cassandra . cql3 . functions . UDHelper ; <nl> import org . apache . cassandra . cql3 . statements . CreateTableStatement ; <nl> import org . apache . cassandra . cql3 . statements . CreateTypeStatement ; <nl> + import org . apache . cassandra . cql3 . statements . ModificationStatement ; <nl> import org . apache . cassandra . cql3 . statements . ParsedStatement ; <nl> import org . apache . cassandra . cql3 . statements . UpdateStatement ; <nl> import org . apache . cassandra . db . Clustering ; <nl> @ @ - 50 , 7 + 51 , 6 @ @ import org . apache . cassandra . db . partitions . Partition ; <nl> import org . apache . cassandra . dht . IPartitioner ; <nl> import org . apache . cassandra . dht . Murmur3Partitioner ; <nl> import org . apache . cassandra . exceptions . InvalidRequestException ; <nl> - import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> import org . apache . cassandra . io . sstable . format . SSTableFormat ; <nl> import org . apache . cassandra . schema . KeyspaceMetadata ; <nl> @ @ - 343 , 7 + 343 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> <nl> private CreateTableStatement . RawStatement schemaStatement ; <nl> private final List < CreateTypeStatement > typeStatements ; <nl> - private UpdateStatement . ParsedInsert insertStatement ; <nl> + private ModificationStatement . Parsed insertStatement ; <nl> private IPartitioner partitioner ; <nl> <nl> private boolean sorted = false ; <nl> @ @ - 391 , 7 + 391 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> <nl> public Builder withType ( String typeDefinition ) throws SyntaxException <nl> { <nl> - typeStatements . add ( parseStatement ( typeDefinition , CreateTypeStatement . class , " CREATE TYPE " ) ) ; <nl> + typeStatements . add ( QueryProcessor . parseStatement ( typeDefinition , CreateTypeStatement . class , " CREATE TYPE " ) ) ; <nl> return this ; <nl> } <nl> <nl> @ @ - 411 , 7 + 411 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> * / <nl> public Builder forTable ( String schema ) <nl> { <nl> - this . schemaStatement = parseStatement ( schema , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; <nl> + this . schemaStatement = QueryProcessor . parseStatement ( schema , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; <nl> return this ; <nl> } <nl> <nl> @ @ - 432 , 14 + 432 , 13 @ @ public class CQLSSTableWriter implements Closeable <nl> } <nl> <nl> / * * <nl> - * The INSERT statement defining the order of the values to add for a given CQL row . <nl> + * The INSERT or UPDATE statement defining the order of the values to add for a given CQL row . <nl> * < p > <nl> * Please note that the provided INSERT statement < b > must < / b > use a fully - qualified <nl> - * table name , one that include the keyspace name . Morewover , said statement must use <nl> - * bind variables since it is those bind variables that will be bound to values by the <nl> - * resulting writer . <nl> + * table name , one that include the keyspace name . Moreover , said statement must use <nl> + * bind variables since these variables will be bound to values by the resulting writer . <nl> * < p > <nl> - * This is a mandatory option , and this needs to be called after foTable ( ) . <nl> + * This is a mandatory option . <nl> * <nl> * @ param insert an insertion statement that defines the order <nl> * of column values to use . <nl> @ @ - 450 , 7 + 449 , 7 @ @ public class CQLSSTableWriter implements Closeable <nl> * / <nl> public Builder using ( String insert ) <nl> { <nl> - this . insertStatement = parseStatement ( insert , UpdateStatement . ParsedInsert . class , " INSERT " ) ; <nl> + this . insertStatement = QueryProcessor . parseStatement ( insert , ModificationStatement . Parsed . class , " INSERT / UPDATE " ) ; <nl> return this ; <nl> } <nl> <nl> @ @ - 586 , 21 + 585 , 4 @ @ public class CQLSSTableWriter implements Closeable <nl> return Pair . create ( insert , cqlStatement . boundNames ) ; <nl> } <nl> } <nl> - <nl> - private static < T extends ParsedStatement > T parseStatement ( String query , Class < T > klass , String type ) <nl> - { <nl> - try <nl> - { <nl> - ParsedStatement stmt = QueryProcessor . parseStatement ( query ) ; <nl> - <nl> - if ( ! stmt . getClass ( ) . equals ( klass ) ) <nl> - throw new IllegalArgumentException ( " Invalid query , must be a " + type + " statement but was : " + stmt . getClass ( ) ) ; <nl> - <nl> - return klass . cast ( stmt ) ; <nl> - } <nl> - catch ( RequestValidationException e ) <nl> - { <nl> - throw new IllegalArgumentException ( e . getMessage ( ) , e ) ; <nl> - } <nl> - } <nl> } <nl> diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> index 3c80b9e . . ac7f4ad 100644 <nl> - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java <nl> @ @ - 27 , 7 + 27 , 6 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . io . Files ; <nl> <nl> - import org . junit . AfterClass ; <nl> import org . junit . BeforeClass ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 48 , 6 + 47 , 7 @ @ import com . datastax . driver . core . UDTValue ; <nl> import com . datastax . driver . core . UserType ; <nl> <nl> import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . fail ; <nl> <nl> public class CQLSSTableWriterTest <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class CQLSSTableWriterTest <nl> } <nl> } <nl> <nl> - @ Test ( expected = IllegalArgumentException . class ) <nl> + @ Test <nl> public void testForbidCounterUpdates ( ) throws Exception <nl> { <nl> String KS = " cql _ keyspace " ; <nl> @ @ - 142 , 10 + 142 , 18 @ @ public class CQLSSTableWriterTest <nl> " PRIMARY KEY ( my _ id ) " + <nl> " ) " ; <nl> String insert = String . format ( " UPDATE cql _ keyspace . counter1 SET my _ counter = my _ counter - ? WHERE my _ id = ? " ) ; <nl> - CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) <nl> - . forTable ( schema ) <nl> - . withPartitioner ( Murmur3Partitioner . instance ) <nl> - . using ( insert ) . build ( ) ; <nl> + try <nl> + { <nl> + CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) <nl> + . forTable ( schema ) <nl> + . withPartitioner ( Murmur3Partitioner . instance ) <nl> + . using ( insert ) . build ( ) ; <nl> + fail ( " Counter update statements should not be supported " ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) <nl> + { <nl> + assertEquals ( e . getMessage ( ) , " Counter update statements are not supported " ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> @ @ - 167 , 8 + 175 , 8 @ @ public class CQLSSTableWriterTest <nl> String insert = " INSERT INTO ks . test ( k , v ) VALUES ( ? , ? ) " ; <nl> CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) <nl> . inDirectory ( dataDir ) <nl> - . forTable ( schema ) <nl> . using ( insert ) <nl> + . forTable ( schema ) <nl> . withBufferSizeInMB ( 1 ) <nl> . build ( ) ; <nl> <nl> @ @ - 532 , 6 + 540 , 55 @ @ public class CQLSSTableWriterTest <nl> assertEquals ( " 5 " , r5 . getString ( " v " ) ) ; <nl> } <nl> <nl> + @ Test <nl> + public void testUpdateSatement ( ) throws Exception <nl> + { <nl> + final String KS = " cql _ keyspace6 " ; <nl> + final String TABLE = " table6 " ; <nl> + <nl> + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " <nl> + + " k int , " <nl> + + " c1 int , " <nl> + + " c2 int , " <nl> + + " v text , " <nl> + + " PRIMARY KEY ( k , c1 , c2 ) " <nl> + + " ) " ; <nl> + <nl> + File tempdir = Files . createTempDir ( ) ; <nl> + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; <nl> + assert dataDir . mkdirs ( ) ; <nl> + <nl> + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) <nl> + . inDirectory ( dataDir ) <nl> + . forTable ( schema ) <nl> + . using ( " UPDATE " + KS + " . " + TABLE + " SET v = ? " + <nl> + " WHERE k = ? AND c1 = ? AND c2 = ? " ) <nl> + . build ( ) ; <nl> + <nl> + writer . addRow ( " a " , 1 , 2 , 3 ) ; <nl> + writer . addRow ( " b " , 4 , 5 , 6 ) ; <nl> + writer . addRow ( null , 7 , 8 , 9 ) ; <nl> + writer . addRow ( CQLSSTableWriter . UNSET _ VALUE , 10 , 11 , 12 ) ; <nl> + writer . close ( ) ; <nl> + loadSSTables ( dataDir , KS ) ; <nl> + <nl> + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; <nl> + assertEquals ( 2 , resultSet . size ( ) ) ; <nl> + <nl> + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; <nl> + UntypedResultSet . Row r1 = iter . next ( ) ; <nl> + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; <nl> + assertEquals ( 2 , r1 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 3 , r1 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( " a " , r1 . getString ( " v " ) ) ; <nl> + UntypedResultSet . Row r2 = iter . next ( ) ; <nl> + assertEquals ( 4 , r2 . getInt ( " k " ) ) ; <nl> + assertEquals ( 5 , r2 . getInt ( " c1 " ) ) ; <nl> + assertEquals ( 6 , r2 . getInt ( " c2 " ) ) ; <nl> + assertEquals ( " b " , r2 . getString ( " v " ) ) ; <nl> + assertFalse ( iter . hasNext ( ) ) ; <nl> + } <nl> + <nl> private static void loadSSTables ( File dataDir , String ks ) throws ExecutionException , InterruptedException <nl> { <nl> SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) <nl> diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> index 84d4abd . . 9c0be4e 100644 <nl> - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; <nl> import org . apache . cassandra . config . ColumnDefinition ; <nl> import org . apache . cassandra . cql3 . CQLFragmentParser ; <nl> import org . apache . cassandra . cql3 . CqlParser ; <nl> + import org . apache . cassandra . cql3 . QueryProcessor ; <nl> import org . apache . cassandra . cql3 . statements . CreateTableStatement ; <nl> import org . apache . cassandra . exceptions . RequestValidationException ; <nl> import org . apache . cassandra . exceptions . SyntaxException ; <nl> @ @ - 62 , 8 + 63 , 6 @ @ import org . yaml . snakeyaml . Yaml ; <nl> import org . yaml . snakeyaml . constructor . Constructor ; <nl> import org . yaml . snakeyaml . error . YAMLException ; <nl> <nl> - import static org . apache . cassandra . io . sstable . StressCQLSSTableWriter . parseStatement ; <nl> - <nl> public class StressProfile implements Serializable <nl> { <nl> private String keyspaceCql ; <nl> @ @ - 449 , 7 + 448 , 7 @ @ public class StressProfile implements Serializable <nl> <nl> public CreateTableStatement . RawStatement getCreateStatement ( ) <nl> { <nl> - CreateTableStatement . RawStatement createStatement = parseStatement ( tableCql , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; <nl> + CreateTableStatement . RawStatement createStatement = QueryProcessor . parseStatement ( tableCql , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; <nl> createStatement . prepareKeyspace ( keyspaceName ) ; <nl> <nl> return createStatement ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . txt b / CHANGES . txt 
 index 08de041 . . f566b1b 100644 
 - - - a / CHANGES . txt 
 + + + b / CHANGES . txt 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 3 . 10 
 + * CQLSSTableWriter does not allow Update statement ( CASSANDRA - 12450 ) 
 * Config class uses boxed types but DD exposes primitive types ( CASSANDRA - 12199 ) 
 * Add pre - and post - shutdown hooks to Storage Service ( CASSANDRA - 12461 ) 
 * Add hint delivery metrics ( CASSANDRA - 12693 ) 
 diff - - git a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 index c91105e . . 5313a1a 100644 
 - - - a / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 + + + b / src / java / org / apache / cassandra / cql3 / QueryProcessor . java 
 @ @ - 546 , 6 + 546 , 22 @ @ public class QueryProcessor implements QueryHandler 
 return statement . prepare ( ) ; 
 } 
 
 + public static < T extends ParsedStatement > T parseStatement ( String queryStr , Class < T > klass , String type ) throws SyntaxException 
 + { 
 + try 
 + { 
 + ParsedStatement stmt = parseStatement ( queryStr ) ; 
 + 
 + if ( ! klass . isAssignableFrom ( stmt . getClass ( ) ) ) 
 + throw new IllegalArgumentException ( " Invalid query , must be a " + type + " statement but was : " + stmt . getClass ( ) ) ; 
 + 
 + return klass . cast ( stmt ) ; 
 + } 
 + catch ( RequestValidationException e ) 
 + { 
 + throw new IllegalArgumentException ( e . getMessage ( ) , e ) ; 
 + } 
 + } 
 public static ParsedStatement parseStatement ( String queryStr ) throws SyntaxException 
 { 
 try 
 @ @ - 622 , 7 + 638 , 7 @ @ public class QueryProcessor implements QueryHandler 
 while ( iterator . hasNext ( ) ) 
 { 
 Map . Entry < MD5Digest , ParsedStatement . Prepared > entry = iterator . next ( ) ; 
 - if ( shouldInvalidate ( ksName , cfName , entry . getValue ( ) . statement ) ) 
 + if ( shouldInvalidate ( ksName , cfName , entry . getValue ( ) . statement ) ) 
 { 
 SystemKeyspace . removePreparedStatement ( entry . getKey ( ) ) ; 
 iterator . remove ( ) ; 
 diff - - git a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 index 8a9d01d . . a195235 100644 
 - - - a / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 + + + b / src / java / org / apache / cassandra / io / sstable / CQLSSTableWriter . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . cql3 . UpdateParameters ; 
 import org . apache . cassandra . cql3 . functions . UDHelper ; 
 import org . apache . cassandra . cql3 . statements . CreateTableStatement ; 
 import org . apache . cassandra . cql3 . statements . CreateTypeStatement ; 
 + import org . apache . cassandra . cql3 . statements . ModificationStatement ; 
 import org . apache . cassandra . cql3 . statements . ParsedStatement ; 
 import org . apache . cassandra . cql3 . statements . UpdateStatement ; 
 import org . apache . cassandra . db . Clustering ; 
 @ @ - 50 , 7 + 51 , 6 @ @ import org . apache . cassandra . db . partitions . Partition ; 
 import org . apache . cassandra . dht . IPartitioner ; 
 import org . apache . cassandra . dht . Murmur3Partitioner ; 
 import org . apache . cassandra . exceptions . InvalidRequestException ; 
 - import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 import org . apache . cassandra . io . sstable . format . SSTableFormat ; 
 import org . apache . cassandra . schema . KeyspaceMetadata ; 
 @ @ - 343 , 7 + 343 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 
 private CreateTableStatement . RawStatement schemaStatement ; 
 private final List < CreateTypeStatement > typeStatements ; 
 - private UpdateStatement . ParsedInsert insertStatement ; 
 + private ModificationStatement . Parsed insertStatement ; 
 private IPartitioner partitioner ; 
 
 private boolean sorted = false ; 
 @ @ - 391 , 7 + 391 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 
 public Builder withType ( String typeDefinition ) throws SyntaxException 
 { 
 - typeStatements . add ( parseStatement ( typeDefinition , CreateTypeStatement . class , " CREATE TYPE " ) ) ; 
 + typeStatements . add ( QueryProcessor . parseStatement ( typeDefinition , CreateTypeStatement . class , " CREATE TYPE " ) ) ; 
 return this ; 
 } 
 
 @ @ - 411 , 7 + 411 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 * / 
 public Builder forTable ( String schema ) 
 { 
 - this . schemaStatement = parseStatement ( schema , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; 
 + this . schemaStatement = QueryProcessor . parseStatement ( schema , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; 
 return this ; 
 } 
 
 @ @ - 432 , 14 + 432 , 13 @ @ public class CQLSSTableWriter implements Closeable 
 } 
 
 / * * 
 - * The INSERT statement defining the order of the values to add for a given CQL row . 
 + * The INSERT or UPDATE statement defining the order of the values to add for a given CQL row . 
 * < p > 
 * Please note that the provided INSERT statement < b > must < / b > use a fully - qualified 
 - * table name , one that include the keyspace name . Morewover , said statement must use 
 - * bind variables since it is those bind variables that will be bound to values by the 
 - * resulting writer . 
 + * table name , one that include the keyspace name . Moreover , said statement must use 
 + * bind variables since these variables will be bound to values by the resulting writer . 
 * < p > 
 - * This is a mandatory option , and this needs to be called after foTable ( ) . 
 + * This is a mandatory option . 
 * 
 * @ param insert an insertion statement that defines the order 
 * of column values to use . 
 @ @ - 450 , 7 + 449 , 7 @ @ public class CQLSSTableWriter implements Closeable 
 * / 
 public Builder using ( String insert ) 
 { 
 - this . insertStatement = parseStatement ( insert , UpdateStatement . ParsedInsert . class , " INSERT " ) ; 
 + this . insertStatement = QueryProcessor . parseStatement ( insert , ModificationStatement . Parsed . class , " INSERT / UPDATE " ) ; 
 return this ; 
 } 
 
 @ @ - 586 , 21 + 585 , 4 @ @ public class CQLSSTableWriter implements Closeable 
 return Pair . create ( insert , cqlStatement . boundNames ) ; 
 } 
 } 
 - 
 - private static < T extends ParsedStatement > T parseStatement ( String query , Class < T > klass , String type ) 
 - { 
 - try 
 - { 
 - ParsedStatement stmt = QueryProcessor . parseStatement ( query ) ; 
 - 
 - if ( ! stmt . getClass ( ) . equals ( klass ) ) 
 - throw new IllegalArgumentException ( " Invalid query , must be a " + type + " statement but was : " + stmt . getClass ( ) ) ; 
 - 
 - return klass . cast ( stmt ) ; 
 - } 
 - catch ( RequestValidationException e ) 
 - { 
 - throw new IllegalArgumentException ( e . getMessage ( ) , e ) ; 
 - } 
 - } 
 } 
 diff - - git a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 index 3c80b9e . . ac7f4ad 100644 
 - - - a / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 + + + b / test / unit / org / apache / cassandra / io / sstable / CQLSSTableWriterTest . java 
 @ @ - 27 , 7 + 27 , 6 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . io . Files ; 
 
 - import org . junit . AfterClass ; 
 import org . junit . BeforeClass ; 
 import org . junit . Test ; 
 
 @ @ - 48 , 6 + 47 , 7 @ @ import com . datastax . driver . core . UDTValue ; 
 import com . datastax . driver . core . UserType ; 
 
 import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . fail ; 
 
 public class CQLSSTableWriterTest 
 @ @ - 126 , 7 + 126 , 7 @ @ public class CQLSSTableWriterTest 
 } 
 } 
 
 - @ Test ( expected = IllegalArgumentException . class ) 
 + @ Test 
 public void testForbidCounterUpdates ( ) throws Exception 
 { 
 String KS = " cql _ keyspace " ; 
 @ @ - 142 , 10 + 142 , 18 @ @ public class CQLSSTableWriterTest 
 " PRIMARY KEY ( my _ id ) " + 
 " ) " ; 
 String insert = String . format ( " UPDATE cql _ keyspace . counter1 SET my _ counter = my _ counter - ? WHERE my _ id = ? " ) ; 
 - CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) 
 - . forTable ( schema ) 
 - . withPartitioner ( Murmur3Partitioner . instance ) 
 - . using ( insert ) . build ( ) ; 
 + try 
 + { 
 + CQLSSTableWriter . builder ( ) . inDirectory ( dataDir ) 
 + . forTable ( schema ) 
 + . withPartitioner ( Murmur3Partitioner . instance ) 
 + . using ( insert ) . build ( ) ; 
 + fail ( " Counter update statements should not be supported " ) ; 
 + } 
 + catch ( IllegalArgumentException e ) 
 + { 
 + assertEquals ( e . getMessage ( ) , " Counter update statements are not supported " ) ; 
 + } 
 } 
 
 @ Test 
 @ @ - 167 , 8 + 175 , 8 @ @ public class CQLSSTableWriterTest 
 String insert = " INSERT INTO ks . test ( k , v ) VALUES ( ? , ? ) " ; 
 CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) 
 . inDirectory ( dataDir ) 
 - . forTable ( schema ) 
 . using ( insert ) 
 + . forTable ( schema ) 
 . withBufferSizeInMB ( 1 ) 
 . build ( ) ; 
 
 @ @ - 532 , 6 + 540 , 55 @ @ public class CQLSSTableWriterTest 
 assertEquals ( " 5 " , r5 . getString ( " v " ) ) ; 
 } 
 
 + @ Test 
 + public void testUpdateSatement ( ) throws Exception 
 + { 
 + final String KS = " cql _ keyspace6 " ; 
 + final String TABLE = " table6 " ; 
 + 
 + final String schema = " CREATE TABLE " + KS + " . " + TABLE + " ( " 
 + + " k int , " 
 + + " c1 int , " 
 + + " c2 int , " 
 + + " v text , " 
 + + " PRIMARY KEY ( k , c1 , c2 ) " 
 + + " ) " ; 
 + 
 + File tempdir = Files . createTempDir ( ) ; 
 + File dataDir = new File ( tempdir . getAbsolutePath ( ) + File . separator + KS + File . separator + TABLE ) ; 
 + assert dataDir . mkdirs ( ) ; 
 + 
 + CQLSSTableWriter writer = CQLSSTableWriter . builder ( ) 
 + . inDirectory ( dataDir ) 
 + . forTable ( schema ) 
 + . using ( " UPDATE " + KS + " . " + TABLE + " SET v = ? " + 
 + " WHERE k = ? AND c1 = ? AND c2 = ? " ) 
 + . build ( ) ; 
 + 
 + writer . addRow ( " a " , 1 , 2 , 3 ) ; 
 + writer . addRow ( " b " , 4 , 5 , 6 ) ; 
 + writer . addRow ( null , 7 , 8 , 9 ) ; 
 + writer . addRow ( CQLSSTableWriter . UNSET _ VALUE , 10 , 11 , 12 ) ; 
 + writer . close ( ) ; 
 + loadSSTables ( dataDir , KS ) ; 
 + 
 + UntypedResultSet resultSet = QueryProcessor . executeInternal ( " SELECT * FROM " + KS + " . " + TABLE ) ; 
 + assertEquals ( 2 , resultSet . size ( ) ) ; 
 + 
 + Iterator < UntypedResultSet . Row > iter = resultSet . iterator ( ) ; 
 + UntypedResultSet . Row r1 = iter . next ( ) ; 
 + assertEquals ( 1 , r1 . getInt ( " k " ) ) ; 
 + assertEquals ( 2 , r1 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 3 , r1 . getInt ( " c2 " ) ) ; 
 + assertEquals ( " a " , r1 . getString ( " v " ) ) ; 
 + UntypedResultSet . Row r2 = iter . next ( ) ; 
 + assertEquals ( 4 , r2 . getInt ( " k " ) ) ; 
 + assertEquals ( 5 , r2 . getInt ( " c1 " ) ) ; 
 + assertEquals ( 6 , r2 . getInt ( " c2 " ) ) ; 
 + assertEquals ( " b " , r2 . getString ( " v " ) ) ; 
 + assertFalse ( iter . hasNext ( ) ) ; 
 + } 
 + 
 private static void loadSSTables ( File dataDir , String ks ) throws ExecutionException , InterruptedException 
 { 
 SSTableLoader loader = new SSTableLoader ( dataDir , new SSTableLoader . Client ( ) 
 diff - - git a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 index 84d4abd . . 9c0be4e 100644 
 - - - a / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 + + + b / tools / stress / src / org / apache / cassandra / stress / StressProfile . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import org . apache . cassandra . config . CFMetaData ; 
 import org . apache . cassandra . config . ColumnDefinition ; 
 import org . apache . cassandra . cql3 . CQLFragmentParser ; 
 import org . apache . cassandra . cql3 . CqlParser ; 
 + import org . apache . cassandra . cql3 . QueryProcessor ; 
 import org . apache . cassandra . cql3 . statements . CreateTableStatement ; 
 import org . apache . cassandra . exceptions . RequestValidationException ; 
 import org . apache . cassandra . exceptions . SyntaxException ; 
 @ @ - 62 , 8 + 63 , 6 @ @ import org . yaml . snakeyaml . Yaml ; 
 import org . yaml . snakeyaml . constructor . Constructor ; 
 import org . yaml . snakeyaml . error . YAMLException ; 
 
 - import static org . apache . cassandra . io . sstable . StressCQLSSTableWriter . parseStatement ; 
 - 
 public class StressProfile implements Serializable 
 { 
 private String keyspaceCql ; 
 @ @ - 449 , 7 + 448 , 7 @ @ public class StressProfile implements Serializable 
 
 public CreateTableStatement . RawStatement getCreateStatement ( ) 
 { 
 - CreateTableStatement . RawStatement createStatement = parseStatement ( tableCql , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; 
 + CreateTableStatement . RawStatement createStatement = QueryProcessor . parseStatement ( tableCql , CreateTableStatement . RawStatement . class , " CREATE TABLE " ) ; 
 createStatement . prepareKeyspace ( keyspaceName ) ; 
 
 return createStatement ;

NEAREST DIFF:
ELIMINATEDSENTENCE
